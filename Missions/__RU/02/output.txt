// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 50243 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5835 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 56692 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 56692 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16880 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16880 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16880 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16880 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1665
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1665
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 53949 0 1
// for i in 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 2
1509: PUSH
1510: FOR_IN
1511: IFFALSE 1554
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 71
1520: PPUSH
1521: LD_INT 2
1523: PPUSH
1524: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1528: LD_VAR 0 1
1532: PPUSH
1533: LD_INT 121
1535: PPUSH
1536: LD_INT 111
1538: PPUSH
1539: CALL_OW 171
// AddComUnload ( tmp ) ;
1543: LD_VAR 0 1
1547: PPUSH
1548: CALL_OW 219
// end ;
1552: GO 1510
1554: POP
1555: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1556: LD_VAR 0 1
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 113
1566: PPUSH
1567: LD_INT 113
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1577: LD_INT 83
1579: PPUSH
1580: LD_INT 46
1582: PPUSH
1583: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1587: LD_INT 83
1589: PPUSH
1590: LD_INT 47
1592: PPUSH
1593: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1597: LD_INT 83
1599: PPUSH
1600: LD_INT 48
1602: PPUSH
1603: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_INT 26
1614: PPUSH
1615: LD_INT 116
1617: PPUSH
1618: LD_INT 98
1620: PPUSH
1621: LD_INT 0
1623: PPUSH
1624: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1628: LD_INT 35
1630: PPUSH
1631: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 60
1642: PUSH
1643: EMPTY
1644: LIST
1645: PPUSH
1646: CALL_OW 72
1650: NOT
1651: IFFALSE 1628
// ComEnterUnit ( tmp , kirov ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 71
1660: PPUSH
1661: CALL_OW 120
// end ;
1665: PPOPN 2
1667: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1668: LD_INT 0
1670: PPUSH
1671: PPUSH
1672: PPUSH
1673: PPUSH
1674: PPUSH
1675: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1676: LD_ADDR_VAR 0 3
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 6
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 21
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// if not belkovTank then
1710: LD_VAR 0 3
1714: NOT
1715: IFFALSE 1808
// begin uc_side := 6 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 6
1724: ST_TO_ADDR
// uc_nation := 3 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 3
1732: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1733: LD_INT 21
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: LD_INT 42
1744: PPUSH
1745: LD_INT 100
1747: PPUSH
1748: CALL 21744 0 5
// belkovTank := CreateVehicle ;
1752: LD_ADDR_VAR 0 3
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1762: LD_VAR 0 3
1766: PPUSH
1767: LD_INT 5
1769: PPUSH
1770: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 127
1781: PPUSH
1782: LD_INT 118
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1792: LD_EXP 36
1796: PPUSH
1797: LD_VAR 0 3
1801: PPUSH
1802: CALL_OW 120
// end else
1806: GO 1822
// begin belkovTank := belkovTank [ 1 ] ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_VAR 0 3
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1822: LD_VAR 0 3
1826: PPUSH
1827: LD_INT 71
1829: PPUSH
1830: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 71
1841: PPUSH
1842: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1846: LD_VAR 0 3
1850: PPUSH
1851: CALL_OW 256
1855: PUSH
1856: LD_INT 1000
1858: LESS
1859: IFFALSE 1972
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: LD_EXP 43
1870: PPUSH
1871: LD_INT 25
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PPUSH
1881: CALL_OW 72
1885: ST_TO_ADDR
// if not mech then
1886: LD_VAR 0 4
1890: NOT
1891: IFFALSE 1907
// SetLives ( belkovTank , 1000 ) else
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_INT 1000
1900: PPUSH
1901: CALL_OW 234
1905: GO 1972
// begin ComExit ( mech ) ;
1907: LD_VAR 0 4
1911: PPUSH
1912: CALL 53949 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 6
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1972: LD_INT 70
1974: PPUSH
1975: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1979: LD_VAR 0 3
1983: PPUSH
1984: CALL_OW 256
1988: PUSH
1989: LD_INT 1000
1991: EQUAL
1992: IFFALSE 1972
// if mech then
1994: LD_VAR 0 4
1998: IFFALSE 2042
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2000: LD_VAR 0 4
2004: PPUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 6
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 2
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2042: LD_EXP 36
2046: PPUSH
2047: LD_INT 107
2049: PPUSH
2050: LD_INT 104
2052: PPUSH
2053: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2057: LD_EXP 36
2061: PPUSH
2062: LD_INT 95
2064: PPUSH
2065: LD_INT 101
2067: PPUSH
2068: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2072: LD_EXP 36
2076: PPUSH
2077: LD_INT 89
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 171
// wait ( 0 0$2 ) ;
2087: LD_INT 70
2089: PPUSH
2090: CALL_OW 67
// for i in belkovTeam do
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_EXP 45
2103: PUSH
2104: FOR_IN
2105: IFFALSE 2133
// begin ComExit ( i ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL 53949 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 89
2123: PPUSH
2124: LD_INT 100
2126: PPUSH
2127: CALL_OW 171
// end ;
2131: GO 2104
2133: POP
2134: POP
// tmp := Belkov union belkovTeam ;
2135: LD_ADDR_VAR 0 5
2139: PUSH
2140: LD_EXP 36
2144: PUSH
2145: LD_EXP 45
2149: UNION
2150: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2151: LD_INT 35
2153: PPUSH
2154: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2158: LD_VAR 0 5
2162: PPUSH
2163: LD_INT 60
2165: PUSH
2166: EMPTY
2167: LIST
2168: PPUSH
2169: CALL_OW 72
2173: NOT
2174: IFFALSE 2151
// ComMoveXY ( tmp , 71 , 65 ) ;
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_INT 71
2183: PPUSH
2184: LD_INT 65
2186: PPUSH
2187: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2191: LD_VAR 0 5
2195: PPUSH
2196: LD_INT 61
2198: PPUSH
2199: LD_INT 37
2201: PPUSH
2202: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2206: LD_VAR 0 5
2210: PPUSH
2211: LD_INT 67
2213: PPUSH
2214: LD_INT 17
2216: PPUSH
2217: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 70
2228: PPUSH
2229: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2233: LD_EXP 36
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 8
2243: PPUSH
2244: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2248: LD_EXP 36
2252: PPUSH
2253: LD_INT 105
2255: PPUSH
2256: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2260: LD_EXP 36
2264: PPUSH
2265: LD_INT 86
2267: PPUSH
2268: LD_INT 37
2270: PPUSH
2271: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2275: LD_EXP 36
2279: PPUSH
2280: LD_INT 105
2282: PPUSH
2283: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2287: LD_VAR 0 5
2291: PPUSH
2292: LD_INT 88
2294: PPUSH
2295: LD_INT 29
2297: PPUSH
2298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// for i in tmp do
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 5
2318: PUSH
2319: FOR_IN
2320: IFFALSE 2351
// if not HasTask ( i ) then
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 314
2331: NOT
2332: IFFALSE 2349
// AddComMoveXY ( tmp , 88 , 29 ) ;
2334: LD_VAR 0 5
2338: PPUSH
2339: LD_INT 88
2341: PPUSH
2342: LD_INT 29
2344: PPUSH
2345: CALL_OW 171
2349: GO 2319
2351: POP
2352: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2353: LD_VAR 0 5
2357: PPUSH
2358: LD_INT 95
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 72
2372: IFFALSE 2466
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2374: LD_ADDR_VAR 0 2
2378: PUSH
2379: LD_VAR 0 5
2383: PPUSH
2384: LD_INT 95
2386: PUSH
2387: LD_INT 6
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 72
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2464
// begin if i = Belkov then
2402: LD_VAR 0 2
2406: PUSH
2407: LD_EXP 36
2411: EQUAL
2412: IFFALSE 2453
// begin belkovTank := IsInUnit ( Belkov ) ;
2414: LD_ADDR_VAR 0 3
2418: PUSH
2419: LD_EXP 36
2423: PPUSH
2424: CALL_OW 310
2428: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2429: LD_ADDR_VAR 0 6
2433: PUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: CALL_OW 261
2443: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2444: LD_VAR 0 3
2448: PPUSH
2449: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL_OW 64
// end ;
2462: GO 2399
2464: POP
2465: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_INT 52
2473: PUSH
2474: EMPTY
2475: LIST
2476: PPUSH
2477: CALL_OW 72
2481: NOT
2482: IFFALSE 2302
// wait ( 1 1$20 ) ;
2484: LD_INT 2800
2486: PPUSH
2487: CALL_OW 67
// if fuel < 50 then
2491: LD_VAR 0 6
2495: PUSH
2496: LD_INT 50
2498: LESS
2499: IFFALSE 2509
// fuel := 50 ;
2501: LD_ADDR_VAR 0 6
2505: PUSH
2506: LD_INT 50
2508: ST_TO_ADDR
// uc_side := 6 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 6
2516: ST_TO_ADDR
// uc_nation := 3 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 3
2524: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2525: LD_INT 21
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_INT 42
2536: PPUSH
2537: LD_VAR 0 6
2541: PUSH
2542: LD_INT 5
2544: MINUS
2545: PPUSH
2546: CALL 21744 0 5
// belkovTank := CreateVehicle ;
2550: LD_ADDR_VAR 0 3
2554: PUSH
2555: CALL_OW 45
2559: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2560: LD_VAR 0 3
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 60
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2590: LD_EXP 36
2594: PPUSH
2595: LD_VAR 0 3
2599: PPUSH
2600: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2604: LD_EXP 36
2608: PPUSH
2609: LD_INT 72
2611: PPUSH
2612: LD_INT 26
2614: PPUSH
2615: CALL_OW 111
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// for i in belkovTeam do
2626: LD_ADDR_VAR 0 2
2630: PUSH
2631: LD_EXP 45
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: LD_INT 60
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2657: LD_VAR 0 2
2661: PPUSH
2662: LD_INT 65
2664: PPUSH
2665: LD_INT 18
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2672: LD_INT 28
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2636
2681: POP
2682: POP
// repeat wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2690: LD_EXP 14
2694: PUSH
2695: LD_EXP 45
2699: PPUSH
2700: LD_INT 60
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: NOT
2711: AND
2712: IFFALSE 2683
// americanTrap := true ;
2714: LD_ADDR_EXP 17
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// end ;
2722: LD_VAR 0 1
2726: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2727: LD_EXP 4
2731: PUSH
2732: LD_EXP 40
2736: PPUSH
2737: CALL_OW 302
2741: AND
2742: IFFALSE 3062
2744: GO 2746
2746: DISABLE
2747: LD_INT 0
2749: PPUSH
2750: PPUSH
2751: PPUSH
2752: PPUSH
// begin enable ;
2753: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2754: LD_EXP 8
2758: PUSH
2759: LD_INT 0
2761: GREATER
2762: PUSH
2763: LD_EXP 40
2767: PPUSH
2768: CALL_OW 314
2772: NOT
2773: AND
2774: IFFALSE 2943
// begin dir := rand ( 0 , 5 ) ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_INT 0
2783: PPUSH
2784: LD_INT 5
2786: PPUSH
2787: CALL_OW 12
2791: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2792: LD_ADDR_VAR 0 1
2796: PUSH
2797: LD_EXP 40
2801: PPUSH
2802: CALL_OW 250
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 5
2814: PPUSH
2815: CALL_OW 272
2819: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_EXP 40
2829: PPUSH
2830: CALL_OW 251
2834: PPUSH
2835: LD_VAR 0 4
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 273
2847: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2848: LD_VAR 0 1
2852: PPUSH
2853: LD_VAR 0 2
2857: PPUSH
2858: CALL_OW 488
2862: PUSH
2863: LD_INT 106
2865: PPUSH
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 297
2880: PUSH
2881: LD_INT 26
2883: LESS
2884: AND
2885: IFFALSE 2908
// AddComMoveXY ( Platonov , x , y ) else
2887: LD_EXP 40
2891: PPUSH
2892: LD_VAR 0 1
2896: PPUSH
2897: LD_VAR 0 2
2901: PPUSH
2902: CALL_OW 171
2906: GO 2923
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2908: LD_EXP 40
2912: PPUSH
2913: LD_INT 64
2915: PPUSH
2916: LD_INT 96
2918: PPUSH
2919: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2923: LD_EXP 40
2927: PPUSH
2928: LD_INT 105
2930: PPUSH
2931: LD_INT 315
2933: PPUSH
2934: CALL_OW 12
2938: PPUSH
2939: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2943: LD_EXP 8
2947: PUSH
2948: LD_INT 0
2950: LESSEQUAL
2951: IFFALSE 2997
// begin if not IsAt ( Platonov , 64 , 96 ) then
2953: LD_EXP 40
2957: PPUSH
2958: LD_INT 64
2960: PPUSH
2961: LD_INT 96
2963: PPUSH
2964: CALL_OW 307
2968: NOT
2969: IFFALSE 2995
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2971: LD_EXP 40
2975: PPUSH
2976: LD_INT 64
2978: PPUSH
2979: LD_INT 96
2981: PPUSH
2982: CALL_OW 111
// AddComHold ( Platonov ) ;
2986: LD_EXP 40
2990: PPUSH
2991: CALL_OW 200
// end ; end else
2995: GO 3062
// if tick mod 0 0$75 = 0 0$00 then
2997: LD_OWVAR 1
3001: PUSH
3002: LD_INT 2625
3004: MOD
3005: PUSH
3006: LD_INT 0
3008: EQUAL
3009: IFFALSE 3062
// begin amount := rand ( 2 , 5 ) ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: LD_INT 2
3018: PPUSH
3019: LD_INT 5
3021: PPUSH
3022: CALL_OW 12
3026: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3027: LD_ADDR_EXP 8
3031: PUSH
3032: LD_EXP 8
3036: PUSH
3037: LD_VAR 0 3
3041: PUSH
3042: LD_INT 10
3044: MUL
3045: MINUS
3046: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_INT 5
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL_OW 55
// end ; end ;
3062: PPOPN 4
3064: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3065: LD_INT 106
3067: PPUSH
3068: CALL_OW 274
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 275
3080: PUSH
3081: LD_INT 30
3083: LESS
3084: IFFALSE 3294
3086: GO 3088
3088: DISABLE
3089: LD_INT 0
3091: PPUSH
3092: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3093: LD_ADDR_VAR 0 2
3097: PUSH
3098: LD_EXP 43
3102: PPUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 60
3108: PUSH
3109: EMPTY
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 25
3118: PUSH
3119: LD_INT 2
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// if not eng then
3135: LD_VAR 0 2
3139: NOT
3140: IFFALSE 3144
// exit ;
3142: GO 3294
// ComExit ( eng ) ;
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL 53949 0 1
// i := 5 ;
3153: LD_ADDR_VAR 0 1
3157: PUSH
3158: LD_INT 5
3160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3168: LD_VAR 0 2
3172: PPUSH
3173: LD_INT 60
3175: PUSH
3176: EMPTY
3177: LIST
3178: PPUSH
3179: CALL_OW 72
3183: NOT
3184: PUSH
3185: LD_VAR 0 2
3189: AND
3190: IFFALSE 3260
// begin ComTransport ( eng , kirov , mat_oil ) ;
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 71
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 67
3214: PPUSH
3215: LD_INT 99
3217: PPUSH
3218: CALL_OW 171
// AddComUnload ( eng ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3231: LD_VAR 0 2
3235: PPUSH
3236: LD_INT 107
3238: PPUSH
3239: LD_INT 104
3241: PPUSH
3242: CALL_OW 171
// i := i - 1 ;
3246: LD_ADDR_VAR 0 1
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: LD_INT 1
3258: MINUS
3259: ST_TO_ADDR
// end ; until i = 0 ;
3260: LD_VAR 0 1
3264: PUSH
3265: LD_INT 0
3267: EQUAL
3268: IFFALSE 3161
// AddComMoveUnit ( eng , kirov ) ;
3270: LD_VAR 0 2
3274: PPUSH
3275: LD_INT 71
3277: PPUSH
3278: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_INT 71
3289: PPUSH
3290: CALL_OW 180
// end ;
3294: PPOPN 2
3296: END
// export function SendReinforcements ; var i ; begin
3297: LD_INT 0
3299: PPUSH
3300: PPUSH
// reinforcementsGained := true ;
3301: LD_ADDR_EXP 25
3305: PUSH
3306: LD_INT 1
3308: ST_TO_ADDR
// for i := 1 to 2 do
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 2
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3405
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3325: LD_EXP 44
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PPUSH
3336: CALL 53949 0 1
3340: IFFALSE 3349
// wait ( 0 0$0.3 ) ;
3342: LD_INT 10
3344: PPUSH
3345: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3349: LD_EXP 44
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: LD_INT 75
3362: PPUSH
3363: LD_INT 84
3365: PPUSH
3366: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3370: LD_EXP 44
3374: PUSH
3375: LD_VAR 0 2
3379: ARRAY
3380: PPUSH
3381: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3385: LD_EXP 44
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: CALL_OW 235
// end ;
3403: GO 3322
3405: POP
3406: POP
// end ;
3407: LD_VAR 0 1
3411: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3412: LD_EXP 21
3416: PUSH
3417: LD_EXP 18
3421: AND
3422: PUSH
3423: LD_EXP 43
3427: PPUSH
3428: LD_INT 25
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 72
3442: AND
3443: IFFALSE 3600
3445: GO 3447
3447: DISABLE
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_EXP 43
3461: PPUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PPUSH
3472: CALL_OW 72
3476: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 30
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: ST_TO_ADDR
// if not fac then
3511: LD_VAR 0 2
3515: NOT
3516: IFFALSE 3520
// exit ;
3518: GO 3600
// fac := fac [ 1 ] ;
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_VAR 0 2
3529: PUSH
3530: LD_INT 1
3532: ARRAY
3533: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3534: LD_VAR 0 2
3538: PPUSH
3539: CALL_OW 313
3543: PUSH
3544: LD_INT 0
3546: EQUAL
3547: IFFALSE 3579
// begin ComExit ( mech ) ;
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL 53949 0 1
// wait ( 3 ) ;
3558: LD_INT 3
3560: PPUSH
3561: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3565: LD_VAR 0 1
3569: PPUSH
3570: LD_VAR 0 2
3574: PPUSH
3575: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3579: LD_VAR 0 2
3583: PPUSH
3584: LD_INT 21
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 42
3595: PPUSH
3596: CALL_OW 125
// end ;
3600: PPOPN 2
3602: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3603: LD_INT 0
3605: PPUSH
3606: PPUSH
3607: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3608: LD_VAR 0 1
3612: PPUSH
3613: LD_INT 90
3615: PPUSH
3616: LD_INT 100
3618: PPUSH
3619: CALL_OW 111
// wait ( 0 0$10 ) ;
3623: LD_INT 350
3625: PPUSH
3626: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3642: LD_INT 35
3644: PPUSH
3645: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 110
3663: ST_TO_ADDR
// if tag = 0 then
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: IFFALSE 3743
// begin if not HasTask ( vehicle ) then
3674: LD_VAR 0 1
3678: PPUSH
3679: CALL_OW 314
3683: NOT
3684: IFFALSE 3701
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3686: LD_VAR 0 1
3690: PPUSH
3691: LD_INT 83
3693: PPUSH
3694: LD_INT 68
3696: PPUSH
3697: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 256
3710: PUSH
3711: LD_INT 750
3713: LESS
3714: IFFALSE 3743
// begin SetTag ( vehicle , 1 ) ;
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 93
3735: PPUSH
3736: LD_INT 102
3738: PPUSH
3739: CALL_OW 111
// end ; end ; if tag = 1 then
3743: LD_VAR 0 4
3747: PUSH
3748: LD_INT 1
3750: EQUAL
3751: IFFALSE 3841
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3753: LD_VAR 0 1
3757: PPUSH
3758: LD_INT 113
3760: PPUSH
3761: LD_INT 106
3763: PPUSH
3764: CALL_OW 307
3768: NOT
3769: PUSH
3770: LD_VAR 0 1
3774: PPUSH
3775: CALL_OW 314
3779: NOT
3780: AND
3781: IFFALSE 3798
// ComMoveXY ( vehicle , 113 , 106 ) ;
3783: LD_VAR 0 1
3787: PPUSH
3788: LD_INT 113
3790: PPUSH
3791: LD_INT 106
3793: PPUSH
3794: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3798: LD_VAR 0 1
3802: PPUSH
3803: LD_INT 113
3805: PPUSH
3806: LD_INT 106
3808: PPUSH
3809: CALL_OW 307
3813: IFFALSE 3841
// begin SetTag ( vehicle , 2 ) ;
3815: LD_VAR 0 1
3819: PPUSH
3820: LD_INT 2
3822: PPUSH
3823: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: CALL_OW 311
3836: PPUSH
3837: CALL 55253 0 1
// end ; end ; if tag = 2 then
3841: LD_VAR 0 4
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: IFFALSE 3913
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3851: LD_VAR 0 1
3855: PPUSH
3856: CALL_OW 256
3860: PUSH
3861: LD_INT 1000
3863: EQUAL
3864: PUSH
3865: LD_VAR 0 1
3869: PPUSH
3870: CALL_OW 311
3874: AND
3875: IFFALSE 3913
// begin ComMoveUnit ( vehicle , kirov ) ;
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 71
3884: PPUSH
3885: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: LD_INT 71
3896: PPUSH
3897: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 301
3922: PUSH
3923: LD_EXP 23
3927: OR
3928: IFFALSE 3642
// if eastOutpostDestroyed then
3930: LD_EXP 23
3934: IFFALSE 3951
// ComMoveXY ( vehicle , 111 , 105 ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: LD_INT 111
3943: PPUSH
3944: LD_INT 105
3946: PPUSH
3947: CALL_OW 111
// end ; end_of_file
3951: LD_VAR 0 2
3955: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
3961: PPUSH
// uc_side := 1 ;
3962: LD_ADDR_OWVAR 20
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// uc_nation := 1 ;
3970: LD_ADDR_OWVAR 21
3974: PUSH
3975: LD_INT 1
3977: ST_TO_ADDR
// usWestForces := [ ] ;
3978: LD_ADDR_EXP 46
3982: PUSH
3983: EMPTY
3984: ST_TO_ADDR
// usEastForces := [ ] ;
3985: LD_ADDR_EXP 47
3989: PUSH
3990: EMPTY
3991: ST_TO_ADDR
// bc_type := b_depot ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_INT 0
3999: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4000: LD_ADDR_OWVAR 43
4004: PUSH
4005: LD_OWVAR 67
4009: PUSH
4010: LD_INT 1
4012: MINUS
4013: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4014: LD_INT 48
4016: PPUSH
4017: LD_INT 54
4019: PPUSH
4020: LD_INT 2
4022: PPUSH
4023: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: LD_INT 55
4034: PUSH
4035: LD_INT 55
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 59
4048: PUSH
4049: LD_INT 61
4051: PUSH
4052: LD_INT 4
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: ST_TO_ADDR
// if Difficulty > 1 then
4064: LD_OWVAR 67
4068: PUSH
4069: LD_INT 1
4071: GREATER
4072: IFFALSE 4108
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4074: LD_ADDR_VAR 0 4
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_INT 46
4091: PUSH
4092: LD_INT 64
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 2
4107: ST_TO_ADDR
// if Difficulty > 2 then
4108: LD_OWVAR 67
4112: PUSH
4113: LD_INT 2
4115: GREATER
4116: IFFALSE 4152
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 36
4135: PUSH
4136: LD_INT 48
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 2
4151: ST_TO_ADDR
// bc_type := b_breastwork ;
4152: LD_ADDR_OWVAR 42
4156: PUSH
4157: LD_INT 31
4159: ST_TO_ADDR
// InitHC_All ( ) ;
4160: CALL_OW 584
// for i in tmp do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_VAR 0 4
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4319
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4177: LD_VAR 0 2
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_VAR 0 2
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 2
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4208: LD_INT 0
4210: PPUSH
4211: LD_OWVAR 67
4215: PPUSH
4216: CALL_OW 381
// un := CreateHuman ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: CALL_OW 44
4229: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4230: LD_ADDR_EXP 46
4234: PUSH
4235: LD_EXP 46
4239: PPUSH
4240: LD_EXP 46
4244: PUSH
4245: LD_INT 1
4247: PLUS
4248: PPUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: CALL_OW 1
4258: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_VAR 0 2
4268: PUSH
4269: LD_INT 3
4271: ARRAY
4272: PUSH
4273: LD_INT 3
4275: PLUS
4276: PUSH
4277: LD_INT 6
4279: MOD
4280: PPUSH
4281: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_VAR 0 2
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: LD_VAR 0 2
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: PPUSH
4308: CALL_OW 428
4312: PPUSH
4313: CALL_OW 52
// end ;
4317: GO 4174
4319: POP
4320: POP
// for i := 1 to 2 do
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: DOUBLE
4327: LD_INT 1
4329: DEC
4330: ST_TO_ADDR
4331: LD_INT 2
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4411
// begin PrepareEngineer ( false , Difficulty ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_OWVAR 67
4344: PPUSH
4345: CALL_OW 382
// un := CreateHuman ;
4349: LD_ADDR_VAR 0 3
4353: PUSH
4354: CALL_OW 44
4358: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_EXP 46
4368: PPUSH
4369: LD_EXP 46
4373: PUSH
4374: LD_INT 1
4376: PLUS
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: CALL_OW 1
4387: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4388: LD_VAR 0 3
4392: PPUSH
4393: LD_INT 54
4395: PPUSH
4396: LD_INT 58
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 0
4404: PPUSH
4405: CALL_OW 50
// end ;
4409: GO 4334
4411: POP
4412: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4413: LD_ADDR_VAR 0 4
4417: PUSH
4418: LD_INT 87
4420: PUSH
4421: LD_INT 62
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 89
4434: PUSH
4435: LD_INT 67
4437: PUSH
4438: LD_INT 1
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// if Difficulty > 2 then
4450: LD_OWVAR 67
4454: PUSH
4455: LD_INT 2
4457: GREATER
4458: IFFALSE 4494
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4460: LD_ADDR_VAR 0 4
4464: PUSH
4465: LD_VAR 0 4
4469: PPUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_INT 88
4477: PUSH
4478: LD_INT 53
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 2
4493: ST_TO_ADDR
// bc_type := b_breastwork ;
4494: LD_ADDR_OWVAR 42
4498: PUSH
4499: LD_INT 31
4501: ST_TO_ADDR
// for i in tmp do
4502: LD_ADDR_VAR 0 2
4506: PUSH
4507: LD_VAR 0 4
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4657
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4515: LD_VAR 0 2
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: LD_VAR 0 2
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PPUSH
4533: LD_VAR 0 2
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PPUSH
4542: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 381
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4568: LD_ADDR_EXP 47
4572: PUSH
4573: LD_EXP 47
4577: PPUSH
4578: LD_EXP 47
4582: PUSH
4583: LD_INT 1
4585: PLUS
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 1
4596: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_VAR 0 2
4606: PUSH
4607: LD_INT 3
4609: ARRAY
4610: PUSH
4611: LD_INT 3
4613: PLUS
4614: PUSH
4615: LD_INT 6
4617: MOD
4618: PPUSH
4619: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4623: LD_VAR 0 3
4627: PPUSH
4628: LD_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: PPUSH
4637: LD_VAR 0 2
4641: PUSH
4642: LD_INT 2
4644: ARRAY
4645: PPUSH
4646: CALL_OW 428
4650: PPUSH
4651: CALL_OW 52
// end ;
4655: GO 4512
4657: POP
4658: POP
// for i := 1 to 2 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_INT 2
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4749
// begin PrepareEngineer ( false , Difficulty ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_OWVAR 67
4682: PPUSH
4683: CALL_OW 382
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 3
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4697: LD_ADDR_EXP 47
4701: PUSH
4702: LD_EXP 47
4706: PPUSH
4707: LD_EXP 47
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: PPUSH
4716: LD_VAR 0 3
4720: PPUSH
4721: CALL_OW 1
4725: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4726: LD_VAR 0 3
4730: PPUSH
4731: LD_INT 95
4733: PPUSH
4734: LD_INT 65
4736: PPUSH
4737: LD_INT 2
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 50
// end ;
4747: GO 4672
4749: POP
4750: POP
// end ;
4751: LD_VAR 0 1
4755: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
// usTrapForces := [ ] ;
4761: LD_ADDR_EXP 48
4765: PUSH
4766: EMPTY
4767: ST_TO_ADDR
// uc_side := 1 ;
4768: LD_ADDR_OWVAR 20
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// uc_nation := 1 ;
4776: LD_ADDR_OWVAR 21
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// InitHC_All ( ) ;
4784: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4788: LD_INT 1
4790: PPUSH
4791: LD_OWVAR 67
4795: PPUSH
4796: CALL_OW 381
// un := CreateHuman ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: CALL_OW 44
4809: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4810: LD_ADDR_EXP 48
4814: PUSH
4815: LD_EXP 48
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: CALL 53561 0 2
4829: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4830: LD_ADDR_VAR 0 2
4834: PUSH
4835: DOUBLE
4836: LD_INT 1
4838: DEC
4839: ST_TO_ADDR
4840: LD_INT 5
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: LD_INT 8
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: LD_OWVAR 67
4862: ARRAY
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4911
// begin PrepareSoldier ( false , Difficulty ) ;
4867: LD_INT 0
4869: PPUSH
4870: LD_OWVAR 67
4874: PPUSH
4875: CALL_OW 381
// un := CreateHuman ;
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: CALL_OW 44
4888: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4889: LD_ADDR_EXP 48
4893: PUSH
4894: LD_EXP 48
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL 53561 0 2
4908: ST_TO_ADDR
// end ;
4909: GO 4864
4911: POP
4912: POP
// for i := 1 to 2 do
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: DOUBLE
4919: LD_INT 1
4921: DEC
4922: ST_TO_ADDR
4923: LD_INT 2
4925: PUSH
4926: FOR_TO
4927: IFFALSE 4973
// begin PrepareScientist ( false , Difficulty ) ;
4929: LD_INT 0
4931: PPUSH
4932: LD_OWVAR 67
4936: PPUSH
4937: CALL_OW 384
// un := CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4951: LD_ADDR_EXP 48
4955: PUSH
4956: LD_EXP 48
4960: PPUSH
4961: LD_VAR 0 3
4965: PPUSH
4966: CALL 53561 0 2
4970: ST_TO_ADDR
// end ;
4971: GO 4926
4973: POP
4974: POP
// end ;
4975: LD_VAR 0 1
4979: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4980: LD_EXP 46
4984: IFFALSE 5554
4986: GO 4988
4988: DISABLE
4989: LD_INT 0
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
4995: PPUSH
// begin enable ;
4996: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4997: LD_ADDR_VAR 0 3
5001: PUSH
5002: LD_INT 8
5004: PPUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 21
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 70
5033: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_EXP 46
5043: PPUSH
5044: LD_INT 25
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 72
5058: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5059: LD_ADDR_VAR 0 5
5063: PUSH
5064: LD_EXP 46
5068: PPUSH
5069: LD_INT 25
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PPUSH
5079: CALL_OW 72
5083: ST_TO_ADDR
// if eng then
5084: LD_VAR 0 4
5088: IFFALSE 5282
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5090: LD_VAR 0 3
5094: PPUSH
5095: LD_INT 3
5097: PUSH
5098: LD_INT 24
5100: PUSH
5101: LD_INT 1000
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: IFFALSE 5228
// begin for i in eng do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 4
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5224
// if IsInUnit ( i ) then
5131: LD_VAR 0 1
5135: PPUSH
5136: CALL_OW 310
5140: IFFALSE 5153
// ComExit ( i ) else
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL 53949 0 1
5151: GO 5222
// if IsOk ( i ) and not HasTask ( i ) then
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 302
5162: PUSH
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 314
5172: NOT
5173: AND
5174: IFFALSE 5222
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5176: LD_VAR 0 1
5180: PPUSH
5181: LD_VAR 0 3
5185: PPUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 24
5191: PUSH
5192: LD_INT 1000
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 72
5207: PPUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 74
5217: PPUSH
5218: CALL_OW 130
5222: GO 5128
5224: POP
5225: POP
// end else
5226: GO 5282
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5228: LD_VAR 0 3
5232: PPUSH
5233: LD_INT 30
5235: PUSH
5236: LD_INT 0
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PPUSH
5243: CALL_OW 72
5247: IFFALSE 5282
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_VAR 0 3
5258: PPUSH
5259: LD_INT 30
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 72
5273: PUSH
5274: LD_INT 1
5276: ARRAY
5277: PPUSH
5278: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5282: LD_VAR 0 5
5286: PPUSH
5287: LD_INT 50
5289: PUSH
5290: EMPTY
5291: LIST
5292: PPUSH
5293: CALL_OW 72
5297: PUSH
5298: LD_INT 18
5300: PPUSH
5301: LD_INT 81
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 70
5315: PUSH
5316: LD_INT 1
5318: GREATER
5319: AND
5320: PUSH
5321: LD_INT 18
5323: PPUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 70
5338: NOT
5339: AND
5340: IFFALSE 5394
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5342: LD_ADDR_VAR 0 1
5346: PUSH
5347: LD_VAR 0 5
5351: PPUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PPUSH
5358: CALL_OW 72
5362: PUSH
5363: FOR_IN
5364: IFFALSE 5392
// begin ComExit ( i ) ;
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL 53949 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 46
5382: PPUSH
5383: LD_INT 62
5385: PPUSH
5386: CALL_OW 174
// end ;
5390: GO 5363
5392: POP
5393: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5394: LD_INT 18
5396: PPUSH
5397: LD_INT 81
5399: PUSH
5400: LD_INT 1
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 70
5411: NOT
5412: PUSH
5413: LD_VAR 0 5
5417: PPUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 54
5423: PUSH
5424: EMPTY
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 50
5433: PUSH
5434: EMPTY
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 72
5445: AND
5446: PUSH
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 30
5454: PUSH
5455: LD_INT 31
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 58
5464: PUSH
5465: EMPTY
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 72
5476: AND
5477: IFFALSE 5554
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5479: LD_VAR 0 5
5483: PPUSH
5484: LD_INT 3
5486: PUSH
5487: LD_INT 54
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 50
5499: PUSH
5500: EMPTY
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 72
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 31
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 58
5533: PUSH
5534: EMPTY
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 72
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 120
// end ;
5554: PPOPN 5
5556: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5557: LD_EXP 47
5561: IFFALSE 5832
5563: GO 5565
5565: DISABLE
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
// begin enable ;
5571: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5572: LD_ADDR_VAR 0 2
5576: PUSH
5577: LD_INT 15
5579: PPUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 21
5592: PUSH
5593: LD_INT 3
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 70
5608: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: LD_EXP 47
5618: PPUSH
5619: LD_INT 25
5621: PUSH
5622: LD_INT 2
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 72
5633: ST_TO_ADDR
// if eng then
5634: LD_VAR 0 3
5638: IFFALSE 5832
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 24
5650: PUSH
5651: LD_INT 1000
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 72
5666: IFFALSE 5778
// begin for i in eng do
5668: LD_ADDR_VAR 0 1
5672: PUSH
5673: LD_VAR 0 3
5677: PUSH
5678: FOR_IN
5679: IFFALSE 5774
// if IsInUnit ( i ) then
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 310
5690: IFFALSE 5703
// ComExit ( i ) else
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL 53949 0 1
5701: GO 5772
// if IsOk ( i ) and not HasTask ( i ) then
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 302
5712: PUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 314
5722: NOT
5723: AND
5724: IFFALSE 5772
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_INT 3
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: LD_INT 1000
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 72
5757: PPUSH
5758: LD_VAR 0 1
5762: PPUSH
5763: CALL_OW 74
5767: PPUSH
5768: CALL_OW 130
5772: GO 5678
5774: POP
5775: POP
// end else
5776: GO 5832
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5778: LD_VAR 0 2
5782: PPUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: CALL_OW 72
5797: IFFALSE 5832
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5799: LD_VAR 0 3
5803: PPUSH
5804: LD_VAR 0 2
5808: PPUSH
5809: LD_INT 30
5811: PUSH
5812: LD_INT 0
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 72
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: CALL_OW 120
// end ; end_of_file
5832: PPOPN 3
5834: END
// export function Action ; var i , tmp ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
5839: PPUSH
// InGameOn ;
5840: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5844: LD_INT 112
5846: PPUSH
5847: LD_INT 107
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 12
5855: NEG
5856: PPUSH
5857: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5861: LD_INT 121
5863: PPUSH
5864: LD_INT 113
5866: PPUSH
5867: CALL_OW 86
// tmp := PrepareBurlak ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL 1244 0 0
5880: ST_TO_ADDR
// for i in tmp do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5945
// begin SetDir ( i , 5 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 5
5901: PPUSH
5902: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_INT 3
5913: PPUSH
5914: LD_INT 0
5916: PPUSH
5917: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_INT 121
5928: PPUSH
5929: LD_INT 111
5931: PPUSH
5932: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5936: LD_INT 28
5938: PPUSH
5939: CALL_OW 67
// end ;
5943: GO 5891
5945: POP
5946: POP
// CenterOnUnits ( Kurin ) ;
5947: LD_EXP 38
5951: PPUSH
5952: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5956: LD_EXP 34
5960: PPUSH
5961: LD_EXP 38
5965: PPUSH
5966: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5977: LD_EXP 34
5981: PPUSH
5982: LD_EXP 38
5986: PPUSH
5987: CALL_OW 296
5991: PUSH
5992: LD_INT 6
5994: LESS
5995: IFFALSE 5970
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5997: LD_EXP 34
6001: PUSH
6002: LD_EXP 35
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: LD_EXP 38
6015: PPUSH
6016: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6020: LD_ADDR_VAR 0 2
6024: PUSH
6025: LD_VAR 0 3
6029: PUSH
6030: LD_EXP 34
6034: PUSH
6035: LD_EXP 35
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: DIFF
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6112
// if GetClass ( i ) = class_soldier then
6048: LD_VAR 0 2
6052: PPUSH
6053: CALL_OW 257
6057: PUSH
6058: LD_INT 1
6060: EQUAL
6061: IFFALSE 6098
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6063: LD_VAR 0 2
6067: PPUSH
6068: LD_INT 95
6070: PUSH
6071: LD_INT 209
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: LD_INT 2
6085: MOD
6086: PUSH
6087: LD_INT 1
6089: PLUS
6090: ARRAY
6091: PPUSH
6092: CALL_OW 120
6096: GO 6110
// ComEnterUnit ( i , ru_lab ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 83
6105: PPUSH
6106: CALL_OW 120
6110: GO 6045
6112: POP
6113: POP
// Say ( Kurin , D1-Kur-1 ) ;
6114: LD_EXP 38
6118: PPUSH
6119: LD_STRING D1-Kur-1
6121: PPUSH
6122: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6126: LD_EXP 34
6130: PPUSH
6131: LD_STRING D1-Bur-1
6133: PPUSH
6134: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6138: LD_INT 10
6140: PPUSH
6141: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6145: LD_EXP 38
6149: PPUSH
6150: LD_STRING D1-Kur-2
6152: PPUSH
6153: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6157: LD_EXP 39
6161: PPUSH
6162: CALL 53949 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_INT 115
6173: PPUSH
6174: LD_INT 108
6176: PPUSH
6177: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6181: LD_EXP 39
6185: PPUSH
6186: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6190: LD_EXP 34
6194: PPUSH
6195: LD_STRING D1-Bur-2
6197: PPUSH
6198: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6202: LD_EXP 38
6206: PPUSH
6207: LD_STRING D1-Kur-3
6209: PPUSH
6210: CALL_OW 88
// if Gnyevko then
6214: LD_EXP 35
6218: IFFALSE 6232
// Say ( Kurin , D1-Kur-3a ) ;
6220: LD_EXP 38
6224: PPUSH
6225: LD_STRING D1-Kur-3a
6227: PPUSH
6228: CALL_OW 88
// InGameOff ;
6232: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6236: LD_STRING M1
6238: PPUSH
6239: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6243: LD_INT 112
6245: PPUSH
6246: LD_INT 107
6248: PPUSH
6249: LD_INT 3
6251: PPUSH
6252: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6256: LD_INT 66
6258: PPUSH
6259: LD_INT 99
6261: PPUSH
6262: LD_INT 3
6264: PPUSH
6265: LD_INT 7
6267: NEG
6268: PPUSH
6269: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6273: LD_INT 66
6275: PPUSH
6276: LD_INT 99
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6286: LD_EXP 39
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 235
// if Gnyevko then
6298: LD_EXP 35
6302: IFFALSE 6316
// SetSide ( Gnyevko , 3 ) ;
6304: LD_EXP 35
6308: PPUSH
6309: LD_INT 3
6311: PPUSH
6312: CALL_OW 235
// SaveForQuickRestart ;
6316: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6320: LD_EXP 38
6324: PPUSH
6325: LD_INT 71
6327: PPUSH
6328: CALL_OW 120
// wait ( 0 0$2 ) ;
6332: LD_INT 70
6334: PPUSH
6335: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6339: LD_EXP 43
6343: PUSH
6344: LD_INT 2
6346: ARRAY
6347: PPUSH
6348: CALL 53949 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6352: LD_EXP 43
6356: PUSH
6357: LD_INT 2
6359: ARRAY
6360: PPUSH
6361: LD_INT 98
6363: PPUSH
6364: LD_INT 98
6366: PPUSH
6367: CALL_OW 428
6371: PPUSH
6372: CALL_OW 180
// wait ( 0 0$12 ) ;
6376: LD_INT 420
6378: PPUSH
6379: CALL_OW 67
// kurinDontWannaTalk := true ;
6383: LD_ADDR_EXP 5
6387: PUSH
6388: LD_INT 1
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 1
6395: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6396: LD_EXP 5
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 91
6413: PUSH
6414: LD_INT 71
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 69
6433: AND
6434: IFFALSE 6621
6436: GO 6438
6438: DISABLE
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// begin enable ;
6443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6444: LD_ADDR_VAR 0 2
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 91
6461: PUSH
6462: LD_INT 71
6464: PUSH
6465: LD_INT 14
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: ST_TO_ADDR
// InGameOn ;
6482: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6486: LD_INT 116
6488: PPUSH
6489: LD_INT 107
6491: PPUSH
6492: LD_INT 3
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 330
// ComExit ( Kurin ) ;
6502: LD_EXP 38
6506: PPUSH
6507: CALL 53949 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6511: LD_EXP 38
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 1
6523: ARRAY
6524: PPUSH
6525: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6529: LD_EXP 38
6533: PPUSH
6534: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6538: LD_VAR 0 2
6542: PPUSH
6543: LD_INT 87
6545: PPUSH
6546: LD_INT 99
6548: PPUSH
6549: CALL_OW 111
// if kirovHasTank then
6553: LD_EXP 6
6557: IFFALSE 6573
// Say ( Kurin , D1a-Kur-1a ) else
6559: LD_EXP 38
6563: PPUSH
6564: LD_STRING D1a-Kur-1a
6566: PPUSH
6567: CALL_OW 88
6571: GO 6585
// Say ( Kurin , D1a-Kur-1 ) ;
6573: LD_EXP 38
6577: PPUSH
6578: LD_STRING D1a-Kur-1
6580: PPUSH
6581: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6585: LD_EXP 38
6589: PPUSH
6590: LD_INT 71
6592: PPUSH
6593: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6597: LD_INT 116
6599: PPUSH
6600: LD_INT 107
6602: PPUSH
6603: LD_INT 3
6605: PPUSH
6606: CALL_OW 331
// wait ( 0 0$3 ) ;
6610: LD_INT 105
6612: PPUSH
6613: CALL_OW 67
// InGameOff ;
6617: CALL_OW 9
// end ;
6621: PPOPN 2
6623: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6624: LD_INT 22
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 95
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PPUSH
6648: CALL_OW 69
6652: PUSH
6653: LD_EXP 7
6657: AND
6658: IFFALSE 6997
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// begin enable ;
6670: ENABLE
// blockNorth := false ;
6671: LD_ADDR_EXP 7
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// InGameOn ;
6679: CALL_OW 8
// DialogueOn ;
6683: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 95
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6721: LD_EXP 39
6725: PUSH
6726: LD_VAR 0 2
6730: IN
6731: PUSH
6732: LD_EXP 39
6736: PPUSH
6737: CALL_OW 302
6741: AND
6742: IFFALSE 6758
// Say ( Kovalyuk , D1b-Kov-1 ) else
6744: LD_EXP 39
6748: PPUSH
6749: LD_STRING D1b-Kov-1
6751: PPUSH
6752: CALL_OW 88
6756: GO 6793
// if Burlak in tmp and IsOk ( Burlak ) then
6758: LD_EXP 34
6762: PUSH
6763: LD_VAR 0 2
6767: IN
6768: PUSH
6769: LD_EXP 34
6773: PPUSH
6774: CALL_OW 302
6778: AND
6779: IFFALSE 6793
// Say ( Burlak , D1b-Bur-1 ) ;
6781: LD_EXP 34
6785: PPUSH
6786: LD_STRING D1b-Bur-1
6788: PPUSH
6789: CALL_OW 88
// DialogueOff ;
6793: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6797: LD_INT 22
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: LD_INT 21
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: PPUSH
6833: CALL_OW 141
// for i in tmp do
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: LD_VAR 0 2
6846: PUSH
6847: FOR_IN
6848: IFFALSE 6976
// begin d := rand ( 2 , 3 ) ;
6850: LD_ADDR_VAR 0 5
6854: PUSH
6855: LD_INT 2
6857: PPUSH
6858: LD_INT 3
6860: PPUSH
6861: CALL_OW 12
6865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: LD_VAR 0 1
6875: PPUSH
6876: CALL_OW 250
6880: PPUSH
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_INT 6
6888: PPUSH
6889: CALL_OW 272
6893: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6894: LD_ADDR_VAR 0 4
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 251
6908: PPUSH
6909: LD_VAR 0 5
6913: PPUSH
6914: LD_INT 6
6916: PPUSH
6917: CALL_OW 273
6921: ST_TO_ADDR
// if ValidHex ( x , y ) then
6922: LD_VAR 0 3
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: CALL_OW 488
6936: IFFALSE 6959
// ComMoveXY ( i , x , y ) else
6938: LD_VAR 0 1
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 111
6957: GO 6974
// ComMoveXY ( i , 79 , 85 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 79
6966: PPUSH
6967: LD_INT 85
6969: PPUSH
6970: CALL_OW 111
// end ;
6974: GO 6847
6976: POP
6977: POP
// wait ( 0 0$5 ) ;
6978: LD_INT 175
6980: PPUSH
6981: CALL_OW 67
// InGameOff ;
6985: CALL_OW 9
// blockNorth := true ;
6989: LD_ADDR_EXP 7
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// end ;
6997: PPOPN 5
6999: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7000: LD_EXP 44
7004: PPUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 72
7019: PUSH
7020: LD_EXP 4
7024: NOT
7025: AND
7026: IFFALSE 7428
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7038: LD_ADDR_VAR 0 5
7042: PUSH
7043: LD_EXP 44
7047: PPUSH
7048: LD_EXP 34
7052: PPUSH
7053: CALL_OW 74
7057: ST_TO_ADDR
// InGameOn ;
7058: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7062: LD_VAR 0 5
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 5
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_INT 3
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7092: LD_VAR 0 5
7096: PPUSH
7097: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7101: LD_VAR 0 5
7105: PPUSH
7106: LD_EXP 34
7110: PPUSH
7111: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7115: LD_VAR 0 5
7119: PPUSH
7120: LD_STRING D2-RSol1-1
7122: PPUSH
7123: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_VAR 0 5
7136: PPUSH
7137: CALL_OW 250
7141: PPUSH
7142: LD_VAR 0 5
7146: PPUSH
7147: CALL_OW 254
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 272
7159: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: LD_VAR 0 5
7169: PPUSH
7170: CALL_OW 251
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 254
7184: PPUSH
7185: LD_INT 3
7187: PPUSH
7188: CALL_OW 273
7192: ST_TO_ADDR
// if ValidHex ( x , y ) then
7193: LD_VAR 0 3
7197: PPUSH
7198: LD_VAR 0 4
7202: PPUSH
7203: CALL_OW 488
7207: IFFALSE 7239
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7209: LD_EXP 35
7213: PUSH
7214: LD_EXP 39
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PPUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 111
7237: GO 7262
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7239: LD_EXP 35
7243: PUSH
7244: LD_EXP 39
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: LD_VAR 0 5
7257: PPUSH
7258: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7262: LD_EXP 34
7266: PPUSH
7267: LD_VAR 0 5
7271: PPUSH
7272: CALL_OW 112
// p := 0 ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7284: LD_INT 35
7286: PPUSH
7287: CALL_OW 67
// p := p + 1 ;
7291: LD_ADDR_VAR 0 2
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 1
7303: PLUS
7304: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7305: LD_VAR 0 2
7309: PUSH
7310: LD_INT 10
7312: GREATER
7313: PUSH
7314: LD_EXP 34
7318: PPUSH
7319: LD_VAR 0 5
7323: PPUSH
7324: CALL_OW 296
7328: PUSH
7329: LD_INT 6
7331: LESS
7332: OR
7333: IFFALSE 7284
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7335: LD_EXP 34
7339: PUSH
7340: LD_EXP 35
7344: PUSH
7345: LD_EXP 39
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PPUSH
7355: LD_VAR 0 5
7359: PPUSH
7360: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7364: LD_EXP 34
7368: PPUSH
7369: LD_STRING D2-Bur-1
7371: PPUSH
7372: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7376: LD_VAR 0 5
7380: PPUSH
7381: LD_STRING D2-RSol1-2
7383: PPUSH
7384: CALL_OW 88
// ComHold ( nearestGuard ) ;
7388: LD_VAR 0 5
7392: PPUSH
7393: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7397: LD_VAR 0 5
7401: PPUSH
7402: CALL_OW 250
7406: PPUSH
7407: LD_VAR 0 5
7411: PPUSH
7412: CALL_OW 251
7416: PPUSH
7417: LD_INT 3
7419: PPUSH
7420: CALL_OW 331
// InGameOff ;
7424: CALL_OW 9
// end ;
7428: PPOPN 5
7430: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7431: LD_EXP 34
7435: PPUSH
7436: LD_EXP 40
7440: PPUSH
7441: CALL_OW 296
7445: PUSH
7446: LD_INT 10
7448: LESS
7449: PUSH
7450: LD_INT 3
7452: PPUSH
7453: LD_EXP 40
7457: PPUSH
7458: CALL_OW 292
7462: AND
7463: IFFALSE 7819
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
// begin InGameOn ;
7471: CALL_OW 8
// beriaVisited := true ;
7475: LD_ADDR_EXP 4
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7483: LD_EXP 34
7487: PPUSH
7488: LD_EXP 40
7492: PPUSH
7493: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7497: LD_EXP 35
7501: PUSH
7502: LD_EXP 39
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: LD_INT 68
7513: PPUSH
7514: LD_INT 99
7516: PPUSH
7517: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7521: LD_EXP 40
7525: PPUSH
7526: LD_EXP 34
7530: PPUSH
7531: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7535: LD_EXP 40
7539: PPUSH
7540: LD_STRING D2-Pla-2
7542: PPUSH
7543: CALL_OW 88
// p := 0 ;
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7555: LD_INT 35
7557: PPUSH
7558: CALL_OW 67
// p := p + 1 ;
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7576: LD_EXP 34
7580: PPUSH
7581: LD_EXP 40
7585: PPUSH
7586: CALL_OW 296
7590: PUSH
7591: LD_INT 6
7593: LESS
7594: PUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 8
7602: GREATER
7603: OR
7604: IFFALSE 7555
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7606: LD_EXP 34
7610: PUSH
7611: LD_EXP 35
7615: PUSH
7616: LD_EXP 39
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: LD_EXP 40
7630: PPUSH
7631: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7635: LD_EXP 34
7639: PPUSH
7640: LD_STRING D2-Bur-2
7642: PPUSH
7643: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 3
7652: PPUSH
7653: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7657: LD_EXP 40
7661: PPUSH
7662: LD_STRING D2-Pla-3
7664: PPUSH
7665: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7669: LD_EXP 34
7673: PPUSH
7674: LD_STRING D2-Bur-3
7676: PPUSH
7677: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7681: LD_EXP 40
7685: PPUSH
7686: LD_STRING D2-Pla-4
7688: PPUSH
7689: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7693: LD_EXP 34
7697: PPUSH
7698: LD_STRING D2-Bur-4
7700: PPUSH
7701: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7705: LD_EXP 40
7709: PPUSH
7710: LD_STRING D2-Pla-5
7712: PPUSH
7713: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7717: LD_INT 1
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: LD_INT 4
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL 7822 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7739: LD_EXP 40
7743: PPUSH
7744: LD_STRING D3-Pla-1
7746: PPUSH
7747: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7751: LD_EXP 34
7755: PPUSH
7756: LD_STRING D3-Bur-1
7758: PPUSH
7759: CALL_OW 88
// InGameOff ;
7763: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7767: LD_STRING M2a
7769: PPUSH
7770: CALL_OW 337
// SetSide ( beria , 3 ) ;
7774: LD_INT 106
7776: PPUSH
7777: LD_INT 3
7779: PPUSH
7780: CALL_OW 235
// if not Gnyevko then
7784: LD_EXP 35
7788: NOT
7789: IFFALSE 7810
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7791: LD_INT 106
7793: PPUSH
7794: CALL_OW 313
7798: PUSH
7799: LD_INT 1
7801: ARRAY
7802: PPUSH
7803: LD_INT 3
7805: PPUSH
7806: CALL_OW 235
// ComFree ( Platonov ) ;
7810: LD_EXP 40
7814: PPUSH
7815: CALL_OW 139
// end ;
7819: PPOPN 1
7821: END
// function AskPlatonov ( questions ) ; var q ; begin
7822: LD_INT 0
7824: PPUSH
7825: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7826: LD_ADDR_VAR 0 3
7830: PUSH
7831: LD_STRING QMoreInfo
7833: PPUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 98
7843: ST_TO_ADDR
// case q of 1 :
7844: LD_VAR 0 3
7848: PUSH
7849: LD_INT 1
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7884
7857: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7858: LD_EXP 34
7862: PPUSH
7863: LD_STRING D2a-Bur-1
7865: PPUSH
7866: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7870: LD_EXP 40
7874: PPUSH
7875: LD_STRING D2a-Pla-1
7877: PPUSH
7878: CALL_OW 88
// end ; 2 :
7882: GO 7955
7884: LD_INT 2
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7919
7892: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7893: LD_EXP 34
7897: PPUSH
7898: LD_STRING D2b-Bur-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7905: LD_EXP 40
7909: PPUSH
7910: LD_STRING D2b-Pla-1
7912: PPUSH
7913: CALL_OW 88
// end ; 3 :
7917: GO 7955
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7954
7927: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7928: LD_EXP 34
7932: PPUSH
7933: LD_STRING D2c-Bur-1
7935: PPUSH
7936: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7940: LD_EXP 40
7944: PPUSH
7945: LD_STRING D2c-Pla-1
7947: PPUSH
7948: CALL_OW 88
// end ; end ;
7952: GO 7955
7954: POP
// if q < 4 and questions > 2 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 4
7962: LESS
7963: PUSH
7964: LD_VAR 0 1
7968: PUSH
7969: LD_INT 2
7971: GREATER
7972: AND
7973: IFFALSE 7990
// AskPlatonov ( questions diff q ) ;
7975: LD_VAR 0 1
7979: PUSH
7980: LD_VAR 0 3
7984: DIFF
7985: PPUSH
7986: CALL 7822 0 1
// end ;
7990: LD_VAR 0 2
7994: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7995: LD_INT 0
7997: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7998: LD_EXP 40
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 2
8012: PPUSH
8013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8024: LD_EXP 40
8028: PPUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 2
8038: PPUSH
8039: CALL_OW 297
8043: PUSH
8044: LD_INT 5
8046: LESS
8047: PUSH
8048: LD_VAR 0 1
8052: PPUSH
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 283
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: AND
8067: IFFALSE 8017
// ComStop ( Platonov ) ;
8069: LD_EXP 40
8073: PPUSH
8074: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8078: LD_EXP 40
8082: PPUSH
8083: LD_STRING D4-Pla-1
8085: PPUSH
8086: CALL_OW 88
// end ;
8090: LD_VAR 0 3
8094: RET
// every 0 0$2 trigger hasLab do
8095: LD_EXP 9
8099: IFFALSE 8163
8101: GO 8103
8103: DISABLE
// begin DialogueOn ;
8104: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8108: LD_EXP 34
8112: PPUSH
8113: LD_STRING D5a-Bur-1
8115: PPUSH
8116: CALL_OW 88
// if hasWorkshop then
8120: LD_EXP 10
8124: IFFALSE 8140
// Say ( Platonov , D5a-Pla-1 ) else
8126: LD_EXP 40
8130: PPUSH
8131: LD_STRING D5a-Pla-1
8133: PPUSH
8134: CALL_OW 88
8138: GO 8152
// Say ( Platonov , D5a-Pla-1a ) ;
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D5a-Pla-1a
8147: PPUSH
8148: CALL_OW 88
// DialogueOff ;
8152: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8156: LD_STRING M2b
8158: PPUSH
8159: CALL_OW 337
// end ;
8163: END
// every 0 0$2 trigger hasWorkshop do
8164: LD_EXP 10
8168: IFFALSE 8232
8170: GO 8172
8172: DISABLE
// begin DialogueOn ;
8173: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8177: LD_EXP 34
8181: PPUSH
8182: LD_STRING D5b-Bur-1
8184: PPUSH
8185: CALL_OW 88
// if hasLab then
8189: LD_EXP 9
8193: IFFALSE 8209
// Say ( Platonov , D5b-Pla-1 ) else
8195: LD_EXP 40
8199: PPUSH
8200: LD_STRING D5b-Pla-1
8202: PPUSH
8203: CALL_OW 88
8207: GO 8221
// Say ( Platonov , D5b-Pla-1a ) ;
8209: LD_EXP 40
8213: PPUSH
8214: LD_STRING D5b-Pla-1a
8216: PPUSH
8217: CALL_OW 88
// DialogueOff ;
8221: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8225: LD_STRING M2c
8227: PPUSH
8228: CALL_OW 337
// end ;
8232: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8233: LD_EXP 9
8237: PUSH
8238: LD_EXP 10
8242: AND
8243: IFFALSE 8337
8245: GO 8247
8247: DISABLE
// begin DialogueOn ;
8248: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8252: LD_INT 47
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL_OW 321
8262: PUSH
8263: LD_INT 2
8265: EQUAL
8266: IFFALSE 8294
// begin Say ( Burlak , D7b-Bur-1 ) ;
8268: LD_EXP 34
8272: PPUSH
8273: LD_STRING D7b-Bur-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8280: LD_EXP 40
8284: PPUSH
8285: LD_STRING D7b-Pla-1
8287: PPUSH
8288: CALL_OW 88
// end else
8292: GO 8318
// begin Say ( Burlak , D7a-Bur-1 ) ;
8294: LD_EXP 34
8298: PPUSH
8299: LD_STRING D7a-Bur-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8306: LD_EXP 40
8310: PPUSH
8311: LD_STRING D7a-Pla-1
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8322: LD_STRING M2
8324: PPUSH
8325: CALL_OW 337
// hasToBuildTank := true ;
8329: LD_ADDR_EXP 11
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// end ;
8337: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8338: LD_EXP 4
8342: PUSH
8343: LD_EXP 9
8347: NOT
8348: PUSH
8349: LD_EXP 10
8353: NOT
8354: OR
8355: PUSH
8356: LD_EXP 11
8360: OR
8361: AND
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 3
8375: PUSH
8376: LD_INT 91
8378: PUSH
8379: LD_INT 106
8381: PUSH
8382: LD_INT 32
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: AND
8403: IFFALSE 8512
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
// begin enable ;
8411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8412: LD_ADDR_VAR 0 1
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_INT 106
8435: PUSH
8436: LD_INT 32
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 69
8456: ST_TO_ADDR
// InGameOn ;
8457: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8461: LD_VAR 0 1
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8474: LD_VAR 0 1
8478: PPUSH
8479: LD_INT 66
8481: PPUSH
8482: LD_INT 99
8484: PPUSH
8485: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8489: LD_EXP 40
8493: PPUSH
8494: LD_STRING D8-Pla-1
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$3 ) ;
8501: LD_INT 105
8503: PPUSH
8504: CALL_OW 67
// InGameOff ;
8508: CALL_OW 9
// end ;
8512: PPOPN 1
8514: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8515: LD_INT 21
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 23
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 30
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 30
8553: PUSH
8554: LD_INT 31
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 70
8575: PUSH
8576: LD_EXP 31
8580: NOT
8581: AND
8582: IFFALSE 8793
8584: GO 8586
8586: DISABLE
8587: LD_INT 0
8589: PPUSH
// begin enable ;
8590: ENABLE
// InGameOn ;
8591: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: LD_INT 21
8602: PPUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 23
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 30
8638: PUSH
8639: LD_INT 31
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 70
8660: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8661: LD_EXP 40
8665: PPUSH
8666: LD_VAR 0 1
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: CALL_OW 112
// wait ( 0 0$2 ) ;
8679: LD_INT 70
8681: PPUSH
8682: CALL_OW 67
// ComHold ( Platonov ) ;
8686: LD_EXP 40
8690: PPUSH
8691: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8695: LD_EXP 40
8699: PPUSH
8700: LD_STRING D6-Pla-1
8702: PPUSH
8703: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8707: LD_EXP 34
8711: PPUSH
8712: LD_STRING D6-Bur-1
8714: PPUSH
8715: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8719: LD_VAR 0 1
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8732: LD_VAR 0 1
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PPUSH
8741: CALL_OW 266
8745: PUSH
8746: LD_INT 31
8748: EQUAL
8749: IFFALSE 8771
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8751: LD_INT 106
8753: PPUSH
8754: CALL_OW 274
8758: PPUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_INT 10
8764: PPUSH
8765: CALL_OW 276
8769: GO 8789
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8771: LD_INT 106
8773: PPUSH
8774: CALL_OW 274
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 30
8784: PPUSH
8785: CALL_OW 276
// InGameOff ;
8789: CALL_OW 9
// end ;
8793: PPOPN 1
8795: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8796: LD_EXP 4
8800: PUSH
8801: LD_INT 21
8803: PPUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 23
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 71
8843: AND
8844: IFFALSE 9101
8846: GO 8848
8848: DISABLE
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
// begin enable ;
8853: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_INT 21
8861: PPUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 3
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 21
8884: PUSH
8885: LD_INT 3
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 71
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: ST_TO_ADDR
// InGameOn ;
8906: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8910: LD_EXP 40
8914: PPUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8924: LD_EXP 40
8928: PPUSH
8929: LD_STRING DPlatAngry
8931: PPUSH
8932: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8936: LD_EXP 34
8940: PPUSH
8941: LD_STRING D6-Bur-1
8943: PPUSH
8944: CALL_OW 88
// RemoveUnit ( tmp ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 64
// InGameOff ;
8957: CALL_OW 9
// amount := 0 ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 266
8978: PUSH
8979: LD_INT 31
8981: DOUBLE
8982: EQUAL
8983: IFTRUE 8987
8985: GO 8998
8987: POP
// amount := 10 ; b_lab :
8988: LD_ADDR_VAR 0 2
8992: PUSH
8993: LD_INT 10
8995: ST_TO_ADDR
8996: GO 9075
8998: LD_INT 6
9000: DOUBLE
9001: EQUAL
9002: IFTRUE 9006
9004: GO 9017
9006: POP
// amount := 20 ; b_armoury :
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 20
9014: ST_TO_ADDR
9015: GO 9075
9017: LD_INT 4
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9036
9025: POP
// amount := 30 ; b_workshop :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 30
9033: ST_TO_ADDR
9034: GO 9075
9036: LD_INT 2
9038: DOUBLE
9039: EQUAL
9040: IFTRUE 9044
9042: GO 9055
9044: POP
// amount := 40 ; b_oil_power :
9045: LD_ADDR_VAR 0 2
9049: PUSH
9050: LD_INT 40
9052: ST_TO_ADDR
9053: GO 9075
9055: LD_INT 26
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9074
9063: POP
// amount := 20 ; end ;
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 20
9071: ST_TO_ADDR
9072: GO 9075
9074: POP
// if amount then
9075: LD_VAR 0 2
9079: IFFALSE 9101
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9081: LD_INT 106
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: LD_VAR 0 2
9096: PPUSH
9097: CALL_OW 276
// end ;
9101: PPOPN 2
9103: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9104: LD_INT 22
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 92
9116: PUSH
9117: LD_INT 112
9119: PUSH
9120: LD_INT 155
9122: PUSH
9123: LD_INT 8
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 69
9140: PUSH
9141: LD_INT 2
9143: LESS
9144: PUSH
9145: LD_EXP 34
9149: PPUSH
9150: LD_INT 112
9152: PPUSH
9153: LD_INT 155
9155: PPUSH
9156: CALL_OW 297
9160: PUSH
9161: LD_INT 8
9163: LESS
9164: AND
9165: IFFALSE 9399
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9173: LD_INT 112
9175: PPUSH
9176: LD_INT 155
9178: PPUSH
9179: LD_INT 3
9181: PPUSH
9182: LD_INT 4
9184: NEG
9185: PPUSH
9186: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9190: LD_INT 1
9192: PPUSH
9193: LD_EXP 34
9197: PPUSH
9198: CALL_OW 471
// uc_side := 1 ;
9202: LD_ADDR_OWVAR 20
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// uc_nation := 1 ;
9210: LD_ADDR_OWVAR 21
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: LD_STRING Dickens
9225: PPUSH
9226: CALL_OW 25
9230: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9231: LD_VAR 0 1
9235: PPUSH
9236: LD_INT 112
9238: PPUSH
9239: LD_INT 155
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 48
// wait ( 0 0$2 ) ;
9249: LD_INT 70
9251: PPUSH
9252: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: LD_EXP 34
9265: PPUSH
9266: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9270: LD_VAR 0 1
9274: PPUSH
9275: LD_STRING DUsSpawnSol
9277: PPUSH
9278: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9282: LD_INT 1
9284: PPUSH
9285: LD_EXP 34
9289: PPUSH
9290: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9294: LD_INT 112
9296: PPUSH
9297: LD_INT 155
9299: PPUSH
9300: LD_INT 3
9302: PPUSH
9303: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_INT 77
9314: PPUSH
9315: LD_INT 152
9317: PPUSH
9318: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9322: LD_INT 35
9324: PPUSH
9325: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: CALL_OW 302
9338: NOT
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: LD_INT 77
9347: PPUSH
9348: LD_INT 152
9350: PPUSH
9351: CALL_OW 307
9355: OR
9356: IFFALSE 9322
// if not IsOk ( Dickens ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: IFFALSE 9372
// exit ;
9370: GO 9399
// RemoveUnit ( Dickens ) ;
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_EXP 3
9390: PUSH
9391: LD_STRING Dickens
9393: STR
9394: PPUSH
9395: CALL_OW 38
// end ;
9399: PPOPN 1
9401: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9402: LD_EXP 34
9406: PPUSH
9407: CALL_OW 256
9411: PUSH
9412: LD_INT 600
9414: LESS
9415: IFFALSE 9432
9417: GO 9419
9419: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9420: LD_EXP 34
9424: PPUSH
9425: LD_STRING DUsSpawnBur
9427: PPUSH
9428: CALL_OW 88
9432: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9433: LD_EXP 12
9437: IFFALSE 10499
9439: GO 9441
9441: DISABLE
9442: LD_INT 0
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
// begin hasToBuildTank := false ;
9448: LD_ADDR_EXP 11
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9456: LD_ADDR_EXP 5
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 21
9481: PUSH
9482: LD_INT 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: ST_TO_ADDR
// InGameOn ;
9498: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9502: LD_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: PPUSH
9511: CALL_OW 85
// wait ( 0 0$1 ) ;
9515: LD_INT 35
9517: PPUSH
9518: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9522: LD_EXP 34
9526: PPUSH
9527: LD_STRING D9-Bur-1
9529: PPUSH
9530: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9534: LD_EXP 40
9538: PPUSH
9539: LD_VAR 0 2
9543: PUSH
9544: LD_INT 1
9546: ARRAY
9547: PPUSH
9548: CALL_OW 112
// p := 0 ;
9552: LD_ADDR_VAR 0 3
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9560: LD_INT 35
9562: PPUSH
9563: CALL_OW 67
// p := p + 1 ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9581: LD_EXP 40
9585: PPUSH
9586: LD_VAR 0 2
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: CALL_OW 296
9599: PUSH
9600: LD_INT 8
9602: LESS
9603: PUSH
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 8
9611: GREATER
9612: OR
9613: IFFALSE 9560
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9615: LD_EXP 40
9619: PPUSH
9620: LD_VAR 0 2
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PPUSH
9629: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9633: LD_EXP 40
9637: PPUSH
9638: LD_STRING D9-Pla-1
9640: PPUSH
9641: CALL_OW 88
// ComFree ( Platonov ) ;
9645: LD_EXP 40
9649: PPUSH
9650: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9654: LD_EXP 40
9658: PPUSH
9659: LD_INT 64
9661: PPUSH
9662: LD_INT 98
9664: PPUSH
9665: CALL_OW 171
// InGameOff ;
9669: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9673: LD_STRING M3
9675: PPUSH
9676: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9680: LD_EXP 41
9684: PPUSH
9685: LD_INT 70
9687: PPUSH
9688: LD_INT 108
9690: PPUSH
9691: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9695: LD_EXP 41
9699: PPUSH
9700: CALL_OW 200
// wait ( 1 ) ;
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 67
// ComExit ( Belkov ) ;
9711: LD_EXP 36
9715: PPUSH
9716: CALL 53949 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9720: LD_EXP 36
9724: PPUSH
9725: LD_INT 113
9727: PPUSH
9728: LD_INT 104
9730: PPUSH
9731: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9735: LD_EXP 36
9739: PPUSH
9740: LD_INT 116
9742: PPUSH
9743: LD_INT 108
9745: PPUSH
9746: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9750: LD_INT 35
9752: PPUSH
9753: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9757: LD_INT 22
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 91
9779: PUSH
9780: LD_INT 71
9782: PUSH
9783: LD_INT 8
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: IFFALSE 9750
// InGameOn ;
9802: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 91
9833: PUSH
9834: LD_INT 71
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: ST_TO_ADDR
// if belkovTeam < 3 then
9855: LD_EXP 45
9859: PUSH
9860: LD_INT 3
9862: LESS
9863: IFFALSE 9948
// begin for i := belkovTeam to 3 do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_EXP 45
9875: DEC
9876: ST_TO_ADDR
9877: LD_INT 3
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9946
// begin un := kirovBaseSquad [ 1 ] ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_EXP 43
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9897: LD_ADDR_EXP 43
9901: PUSH
9902: LD_EXP 43
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 3
9914: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9915: LD_ADDR_EXP 45
9919: PUSH
9920: LD_EXP 45
9924: PPUSH
9925: LD_EXP 45
9929: PUSH
9930: LD_INT 1
9932: PLUS
9933: PPUSH
9934: LD_VAR 0 4
9938: PPUSH
9939: CALL_OW 1
9943: ST_TO_ADDR
// end ;
9944: GO 9880
9946: POP
9947: POP
// end ; if Kirilenkova then
9948: LD_EXP 37
9952: IFFALSE 9976
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9954: LD_ADDR_EXP 45
9958: PUSH
9959: LD_EXP 45
9963: PPUSH
9964: LD_EXP 37
9968: PPUSH
9969: CALL 53561 0 2
9973: ST_TO_ADDR
9974: GO 10015
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9976: LD_ADDR_EXP 45
9980: PUSH
9981: LD_EXP 45
9985: PPUSH
9986: LD_EXP 43
9990: PPUSH
9991: LD_INT 25
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 72
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: CALL 53561 0 2
10014: ST_TO_ADDR
// ComExit ( Kurin ) ;
10015: LD_EXP 38
10019: PPUSH
10020: CALL 53949 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10024: LD_EXP 38
10028: PPUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_INT 1
10036: ARRAY
10037: PPUSH
10038: CALL_OW 179
// wait ( 0 0$1 ) ;
10042: LD_INT 35
10044: PPUSH
10045: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10049: LD_VAR 0 2
10053: PUSH
10054: LD_INT 1
10056: ARRAY
10057: PPUSH
10058: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PPUSH
10076: CALL_OW 311
10080: ST_TO_ADDR
// ComExit ( un ) ;
10081: LD_VAR 0 4
10085: PPUSH
10086: CALL 53949 0 1
// wait ( 0 0$1 ) ;
10090: LD_INT 35
10092: PPUSH
10093: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_EXP 38
10106: PPUSH
10107: CALL_OW 179
// ComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10111: LD_EXP 36
10115: PPUSH
10116: LD_VAR 0 2
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: CALL_OW 120
// wait ( 0 0$0.3 ) ;
10129: LD_INT 10
10131: PPUSH
10132: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10136: LD_EXP 38
10140: PPUSH
10141: LD_STRING D10-Kur-1
10143: PPUSH
10144: CALL_OW 88
// ComAttackPlace ( Belkov , 122 , 112 ) ;
10148: LD_EXP 36
10152: PPUSH
10153: LD_INT 122
10155: PPUSH
10156: LD_INT 112
10158: PPUSH
10159: CALL_OW 116
// wait ( 0 0$2 ) ;
10163: LD_INT 70
10165: PPUSH
10166: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10170: LD_EXP 36
10174: PPUSH
10175: LD_STRING D10-Bel-1
10177: PPUSH
10178: CALL_OW 88
// if belkovBrother then
10182: LD_EXP 32
10186: IFFALSE 10238
// begin Say ( Burlak , D10-Bur-1 ) ;
10188: LD_EXP 34
10192: PPUSH
10193: LD_STRING D10-Bur-1
10195: PPUSH
10196: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10200: LD_EXP 36
10204: PPUSH
10205: LD_STRING D10-Bel-2
10207: PPUSH
10208: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10212: LD_EXP 34
10216: PPUSH
10217: LD_STRING D10-Bur-2
10219: PPUSH
10220: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10224: LD_EXP 38
10228: PPUSH
10229: LD_STRING D10-Kur-2a
10231: PPUSH
10232: CALL_OW 88
// end else
10236: GO 10250
// begin Say ( Kurin , D10-Kur-2 ) end ;
10238: LD_EXP 38
10242: PPUSH
10243: LD_STRING D10-Kur-2
10245: PPUSH
10246: CALL_OW 88
// wait ( 0 0$2 ) ;
10250: LD_INT 70
10252: PPUSH
10253: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10257: LD_EXP 38
10261: PPUSH
10262: LD_STRING D10-Kur-2b
10264: PPUSH
10265: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10269: LD_VAR 0 4
10273: PPUSH
10274: LD_INT 66
10276: PPUSH
10277: LD_INT 97
10279: PPUSH
10280: CALL_OW 111
// wait ( 0 0$5 ) ;
10284: LD_INT 175
10286: PPUSH
10287: CALL_OW 67
// InGameOff ;
10291: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10295: LD_EXP 33
10299: PPUSH
10300: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10304: LD_STRING M4
10306: PPUSH
10307: CALL_OW 337
// wait ( 0 0$6 ) ;
10311: LD_INT 210
10313: PPUSH
10314: CALL_OW 67
// kurinDontWannaTalk := true ;
10318: LD_ADDR_EXP 5
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10326: LD_INT 140
10328: PPUSH
10329: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10340: LD_EXP 34
10344: PPUSH
10345: CALL_OW 310
10349: PUSH
10350: LD_EXP 34
10354: PPUSH
10355: LD_INT 106
10357: PPUSH
10358: CALL_OW 296
10362: PUSH
10363: LD_INT 12
10365: LESS
10366: OR
10367: IFFALSE 10333
// DialogueOn ;
10369: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10373: LD_EXP 40
10377: PPUSH
10378: LD_STRING D11-Pla-1
10380: PPUSH
10381: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10385: LD_EXP 34
10389: PPUSH
10390: LD_STRING D11-Bur-1
10392: PPUSH
10393: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 69
10425: PUSH
10426: LD_INT 1
10428: GREATER
10429: IFFALSE 10443
// Say ( Burlak , D11-Bur-1a ) ;
10431: LD_EXP 34
10435: PPUSH
10436: LD_STRING D11-Bur-1a
10438: PPUSH
10439: CALL_OW 88
// DialogueOff ;
10443: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10447: LD_ADDR_EXP 8
10451: PUSH
10452: LD_INT 160
10454: PUSH
10455: LD_INT 150
10457: PUSH
10458: LD_INT 140
10460: PUSH
10461: LD_INT 120
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_OWVAR 67
10474: ARRAY
10475: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10476: LD_STRING M5
10478: PPUSH
10479: CALL_OW 337
// kirovHasTank := true ;
10483: LD_ADDR_EXP 6
10487: PUSH
10488: LD_INT 1
10490: ST_TO_ADDR
// hasToBuildTank := true ;
10491: LD_ADDR_EXP 11
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// end ;
10499: PPOPN 4
10501: END
// every 0 0$2 trigger allianceAttacked do
10502: LD_EXP 13
10506: IFFALSE 10545
10508: GO 10510
10510: DISABLE
// begin DialogueOn ;
10511: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10515: LD_EXP 38
10519: PPUSH
10520: LD_STRING DArestKur
10522: PPUSH
10523: CALL_OW 88
// dwait ( 0 0$1 ) ;
10527: LD_INT 35
10529: PPUSH
10530: CALL_OW 68
// YouLost ( SelfAttack ) ;
10534: LD_STRING SelfAttack
10536: PPUSH
10537: CALL_OW 104
// DialogueOff ;
10541: CALL_OW 7
// end ;
10545: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10546: LD_INT 22
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 21
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PPUSH
10570: CALL_OW 69
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_INT 3
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PPUSH
10599: CALL_OW 69
10603: GREATEREQUAL
10604: PUSH
10605: LD_EXP 6
10609: AND
10610: IFFALSE 10780
10612: GO 10614
10614: DISABLE
// begin hasToBuildTank := false ;
10615: LD_ADDR_EXP 11
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// blockNorth := false ;
10623: LD_ADDR_EXP 7
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// InGameOn ;
10631: CALL_OW 8
// wait ( 0 0$2 ) ;
10635: LD_INT 70
10637: PPUSH
10638: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10642: LD_INT 106
10644: PPUSH
10645: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10649: LD_EXP 40
10653: PPUSH
10654: LD_INT 65
10656: PPUSH
10657: LD_INT 97
10659: PPUSH
10660: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10664: LD_EXP 40
10668: PPUSH
10669: LD_EXP 34
10673: PPUSH
10674: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10678: LD_EXP 34
10682: PPUSH
10683: LD_STRING D12-Bur-1
10685: PPUSH
10686: CALL_OW 88
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10697: LD_EXP 40
10701: PPUSH
10702: LD_STRING D12-Pla-1
10704: PPUSH
10705: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10709: LD_EXP 34
10713: PPUSH
10714: LD_STRING D12-Bur-2
10716: PPUSH
10717: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10721: LD_EXP 40
10725: PPUSH
10726: LD_STRING D12-Pla-2
10728: PPUSH
10729: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10733: LD_EXP 34
10737: PPUSH
10738: LD_STRING D12-Bur-3
10740: PPUSH
10741: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10745: LD_EXP 40
10749: PPUSH
10750: LD_STRING D12-Pla-3
10752: PPUSH
10753: CALL_OW 88
// hasAllTanks := true ;
10757: LD_ADDR_EXP 14
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// InGameOff ;
10765: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10769: LD_STRING M6
10771: PPUSH
10772: CALL_OW 337
// PrepareAmerican ;
10776: CALL 3956 0 0
// end ;
10780: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10781: LD_EXP 17
10785: IFFALSE 12502
10787: GO 10789
10789: DISABLE
10790: LD_INT 0
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
// begin PrepareAmericanTrap ;
10799: CALL 4756 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_EXP 48
10812: PPUSH
10813: LD_INT 26
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 72
10827: PUSH
10828: LD_INT 1
10830: ARRAY
10831: ST_TO_ADDR
// InGameOn ;
10832: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10836: LD_INT 69
10838: PPUSH
10839: LD_INT 22
10841: PPUSH
10842: CALL_OW 86
// wait ( 0 0$1 ) ;
10846: LD_INT 35
10848: PPUSH
10849: CALL_OW 67
// DialogueOn ;
10853: CALL_OW 6
// game_speed := 4 ;
10857: LD_ADDR_OWVAR 65
10861: PUSH
10862: LD_INT 4
10864: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10865: LD_VAR 0 2
10869: PPUSH
10870: LD_STRING D13-Sol1-1
10872: PPUSH
10873: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10877: LD_EXP 36
10881: PPUSH
10882: LD_STRING D13-Bel-1
10884: PPUSH
10885: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10889: LD_EXP 38
10893: PPUSH
10894: LD_STRING D13-Kur-1
10896: PPUSH
10897: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10901: LD_INT 10
10903: PPUSH
10904: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10908: LD_EXP 36
10912: PPUSH
10913: LD_STRING D13-Bel-2
10915: PPUSH
10916: CALL_OW 94
// DialogueOff ;
10920: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10924: LD_EXP 36
10928: PPUSH
10929: LD_INT 76
10931: PPUSH
10932: LD_INT 20
10934: PPUSH
10935: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10939: LD_EXP 45
10943: PPUSH
10944: LD_INT 72
10946: PPUSH
10947: LD_INT 20
10949: PPUSH
10950: CALL_OW 111
// wait ( 0 0$2 ) ;
10954: LD_INT 70
10956: PPUSH
10957: CALL_OW 67
// for i in usTrapForces do
10961: LD_ADDR_VAR 0 1
10965: PUSH
10966: LD_EXP 48
10970: PUSH
10971: FOR_IN
10972: IFFALSE 11005
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
10974: LD_VAR 0 1
10978: PPUSH
10979: LD_INT 7
10981: PPUSH
10982: LD_INT 0
10984: PPUSH
10985: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
10989: LD_VAR 0 1
10993: PPUSH
10994: LD_EXP 36
10998: PPUSH
10999: CALL_OW 119
// end ;
11003: GO 10971
11005: POP
11006: POP
// wait ( 0 0$0.3 ) ;
11007: LD_INT 10
11009: PPUSH
11010: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11014: LD_EXP 48
11018: PPUSH
11019: LD_INT 65
11021: PPUSH
11022: LD_INT 18
11024: PPUSH
11025: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11029: LD_INT 70
11031: PPUSH
11032: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11036: LD_EXP 48
11040: PPUSH
11041: LD_INT 101
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 72
11055: PUSH
11056: LD_INT 3
11058: GREATER
11059: IFFALSE 11029
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11061: LD_INT 65
11063: PPUSH
11064: LD_INT 18
11066: PPUSH
11067: LD_INT 3
11069: PPUSH
11070: LD_INT 26
11072: NEG
11073: PPUSH
11074: CALL_OW 330
// DialogueOn ;
11078: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11082: LD_VAR 0 2
11086: PPUSH
11087: LD_STRING D14-Sol1-1
11089: PPUSH
11090: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11094: LD_EXP 36
11098: PPUSH
11099: LD_STRING D14-Bel-1
11101: PPUSH
11102: CALL_OW 88
// DialogueOff ;
11106: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11110: LD_INT 65
11112: PPUSH
11113: LD_INT 18
11115: PPUSH
11116: LD_INT 3
11118: PPUSH
11119: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11123: LD_EXP 45
11127: PPUSH
11128: LD_INT 31
11130: PPUSH
11131: LD_INT 9
11133: PPUSH
11134: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11138: LD_EXP 48
11142: PPUSH
11143: LD_INT 50
11145: PPUSH
11146: LD_INT 16
11148: PPUSH
11149: CALL_OW 174
// wait ( 0 0$2 ) ;
11153: LD_INT 70
11155: PPUSH
11156: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11160: LD_ADDR_VAR 0 6
11164: PUSH
11165: LD_EXP 36
11169: PPUSH
11170: CALL_OW 310
11174: ST_TO_ADDR
// if not belkovTank then
11175: LD_VAR 0 6
11179: NOT
11180: IFFALSE 11220
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11182: LD_ADDR_VAR 0 6
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 6
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: PUSH
11216: LD_INT 1
11218: ARRAY
11219: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11220: LD_EXP 36
11224: PPUSH
11225: LD_INT 58
11227: PPUSH
11228: LD_INT 21
11230: PPUSH
11231: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11235: LD_EXP 36
11239: PPUSH
11240: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11244: LD_EXP 36
11248: PPUSH
11249: LD_INT 53
11251: PPUSH
11252: LD_INT 18
11254: PPUSH
11255: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11259: LD_EXP 36
11263: PPUSH
11264: LD_INT 31
11266: PPUSH
11267: LD_INT 9
11269: PPUSH
11270: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11274: LD_INT 35
11276: PPUSH
11277: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11281: LD_ADDR_VAR 0 1
11285: PUSH
11286: LD_EXP 36
11290: PUSH
11291: LD_EXP 45
11295: UNION
11296: PUSH
11297: LD_VAR 0 6
11301: UNION
11302: PUSH
11303: FOR_IN
11304: IFFALSE 11335
// if GetLives ( i ) < 800 then
11306: LD_VAR 0 1
11310: PPUSH
11311: CALL_OW 256
11315: PUSH
11316: LD_INT 800
11318: LESS
11319: IFFALSE 11333
// SetLives ( i , 800 ) ;
11321: LD_VAR 0 1
11325: PPUSH
11326: LD_INT 800
11328: PPUSH
11329: CALL_OW 234
11333: GO 11303
11335: POP
11336: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11337: LD_EXP 36
11341: PPUSH
11342: LD_INT 31
11344: PPUSH
11345: LD_INT 9
11347: PPUSH
11348: CALL_OW 297
11352: PUSH
11353: LD_INT 4
11355: LESS
11356: IFFALSE 11274
// for i := 1 to Difficulty do
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: DOUBLE
11364: LD_INT 1
11366: DEC
11367: ST_TO_ADDR
11368: LD_OWVAR 67
11372: PUSH
11373: FOR_TO
11374: IFFALSE 11416
// if i <= belkovTeam then
11376: LD_VAR 0 1
11380: PUSH
11381: LD_EXP 45
11385: LESSEQUAL
11386: IFFALSE 11414
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11388: LD_EXP 45
11392: PUSH
11393: LD_VAR 0 1
11397: ARRAY
11398: PPUSH
11399: LD_INT 600
11401: PPUSH
11402: LD_INT 800
11404: PPUSH
11405: CALL_OW 12
11409: PPUSH
11410: CALL_OW 234
11414: GO 11373
11416: POP
11417: POP
// SetLives ( Belkov , 820 ) ;
11418: LD_EXP 36
11422: PPUSH
11423: LD_INT 820
11425: PPUSH
11426: CALL_OW 234
// InGameOff ;
11430: CALL_OW 9
// DialogueOn ;
11434: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11438: LD_EXP 36
11442: PPUSH
11443: LD_STRING D14-Bel-1a
11445: PPUSH
11446: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11450: LD_EXP 38
11454: PPUSH
11455: LD_STRING D14-Kur-1
11457: PPUSH
11458: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11462: LD_EXP 36
11466: PPUSH
11467: LD_STRING D14-Bel-2
11469: PPUSH
11470: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11474: LD_EXP 38
11478: PPUSH
11479: LD_STRING D14-Kur-2
11481: PPUSH
11482: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11486: LD_EXP 34
11490: PPUSH
11491: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11495: LD_EXP 34
11499: PPUSH
11500: LD_STRING D14a-Bur-1
11502: PPUSH
11503: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11507: LD_EXP 40
11511: PPUSH
11512: LD_STRING D14a-Pla-1
11514: PPUSH
11515: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11519: LD_EXP 34
11523: PPUSH
11524: LD_STRING D14a-Bur-2
11526: PPUSH
11527: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11531: LD_EXP 40
11535: PPUSH
11536: LD_STRING D14a-Pla-2
11538: PPUSH
11539: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11543: LD_EXP 34
11547: PPUSH
11548: LD_STRING D14a-Bur-3
11550: PPUSH
11551: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11555: LD_EXP 40
11559: PPUSH
11560: LD_STRING D14a-Pla-3
11562: PPUSH
11563: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11567: LD_EXP 34
11571: PPUSH
11572: LD_STRING D14a-Bur-4
11574: PPUSH
11575: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11579: LD_EXP 40
11583: PPUSH
11584: LD_STRING D14a-Pla-4
11586: PPUSH
11587: CALL_OW 88
// DialogueOff ;
11591: CALL_OW 7
// belkovTrapped := true ;
11595: LD_ADDR_EXP 18
11599: PUSH
11600: LD_INT 1
11602: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11603: LD_EXP 48
11607: PPUSH
11608: LD_INT 68
11610: PPUSH
11611: LD_INT 16
11613: PPUSH
11614: CALL_OW 111
// if belkovTank then
11618: LD_VAR 0 6
11622: IFFALSE 11661
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11624: LD_EXP 48
11628: PUSH
11629: LD_INT 1
11631: ARRAY
11632: PPUSH
11633: LD_VAR 0 6
11637: PPUSH
11638: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11642: LD_EXP 48
11646: PUSH
11647: LD_INT 1
11649: ARRAY
11650: PPUSH
11651: LD_INT 69
11653: PPUSH
11654: LD_INT 20
11656: PPUSH
11657: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11661: LD_EXP 36
11665: PPUSH
11666: LD_INT 40
11668: PPUSH
11669: LD_INT 17
11671: PPUSH
11672: CALL_OW 111
// AddComHold ( Belkov ) ;
11676: LD_EXP 36
11680: PPUSH
11681: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11685: LD_ADDR_VAR 0 3
11689: PUSH
11690: LD_INT 44
11692: PUSH
11693: LD_INT 18
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 42
11702: PUSH
11703: LD_INT 16
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 40
11712: PUSH
11713: LD_INT 15
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 44
11722: PUSH
11723: LD_INT 20
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 42
11732: PUSH
11733: LD_INT 20
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 42
11742: PUSH
11743: LD_INT 12
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 42
11752: PUSH
11753: LD_INT 8
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11769: LD_ADDR_VAR 0 1
11773: PUSH
11774: LD_EXP 45
11778: PPUSH
11779: LD_INT 25
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 72
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11861
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 1
11809: ARRAY
11810: PUSH
11811: LD_INT 1
11813: ARRAY
11814: PPUSH
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 1
11822: ARRAY
11823: PUSH
11824: LD_INT 2
11826: ARRAY
11827: PPUSH
11828: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11832: LD_ADDR_VAR 0 3
11836: PUSH
11837: LD_VAR 0 3
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 3
11849: ST_TO_ADDR
// AddComCrawl ( i ) ;
11850: LD_VAR 0 1
11854: PPUSH
11855: CALL_OW 197
// end ;
11859: GO 11794
11861: POP
11862: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11863: LD_EXP 45
11867: PPUSH
11868: LD_INT 25
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 72
11882: IFFALSE 11914
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11884: LD_EXP 45
11888: PPUSH
11889: LD_INT 25
11891: PUSH
11892: LD_INT 4
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 72
11903: PPUSH
11904: LD_INT 38
11906: PPUSH
11907: LD_INT 18
11909: PPUSH
11910: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11914: LD_ADDR_VAR 0 7
11918: PUSH
11919: LD_INT 9450
11921: PUSH
11922: LD_INT 8400
11924: PUSH
11925: LD_INT 6650
11927: PUSH
11928: LD_INT 5250
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_OWVAR 67
11941: ARRAY
11942: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11943: LD_INT 35
11945: PPUSH
11946: CALL_OW 67
// timer := timer - 0 0$1 ;
11950: LD_ADDR_VAR 0 7
11954: PUSH
11955: LD_VAR 0 7
11959: PUSH
11960: LD_INT 35
11962: MINUS
11963: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
11964: LD_INT 19
11966: PPUSH
11967: LD_INT 22
11969: PUSH
11970: LD_INT 3
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 70
11981: IFFALSE 11991
// timer := 0 0$0 ;
11983: LD_ADDR_VAR 0 7
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// until timer <= 0 ;
11991: LD_VAR 0 7
11995: PUSH
11996: LD_INT 0
11998: LESSEQUAL
11999: IFFALSE 11943
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12001: LD_EXP 48
12005: PPUSH
12006: LD_INT 50
12008: PUSH
12009: EMPTY
12010: LIST
12011: PPUSH
12012: CALL_OW 72
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12502
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12021: LD_ADDR_VAR 0 4
12025: PUSH
12026: LD_EXP 48
12030: PPUSH
12031: LD_INT 25
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 3
12043: PUSH
12044: LD_INT 54
12046: PUSH
12047: EMPTY
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 72
12062: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: LD_EXP 48
12072: PPUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 4
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 54
12088: PUSH
12089: EMPTY
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 72
12104: ST_TO_ADDR
// for i in sol do
12105: LD_ADDR_VAR 0 1
12109: PUSH
12110: LD_VAR 0 4
12114: PUSH
12115: FOR_IN
12116: IFFALSE 12132
// SetTag ( i , 0 ) ;
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_INT 0
12125: PPUSH
12126: CALL_OW 109
12130: GO 12115
12132: POP
12133: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12134: LD_VAR 0 5
12138: PPUSH
12139: LD_INT 60
12141: PPUSH
12142: LD_INT 8
12144: PPUSH
12145: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12149: LD_INT 22
12151: PUSH
12152: LD_INT 1
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 2
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: IFFALSE 12218
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12179: LD_INT 22
12181: PUSH
12182: LD_INT 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 21
12191: PUSH
12192: LD_INT 2
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PPUSH
12203: CALL_OW 69
12207: PPUSH
12208: LD_INT 53
12210: PPUSH
12211: LD_INT 24
12213: PPUSH
12214: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12218: LD_INT 18
12220: PPUSH
12221: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12225: LD_ADDR_VAR 0 4
12229: PUSH
12230: LD_EXP 48
12234: PPUSH
12235: LD_INT 25
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 50
12247: PUSH
12248: EMPTY
12249: LIST
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 54
12256: PUSH
12257: EMPTY
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: PPUSH
12269: CALL_OW 72
12273: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12274: LD_VAR 0 4
12278: PPUSH
12279: LD_INT 0
12281: PPUSH
12282: CALL 51135 0 2
12286: PUSH
12287: LD_VAR 0 4
12291: EQUAL
12292: IFFALSE 12331
// begin wait ( 0 0$3 ) ;
12294: LD_INT 105
12296: PPUSH
12297: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12301: LD_VAR 0 4
12305: PPUSH
12306: LD_INT 41
12308: PPUSH
12309: LD_INT 18
12311: PPUSH
12312: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12316: LD_VAR 0 5
12320: PPUSH
12321: LD_INT 60
12323: PPUSH
12324: LD_INT 8
12326: PPUSH
12327: CALL_OW 111
// end ; for i in sol do
12331: LD_ADDR_VAR 0 1
12335: PUSH
12336: LD_VAR 0 4
12340: PUSH
12341: FOR_IN
12342: IFFALSE 12417
// if GetLives ( i ) < 800 then
12344: LD_VAR 0 1
12348: PPUSH
12349: CALL_OW 256
12353: PUSH
12354: LD_INT 800
12356: LESS
12357: IFFALSE 12388
// begin SetTag ( i , 1 ) ;
12359: LD_VAR 0 1
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12371: LD_VAR 0 1
12375: PPUSH
12376: LD_INT 60
12378: PPUSH
12379: LD_INT 8
12381: PPUSH
12382: CALL_OW 111
// end else
12386: GO 12415
// if GetLives ( i ) = 1000 then
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 256
12397: PUSH
12398: LD_INT 1000
12400: EQUAL
12401: IFFALSE 12415
// SetTag ( i , 0 ) ;
12403: LD_VAR 0 1
12407: PPUSH
12408: LD_INT 0
12410: PPUSH
12411: CALL_OW 109
12415: GO 12341
12417: POP
12418: POP
// until belkovDied or not sol ;
12419: LD_EXP 19
12423: PUSH
12424: LD_VAR 0 4
12428: NOT
12429: OR
12430: IFFALSE 12218
// if not sol then
12432: LD_VAR 0 4
12436: NOT
12437: IFFALSE 12441
// exit ;
12439: GO 12502
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12441: LD_VAR 0 4
12445: PUSH
12446: LD_VAR 0 5
12450: ADD
12451: PPUSH
12452: LD_INT 56
12454: PPUSH
12455: LD_INT 25
12457: PPUSH
12458: CALL_OW 111
// wait ( 0 0$30 ) ;
12462: LD_INT 1050
12464: PPUSH
12465: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12469: LD_EXP 48
12473: PPUSH
12474: LD_INT 66
12476: PPUSH
12477: LD_INT 96
12479: PPUSH
12480: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12484: LD_VAR 0 5
12488: PPUSH
12489: LD_VAR 0 4
12493: PUSH
12494: LD_INT 1
12496: ARRAY
12497: PPUSH
12498: CALL_OW 112
// end ;
12502: PPOPN 7
12504: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12505: LD_EXP 18
12509: PUSH
12510: LD_EXP 19
12514: NOT
12515: AND
12516: PUSH
12517: LD_INT 9
12519: PPUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 3
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PPUSH
12530: CALL_OW 70
12534: AND
12535: IFFALSE 12855
12537: GO 12539
12539: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12540: LD_STRING QAttackAm
12542: PPUSH
12543: CALL_OW 97
12547: PUSH
12548: LD_INT 1
12550: DOUBLE
12551: EQUAL
12552: IFTRUE 12556
12554: GO 12623
12556: POP
// begin initiative := true ;
12557: LD_ADDR_EXP 31
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// DialogueOn ;
12565: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12569: LD_EXP 34
12573: PPUSH
12574: LD_STRING D17-Bur-1
12576: PPUSH
12577: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12581: LD_EXP 40
12585: PPUSH
12586: LD_STRING D17-Pla-1
12588: PPUSH
12589: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12593: LD_EXP 34
12597: PPUSH
12598: LD_STRING D17-Bur-2
12600: PPUSH
12601: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12605: LD_EXP 40
12609: PPUSH
12610: LD_STRING D17-Pla-2
12612: PPUSH
12613: CALL_OW 94
// DialogueOff ;
12617: CALL_OW 7
// end ; 2 :
12621: GO 12785
12623: LD_INT 2
12625: DOUBLE
12626: EQUAL
12627: IFTRUE 12631
12629: GO 12723
12631: POP
// begin initiative := true ;
12632: LD_ADDR_EXP 31
12636: PUSH
12637: LD_INT 1
12639: ST_TO_ADDR
// DialogueOn ;
12640: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12644: LD_EXP 34
12648: PPUSH
12649: LD_STRING D18-Bur-1
12651: PPUSH
12652: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12656: LD_EXP 40
12660: PPUSH
12661: LD_STRING D18-Pla-1
12663: PPUSH
12664: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12668: LD_EXP 34
12672: PPUSH
12673: LD_STRING D18-Bur-2
12675: PPUSH
12676: CALL_OW 88
// if not reinforcementsGained then
12680: LD_EXP 25
12684: NOT
12685: IFFALSE 12705
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12687: LD_EXP 40
12691: PPUSH
12692: LD_STRING D18-Pla-2
12694: PPUSH
12695: CALL_OW 94
// SendReinforcements ;
12699: CALL 3297 0 0
// end else
12703: GO 12717
// SayRadio ( Platonov , D22-Pla-1b ) ;
12705: LD_EXP 40
12709: PPUSH
12710: LD_STRING D22-Pla-1b
12712: PPUSH
12713: CALL_OW 94
// DialogueOff ;
12717: CALL_OW 7
// end ; 3 :
12721: GO 12785
12723: LD_INT 3
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12784
12731: POP
// begin if IsOk ( Gnyevko ) then
12732: LD_EXP 35
12736: PPUSH
12737: CALL_OW 302
12741: IFFALSE 12757
// Say ( Gnyevko , D19A-Gny-1 ) else
12743: LD_EXP 35
12747: PPUSH
12748: LD_STRING D19A-Gny-1
12750: PPUSH
12751: CALL_OW 88
12755: GO 12780
// if IsOk ( Kovalyuk ) then
12757: LD_EXP 39
12761: PPUSH
12762: CALL_OW 302
12766: IFFALSE 12780
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12768: LD_EXP 39
12772: PPUSH
12773: LD_STRING D19A-Kov-1
12775: PPUSH
12776: CALL_OW 88
// exit ;
12780: GO 12855
// end ; end ;
12782: GO 12785
12784: POP
// if IsOk ( Gnyevko ) then
12785: LD_EXP 35
12789: PPUSH
12790: CALL_OW 302
12794: IFFALSE 12820
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12796: LD_EXP 35
12800: PPUSH
12801: LD_STRING D19-Gny-1
12803: PPUSH
12804: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12808: LD_EXP 34
12812: PPUSH
12813: LD_STRING D19-Bur-1
12815: PPUSH
12816: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12820: LD_EXP 39
12824: PPUSH
12825: CALL_OW 302
12829: IFFALSE 12855
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12831: LD_EXP 39
12835: PPUSH
12836: LD_STRING D19-Kov-1
12838: PPUSH
12839: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12843: LD_EXP 34
12847: PPUSH
12848: LD_STRING D19-Bur-2
12850: PPUSH
12851: CALL_OW 88
// end ; end ;
12855: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12856: LD_EXP 18
12860: PUSH
12861: LD_EXP 19
12865: NOT
12866: AND
12867: PUSH
12868: LD_INT 16
12870: PPUSH
12871: LD_INT 22
12873: PUSH
12874: LD_INT 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 70
12885: AND
12886: IFFALSE 13114
12888: GO 12890
12890: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12891: LD_STRING QAttackBw
12893: PPUSH
12894: CALL_OW 97
12898: PUSH
12899: LD_INT 1
12901: DOUBLE
12902: EQUAL
12903: IFTRUE 12907
12905: GO 12950
12907: POP
// begin initiative := true ;
12908: LD_ADDR_EXP 31
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// DialogueOn ;
12916: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12920: LD_EXP 34
12924: PPUSH
12925: LD_STRING D21-Bur-1
12927: PPUSH
12928: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12932: LD_EXP 40
12936: PPUSH
12937: LD_STRING D21-Pla-1
12939: PPUSH
12940: CALL_OW 94
// DialogueOff ;
12944: CALL_OW 7
// end ; 2 :
12948: GO 13065
12950: LD_INT 2
12952: DOUBLE
12953: EQUAL
12954: IFTRUE 12958
12956: GO 13053
12958: POP
// begin initiative := true ;
12959: LD_ADDR_EXP 31
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// DialogueOn ;
12967: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
12971: LD_EXP 34
12975: PPUSH
12976: LD_STRING D22-Bur-1
12978: PPUSH
12979: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
12983: LD_EXP 25
12987: NOT
12988: PUSH
12989: LD_EXP 22
12993: AND
12994: IFFALSE 13014
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
12996: LD_EXP 40
13000: PPUSH
13001: LD_STRING D22-Pla-1
13003: PPUSH
13004: CALL_OW 94
// SendReinforcements ;
13008: CALL 3297 0 0
// end else
13012: GO 13047
// if not westOutpostDestroyed then
13014: LD_EXP 22
13018: NOT
13019: IFFALSE 13035
// SayRadio ( Platonov , D22-Pla-1a ) else
13021: LD_EXP 40
13025: PPUSH
13026: LD_STRING D22-Pla-1a
13028: PPUSH
13029: CALL_OW 94
13033: GO 13047
// SayRadio ( Platonov , D22-Pla-1b ) ;
13035: LD_EXP 40
13039: PPUSH
13040: LD_STRING D22-Pla-1b
13042: PPUSH
13043: CALL_OW 94
// DialogueOff ;
13047: CALL_OW 7
// end ; 3 :
13051: GO 13065
13053: LD_INT 3
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 13064
13061: POP
// begin end ; end ;
13062: GO 13065
13064: POP
// ChangeMissionObjectives ( M9 ) ;
13065: LD_STRING M9
13067: PPUSH
13068: CALL_OW 337
// wait ( 0 0$1 ) ;
13072: LD_INT 35
13074: PPUSH
13075: CALL_OW 67
// if IsOk ( Gnyevko ) then
13079: LD_EXP 35
13083: PPUSH
13084: CALL_OW 302
13088: IFFALSE 13114
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13090: LD_EXP 35
13094: PPUSH
13095: LD_STRING D23-Gny-1
13097: PPUSH
13098: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13102: LD_EXP 34
13106: PPUSH
13107: LD_STRING D23-Bur-1
13109: PPUSH
13110: CALL_OW 88
// end ; end ;
13114: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13115: LD_EXP 18
13119: PUSH
13120: LD_EXP 19
13124: AND
13125: PUSH
13126: LD_EXP 28
13130: NOT
13131: AND
13132: PUSH
13133: LD_EXP 45
13137: PPUSH
13138: LD_INT 91
13140: PUSH
13141: LD_EXP 34
13145: PUSH
13146: LD_INT 8
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 72
13158: AND
13159: IFFALSE 13203
13161: GO 13163
13163: DISABLE
13164: LD_INT 0
13166: PPUSH
// begin for i in belkovTeam do
13167: LD_ADDR_VAR 0 1
13171: PUSH
13172: LD_EXP 45
13176: PUSH
13177: FOR_IN
13178: IFFALSE 13194
// SetSide ( i , 3 ) ;
13180: LD_VAR 0 1
13184: PPUSH
13185: LD_INT 3
13187: PPUSH
13188: CALL_OW 235
13192: GO 13177
13194: POP
13195: POP
// ChangeMissionObjectives ( M9a ) ;
13196: LD_STRING M9a
13198: PPUSH
13199: CALL_OW 337
// end ;
13203: PPOPN 1
13205: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13206: LD_EXP 34
13210: PPUSH
13211: LD_EXP 36
13215: PPUSH
13216: CALL_OW 296
13220: PUSH
13221: LD_INT 6
13223: LESS
13224: PUSH
13225: LD_EXP 18
13229: AND
13230: PUSH
13231: LD_EXP 36
13235: PPUSH
13236: CALL_OW 302
13240: AND
13241: PUSH
13242: LD_INT 3
13244: PPUSH
13245: CALL_OW 463
13249: NOT
13250: AND
13251: IFFALSE 13566
13253: GO 13255
13255: DISABLE
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
// begin InGameOn ;
13260: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13264: LD_EXP 34
13268: PPUSH
13269: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13273: LD_EXP 34
13277: PPUSH
13278: LD_INT 37
13280: PPUSH
13281: LD_INT 17
13283: PPUSH
13284: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13288: LD_EXP 34
13292: PPUSH
13293: LD_EXP 36
13297: PPUSH
13298: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13302: LD_EXP 36
13306: PPUSH
13307: LD_EXP 34
13311: PPUSH
13312: CALL_OW 119
// p := 0 ;
13316: LD_ADDR_VAR 0 2
13320: PUSH
13321: LD_INT 0
13323: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13324: LD_INT 35
13326: PPUSH
13327: CALL_OW 67
// p := p + 1 ;
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_VAR 0 2
13340: PUSH
13341: LD_INT 1
13343: PLUS
13344: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13345: LD_EXP 34
13349: PPUSH
13350: LD_EXP 36
13354: PPUSH
13355: CALL_OW 296
13359: PUSH
13360: LD_INT 4
13362: LESS
13363: PUSH
13364: LD_VAR 0 2
13368: PUSH
13369: LD_INT 6
13371: GREATER
13372: OR
13373: IFFALSE 13324
// ComTurnUnit ( Burlak , Belkov ) ;
13375: LD_EXP 34
13379: PPUSH
13380: LD_EXP 36
13384: PPUSH
13385: CALL_OW 119
// DialogueOn ;
13389: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13393: LD_EXP 36
13397: PPUSH
13398: LD_STRING D24-Bel-1
13400: PPUSH
13401: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13405: LD_EXP 34
13409: PPUSH
13410: LD_STRING D24-Bur-1
13412: PPUSH
13413: CALL_OW 88
// if belkovBrother then
13417: LD_EXP 32
13421: IFFALSE 13435
// Say ( Burlak , D24-Bur-1a ) ;
13423: LD_EXP 34
13427: PPUSH
13428: LD_STRING D24-Bur-1a
13430: PPUSH
13431: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13435: LD_EXP 36
13439: PPUSH
13440: LD_STRING D24-Bel-2
13442: PPUSH
13443: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13447: LD_EXP 34
13451: PPUSH
13452: LD_STRING D24-Bur-2
13454: PPUSH
13455: CALL_OW 88
// if vehCaptured then
13459: LD_EXP 16
13463: IFFALSE 13477
// Say ( Burlak , D24-Bur-2a ) ;
13465: LD_EXP 34
13469: PPUSH
13470: LD_STRING D24-Bur-2a
13472: PPUSH
13473: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13477: LD_EXP 40
13481: PPUSH
13482: LD_STRING D24-Pla-2
13484: PPUSH
13485: CALL_OW 94
// if not westOutpostDestroyed then
13489: LD_EXP 22
13493: NOT
13494: IFFALSE 13508
// SayRadio ( Platonov , D24-Pla-2a ) ;
13496: LD_EXP 40
13500: PPUSH
13501: LD_STRING D24-Pla-2a
13503: PPUSH
13504: CALL_OW 94
// DialogueOff ;
13508: CALL_OW 7
// InGameOff ;
13512: CALL_OW 9
// belkovSaved := true ;
13516: LD_ADDR_EXP 28
13520: PUSH
13521: LD_INT 1
13523: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13524: LD_ADDR_VAR 0 1
13528: PUSH
13529: LD_EXP 45
13533: PUSH
13534: LD_EXP 36
13538: UNION
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13557
// SetSide ( i , 3 ) ;
13543: LD_VAR 0 1
13547: PPUSH
13548: LD_INT 3
13550: PPUSH
13551: CALL_OW 235
13555: GO 13540
13557: POP
13558: POP
// ChangeMissionObjectives ( M9a ) ;
13559: LD_STRING M9a
13561: PPUSH
13562: CALL_OW 337
// end ;
13566: PPOPN 2
13568: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13569: LD_INT 3
13571: PPUSH
13572: LD_INT 22
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 95
13584: PUSH
13585: LD_INT 8
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 69
13600: PPUSH
13601: CALL 56813 0 2
13605: IFFALSE 13790
13607: GO 13609
13609: DISABLE
// begin DialogueOn ;
13610: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13614: LD_INT 49
13616: PPUSH
13617: LD_INT 57
13619: PPUSH
13620: LD_INT 3
13622: PPUSH
13623: LD_INT 12
13625: NEG
13626: PPUSH
13627: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13631: LD_INT 49
13633: PPUSH
13634: LD_INT 57
13636: PPUSH
13637: LD_INT 3
13639: PPUSH
13640: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13644: LD_INT 49
13646: PPUSH
13647: LD_INT 57
13649: PPUSH
13650: CALL_OW 84
// if not eastOutpostDiscovered then
13654: LD_EXP 21
13658: NOT
13659: IFFALSE 13699
// begin Say ( Burlak , D15-Bur-1 ) ;
13661: LD_EXP 34
13665: PPUSH
13666: LD_STRING D15-Bur-1
13668: PPUSH
13669: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13673: LD_EXP 35
13677: PPUSH
13678: LD_STRING D15-Gny-1
13680: PPUSH
13681: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13685: LD_EXP 39
13689: PPUSH
13690: LD_STRING D15-Kov-1
13692: PPUSH
13693: CALL_OW 88
// end else
13697: GO 13735
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13699: LD_EXP 39
13703: PPUSH
13704: LD_STRING D16-Kov-1
13706: PPUSH
13707: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13711: LD_EXP 34
13715: PPUSH
13716: LD_STRING D16-Bur-1
13718: PPUSH
13719: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13723: LD_EXP 35
13727: PPUSH
13728: LD_STRING D16-Gny-1
13730: PPUSH
13731: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13735: LD_EXP 34
13739: PPUSH
13740: LD_STRING D15-Bur-2
13742: PPUSH
13743: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13747: LD_EXP 39
13751: PPUSH
13752: LD_STRING D15-Kov-2
13754: PPUSH
13755: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13759: LD_EXP 34
13763: PPUSH
13764: LD_STRING D15-Bur-3
13766: PPUSH
13767: CALL_OW 88
// DialogueOff ;
13771: CALL_OW 7
// westOutpostDiscovered := true ;
13775: LD_ADDR_EXP 20
13779: PUSH
13780: LD_INT 1
13782: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13783: LD_STRING M7
13785: PPUSH
13786: CALL_OW 337
// end ;
13790: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13791: LD_INT 3
13793: PPUSH
13794: LD_INT 22
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 95
13806: PUSH
13807: LD_INT 15
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: PPUSH
13823: CALL 56813 0 2
13827: IFFALSE 13968
13829: GO 13831
13831: DISABLE
// begin DialogueOn ;
13832: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13836: LD_INT 95
13838: PPUSH
13839: LD_INT 65
13841: PPUSH
13842: LD_INT 3
13844: PPUSH
13845: LD_INT 12
13847: NEG
13848: PPUSH
13849: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13853: LD_INT 95
13855: PPUSH
13856: LD_INT 65
13858: PPUSH
13859: LD_INT 3
13861: PPUSH
13862: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13866: LD_INT 95
13868: PPUSH
13869: LD_INT 65
13871: PPUSH
13872: CALL_OW 84
// if westOutpostDiscovered then
13876: LD_EXP 20
13880: IFFALSE 13920
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13882: LD_EXP 39
13886: PPUSH
13887: LD_STRING D16-Kov-1
13889: PPUSH
13890: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13894: LD_EXP 34
13898: PPUSH
13899: LD_STRING D16-Bur-1
13901: PPUSH
13902: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13906: LD_EXP 35
13910: PPUSH
13911: LD_STRING D16-Gny-1
13913: PPUSH
13914: CALL_OW 88
// end else
13918: GO 13956
// begin Say ( Burlak , D15-Bur-1 ) ;
13920: LD_EXP 34
13924: PPUSH
13925: LD_STRING D15-Bur-1
13927: PPUSH
13928: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13932: LD_EXP 35
13936: PPUSH
13937: LD_STRING D15-Gny-1
13939: PPUSH
13940: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13944: LD_EXP 39
13948: PPUSH
13949: LD_STRING D15-Kov-1
13951: PPUSH
13952: CALL_OW 88
// end ; DialogueOff ;
13956: CALL_OW 7
// eastOutpostDiscovered := true ;
13960: LD_ADDR_EXP 21
13964: PUSH
13965: LD_INT 1
13967: ST_TO_ADDR
// end ;
13968: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
13969: LD_INT 8
13971: PPUSH
13972: LD_INT 22
13974: PUSH
13975: LD_INT 1
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 50
13984: PUSH
13985: EMPTY
13986: LIST
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 70
13996: PUSH
13997: LD_INT 0
13999: EQUAL
14000: PUSH
14001: LD_EXP 20
14005: AND
14006: IFFALSE 14050
14008: GO 14010
14010: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14011: LD_EXP 34
14015: PPUSH
14016: LD_STRING D20-Bur-1
14018: PPUSH
14019: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14023: LD_EXP 40
14027: PPUSH
14028: LD_STRING D20-Pla-1
14030: PPUSH
14031: CALL_OW 94
// westOutpostDestroyed := true ;
14035: LD_ADDR_EXP 22
14039: PUSH
14040: LD_INT 1
14042: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14043: LD_STRING M8
14045: PPUSH
14046: CALL_OW 337
// end ;
14050: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14051: LD_INT 15
14053: PPUSH
14054: LD_INT 22
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 50
14066: PUSH
14067: EMPTY
14068: LIST
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 70
14078: PUSH
14079: LD_INT 0
14081: EQUAL
14082: PUSH
14083: LD_EXP 21
14087: AND
14088: IFFALSE 14218
14090: GO 14092
14092: DISABLE
14093: LD_INT 0
14095: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14096: LD_EXP 34
14100: PPUSH
14101: LD_STRING D20-Bur-1
14103: PPUSH
14104: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14108: LD_EXP 40
14112: PPUSH
14113: LD_STRING D20-Pla-1
14115: PPUSH
14116: CALL_OW 94
// eastOutpostDestroyed := true ;
14120: LD_ADDR_EXP 23
14124: PUSH
14125: LD_INT 1
14127: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14128: LD_INT 35
14130: PPUSH
14131: CALL_OW 67
// stop_talking := true ;
14135: LD_ADDR_OWVAR 56
14139: PUSH
14140: LD_INT 1
14142: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14143: LD_ADDR_VAR 0 1
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 23
14160: PUSH
14161: LD_INT 3
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 21
14170: PUSH
14171: LD_INT 1
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: PUSH
14188: FOR_IN
14189: IFFALSE 14208
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14191: LD_VAR 0 1
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: LD_INT 1500
14201: PPUSH
14202: CALL_OW 591
14206: GO 14188
14208: POP
14209: POP
// stop_talking := false ;
14210: LD_ADDR_OWVAR 56
14214: PUSH
14215: LD_INT 0
14217: ST_TO_ADDR
// end ;
14218: PPOPN 1
14220: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14221: LD_INT 19
14223: PPUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 3
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PPUSH
14248: CALL_OW 70
14252: IFFALSE 14360
14254: GO 14256
14256: DISABLE
// begin DialogueOn ;
14257: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14261: LD_INT 19
14263: PPUSH
14264: LD_INT 22
14266: PUSH
14267: LD_INT 3
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 70
14292: PPUSH
14293: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14297: LD_EXP 34
14301: PPUSH
14302: LD_STRING D26-Bur-1
14304: PPUSH
14305: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14309: LD_EXP 39
14313: PPUSH
14314: LD_STRING D26-Kov-1
14316: PPUSH
14317: CALL_OW 88
// if IsOk ( Gnyevko ) then
14321: LD_EXP 35
14325: PPUSH
14326: CALL_OW 302
14330: IFFALSE 14356
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14332: LD_EXP 35
14336: PPUSH
14337: LD_STRING D26-Gny-1
14339: PPUSH
14340: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14344: LD_EXP 34
14348: PPUSH
14349: LD_STRING D26-Bur-2
14351: PPUSH
14352: CALL_OW 88
// end ; DialogueOff ;
14356: CALL_OW 7
// end ;
14360: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14361: LD_EXP 21
14365: PUSH
14366: LD_EXP 23
14370: NOT
14371: AND
14372: PUSH
14373: LD_INT 17
14375: PPUSH
14376: LD_INT 22
14378: PUSH
14379: LD_INT 3
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: LD_INT 24
14391: PUSH
14392: LD_INT 1000
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PPUSH
14407: CALL_OW 70
14411: PUSH
14412: LD_INT 1
14414: GREATER
14415: AND
14416: IFFALSE 14479
14418: GO 14420
14420: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14421: LD_EXP 35
14425: PPUSH
14426: LD_STRING D16A-Gny-1
14428: PPUSH
14429: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14433: LD_EXP 39
14437: PPUSH
14438: LD_STRING D16A-Kov-1
14440: PPUSH
14441: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14445: LD_EXP 35
14449: PPUSH
14450: CALL_OW 302
14454: PUSH
14455: LD_EXP 39
14459: PPUSH
14460: CALL_OW 302
14464: OR
14465: IFFALSE 14479
// Say ( Burlak , D16A-Bur-1 ) ;
14467: LD_EXP 34
14471: PPUSH
14472: LD_STRING D16A-Bur-1
14474: PPUSH
14475: CALL_OW 88
// end ;
14479: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14480: LD_INT 3
14482: PPUSH
14483: LD_INT 9
14485: PPUSH
14486: CALL_OW 294
14490: IFFALSE 14503
14492: GO 14494
14494: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14495: LD_ADDR_EXP 24
14499: PUSH
14500: LD_INT 1
14502: ST_TO_ADDR
// end ;
14503: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14504: LD_INT 3
14506: PPUSH
14507: LD_INT 10
14509: PPUSH
14510: CALL_OW 294
14514: IFFALSE 14534
14516: GO 14518
14518: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14519: LD_ADDR_EXP 27
14523: PUSH
14524: LD_EXP 27
14528: PPUSH
14529: CALL 54914 0 1
14533: ST_TO_ADDR
14534: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14535: LD_INT 3
14537: PPUSH
14538: LD_INT 11
14540: PPUSH
14541: CALL_OW 294
14545: IFFALSE 14565
14547: GO 14549
14549: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14550: LD_ADDR_EXP 27
14554: PUSH
14555: LD_EXP 27
14559: PPUSH
14560: CALL 54914 0 1
14564: ST_TO_ADDR
14565: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14566: LD_INT 3
14568: PPUSH
14569: LD_INT 12
14571: PPUSH
14572: CALL_OW 294
14576: IFFALSE 14596
14578: GO 14580
14580: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14581: LD_ADDR_EXP 27
14585: PUSH
14586: LD_EXP 27
14590: PPUSH
14591: CALL 54914 0 1
14595: ST_TO_ADDR
14596: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14597: LD_INT 3
14599: PPUSH
14600: LD_INT 13
14602: PPUSH
14603: CALL_OW 294
14607: IFFALSE 14627
14609: GO 14611
14611: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14612: LD_ADDR_EXP 27
14616: PUSH
14617: LD_EXP 27
14621: PPUSH
14622: CALL 54914 0 1
14626: ST_TO_ADDR
14627: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14628: LD_INT 3
14630: PPUSH
14631: LD_INT 14
14633: PPUSH
14634: CALL_OW 294
14638: IFFALSE 14658
14640: GO 14642
14642: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14643: LD_ADDR_EXP 27
14647: PUSH
14648: LD_EXP 27
14652: PPUSH
14653: CALL 54914 0 1
14657: ST_TO_ADDR
14658: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14659: LD_EXP 27
14663: PUSH
14664: LD_INT 5
14666: GREATEREQUAL
14667: PUSH
14668: LD_EXP 14
14672: AND
14673: IFFALSE 14693
14675: GO 14677
14677: DISABLE
// begin allMapPointsSpotted := true ;
14678: LD_ADDR_EXP 26
14682: PUSH
14683: LD_INT 1
14685: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14686: LD_STRING M10
14688: PPUSH
14689: CALL_OW 337
// end ;
14693: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14694: LD_EXP 26
14698: PUSH
14699: LD_EXP 22
14703: AND
14704: IFFALSE 14716
14706: GO 14708
14708: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14709: LD_STRING M10a
14711: PPUSH
14712: CALL_OW 337
// end ;
14716: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14717: LD_EXP 14
14721: IFFALSE 15354
14723: GO 14725
14725: DISABLE
14726: LD_INT 0
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
// begin wasOutsideBeria := false ;
14733: LD_ADDR_VAR 0 3
14737: PUSH
14738: LD_INT 0
14740: ST_TO_ADDR
// wantToTalk := false ;
14741: LD_ADDR_VAR 0 2
14745: PUSH
14746: LD_INT 0
14748: ST_TO_ADDR
// westOutpostReported := false ;
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: LD_INT 0
14756: ST_TO_ADDR
// eastOutpostReported := false ;
14757: LD_ADDR_VAR 0 5
14761: PUSH
14762: LD_INT 0
14764: ST_TO_ADDR
// timer := 0 0$0 ;
14765: LD_ADDR_VAR 0 1
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14773: LD_INT 70
14775: PPUSH
14776: CALL_OW 67
// timer := timer + 0 0$2 ;
14780: LD_ADDR_VAR 0 1
14784: PUSH
14785: LD_VAR 0 1
14789: PUSH
14790: LD_INT 70
14792: PLUS
14793: ST_TO_ADDR
// if timer >= 0 0$30 then
14794: LD_VAR 0 1
14798: PUSH
14799: LD_INT 1050
14801: GREATEREQUAL
14802: IFFALSE 14812
// wantToTalk := true ;
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_INT 1
14811: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14812: LD_EXP 34
14816: PPUSH
14817: LD_EXP 40
14821: PPUSH
14822: CALL_OW 296
14826: PUSH
14827: LD_INT 9
14829: GREATER
14830: IFFALSE 14840
// wasOutsideBeria := true ;
14832: LD_ADDR_VAR 0 3
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14840: LD_VAR 0 2
14844: PUSH
14845: LD_VAR 0 3
14849: AND
14850: PUSH
14851: LD_EXP 34
14855: PPUSH
14856: LD_EXP 40
14860: PPUSH
14861: CALL_OW 296
14865: PUSH
14866: LD_INT 8
14868: LESS
14869: PUSH
14870: LD_EXP 34
14874: PPUSH
14875: CALL_OW 310
14879: PPUSH
14880: LD_EXP 40
14884: PPUSH
14885: CALL_OW 296
14889: PUSH
14890: LD_INT 8
14892: LESS
14893: OR
14894: AND
14895: IFFALSE 15243
// begin timer := 0 0$0 ;
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: LD_INT 0
14904: ST_TO_ADDR
// wantToTalk := false ;
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_INT 0
14912: ST_TO_ADDR
// wasOutsideBeria := false ;
14913: LD_ADDR_VAR 0 3
14917: PUSH
14918: LD_INT 0
14920: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14921: LD_EXP 40
14925: PPUSH
14926: CALL_OW 87
// DialogueOn ;
14930: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14934: LD_EXP 40
14938: PPUSH
14939: LD_STRING D25-Pla-1
14941: PPUSH
14942: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14946: LD_VAR 0 4
14950: NOT
14951: PUSH
14952: LD_VAR 0 5
14956: NOT
14957: AND
14958: PUSH
14959: LD_EXP 20
14963: AND
14964: PUSH
14965: LD_EXP 21
14969: AND
14970: IFFALSE 15050
// begin westOutpostReported := true ;
14972: LD_ADDR_VAR 0 4
14976: PUSH
14977: LD_INT 1
14979: ST_TO_ADDR
// eastOutpostReported := true ;
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
14988: LD_EXP 34
14992: PPUSH
14993: LD_STRING D25-Bur-1
14995: PPUSH
14996: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15000: LD_EXP 24
15004: PUSH
15005: LD_EXP 22
15009: NOT
15010: AND
15011: IFFALSE 15048
// begin Say ( Burlak , D25b-Bur-1 ) ;
15013: LD_EXP 34
15017: PPUSH
15018: LD_STRING D25b-Bur-1
15020: PPUSH
15021: CALL_OW 88
// if not reinforcementsGained then
15025: LD_EXP 25
15029: NOT
15030: IFFALSE 15048
// begin Say ( Platonov , D25b-Pla-1 ) ;
15032: LD_EXP 40
15036: PPUSH
15037: LD_STRING D25b-Pla-1
15039: PPUSH
15040: CALL_OW 88
// SendReinforcements ( ) ;
15044: CALL 3297 0 0
// end ; end ; end else
15048: GO 15239
// if not westOutpostReported and westOutpostDiscovered then
15050: LD_VAR 0 4
15054: NOT
15055: PUSH
15056: LD_EXP 20
15060: AND
15061: IFFALSE 15133
// begin westOutpostReported := true ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15071: LD_EXP 34
15075: PPUSH
15076: LD_STRING D25a-Bur-1b
15078: PPUSH
15079: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15083: LD_EXP 24
15087: PUSH
15088: LD_EXP 22
15092: NOT
15093: AND
15094: IFFALSE 15131
// begin Say ( Burlak , D25b-Bur-1 ) ;
15096: LD_EXP 34
15100: PPUSH
15101: LD_STRING D25b-Bur-1
15103: PPUSH
15104: CALL_OW 88
// if not reinforcementsGained then
15108: LD_EXP 25
15112: NOT
15113: IFFALSE 15131
// begin Say ( Platonov , D25b-Pla-1 ) ;
15115: LD_EXP 40
15119: PPUSH
15120: LD_STRING D25b-Pla-1
15122: PPUSH
15123: CALL_OW 88
// SendReinforcements ( ) ;
15127: CALL 3297 0 0
// end ; end ; end else
15131: GO 15239
// if not eastOutpostReported and eastOutpostDiscovered then
15133: LD_VAR 0 5
15137: NOT
15138: PUSH
15139: LD_EXP 21
15143: AND
15144: IFFALSE 15168
// begin eastOutpostReported := true ;
15146: LD_ADDR_VAR 0 5
15150: PUSH
15151: LD_INT 1
15153: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15154: LD_EXP 34
15158: PPUSH
15159: LD_STRING D25a-Bur-1a
15161: PPUSH
15162: CALL_OW 88
// end else
15166: GO 15239
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15168: LD_EXP 20
15172: NOT
15173: PUSH
15174: LD_EXP 21
15178: NOT
15179: OR
15180: IFFALSE 15208
// begin Say ( Burlak , D25a-Bur-1 ) ;
15182: LD_EXP 34
15186: PPUSH
15187: LD_STRING D25a-Bur-1
15189: PPUSH
15190: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15194: LD_EXP 40
15198: PPUSH
15199: LD_STRING D25c-Pla-1
15201: PPUSH
15202: CALL_OW 88
// end else
15206: GO 15239
// if not allMapPointsSpotted then
15208: LD_EXP 26
15212: NOT
15213: IFFALSE 15239
// begin Say ( Burlak , D25a-Bur-1 ) ;
15215: LD_EXP 34
15219: PPUSH
15220: LD_STRING D25a-Bur-1
15222: PPUSH
15223: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15227: LD_EXP 40
15231: PPUSH
15232: LD_STRING D25c-Pla-1a
15234: PPUSH
15235: CALL_OW 88
// end ; DialogueOff ;
15239: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15243: LD_EXP 26
15247: PUSH
15248: LD_EXP 22
15252: AND
15253: IFFALSE 14773
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15255: LD_INT 22
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 91
15277: PUSH
15278: LD_EXP 40
15282: PUSH
15283: LD_INT 10
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: PPUSH
15296: CALL_OW 69
15300: IFFALSE 15343
// begin if not belkovDied and not belkovSaved then
15302: LD_EXP 19
15306: NOT
15307: PUSH
15308: LD_EXP 28
15312: NOT
15313: AND
15314: IFFALSE 15337
// begin if Query ( QContMission ) = 1 then
15316: LD_STRING QContMission
15318: PPUSH
15319: CALL_OW 97
15323: PUSH
15324: LD_INT 1
15326: EQUAL
15327: IFFALSE 15335
// begin EndMission ;
15329: CALL 15357 0 0
// exit ;
15333: GO 15354
// end ; end else
15335: GO 15343
// begin EndMission ;
15337: CALL 15357 0 0
// exit ;
15341: GO 15354
// end ; end ; wait ( 0 0$10 ) ;
15343: LD_INT 350
15345: PPUSH
15346: CALL_OW 67
// until false ;
15350: LD_INT 0
15352: IFFALSE 15255
// end ;
15354: PPOPN 5
15356: END
// function EndMission ; var i , tmp ; begin
15357: LD_INT 0
15359: PPUSH
15360: PPUSH
15361: PPUSH
// if initiative then
15362: LD_EXP 31
15366: IFFALSE 15380
// AddMedal ( Initiative , 1 ) else
15368: LD_STRING Initiative
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 101
15378: GO 15411
// if not eastOutpostDestroyed then
15380: LD_EXP 23
15384: NOT
15385: IFFALSE 15400
// AddMedal ( Initiative , - 2 ) else
15387: LD_STRING Initiative
15389: PPUSH
15390: LD_INT 2
15392: NEG
15393: PPUSH
15394: CALL_OW 101
15398: GO 15411
// AddMedal ( Initiative , - 1 ) ;
15400: LD_STRING Initiative
15402: PPUSH
15403: LD_INT 1
15405: NEG
15406: PPUSH
15407: CALL_OW 101
// if not belkovDied and belkovSaved then
15411: LD_EXP 19
15415: NOT
15416: PUSH
15417: LD_EXP 28
15421: AND
15422: IFFALSE 15436
// AddMedal ( Belkov , 1 ) else
15424: LD_STRING Belkov
15426: PPUSH
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 101
15434: GO 15531
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15436: LD_EXP 45
15440: PPUSH
15441: LD_INT 22
15443: PUSH
15444: LD_INT 3
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 72
15455: IFFALSE 15469
// AddMedal ( Belkov , 2 ) else
15457: LD_STRING Belkov
15459: PPUSH
15460: LD_INT 2
15462: PPUSH
15463: CALL_OW 101
15467: GO 15531
// if belkovDied then
15469: LD_EXP 19
15473: IFFALSE 15488
// AddMedal ( Belkov , - 1 ) else
15475: LD_STRING Belkov
15477: PPUSH
15478: LD_INT 1
15480: NEG
15481: PPUSH
15482: CALL_OW 101
15486: GO 15531
// if not belkovSaved then
15488: LD_EXP 28
15492: NOT
15493: IFFALSE 15508
// AddMedal ( Belkov , - 2 ) else
15495: LD_STRING Belkov
15497: PPUSH
15498: LD_INT 2
15500: NEG
15501: PPUSH
15502: CALL_OW 101
15506: GO 15531
// if belkovDied and belkovSaved then
15508: LD_EXP 19
15512: PUSH
15513: LD_EXP 28
15517: AND
15518: IFFALSE 15531
// AddMedal ( Belkov , - 3 ) ;
15520: LD_STRING Belkov
15522: PPUSH
15523: LD_INT 3
15525: NEG
15526: PPUSH
15527: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15531: LD_EXP 30
15535: PUSH
15536: LD_INT 0
15538: EQUAL
15539: IFFALSE 15553
// AddMedal ( NoLosses , 1 ) else
15541: LD_STRING NoLosses
15543: PPUSH
15544: LD_INT 1
15546: PPUSH
15547: CALL_OW 101
15551: GO 15564
// AddMedal ( NoLosses , - 1 ) ;
15553: LD_STRING NoLosses
15555: PPUSH
15556: LD_INT 1
15558: NEG
15559: PPUSH
15560: CALL_OW 101
// GiveMedals ( Main ) ;
15564: LD_STRING Main
15566: PPUSH
15567: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15571: LD_INT 22
15573: PUSH
15574: LD_INT 3
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 23
15583: PUSH
15584: LD_INT 3
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 21
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: PPUSH
15611: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15615: LD_EXP 34
15619: PPUSH
15620: LD_EXP 3
15624: PUSH
15625: LD_STRING Burlak
15627: STR
15628: PPUSH
15629: CALL_OW 38
// if IsLive ( Gnyevko ) then
15633: LD_EXP 35
15637: PPUSH
15638: CALL_OW 300
15642: IFFALSE 15662
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15644: LD_EXP 35
15648: PPUSH
15649: LD_EXP 3
15653: PUSH
15654: LD_STRING Gnyevko
15656: STR
15657: PPUSH
15658: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15662: LD_EXP 39
15666: PPUSH
15667: CALL_OW 300
15671: IFFALSE 15691
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15673: LD_EXP 39
15677: PPUSH
15678: LD_EXP 3
15682: PUSH
15683: LD_STRING Kovalyuk
15685: STR
15686: PPUSH
15687: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15691: LD_EXP 36
15695: PPUSH
15696: CALL_OW 300
15700: PUSH
15701: LD_EXP 28
15705: AND
15706: IFFALSE 15726
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15708: LD_EXP 36
15712: PPUSH
15713: LD_EXP 3
15717: PUSH
15718: LD_STRING Belkov
15720: STR
15721: PPUSH
15722: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15726: LD_EXP 37
15730: PPUSH
15731: CALL_OW 300
15735: IFFALSE 15755
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15737: LD_EXP 37
15741: PPUSH
15742: LD_EXP 3
15746: PUSH
15747: LD_STRING Kirilenkova
15749: STR
15750: PPUSH
15751: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15755: LD_INT 22
15757: PUSH
15758: LD_INT 3
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 23
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 21
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: PUSH
15795: LD_EXP 34
15799: PUSH
15800: LD_EXP 35
15804: PUSH
15805: LD_EXP 39
15809: PUSH
15810: LD_EXP 36
15814: PUSH
15815: LD_EXP 37
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: DIFF
15827: PPUSH
15828: LD_EXP 3
15832: PUSH
15833: LD_STRING burlakTeam
15835: STR
15836: PPUSH
15837: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15841: LD_INT 22
15843: PUSH
15844: LD_INT 6
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 23
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: PUSH
15881: LD_EXP 40
15885: PUSH
15886: LD_EXP 38
15890: PUSH
15891: LD_EXP 36
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: PUSH
15901: LD_EXP 45
15905: UNION
15906: DIFF
15907: PPUSH
15908: LD_EXP 3
15912: PUSH
15913: LD_STRING kirovTeam
15915: STR
15916: PPUSH
15917: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15921: LD_EXP 23
15925: PPUSH
15926: LD_STRING 02_EasternOutpostDestroyed
15928: PPUSH
15929: CALL_OW 39
// tmp := [ ] ;
15933: LD_ADDR_VAR 0 3
15937: PUSH
15938: EMPTY
15939: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15940: LD_ADDR_VAR 0 2
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_INT 3
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 21
15957: PUSH
15958: LD_INT 3
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PPUSH
15969: CALL_OW 69
15973: PUSH
15974: FOR_IN
15975: IFFALSE 16051
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15977: LD_ADDR_VAR 0 3
15981: PUSH
15982: LD_VAR 0 3
15986: PPUSH
15987: LD_VAR 0 2
15991: PPUSH
15992: CALL_OW 266
15996: PUSH
15997: LD_VAR 0 2
16001: PPUSH
16002: CALL_OW 267
16006: PUSH
16007: LD_VAR 0 2
16011: PPUSH
16012: CALL_OW 250
16016: PUSH
16017: LD_VAR 0 2
16021: PPUSH
16022: CALL_OW 251
16026: PUSH
16027: LD_VAR 0 2
16031: PPUSH
16032: CALL_OW 254
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL 53561 0 2
16048: ST_TO_ADDR
16049: GO 15974
16051: POP
16052: POP
// SaveVariable ( tmp , 02_Beria ) ;
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_STRING 02_Beria
16060: PPUSH
16061: CALL_OW 39
// tmp := [ ] ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: EMPTY
16071: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16072: LD_ADDR_VAR 0 2
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 6
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 3
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16183
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16109: LD_ADDR_VAR 0 3
16113: PUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: LD_VAR 0 2
16123: PPUSH
16124: CALL_OW 266
16128: PUSH
16129: LD_VAR 0 2
16133: PPUSH
16134: CALL_OW 267
16138: PUSH
16139: LD_VAR 0 2
16143: PPUSH
16144: CALL_OW 250
16148: PUSH
16149: LD_VAR 0 2
16153: PPUSH
16154: CALL_OW 251
16158: PUSH
16159: LD_VAR 0 2
16163: PPUSH
16164: CALL_OW 254
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: PPUSH
16176: CALL 53561 0 2
16180: ST_TO_ADDR
16181: GO 16106
16183: POP
16184: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16185: LD_VAR 0 3
16189: PPUSH
16190: LD_STRING 02_Kirov
16192: PPUSH
16193: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16197: LD_INT 22
16199: PUSH
16200: LD_INT 3
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 21
16209: PUSH
16210: LD_INT 2
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PPUSH
16226: CALL 18982 0 1
16230: PPUSH
16231: LD_STRING 02_VehiclesCount
16233: PPUSH
16234: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16238: LD_INT 22
16240: PUSH
16241: LD_INT 6
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: PPUSH
16267: CALL 18982 0 1
16271: PPUSH
16272: LD_STRING 02_KirovVehiclesCount
16274: PPUSH
16275: CALL_OW 39
// YouWin ;
16279: CALL_OW 103
// end ; end_of_file
16283: LD_VAR 0 1
16287: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16288: LD_INT 420
16290: PPUSH
16291: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: CALL 7995 0 2
// end ;
16309: PPOPN 5
16311: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL 72120 0 1
// if un = Burlak then
16321: LD_VAR 0 1
16325: PUSH
16326: LD_EXP 34
16330: EQUAL
16331: IFFALSE 16340
// YouLost ( Burlak ) ;
16333: LD_STRING Burlak
16335: PPUSH
16336: CALL_OW 104
// if un = Platonov then
16340: LD_VAR 0 1
16344: PUSH
16345: LD_EXP 40
16349: EQUAL
16350: IFFALSE 16359
// YouLost ( Platonov ) ;
16352: LD_STRING Platonov
16354: PPUSH
16355: CALL_OW 104
// if un = Kurin then
16359: LD_VAR 0 1
16363: PUSH
16364: LD_EXP 38
16368: EQUAL
16369: IFFALSE 16378
// YouLost ( Kurin ) ;
16371: LD_STRING Kurin
16373: PPUSH
16374: CALL_OW 104
// if un = Belkov then
16378: LD_VAR 0 1
16382: PUSH
16383: LD_EXP 36
16387: EQUAL
16388: IFFALSE 16398
// belkovDied := true ;
16390: LD_ADDR_EXP 19
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if un in belkovTeam then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_EXP 45
16407: IN
16408: IFFALSE 16441
// begin belkovTeam := belkovTeam diff un ;
16410: LD_ADDR_EXP 45
16414: PUSH
16415: LD_EXP 45
16419: PUSH
16420: LD_VAR 0 1
16424: DIFF
16425: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16426: LD_ADDR_EXP 29
16430: PUSH
16431: LD_EXP 29
16435: PPUSH
16436: CALL 54914 0 1
16440: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16441: LD_VAR 0 1
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_INT 3
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 21
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 23
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: PPUSH
16481: CALL_OW 69
16485: IN
16486: IFFALSE 16503
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16488: LD_ADDR_EXP 30
16492: PUSH
16493: LD_EXP 30
16497: PPUSH
16498: CALL 54914 0 1
16502: ST_TO_ADDR
// if un in usWestForces then
16503: LD_VAR 0 1
16507: PUSH
16508: LD_EXP 46
16512: IN
16513: IFFALSE 16531
// usWestForces := usWestForces diff un ;
16515: LD_ADDR_EXP 46
16519: PUSH
16520: LD_EXP 46
16524: PUSH
16525: LD_VAR 0 1
16529: DIFF
16530: ST_TO_ADDR
// if un in usEastForces then
16531: LD_VAR 0 1
16535: PUSH
16536: LD_EXP 47
16540: IN
16541: IFFALSE 16559
// usEastForces := usEastForces diff un ;
16543: LD_ADDR_EXP 47
16547: PUSH
16548: LD_EXP 47
16552: PUSH
16553: LD_VAR 0 1
16557: DIFF
16558: ST_TO_ADDR
// end ;
16559: PPOPN 1
16561: END
// on BuildingComplete ( b ) do var mech ;
16562: LD_INT 0
16564: PPUSH
// begin if GetSide ( b ) = 3 then
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 255
16574: PUSH
16575: LD_INT 3
16577: EQUAL
16578: IFFALSE 16637
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 266
16589: PUSH
16590: LD_INT 6
16592: PUSH
16593: LD_INT 7
16595: PUSH
16596: LD_INT 8
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: IN
16604: IFFALSE 16614
// hasLab := true ;
16606: LD_ADDR_EXP 9
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: PUSH
16624: LD_INT 2
16626: EQUAL
16627: IFFALSE 16637
// hasWorkshop := true ;
16629: LD_ADDR_EXP 10
16633: PUSH
16634: LD_INT 1
16636: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 255
16646: PUSH
16647: LD_INT 6
16649: EQUAL
16650: IFFALSE 16724
// begin if GetBType ( b ) = b_workshop then
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 266
16661: PUSH
16662: LD_INT 2
16664: EQUAL
16665: IFFALSE 16724
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16667: LD_ADDR_VAR 0 2
16671: PUSH
16672: LD_EXP 43
16676: PPUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 3
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PPUSH
16687: CALL_OW 72
16691: ST_TO_ADDR
// if not mech then
16692: LD_VAR 0 2
16696: NOT
16697: IFFALSE 16701
// exit ;
16699: GO 16724
// ComExit ( mech ) ;
16701: LD_VAR 0 2
16705: PPUSH
16706: CALL 53949 0 1
// AddComEnterUnit ( mech , b ) ;
16710: LD_VAR 0 2
16714: PPUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 180
// end ; end ; end ;
16724: PPOPN 2
16726: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16727: LD_VAR 0 1
16731: PPUSH
16732: LD_VAR 0 2
16736: PPUSH
16737: CALL 72242 0 2
// if GetSide ( vehicle ) = 3 then
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 255
16750: PUSH
16751: LD_INT 3
16753: EQUAL
16754: IFFALSE 16779
// begin hasTank := true ;
16756: LD_ADDR_EXP 12
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16764: LD_ADDR_EXP 15
16768: PUSH
16769: LD_EXP 15
16773: PPUSH
16774: CALL 54914 0 1
16778: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 255
16788: PUSH
16789: LD_INT 6
16791: EQUAL
16792: IFFALSE 16803
// KirovAttack ( vehicle ) ;
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL 3603 0 1
// end ;
16803: PPOPN 2
16805: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16806: LD_VAR 0 1
16810: PUSH
16811: LD_EXP 33
16815: EQUAL
16816: IFFALSE 16822
// BelkovAttackScript ;
16818: CALL 1668 0 0
// end ;
16822: PPOPN 1
16824: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16825: LD_INT 0
16827: PPUSH
// begin if side = 1 then
16828: LD_VAR 0 3
16832: PUSH
16833: LD_INT 1
16835: EQUAL
16836: IFFALSE 16846
// vehCaptured := true ;
16838: LD_ADDR_EXP 16
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// end ;
16846: PPOPN 5
16848: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 3
16856: EQUAL
16857: PUSH
16858: LD_VAR 0 2
16862: PUSH
16863: LD_INT 6
16865: EQUAL
16866: AND
16867: IFFALSE 16877
// allianceAttacked := true ;
16869: LD_ADDR_EXP 13
16873: PUSH
16874: LD_INT 1
16876: ST_TO_ADDR
// end ; end_of_file
16877: PPOPN 2
16879: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16880: LD_INT 0
16882: PPUSH
16883: PPUSH
// if exist_mode then
16884: LD_VAR 0 2
16888: IFFALSE 16913
// unit := CreateCharacter ( prefix & ident ) else
16890: LD_ADDR_VAR 0 5
16894: PUSH
16895: LD_VAR 0 3
16899: PUSH
16900: LD_VAR 0 1
16904: STR
16905: PPUSH
16906: CALL_OW 34
16910: ST_TO_ADDR
16911: GO 16928
// unit := NewCharacter ( ident ) ;
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 25
16927: ST_TO_ADDR
// result := unit ;
16928: LD_ADDR_VAR 0 4
16932: PUSH
16933: LD_VAR 0 5
16937: ST_TO_ADDR
// end ;
16938: LD_VAR 0 4
16942: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16943: LD_INT 0
16945: PPUSH
16946: PPUSH
// if not side or not nation then
16947: LD_VAR 0 1
16951: NOT
16952: PUSH
16953: LD_VAR 0 2
16957: NOT
16958: OR
16959: IFFALSE 16963
// exit ;
16961: GO 17731
// case nation of nation_american :
16963: LD_VAR 0 2
16967: PUSH
16968: LD_INT 1
16970: DOUBLE
16971: EQUAL
16972: IFTRUE 16976
16974: GO 17190
16976: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16977: LD_ADDR_VAR 0 4
16981: PUSH
16982: LD_INT 35
16984: PUSH
16985: LD_INT 45
16987: PUSH
16988: LD_INT 46
16990: PUSH
16991: LD_INT 47
16993: PUSH
16994: LD_INT 82
16996: PUSH
16997: LD_INT 83
16999: PUSH
17000: LD_INT 84
17002: PUSH
17003: LD_INT 85
17005: PUSH
17006: LD_INT 86
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: LD_INT 6
17017: PUSH
17018: LD_INT 15
17020: PUSH
17021: LD_INT 16
17023: PUSH
17024: LD_INT 7
17026: PUSH
17027: LD_INT 12
17029: PUSH
17030: LD_INT 13
17032: PUSH
17033: LD_INT 10
17035: PUSH
17036: LD_INT 14
17038: PUSH
17039: LD_INT 20
17041: PUSH
17042: LD_INT 21
17044: PUSH
17045: LD_INT 22
17047: PUSH
17048: LD_INT 25
17050: PUSH
17051: LD_INT 32
17053: PUSH
17054: LD_INT 27
17056: PUSH
17057: LD_INT 36
17059: PUSH
17060: LD_INT 69
17062: PUSH
17063: LD_INT 39
17065: PUSH
17066: LD_INT 34
17068: PUSH
17069: LD_INT 40
17071: PUSH
17072: LD_INT 48
17074: PUSH
17075: LD_INT 49
17077: PUSH
17078: LD_INT 50
17080: PUSH
17081: LD_INT 51
17083: PUSH
17084: LD_INT 52
17086: PUSH
17087: LD_INT 53
17089: PUSH
17090: LD_INT 54
17092: PUSH
17093: LD_INT 55
17095: PUSH
17096: LD_INT 56
17098: PUSH
17099: LD_INT 57
17101: PUSH
17102: LD_INT 58
17104: PUSH
17105: LD_INT 59
17107: PUSH
17108: LD_INT 60
17110: PUSH
17111: LD_INT 61
17113: PUSH
17114: LD_INT 62
17116: PUSH
17117: LD_INT 80
17119: PUSH
17120: LD_INT 82
17122: PUSH
17123: LD_INT 83
17125: PUSH
17126: LD_INT 84
17128: PUSH
17129: LD_INT 85
17131: PUSH
17132: LD_INT 86
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: ST_TO_ADDR
17188: GO 17655
17190: LD_INT 2
17192: DOUBLE
17193: EQUAL
17194: IFTRUE 17198
17196: GO 17424
17198: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17199: LD_ADDR_VAR 0 4
17203: PUSH
17204: LD_INT 35
17206: PUSH
17207: LD_INT 45
17209: PUSH
17210: LD_INT 46
17212: PUSH
17213: LD_INT 47
17215: PUSH
17216: LD_INT 82
17218: PUSH
17219: LD_INT 83
17221: PUSH
17222: LD_INT 84
17224: PUSH
17225: LD_INT 85
17227: PUSH
17228: LD_INT 87
17230: PUSH
17231: LD_INT 70
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: LD_INT 11
17239: PUSH
17240: LD_INT 3
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: LD_INT 5
17248: PUSH
17249: LD_INT 6
17251: PUSH
17252: LD_INT 15
17254: PUSH
17255: LD_INT 18
17257: PUSH
17258: LD_INT 7
17260: PUSH
17261: LD_INT 17
17263: PUSH
17264: LD_INT 8
17266: PUSH
17267: LD_INT 20
17269: PUSH
17270: LD_INT 21
17272: PUSH
17273: LD_INT 22
17275: PUSH
17276: LD_INT 72
17278: PUSH
17279: LD_INT 26
17281: PUSH
17282: LD_INT 69
17284: PUSH
17285: LD_INT 39
17287: PUSH
17288: LD_INT 40
17290: PUSH
17291: LD_INT 41
17293: PUSH
17294: LD_INT 42
17296: PUSH
17297: LD_INT 43
17299: PUSH
17300: LD_INT 48
17302: PUSH
17303: LD_INT 49
17305: PUSH
17306: LD_INT 50
17308: PUSH
17309: LD_INT 51
17311: PUSH
17312: LD_INT 52
17314: PUSH
17315: LD_INT 53
17317: PUSH
17318: LD_INT 54
17320: PUSH
17321: LD_INT 55
17323: PUSH
17324: LD_INT 56
17326: PUSH
17327: LD_INT 60
17329: PUSH
17330: LD_INT 61
17332: PUSH
17333: LD_INT 62
17335: PUSH
17336: LD_INT 66
17338: PUSH
17339: LD_INT 67
17341: PUSH
17342: LD_INT 68
17344: PUSH
17345: LD_INT 81
17347: PUSH
17348: LD_INT 82
17350: PUSH
17351: LD_INT 83
17353: PUSH
17354: LD_INT 84
17356: PUSH
17357: LD_INT 85
17359: PUSH
17360: LD_INT 87
17362: PUSH
17363: LD_INT 88
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: ST_TO_ADDR
17422: GO 17655
17424: LD_INT 3
17426: DOUBLE
17427: EQUAL
17428: IFTRUE 17432
17430: GO 17654
17432: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17433: LD_ADDR_VAR 0 4
17437: PUSH
17438: LD_INT 46
17440: PUSH
17441: LD_INT 47
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: LD_INT 82
17452: PUSH
17453: LD_INT 83
17455: PUSH
17456: LD_INT 84
17458: PUSH
17459: LD_INT 85
17461: PUSH
17462: LD_INT 86
17464: PUSH
17465: LD_INT 11
17467: PUSH
17468: LD_INT 9
17470: PUSH
17471: LD_INT 20
17473: PUSH
17474: LD_INT 19
17476: PUSH
17477: LD_INT 21
17479: PUSH
17480: LD_INT 24
17482: PUSH
17483: LD_INT 22
17485: PUSH
17486: LD_INT 25
17488: PUSH
17489: LD_INT 28
17491: PUSH
17492: LD_INT 29
17494: PUSH
17495: LD_INT 30
17497: PUSH
17498: LD_INT 31
17500: PUSH
17501: LD_INT 37
17503: PUSH
17504: LD_INT 38
17506: PUSH
17507: LD_INT 32
17509: PUSH
17510: LD_INT 27
17512: PUSH
17513: LD_INT 33
17515: PUSH
17516: LD_INT 69
17518: PUSH
17519: LD_INT 39
17521: PUSH
17522: LD_INT 34
17524: PUSH
17525: LD_INT 40
17527: PUSH
17528: LD_INT 71
17530: PUSH
17531: LD_INT 23
17533: PUSH
17534: LD_INT 44
17536: PUSH
17537: LD_INT 48
17539: PUSH
17540: LD_INT 49
17542: PUSH
17543: LD_INT 50
17545: PUSH
17546: LD_INT 51
17548: PUSH
17549: LD_INT 52
17551: PUSH
17552: LD_INT 53
17554: PUSH
17555: LD_INT 54
17557: PUSH
17558: LD_INT 55
17560: PUSH
17561: LD_INT 56
17563: PUSH
17564: LD_INT 57
17566: PUSH
17567: LD_INT 58
17569: PUSH
17570: LD_INT 59
17572: PUSH
17573: LD_INT 63
17575: PUSH
17576: LD_INT 64
17578: PUSH
17579: LD_INT 65
17581: PUSH
17582: LD_INT 82
17584: PUSH
17585: LD_INT 83
17587: PUSH
17588: LD_INT 84
17590: PUSH
17591: LD_INT 85
17593: PUSH
17594: LD_INT 86
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: ST_TO_ADDR
17652: GO 17655
17654: POP
// if state > - 1 and state < 3 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 1
17662: NEG
17663: GREATER
17664: PUSH
17665: LD_VAR 0 3
17669: PUSH
17670: LD_INT 3
17672: LESS
17673: AND
17674: IFFALSE 17731
// for i in result do
17676: LD_ADDR_VAR 0 5
17680: PUSH
17681: LD_VAR 0 4
17685: PUSH
17686: FOR_IN
17687: IFFALSE 17729
// if GetTech ( i , side ) <> state then
17689: LD_VAR 0 5
17693: PPUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 321
17703: PUSH
17704: LD_VAR 0 3
17708: NONEQUAL
17709: IFFALSE 17727
// result := result diff i ;
17711: LD_ADDR_VAR 0 4
17715: PUSH
17716: LD_VAR 0 4
17720: PUSH
17721: LD_VAR 0 5
17725: DIFF
17726: ST_TO_ADDR
17727: GO 17686
17729: POP
17730: POP
// end ;
17731: LD_VAR 0 4
17735: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// result := true ;
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_INT 1
17748: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17749: LD_ADDR_VAR 0 5
17753: PUSH
17754: LD_VAR 0 2
17758: PPUSH
17759: CALL_OW 480
17763: ST_TO_ADDR
// if not tmp then
17764: LD_VAR 0 5
17768: NOT
17769: IFFALSE 17773
// exit ;
17771: GO 17822
// for i in tmp do
17773: LD_ADDR_VAR 0 4
17777: PUSH
17778: LD_VAR 0 5
17782: PUSH
17783: FOR_IN
17784: IFFALSE 17820
// if GetTech ( i , side ) <> state_researched then
17786: LD_VAR 0 4
17790: PPUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: CALL_OW 321
17800: PUSH
17801: LD_INT 2
17803: NONEQUAL
17804: IFFALSE 17818
// begin result := false ;
17806: LD_ADDR_VAR 0 3
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// exit ;
17814: POP
17815: POP
17816: GO 17822
// end ;
17818: GO 17783
17820: POP
17821: POP
// end ;
17822: LD_VAR 0 3
17826: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17827: LD_INT 0
17829: PPUSH
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17842: LD_VAR 0 1
17846: NOT
17847: PUSH
17848: LD_VAR 0 1
17852: PPUSH
17853: CALL_OW 257
17857: PUSH
17858: LD_INT 9
17860: NONEQUAL
17861: OR
17862: IFFALSE 17866
// exit ;
17864: GO 18439
// side := GetSide ( unit ) ;
17866: LD_ADDR_VAR 0 9
17870: PUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 255
17880: ST_TO_ADDR
// tech_space := tech_spacanom ;
17881: LD_ADDR_VAR 0 12
17885: PUSH
17886: LD_INT 29
17888: ST_TO_ADDR
// tech_time := tech_taurad ;
17889: LD_ADDR_VAR 0 13
17893: PUSH
17894: LD_INT 28
17896: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17897: LD_ADDR_VAR 0 11
17901: PUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 310
17911: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17912: LD_VAR 0 11
17916: PPUSH
17917: CALL_OW 247
17921: PUSH
17922: LD_INT 2
17924: EQUAL
17925: IFFALSE 17929
// exit ;
17927: GO 18439
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17929: LD_ADDR_VAR 0 8
17933: PUSH
17934: LD_INT 81
17936: PUSH
17937: LD_VAR 0 9
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 3
17948: PUSH
17949: LD_INT 21
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 69
17971: ST_TO_ADDR
// if not tmp then
17972: LD_VAR 0 8
17976: NOT
17977: IFFALSE 17981
// exit ;
17979: GO 18439
// if in_unit then
17981: LD_VAR 0 11
17985: IFFALSE 18009
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17987: LD_ADDR_VAR 0 10
17991: PUSH
17992: LD_VAR 0 8
17996: PPUSH
17997: LD_VAR 0 11
18001: PPUSH
18002: CALL_OW 74
18006: ST_TO_ADDR
18007: GO 18029
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18009: LD_ADDR_VAR 0 10
18013: PUSH
18014: LD_VAR 0 8
18018: PPUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 74
18028: ST_TO_ADDR
// if not enemy then
18029: LD_VAR 0 10
18033: NOT
18034: IFFALSE 18038
// exit ;
18036: GO 18439
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18038: LD_VAR 0 11
18042: PUSH
18043: LD_VAR 0 11
18047: PPUSH
18048: LD_VAR 0 10
18052: PPUSH
18053: CALL_OW 296
18057: PUSH
18058: LD_INT 13
18060: GREATER
18061: AND
18062: PUSH
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_VAR 0 10
18072: PPUSH
18073: CALL_OW 296
18077: PUSH
18078: LD_INT 12
18080: GREATER
18081: OR
18082: IFFALSE 18086
// exit ;
18084: GO 18439
// missile := [ 1 ] ;
18086: LD_ADDR_VAR 0 14
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18097: LD_VAR 0 9
18101: PPUSH
18102: LD_VAR 0 12
18106: PPUSH
18107: CALL_OW 325
18111: IFFALSE 18140
// missile := Replace ( missile , missile + 1 , 2 ) ;
18113: LD_ADDR_VAR 0 14
18117: PUSH
18118: LD_VAR 0 14
18122: PPUSH
18123: LD_VAR 0 14
18127: PUSH
18128: LD_INT 1
18130: PLUS
18131: PPUSH
18132: LD_INT 2
18134: PPUSH
18135: CALL_OW 1
18139: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18140: LD_VAR 0 9
18144: PPUSH
18145: LD_VAR 0 13
18149: PPUSH
18150: CALL_OW 325
18154: PUSH
18155: LD_VAR 0 10
18159: PPUSH
18160: CALL_OW 255
18164: PPUSH
18165: LD_VAR 0 13
18169: PPUSH
18170: CALL_OW 325
18174: NOT
18175: AND
18176: IFFALSE 18205
// missile := Replace ( missile , missile + 1 , 3 ) ;
18178: LD_ADDR_VAR 0 14
18182: PUSH
18183: LD_VAR 0 14
18187: PPUSH
18188: LD_VAR 0 14
18192: PUSH
18193: LD_INT 1
18195: PLUS
18196: PPUSH
18197: LD_INT 3
18199: PPUSH
18200: CALL_OW 1
18204: ST_TO_ADDR
// if missile < 2 then
18205: LD_VAR 0 14
18209: PUSH
18210: LD_INT 2
18212: LESS
18213: IFFALSE 18217
// exit ;
18215: GO 18439
// x := GetX ( enemy ) ;
18217: LD_ADDR_VAR 0 4
18221: PUSH
18222: LD_VAR 0 10
18226: PPUSH
18227: CALL_OW 250
18231: ST_TO_ADDR
// y := GetY ( enemy ) ;
18232: LD_ADDR_VAR 0 5
18236: PUSH
18237: LD_VAR 0 10
18241: PPUSH
18242: CALL_OW 251
18246: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18247: LD_ADDR_VAR 0 6
18251: PUSH
18252: LD_VAR 0 4
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PPUSH
18261: LD_INT 1
18263: PPUSH
18264: CALL_OW 12
18268: PLUS
18269: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18270: LD_ADDR_VAR 0 7
18274: PUSH
18275: LD_VAR 0 5
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 12
18291: PLUS
18292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18293: LD_VAR 0 6
18297: PPUSH
18298: LD_VAR 0 7
18302: PPUSH
18303: CALL_OW 488
18307: NOT
18308: IFFALSE 18330
// begin _x := x ;
18310: LD_ADDR_VAR 0 6
18314: PUSH
18315: LD_VAR 0 4
18319: ST_TO_ADDR
// _y := y ;
18320: LD_ADDR_VAR 0 7
18324: PUSH
18325: LD_VAR 0 5
18329: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18330: LD_ADDR_VAR 0 3
18334: PUSH
18335: LD_INT 1
18337: PPUSH
18338: LD_VAR 0 14
18342: PPUSH
18343: CALL_OW 12
18347: ST_TO_ADDR
// case i of 1 :
18348: LD_VAR 0 3
18352: PUSH
18353: LD_INT 1
18355: DOUBLE
18356: EQUAL
18357: IFTRUE 18361
18359: GO 18378
18361: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_VAR 0 10
18371: PPUSH
18372: CALL_OW 115
18376: GO 18439
18378: LD_INT 2
18380: DOUBLE
18381: EQUAL
18382: IFTRUE 18386
18384: GO 18408
18386: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18387: LD_VAR 0 1
18391: PPUSH
18392: LD_VAR 0 6
18396: PPUSH
18397: LD_VAR 0 7
18401: PPUSH
18402: CALL_OW 153
18406: GO 18439
18408: LD_INT 3
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18438
18416: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18417: LD_VAR 0 1
18421: PPUSH
18422: LD_VAR 0 6
18426: PPUSH
18427: LD_VAR 0 7
18431: PPUSH
18432: CALL_OW 154
18436: GO 18439
18438: POP
// end ;
18439: LD_VAR 0 2
18443: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
// if not unit or not building then
18452: LD_VAR 0 1
18456: NOT
18457: PUSH
18458: LD_VAR 0 2
18462: NOT
18463: OR
18464: IFFALSE 18468
// exit ;
18466: GO 18626
// x := GetX ( building ) ;
18468: LD_ADDR_VAR 0 5
18472: PUSH
18473: LD_VAR 0 2
18477: PPUSH
18478: CALL_OW 250
18482: ST_TO_ADDR
// y := GetY ( building ) ;
18483: LD_ADDR_VAR 0 6
18487: PUSH
18488: LD_VAR 0 2
18492: PPUSH
18493: CALL_OW 251
18497: ST_TO_ADDR
// for i = 0 to 5 do
18498: LD_ADDR_VAR 0 4
18502: PUSH
18503: DOUBLE
18504: LD_INT 0
18506: DEC
18507: ST_TO_ADDR
18508: LD_INT 5
18510: PUSH
18511: FOR_TO
18512: IFFALSE 18624
// begin _x := ShiftX ( x , i , 3 ) ;
18514: LD_ADDR_VAR 0 7
18518: PUSH
18519: LD_VAR 0 5
18523: PPUSH
18524: LD_VAR 0 4
18528: PPUSH
18529: LD_INT 3
18531: PPUSH
18532: CALL_OW 272
18536: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18537: LD_ADDR_VAR 0 8
18541: PUSH
18542: LD_VAR 0 6
18546: PPUSH
18547: LD_VAR 0 4
18551: PPUSH
18552: LD_INT 3
18554: PPUSH
18555: CALL_OW 273
18559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18560: LD_VAR 0 7
18564: PPUSH
18565: LD_VAR 0 8
18569: PPUSH
18570: CALL_OW 488
18574: NOT
18575: IFFALSE 18579
// continue ;
18577: GO 18511
// if HexInfo ( _x , _y ) = 0 then
18579: LD_VAR 0 7
18583: PPUSH
18584: LD_VAR 0 8
18588: PPUSH
18589: CALL_OW 428
18593: PUSH
18594: LD_INT 0
18596: EQUAL
18597: IFFALSE 18622
// begin ComMoveXY ( unit , _x , _y ) ;
18599: LD_VAR 0 1
18603: PPUSH
18604: LD_VAR 0 7
18608: PPUSH
18609: LD_VAR 0 8
18613: PPUSH
18614: CALL_OW 111
// exit ;
18618: POP
18619: POP
18620: GO 18626
// end ; end ;
18622: GO 18511
18624: POP
18625: POP
// end ;
18626: LD_VAR 0 3
18630: RET
// export function ScanBase ( side , base_area ) ; begin
18631: LD_INT 0
18633: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18634: LD_ADDR_VAR 0 3
18638: PUSH
18639: LD_VAR 0 2
18643: PPUSH
18644: LD_INT 81
18646: PUSH
18647: LD_VAR 0 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 70
18660: ST_TO_ADDR
// end ;
18661: LD_VAR 0 3
18665: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18666: LD_INT 0
18668: PPUSH
18669: PPUSH
18670: PPUSH
18671: PPUSH
// result := false ;
18672: LD_ADDR_VAR 0 2
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// side := GetSide ( unit ) ;
18680: LD_ADDR_VAR 0 3
18684: PUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 255
18694: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18695: LD_ADDR_VAR 0 4
18699: PUSH
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL_OW 248
18709: ST_TO_ADDR
// case nat of 1 :
18710: LD_VAR 0 4
18714: PUSH
18715: LD_INT 1
18717: DOUBLE
18718: EQUAL
18719: IFTRUE 18723
18721: GO 18734
18723: POP
// tech := tech_lassight ; 2 :
18724: LD_ADDR_VAR 0 5
18728: PUSH
18729: LD_INT 12
18731: ST_TO_ADDR
18732: GO 18773
18734: LD_INT 2
18736: DOUBLE
18737: EQUAL
18738: IFTRUE 18742
18740: GO 18753
18742: POP
// tech := tech_mortar ; 3 :
18743: LD_ADDR_VAR 0 5
18747: PUSH
18748: LD_INT 41
18750: ST_TO_ADDR
18751: GO 18773
18753: LD_INT 3
18755: DOUBLE
18756: EQUAL
18757: IFTRUE 18761
18759: GO 18772
18761: POP
// tech := tech_bazooka ; end ;
18762: LD_ADDR_VAR 0 5
18766: PUSH
18767: LD_INT 44
18769: ST_TO_ADDR
18770: GO 18773
18772: POP
// if Researched ( side , tech ) then
18773: LD_VAR 0 3
18777: PPUSH
18778: LD_VAR 0 5
18782: PPUSH
18783: CALL_OW 325
18787: IFFALSE 18814
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_INT 5
18796: PUSH
18797: LD_INT 8
18799: PUSH
18800: LD_INT 9
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_VAR 0 4
18812: ARRAY
18813: ST_TO_ADDR
// end ;
18814: LD_VAR 0 2
18818: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
18823: PPUSH
// if not mines then
18824: LD_VAR 0 2
18828: NOT
18829: IFFALSE 18833
// exit ;
18831: GO 18977
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18833: LD_ADDR_VAR 0 5
18837: PUSH
18838: LD_INT 81
18840: PUSH
18841: LD_VAR 0 1
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 3
18852: PUSH
18853: LD_INT 21
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PPUSH
18871: CALL_OW 69
18875: ST_TO_ADDR
// for i in mines do
18876: LD_ADDR_VAR 0 4
18880: PUSH
18881: LD_VAR 0 2
18885: PUSH
18886: FOR_IN
18887: IFFALSE 18975
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18889: LD_VAR 0 4
18893: PUSH
18894: LD_INT 1
18896: ARRAY
18897: PPUSH
18898: LD_VAR 0 4
18902: PUSH
18903: LD_INT 2
18905: ARRAY
18906: PPUSH
18907: CALL_OW 458
18911: NOT
18912: IFFALSE 18916
// continue ;
18914: GO 18886
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18916: LD_VAR 0 4
18920: PUSH
18921: LD_INT 1
18923: ARRAY
18924: PPUSH
18925: LD_VAR 0 4
18929: PUSH
18930: LD_INT 2
18932: ARRAY
18933: PPUSH
18934: CALL_OW 428
18938: PUSH
18939: LD_VAR 0 5
18943: IN
18944: IFFALSE 18973
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18946: LD_VAR 0 4
18950: PUSH
18951: LD_INT 1
18953: ARRAY
18954: PPUSH
18955: LD_VAR 0 4
18959: PUSH
18960: LD_INT 2
18962: ARRAY
18963: PPUSH
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 456
// end ;
18973: GO 18886
18975: POP
18976: POP
// end ;
18977: LD_VAR 0 3
18981: RET
// export function Count ( array ) ; var i ; begin
18982: LD_INT 0
18984: PPUSH
18985: PPUSH
// result := 0 ;
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: LD_INT 0
18993: ST_TO_ADDR
// for i in array do
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: LD_VAR 0 1
19003: PUSH
19004: FOR_IN
19005: IFFALSE 19029
// if i then
19007: LD_VAR 0 3
19011: IFFALSE 19027
// result := result + 1 ;
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: LD_VAR 0 2
19022: PUSH
19023: LD_INT 1
19025: PLUS
19026: ST_TO_ADDR
19027: GO 19004
19029: POP
19030: POP
// end ;
19031: LD_VAR 0 2
19035: RET
// export function IsEmpty ( building ) ; begin
19036: LD_INT 0
19038: PPUSH
// if not building then
19039: LD_VAR 0 1
19043: NOT
19044: IFFALSE 19048
// exit ;
19046: GO 19091
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19048: LD_ADDR_VAR 0 2
19052: PUSH
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 255
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 58
19077: PUSH
19078: EMPTY
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: IN
19090: ST_TO_ADDR
// end ;
19091: LD_VAR 0 2
19095: RET
// export function IsNotFull ( building ) ; begin
19096: LD_INT 0
19098: PPUSH
// if not building then
19099: LD_VAR 0 1
19103: NOT
19104: IFFALSE 19108
// exit ;
19106: GO 19127
// result := UnitsInside ( building ) < 6 ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: CALL_OW 313
19122: PUSH
19123: LD_INT 6
19125: LESS
19126: ST_TO_ADDR
// end ;
19127: LD_VAR 0 2
19131: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19132: LD_INT 0
19134: PPUSH
19135: PPUSH
19136: PPUSH
19137: PPUSH
// tmp := [ ] ;
19138: LD_ADDR_VAR 0 3
19142: PUSH
19143: EMPTY
19144: ST_TO_ADDR
// list := [ ] ;
19145: LD_ADDR_VAR 0 5
19149: PUSH
19150: EMPTY
19151: ST_TO_ADDR
// for i = 16 to 25 do
19152: LD_ADDR_VAR 0 4
19156: PUSH
19157: DOUBLE
19158: LD_INT 16
19160: DEC
19161: ST_TO_ADDR
19162: LD_INT 25
19164: PUSH
19165: FOR_TO
19166: IFFALSE 19239
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 22
19180: PUSH
19181: LD_VAR 0 1
19185: PPUSH
19186: CALL_OW 255
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 91
19197: PUSH
19198: LD_VAR 0 1
19202: PUSH
19203: LD_INT 6
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 30
19213: PUSH
19214: LD_VAR 0 4
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: PPUSH
19231: CALL_OW 69
19235: ADD
19236: ST_TO_ADDR
19237: GO 19165
19239: POP
19240: POP
// for i = 1 to tmp do
19241: LD_ADDR_VAR 0 4
19245: PUSH
19246: DOUBLE
19247: LD_INT 1
19249: DEC
19250: ST_TO_ADDR
19251: LD_VAR 0 3
19255: PUSH
19256: FOR_TO
19257: IFFALSE 19345
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19259: LD_ADDR_VAR 0 5
19263: PUSH
19264: LD_VAR 0 5
19268: PUSH
19269: LD_VAR 0 3
19273: PUSH
19274: LD_VAR 0 4
19278: ARRAY
19279: PPUSH
19280: CALL_OW 266
19284: PUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_VAR 0 4
19294: ARRAY
19295: PPUSH
19296: CALL_OW 250
19300: PUSH
19301: LD_VAR 0 3
19305: PUSH
19306: LD_VAR 0 4
19310: ARRAY
19311: PPUSH
19312: CALL_OW 251
19316: PUSH
19317: LD_VAR 0 3
19321: PUSH
19322: LD_VAR 0 4
19326: ARRAY
19327: PPUSH
19328: CALL_OW 254
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: ADD
19342: ST_TO_ADDR
19343: GO 19256
19345: POP
19346: POP
// result := list ;
19347: LD_ADDR_VAR 0 2
19351: PUSH
19352: LD_VAR 0 5
19356: ST_TO_ADDR
// end ;
19357: LD_VAR 0 2
19361: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
19368: PPUSH
19369: PPUSH
19370: PPUSH
// if not factory then
19371: LD_VAR 0 1
19375: NOT
19376: IFFALSE 19380
// exit ;
19378: GO 19973
// if control = control_apeman then
19380: LD_VAR 0 4
19384: PUSH
19385: LD_INT 5
19387: EQUAL
19388: IFFALSE 19497
// begin tmp := UnitsInside ( factory ) ;
19390: LD_ADDR_VAR 0 8
19394: PUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 313
19404: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19405: LD_VAR 0 8
19409: PPUSH
19410: LD_INT 25
19412: PUSH
19413: LD_INT 12
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PPUSH
19420: CALL_OW 72
19424: NOT
19425: IFFALSE 19435
// control := control_manual ;
19427: LD_ADDR_VAR 0 4
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19435: LD_ADDR_VAR 0 8
19439: PUSH
19440: LD_VAR 0 1
19444: PPUSH
19445: CALL 19132 0 1
19449: ST_TO_ADDR
// if tmp then
19450: LD_VAR 0 8
19454: IFFALSE 19497
// begin for i in tmp do
19456: LD_ADDR_VAR 0 7
19460: PUSH
19461: LD_VAR 0 8
19465: PUSH
19466: FOR_IN
19467: IFFALSE 19495
// if i [ 1 ] = b_ext_radio then
19469: LD_VAR 0 7
19473: PUSH
19474: LD_INT 1
19476: ARRAY
19477: PUSH
19478: LD_INT 22
19480: EQUAL
19481: IFFALSE 19493
// begin control := control_remote ;
19483: LD_ADDR_VAR 0 4
19487: PUSH
19488: LD_INT 2
19490: ST_TO_ADDR
// break ;
19491: GO 19495
// end ;
19493: GO 19466
19495: POP
19496: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19497: LD_VAR 0 1
19501: PPUSH
19502: LD_VAR 0 2
19506: PPUSH
19507: LD_VAR 0 3
19511: PPUSH
19512: LD_VAR 0 4
19516: PPUSH
19517: LD_VAR 0 5
19521: PPUSH
19522: CALL_OW 448
19526: IFFALSE 19561
// begin result := [ chassis , engine , control , weapon ] ;
19528: LD_ADDR_VAR 0 6
19532: PUSH
19533: LD_VAR 0 2
19537: PUSH
19538: LD_VAR 0 3
19542: PUSH
19543: LD_VAR 0 4
19547: PUSH
19548: LD_VAR 0 5
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: ST_TO_ADDR
// exit ;
19559: GO 19973
// end ; _chassis := AvailableChassisList ( factory ) ;
19561: LD_ADDR_VAR 0 9
19565: PUSH
19566: LD_VAR 0 1
19570: PPUSH
19571: CALL_OW 475
19575: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19576: LD_ADDR_VAR 0 11
19580: PUSH
19581: LD_VAR 0 1
19585: PPUSH
19586: CALL_OW 476
19590: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19591: LD_ADDR_VAR 0 12
19595: PUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 477
19605: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19606: LD_ADDR_VAR 0 10
19610: PUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 478
19620: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19621: LD_VAR 0 9
19625: NOT
19626: PUSH
19627: LD_VAR 0 11
19631: NOT
19632: OR
19633: PUSH
19634: LD_VAR 0 12
19638: NOT
19639: OR
19640: PUSH
19641: LD_VAR 0 10
19645: NOT
19646: OR
19647: IFFALSE 19682
// begin result := [ chassis , engine , control , weapon ] ;
19649: LD_ADDR_VAR 0 6
19653: PUSH
19654: LD_VAR 0 2
19658: PUSH
19659: LD_VAR 0 3
19663: PUSH
19664: LD_VAR 0 4
19668: PUSH
19669: LD_VAR 0 5
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: ST_TO_ADDR
// exit ;
19680: GO 19973
// end ; if not chassis in _chassis then
19682: LD_VAR 0 2
19686: PUSH
19687: LD_VAR 0 9
19691: IN
19692: NOT
19693: IFFALSE 19719
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_VAR 0 9
19704: PUSH
19705: LD_INT 1
19707: PPUSH
19708: LD_VAR 0 9
19712: PPUSH
19713: CALL_OW 12
19717: ARRAY
19718: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19719: LD_VAR 0 2
19723: PPUSH
19724: LD_VAR 0 3
19728: PPUSH
19729: CALL 19978 0 2
19733: NOT
19734: IFFALSE 19793
// repeat engine := _engine [ 1 ] ;
19736: LD_ADDR_VAR 0 3
19740: PUSH
19741: LD_VAR 0 11
19745: PUSH
19746: LD_INT 1
19748: ARRAY
19749: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19750: LD_ADDR_VAR 0 11
19754: PUSH
19755: LD_VAR 0 11
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 3
19767: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19768: LD_VAR 0 2
19772: PPUSH
19773: LD_VAR 0 3
19777: PPUSH
19778: CALL 19978 0 2
19782: PUSH
19783: LD_VAR 0 11
19787: PUSH
19788: EMPTY
19789: EQUAL
19790: OR
19791: IFFALSE 19736
// if not control in _control then
19793: LD_VAR 0 4
19797: PUSH
19798: LD_VAR 0 12
19802: IN
19803: NOT
19804: IFFALSE 19830
// control := _control [ rand ( 1 , _control ) ] ;
19806: LD_ADDR_VAR 0 4
19810: PUSH
19811: LD_VAR 0 12
19815: PUSH
19816: LD_INT 1
19818: PPUSH
19819: LD_VAR 0 12
19823: PPUSH
19824: CALL_OW 12
19828: ARRAY
19829: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_VAR 0 5
19839: PPUSH
19840: CALL 20198 0 2
19844: NOT
19845: IFFALSE 19904
// repeat weapon := _weapon [ 1 ] ;
19847: LD_ADDR_VAR 0 5
19851: PUSH
19852: LD_VAR 0 10
19856: PUSH
19857: LD_INT 1
19859: ARRAY
19860: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19861: LD_ADDR_VAR 0 10
19865: PUSH
19866: LD_VAR 0 10
19870: PPUSH
19871: LD_INT 1
19873: PPUSH
19874: CALL_OW 3
19878: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19879: LD_VAR 0 2
19883: PPUSH
19884: LD_VAR 0 5
19888: PPUSH
19889: CALL 20198 0 2
19893: PUSH
19894: LD_VAR 0 10
19898: PUSH
19899: EMPTY
19900: EQUAL
19901: OR
19902: IFFALSE 19847
// result := [ ] ;
19904: LD_ADDR_VAR 0 6
19908: PUSH
19909: EMPTY
19910: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19911: LD_VAR 0 1
19915: PPUSH
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: LD_VAR 0 4
19930: PPUSH
19931: LD_VAR 0 5
19935: PPUSH
19936: CALL_OW 448
19940: IFFALSE 19973
// result := [ chassis , engine , control , weapon ] ;
19942: LD_ADDR_VAR 0 6
19946: PUSH
19947: LD_VAR 0 2
19951: PUSH
19952: LD_VAR 0 3
19956: PUSH
19957: LD_VAR 0 4
19961: PUSH
19962: LD_VAR 0 5
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: ST_TO_ADDR
// end ;
19973: LD_VAR 0 6
19977: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19978: LD_INT 0
19980: PPUSH
// if not chassis or not engine then
19981: LD_VAR 0 1
19985: NOT
19986: PUSH
19987: LD_VAR 0 2
19991: NOT
19992: OR
19993: IFFALSE 19997
// exit ;
19995: GO 20193
// case engine of engine_solar :
19997: LD_VAR 0 2
20001: PUSH
20002: LD_INT 2
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20048
20010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20011: LD_ADDR_VAR 0 3
20015: PUSH
20016: LD_INT 11
20018: PUSH
20019: LD_INT 12
20021: PUSH
20022: LD_INT 13
20024: PUSH
20025: LD_INT 14
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 3
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: ST_TO_ADDR
20046: GO 20177
20048: LD_INT 1
20050: DOUBLE
20051: EQUAL
20052: IFTRUE 20056
20054: GO 20118
20056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20057: LD_ADDR_VAR 0 3
20061: PUSH
20062: LD_INT 11
20064: PUSH
20065: LD_INT 12
20067: PUSH
20068: LD_INT 13
20070: PUSH
20071: LD_INT 14
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: LD_INT 4
20085: PUSH
20086: LD_INT 5
20088: PUSH
20089: LD_INT 21
20091: PUSH
20092: LD_INT 23
20094: PUSH
20095: LD_INT 22
20097: PUSH
20098: LD_INT 24
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 20177
20118: LD_INT 3
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20176
20126: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20127: LD_ADDR_VAR 0 3
20131: PUSH
20132: LD_INT 13
20134: PUSH
20135: LD_INT 14
20137: PUSH
20138: LD_INT 2
20140: PUSH
20141: LD_INT 3
20143: PUSH
20144: LD_INT 4
20146: PUSH
20147: LD_INT 5
20149: PUSH
20150: LD_INT 21
20152: PUSH
20153: LD_INT 22
20155: PUSH
20156: LD_INT 23
20158: PUSH
20159: LD_INT 24
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: ST_TO_ADDR
20174: GO 20177
20176: POP
// result := ( chassis in result ) ;
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: LD_VAR 0 1
20186: PUSH
20187: LD_VAR 0 3
20191: IN
20192: ST_TO_ADDR
// end ;
20193: LD_VAR 0 3
20197: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20198: LD_INT 0
20200: PPUSH
// if not chassis or not weapon then
20201: LD_VAR 0 1
20205: NOT
20206: PUSH
20207: LD_VAR 0 2
20211: NOT
20212: OR
20213: IFFALSE 20217
// exit ;
20215: GO 21279
// case weapon of us_machine_gun :
20217: LD_VAR 0 2
20221: PUSH
20222: LD_INT 2
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20260
20230: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20231: LD_ADDR_VAR 0 3
20235: PUSH
20236: LD_INT 1
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: LD_INT 3
20244: PUSH
20245: LD_INT 4
20247: PUSH
20248: LD_INT 5
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: ST_TO_ADDR
20258: GO 21263
20260: LD_INT 3
20262: DOUBLE
20263: EQUAL
20264: IFTRUE 20268
20266: GO 20298
20268: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20269: LD_ADDR_VAR 0 3
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 4
20285: PUSH
20286: LD_INT 5
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: ST_TO_ADDR
20296: GO 21263
20298: LD_INT 11
20300: DOUBLE
20301: EQUAL
20302: IFTRUE 20306
20304: GO 20336
20306: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20307: LD_ADDR_VAR 0 3
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: LD_INT 3
20320: PUSH
20321: LD_INT 4
20323: PUSH
20324: LD_INT 5
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: ST_TO_ADDR
20334: GO 21263
20336: LD_INT 4
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20370
20344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20345: LD_ADDR_VAR 0 3
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: LD_INT 3
20355: PUSH
20356: LD_INT 4
20358: PUSH
20359: LD_INT 5
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: ST_TO_ADDR
20368: GO 21263
20370: LD_INT 5
20372: DOUBLE
20373: EQUAL
20374: IFTRUE 20378
20376: GO 20404
20378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20379: LD_ADDR_VAR 0 3
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: LD_INT 3
20389: PUSH
20390: LD_INT 4
20392: PUSH
20393: LD_INT 5
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: ST_TO_ADDR
20402: GO 21263
20404: LD_INT 9
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20438
20412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20413: LD_ADDR_VAR 0 3
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 3
20423: PUSH
20424: LD_INT 4
20426: PUSH
20427: LD_INT 5
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: ST_TO_ADDR
20436: GO 21263
20438: LD_INT 7
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20472
20446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20447: LD_ADDR_VAR 0 3
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: LD_INT 4
20460: PUSH
20461: LD_INT 5
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 21263
20472: LD_INT 12
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20506
20480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_INT 2
20488: PUSH
20489: LD_INT 3
20491: PUSH
20492: LD_INT 4
20494: PUSH
20495: LD_INT 5
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: ST_TO_ADDR
20504: GO 21263
20506: LD_INT 13
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20540
20514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20515: LD_ADDR_VAR 0 3
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 4
20528: PUSH
20529: LD_INT 5
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
20538: GO 21263
20540: LD_INT 14
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20566
20548: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20549: LD_ADDR_VAR 0 3
20553: PUSH
20554: LD_INT 4
20556: PUSH
20557: LD_INT 5
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: ST_TO_ADDR
20564: GO 21263
20566: LD_INT 6
20568: DOUBLE
20569: EQUAL
20570: IFTRUE 20574
20572: GO 20592
20574: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20575: LD_ADDR_VAR 0 3
20579: PUSH
20580: LD_INT 4
20582: PUSH
20583: LD_INT 5
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
20590: GO 21263
20592: LD_INT 10
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20618
20600: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_INT 4
20608: PUSH
20609: LD_INT 5
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: ST_TO_ADDR
20616: GO 21263
20618: LD_INT 22
20620: DOUBLE
20621: EQUAL
20622: IFTRUE 20626
20624: GO 20652
20626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20627: LD_ADDR_VAR 0 3
20631: PUSH
20632: LD_INT 11
20634: PUSH
20635: LD_INT 12
20637: PUSH
20638: LD_INT 13
20640: PUSH
20641: LD_INT 14
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: ST_TO_ADDR
20650: GO 21263
20652: LD_INT 23
20654: DOUBLE
20655: EQUAL
20656: IFTRUE 20660
20658: GO 20686
20660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20661: LD_ADDR_VAR 0 3
20665: PUSH
20666: LD_INT 11
20668: PUSH
20669: LD_INT 12
20671: PUSH
20672: LD_INT 13
20674: PUSH
20675: LD_INT 14
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: ST_TO_ADDR
20684: GO 21263
20686: LD_INT 24
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20694
20692: GO 20720
20694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20695: LD_ADDR_VAR 0 3
20699: PUSH
20700: LD_INT 11
20702: PUSH
20703: LD_INT 12
20705: PUSH
20706: LD_INT 13
20708: PUSH
20709: LD_INT 14
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: ST_TO_ADDR
20718: GO 21263
20720: LD_INT 30
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20754
20728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20729: LD_ADDR_VAR 0 3
20733: PUSH
20734: LD_INT 11
20736: PUSH
20737: LD_INT 12
20739: PUSH
20740: LD_INT 13
20742: PUSH
20743: LD_INT 14
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
20752: GO 21263
20754: LD_INT 25
20756: DOUBLE
20757: EQUAL
20758: IFTRUE 20762
20760: GO 20780
20762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20763: LD_ADDR_VAR 0 3
20767: PUSH
20768: LD_INT 13
20770: PUSH
20771: LD_INT 14
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: ST_TO_ADDR
20778: GO 21263
20780: LD_INT 27
20782: DOUBLE
20783: EQUAL
20784: IFTRUE 20788
20786: GO 20806
20788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20789: LD_ADDR_VAR 0 3
20793: PUSH
20794: LD_INT 13
20796: PUSH
20797: LD_INT 14
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: ST_TO_ADDR
20804: GO 21263
20806: LD_EXP 112
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20842
20816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20817: LD_ADDR_VAR 0 3
20821: PUSH
20822: LD_INT 11
20824: PUSH
20825: LD_INT 12
20827: PUSH
20828: LD_INT 13
20830: PUSH
20831: LD_INT 14
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: ST_TO_ADDR
20840: GO 21263
20842: LD_INT 28
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20868
20850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20851: LD_ADDR_VAR 0 3
20855: PUSH
20856: LD_INT 13
20858: PUSH
20859: LD_INT 14
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: ST_TO_ADDR
20866: GO 21263
20868: LD_INT 29
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 20894
20876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20877: LD_ADDR_VAR 0 3
20881: PUSH
20882: LD_INT 13
20884: PUSH
20885: LD_INT 14
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: ST_TO_ADDR
20892: GO 21263
20894: LD_INT 31
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20920
20902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20903: LD_ADDR_VAR 0 3
20907: PUSH
20908: LD_INT 13
20910: PUSH
20911: LD_INT 14
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: ST_TO_ADDR
20918: GO 21263
20920: LD_INT 26
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20946
20928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20929: LD_ADDR_VAR 0 3
20933: PUSH
20934: LD_INT 13
20936: PUSH
20937: LD_INT 14
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: ST_TO_ADDR
20944: GO 21263
20946: LD_INT 42
20948: DOUBLE
20949: EQUAL
20950: IFTRUE 20954
20952: GO 20980
20954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20955: LD_ADDR_VAR 0 3
20959: PUSH
20960: LD_INT 21
20962: PUSH
20963: LD_INT 22
20965: PUSH
20966: LD_INT 23
20968: PUSH
20969: LD_INT 24
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
20978: GO 21263
20980: LD_INT 43
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 21014
20988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_INT 21
20996: PUSH
20997: LD_INT 22
20999: PUSH
21000: LD_INT 23
21002: PUSH
21003: LD_INT 24
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: ST_TO_ADDR
21012: GO 21263
21014: LD_INT 44
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21048
21022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21023: LD_ADDR_VAR 0 3
21027: PUSH
21028: LD_INT 21
21030: PUSH
21031: LD_INT 22
21033: PUSH
21034: LD_INT 23
21036: PUSH
21037: LD_INT 24
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: ST_TO_ADDR
21046: GO 21263
21048: LD_INT 45
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21082
21056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21057: LD_ADDR_VAR 0 3
21061: PUSH
21062: LD_INT 21
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_INT 23
21070: PUSH
21071: LD_INT 24
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: ST_TO_ADDR
21080: GO 21263
21082: LD_INT 49
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21116
21090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21091: LD_ADDR_VAR 0 3
21095: PUSH
21096: LD_INT 21
21098: PUSH
21099: LD_INT 22
21101: PUSH
21102: LD_INT 23
21104: PUSH
21105: LD_INT 24
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: ST_TO_ADDR
21114: GO 21263
21116: LD_INT 51
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21150
21124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21125: LD_ADDR_VAR 0 3
21129: PUSH
21130: LD_INT 21
21132: PUSH
21133: LD_INT 22
21135: PUSH
21136: LD_INT 23
21138: PUSH
21139: LD_INT 24
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: ST_TO_ADDR
21148: GO 21263
21150: LD_INT 52
21152: DOUBLE
21153: EQUAL
21154: IFTRUE 21158
21156: GO 21184
21158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 21
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 23
21172: PUSH
21173: LD_INT 24
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: ST_TO_ADDR
21182: GO 21263
21184: LD_INT 53
21186: DOUBLE
21187: EQUAL
21188: IFTRUE 21192
21190: GO 21210
21192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21193: LD_ADDR_VAR 0 3
21197: PUSH
21198: LD_INT 23
21200: PUSH
21201: LD_INT 24
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: ST_TO_ADDR
21208: GO 21263
21210: LD_INT 46
21212: DOUBLE
21213: EQUAL
21214: IFTRUE 21218
21216: GO 21236
21218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21219: LD_ADDR_VAR 0 3
21223: PUSH
21224: LD_INT 23
21226: PUSH
21227: LD_INT 24
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: ST_TO_ADDR
21234: GO 21263
21236: LD_INT 47
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21262
21244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21245: LD_ADDR_VAR 0 3
21249: PUSH
21250: LD_INT 23
21252: PUSH
21253: LD_INT 24
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: ST_TO_ADDR
21260: GO 21263
21262: POP
// result := ( chassis in result ) ;
21263: LD_ADDR_VAR 0 3
21267: PUSH
21268: LD_VAR 0 1
21272: PUSH
21273: LD_VAR 0 3
21277: IN
21278: ST_TO_ADDR
// end ;
21279: LD_VAR 0 3
21283: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
21290: PPUSH
21291: PPUSH
21292: PPUSH
// result := array ;
21293: LD_ADDR_VAR 0 5
21297: PUSH
21298: LD_VAR 0 1
21302: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21303: LD_VAR 0 1
21307: NOT
21308: PUSH
21309: LD_VAR 0 2
21313: NOT
21314: OR
21315: PUSH
21316: LD_VAR 0 3
21320: NOT
21321: OR
21322: PUSH
21323: LD_VAR 0 2
21327: PUSH
21328: LD_VAR 0 1
21332: GREATER
21333: OR
21334: PUSH
21335: LD_VAR 0 3
21339: PUSH
21340: LD_VAR 0 1
21344: GREATER
21345: OR
21346: IFFALSE 21350
// exit ;
21348: GO 21646
// if direction then
21350: LD_VAR 0 4
21354: IFFALSE 21418
// begin d := 1 ;
21356: LD_ADDR_VAR 0 9
21360: PUSH
21361: LD_INT 1
21363: ST_TO_ADDR
// if i_from > i_to then
21364: LD_VAR 0 2
21368: PUSH
21369: LD_VAR 0 3
21373: GREATER
21374: IFFALSE 21400
// length := ( array - i_from ) + i_to else
21376: LD_ADDR_VAR 0 11
21380: PUSH
21381: LD_VAR 0 1
21385: PUSH
21386: LD_VAR 0 2
21390: MINUS
21391: PUSH
21392: LD_VAR 0 3
21396: PLUS
21397: ST_TO_ADDR
21398: GO 21416
// length := i_to - i_from ;
21400: LD_ADDR_VAR 0 11
21404: PUSH
21405: LD_VAR 0 3
21409: PUSH
21410: LD_VAR 0 2
21414: MINUS
21415: ST_TO_ADDR
// end else
21416: GO 21479
// begin d := - 1 ;
21418: LD_ADDR_VAR 0 9
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: ST_TO_ADDR
// if i_from > i_to then
21427: LD_VAR 0 2
21431: PUSH
21432: LD_VAR 0 3
21436: GREATER
21437: IFFALSE 21457
// length := i_from - i_to else
21439: LD_ADDR_VAR 0 11
21443: PUSH
21444: LD_VAR 0 2
21448: PUSH
21449: LD_VAR 0 3
21453: MINUS
21454: ST_TO_ADDR
21455: GO 21479
// length := ( array - i_to ) + i_from ;
21457: LD_ADDR_VAR 0 11
21461: PUSH
21462: LD_VAR 0 1
21466: PUSH
21467: LD_VAR 0 3
21471: MINUS
21472: PUSH
21473: LD_VAR 0 2
21477: PLUS
21478: ST_TO_ADDR
// end ; if not length then
21479: LD_VAR 0 11
21483: NOT
21484: IFFALSE 21488
// exit ;
21486: GO 21646
// tmp := array ;
21488: LD_ADDR_VAR 0 10
21492: PUSH
21493: LD_VAR 0 1
21497: ST_TO_ADDR
// for i = 1 to length do
21498: LD_ADDR_VAR 0 6
21502: PUSH
21503: DOUBLE
21504: LD_INT 1
21506: DEC
21507: ST_TO_ADDR
21508: LD_VAR 0 11
21512: PUSH
21513: FOR_TO
21514: IFFALSE 21634
// begin for j = 1 to array do
21516: LD_ADDR_VAR 0 7
21520: PUSH
21521: DOUBLE
21522: LD_INT 1
21524: DEC
21525: ST_TO_ADDR
21526: LD_VAR 0 1
21530: PUSH
21531: FOR_TO
21532: IFFALSE 21620
// begin k := j + d ;
21534: LD_ADDR_VAR 0 8
21538: PUSH
21539: LD_VAR 0 7
21543: PUSH
21544: LD_VAR 0 9
21548: PLUS
21549: ST_TO_ADDR
// if k > array then
21550: LD_VAR 0 8
21554: PUSH
21555: LD_VAR 0 1
21559: GREATER
21560: IFFALSE 21570
// k := 1 ;
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: LD_INT 1
21569: ST_TO_ADDR
// if not k then
21570: LD_VAR 0 8
21574: NOT
21575: IFFALSE 21587
// k := array ;
21577: LD_ADDR_VAR 0 8
21581: PUSH
21582: LD_VAR 0 1
21586: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21587: LD_ADDR_VAR 0 10
21591: PUSH
21592: LD_VAR 0 10
21596: PPUSH
21597: LD_VAR 0 8
21601: PPUSH
21602: LD_VAR 0 1
21606: PUSH
21607: LD_VAR 0 7
21611: ARRAY
21612: PPUSH
21613: CALL_OW 1
21617: ST_TO_ADDR
// end ;
21618: GO 21531
21620: POP
21621: POP
// array := tmp ;
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_VAR 0 10
21631: ST_TO_ADDR
// end ;
21632: GO 21513
21634: POP
21635: POP
// result := array ;
21636: LD_ADDR_VAR 0 5
21640: PUSH
21641: LD_VAR 0 1
21645: ST_TO_ADDR
// end ;
21646: LD_VAR 0 5
21650: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
// result := 0 ;
21655: LD_ADDR_VAR 0 3
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// if not array or not value in array then
21663: LD_VAR 0 1
21667: NOT
21668: PUSH
21669: LD_VAR 0 2
21673: PUSH
21674: LD_VAR 0 1
21678: IN
21679: NOT
21680: OR
21681: IFFALSE 21685
// exit ;
21683: GO 21739
// for i = 1 to array do
21685: LD_ADDR_VAR 0 4
21689: PUSH
21690: DOUBLE
21691: LD_INT 1
21693: DEC
21694: ST_TO_ADDR
21695: LD_VAR 0 1
21699: PUSH
21700: FOR_TO
21701: IFFALSE 21737
// if value = array [ i ] then
21703: LD_VAR 0 2
21707: PUSH
21708: LD_VAR 0 1
21712: PUSH
21713: LD_VAR 0 4
21717: ARRAY
21718: EQUAL
21719: IFFALSE 21735
// begin result := i ;
21721: LD_ADDR_VAR 0 3
21725: PUSH
21726: LD_VAR 0 4
21730: ST_TO_ADDR
// exit ;
21731: POP
21732: POP
21733: GO 21739
// end ;
21735: GO 21700
21737: POP
21738: POP
// end ;
21739: LD_VAR 0 3
21743: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21744: LD_INT 0
21746: PPUSH
// vc_chassis := chassis ;
21747: LD_ADDR_OWVAR 37
21751: PUSH
21752: LD_VAR 0 1
21756: ST_TO_ADDR
// vc_engine := engine ;
21757: LD_ADDR_OWVAR 39
21761: PUSH
21762: LD_VAR 0 2
21766: ST_TO_ADDR
// vc_control := control ;
21767: LD_ADDR_OWVAR 38
21771: PUSH
21772: LD_VAR 0 3
21776: ST_TO_ADDR
// vc_weapon := weapon ;
21777: LD_ADDR_OWVAR 40
21781: PUSH
21782: LD_VAR 0 4
21786: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21787: LD_ADDR_OWVAR 41
21791: PUSH
21792: LD_VAR 0 5
21796: ST_TO_ADDR
// end ;
21797: LD_VAR 0 6
21801: RET
// export function WantPlant ( unit ) ; var task ; begin
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
// result := false ;
21806: LD_ADDR_VAR 0 2
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21814: LD_ADDR_VAR 0 3
21818: PUSH
21819: LD_VAR 0 1
21823: PPUSH
21824: CALL_OW 437
21828: ST_TO_ADDR
// if task then
21829: LD_VAR 0 3
21833: IFFALSE 21861
// if task [ 1 ] [ 1 ] = p then
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 1
21842: ARRAY
21843: PUSH
21844: LD_INT 1
21846: ARRAY
21847: PUSH
21848: LD_STRING p
21850: EQUAL
21851: IFFALSE 21861
// result := true ;
21853: LD_ADDR_VAR 0 2
21857: PUSH
21858: LD_INT 1
21860: ST_TO_ADDR
// end ;
21861: LD_VAR 0 2
21865: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21866: LD_INT 0
21868: PPUSH
21869: PPUSH
21870: PPUSH
21871: PPUSH
// if pos < 1 then
21872: LD_VAR 0 2
21876: PUSH
21877: LD_INT 1
21879: LESS
21880: IFFALSE 21884
// exit ;
21882: GO 22187
// if pos = 1 then
21884: LD_VAR 0 2
21888: PUSH
21889: LD_INT 1
21891: EQUAL
21892: IFFALSE 21925
// result := Replace ( arr , pos [ 1 ] , value ) else
21894: LD_ADDR_VAR 0 4
21898: PUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: LD_VAR 0 2
21908: PUSH
21909: LD_INT 1
21911: ARRAY
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: CALL_OW 1
21922: ST_TO_ADDR
21923: GO 22187
// begin tmp := arr ;
21925: LD_ADDR_VAR 0 6
21929: PUSH
21930: LD_VAR 0 1
21934: ST_TO_ADDR
// s_arr := [ tmp ] ;
21935: LD_ADDR_VAR 0 7
21939: PUSH
21940: LD_VAR 0 6
21944: PUSH
21945: EMPTY
21946: LIST
21947: ST_TO_ADDR
// for i = 1 to pos - 1 do
21948: LD_ADDR_VAR 0 5
21952: PUSH
21953: DOUBLE
21954: LD_INT 1
21956: DEC
21957: ST_TO_ADDR
21958: LD_VAR 0 2
21962: PUSH
21963: LD_INT 1
21965: MINUS
21966: PUSH
21967: FOR_TO
21968: IFFALSE 22013
// begin tmp := tmp [ pos [ i ] ] ;
21970: LD_ADDR_VAR 0 6
21974: PUSH
21975: LD_VAR 0 6
21979: PUSH
21980: LD_VAR 0 2
21984: PUSH
21985: LD_VAR 0 5
21989: ARRAY
21990: ARRAY
21991: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21992: LD_ADDR_VAR 0 7
21996: PUSH
21997: LD_VAR 0 7
22001: PUSH
22002: LD_VAR 0 6
22006: PUSH
22007: EMPTY
22008: LIST
22009: ADD
22010: ST_TO_ADDR
// end ;
22011: GO 21967
22013: POP
22014: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22015: LD_ADDR_VAR 0 6
22019: PUSH
22020: LD_VAR 0 6
22024: PPUSH
22025: LD_VAR 0 2
22029: PUSH
22030: LD_VAR 0 2
22034: ARRAY
22035: PPUSH
22036: LD_VAR 0 3
22040: PPUSH
22041: CALL_OW 1
22045: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22046: LD_ADDR_VAR 0 7
22050: PUSH
22051: LD_VAR 0 7
22055: PPUSH
22056: LD_VAR 0 7
22060: PPUSH
22061: LD_VAR 0 6
22065: PPUSH
22066: CALL_OW 1
22070: ST_TO_ADDR
// for i = s_arr downto 2 do
22071: LD_ADDR_VAR 0 5
22075: PUSH
22076: DOUBLE
22077: LD_VAR 0 7
22081: INC
22082: ST_TO_ADDR
22083: LD_INT 2
22085: PUSH
22086: FOR_DOWNTO
22087: IFFALSE 22171
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22089: LD_ADDR_VAR 0 6
22093: PUSH
22094: LD_VAR 0 7
22098: PUSH
22099: LD_VAR 0 5
22103: PUSH
22104: LD_INT 1
22106: MINUS
22107: ARRAY
22108: PPUSH
22109: LD_VAR 0 2
22113: PUSH
22114: LD_VAR 0 5
22118: PUSH
22119: LD_INT 1
22121: MINUS
22122: ARRAY
22123: PPUSH
22124: LD_VAR 0 7
22128: PUSH
22129: LD_VAR 0 5
22133: ARRAY
22134: PPUSH
22135: CALL_OW 1
22139: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22140: LD_ADDR_VAR 0 7
22144: PUSH
22145: LD_VAR 0 7
22149: PPUSH
22150: LD_VAR 0 5
22154: PUSH
22155: LD_INT 1
22157: MINUS
22158: PPUSH
22159: LD_VAR 0 6
22163: PPUSH
22164: CALL_OW 1
22168: ST_TO_ADDR
// end ;
22169: GO 22086
22171: POP
22172: POP
// result := s_arr [ 1 ] ;
22173: LD_ADDR_VAR 0 4
22177: PUSH
22178: LD_VAR 0 7
22182: PUSH
22183: LD_INT 1
22185: ARRAY
22186: ST_TO_ADDR
// end ; end ;
22187: LD_VAR 0 4
22191: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22192: LD_INT 0
22194: PPUSH
22195: PPUSH
// if not list then
22196: LD_VAR 0 1
22200: NOT
22201: IFFALSE 22205
// exit ;
22203: GO 22296
// i := list [ pos1 ] ;
22205: LD_ADDR_VAR 0 5
22209: PUSH
22210: LD_VAR 0 1
22214: PUSH
22215: LD_VAR 0 2
22219: ARRAY
22220: ST_TO_ADDR
// if not i then
22221: LD_VAR 0 5
22225: NOT
22226: IFFALSE 22230
// exit ;
22228: GO 22296
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_VAR 0 1
22239: PPUSH
22240: LD_VAR 0 2
22244: PPUSH
22245: LD_VAR 0 1
22249: PUSH
22250: LD_VAR 0 3
22254: ARRAY
22255: PPUSH
22256: CALL_OW 1
22260: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22261: LD_ADDR_VAR 0 1
22265: PUSH
22266: LD_VAR 0 1
22270: PPUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: LD_VAR 0 5
22280: PPUSH
22281: CALL_OW 1
22285: ST_TO_ADDR
// result := list ;
22286: LD_ADDR_VAR 0 4
22290: PUSH
22291: LD_VAR 0 1
22295: ST_TO_ADDR
// end ;
22296: LD_VAR 0 4
22300: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22301: LD_INT 0
22303: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22304: LD_ADDR_VAR 0 5
22308: PUSH
22309: LD_VAR 0 1
22313: PPUSH
22314: CALL_OW 250
22318: PPUSH
22319: LD_VAR 0 1
22323: PPUSH
22324: CALL_OW 251
22328: PPUSH
22329: LD_VAR 0 2
22333: PPUSH
22334: LD_VAR 0 3
22338: PPUSH
22339: LD_VAR 0 4
22343: PPUSH
22344: CALL 22354 0 5
22348: ST_TO_ADDR
// end ;
22349: LD_VAR 0 5
22353: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22354: LD_INT 0
22356: PPUSH
22357: PPUSH
22358: PPUSH
22359: PPUSH
// if not list then
22360: LD_VAR 0 3
22364: NOT
22365: IFFALSE 22369
// exit ;
22367: GO 22757
// result := [ ] ;
22369: LD_ADDR_VAR 0 6
22373: PUSH
22374: EMPTY
22375: ST_TO_ADDR
// for i in list do
22376: LD_ADDR_VAR 0 7
22380: PUSH
22381: LD_VAR 0 3
22385: PUSH
22386: FOR_IN
22387: IFFALSE 22589
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22389: LD_ADDR_VAR 0 9
22393: PUSH
22394: LD_VAR 0 7
22398: PPUSH
22399: LD_VAR 0 1
22403: PPUSH
22404: LD_VAR 0 2
22408: PPUSH
22409: CALL_OW 297
22413: ST_TO_ADDR
// if not result then
22414: LD_VAR 0 6
22418: NOT
22419: IFFALSE 22445
// result := [ [ i , tmp ] ] else
22421: LD_ADDR_VAR 0 6
22425: PUSH
22426: LD_VAR 0 7
22430: PUSH
22431: LD_VAR 0 9
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: ST_TO_ADDR
22443: GO 22587
// begin if result [ result ] [ 2 ] < tmp then
22445: LD_VAR 0 6
22449: PUSH
22450: LD_VAR 0 6
22454: ARRAY
22455: PUSH
22456: LD_INT 2
22458: ARRAY
22459: PUSH
22460: LD_VAR 0 9
22464: LESS
22465: IFFALSE 22507
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22467: LD_ADDR_VAR 0 6
22471: PUSH
22472: LD_VAR 0 6
22476: PPUSH
22477: LD_VAR 0 6
22481: PUSH
22482: LD_INT 1
22484: PLUS
22485: PPUSH
22486: LD_VAR 0 7
22490: PUSH
22491: LD_VAR 0 9
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 2
22504: ST_TO_ADDR
22505: GO 22587
// for j = 1 to result do
22507: LD_ADDR_VAR 0 8
22511: PUSH
22512: DOUBLE
22513: LD_INT 1
22515: DEC
22516: ST_TO_ADDR
22517: LD_VAR 0 6
22521: PUSH
22522: FOR_TO
22523: IFFALSE 22585
// begin if tmp < result [ j ] [ 2 ] then
22525: LD_VAR 0 9
22529: PUSH
22530: LD_VAR 0 6
22534: PUSH
22535: LD_VAR 0 8
22539: ARRAY
22540: PUSH
22541: LD_INT 2
22543: ARRAY
22544: LESS
22545: IFFALSE 22583
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22547: LD_ADDR_VAR 0 6
22551: PUSH
22552: LD_VAR 0 6
22556: PPUSH
22557: LD_VAR 0 8
22561: PPUSH
22562: LD_VAR 0 7
22566: PUSH
22567: LD_VAR 0 9
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 2
22580: ST_TO_ADDR
// break ;
22581: GO 22585
// end ; end ;
22583: GO 22522
22585: POP
22586: POP
// end ; end ;
22587: GO 22386
22589: POP
22590: POP
// if result and not asc then
22591: LD_VAR 0 6
22595: PUSH
22596: LD_VAR 0 4
22600: NOT
22601: AND
22602: IFFALSE 22677
// begin tmp := result ;
22604: LD_ADDR_VAR 0 9
22608: PUSH
22609: LD_VAR 0 6
22613: ST_TO_ADDR
// for i = tmp downto 1 do
22614: LD_ADDR_VAR 0 7
22618: PUSH
22619: DOUBLE
22620: LD_VAR 0 9
22624: INC
22625: ST_TO_ADDR
22626: LD_INT 1
22628: PUSH
22629: FOR_DOWNTO
22630: IFFALSE 22675
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22632: LD_ADDR_VAR 0 6
22636: PUSH
22637: LD_VAR 0 6
22641: PPUSH
22642: LD_VAR 0 9
22646: PUSH
22647: LD_VAR 0 7
22651: MINUS
22652: PUSH
22653: LD_INT 1
22655: PLUS
22656: PPUSH
22657: LD_VAR 0 9
22661: PUSH
22662: LD_VAR 0 7
22666: ARRAY
22667: PPUSH
22668: CALL_OW 1
22672: ST_TO_ADDR
22673: GO 22629
22675: POP
22676: POP
// end ; tmp := [ ] ;
22677: LD_ADDR_VAR 0 9
22681: PUSH
22682: EMPTY
22683: ST_TO_ADDR
// if mode then
22684: LD_VAR 0 5
22688: IFFALSE 22757
// begin for i = 1 to result do
22690: LD_ADDR_VAR 0 7
22694: PUSH
22695: DOUBLE
22696: LD_INT 1
22698: DEC
22699: ST_TO_ADDR
22700: LD_VAR 0 6
22704: PUSH
22705: FOR_TO
22706: IFFALSE 22745
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22708: LD_ADDR_VAR 0 9
22712: PUSH
22713: LD_VAR 0 9
22717: PPUSH
22718: LD_VAR 0 7
22722: PPUSH
22723: LD_VAR 0 6
22727: PUSH
22728: LD_VAR 0 7
22732: ARRAY
22733: PUSH
22734: LD_INT 1
22736: ARRAY
22737: PPUSH
22738: CALL_OW 1
22742: ST_TO_ADDR
22743: GO 22705
22745: POP
22746: POP
// result := tmp ;
22747: LD_ADDR_VAR 0 6
22751: PUSH
22752: LD_VAR 0 9
22756: ST_TO_ADDR
// end ; end ;
22757: LD_VAR 0 6
22761: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22770: LD_ADDR_VAR 0 5
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: EMPTY
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: ST_TO_ADDR
// if not x or not y then
22792: LD_VAR 0 2
22796: NOT
22797: PUSH
22798: LD_VAR 0 3
22802: NOT
22803: OR
22804: IFFALSE 22808
// exit ;
22806: GO 24460
// if not range then
22808: LD_VAR 0 4
22812: NOT
22813: IFFALSE 22823
// range := 10 ;
22815: LD_ADDR_VAR 0 4
22819: PUSH
22820: LD_INT 10
22822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22823: LD_ADDR_VAR 0 8
22827: PUSH
22828: LD_INT 81
22830: PUSH
22831: LD_VAR 0 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 92
22842: PUSH
22843: LD_VAR 0 2
22847: PUSH
22848: LD_VAR 0 3
22852: PUSH
22853: LD_VAR 0 4
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: LD_INT 21
22869: PUSH
22870: LD_INT 3
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: PPUSH
22886: CALL_OW 69
22890: ST_TO_ADDR
// if not tmp then
22891: LD_VAR 0 8
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 24460
// for i in tmp do
22900: LD_ADDR_VAR 0 6
22904: PUSH
22905: LD_VAR 0 8
22909: PUSH
22910: FOR_IN
22911: IFFALSE 24435
// begin points := [ 0 , 0 , 0 ] ;
22913: LD_ADDR_VAR 0 9
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 0
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// bpoints := 1 ;
22932: LD_ADDR_VAR 0 10
22936: PUSH
22937: LD_INT 1
22939: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22940: LD_VAR 0 6
22944: PPUSH
22945: CALL_OW 247
22949: PUSH
22950: LD_INT 1
22952: DOUBLE
22953: EQUAL
22954: IFTRUE 22958
22956: GO 23536
22958: POP
// begin if GetClass ( i ) = 1 then
22959: LD_VAR 0 6
22963: PPUSH
22964: CALL_OW 257
22968: PUSH
22969: LD_INT 1
22971: EQUAL
22972: IFFALSE 22993
// points := [ 10 , 5 , 3 ] ;
22974: LD_ADDR_VAR 0 9
22978: PUSH
22979: LD_INT 10
22981: PUSH
22982: LD_INT 5
22984: PUSH
22985: LD_INT 3
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22993: LD_VAR 0 6
22997: PPUSH
22998: CALL_OW 257
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: LD_INT 3
23008: PUSH
23009: LD_INT 4
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: IN
23017: IFFALSE 23038
// points := [ 3 , 2 , 1 ] ;
23019: LD_ADDR_VAR 0 9
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23038: LD_VAR 0 6
23042: PPUSH
23043: CALL_OW 257
23047: PUSH
23048: LD_INT 5
23050: EQUAL
23051: IFFALSE 23072
// points := [ 130 , 5 , 2 ] ;
23053: LD_ADDR_VAR 0 9
23057: PUSH
23058: LD_INT 130
23060: PUSH
23061: LD_INT 5
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23072: LD_VAR 0 6
23076: PPUSH
23077: CALL_OW 257
23081: PUSH
23082: LD_INT 8
23084: EQUAL
23085: IFFALSE 23106
// points := [ 35 , 35 , 30 ] ;
23087: LD_ADDR_VAR 0 9
23091: PUSH
23092: LD_INT 35
23094: PUSH
23095: LD_INT 35
23097: PUSH
23098: LD_INT 30
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23106: LD_VAR 0 6
23110: PPUSH
23111: CALL_OW 257
23115: PUSH
23116: LD_INT 9
23118: EQUAL
23119: IFFALSE 23140
// points := [ 20 , 55 , 40 ] ;
23121: LD_ADDR_VAR 0 9
23125: PUSH
23126: LD_INT 20
23128: PUSH
23129: LD_INT 55
23131: PUSH
23132: LD_INT 40
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: LIST
23139: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23140: LD_VAR 0 6
23144: PPUSH
23145: CALL_OW 257
23149: PUSH
23150: LD_INT 12
23152: PUSH
23153: LD_INT 16
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: IN
23160: IFFALSE 23181
// points := [ 5 , 3 , 2 ] ;
23162: LD_ADDR_VAR 0 9
23166: PUSH
23167: LD_INT 5
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23181: LD_VAR 0 6
23185: PPUSH
23186: CALL_OW 257
23190: PUSH
23191: LD_INT 17
23193: EQUAL
23194: IFFALSE 23215
// points := [ 100 , 50 , 75 ] ;
23196: LD_ADDR_VAR 0 9
23200: PUSH
23201: LD_INT 100
23203: PUSH
23204: LD_INT 50
23206: PUSH
23207: LD_INT 75
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23215: LD_VAR 0 6
23219: PPUSH
23220: CALL_OW 257
23224: PUSH
23225: LD_INT 15
23227: EQUAL
23228: IFFALSE 23249
// points := [ 10 , 5 , 3 ] ;
23230: LD_ADDR_VAR 0 9
23234: PUSH
23235: LD_INT 10
23237: PUSH
23238: LD_INT 5
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23249: LD_VAR 0 6
23253: PPUSH
23254: CALL_OW 257
23258: PUSH
23259: LD_INT 14
23261: EQUAL
23262: IFFALSE 23283
// points := [ 10 , 0 , 0 ] ;
23264: LD_ADDR_VAR 0 9
23268: PUSH
23269: LD_INT 10
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23283: LD_VAR 0 6
23287: PPUSH
23288: CALL_OW 257
23292: PUSH
23293: LD_INT 11
23295: EQUAL
23296: IFFALSE 23317
// points := [ 30 , 10 , 5 ] ;
23298: LD_ADDR_VAR 0 9
23302: PUSH
23303: LD_INT 30
23305: PUSH
23306: LD_INT 10
23308: PUSH
23309: LD_INT 5
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23317: LD_VAR 0 1
23321: PPUSH
23322: LD_INT 5
23324: PPUSH
23325: CALL_OW 321
23329: PUSH
23330: LD_INT 2
23332: EQUAL
23333: IFFALSE 23350
// bpoints := bpoints * 1.8 ;
23335: LD_ADDR_VAR 0 10
23339: PUSH
23340: LD_VAR 0 10
23344: PUSH
23345: LD_REAL  1.80000000000000E+0000
23348: MUL
23349: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23350: LD_VAR 0 6
23354: PPUSH
23355: CALL_OW 257
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 4
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: IN
23378: PUSH
23379: LD_VAR 0 1
23383: PPUSH
23384: LD_INT 51
23386: PPUSH
23387: CALL_OW 321
23391: PUSH
23392: LD_INT 2
23394: EQUAL
23395: AND
23396: IFFALSE 23413
// bpoints := bpoints * 1.2 ;
23398: LD_ADDR_VAR 0 10
23402: PUSH
23403: LD_VAR 0 10
23407: PUSH
23408: LD_REAL  1.20000000000000E+0000
23411: MUL
23412: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23413: LD_VAR 0 6
23417: PPUSH
23418: CALL_OW 257
23422: PUSH
23423: LD_INT 5
23425: PUSH
23426: LD_INT 7
23428: PUSH
23429: LD_INT 9
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: IN
23437: PUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: LD_INT 52
23445: PPUSH
23446: CALL_OW 321
23450: PUSH
23451: LD_INT 2
23453: EQUAL
23454: AND
23455: IFFALSE 23472
// bpoints := bpoints * 1.5 ;
23457: LD_ADDR_VAR 0 10
23461: PUSH
23462: LD_VAR 0 10
23466: PUSH
23467: LD_REAL  1.50000000000000E+0000
23470: MUL
23471: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23472: LD_VAR 0 1
23476: PPUSH
23477: LD_INT 66
23479: PPUSH
23480: CALL_OW 321
23484: PUSH
23485: LD_INT 2
23487: EQUAL
23488: IFFALSE 23505
// bpoints := bpoints * 1.1 ;
23490: LD_ADDR_VAR 0 10
23494: PUSH
23495: LD_VAR 0 10
23499: PUSH
23500: LD_REAL  1.10000000000000E+0000
23503: MUL
23504: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23505: LD_ADDR_VAR 0 10
23509: PUSH
23510: LD_VAR 0 10
23514: PUSH
23515: LD_VAR 0 6
23519: PPUSH
23520: LD_INT 1
23522: PPUSH
23523: CALL_OW 259
23527: PUSH
23528: LD_REAL  1.15000000000000E+0000
23531: MUL
23532: MUL
23533: ST_TO_ADDR
// end ; unit_vehicle :
23534: GO 24364
23536: LD_INT 2
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 24352
23544: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23545: LD_VAR 0 6
23549: PPUSH
23550: CALL_OW 264
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 42
23560: PUSH
23561: LD_INT 24
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: IN
23569: IFFALSE 23590
// points := [ 25 , 5 , 3 ] ;
23571: LD_ADDR_VAR 0 9
23575: PUSH
23576: LD_INT 25
23578: PUSH
23579: LD_INT 5
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23590: LD_VAR 0 6
23594: PPUSH
23595: CALL_OW 264
23599: PUSH
23600: LD_INT 4
23602: PUSH
23603: LD_INT 43
23605: PUSH
23606: LD_INT 25
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: IN
23614: IFFALSE 23635
// points := [ 40 , 15 , 5 ] ;
23616: LD_ADDR_VAR 0 9
23620: PUSH
23621: LD_INT 40
23623: PUSH
23624: LD_INT 15
23626: PUSH
23627: LD_INT 5
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23635: LD_VAR 0 6
23639: PPUSH
23640: CALL_OW 264
23644: PUSH
23645: LD_INT 3
23647: PUSH
23648: LD_INT 23
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: IN
23655: IFFALSE 23676
// points := [ 7 , 25 , 8 ] ;
23657: LD_ADDR_VAR 0 9
23661: PUSH
23662: LD_INT 7
23664: PUSH
23665: LD_INT 25
23667: PUSH
23668: LD_INT 8
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23676: LD_VAR 0 6
23680: PPUSH
23681: CALL_OW 264
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 27
23691: PUSH
23692: LD_INT 44
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: IN
23700: IFFALSE 23721
// points := [ 14 , 50 , 16 ] ;
23702: LD_ADDR_VAR 0 9
23706: PUSH
23707: LD_INT 14
23709: PUSH
23710: LD_INT 50
23712: PUSH
23713: LD_INT 16
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23721: LD_VAR 0 6
23725: PPUSH
23726: CALL_OW 264
23730: PUSH
23731: LD_INT 6
23733: PUSH
23734: LD_INT 46
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: IN
23741: IFFALSE 23762
// points := [ 32 , 120 , 70 ] ;
23743: LD_ADDR_VAR 0 9
23747: PUSH
23748: LD_INT 32
23750: PUSH
23751: LD_INT 120
23753: PUSH
23754: LD_INT 70
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23762: LD_VAR 0 6
23766: PPUSH
23767: CALL_OW 264
23771: PUSH
23772: LD_INT 7
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 45
23780: PUSH
23781: LD_EXP 112
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: IN
23792: IFFALSE 23813
// points := [ 35 , 20 , 45 ] ;
23794: LD_ADDR_VAR 0 9
23798: PUSH
23799: LD_INT 35
23801: PUSH
23802: LD_INT 20
23804: PUSH
23805: LD_INT 45
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23813: LD_VAR 0 6
23817: PPUSH
23818: CALL_OW 264
23822: PUSH
23823: LD_INT 47
23825: PUSH
23826: EMPTY
23827: LIST
23828: IN
23829: IFFALSE 23850
// points := [ 67 , 45 , 75 ] ;
23831: LD_ADDR_VAR 0 9
23835: PUSH
23836: LD_INT 67
23838: PUSH
23839: LD_INT 45
23841: PUSH
23842: LD_INT 75
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23850: LD_VAR 0 6
23854: PPUSH
23855: CALL_OW 264
23859: PUSH
23860: LD_INT 26
23862: PUSH
23863: EMPTY
23864: LIST
23865: IN
23866: IFFALSE 23887
// points := [ 120 , 30 , 80 ] ;
23868: LD_ADDR_VAR 0 9
23872: PUSH
23873: LD_INT 120
23875: PUSH
23876: LD_INT 30
23878: PUSH
23879: LD_INT 80
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23887: LD_VAR 0 6
23891: PPUSH
23892: CALL_OW 264
23896: PUSH
23897: LD_INT 22
23899: PUSH
23900: EMPTY
23901: LIST
23902: IN
23903: IFFALSE 23924
// points := [ 40 , 1 , 1 ] ;
23905: LD_ADDR_VAR 0 9
23909: PUSH
23910: LD_INT 40
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23924: LD_VAR 0 6
23928: PPUSH
23929: CALL_OW 264
23933: PUSH
23934: LD_INT 29
23936: PUSH
23937: EMPTY
23938: LIST
23939: IN
23940: IFFALSE 23961
// points := [ 70 , 200 , 400 ] ;
23942: LD_ADDR_VAR 0 9
23946: PUSH
23947: LD_INT 70
23949: PUSH
23950: LD_INT 200
23952: PUSH
23953: LD_INT 400
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23961: LD_VAR 0 6
23965: PPUSH
23966: CALL_OW 264
23970: PUSH
23971: LD_INT 14
23973: PUSH
23974: LD_INT 53
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: IN
23981: IFFALSE 24002
// points := [ 40 , 10 , 20 ] ;
23983: LD_ADDR_VAR 0 9
23987: PUSH
23988: LD_INT 40
23990: PUSH
23991: LD_INT 10
23993: PUSH
23994: LD_INT 20
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24002: LD_VAR 0 6
24006: PPUSH
24007: CALL_OW 264
24011: PUSH
24012: LD_INT 9
24014: PUSH
24015: EMPTY
24016: LIST
24017: IN
24018: IFFALSE 24039
// points := [ 5 , 70 , 20 ] ;
24020: LD_ADDR_VAR 0 9
24024: PUSH
24025: LD_INT 5
24027: PUSH
24028: LD_INT 70
24030: PUSH
24031: LD_INT 20
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24039: LD_VAR 0 6
24043: PPUSH
24044: CALL_OW 264
24048: PUSH
24049: LD_INT 10
24051: PUSH
24052: EMPTY
24053: LIST
24054: IN
24055: IFFALSE 24076
// points := [ 35 , 110 , 70 ] ;
24057: LD_ADDR_VAR 0 9
24061: PUSH
24062: LD_INT 35
24064: PUSH
24065: LD_INT 110
24067: PUSH
24068: LD_INT 70
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24076: LD_VAR 0 6
24080: PPUSH
24081: CALL_OW 265
24085: PUSH
24086: LD_INT 25
24088: EQUAL
24089: IFFALSE 24110
// points := [ 80 , 65 , 100 ] ;
24091: LD_ADDR_VAR 0 9
24095: PUSH
24096: LD_INT 80
24098: PUSH
24099: LD_INT 65
24101: PUSH
24102: LD_INT 100
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24110: LD_VAR 0 6
24114: PPUSH
24115: CALL_OW 263
24119: PUSH
24120: LD_INT 1
24122: EQUAL
24123: IFFALSE 24158
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24125: LD_ADDR_VAR 0 10
24129: PUSH
24130: LD_VAR 0 10
24134: PUSH
24135: LD_VAR 0 6
24139: PPUSH
24140: CALL_OW 311
24144: PPUSH
24145: LD_INT 3
24147: PPUSH
24148: CALL_OW 259
24152: PUSH
24153: LD_INT 4
24155: MUL
24156: MUL
24157: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24158: LD_VAR 0 6
24162: PPUSH
24163: CALL_OW 263
24167: PUSH
24168: LD_INT 2
24170: EQUAL
24171: IFFALSE 24222
// begin j := IsControledBy ( i ) ;
24173: LD_ADDR_VAR 0 7
24177: PUSH
24178: LD_VAR 0 6
24182: PPUSH
24183: CALL_OW 312
24187: ST_TO_ADDR
// if j then
24188: LD_VAR 0 7
24192: IFFALSE 24222
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24194: LD_ADDR_VAR 0 10
24198: PUSH
24199: LD_VAR 0 10
24203: PUSH
24204: LD_VAR 0 7
24208: PPUSH
24209: LD_INT 3
24211: PPUSH
24212: CALL_OW 259
24216: PUSH
24217: LD_INT 3
24219: MUL
24220: MUL
24221: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24222: LD_VAR 0 6
24226: PPUSH
24227: CALL_OW 264
24231: PUSH
24232: LD_INT 5
24234: PUSH
24235: LD_INT 6
24237: PUSH
24238: LD_INT 46
24240: PUSH
24241: LD_INT 44
24243: PUSH
24244: LD_INT 47
24246: PUSH
24247: LD_INT 45
24249: PUSH
24250: LD_INT 28
24252: PUSH
24253: LD_INT 7
24255: PUSH
24256: LD_INT 27
24258: PUSH
24259: LD_INT 29
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: IN
24274: PUSH
24275: LD_VAR 0 1
24279: PPUSH
24280: LD_INT 52
24282: PPUSH
24283: CALL_OW 321
24287: PUSH
24288: LD_INT 2
24290: EQUAL
24291: AND
24292: IFFALSE 24309
// bpoints := bpoints * 1.2 ;
24294: LD_ADDR_VAR 0 10
24298: PUSH
24299: LD_VAR 0 10
24303: PUSH
24304: LD_REAL  1.20000000000000E+0000
24307: MUL
24308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24309: LD_VAR 0 6
24313: PPUSH
24314: CALL_OW 264
24318: PUSH
24319: LD_INT 6
24321: PUSH
24322: LD_INT 46
24324: PUSH
24325: LD_INT 47
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: IN
24333: IFFALSE 24350
// bpoints := bpoints * 1.2 ;
24335: LD_ADDR_VAR 0 10
24339: PUSH
24340: LD_VAR 0 10
24344: PUSH
24345: LD_REAL  1.20000000000000E+0000
24348: MUL
24349: ST_TO_ADDR
// end ; unit_building :
24350: GO 24364
24352: LD_INT 3
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24363
24360: POP
// ; end ;
24361: GO 24364
24363: POP
// for j = 1 to 3 do
24364: LD_ADDR_VAR 0 7
24368: PUSH
24369: DOUBLE
24370: LD_INT 1
24372: DEC
24373: ST_TO_ADDR
24374: LD_INT 3
24376: PUSH
24377: FOR_TO
24378: IFFALSE 24431
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24380: LD_ADDR_VAR 0 5
24384: PUSH
24385: LD_VAR 0 5
24389: PPUSH
24390: LD_VAR 0 7
24394: PPUSH
24395: LD_VAR 0 5
24399: PUSH
24400: LD_VAR 0 7
24404: ARRAY
24405: PUSH
24406: LD_VAR 0 9
24410: PUSH
24411: LD_VAR 0 7
24415: ARRAY
24416: PUSH
24417: LD_VAR 0 10
24421: MUL
24422: PLUS
24423: PPUSH
24424: CALL_OW 1
24428: ST_TO_ADDR
24429: GO 24377
24431: POP
24432: POP
// end ;
24433: GO 22910
24435: POP
24436: POP
// result := Replace ( result , 4 , tmp ) ;
24437: LD_ADDR_VAR 0 5
24441: PUSH
24442: LD_VAR 0 5
24446: PPUSH
24447: LD_INT 4
24449: PPUSH
24450: LD_VAR 0 8
24454: PPUSH
24455: CALL_OW 1
24459: ST_TO_ADDR
// end ;
24460: LD_VAR 0 5
24464: RET
// export function DangerAtRange ( unit , range ) ; begin
24465: LD_INT 0
24467: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 255
24482: PPUSH
24483: LD_VAR 0 1
24487: PPUSH
24488: CALL_OW 250
24492: PPUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 251
24502: PPUSH
24503: LD_VAR 0 2
24507: PPUSH
24508: CALL 22762 0 4
24512: ST_TO_ADDR
// end ;
24513: LD_VAR 0 3
24517: RET
// export function DangerInArea ( side , area ) ; begin
24518: LD_INT 0
24520: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24521: LD_ADDR_VAR 0 3
24525: PUSH
24526: LD_VAR 0 2
24530: PPUSH
24531: LD_INT 81
24533: PUSH
24534: LD_VAR 0 1
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PPUSH
24543: CALL_OW 70
24547: ST_TO_ADDR
// end ;
24548: LD_VAR 0 3
24552: RET
// export function IsExtension ( b ) ; begin
24553: LD_INT 0
24555: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24556: LD_ADDR_VAR 0 2
24560: PUSH
24561: LD_VAR 0 1
24565: PUSH
24566: LD_INT 23
24568: PUSH
24569: LD_INT 20
24571: PUSH
24572: LD_INT 22
24574: PUSH
24575: LD_INT 17
24577: PUSH
24578: LD_INT 24
24580: PUSH
24581: LD_INT 21
24583: PUSH
24584: LD_INT 19
24586: PUSH
24587: LD_INT 16
24589: PUSH
24590: LD_INT 25
24592: PUSH
24593: LD_INT 18
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: IN
24608: ST_TO_ADDR
// end ;
24609: LD_VAR 0 2
24613: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
24618: PPUSH
// result := [ ] ;
24619: LD_ADDR_VAR 0 4
24623: PUSH
24624: EMPTY
24625: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24626: LD_ADDR_VAR 0 5
24630: PUSH
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 21
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 70
24650: ST_TO_ADDR
// if not tmp then
24651: LD_VAR 0 5
24655: NOT
24656: IFFALSE 24660
// exit ;
24658: GO 24724
// if checkLink then
24660: LD_VAR 0 3
24664: IFFALSE 24714
// begin for i in tmp do
24666: LD_ADDR_VAR 0 6
24670: PUSH
24671: LD_VAR 0 5
24675: PUSH
24676: FOR_IN
24677: IFFALSE 24712
// if GetBase ( i ) <> base then
24679: LD_VAR 0 6
24683: PPUSH
24684: CALL_OW 274
24688: PUSH
24689: LD_VAR 0 1
24693: NONEQUAL
24694: IFFALSE 24710
// ComLinkToBase ( base , i ) ;
24696: LD_VAR 0 1
24700: PPUSH
24701: LD_VAR 0 6
24705: PPUSH
24706: CALL_OW 169
24710: GO 24676
24712: POP
24713: POP
// end ; result := tmp ;
24714: LD_ADDR_VAR 0 4
24718: PUSH
24719: LD_VAR 0 5
24723: ST_TO_ADDR
// end ;
24724: LD_VAR 0 4
24728: RET
// export function ComComplete ( units , b ) ; var i ; begin
24729: LD_INT 0
24731: PPUSH
24732: PPUSH
// if not units then
24733: LD_VAR 0 1
24737: NOT
24738: IFFALSE 24742
// exit ;
24740: GO 24832
// for i in units do
24742: LD_ADDR_VAR 0 4
24746: PUSH
24747: LD_VAR 0 1
24751: PUSH
24752: FOR_IN
24753: IFFALSE 24830
// if BuildingStatus ( b ) = bs_build then
24755: LD_VAR 0 2
24759: PPUSH
24760: CALL_OW 461
24764: PUSH
24765: LD_INT 1
24767: EQUAL
24768: IFFALSE 24828
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24770: LD_VAR 0 4
24774: PPUSH
24775: LD_STRING h
24777: PUSH
24778: LD_VAR 0 2
24782: PPUSH
24783: CALL_OW 250
24787: PUSH
24788: LD_VAR 0 2
24792: PPUSH
24793: CALL_OW 251
24797: PUSH
24798: LD_VAR 0 2
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: PPUSH
24824: CALL_OW 446
24828: GO 24752
24830: POP
24831: POP
// end ;
24832: LD_VAR 0 3
24836: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24837: LD_INT 0
24839: PPUSH
24840: PPUSH
24841: PPUSH
24842: PPUSH
24843: PPUSH
24844: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24845: LD_VAR 0 1
24849: NOT
24850: PUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: CALL_OW 263
24860: PUSH
24861: LD_INT 2
24863: NONEQUAL
24864: OR
24865: IFFALSE 24869
// exit ;
24867: GO 25185
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24869: LD_ADDR_VAR 0 6
24873: PUSH
24874: LD_INT 22
24876: PUSH
24877: LD_VAR 0 1
24881: PPUSH
24882: CALL_OW 255
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: LD_INT 30
24896: PUSH
24897: LD_INT 36
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 34
24906: PUSH
24907: LD_INT 31
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PPUSH
24923: CALL_OW 69
24927: ST_TO_ADDR
// if not tmp then
24928: LD_VAR 0 6
24932: NOT
24933: IFFALSE 24937
// exit ;
24935: GO 25185
// result := [ ] ;
24937: LD_ADDR_VAR 0 2
24941: PUSH
24942: EMPTY
24943: ST_TO_ADDR
// for i in tmp do
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_VAR 0 6
24953: PUSH
24954: FOR_IN
24955: IFFALSE 25026
// begin t := UnitsInside ( i ) ;
24957: LD_ADDR_VAR 0 4
24961: PUSH
24962: LD_VAR 0 3
24966: PPUSH
24967: CALL_OW 313
24971: ST_TO_ADDR
// if t then
24972: LD_VAR 0 4
24976: IFFALSE 25024
// for j in t do
24978: LD_ADDR_VAR 0 7
24982: PUSH
24983: LD_VAR 0 4
24987: PUSH
24988: FOR_IN
24989: IFFALSE 25022
// result := Replace ( result , result + 1 , j ) ;
24991: LD_ADDR_VAR 0 2
24995: PUSH
24996: LD_VAR 0 2
25000: PPUSH
25001: LD_VAR 0 2
25005: PUSH
25006: LD_INT 1
25008: PLUS
25009: PPUSH
25010: LD_VAR 0 7
25014: PPUSH
25015: CALL_OW 1
25019: ST_TO_ADDR
25020: GO 24988
25022: POP
25023: POP
// end ;
25024: GO 24954
25026: POP
25027: POP
// if not result then
25028: LD_VAR 0 2
25032: NOT
25033: IFFALSE 25037
// exit ;
25035: GO 25185
// mech := result [ 1 ] ;
25037: LD_ADDR_VAR 0 5
25041: PUSH
25042: LD_VAR 0 2
25046: PUSH
25047: LD_INT 1
25049: ARRAY
25050: ST_TO_ADDR
// if result > 1 then
25051: LD_VAR 0 2
25055: PUSH
25056: LD_INT 1
25058: GREATER
25059: IFFALSE 25171
// begin for i = 2 to result do
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: DOUBLE
25067: LD_INT 2
25069: DEC
25070: ST_TO_ADDR
25071: LD_VAR 0 2
25075: PUSH
25076: FOR_TO
25077: IFFALSE 25169
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25079: LD_ADDR_VAR 0 4
25083: PUSH
25084: LD_VAR 0 2
25088: PUSH
25089: LD_VAR 0 3
25093: ARRAY
25094: PPUSH
25095: LD_INT 3
25097: PPUSH
25098: CALL_OW 259
25102: PUSH
25103: LD_VAR 0 2
25107: PUSH
25108: LD_VAR 0 3
25112: ARRAY
25113: PPUSH
25114: CALL_OW 432
25118: MINUS
25119: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25120: LD_VAR 0 4
25124: PUSH
25125: LD_VAR 0 5
25129: PPUSH
25130: LD_INT 3
25132: PPUSH
25133: CALL_OW 259
25137: PUSH
25138: LD_VAR 0 5
25142: PPUSH
25143: CALL_OW 432
25147: MINUS
25148: GREATEREQUAL
25149: IFFALSE 25167
// mech := result [ i ] ;
25151: LD_ADDR_VAR 0 5
25155: PUSH
25156: LD_VAR 0 2
25160: PUSH
25161: LD_VAR 0 3
25165: ARRAY
25166: ST_TO_ADDR
// end ;
25167: GO 25076
25169: POP
25170: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25171: LD_VAR 0 1
25175: PPUSH
25176: LD_VAR 0 5
25180: PPUSH
25181: CALL_OW 135
// end ;
25185: LD_VAR 0 2
25189: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
// result := [ ] ;
25205: LD_ADDR_VAR 0 7
25209: PUSH
25210: EMPTY
25211: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 266
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: IN
25232: NOT
25233: IFFALSE 25237
// exit ;
25235: GO 26871
// if name then
25237: LD_VAR 0 3
25241: IFFALSE 25257
// SetBName ( base_dep , name ) ;
25243: LD_VAR 0 1
25247: PPUSH
25248: LD_VAR 0 3
25252: PPUSH
25253: CALL_OW 500
// base := GetBase ( base_dep ) ;
25257: LD_ADDR_VAR 0 15
25261: PUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 274
25271: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25272: LD_ADDR_VAR 0 16
25276: PUSH
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 255
25286: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25287: LD_ADDR_VAR 0 17
25291: PUSH
25292: LD_VAR 0 1
25296: PPUSH
25297: CALL_OW 248
25301: ST_TO_ADDR
// if sources then
25302: LD_VAR 0 5
25306: IFFALSE 25353
// for i = 1 to 3 do
25308: LD_ADDR_VAR 0 8
25312: PUSH
25313: DOUBLE
25314: LD_INT 1
25316: DEC
25317: ST_TO_ADDR
25318: LD_INT 3
25320: PUSH
25321: FOR_TO
25322: IFFALSE 25351
// AddResourceType ( base , i , sources [ i ] ) ;
25324: LD_VAR 0 15
25328: PPUSH
25329: LD_VAR 0 8
25333: PPUSH
25334: LD_VAR 0 5
25338: PUSH
25339: LD_VAR 0 8
25343: ARRAY
25344: PPUSH
25345: CALL_OW 276
25349: GO 25321
25351: POP
25352: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25353: LD_ADDR_VAR 0 18
25357: PUSH
25358: LD_VAR 0 15
25362: PPUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: LD_INT 1
25370: PPUSH
25371: CALL 24614 0 3
25375: ST_TO_ADDR
// InitHc ;
25376: CALL_OW 19
// InitUc ;
25380: CALL_OW 18
// uc_side := side ;
25384: LD_ADDR_OWVAR 20
25388: PUSH
25389: LD_VAR 0 16
25393: ST_TO_ADDR
// uc_nation := nation ;
25394: LD_ADDR_OWVAR 21
25398: PUSH
25399: LD_VAR 0 17
25403: ST_TO_ADDR
// if buildings then
25404: LD_VAR 0 18
25408: IFFALSE 26730
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25410: LD_ADDR_VAR 0 19
25414: PUSH
25415: LD_VAR 0 18
25419: PPUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 30
25425: PUSH
25426: LD_INT 29
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 30
25435: PUSH
25436: LD_INT 30
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 72
25452: ST_TO_ADDR
// if tmp then
25453: LD_VAR 0 19
25457: IFFALSE 25505
// for i in tmp do
25459: LD_ADDR_VAR 0 8
25463: PUSH
25464: LD_VAR 0 19
25468: PUSH
25469: FOR_IN
25470: IFFALSE 25503
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25472: LD_VAR 0 8
25476: PPUSH
25477: CALL_OW 250
25481: PPUSH
25482: LD_VAR 0 8
25486: PPUSH
25487: CALL_OW 251
25491: PPUSH
25492: LD_VAR 0 16
25496: PPUSH
25497: CALL_OW 441
25501: GO 25469
25503: POP
25504: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25505: LD_VAR 0 18
25509: PPUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 30
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 30
25525: PUSH
25526: LD_INT 33
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: PPUSH
25538: CALL_OW 72
25542: IFFALSE 25630
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25544: LD_ADDR_VAR 0 8
25548: PUSH
25549: LD_VAR 0 18
25553: PPUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 30
25559: PUSH
25560: LD_INT 32
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 30
25569: PUSH
25570: LD_INT 33
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 72
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25628
// begin if not GetBWeapon ( i ) then
25590: LD_VAR 0 8
25594: PPUSH
25595: CALL_OW 269
25599: NOT
25600: IFFALSE 25626
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25602: LD_VAR 0 8
25606: PPUSH
25607: LD_VAR 0 8
25611: PPUSH
25612: LD_VAR 0 2
25616: PPUSH
25617: CALL 26876 0 2
25621: PPUSH
25622: CALL_OW 431
// end ;
25626: GO 25587
25628: POP
25629: POP
// end ; for i = 1 to personel do
25630: LD_ADDR_VAR 0 8
25634: PUSH
25635: DOUBLE
25636: LD_INT 1
25638: DEC
25639: ST_TO_ADDR
25640: LD_VAR 0 6
25644: PUSH
25645: FOR_TO
25646: IFFALSE 26710
// begin if i > 4 then
25648: LD_VAR 0 8
25652: PUSH
25653: LD_INT 4
25655: GREATER
25656: IFFALSE 25660
// break ;
25658: GO 26710
// case i of 1 :
25660: LD_VAR 0 8
25664: PUSH
25665: LD_INT 1
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25753
25673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25674: LD_ADDR_VAR 0 12
25678: PUSH
25679: LD_VAR 0 18
25683: PPUSH
25684: LD_INT 22
25686: PUSH
25687: LD_VAR 0 16
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 58
25698: PUSH
25699: EMPTY
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 30
25707: PUSH
25708: LD_INT 32
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 30
25717: PUSH
25718: LD_INT 4
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 30
25727: PUSH
25728: LD_INT 5
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: PPUSH
25746: CALL_OW 72
25750: ST_TO_ADDR
25751: GO 25975
25753: LD_INT 2
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25761
25759: GO 25823
25761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25762: LD_ADDR_VAR 0 12
25766: PUSH
25767: LD_VAR 0 18
25771: PPUSH
25772: LD_INT 22
25774: PUSH
25775: LD_VAR 0 16
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 30
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 30
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: CALL_OW 72
25820: ST_TO_ADDR
25821: GO 25975
25823: LD_INT 3
25825: DOUBLE
25826: EQUAL
25827: IFTRUE 25831
25829: GO 25893
25831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25832: LD_ADDR_VAR 0 12
25836: PUSH
25837: LD_VAR 0 18
25841: PPUSH
25842: LD_INT 22
25844: PUSH
25845: LD_VAR 0 16
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: LD_INT 30
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 30
25869: PUSH
25870: LD_INT 3
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PPUSH
25886: CALL_OW 72
25890: ST_TO_ADDR
25891: GO 25975
25893: LD_INT 4
25895: DOUBLE
25896: EQUAL
25897: IFTRUE 25901
25899: GO 25974
25901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25902: LD_ADDR_VAR 0 12
25906: PUSH
25907: LD_VAR 0 18
25911: PPUSH
25912: LD_INT 22
25914: PUSH
25915: LD_VAR 0 16
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: LD_INT 30
25929: PUSH
25930: LD_INT 6
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 30
25939: PUSH
25940: LD_INT 7
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 30
25949: PUSH
25950: LD_INT 8
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PPUSH
25967: CALL_OW 72
25971: ST_TO_ADDR
25972: GO 25975
25974: POP
// if i = 1 then
25975: LD_VAR 0 8
25979: PUSH
25980: LD_INT 1
25982: EQUAL
25983: IFFALSE 26094
// begin tmp := [ ] ;
25985: LD_ADDR_VAR 0 19
25989: PUSH
25990: EMPTY
25991: ST_TO_ADDR
// for j in f do
25992: LD_ADDR_VAR 0 9
25996: PUSH
25997: LD_VAR 0 12
26001: PUSH
26002: FOR_IN
26003: IFFALSE 26076
// if GetBType ( j ) = b_bunker then
26005: LD_VAR 0 9
26009: PPUSH
26010: CALL_OW 266
26014: PUSH
26015: LD_INT 32
26017: EQUAL
26018: IFFALSE 26045
// tmp := Insert ( tmp , 1 , j ) else
26020: LD_ADDR_VAR 0 19
26024: PUSH
26025: LD_VAR 0 19
26029: PPUSH
26030: LD_INT 1
26032: PPUSH
26033: LD_VAR 0 9
26037: PPUSH
26038: CALL_OW 2
26042: ST_TO_ADDR
26043: GO 26074
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26045: LD_ADDR_VAR 0 19
26049: PUSH
26050: LD_VAR 0 19
26054: PPUSH
26055: LD_VAR 0 19
26059: PUSH
26060: LD_INT 1
26062: PLUS
26063: PPUSH
26064: LD_VAR 0 9
26068: PPUSH
26069: CALL_OW 2
26073: ST_TO_ADDR
26074: GO 26002
26076: POP
26077: POP
// if tmp then
26078: LD_VAR 0 19
26082: IFFALSE 26094
// f := tmp ;
26084: LD_ADDR_VAR 0 12
26088: PUSH
26089: LD_VAR 0 19
26093: ST_TO_ADDR
// end ; x := personel [ i ] ;
26094: LD_ADDR_VAR 0 13
26098: PUSH
26099: LD_VAR 0 6
26103: PUSH
26104: LD_VAR 0 8
26108: ARRAY
26109: ST_TO_ADDR
// if x = - 1 then
26110: LD_VAR 0 13
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: EQUAL
26119: IFFALSE 26328
// begin for j in f do
26121: LD_ADDR_VAR 0 9
26125: PUSH
26126: LD_VAR 0 12
26130: PUSH
26131: FOR_IN
26132: IFFALSE 26324
// repeat InitHc ;
26134: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26138: LD_VAR 0 9
26142: PPUSH
26143: CALL_OW 266
26147: PUSH
26148: LD_INT 5
26150: EQUAL
26151: IFFALSE 26221
// begin if UnitsInside ( j ) < 3 then
26153: LD_VAR 0 9
26157: PPUSH
26158: CALL_OW 313
26162: PUSH
26163: LD_INT 3
26165: LESS
26166: IFFALSE 26202
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26168: LD_INT 0
26170: PPUSH
26171: LD_INT 5
26173: PUSH
26174: LD_INT 8
26176: PUSH
26177: LD_INT 9
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: PUSH
26185: LD_VAR 0 17
26189: ARRAY
26190: PPUSH
26191: LD_VAR 0 4
26195: PPUSH
26196: CALL_OW 380
26200: GO 26219
// PrepareHuman ( false , i , skill ) ;
26202: LD_INT 0
26204: PPUSH
26205: LD_VAR 0 8
26209: PPUSH
26210: LD_VAR 0 4
26214: PPUSH
26215: CALL_OW 380
// end else
26219: GO 26238
// PrepareHuman ( false , i , skill ) ;
26221: LD_INT 0
26223: PPUSH
26224: LD_VAR 0 8
26228: PPUSH
26229: LD_VAR 0 4
26233: PPUSH
26234: CALL_OW 380
// un := CreateHuman ;
26238: LD_ADDR_VAR 0 14
26242: PUSH
26243: CALL_OW 44
26247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26248: LD_ADDR_VAR 0 7
26252: PUSH
26253: LD_VAR 0 7
26257: PPUSH
26258: LD_INT 1
26260: PPUSH
26261: LD_VAR 0 14
26265: PPUSH
26266: CALL_OW 2
26270: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26271: LD_VAR 0 14
26275: PPUSH
26276: LD_VAR 0 9
26280: PPUSH
26281: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26285: LD_VAR 0 9
26289: PPUSH
26290: CALL_OW 313
26294: PUSH
26295: LD_INT 6
26297: EQUAL
26298: PUSH
26299: LD_VAR 0 9
26303: PPUSH
26304: CALL_OW 266
26308: PUSH
26309: LD_INT 32
26311: PUSH
26312: LD_INT 31
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: IN
26319: OR
26320: IFFALSE 26134
26322: GO 26131
26324: POP
26325: POP
// end else
26326: GO 26708
// for j = 1 to x do
26328: LD_ADDR_VAR 0 9
26332: PUSH
26333: DOUBLE
26334: LD_INT 1
26336: DEC
26337: ST_TO_ADDR
26338: LD_VAR 0 13
26342: PUSH
26343: FOR_TO
26344: IFFALSE 26706
// begin InitHc ;
26346: CALL_OW 19
// if not f then
26350: LD_VAR 0 12
26354: NOT
26355: IFFALSE 26444
// begin PrepareHuman ( false , i , skill ) ;
26357: LD_INT 0
26359: PPUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: LD_VAR 0 4
26369: PPUSH
26370: CALL_OW 380
// un := CreateHuman ;
26374: LD_ADDR_VAR 0 14
26378: PUSH
26379: CALL_OW 44
26383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26384: LD_ADDR_VAR 0 7
26388: PUSH
26389: LD_VAR 0 7
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_VAR 0 14
26401: PPUSH
26402: CALL_OW 2
26406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26407: LD_VAR 0 14
26411: PPUSH
26412: LD_VAR 0 1
26416: PPUSH
26417: CALL_OW 250
26421: PPUSH
26422: LD_VAR 0 1
26426: PPUSH
26427: CALL_OW 251
26431: PPUSH
26432: LD_INT 10
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 50
// continue ;
26442: GO 26343
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26444: LD_VAR 0 12
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: CALL_OW 313
26457: PUSH
26458: LD_VAR 0 12
26462: PUSH
26463: LD_INT 1
26465: ARRAY
26466: PPUSH
26467: CALL_OW 266
26471: PUSH
26472: LD_INT 32
26474: PUSH
26475: LD_INT 31
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: IN
26482: AND
26483: PUSH
26484: LD_VAR 0 12
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PPUSH
26493: CALL_OW 313
26497: PUSH
26498: LD_INT 6
26500: EQUAL
26501: OR
26502: IFFALSE 26522
// f := Delete ( f , 1 ) ;
26504: LD_ADDR_VAR 0 12
26508: PUSH
26509: LD_VAR 0 12
26513: PPUSH
26514: LD_INT 1
26516: PPUSH
26517: CALL_OW 3
26521: ST_TO_ADDR
// if not f then
26522: LD_VAR 0 12
26526: NOT
26527: IFFALSE 26545
// begin x := x + 2 ;
26529: LD_ADDR_VAR 0 13
26533: PUSH
26534: LD_VAR 0 13
26538: PUSH
26539: LD_INT 2
26541: PLUS
26542: ST_TO_ADDR
// continue ;
26543: GO 26343
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26545: LD_VAR 0 12
26549: PUSH
26550: LD_INT 1
26552: ARRAY
26553: PPUSH
26554: CALL_OW 266
26558: PUSH
26559: LD_INT 5
26561: EQUAL
26562: IFFALSE 26636
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26564: LD_VAR 0 12
26568: PUSH
26569: LD_INT 1
26571: ARRAY
26572: PPUSH
26573: CALL_OW 313
26577: PUSH
26578: LD_INT 3
26580: LESS
26581: IFFALSE 26617
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26583: LD_INT 0
26585: PPUSH
26586: LD_INT 5
26588: PUSH
26589: LD_INT 8
26591: PUSH
26592: LD_INT 9
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: PUSH
26600: LD_VAR 0 17
26604: ARRAY
26605: PPUSH
26606: LD_VAR 0 4
26610: PPUSH
26611: CALL_OW 380
26615: GO 26634
// PrepareHuman ( false , i , skill ) ;
26617: LD_INT 0
26619: PPUSH
26620: LD_VAR 0 8
26624: PPUSH
26625: LD_VAR 0 4
26629: PPUSH
26630: CALL_OW 380
// end else
26634: GO 26653
// PrepareHuman ( false , i , skill ) ;
26636: LD_INT 0
26638: PPUSH
26639: LD_VAR 0 8
26643: PPUSH
26644: LD_VAR 0 4
26648: PPUSH
26649: CALL_OW 380
// un := CreateHuman ;
26653: LD_ADDR_VAR 0 14
26657: PUSH
26658: CALL_OW 44
26662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26663: LD_ADDR_VAR 0 7
26667: PUSH
26668: LD_VAR 0 7
26672: PPUSH
26673: LD_INT 1
26675: PPUSH
26676: LD_VAR 0 14
26680: PPUSH
26681: CALL_OW 2
26685: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26686: LD_VAR 0 14
26690: PPUSH
26691: LD_VAR 0 12
26695: PUSH
26696: LD_INT 1
26698: ARRAY
26699: PPUSH
26700: CALL_OW 52
// end ;
26704: GO 26343
26706: POP
26707: POP
// end ;
26708: GO 25645
26710: POP
26711: POP
// result := result ^ buildings ;
26712: LD_ADDR_VAR 0 7
26716: PUSH
26717: LD_VAR 0 7
26721: PUSH
26722: LD_VAR 0 18
26726: ADD
26727: ST_TO_ADDR
// end else
26728: GO 26871
// begin for i = 1 to personel do
26730: LD_ADDR_VAR 0 8
26734: PUSH
26735: DOUBLE
26736: LD_INT 1
26738: DEC
26739: ST_TO_ADDR
26740: LD_VAR 0 6
26744: PUSH
26745: FOR_TO
26746: IFFALSE 26869
// begin if i > 4 then
26748: LD_VAR 0 8
26752: PUSH
26753: LD_INT 4
26755: GREATER
26756: IFFALSE 26760
// break ;
26758: GO 26869
// x := personel [ i ] ;
26760: LD_ADDR_VAR 0 13
26764: PUSH
26765: LD_VAR 0 6
26769: PUSH
26770: LD_VAR 0 8
26774: ARRAY
26775: ST_TO_ADDR
// if x = - 1 then
26776: LD_VAR 0 13
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: EQUAL
26785: IFFALSE 26789
// continue ;
26787: GO 26745
// PrepareHuman ( false , i , skill ) ;
26789: LD_INT 0
26791: PPUSH
26792: LD_VAR 0 8
26796: PPUSH
26797: LD_VAR 0 4
26801: PPUSH
26802: CALL_OW 380
// un := CreateHuman ;
26806: LD_ADDR_VAR 0 14
26810: PUSH
26811: CALL_OW 44
26815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26816: LD_VAR 0 14
26820: PPUSH
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 250
26830: PPUSH
26831: LD_VAR 0 1
26835: PPUSH
26836: CALL_OW 251
26840: PPUSH
26841: LD_INT 10
26843: PPUSH
26844: LD_INT 0
26846: PPUSH
26847: CALL_OW 50
// result := result ^ un ;
26851: LD_ADDR_VAR 0 7
26855: PUSH
26856: LD_VAR 0 7
26860: PUSH
26861: LD_VAR 0 14
26865: ADD
26866: ST_TO_ADDR
// end ;
26867: GO 26745
26869: POP
26870: POP
// end ; end ;
26871: LD_VAR 0 7
26875: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
26880: PPUSH
26881: PPUSH
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
// result := false ;
26894: LD_ADDR_VAR 0 3
26898: PUSH
26899: LD_INT 0
26901: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26902: LD_VAR 0 1
26906: NOT
26907: PUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 266
26917: PUSH
26918: LD_INT 32
26920: PUSH
26921: LD_INT 33
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: IN
26928: NOT
26929: OR
26930: IFFALSE 26934
// exit ;
26932: GO 28043
// nat := GetNation ( tower ) ;
26934: LD_ADDR_VAR 0 12
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 248
26948: ST_TO_ADDR
// side := GetSide ( tower ) ;
26949: LD_ADDR_VAR 0 16
26953: PUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 255
26963: ST_TO_ADDR
// x := GetX ( tower ) ;
26964: LD_ADDR_VAR 0 10
26968: PUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 250
26978: ST_TO_ADDR
// y := GetY ( tower ) ;
26979: LD_ADDR_VAR 0 11
26983: PUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 251
26993: ST_TO_ADDR
// if not x or not y then
26994: LD_VAR 0 10
26998: NOT
26999: PUSH
27000: LD_VAR 0 11
27004: NOT
27005: OR
27006: IFFALSE 27010
// exit ;
27008: GO 28043
// weapon := 0 ;
27010: LD_ADDR_VAR 0 18
27014: PUSH
27015: LD_INT 0
27017: ST_TO_ADDR
// fac_list := [ ] ;
27018: LD_ADDR_VAR 0 17
27022: PUSH
27023: EMPTY
27024: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27025: LD_ADDR_VAR 0 6
27029: PUSH
27030: LD_VAR 0 1
27034: PPUSH
27035: CALL_OW 274
27039: PPUSH
27040: LD_VAR 0 2
27044: PPUSH
27045: LD_INT 0
27047: PPUSH
27048: CALL 24614 0 3
27052: PPUSH
27053: LD_INT 30
27055: PUSH
27056: LD_INT 3
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PPUSH
27063: CALL_OW 72
27067: ST_TO_ADDR
// if not factories then
27068: LD_VAR 0 6
27072: NOT
27073: IFFALSE 27077
// exit ;
27075: GO 28043
// for i in factories do
27077: LD_ADDR_VAR 0 8
27081: PUSH
27082: LD_VAR 0 6
27086: PUSH
27087: FOR_IN
27088: IFFALSE 27113
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27090: LD_ADDR_VAR 0 17
27094: PUSH
27095: LD_VAR 0 17
27099: PUSH
27100: LD_VAR 0 8
27104: PPUSH
27105: CALL_OW 478
27109: UNION
27110: ST_TO_ADDR
27111: GO 27087
27113: POP
27114: POP
// if not fac_list then
27115: LD_VAR 0 17
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 28043
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27124: LD_ADDR_VAR 0 5
27128: PUSH
27129: LD_INT 4
27131: PUSH
27132: LD_INT 5
27134: PUSH
27135: LD_INT 9
27137: PUSH
27138: LD_INT 10
27140: PUSH
27141: LD_INT 6
27143: PUSH
27144: LD_INT 7
27146: PUSH
27147: LD_INT 11
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 27
27161: PUSH
27162: LD_INT 28
27164: PUSH
27165: LD_INT 26
27167: PUSH
27168: LD_INT 30
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 43
27179: PUSH
27180: LD_INT 44
27182: PUSH
27183: LD_INT 46
27185: PUSH
27186: LD_INT 45
27188: PUSH
27189: LD_INT 47
27191: PUSH
27192: LD_INT 49
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: PUSH
27208: LD_VAR 0 12
27212: ARRAY
27213: ST_TO_ADDR
// list := list isect fac_list ;
27214: LD_ADDR_VAR 0 5
27218: PUSH
27219: LD_VAR 0 5
27223: PUSH
27224: LD_VAR 0 17
27228: ISECT
27229: ST_TO_ADDR
// if not list then
27230: LD_VAR 0 5
27234: NOT
27235: IFFALSE 27239
// exit ;
27237: GO 28043
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27239: LD_VAR 0 12
27243: PUSH
27244: LD_INT 3
27246: EQUAL
27247: PUSH
27248: LD_INT 49
27250: PUSH
27251: LD_VAR 0 5
27255: IN
27256: AND
27257: PUSH
27258: LD_INT 31
27260: PPUSH
27261: LD_VAR 0 16
27265: PPUSH
27266: CALL_OW 321
27270: PUSH
27271: LD_INT 2
27273: EQUAL
27274: AND
27275: IFFALSE 27335
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27277: LD_INT 22
27279: PUSH
27280: LD_VAR 0 16
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 35
27291: PUSH
27292: LD_INT 49
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 91
27301: PUSH
27302: LD_VAR 0 1
27306: PUSH
27307: LD_INT 10
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: PPUSH
27320: CALL_OW 69
27324: NOT
27325: IFFALSE 27335
// weapon := ru_time_lapser ;
27327: LD_ADDR_VAR 0 18
27331: PUSH
27332: LD_INT 49
27334: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27335: LD_VAR 0 12
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: IN
27350: PUSH
27351: LD_INT 11
27353: PUSH
27354: LD_VAR 0 5
27358: IN
27359: PUSH
27360: LD_INT 30
27362: PUSH
27363: LD_VAR 0 5
27367: IN
27368: OR
27369: AND
27370: PUSH
27371: LD_INT 6
27373: PPUSH
27374: LD_VAR 0 16
27378: PPUSH
27379: CALL_OW 321
27383: PUSH
27384: LD_INT 2
27386: EQUAL
27387: AND
27388: IFFALSE 27553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27390: LD_INT 22
27392: PUSH
27393: LD_VAR 0 16
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 35
27407: PUSH
27408: LD_INT 11
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 35
27417: PUSH
27418: LD_INT 30
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 91
27432: PUSH
27433: LD_VAR 0 1
27437: PUSH
27438: LD_INT 18
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: NOT
27456: PUSH
27457: LD_INT 22
27459: PUSH
27460: LD_VAR 0 16
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 30
27474: PUSH
27475: LD_INT 32
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 30
27484: PUSH
27485: LD_INT 33
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 91
27499: PUSH
27500: LD_VAR 0 1
27504: PUSH
27505: LD_INT 12
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: LIST
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: PUSH
27518: EMPTY
27519: LIST
27520: PPUSH
27521: CALL_OW 69
27525: PUSH
27526: LD_INT 2
27528: GREATER
27529: AND
27530: IFFALSE 27553
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27532: LD_ADDR_VAR 0 18
27536: PUSH
27537: LD_INT 11
27539: PUSH
27540: LD_INT 30
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_VAR 0 12
27551: ARRAY
27552: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27553: LD_VAR 0 18
27557: NOT
27558: PUSH
27559: LD_INT 40
27561: PPUSH
27562: LD_VAR 0 16
27566: PPUSH
27567: CALL_OW 321
27571: PUSH
27572: LD_INT 2
27574: EQUAL
27575: AND
27576: PUSH
27577: LD_INT 7
27579: PUSH
27580: LD_VAR 0 5
27584: IN
27585: PUSH
27586: LD_INT 28
27588: PUSH
27589: LD_VAR 0 5
27593: IN
27594: OR
27595: PUSH
27596: LD_INT 45
27598: PUSH
27599: LD_VAR 0 5
27603: IN
27604: OR
27605: AND
27606: IFFALSE 27860
// begin hex := GetHexInfo ( x , y ) ;
27608: LD_ADDR_VAR 0 4
27612: PUSH
27613: LD_VAR 0 10
27617: PPUSH
27618: LD_VAR 0 11
27622: PPUSH
27623: CALL_OW 546
27627: ST_TO_ADDR
// if hex [ 1 ] then
27628: LD_VAR 0 4
27632: PUSH
27633: LD_INT 1
27635: ARRAY
27636: IFFALSE 27640
// exit ;
27638: GO 28043
// height := hex [ 2 ] ;
27640: LD_ADDR_VAR 0 15
27644: PUSH
27645: LD_VAR 0 4
27649: PUSH
27650: LD_INT 2
27652: ARRAY
27653: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27654: LD_ADDR_VAR 0 14
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 5
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
// for i in tmp do
27677: LD_ADDR_VAR 0 8
27681: PUSH
27682: LD_VAR 0 14
27686: PUSH
27687: FOR_IN
27688: IFFALSE 27858
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27690: LD_ADDR_VAR 0 9
27694: PUSH
27695: LD_VAR 0 10
27699: PPUSH
27700: LD_VAR 0 8
27704: PPUSH
27705: LD_INT 5
27707: PPUSH
27708: CALL_OW 272
27712: PUSH
27713: LD_VAR 0 11
27717: PPUSH
27718: LD_VAR 0 8
27722: PPUSH
27723: LD_INT 5
27725: PPUSH
27726: CALL_OW 273
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27735: LD_VAR 0 9
27739: PUSH
27740: LD_INT 1
27742: ARRAY
27743: PPUSH
27744: LD_VAR 0 9
27748: PUSH
27749: LD_INT 2
27751: ARRAY
27752: PPUSH
27753: CALL_OW 488
27757: IFFALSE 27856
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27759: LD_ADDR_VAR 0 4
27763: PUSH
27764: LD_VAR 0 9
27768: PUSH
27769: LD_INT 1
27771: ARRAY
27772: PPUSH
27773: LD_VAR 0 9
27777: PUSH
27778: LD_INT 2
27780: ARRAY
27781: PPUSH
27782: CALL_OW 546
27786: ST_TO_ADDR
// if hex [ 1 ] then
27787: LD_VAR 0 4
27791: PUSH
27792: LD_INT 1
27794: ARRAY
27795: IFFALSE 27799
// continue ;
27797: GO 27687
// h := hex [ 2 ] ;
27799: LD_ADDR_VAR 0 13
27803: PUSH
27804: LD_VAR 0 4
27808: PUSH
27809: LD_INT 2
27811: ARRAY
27812: ST_TO_ADDR
// if h + 7 < height then
27813: LD_VAR 0 13
27817: PUSH
27818: LD_INT 7
27820: PLUS
27821: PUSH
27822: LD_VAR 0 15
27826: LESS
27827: IFFALSE 27856
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27829: LD_ADDR_VAR 0 18
27833: PUSH
27834: LD_INT 7
27836: PUSH
27837: LD_INT 28
27839: PUSH
27840: LD_INT 45
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: PUSH
27848: LD_VAR 0 12
27852: ARRAY
27853: ST_TO_ADDR
// break ;
27854: GO 27858
// end ; end ; end ;
27856: GO 27687
27858: POP
27859: POP
// end ; if not weapon then
27860: LD_VAR 0 18
27864: NOT
27865: IFFALSE 27925
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27867: LD_ADDR_VAR 0 5
27871: PUSH
27872: LD_VAR 0 5
27876: PUSH
27877: LD_INT 11
27879: PUSH
27880: LD_INT 30
27882: PUSH
27883: LD_INT 49
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: DIFF
27891: ST_TO_ADDR
// if not list then
27892: LD_VAR 0 5
27896: NOT
27897: IFFALSE 27901
// exit ;
27899: GO 28043
// weapon := list [ rand ( 1 , list ) ] ;
27901: LD_ADDR_VAR 0 18
27905: PUSH
27906: LD_VAR 0 5
27910: PUSH
27911: LD_INT 1
27913: PPUSH
27914: LD_VAR 0 5
27918: PPUSH
27919: CALL_OW 12
27923: ARRAY
27924: ST_TO_ADDR
// end ; if weapon then
27925: LD_VAR 0 18
27929: IFFALSE 28043
// begin tmp := CostOfWeapon ( weapon ) ;
27931: LD_ADDR_VAR 0 14
27935: PUSH
27936: LD_VAR 0 18
27940: PPUSH
27941: CALL_OW 451
27945: ST_TO_ADDR
// j := GetBase ( tower ) ;
27946: LD_ADDR_VAR 0 9
27950: PUSH
27951: LD_VAR 0 1
27955: PPUSH
27956: CALL_OW 274
27960: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27961: LD_VAR 0 9
27965: PPUSH
27966: LD_INT 1
27968: PPUSH
27969: CALL_OW 275
27973: PUSH
27974: LD_VAR 0 14
27978: PUSH
27979: LD_INT 1
27981: ARRAY
27982: GREATEREQUAL
27983: PUSH
27984: LD_VAR 0 9
27988: PPUSH
27989: LD_INT 2
27991: PPUSH
27992: CALL_OW 275
27996: PUSH
27997: LD_VAR 0 14
28001: PUSH
28002: LD_INT 2
28004: ARRAY
28005: GREATEREQUAL
28006: AND
28007: PUSH
28008: LD_VAR 0 9
28012: PPUSH
28013: LD_INT 3
28015: PPUSH
28016: CALL_OW 275
28020: PUSH
28021: LD_VAR 0 14
28025: PUSH
28026: LD_INT 3
28028: ARRAY
28029: GREATEREQUAL
28030: AND
28031: IFFALSE 28043
// result := weapon ;
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_VAR 0 18
28042: ST_TO_ADDR
// end ; end ;
28043: LD_VAR 0 3
28047: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// result := true ;
28052: LD_ADDR_VAR 0 3
28056: PUSH
28057: LD_INT 1
28059: ST_TO_ADDR
// if array1 = array2 then
28060: LD_VAR 0 1
28064: PUSH
28065: LD_VAR 0 2
28069: EQUAL
28070: IFFALSE 28130
// begin for i = 1 to array1 do
28072: LD_ADDR_VAR 0 4
28076: PUSH
28077: DOUBLE
28078: LD_INT 1
28080: DEC
28081: ST_TO_ADDR
28082: LD_VAR 0 1
28086: PUSH
28087: FOR_TO
28088: IFFALSE 28126
// if array1 [ i ] <> array2 [ i ] then
28090: LD_VAR 0 1
28094: PUSH
28095: LD_VAR 0 4
28099: ARRAY
28100: PUSH
28101: LD_VAR 0 2
28105: PUSH
28106: LD_VAR 0 4
28110: ARRAY
28111: NONEQUAL
28112: IFFALSE 28124
// begin result := false ;
28114: LD_ADDR_VAR 0 3
28118: PUSH
28119: LD_INT 0
28121: ST_TO_ADDR
// break ;
28122: GO 28126
// end ;
28124: GO 28087
28126: POP
28127: POP
// end else
28128: GO 28138
// result := false ;
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_INT 0
28137: ST_TO_ADDR
// end ;
28138: LD_VAR 0 3
28142: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
// if not array1 or not array2 then
28147: LD_VAR 0 1
28151: NOT
28152: PUSH
28153: LD_VAR 0 2
28157: NOT
28158: OR
28159: IFFALSE 28163
// exit ;
28161: GO 28227
// result := true ;
28163: LD_ADDR_VAR 0 3
28167: PUSH
28168: LD_INT 1
28170: ST_TO_ADDR
// for i = 1 to array1 do
28171: LD_ADDR_VAR 0 4
28175: PUSH
28176: DOUBLE
28177: LD_INT 1
28179: DEC
28180: ST_TO_ADDR
28181: LD_VAR 0 1
28185: PUSH
28186: FOR_TO
28187: IFFALSE 28225
// if array1 [ i ] <> array2 [ i ] then
28189: LD_VAR 0 1
28193: PUSH
28194: LD_VAR 0 4
28198: ARRAY
28199: PUSH
28200: LD_VAR 0 2
28204: PUSH
28205: LD_VAR 0 4
28209: ARRAY
28210: NONEQUAL
28211: IFFALSE 28223
// begin result := false ;
28213: LD_ADDR_VAR 0 3
28217: PUSH
28218: LD_INT 0
28220: ST_TO_ADDR
// break ;
28221: GO 28225
// end ;
28223: GO 28186
28225: POP
28226: POP
// end ;
28227: LD_VAR 0 3
28231: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28232: LD_INT 0
28234: PPUSH
28235: PPUSH
28236: PPUSH
// pom := GetBase ( fac ) ;
28237: LD_ADDR_VAR 0 5
28241: PUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 274
28251: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28252: LD_ADDR_VAR 0 4
28256: PUSH
28257: LD_VAR 0 2
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PPUSH
28266: LD_VAR 0 2
28270: PUSH
28271: LD_INT 2
28273: ARRAY
28274: PPUSH
28275: LD_VAR 0 2
28279: PUSH
28280: LD_INT 3
28282: ARRAY
28283: PPUSH
28284: LD_VAR 0 2
28288: PUSH
28289: LD_INT 4
28291: ARRAY
28292: PPUSH
28293: CALL_OW 449
28297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_VAR 0 5
28307: PPUSH
28308: LD_INT 1
28310: PPUSH
28311: CALL_OW 275
28315: PUSH
28316: LD_VAR 0 4
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: GREATEREQUAL
28325: PUSH
28326: LD_VAR 0 5
28330: PPUSH
28331: LD_INT 2
28333: PPUSH
28334: CALL_OW 275
28338: PUSH
28339: LD_VAR 0 4
28343: PUSH
28344: LD_INT 2
28346: ARRAY
28347: GREATEREQUAL
28348: AND
28349: PUSH
28350: LD_VAR 0 5
28354: PPUSH
28355: LD_INT 3
28357: PPUSH
28358: CALL_OW 275
28362: PUSH
28363: LD_VAR 0 4
28367: PUSH
28368: LD_INT 3
28370: ARRAY
28371: GREATEREQUAL
28372: AND
28373: ST_TO_ADDR
// end ;
28374: LD_VAR 0 3
28378: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28379: LD_INT 0
28381: PPUSH
28382: PPUSH
28383: PPUSH
28384: PPUSH
// pom := GetBase ( building ) ;
28385: LD_ADDR_VAR 0 3
28389: PUSH
28390: LD_VAR 0 1
28394: PPUSH
28395: CALL_OW 274
28399: ST_TO_ADDR
// if not pom then
28400: LD_VAR 0 3
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28579
// btype := GetBType ( building ) ;
28409: LD_ADDR_VAR 0 5
28413: PUSH
28414: LD_VAR 0 1
28418: PPUSH
28419: CALL_OW 266
28423: ST_TO_ADDR
// if btype = b_armoury then
28424: LD_VAR 0 5
28428: PUSH
28429: LD_INT 4
28431: EQUAL
28432: IFFALSE 28442
// btype := b_barracks ;
28434: LD_ADDR_VAR 0 5
28438: PUSH
28439: LD_INT 5
28441: ST_TO_ADDR
// if btype = b_depot then
28442: LD_VAR 0 5
28446: PUSH
28447: LD_INT 0
28449: EQUAL
28450: IFFALSE 28460
// btype := b_warehouse ;
28452: LD_ADDR_VAR 0 5
28456: PUSH
28457: LD_INT 1
28459: ST_TO_ADDR
// if btype = b_workshop then
28460: LD_VAR 0 5
28464: PUSH
28465: LD_INT 2
28467: EQUAL
28468: IFFALSE 28478
// btype := b_factory ;
28470: LD_ADDR_VAR 0 5
28474: PUSH
28475: LD_INT 3
28477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28478: LD_ADDR_VAR 0 4
28482: PUSH
28483: LD_VAR 0 5
28487: PPUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: CALL_OW 248
28497: PPUSH
28498: CALL_OW 450
28502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28503: LD_ADDR_VAR 0 2
28507: PUSH
28508: LD_VAR 0 3
28512: PPUSH
28513: LD_INT 1
28515: PPUSH
28516: CALL_OW 275
28520: PUSH
28521: LD_VAR 0 4
28525: PUSH
28526: LD_INT 1
28528: ARRAY
28529: GREATEREQUAL
28530: PUSH
28531: LD_VAR 0 3
28535: PPUSH
28536: LD_INT 2
28538: PPUSH
28539: CALL_OW 275
28543: PUSH
28544: LD_VAR 0 4
28548: PUSH
28549: LD_INT 2
28551: ARRAY
28552: GREATEREQUAL
28553: AND
28554: PUSH
28555: LD_VAR 0 3
28559: PPUSH
28560: LD_INT 3
28562: PPUSH
28563: CALL_OW 275
28567: PUSH
28568: LD_VAR 0 4
28572: PUSH
28573: LD_INT 3
28575: ARRAY
28576: GREATEREQUAL
28577: AND
28578: ST_TO_ADDR
// end ;
28579: LD_VAR 0 2
28583: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28584: LD_INT 0
28586: PPUSH
28587: PPUSH
28588: PPUSH
// pom := GetBase ( building ) ;
28589: LD_ADDR_VAR 0 4
28593: PUSH
28594: LD_VAR 0 1
28598: PPUSH
28599: CALL_OW 274
28603: ST_TO_ADDR
// if not pom then
28604: LD_VAR 0 4
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28714
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28613: LD_ADDR_VAR 0 5
28617: PUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 248
28632: PPUSH
28633: CALL_OW 450
28637: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28638: LD_ADDR_VAR 0 3
28642: PUSH
28643: LD_VAR 0 4
28647: PPUSH
28648: LD_INT 1
28650: PPUSH
28651: CALL_OW 275
28655: PUSH
28656: LD_VAR 0 5
28660: PUSH
28661: LD_INT 1
28663: ARRAY
28664: GREATEREQUAL
28665: PUSH
28666: LD_VAR 0 4
28670: PPUSH
28671: LD_INT 2
28673: PPUSH
28674: CALL_OW 275
28678: PUSH
28679: LD_VAR 0 5
28683: PUSH
28684: LD_INT 2
28686: ARRAY
28687: GREATEREQUAL
28688: AND
28689: PUSH
28690: LD_VAR 0 4
28694: PPUSH
28695: LD_INT 3
28697: PPUSH
28698: CALL_OW 275
28702: PUSH
28703: LD_VAR 0 5
28707: PUSH
28708: LD_INT 3
28710: ARRAY
28711: GREATEREQUAL
28712: AND
28713: ST_TO_ADDR
// end ;
28714: LD_VAR 0 3
28718: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28719: LD_INT 0
28721: PPUSH
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
// result := false ;
28732: LD_ADDR_VAR 0 8
28736: PUSH
28737: LD_INT 0
28739: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28740: LD_VAR 0 5
28744: NOT
28745: PUSH
28746: LD_VAR 0 1
28750: NOT
28751: OR
28752: PUSH
28753: LD_VAR 0 2
28757: NOT
28758: OR
28759: PUSH
28760: LD_VAR 0 3
28764: NOT
28765: OR
28766: IFFALSE 28770
// exit ;
28768: GO 29584
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28770: LD_ADDR_VAR 0 14
28774: PUSH
28775: LD_VAR 0 1
28779: PPUSH
28780: LD_VAR 0 2
28784: PPUSH
28785: LD_VAR 0 3
28789: PPUSH
28790: LD_VAR 0 4
28794: PPUSH
28795: LD_VAR 0 5
28799: PUSH
28800: LD_INT 1
28802: ARRAY
28803: PPUSH
28804: CALL_OW 248
28808: PPUSH
28809: LD_INT 0
28811: PPUSH
28812: CALL 30821 0 6
28816: ST_TO_ADDR
// if not hexes then
28817: LD_VAR 0 14
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 29584
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28826: LD_ADDR_VAR 0 17
28830: PUSH
28831: LD_VAR 0 5
28835: PPUSH
28836: LD_INT 22
28838: PUSH
28839: LD_VAR 0 13
28843: PPUSH
28844: CALL_OW 255
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 2
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 30
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PPUSH
28885: CALL_OW 72
28889: ST_TO_ADDR
// for i = 1 to hexes do
28890: LD_ADDR_VAR 0 9
28894: PUSH
28895: DOUBLE
28896: LD_INT 1
28898: DEC
28899: ST_TO_ADDR
28900: LD_VAR 0 14
28904: PUSH
28905: FOR_TO
28906: IFFALSE 29582
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28908: LD_ADDR_VAR 0 13
28912: PUSH
28913: LD_VAR 0 14
28917: PUSH
28918: LD_VAR 0 9
28922: ARRAY
28923: PUSH
28924: LD_INT 1
28926: ARRAY
28927: PPUSH
28928: LD_VAR 0 14
28932: PUSH
28933: LD_VAR 0 9
28937: ARRAY
28938: PUSH
28939: LD_INT 2
28941: ARRAY
28942: PPUSH
28943: CALL_OW 428
28947: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28948: LD_VAR 0 14
28952: PUSH
28953: LD_VAR 0 9
28957: ARRAY
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: PPUSH
28963: LD_VAR 0 14
28967: PUSH
28968: LD_VAR 0 9
28972: ARRAY
28973: PUSH
28974: LD_INT 2
28976: ARRAY
28977: PPUSH
28978: CALL_OW 351
28982: PUSH
28983: LD_VAR 0 14
28987: PUSH
28988: LD_VAR 0 9
28992: ARRAY
28993: PUSH
28994: LD_INT 1
28996: ARRAY
28997: PPUSH
28998: LD_VAR 0 14
29002: PUSH
29003: LD_VAR 0 9
29007: ARRAY
29008: PUSH
29009: LD_INT 2
29011: ARRAY
29012: PPUSH
29013: CALL_OW 488
29017: NOT
29018: OR
29019: PUSH
29020: LD_VAR 0 13
29024: PPUSH
29025: CALL_OW 247
29029: PUSH
29030: LD_INT 3
29032: EQUAL
29033: OR
29034: IFFALSE 29040
// exit ;
29036: POP
29037: POP
29038: GO 29584
// if not tmp then
29040: LD_VAR 0 13
29044: NOT
29045: IFFALSE 29049
// continue ;
29047: GO 28905
// result := true ;
29049: LD_ADDR_VAR 0 8
29053: PUSH
29054: LD_INT 1
29056: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29057: LD_VAR 0 6
29061: PUSH
29062: LD_VAR 0 13
29066: PPUSH
29067: CALL_OW 247
29071: PUSH
29072: LD_INT 2
29074: EQUAL
29075: AND
29076: PUSH
29077: LD_VAR 0 13
29081: PPUSH
29082: CALL_OW 263
29086: PUSH
29087: LD_INT 1
29089: EQUAL
29090: AND
29091: IFFALSE 29255
// begin if IsDrivenBy ( tmp ) then
29093: LD_VAR 0 13
29097: PPUSH
29098: CALL_OW 311
29102: IFFALSE 29106
// continue ;
29104: GO 28905
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29106: LD_VAR 0 6
29110: PPUSH
29111: LD_INT 3
29113: PUSH
29114: LD_INT 60
29116: PUSH
29117: EMPTY
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 55
29129: PUSH
29130: EMPTY
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 72
29145: IFFALSE 29253
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29147: LD_ADDR_VAR 0 18
29151: PUSH
29152: LD_VAR 0 6
29156: PPUSH
29157: LD_INT 3
29159: PUSH
29160: LD_INT 60
29162: PUSH
29163: EMPTY
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: LD_INT 55
29175: PUSH
29176: EMPTY
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PPUSH
29187: CALL_OW 72
29191: PUSH
29192: LD_INT 1
29194: ARRAY
29195: ST_TO_ADDR
// if IsInUnit ( driver ) then
29196: LD_VAR 0 18
29200: PPUSH
29201: CALL_OW 310
29205: IFFALSE 29216
// ComExit ( driver ) ;
29207: LD_VAR 0 18
29211: PPUSH
29212: CALL 53949 0 1
// AddComEnterUnit ( driver , tmp ) ;
29216: LD_VAR 0 18
29220: PPUSH
29221: LD_VAR 0 13
29225: PPUSH
29226: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29230: LD_VAR 0 18
29234: PPUSH
29235: LD_VAR 0 7
29239: PPUSH
29240: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29244: LD_VAR 0 18
29248: PPUSH
29249: CALL_OW 181
// end ; continue ;
29253: GO 28905
// end ; if not cleaners or not tmp in cleaners then
29255: LD_VAR 0 6
29259: NOT
29260: PUSH
29261: LD_VAR 0 13
29265: PUSH
29266: LD_VAR 0 6
29270: IN
29271: NOT
29272: OR
29273: IFFALSE 29580
// begin if dep then
29275: LD_VAR 0 17
29279: IFFALSE 29415
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29281: LD_ADDR_VAR 0 16
29285: PUSH
29286: LD_VAR 0 17
29290: PUSH
29291: LD_INT 1
29293: ARRAY
29294: PPUSH
29295: CALL_OW 250
29299: PPUSH
29300: LD_VAR 0 17
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: PPUSH
29309: CALL_OW 254
29313: PPUSH
29314: LD_INT 5
29316: PPUSH
29317: CALL_OW 272
29321: PUSH
29322: LD_VAR 0 17
29326: PUSH
29327: LD_INT 1
29329: ARRAY
29330: PPUSH
29331: CALL_OW 251
29335: PPUSH
29336: LD_VAR 0 17
29340: PUSH
29341: LD_INT 1
29343: ARRAY
29344: PPUSH
29345: CALL_OW 254
29349: PPUSH
29350: LD_INT 5
29352: PPUSH
29353: CALL_OW 273
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29362: LD_VAR 0 16
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: LD_VAR 0 16
29375: PUSH
29376: LD_INT 2
29378: ARRAY
29379: PPUSH
29380: CALL_OW 488
29384: IFFALSE 29415
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29386: LD_VAR 0 13
29390: PPUSH
29391: LD_VAR 0 16
29395: PUSH
29396: LD_INT 1
29398: ARRAY
29399: PPUSH
29400: LD_VAR 0 16
29404: PUSH
29405: LD_INT 2
29407: ARRAY
29408: PPUSH
29409: CALL_OW 111
// continue ;
29413: GO 28905
// end ; end ; r := GetDir ( tmp ) ;
29415: LD_ADDR_VAR 0 15
29419: PUSH
29420: LD_VAR 0 13
29424: PPUSH
29425: CALL_OW 254
29429: ST_TO_ADDR
// if r = 5 then
29430: LD_VAR 0 15
29434: PUSH
29435: LD_INT 5
29437: EQUAL
29438: IFFALSE 29448
// r := 0 ;
29440: LD_ADDR_VAR 0 15
29444: PUSH
29445: LD_INT 0
29447: ST_TO_ADDR
// for j = r to 5 do
29448: LD_ADDR_VAR 0 10
29452: PUSH
29453: DOUBLE
29454: LD_VAR 0 15
29458: DEC
29459: ST_TO_ADDR
29460: LD_INT 5
29462: PUSH
29463: FOR_TO
29464: IFFALSE 29578
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29466: LD_ADDR_VAR 0 11
29470: PUSH
29471: LD_VAR 0 13
29475: PPUSH
29476: CALL_OW 250
29480: PPUSH
29481: LD_VAR 0 10
29485: PPUSH
29486: LD_INT 2
29488: PPUSH
29489: CALL_OW 272
29493: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29494: LD_ADDR_VAR 0 12
29498: PUSH
29499: LD_VAR 0 13
29503: PPUSH
29504: CALL_OW 251
29508: PPUSH
29509: LD_VAR 0 10
29513: PPUSH
29514: LD_INT 2
29516: PPUSH
29517: CALL_OW 273
29521: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29522: LD_VAR 0 11
29526: PPUSH
29527: LD_VAR 0 12
29531: PPUSH
29532: CALL_OW 488
29536: PUSH
29537: LD_VAR 0 11
29541: PPUSH
29542: LD_VAR 0 12
29546: PPUSH
29547: CALL_OW 428
29551: NOT
29552: AND
29553: IFFALSE 29576
// begin ComMoveXY ( tmp , _x , _y ) ;
29555: LD_VAR 0 13
29559: PPUSH
29560: LD_VAR 0 11
29564: PPUSH
29565: LD_VAR 0 12
29569: PPUSH
29570: CALL_OW 111
// break ;
29574: GO 29578
// end ; end ;
29576: GO 29463
29578: POP
29579: POP
// end ; end ;
29580: GO 28905
29582: POP
29583: POP
// end ;
29584: LD_VAR 0 8
29588: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29589: LD_INT 0
29591: PPUSH
// result := true ;
29592: LD_ADDR_VAR 0 3
29596: PUSH
29597: LD_INT 1
29599: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29600: LD_VAR 0 2
29604: PUSH
29605: LD_INT 24
29607: DOUBLE
29608: EQUAL
29609: IFTRUE 29619
29611: LD_INT 33
29613: DOUBLE
29614: EQUAL
29615: IFTRUE 29619
29617: GO 29644
29619: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29620: LD_ADDR_VAR 0 3
29624: PUSH
29625: LD_INT 32
29627: PPUSH
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL_OW 321
29637: PUSH
29638: LD_INT 2
29640: EQUAL
29641: ST_TO_ADDR
29642: GO 29964
29644: LD_INT 20
29646: DOUBLE
29647: EQUAL
29648: IFTRUE 29652
29650: GO 29677
29652: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 6
29660: PPUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 321
29670: PUSH
29671: LD_INT 2
29673: EQUAL
29674: ST_TO_ADDR
29675: GO 29964
29677: LD_INT 22
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29691
29683: LD_INT 36
29685: DOUBLE
29686: EQUAL
29687: IFTRUE 29691
29689: GO 29716
29691: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29692: LD_ADDR_VAR 0 3
29696: PUSH
29697: LD_INT 15
29699: PPUSH
29700: LD_VAR 0 1
29704: PPUSH
29705: CALL_OW 321
29709: PUSH
29710: LD_INT 2
29712: EQUAL
29713: ST_TO_ADDR
29714: GO 29964
29716: LD_INT 30
29718: DOUBLE
29719: EQUAL
29720: IFTRUE 29724
29722: GO 29749
29724: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 20
29732: PPUSH
29733: LD_VAR 0 1
29737: PPUSH
29738: CALL_OW 321
29742: PUSH
29743: LD_INT 2
29745: EQUAL
29746: ST_TO_ADDR
29747: GO 29964
29749: LD_INT 28
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29763
29755: LD_INT 21
29757: DOUBLE
29758: EQUAL
29759: IFTRUE 29763
29761: GO 29788
29763: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29764: LD_ADDR_VAR 0 3
29768: PUSH
29769: LD_INT 21
29771: PPUSH
29772: LD_VAR 0 1
29776: PPUSH
29777: CALL_OW 321
29781: PUSH
29782: LD_INT 2
29784: EQUAL
29785: ST_TO_ADDR
29786: GO 29964
29788: LD_INT 16
29790: DOUBLE
29791: EQUAL
29792: IFTRUE 29796
29794: GO 29823
29796: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_EXP 120
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 321
29816: PUSH
29817: LD_INT 2
29819: EQUAL
29820: ST_TO_ADDR
29821: GO 29964
29823: LD_INT 19
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29837
29829: LD_INT 23
29831: DOUBLE
29832: EQUAL
29833: IFTRUE 29837
29835: GO 29864
29837: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29838: LD_ADDR_VAR 0 3
29842: PUSH
29843: LD_EXP 119
29847: PPUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 321
29857: PUSH
29858: LD_INT 2
29860: EQUAL
29861: ST_TO_ADDR
29862: GO 29964
29864: LD_INT 17
29866: DOUBLE
29867: EQUAL
29868: IFTRUE 29872
29870: GO 29897
29872: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29873: LD_ADDR_VAR 0 3
29877: PUSH
29878: LD_INT 39
29880: PPUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL_OW 321
29890: PUSH
29891: LD_INT 2
29893: EQUAL
29894: ST_TO_ADDR
29895: GO 29964
29897: LD_INT 18
29899: DOUBLE
29900: EQUAL
29901: IFTRUE 29905
29903: GO 29930
29905: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: LD_INT 40
29913: PPUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: CALL_OW 321
29923: PUSH
29924: LD_INT 2
29926: EQUAL
29927: ST_TO_ADDR
29928: GO 29964
29930: LD_INT 27
29932: DOUBLE
29933: EQUAL
29934: IFTRUE 29938
29936: GO 29963
29938: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29939: LD_ADDR_VAR 0 3
29943: PUSH
29944: LD_INT 35
29946: PPUSH
29947: LD_VAR 0 1
29951: PPUSH
29952: CALL_OW 321
29956: PUSH
29957: LD_INT 2
29959: EQUAL
29960: ST_TO_ADDR
29961: GO 29964
29963: POP
// end ;
29964: LD_VAR 0 3
29968: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29969: LD_INT 0
29971: PPUSH
29972: PPUSH
29973: PPUSH
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
// result := false ;
29982: LD_ADDR_VAR 0 6
29986: PUSH
29987: LD_INT 0
29989: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29990: LD_VAR 0 1
29994: NOT
29995: PUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 266
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: IN
30016: NOT
30017: OR
30018: PUSH
30019: LD_VAR 0 2
30023: NOT
30024: OR
30025: PUSH
30026: LD_VAR 0 5
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: IN
30057: NOT
30058: OR
30059: PUSH
30060: LD_VAR 0 3
30064: PPUSH
30065: LD_VAR 0 4
30069: PPUSH
30070: CALL_OW 488
30074: NOT
30075: OR
30076: IFFALSE 30080
// exit ;
30078: GO 30816
// side := GetSide ( depot ) ;
30080: LD_ADDR_VAR 0 9
30084: PUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 255
30094: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30095: LD_VAR 0 9
30099: PPUSH
30100: LD_VAR 0 2
30104: PPUSH
30105: CALL 29589 0 2
30109: NOT
30110: IFFALSE 30114
// exit ;
30112: GO 30816
// pom := GetBase ( depot ) ;
30114: LD_ADDR_VAR 0 10
30118: PUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 274
30128: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30129: LD_ADDR_VAR 0 11
30133: PUSH
30134: LD_VAR 0 2
30138: PPUSH
30139: LD_VAR 0 1
30143: PPUSH
30144: CALL_OW 248
30148: PPUSH
30149: CALL_OW 450
30153: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30154: LD_VAR 0 10
30158: PPUSH
30159: LD_INT 1
30161: PPUSH
30162: CALL_OW 275
30166: PUSH
30167: LD_VAR 0 11
30171: PUSH
30172: LD_INT 1
30174: ARRAY
30175: GREATEREQUAL
30176: PUSH
30177: LD_VAR 0 10
30181: PPUSH
30182: LD_INT 2
30184: PPUSH
30185: CALL_OW 275
30189: PUSH
30190: LD_VAR 0 11
30194: PUSH
30195: LD_INT 2
30197: ARRAY
30198: GREATEREQUAL
30199: AND
30200: PUSH
30201: LD_VAR 0 10
30205: PPUSH
30206: LD_INT 3
30208: PPUSH
30209: CALL_OW 275
30213: PUSH
30214: LD_VAR 0 11
30218: PUSH
30219: LD_INT 3
30221: ARRAY
30222: GREATEREQUAL
30223: AND
30224: NOT
30225: IFFALSE 30229
// exit ;
30227: GO 30816
// if GetBType ( depot ) = b_depot then
30229: LD_VAR 0 1
30233: PPUSH
30234: CALL_OW 266
30238: PUSH
30239: LD_INT 0
30241: EQUAL
30242: IFFALSE 30254
// dist := 28 else
30244: LD_ADDR_VAR 0 14
30248: PUSH
30249: LD_INT 28
30251: ST_TO_ADDR
30252: GO 30262
// dist := 36 ;
30254: LD_ADDR_VAR 0 14
30258: PUSH
30259: LD_INT 36
30261: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30262: LD_VAR 0 1
30266: PPUSH
30267: LD_VAR 0 3
30271: PPUSH
30272: LD_VAR 0 4
30276: PPUSH
30277: CALL_OW 297
30281: PUSH
30282: LD_VAR 0 14
30286: GREATER
30287: IFFALSE 30291
// exit ;
30289: GO 30816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30291: LD_ADDR_VAR 0 12
30295: PUSH
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_VAR 0 3
30305: PPUSH
30306: LD_VAR 0 4
30310: PPUSH
30311: LD_VAR 0 5
30315: PPUSH
30316: LD_VAR 0 1
30320: PPUSH
30321: CALL_OW 248
30325: PPUSH
30326: LD_INT 0
30328: PPUSH
30329: CALL 30821 0 6
30333: ST_TO_ADDR
// if not hexes then
30334: LD_VAR 0 12
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30816
// hex := GetHexInfo ( x , y ) ;
30343: LD_ADDR_VAR 0 15
30347: PUSH
30348: LD_VAR 0 3
30352: PPUSH
30353: LD_VAR 0 4
30357: PPUSH
30358: CALL_OW 546
30362: ST_TO_ADDR
// if hex [ 1 ] then
30363: LD_VAR 0 15
30367: PUSH
30368: LD_INT 1
30370: ARRAY
30371: IFFALSE 30375
// exit ;
30373: GO 30816
// height := hex [ 2 ] ;
30375: LD_ADDR_VAR 0 13
30379: PUSH
30380: LD_VAR 0 15
30384: PUSH
30385: LD_INT 2
30387: ARRAY
30388: ST_TO_ADDR
// for i = 1 to hexes do
30389: LD_ADDR_VAR 0 7
30393: PUSH
30394: DOUBLE
30395: LD_INT 1
30397: DEC
30398: ST_TO_ADDR
30399: LD_VAR 0 12
30403: PUSH
30404: FOR_TO
30405: IFFALSE 30735
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30407: LD_VAR 0 12
30411: PUSH
30412: LD_VAR 0 7
30416: ARRAY
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: PPUSH
30422: LD_VAR 0 12
30426: PUSH
30427: LD_VAR 0 7
30431: ARRAY
30432: PUSH
30433: LD_INT 2
30435: ARRAY
30436: PPUSH
30437: CALL_OW 488
30441: NOT
30442: PUSH
30443: LD_VAR 0 12
30447: PUSH
30448: LD_VAR 0 7
30452: ARRAY
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PPUSH
30458: LD_VAR 0 12
30462: PUSH
30463: LD_VAR 0 7
30467: ARRAY
30468: PUSH
30469: LD_INT 2
30471: ARRAY
30472: PPUSH
30473: CALL_OW 428
30477: PUSH
30478: LD_INT 0
30480: GREATER
30481: OR
30482: PUSH
30483: LD_VAR 0 12
30487: PUSH
30488: LD_VAR 0 7
30492: ARRAY
30493: PUSH
30494: LD_INT 1
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 12
30502: PUSH
30503: LD_VAR 0 7
30507: ARRAY
30508: PUSH
30509: LD_INT 2
30511: ARRAY
30512: PPUSH
30513: CALL_OW 351
30517: OR
30518: IFFALSE 30524
// exit ;
30520: POP
30521: POP
30522: GO 30816
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30524: LD_ADDR_VAR 0 8
30528: PUSH
30529: LD_VAR 0 12
30533: PUSH
30534: LD_VAR 0 7
30538: ARRAY
30539: PUSH
30540: LD_INT 1
30542: ARRAY
30543: PPUSH
30544: LD_VAR 0 12
30548: PUSH
30549: LD_VAR 0 7
30553: ARRAY
30554: PUSH
30555: LD_INT 2
30557: ARRAY
30558: PPUSH
30559: CALL_OW 546
30563: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30564: LD_VAR 0 8
30568: PUSH
30569: LD_INT 1
30571: ARRAY
30572: PUSH
30573: LD_VAR 0 8
30577: PUSH
30578: LD_INT 2
30580: ARRAY
30581: PUSH
30582: LD_VAR 0 13
30586: PUSH
30587: LD_INT 2
30589: PLUS
30590: GREATER
30591: OR
30592: PUSH
30593: LD_VAR 0 8
30597: PUSH
30598: LD_INT 2
30600: ARRAY
30601: PUSH
30602: LD_VAR 0 13
30606: PUSH
30607: LD_INT 2
30609: MINUS
30610: LESS
30611: OR
30612: PUSH
30613: LD_VAR 0 8
30617: PUSH
30618: LD_INT 3
30620: ARRAY
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: LD_INT 8
30627: PUSH
30628: LD_INT 9
30630: PUSH
30631: LD_INT 10
30633: PUSH
30634: LD_INT 11
30636: PUSH
30637: LD_INT 12
30639: PUSH
30640: LD_INT 13
30642: PUSH
30643: LD_INT 16
30645: PUSH
30646: LD_INT 17
30648: PUSH
30649: LD_INT 18
30651: PUSH
30652: LD_INT 19
30654: PUSH
30655: LD_INT 20
30657: PUSH
30658: LD_INT 21
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: IN
30676: NOT
30677: OR
30678: PUSH
30679: LD_VAR 0 8
30683: PUSH
30684: LD_INT 5
30686: ARRAY
30687: NOT
30688: OR
30689: PUSH
30690: LD_VAR 0 8
30694: PUSH
30695: LD_INT 6
30697: ARRAY
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 7
30707: PUSH
30708: LD_INT 9
30710: PUSH
30711: LD_INT 10
30713: PUSH
30714: LD_INT 11
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: IN
30725: NOT
30726: OR
30727: IFFALSE 30733
// exit ;
30729: POP
30730: POP
30731: GO 30816
// end ;
30733: GO 30404
30735: POP
30736: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30737: LD_VAR 0 9
30741: PPUSH
30742: LD_VAR 0 3
30746: PPUSH
30747: LD_VAR 0 4
30751: PPUSH
30752: LD_INT 20
30754: PPUSH
30755: CALL 22762 0 4
30759: PUSH
30760: LD_INT 4
30762: ARRAY
30763: IFFALSE 30767
// exit ;
30765: GO 30816
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30767: LD_VAR 0 2
30771: PUSH
30772: LD_INT 29
30774: PUSH
30775: LD_INT 30
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: IN
30782: PUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: LD_VAR 0 4
30792: PPUSH
30793: LD_VAR 0 9
30797: PPUSH
30798: CALL_OW 440
30802: NOT
30803: AND
30804: IFFALSE 30808
// exit ;
30806: GO 30816
// result := true ;
30808: LD_ADDR_VAR 0 6
30812: PUSH
30813: LD_INT 1
30815: ST_TO_ADDR
// end ;
30816: LD_VAR 0 6
30820: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30821: LD_INT 0
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// result = [ ] ;
30881: LD_ADDR_VAR 0 7
30885: PUSH
30886: EMPTY
30887: ST_TO_ADDR
// temp_list = [ ] ;
30888: LD_ADDR_VAR 0 9
30892: PUSH
30893: EMPTY
30894: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30895: LD_VAR 0 4
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 3
30911: PUSH
30912: LD_INT 4
30914: PUSH
30915: LD_INT 5
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: IN
30926: NOT
30927: PUSH
30928: LD_VAR 0 1
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: IN
30943: PUSH
30944: LD_VAR 0 5
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 3
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: IN
30963: NOT
30964: AND
30965: OR
30966: IFFALSE 30970
// exit ;
30968: GO 49361
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30970: LD_VAR 0 1
30974: PUSH
30975: LD_INT 6
30977: PUSH
30978: LD_INT 7
30980: PUSH
30981: LD_INT 8
30983: PUSH
30984: LD_INT 13
30986: PUSH
30987: LD_INT 12
30989: PUSH
30990: LD_INT 15
30992: PUSH
30993: LD_INT 11
30995: PUSH
30996: LD_INT 14
30998: PUSH
30999: LD_INT 10
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: IN
31013: IFFALSE 31023
// btype = b_lab ;
31015: LD_ADDR_VAR 0 1
31019: PUSH
31020: LD_INT 6
31022: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31023: LD_VAR 0 6
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: IN
31042: NOT
31043: PUSH
31044: LD_VAR 0 1
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 3
31060: PUSH
31061: LD_INT 6
31063: PUSH
31064: LD_INT 36
31066: PUSH
31067: LD_INT 4
31069: PUSH
31070: LD_INT 5
31072: PUSH
31073: LD_INT 31
31075: PUSH
31076: LD_INT 32
31078: PUSH
31079: LD_INT 33
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: IN
31095: NOT
31096: PUSH
31097: LD_VAR 0 6
31101: PUSH
31102: LD_INT 1
31104: EQUAL
31105: AND
31106: OR
31107: PUSH
31108: LD_VAR 0 1
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: IN
31123: NOT
31124: PUSH
31125: LD_VAR 0 6
31129: PUSH
31130: LD_INT 2
31132: EQUAL
31133: AND
31134: OR
31135: IFFALSE 31145
// mode = 0 ;
31137: LD_ADDR_VAR 0 6
31141: PUSH
31142: LD_INT 0
31144: ST_TO_ADDR
// case mode of 0 :
31145: LD_VAR 0 6
31149: PUSH
31150: LD_INT 0
31152: DOUBLE
31153: EQUAL
31154: IFTRUE 31158
31156: GO 42611
31158: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31159: LD_ADDR_VAR 0 11
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: LD_INT 3
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31352: LD_ADDR_VAR 0 12
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: LD_INT 1
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31548: LD_ADDR_VAR 0 13
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: NEG
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31747: LD_ADDR_VAR 0 14
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 1
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: LD_INT 2
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31943: LD_ADDR_VAR 0 15
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32136: LD_ADDR_VAR 0 16
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 3
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32329: LD_ADDR_VAR 0 17
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: LD_INT 2
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32559: LD_ADDR_VAR 0 18
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32789: LD_ADDR_VAR 0 19
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 1
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: NEG
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: LD_INT 2
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33019: LD_ADDR_VAR 0 20
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33249: LD_ADDR_VAR 0 21
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: LD_INT 2
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33479: LD_ADDR_VAR 0 22
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: LD_INT 2
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 2
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: NEG
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33709: LD_ADDR_VAR 0 23
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 3
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33989: LD_ADDR_VAR 0 24
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: NEG
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 3
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34265: LD_ADDR_VAR 0 25
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 3
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34539: LD_ADDR_VAR 0 26
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: LD_INT 2
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34815: LD_ADDR_VAR 0 27
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 3
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35095: LD_ADDR_VAR 0 28
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: LD_INT 2
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 2
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: LD_INT 2
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: LD_INT 1
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: LD_INT 2
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 3
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 3
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 3
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 3
35342: NEG
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35377: LD_ADDR_VAR 0 29
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 1
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: NEG
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: LD_INT 3
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 3
35621: NEG
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35656: LD_ADDR_VAR 0 30
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 2
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: LD_INT 3
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 2
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 3
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 3
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35934: LD_ADDR_VAR 0 31
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 2
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: LD_INT 3
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 3
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 3
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36212: LD_ADDR_VAR 0 32
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 3
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 3
36455: NEG
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36490: LD_ADDR_VAR 0 33
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 2
36668: NEG
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 3
36734: NEG
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36769: LD_ADDR_VAR 0 34
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 3
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37049: LD_ADDR_VAR 0 35
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37161: LD_ADDR_VAR 0 36
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37273: LD_ADDR_VAR 0 37
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37385: LD_ADDR_VAR 0 38
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37497: LD_ADDR_VAR 0 39
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37609: LD_ADDR_VAR 0 40
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37721: LD_ADDR_VAR 0 41
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 2
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 3
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 3
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 3
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: NEG
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 3
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 3
38018: NEG
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: NEG
38031: PUSH
38032: LD_INT 3
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38071: LD_ADDR_VAR 0 42
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: LD_INT 3
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 3
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 3
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 2
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 3
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 3
38380: NEG
38381: PUSH
38382: LD_INT 3
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38421: LD_ADDR_VAR 0 43
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 3
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 3
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 3
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 3
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 3
38717: NEG
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38769: LD_ADDR_VAR 0 44
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 3
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 3
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 3
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: LD_INT 3
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: NEG
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 3
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: LD_INT 3
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39119: LD_ADDR_VAR 0 45
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 2
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: LD_INT 2
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 3
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 3
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 3
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 3
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 3
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39469: LD_ADDR_VAR 0 46
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 2
39635: NEG
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 3
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 3
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39817: LD_ADDR_VAR 0 47
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 2
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39968: LD_ADDR_VAR 0 48
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40115: LD_ADDR_VAR 0 49
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40259: LD_ADDR_VAR 0 50
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40403: LD_ADDR_VAR 0 51
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40550: LD_ADDR_VAR 0 52
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40701: LD_ADDR_VAR 0 53
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40931: LD_ADDR_VAR 0 54
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 2
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41161: LD_ADDR_VAR 0 55
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 2
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41391: LD_ADDR_VAR 0 56
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41621: LD_ADDR_VAR 0 57
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41851: LD_ADDR_VAR 0 58
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42081: LD_ADDR_VAR 0 59
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42169: LD_ADDR_VAR 0 60
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42257: LD_ADDR_VAR 0 61
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42345: LD_ADDR_VAR 0 62
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42433: LD_ADDR_VAR 0 63
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42521: LD_ADDR_VAR 0 64
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// end ; 1 :
42609: GO 48506
42611: LD_INT 1
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 45242
42619: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42620: LD_ADDR_VAR 0 11
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 3
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42664: LD_ADDR_VAR 0 12
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42705: LD_ADDR_VAR 0 13
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42745: LD_ADDR_VAR 0 14
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42786: LD_ADDR_VAR 0 15
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 3
42804: NEG
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42830: LD_ADDR_VAR 0 16
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: LD_INT 3
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42876: LD_ADDR_VAR 0 17
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 3
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42920: LD_ADDR_VAR 0 18
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42961: LD_ADDR_VAR 0 19
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43001: LD_ADDR_VAR 0 20
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43042: LD_ADDR_VAR 0 21
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: NEG
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43086: LD_ADDR_VAR 0 22
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: LD_INT 3
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43132: LD_ADDR_VAR 0 23
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 3
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 4
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43176: LD_ADDR_VAR 0 24
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 4
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43217: LD_ADDR_VAR 0 25
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 4
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: PUSH
43245: LD_INT 4
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43257: LD_ADDR_VAR 0 26
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43298: LD_ADDR_VAR 0 27
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 3
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 4
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43342: LD_ADDR_VAR 0 28
43346: PUSH
43347: LD_INT 3
43349: NEG
43350: PUSH
43351: LD_INT 3
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: NEG
43362: PUSH
43363: LD_INT 4
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 4
43373: NEG
43374: PUSH
43375: LD_INT 3
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43388: LD_ADDR_VAR 0 29
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 3
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 4
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 4
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 3
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 5
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 5
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 4
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 6
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 6
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 5
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43543: LD_ADDR_VAR 0 30
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 3
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 4
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 4
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 4
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 5
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 5
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 5
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 6
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 6
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43686: LD_ADDR_VAR 0 31
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 4
43723: PUSH
43724: LD_INT 3
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: LD_INT 4
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 4
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 5
43753: PUSH
43754: LD_INT 4
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 5
43763: PUSH
43764: LD_INT 5
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 4
43773: PUSH
43774: LD_INT 5
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 6
43783: PUSH
43784: LD_INT 5
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 6
43793: PUSH
43794: LD_INT 6
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: LD_INT 6
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43825: LD_ADDR_VAR 0 32
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 4
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 4
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 3
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 5
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 5
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 4
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 6
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 6
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 5
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43968: LD_ADDR_VAR 0 33
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 3
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 4
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 4
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 4
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 5
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 5
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 5
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 6
44088: NEG
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 6
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44123: LD_ADDR_VAR 0 34
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 3
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: LD_INT 3
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 3
44166: NEG
44167: PUSH
44168: LD_INT 4
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 4
44178: NEG
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 4
44190: NEG
44191: PUSH
44192: LD_INT 4
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 4
44202: NEG
44203: PUSH
44204: LD_INT 5
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 5
44214: NEG
44215: PUSH
44216: LD_INT 4
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 5
44226: NEG
44227: PUSH
44228: LD_INT 5
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 5
44238: NEG
44239: PUSH
44240: LD_INT 6
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 6
44250: NEG
44251: PUSH
44252: LD_INT 5
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 6
44262: NEG
44263: PUSH
44264: LD_INT 6
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44286: LD_ADDR_VAR 0 41
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44330: LD_ADDR_VAR 0 42
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44371: LD_ADDR_VAR 0 43
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44411: LD_ADDR_VAR 0 44
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44452: LD_ADDR_VAR 0 45
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44496: LD_ADDR_VAR 0 46
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 3
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44542: LD_ADDR_VAR 0 47
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 3
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44575: LD_ADDR_VAR 0 48
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44606: LD_ADDR_VAR 0 49
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44635: LD_ADDR_VAR 0 50
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 3
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44664: LD_ADDR_VAR 0 51
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44695: LD_ADDR_VAR 0 52
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44728: LD_ADDR_VAR 0 53
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44772: LD_ADDR_VAR 0 54
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 3
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44813: LD_ADDR_VAR 0 55
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 3
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44853: LD_ADDR_VAR 0 56
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44894: LD_ADDR_VAR 0 57
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 3
44912: NEG
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 3
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44938: LD_ADDR_VAR 0 58
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 3
44969: NEG
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44984: LD_ADDR_VAR 0 59
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45028: LD_ADDR_VAR 0 60
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45069: LD_ADDR_VAR 0 61
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45109: LD_ADDR_VAR 0 62
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45150: LD_ADDR_VAR 0 63
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45194: LD_ADDR_VAR 0 64
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// end ; 2 :
45240: GO 48506
45242: LD_INT 2
45244: DOUBLE
45245: EQUAL
45246: IFTRUE 45250
45248: GO 48505
45250: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45251: LD_ADDR_VAR 0 29
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 4
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 5
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 4
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 5
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 4
45381: PUSH
45382: LD_INT 4
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: LD_INT 4
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 4
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: LD_INT 4
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 4
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 4
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 5
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 4
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 4
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 4
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 4
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 4
45636: NEG
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 4
45648: NEG
45649: PUSH
45650: LD_INT 5
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: LD_INT 3
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 4
45684: NEG
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 5
45696: NEG
45697: PUSH
45698: LD_INT 4
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 5
45708: NEG
45709: PUSH
45710: LD_INT 5
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: LD_INT 5
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 5
45732: NEG
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45789: LD_ADDR_VAR 0 30
45793: PUSH
45794: LD_INT 4
45796: PUSH
45797: LD_INT 4
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 4
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 5
45816: PUSH
45817: LD_INT 4
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 5
45826: PUSH
45827: LD_INT 5
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 4
45836: PUSH
45837: LD_INT 5
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 5
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 5
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 4
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 4
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 4
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 4
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 3
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 4
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 5
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 5
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 5
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: NEG
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: NEG
46094: PUSH
46095: LD_INT 4
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: LD_INT 3
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 4
46153: NEG
46154: PUSH
46155: LD_INT 4
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 4
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 4
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 4
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 5
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 4
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 3
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 3
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 4
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 5
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 3
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 5
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46336: LD_ADDR_VAR 0 31
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 4
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 4
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 5
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: LD_INT 5
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 3
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 4
46492: NEG
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 4
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 4
46515: NEG
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 4
46538: NEG
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 4
46550: NEG
46551: PUSH
46552: LD_INT 5
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: LD_INT 4
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: LD_INT 3
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 4
46586: NEG
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 5
46598: NEG
46599: PUSH
46600: LD_INT 4
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 5
46610: NEG
46611: PUSH
46612: LD_INT 5
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 5
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 5
46634: NEG
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 4
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 4
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 4
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 4
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 4
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 5
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 5
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 4
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 5
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46886: LD_ADDR_VAR 0 32
46890: PUSH
46891: LD_INT 4
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 4
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 4
46938: NEG
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 5
46949: NEG
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 5
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 5
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: NEG
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: NEG
47008: PUSH
47009: LD_INT 4
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 3
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 4
47055: NEG
47056: PUSH
47057: LD_INT 3
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 4
47067: NEG
47068: PUSH
47069: LD_INT 4
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 4
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 4
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 4
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 5
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 4
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 4
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 5
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: LD_INT 5
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 4
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 4
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 4
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 4
47298: PUSH
47299: LD_INT 4
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 4
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: LD_INT 4
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 5
47328: PUSH
47329: LD_INT 5
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 4
47338: PUSH
47339: LD_INT 5
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 4
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: LD_INT 3
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 5
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47433: LD_ADDR_VAR 0 33
47437: PUSH
47438: LD_INT 4
47440: NEG
47441: PUSH
47442: LD_INT 4
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 4
47452: NEG
47453: PUSH
47454: LD_INT 5
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: LD_INT 4
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 4
47488: NEG
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 5
47500: NEG
47501: PUSH
47502: LD_INT 4
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 5
47512: NEG
47513: PUSH
47514: LD_INT 5
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 3
47524: NEG
47525: PUSH
47526: LD_INT 5
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 5
47536: NEG
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 4
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 4
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 4
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 4
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 4
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 5
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 5
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 4
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 5
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 4
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 4
47773: PUSH
47774: LD_INT 4
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 4
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 4
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 4
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 4
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 4
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 5
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 5
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47971: LD_ADDR_VAR 0 34
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 4
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 5
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 4
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 3
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 4
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 5
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: LD_INT 5
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 4
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 4
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 4
48173: PUSH
48174: LD_INT 4
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 4
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 5
48193: PUSH
48194: LD_INT 4
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 5
48203: PUSH
48204: LD_INT 5
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 4
48213: PUSH
48214: LD_INT 5
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 4
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 5
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: LD_INT 5
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 4
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 4
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 4
48356: NEG
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 4
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 5
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 5
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 5
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 3
48447: NEG
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// end ; end ;
48503: GO 48506
48505: POP
// case btype of b_depot , b_warehouse :
48506: LD_VAR 0 1
48510: PUSH
48511: LD_INT 0
48513: DOUBLE
48514: EQUAL
48515: IFTRUE 48525
48517: LD_INT 1
48519: DOUBLE
48520: EQUAL
48521: IFTRUE 48525
48523: GO 48726
48525: POP
// case nation of nation_american :
48526: LD_VAR 0 5
48530: PUSH
48531: LD_INT 1
48533: DOUBLE
48534: EQUAL
48535: IFTRUE 48539
48537: GO 48595
48539: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48540: LD_ADDR_VAR 0 9
48544: PUSH
48545: LD_VAR 0 11
48549: PUSH
48550: LD_VAR 0 12
48554: PUSH
48555: LD_VAR 0 13
48559: PUSH
48560: LD_VAR 0 14
48564: PUSH
48565: LD_VAR 0 15
48569: PUSH
48570: LD_VAR 0 16
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: PUSH
48583: LD_VAR 0 4
48587: PUSH
48588: LD_INT 1
48590: PLUS
48591: ARRAY
48592: ST_TO_ADDR
48593: GO 48724
48595: LD_INT 2
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48603
48601: GO 48659
48603: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48604: LD_ADDR_VAR 0 9
48608: PUSH
48609: LD_VAR 0 17
48613: PUSH
48614: LD_VAR 0 18
48618: PUSH
48619: LD_VAR 0 19
48623: PUSH
48624: LD_VAR 0 20
48628: PUSH
48629: LD_VAR 0 21
48633: PUSH
48634: LD_VAR 0 22
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: PUSH
48647: LD_VAR 0 4
48651: PUSH
48652: LD_INT 1
48654: PLUS
48655: ARRAY
48656: ST_TO_ADDR
48657: GO 48724
48659: LD_INT 3
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48667
48665: GO 48723
48667: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48668: LD_ADDR_VAR 0 9
48672: PUSH
48673: LD_VAR 0 23
48677: PUSH
48678: LD_VAR 0 24
48682: PUSH
48683: LD_VAR 0 25
48687: PUSH
48688: LD_VAR 0 26
48692: PUSH
48693: LD_VAR 0 27
48697: PUSH
48698: LD_VAR 0 28
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: PUSH
48711: LD_VAR 0 4
48715: PUSH
48716: LD_INT 1
48718: PLUS
48719: ARRAY
48720: ST_TO_ADDR
48721: GO 48724
48723: POP
48724: GO 49279
48726: LD_INT 2
48728: DOUBLE
48729: EQUAL
48730: IFTRUE 48740
48732: LD_INT 3
48734: DOUBLE
48735: EQUAL
48736: IFTRUE 48740
48738: GO 48796
48740: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48741: LD_ADDR_VAR 0 9
48745: PUSH
48746: LD_VAR 0 29
48750: PUSH
48751: LD_VAR 0 30
48755: PUSH
48756: LD_VAR 0 31
48760: PUSH
48761: LD_VAR 0 32
48765: PUSH
48766: LD_VAR 0 33
48770: PUSH
48771: LD_VAR 0 34
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: PUSH
48784: LD_VAR 0 4
48788: PUSH
48789: LD_INT 1
48791: PLUS
48792: ARRAY
48793: ST_TO_ADDR
48794: GO 49279
48796: LD_INT 16
48798: DOUBLE
48799: EQUAL
48800: IFTRUE 48858
48802: LD_INT 17
48804: DOUBLE
48805: EQUAL
48806: IFTRUE 48858
48808: LD_INT 18
48810: DOUBLE
48811: EQUAL
48812: IFTRUE 48858
48814: LD_INT 19
48816: DOUBLE
48817: EQUAL
48818: IFTRUE 48858
48820: LD_INT 22
48822: DOUBLE
48823: EQUAL
48824: IFTRUE 48858
48826: LD_INT 20
48828: DOUBLE
48829: EQUAL
48830: IFTRUE 48858
48832: LD_INT 21
48834: DOUBLE
48835: EQUAL
48836: IFTRUE 48858
48838: LD_INT 23
48840: DOUBLE
48841: EQUAL
48842: IFTRUE 48858
48844: LD_INT 24
48846: DOUBLE
48847: EQUAL
48848: IFTRUE 48858
48850: LD_INT 25
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48858
48856: GO 48914
48858: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48859: LD_ADDR_VAR 0 9
48863: PUSH
48864: LD_VAR 0 35
48868: PUSH
48869: LD_VAR 0 36
48873: PUSH
48874: LD_VAR 0 37
48878: PUSH
48879: LD_VAR 0 38
48883: PUSH
48884: LD_VAR 0 39
48888: PUSH
48889: LD_VAR 0 40
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: PUSH
48902: LD_VAR 0 4
48906: PUSH
48907: LD_INT 1
48909: PLUS
48910: ARRAY
48911: ST_TO_ADDR
48912: GO 49279
48914: LD_INT 6
48916: DOUBLE
48917: EQUAL
48918: IFTRUE 48970
48920: LD_INT 7
48922: DOUBLE
48923: EQUAL
48924: IFTRUE 48970
48926: LD_INT 8
48928: DOUBLE
48929: EQUAL
48930: IFTRUE 48970
48932: LD_INT 13
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48970
48938: LD_INT 12
48940: DOUBLE
48941: EQUAL
48942: IFTRUE 48970
48944: LD_INT 15
48946: DOUBLE
48947: EQUAL
48948: IFTRUE 48970
48950: LD_INT 11
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48970
48956: LD_INT 14
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48970
48962: LD_INT 10
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 48970
48968: GO 49026
48970: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48971: LD_ADDR_VAR 0 9
48975: PUSH
48976: LD_VAR 0 41
48980: PUSH
48981: LD_VAR 0 42
48985: PUSH
48986: LD_VAR 0 43
48990: PUSH
48991: LD_VAR 0 44
48995: PUSH
48996: LD_VAR 0 45
49000: PUSH
49001: LD_VAR 0 46
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: PUSH
49014: LD_VAR 0 4
49018: PUSH
49019: LD_INT 1
49021: PLUS
49022: ARRAY
49023: ST_TO_ADDR
49024: GO 49279
49026: LD_INT 36
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49034
49032: GO 49090
49034: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49035: LD_ADDR_VAR 0 9
49039: PUSH
49040: LD_VAR 0 47
49044: PUSH
49045: LD_VAR 0 48
49049: PUSH
49050: LD_VAR 0 49
49054: PUSH
49055: LD_VAR 0 50
49059: PUSH
49060: LD_VAR 0 51
49064: PUSH
49065: LD_VAR 0 52
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: PUSH
49078: LD_VAR 0 4
49082: PUSH
49083: LD_INT 1
49085: PLUS
49086: ARRAY
49087: ST_TO_ADDR
49088: GO 49279
49090: LD_INT 4
49092: DOUBLE
49093: EQUAL
49094: IFTRUE 49116
49096: LD_INT 5
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49116
49102: LD_INT 34
49104: DOUBLE
49105: EQUAL
49106: IFTRUE 49116
49108: LD_INT 37
49110: DOUBLE
49111: EQUAL
49112: IFTRUE 49116
49114: GO 49172
49116: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49117: LD_ADDR_VAR 0 9
49121: PUSH
49122: LD_VAR 0 53
49126: PUSH
49127: LD_VAR 0 54
49131: PUSH
49132: LD_VAR 0 55
49136: PUSH
49137: LD_VAR 0 56
49141: PUSH
49142: LD_VAR 0 57
49146: PUSH
49147: LD_VAR 0 58
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: PUSH
49160: LD_VAR 0 4
49164: PUSH
49165: LD_INT 1
49167: PLUS
49168: ARRAY
49169: ST_TO_ADDR
49170: GO 49279
49172: LD_INT 31
49174: DOUBLE
49175: EQUAL
49176: IFTRUE 49222
49178: LD_INT 32
49180: DOUBLE
49181: EQUAL
49182: IFTRUE 49222
49184: LD_INT 33
49186: DOUBLE
49187: EQUAL
49188: IFTRUE 49222
49190: LD_INT 27
49192: DOUBLE
49193: EQUAL
49194: IFTRUE 49222
49196: LD_INT 26
49198: DOUBLE
49199: EQUAL
49200: IFTRUE 49222
49202: LD_INT 28
49204: DOUBLE
49205: EQUAL
49206: IFTRUE 49222
49208: LD_INT 29
49210: DOUBLE
49211: EQUAL
49212: IFTRUE 49222
49214: LD_INT 30
49216: DOUBLE
49217: EQUAL
49218: IFTRUE 49222
49220: GO 49278
49222: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49223: LD_ADDR_VAR 0 9
49227: PUSH
49228: LD_VAR 0 59
49232: PUSH
49233: LD_VAR 0 60
49237: PUSH
49238: LD_VAR 0 61
49242: PUSH
49243: LD_VAR 0 62
49247: PUSH
49248: LD_VAR 0 63
49252: PUSH
49253: LD_VAR 0 64
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: PUSH
49266: LD_VAR 0 4
49270: PUSH
49271: LD_INT 1
49273: PLUS
49274: ARRAY
49275: ST_TO_ADDR
49276: GO 49279
49278: POP
// temp_list2 = [ ] ;
49279: LD_ADDR_VAR 0 10
49283: PUSH
49284: EMPTY
49285: ST_TO_ADDR
// for i in temp_list do
49286: LD_ADDR_VAR 0 8
49290: PUSH
49291: LD_VAR 0 9
49295: PUSH
49296: FOR_IN
49297: IFFALSE 49349
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49299: LD_ADDR_VAR 0 10
49303: PUSH
49304: LD_VAR 0 10
49308: PUSH
49309: LD_VAR 0 8
49313: PUSH
49314: LD_INT 1
49316: ARRAY
49317: PUSH
49318: LD_VAR 0 2
49322: PLUS
49323: PUSH
49324: LD_VAR 0 8
49328: PUSH
49329: LD_INT 2
49331: ARRAY
49332: PUSH
49333: LD_VAR 0 3
49337: PLUS
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: ADD
49346: ST_TO_ADDR
49347: GO 49296
49349: POP
49350: POP
// result = temp_list2 ;
49351: LD_ADDR_VAR 0 7
49355: PUSH
49356: LD_VAR 0 10
49360: ST_TO_ADDR
// end ;
49361: LD_VAR 0 7
49365: RET
// export function EnemyInRange ( unit , dist ) ; begin
49366: LD_INT 0
49368: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49369: LD_ADDR_VAR 0 3
49373: PUSH
49374: LD_VAR 0 1
49378: PPUSH
49379: CALL_OW 255
49383: PPUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 250
49393: PPUSH
49394: LD_VAR 0 1
49398: PPUSH
49399: CALL_OW 251
49403: PPUSH
49404: LD_VAR 0 2
49408: PPUSH
49409: CALL 22762 0 4
49413: PUSH
49414: LD_INT 4
49416: ARRAY
49417: ST_TO_ADDR
// end ;
49418: LD_VAR 0 3
49422: RET
// export function PlayerSeeMe ( unit ) ; begin
49423: LD_INT 0
49425: PPUSH
// result := See ( your_side , unit ) ;
49426: LD_ADDR_VAR 0 2
49430: PUSH
49431: LD_OWVAR 2
49435: PPUSH
49436: LD_VAR 0 1
49440: PPUSH
49441: CALL_OW 292
49445: ST_TO_ADDR
// end ;
49446: LD_VAR 0 2
49450: RET
// export function ReverseDir ( unit ) ; begin
49451: LD_INT 0
49453: PPUSH
// if not unit then
49454: LD_VAR 0 1
49458: NOT
49459: IFFALSE 49463
// exit ;
49461: GO 49486
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49463: LD_ADDR_VAR 0 2
49467: PUSH
49468: LD_VAR 0 1
49472: PPUSH
49473: CALL_OW 254
49477: PUSH
49478: LD_INT 3
49480: PLUS
49481: PUSH
49482: LD_INT 6
49484: MOD
49485: ST_TO_ADDR
// end ;
49486: LD_VAR 0 2
49490: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49491: LD_INT 0
49493: PPUSH
49494: PPUSH
49495: PPUSH
49496: PPUSH
49497: PPUSH
// if not hexes then
49498: LD_VAR 0 2
49502: NOT
49503: IFFALSE 49507
// exit ;
49505: GO 49655
// dist := 9999 ;
49507: LD_ADDR_VAR 0 5
49511: PUSH
49512: LD_INT 9999
49514: ST_TO_ADDR
// for i = 1 to hexes do
49515: LD_ADDR_VAR 0 4
49519: PUSH
49520: DOUBLE
49521: LD_INT 1
49523: DEC
49524: ST_TO_ADDR
49525: LD_VAR 0 2
49529: PUSH
49530: FOR_TO
49531: IFFALSE 49643
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49533: LD_VAR 0 1
49537: PPUSH
49538: LD_VAR 0 2
49542: PUSH
49543: LD_VAR 0 4
49547: ARRAY
49548: PUSH
49549: LD_INT 1
49551: ARRAY
49552: PPUSH
49553: LD_VAR 0 2
49557: PUSH
49558: LD_VAR 0 4
49562: ARRAY
49563: PUSH
49564: LD_INT 2
49566: ARRAY
49567: PPUSH
49568: CALL_OW 297
49572: PUSH
49573: LD_VAR 0 5
49577: LESS
49578: IFFALSE 49641
// begin hex := hexes [ i ] ;
49580: LD_ADDR_VAR 0 7
49584: PUSH
49585: LD_VAR 0 2
49589: PUSH
49590: LD_VAR 0 4
49594: ARRAY
49595: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49596: LD_ADDR_VAR 0 5
49600: PUSH
49601: LD_VAR 0 1
49605: PPUSH
49606: LD_VAR 0 2
49610: PUSH
49611: LD_VAR 0 4
49615: ARRAY
49616: PUSH
49617: LD_INT 1
49619: ARRAY
49620: PPUSH
49621: LD_VAR 0 2
49625: PUSH
49626: LD_VAR 0 4
49630: ARRAY
49631: PUSH
49632: LD_INT 2
49634: ARRAY
49635: PPUSH
49636: CALL_OW 297
49640: ST_TO_ADDR
// end ; end ;
49641: GO 49530
49643: POP
49644: POP
// result := hex ;
49645: LD_ADDR_VAR 0 3
49649: PUSH
49650: LD_VAR 0 7
49654: ST_TO_ADDR
// end ;
49655: LD_VAR 0 3
49659: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49660: LD_INT 0
49662: PPUSH
49663: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49664: LD_VAR 0 1
49668: NOT
49669: PUSH
49670: LD_VAR 0 1
49674: PUSH
49675: LD_INT 21
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 23
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PPUSH
49699: CALL_OW 69
49703: IN
49704: NOT
49705: OR
49706: IFFALSE 49710
// exit ;
49708: GO 49757
// for i = 1 to 3 do
49710: LD_ADDR_VAR 0 3
49714: PUSH
49715: DOUBLE
49716: LD_INT 1
49718: DEC
49719: ST_TO_ADDR
49720: LD_INT 3
49722: PUSH
49723: FOR_TO
49724: IFFALSE 49755
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 250
49735: PPUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: CALL_OW 251
49745: PPUSH
49746: LD_INT 1
49748: PPUSH
49749: CALL_OW 453
49753: GO 49723
49755: POP
49756: POP
// end ;
49757: LD_VAR 0 2
49761: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49762: LD_INT 0
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49770: LD_VAR 0 1
49774: NOT
49775: PUSH
49776: LD_VAR 0 2
49780: NOT
49781: OR
49782: PUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: CALL_OW 314
49792: OR
49793: IFFALSE 49797
// exit ;
49795: GO 50238
// x := GetX ( enemy_unit ) ;
49797: LD_ADDR_VAR 0 7
49801: PUSH
49802: LD_VAR 0 2
49806: PPUSH
49807: CALL_OW 250
49811: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49812: LD_ADDR_VAR 0 8
49816: PUSH
49817: LD_VAR 0 2
49821: PPUSH
49822: CALL_OW 251
49826: ST_TO_ADDR
// if not x or not y then
49827: LD_VAR 0 7
49831: NOT
49832: PUSH
49833: LD_VAR 0 8
49837: NOT
49838: OR
49839: IFFALSE 49843
// exit ;
49841: GO 50238
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49843: LD_ADDR_VAR 0 6
49847: PUSH
49848: LD_VAR 0 7
49852: PPUSH
49853: LD_INT 0
49855: PPUSH
49856: LD_INT 4
49858: PPUSH
49859: CALL_OW 272
49863: PUSH
49864: LD_VAR 0 8
49868: PPUSH
49869: LD_INT 0
49871: PPUSH
49872: LD_INT 4
49874: PPUSH
49875: CALL_OW 273
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_VAR 0 7
49888: PPUSH
49889: LD_INT 1
49891: PPUSH
49892: LD_INT 4
49894: PPUSH
49895: CALL_OW 272
49899: PUSH
49900: LD_VAR 0 8
49904: PPUSH
49905: LD_INT 1
49907: PPUSH
49908: LD_INT 4
49910: PPUSH
49911: CALL_OW 273
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_VAR 0 7
49924: PPUSH
49925: LD_INT 2
49927: PPUSH
49928: LD_INT 4
49930: PPUSH
49931: CALL_OW 272
49935: PUSH
49936: LD_VAR 0 8
49940: PPUSH
49941: LD_INT 2
49943: PPUSH
49944: LD_INT 4
49946: PPUSH
49947: CALL_OW 273
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_VAR 0 7
49960: PPUSH
49961: LD_INT 3
49963: PPUSH
49964: LD_INT 4
49966: PPUSH
49967: CALL_OW 272
49971: PUSH
49972: LD_VAR 0 8
49976: PPUSH
49977: LD_INT 3
49979: PPUSH
49980: LD_INT 4
49982: PPUSH
49983: CALL_OW 273
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_VAR 0 7
49996: PPUSH
49997: LD_INT 4
49999: PPUSH
50000: LD_INT 4
50002: PPUSH
50003: CALL_OW 272
50007: PUSH
50008: LD_VAR 0 8
50012: PPUSH
50013: LD_INT 4
50015: PPUSH
50016: LD_INT 4
50018: PPUSH
50019: CALL_OW 273
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_VAR 0 7
50032: PPUSH
50033: LD_INT 5
50035: PPUSH
50036: LD_INT 4
50038: PPUSH
50039: CALL_OW 272
50043: PUSH
50044: LD_VAR 0 8
50048: PPUSH
50049: LD_INT 5
50051: PPUSH
50052: LD_INT 4
50054: PPUSH
50055: CALL_OW 273
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// for i = tmp downto 1 do
50072: LD_ADDR_VAR 0 4
50076: PUSH
50077: DOUBLE
50078: LD_VAR 0 6
50082: INC
50083: ST_TO_ADDR
50084: LD_INT 1
50086: PUSH
50087: FOR_DOWNTO
50088: IFFALSE 50189
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50090: LD_VAR 0 6
50094: PUSH
50095: LD_VAR 0 4
50099: ARRAY
50100: PUSH
50101: LD_INT 1
50103: ARRAY
50104: PPUSH
50105: LD_VAR 0 6
50109: PUSH
50110: LD_VAR 0 4
50114: ARRAY
50115: PUSH
50116: LD_INT 2
50118: ARRAY
50119: PPUSH
50120: CALL_OW 488
50124: NOT
50125: PUSH
50126: LD_VAR 0 6
50130: PUSH
50131: LD_VAR 0 4
50135: ARRAY
50136: PUSH
50137: LD_INT 1
50139: ARRAY
50140: PPUSH
50141: LD_VAR 0 6
50145: PUSH
50146: LD_VAR 0 4
50150: ARRAY
50151: PUSH
50152: LD_INT 2
50154: ARRAY
50155: PPUSH
50156: CALL_OW 428
50160: PUSH
50161: LD_INT 0
50163: NONEQUAL
50164: OR
50165: IFFALSE 50187
// tmp := Delete ( tmp , i ) ;
50167: LD_ADDR_VAR 0 6
50171: PUSH
50172: LD_VAR 0 6
50176: PPUSH
50177: LD_VAR 0 4
50181: PPUSH
50182: CALL_OW 3
50186: ST_TO_ADDR
50187: GO 50087
50189: POP
50190: POP
// j := GetClosestHex ( unit , tmp ) ;
50191: LD_ADDR_VAR 0 5
50195: PUSH
50196: LD_VAR 0 1
50200: PPUSH
50201: LD_VAR 0 6
50205: PPUSH
50206: CALL 49491 0 2
50210: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50211: LD_VAR 0 1
50215: PPUSH
50216: LD_VAR 0 5
50220: PUSH
50221: LD_INT 1
50223: ARRAY
50224: PPUSH
50225: LD_VAR 0 5
50229: PUSH
50230: LD_INT 2
50232: ARRAY
50233: PPUSH
50234: CALL_OW 111
// end ;
50238: LD_VAR 0 3
50242: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50243: LD_INT 0
50245: PPUSH
50246: PPUSH
50247: PPUSH
// uc_side = 0 ;
50248: LD_ADDR_OWVAR 20
50252: PUSH
50253: LD_INT 0
50255: ST_TO_ADDR
// uc_nation = 0 ;
50256: LD_ADDR_OWVAR 21
50260: PUSH
50261: LD_INT 0
50263: ST_TO_ADDR
// InitHc_All ( ) ;
50264: CALL_OW 584
// InitVc ;
50268: CALL_OW 20
// if mastodonts then
50272: LD_VAR 0 6
50276: IFFALSE 50343
// for i = 1 to mastodonts do
50278: LD_ADDR_VAR 0 11
50282: PUSH
50283: DOUBLE
50284: LD_INT 1
50286: DEC
50287: ST_TO_ADDR
50288: LD_VAR 0 6
50292: PUSH
50293: FOR_TO
50294: IFFALSE 50341
// begin vc_chassis := 31 ;
50296: LD_ADDR_OWVAR 37
50300: PUSH
50301: LD_INT 31
50303: ST_TO_ADDR
// vc_control := control_rider ;
50304: LD_ADDR_OWVAR 38
50308: PUSH
50309: LD_INT 4
50311: ST_TO_ADDR
// animal := CreateVehicle ;
50312: LD_ADDR_VAR 0 12
50316: PUSH
50317: CALL_OW 45
50321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50322: LD_VAR 0 12
50326: PPUSH
50327: LD_VAR 0 8
50331: PPUSH
50332: LD_INT 0
50334: PPUSH
50335: CALL 52478 0 3
// end ;
50339: GO 50293
50341: POP
50342: POP
// if horses then
50343: LD_VAR 0 5
50347: IFFALSE 50414
// for i = 1 to horses do
50349: LD_ADDR_VAR 0 11
50353: PUSH
50354: DOUBLE
50355: LD_INT 1
50357: DEC
50358: ST_TO_ADDR
50359: LD_VAR 0 5
50363: PUSH
50364: FOR_TO
50365: IFFALSE 50412
// begin hc_class := 21 ;
50367: LD_ADDR_OWVAR 28
50371: PUSH
50372: LD_INT 21
50374: ST_TO_ADDR
// hc_gallery :=  ;
50375: LD_ADDR_OWVAR 33
50379: PUSH
50380: LD_STRING 
50382: ST_TO_ADDR
// animal := CreateHuman ;
50383: LD_ADDR_VAR 0 12
50387: PUSH
50388: CALL_OW 44
50392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50393: LD_VAR 0 12
50397: PPUSH
50398: LD_VAR 0 8
50402: PPUSH
50403: LD_INT 0
50405: PPUSH
50406: CALL 52478 0 3
// end ;
50410: GO 50364
50412: POP
50413: POP
// if birds then
50414: LD_VAR 0 1
50418: IFFALSE 50485
// for i = 1 to birds do
50420: LD_ADDR_VAR 0 11
50424: PUSH
50425: DOUBLE
50426: LD_INT 1
50428: DEC
50429: ST_TO_ADDR
50430: LD_VAR 0 1
50434: PUSH
50435: FOR_TO
50436: IFFALSE 50483
// begin hc_class = 18 ;
50438: LD_ADDR_OWVAR 28
50442: PUSH
50443: LD_INT 18
50445: ST_TO_ADDR
// hc_gallery =  ;
50446: LD_ADDR_OWVAR 33
50450: PUSH
50451: LD_STRING 
50453: ST_TO_ADDR
// animal := CreateHuman ;
50454: LD_ADDR_VAR 0 12
50458: PUSH
50459: CALL_OW 44
50463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50464: LD_VAR 0 12
50468: PPUSH
50469: LD_VAR 0 8
50473: PPUSH
50474: LD_INT 0
50476: PPUSH
50477: CALL 52478 0 3
// end ;
50481: GO 50435
50483: POP
50484: POP
// if tigers then
50485: LD_VAR 0 2
50489: IFFALSE 50573
// for i = 1 to tigers do
50491: LD_ADDR_VAR 0 11
50495: PUSH
50496: DOUBLE
50497: LD_INT 1
50499: DEC
50500: ST_TO_ADDR
50501: LD_VAR 0 2
50505: PUSH
50506: FOR_TO
50507: IFFALSE 50571
// begin hc_class = class_tiger ;
50509: LD_ADDR_OWVAR 28
50513: PUSH
50514: LD_INT 14
50516: ST_TO_ADDR
// hc_gallery =  ;
50517: LD_ADDR_OWVAR 33
50521: PUSH
50522: LD_STRING 
50524: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50525: LD_ADDR_OWVAR 35
50529: PUSH
50530: LD_INT 7
50532: NEG
50533: PPUSH
50534: LD_INT 7
50536: PPUSH
50537: CALL_OW 12
50541: ST_TO_ADDR
// animal := CreateHuman ;
50542: LD_ADDR_VAR 0 12
50546: PUSH
50547: CALL_OW 44
50551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50552: LD_VAR 0 12
50556: PPUSH
50557: LD_VAR 0 8
50561: PPUSH
50562: LD_INT 0
50564: PPUSH
50565: CALL 52478 0 3
// end ;
50569: GO 50506
50571: POP
50572: POP
// if apemans then
50573: LD_VAR 0 3
50577: IFFALSE 50700
// for i = 1 to apemans do
50579: LD_ADDR_VAR 0 11
50583: PUSH
50584: DOUBLE
50585: LD_INT 1
50587: DEC
50588: ST_TO_ADDR
50589: LD_VAR 0 3
50593: PUSH
50594: FOR_TO
50595: IFFALSE 50698
// begin hc_class = class_apeman ;
50597: LD_ADDR_OWVAR 28
50601: PUSH
50602: LD_INT 12
50604: ST_TO_ADDR
// hc_gallery =  ;
50605: LD_ADDR_OWVAR 33
50609: PUSH
50610: LD_STRING 
50612: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50613: LD_ADDR_OWVAR 35
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PPUSH
50622: LD_INT 2
50624: PPUSH
50625: CALL_OW 12
50629: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50630: LD_ADDR_OWVAR 31
50634: PUSH
50635: LD_INT 1
50637: PPUSH
50638: LD_INT 3
50640: PPUSH
50641: CALL_OW 12
50645: PUSH
50646: LD_INT 1
50648: PPUSH
50649: LD_INT 3
50651: PPUSH
50652: CALL_OW 12
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// animal := CreateHuman ;
50669: LD_ADDR_VAR 0 12
50673: PUSH
50674: CALL_OW 44
50678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50679: LD_VAR 0 12
50683: PPUSH
50684: LD_VAR 0 8
50688: PPUSH
50689: LD_INT 0
50691: PPUSH
50692: CALL 52478 0 3
// end ;
50696: GO 50594
50698: POP
50699: POP
// if enchidnas then
50700: LD_VAR 0 4
50704: IFFALSE 50771
// for i = 1 to enchidnas do
50706: LD_ADDR_VAR 0 11
50710: PUSH
50711: DOUBLE
50712: LD_INT 1
50714: DEC
50715: ST_TO_ADDR
50716: LD_VAR 0 4
50720: PUSH
50721: FOR_TO
50722: IFFALSE 50769
// begin hc_class = 13 ;
50724: LD_ADDR_OWVAR 28
50728: PUSH
50729: LD_INT 13
50731: ST_TO_ADDR
// hc_gallery =  ;
50732: LD_ADDR_OWVAR 33
50736: PUSH
50737: LD_STRING 
50739: ST_TO_ADDR
// animal := CreateHuman ;
50740: LD_ADDR_VAR 0 12
50744: PUSH
50745: CALL_OW 44
50749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50750: LD_VAR 0 12
50754: PPUSH
50755: LD_VAR 0 8
50759: PPUSH
50760: LD_INT 0
50762: PPUSH
50763: CALL 52478 0 3
// end ;
50767: GO 50721
50769: POP
50770: POP
// if fishes then
50771: LD_VAR 0 7
50775: IFFALSE 50842
// for i = 1 to fishes do
50777: LD_ADDR_VAR 0 11
50781: PUSH
50782: DOUBLE
50783: LD_INT 1
50785: DEC
50786: ST_TO_ADDR
50787: LD_VAR 0 7
50791: PUSH
50792: FOR_TO
50793: IFFALSE 50840
// begin hc_class = 20 ;
50795: LD_ADDR_OWVAR 28
50799: PUSH
50800: LD_INT 20
50802: ST_TO_ADDR
// hc_gallery =  ;
50803: LD_ADDR_OWVAR 33
50807: PUSH
50808: LD_STRING 
50810: ST_TO_ADDR
// animal := CreateHuman ;
50811: LD_ADDR_VAR 0 12
50815: PUSH
50816: CALL_OW 44
50820: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50821: LD_VAR 0 12
50825: PPUSH
50826: LD_VAR 0 9
50830: PPUSH
50831: LD_INT 0
50833: PPUSH
50834: CALL 52478 0 3
// end ;
50838: GO 50792
50840: POP
50841: POP
// end ;
50842: LD_VAR 0 10
50846: RET
// export function WantHeal ( sci , unit ) ; begin
50847: LD_INT 0
50849: PPUSH
// if GetTaskList ( sci ) > 0 then
50850: LD_VAR 0 1
50854: PPUSH
50855: CALL_OW 437
50859: PUSH
50860: LD_INT 0
50862: GREATER
50863: IFFALSE 50933
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50865: LD_VAR 0 1
50869: PPUSH
50870: CALL_OW 437
50874: PUSH
50875: LD_INT 1
50877: ARRAY
50878: PUSH
50879: LD_INT 1
50881: ARRAY
50882: PUSH
50883: LD_STRING l
50885: EQUAL
50886: PUSH
50887: LD_VAR 0 1
50891: PPUSH
50892: CALL_OW 437
50896: PUSH
50897: LD_INT 1
50899: ARRAY
50900: PUSH
50901: LD_INT 4
50903: ARRAY
50904: PUSH
50905: LD_VAR 0 2
50909: EQUAL
50910: AND
50911: IFFALSE 50923
// result := true else
50913: LD_ADDR_VAR 0 3
50917: PUSH
50918: LD_INT 1
50920: ST_TO_ADDR
50921: GO 50931
// result := false ;
50923: LD_ADDR_VAR 0 3
50927: PUSH
50928: LD_INT 0
50930: ST_TO_ADDR
// end else
50931: GO 50941
// result := false ;
50933: LD_ADDR_VAR 0 3
50937: PUSH
50938: LD_INT 0
50940: ST_TO_ADDR
// end ;
50941: LD_VAR 0 3
50945: RET
// export function HealTarget ( sci ) ; begin
50946: LD_INT 0
50948: PPUSH
// if not sci then
50949: LD_VAR 0 1
50953: NOT
50954: IFFALSE 50958
// exit ;
50956: GO 51023
// result := 0 ;
50958: LD_ADDR_VAR 0 2
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// if GetTaskList ( sci ) then
50966: LD_VAR 0 1
50970: PPUSH
50971: CALL_OW 437
50975: IFFALSE 51023
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 437
50986: PUSH
50987: LD_INT 1
50989: ARRAY
50990: PUSH
50991: LD_INT 1
50993: ARRAY
50994: PUSH
50995: LD_STRING l
50997: EQUAL
50998: IFFALSE 51023
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51000: LD_ADDR_VAR 0 2
51004: PUSH
51005: LD_VAR 0 1
51009: PPUSH
51010: CALL_OW 437
51014: PUSH
51015: LD_INT 1
51017: ARRAY
51018: PUSH
51019: LD_INT 4
51021: ARRAY
51022: ST_TO_ADDR
// end ;
51023: LD_VAR 0 2
51027: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51028: LD_INT 0
51030: PPUSH
51031: PPUSH
51032: PPUSH
51033: PPUSH
// if not base_units then
51034: LD_VAR 0 1
51038: NOT
51039: IFFALSE 51043
// exit ;
51041: GO 51130
// result := false ;
51043: LD_ADDR_VAR 0 2
51047: PUSH
51048: LD_INT 0
51050: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51051: LD_ADDR_VAR 0 5
51055: PUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: LD_INT 21
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PPUSH
51071: CALL_OW 72
51075: ST_TO_ADDR
// if not tmp then
51076: LD_VAR 0 5
51080: NOT
51081: IFFALSE 51085
// exit ;
51083: GO 51130
// for i in tmp do
51085: LD_ADDR_VAR 0 3
51089: PUSH
51090: LD_VAR 0 5
51094: PUSH
51095: FOR_IN
51096: IFFALSE 51128
// begin result := EnemyInRange ( i , 22 ) ;
51098: LD_ADDR_VAR 0 2
51102: PUSH
51103: LD_VAR 0 3
51107: PPUSH
51108: LD_INT 22
51110: PPUSH
51111: CALL 49366 0 2
51115: ST_TO_ADDR
// if result then
51116: LD_VAR 0 2
51120: IFFALSE 51126
// exit ;
51122: POP
51123: POP
51124: GO 51130
// end ;
51126: GO 51095
51128: POP
51129: POP
// end ;
51130: LD_VAR 0 2
51134: RET
// export function FilterByTag ( units , tag ) ; begin
51135: LD_INT 0
51137: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51138: LD_ADDR_VAR 0 3
51142: PUSH
51143: LD_VAR 0 1
51147: PPUSH
51148: LD_INT 120
51150: PUSH
51151: LD_VAR 0 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PPUSH
51160: CALL_OW 72
51164: ST_TO_ADDR
// end ;
51165: LD_VAR 0 3
51169: RET
// export function IsDriver ( un ) ; begin
51170: LD_INT 0
51172: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51173: LD_ADDR_VAR 0 2
51177: PUSH
51178: LD_VAR 0 1
51182: PUSH
51183: LD_INT 55
51185: PUSH
51186: EMPTY
51187: LIST
51188: PPUSH
51189: CALL_OW 69
51193: IN
51194: ST_TO_ADDR
// end ;
51195: LD_VAR 0 2
51199: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51200: LD_INT 0
51202: PPUSH
51203: PPUSH
// list := [ ] ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: EMPTY
51210: ST_TO_ADDR
// case d of 0 :
51211: LD_VAR 0 3
51215: PUSH
51216: LD_INT 0
51218: DOUBLE
51219: EQUAL
51220: IFTRUE 51224
51222: GO 51357
51224: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51225: LD_ADDR_VAR 0 5
51229: PUSH
51230: LD_VAR 0 1
51234: PUSH
51235: LD_INT 4
51237: MINUS
51238: PUSH
51239: LD_VAR 0 2
51243: PUSH
51244: LD_INT 4
51246: MINUS
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: PUSH
51256: LD_VAR 0 1
51260: PUSH
51261: LD_INT 3
51263: MINUS
51264: PUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: PUSH
51278: LD_VAR 0 1
51282: PUSH
51283: LD_INT 4
51285: PLUS
51286: PUSH
51287: LD_VAR 0 2
51291: PUSH
51292: LD_INT 4
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: LD_VAR 0 1
51304: PUSH
51305: LD_INT 3
51307: PLUS
51308: PUSH
51309: LD_VAR 0 2
51313: PUSH
51314: LD_INT 3
51316: PLUS
51317: PUSH
51318: LD_INT 5
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: PUSH
51326: LD_VAR 0 1
51330: PUSH
51331: LD_VAR 0 2
51335: PUSH
51336: LD_INT 4
51338: PLUS
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// end ; 1 :
51355: GO 52055
51357: LD_INT 1
51359: DOUBLE
51360: EQUAL
51361: IFTRUE 51365
51363: GO 51498
51365: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51366: LD_ADDR_VAR 0 5
51370: PUSH
51371: LD_VAR 0 1
51375: PUSH
51376: LD_VAR 0 2
51380: PUSH
51381: LD_INT 4
51383: MINUS
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: PUSH
51393: LD_VAR 0 1
51397: PUSH
51398: LD_INT 3
51400: MINUS
51401: PUSH
51402: LD_VAR 0 2
51406: PUSH
51407: LD_INT 3
51409: MINUS
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: PUSH
51419: LD_VAR 0 1
51423: PUSH
51424: LD_INT 4
51426: MINUS
51427: PUSH
51428: LD_VAR 0 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: PUSH
51441: LD_VAR 0 1
51445: PUSH
51446: LD_VAR 0 2
51450: PUSH
51451: LD_INT 3
51453: PLUS
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: PUSH
51463: LD_VAR 0 1
51467: PUSH
51468: LD_INT 4
51470: PLUS
51471: PUSH
51472: LD_VAR 0 2
51476: PUSH
51477: LD_INT 4
51479: PLUS
51480: PUSH
51481: LD_INT 5
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: ST_TO_ADDR
// end ; 2 :
51496: GO 52055
51498: LD_INT 2
51500: DOUBLE
51501: EQUAL
51502: IFTRUE 51506
51504: GO 51635
51506: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51507: LD_ADDR_VAR 0 5
51511: PUSH
51512: LD_VAR 0 1
51516: PUSH
51517: LD_VAR 0 2
51521: PUSH
51522: LD_INT 3
51524: MINUS
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: PUSH
51534: LD_VAR 0 1
51538: PUSH
51539: LD_INT 4
51541: PLUS
51542: PUSH
51543: LD_VAR 0 2
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: LIST
51555: PUSH
51556: LD_VAR 0 1
51560: PUSH
51561: LD_VAR 0 2
51565: PUSH
51566: LD_INT 4
51568: PLUS
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: LD_VAR 0 1
51582: PUSH
51583: LD_INT 3
51585: MINUS
51586: PUSH
51587: LD_VAR 0 2
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: PUSH
51600: LD_VAR 0 1
51604: PUSH
51605: LD_INT 4
51607: MINUS
51608: PUSH
51609: LD_VAR 0 2
51613: PUSH
51614: LD_INT 4
51616: MINUS
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: ST_TO_ADDR
// end ; 3 :
51633: GO 52055
51635: LD_INT 3
51637: DOUBLE
51638: EQUAL
51639: IFTRUE 51643
51641: GO 51776
51643: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51644: LD_ADDR_VAR 0 5
51648: PUSH
51649: LD_VAR 0 1
51653: PUSH
51654: LD_INT 3
51656: PLUS
51657: PUSH
51658: LD_VAR 0 2
51662: PUSH
51663: LD_INT 4
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: PUSH
51671: LD_VAR 0 1
51675: PUSH
51676: LD_INT 4
51678: PLUS
51679: PUSH
51680: LD_VAR 0 2
51684: PUSH
51685: LD_INT 4
51687: PLUS
51688: PUSH
51689: LD_INT 5
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: PUSH
51697: LD_VAR 0 1
51701: PUSH
51702: LD_INT 4
51704: MINUS
51705: PUSH
51706: LD_VAR 0 2
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 1
51723: PUSH
51724: LD_VAR 0 2
51728: PUSH
51729: LD_INT 4
51731: MINUS
51732: PUSH
51733: LD_INT 3
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: PUSH
51741: LD_VAR 0 1
51745: PUSH
51746: LD_INT 3
51748: MINUS
51749: PUSH
51750: LD_VAR 0 2
51754: PUSH
51755: LD_INT 3
51757: MINUS
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: ST_TO_ADDR
// end ; 4 :
51774: GO 52055
51776: LD_INT 4
51778: DOUBLE
51779: EQUAL
51780: IFTRUE 51784
51782: GO 51917
51784: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51785: LD_ADDR_VAR 0 5
51789: PUSH
51790: LD_VAR 0 1
51794: PUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_INT 4
51802: PLUS
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: PUSH
51812: LD_VAR 0 1
51816: PUSH
51817: LD_INT 3
51819: PLUS
51820: PUSH
51821: LD_VAR 0 2
51825: PUSH
51826: LD_INT 3
51828: PLUS
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PUSH
51838: LD_VAR 0 1
51842: PUSH
51843: LD_INT 4
51845: PLUS
51846: PUSH
51847: LD_VAR 0 2
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: PUSH
51860: LD_VAR 0 1
51864: PUSH
51865: LD_VAR 0 2
51869: PUSH
51870: LD_INT 3
51872: MINUS
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: PUSH
51882: LD_VAR 0 1
51886: PUSH
51887: LD_INT 4
51889: MINUS
51890: PUSH
51891: LD_VAR 0 2
51895: PUSH
51896: LD_INT 4
51898: MINUS
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// end ; 5 :
51915: GO 52055
51917: LD_INT 5
51919: DOUBLE
51920: EQUAL
51921: IFTRUE 51925
51923: GO 52054
51925: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51926: LD_ADDR_VAR 0 5
51930: PUSH
51931: LD_VAR 0 1
51935: PUSH
51936: LD_INT 4
51938: MINUS
51939: PUSH
51940: LD_VAR 0 2
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: PUSH
51953: LD_VAR 0 1
51957: PUSH
51958: LD_VAR 0 2
51962: PUSH
51963: LD_INT 4
51965: MINUS
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: PUSH
51975: LD_VAR 0 1
51979: PUSH
51980: LD_INT 4
51982: PLUS
51983: PUSH
51984: LD_VAR 0 2
51988: PUSH
51989: LD_INT 4
51991: PLUS
51992: PUSH
51993: LD_INT 5
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 3
52008: PLUS
52009: PUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 4
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: PUSH
52023: LD_VAR 0 1
52027: PUSH
52028: LD_VAR 0 2
52032: PUSH
52033: LD_INT 3
52035: PLUS
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// end ; end ;
52052: GO 52055
52054: POP
// result := list ;
52055: LD_ADDR_VAR 0 4
52059: PUSH
52060: LD_VAR 0 5
52064: ST_TO_ADDR
// end ;
52065: LD_VAR 0 4
52069: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52070: LD_INT 0
52072: PPUSH
52073: PPUSH
52074: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52075: LD_VAR 0 1
52079: NOT
52080: PUSH
52081: LD_VAR 0 2
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 4
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: IN
52104: NOT
52105: OR
52106: IFFALSE 52110
// exit ;
52108: GO 52202
// tmp := [ ] ;
52110: LD_ADDR_VAR 0 5
52114: PUSH
52115: EMPTY
52116: ST_TO_ADDR
// for i in units do
52117: LD_ADDR_VAR 0 4
52121: PUSH
52122: LD_VAR 0 1
52126: PUSH
52127: FOR_IN
52128: IFFALSE 52171
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52130: LD_ADDR_VAR 0 5
52134: PUSH
52135: LD_VAR 0 5
52139: PPUSH
52140: LD_VAR 0 5
52144: PUSH
52145: LD_INT 1
52147: PLUS
52148: PPUSH
52149: LD_VAR 0 4
52153: PPUSH
52154: LD_VAR 0 2
52158: PPUSH
52159: CALL_OW 259
52163: PPUSH
52164: CALL_OW 2
52168: ST_TO_ADDR
52169: GO 52127
52171: POP
52172: POP
// if not tmp then
52173: LD_VAR 0 5
52177: NOT
52178: IFFALSE 52182
// exit ;
52180: GO 52202
// result := SortListByListDesc ( units , tmp ) ;
52182: LD_ADDR_VAR 0 3
52186: PUSH
52187: LD_VAR 0 1
52191: PPUSH
52192: LD_VAR 0 5
52196: PPUSH
52197: CALL_OW 77
52201: ST_TO_ADDR
// end ;
52202: LD_VAR 0 3
52206: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52207: LD_INT 0
52209: PPUSH
52210: PPUSH
52211: PPUSH
// result := false ;
52212: LD_ADDR_VAR 0 3
52216: PUSH
52217: LD_INT 0
52219: ST_TO_ADDR
// x := GetX ( building ) ;
52220: LD_ADDR_VAR 0 4
52224: PUSH
52225: LD_VAR 0 2
52229: PPUSH
52230: CALL_OW 250
52234: ST_TO_ADDR
// y := GetY ( building ) ;
52235: LD_ADDR_VAR 0 5
52239: PUSH
52240: LD_VAR 0 2
52244: PPUSH
52245: CALL_OW 251
52249: ST_TO_ADDR
// if not building or not x or not y then
52250: LD_VAR 0 2
52254: NOT
52255: PUSH
52256: LD_VAR 0 4
52260: NOT
52261: OR
52262: PUSH
52263: LD_VAR 0 5
52267: NOT
52268: OR
52269: IFFALSE 52273
// exit ;
52271: GO 52365
// if GetTaskList ( unit ) then
52273: LD_VAR 0 1
52277: PPUSH
52278: CALL_OW 437
52282: IFFALSE 52365
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52284: LD_STRING e
52286: PUSH
52287: LD_VAR 0 1
52291: PPUSH
52292: CALL_OW 437
52296: PUSH
52297: LD_INT 1
52299: ARRAY
52300: PUSH
52301: LD_INT 1
52303: ARRAY
52304: EQUAL
52305: PUSH
52306: LD_VAR 0 4
52310: PUSH
52311: LD_VAR 0 1
52315: PPUSH
52316: CALL_OW 437
52320: PUSH
52321: LD_INT 1
52323: ARRAY
52324: PUSH
52325: LD_INT 2
52327: ARRAY
52328: EQUAL
52329: AND
52330: PUSH
52331: LD_VAR 0 5
52335: PUSH
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 437
52345: PUSH
52346: LD_INT 1
52348: ARRAY
52349: PUSH
52350: LD_INT 3
52352: ARRAY
52353: EQUAL
52354: AND
52355: IFFALSE 52365
// result := true end ;
52357: LD_ADDR_VAR 0 3
52361: PUSH
52362: LD_INT 1
52364: ST_TO_ADDR
// end ;
52365: LD_VAR 0 3
52369: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52370: LD_INT 0
52372: PPUSH
// result := false ;
52373: LD_ADDR_VAR 0 4
52377: PUSH
52378: LD_INT 0
52380: ST_TO_ADDR
// if GetTaskList ( unit ) then
52381: LD_VAR 0 1
52385: PPUSH
52386: CALL_OW 437
52390: IFFALSE 52473
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52392: LD_STRING M
52394: PUSH
52395: LD_VAR 0 1
52399: PPUSH
52400: CALL_OW 437
52404: PUSH
52405: LD_INT 1
52407: ARRAY
52408: PUSH
52409: LD_INT 1
52411: ARRAY
52412: EQUAL
52413: PUSH
52414: LD_VAR 0 2
52418: PUSH
52419: LD_VAR 0 1
52423: PPUSH
52424: CALL_OW 437
52428: PUSH
52429: LD_INT 1
52431: ARRAY
52432: PUSH
52433: LD_INT 2
52435: ARRAY
52436: EQUAL
52437: AND
52438: PUSH
52439: LD_VAR 0 3
52443: PUSH
52444: LD_VAR 0 1
52448: PPUSH
52449: CALL_OW 437
52453: PUSH
52454: LD_INT 1
52456: ARRAY
52457: PUSH
52458: LD_INT 3
52460: ARRAY
52461: EQUAL
52462: AND
52463: IFFALSE 52473
// result := true ;
52465: LD_ADDR_VAR 0 4
52469: PUSH
52470: LD_INT 1
52472: ST_TO_ADDR
// end ; end ;
52473: LD_VAR 0 4
52477: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52478: LD_INT 0
52480: PPUSH
52481: PPUSH
52482: PPUSH
52483: PPUSH
// if not unit or not area then
52484: LD_VAR 0 1
52488: NOT
52489: PUSH
52490: LD_VAR 0 2
52494: NOT
52495: OR
52496: IFFALSE 52500
// exit ;
52498: GO 52664
// tmp := AreaToList ( area , i ) ;
52500: LD_ADDR_VAR 0 6
52504: PUSH
52505: LD_VAR 0 2
52509: PPUSH
52510: LD_VAR 0 5
52514: PPUSH
52515: CALL_OW 517
52519: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52520: LD_ADDR_VAR 0 5
52524: PUSH
52525: DOUBLE
52526: LD_INT 1
52528: DEC
52529: ST_TO_ADDR
52530: LD_VAR 0 6
52534: PUSH
52535: LD_INT 1
52537: ARRAY
52538: PUSH
52539: FOR_TO
52540: IFFALSE 52662
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52542: LD_ADDR_VAR 0 7
52546: PUSH
52547: LD_VAR 0 6
52551: PUSH
52552: LD_INT 1
52554: ARRAY
52555: PUSH
52556: LD_VAR 0 5
52560: ARRAY
52561: PUSH
52562: LD_VAR 0 6
52566: PUSH
52567: LD_INT 2
52569: ARRAY
52570: PUSH
52571: LD_VAR 0 5
52575: ARRAY
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52581: LD_VAR 0 7
52585: PUSH
52586: LD_INT 1
52588: ARRAY
52589: PPUSH
52590: LD_VAR 0 7
52594: PUSH
52595: LD_INT 2
52597: ARRAY
52598: PPUSH
52599: CALL_OW 428
52603: PUSH
52604: LD_INT 0
52606: EQUAL
52607: IFFALSE 52660
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52609: LD_VAR 0 1
52613: PPUSH
52614: LD_VAR 0 7
52618: PUSH
52619: LD_INT 1
52621: ARRAY
52622: PPUSH
52623: LD_VAR 0 7
52627: PUSH
52628: LD_INT 2
52630: ARRAY
52631: PPUSH
52632: LD_VAR 0 3
52636: PPUSH
52637: CALL_OW 48
// result := IsPlaced ( unit ) ;
52641: LD_ADDR_VAR 0 4
52645: PUSH
52646: LD_VAR 0 1
52650: PPUSH
52651: CALL_OW 305
52655: ST_TO_ADDR
// exit ;
52656: POP
52657: POP
52658: GO 52664
// end ; end ;
52660: GO 52539
52662: POP
52663: POP
// end ;
52664: LD_VAR 0 4
52668: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52669: LD_INT 0
52671: PPUSH
52672: PPUSH
52673: PPUSH
// if not side or side > 8 then
52674: LD_VAR 0 1
52678: NOT
52679: PUSH
52680: LD_VAR 0 1
52684: PUSH
52685: LD_INT 8
52687: GREATER
52688: OR
52689: IFFALSE 52693
// exit ;
52691: GO 52880
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52693: LD_ADDR_VAR 0 4
52697: PUSH
52698: LD_INT 22
52700: PUSH
52701: LD_VAR 0 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 21
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PPUSH
52724: CALL_OW 69
52728: ST_TO_ADDR
// if not tmp then
52729: LD_VAR 0 4
52733: NOT
52734: IFFALSE 52738
// exit ;
52736: GO 52880
// enable_addtolog := true ;
52738: LD_ADDR_OWVAR 81
52742: PUSH
52743: LD_INT 1
52745: ST_TO_ADDR
// AddToLog ( [ ) ;
52746: LD_STRING [
52748: PPUSH
52749: CALL_OW 561
// for i in tmp do
52753: LD_ADDR_VAR 0 3
52757: PUSH
52758: LD_VAR 0 4
52762: PUSH
52763: FOR_IN
52764: IFFALSE 52871
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52766: LD_STRING [
52768: PUSH
52769: LD_VAR 0 3
52773: PPUSH
52774: CALL_OW 266
52778: STR
52779: PUSH
52780: LD_STRING , 
52782: STR
52783: PUSH
52784: LD_VAR 0 3
52788: PPUSH
52789: CALL_OW 250
52793: STR
52794: PUSH
52795: LD_STRING , 
52797: STR
52798: PUSH
52799: LD_VAR 0 3
52803: PPUSH
52804: CALL_OW 251
52808: STR
52809: PUSH
52810: LD_STRING , 
52812: STR
52813: PUSH
52814: LD_VAR 0 3
52818: PPUSH
52819: CALL_OW 254
52823: STR
52824: PUSH
52825: LD_STRING , 
52827: STR
52828: PUSH
52829: LD_VAR 0 3
52833: PPUSH
52834: LD_INT 1
52836: PPUSH
52837: CALL_OW 268
52841: STR
52842: PUSH
52843: LD_STRING , 
52845: STR
52846: PUSH
52847: LD_VAR 0 3
52851: PPUSH
52852: LD_INT 2
52854: PPUSH
52855: CALL_OW 268
52859: STR
52860: PUSH
52861: LD_STRING ],
52863: STR
52864: PPUSH
52865: CALL_OW 561
// end ;
52869: GO 52763
52871: POP
52872: POP
// AddToLog ( ]; ) ;
52873: LD_STRING ];
52875: PPUSH
52876: CALL_OW 561
// end ;
52880: LD_VAR 0 2
52884: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52885: LD_INT 0
52887: PPUSH
52888: PPUSH
52889: PPUSH
52890: PPUSH
52891: PPUSH
// if not area or not rate or not max then
52892: LD_VAR 0 1
52896: NOT
52897: PUSH
52898: LD_VAR 0 2
52902: NOT
52903: OR
52904: PUSH
52905: LD_VAR 0 4
52909: NOT
52910: OR
52911: IFFALSE 52915
// exit ;
52913: GO 53104
// while 1 do
52915: LD_INT 1
52917: IFFALSE 53104
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52919: LD_ADDR_VAR 0 9
52923: PUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: LD_INT 1
52931: PPUSH
52932: CALL_OW 287
52936: PUSH
52937: LD_INT 10
52939: MUL
52940: ST_TO_ADDR
// r := rate / 10 ;
52941: LD_ADDR_VAR 0 7
52945: PUSH
52946: LD_VAR 0 2
52950: PUSH
52951: LD_INT 10
52953: DIVREAL
52954: ST_TO_ADDR
// time := 1 1$00 ;
52955: LD_ADDR_VAR 0 8
52959: PUSH
52960: LD_INT 2100
52962: ST_TO_ADDR
// if amount < min then
52963: LD_VAR 0 9
52967: PUSH
52968: LD_VAR 0 3
52972: LESS
52973: IFFALSE 52991
// r := r * 2 else
52975: LD_ADDR_VAR 0 7
52979: PUSH
52980: LD_VAR 0 7
52984: PUSH
52985: LD_INT 2
52987: MUL
52988: ST_TO_ADDR
52989: GO 53017
// if amount > max then
52991: LD_VAR 0 9
52995: PUSH
52996: LD_VAR 0 4
53000: GREATER
53001: IFFALSE 53017
// r := r / 2 ;
53003: LD_ADDR_VAR 0 7
53007: PUSH
53008: LD_VAR 0 7
53012: PUSH
53013: LD_INT 2
53015: DIVREAL
53016: ST_TO_ADDR
// time := time / r ;
53017: LD_ADDR_VAR 0 8
53021: PUSH
53022: LD_VAR 0 8
53026: PUSH
53027: LD_VAR 0 7
53031: DIVREAL
53032: ST_TO_ADDR
// if time < 0 then
53033: LD_VAR 0 8
53037: PUSH
53038: LD_INT 0
53040: LESS
53041: IFFALSE 53058
// time := time * - 1 ;
53043: LD_ADDR_VAR 0 8
53047: PUSH
53048: LD_VAR 0 8
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: MUL
53057: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53058: LD_VAR 0 8
53062: PUSH
53063: LD_INT 35
53065: PPUSH
53066: LD_INT 875
53068: PPUSH
53069: CALL_OW 12
53073: PLUS
53074: PPUSH
53075: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53079: LD_INT 1
53081: PPUSH
53082: LD_INT 5
53084: PPUSH
53085: CALL_OW 12
53089: PPUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: LD_INT 1
53097: PPUSH
53098: CALL_OW 55
// end ;
53102: GO 52915
// end ;
53104: LD_VAR 0 5
53108: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53109: LD_INT 0
53111: PPUSH
53112: PPUSH
53113: PPUSH
53114: PPUSH
53115: PPUSH
53116: PPUSH
53117: PPUSH
53118: PPUSH
// if not turrets or not factories then
53119: LD_VAR 0 1
53123: NOT
53124: PUSH
53125: LD_VAR 0 2
53129: NOT
53130: OR
53131: IFFALSE 53135
// exit ;
53133: GO 53442
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53135: LD_ADDR_VAR 0 10
53139: PUSH
53140: LD_INT 5
53142: PUSH
53143: LD_INT 6
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 4
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: LD_INT 5
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 24
53177: PUSH
53178: LD_INT 25
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 23
53187: PUSH
53188: LD_INT 27
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 42
53201: PUSH
53202: LD_INT 43
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 44
53211: PUSH
53212: LD_INT 46
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 45
53221: PUSH
53222: LD_INT 47
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: ST_TO_ADDR
// result := [ ] ;
53239: LD_ADDR_VAR 0 3
53243: PUSH
53244: EMPTY
53245: ST_TO_ADDR
// for i in turrets do
53246: LD_ADDR_VAR 0 4
53250: PUSH
53251: LD_VAR 0 1
53255: PUSH
53256: FOR_IN
53257: IFFALSE 53440
// begin nat := GetNation ( i ) ;
53259: LD_ADDR_VAR 0 7
53263: PUSH
53264: LD_VAR 0 4
53268: PPUSH
53269: CALL_OW 248
53273: ST_TO_ADDR
// weapon := 0 ;
53274: LD_ADDR_VAR 0 8
53278: PUSH
53279: LD_INT 0
53281: ST_TO_ADDR
// if not nat then
53282: LD_VAR 0 7
53286: NOT
53287: IFFALSE 53291
// continue ;
53289: GO 53256
// for j in list [ nat ] do
53291: LD_ADDR_VAR 0 5
53295: PUSH
53296: LD_VAR 0 10
53300: PUSH
53301: LD_VAR 0 7
53305: ARRAY
53306: PUSH
53307: FOR_IN
53308: IFFALSE 53349
// if GetBWeapon ( i ) = j [ 1 ] then
53310: LD_VAR 0 4
53314: PPUSH
53315: CALL_OW 269
53319: PUSH
53320: LD_VAR 0 5
53324: PUSH
53325: LD_INT 1
53327: ARRAY
53328: EQUAL
53329: IFFALSE 53347
// begin weapon := j [ 2 ] ;
53331: LD_ADDR_VAR 0 8
53335: PUSH
53336: LD_VAR 0 5
53340: PUSH
53341: LD_INT 2
53343: ARRAY
53344: ST_TO_ADDR
// break ;
53345: GO 53349
// end ;
53347: GO 53307
53349: POP
53350: POP
// if not weapon then
53351: LD_VAR 0 8
53355: NOT
53356: IFFALSE 53360
// continue ;
53358: GO 53256
// for k in factories do
53360: LD_ADDR_VAR 0 6
53364: PUSH
53365: LD_VAR 0 2
53369: PUSH
53370: FOR_IN
53371: IFFALSE 53436
// begin weapons := AvailableWeaponList ( k ) ;
53373: LD_ADDR_VAR 0 9
53377: PUSH
53378: LD_VAR 0 6
53382: PPUSH
53383: CALL_OW 478
53387: ST_TO_ADDR
// if not weapons then
53388: LD_VAR 0 9
53392: NOT
53393: IFFALSE 53397
// continue ;
53395: GO 53370
// if weapon in weapons then
53397: LD_VAR 0 8
53401: PUSH
53402: LD_VAR 0 9
53406: IN
53407: IFFALSE 53434
// begin result := [ i , weapon ] ;
53409: LD_ADDR_VAR 0 3
53413: PUSH
53414: LD_VAR 0 4
53418: PUSH
53419: LD_VAR 0 8
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: ST_TO_ADDR
// exit ;
53428: POP
53429: POP
53430: POP
53431: POP
53432: GO 53442
// end ; end ;
53434: GO 53370
53436: POP
53437: POP
// end ;
53438: GO 53256
53440: POP
53441: POP
// end ;
53442: LD_VAR 0 3
53446: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53447: LD_INT 0
53449: PPUSH
// if not side or side > 8 then
53450: LD_VAR 0 3
53454: NOT
53455: PUSH
53456: LD_VAR 0 3
53460: PUSH
53461: LD_INT 8
53463: GREATER
53464: OR
53465: IFFALSE 53469
// exit ;
53467: GO 53528
// if not range then
53469: LD_VAR 0 4
53473: NOT
53474: IFFALSE 53485
// range := - 12 ;
53476: LD_ADDR_VAR 0 4
53480: PUSH
53481: LD_INT 12
53483: NEG
53484: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53485: LD_VAR 0 1
53489: PPUSH
53490: LD_VAR 0 2
53494: PPUSH
53495: LD_VAR 0 3
53499: PPUSH
53500: LD_VAR 0 4
53504: PPUSH
53505: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53509: LD_VAR 0 1
53513: PPUSH
53514: LD_VAR 0 2
53518: PPUSH
53519: LD_VAR 0 3
53523: PPUSH
53524: CALL_OW 331
// end ;
53528: LD_VAR 0 5
53532: RET
// export function Video ( mode ) ; begin
53533: LD_INT 0
53535: PPUSH
// ingame_video = mode ;
53536: LD_ADDR_OWVAR 52
53540: PUSH
53541: LD_VAR 0 1
53545: ST_TO_ADDR
// interface_hidden = mode ;
53546: LD_ADDR_OWVAR 54
53550: PUSH
53551: LD_VAR 0 1
53555: ST_TO_ADDR
// end ;
53556: LD_VAR 0 2
53560: RET
// export function Join ( array , element ) ; begin
53561: LD_INT 0
53563: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53564: LD_ADDR_VAR 0 3
53568: PUSH
53569: LD_VAR 0 1
53573: PPUSH
53574: LD_VAR 0 1
53578: PUSH
53579: LD_INT 1
53581: PLUS
53582: PPUSH
53583: LD_VAR 0 2
53587: PPUSH
53588: CALL_OW 1
53592: ST_TO_ADDR
// end ;
53593: LD_VAR 0 3
53597: RET
// export function JoinUnion ( array , element ) ; begin
53598: LD_INT 0
53600: PPUSH
// result := array union element ;
53601: LD_ADDR_VAR 0 3
53605: PUSH
53606: LD_VAR 0 1
53610: PUSH
53611: LD_VAR 0 2
53615: UNION
53616: ST_TO_ADDR
// end ;
53617: LD_VAR 0 3
53621: RET
// export function GetBehemoths ( side ) ; begin
53622: LD_INT 0
53624: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53625: LD_ADDR_VAR 0 2
53629: PUSH
53630: LD_INT 22
53632: PUSH
53633: LD_VAR 0 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 31
53644: PUSH
53645: LD_INT 25
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PPUSH
53656: CALL_OW 69
53660: ST_TO_ADDR
// end ;
53661: LD_VAR 0 2
53665: RET
// export function Shuffle ( array ) ; var i , index ; begin
53666: LD_INT 0
53668: PPUSH
53669: PPUSH
53670: PPUSH
// result := [ ] ;
53671: LD_ADDR_VAR 0 2
53675: PUSH
53676: EMPTY
53677: ST_TO_ADDR
// if not array then
53678: LD_VAR 0 1
53682: NOT
53683: IFFALSE 53687
// exit ;
53685: GO 53786
// Randomize ;
53687: CALL_OW 10
// for i = array downto 1 do
53691: LD_ADDR_VAR 0 3
53695: PUSH
53696: DOUBLE
53697: LD_VAR 0 1
53701: INC
53702: ST_TO_ADDR
53703: LD_INT 1
53705: PUSH
53706: FOR_DOWNTO
53707: IFFALSE 53784
// begin index := rand ( 1 , array ) ;
53709: LD_ADDR_VAR 0 4
53713: PUSH
53714: LD_INT 1
53716: PPUSH
53717: LD_VAR 0 1
53721: PPUSH
53722: CALL_OW 12
53726: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53727: LD_ADDR_VAR 0 2
53731: PUSH
53732: LD_VAR 0 2
53736: PPUSH
53737: LD_VAR 0 2
53741: PUSH
53742: LD_INT 1
53744: PLUS
53745: PPUSH
53746: LD_VAR 0 1
53750: PUSH
53751: LD_VAR 0 4
53755: ARRAY
53756: PPUSH
53757: CALL_OW 2
53761: ST_TO_ADDR
// array := Delete ( array , index ) ;
53762: LD_ADDR_VAR 0 1
53766: PUSH
53767: LD_VAR 0 1
53771: PPUSH
53772: LD_VAR 0 4
53776: PPUSH
53777: CALL_OW 3
53781: ST_TO_ADDR
// end ;
53782: GO 53706
53784: POP
53785: POP
// end ;
53786: LD_VAR 0 2
53790: RET
// export function GetBaseMaterials ( base ) ; begin
53791: LD_INT 0
53793: PPUSH
// result := [ 0 , 0 , 0 ] ;
53794: LD_ADDR_VAR 0 2
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// if not base then
53813: LD_VAR 0 1
53817: NOT
53818: IFFALSE 53822
// exit ;
53820: GO 53871
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53822: LD_ADDR_VAR 0 2
53826: PUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: LD_INT 1
53834: PPUSH
53835: CALL_OW 275
53839: PUSH
53840: LD_VAR 0 1
53844: PPUSH
53845: LD_INT 2
53847: PPUSH
53848: CALL_OW 275
53852: PUSH
53853: LD_VAR 0 1
53857: PPUSH
53858: LD_INT 3
53860: PPUSH
53861: CALL_OW 275
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// end ;
53871: LD_VAR 0 2
53875: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53876: LD_INT 0
53878: PPUSH
53879: PPUSH
// result := array ;
53880: LD_ADDR_VAR 0 3
53884: PUSH
53885: LD_VAR 0 1
53889: ST_TO_ADDR
// if size > 0 then
53890: LD_VAR 0 2
53894: PUSH
53895: LD_INT 0
53897: GREATER
53898: IFFALSE 53944
// for i := array downto size do
53900: LD_ADDR_VAR 0 4
53904: PUSH
53905: DOUBLE
53906: LD_VAR 0 1
53910: INC
53911: ST_TO_ADDR
53912: LD_VAR 0 2
53916: PUSH
53917: FOR_DOWNTO
53918: IFFALSE 53942
// result := Delete ( result , result ) ;
53920: LD_ADDR_VAR 0 3
53924: PUSH
53925: LD_VAR 0 3
53929: PPUSH
53930: LD_VAR 0 3
53934: PPUSH
53935: CALL_OW 3
53939: ST_TO_ADDR
53940: GO 53917
53942: POP
53943: POP
// end ;
53944: LD_VAR 0 3
53948: RET
// export function ComExit ( unit ) ; var tmp ; begin
53949: LD_INT 0
53951: PPUSH
53952: PPUSH
// if not IsInUnit ( unit ) then
53953: LD_VAR 0 1
53957: PPUSH
53958: CALL_OW 310
53962: NOT
53963: IFFALSE 53967
// exit ;
53965: GO 54027
// tmp := IsInUnit ( unit ) ;
53967: LD_ADDR_VAR 0 3
53971: PUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 310
53981: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53982: LD_VAR 0 3
53986: PPUSH
53987: CALL_OW 247
53991: PUSH
53992: LD_INT 2
53994: EQUAL
53995: IFFALSE 54008
// ComExitVehicle ( unit ) else
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 121
54006: GO 54017
// ComExitBuilding ( unit ) ;
54008: LD_VAR 0 1
54012: PPUSH
54013: CALL_OW 122
// result := tmp ;
54017: LD_ADDR_VAR 0 2
54021: PUSH
54022: LD_VAR 0 3
54026: ST_TO_ADDR
// end ;
54027: LD_VAR 0 2
54031: RET
// export function ComExitAll ( units ) ; var i ; begin
54032: LD_INT 0
54034: PPUSH
54035: PPUSH
// if not units then
54036: LD_VAR 0 1
54040: NOT
54041: IFFALSE 54045
// exit ;
54043: GO 54071
// for i in units do
54045: LD_ADDR_VAR 0 3
54049: PUSH
54050: LD_VAR 0 1
54054: PUSH
54055: FOR_IN
54056: IFFALSE 54069
// ComExit ( i ) ;
54058: LD_VAR 0 3
54062: PPUSH
54063: CALL 53949 0 1
54067: GO 54055
54069: POP
54070: POP
// end ;
54071: LD_VAR 0 2
54075: RET
// export function ResetHc ; begin
54076: LD_INT 0
54078: PPUSH
// InitHc ;
54079: CALL_OW 19
// hc_importance := 0 ;
54083: LD_ADDR_OWVAR 32
54087: PUSH
54088: LD_INT 0
54090: ST_TO_ADDR
// end ;
54091: LD_VAR 0 1
54095: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54096: LD_INT 0
54098: PPUSH
54099: PPUSH
54100: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54101: LD_ADDR_VAR 0 6
54105: PUSH
54106: LD_VAR 0 1
54110: PUSH
54111: LD_VAR 0 3
54115: PLUS
54116: PUSH
54117: LD_INT 2
54119: DIV
54120: ST_TO_ADDR
// if _x < 0 then
54121: LD_VAR 0 6
54125: PUSH
54126: LD_INT 0
54128: LESS
54129: IFFALSE 54146
// _x := _x * - 1 ;
54131: LD_ADDR_VAR 0 6
54135: PUSH
54136: LD_VAR 0 6
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: MUL
54145: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54146: LD_ADDR_VAR 0 7
54150: PUSH
54151: LD_VAR 0 2
54155: PUSH
54156: LD_VAR 0 4
54160: PLUS
54161: PUSH
54162: LD_INT 2
54164: DIV
54165: ST_TO_ADDR
// if _y < 0 then
54166: LD_VAR 0 7
54170: PUSH
54171: LD_INT 0
54173: LESS
54174: IFFALSE 54191
// _y := _y * - 1 ;
54176: LD_ADDR_VAR 0 7
54180: PUSH
54181: LD_VAR 0 7
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: MUL
54190: ST_TO_ADDR
// result := [ _x , _y ] ;
54191: LD_ADDR_VAR 0 5
54195: PUSH
54196: LD_VAR 0 6
54200: PUSH
54201: LD_VAR 0 7
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// end ;
54210: LD_VAR 0 5
54214: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54215: LD_INT 0
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
// task := GetTaskList ( unit ) ;
54221: LD_ADDR_VAR 0 7
54225: PUSH
54226: LD_VAR 0 1
54230: PPUSH
54231: CALL_OW 437
54235: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54236: LD_VAR 0 7
54240: NOT
54241: PUSH
54242: LD_VAR 0 1
54246: PPUSH
54247: LD_VAR 0 2
54251: PPUSH
54252: CALL_OW 308
54256: NOT
54257: AND
54258: IFFALSE 54262
// exit ;
54260: GO 54380
// if IsInArea ( unit , area ) then
54262: LD_VAR 0 1
54266: PPUSH
54267: LD_VAR 0 2
54271: PPUSH
54272: CALL_OW 308
54276: IFFALSE 54294
// begin ComMoveToArea ( unit , goAway ) ;
54278: LD_VAR 0 1
54282: PPUSH
54283: LD_VAR 0 3
54287: PPUSH
54288: CALL_OW 113
// exit ;
54292: GO 54380
// end ; if task [ 1 ] [ 1 ] <> M then
54294: LD_VAR 0 7
54298: PUSH
54299: LD_INT 1
54301: ARRAY
54302: PUSH
54303: LD_INT 1
54305: ARRAY
54306: PUSH
54307: LD_STRING M
54309: NONEQUAL
54310: IFFALSE 54314
// exit ;
54312: GO 54380
// x := task [ 1 ] [ 2 ] ;
54314: LD_ADDR_VAR 0 5
54318: PUSH
54319: LD_VAR 0 7
54323: PUSH
54324: LD_INT 1
54326: ARRAY
54327: PUSH
54328: LD_INT 2
54330: ARRAY
54331: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54332: LD_ADDR_VAR 0 6
54336: PUSH
54337: LD_VAR 0 7
54341: PUSH
54342: LD_INT 1
54344: ARRAY
54345: PUSH
54346: LD_INT 3
54348: ARRAY
54349: ST_TO_ADDR
// if InArea ( x , y , area ) then
54350: LD_VAR 0 5
54354: PPUSH
54355: LD_VAR 0 6
54359: PPUSH
54360: LD_VAR 0 2
54364: PPUSH
54365: CALL_OW 309
54369: IFFALSE 54380
// ComStop ( unit ) ;
54371: LD_VAR 0 1
54375: PPUSH
54376: CALL_OW 141
// end ;
54380: LD_VAR 0 4
54384: RET
// export function Abs ( value ) ; begin
54385: LD_INT 0
54387: PPUSH
// result := value ;
54388: LD_ADDR_VAR 0 2
54392: PUSH
54393: LD_VAR 0 1
54397: ST_TO_ADDR
// if value < 0 then
54398: LD_VAR 0 1
54402: PUSH
54403: LD_INT 0
54405: LESS
54406: IFFALSE 54423
// result := value * - 1 ;
54408: LD_ADDR_VAR 0 2
54412: PUSH
54413: LD_VAR 0 1
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: MUL
54422: ST_TO_ADDR
// end ;
54423: LD_VAR 0 2
54427: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54428: LD_INT 0
54430: PPUSH
54431: PPUSH
54432: PPUSH
54433: PPUSH
54434: PPUSH
54435: PPUSH
54436: PPUSH
54437: PPUSH
// if not unit or not building then
54438: LD_VAR 0 1
54442: NOT
54443: PUSH
54444: LD_VAR 0 2
54448: NOT
54449: OR
54450: IFFALSE 54454
// exit ;
54452: GO 54680
// x := GetX ( building ) ;
54454: LD_ADDR_VAR 0 4
54458: PUSH
54459: LD_VAR 0 2
54463: PPUSH
54464: CALL_OW 250
54468: ST_TO_ADDR
// y := GetY ( building ) ;
54469: LD_ADDR_VAR 0 6
54473: PUSH
54474: LD_VAR 0 2
54478: PPUSH
54479: CALL_OW 251
54483: ST_TO_ADDR
// d := GetDir ( building ) ;
54484: LD_ADDR_VAR 0 8
54488: PUSH
54489: LD_VAR 0 2
54493: PPUSH
54494: CALL_OW 254
54498: ST_TO_ADDR
// r := 4 ;
54499: LD_ADDR_VAR 0 9
54503: PUSH
54504: LD_INT 4
54506: ST_TO_ADDR
// for i := 1 to 5 do
54507: LD_ADDR_VAR 0 10
54511: PUSH
54512: DOUBLE
54513: LD_INT 1
54515: DEC
54516: ST_TO_ADDR
54517: LD_INT 5
54519: PUSH
54520: FOR_TO
54521: IFFALSE 54678
// begin _x := ShiftX ( x , d , r + i ) ;
54523: LD_ADDR_VAR 0 5
54527: PUSH
54528: LD_VAR 0 4
54532: PPUSH
54533: LD_VAR 0 8
54537: PPUSH
54538: LD_VAR 0 9
54542: PUSH
54543: LD_VAR 0 10
54547: PLUS
54548: PPUSH
54549: CALL_OW 272
54553: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54554: LD_ADDR_VAR 0 7
54558: PUSH
54559: LD_VAR 0 6
54563: PPUSH
54564: LD_VAR 0 8
54568: PPUSH
54569: LD_VAR 0 9
54573: PUSH
54574: LD_VAR 0 10
54578: PLUS
54579: PPUSH
54580: CALL_OW 273
54584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54585: LD_VAR 0 5
54589: PPUSH
54590: LD_VAR 0 7
54594: PPUSH
54595: CALL_OW 488
54599: PUSH
54600: LD_VAR 0 5
54604: PPUSH
54605: LD_VAR 0 7
54609: PPUSH
54610: CALL_OW 428
54614: PPUSH
54615: CALL_OW 247
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: IN
54630: NOT
54631: AND
54632: IFFALSE 54676
// begin ComMoveXY ( unit , _x , _y ) ;
54634: LD_VAR 0 1
54638: PPUSH
54639: LD_VAR 0 5
54643: PPUSH
54644: LD_VAR 0 7
54648: PPUSH
54649: CALL_OW 111
// result := [ _x , _y ] ;
54653: LD_ADDR_VAR 0 3
54657: PUSH
54658: LD_VAR 0 5
54662: PUSH
54663: LD_VAR 0 7
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// exit ;
54672: POP
54673: POP
54674: GO 54680
// end ; end ;
54676: GO 54520
54678: POP
54679: POP
// end ;
54680: LD_VAR 0 3
54684: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54685: LD_INT 0
54687: PPUSH
54688: PPUSH
54689: PPUSH
// result := 0 ;
54690: LD_ADDR_VAR 0 3
54694: PUSH
54695: LD_INT 0
54697: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54698: LD_VAR 0 1
54702: PUSH
54703: LD_INT 0
54705: LESS
54706: PUSH
54707: LD_VAR 0 1
54711: PUSH
54712: LD_INT 8
54714: GREATER
54715: OR
54716: PUSH
54717: LD_VAR 0 2
54721: PUSH
54722: LD_INT 0
54724: LESS
54725: OR
54726: PUSH
54727: LD_VAR 0 2
54731: PUSH
54732: LD_INT 8
54734: GREATER
54735: OR
54736: IFFALSE 54740
// exit ;
54738: GO 54815
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54740: LD_ADDR_VAR 0 4
54744: PUSH
54745: LD_INT 22
54747: PUSH
54748: LD_VAR 0 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PPUSH
54757: CALL_OW 69
54761: PUSH
54762: FOR_IN
54763: IFFALSE 54813
// begin un := UnitShoot ( i ) ;
54765: LD_ADDR_VAR 0 5
54769: PUSH
54770: LD_VAR 0 4
54774: PPUSH
54775: CALL_OW 504
54779: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54780: LD_VAR 0 5
54784: PPUSH
54785: CALL_OW 255
54789: PUSH
54790: LD_VAR 0 1
54794: EQUAL
54795: IFFALSE 54811
// begin result := un ;
54797: LD_ADDR_VAR 0 3
54801: PUSH
54802: LD_VAR 0 5
54806: ST_TO_ADDR
// exit ;
54807: POP
54808: POP
54809: GO 54815
// end ; end ;
54811: GO 54762
54813: POP
54814: POP
// end ;
54815: LD_VAR 0 3
54819: RET
// export function GetCargoBay ( units ) ; begin
54820: LD_INT 0
54822: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54823: LD_ADDR_VAR 0 2
54827: PUSH
54828: LD_VAR 0 1
54832: PPUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 34
54838: PUSH
54839: LD_INT 12
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 34
54848: PUSH
54849: LD_INT 51
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 34
54858: PUSH
54859: LD_INT 32
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 34
54868: PUSH
54869: LD_EXP 108
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: PPUSH
54885: CALL_OW 72
54889: ST_TO_ADDR
// end ;
54890: LD_VAR 0 2
54894: RET
// export function Negate ( value ) ; begin
54895: LD_INT 0
54897: PPUSH
// result := not value ;
54898: LD_ADDR_VAR 0 2
54902: PUSH
54903: LD_VAR 0 1
54907: NOT
54908: ST_TO_ADDR
// end ;
54909: LD_VAR 0 2
54913: RET
// export function Inc ( value ) ; begin
54914: LD_INT 0
54916: PPUSH
// result := value + 1 ;
54917: LD_ADDR_VAR 0 2
54921: PUSH
54922: LD_VAR 0 1
54926: PUSH
54927: LD_INT 1
54929: PLUS
54930: ST_TO_ADDR
// end ;
54931: LD_VAR 0 2
54935: RET
// export function Dec ( value ) ; begin
54936: LD_INT 0
54938: PPUSH
// result := value - 1 ;
54939: LD_ADDR_VAR 0 2
54943: PUSH
54944: LD_VAR 0 1
54948: PUSH
54949: LD_INT 1
54951: MINUS
54952: ST_TO_ADDR
// end ;
54953: LD_VAR 0 2
54957: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54958: LD_INT 0
54960: PPUSH
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
54967: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54968: LD_VAR 0 1
54972: PPUSH
54973: LD_VAR 0 2
54977: PPUSH
54978: CALL_OW 488
54982: NOT
54983: PUSH
54984: LD_VAR 0 3
54988: PPUSH
54989: LD_VAR 0 4
54993: PPUSH
54994: CALL_OW 488
54998: NOT
54999: OR
55000: IFFALSE 55013
// begin result := - 1 ;
55002: LD_ADDR_VAR 0 5
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: ST_TO_ADDR
// exit ;
55011: GO 55248
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55013: LD_ADDR_VAR 0 12
55017: PUSH
55018: LD_VAR 0 1
55022: PPUSH
55023: LD_VAR 0 2
55027: PPUSH
55028: LD_VAR 0 3
55032: PPUSH
55033: LD_VAR 0 4
55037: PPUSH
55038: CALL 54096 0 4
55042: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55043: LD_ADDR_VAR 0 11
55047: PUSH
55048: LD_VAR 0 1
55052: PPUSH
55053: LD_VAR 0 2
55057: PPUSH
55058: LD_VAR 0 12
55062: PUSH
55063: LD_INT 1
55065: ARRAY
55066: PPUSH
55067: LD_VAR 0 12
55071: PUSH
55072: LD_INT 2
55074: ARRAY
55075: PPUSH
55076: CALL_OW 298
55080: ST_TO_ADDR
// distance := 9999 ;
55081: LD_ADDR_VAR 0 10
55085: PUSH
55086: LD_INT 9999
55088: ST_TO_ADDR
// for i := 0 to 5 do
55089: LD_ADDR_VAR 0 6
55093: PUSH
55094: DOUBLE
55095: LD_INT 0
55097: DEC
55098: ST_TO_ADDR
55099: LD_INT 5
55101: PUSH
55102: FOR_TO
55103: IFFALSE 55246
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55105: LD_ADDR_VAR 0 7
55109: PUSH
55110: LD_VAR 0 1
55114: PPUSH
55115: LD_VAR 0 6
55119: PPUSH
55120: LD_VAR 0 11
55124: PPUSH
55125: CALL_OW 272
55129: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55130: LD_ADDR_VAR 0 8
55134: PUSH
55135: LD_VAR 0 2
55139: PPUSH
55140: LD_VAR 0 6
55144: PPUSH
55145: LD_VAR 0 11
55149: PPUSH
55150: CALL_OW 273
55154: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55155: LD_VAR 0 7
55159: PPUSH
55160: LD_VAR 0 8
55164: PPUSH
55165: CALL_OW 488
55169: NOT
55170: IFFALSE 55174
// continue ;
55172: GO 55102
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55174: LD_ADDR_VAR 0 9
55178: PUSH
55179: LD_VAR 0 12
55183: PUSH
55184: LD_INT 1
55186: ARRAY
55187: PPUSH
55188: LD_VAR 0 12
55192: PUSH
55193: LD_INT 2
55195: ARRAY
55196: PPUSH
55197: LD_VAR 0 7
55201: PPUSH
55202: LD_VAR 0 8
55206: PPUSH
55207: CALL_OW 298
55211: ST_TO_ADDR
// if tmp < distance then
55212: LD_VAR 0 9
55216: PUSH
55217: LD_VAR 0 10
55221: LESS
55222: IFFALSE 55244
// begin result := i ;
55224: LD_ADDR_VAR 0 5
55228: PUSH
55229: LD_VAR 0 6
55233: ST_TO_ADDR
// distance := tmp ;
55234: LD_ADDR_VAR 0 10
55238: PUSH
55239: LD_VAR 0 9
55243: ST_TO_ADDR
// end ; end ;
55244: GO 55102
55246: POP
55247: POP
// end ;
55248: LD_VAR 0 5
55252: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55253: LD_INT 0
55255: PPUSH
55256: PPUSH
// if not driver or not IsInUnit ( driver ) then
55257: LD_VAR 0 1
55261: NOT
55262: PUSH
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL_OW 310
55272: NOT
55273: OR
55274: IFFALSE 55278
// exit ;
55276: GO 55368
// vehicle := IsInUnit ( driver ) ;
55278: LD_ADDR_VAR 0 3
55282: PUSH
55283: LD_VAR 0 1
55287: PPUSH
55288: CALL_OW 310
55292: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55293: LD_VAR 0 1
55297: PPUSH
55298: LD_STRING \
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: PUSH
55328: LD_STRING E
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_VAR 0 3
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PPUSH
55364: CALL_OW 446
// end ;
55368: LD_VAR 0 2
55372: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55373: LD_INT 0
55375: PPUSH
55376: PPUSH
// if not driver or not IsInUnit ( driver ) then
55377: LD_VAR 0 1
55381: NOT
55382: PUSH
55383: LD_VAR 0 1
55387: PPUSH
55388: CALL_OW 310
55392: NOT
55393: OR
55394: IFFALSE 55398
// exit ;
55396: GO 55488
// vehicle := IsInUnit ( driver ) ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: LD_VAR 0 1
55407: PPUSH
55408: CALL_OW 310
55412: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55413: LD_VAR 0 1
55417: PPUSH
55418: LD_STRING \
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: PUSH
55448: LD_STRING E
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_VAR 0 3
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PPUSH
55484: CALL_OW 447
// end ;
55488: LD_VAR 0 2
55492: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55493: LD_INT 0
55495: PPUSH
55496: PPUSH
55497: PPUSH
// tmp := [ ] ;
55498: LD_ADDR_VAR 0 5
55502: PUSH
55503: EMPTY
55504: ST_TO_ADDR
// for i in units do
55505: LD_ADDR_VAR 0 4
55509: PUSH
55510: LD_VAR 0 1
55514: PUSH
55515: FOR_IN
55516: IFFALSE 55554
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55518: LD_ADDR_VAR 0 5
55522: PUSH
55523: LD_VAR 0 5
55527: PPUSH
55528: LD_VAR 0 5
55532: PUSH
55533: LD_INT 1
55535: PLUS
55536: PPUSH
55537: LD_VAR 0 4
55541: PPUSH
55542: CALL_OW 256
55546: PPUSH
55547: CALL_OW 2
55551: ST_TO_ADDR
55552: GO 55515
55554: POP
55555: POP
// if not tmp then
55556: LD_VAR 0 5
55560: NOT
55561: IFFALSE 55565
// exit ;
55563: GO 55613
// if asc then
55565: LD_VAR 0 2
55569: IFFALSE 55593
// result := SortListByListAsc ( units , tmp ) else
55571: LD_ADDR_VAR 0 3
55575: PUSH
55576: LD_VAR 0 1
55580: PPUSH
55581: LD_VAR 0 5
55585: PPUSH
55586: CALL_OW 76
55590: ST_TO_ADDR
55591: GO 55613
// result := SortListByListDesc ( units , tmp ) ;
55593: LD_ADDR_VAR 0 3
55597: PUSH
55598: LD_VAR 0 1
55602: PPUSH
55603: LD_VAR 0 5
55607: PPUSH
55608: CALL_OW 77
55612: ST_TO_ADDR
// end ;
55613: LD_VAR 0 3
55617: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55618: LD_INT 0
55620: PPUSH
55621: PPUSH
// task := GetTaskList ( mech ) ;
55622: LD_ADDR_VAR 0 4
55626: PUSH
55627: LD_VAR 0 1
55631: PPUSH
55632: CALL_OW 437
55636: ST_TO_ADDR
// if not task then
55637: LD_VAR 0 4
55641: NOT
55642: IFFALSE 55646
// exit ;
55644: GO 55688
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55646: LD_ADDR_VAR 0 3
55650: PUSH
55651: LD_VAR 0 4
55655: PUSH
55656: LD_INT 1
55658: ARRAY
55659: PUSH
55660: LD_INT 1
55662: ARRAY
55663: PUSH
55664: LD_STRING r
55666: EQUAL
55667: PUSH
55668: LD_VAR 0 4
55672: PUSH
55673: LD_INT 1
55675: ARRAY
55676: PUSH
55677: LD_INT 4
55679: ARRAY
55680: PUSH
55681: LD_VAR 0 2
55685: EQUAL
55686: AND
55687: ST_TO_ADDR
// end ;
55688: LD_VAR 0 3
55692: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55693: LD_INT 0
55695: PPUSH
// SetDir ( unit , d ) ;
55696: LD_VAR 0 1
55700: PPUSH
55701: LD_VAR 0 4
55705: PPUSH
55706: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55710: LD_VAR 0 1
55714: PPUSH
55715: LD_VAR 0 2
55719: PPUSH
55720: LD_VAR 0 3
55724: PPUSH
55725: LD_VAR 0 5
55729: PPUSH
55730: CALL_OW 48
// end ;
55734: LD_VAR 0 6
55738: RET
// export function ToNaturalNumber ( number ) ; begin
55739: LD_INT 0
55741: PPUSH
// result := number div 1 ;
55742: LD_ADDR_VAR 0 2
55746: PUSH
55747: LD_VAR 0 1
55751: PUSH
55752: LD_INT 1
55754: DIV
55755: ST_TO_ADDR
// if number < 0 then
55756: LD_VAR 0 1
55760: PUSH
55761: LD_INT 0
55763: LESS
55764: IFFALSE 55774
// result := 0 ;
55766: LD_ADDR_VAR 0 2
55770: PUSH
55771: LD_INT 0
55773: ST_TO_ADDR
// end ;
55774: LD_VAR 0 2
55778: RET
// export function SortByClass ( units , class ) ; var un ; begin
55779: LD_INT 0
55781: PPUSH
55782: PPUSH
// if not units or not class then
55783: LD_VAR 0 1
55787: NOT
55788: PUSH
55789: LD_VAR 0 2
55793: NOT
55794: OR
55795: IFFALSE 55799
// exit ;
55797: GO 55894
// result := [ ] ;
55799: LD_ADDR_VAR 0 3
55803: PUSH
55804: EMPTY
55805: ST_TO_ADDR
// for un in units do
55806: LD_ADDR_VAR 0 4
55810: PUSH
55811: LD_VAR 0 1
55815: PUSH
55816: FOR_IN
55817: IFFALSE 55892
// if GetClass ( un ) = class then
55819: LD_VAR 0 4
55823: PPUSH
55824: CALL_OW 257
55828: PUSH
55829: LD_VAR 0 2
55833: EQUAL
55834: IFFALSE 55861
// result := Insert ( result , 1 , un ) else
55836: LD_ADDR_VAR 0 3
55840: PUSH
55841: LD_VAR 0 3
55845: PPUSH
55846: LD_INT 1
55848: PPUSH
55849: LD_VAR 0 4
55853: PPUSH
55854: CALL_OW 2
55858: ST_TO_ADDR
55859: GO 55890
// result := Replace ( result , result + 1 , un ) ;
55861: LD_ADDR_VAR 0 3
55865: PUSH
55866: LD_VAR 0 3
55870: PPUSH
55871: LD_VAR 0 3
55875: PUSH
55876: LD_INT 1
55878: PLUS
55879: PPUSH
55880: LD_VAR 0 4
55884: PPUSH
55885: CALL_OW 1
55889: ST_TO_ADDR
55890: GO 55816
55892: POP
55893: POP
// end ;
55894: LD_VAR 0 3
55898: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55899: LD_INT 0
55901: PPUSH
55902: PPUSH
55903: PPUSH
55904: PPUSH
55905: PPUSH
55906: PPUSH
55907: PPUSH
// result := [ ] ;
55908: LD_ADDR_VAR 0 4
55912: PUSH
55913: EMPTY
55914: ST_TO_ADDR
// if x - r < 0 then
55915: LD_VAR 0 1
55919: PUSH
55920: LD_VAR 0 3
55924: MINUS
55925: PUSH
55926: LD_INT 0
55928: LESS
55929: IFFALSE 55941
// min_x := 0 else
55931: LD_ADDR_VAR 0 8
55935: PUSH
55936: LD_INT 0
55938: ST_TO_ADDR
55939: GO 55957
// min_x := x - r ;
55941: LD_ADDR_VAR 0 8
55945: PUSH
55946: LD_VAR 0 1
55950: PUSH
55951: LD_VAR 0 3
55955: MINUS
55956: ST_TO_ADDR
// if y - r < 0 then
55957: LD_VAR 0 2
55961: PUSH
55962: LD_VAR 0 3
55966: MINUS
55967: PUSH
55968: LD_INT 0
55970: LESS
55971: IFFALSE 55983
// min_y := 0 else
55973: LD_ADDR_VAR 0 7
55977: PUSH
55978: LD_INT 0
55980: ST_TO_ADDR
55981: GO 55999
// min_y := y - r ;
55983: LD_ADDR_VAR 0 7
55987: PUSH
55988: LD_VAR 0 2
55992: PUSH
55993: LD_VAR 0 3
55997: MINUS
55998: ST_TO_ADDR
// max_x := x + r ;
55999: LD_ADDR_VAR 0 9
56003: PUSH
56004: LD_VAR 0 1
56008: PUSH
56009: LD_VAR 0 3
56013: PLUS
56014: ST_TO_ADDR
// max_y := y + r ;
56015: LD_ADDR_VAR 0 10
56019: PUSH
56020: LD_VAR 0 2
56024: PUSH
56025: LD_VAR 0 3
56029: PLUS
56030: ST_TO_ADDR
// for _x = min_x to max_x do
56031: LD_ADDR_VAR 0 5
56035: PUSH
56036: DOUBLE
56037: LD_VAR 0 8
56041: DEC
56042: ST_TO_ADDR
56043: LD_VAR 0 9
56047: PUSH
56048: FOR_TO
56049: IFFALSE 56150
// for _y = min_y to max_y do
56051: LD_ADDR_VAR 0 6
56055: PUSH
56056: DOUBLE
56057: LD_VAR 0 7
56061: DEC
56062: ST_TO_ADDR
56063: LD_VAR 0 10
56067: PUSH
56068: FOR_TO
56069: IFFALSE 56146
// begin if not ValidHex ( _x , _y ) then
56071: LD_VAR 0 5
56075: PPUSH
56076: LD_VAR 0 6
56080: PPUSH
56081: CALL_OW 488
56085: NOT
56086: IFFALSE 56090
// continue ;
56088: GO 56068
// if GetResourceTypeXY ( _x , _y ) then
56090: LD_VAR 0 5
56094: PPUSH
56095: LD_VAR 0 6
56099: PPUSH
56100: CALL_OW 283
56104: IFFALSE 56144
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56106: LD_ADDR_VAR 0 4
56110: PUSH
56111: LD_VAR 0 4
56115: PPUSH
56116: LD_VAR 0 4
56120: PUSH
56121: LD_INT 1
56123: PLUS
56124: PPUSH
56125: LD_VAR 0 5
56129: PUSH
56130: LD_VAR 0 6
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PPUSH
56139: CALL_OW 1
56143: ST_TO_ADDR
// end ;
56144: GO 56068
56146: POP
56147: POP
56148: GO 56048
56150: POP
56151: POP
// end ;
56152: LD_VAR 0 4
56156: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56157: LD_INT 0
56159: PPUSH
56160: PPUSH
56161: PPUSH
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
56166: PPUSH
// if not units then
56167: LD_VAR 0 1
56171: NOT
56172: IFFALSE 56176
// exit ;
56174: GO 56687
// result := UnitFilter ( units , [ f_ok ] ) ;
56176: LD_ADDR_VAR 0 3
56180: PUSH
56181: LD_VAR 0 1
56185: PPUSH
56186: LD_INT 50
56188: PUSH
56189: EMPTY
56190: LIST
56191: PPUSH
56192: CALL_OW 72
56196: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56197: LD_ADDR_VAR 0 8
56201: PUSH
56202: LD_VAR 0 1
56206: PUSH
56207: LD_INT 1
56209: ARRAY
56210: PPUSH
56211: CALL_OW 255
56215: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56216: LD_ADDR_VAR 0 10
56220: PUSH
56221: LD_INT 29
56223: PUSH
56224: LD_EXP 111
56228: PUSH
56229: LD_INT 49
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// if not result then
56237: LD_VAR 0 3
56241: NOT
56242: IFFALSE 56246
// exit ;
56244: GO 56687
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56246: LD_ADDR_VAR 0 5
56250: PUSH
56251: LD_INT 81
56253: PUSH
56254: LD_VAR 0 8
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PPUSH
56263: CALL_OW 69
56267: ST_TO_ADDR
// for i in result do
56268: LD_ADDR_VAR 0 4
56272: PUSH
56273: LD_VAR 0 3
56277: PUSH
56278: FOR_IN
56279: IFFALSE 56685
// begin tag := GetTag ( i ) + 1 ;
56281: LD_ADDR_VAR 0 9
56285: PUSH
56286: LD_VAR 0 4
56290: PPUSH
56291: CALL_OW 110
56295: PUSH
56296: LD_INT 1
56298: PLUS
56299: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56300: LD_ADDR_VAR 0 7
56304: PUSH
56305: LD_VAR 0 4
56309: PPUSH
56310: CALL_OW 250
56314: PPUSH
56315: LD_VAR 0 4
56319: PPUSH
56320: CALL_OW 251
56324: PPUSH
56325: LD_INT 6
56327: PPUSH
56328: CALL 55899 0 3
56332: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56333: LD_VAR 0 7
56337: PUSH
56338: LD_VAR 0 4
56342: PPUSH
56343: CALL_OW 264
56347: PUSH
56348: LD_VAR 0 10
56352: IN
56353: NOT
56354: AND
56355: IFFALSE 56394
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56357: LD_VAR 0 4
56361: PPUSH
56362: LD_VAR 0 7
56366: PUSH
56367: LD_INT 1
56369: ARRAY
56370: PUSH
56371: LD_INT 1
56373: ARRAY
56374: PPUSH
56375: LD_VAR 0 7
56379: PUSH
56380: LD_INT 1
56382: ARRAY
56383: PUSH
56384: LD_INT 2
56386: ARRAY
56387: PPUSH
56388: CALL_OW 116
56392: GO 56683
// if path > tag then
56394: LD_VAR 0 2
56398: PUSH
56399: LD_VAR 0 9
56403: GREATER
56404: IFFALSE 56612
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
56406: LD_ADDR_VAR 0 6
56410: PUSH
56411: LD_VAR 0 5
56415: PPUSH
56416: LD_INT 91
56418: PUSH
56419: LD_VAR 0 4
56423: PUSH
56424: LD_INT 12
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: PPUSH
56432: CALL_OW 72
56436: ST_TO_ADDR
// if nearEnemy then
56437: LD_VAR 0 6
56441: IFFALSE 56510
// begin if GetWeapon ( i ) = ru_time_lapser then
56443: LD_VAR 0 4
56447: PPUSH
56448: CALL_OW 264
56452: PUSH
56453: LD_INT 49
56455: EQUAL
56456: IFFALSE 56484
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56458: LD_VAR 0 4
56462: PPUSH
56463: LD_VAR 0 6
56467: PPUSH
56468: LD_VAR 0 4
56472: PPUSH
56473: CALL_OW 74
56477: PPUSH
56478: CALL_OW 112
56482: GO 56508
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56484: LD_VAR 0 4
56488: PPUSH
56489: LD_VAR 0 6
56493: PPUSH
56494: LD_VAR 0 4
56498: PPUSH
56499: CALL_OW 74
56503: PPUSH
56504: CALL_OW 115
// end else
56508: GO 56610
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56510: LD_VAR 0 4
56514: PPUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_VAR 0 9
56524: ARRAY
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PPUSH
56530: LD_VAR 0 2
56534: PUSH
56535: LD_VAR 0 9
56539: ARRAY
56540: PUSH
56541: LD_INT 2
56543: ARRAY
56544: PPUSH
56545: CALL_OW 297
56549: PUSH
56550: LD_INT 6
56552: GREATER
56553: IFFALSE 56596
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56555: LD_VAR 0 4
56559: PPUSH
56560: LD_VAR 0 2
56564: PUSH
56565: LD_VAR 0 9
56569: ARRAY
56570: PUSH
56571: LD_INT 1
56573: ARRAY
56574: PPUSH
56575: LD_VAR 0 2
56579: PUSH
56580: LD_VAR 0 9
56584: ARRAY
56585: PUSH
56586: LD_INT 2
56588: ARRAY
56589: PPUSH
56590: CALL_OW 114
56594: GO 56610
// SetTag ( i , tag ) ;
56596: LD_VAR 0 4
56600: PPUSH
56601: LD_VAR 0 9
56605: PPUSH
56606: CALL_OW 109
// end else
56610: GO 56683
// if enemy then
56612: LD_VAR 0 5
56616: IFFALSE 56683
// begin if GetWeapon ( i ) = ru_time_lapser then
56618: LD_VAR 0 4
56622: PPUSH
56623: CALL_OW 264
56627: PUSH
56628: LD_INT 49
56630: EQUAL
56631: IFFALSE 56659
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56633: LD_VAR 0 4
56637: PPUSH
56638: LD_VAR 0 5
56642: PPUSH
56643: LD_VAR 0 4
56647: PPUSH
56648: CALL_OW 74
56652: PPUSH
56653: CALL_OW 112
56657: GO 56683
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56659: LD_VAR 0 4
56663: PPUSH
56664: LD_VAR 0 5
56668: PPUSH
56669: LD_VAR 0 4
56673: PPUSH
56674: CALL_OW 74
56678: PPUSH
56679: CALL_OW 115
// end ; end ;
56683: GO 56278
56685: POP
56686: POP
// end ;
56687: LD_VAR 0 3
56691: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56692: LD_INT 0
56694: PPUSH
56695: PPUSH
56696: PPUSH
// if not unit or IsInUnit ( unit ) then
56697: LD_VAR 0 1
56701: NOT
56702: PUSH
56703: LD_VAR 0 1
56707: PPUSH
56708: CALL_OW 310
56712: OR
56713: IFFALSE 56717
// exit ;
56715: GO 56808
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56717: LD_ADDR_VAR 0 4
56721: PUSH
56722: LD_VAR 0 1
56726: PPUSH
56727: CALL_OW 250
56731: PPUSH
56732: LD_VAR 0 2
56736: PPUSH
56737: LD_INT 1
56739: PPUSH
56740: CALL_OW 272
56744: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56745: LD_ADDR_VAR 0 5
56749: PUSH
56750: LD_VAR 0 1
56754: PPUSH
56755: CALL_OW 251
56759: PPUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: LD_INT 1
56767: PPUSH
56768: CALL_OW 273
56772: ST_TO_ADDR
// if ValidHex ( x , y ) then
56773: LD_VAR 0 4
56777: PPUSH
56778: LD_VAR 0 5
56782: PPUSH
56783: CALL_OW 488
56787: IFFALSE 56808
// ComTurnXY ( unit , x , y ) ;
56789: LD_VAR 0 1
56793: PPUSH
56794: LD_VAR 0 4
56798: PPUSH
56799: LD_VAR 0 5
56803: PPUSH
56804: CALL_OW 118
// end ;
56808: LD_VAR 0 3
56812: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56813: LD_INT 0
56815: PPUSH
56816: PPUSH
// result := false ;
56817: LD_ADDR_VAR 0 3
56821: PUSH
56822: LD_INT 0
56824: ST_TO_ADDR
// if not units then
56825: LD_VAR 0 2
56829: NOT
56830: IFFALSE 56834
// exit ;
56832: GO 56879
// for i in units do
56834: LD_ADDR_VAR 0 4
56838: PUSH
56839: LD_VAR 0 2
56843: PUSH
56844: FOR_IN
56845: IFFALSE 56877
// if See ( side , i ) then
56847: LD_VAR 0 1
56851: PPUSH
56852: LD_VAR 0 4
56856: PPUSH
56857: CALL_OW 292
56861: IFFALSE 56875
// begin result := true ;
56863: LD_ADDR_VAR 0 3
56867: PUSH
56868: LD_INT 1
56870: ST_TO_ADDR
// exit ;
56871: POP
56872: POP
56873: GO 56879
// end ;
56875: GO 56844
56877: POP
56878: POP
// end ;
56879: LD_VAR 0 3
56883: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56884: LD_INT 0
56886: PPUSH
56887: PPUSH
56888: PPUSH
56889: PPUSH
// if not unit or not points then
56890: LD_VAR 0 1
56894: NOT
56895: PUSH
56896: LD_VAR 0 2
56900: NOT
56901: OR
56902: IFFALSE 56906
// exit ;
56904: GO 56996
// dist := 99999 ;
56906: LD_ADDR_VAR 0 5
56910: PUSH
56911: LD_INT 99999
56913: ST_TO_ADDR
// for i in points do
56914: LD_ADDR_VAR 0 4
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: FOR_IN
56925: IFFALSE 56994
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56927: LD_ADDR_VAR 0 6
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: LD_VAR 0 4
56941: PUSH
56942: LD_INT 1
56944: ARRAY
56945: PPUSH
56946: LD_VAR 0 4
56950: PUSH
56951: LD_INT 2
56953: ARRAY
56954: PPUSH
56955: CALL_OW 297
56959: ST_TO_ADDR
// if tmpDist < dist then
56960: LD_VAR 0 6
56964: PUSH
56965: LD_VAR 0 5
56969: LESS
56970: IFFALSE 56992
// begin result := i ;
56972: LD_ADDR_VAR 0 3
56976: PUSH
56977: LD_VAR 0 4
56981: ST_TO_ADDR
// dist := tmpDist ;
56982: LD_ADDR_VAR 0 5
56986: PUSH
56987: LD_VAR 0 6
56991: ST_TO_ADDR
// end ; end ;
56992: GO 56924
56994: POP
56995: POP
// end ;
56996: LD_VAR 0 3
57000: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57001: LD_INT 0
57003: PPUSH
// uc_side := side ;
57004: LD_ADDR_OWVAR 20
57008: PUSH
57009: LD_VAR 0 1
57013: ST_TO_ADDR
// uc_nation := 3 ;
57014: LD_ADDR_OWVAR 21
57018: PUSH
57019: LD_INT 3
57021: ST_TO_ADDR
// vc_chassis := 25 ;
57022: LD_ADDR_OWVAR 37
57026: PUSH
57027: LD_INT 25
57029: ST_TO_ADDR
// vc_engine := engine_siberite ;
57030: LD_ADDR_OWVAR 39
57034: PUSH
57035: LD_INT 3
57037: ST_TO_ADDR
// vc_control := control_computer ;
57038: LD_ADDR_OWVAR 38
57042: PUSH
57043: LD_INT 3
57045: ST_TO_ADDR
// vc_weapon := 59 ;
57046: LD_ADDR_OWVAR 40
57050: PUSH
57051: LD_INT 59
57053: ST_TO_ADDR
// result := CreateVehicle ;
57054: LD_ADDR_VAR 0 5
57058: PUSH
57059: CALL_OW 45
57063: ST_TO_ADDR
// SetDir ( result , d ) ;
57064: LD_VAR 0 5
57068: PPUSH
57069: LD_VAR 0 4
57073: PPUSH
57074: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57078: LD_VAR 0 5
57082: PPUSH
57083: LD_VAR 0 2
57087: PPUSH
57088: LD_VAR 0 3
57092: PPUSH
57093: LD_INT 0
57095: PPUSH
57096: CALL_OW 48
// end ;
57100: LD_VAR 0 5
57104: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57105: LD_INT 0
57107: PPUSH
57108: PPUSH
57109: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57110: LD_ADDR_VAR 0 2
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57133: LD_VAR 0 1
57137: NOT
57138: PUSH
57139: LD_VAR 0 1
57143: PPUSH
57144: CALL_OW 264
57148: PUSH
57149: LD_INT 12
57151: PUSH
57152: LD_INT 51
57154: PUSH
57155: LD_INT 32
57157: PUSH
57158: LD_EXP 108
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: IN
57169: NOT
57170: OR
57171: IFFALSE 57175
// exit ;
57173: GO 57273
// for i := 1 to 3 do
57175: LD_ADDR_VAR 0 3
57179: PUSH
57180: DOUBLE
57181: LD_INT 1
57183: DEC
57184: ST_TO_ADDR
57185: LD_INT 3
57187: PUSH
57188: FOR_TO
57189: IFFALSE 57271
// begin tmp := GetCargo ( cargo , i ) ;
57191: LD_ADDR_VAR 0 4
57195: PUSH
57196: LD_VAR 0 1
57200: PPUSH
57201: LD_VAR 0 3
57205: PPUSH
57206: CALL_OW 289
57210: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57211: LD_ADDR_VAR 0 2
57215: PUSH
57216: LD_VAR 0 2
57220: PPUSH
57221: LD_VAR 0 3
57225: PPUSH
57226: LD_VAR 0 4
57230: PPUSH
57231: CALL_OW 1
57235: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57236: LD_ADDR_VAR 0 2
57240: PUSH
57241: LD_VAR 0 2
57245: PPUSH
57246: LD_INT 4
57248: PPUSH
57249: LD_VAR 0 2
57253: PUSH
57254: LD_INT 4
57256: ARRAY
57257: PUSH
57258: LD_VAR 0 4
57262: PLUS
57263: PPUSH
57264: CALL_OW 1
57268: ST_TO_ADDR
// end ;
57269: GO 57188
57271: POP
57272: POP
// end ;
57273: LD_VAR 0 2
57277: RET
// export function Length ( array ) ; begin
57278: LD_INT 0
57280: PPUSH
// result := array + 0 ;
57281: LD_ADDR_VAR 0 2
57285: PUSH
57286: LD_VAR 0 1
57290: PUSH
57291: LD_INT 0
57293: PLUS
57294: ST_TO_ADDR
// end ; end_of_file
57295: LD_VAR 0 2
57299: RET
// every 0 0$1 do
57300: GO 57302
57302: DISABLE
// begin enable ;
57303: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57304: LD_STRING updateTimer(
57306: PUSH
57307: LD_OWVAR 1
57311: STR
57312: PUSH
57313: LD_STRING );
57315: STR
57316: PPUSH
57317: CALL_OW 559
// end ;
57321: END
// export function SOS_MapStart ( ) ; begin
57322: LD_INT 0
57324: PPUSH
// if streamModeActive then
57325: LD_EXP 49
57329: IFFALSE 57338
// DefineStreamItems ( true ) ;
57331: LD_INT 1
57333: PPUSH
57334: CALL 58988 0 1
// UpdateFactoryWaypoints ( ) ;
57338: CALL 73058 0 0
// end ;
57342: LD_VAR 0 1
57346: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57347: LD_INT 0
57349: PPUSH
// if p2 = 100 then
57350: LD_VAR 0 2
57354: PUSH
57355: LD_INT 100
57357: EQUAL
57358: IFFALSE 58361
// begin if not StreamModeActive then
57360: LD_EXP 49
57364: NOT
57365: IFFALSE 57375
// StreamModeActive := true ;
57367: LD_ADDR_EXP 49
57371: PUSH
57372: LD_INT 1
57374: ST_TO_ADDR
// if p3 = 0 then
57375: LD_VAR 0 3
57379: PUSH
57380: LD_INT 0
57382: EQUAL
57383: IFFALSE 57389
// InitStreamMode ;
57385: CALL 58524 0 0
// if p3 = 1 then
57389: LD_VAR 0 3
57393: PUSH
57394: LD_INT 1
57396: EQUAL
57397: IFFALSE 57407
// sRocket := true ;
57399: LD_ADDR_EXP 54
57403: PUSH
57404: LD_INT 1
57406: ST_TO_ADDR
// if p3 = 2 then
57407: LD_VAR 0 3
57411: PUSH
57412: LD_INT 2
57414: EQUAL
57415: IFFALSE 57425
// sSpeed := true ;
57417: LD_ADDR_EXP 53
57421: PUSH
57422: LD_INT 1
57424: ST_TO_ADDR
// if p3 = 3 then
57425: LD_VAR 0 3
57429: PUSH
57430: LD_INT 3
57432: EQUAL
57433: IFFALSE 57443
// sEngine := true ;
57435: LD_ADDR_EXP 55
57439: PUSH
57440: LD_INT 1
57442: ST_TO_ADDR
// if p3 = 4 then
57443: LD_VAR 0 3
57447: PUSH
57448: LD_INT 4
57450: EQUAL
57451: IFFALSE 57461
// sSpec := true ;
57453: LD_ADDR_EXP 52
57457: PUSH
57458: LD_INT 1
57460: ST_TO_ADDR
// if p3 = 5 then
57461: LD_VAR 0 3
57465: PUSH
57466: LD_INT 5
57468: EQUAL
57469: IFFALSE 57479
// sLevel := true ;
57471: LD_ADDR_EXP 56
57475: PUSH
57476: LD_INT 1
57478: ST_TO_ADDR
// if p3 = 6 then
57479: LD_VAR 0 3
57483: PUSH
57484: LD_INT 6
57486: EQUAL
57487: IFFALSE 57497
// sArmoury := true ;
57489: LD_ADDR_EXP 57
57493: PUSH
57494: LD_INT 1
57496: ST_TO_ADDR
// if p3 = 7 then
57497: LD_VAR 0 3
57501: PUSH
57502: LD_INT 7
57504: EQUAL
57505: IFFALSE 57515
// sRadar := true ;
57507: LD_ADDR_EXP 58
57511: PUSH
57512: LD_INT 1
57514: ST_TO_ADDR
// if p3 = 8 then
57515: LD_VAR 0 3
57519: PUSH
57520: LD_INT 8
57522: EQUAL
57523: IFFALSE 57533
// sBunker := true ;
57525: LD_ADDR_EXP 59
57529: PUSH
57530: LD_INT 1
57532: ST_TO_ADDR
// if p3 = 9 then
57533: LD_VAR 0 3
57537: PUSH
57538: LD_INT 9
57540: EQUAL
57541: IFFALSE 57551
// sHack := true ;
57543: LD_ADDR_EXP 60
57547: PUSH
57548: LD_INT 1
57550: ST_TO_ADDR
// if p3 = 10 then
57551: LD_VAR 0 3
57555: PUSH
57556: LD_INT 10
57558: EQUAL
57559: IFFALSE 57569
// sFire := true ;
57561: LD_ADDR_EXP 61
57565: PUSH
57566: LD_INT 1
57568: ST_TO_ADDR
// if p3 = 11 then
57569: LD_VAR 0 3
57573: PUSH
57574: LD_INT 11
57576: EQUAL
57577: IFFALSE 57587
// sRefresh := true ;
57579: LD_ADDR_EXP 62
57583: PUSH
57584: LD_INT 1
57586: ST_TO_ADDR
// if p3 = 12 then
57587: LD_VAR 0 3
57591: PUSH
57592: LD_INT 12
57594: EQUAL
57595: IFFALSE 57605
// sExp := true ;
57597: LD_ADDR_EXP 63
57601: PUSH
57602: LD_INT 1
57604: ST_TO_ADDR
// if p3 = 13 then
57605: LD_VAR 0 3
57609: PUSH
57610: LD_INT 13
57612: EQUAL
57613: IFFALSE 57623
// sDepot := true ;
57615: LD_ADDR_EXP 64
57619: PUSH
57620: LD_INT 1
57622: ST_TO_ADDR
// if p3 = 14 then
57623: LD_VAR 0 3
57627: PUSH
57628: LD_INT 14
57630: EQUAL
57631: IFFALSE 57641
// sFlag := true ;
57633: LD_ADDR_EXP 65
57637: PUSH
57638: LD_INT 1
57640: ST_TO_ADDR
// if p3 = 15 then
57641: LD_VAR 0 3
57645: PUSH
57646: LD_INT 15
57648: EQUAL
57649: IFFALSE 57659
// sKamikadze := true ;
57651: LD_ADDR_EXP 73
57655: PUSH
57656: LD_INT 1
57658: ST_TO_ADDR
// if p3 = 16 then
57659: LD_VAR 0 3
57663: PUSH
57664: LD_INT 16
57666: EQUAL
57667: IFFALSE 57677
// sTroll := true ;
57669: LD_ADDR_EXP 74
57673: PUSH
57674: LD_INT 1
57676: ST_TO_ADDR
// if p3 = 17 then
57677: LD_VAR 0 3
57681: PUSH
57682: LD_INT 17
57684: EQUAL
57685: IFFALSE 57695
// sSlow := true ;
57687: LD_ADDR_EXP 75
57691: PUSH
57692: LD_INT 1
57694: ST_TO_ADDR
// if p3 = 18 then
57695: LD_VAR 0 3
57699: PUSH
57700: LD_INT 18
57702: EQUAL
57703: IFFALSE 57713
// sLack := true ;
57705: LD_ADDR_EXP 76
57709: PUSH
57710: LD_INT 1
57712: ST_TO_ADDR
// if p3 = 19 then
57713: LD_VAR 0 3
57717: PUSH
57718: LD_INT 19
57720: EQUAL
57721: IFFALSE 57731
// sTank := true ;
57723: LD_ADDR_EXP 78
57727: PUSH
57728: LD_INT 1
57730: ST_TO_ADDR
// if p3 = 20 then
57731: LD_VAR 0 3
57735: PUSH
57736: LD_INT 20
57738: EQUAL
57739: IFFALSE 57749
// sRemote := true ;
57741: LD_ADDR_EXP 79
57745: PUSH
57746: LD_INT 1
57748: ST_TO_ADDR
// if p3 = 21 then
57749: LD_VAR 0 3
57753: PUSH
57754: LD_INT 21
57756: EQUAL
57757: IFFALSE 57767
// sPowell := true ;
57759: LD_ADDR_EXP 80
57763: PUSH
57764: LD_INT 1
57766: ST_TO_ADDR
// if p3 = 22 then
57767: LD_VAR 0 3
57771: PUSH
57772: LD_INT 22
57774: EQUAL
57775: IFFALSE 57785
// sTeleport := true ;
57777: LD_ADDR_EXP 83
57781: PUSH
57782: LD_INT 1
57784: ST_TO_ADDR
// if p3 = 23 then
57785: LD_VAR 0 3
57789: PUSH
57790: LD_INT 23
57792: EQUAL
57793: IFFALSE 57803
// sOilTower := true ;
57795: LD_ADDR_EXP 85
57799: PUSH
57800: LD_INT 1
57802: ST_TO_ADDR
// if p3 = 24 then
57803: LD_VAR 0 3
57807: PUSH
57808: LD_INT 24
57810: EQUAL
57811: IFFALSE 57821
// sShovel := true ;
57813: LD_ADDR_EXP 86
57817: PUSH
57818: LD_INT 1
57820: ST_TO_ADDR
// if p3 = 25 then
57821: LD_VAR 0 3
57825: PUSH
57826: LD_INT 25
57828: EQUAL
57829: IFFALSE 57839
// sSheik := true ;
57831: LD_ADDR_EXP 87
57835: PUSH
57836: LD_INT 1
57838: ST_TO_ADDR
// if p3 = 26 then
57839: LD_VAR 0 3
57843: PUSH
57844: LD_INT 26
57846: EQUAL
57847: IFFALSE 57857
// sEarthquake := true ;
57849: LD_ADDR_EXP 89
57853: PUSH
57854: LD_INT 1
57856: ST_TO_ADDR
// if p3 = 27 then
57857: LD_VAR 0 3
57861: PUSH
57862: LD_INT 27
57864: EQUAL
57865: IFFALSE 57875
// sAI := true ;
57867: LD_ADDR_EXP 90
57871: PUSH
57872: LD_INT 1
57874: ST_TO_ADDR
// if p3 = 28 then
57875: LD_VAR 0 3
57879: PUSH
57880: LD_INT 28
57882: EQUAL
57883: IFFALSE 57893
// sCargo := true ;
57885: LD_ADDR_EXP 93
57889: PUSH
57890: LD_INT 1
57892: ST_TO_ADDR
// if p3 = 29 then
57893: LD_VAR 0 3
57897: PUSH
57898: LD_INT 29
57900: EQUAL
57901: IFFALSE 57911
// sDLaser := true ;
57903: LD_ADDR_EXP 94
57907: PUSH
57908: LD_INT 1
57910: ST_TO_ADDR
// if p3 = 30 then
57911: LD_VAR 0 3
57915: PUSH
57916: LD_INT 30
57918: EQUAL
57919: IFFALSE 57929
// sExchange := true ;
57921: LD_ADDR_EXP 95
57925: PUSH
57926: LD_INT 1
57928: ST_TO_ADDR
// if p3 = 31 then
57929: LD_VAR 0 3
57933: PUSH
57934: LD_INT 31
57936: EQUAL
57937: IFFALSE 57947
// sFac := true ;
57939: LD_ADDR_EXP 96
57943: PUSH
57944: LD_INT 1
57946: ST_TO_ADDR
// if p3 = 32 then
57947: LD_VAR 0 3
57951: PUSH
57952: LD_INT 32
57954: EQUAL
57955: IFFALSE 57965
// sPower := true ;
57957: LD_ADDR_EXP 97
57961: PUSH
57962: LD_INT 1
57964: ST_TO_ADDR
// if p3 = 33 then
57965: LD_VAR 0 3
57969: PUSH
57970: LD_INT 33
57972: EQUAL
57973: IFFALSE 57983
// sRandom := true ;
57975: LD_ADDR_EXP 98
57979: PUSH
57980: LD_INT 1
57982: ST_TO_ADDR
// if p3 = 34 then
57983: LD_VAR 0 3
57987: PUSH
57988: LD_INT 34
57990: EQUAL
57991: IFFALSE 58001
// sShield := true ;
57993: LD_ADDR_EXP 99
57997: PUSH
57998: LD_INT 1
58000: ST_TO_ADDR
// if p3 = 35 then
58001: LD_VAR 0 3
58005: PUSH
58006: LD_INT 35
58008: EQUAL
58009: IFFALSE 58019
// sTime := true ;
58011: LD_ADDR_EXP 100
58015: PUSH
58016: LD_INT 1
58018: ST_TO_ADDR
// if p3 = 36 then
58019: LD_VAR 0 3
58023: PUSH
58024: LD_INT 36
58026: EQUAL
58027: IFFALSE 58037
// sTools := true ;
58029: LD_ADDR_EXP 101
58033: PUSH
58034: LD_INT 1
58036: ST_TO_ADDR
// if p3 = 101 then
58037: LD_VAR 0 3
58041: PUSH
58042: LD_INT 101
58044: EQUAL
58045: IFFALSE 58055
// sSold := true ;
58047: LD_ADDR_EXP 66
58051: PUSH
58052: LD_INT 1
58054: ST_TO_ADDR
// if p3 = 102 then
58055: LD_VAR 0 3
58059: PUSH
58060: LD_INT 102
58062: EQUAL
58063: IFFALSE 58073
// sDiff := true ;
58065: LD_ADDR_EXP 67
58069: PUSH
58070: LD_INT 1
58072: ST_TO_ADDR
// if p3 = 103 then
58073: LD_VAR 0 3
58077: PUSH
58078: LD_INT 103
58080: EQUAL
58081: IFFALSE 58091
// sFog := true ;
58083: LD_ADDR_EXP 70
58087: PUSH
58088: LD_INT 1
58090: ST_TO_ADDR
// if p3 = 104 then
58091: LD_VAR 0 3
58095: PUSH
58096: LD_INT 104
58098: EQUAL
58099: IFFALSE 58109
// sReset := true ;
58101: LD_ADDR_EXP 71
58105: PUSH
58106: LD_INT 1
58108: ST_TO_ADDR
// if p3 = 105 then
58109: LD_VAR 0 3
58113: PUSH
58114: LD_INT 105
58116: EQUAL
58117: IFFALSE 58127
// sSun := true ;
58119: LD_ADDR_EXP 72
58123: PUSH
58124: LD_INT 1
58126: ST_TO_ADDR
// if p3 = 106 then
58127: LD_VAR 0 3
58131: PUSH
58132: LD_INT 106
58134: EQUAL
58135: IFFALSE 58145
// sTiger := true ;
58137: LD_ADDR_EXP 68
58141: PUSH
58142: LD_INT 1
58144: ST_TO_ADDR
// if p3 = 107 then
58145: LD_VAR 0 3
58149: PUSH
58150: LD_INT 107
58152: EQUAL
58153: IFFALSE 58163
// sBomb := true ;
58155: LD_ADDR_EXP 69
58159: PUSH
58160: LD_INT 1
58162: ST_TO_ADDR
// if p3 = 108 then
58163: LD_VAR 0 3
58167: PUSH
58168: LD_INT 108
58170: EQUAL
58171: IFFALSE 58181
// sWound := true ;
58173: LD_ADDR_EXP 77
58177: PUSH
58178: LD_INT 1
58180: ST_TO_ADDR
// if p3 = 109 then
58181: LD_VAR 0 3
58185: PUSH
58186: LD_INT 109
58188: EQUAL
58189: IFFALSE 58199
// sBetray := true ;
58191: LD_ADDR_EXP 81
58195: PUSH
58196: LD_INT 1
58198: ST_TO_ADDR
// if p3 = 110 then
58199: LD_VAR 0 3
58203: PUSH
58204: LD_INT 110
58206: EQUAL
58207: IFFALSE 58217
// sContamin := true ;
58209: LD_ADDR_EXP 82
58213: PUSH
58214: LD_INT 1
58216: ST_TO_ADDR
// if p3 = 111 then
58217: LD_VAR 0 3
58221: PUSH
58222: LD_INT 111
58224: EQUAL
58225: IFFALSE 58235
// sOil := true ;
58227: LD_ADDR_EXP 84
58231: PUSH
58232: LD_INT 1
58234: ST_TO_ADDR
// if p3 = 112 then
58235: LD_VAR 0 3
58239: PUSH
58240: LD_INT 112
58242: EQUAL
58243: IFFALSE 58253
// sStu := true ;
58245: LD_ADDR_EXP 88
58249: PUSH
58250: LD_INT 1
58252: ST_TO_ADDR
// if p3 = 113 then
58253: LD_VAR 0 3
58257: PUSH
58258: LD_INT 113
58260: EQUAL
58261: IFFALSE 58271
// sBazooka := true ;
58263: LD_ADDR_EXP 91
58267: PUSH
58268: LD_INT 1
58270: ST_TO_ADDR
// if p3 = 114 then
58271: LD_VAR 0 3
58275: PUSH
58276: LD_INT 114
58278: EQUAL
58279: IFFALSE 58289
// sMortar := true ;
58281: LD_ADDR_EXP 92
58285: PUSH
58286: LD_INT 1
58288: ST_TO_ADDR
// if p3 = 115 then
58289: LD_VAR 0 3
58293: PUSH
58294: LD_INT 115
58296: EQUAL
58297: IFFALSE 58307
// sRanger := true ;
58299: LD_ADDR_EXP 102
58303: PUSH
58304: LD_INT 1
58306: ST_TO_ADDR
// if p3 = 116 then
58307: LD_VAR 0 3
58311: PUSH
58312: LD_INT 116
58314: EQUAL
58315: IFFALSE 58325
// sComputer := true ;
58317: LD_ADDR_EXP 103
58321: PUSH
58322: LD_INT 1
58324: ST_TO_ADDR
// if p3 = 117 then
58325: LD_VAR 0 3
58329: PUSH
58330: LD_INT 117
58332: EQUAL
58333: IFFALSE 58343
// s30 := true ;
58335: LD_ADDR_EXP 104
58339: PUSH
58340: LD_INT 1
58342: ST_TO_ADDR
// if p3 = 118 then
58343: LD_VAR 0 3
58347: PUSH
58348: LD_INT 118
58350: EQUAL
58351: IFFALSE 58361
// s60 := true ;
58353: LD_ADDR_EXP 105
58357: PUSH
58358: LD_INT 1
58360: ST_TO_ADDR
// end ; if p2 = 101 then
58361: LD_VAR 0 2
58365: PUSH
58366: LD_INT 101
58368: EQUAL
58369: IFFALSE 58497
// begin case p3 of 1 :
58371: LD_VAR 0 3
58375: PUSH
58376: LD_INT 1
58378: DOUBLE
58379: EQUAL
58380: IFTRUE 58384
58382: GO 58391
58384: POP
// hHackUnlimitedResources ; 2 :
58385: CALL 70595 0 0
58389: GO 58497
58391: LD_INT 2
58393: DOUBLE
58394: EQUAL
58395: IFTRUE 58399
58397: GO 58406
58399: POP
// hHackSetLevel10 ; 3 :
58400: CALL 70728 0 0
58404: GO 58497
58406: LD_INT 3
58408: DOUBLE
58409: EQUAL
58410: IFTRUE 58414
58412: GO 58421
58414: POP
// hHackSetLevel10YourUnits ; 4 :
58415: CALL 70813 0 0
58419: GO 58497
58421: LD_INT 4
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58429
58427: GO 58436
58429: POP
// hHackInvincible ; 5 :
58430: CALL 71261 0 0
58434: GO 58497
58436: LD_INT 5
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58444
58442: GO 58451
58444: POP
// hHackInvisible ; 6 :
58445: CALL 71372 0 0
58449: GO 58497
58451: LD_INT 6
58453: DOUBLE
58454: EQUAL
58455: IFTRUE 58459
58457: GO 58466
58459: POP
// hHackChangeYourSide ; 7 :
58460: CALL 71429 0 0
58464: GO 58497
58466: LD_INT 7
58468: DOUBLE
58469: EQUAL
58470: IFTRUE 58474
58472: GO 58481
58474: POP
// hHackChangeUnitSide ; 8 :
58475: CALL 71471 0 0
58479: GO 58497
58481: LD_INT 8
58483: DOUBLE
58484: EQUAL
58485: IFTRUE 58489
58487: GO 58496
58489: POP
// hHackFog ; end ;
58490: CALL 71572 0 0
58494: GO 58497
58496: POP
// end ; end ;
58497: LD_VAR 0 7
58501: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
58502: GO 58504
58504: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
58505: LD_STRING initStreamRollete();
58507: PPUSH
58508: CALL_OW 559
// InitStreamMode ;
58512: CALL 58524 0 0
// DefineStreamItems ( false ) ;
58516: LD_INT 0
58518: PPUSH
58519: CALL 58988 0 1
// end ;
58523: END
// function InitStreamMode ; begin
58524: LD_INT 0
58526: PPUSH
// streamModeActive := false ;
58527: LD_ADDR_EXP 49
58531: PUSH
58532: LD_INT 0
58534: ST_TO_ADDR
// normalCounter := 36 ;
58535: LD_ADDR_EXP 50
58539: PUSH
58540: LD_INT 36
58542: ST_TO_ADDR
// hardcoreCounter := 18 ;
58543: LD_ADDR_EXP 51
58547: PUSH
58548: LD_INT 18
58550: ST_TO_ADDR
// sRocket := false ;
58551: LD_ADDR_EXP 54
58555: PUSH
58556: LD_INT 0
58558: ST_TO_ADDR
// sSpeed := false ;
58559: LD_ADDR_EXP 53
58563: PUSH
58564: LD_INT 0
58566: ST_TO_ADDR
// sEngine := false ;
58567: LD_ADDR_EXP 55
58571: PUSH
58572: LD_INT 0
58574: ST_TO_ADDR
// sSpec := false ;
58575: LD_ADDR_EXP 52
58579: PUSH
58580: LD_INT 0
58582: ST_TO_ADDR
// sLevel := false ;
58583: LD_ADDR_EXP 56
58587: PUSH
58588: LD_INT 0
58590: ST_TO_ADDR
// sArmoury := false ;
58591: LD_ADDR_EXP 57
58595: PUSH
58596: LD_INT 0
58598: ST_TO_ADDR
// sRadar := false ;
58599: LD_ADDR_EXP 58
58603: PUSH
58604: LD_INT 0
58606: ST_TO_ADDR
// sBunker := false ;
58607: LD_ADDR_EXP 59
58611: PUSH
58612: LD_INT 0
58614: ST_TO_ADDR
// sHack := false ;
58615: LD_ADDR_EXP 60
58619: PUSH
58620: LD_INT 0
58622: ST_TO_ADDR
// sFire := false ;
58623: LD_ADDR_EXP 61
58627: PUSH
58628: LD_INT 0
58630: ST_TO_ADDR
// sRefresh := false ;
58631: LD_ADDR_EXP 62
58635: PUSH
58636: LD_INT 0
58638: ST_TO_ADDR
// sExp := false ;
58639: LD_ADDR_EXP 63
58643: PUSH
58644: LD_INT 0
58646: ST_TO_ADDR
// sDepot := false ;
58647: LD_ADDR_EXP 64
58651: PUSH
58652: LD_INT 0
58654: ST_TO_ADDR
// sFlag := false ;
58655: LD_ADDR_EXP 65
58659: PUSH
58660: LD_INT 0
58662: ST_TO_ADDR
// sKamikadze := false ;
58663: LD_ADDR_EXP 73
58667: PUSH
58668: LD_INT 0
58670: ST_TO_ADDR
// sTroll := false ;
58671: LD_ADDR_EXP 74
58675: PUSH
58676: LD_INT 0
58678: ST_TO_ADDR
// sSlow := false ;
58679: LD_ADDR_EXP 75
58683: PUSH
58684: LD_INT 0
58686: ST_TO_ADDR
// sLack := false ;
58687: LD_ADDR_EXP 76
58691: PUSH
58692: LD_INT 0
58694: ST_TO_ADDR
// sTank := false ;
58695: LD_ADDR_EXP 78
58699: PUSH
58700: LD_INT 0
58702: ST_TO_ADDR
// sRemote := false ;
58703: LD_ADDR_EXP 79
58707: PUSH
58708: LD_INT 0
58710: ST_TO_ADDR
// sPowell := false ;
58711: LD_ADDR_EXP 80
58715: PUSH
58716: LD_INT 0
58718: ST_TO_ADDR
// sTeleport := false ;
58719: LD_ADDR_EXP 83
58723: PUSH
58724: LD_INT 0
58726: ST_TO_ADDR
// sOilTower := false ;
58727: LD_ADDR_EXP 85
58731: PUSH
58732: LD_INT 0
58734: ST_TO_ADDR
// sShovel := false ;
58735: LD_ADDR_EXP 86
58739: PUSH
58740: LD_INT 0
58742: ST_TO_ADDR
// sSheik := false ;
58743: LD_ADDR_EXP 87
58747: PUSH
58748: LD_INT 0
58750: ST_TO_ADDR
// sEarthquake := false ;
58751: LD_ADDR_EXP 89
58755: PUSH
58756: LD_INT 0
58758: ST_TO_ADDR
// sAI := false ;
58759: LD_ADDR_EXP 90
58763: PUSH
58764: LD_INT 0
58766: ST_TO_ADDR
// sCargo := false ;
58767: LD_ADDR_EXP 93
58771: PUSH
58772: LD_INT 0
58774: ST_TO_ADDR
// sDLaser := false ;
58775: LD_ADDR_EXP 94
58779: PUSH
58780: LD_INT 0
58782: ST_TO_ADDR
// sExchange := false ;
58783: LD_ADDR_EXP 95
58787: PUSH
58788: LD_INT 0
58790: ST_TO_ADDR
// sFac := false ;
58791: LD_ADDR_EXP 96
58795: PUSH
58796: LD_INT 0
58798: ST_TO_ADDR
// sPower := false ;
58799: LD_ADDR_EXP 97
58803: PUSH
58804: LD_INT 0
58806: ST_TO_ADDR
// sRandom := false ;
58807: LD_ADDR_EXP 98
58811: PUSH
58812: LD_INT 0
58814: ST_TO_ADDR
// sShield := false ;
58815: LD_ADDR_EXP 99
58819: PUSH
58820: LD_INT 0
58822: ST_TO_ADDR
// sTime := false ;
58823: LD_ADDR_EXP 100
58827: PUSH
58828: LD_INT 0
58830: ST_TO_ADDR
// sTools := false ;
58831: LD_ADDR_EXP 101
58835: PUSH
58836: LD_INT 0
58838: ST_TO_ADDR
// sSold := false ;
58839: LD_ADDR_EXP 66
58843: PUSH
58844: LD_INT 0
58846: ST_TO_ADDR
// sDiff := false ;
58847: LD_ADDR_EXP 67
58851: PUSH
58852: LD_INT 0
58854: ST_TO_ADDR
// sFog := false ;
58855: LD_ADDR_EXP 70
58859: PUSH
58860: LD_INT 0
58862: ST_TO_ADDR
// sReset := false ;
58863: LD_ADDR_EXP 71
58867: PUSH
58868: LD_INT 0
58870: ST_TO_ADDR
// sSun := false ;
58871: LD_ADDR_EXP 72
58875: PUSH
58876: LD_INT 0
58878: ST_TO_ADDR
// sTiger := false ;
58879: LD_ADDR_EXP 68
58883: PUSH
58884: LD_INT 0
58886: ST_TO_ADDR
// sBomb := false ;
58887: LD_ADDR_EXP 69
58891: PUSH
58892: LD_INT 0
58894: ST_TO_ADDR
// sWound := false ;
58895: LD_ADDR_EXP 77
58899: PUSH
58900: LD_INT 0
58902: ST_TO_ADDR
// sBetray := false ;
58903: LD_ADDR_EXP 81
58907: PUSH
58908: LD_INT 0
58910: ST_TO_ADDR
// sContamin := false ;
58911: LD_ADDR_EXP 82
58915: PUSH
58916: LD_INT 0
58918: ST_TO_ADDR
// sOil := false ;
58919: LD_ADDR_EXP 84
58923: PUSH
58924: LD_INT 0
58926: ST_TO_ADDR
// sStu := false ;
58927: LD_ADDR_EXP 88
58931: PUSH
58932: LD_INT 0
58934: ST_TO_ADDR
// sBazooka := false ;
58935: LD_ADDR_EXP 91
58939: PUSH
58940: LD_INT 0
58942: ST_TO_ADDR
// sMortar := false ;
58943: LD_ADDR_EXP 92
58947: PUSH
58948: LD_INT 0
58950: ST_TO_ADDR
// sRanger := false ;
58951: LD_ADDR_EXP 102
58955: PUSH
58956: LD_INT 0
58958: ST_TO_ADDR
// sComputer := false ;
58959: LD_ADDR_EXP 103
58963: PUSH
58964: LD_INT 0
58966: ST_TO_ADDR
// s30 := false ;
58967: LD_ADDR_EXP 104
58971: PUSH
58972: LD_INT 0
58974: ST_TO_ADDR
// s60 := false ;
58975: LD_ADDR_EXP 105
58979: PUSH
58980: LD_INT 0
58982: ST_TO_ADDR
// end ;
58983: LD_VAR 0 1
58987: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58988: LD_INT 0
58990: PPUSH
58991: PPUSH
58992: PPUSH
58993: PPUSH
58994: PPUSH
58995: PPUSH
58996: PPUSH
// result := [ ] ;
58997: LD_ADDR_VAR 0 2
59001: PUSH
59002: EMPTY
59003: ST_TO_ADDR
// if campaign_id = 1 then
59004: LD_OWVAR 69
59008: PUSH
59009: LD_INT 1
59011: EQUAL
59012: IFFALSE 62178
// begin case mission_number of 1 :
59014: LD_OWVAR 70
59018: PUSH
59019: LD_INT 1
59021: DOUBLE
59022: EQUAL
59023: IFTRUE 59027
59025: GO 59103
59027: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59028: LD_ADDR_VAR 0 2
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: LD_INT 11
59041: PUSH
59042: LD_INT 12
59044: PUSH
59045: LD_INT 15
59047: PUSH
59048: LD_INT 16
59050: PUSH
59051: LD_INT 22
59053: PUSH
59054: LD_INT 23
59056: PUSH
59057: LD_INT 26
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 101
59073: PUSH
59074: LD_INT 102
59076: PUSH
59077: LD_INT 106
59079: PUSH
59080: LD_INT 116
59082: PUSH
59083: LD_INT 117
59085: PUSH
59086: LD_INT 118
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: ST_TO_ADDR
59101: GO 62176
59103: LD_INT 2
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59111
59109: GO 59195
59111: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59112: LD_ADDR_VAR 0 2
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 4
59122: PUSH
59123: LD_INT 11
59125: PUSH
59126: LD_INT 12
59128: PUSH
59129: LD_INT 15
59131: PUSH
59132: LD_INT 16
59134: PUSH
59135: LD_INT 22
59137: PUSH
59138: LD_INT 23
59140: PUSH
59141: LD_INT 26
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 101
59157: PUSH
59158: LD_INT 102
59160: PUSH
59161: LD_INT 105
59163: PUSH
59164: LD_INT 106
59166: PUSH
59167: LD_INT 108
59169: PUSH
59170: LD_INT 116
59172: PUSH
59173: LD_INT 117
59175: PUSH
59176: LD_INT 118
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: ST_TO_ADDR
59193: GO 62176
59195: LD_INT 3
59197: DOUBLE
59198: EQUAL
59199: IFTRUE 59203
59201: GO 59291
59203: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59204: LD_ADDR_VAR 0 2
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: LD_INT 11
59220: PUSH
59221: LD_INT 12
59223: PUSH
59224: LD_INT 15
59226: PUSH
59227: LD_INT 16
59229: PUSH
59230: LD_INT 22
59232: PUSH
59233: LD_INT 26
59235: PUSH
59236: LD_INT 36
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 101
59253: PUSH
59254: LD_INT 102
59256: PUSH
59257: LD_INT 105
59259: PUSH
59260: LD_INT 106
59262: PUSH
59263: LD_INT 108
59265: PUSH
59266: LD_INT 116
59268: PUSH
59269: LD_INT 117
59271: PUSH
59272: LD_INT 118
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: ST_TO_ADDR
59289: GO 62176
59291: LD_INT 4
59293: DOUBLE
59294: EQUAL
59295: IFTRUE 59299
59297: GO 59395
59299: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59300: LD_ADDR_VAR 0 2
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 4
59310: PUSH
59311: LD_INT 5
59313: PUSH
59314: LD_INT 8
59316: PUSH
59317: LD_INT 11
59319: PUSH
59320: LD_INT 12
59322: PUSH
59323: LD_INT 15
59325: PUSH
59326: LD_INT 16
59328: PUSH
59329: LD_INT 22
59331: PUSH
59332: LD_INT 23
59334: PUSH
59335: LD_INT 26
59337: PUSH
59338: LD_INT 36
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 101
59357: PUSH
59358: LD_INT 102
59360: PUSH
59361: LD_INT 105
59363: PUSH
59364: LD_INT 106
59366: PUSH
59367: LD_INT 108
59369: PUSH
59370: LD_INT 116
59372: PUSH
59373: LD_INT 117
59375: PUSH
59376: LD_INT 118
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: ST_TO_ADDR
59393: GO 62176
59395: LD_INT 5
59397: DOUBLE
59398: EQUAL
59399: IFTRUE 59403
59401: GO 59515
59403: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59404: LD_ADDR_VAR 0 2
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: LD_INT 5
59417: PUSH
59418: LD_INT 6
59420: PUSH
59421: LD_INT 8
59423: PUSH
59424: LD_INT 11
59426: PUSH
59427: LD_INT 12
59429: PUSH
59430: LD_INT 15
59432: PUSH
59433: LD_INT 16
59435: PUSH
59436: LD_INT 22
59438: PUSH
59439: LD_INT 23
59441: PUSH
59442: LD_INT 25
59444: PUSH
59445: LD_INT 26
59447: PUSH
59448: LD_INT 36
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 101
59469: PUSH
59470: LD_INT 102
59472: PUSH
59473: LD_INT 105
59475: PUSH
59476: LD_INT 106
59478: PUSH
59479: LD_INT 108
59481: PUSH
59482: LD_INT 109
59484: PUSH
59485: LD_INT 112
59487: PUSH
59488: LD_INT 116
59490: PUSH
59491: LD_INT 117
59493: PUSH
59494: LD_INT 118
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: ST_TO_ADDR
59513: GO 62176
59515: LD_INT 6
59517: DOUBLE
59518: EQUAL
59519: IFTRUE 59523
59521: GO 59655
59523: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59524: LD_ADDR_VAR 0 2
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: LD_INT 4
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: LD_INT 6
59540: PUSH
59541: LD_INT 8
59543: PUSH
59544: LD_INT 11
59546: PUSH
59547: LD_INT 12
59549: PUSH
59550: LD_INT 15
59552: PUSH
59553: LD_INT 16
59555: PUSH
59556: LD_INT 20
59558: PUSH
59559: LD_INT 21
59561: PUSH
59562: LD_INT 22
59564: PUSH
59565: LD_INT 23
59567: PUSH
59568: LD_INT 25
59570: PUSH
59571: LD_INT 26
59573: PUSH
59574: LD_INT 30
59576: PUSH
59577: LD_INT 31
59579: PUSH
59580: LD_INT 32
59582: PUSH
59583: LD_INT 36
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 101
59609: PUSH
59610: LD_INT 102
59612: PUSH
59613: LD_INT 105
59615: PUSH
59616: LD_INT 106
59618: PUSH
59619: LD_INT 108
59621: PUSH
59622: LD_INT 109
59624: PUSH
59625: LD_INT 112
59627: PUSH
59628: LD_INT 116
59630: PUSH
59631: LD_INT 117
59633: PUSH
59634: LD_INT 118
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: ST_TO_ADDR
59653: GO 62176
59655: LD_INT 7
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59663
59661: GO 59775
59663: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59664: LD_ADDR_VAR 0 2
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: LD_INT 4
59674: PUSH
59675: LD_INT 5
59677: PUSH
59678: LD_INT 7
59680: PUSH
59681: LD_INT 11
59683: PUSH
59684: LD_INT 12
59686: PUSH
59687: LD_INT 15
59689: PUSH
59690: LD_INT 16
59692: PUSH
59693: LD_INT 20
59695: PUSH
59696: LD_INT 21
59698: PUSH
59699: LD_INT 22
59701: PUSH
59702: LD_INT 23
59704: PUSH
59705: LD_INT 25
59707: PUSH
59708: LD_INT 26
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 101
59729: PUSH
59730: LD_INT 102
59732: PUSH
59733: LD_INT 103
59735: PUSH
59736: LD_INT 105
59738: PUSH
59739: LD_INT 106
59741: PUSH
59742: LD_INT 108
59744: PUSH
59745: LD_INT 112
59747: PUSH
59748: LD_INT 116
59750: PUSH
59751: LD_INT 117
59753: PUSH
59754: LD_INT 118
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: ST_TO_ADDR
59773: GO 62176
59775: LD_INT 8
59777: DOUBLE
59778: EQUAL
59779: IFTRUE 59783
59781: GO 59923
59783: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59784: LD_ADDR_VAR 0 2
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 4
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: LD_INT 6
59800: PUSH
59801: LD_INT 7
59803: PUSH
59804: LD_INT 8
59806: PUSH
59807: LD_INT 11
59809: PUSH
59810: LD_INT 12
59812: PUSH
59813: LD_INT 15
59815: PUSH
59816: LD_INT 16
59818: PUSH
59819: LD_INT 20
59821: PUSH
59822: LD_INT 21
59824: PUSH
59825: LD_INT 22
59827: PUSH
59828: LD_INT 23
59830: PUSH
59831: LD_INT 25
59833: PUSH
59834: LD_INT 26
59836: PUSH
59837: LD_INT 30
59839: PUSH
59840: LD_INT 31
59842: PUSH
59843: LD_INT 32
59845: PUSH
59846: LD_INT 36
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 101
59873: PUSH
59874: LD_INT 102
59876: PUSH
59877: LD_INT 103
59879: PUSH
59880: LD_INT 105
59882: PUSH
59883: LD_INT 106
59885: PUSH
59886: LD_INT 108
59888: PUSH
59889: LD_INT 109
59891: PUSH
59892: LD_INT 112
59894: PUSH
59895: LD_INT 116
59897: PUSH
59898: LD_INT 117
59900: PUSH
59901: LD_INT 118
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: ST_TO_ADDR
59921: GO 62176
59923: LD_INT 9
59925: DOUBLE
59926: EQUAL
59927: IFTRUE 59931
59929: GO 60079
59931: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: LD_INT 5
59945: PUSH
59946: LD_INT 6
59948: PUSH
59949: LD_INT 7
59951: PUSH
59952: LD_INT 8
59954: PUSH
59955: LD_INT 11
59957: PUSH
59958: LD_INT 12
59960: PUSH
59961: LD_INT 15
59963: PUSH
59964: LD_INT 16
59966: PUSH
59967: LD_INT 20
59969: PUSH
59970: LD_INT 21
59972: PUSH
59973: LD_INT 22
59975: PUSH
59976: LD_INT 23
59978: PUSH
59979: LD_INT 25
59981: PUSH
59982: LD_INT 26
59984: PUSH
59985: LD_INT 28
59987: PUSH
59988: LD_INT 30
59990: PUSH
59991: LD_INT 31
59993: PUSH
59994: LD_INT 32
59996: PUSH
59997: LD_INT 36
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 101
60025: PUSH
60026: LD_INT 102
60028: PUSH
60029: LD_INT 103
60031: PUSH
60032: LD_INT 105
60034: PUSH
60035: LD_INT 106
60037: PUSH
60038: LD_INT 108
60040: PUSH
60041: LD_INT 109
60043: PUSH
60044: LD_INT 112
60046: PUSH
60047: LD_INT 114
60049: PUSH
60050: LD_INT 116
60052: PUSH
60053: LD_INT 117
60055: PUSH
60056: LD_INT 118
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: ST_TO_ADDR
60077: GO 62176
60079: LD_INT 10
60081: DOUBLE
60082: EQUAL
60083: IFTRUE 60087
60085: GO 60283
60087: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60088: LD_ADDR_VAR 0 2
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: LD_INT 5
60101: PUSH
60102: LD_INT 6
60104: PUSH
60105: LD_INT 7
60107: PUSH
60108: LD_INT 8
60110: PUSH
60111: LD_INT 9
60113: PUSH
60114: LD_INT 10
60116: PUSH
60117: LD_INT 11
60119: PUSH
60120: LD_INT 12
60122: PUSH
60123: LD_INT 13
60125: PUSH
60126: LD_INT 14
60128: PUSH
60129: LD_INT 15
60131: PUSH
60132: LD_INT 16
60134: PUSH
60135: LD_INT 17
60137: PUSH
60138: LD_INT 18
60140: PUSH
60141: LD_INT 19
60143: PUSH
60144: LD_INT 20
60146: PUSH
60147: LD_INT 21
60149: PUSH
60150: LD_INT 22
60152: PUSH
60153: LD_INT 23
60155: PUSH
60156: LD_INT 24
60158: PUSH
60159: LD_INT 25
60161: PUSH
60162: LD_INT 26
60164: PUSH
60165: LD_INT 28
60167: PUSH
60168: LD_INT 30
60170: PUSH
60171: LD_INT 31
60173: PUSH
60174: LD_INT 32
60176: PUSH
60177: LD_INT 36
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 101
60213: PUSH
60214: LD_INT 102
60216: PUSH
60217: LD_INT 103
60219: PUSH
60220: LD_INT 104
60222: PUSH
60223: LD_INT 105
60225: PUSH
60226: LD_INT 106
60228: PUSH
60229: LD_INT 107
60231: PUSH
60232: LD_INT 108
60234: PUSH
60235: LD_INT 109
60237: PUSH
60238: LD_INT 110
60240: PUSH
60241: LD_INT 111
60243: PUSH
60244: LD_INT 112
60246: PUSH
60247: LD_INT 114
60249: PUSH
60250: LD_INT 116
60252: PUSH
60253: LD_INT 117
60255: PUSH
60256: LD_INT 118
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: ST_TO_ADDR
60281: GO 62176
60283: LD_INT 11
60285: DOUBLE
60286: EQUAL
60287: IFTRUE 60291
60289: GO 60495
60291: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60292: LD_ADDR_VAR 0 2
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: LD_INT 4
60305: PUSH
60306: LD_INT 5
60308: PUSH
60309: LD_INT 6
60311: PUSH
60312: LD_INT 7
60314: PUSH
60315: LD_INT 8
60317: PUSH
60318: LD_INT 9
60320: PUSH
60321: LD_INT 10
60323: PUSH
60324: LD_INT 11
60326: PUSH
60327: LD_INT 12
60329: PUSH
60330: LD_INT 13
60332: PUSH
60333: LD_INT 14
60335: PUSH
60336: LD_INT 15
60338: PUSH
60339: LD_INT 16
60341: PUSH
60342: LD_INT 17
60344: PUSH
60345: LD_INT 18
60347: PUSH
60348: LD_INT 19
60350: PUSH
60351: LD_INT 20
60353: PUSH
60354: LD_INT 21
60356: PUSH
60357: LD_INT 22
60359: PUSH
60360: LD_INT 23
60362: PUSH
60363: LD_INT 24
60365: PUSH
60366: LD_INT 25
60368: PUSH
60369: LD_INT 26
60371: PUSH
60372: LD_INT 28
60374: PUSH
60375: LD_INT 30
60377: PUSH
60378: LD_INT 31
60380: PUSH
60381: LD_INT 32
60383: PUSH
60384: LD_INT 34
60386: PUSH
60387: LD_INT 36
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 101
60425: PUSH
60426: LD_INT 102
60428: PUSH
60429: LD_INT 103
60431: PUSH
60432: LD_INT 104
60434: PUSH
60435: LD_INT 105
60437: PUSH
60438: LD_INT 106
60440: PUSH
60441: LD_INT 107
60443: PUSH
60444: LD_INT 108
60446: PUSH
60447: LD_INT 109
60449: PUSH
60450: LD_INT 110
60452: PUSH
60453: LD_INT 111
60455: PUSH
60456: LD_INT 112
60458: PUSH
60459: LD_INT 114
60461: PUSH
60462: LD_INT 116
60464: PUSH
60465: LD_INT 117
60467: PUSH
60468: LD_INT 118
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: ST_TO_ADDR
60493: GO 62176
60495: LD_INT 12
60497: DOUBLE
60498: EQUAL
60499: IFTRUE 60503
60501: GO 60723
60503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60504: LD_ADDR_VAR 0 2
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: LD_INT 5
60523: PUSH
60524: LD_INT 6
60526: PUSH
60527: LD_INT 7
60529: PUSH
60530: LD_INT 8
60532: PUSH
60533: LD_INT 9
60535: PUSH
60536: LD_INT 10
60538: PUSH
60539: LD_INT 11
60541: PUSH
60542: LD_INT 12
60544: PUSH
60545: LD_INT 13
60547: PUSH
60548: LD_INT 14
60550: PUSH
60551: LD_INT 15
60553: PUSH
60554: LD_INT 16
60556: PUSH
60557: LD_INT 17
60559: PUSH
60560: LD_INT 18
60562: PUSH
60563: LD_INT 19
60565: PUSH
60566: LD_INT 20
60568: PUSH
60569: LD_INT 21
60571: PUSH
60572: LD_INT 22
60574: PUSH
60575: LD_INT 23
60577: PUSH
60578: LD_INT 24
60580: PUSH
60581: LD_INT 25
60583: PUSH
60584: LD_INT 26
60586: PUSH
60587: LD_INT 27
60589: PUSH
60590: LD_INT 28
60592: PUSH
60593: LD_INT 30
60595: PUSH
60596: LD_INT 31
60598: PUSH
60599: LD_INT 32
60601: PUSH
60602: LD_INT 33
60604: PUSH
60605: LD_INT 34
60607: PUSH
60608: LD_INT 36
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 101
60649: PUSH
60650: LD_INT 102
60652: PUSH
60653: LD_INT 103
60655: PUSH
60656: LD_INT 104
60658: PUSH
60659: LD_INT 105
60661: PUSH
60662: LD_INT 106
60664: PUSH
60665: LD_INT 107
60667: PUSH
60668: LD_INT 108
60670: PUSH
60671: LD_INT 109
60673: PUSH
60674: LD_INT 110
60676: PUSH
60677: LD_INT 111
60679: PUSH
60680: LD_INT 112
60682: PUSH
60683: LD_INT 113
60685: PUSH
60686: LD_INT 114
60688: PUSH
60689: LD_INT 116
60691: PUSH
60692: LD_INT 117
60694: PUSH
60695: LD_INT 118
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: ST_TO_ADDR
60721: GO 62176
60723: LD_INT 13
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60731
60729: GO 60939
60731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60732: LD_ADDR_VAR 0 2
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 5
60751: PUSH
60752: LD_INT 8
60754: PUSH
60755: LD_INT 9
60757: PUSH
60758: LD_INT 10
60760: PUSH
60761: LD_INT 11
60763: PUSH
60764: LD_INT 12
60766: PUSH
60767: LD_INT 14
60769: PUSH
60770: LD_INT 15
60772: PUSH
60773: LD_INT 16
60775: PUSH
60776: LD_INT 17
60778: PUSH
60779: LD_INT 18
60781: PUSH
60782: LD_INT 19
60784: PUSH
60785: LD_INT 20
60787: PUSH
60788: LD_INT 21
60790: PUSH
60791: LD_INT 22
60793: PUSH
60794: LD_INT 23
60796: PUSH
60797: LD_INT 24
60799: PUSH
60800: LD_INT 25
60802: PUSH
60803: LD_INT 26
60805: PUSH
60806: LD_INT 27
60808: PUSH
60809: LD_INT 28
60811: PUSH
60812: LD_INT 30
60814: PUSH
60815: LD_INT 31
60817: PUSH
60818: LD_INT 32
60820: PUSH
60821: LD_INT 33
60823: PUSH
60824: LD_INT 34
60826: PUSH
60827: LD_INT 36
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 101
60865: PUSH
60866: LD_INT 102
60868: PUSH
60869: LD_INT 103
60871: PUSH
60872: LD_INT 104
60874: PUSH
60875: LD_INT 105
60877: PUSH
60878: LD_INT 106
60880: PUSH
60881: LD_INT 107
60883: PUSH
60884: LD_INT 108
60886: PUSH
60887: LD_INT 109
60889: PUSH
60890: LD_INT 110
60892: PUSH
60893: LD_INT 111
60895: PUSH
60896: LD_INT 112
60898: PUSH
60899: LD_INT 113
60901: PUSH
60902: LD_INT 114
60904: PUSH
60905: LD_INT 116
60907: PUSH
60908: LD_INT 117
60910: PUSH
60911: LD_INT 118
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: ST_TO_ADDR
60937: GO 62176
60939: LD_INT 14
60941: DOUBLE
60942: EQUAL
60943: IFTRUE 60947
60945: GO 61171
60947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60948: LD_ADDR_VAR 0 2
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 3
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: LD_INT 5
60967: PUSH
60968: LD_INT 6
60970: PUSH
60971: LD_INT 7
60973: PUSH
60974: LD_INT 8
60976: PUSH
60977: LD_INT 9
60979: PUSH
60980: LD_INT 10
60982: PUSH
60983: LD_INT 11
60985: PUSH
60986: LD_INT 12
60988: PUSH
60989: LD_INT 13
60991: PUSH
60992: LD_INT 14
60994: PUSH
60995: LD_INT 15
60997: PUSH
60998: LD_INT 16
61000: PUSH
61001: LD_INT 17
61003: PUSH
61004: LD_INT 18
61006: PUSH
61007: LD_INT 19
61009: PUSH
61010: LD_INT 20
61012: PUSH
61013: LD_INT 21
61015: PUSH
61016: LD_INT 22
61018: PUSH
61019: LD_INT 23
61021: PUSH
61022: LD_INT 24
61024: PUSH
61025: LD_INT 25
61027: PUSH
61028: LD_INT 26
61030: PUSH
61031: LD_INT 27
61033: PUSH
61034: LD_INT 28
61036: PUSH
61037: LD_INT 29
61039: PUSH
61040: LD_INT 30
61042: PUSH
61043: LD_INT 31
61045: PUSH
61046: LD_INT 32
61048: PUSH
61049: LD_INT 33
61051: PUSH
61052: LD_INT 34
61054: PUSH
61055: LD_INT 36
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 101
61097: PUSH
61098: LD_INT 102
61100: PUSH
61101: LD_INT 103
61103: PUSH
61104: LD_INT 104
61106: PUSH
61107: LD_INT 105
61109: PUSH
61110: LD_INT 106
61112: PUSH
61113: LD_INT 107
61115: PUSH
61116: LD_INT 108
61118: PUSH
61119: LD_INT 109
61121: PUSH
61122: LD_INT 110
61124: PUSH
61125: LD_INT 111
61127: PUSH
61128: LD_INT 112
61130: PUSH
61131: LD_INT 113
61133: PUSH
61134: LD_INT 114
61136: PUSH
61137: LD_INT 116
61139: PUSH
61140: LD_INT 117
61142: PUSH
61143: LD_INT 118
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: ST_TO_ADDR
61169: GO 62176
61171: LD_INT 15
61173: DOUBLE
61174: EQUAL
61175: IFTRUE 61179
61177: GO 61403
61179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61180: LD_ADDR_VAR 0 2
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: LD_INT 4
61196: PUSH
61197: LD_INT 5
61199: PUSH
61200: LD_INT 6
61202: PUSH
61203: LD_INT 7
61205: PUSH
61206: LD_INT 8
61208: PUSH
61209: LD_INT 9
61211: PUSH
61212: LD_INT 10
61214: PUSH
61215: LD_INT 11
61217: PUSH
61218: LD_INT 12
61220: PUSH
61221: LD_INT 13
61223: PUSH
61224: LD_INT 14
61226: PUSH
61227: LD_INT 15
61229: PUSH
61230: LD_INT 16
61232: PUSH
61233: LD_INT 17
61235: PUSH
61236: LD_INT 18
61238: PUSH
61239: LD_INT 19
61241: PUSH
61242: LD_INT 20
61244: PUSH
61245: LD_INT 21
61247: PUSH
61248: LD_INT 22
61250: PUSH
61251: LD_INT 23
61253: PUSH
61254: LD_INT 24
61256: PUSH
61257: LD_INT 25
61259: PUSH
61260: LD_INT 26
61262: PUSH
61263: LD_INT 27
61265: PUSH
61266: LD_INT 28
61268: PUSH
61269: LD_INT 29
61271: PUSH
61272: LD_INT 30
61274: PUSH
61275: LD_INT 31
61277: PUSH
61278: LD_INT 32
61280: PUSH
61281: LD_INT 33
61283: PUSH
61284: LD_INT 34
61286: PUSH
61287: LD_INT 36
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 101
61329: PUSH
61330: LD_INT 102
61332: PUSH
61333: LD_INT 103
61335: PUSH
61336: LD_INT 104
61338: PUSH
61339: LD_INT 105
61341: PUSH
61342: LD_INT 106
61344: PUSH
61345: LD_INT 107
61347: PUSH
61348: LD_INT 108
61350: PUSH
61351: LD_INT 109
61353: PUSH
61354: LD_INT 110
61356: PUSH
61357: LD_INT 111
61359: PUSH
61360: LD_INT 112
61362: PUSH
61363: LD_INT 113
61365: PUSH
61366: LD_INT 114
61368: PUSH
61369: LD_INT 116
61371: PUSH
61372: LD_INT 117
61374: PUSH
61375: LD_INT 118
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: ST_TO_ADDR
61401: GO 62176
61403: LD_INT 16
61405: DOUBLE
61406: EQUAL
61407: IFTRUE 61411
61409: GO 61547
61411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61412: LD_ADDR_VAR 0 2
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 5
61425: PUSH
61426: LD_INT 7
61428: PUSH
61429: LD_INT 11
61431: PUSH
61432: LD_INT 12
61434: PUSH
61435: LD_INT 15
61437: PUSH
61438: LD_INT 16
61440: PUSH
61441: LD_INT 20
61443: PUSH
61444: LD_INT 21
61446: PUSH
61447: LD_INT 22
61449: PUSH
61450: LD_INT 23
61452: PUSH
61453: LD_INT 25
61455: PUSH
61456: LD_INT 26
61458: PUSH
61459: LD_INT 30
61461: PUSH
61462: LD_INT 31
61464: PUSH
61465: LD_INT 32
61467: PUSH
61468: LD_INT 33
61470: PUSH
61471: LD_INT 34
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 101
61497: PUSH
61498: LD_INT 102
61500: PUSH
61501: LD_INT 103
61503: PUSH
61504: LD_INT 106
61506: PUSH
61507: LD_INT 108
61509: PUSH
61510: LD_INT 112
61512: PUSH
61513: LD_INT 113
61515: PUSH
61516: LD_INT 114
61518: PUSH
61519: LD_INT 116
61521: PUSH
61522: LD_INT 117
61524: PUSH
61525: LD_INT 118
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: ST_TO_ADDR
61545: GO 62176
61547: LD_INT 17
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61555
61553: GO 61779
61555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61556: LD_ADDR_VAR 0 2
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: LD_INT 6
61578: PUSH
61579: LD_INT 7
61581: PUSH
61582: LD_INT 8
61584: PUSH
61585: LD_INT 9
61587: PUSH
61588: LD_INT 10
61590: PUSH
61591: LD_INT 11
61593: PUSH
61594: LD_INT 12
61596: PUSH
61597: LD_INT 13
61599: PUSH
61600: LD_INT 14
61602: PUSH
61603: LD_INT 15
61605: PUSH
61606: LD_INT 16
61608: PUSH
61609: LD_INT 17
61611: PUSH
61612: LD_INT 18
61614: PUSH
61615: LD_INT 19
61617: PUSH
61618: LD_INT 20
61620: PUSH
61621: LD_INT 21
61623: PUSH
61624: LD_INT 22
61626: PUSH
61627: LD_INT 23
61629: PUSH
61630: LD_INT 24
61632: PUSH
61633: LD_INT 25
61635: PUSH
61636: LD_INT 26
61638: PUSH
61639: LD_INT 27
61641: PUSH
61642: LD_INT 28
61644: PUSH
61645: LD_INT 29
61647: PUSH
61648: LD_INT 30
61650: PUSH
61651: LD_INT 31
61653: PUSH
61654: LD_INT 32
61656: PUSH
61657: LD_INT 33
61659: PUSH
61660: LD_INT 34
61662: PUSH
61663: LD_INT 36
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 101
61705: PUSH
61706: LD_INT 102
61708: PUSH
61709: LD_INT 103
61711: PUSH
61712: LD_INT 104
61714: PUSH
61715: LD_INT 105
61717: PUSH
61718: LD_INT 106
61720: PUSH
61721: LD_INT 107
61723: PUSH
61724: LD_INT 108
61726: PUSH
61727: LD_INT 109
61729: PUSH
61730: LD_INT 110
61732: PUSH
61733: LD_INT 111
61735: PUSH
61736: LD_INT 112
61738: PUSH
61739: LD_INT 113
61741: PUSH
61742: LD_INT 114
61744: PUSH
61745: LD_INT 116
61747: PUSH
61748: LD_INT 117
61750: PUSH
61751: LD_INT 118
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: ST_TO_ADDR
61777: GO 62176
61779: LD_INT 18
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61787
61785: GO 61935
61787: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61788: LD_ADDR_VAR 0 2
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 4
61798: PUSH
61799: LD_INT 5
61801: PUSH
61802: LD_INT 7
61804: PUSH
61805: LD_INT 11
61807: PUSH
61808: LD_INT 12
61810: PUSH
61811: LD_INT 15
61813: PUSH
61814: LD_INT 16
61816: PUSH
61817: LD_INT 20
61819: PUSH
61820: LD_INT 21
61822: PUSH
61823: LD_INT 22
61825: PUSH
61826: LD_INT 23
61828: PUSH
61829: LD_INT 25
61831: PUSH
61832: LD_INT 26
61834: PUSH
61835: LD_INT 30
61837: PUSH
61838: LD_INT 31
61840: PUSH
61841: LD_INT 32
61843: PUSH
61844: LD_INT 33
61846: PUSH
61847: LD_INT 34
61849: PUSH
61850: LD_INT 35
61852: PUSH
61853: LD_INT 36
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 101
61881: PUSH
61882: LD_INT 102
61884: PUSH
61885: LD_INT 103
61887: PUSH
61888: LD_INT 106
61890: PUSH
61891: LD_INT 108
61893: PUSH
61894: LD_INT 112
61896: PUSH
61897: LD_INT 113
61899: PUSH
61900: LD_INT 114
61902: PUSH
61903: LD_INT 115
61905: PUSH
61906: LD_INT 116
61908: PUSH
61909: LD_INT 117
61911: PUSH
61912: LD_INT 118
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: ST_TO_ADDR
61933: GO 62176
61935: LD_INT 19
61937: DOUBLE
61938: EQUAL
61939: IFTRUE 61943
61941: GO 62175
61943: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61944: LD_ADDR_VAR 0 2
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: LD_INT 6
61966: PUSH
61967: LD_INT 7
61969: PUSH
61970: LD_INT 8
61972: PUSH
61973: LD_INT 9
61975: PUSH
61976: LD_INT 10
61978: PUSH
61979: LD_INT 11
61981: PUSH
61982: LD_INT 12
61984: PUSH
61985: LD_INT 13
61987: PUSH
61988: LD_INT 14
61990: PUSH
61991: LD_INT 15
61993: PUSH
61994: LD_INT 16
61996: PUSH
61997: LD_INT 17
61999: PUSH
62000: LD_INT 18
62002: PUSH
62003: LD_INT 19
62005: PUSH
62006: LD_INT 20
62008: PUSH
62009: LD_INT 21
62011: PUSH
62012: LD_INT 22
62014: PUSH
62015: LD_INT 23
62017: PUSH
62018: LD_INT 24
62020: PUSH
62021: LD_INT 25
62023: PUSH
62024: LD_INT 26
62026: PUSH
62027: LD_INT 27
62029: PUSH
62030: LD_INT 28
62032: PUSH
62033: LD_INT 29
62035: PUSH
62036: LD_INT 30
62038: PUSH
62039: LD_INT 31
62041: PUSH
62042: LD_INT 32
62044: PUSH
62045: LD_INT 33
62047: PUSH
62048: LD_INT 34
62050: PUSH
62051: LD_INT 35
62053: PUSH
62054: LD_INT 36
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 101
62097: PUSH
62098: LD_INT 102
62100: PUSH
62101: LD_INT 103
62103: PUSH
62104: LD_INT 104
62106: PUSH
62107: LD_INT 105
62109: PUSH
62110: LD_INT 106
62112: PUSH
62113: LD_INT 107
62115: PUSH
62116: LD_INT 108
62118: PUSH
62119: LD_INT 109
62121: PUSH
62122: LD_INT 110
62124: PUSH
62125: LD_INT 111
62127: PUSH
62128: LD_INT 112
62130: PUSH
62131: LD_INT 113
62133: PUSH
62134: LD_INT 114
62136: PUSH
62137: LD_INT 115
62139: PUSH
62140: LD_INT 116
62142: PUSH
62143: LD_INT 117
62145: PUSH
62146: LD_INT 118
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: ST_TO_ADDR
62173: GO 62176
62175: POP
// end else
62176: GO 62407
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62178: LD_ADDR_VAR 0 2
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: LD_INT 3
62191: PUSH
62192: LD_INT 4
62194: PUSH
62195: LD_INT 5
62197: PUSH
62198: LD_INT 6
62200: PUSH
62201: LD_INT 7
62203: PUSH
62204: LD_INT 8
62206: PUSH
62207: LD_INT 9
62209: PUSH
62210: LD_INT 10
62212: PUSH
62213: LD_INT 11
62215: PUSH
62216: LD_INT 12
62218: PUSH
62219: LD_INT 13
62221: PUSH
62222: LD_INT 14
62224: PUSH
62225: LD_INT 15
62227: PUSH
62228: LD_INT 16
62230: PUSH
62231: LD_INT 17
62233: PUSH
62234: LD_INT 18
62236: PUSH
62237: LD_INT 19
62239: PUSH
62240: LD_INT 20
62242: PUSH
62243: LD_INT 21
62245: PUSH
62246: LD_INT 22
62248: PUSH
62249: LD_INT 23
62251: PUSH
62252: LD_INT 24
62254: PUSH
62255: LD_INT 25
62257: PUSH
62258: LD_INT 26
62260: PUSH
62261: LD_INT 27
62263: PUSH
62264: LD_INT 28
62266: PUSH
62267: LD_INT 29
62269: PUSH
62270: LD_INT 30
62272: PUSH
62273: LD_INT 31
62275: PUSH
62276: LD_INT 32
62278: PUSH
62279: LD_INT 33
62281: PUSH
62282: LD_INT 34
62284: PUSH
62285: LD_INT 35
62287: PUSH
62288: LD_INT 36
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 101
62331: PUSH
62332: LD_INT 102
62334: PUSH
62335: LD_INT 103
62337: PUSH
62338: LD_INT 104
62340: PUSH
62341: LD_INT 105
62343: PUSH
62344: LD_INT 106
62346: PUSH
62347: LD_INT 107
62349: PUSH
62350: LD_INT 108
62352: PUSH
62353: LD_INT 109
62355: PUSH
62356: LD_INT 110
62358: PUSH
62359: LD_INT 111
62361: PUSH
62362: LD_INT 112
62364: PUSH
62365: LD_INT 113
62367: PUSH
62368: LD_INT 114
62370: PUSH
62371: LD_INT 115
62373: PUSH
62374: LD_INT 116
62376: PUSH
62377: LD_INT 117
62379: PUSH
62380: LD_INT 118
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: ST_TO_ADDR
// if result then
62407: LD_VAR 0 2
62411: IFFALSE 63197
// begin normal :=  ;
62413: LD_ADDR_VAR 0 5
62417: PUSH
62418: LD_STRING 
62420: ST_TO_ADDR
// hardcore :=  ;
62421: LD_ADDR_VAR 0 6
62425: PUSH
62426: LD_STRING 
62428: ST_TO_ADDR
// active :=  ;
62429: LD_ADDR_VAR 0 7
62433: PUSH
62434: LD_STRING 
62436: ST_TO_ADDR
// for i = 1 to normalCounter do
62437: LD_ADDR_VAR 0 8
62441: PUSH
62442: DOUBLE
62443: LD_INT 1
62445: DEC
62446: ST_TO_ADDR
62447: LD_EXP 50
62451: PUSH
62452: FOR_TO
62453: IFFALSE 62554
// begin tmp := 0 ;
62455: LD_ADDR_VAR 0 3
62459: PUSH
62460: LD_STRING 0
62462: ST_TO_ADDR
// if result [ 1 ] then
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 1
62470: ARRAY
62471: IFFALSE 62536
// if result [ 1 ] [ 1 ] = i then
62473: LD_VAR 0 2
62477: PUSH
62478: LD_INT 1
62480: ARRAY
62481: PUSH
62482: LD_INT 1
62484: ARRAY
62485: PUSH
62486: LD_VAR 0 8
62490: EQUAL
62491: IFFALSE 62536
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62493: LD_ADDR_VAR 0 2
62497: PUSH
62498: LD_VAR 0 2
62502: PPUSH
62503: LD_INT 1
62505: PPUSH
62506: LD_VAR 0 2
62510: PUSH
62511: LD_INT 1
62513: ARRAY
62514: PPUSH
62515: LD_INT 1
62517: PPUSH
62518: CALL_OW 3
62522: PPUSH
62523: CALL_OW 1
62527: ST_TO_ADDR
// tmp := 1 ;
62528: LD_ADDR_VAR 0 3
62532: PUSH
62533: LD_STRING 1
62535: ST_TO_ADDR
// end ; normal := normal & tmp ;
62536: LD_ADDR_VAR 0 5
62540: PUSH
62541: LD_VAR 0 5
62545: PUSH
62546: LD_VAR 0 3
62550: STR
62551: ST_TO_ADDR
// end ;
62552: GO 62452
62554: POP
62555: POP
// for i = 1 to hardcoreCounter do
62556: LD_ADDR_VAR 0 8
62560: PUSH
62561: DOUBLE
62562: LD_INT 1
62564: DEC
62565: ST_TO_ADDR
62566: LD_EXP 51
62570: PUSH
62571: FOR_TO
62572: IFFALSE 62677
// begin tmp := 0 ;
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: LD_STRING 0
62581: ST_TO_ADDR
// if result [ 2 ] then
62582: LD_VAR 0 2
62586: PUSH
62587: LD_INT 2
62589: ARRAY
62590: IFFALSE 62659
// if result [ 2 ] [ 1 ] = 100 + i then
62592: LD_VAR 0 2
62596: PUSH
62597: LD_INT 2
62599: ARRAY
62600: PUSH
62601: LD_INT 1
62603: ARRAY
62604: PUSH
62605: LD_INT 100
62607: PUSH
62608: LD_VAR 0 8
62612: PLUS
62613: EQUAL
62614: IFFALSE 62659
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62616: LD_ADDR_VAR 0 2
62620: PUSH
62621: LD_VAR 0 2
62625: PPUSH
62626: LD_INT 2
62628: PPUSH
62629: LD_VAR 0 2
62633: PUSH
62634: LD_INT 2
62636: ARRAY
62637: PPUSH
62638: LD_INT 1
62640: PPUSH
62641: CALL_OW 3
62645: PPUSH
62646: CALL_OW 1
62650: ST_TO_ADDR
// tmp := 1 ;
62651: LD_ADDR_VAR 0 3
62655: PUSH
62656: LD_STRING 1
62658: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62659: LD_ADDR_VAR 0 6
62663: PUSH
62664: LD_VAR 0 6
62668: PUSH
62669: LD_VAR 0 3
62673: STR
62674: ST_TO_ADDR
// end ;
62675: GO 62571
62677: POP
62678: POP
// if isGameLoad then
62679: LD_VAR 0 1
62683: IFFALSE 63158
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62685: LD_ADDR_VAR 0 4
62689: PUSH
62690: LD_EXP 54
62694: PUSH
62695: LD_EXP 53
62699: PUSH
62700: LD_EXP 55
62704: PUSH
62705: LD_EXP 52
62709: PUSH
62710: LD_EXP 56
62714: PUSH
62715: LD_EXP 57
62719: PUSH
62720: LD_EXP 58
62724: PUSH
62725: LD_EXP 59
62729: PUSH
62730: LD_EXP 60
62734: PUSH
62735: LD_EXP 61
62739: PUSH
62740: LD_EXP 62
62744: PUSH
62745: LD_EXP 63
62749: PUSH
62750: LD_EXP 64
62754: PUSH
62755: LD_EXP 65
62759: PUSH
62760: LD_EXP 73
62764: PUSH
62765: LD_EXP 74
62769: PUSH
62770: LD_EXP 75
62774: PUSH
62775: LD_EXP 76
62779: PUSH
62780: LD_EXP 78
62784: PUSH
62785: LD_EXP 79
62789: PUSH
62790: LD_EXP 80
62794: PUSH
62795: LD_EXP 83
62799: PUSH
62800: LD_EXP 85
62804: PUSH
62805: LD_EXP 86
62809: PUSH
62810: LD_EXP 87
62814: PUSH
62815: LD_EXP 89
62819: PUSH
62820: LD_EXP 90
62824: PUSH
62825: LD_EXP 93
62829: PUSH
62830: LD_EXP 94
62834: PUSH
62835: LD_EXP 95
62839: PUSH
62840: LD_EXP 96
62844: PUSH
62845: LD_EXP 97
62849: PUSH
62850: LD_EXP 98
62854: PUSH
62855: LD_EXP 99
62859: PUSH
62860: LD_EXP 100
62864: PUSH
62865: LD_EXP 101
62869: PUSH
62870: LD_EXP 66
62874: PUSH
62875: LD_EXP 67
62879: PUSH
62880: LD_EXP 70
62884: PUSH
62885: LD_EXP 71
62889: PUSH
62890: LD_EXP 72
62894: PUSH
62895: LD_EXP 68
62899: PUSH
62900: LD_EXP 69
62904: PUSH
62905: LD_EXP 77
62909: PUSH
62910: LD_EXP 81
62914: PUSH
62915: LD_EXP 82
62919: PUSH
62920: LD_EXP 84
62924: PUSH
62925: LD_EXP 88
62929: PUSH
62930: LD_EXP 91
62934: PUSH
62935: LD_EXP 92
62939: PUSH
62940: LD_EXP 102
62944: PUSH
62945: LD_EXP 103
62949: PUSH
62950: LD_EXP 104
62954: PUSH
62955: LD_EXP 105
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: ST_TO_ADDR
// tmp :=  ;
63016: LD_ADDR_VAR 0 3
63020: PUSH
63021: LD_STRING 
63023: ST_TO_ADDR
// for i = 1 to normalCounter do
63024: LD_ADDR_VAR 0 8
63028: PUSH
63029: DOUBLE
63030: LD_INT 1
63032: DEC
63033: ST_TO_ADDR
63034: LD_EXP 50
63038: PUSH
63039: FOR_TO
63040: IFFALSE 63076
// begin if flags [ i ] then
63042: LD_VAR 0 4
63046: PUSH
63047: LD_VAR 0 8
63051: ARRAY
63052: IFFALSE 63074
// tmp := tmp & i & ; ;
63054: LD_ADDR_VAR 0 3
63058: PUSH
63059: LD_VAR 0 3
63063: PUSH
63064: LD_VAR 0 8
63068: STR
63069: PUSH
63070: LD_STRING ;
63072: STR
63073: ST_TO_ADDR
// end ;
63074: GO 63039
63076: POP
63077: POP
// for i = 1 to hardcoreCounter do
63078: LD_ADDR_VAR 0 8
63082: PUSH
63083: DOUBLE
63084: LD_INT 1
63086: DEC
63087: ST_TO_ADDR
63088: LD_EXP 51
63092: PUSH
63093: FOR_TO
63094: IFFALSE 63140
// begin if flags [ normalCounter + i ] then
63096: LD_VAR 0 4
63100: PUSH
63101: LD_EXP 50
63105: PUSH
63106: LD_VAR 0 8
63110: PLUS
63111: ARRAY
63112: IFFALSE 63138
// tmp := tmp & ( 100 + i ) & ; ;
63114: LD_ADDR_VAR 0 3
63118: PUSH
63119: LD_VAR 0 3
63123: PUSH
63124: LD_INT 100
63126: PUSH
63127: LD_VAR 0 8
63131: PLUS
63132: STR
63133: PUSH
63134: LD_STRING ;
63136: STR
63137: ST_TO_ADDR
// end ;
63138: GO 63093
63140: POP
63141: POP
// if tmp then
63142: LD_VAR 0 3
63146: IFFALSE 63158
// active := tmp ;
63148: LD_ADDR_VAR 0 7
63152: PUSH
63153: LD_VAR 0 3
63157: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63158: LD_STRING getStreamItemsFromMission("
63160: PUSH
63161: LD_VAR 0 5
63165: STR
63166: PUSH
63167: LD_STRING ","
63169: STR
63170: PUSH
63171: LD_VAR 0 6
63175: STR
63176: PUSH
63177: LD_STRING ","
63179: STR
63180: PUSH
63181: LD_VAR 0 7
63185: STR
63186: PUSH
63187: LD_STRING ")
63189: STR
63190: PPUSH
63191: CALL_OW 559
// end else
63195: GO 63204
// ToLua ( getStreamItemsFromMission("","","") ) ;
63197: LD_STRING getStreamItemsFromMission("","","")
63199: PPUSH
63200: CALL_OW 559
// end ;
63204: LD_VAR 0 2
63208: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63209: LD_EXP 49
63213: PUSH
63214: LD_EXP 54
63218: AND
63219: IFFALSE 63343
63221: GO 63223
63223: DISABLE
63224: LD_INT 0
63226: PPUSH
63227: PPUSH
// begin enable ;
63228: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63229: LD_ADDR_VAR 0 2
63233: PUSH
63234: LD_INT 22
63236: PUSH
63237: LD_OWVAR 2
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: LD_INT 34
63251: PUSH
63252: LD_INT 7
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 34
63261: PUSH
63262: LD_INT 45
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 34
63271: PUSH
63272: LD_INT 28
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 34
63281: PUSH
63282: LD_INT 47
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PPUSH
63300: CALL_OW 69
63304: ST_TO_ADDR
// if not tmp then
63305: LD_VAR 0 2
63309: NOT
63310: IFFALSE 63314
// exit ;
63312: GO 63343
// for i in tmp do
63314: LD_ADDR_VAR 0 1
63318: PUSH
63319: LD_VAR 0 2
63323: PUSH
63324: FOR_IN
63325: IFFALSE 63341
// begin SetLives ( i , 0 ) ;
63327: LD_VAR 0 1
63331: PPUSH
63332: LD_INT 0
63334: PPUSH
63335: CALL_OW 234
// end ;
63339: GO 63324
63341: POP
63342: POP
// end ;
63343: PPOPN 2
63345: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63346: LD_EXP 49
63350: PUSH
63351: LD_EXP 55
63355: AND
63356: IFFALSE 63440
63358: GO 63360
63360: DISABLE
63361: LD_INT 0
63363: PPUSH
63364: PPUSH
// begin enable ;
63365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63366: LD_ADDR_VAR 0 2
63370: PUSH
63371: LD_INT 22
63373: PUSH
63374: LD_OWVAR 2
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 32
63385: PUSH
63386: LD_INT 3
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PPUSH
63397: CALL_OW 69
63401: ST_TO_ADDR
// if not tmp then
63402: LD_VAR 0 2
63406: NOT
63407: IFFALSE 63411
// exit ;
63409: GO 63440
// for i in tmp do
63411: LD_ADDR_VAR 0 1
63415: PUSH
63416: LD_VAR 0 2
63420: PUSH
63421: FOR_IN
63422: IFFALSE 63438
// begin SetLives ( i , 0 ) ;
63424: LD_VAR 0 1
63428: PPUSH
63429: LD_INT 0
63431: PPUSH
63432: CALL_OW 234
// end ;
63436: GO 63421
63438: POP
63439: POP
// end ;
63440: PPOPN 2
63442: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63443: LD_EXP 49
63447: PUSH
63448: LD_EXP 52
63452: AND
63453: IFFALSE 63546
63455: GO 63457
63457: DISABLE
63458: LD_INT 0
63460: PPUSH
// begin enable ;
63461: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63462: LD_ADDR_VAR 0 1
63466: PUSH
63467: LD_INT 22
63469: PUSH
63470: LD_OWVAR 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: LD_INT 25
63484: PUSH
63485: LD_INT 5
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 25
63494: PUSH
63495: LD_INT 9
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 25
63504: PUSH
63505: LD_INT 8
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PPUSH
63522: CALL_OW 69
63526: PUSH
63527: FOR_IN
63528: IFFALSE 63544
// begin SetClass ( i , 1 ) ;
63530: LD_VAR 0 1
63534: PPUSH
63535: LD_INT 1
63537: PPUSH
63538: CALL_OW 336
// end ;
63542: GO 63527
63544: POP
63545: POP
// end ;
63546: PPOPN 1
63548: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63549: LD_EXP 49
63553: PUSH
63554: LD_EXP 53
63558: AND
63559: PUSH
63560: LD_OWVAR 65
63564: PUSH
63565: LD_INT 7
63567: LESS
63568: AND
63569: IFFALSE 63583
63571: GO 63573
63573: DISABLE
// begin enable ;
63574: ENABLE
// game_speed := 7 ;
63575: LD_ADDR_OWVAR 65
63579: PUSH
63580: LD_INT 7
63582: ST_TO_ADDR
// end ;
63583: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63584: LD_EXP 49
63588: PUSH
63589: LD_EXP 56
63593: AND
63594: IFFALSE 63796
63596: GO 63598
63598: DISABLE
63599: LD_INT 0
63601: PPUSH
63602: PPUSH
63603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63604: LD_ADDR_VAR 0 3
63608: PUSH
63609: LD_INT 81
63611: PUSH
63612: LD_OWVAR 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 21
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PPUSH
63635: CALL_OW 69
63639: ST_TO_ADDR
// if not tmp then
63640: LD_VAR 0 3
63644: NOT
63645: IFFALSE 63649
// exit ;
63647: GO 63796
// if tmp > 5 then
63649: LD_VAR 0 3
63653: PUSH
63654: LD_INT 5
63656: GREATER
63657: IFFALSE 63669
// k := 5 else
63659: LD_ADDR_VAR 0 2
63663: PUSH
63664: LD_INT 5
63666: ST_TO_ADDR
63667: GO 63679
// k := tmp ;
63669: LD_ADDR_VAR 0 2
63673: PUSH
63674: LD_VAR 0 3
63678: ST_TO_ADDR
// for i := 1 to k do
63679: LD_ADDR_VAR 0 1
63683: PUSH
63684: DOUBLE
63685: LD_INT 1
63687: DEC
63688: ST_TO_ADDR
63689: LD_VAR 0 2
63693: PUSH
63694: FOR_TO
63695: IFFALSE 63794
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63697: LD_VAR 0 3
63701: PUSH
63702: LD_VAR 0 1
63706: ARRAY
63707: PPUSH
63708: LD_VAR 0 1
63712: PUSH
63713: LD_INT 4
63715: MOD
63716: PUSH
63717: LD_INT 1
63719: PLUS
63720: PPUSH
63721: CALL_OW 259
63725: PUSH
63726: LD_INT 10
63728: LESS
63729: IFFALSE 63792
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63731: LD_VAR 0 3
63735: PUSH
63736: LD_VAR 0 1
63740: ARRAY
63741: PPUSH
63742: LD_VAR 0 1
63746: PUSH
63747: LD_INT 4
63749: MOD
63750: PUSH
63751: LD_INT 1
63753: PLUS
63754: PPUSH
63755: LD_VAR 0 3
63759: PUSH
63760: LD_VAR 0 1
63764: ARRAY
63765: PPUSH
63766: LD_VAR 0 1
63770: PUSH
63771: LD_INT 4
63773: MOD
63774: PUSH
63775: LD_INT 1
63777: PLUS
63778: PPUSH
63779: CALL_OW 259
63783: PUSH
63784: LD_INT 1
63786: PLUS
63787: PPUSH
63788: CALL_OW 237
63792: GO 63694
63794: POP
63795: POP
// end ;
63796: PPOPN 3
63798: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63799: LD_EXP 49
63803: PUSH
63804: LD_EXP 57
63808: AND
63809: IFFALSE 63829
63811: GO 63813
63813: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63814: LD_INT 4
63816: PPUSH
63817: LD_OWVAR 2
63821: PPUSH
63822: LD_INT 0
63824: PPUSH
63825: CALL_OW 324
63829: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63830: LD_EXP 49
63834: PUSH
63835: LD_EXP 86
63839: AND
63840: IFFALSE 63860
63842: GO 63844
63844: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63845: LD_INT 19
63847: PPUSH
63848: LD_OWVAR 2
63852: PPUSH
63853: LD_INT 0
63855: PPUSH
63856: CALL_OW 324
63860: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63861: LD_EXP 49
63865: PUSH
63866: LD_EXP 58
63870: AND
63871: IFFALSE 63973
63873: GO 63875
63875: DISABLE
63876: LD_INT 0
63878: PPUSH
63879: PPUSH
// begin enable ;
63880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63881: LD_ADDR_VAR 0 2
63885: PUSH
63886: LD_INT 22
63888: PUSH
63889: LD_OWVAR 2
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 34
63903: PUSH
63904: LD_INT 11
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 34
63913: PUSH
63914: LD_INT 30
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PPUSH
63930: CALL_OW 69
63934: ST_TO_ADDR
// if not tmp then
63935: LD_VAR 0 2
63939: NOT
63940: IFFALSE 63944
// exit ;
63942: GO 63973
// for i in tmp do
63944: LD_ADDR_VAR 0 1
63948: PUSH
63949: LD_VAR 0 2
63953: PUSH
63954: FOR_IN
63955: IFFALSE 63971
// begin SetLives ( i , 0 ) ;
63957: LD_VAR 0 1
63961: PPUSH
63962: LD_INT 0
63964: PPUSH
63965: CALL_OW 234
// end ;
63969: GO 63954
63971: POP
63972: POP
// end ;
63973: PPOPN 2
63975: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63976: LD_EXP 49
63980: PUSH
63981: LD_EXP 59
63985: AND
63986: IFFALSE 64006
63988: GO 63990
63990: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63991: LD_INT 32
63993: PPUSH
63994: LD_OWVAR 2
63998: PPUSH
63999: LD_INT 0
64001: PPUSH
64002: CALL_OW 324
64006: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64007: LD_EXP 49
64011: PUSH
64012: LD_EXP 60
64016: AND
64017: IFFALSE 64198
64019: GO 64021
64021: DISABLE
64022: LD_INT 0
64024: PPUSH
64025: PPUSH
64026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64027: LD_ADDR_VAR 0 2
64031: PUSH
64032: LD_INT 22
64034: PUSH
64035: LD_OWVAR 2
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 33
64046: PUSH
64047: LD_INT 3
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PPUSH
64058: CALL_OW 69
64062: ST_TO_ADDR
// if not tmp then
64063: LD_VAR 0 2
64067: NOT
64068: IFFALSE 64072
// exit ;
64070: GO 64198
// side := 0 ;
64072: LD_ADDR_VAR 0 3
64076: PUSH
64077: LD_INT 0
64079: ST_TO_ADDR
// for i := 1 to 8 do
64080: LD_ADDR_VAR 0 1
64084: PUSH
64085: DOUBLE
64086: LD_INT 1
64088: DEC
64089: ST_TO_ADDR
64090: LD_INT 8
64092: PUSH
64093: FOR_TO
64094: IFFALSE 64142
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64096: LD_OWVAR 2
64100: PUSH
64101: LD_VAR 0 1
64105: NONEQUAL
64106: PUSH
64107: LD_OWVAR 2
64111: PPUSH
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 81
64121: PUSH
64122: LD_INT 2
64124: EQUAL
64125: AND
64126: IFFALSE 64140
// begin side := i ;
64128: LD_ADDR_VAR 0 3
64132: PUSH
64133: LD_VAR 0 1
64137: ST_TO_ADDR
// break ;
64138: GO 64142
// end ;
64140: GO 64093
64142: POP
64143: POP
// if not side then
64144: LD_VAR 0 3
64148: NOT
64149: IFFALSE 64153
// exit ;
64151: GO 64198
// for i := 1 to tmp do
64153: LD_ADDR_VAR 0 1
64157: PUSH
64158: DOUBLE
64159: LD_INT 1
64161: DEC
64162: ST_TO_ADDR
64163: LD_VAR 0 2
64167: PUSH
64168: FOR_TO
64169: IFFALSE 64196
// if Prob ( 60 ) then
64171: LD_INT 60
64173: PPUSH
64174: CALL_OW 13
64178: IFFALSE 64194
// SetSide ( i , side ) ;
64180: LD_VAR 0 1
64184: PPUSH
64185: LD_VAR 0 3
64189: PPUSH
64190: CALL_OW 235
64194: GO 64168
64196: POP
64197: POP
// end ;
64198: PPOPN 3
64200: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64201: LD_EXP 49
64205: PUSH
64206: LD_EXP 62
64210: AND
64211: IFFALSE 64330
64213: GO 64215
64215: DISABLE
64216: LD_INT 0
64218: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64219: LD_ADDR_VAR 0 1
64223: PUSH
64224: LD_INT 22
64226: PUSH
64227: LD_OWVAR 2
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 21
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: LD_INT 23
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: PPUSH
64268: CALL_OW 69
64272: PUSH
64273: FOR_IN
64274: IFFALSE 64328
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64276: LD_VAR 0 1
64280: PPUSH
64281: CALL_OW 257
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: LD_INT 4
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: IN
64304: IFFALSE 64326
// SetClass ( un , rand ( 1 , 4 ) ) ;
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_INT 1
64313: PPUSH
64314: LD_INT 4
64316: PPUSH
64317: CALL_OW 12
64321: PPUSH
64322: CALL_OW 336
64326: GO 64273
64328: POP
64329: POP
// end ;
64330: PPOPN 1
64332: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64333: LD_EXP 49
64337: PUSH
64338: LD_EXP 61
64342: AND
64343: IFFALSE 64422
64345: GO 64347
64347: DISABLE
64348: LD_INT 0
64350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64351: LD_ADDR_VAR 0 1
64355: PUSH
64356: LD_INT 22
64358: PUSH
64359: LD_OWVAR 2
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 21
64370: PUSH
64371: LD_INT 3
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PPUSH
64382: CALL_OW 69
64386: ST_TO_ADDR
// if not tmp then
64387: LD_VAR 0 1
64391: NOT
64392: IFFALSE 64396
// exit ;
64394: GO 64422
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64396: LD_VAR 0 1
64400: PUSH
64401: LD_INT 1
64403: PPUSH
64404: LD_VAR 0 1
64408: PPUSH
64409: CALL_OW 12
64413: ARRAY
64414: PPUSH
64415: LD_INT 100
64417: PPUSH
64418: CALL_OW 234
// end ;
64422: PPOPN 1
64424: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64425: LD_EXP 49
64429: PUSH
64430: LD_EXP 63
64434: AND
64435: IFFALSE 64533
64437: GO 64439
64439: DISABLE
64440: LD_INT 0
64442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64443: LD_ADDR_VAR 0 1
64447: PUSH
64448: LD_INT 22
64450: PUSH
64451: LD_OWVAR 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 21
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PPUSH
64474: CALL_OW 69
64478: ST_TO_ADDR
// if not tmp then
64479: LD_VAR 0 1
64483: NOT
64484: IFFALSE 64488
// exit ;
64486: GO 64533
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64488: LD_VAR 0 1
64492: PUSH
64493: LD_INT 1
64495: PPUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 12
64505: ARRAY
64506: PPUSH
64507: LD_INT 1
64509: PPUSH
64510: LD_INT 4
64512: PPUSH
64513: CALL_OW 12
64517: PPUSH
64518: LD_INT 3000
64520: PPUSH
64521: LD_INT 9000
64523: PPUSH
64524: CALL_OW 12
64528: PPUSH
64529: CALL_OW 492
// end ;
64533: PPOPN 1
64535: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64536: LD_EXP 49
64540: PUSH
64541: LD_EXP 64
64545: AND
64546: IFFALSE 64566
64548: GO 64550
64550: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64551: LD_INT 1
64553: PPUSH
64554: LD_OWVAR 2
64558: PPUSH
64559: LD_INT 0
64561: PPUSH
64562: CALL_OW 324
64566: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64567: LD_EXP 49
64571: PUSH
64572: LD_EXP 65
64576: AND
64577: IFFALSE 64660
64579: GO 64581
64581: DISABLE
64582: LD_INT 0
64584: PPUSH
64585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64586: LD_ADDR_VAR 0 2
64590: PUSH
64591: LD_INT 22
64593: PUSH
64594: LD_OWVAR 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 21
64605: PUSH
64606: LD_INT 3
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PPUSH
64617: CALL_OW 69
64621: ST_TO_ADDR
// if not tmp then
64622: LD_VAR 0 2
64626: NOT
64627: IFFALSE 64631
// exit ;
64629: GO 64660
// for i in tmp do
64631: LD_ADDR_VAR 0 1
64635: PUSH
64636: LD_VAR 0 2
64640: PUSH
64641: FOR_IN
64642: IFFALSE 64658
// SetBLevel ( i , 10 ) ;
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_INT 10
64651: PPUSH
64652: CALL_OW 241
64656: GO 64641
64658: POP
64659: POP
// end ;
64660: PPOPN 2
64662: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64663: LD_EXP 49
64667: PUSH
64668: LD_EXP 66
64672: AND
64673: IFFALSE 64784
64675: GO 64677
64677: DISABLE
64678: LD_INT 0
64680: PPUSH
64681: PPUSH
64682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64683: LD_ADDR_VAR 0 3
64687: PUSH
64688: LD_INT 22
64690: PUSH
64691: LD_OWVAR 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 25
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PPUSH
64714: CALL_OW 69
64718: ST_TO_ADDR
// if not tmp then
64719: LD_VAR 0 3
64723: NOT
64724: IFFALSE 64728
// exit ;
64726: GO 64784
// un := tmp [ rand ( 1 , tmp ) ] ;
64728: LD_ADDR_VAR 0 2
64732: PUSH
64733: LD_VAR 0 3
64737: PUSH
64738: LD_INT 1
64740: PPUSH
64741: LD_VAR 0 3
64745: PPUSH
64746: CALL_OW 12
64750: ARRAY
64751: ST_TO_ADDR
// if Crawls ( un ) then
64752: LD_VAR 0 2
64756: PPUSH
64757: CALL_OW 318
64761: IFFALSE 64772
// ComWalk ( un ) ;
64763: LD_VAR 0 2
64767: PPUSH
64768: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64772: LD_VAR 0 2
64776: PPUSH
64777: LD_INT 5
64779: PPUSH
64780: CALL_OW 336
// end ;
64784: PPOPN 3
64786: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64787: LD_EXP 49
64791: PUSH
64792: LD_EXP 67
64796: AND
64797: PUSH
64798: LD_OWVAR 67
64802: PUSH
64803: LD_INT 4
64805: LESS
64806: AND
64807: IFFALSE 64826
64809: GO 64811
64811: DISABLE
// begin Difficulty := Difficulty + 1 ;
64812: LD_ADDR_OWVAR 67
64816: PUSH
64817: LD_OWVAR 67
64821: PUSH
64822: LD_INT 1
64824: PLUS
64825: ST_TO_ADDR
// end ;
64826: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64827: LD_EXP 49
64831: PUSH
64832: LD_EXP 68
64836: AND
64837: IFFALSE 64940
64839: GO 64841
64841: DISABLE
64842: LD_INT 0
64844: PPUSH
// begin for i := 1 to 5 do
64845: LD_ADDR_VAR 0 1
64849: PUSH
64850: DOUBLE
64851: LD_INT 1
64853: DEC
64854: ST_TO_ADDR
64855: LD_INT 5
64857: PUSH
64858: FOR_TO
64859: IFFALSE 64938
// begin uc_nation := nation_nature ;
64861: LD_ADDR_OWVAR 21
64865: PUSH
64866: LD_INT 0
64868: ST_TO_ADDR
// uc_side := 0 ;
64869: LD_ADDR_OWVAR 20
64873: PUSH
64874: LD_INT 0
64876: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64877: LD_ADDR_OWVAR 29
64881: PUSH
64882: LD_INT 12
64884: PUSH
64885: LD_INT 12
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: ST_TO_ADDR
// hc_agressivity := 20 ;
64892: LD_ADDR_OWVAR 35
64896: PUSH
64897: LD_INT 20
64899: ST_TO_ADDR
// hc_class := class_tiger ;
64900: LD_ADDR_OWVAR 28
64904: PUSH
64905: LD_INT 14
64907: ST_TO_ADDR
// hc_gallery :=  ;
64908: LD_ADDR_OWVAR 33
64912: PUSH
64913: LD_STRING 
64915: ST_TO_ADDR
// hc_name :=  ;
64916: LD_ADDR_OWVAR 26
64920: PUSH
64921: LD_STRING 
64923: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64924: CALL_OW 44
64928: PPUSH
64929: LD_INT 0
64931: PPUSH
64932: CALL_OW 51
// end ;
64936: GO 64858
64938: POP
64939: POP
// end ;
64940: PPOPN 1
64942: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64943: LD_EXP 49
64947: PUSH
64948: LD_EXP 69
64952: AND
64953: IFFALSE 64962
64955: GO 64957
64957: DISABLE
// StreamSibBomb ;
64958: CALL 64963 0 0
64962: END
// export function StreamSibBomb ; var i , x , y ; begin
64963: LD_INT 0
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
// result := false ;
64969: LD_ADDR_VAR 0 1
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// for i := 1 to 16 do
64977: LD_ADDR_VAR 0 2
64981: PUSH
64982: DOUBLE
64983: LD_INT 1
64985: DEC
64986: ST_TO_ADDR
64987: LD_INT 16
64989: PUSH
64990: FOR_TO
64991: IFFALSE 65190
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64993: LD_ADDR_VAR 0 3
64997: PUSH
64998: LD_INT 10
65000: PUSH
65001: LD_INT 20
65003: PUSH
65004: LD_INT 30
65006: PUSH
65007: LD_INT 40
65009: PUSH
65010: LD_INT 50
65012: PUSH
65013: LD_INT 60
65015: PUSH
65016: LD_INT 70
65018: PUSH
65019: LD_INT 80
65021: PUSH
65022: LD_INT 90
65024: PUSH
65025: LD_INT 100
65027: PUSH
65028: LD_INT 110
65030: PUSH
65031: LD_INT 120
65033: PUSH
65034: LD_INT 130
65036: PUSH
65037: LD_INT 140
65039: PUSH
65040: LD_INT 150
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PPUSH
65063: LD_INT 15
65065: PPUSH
65066: CALL_OW 12
65070: ARRAY
65071: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65072: LD_ADDR_VAR 0 4
65076: PUSH
65077: LD_INT 10
65079: PUSH
65080: LD_INT 20
65082: PUSH
65083: LD_INT 30
65085: PUSH
65086: LD_INT 40
65088: PUSH
65089: LD_INT 50
65091: PUSH
65092: LD_INT 60
65094: PUSH
65095: LD_INT 70
65097: PUSH
65098: LD_INT 80
65100: PUSH
65101: LD_INT 90
65103: PUSH
65104: LD_INT 100
65106: PUSH
65107: LD_INT 110
65109: PUSH
65110: LD_INT 120
65112: PUSH
65113: LD_INT 130
65115: PUSH
65116: LD_INT 140
65118: PUSH
65119: LD_INT 150
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PPUSH
65142: LD_INT 15
65144: PPUSH
65145: CALL_OW 12
65149: ARRAY
65150: ST_TO_ADDR
// if ValidHex ( x , y ) then
65151: LD_VAR 0 3
65155: PPUSH
65156: LD_VAR 0 4
65160: PPUSH
65161: CALL_OW 488
65165: IFFALSE 65188
// begin result := [ x , y ] ;
65167: LD_ADDR_VAR 0 1
65171: PUSH
65172: LD_VAR 0 3
65176: PUSH
65177: LD_VAR 0 4
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: ST_TO_ADDR
// break ;
65186: GO 65190
// end ; end ;
65188: GO 64990
65190: POP
65191: POP
// if result then
65192: LD_VAR 0 1
65196: IFFALSE 65256
// begin ToLua ( playSibBomb() ) ;
65198: LD_STRING playSibBomb()
65200: PPUSH
65201: CALL_OW 559
// wait ( 0 0$14 ) ;
65205: LD_INT 490
65207: PPUSH
65208: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65212: LD_VAR 0 1
65216: PUSH
65217: LD_INT 1
65219: ARRAY
65220: PPUSH
65221: LD_VAR 0 1
65225: PUSH
65226: LD_INT 2
65228: ARRAY
65229: PPUSH
65230: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65234: LD_VAR 0 1
65238: PUSH
65239: LD_INT 1
65241: ARRAY
65242: PPUSH
65243: LD_VAR 0 1
65247: PUSH
65248: LD_INT 2
65250: ARRAY
65251: PPUSH
65252: CALL_OW 429
// end ; end ;
65256: LD_VAR 0 1
65260: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65261: LD_EXP 49
65265: PUSH
65266: LD_EXP 71
65270: AND
65271: IFFALSE 65283
65273: GO 65275
65275: DISABLE
// YouLost (  ) ;
65276: LD_STRING 
65278: PPUSH
65279: CALL_OW 104
65283: END
// every 0 0$1 trigger StreamModeActive and sFog do
65284: LD_EXP 49
65288: PUSH
65289: LD_EXP 70
65293: AND
65294: IFFALSE 65308
65296: GO 65298
65298: DISABLE
// FogOff ( your_side ) ;
65299: LD_OWVAR 2
65303: PPUSH
65304: CALL_OW 344
65308: END
// every 0 0$1 trigger StreamModeActive and sSun do
65309: LD_EXP 49
65313: PUSH
65314: LD_EXP 72
65318: AND
65319: IFFALSE 65347
65321: GO 65323
65323: DISABLE
// begin solar_recharge_percent := 0 ;
65324: LD_ADDR_OWVAR 79
65328: PUSH
65329: LD_INT 0
65331: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65332: LD_INT 10500
65334: PPUSH
65335: CALL_OW 67
// solar_recharge_percent := 100 ;
65339: LD_ADDR_OWVAR 79
65343: PUSH
65344: LD_INT 100
65346: ST_TO_ADDR
// end ;
65347: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65348: LD_EXP 49
65352: PUSH
65353: LD_EXP 73
65357: AND
65358: IFFALSE 65597
65360: GO 65362
65362: DISABLE
65363: LD_INT 0
65365: PPUSH
65366: PPUSH
65367: PPUSH
// begin tmp := [ ] ;
65368: LD_ADDR_VAR 0 3
65372: PUSH
65373: EMPTY
65374: ST_TO_ADDR
// for i := 1 to 6 do
65375: LD_ADDR_VAR 0 1
65379: PUSH
65380: DOUBLE
65381: LD_INT 1
65383: DEC
65384: ST_TO_ADDR
65385: LD_INT 6
65387: PUSH
65388: FOR_TO
65389: IFFALSE 65494
// begin uc_nation := nation_nature ;
65391: LD_ADDR_OWVAR 21
65395: PUSH
65396: LD_INT 0
65398: ST_TO_ADDR
// uc_side := 0 ;
65399: LD_ADDR_OWVAR 20
65403: PUSH
65404: LD_INT 0
65406: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65407: LD_ADDR_OWVAR 29
65411: PUSH
65412: LD_INT 12
65414: PUSH
65415: LD_INT 12
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: ST_TO_ADDR
// hc_agressivity := 20 ;
65422: LD_ADDR_OWVAR 35
65426: PUSH
65427: LD_INT 20
65429: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65430: LD_ADDR_OWVAR 28
65434: PUSH
65435: LD_INT 17
65437: ST_TO_ADDR
// hc_gallery :=  ;
65438: LD_ADDR_OWVAR 33
65442: PUSH
65443: LD_STRING 
65445: ST_TO_ADDR
// hc_name :=  ;
65446: LD_ADDR_OWVAR 26
65450: PUSH
65451: LD_STRING 
65453: ST_TO_ADDR
// un := CreateHuman ;
65454: LD_ADDR_VAR 0 2
65458: PUSH
65459: CALL_OW 44
65463: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65464: LD_VAR 0 2
65468: PPUSH
65469: LD_INT 1
65471: PPUSH
65472: CALL_OW 51
// tmp := tmp ^ un ;
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: LD_VAR 0 3
65485: PUSH
65486: LD_VAR 0 2
65490: ADD
65491: ST_TO_ADDR
// end ;
65492: GO 65388
65494: POP
65495: POP
// repeat wait ( 0 0$1 ) ;
65496: LD_INT 35
65498: PPUSH
65499: CALL_OW 67
// for un in tmp do
65503: LD_ADDR_VAR 0 2
65507: PUSH
65508: LD_VAR 0 3
65512: PUSH
65513: FOR_IN
65514: IFFALSE 65588
// begin if IsDead ( un ) then
65516: LD_VAR 0 2
65520: PPUSH
65521: CALL_OW 301
65525: IFFALSE 65545
// begin tmp := tmp diff un ;
65527: LD_ADDR_VAR 0 3
65531: PUSH
65532: LD_VAR 0 3
65536: PUSH
65537: LD_VAR 0 2
65541: DIFF
65542: ST_TO_ADDR
// continue ;
65543: GO 65513
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65545: LD_VAR 0 2
65549: PPUSH
65550: LD_INT 3
65552: PUSH
65553: LD_INT 22
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PPUSH
65567: CALL_OW 69
65571: PPUSH
65572: LD_VAR 0 2
65576: PPUSH
65577: CALL_OW 74
65581: PPUSH
65582: CALL_OW 115
// end ;
65586: GO 65513
65588: POP
65589: POP
// until not tmp ;
65590: LD_VAR 0 3
65594: NOT
65595: IFFALSE 65496
// end ;
65597: PPOPN 3
65599: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65600: LD_EXP 49
65604: PUSH
65605: LD_EXP 74
65609: AND
65610: IFFALSE 65664
65612: GO 65614
65614: DISABLE
// begin ToLua ( displayTroll(); ) ;
65615: LD_STRING displayTroll();
65617: PPUSH
65618: CALL_OW 559
// wait ( 3 3$00 ) ;
65622: LD_INT 6300
65624: PPUSH
65625: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65629: LD_STRING hideTroll();
65631: PPUSH
65632: CALL_OW 559
// wait ( 1 1$00 ) ;
65636: LD_INT 2100
65638: PPUSH
65639: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65643: LD_STRING displayTroll();
65645: PPUSH
65646: CALL_OW 559
// wait ( 1 1$00 ) ;
65650: LD_INT 2100
65652: PPUSH
65653: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65657: LD_STRING hideTroll();
65659: PPUSH
65660: CALL_OW 559
// end ;
65664: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65665: LD_EXP 49
65669: PUSH
65670: LD_EXP 75
65674: AND
65675: IFFALSE 65738
65677: GO 65679
65679: DISABLE
65680: LD_INT 0
65682: PPUSH
// begin p := 0 ;
65683: LD_ADDR_VAR 0 1
65687: PUSH
65688: LD_INT 0
65690: ST_TO_ADDR
// repeat game_speed := 1 ;
65691: LD_ADDR_OWVAR 65
65695: PUSH
65696: LD_INT 1
65698: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65699: LD_INT 35
65701: PPUSH
65702: CALL_OW 67
// p := p + 1 ;
65706: LD_ADDR_VAR 0 1
65710: PUSH
65711: LD_VAR 0 1
65715: PUSH
65716: LD_INT 1
65718: PLUS
65719: ST_TO_ADDR
// until p >= 60 ;
65720: LD_VAR 0 1
65724: PUSH
65725: LD_INT 60
65727: GREATEREQUAL
65728: IFFALSE 65691
// game_speed := 4 ;
65730: LD_ADDR_OWVAR 65
65734: PUSH
65735: LD_INT 4
65737: ST_TO_ADDR
// end ;
65738: PPOPN 1
65740: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65741: LD_EXP 49
65745: PUSH
65746: LD_EXP 76
65750: AND
65751: IFFALSE 65897
65753: GO 65755
65755: DISABLE
65756: LD_INT 0
65758: PPUSH
65759: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65760: LD_ADDR_VAR 0 1
65764: PUSH
65765: LD_INT 22
65767: PUSH
65768: LD_OWVAR 2
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: LD_INT 30
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 30
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PPUSH
65809: CALL_OW 69
65813: ST_TO_ADDR
// if not depot then
65814: LD_VAR 0 1
65818: NOT
65819: IFFALSE 65823
// exit ;
65821: GO 65897
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 1
65835: PPUSH
65836: LD_VAR 0 1
65840: PPUSH
65841: CALL_OW 12
65845: ARRAY
65846: PPUSH
65847: CALL_OW 274
65851: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65852: LD_VAR 0 2
65856: PPUSH
65857: LD_INT 1
65859: PPUSH
65860: LD_INT 0
65862: PPUSH
65863: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65867: LD_VAR 0 2
65871: PPUSH
65872: LD_INT 2
65874: PPUSH
65875: LD_INT 0
65877: PPUSH
65878: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65882: LD_VAR 0 2
65886: PPUSH
65887: LD_INT 3
65889: PPUSH
65890: LD_INT 0
65892: PPUSH
65893: CALL_OW 277
// end ;
65897: PPOPN 2
65899: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65900: LD_EXP 49
65904: PUSH
65905: LD_EXP 77
65909: AND
65910: IFFALSE 66007
65912: GO 65914
65914: DISABLE
65915: LD_INT 0
65917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65918: LD_ADDR_VAR 0 1
65922: PUSH
65923: LD_INT 22
65925: PUSH
65926: LD_OWVAR 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 21
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: PUSH
65948: LD_INT 23
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: PPUSH
65967: CALL_OW 69
65971: ST_TO_ADDR
// if not tmp then
65972: LD_VAR 0 1
65976: NOT
65977: IFFALSE 65981
// exit ;
65979: GO 66007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65981: LD_VAR 0 1
65985: PUSH
65986: LD_INT 1
65988: PPUSH
65989: LD_VAR 0 1
65993: PPUSH
65994: CALL_OW 12
65998: ARRAY
65999: PPUSH
66000: LD_INT 200
66002: PPUSH
66003: CALL_OW 234
// end ;
66007: PPOPN 1
66009: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66010: LD_EXP 49
66014: PUSH
66015: LD_EXP 78
66019: AND
66020: IFFALSE 66099
66022: GO 66024
66024: DISABLE
66025: LD_INT 0
66027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66028: LD_ADDR_VAR 0 1
66032: PUSH
66033: LD_INT 22
66035: PUSH
66036: LD_OWVAR 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 21
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PPUSH
66059: CALL_OW 69
66063: ST_TO_ADDR
// if not tmp then
66064: LD_VAR 0 1
66068: NOT
66069: IFFALSE 66073
// exit ;
66071: GO 66099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66073: LD_VAR 0 1
66077: PUSH
66078: LD_INT 1
66080: PPUSH
66081: LD_VAR 0 1
66085: PPUSH
66086: CALL_OW 12
66090: ARRAY
66091: PPUSH
66092: LD_INT 60
66094: PPUSH
66095: CALL_OW 234
// end ;
66099: PPOPN 1
66101: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66102: LD_EXP 49
66106: PUSH
66107: LD_EXP 79
66111: AND
66112: IFFALSE 66211
66114: GO 66116
66116: DISABLE
66117: LD_INT 0
66119: PPUSH
66120: PPUSH
// begin enable ;
66121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66122: LD_ADDR_VAR 0 1
66126: PUSH
66127: LD_INT 22
66129: PUSH
66130: LD_OWVAR 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 61
66141: PUSH
66142: EMPTY
66143: LIST
66144: PUSH
66145: LD_INT 33
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: LIST
66159: PPUSH
66160: CALL_OW 69
66164: ST_TO_ADDR
// if not tmp then
66165: LD_VAR 0 1
66169: NOT
66170: IFFALSE 66174
// exit ;
66172: GO 66211
// for i in tmp do
66174: LD_ADDR_VAR 0 2
66178: PUSH
66179: LD_VAR 0 1
66183: PUSH
66184: FOR_IN
66185: IFFALSE 66209
// if IsControledBy ( i ) then
66187: LD_VAR 0 2
66191: PPUSH
66192: CALL_OW 312
66196: IFFALSE 66207
// ComUnlink ( i ) ;
66198: LD_VAR 0 2
66202: PPUSH
66203: CALL_OW 136
66207: GO 66184
66209: POP
66210: POP
// end ;
66211: PPOPN 2
66213: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66214: LD_EXP 49
66218: PUSH
66219: LD_EXP 80
66223: AND
66224: IFFALSE 66364
66226: GO 66228
66228: DISABLE
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
// begin ToLua ( displayPowell(); ) ;
66233: LD_STRING displayPowell();
66235: PPUSH
66236: CALL_OW 559
// uc_side := 0 ;
66240: LD_ADDR_OWVAR 20
66244: PUSH
66245: LD_INT 0
66247: ST_TO_ADDR
// uc_nation := 2 ;
66248: LD_ADDR_OWVAR 21
66252: PUSH
66253: LD_INT 2
66255: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66256: LD_ADDR_OWVAR 37
66260: PUSH
66261: LD_INT 14
66263: ST_TO_ADDR
// vc_engine := engine_siberite ;
66264: LD_ADDR_OWVAR 39
66268: PUSH
66269: LD_INT 3
66271: ST_TO_ADDR
// vc_control := control_apeman ;
66272: LD_ADDR_OWVAR 38
66276: PUSH
66277: LD_INT 5
66279: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66280: LD_ADDR_OWVAR 40
66284: PUSH
66285: LD_INT 29
66287: ST_TO_ADDR
// un := CreateVehicle ;
66288: LD_ADDR_VAR 0 2
66292: PUSH
66293: CALL_OW 45
66297: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66298: LD_VAR 0 2
66302: PPUSH
66303: LD_INT 1
66305: PPUSH
66306: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66310: LD_INT 35
66312: PPUSH
66313: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66317: LD_VAR 0 2
66321: PPUSH
66322: LD_INT 22
66324: PUSH
66325: LD_OWVAR 2
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PPUSH
66334: CALL_OW 69
66338: PPUSH
66339: LD_VAR 0 2
66343: PPUSH
66344: CALL_OW 74
66348: PPUSH
66349: CALL_OW 115
// until IsDead ( un ) ;
66353: LD_VAR 0 2
66357: PPUSH
66358: CALL_OW 301
66362: IFFALSE 66310
// end ;
66364: PPOPN 2
66366: END
// every 0 0$1 trigger StreamModeActive and sStu do
66367: LD_EXP 49
66371: PUSH
66372: LD_EXP 88
66376: AND
66377: IFFALSE 66393
66379: GO 66381
66381: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66382: LD_STRING displayStucuk();
66384: PPUSH
66385: CALL_OW 559
// ResetFog ;
66389: CALL_OW 335
// end ;
66393: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66394: LD_EXP 49
66398: PUSH
66399: LD_EXP 81
66403: AND
66404: IFFALSE 66545
66406: GO 66408
66408: DISABLE
66409: LD_INT 0
66411: PPUSH
66412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66413: LD_ADDR_VAR 0 2
66417: PUSH
66418: LD_INT 22
66420: PUSH
66421: LD_OWVAR 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 21
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PPUSH
66444: CALL_OW 69
66448: ST_TO_ADDR
// if not tmp then
66449: LD_VAR 0 2
66453: NOT
66454: IFFALSE 66458
// exit ;
66456: GO 66545
// un := tmp [ rand ( 1 , tmp ) ] ;
66458: LD_ADDR_VAR 0 1
66462: PUSH
66463: LD_VAR 0 2
66467: PUSH
66468: LD_INT 1
66470: PPUSH
66471: LD_VAR 0 2
66475: PPUSH
66476: CALL_OW 12
66480: ARRAY
66481: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66482: LD_VAR 0 1
66486: PPUSH
66487: LD_INT 0
66489: PPUSH
66490: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66494: LD_VAR 0 1
66498: PPUSH
66499: LD_OWVAR 3
66503: PUSH
66504: LD_VAR 0 1
66508: DIFF
66509: PPUSH
66510: LD_VAR 0 1
66514: PPUSH
66515: CALL_OW 74
66519: PPUSH
66520: CALL_OW 115
// wait ( 0 0$20 ) ;
66524: LD_INT 700
66526: PPUSH
66527: CALL_OW 67
// SetSide ( un , your_side ) ;
66531: LD_VAR 0 1
66535: PPUSH
66536: LD_OWVAR 2
66540: PPUSH
66541: CALL_OW 235
// end ;
66545: PPOPN 2
66547: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66548: LD_EXP 49
66552: PUSH
66553: LD_EXP 82
66557: AND
66558: IFFALSE 66664
66560: GO 66562
66562: DISABLE
66563: LD_INT 0
66565: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66566: LD_ADDR_VAR 0 1
66570: PUSH
66571: LD_INT 22
66573: PUSH
66574: LD_OWVAR 2
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: LD_INT 30
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 30
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: LIST
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PPUSH
66615: CALL_OW 69
66619: ST_TO_ADDR
// if not depot then
66620: LD_VAR 0 1
66624: NOT
66625: IFFALSE 66629
// exit ;
66627: GO 66664
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66629: LD_VAR 0 1
66633: PUSH
66634: LD_INT 1
66636: ARRAY
66637: PPUSH
66638: CALL_OW 250
66642: PPUSH
66643: LD_VAR 0 1
66647: PUSH
66648: LD_INT 1
66650: ARRAY
66651: PPUSH
66652: CALL_OW 251
66656: PPUSH
66657: LD_INT 70
66659: PPUSH
66660: CALL_OW 495
// end ;
66664: PPOPN 1
66666: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66667: LD_EXP 49
66671: PUSH
66672: LD_EXP 83
66676: AND
66677: IFFALSE 66888
66679: GO 66681
66681: DISABLE
66682: LD_INT 0
66684: PPUSH
66685: PPUSH
66686: PPUSH
66687: PPUSH
66688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66689: LD_ADDR_VAR 0 5
66693: PUSH
66694: LD_INT 22
66696: PUSH
66697: LD_OWVAR 2
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 21
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PPUSH
66720: CALL_OW 69
66724: ST_TO_ADDR
// if not tmp then
66725: LD_VAR 0 5
66729: NOT
66730: IFFALSE 66734
// exit ;
66732: GO 66888
// for i in tmp do
66734: LD_ADDR_VAR 0 1
66738: PUSH
66739: LD_VAR 0 5
66743: PUSH
66744: FOR_IN
66745: IFFALSE 66886
// begin d := rand ( 0 , 5 ) ;
66747: LD_ADDR_VAR 0 4
66751: PUSH
66752: LD_INT 0
66754: PPUSH
66755: LD_INT 5
66757: PPUSH
66758: CALL_OW 12
66762: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66763: LD_ADDR_VAR 0 2
66767: PUSH
66768: LD_VAR 0 1
66772: PPUSH
66773: CALL_OW 250
66777: PPUSH
66778: LD_VAR 0 4
66782: PPUSH
66783: LD_INT 3
66785: PPUSH
66786: LD_INT 12
66788: PPUSH
66789: CALL_OW 12
66793: PPUSH
66794: CALL_OW 272
66798: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66799: LD_ADDR_VAR 0 3
66803: PUSH
66804: LD_VAR 0 1
66808: PPUSH
66809: CALL_OW 251
66813: PPUSH
66814: LD_VAR 0 4
66818: PPUSH
66819: LD_INT 3
66821: PPUSH
66822: LD_INT 12
66824: PPUSH
66825: CALL_OW 12
66829: PPUSH
66830: CALL_OW 273
66834: ST_TO_ADDR
// if ValidHex ( x , y ) then
66835: LD_VAR 0 2
66839: PPUSH
66840: LD_VAR 0 3
66844: PPUSH
66845: CALL_OW 488
66849: IFFALSE 66884
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66851: LD_VAR 0 1
66855: PPUSH
66856: LD_VAR 0 2
66860: PPUSH
66861: LD_VAR 0 3
66865: PPUSH
66866: LD_INT 3
66868: PPUSH
66869: LD_INT 6
66871: PPUSH
66872: CALL_OW 12
66876: PPUSH
66877: LD_INT 1
66879: PPUSH
66880: CALL_OW 483
// end ;
66884: GO 66744
66886: POP
66887: POP
// end ;
66888: PPOPN 5
66890: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66891: LD_EXP 49
66895: PUSH
66896: LD_EXP 84
66900: AND
66901: IFFALSE 66995
66903: GO 66905
66905: DISABLE
66906: LD_INT 0
66908: PPUSH
66909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66910: LD_ADDR_VAR 0 2
66914: PUSH
66915: LD_INT 22
66917: PUSH
66918: LD_OWVAR 2
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 32
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 21
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: PPUSH
66952: CALL_OW 69
66956: ST_TO_ADDR
// if not tmp then
66957: LD_VAR 0 2
66961: NOT
66962: IFFALSE 66966
// exit ;
66964: GO 66995
// for i in tmp do
66966: LD_ADDR_VAR 0 1
66970: PUSH
66971: LD_VAR 0 2
66975: PUSH
66976: FOR_IN
66977: IFFALSE 66993
// SetFuel ( i , 0 ) ;
66979: LD_VAR 0 1
66983: PPUSH
66984: LD_INT 0
66986: PPUSH
66987: CALL_OW 240
66991: GO 66976
66993: POP
66994: POP
// end ;
66995: PPOPN 2
66997: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66998: LD_EXP 49
67002: PUSH
67003: LD_EXP 85
67007: AND
67008: IFFALSE 67074
67010: GO 67012
67012: DISABLE
67013: LD_INT 0
67015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67016: LD_ADDR_VAR 0 1
67020: PUSH
67021: LD_INT 22
67023: PUSH
67024: LD_OWVAR 2
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 30
67035: PUSH
67036: LD_INT 29
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PPUSH
67047: CALL_OW 69
67051: ST_TO_ADDR
// if not tmp then
67052: LD_VAR 0 1
67056: NOT
67057: IFFALSE 67061
// exit ;
67059: GO 67074
// DestroyUnit ( tmp [ 1 ] ) ;
67061: LD_VAR 0 1
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PPUSH
67070: CALL_OW 65
// end ;
67074: PPOPN 1
67076: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67077: LD_EXP 49
67081: PUSH
67082: LD_EXP 87
67086: AND
67087: IFFALSE 67216
67089: GO 67091
67091: DISABLE
67092: LD_INT 0
67094: PPUSH
// begin uc_side := 0 ;
67095: LD_ADDR_OWVAR 20
67099: PUSH
67100: LD_INT 0
67102: ST_TO_ADDR
// uc_nation := nation_arabian ;
67103: LD_ADDR_OWVAR 21
67107: PUSH
67108: LD_INT 2
67110: ST_TO_ADDR
// hc_gallery :=  ;
67111: LD_ADDR_OWVAR 33
67115: PUSH
67116: LD_STRING 
67118: ST_TO_ADDR
// hc_name :=  ;
67119: LD_ADDR_OWVAR 26
67123: PUSH
67124: LD_STRING 
67126: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67127: LD_INT 1
67129: PPUSH
67130: LD_INT 11
67132: PPUSH
67133: LD_INT 10
67135: PPUSH
67136: CALL_OW 380
// un := CreateHuman ;
67140: LD_ADDR_VAR 0 1
67144: PUSH
67145: CALL_OW 44
67149: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67150: LD_VAR 0 1
67154: PPUSH
67155: LD_INT 1
67157: PPUSH
67158: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67162: LD_INT 35
67164: PPUSH
67165: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67169: LD_VAR 0 1
67173: PPUSH
67174: LD_INT 22
67176: PUSH
67177: LD_OWVAR 2
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PPUSH
67186: CALL_OW 69
67190: PPUSH
67191: LD_VAR 0 1
67195: PPUSH
67196: CALL_OW 74
67200: PPUSH
67201: CALL_OW 115
// until IsDead ( un ) ;
67205: LD_VAR 0 1
67209: PPUSH
67210: CALL_OW 301
67214: IFFALSE 67162
// end ;
67216: PPOPN 1
67218: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67219: LD_EXP 49
67223: PUSH
67224: LD_EXP 89
67228: AND
67229: IFFALSE 67241
67231: GO 67233
67233: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67234: LD_STRING earthquake(getX(game), 0, 32)
67236: PPUSH
67237: CALL_OW 559
67241: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67242: LD_EXP 49
67246: PUSH
67247: LD_EXP 90
67251: AND
67252: IFFALSE 67343
67254: GO 67256
67256: DISABLE
67257: LD_INT 0
67259: PPUSH
// begin enable ;
67260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67261: LD_ADDR_VAR 0 1
67265: PUSH
67266: LD_INT 22
67268: PUSH
67269: LD_OWVAR 2
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 21
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 33
67290: PUSH
67291: LD_INT 3
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: PPUSH
67303: CALL_OW 69
67307: ST_TO_ADDR
// if not tmp then
67308: LD_VAR 0 1
67312: NOT
67313: IFFALSE 67317
// exit ;
67315: GO 67343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67317: LD_VAR 0 1
67321: PUSH
67322: LD_INT 1
67324: PPUSH
67325: LD_VAR 0 1
67329: PPUSH
67330: CALL_OW 12
67334: ARRAY
67335: PPUSH
67336: LD_INT 1
67338: PPUSH
67339: CALL_OW 234
// end ;
67343: PPOPN 1
67345: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67346: LD_EXP 49
67350: PUSH
67351: LD_EXP 91
67355: AND
67356: IFFALSE 67497
67358: GO 67360
67360: DISABLE
67361: LD_INT 0
67363: PPUSH
67364: PPUSH
67365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67366: LD_ADDR_VAR 0 3
67370: PUSH
67371: LD_INT 22
67373: PUSH
67374: LD_OWVAR 2
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 25
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PPUSH
67397: CALL_OW 69
67401: ST_TO_ADDR
// if not tmp then
67402: LD_VAR 0 3
67406: NOT
67407: IFFALSE 67411
// exit ;
67409: GO 67497
// un := tmp [ rand ( 1 , tmp ) ] ;
67411: LD_ADDR_VAR 0 2
67415: PUSH
67416: LD_VAR 0 3
67420: PUSH
67421: LD_INT 1
67423: PPUSH
67424: LD_VAR 0 3
67428: PPUSH
67429: CALL_OW 12
67433: ARRAY
67434: ST_TO_ADDR
// if Crawls ( un ) then
67435: LD_VAR 0 2
67439: PPUSH
67440: CALL_OW 318
67444: IFFALSE 67455
// ComWalk ( un ) ;
67446: LD_VAR 0 2
67450: PPUSH
67451: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67455: LD_VAR 0 2
67459: PPUSH
67460: LD_INT 9
67462: PPUSH
67463: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67467: LD_INT 28
67469: PPUSH
67470: LD_OWVAR 2
67474: PPUSH
67475: LD_INT 2
67477: PPUSH
67478: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67482: LD_INT 29
67484: PPUSH
67485: LD_OWVAR 2
67489: PPUSH
67490: LD_INT 2
67492: PPUSH
67493: CALL_OW 322
// end ;
67497: PPOPN 3
67499: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67500: LD_EXP 49
67504: PUSH
67505: LD_EXP 92
67509: AND
67510: IFFALSE 67621
67512: GO 67514
67514: DISABLE
67515: LD_INT 0
67517: PPUSH
67518: PPUSH
67519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67520: LD_ADDR_VAR 0 3
67524: PUSH
67525: LD_INT 22
67527: PUSH
67528: LD_OWVAR 2
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 25
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PPUSH
67551: CALL_OW 69
67555: ST_TO_ADDR
// if not tmp then
67556: LD_VAR 0 3
67560: NOT
67561: IFFALSE 67565
// exit ;
67563: GO 67621
// un := tmp [ rand ( 1 , tmp ) ] ;
67565: LD_ADDR_VAR 0 2
67569: PUSH
67570: LD_VAR 0 3
67574: PUSH
67575: LD_INT 1
67577: PPUSH
67578: LD_VAR 0 3
67582: PPUSH
67583: CALL_OW 12
67587: ARRAY
67588: ST_TO_ADDR
// if Crawls ( un ) then
67589: LD_VAR 0 2
67593: PPUSH
67594: CALL_OW 318
67598: IFFALSE 67609
// ComWalk ( un ) ;
67600: LD_VAR 0 2
67604: PPUSH
67605: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67609: LD_VAR 0 2
67613: PPUSH
67614: LD_INT 8
67616: PPUSH
67617: CALL_OW 336
// end ;
67621: PPOPN 3
67623: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67624: LD_EXP 49
67628: PUSH
67629: LD_EXP 93
67633: AND
67634: IFFALSE 67778
67636: GO 67638
67638: DISABLE
67639: LD_INT 0
67641: PPUSH
67642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67643: LD_ADDR_VAR 0 2
67647: PUSH
67648: LD_INT 22
67650: PUSH
67651: LD_OWVAR 2
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 21
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 34
67675: PUSH
67676: LD_INT 12
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 34
67685: PUSH
67686: LD_INT 51
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 34
67695: PUSH
67696: LD_INT 32
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: PPUSH
67714: CALL_OW 69
67718: ST_TO_ADDR
// if not tmp then
67719: LD_VAR 0 2
67723: NOT
67724: IFFALSE 67728
// exit ;
67726: GO 67778
// for i in tmp do
67728: LD_ADDR_VAR 0 1
67732: PUSH
67733: LD_VAR 0 2
67737: PUSH
67738: FOR_IN
67739: IFFALSE 67776
// if GetCargo ( i , mat_artifact ) = 0 then
67741: LD_VAR 0 1
67745: PPUSH
67746: LD_INT 4
67748: PPUSH
67749: CALL_OW 289
67753: PUSH
67754: LD_INT 0
67756: EQUAL
67757: IFFALSE 67774
// SetCargo ( i , mat_siberit , 100 ) ;
67759: LD_VAR 0 1
67763: PPUSH
67764: LD_INT 3
67766: PPUSH
67767: LD_INT 100
67769: PPUSH
67770: CALL_OW 290
67774: GO 67738
67776: POP
67777: POP
// end ;
67778: PPOPN 2
67780: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67781: LD_EXP 49
67785: PUSH
67786: LD_EXP 94
67790: AND
67791: IFFALSE 67974
67793: GO 67795
67795: DISABLE
67796: LD_INT 0
67798: PPUSH
67799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67800: LD_ADDR_VAR 0 2
67804: PUSH
67805: LD_INT 22
67807: PUSH
67808: LD_OWVAR 2
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PPUSH
67817: CALL_OW 69
67821: ST_TO_ADDR
// if not tmp then
67822: LD_VAR 0 2
67826: NOT
67827: IFFALSE 67831
// exit ;
67829: GO 67974
// for i := 1 to 2 do
67831: LD_ADDR_VAR 0 1
67835: PUSH
67836: DOUBLE
67837: LD_INT 1
67839: DEC
67840: ST_TO_ADDR
67841: LD_INT 2
67843: PUSH
67844: FOR_TO
67845: IFFALSE 67972
// begin uc_side := your_side ;
67847: LD_ADDR_OWVAR 20
67851: PUSH
67852: LD_OWVAR 2
67856: ST_TO_ADDR
// uc_nation := nation_american ;
67857: LD_ADDR_OWVAR 21
67861: PUSH
67862: LD_INT 1
67864: ST_TO_ADDR
// vc_chassis := us_morphling ;
67865: LD_ADDR_OWVAR 37
67869: PUSH
67870: LD_INT 5
67872: ST_TO_ADDR
// vc_engine := engine_siberite ;
67873: LD_ADDR_OWVAR 39
67877: PUSH
67878: LD_INT 3
67880: ST_TO_ADDR
// vc_control := control_computer ;
67881: LD_ADDR_OWVAR 38
67885: PUSH
67886: LD_INT 3
67888: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67889: LD_ADDR_OWVAR 40
67893: PUSH
67894: LD_INT 10
67896: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67897: LD_VAR 0 2
67901: PUSH
67902: LD_INT 1
67904: ARRAY
67905: PPUSH
67906: CALL_OW 310
67910: NOT
67911: IFFALSE 67958
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67913: CALL_OW 45
67917: PPUSH
67918: LD_VAR 0 2
67922: PUSH
67923: LD_INT 1
67925: ARRAY
67926: PPUSH
67927: CALL_OW 250
67931: PPUSH
67932: LD_VAR 0 2
67936: PUSH
67937: LD_INT 1
67939: ARRAY
67940: PPUSH
67941: CALL_OW 251
67945: PPUSH
67946: LD_INT 12
67948: PPUSH
67949: LD_INT 1
67951: PPUSH
67952: CALL_OW 50
67956: GO 67970
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67958: CALL_OW 45
67962: PPUSH
67963: LD_INT 1
67965: PPUSH
67966: CALL_OW 51
// end ;
67970: GO 67844
67972: POP
67973: POP
// end ;
67974: PPOPN 2
67976: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67977: LD_EXP 49
67981: PUSH
67982: LD_EXP 95
67986: AND
67987: IFFALSE 68209
67989: GO 67991
67991: DISABLE
67992: LD_INT 0
67994: PPUSH
67995: PPUSH
67996: PPUSH
67997: PPUSH
67998: PPUSH
67999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68000: LD_ADDR_VAR 0 6
68004: PUSH
68005: LD_INT 22
68007: PUSH
68008: LD_OWVAR 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 21
68019: PUSH
68020: LD_INT 1
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: LD_INT 23
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: PPUSH
68049: CALL_OW 69
68053: ST_TO_ADDR
// if not tmp then
68054: LD_VAR 0 6
68058: NOT
68059: IFFALSE 68063
// exit ;
68061: GO 68209
// s1 := rand ( 1 , 4 ) ;
68063: LD_ADDR_VAR 0 2
68067: PUSH
68068: LD_INT 1
68070: PPUSH
68071: LD_INT 4
68073: PPUSH
68074: CALL_OW 12
68078: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68079: LD_ADDR_VAR 0 4
68083: PUSH
68084: LD_VAR 0 6
68088: PUSH
68089: LD_INT 1
68091: ARRAY
68092: PPUSH
68093: LD_VAR 0 2
68097: PPUSH
68098: CALL_OW 259
68102: ST_TO_ADDR
// if s1 = 1 then
68103: LD_VAR 0 2
68107: PUSH
68108: LD_INT 1
68110: EQUAL
68111: IFFALSE 68131
// s2 := rand ( 2 , 4 ) else
68113: LD_ADDR_VAR 0 3
68117: PUSH
68118: LD_INT 2
68120: PPUSH
68121: LD_INT 4
68123: PPUSH
68124: CALL_OW 12
68128: ST_TO_ADDR
68129: GO 68139
// s2 := 1 ;
68131: LD_ADDR_VAR 0 3
68135: PUSH
68136: LD_INT 1
68138: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68139: LD_ADDR_VAR 0 5
68143: PUSH
68144: LD_VAR 0 6
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: PPUSH
68153: LD_VAR 0 3
68157: PPUSH
68158: CALL_OW 259
68162: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68163: LD_VAR 0 6
68167: PUSH
68168: LD_INT 1
68170: ARRAY
68171: PPUSH
68172: LD_VAR 0 2
68176: PPUSH
68177: LD_VAR 0 5
68181: PPUSH
68182: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68186: LD_VAR 0 6
68190: PUSH
68191: LD_INT 1
68193: ARRAY
68194: PPUSH
68195: LD_VAR 0 3
68199: PPUSH
68200: LD_VAR 0 4
68204: PPUSH
68205: CALL_OW 237
// end ;
68209: PPOPN 6
68211: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68212: LD_EXP 49
68216: PUSH
68217: LD_EXP 96
68221: AND
68222: IFFALSE 68301
68224: GO 68226
68226: DISABLE
68227: LD_INT 0
68229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68230: LD_ADDR_VAR 0 1
68234: PUSH
68235: LD_INT 22
68237: PUSH
68238: LD_OWVAR 2
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 30
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PPUSH
68261: CALL_OW 69
68265: ST_TO_ADDR
// if not tmp then
68266: LD_VAR 0 1
68270: NOT
68271: IFFALSE 68275
// exit ;
68273: GO 68301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68275: LD_VAR 0 1
68279: PUSH
68280: LD_INT 1
68282: PPUSH
68283: LD_VAR 0 1
68287: PPUSH
68288: CALL_OW 12
68292: ARRAY
68293: PPUSH
68294: LD_INT 1
68296: PPUSH
68297: CALL_OW 234
// end ;
68301: PPOPN 1
68303: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68304: LD_EXP 49
68308: PUSH
68309: LD_EXP 97
68313: AND
68314: IFFALSE 68426
68316: GO 68318
68318: DISABLE
68319: LD_INT 0
68321: PPUSH
68322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68323: LD_ADDR_VAR 0 2
68327: PUSH
68328: LD_INT 22
68330: PUSH
68331: LD_OWVAR 2
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: PUSH
68343: LD_INT 30
68345: PUSH
68346: LD_INT 27
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 30
68355: PUSH
68356: LD_INT 26
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 30
68365: PUSH
68366: LD_INT 28
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PPUSH
68383: CALL_OW 69
68387: ST_TO_ADDR
// if not tmp then
68388: LD_VAR 0 2
68392: NOT
68393: IFFALSE 68397
// exit ;
68395: GO 68426
// for i in tmp do
68397: LD_ADDR_VAR 0 1
68401: PUSH
68402: LD_VAR 0 2
68406: PUSH
68407: FOR_IN
68408: IFFALSE 68424
// SetLives ( i , 1 ) ;
68410: LD_VAR 0 1
68414: PPUSH
68415: LD_INT 1
68417: PPUSH
68418: CALL_OW 234
68422: GO 68407
68424: POP
68425: POP
// end ;
68426: PPOPN 2
68428: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68429: LD_EXP 49
68433: PUSH
68434: LD_EXP 98
68438: AND
68439: IFFALSE 68726
68441: GO 68443
68443: DISABLE
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
68448: PPUSH
// begin i := rand ( 1 , 7 ) ;
68449: LD_ADDR_VAR 0 1
68453: PUSH
68454: LD_INT 1
68456: PPUSH
68457: LD_INT 7
68459: PPUSH
68460: CALL_OW 12
68464: ST_TO_ADDR
// case i of 1 :
68465: LD_VAR 0 1
68469: PUSH
68470: LD_INT 1
68472: DOUBLE
68473: EQUAL
68474: IFTRUE 68478
68476: GO 68488
68478: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68479: LD_STRING earthquake(getX(game), 0, 32)
68481: PPUSH
68482: CALL_OW 559
68486: GO 68726
68488: LD_INT 2
68490: DOUBLE
68491: EQUAL
68492: IFTRUE 68496
68494: GO 68510
68496: POP
// begin ToLua ( displayStucuk(); ) ;
68497: LD_STRING displayStucuk();
68499: PPUSH
68500: CALL_OW 559
// ResetFog ;
68504: CALL_OW 335
// end ; 3 :
68508: GO 68726
68510: LD_INT 3
68512: DOUBLE
68513: EQUAL
68514: IFTRUE 68518
68516: GO 68622
68518: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68519: LD_ADDR_VAR 0 2
68523: PUSH
68524: LD_INT 22
68526: PUSH
68527: LD_OWVAR 2
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 25
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PPUSH
68550: CALL_OW 69
68554: ST_TO_ADDR
// if not tmp then
68555: LD_VAR 0 2
68559: NOT
68560: IFFALSE 68564
// exit ;
68562: GO 68726
// un := tmp [ rand ( 1 , tmp ) ] ;
68564: LD_ADDR_VAR 0 3
68568: PUSH
68569: LD_VAR 0 2
68573: PUSH
68574: LD_INT 1
68576: PPUSH
68577: LD_VAR 0 2
68581: PPUSH
68582: CALL_OW 12
68586: ARRAY
68587: ST_TO_ADDR
// if Crawls ( un ) then
68588: LD_VAR 0 3
68592: PPUSH
68593: CALL_OW 318
68597: IFFALSE 68608
// ComWalk ( un ) ;
68599: LD_VAR 0 3
68603: PPUSH
68604: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68608: LD_VAR 0 3
68612: PPUSH
68613: LD_INT 8
68615: PPUSH
68616: CALL_OW 336
// end ; 4 :
68620: GO 68726
68622: LD_INT 4
68624: DOUBLE
68625: EQUAL
68626: IFTRUE 68630
68628: GO 68704
68630: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68631: LD_ADDR_VAR 0 2
68635: PUSH
68636: LD_INT 22
68638: PUSH
68639: LD_OWVAR 2
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 30
68650: PUSH
68651: LD_INT 29
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PPUSH
68662: CALL_OW 69
68666: ST_TO_ADDR
// if not tmp then
68667: LD_VAR 0 2
68671: NOT
68672: IFFALSE 68676
// exit ;
68674: GO 68726
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68676: LD_VAR 0 2
68680: PUSH
68681: LD_INT 1
68683: ARRAY
68684: PPUSH
68685: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68689: LD_VAR 0 2
68693: PUSH
68694: LD_INT 1
68696: ARRAY
68697: PPUSH
68698: CALL_OW 65
// end ; 5 .. 7 :
68702: GO 68726
68704: LD_INT 5
68706: DOUBLE
68707: GREATEREQUAL
68708: IFFALSE 68716
68710: LD_INT 7
68712: DOUBLE
68713: LESSEQUAL
68714: IFTRUE 68718
68716: GO 68725
68718: POP
// StreamSibBomb ; end ;
68719: CALL 64963 0 0
68723: GO 68726
68725: POP
// end ;
68726: PPOPN 3
68728: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68729: LD_EXP 49
68733: PUSH
68734: LD_EXP 99
68738: AND
68739: IFFALSE 68895
68741: GO 68743
68743: DISABLE
68744: LD_INT 0
68746: PPUSH
68747: PPUSH
68748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68749: LD_ADDR_VAR 0 2
68753: PUSH
68754: LD_INT 81
68756: PUSH
68757: LD_OWVAR 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: LD_INT 21
68771: PUSH
68772: LD_INT 1
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 21
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PPUSH
68798: CALL_OW 69
68802: ST_TO_ADDR
// if not tmp then
68803: LD_VAR 0 2
68807: NOT
68808: IFFALSE 68812
// exit ;
68810: GO 68895
// p := 0 ;
68812: LD_ADDR_VAR 0 3
68816: PUSH
68817: LD_INT 0
68819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68820: LD_INT 35
68822: PPUSH
68823: CALL_OW 67
// p := p + 1 ;
68827: LD_ADDR_VAR 0 3
68831: PUSH
68832: LD_VAR 0 3
68836: PUSH
68837: LD_INT 1
68839: PLUS
68840: ST_TO_ADDR
// for i in tmp do
68841: LD_ADDR_VAR 0 1
68845: PUSH
68846: LD_VAR 0 2
68850: PUSH
68851: FOR_IN
68852: IFFALSE 68883
// if GetLives ( i ) < 1000 then
68854: LD_VAR 0 1
68858: PPUSH
68859: CALL_OW 256
68863: PUSH
68864: LD_INT 1000
68866: LESS
68867: IFFALSE 68881
// SetLives ( i , 1000 ) ;
68869: LD_VAR 0 1
68873: PPUSH
68874: LD_INT 1000
68876: PPUSH
68877: CALL_OW 234
68881: GO 68851
68883: POP
68884: POP
// until p > 20 ;
68885: LD_VAR 0 3
68889: PUSH
68890: LD_INT 20
68892: GREATER
68893: IFFALSE 68820
// end ;
68895: PPOPN 3
68897: END
// every 0 0$1 trigger StreamModeActive and sTime do
68898: LD_EXP 49
68902: PUSH
68903: LD_EXP 100
68907: AND
68908: IFFALSE 68943
68910: GO 68912
68912: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68913: LD_INT 28
68915: PPUSH
68916: LD_OWVAR 2
68920: PPUSH
68921: LD_INT 2
68923: PPUSH
68924: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68928: LD_INT 30
68930: PPUSH
68931: LD_OWVAR 2
68935: PPUSH
68936: LD_INT 2
68938: PPUSH
68939: CALL_OW 322
// end ;
68943: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68944: LD_EXP 49
68948: PUSH
68949: LD_EXP 101
68953: AND
68954: IFFALSE 69075
68956: GO 68958
68958: DISABLE
68959: LD_INT 0
68961: PPUSH
68962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68963: LD_ADDR_VAR 0 2
68967: PUSH
68968: LD_INT 22
68970: PUSH
68971: LD_OWVAR 2
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 21
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: LD_INT 23
68995: PUSH
68996: LD_INT 0
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: PPUSH
69012: CALL_OW 69
69016: ST_TO_ADDR
// if not tmp then
69017: LD_VAR 0 2
69021: NOT
69022: IFFALSE 69026
// exit ;
69024: GO 69075
// for i in tmp do
69026: LD_ADDR_VAR 0 1
69030: PUSH
69031: LD_VAR 0 2
69035: PUSH
69036: FOR_IN
69037: IFFALSE 69073
// begin if Crawls ( i ) then
69039: LD_VAR 0 1
69043: PPUSH
69044: CALL_OW 318
69048: IFFALSE 69059
// ComWalk ( i ) ;
69050: LD_VAR 0 1
69054: PPUSH
69055: CALL_OW 138
// SetClass ( i , 2 ) ;
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_INT 2
69066: PPUSH
69067: CALL_OW 336
// end ;
69071: GO 69036
69073: POP
69074: POP
// end ;
69075: PPOPN 2
69077: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69078: LD_EXP 49
69082: PUSH
69083: LD_EXP 102
69087: AND
69088: IFFALSE 69376
69090: GO 69092
69092: DISABLE
69093: LD_INT 0
69095: PPUSH
69096: PPUSH
69097: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69098: LD_OWVAR 2
69102: PPUSH
69103: LD_INT 9
69105: PPUSH
69106: LD_INT 1
69108: PPUSH
69109: LD_INT 1
69111: PPUSH
69112: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69116: LD_INT 9
69118: PPUSH
69119: LD_OWVAR 2
69123: PPUSH
69124: CALL_OW 343
// uc_side := 9 ;
69128: LD_ADDR_OWVAR 20
69132: PUSH
69133: LD_INT 9
69135: ST_TO_ADDR
// uc_nation := 2 ;
69136: LD_ADDR_OWVAR 21
69140: PUSH
69141: LD_INT 2
69143: ST_TO_ADDR
// hc_name := Dark Warrior ;
69144: LD_ADDR_OWVAR 26
69148: PUSH
69149: LD_STRING Dark Warrior
69151: ST_TO_ADDR
// hc_gallery :=  ;
69152: LD_ADDR_OWVAR 33
69156: PUSH
69157: LD_STRING 
69159: ST_TO_ADDR
// hc_noskilllimit := true ;
69160: LD_ADDR_OWVAR 76
69164: PUSH
69165: LD_INT 1
69167: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69168: LD_ADDR_OWVAR 31
69172: PUSH
69173: LD_INT 30
69175: PUSH
69176: LD_INT 30
69178: PUSH
69179: LD_INT 30
69181: PUSH
69182: LD_INT 30
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: ST_TO_ADDR
// un := CreateHuman ;
69191: LD_ADDR_VAR 0 3
69195: PUSH
69196: CALL_OW 44
69200: ST_TO_ADDR
// hc_noskilllimit := false ;
69201: LD_ADDR_OWVAR 76
69205: PUSH
69206: LD_INT 0
69208: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69209: LD_VAR 0 3
69213: PPUSH
69214: LD_INT 1
69216: PPUSH
69217: CALL_OW 51
// ToLua ( playRanger() ) ;
69221: LD_STRING playRanger()
69223: PPUSH
69224: CALL_OW 559
// p := 0 ;
69228: LD_ADDR_VAR 0 2
69232: PUSH
69233: LD_INT 0
69235: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69236: LD_INT 35
69238: PPUSH
69239: CALL_OW 67
// p := p + 1 ;
69243: LD_ADDR_VAR 0 2
69247: PUSH
69248: LD_VAR 0 2
69252: PUSH
69253: LD_INT 1
69255: PLUS
69256: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69257: LD_VAR 0 3
69261: PPUSH
69262: CALL_OW 256
69266: PUSH
69267: LD_INT 1000
69269: LESS
69270: IFFALSE 69284
// SetLives ( un , 1000 ) ;
69272: LD_VAR 0 3
69276: PPUSH
69277: LD_INT 1000
69279: PPUSH
69280: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69284: LD_VAR 0 3
69288: PPUSH
69289: LD_INT 81
69291: PUSH
69292: LD_OWVAR 2
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 91
69303: PUSH
69304: LD_VAR 0 3
69308: PUSH
69309: LD_INT 30
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: LIST
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PPUSH
69321: CALL_OW 69
69325: PPUSH
69326: LD_VAR 0 3
69330: PPUSH
69331: CALL_OW 74
69335: PPUSH
69336: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69340: LD_VAR 0 2
69344: PUSH
69345: LD_INT 80
69347: GREATER
69348: PUSH
69349: LD_VAR 0 3
69353: PPUSH
69354: CALL_OW 301
69358: OR
69359: IFFALSE 69236
// if un then
69361: LD_VAR 0 3
69365: IFFALSE 69376
// RemoveUnit ( un ) ;
69367: LD_VAR 0 3
69371: PPUSH
69372: CALL_OW 64
// end ;
69376: PPOPN 3
69378: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69379: LD_EXP 103
69383: IFFALSE 69499
69385: GO 69387
69387: DISABLE
69388: LD_INT 0
69390: PPUSH
69391: PPUSH
69392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69393: LD_ADDR_VAR 0 2
69397: PUSH
69398: LD_INT 81
69400: PUSH
69401: LD_OWVAR 2
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 21
69412: PUSH
69413: LD_INT 1
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PPUSH
69424: CALL_OW 69
69428: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69429: LD_STRING playComputer()
69431: PPUSH
69432: CALL_OW 559
// if not tmp then
69436: LD_VAR 0 2
69440: NOT
69441: IFFALSE 69445
// exit ;
69443: GO 69499
// for i in tmp do
69445: LD_ADDR_VAR 0 1
69449: PUSH
69450: LD_VAR 0 2
69454: PUSH
69455: FOR_IN
69456: IFFALSE 69497
// for j := 1 to 4 do
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: DOUBLE
69464: LD_INT 1
69466: DEC
69467: ST_TO_ADDR
69468: LD_INT 4
69470: PUSH
69471: FOR_TO
69472: IFFALSE 69493
// SetSkill ( i , j , 10 ) ;
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 3
69483: PPUSH
69484: LD_INT 10
69486: PPUSH
69487: CALL_OW 237
69491: GO 69471
69493: POP
69494: POP
69495: GO 69455
69497: POP
69498: POP
// end ;
69499: PPOPN 3
69501: END
// every 0 0$1 trigger s30 do var i , tmp ;
69502: LD_EXP 104
69506: IFFALSE 69575
69508: GO 69510
69510: DISABLE
69511: LD_INT 0
69513: PPUSH
69514: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69515: LD_ADDR_VAR 0 2
69519: PUSH
69520: LD_INT 22
69522: PUSH
69523: LD_OWVAR 2
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PPUSH
69532: CALL_OW 69
69536: ST_TO_ADDR
// if not tmp then
69537: LD_VAR 0 2
69541: NOT
69542: IFFALSE 69546
// exit ;
69544: GO 69575
// for i in tmp do
69546: LD_ADDR_VAR 0 1
69550: PUSH
69551: LD_VAR 0 2
69555: PUSH
69556: FOR_IN
69557: IFFALSE 69573
// SetLives ( i , 300 ) ;
69559: LD_VAR 0 1
69563: PPUSH
69564: LD_INT 300
69566: PPUSH
69567: CALL_OW 234
69571: GO 69556
69573: POP
69574: POP
// end ;
69575: PPOPN 2
69577: END
// every 0 0$1 trigger s60 do var i , tmp ;
69578: LD_EXP 105
69582: IFFALSE 69651
69584: GO 69586
69586: DISABLE
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69591: LD_ADDR_VAR 0 2
69595: PUSH
69596: LD_INT 22
69598: PUSH
69599: LD_OWVAR 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PPUSH
69608: CALL_OW 69
69612: ST_TO_ADDR
// if not tmp then
69613: LD_VAR 0 2
69617: NOT
69618: IFFALSE 69622
// exit ;
69620: GO 69651
// for i in tmp do
69622: LD_ADDR_VAR 0 1
69626: PUSH
69627: LD_VAR 0 2
69631: PUSH
69632: FOR_IN
69633: IFFALSE 69649
// SetLives ( i , 600 ) ;
69635: LD_VAR 0 1
69639: PPUSH
69640: LD_INT 600
69642: PPUSH
69643: CALL_OW 234
69647: GO 69632
69649: POP
69650: POP
// end ;
69651: PPOPN 2
69653: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69654: LD_INT 0
69656: PPUSH
// case cmd of 301 :
69657: LD_VAR 0 1
69661: PUSH
69662: LD_INT 301
69664: DOUBLE
69665: EQUAL
69666: IFTRUE 69670
69668: GO 69702
69670: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69671: LD_VAR 0 6
69675: PPUSH
69676: LD_VAR 0 7
69680: PPUSH
69681: LD_VAR 0 8
69685: PPUSH
69686: LD_VAR 0 4
69690: PPUSH
69691: LD_VAR 0 5
69695: PPUSH
69696: CALL 70903 0 5
69700: GO 69823
69702: LD_INT 302
69704: DOUBLE
69705: EQUAL
69706: IFTRUE 69710
69708: GO 69747
69710: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69711: LD_VAR 0 6
69715: PPUSH
69716: LD_VAR 0 7
69720: PPUSH
69721: LD_VAR 0 8
69725: PPUSH
69726: LD_VAR 0 9
69730: PPUSH
69731: LD_VAR 0 4
69735: PPUSH
69736: LD_VAR 0 5
69740: PPUSH
69741: CALL 70994 0 6
69745: GO 69823
69747: LD_INT 303
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69755
69753: GO 69792
69755: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69756: LD_VAR 0 6
69760: PPUSH
69761: LD_VAR 0 7
69765: PPUSH
69766: LD_VAR 0 8
69770: PPUSH
69771: LD_VAR 0 9
69775: PPUSH
69776: LD_VAR 0 4
69780: PPUSH
69781: LD_VAR 0 5
69785: PPUSH
69786: CALL 69828 0 6
69790: GO 69823
69792: LD_INT 304
69794: DOUBLE
69795: EQUAL
69796: IFTRUE 69800
69798: GO 69822
69800: POP
// hHackTeleport ( unit , x , y ) ; end ;
69801: LD_VAR 0 2
69805: PPUSH
69806: LD_VAR 0 4
69810: PPUSH
69811: LD_VAR 0 5
69815: PPUSH
69816: CALL 71587 0 3
69820: GO 69823
69822: POP
// end ;
69823: LD_VAR 0 12
69827: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69828: LD_INT 0
69830: PPUSH
69831: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69832: LD_VAR 0 1
69836: PUSH
69837: LD_INT 1
69839: LESS
69840: PUSH
69841: LD_VAR 0 1
69845: PUSH
69846: LD_INT 3
69848: GREATER
69849: OR
69850: PUSH
69851: LD_VAR 0 5
69855: PPUSH
69856: LD_VAR 0 6
69860: PPUSH
69861: CALL_OW 428
69865: OR
69866: IFFALSE 69870
// exit ;
69868: GO 70590
// uc_side := your_side ;
69870: LD_ADDR_OWVAR 20
69874: PUSH
69875: LD_OWVAR 2
69879: ST_TO_ADDR
// uc_nation := nation ;
69880: LD_ADDR_OWVAR 21
69884: PUSH
69885: LD_VAR 0 1
69889: ST_TO_ADDR
// bc_level = 1 ;
69890: LD_ADDR_OWVAR 43
69894: PUSH
69895: LD_INT 1
69897: ST_TO_ADDR
// case btype of 1 :
69898: LD_VAR 0 2
69902: PUSH
69903: LD_INT 1
69905: DOUBLE
69906: EQUAL
69907: IFTRUE 69911
69909: GO 69922
69911: POP
// bc_type := b_depot ; 2 :
69912: LD_ADDR_OWVAR 42
69916: PUSH
69917: LD_INT 0
69919: ST_TO_ADDR
69920: GO 70534
69922: LD_INT 2
69924: DOUBLE
69925: EQUAL
69926: IFTRUE 69930
69928: GO 69941
69930: POP
// bc_type := b_warehouse ; 3 :
69931: LD_ADDR_OWVAR 42
69935: PUSH
69936: LD_INT 1
69938: ST_TO_ADDR
69939: GO 70534
69941: LD_INT 3
69943: DOUBLE
69944: EQUAL
69945: IFTRUE 69949
69947: GO 69960
69949: POP
// bc_type := b_lab ; 4 .. 9 :
69950: LD_ADDR_OWVAR 42
69954: PUSH
69955: LD_INT 6
69957: ST_TO_ADDR
69958: GO 70534
69960: LD_INT 4
69962: DOUBLE
69963: GREATEREQUAL
69964: IFFALSE 69972
69966: LD_INT 9
69968: DOUBLE
69969: LESSEQUAL
69970: IFTRUE 69974
69972: GO 70026
69974: POP
// begin bc_type := b_lab_half ;
69975: LD_ADDR_OWVAR 42
69979: PUSH
69980: LD_INT 7
69982: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69983: LD_ADDR_OWVAR 44
69987: PUSH
69988: LD_INT 10
69990: PUSH
69991: LD_INT 11
69993: PUSH
69994: LD_INT 12
69996: PUSH
69997: LD_INT 15
69999: PUSH
70000: LD_INT 14
70002: PUSH
70003: LD_INT 13
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: PUSH
70014: LD_VAR 0 2
70018: PUSH
70019: LD_INT 3
70021: MINUS
70022: ARRAY
70023: ST_TO_ADDR
// end ; 10 .. 13 :
70024: GO 70534
70026: LD_INT 10
70028: DOUBLE
70029: GREATEREQUAL
70030: IFFALSE 70038
70032: LD_INT 13
70034: DOUBLE
70035: LESSEQUAL
70036: IFTRUE 70040
70038: GO 70117
70040: POP
// begin bc_type := b_lab_full ;
70041: LD_ADDR_OWVAR 42
70045: PUSH
70046: LD_INT 8
70048: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70049: LD_ADDR_OWVAR 44
70053: PUSH
70054: LD_INT 10
70056: PUSH
70057: LD_INT 12
70059: PUSH
70060: LD_INT 14
70062: PUSH
70063: LD_INT 13
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: PUSH
70072: LD_VAR 0 2
70076: PUSH
70077: LD_INT 9
70079: MINUS
70080: ARRAY
70081: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70082: LD_ADDR_OWVAR 45
70086: PUSH
70087: LD_INT 11
70089: PUSH
70090: LD_INT 15
70092: PUSH
70093: LD_INT 12
70095: PUSH
70096: LD_INT 15
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: PUSH
70105: LD_VAR 0 2
70109: PUSH
70110: LD_INT 9
70112: MINUS
70113: ARRAY
70114: ST_TO_ADDR
// end ; 14 :
70115: GO 70534
70117: LD_INT 14
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70125
70123: GO 70136
70125: POP
// bc_type := b_workshop ; 15 :
70126: LD_ADDR_OWVAR 42
70130: PUSH
70131: LD_INT 2
70133: ST_TO_ADDR
70134: GO 70534
70136: LD_INT 15
70138: DOUBLE
70139: EQUAL
70140: IFTRUE 70144
70142: GO 70155
70144: POP
// bc_type := b_factory ; 16 :
70145: LD_ADDR_OWVAR 42
70149: PUSH
70150: LD_INT 3
70152: ST_TO_ADDR
70153: GO 70534
70155: LD_INT 16
70157: DOUBLE
70158: EQUAL
70159: IFTRUE 70163
70161: GO 70174
70163: POP
// bc_type := b_ext_gun ; 17 :
70164: LD_ADDR_OWVAR 42
70168: PUSH
70169: LD_INT 17
70171: ST_TO_ADDR
70172: GO 70534
70174: LD_INT 17
70176: DOUBLE
70177: EQUAL
70178: IFTRUE 70182
70180: GO 70210
70182: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70183: LD_ADDR_OWVAR 42
70187: PUSH
70188: LD_INT 19
70190: PUSH
70191: LD_INT 23
70193: PUSH
70194: LD_INT 19
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: LIST
70201: PUSH
70202: LD_VAR 0 1
70206: ARRAY
70207: ST_TO_ADDR
70208: GO 70534
70210: LD_INT 18
70212: DOUBLE
70213: EQUAL
70214: IFTRUE 70218
70216: GO 70229
70218: POP
// bc_type := b_ext_radar ; 19 :
70219: LD_ADDR_OWVAR 42
70223: PUSH
70224: LD_INT 20
70226: ST_TO_ADDR
70227: GO 70534
70229: LD_INT 19
70231: DOUBLE
70232: EQUAL
70233: IFTRUE 70237
70235: GO 70248
70237: POP
// bc_type := b_ext_radio ; 20 :
70238: LD_ADDR_OWVAR 42
70242: PUSH
70243: LD_INT 22
70245: ST_TO_ADDR
70246: GO 70534
70248: LD_INT 20
70250: DOUBLE
70251: EQUAL
70252: IFTRUE 70256
70254: GO 70267
70256: POP
// bc_type := b_ext_siberium ; 21 :
70257: LD_ADDR_OWVAR 42
70261: PUSH
70262: LD_INT 21
70264: ST_TO_ADDR
70265: GO 70534
70267: LD_INT 21
70269: DOUBLE
70270: EQUAL
70271: IFTRUE 70275
70273: GO 70286
70275: POP
// bc_type := b_ext_computer ; 22 :
70276: LD_ADDR_OWVAR 42
70280: PUSH
70281: LD_INT 24
70283: ST_TO_ADDR
70284: GO 70534
70286: LD_INT 22
70288: DOUBLE
70289: EQUAL
70290: IFTRUE 70294
70292: GO 70305
70294: POP
// bc_type := b_ext_track ; 23 :
70295: LD_ADDR_OWVAR 42
70299: PUSH
70300: LD_INT 16
70302: ST_TO_ADDR
70303: GO 70534
70305: LD_INT 23
70307: DOUBLE
70308: EQUAL
70309: IFTRUE 70313
70311: GO 70324
70313: POP
// bc_type := b_ext_laser ; 24 :
70314: LD_ADDR_OWVAR 42
70318: PUSH
70319: LD_INT 25
70321: ST_TO_ADDR
70322: GO 70534
70324: LD_INT 24
70326: DOUBLE
70327: EQUAL
70328: IFTRUE 70332
70330: GO 70343
70332: POP
// bc_type := b_control_tower ; 25 :
70333: LD_ADDR_OWVAR 42
70337: PUSH
70338: LD_INT 36
70340: ST_TO_ADDR
70341: GO 70534
70343: LD_INT 25
70345: DOUBLE
70346: EQUAL
70347: IFTRUE 70351
70349: GO 70362
70351: POP
// bc_type := b_breastwork ; 26 :
70352: LD_ADDR_OWVAR 42
70356: PUSH
70357: LD_INT 31
70359: ST_TO_ADDR
70360: GO 70534
70362: LD_INT 26
70364: DOUBLE
70365: EQUAL
70366: IFTRUE 70370
70368: GO 70381
70370: POP
// bc_type := b_bunker ; 27 :
70371: LD_ADDR_OWVAR 42
70375: PUSH
70376: LD_INT 32
70378: ST_TO_ADDR
70379: GO 70534
70381: LD_INT 27
70383: DOUBLE
70384: EQUAL
70385: IFTRUE 70389
70387: GO 70400
70389: POP
// bc_type := b_turret ; 28 :
70390: LD_ADDR_OWVAR 42
70394: PUSH
70395: LD_INT 33
70397: ST_TO_ADDR
70398: GO 70534
70400: LD_INT 28
70402: DOUBLE
70403: EQUAL
70404: IFTRUE 70408
70406: GO 70419
70408: POP
// bc_type := b_armoury ; 29 :
70409: LD_ADDR_OWVAR 42
70413: PUSH
70414: LD_INT 4
70416: ST_TO_ADDR
70417: GO 70534
70419: LD_INT 29
70421: DOUBLE
70422: EQUAL
70423: IFTRUE 70427
70425: GO 70438
70427: POP
// bc_type := b_barracks ; 30 :
70428: LD_ADDR_OWVAR 42
70432: PUSH
70433: LD_INT 5
70435: ST_TO_ADDR
70436: GO 70534
70438: LD_INT 30
70440: DOUBLE
70441: EQUAL
70442: IFTRUE 70446
70444: GO 70457
70446: POP
// bc_type := b_solar_power ; 31 :
70447: LD_ADDR_OWVAR 42
70451: PUSH
70452: LD_INT 27
70454: ST_TO_ADDR
70455: GO 70534
70457: LD_INT 31
70459: DOUBLE
70460: EQUAL
70461: IFTRUE 70465
70463: GO 70476
70465: POP
// bc_type := b_oil_power ; 32 :
70466: LD_ADDR_OWVAR 42
70470: PUSH
70471: LD_INT 26
70473: ST_TO_ADDR
70474: GO 70534
70476: LD_INT 32
70478: DOUBLE
70479: EQUAL
70480: IFTRUE 70484
70482: GO 70495
70484: POP
// bc_type := b_siberite_power ; 33 :
70485: LD_ADDR_OWVAR 42
70489: PUSH
70490: LD_INT 28
70492: ST_TO_ADDR
70493: GO 70534
70495: LD_INT 33
70497: DOUBLE
70498: EQUAL
70499: IFTRUE 70503
70501: GO 70514
70503: POP
// bc_type := b_oil_mine ; 34 :
70504: LD_ADDR_OWVAR 42
70508: PUSH
70509: LD_INT 29
70511: ST_TO_ADDR
70512: GO 70534
70514: LD_INT 34
70516: DOUBLE
70517: EQUAL
70518: IFTRUE 70522
70520: GO 70533
70522: POP
// bc_type := b_siberite_mine ; end ;
70523: LD_ADDR_OWVAR 42
70527: PUSH
70528: LD_INT 30
70530: ST_TO_ADDR
70531: GO 70534
70533: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70534: LD_ADDR_VAR 0 8
70538: PUSH
70539: LD_VAR 0 5
70543: PPUSH
70544: LD_VAR 0 6
70548: PPUSH
70549: LD_VAR 0 3
70553: PPUSH
70554: CALL_OW 47
70558: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70559: LD_OWVAR 42
70563: PUSH
70564: LD_INT 32
70566: PUSH
70567: LD_INT 33
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: IN
70574: IFFALSE 70590
// PlaceWeaponTurret ( b , weapon ) ;
70576: LD_VAR 0 8
70580: PPUSH
70581: LD_VAR 0 4
70585: PPUSH
70586: CALL_OW 431
// end ;
70590: LD_VAR 0 7
70594: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70595: LD_INT 0
70597: PPUSH
70598: PPUSH
70599: PPUSH
70600: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70601: LD_ADDR_VAR 0 4
70605: PUSH
70606: LD_INT 22
70608: PUSH
70609: LD_OWVAR 2
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: LD_INT 30
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 30
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PPUSH
70650: CALL_OW 69
70654: ST_TO_ADDR
// if not tmp then
70655: LD_VAR 0 4
70659: NOT
70660: IFFALSE 70664
// exit ;
70662: GO 70723
// for i in tmp do
70664: LD_ADDR_VAR 0 2
70668: PUSH
70669: LD_VAR 0 4
70673: PUSH
70674: FOR_IN
70675: IFFALSE 70721
// for j = 1 to 3 do
70677: LD_ADDR_VAR 0 3
70681: PUSH
70682: DOUBLE
70683: LD_INT 1
70685: DEC
70686: ST_TO_ADDR
70687: LD_INT 3
70689: PUSH
70690: FOR_TO
70691: IFFALSE 70717
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70693: LD_VAR 0 2
70697: PPUSH
70698: CALL_OW 274
70702: PPUSH
70703: LD_VAR 0 3
70707: PPUSH
70708: LD_INT 99999
70710: PPUSH
70711: CALL_OW 277
70715: GO 70690
70717: POP
70718: POP
70719: GO 70674
70721: POP
70722: POP
// end ;
70723: LD_VAR 0 1
70727: RET
// export function hHackSetLevel10 ; var i , j ; begin
70728: LD_INT 0
70730: PPUSH
70731: PPUSH
70732: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70733: LD_ADDR_VAR 0 2
70737: PUSH
70738: LD_INT 21
70740: PUSH
70741: LD_INT 1
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PPUSH
70748: CALL_OW 69
70752: PUSH
70753: FOR_IN
70754: IFFALSE 70806
// if IsSelected ( i ) then
70756: LD_VAR 0 2
70760: PPUSH
70761: CALL_OW 306
70765: IFFALSE 70804
// begin for j := 1 to 4 do
70767: LD_ADDR_VAR 0 3
70771: PUSH
70772: DOUBLE
70773: LD_INT 1
70775: DEC
70776: ST_TO_ADDR
70777: LD_INT 4
70779: PUSH
70780: FOR_TO
70781: IFFALSE 70802
// SetSkill ( i , j , 10 ) ;
70783: LD_VAR 0 2
70787: PPUSH
70788: LD_VAR 0 3
70792: PPUSH
70793: LD_INT 10
70795: PPUSH
70796: CALL_OW 237
70800: GO 70780
70802: POP
70803: POP
// end ;
70804: GO 70753
70806: POP
70807: POP
// end ;
70808: LD_VAR 0 1
70812: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70813: LD_INT 0
70815: PPUSH
70816: PPUSH
70817: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70818: LD_ADDR_VAR 0 2
70822: PUSH
70823: LD_INT 22
70825: PUSH
70826: LD_OWVAR 2
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 21
70837: PUSH
70838: LD_INT 1
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PPUSH
70849: CALL_OW 69
70853: PUSH
70854: FOR_IN
70855: IFFALSE 70896
// begin for j := 1 to 4 do
70857: LD_ADDR_VAR 0 3
70861: PUSH
70862: DOUBLE
70863: LD_INT 1
70865: DEC
70866: ST_TO_ADDR
70867: LD_INT 4
70869: PUSH
70870: FOR_TO
70871: IFFALSE 70892
// SetSkill ( i , j , 10 ) ;
70873: LD_VAR 0 2
70877: PPUSH
70878: LD_VAR 0 3
70882: PPUSH
70883: LD_INT 10
70885: PPUSH
70886: CALL_OW 237
70890: GO 70870
70892: POP
70893: POP
// end ;
70894: GO 70854
70896: POP
70897: POP
// end ;
70898: LD_VAR 0 1
70902: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70903: LD_INT 0
70905: PPUSH
// uc_side := your_side ;
70906: LD_ADDR_OWVAR 20
70910: PUSH
70911: LD_OWVAR 2
70915: ST_TO_ADDR
// uc_nation := nation ;
70916: LD_ADDR_OWVAR 21
70920: PUSH
70921: LD_VAR 0 1
70925: ST_TO_ADDR
// InitHc ;
70926: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70930: LD_INT 0
70932: PPUSH
70933: LD_VAR 0 2
70937: PPUSH
70938: LD_VAR 0 3
70942: PPUSH
70943: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70947: LD_VAR 0 4
70951: PPUSH
70952: LD_VAR 0 5
70956: PPUSH
70957: CALL_OW 428
70961: PUSH
70962: LD_INT 0
70964: EQUAL
70965: IFFALSE 70989
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70967: CALL_OW 44
70971: PPUSH
70972: LD_VAR 0 4
70976: PPUSH
70977: LD_VAR 0 5
70981: PPUSH
70982: LD_INT 1
70984: PPUSH
70985: CALL_OW 48
// end ;
70989: LD_VAR 0 6
70993: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70994: LD_INT 0
70996: PPUSH
70997: PPUSH
// uc_side := your_side ;
70998: LD_ADDR_OWVAR 20
71002: PUSH
71003: LD_OWVAR 2
71007: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71008: LD_VAR 0 1
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: LD_INT 3
71021: PUSH
71022: LD_INT 4
71024: PUSH
71025: LD_INT 5
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: IN
71035: IFFALSE 71047
// uc_nation := nation_american else
71037: LD_ADDR_OWVAR 21
71041: PUSH
71042: LD_INT 1
71044: ST_TO_ADDR
71045: GO 71090
// if chassis in [ 11 , 12 , 13 , 14 ] then
71047: LD_VAR 0 1
71051: PUSH
71052: LD_INT 11
71054: PUSH
71055: LD_INT 12
71057: PUSH
71058: LD_INT 13
71060: PUSH
71061: LD_INT 14
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: IN
71070: IFFALSE 71082
// uc_nation := nation_arabian else
71072: LD_ADDR_OWVAR 21
71076: PUSH
71077: LD_INT 2
71079: ST_TO_ADDR
71080: GO 71090
// uc_nation := nation_russian ;
71082: LD_ADDR_OWVAR 21
71086: PUSH
71087: LD_INT 3
71089: ST_TO_ADDR
// vc_chassis := chassis ;
71090: LD_ADDR_OWVAR 37
71094: PUSH
71095: LD_VAR 0 1
71099: ST_TO_ADDR
// vc_engine := engine ;
71100: LD_ADDR_OWVAR 39
71104: PUSH
71105: LD_VAR 0 2
71109: ST_TO_ADDR
// vc_control := control ;
71110: LD_ADDR_OWVAR 38
71114: PUSH
71115: LD_VAR 0 3
71119: ST_TO_ADDR
// vc_weapon := weapon ;
71120: LD_ADDR_OWVAR 40
71124: PUSH
71125: LD_VAR 0 4
71129: ST_TO_ADDR
// un := CreateVehicle ;
71130: LD_ADDR_VAR 0 8
71134: PUSH
71135: CALL_OW 45
71139: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71140: LD_VAR 0 8
71144: PPUSH
71145: LD_INT 0
71147: PPUSH
71148: LD_INT 5
71150: PPUSH
71151: CALL_OW 12
71155: PPUSH
71156: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71160: LD_VAR 0 8
71164: PPUSH
71165: LD_VAR 0 5
71169: PPUSH
71170: LD_VAR 0 6
71174: PPUSH
71175: LD_INT 1
71177: PPUSH
71178: CALL_OW 48
// end ;
71182: LD_VAR 0 7
71186: RET
// export hInvincible ; every 1 do
71187: GO 71189
71189: DISABLE
// hInvincible := [ ] ;
71190: LD_ADDR_EXP 106
71194: PUSH
71195: EMPTY
71196: ST_TO_ADDR
71197: END
// every 10 do var i ;
71198: GO 71200
71200: DISABLE
71201: LD_INT 0
71203: PPUSH
// begin enable ;
71204: ENABLE
// if not hInvincible then
71205: LD_EXP 106
71209: NOT
71210: IFFALSE 71214
// exit ;
71212: GO 71258
// for i in hInvincible do
71214: LD_ADDR_VAR 0 1
71218: PUSH
71219: LD_EXP 106
71223: PUSH
71224: FOR_IN
71225: IFFALSE 71256
// if GetLives ( i ) < 1000 then
71227: LD_VAR 0 1
71231: PPUSH
71232: CALL_OW 256
71236: PUSH
71237: LD_INT 1000
71239: LESS
71240: IFFALSE 71254
// SetLives ( i , 1000 ) ;
71242: LD_VAR 0 1
71246: PPUSH
71247: LD_INT 1000
71249: PPUSH
71250: CALL_OW 234
71254: GO 71224
71256: POP
71257: POP
// end ;
71258: PPOPN 1
71260: END
// export function hHackInvincible ; var i ; begin
71261: LD_INT 0
71263: PPUSH
71264: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71265: LD_ADDR_VAR 0 2
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: LD_INT 21
71275: PUSH
71276: LD_INT 1
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 21
71285: PUSH
71286: LD_INT 2
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: LIST
71297: PPUSH
71298: CALL_OW 69
71302: PUSH
71303: FOR_IN
71304: IFFALSE 71365
// if IsSelected ( i ) then
71306: LD_VAR 0 2
71310: PPUSH
71311: CALL_OW 306
71315: IFFALSE 71363
// begin if i in hInvincible then
71317: LD_VAR 0 2
71321: PUSH
71322: LD_EXP 106
71326: IN
71327: IFFALSE 71347
// hInvincible := hInvincible diff i else
71329: LD_ADDR_EXP 106
71333: PUSH
71334: LD_EXP 106
71338: PUSH
71339: LD_VAR 0 2
71343: DIFF
71344: ST_TO_ADDR
71345: GO 71363
// hInvincible := hInvincible union i ;
71347: LD_ADDR_EXP 106
71351: PUSH
71352: LD_EXP 106
71356: PUSH
71357: LD_VAR 0 2
71361: UNION
71362: ST_TO_ADDR
// end ;
71363: GO 71303
71365: POP
71366: POP
// end ;
71367: LD_VAR 0 1
71371: RET
// export function hHackInvisible ; var i , j ; begin
71372: LD_INT 0
71374: PPUSH
71375: PPUSH
71376: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71377: LD_ADDR_VAR 0 2
71381: PUSH
71382: LD_INT 21
71384: PUSH
71385: LD_INT 1
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PPUSH
71392: CALL_OW 69
71396: PUSH
71397: FOR_IN
71398: IFFALSE 71422
// if IsSelected ( i ) then
71400: LD_VAR 0 2
71404: PPUSH
71405: CALL_OW 306
71409: IFFALSE 71420
// ComForceInvisible ( i ) ;
71411: LD_VAR 0 2
71415: PPUSH
71416: CALL_OW 496
71420: GO 71397
71422: POP
71423: POP
// end ;
71424: LD_VAR 0 1
71428: RET
// export function hHackChangeYourSide ; begin
71429: LD_INT 0
71431: PPUSH
// if your_side = 8 then
71432: LD_OWVAR 2
71436: PUSH
71437: LD_INT 8
71439: EQUAL
71440: IFFALSE 71452
// your_side := 0 else
71442: LD_ADDR_OWVAR 2
71446: PUSH
71447: LD_INT 0
71449: ST_TO_ADDR
71450: GO 71466
// your_side := your_side + 1 ;
71452: LD_ADDR_OWVAR 2
71456: PUSH
71457: LD_OWVAR 2
71461: PUSH
71462: LD_INT 1
71464: PLUS
71465: ST_TO_ADDR
// end ;
71466: LD_VAR 0 1
71470: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71471: LD_INT 0
71473: PPUSH
71474: PPUSH
71475: PPUSH
// for i in all_units do
71476: LD_ADDR_VAR 0 2
71480: PUSH
71481: LD_OWVAR 3
71485: PUSH
71486: FOR_IN
71487: IFFALSE 71565
// if IsSelected ( i ) then
71489: LD_VAR 0 2
71493: PPUSH
71494: CALL_OW 306
71498: IFFALSE 71563
// begin j := GetSide ( i ) ;
71500: LD_ADDR_VAR 0 3
71504: PUSH
71505: LD_VAR 0 2
71509: PPUSH
71510: CALL_OW 255
71514: ST_TO_ADDR
// if j = 8 then
71515: LD_VAR 0 3
71519: PUSH
71520: LD_INT 8
71522: EQUAL
71523: IFFALSE 71535
// j := 0 else
71525: LD_ADDR_VAR 0 3
71529: PUSH
71530: LD_INT 0
71532: ST_TO_ADDR
71533: GO 71549
// j := j + 1 ;
71535: LD_ADDR_VAR 0 3
71539: PUSH
71540: LD_VAR 0 3
71544: PUSH
71545: LD_INT 1
71547: PLUS
71548: ST_TO_ADDR
// SetSide ( i , j ) ;
71549: LD_VAR 0 2
71553: PPUSH
71554: LD_VAR 0 3
71558: PPUSH
71559: CALL_OW 235
// end ;
71563: GO 71486
71565: POP
71566: POP
// end ;
71567: LD_VAR 0 1
71571: RET
// export function hHackFog ; begin
71572: LD_INT 0
71574: PPUSH
// FogOff ( true ) ;
71575: LD_INT 1
71577: PPUSH
71578: CALL_OW 344
// end ;
71582: LD_VAR 0 1
71586: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71587: LD_INT 0
71589: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71590: LD_VAR 0 1
71594: PPUSH
71595: LD_VAR 0 2
71599: PPUSH
71600: LD_VAR 0 3
71604: PPUSH
71605: LD_INT 1
71607: PPUSH
71608: LD_INT 1
71610: PPUSH
71611: CALL_OW 483
// CenterOnXY ( x , y ) ;
71615: LD_VAR 0 2
71619: PPUSH
71620: LD_VAR 0 3
71624: PPUSH
71625: CALL_OW 84
// end ; end_of_file
71629: LD_VAR 0 4
71633: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
71634: LD_INT 0
71636: PPUSH
// ar_miner := 81 ;
71637: LD_ADDR_EXP 114
71641: PUSH
71642: LD_INT 81
71644: ST_TO_ADDR
// ar_crane := 88 ;
71645: LD_ADDR_EXP 113
71649: PUSH
71650: LD_INT 88
71652: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71653: LD_ADDR_EXP 108
71657: PUSH
71658: LD_INT 89
71660: ST_TO_ADDR
// us_hack := 99 ;
71661: LD_ADDR_EXP 109
71665: PUSH
71666: LD_INT 99
71668: ST_TO_ADDR
// us_artillery := 97 ;
71669: LD_ADDR_EXP 110
71673: PUSH
71674: LD_INT 97
71676: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71677: LD_ADDR_EXP 111
71681: PUSH
71682: LD_INT 91
71684: ST_TO_ADDR
// ar_mortar := 92 ;
71685: LD_ADDR_EXP 112
71689: PUSH
71690: LD_INT 92
71692: ST_TO_ADDR
// ru_flamethrower := 93 ;
71693: LD_ADDR_EXP 115
71697: PUSH
71698: LD_INT 93
71700: ST_TO_ADDR
// ru_radar := 98 ;
71701: LD_ADDR_EXP 107
71705: PUSH
71706: LD_INT 98
71708: ST_TO_ADDR
// tech_Artillery := 80 ;
71709: LD_ADDR_EXP 116
71713: PUSH
71714: LD_INT 80
71716: ST_TO_ADDR
// tech_RadMat := 81 ;
71717: LD_ADDR_EXP 117
71721: PUSH
71722: LD_INT 81
71724: ST_TO_ADDR
// tech_BasicTools := 82 ;
71725: LD_ADDR_EXP 118
71729: PUSH
71730: LD_INT 82
71732: ST_TO_ADDR
// tech_Cargo := 83 ;
71733: LD_ADDR_EXP 119
71737: PUSH
71738: LD_INT 83
71740: ST_TO_ADDR
// tech_Track := 84 ;
71741: LD_ADDR_EXP 120
71745: PUSH
71746: LD_INT 84
71748: ST_TO_ADDR
// tech_Crane := 85 ;
71749: LD_ADDR_EXP 121
71753: PUSH
71754: LD_INT 85
71756: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71757: LD_ADDR_EXP 122
71761: PUSH
71762: LD_INT 86
71764: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71765: LD_ADDR_EXP 123
71769: PUSH
71770: LD_INT 87
71772: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71773: LD_ADDR_EXP 124
71777: PUSH
71778: LD_INT 88
71780: ST_TO_ADDR
// class_mastodont := 31 ;
71781: LD_ADDR_EXP 125
71785: PUSH
71786: LD_INT 31
71788: ST_TO_ADDR
// class_horse := 21 ;
71789: LD_ADDR_EXP 126
71793: PUSH
71794: LD_INT 21
71796: ST_TO_ADDR
// end ;
71797: LD_VAR 0 1
71801: RET
// every 1 do
71802: GO 71804
71804: DISABLE
// InitGlobalVariables ; end_of_file
71805: CALL 71634 0 0
71809: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71810: LD_VAR 0 1
71814: PPUSH
71815: LD_VAR 0 2
71819: PPUSH
71820: LD_VAR 0 3
71824: PPUSH
71825: LD_VAR 0 4
71829: PPUSH
71830: LD_VAR 0 5
71834: PPUSH
71835: LD_VAR 0 6
71839: PPUSH
71840: CALL 57347 0 6
// end ;
71844: PPOPN 6
71846: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71847: LD_INT 0
71849: PPUSH
// begin if not units then
71850: LD_VAR 0 1
71854: NOT
71855: IFFALSE 71859
// exit ;
71857: GO 71947
// if p1 = 1 then
71859: LD_VAR 0 2
71863: PUSH
71864: LD_INT 1
71866: EQUAL
71867: IFFALSE 71947
// begin if p2 = 1 then
71869: LD_VAR 0 3
71873: PUSH
71874: LD_INT 1
71876: EQUAL
71877: IFFALSE 71908
// begin for i in units do
71879: LD_ADDR_VAR 0 7
71883: PUSH
71884: LD_VAR 0 1
71888: PUSH
71889: FOR_IN
71890: IFFALSE 71906
// begin SetUnitAttackType ( i , 3 ) ;
71892: LD_VAR 0 7
71896: PPUSH
71897: LD_INT 3
71899: PPUSH
71900: CALL_OW 603
// end ;
71904: GO 71889
71906: POP
71907: POP
// end ; if p2 = 2 then
71908: LD_VAR 0 3
71912: PUSH
71913: LD_INT 2
71915: EQUAL
71916: IFFALSE 71947
// begin for i in units do
71918: LD_ADDR_VAR 0 7
71922: PUSH
71923: LD_VAR 0 1
71927: PUSH
71928: FOR_IN
71929: IFFALSE 71945
// begin SetUnitAttackType ( i , 1 ) ;
71931: LD_VAR 0 7
71935: PPUSH
71936: LD_INT 1
71938: PPUSH
71939: CALL_OW 603
// end ;
71943: GO 71928
71945: POP
71946: POP
// end ; end ; end ;
71947: PPOPN 7
71949: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71950: CALL 57322 0 0
// end ; end_of_file
71954: PPOPN 1
71956: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71957: LD_VAR 0 1
71961: PUSH
71962: LD_INT 200
71964: DOUBLE
71965: GREATEREQUAL
71966: IFFALSE 71974
71968: LD_INT 299
71970: DOUBLE
71971: LESSEQUAL
71972: IFTRUE 71976
71974: GO 72008
71976: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71977: LD_VAR 0 1
71981: PPUSH
71982: LD_VAR 0 2
71986: PPUSH
71987: LD_VAR 0 3
71991: PPUSH
71992: LD_VAR 0 4
71996: PPUSH
71997: LD_VAR 0 5
72001: PPUSH
72002: CALL 72498 0 5
72006: GO 72085
72008: LD_INT 300
72010: DOUBLE
72011: GREATEREQUAL
72012: IFFALSE 72020
72014: LD_INT 399
72016: DOUBLE
72017: LESSEQUAL
72018: IFTRUE 72022
72020: GO 72084
72022: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72023: LD_VAR 0 1
72027: PPUSH
72028: LD_VAR 0 2
72032: PPUSH
72033: LD_VAR 0 3
72037: PPUSH
72038: LD_VAR 0 4
72042: PPUSH
72043: LD_VAR 0 5
72047: PPUSH
72048: LD_VAR 0 6
72052: PPUSH
72053: LD_VAR 0 7
72057: PPUSH
72058: LD_VAR 0 8
72062: PPUSH
72063: LD_VAR 0 9
72067: PPUSH
72068: LD_VAR 0 10
72072: PPUSH
72073: LD_VAR 0 11
72077: PPUSH
72078: CALL 69654 0 11
72082: GO 72085
72084: POP
// end ;
72085: PPOPN 11
72087: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72088: LD_VAR 0 1
72092: PPUSH
72093: LD_VAR 0 2
72097: PPUSH
72098: LD_VAR 0 3
72102: PPUSH
72103: LD_VAR 0 4
72107: PPUSH
72108: LD_VAR 0 5
72112: PPUSH
72113: CALL 72234 0 5
// end ; end_of_file
72117: PPOPN 5
72119: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
72120: LD_INT 0
72122: PPUSH
72123: PPUSH
72124: PPUSH
72125: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
72126: LD_VAR 0 1
72130: PPUSH
72131: CALL_OW 264
72135: PUSH
72136: LD_EXP 111
72140: EQUAL
72141: IFFALSE 72213
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
72143: LD_INT 68
72145: PPUSH
72146: LD_VAR 0 1
72150: PPUSH
72151: CALL_OW 255
72155: PPUSH
72156: CALL_OW 321
72160: PUSH
72161: LD_INT 2
72163: EQUAL
72164: IFFALSE 72176
// eff := 70 else
72166: LD_ADDR_VAR 0 4
72170: PUSH
72171: LD_INT 70
72173: ST_TO_ADDR
72174: GO 72184
// eff := 30 ;
72176: LD_ADDR_VAR 0 4
72180: PUSH
72181: LD_INT 30
72183: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
72184: LD_VAR 0 1
72188: PPUSH
72189: CALL_OW 250
72193: PPUSH
72194: LD_VAR 0 1
72198: PPUSH
72199: CALL_OW 251
72203: PPUSH
72204: LD_VAR 0 4
72208: PPUSH
72209: CALL_OW 495
// end ; end ;
72213: LD_VAR 0 2
72217: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
72218: LD_INT 0
72220: PPUSH
// end ;
72221: LD_VAR 0 4
72225: RET
// export function SOS_Command ( cmd ) ; begin
72226: LD_INT 0
72228: PPUSH
// end ;
72229: LD_VAR 0 2
72233: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
72234: LD_INT 0
72236: PPUSH
// end ;
72237: LD_VAR 0 6
72241: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
72242: LD_INT 0
72244: PPUSH
72245: PPUSH
// if not vehicle or not factory then
72246: LD_VAR 0 1
72250: NOT
72251: PUSH
72252: LD_VAR 0 2
72256: NOT
72257: OR
72258: IFFALSE 72262
// exit ;
72260: GO 72493
// if factoryWaypoints >= factory then
72262: LD_EXP 127
72266: PUSH
72267: LD_VAR 0 2
72271: GREATEREQUAL
72272: IFFALSE 72493
// if factoryWaypoints [ factory ] then
72274: LD_EXP 127
72278: PUSH
72279: LD_VAR 0 2
72283: ARRAY
72284: IFFALSE 72493
// begin if GetControl ( vehicle ) = control_manual then
72286: LD_VAR 0 1
72290: PPUSH
72291: CALL_OW 263
72295: PUSH
72296: LD_INT 1
72298: EQUAL
72299: IFFALSE 72380
// begin driver := IsDrivenBy ( vehicle ) ;
72301: LD_ADDR_VAR 0 4
72305: PUSH
72306: LD_VAR 0 1
72310: PPUSH
72311: CALL_OW 311
72315: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72316: LD_VAR 0 4
72320: PPUSH
72321: LD_EXP 127
72325: PUSH
72326: LD_VAR 0 2
72330: ARRAY
72331: PUSH
72332: LD_INT 3
72334: ARRAY
72335: PPUSH
72336: LD_EXP 127
72340: PUSH
72341: LD_VAR 0 2
72345: ARRAY
72346: PUSH
72347: LD_INT 4
72349: ARRAY
72350: PPUSH
72351: CALL_OW 171
// AddComExitVehicle ( driver ) ;
72355: LD_VAR 0 4
72359: PPUSH
72360: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
72364: LD_VAR 0 4
72368: PPUSH
72369: LD_VAR 0 2
72373: PPUSH
72374: CALL_OW 180
// end else
72378: GO 72493
// if GetControl ( vehicle ) = control_remote then
72380: LD_VAR 0 1
72384: PPUSH
72385: CALL_OW 263
72389: PUSH
72390: LD_INT 2
72392: EQUAL
72393: IFFALSE 72454
// begin wait ( 0 0$2 ) ;
72395: LD_INT 70
72397: PPUSH
72398: CALL_OW 67
// if Connect ( vehicle ) then
72402: LD_VAR 0 1
72406: PPUSH
72407: CALL 24837 0 1
72411: IFFALSE 72452
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72413: LD_VAR 0 1
72417: PPUSH
72418: LD_EXP 127
72422: PUSH
72423: LD_VAR 0 2
72427: ARRAY
72428: PUSH
72429: LD_INT 3
72431: ARRAY
72432: PPUSH
72433: LD_EXP 127
72437: PUSH
72438: LD_VAR 0 2
72442: ARRAY
72443: PUSH
72444: LD_INT 4
72446: ARRAY
72447: PPUSH
72448: CALL_OW 171
// end else
72452: GO 72493
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72454: LD_VAR 0 1
72458: PPUSH
72459: LD_EXP 127
72463: PUSH
72464: LD_VAR 0 2
72468: ARRAY
72469: PUSH
72470: LD_INT 3
72472: ARRAY
72473: PPUSH
72474: LD_EXP 127
72478: PUSH
72479: LD_VAR 0 2
72483: ARRAY
72484: PUSH
72485: LD_INT 4
72487: ARRAY
72488: PPUSH
72489: CALL_OW 171
// end ; end ;
72493: LD_VAR 0 3
72497: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
72498: LD_INT 0
72500: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
72501: LD_VAR 0 1
72505: PUSH
72506: LD_INT 250
72508: EQUAL
72509: PUSH
72510: LD_VAR 0 2
72514: PPUSH
72515: CALL_OW 264
72519: PUSH
72520: LD_EXP 114
72524: EQUAL
72525: AND
72526: IFFALSE 72547
// MinerPlaceMine ( unit , x , y ) ;
72528: LD_VAR 0 2
72532: PPUSH
72533: LD_VAR 0 4
72537: PPUSH
72538: LD_VAR 0 5
72542: PPUSH
72543: CALL 75275 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
72547: LD_VAR 0 1
72551: PUSH
72552: LD_INT 251
72554: EQUAL
72555: PUSH
72556: LD_VAR 0 2
72560: PPUSH
72561: CALL_OW 264
72565: PUSH
72566: LD_EXP 114
72570: EQUAL
72571: AND
72572: IFFALSE 72593
// MinerDetonateMine ( unit , x , y ) ;
72574: LD_VAR 0 2
72578: PPUSH
72579: LD_VAR 0 4
72583: PPUSH
72584: LD_VAR 0 5
72588: PPUSH
72589: CALL 75552 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
72593: LD_VAR 0 1
72597: PUSH
72598: LD_INT 252
72600: EQUAL
72601: PUSH
72602: LD_VAR 0 2
72606: PPUSH
72607: CALL_OW 264
72611: PUSH
72612: LD_EXP 114
72616: EQUAL
72617: AND
72618: IFFALSE 72639
// MinerCreateMinefield ( unit , x , y ) ;
72620: LD_VAR 0 2
72624: PPUSH
72625: LD_VAR 0 4
72629: PPUSH
72630: LD_VAR 0 5
72634: PPUSH
72635: CALL 75969 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
72639: LD_VAR 0 1
72643: PUSH
72644: LD_INT 253
72646: EQUAL
72647: PUSH
72648: LD_VAR 0 2
72652: PPUSH
72653: CALL_OW 257
72657: PUSH
72658: LD_INT 5
72660: EQUAL
72661: AND
72662: IFFALSE 72683
// ComBinocular ( unit , x , y ) ;
72664: LD_VAR 0 2
72668: PPUSH
72669: LD_VAR 0 4
72673: PPUSH
72674: LD_VAR 0 5
72678: PPUSH
72679: CALL 76340 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72683: LD_VAR 0 1
72687: PUSH
72688: LD_INT 254
72690: EQUAL
72691: PUSH
72692: LD_VAR 0 2
72696: PPUSH
72697: CALL_OW 264
72701: PUSH
72702: LD_EXP 109
72706: EQUAL
72707: AND
72708: PUSH
72709: LD_VAR 0 3
72713: PPUSH
72714: CALL_OW 263
72718: PUSH
72719: LD_INT 3
72721: EQUAL
72722: AND
72723: IFFALSE 72739
// HackDestroyVehicle ( unit , selectedUnit ) ;
72725: LD_VAR 0 2
72729: PPUSH
72730: LD_VAR 0 3
72734: PPUSH
72735: CALL 74635 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72739: LD_VAR 0 1
72743: PUSH
72744: LD_INT 255
72746: EQUAL
72747: PUSH
72748: LD_VAR 0 2
72752: PPUSH
72753: CALL_OW 264
72757: PUSH
72758: LD_INT 14
72760: PUSH
72761: LD_INT 53
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: IN
72768: AND
72769: PUSH
72770: LD_VAR 0 4
72774: PPUSH
72775: LD_VAR 0 5
72779: PPUSH
72780: CALL_OW 488
72784: AND
72785: IFFALSE 72809
// CutTreeXYR ( unit , x , y , 12 ) ;
72787: LD_VAR 0 2
72791: PPUSH
72792: LD_VAR 0 4
72796: PPUSH
72797: LD_VAR 0 5
72801: PPUSH
72802: LD_INT 12
72804: PPUSH
72805: CALL 73201 0 4
// if cmd = 256 then
72809: LD_VAR 0 1
72813: PUSH
72814: LD_INT 256
72816: EQUAL
72817: IFFALSE 72838
// SetFactoryWaypoint ( unit , x , y ) ;
72819: LD_VAR 0 2
72823: PPUSH
72824: LD_VAR 0 4
72828: PPUSH
72829: LD_VAR 0 5
72833: PPUSH
72834: CALL 72843 0 3
// end ;
72838: LD_VAR 0 6
72842: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72843: LD_INT 0
72845: PPUSH
72846: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72847: LD_VAR 0 1
72851: NOT
72852: PUSH
72853: LD_VAR 0 2
72857: PPUSH
72858: LD_VAR 0 3
72862: PPUSH
72863: CALL_OW 488
72867: NOT
72868: OR
72869: PUSH
72870: LD_VAR 0 1
72874: PPUSH
72875: CALL_OW 266
72879: PUSH
72880: LD_INT 3
72882: NONEQUAL
72883: PUSH
72884: LD_VAR 0 1
72888: PPUSH
72889: CALL_OW 247
72893: PUSH
72894: LD_INT 1
72896: EQUAL
72897: NOT
72898: AND
72899: OR
72900: IFFALSE 72904
// exit ;
72902: GO 73053
// if GetType ( factory ) = unit_human then
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 247
72913: PUSH
72914: LD_INT 1
72916: EQUAL
72917: IFFALSE 72934
// factory := IsInUnit ( factory ) ;
72919: LD_ADDR_VAR 0 1
72923: PUSH
72924: LD_VAR 0 1
72928: PPUSH
72929: CALL_OW 310
72933: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72934: LD_VAR 0 1
72938: PPUSH
72939: CALL_OW 266
72943: PUSH
72944: LD_INT 3
72946: NONEQUAL
72947: IFFALSE 72951
// exit ;
72949: GO 73053
// if HexInfo ( x , y ) = factory then
72951: LD_VAR 0 2
72955: PPUSH
72956: LD_VAR 0 3
72960: PPUSH
72961: CALL_OW 428
72965: PUSH
72966: LD_VAR 0 1
72970: EQUAL
72971: IFFALSE 72998
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72973: LD_ADDR_EXP 127
72977: PUSH
72978: LD_EXP 127
72982: PPUSH
72983: LD_VAR 0 1
72987: PPUSH
72988: LD_INT 0
72990: PPUSH
72991: CALL_OW 1
72995: ST_TO_ADDR
72996: GO 73049
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72998: LD_ADDR_EXP 127
73002: PUSH
73003: LD_EXP 127
73007: PPUSH
73008: LD_VAR 0 1
73012: PPUSH
73013: LD_VAR 0 1
73017: PPUSH
73018: CALL_OW 255
73022: PUSH
73023: LD_VAR 0 1
73027: PUSH
73028: LD_VAR 0 2
73032: PUSH
73033: LD_VAR 0 3
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: PPUSH
73044: CALL_OW 1
73048: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73049: CALL 73058 0 0
// end ;
73053: LD_VAR 0 4
73057: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
73058: LD_INT 0
73060: PPUSH
73061: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73062: LD_STRING resetFactoryWaypoint();
73064: PPUSH
73065: CALL_OW 559
// if factoryWaypoints then
73069: LD_EXP 127
73073: IFFALSE 73196
// begin for i := 1 to factoryWaypoints do
73075: LD_ADDR_VAR 0 2
73079: PUSH
73080: DOUBLE
73081: LD_INT 1
73083: DEC
73084: ST_TO_ADDR
73085: LD_EXP 127
73089: PUSH
73090: FOR_TO
73091: IFFALSE 73194
// if factoryWaypoints [ i ] then
73093: LD_EXP 127
73097: PUSH
73098: LD_VAR 0 2
73102: ARRAY
73103: IFFALSE 73192
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
73105: LD_STRING setFactoryWaypointXY(
73107: PUSH
73108: LD_EXP 127
73112: PUSH
73113: LD_VAR 0 2
73117: ARRAY
73118: PUSH
73119: LD_INT 1
73121: ARRAY
73122: STR
73123: PUSH
73124: LD_STRING ,
73126: STR
73127: PUSH
73128: LD_EXP 127
73132: PUSH
73133: LD_VAR 0 2
73137: ARRAY
73138: PUSH
73139: LD_INT 2
73141: ARRAY
73142: STR
73143: PUSH
73144: LD_STRING ,
73146: STR
73147: PUSH
73148: LD_EXP 127
73152: PUSH
73153: LD_VAR 0 2
73157: ARRAY
73158: PUSH
73159: LD_INT 3
73161: ARRAY
73162: STR
73163: PUSH
73164: LD_STRING ,
73166: STR
73167: PUSH
73168: LD_EXP 127
73172: PUSH
73173: LD_VAR 0 2
73177: ARRAY
73178: PUSH
73179: LD_INT 4
73181: ARRAY
73182: STR
73183: PUSH
73184: LD_STRING )
73186: STR
73187: PPUSH
73188: CALL_OW 559
73192: GO 73090
73194: POP
73195: POP
// end ; end ;
73196: LD_VAR 0 1
73200: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
73201: LD_INT 0
73203: PPUSH
73204: PPUSH
73205: PPUSH
73206: PPUSH
73207: PPUSH
73208: PPUSH
73209: PPUSH
73210: PPUSH
73211: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
73212: LD_VAR 0 1
73216: NOT
73217: PUSH
73218: LD_VAR 0 2
73222: PPUSH
73223: LD_VAR 0 3
73227: PPUSH
73228: CALL_OW 488
73232: NOT
73233: OR
73234: PUSH
73235: LD_VAR 0 4
73239: NOT
73240: OR
73241: IFFALSE 73245
// exit ;
73243: GO 73585
// list := [ ] ;
73245: LD_ADDR_VAR 0 13
73249: PUSH
73250: EMPTY
73251: ST_TO_ADDR
// if x - r < 0 then
73252: LD_VAR 0 2
73256: PUSH
73257: LD_VAR 0 4
73261: MINUS
73262: PUSH
73263: LD_INT 0
73265: LESS
73266: IFFALSE 73278
// min_x := 0 else
73268: LD_ADDR_VAR 0 7
73272: PUSH
73273: LD_INT 0
73275: ST_TO_ADDR
73276: GO 73294
// min_x := x - r ;
73278: LD_ADDR_VAR 0 7
73282: PUSH
73283: LD_VAR 0 2
73287: PUSH
73288: LD_VAR 0 4
73292: MINUS
73293: ST_TO_ADDR
// if y - r < 0 then
73294: LD_VAR 0 3
73298: PUSH
73299: LD_VAR 0 4
73303: MINUS
73304: PUSH
73305: LD_INT 0
73307: LESS
73308: IFFALSE 73320
// min_y := 0 else
73310: LD_ADDR_VAR 0 8
73314: PUSH
73315: LD_INT 0
73317: ST_TO_ADDR
73318: GO 73336
// min_y := y - r ;
73320: LD_ADDR_VAR 0 8
73324: PUSH
73325: LD_VAR 0 3
73329: PUSH
73330: LD_VAR 0 4
73334: MINUS
73335: ST_TO_ADDR
// max_x := x + r ;
73336: LD_ADDR_VAR 0 9
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_VAR 0 4
73350: PLUS
73351: ST_TO_ADDR
// max_y := y + r ;
73352: LD_ADDR_VAR 0 10
73356: PUSH
73357: LD_VAR 0 3
73361: PUSH
73362: LD_VAR 0 4
73366: PLUS
73367: ST_TO_ADDR
// for _x = min_x to max_x do
73368: LD_ADDR_VAR 0 11
73372: PUSH
73373: DOUBLE
73374: LD_VAR 0 7
73378: DEC
73379: ST_TO_ADDR
73380: LD_VAR 0 9
73384: PUSH
73385: FOR_TO
73386: IFFALSE 73503
// for _y = min_y to max_y do
73388: LD_ADDR_VAR 0 12
73392: PUSH
73393: DOUBLE
73394: LD_VAR 0 8
73398: DEC
73399: ST_TO_ADDR
73400: LD_VAR 0 10
73404: PUSH
73405: FOR_TO
73406: IFFALSE 73499
// begin if not ValidHex ( _x , _y ) then
73408: LD_VAR 0 11
73412: PPUSH
73413: LD_VAR 0 12
73417: PPUSH
73418: CALL_OW 488
73422: NOT
73423: IFFALSE 73427
// continue ;
73425: GO 73405
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73427: LD_VAR 0 11
73431: PPUSH
73432: LD_VAR 0 12
73436: PPUSH
73437: CALL_OW 351
73441: PUSH
73442: LD_VAR 0 11
73446: PPUSH
73447: LD_VAR 0 12
73451: PPUSH
73452: CALL_OW 554
73456: AND
73457: IFFALSE 73497
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73459: LD_ADDR_VAR 0 13
73463: PUSH
73464: LD_VAR 0 13
73468: PPUSH
73469: LD_VAR 0 13
73473: PUSH
73474: LD_INT 1
73476: PLUS
73477: PPUSH
73478: LD_VAR 0 11
73482: PUSH
73483: LD_VAR 0 12
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PPUSH
73492: CALL_OW 2
73496: ST_TO_ADDR
// end ;
73497: GO 73405
73499: POP
73500: POP
73501: GO 73385
73503: POP
73504: POP
// if not list then
73505: LD_VAR 0 13
73509: NOT
73510: IFFALSE 73514
// exit ;
73512: GO 73585
// for i in list do
73514: LD_ADDR_VAR 0 6
73518: PUSH
73519: LD_VAR 0 13
73523: PUSH
73524: FOR_IN
73525: IFFALSE 73583
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
73527: LD_VAR 0 1
73531: PPUSH
73532: LD_STRING M
73534: PUSH
73535: LD_VAR 0 6
73539: PUSH
73540: LD_INT 1
73542: ARRAY
73543: PUSH
73544: LD_VAR 0 6
73548: PUSH
73549: LD_INT 2
73551: ARRAY
73552: PUSH
73553: LD_INT 0
73555: PUSH
73556: LD_INT 0
73558: PUSH
73559: LD_INT 0
73561: PUSH
73562: LD_INT 0
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: PUSH
73574: EMPTY
73575: LIST
73576: PPUSH
73577: CALL_OW 447
73581: GO 73524
73583: POP
73584: POP
// end ;
73585: LD_VAR 0 5
73589: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
73590: LD_EXP 128
73594: NOT
73595: IFFALSE 73645
73597: GO 73599
73599: DISABLE
// begin initHack := true ;
73600: LD_ADDR_EXP 128
73604: PUSH
73605: LD_INT 1
73607: ST_TO_ADDR
// hackTanks := [ ] ;
73608: LD_ADDR_EXP 129
73612: PUSH
73613: EMPTY
73614: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
73615: LD_ADDR_EXP 130
73619: PUSH
73620: EMPTY
73621: ST_TO_ADDR
// hackLimit := 3 ;
73622: LD_ADDR_EXP 131
73626: PUSH
73627: LD_INT 3
73629: ST_TO_ADDR
// hackDist := 12 ;
73630: LD_ADDR_EXP 132
73634: PUSH
73635: LD_INT 12
73637: ST_TO_ADDR
// hackCounter := [ ] ;
73638: LD_ADDR_EXP 133
73642: PUSH
73643: EMPTY
73644: ST_TO_ADDR
// end ;
73645: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
73646: LD_EXP 128
73650: PUSH
73651: LD_INT 34
73653: PUSH
73654: LD_EXP 109
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PPUSH
73663: CALL_OW 69
73667: AND
73668: IFFALSE 73923
73670: GO 73672
73672: DISABLE
73673: LD_INT 0
73675: PPUSH
73676: PPUSH
// begin enable ;
73677: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
73678: LD_ADDR_VAR 0 1
73682: PUSH
73683: LD_INT 34
73685: PUSH
73686: LD_EXP 109
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PPUSH
73695: CALL_OW 69
73699: PUSH
73700: FOR_IN
73701: IFFALSE 73921
// begin if not i in hackTanks then
73703: LD_VAR 0 1
73707: PUSH
73708: LD_EXP 129
73712: IN
73713: NOT
73714: IFFALSE 73797
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
73716: LD_ADDR_EXP 129
73720: PUSH
73721: LD_EXP 129
73725: PPUSH
73726: LD_EXP 129
73730: PUSH
73731: LD_INT 1
73733: PLUS
73734: PPUSH
73735: LD_VAR 0 1
73739: PPUSH
73740: CALL_OW 1
73744: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
73745: LD_ADDR_EXP 130
73749: PUSH
73750: LD_EXP 130
73754: PPUSH
73755: LD_EXP 130
73759: PUSH
73760: LD_INT 1
73762: PLUS
73763: PPUSH
73764: EMPTY
73765: PPUSH
73766: CALL_OW 1
73770: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
73771: LD_ADDR_EXP 133
73775: PUSH
73776: LD_EXP 133
73780: PPUSH
73781: LD_EXP 133
73785: PUSH
73786: LD_INT 1
73788: PLUS
73789: PPUSH
73790: EMPTY
73791: PPUSH
73792: CALL_OW 1
73796: ST_TO_ADDR
// end ; if not IsOk ( i ) then
73797: LD_VAR 0 1
73801: PPUSH
73802: CALL_OW 302
73806: NOT
73807: IFFALSE 73820
// begin HackUnlinkAll ( i ) ;
73809: LD_VAR 0 1
73813: PPUSH
73814: CALL 73926 0 1
// continue ;
73818: GO 73700
// end ; HackCheckCapturedStatus ( i ) ;
73820: LD_VAR 0 1
73824: PPUSH
73825: CALL 74369 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
73829: LD_ADDR_VAR 0 2
73833: PUSH
73834: LD_INT 81
73836: PUSH
73837: LD_VAR 0 1
73841: PPUSH
73842: CALL_OW 255
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: LD_INT 33
73853: PUSH
73854: LD_INT 3
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 91
73863: PUSH
73864: LD_VAR 0 1
73868: PUSH
73869: LD_EXP 132
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 50
73881: PUSH
73882: EMPTY
73883: LIST
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: PPUSH
73891: CALL_OW 69
73895: ST_TO_ADDR
// if not tmp then
73896: LD_VAR 0 2
73900: NOT
73901: IFFALSE 73905
// continue ;
73903: GO 73700
// HackLink ( i , tmp ) ;
73905: LD_VAR 0 1
73909: PPUSH
73910: LD_VAR 0 2
73914: PPUSH
73915: CALL 74062 0 2
// end ;
73919: GO 73700
73921: POP
73922: POP
// end ;
73923: PPOPN 2
73925: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
73926: LD_INT 0
73928: PPUSH
73929: PPUSH
73930: PPUSH
// if not hack in hackTanks then
73931: LD_VAR 0 1
73935: PUSH
73936: LD_EXP 129
73940: IN
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 74057
// index := GetElementIndex ( hackTanks , hack ) ;
73946: LD_ADDR_VAR 0 4
73950: PUSH
73951: LD_EXP 129
73955: PPUSH
73956: LD_VAR 0 1
73960: PPUSH
73961: CALL 21651 0 2
73965: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
73966: LD_EXP 130
73970: PUSH
73971: LD_VAR 0 4
73975: ARRAY
73976: IFFALSE 74057
// begin for i in hackTanksCaptured [ index ] do
73978: LD_ADDR_VAR 0 3
73982: PUSH
73983: LD_EXP 130
73987: PUSH
73988: LD_VAR 0 4
73992: ARRAY
73993: PUSH
73994: FOR_IN
73995: IFFALSE 74021
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
73997: LD_VAR 0 3
74001: PUSH
74002: LD_INT 1
74004: ARRAY
74005: PPUSH
74006: LD_VAR 0 3
74010: PUSH
74011: LD_INT 2
74013: ARRAY
74014: PPUSH
74015: CALL_OW 235
74019: GO 73994
74021: POP
74022: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
74023: LD_ADDR_EXP 130
74027: PUSH
74028: LD_EXP 130
74032: PPUSH
74033: LD_VAR 0 4
74037: PPUSH
74038: EMPTY
74039: PPUSH
74040: CALL_OW 1
74044: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
74045: LD_VAR 0 1
74049: PPUSH
74050: LD_INT 0
74052: PPUSH
74053: CALL_OW 505
// end ; end ;
74057: LD_VAR 0 2
74061: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
74062: LD_INT 0
74064: PPUSH
74065: PPUSH
74066: PPUSH
// if not hack in hackTanks or not vehicles then
74067: LD_VAR 0 1
74071: PUSH
74072: LD_EXP 129
74076: IN
74077: NOT
74078: PUSH
74079: LD_VAR 0 2
74083: NOT
74084: OR
74085: IFFALSE 74089
// exit ;
74087: GO 74364
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
74089: LD_ADDR_VAR 0 2
74093: PUSH
74094: LD_VAR 0 1
74098: PPUSH
74099: LD_VAR 0 2
74103: PPUSH
74104: LD_INT 1
74106: PPUSH
74107: LD_INT 1
74109: PPUSH
74110: CALL 22301 0 4
74114: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
74115: LD_ADDR_VAR 0 5
74119: PUSH
74120: LD_EXP 129
74124: PPUSH
74125: LD_VAR 0 1
74129: PPUSH
74130: CALL 21651 0 2
74134: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
74135: LD_EXP 130
74139: PUSH
74140: LD_VAR 0 5
74144: ARRAY
74145: PUSH
74146: LD_EXP 131
74150: LESS
74151: IFFALSE 74340
// begin for i := 1 to vehicles do
74153: LD_ADDR_VAR 0 4
74157: PUSH
74158: DOUBLE
74159: LD_INT 1
74161: DEC
74162: ST_TO_ADDR
74163: LD_VAR 0 2
74167: PUSH
74168: FOR_TO
74169: IFFALSE 74338
// begin if hackTanksCaptured [ index ] = hackLimit then
74171: LD_EXP 130
74175: PUSH
74176: LD_VAR 0 5
74180: ARRAY
74181: PUSH
74182: LD_EXP 131
74186: EQUAL
74187: IFFALSE 74191
// break ;
74189: GO 74338
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
74191: LD_ADDR_EXP 133
74195: PUSH
74196: LD_EXP 133
74200: PPUSH
74201: LD_VAR 0 5
74205: PPUSH
74206: LD_EXP 133
74210: PUSH
74211: LD_VAR 0 5
74215: ARRAY
74216: PUSH
74217: LD_INT 1
74219: PLUS
74220: PPUSH
74221: CALL_OW 1
74225: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
74226: LD_ADDR_EXP 130
74230: PUSH
74231: LD_EXP 130
74235: PPUSH
74236: LD_VAR 0 5
74240: PUSH
74241: LD_EXP 130
74245: PUSH
74246: LD_VAR 0 5
74250: ARRAY
74251: PUSH
74252: LD_INT 1
74254: PLUS
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PPUSH
74260: LD_VAR 0 2
74264: PUSH
74265: LD_VAR 0 4
74269: ARRAY
74270: PUSH
74271: LD_VAR 0 2
74275: PUSH
74276: LD_VAR 0 4
74280: ARRAY
74281: PPUSH
74282: CALL_OW 255
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PPUSH
74291: CALL 21866 0 3
74295: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
74296: LD_VAR 0 2
74300: PUSH
74301: LD_VAR 0 4
74305: ARRAY
74306: PPUSH
74307: LD_VAR 0 1
74311: PPUSH
74312: CALL_OW 255
74316: PPUSH
74317: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
74321: LD_VAR 0 2
74325: PUSH
74326: LD_VAR 0 4
74330: ARRAY
74331: PPUSH
74332: CALL_OW 141
// end ;
74336: GO 74168
74338: POP
74339: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74340: LD_VAR 0 1
74344: PPUSH
74345: LD_EXP 130
74349: PUSH
74350: LD_VAR 0 5
74354: ARRAY
74355: PUSH
74356: LD_INT 0
74358: PLUS
74359: PPUSH
74360: CALL_OW 505
// end ;
74364: LD_VAR 0 3
74368: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
74369: LD_INT 0
74371: PPUSH
74372: PPUSH
74373: PPUSH
74374: PPUSH
// if not hack in hackTanks then
74375: LD_VAR 0 1
74379: PUSH
74380: LD_EXP 129
74384: IN
74385: NOT
74386: IFFALSE 74390
// exit ;
74388: GO 74630
// index := GetElementIndex ( hackTanks , hack ) ;
74390: LD_ADDR_VAR 0 4
74394: PUSH
74395: LD_EXP 129
74399: PPUSH
74400: LD_VAR 0 1
74404: PPUSH
74405: CALL 21651 0 2
74409: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
74410: LD_ADDR_VAR 0 3
74414: PUSH
74415: DOUBLE
74416: LD_EXP 130
74420: PUSH
74421: LD_VAR 0 4
74425: ARRAY
74426: INC
74427: ST_TO_ADDR
74428: LD_INT 1
74430: PUSH
74431: FOR_DOWNTO
74432: IFFALSE 74604
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
74434: LD_ADDR_VAR 0 5
74438: PUSH
74439: LD_EXP 130
74443: PUSH
74444: LD_VAR 0 4
74448: ARRAY
74449: PUSH
74450: LD_VAR 0 3
74454: ARRAY
74455: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
74456: LD_VAR 0 5
74460: PUSH
74461: LD_INT 1
74463: ARRAY
74464: PPUSH
74465: CALL_OW 302
74469: NOT
74470: PUSH
74471: LD_VAR 0 5
74475: PUSH
74476: LD_INT 1
74478: ARRAY
74479: PPUSH
74480: CALL_OW 255
74484: PUSH
74485: LD_VAR 0 1
74489: PPUSH
74490: CALL_OW 255
74494: NONEQUAL
74495: OR
74496: IFFALSE 74602
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
74498: LD_VAR 0 5
74502: PUSH
74503: LD_INT 1
74505: ARRAY
74506: PPUSH
74507: CALL_OW 305
74511: PUSH
74512: LD_VAR 0 5
74516: PUSH
74517: LD_INT 1
74519: ARRAY
74520: PPUSH
74521: CALL_OW 255
74525: PUSH
74526: LD_VAR 0 1
74530: PPUSH
74531: CALL_OW 255
74535: EQUAL
74536: AND
74537: IFFALSE 74561
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
74539: LD_VAR 0 5
74543: PUSH
74544: LD_INT 1
74546: ARRAY
74547: PPUSH
74548: LD_VAR 0 5
74552: PUSH
74553: LD_INT 2
74555: ARRAY
74556: PPUSH
74557: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
74561: LD_ADDR_EXP 130
74565: PUSH
74566: LD_EXP 130
74570: PPUSH
74571: LD_VAR 0 4
74575: PPUSH
74576: LD_EXP 130
74580: PUSH
74581: LD_VAR 0 4
74585: ARRAY
74586: PPUSH
74587: LD_VAR 0 3
74591: PPUSH
74592: CALL_OW 3
74596: PPUSH
74597: CALL_OW 1
74601: ST_TO_ADDR
// end ; end ;
74602: GO 74431
74604: POP
74605: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74606: LD_VAR 0 1
74610: PPUSH
74611: LD_EXP 130
74615: PUSH
74616: LD_VAR 0 4
74620: ARRAY
74621: PUSH
74622: LD_INT 0
74624: PLUS
74625: PPUSH
74626: CALL_OW 505
// end ;
74630: LD_VAR 0 2
74634: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
74635: LD_INT 0
74637: PPUSH
74638: PPUSH
74639: PPUSH
74640: PPUSH
// if not hack in hackTanks then
74641: LD_VAR 0 1
74645: PUSH
74646: LD_EXP 129
74650: IN
74651: NOT
74652: IFFALSE 74656
// exit ;
74654: GO 74741
// index := GetElementIndex ( hackTanks , hack ) ;
74656: LD_ADDR_VAR 0 5
74660: PUSH
74661: LD_EXP 129
74665: PPUSH
74666: LD_VAR 0 1
74670: PPUSH
74671: CALL 21651 0 2
74675: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
74676: LD_ADDR_VAR 0 4
74680: PUSH
74681: DOUBLE
74682: LD_INT 1
74684: DEC
74685: ST_TO_ADDR
74686: LD_EXP 130
74690: PUSH
74691: LD_VAR 0 5
74695: ARRAY
74696: PUSH
74697: FOR_TO
74698: IFFALSE 74739
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
74700: LD_EXP 130
74704: PUSH
74705: LD_VAR 0 5
74709: ARRAY
74710: PUSH
74711: LD_VAR 0 4
74715: ARRAY
74716: PUSH
74717: LD_INT 1
74719: ARRAY
74720: PUSH
74721: LD_VAR 0 2
74725: EQUAL
74726: IFFALSE 74737
// KillUnit ( vehicle ) ;
74728: LD_VAR 0 2
74732: PPUSH
74733: CALL_OW 66
74737: GO 74697
74739: POP
74740: POP
// end ;
74741: LD_VAR 0 3
74745: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
74746: LD_EXP 134
74750: NOT
74751: IFFALSE 74786
74753: GO 74755
74755: DISABLE
// begin initMiner := true ;
74756: LD_ADDR_EXP 134
74760: PUSH
74761: LD_INT 1
74763: ST_TO_ADDR
// minersList := [ ] ;
74764: LD_ADDR_EXP 135
74768: PUSH
74769: EMPTY
74770: ST_TO_ADDR
// minerMinesList := [ ] ;
74771: LD_ADDR_EXP 136
74775: PUSH
74776: EMPTY
74777: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
74778: LD_ADDR_EXP 137
74782: PUSH
74783: LD_INT 5
74785: ST_TO_ADDR
// end ;
74786: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
74787: LD_EXP 134
74791: PUSH
74792: LD_INT 34
74794: PUSH
74795: LD_EXP 114
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PPUSH
74804: CALL_OW 69
74808: AND
74809: IFFALSE 75272
74811: GO 74813
74813: DISABLE
74814: LD_INT 0
74816: PPUSH
74817: PPUSH
74818: PPUSH
74819: PPUSH
// begin enable ;
74820: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
74821: LD_ADDR_VAR 0 1
74825: PUSH
74826: LD_INT 34
74828: PUSH
74829: LD_EXP 114
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PPUSH
74838: CALL_OW 69
74842: PUSH
74843: FOR_IN
74844: IFFALSE 74916
// begin if not i in minersList then
74846: LD_VAR 0 1
74850: PUSH
74851: LD_EXP 135
74855: IN
74856: NOT
74857: IFFALSE 74914
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
74859: LD_ADDR_EXP 135
74863: PUSH
74864: LD_EXP 135
74868: PPUSH
74869: LD_EXP 135
74873: PUSH
74874: LD_INT 1
74876: PLUS
74877: PPUSH
74878: LD_VAR 0 1
74882: PPUSH
74883: CALL_OW 1
74887: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
74888: LD_ADDR_EXP 136
74892: PUSH
74893: LD_EXP 136
74897: PPUSH
74898: LD_EXP 136
74902: PUSH
74903: LD_INT 1
74905: PLUS
74906: PPUSH
74907: EMPTY
74908: PPUSH
74909: CALL_OW 1
74913: ST_TO_ADDR
// end end ;
74914: GO 74843
74916: POP
74917: POP
// for i := minerMinesList downto 1 do
74918: LD_ADDR_VAR 0 1
74922: PUSH
74923: DOUBLE
74924: LD_EXP 136
74928: INC
74929: ST_TO_ADDR
74930: LD_INT 1
74932: PUSH
74933: FOR_DOWNTO
74934: IFFALSE 75270
// begin if IsLive ( minersList [ i ] ) then
74936: LD_EXP 135
74940: PUSH
74941: LD_VAR 0 1
74945: ARRAY
74946: PPUSH
74947: CALL_OW 300
74951: IFFALSE 74979
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
74953: LD_EXP 135
74957: PUSH
74958: LD_VAR 0 1
74962: ARRAY
74963: PPUSH
74964: LD_EXP 136
74968: PUSH
74969: LD_VAR 0 1
74973: ARRAY
74974: PPUSH
74975: CALL_OW 505
// if not minerMinesList [ i ] then
74979: LD_EXP 136
74983: PUSH
74984: LD_VAR 0 1
74988: ARRAY
74989: NOT
74990: IFFALSE 74994
// continue ;
74992: GO 74933
// for j := minerMinesList [ i ] downto 1 do
74994: LD_ADDR_VAR 0 2
74998: PUSH
74999: DOUBLE
75000: LD_EXP 136
75004: PUSH
75005: LD_VAR 0 1
75009: ARRAY
75010: INC
75011: ST_TO_ADDR
75012: LD_INT 1
75014: PUSH
75015: FOR_DOWNTO
75016: IFFALSE 75266
// begin side := GetSide ( minersList [ i ] ) ;
75018: LD_ADDR_VAR 0 3
75022: PUSH
75023: LD_EXP 135
75027: PUSH
75028: LD_VAR 0 1
75032: ARRAY
75033: PPUSH
75034: CALL_OW 255
75038: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
75039: LD_ADDR_VAR 0 4
75043: PUSH
75044: LD_EXP 136
75048: PUSH
75049: LD_VAR 0 1
75053: ARRAY
75054: PUSH
75055: LD_VAR 0 2
75059: ARRAY
75060: PUSH
75061: LD_INT 1
75063: ARRAY
75064: PPUSH
75065: LD_EXP 136
75069: PUSH
75070: LD_VAR 0 1
75074: ARRAY
75075: PUSH
75076: LD_VAR 0 2
75080: ARRAY
75081: PUSH
75082: LD_INT 2
75084: ARRAY
75085: PPUSH
75086: CALL_OW 428
75090: ST_TO_ADDR
// if not tmp then
75091: LD_VAR 0 4
75095: NOT
75096: IFFALSE 75100
// continue ;
75098: GO 75015
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
75100: LD_VAR 0 4
75104: PUSH
75105: LD_INT 81
75107: PUSH
75108: LD_VAR 0 3
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PPUSH
75117: CALL_OW 69
75121: IN
75122: PUSH
75123: LD_EXP 136
75127: PUSH
75128: LD_VAR 0 1
75132: ARRAY
75133: PUSH
75134: LD_VAR 0 2
75138: ARRAY
75139: PUSH
75140: LD_INT 1
75142: ARRAY
75143: PPUSH
75144: LD_EXP 136
75148: PUSH
75149: LD_VAR 0 1
75153: ARRAY
75154: PUSH
75155: LD_VAR 0 2
75159: ARRAY
75160: PUSH
75161: LD_INT 2
75163: ARRAY
75164: PPUSH
75165: CALL_OW 458
75169: AND
75170: IFFALSE 75264
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
75172: LD_EXP 136
75176: PUSH
75177: LD_VAR 0 1
75181: ARRAY
75182: PUSH
75183: LD_VAR 0 2
75187: ARRAY
75188: PUSH
75189: LD_INT 1
75191: ARRAY
75192: PPUSH
75193: LD_EXP 136
75197: PUSH
75198: LD_VAR 0 1
75202: ARRAY
75203: PUSH
75204: LD_VAR 0 2
75208: ARRAY
75209: PUSH
75210: LD_INT 2
75212: ARRAY
75213: PPUSH
75214: LD_VAR 0 3
75218: PPUSH
75219: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
75223: LD_ADDR_EXP 136
75227: PUSH
75228: LD_EXP 136
75232: PPUSH
75233: LD_VAR 0 1
75237: PPUSH
75238: LD_EXP 136
75242: PUSH
75243: LD_VAR 0 1
75247: ARRAY
75248: PPUSH
75249: LD_VAR 0 2
75253: PPUSH
75254: CALL_OW 3
75258: PPUSH
75259: CALL_OW 1
75263: ST_TO_ADDR
// end ; end ;
75264: GO 75015
75266: POP
75267: POP
// end ;
75268: GO 74933
75270: POP
75271: POP
// end ;
75272: PPOPN 4
75274: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
75275: LD_INT 0
75277: PPUSH
75278: PPUSH
// result := false ;
75279: LD_ADDR_VAR 0 4
75283: PUSH
75284: LD_INT 0
75286: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
75287: LD_VAR 0 1
75291: PPUSH
75292: CALL_OW 264
75296: PUSH
75297: LD_EXP 114
75301: EQUAL
75302: NOT
75303: IFFALSE 75307
// exit ;
75305: GO 75547
// index := GetElementIndex ( minersList , unit ) ;
75307: LD_ADDR_VAR 0 5
75311: PUSH
75312: LD_EXP 135
75316: PPUSH
75317: LD_VAR 0 1
75321: PPUSH
75322: CALL 21651 0 2
75326: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
75327: LD_EXP 136
75331: PUSH
75332: LD_VAR 0 5
75336: ARRAY
75337: PUSH
75338: LD_EXP 137
75342: GREATEREQUAL
75343: IFFALSE 75347
// exit ;
75345: GO 75547
// ComMoveXY ( unit , x , y ) ;
75347: LD_VAR 0 1
75351: PPUSH
75352: LD_VAR 0 2
75356: PPUSH
75357: LD_VAR 0 3
75361: PPUSH
75362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75366: LD_INT 35
75368: PPUSH
75369: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
75373: LD_VAR 0 1
75377: PPUSH
75378: LD_VAR 0 2
75382: PPUSH
75383: LD_VAR 0 3
75387: PPUSH
75388: CALL 52370 0 3
75392: NOT
75393: PUSH
75394: LD_VAR 0 1
75398: PPUSH
75399: CALL_OW 314
75403: AND
75404: IFFALSE 75408
// exit ;
75406: GO 75547
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
75408: LD_VAR 0 2
75412: PPUSH
75413: LD_VAR 0 3
75417: PPUSH
75418: CALL_OW 428
75422: PUSH
75423: LD_VAR 0 1
75427: EQUAL
75428: PUSH
75429: LD_VAR 0 1
75433: PPUSH
75434: CALL_OW 314
75438: NOT
75439: AND
75440: IFFALSE 75366
// PlaySoundXY ( x , y , PlantMine ) ;
75442: LD_VAR 0 2
75446: PPUSH
75447: LD_VAR 0 3
75451: PPUSH
75452: LD_STRING PlantMine
75454: PPUSH
75455: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
75459: LD_VAR 0 2
75463: PPUSH
75464: LD_VAR 0 3
75468: PPUSH
75469: LD_VAR 0 1
75473: PPUSH
75474: CALL_OW 255
75478: PPUSH
75479: LD_INT 0
75481: PPUSH
75482: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
75486: LD_ADDR_EXP 136
75490: PUSH
75491: LD_EXP 136
75495: PPUSH
75496: LD_VAR 0 5
75500: PUSH
75501: LD_EXP 136
75505: PUSH
75506: LD_VAR 0 5
75510: ARRAY
75511: PUSH
75512: LD_INT 1
75514: PLUS
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: PPUSH
75520: LD_VAR 0 2
75524: PUSH
75525: LD_VAR 0 3
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PPUSH
75534: CALL 21866 0 3
75538: ST_TO_ADDR
// result := true ;
75539: LD_ADDR_VAR 0 4
75543: PUSH
75544: LD_INT 1
75546: ST_TO_ADDR
// end ;
75547: LD_VAR 0 4
75551: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
75552: LD_INT 0
75554: PPUSH
75555: PPUSH
75556: PPUSH
// if not unit in minersList then
75557: LD_VAR 0 1
75561: PUSH
75562: LD_EXP 135
75566: IN
75567: NOT
75568: IFFALSE 75572
// exit ;
75570: GO 75964
// index := GetElementIndex ( minersList , unit ) ;
75572: LD_ADDR_VAR 0 6
75576: PUSH
75577: LD_EXP 135
75581: PPUSH
75582: LD_VAR 0 1
75586: PPUSH
75587: CALL 21651 0 2
75591: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
75592: LD_ADDR_VAR 0 5
75596: PUSH
75597: DOUBLE
75598: LD_EXP 136
75602: PUSH
75603: LD_VAR 0 6
75607: ARRAY
75608: INC
75609: ST_TO_ADDR
75610: LD_INT 1
75612: PUSH
75613: FOR_DOWNTO
75614: IFFALSE 75775
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
75616: LD_EXP 136
75620: PUSH
75621: LD_VAR 0 6
75625: ARRAY
75626: PUSH
75627: LD_VAR 0 5
75631: ARRAY
75632: PUSH
75633: LD_INT 1
75635: ARRAY
75636: PUSH
75637: LD_VAR 0 2
75641: EQUAL
75642: PUSH
75643: LD_EXP 136
75647: PUSH
75648: LD_VAR 0 6
75652: ARRAY
75653: PUSH
75654: LD_VAR 0 5
75658: ARRAY
75659: PUSH
75660: LD_INT 2
75662: ARRAY
75663: PUSH
75664: LD_VAR 0 3
75668: EQUAL
75669: AND
75670: IFFALSE 75773
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75672: LD_EXP 136
75676: PUSH
75677: LD_VAR 0 6
75681: ARRAY
75682: PUSH
75683: LD_VAR 0 5
75687: ARRAY
75688: PUSH
75689: LD_INT 1
75691: ARRAY
75692: PPUSH
75693: LD_EXP 136
75697: PUSH
75698: LD_VAR 0 6
75702: ARRAY
75703: PUSH
75704: LD_VAR 0 5
75708: ARRAY
75709: PUSH
75710: LD_INT 2
75712: ARRAY
75713: PPUSH
75714: LD_VAR 0 1
75718: PPUSH
75719: CALL_OW 255
75723: PPUSH
75724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75728: LD_ADDR_EXP 136
75732: PUSH
75733: LD_EXP 136
75737: PPUSH
75738: LD_VAR 0 6
75742: PPUSH
75743: LD_EXP 136
75747: PUSH
75748: LD_VAR 0 6
75752: ARRAY
75753: PPUSH
75754: LD_VAR 0 5
75758: PPUSH
75759: CALL_OW 3
75763: PPUSH
75764: CALL_OW 1
75768: ST_TO_ADDR
// exit ;
75769: POP
75770: POP
75771: GO 75964
// end ; end ;
75773: GO 75613
75775: POP
75776: POP
// for i := minerMinesList [ index ] downto 1 do
75777: LD_ADDR_VAR 0 5
75781: PUSH
75782: DOUBLE
75783: LD_EXP 136
75787: PUSH
75788: LD_VAR 0 6
75792: ARRAY
75793: INC
75794: ST_TO_ADDR
75795: LD_INT 1
75797: PUSH
75798: FOR_DOWNTO
75799: IFFALSE 75962
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
75801: LD_EXP 136
75805: PUSH
75806: LD_VAR 0 6
75810: ARRAY
75811: PUSH
75812: LD_VAR 0 5
75816: ARRAY
75817: PUSH
75818: LD_INT 1
75820: ARRAY
75821: PPUSH
75822: LD_EXP 136
75826: PUSH
75827: LD_VAR 0 6
75831: ARRAY
75832: PUSH
75833: LD_VAR 0 5
75837: ARRAY
75838: PUSH
75839: LD_INT 2
75841: ARRAY
75842: PPUSH
75843: LD_VAR 0 2
75847: PPUSH
75848: LD_VAR 0 3
75852: PPUSH
75853: CALL_OW 298
75857: PUSH
75858: LD_INT 6
75860: LESS
75861: IFFALSE 75960
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75863: LD_EXP 136
75867: PUSH
75868: LD_VAR 0 6
75872: ARRAY
75873: PUSH
75874: LD_VAR 0 5
75878: ARRAY
75879: PUSH
75880: LD_INT 1
75882: ARRAY
75883: PPUSH
75884: LD_EXP 136
75888: PUSH
75889: LD_VAR 0 6
75893: ARRAY
75894: PUSH
75895: LD_VAR 0 5
75899: ARRAY
75900: PUSH
75901: LD_INT 2
75903: ARRAY
75904: PPUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: CALL_OW 255
75914: PPUSH
75915: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75919: LD_ADDR_EXP 136
75923: PUSH
75924: LD_EXP 136
75928: PPUSH
75929: LD_VAR 0 6
75933: PPUSH
75934: LD_EXP 136
75938: PUSH
75939: LD_VAR 0 6
75943: ARRAY
75944: PPUSH
75945: LD_VAR 0 5
75949: PPUSH
75950: CALL_OW 3
75954: PPUSH
75955: CALL_OW 1
75959: ST_TO_ADDR
// end ; end ;
75960: GO 75798
75962: POP
75963: POP
// end ;
75964: LD_VAR 0 4
75968: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
75969: LD_INT 0
75971: PPUSH
75972: PPUSH
75973: PPUSH
75974: PPUSH
75975: PPUSH
75976: PPUSH
75977: PPUSH
75978: PPUSH
75979: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
75980: LD_VAR 0 1
75984: PPUSH
75985: CALL_OW 264
75989: PUSH
75990: LD_EXP 114
75994: EQUAL
75995: NOT
75996: PUSH
75997: LD_VAR 0 1
76001: PUSH
76002: LD_EXP 135
76006: IN
76007: NOT
76008: OR
76009: IFFALSE 76013
// exit ;
76011: GO 76335
// index := GetElementIndex ( minersList , unit ) ;
76013: LD_ADDR_VAR 0 6
76017: PUSH
76018: LD_EXP 135
76022: PPUSH
76023: LD_VAR 0 1
76027: PPUSH
76028: CALL 21651 0 2
76032: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
76033: LD_ADDR_VAR 0 8
76037: PUSH
76038: LD_EXP 137
76042: PUSH
76043: LD_EXP 136
76047: PUSH
76048: LD_VAR 0 6
76052: ARRAY
76053: MINUS
76054: ST_TO_ADDR
// if not minesFreeAmount then
76055: LD_VAR 0 8
76059: NOT
76060: IFFALSE 76064
// exit ;
76062: GO 76335
// tmp := [ ] ;
76064: LD_ADDR_VAR 0 7
76068: PUSH
76069: EMPTY
76070: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
76071: LD_ADDR_VAR 0 5
76075: PUSH
76076: DOUBLE
76077: LD_INT 1
76079: DEC
76080: ST_TO_ADDR
76081: LD_VAR 0 8
76085: PUSH
76086: FOR_TO
76087: IFFALSE 76282
// begin _d := rand ( 0 , 5 ) ;
76089: LD_ADDR_VAR 0 11
76093: PUSH
76094: LD_INT 0
76096: PPUSH
76097: LD_INT 5
76099: PPUSH
76100: CALL_OW 12
76104: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
76105: LD_ADDR_VAR 0 12
76109: PUSH
76110: LD_INT 2
76112: PPUSH
76113: LD_INT 6
76115: PPUSH
76116: CALL_OW 12
76120: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
76121: LD_ADDR_VAR 0 9
76125: PUSH
76126: LD_VAR 0 2
76130: PPUSH
76131: LD_VAR 0 11
76135: PPUSH
76136: LD_VAR 0 12
76140: PPUSH
76141: CALL_OW 272
76145: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
76146: LD_ADDR_VAR 0 10
76150: PUSH
76151: LD_VAR 0 3
76155: PPUSH
76156: LD_VAR 0 11
76160: PPUSH
76161: LD_VAR 0 12
76165: PPUSH
76166: CALL_OW 273
76170: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
76171: LD_VAR 0 9
76175: PPUSH
76176: LD_VAR 0 10
76180: PPUSH
76181: CALL_OW 488
76185: PUSH
76186: LD_VAR 0 9
76190: PUSH
76191: LD_VAR 0 10
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_VAR 0 7
76204: IN
76205: NOT
76206: AND
76207: PUSH
76208: LD_VAR 0 9
76212: PPUSH
76213: LD_VAR 0 10
76217: PPUSH
76218: CALL_OW 458
76222: NOT
76223: AND
76224: IFFALSE 76266
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
76226: LD_ADDR_VAR 0 7
76230: PUSH
76231: LD_VAR 0 7
76235: PPUSH
76236: LD_VAR 0 7
76240: PUSH
76241: LD_INT 1
76243: PLUS
76244: PPUSH
76245: LD_VAR 0 9
76249: PUSH
76250: LD_VAR 0 10
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PPUSH
76259: CALL_OW 1
76263: ST_TO_ADDR
76264: GO 76280
// i := i - 1 ;
76266: LD_ADDR_VAR 0 5
76270: PUSH
76271: LD_VAR 0 5
76275: PUSH
76276: LD_INT 1
76278: MINUS
76279: ST_TO_ADDR
// end ;
76280: GO 76086
76282: POP
76283: POP
// for i in tmp do
76284: LD_ADDR_VAR 0 5
76288: PUSH
76289: LD_VAR 0 7
76293: PUSH
76294: FOR_IN
76295: IFFALSE 76333
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
76297: LD_VAR 0 1
76301: PPUSH
76302: LD_VAR 0 5
76306: PUSH
76307: LD_INT 1
76309: ARRAY
76310: PPUSH
76311: LD_VAR 0 5
76315: PUSH
76316: LD_INT 2
76318: ARRAY
76319: PPUSH
76320: CALL 75275 0 3
76324: NOT
76325: IFFALSE 76331
// exit ;
76327: POP
76328: POP
76329: GO 76335
76331: GO 76294
76333: POP
76334: POP
// end ;
76335: LD_VAR 0 4
76339: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
76340: LD_INT 0
76342: PPUSH
76343: PPUSH
76344: PPUSH
76345: PPUSH
76346: PPUSH
76347: PPUSH
76348: PPUSH
// if not GetClass ( unit ) = class_sniper then
76349: LD_VAR 0 1
76353: PPUSH
76354: CALL_OW 257
76358: PUSH
76359: LD_INT 5
76361: EQUAL
76362: NOT
76363: IFFALSE 76367
// exit ;
76365: GO 76755
// dist := 8 ;
76367: LD_ADDR_VAR 0 5
76371: PUSH
76372: LD_INT 8
76374: ST_TO_ADDR
// viewRange := 12 ;
76375: LD_ADDR_VAR 0 7
76379: PUSH
76380: LD_INT 12
76382: ST_TO_ADDR
// side := GetSide ( unit ) ;
76383: LD_ADDR_VAR 0 6
76387: PUSH
76388: LD_VAR 0 1
76392: PPUSH
76393: CALL_OW 255
76397: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
76398: LD_INT 61
76400: PPUSH
76401: LD_VAR 0 6
76405: PPUSH
76406: CALL_OW 321
76410: PUSH
76411: LD_INT 2
76413: EQUAL
76414: IFFALSE 76424
// viewRange := 16 ;
76416: LD_ADDR_VAR 0 7
76420: PUSH
76421: LD_INT 16
76423: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
76424: LD_VAR 0 1
76428: PPUSH
76429: LD_VAR 0 2
76433: PPUSH
76434: LD_VAR 0 3
76438: PPUSH
76439: CALL_OW 297
76443: PUSH
76444: LD_VAR 0 5
76448: GREATER
76449: IFFALSE 76528
// begin ComMoveXY ( unit , x , y ) ;
76451: LD_VAR 0 1
76455: PPUSH
76456: LD_VAR 0 2
76460: PPUSH
76461: LD_VAR 0 3
76465: PPUSH
76466: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76470: LD_INT 35
76472: PPUSH
76473: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
76477: LD_VAR 0 1
76481: PPUSH
76482: LD_VAR 0 2
76486: PPUSH
76487: LD_VAR 0 3
76491: PPUSH
76492: CALL 52370 0 3
76496: NOT
76497: IFFALSE 76501
// exit ;
76499: GO 76755
// until GetDistUnitXY ( unit , x , y ) < dist ;
76501: LD_VAR 0 1
76505: PPUSH
76506: LD_VAR 0 2
76510: PPUSH
76511: LD_VAR 0 3
76515: PPUSH
76516: CALL_OW 297
76520: PUSH
76521: LD_VAR 0 5
76525: LESS
76526: IFFALSE 76470
// end ; ComTurnXY ( unit , x , y ) ;
76528: LD_VAR 0 1
76532: PPUSH
76533: LD_VAR 0 2
76537: PPUSH
76538: LD_VAR 0 3
76542: PPUSH
76543: CALL_OW 118
// wait ( 5 ) ;
76547: LD_INT 5
76549: PPUSH
76550: CALL_OW 67
// _d := GetDir ( unit ) ;
76554: LD_ADDR_VAR 0 10
76558: PUSH
76559: LD_VAR 0 1
76563: PPUSH
76564: CALL_OW 254
76568: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
76569: LD_ADDR_VAR 0 8
76573: PUSH
76574: LD_VAR 0 1
76578: PPUSH
76579: CALL_OW 250
76583: PPUSH
76584: LD_VAR 0 10
76588: PPUSH
76589: LD_VAR 0 5
76593: PPUSH
76594: CALL_OW 272
76598: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
76599: LD_ADDR_VAR 0 9
76603: PUSH
76604: LD_VAR 0 1
76608: PPUSH
76609: CALL_OW 251
76613: PPUSH
76614: LD_VAR 0 10
76618: PPUSH
76619: LD_VAR 0 5
76623: PPUSH
76624: CALL_OW 273
76628: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76629: LD_VAR 0 8
76633: PPUSH
76634: LD_VAR 0 9
76638: PPUSH
76639: CALL_OW 488
76643: NOT
76644: IFFALSE 76648
// exit ;
76646: GO 76755
// ComAnimCustom ( unit , 1 ) ;
76648: LD_VAR 0 1
76652: PPUSH
76653: LD_INT 1
76655: PPUSH
76656: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
76660: LD_VAR 0 8
76664: PPUSH
76665: LD_VAR 0 9
76669: PPUSH
76670: LD_VAR 0 6
76674: PPUSH
76675: LD_VAR 0 7
76679: PPUSH
76680: CALL_OW 330
// repeat wait ( 1 ) ;
76684: LD_INT 1
76686: PPUSH
76687: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
76691: LD_VAR 0 1
76695: PPUSH
76696: CALL_OW 316
76700: PUSH
76701: LD_VAR 0 1
76705: PPUSH
76706: CALL_OW 314
76710: OR
76711: PUSH
76712: LD_VAR 0 1
76716: PPUSH
76717: CALL_OW 302
76721: NOT
76722: OR
76723: PUSH
76724: LD_VAR 0 1
76728: PPUSH
76729: CALL_OW 301
76733: OR
76734: IFFALSE 76684
// RemoveSeeing ( _x , _y , side ) ;
76736: LD_VAR 0 8
76740: PPUSH
76741: LD_VAR 0 9
76745: PPUSH
76746: LD_VAR 0 6
76750: PPUSH
76751: CALL_OW 331
// end ; end_of_file
76755: LD_VAR 0 4
76759: RET
