// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 333 0 0
// PrepareRussian ;
  24: CALL 921 0 0
// PrepareNature ;
  28: CALL 12737 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 20
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 21
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 22
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 23
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// canExitBase = false ;
 203: LD_ADDR_EXP 19
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// sawLeftBunker = false ;
 211: LD_ADDR_EXP 26
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// sawRightBunker = false ;
 219: LD_ADDR_EXP 27
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 227: LD_ADDR_EXP 28
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 235: LD_ADDR_EXP 29
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// playerGetSupport = false ;
 243: LD_ADDR_EXP 30
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// captureBelkovVehicle = false ;
 251: LD_ADDR_EXP 34
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// saveBelkovObjective = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// medalForGetSupport = true ;
 267: LD_ADDR_EXP 36
 271: PUSH
 272: LD_INT 1
 274: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 275: LD_ADDR_EXP 35
 279: PUSH
 280: LD_INT 1
 282: NEG
 283: ST_TO_ADDR
// initiative = 0 ;
 284: LD_ADDR_EXP 38
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// lostComradesCounter = 0 ;
 292: LD_ADDR_EXP 39
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// northMapExplored = false ;
 300: LD_ADDR_EXP 37
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 308: LD_ADDR_EXP 24
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// activateAMAI = false ;
 316: LD_ADDR_EXP 25
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// MissionIntro ;
 324: CALL 5597 0 0
// end ; end_of_file
 328: LD_VAR 0 1
 332: RET
// export function InitMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// BaseMapConfig ;
 336: CALL 349 0 0
// MissionMapConfig ;
 340: CALL 435 0 0
// end ;
 344: LD_VAR 0 1
 348: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 349: LD_INT 0
 351: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 352: LD_ADDR_EXP 40
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: LD_INT 4
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 375: LD_ADDR_EXP 41
 379: PUSH
 380: LD_INT 2
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: ST_TO_ADDR
// animalsAgression = 0 ;
 398: LD_ADDR_EXP 42
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 45
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 02_ ;
 414: LD_ADDR_EXP 43
 418: PUSH
 419: LD_STRING 02_
 421: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 422: LD_ADDR_EXP 44
 426: PUSH
 427: LD_STRING 01_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 162
 445: PUSH
 446: LD_INT 107
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 162
 455: PUSH
 456: LD_INT 108
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 163
 465: PUSH
 466: LD_INT 109
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 163
 475: PUSH
 476: LD_INT 110
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 109
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 161
 495: PUSH
 496: LD_INT 107
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 161
 505: PUSH
 506: LD_INT 106
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 522: LD_ADDR_EXP 48
 526: PUSH
 527: LD_INT 113
 529: PUSH
 530: LD_INT 96
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PUSH
 537: LD_INT 114
 539: PUSH
 540: LD_INT 97
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: PUSH
 547: LD_INT 114
 549: PUSH
 550: LD_INT 98
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 562: LD_ADDR_EXP 46
 566: PUSH
 567: LD_INT 10
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// labCratesRefund = 20 ;
 585: LD_ADDR_EXP 49
 589: PUSH
 590: LD_INT 20
 592: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 593: LD_ADDR_EXP 50
 597: PUSH
 598: LD_INT 40
 600: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 601: LD_ADDR_EXP 51
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: LD_INT 2
 611: PUSH
 612: LD_INT 2
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: PUSH
 620: LD_OWVAR 67
 624: ARRAY
 625: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 4 ] ] [ Difficulty ] ;
 626: LD_ADDR_EXP 52
 630: PUSH
 631: LD_INT 2
 633: PUSH
 634: LD_INT 2
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 3
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: LD_OWVAR 67
 670: ARRAY
 671: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 672: LD_ADDR_EXP 53
 676: PUSH
 677: LD_INT 21000
 679: PUSH
 680: LD_INT 16800
 682: PUSH
 683: LD_INT 12600
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PUSH
 691: LD_OWVAR 67
 695: ARRAY
 696: ST_TO_ADDR
// end ;
 697: LD_VAR 0 1
 701: RET
// every 0 0$1 trigger debugMode do var i ;
 702: LD_EXP 45
 706: IFFALSE 918
 708: GO 710
 710: DISABLE
 711: LD_INT 0
 713: PPUSH
// begin enable ;
 714: ENABLE
// FogOff ( your_side ) ;
 715: LD_OWVAR 2
 719: PPUSH
 720: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 724: LD_ADDR_VAR 0 1
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_OWVAR 2
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 21
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 21
 756: PUSH
 757: LD_INT 2
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: LIST
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PPUSH
 773: CALL_OW 69
 777: PUSH
 778: FOR_IN
 779: IFFALSE 795
// SetLives ( i , 1000 ) ;
 781: LD_VAR 0 1
 785: PPUSH
 786: LD_INT 1000
 788: PPUSH
 789: CALL_OW 234
 793: GO 778
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 797: LD_ADDR_VAR 0 1
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_OWVAR 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 2
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 30
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PPUSH
 846: CALL_OW 69
 850: PUSH
 851: FOR_IN
 852: IFFALSE 916
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 274
 903: PPUSH
 904: LD_INT 3
 906: PPUSH
 907: LD_INT 9999
 909: PPUSH
 910: CALL_OW 277
// end ;
 914: GO 851
 916: POP
 917: POP
// end ; end_of_file
 918: PPOPN 1
 920: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export function PrepareRussian ; begin
 921: LD_INT 0
 923: PPUSH
// PrepareCharactersFromPreviousMission ;
 924: CALL 1255 0 0
// PrepareKirovBase ;
 928: CALL 1450 0 0
// PrepareBeriaBase ;
 932: CALL 2168 0 0
// end ;
 936: LD_VAR 0 1
 940: RET
// export function PrepareBelkovReturnTeam ; var unit , others ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// belkovTeam = [ ] ;
 946: LD_ADDR_EXP 65
 950: PUSH
 951: EMPTY
 952: ST_TO_ADDR
// uc_side = 6 ;
 953: LD_ADDR_OWVAR 20
 957: PUSH
 958: LD_INT 6
 960: ST_TO_ADDR
// uc_nation = nation_russian ;
 961: LD_ADDR_OWVAR 21
 965: PUSH
 966: LD_INT 3
 968: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
 969: LD_ADDR_OWVAR 37
 973: PUSH
 974: LD_EXP 67
 978: PUSH
 979: LD_INT 1
 981: ARRAY
 982: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
 983: LD_ADDR_OWVAR 39
 987: PUSH
 988: LD_EXP 67
 992: PUSH
 993: LD_INT 2
 995: ARRAY
 996: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
 997: LD_ADDR_OWVAR 38
1001: PUSH
1002: LD_EXP 67
1006: PUSH
1007: LD_INT 3
1009: ARRAY
1010: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1011: LD_ADDR_OWVAR 40
1015: PUSH
1016: LD_EXP 67
1020: PUSH
1021: LD_INT 4
1023: ARRAY
1024: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1025: LD_ADDR_OWVAR 41
1029: PUSH
1030: LD_EXP 67
1034: PUSH
1035: LD_INT 5
1037: ARRAY
1038: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1039: LD_ADDR_EXP 64
1043: PUSH
1044: CALL_OW 45
1048: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1049: LD_EXP 64
1053: PPUSH
1054: LD_INT 3
1056: PPUSH
1057: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1061: LD_EXP 64
1065: PPUSH
1066: LD_INT 11
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1076: LD_ADDR_EXP 65
1080: PUSH
1081: LD_EXP 65
1085: PUSH
1086: LD_EXP 64
1090: ADD
1091: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1092: LD_STRING 02_TmpBelkov
1094: PPUSH
1095: CALL_OW 28
1099: IFFALSE 1146
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1101: LD_ADDR_EXP 56
1105: PUSH
1106: LD_STRING 02_TmpBelkov
1108: PPUSH
1109: CALL_OW 34
1113: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1114: LD_EXP 56
1118: PPUSH
1119: LD_EXP 64
1123: PPUSH
1124: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1128: LD_ADDR_EXP 65
1132: PUSH
1133: LD_EXP 65
1137: PUSH
1138: LD_EXP 56
1142: ADD
1143: ST_TO_ADDR
// end else
1144: GO 1189
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1146: LD_ADDR_EXP 60
1150: PUSH
1151: LD_STRING 02_TmpBelkov2
1153: PPUSH
1154: CALL_OW 34
1158: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1159: LD_EXP 60
1163: PPUSH
1164: LD_EXP 64
1168: PPUSH
1169: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1173: LD_ADDR_EXP 65
1177: PUSH
1178: LD_EXP 65
1182: PUSH
1183: LD_EXP 60
1187: ADD
1188: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1189: LD_ADDR_VAR 0 3
1193: PUSH
1194: LD_STRING 02_TmpBelkovTeam
1196: PPUSH
1197: CALL_OW 31
1201: ST_TO_ADDR
// for unit in others do
1202: LD_ADDR_VAR 0 2
1206: PUSH
1207: LD_VAR 0 3
1211: PUSH
1212: FOR_IN
1213: IFFALSE 1248
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1215: LD_VAR 0 2
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1230: LD_ADDR_EXP 65
1234: PUSH
1235: LD_EXP 65
1239: PUSH
1240: LD_VAR 0 2
1244: ADD
1245: ST_TO_ADDR
// end ;
1246: GO 1212
1248: POP
1249: POP
// end ;
1250: LD_VAR 0 1
1254: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1255: LD_INT 0
1257: PPUSH
1258: PPUSH
// uc_side = 3 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1267: LD_ADDR_EXP 54
1271: PUSH
1272: LD_STRING Burlak
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 3358 0 2
1282: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1283: LD_ADDR_EXP 55
1287: PUSH
1288: LD_STRING Gnyevko
1290: PPUSH
1291: LD_INT 1
1293: PPUSH
1294: CALL 3358 0 2
1298: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1299: LD_ADDR_EXP 56
1303: PUSH
1304: LD_STRING Belkov
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: CALL 3358 0 2
1314: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1315: LD_ADDR_EXP 57
1319: PUSH
1320: LD_STRING Kirilenkova
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 3358 0 2
1330: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1331: LD_EXP 54
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1346: LD_EXP 55
1350: PPUSH
1351: LD_INT 3
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1361: LD_EXP 56
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1376: LD_EXP 57
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1391: LD_EXP 54
1395: PPUSH
1396: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1400: LD_ADDR_EXP 58
1404: PUSH
1405: LD_STRING 01_other_survivors
1407: PPUSH
1408: CALL_OW 31
1412: ST_TO_ADDR
// for i in other_survivors do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: LD_EXP 58
1422: PUSH
1423: FOR_IN
1424: IFFALSE 1443
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1426: LD_VAR 0 2
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
1441: GO 1423
1443: POP
1444: POP
// end ;
1445: LD_VAR 0 1
1449: RET
// function PrepareKirovBase ; var i , un ; begin
1450: LD_INT 0
1452: PPUSH
1453: PPUSH
1454: PPUSH
// SetBName ( kirov , kirov ) ;
1455: LD_INT 71
1457: PPUSH
1458: LD_STRING kirov
1460: PPUSH
1461: CALL_OW 500
// uc_side = 6 ;
1465: LD_ADDR_OWVAR 20
1469: PUSH
1470: LD_INT 6
1472: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1473: LD_ADDR_EXP 59
1477: PUSH
1478: LD_STRING Kurin
1480: PPUSH
1481: LD_INT 0
1483: PPUSH
1484: CALL 3358 0 2
1488: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1489: LD_ADDR_EXP 62
1493: PUSH
1494: LD_STRING Kovalyuk
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL 3358 0 2
1504: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1505: LD_ADDR_EXP 60
1509: PUSH
1510: LD_STRING Belkov2
1512: PPUSH
1513: LD_INT 0
1515: PPUSH
1516: CALL 3358 0 2
1520: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1521: LD_EXP 59
1525: PPUSH
1526: LD_INT 4
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1536: LD_EXP 62
1540: PPUSH
1541: LD_INT 161
1543: PPUSH
1544: LD_INT 108
1546: PPUSH
1547: LD_INT 6
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 50
// ComHold ( Kurin ) ;
1557: LD_EXP 59
1561: PPUSH
1562: CALL_OW 140
// otherKirovUnits = [ ] ;
1566: LD_ADDR_EXP 61
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1573: LD_ADDR_EXP 46
1577: PUSH
1578: LD_EXP 46
1582: PPUSH
1583: LD_INT 1
1585: PPUSH
1586: LD_EXP 46
1590: PUSH
1591: LD_INT 1
1593: ARRAY
1594: PUSH
1595: LD_EXP 58
1599: PPUSH
1600: LD_INT 25
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PPUSH
1610: CALL_OW 72
1614: MINUS
1615: PPUSH
1616: CALL_OW 1
1620: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1621: LD_ADDR_VAR 0 2
1625: PUSH
1626: DOUBLE
1627: LD_INT 1
1629: DEC
1630: ST_TO_ADDR
1631: LD_EXP 46
1635: PUSH
1636: LD_INT 1
1638: ARRAY
1639: PUSH
1640: FOR_TO
1641: IFFALSE 1737
// begin uc_nation = 3 ;
1643: LD_ADDR_OWVAR 21
1647: PUSH
1648: LD_INT 3
1650: ST_TO_ADDR
// hc_gallery =  ;
1651: LD_ADDR_OWVAR 33
1655: PUSH
1656: LD_STRING 
1658: ST_TO_ADDR
// hc_name =  ;
1659: LD_ADDR_OWVAR 26
1663: PUSH
1664: LD_STRING 
1666: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( 3 , 5 ) ) ;
1667: LD_INT 0
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: LD_INT 3
1675: PPUSH
1676: LD_INT 5
1678: PPUSH
1679: CALL_OW 12
1683: PPUSH
1684: CALL_OW 380
// un = CreateHuman ;
1688: LD_ADDR_VAR 0 3
1692: PUSH
1693: CALL_OW 44
1697: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1698: LD_ADDR_EXP 61
1702: PUSH
1703: LD_EXP 61
1707: PUSH
1708: LD_VAR 0 3
1712: ADD
1713: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_INT 161
1721: PPUSH
1722: LD_INT 108
1724: PPUSH
1725: LD_INT 6
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 50
// end ;
1735: GO 1640
1737: POP
1738: POP
// for i := 1 to kirovAmountPeople [ 2 ] do
1739: LD_ADDR_VAR 0 2
1743: PUSH
1744: DOUBLE
1745: LD_INT 1
1747: DEC
1748: ST_TO_ADDR
1749: LD_EXP 46
1753: PUSH
1754: LD_INT 2
1756: ARRAY
1757: PUSH
1758: FOR_TO
1759: IFFALSE 1855
// begin uc_nation = 3 ;
1761: LD_ADDR_OWVAR 21
1765: PUSH
1766: LD_INT 3
1768: ST_TO_ADDR
// hc_gallery =  ;
1769: LD_ADDR_OWVAR 33
1773: PUSH
1774: LD_STRING 
1776: ST_TO_ADDR
// hc_name =  ;
1777: LD_ADDR_OWVAR 26
1781: PUSH
1782: LD_STRING 
1784: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 4 , 5 ) ) ;
1785: LD_INT 0
1787: PPUSH
1788: LD_INT 2
1790: PPUSH
1791: LD_INT 4
1793: PPUSH
1794: LD_INT 5
1796: PPUSH
1797: CALL_OW 12
1801: PPUSH
1802: CALL_OW 380
// un = CreateHuman ;
1806: LD_ADDR_VAR 0 3
1810: PUSH
1811: CALL_OW 44
1815: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1816: LD_ADDR_EXP 61
1820: PUSH
1821: LD_EXP 61
1825: PUSH
1826: LD_VAR 0 3
1830: ADD
1831: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
1832: LD_VAR 0 3
1836: PPUSH
1837: LD_INT 161
1839: PPUSH
1840: LD_INT 108
1842: PPUSH
1843: LD_INT 6
1845: PPUSH
1846: LD_INT 0
1848: PPUSH
1849: CALL_OW 50
// end ;
1853: GO 1758
1855: POP
1856: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: DOUBLE
1863: LD_INT 1
1865: DEC
1866: ST_TO_ADDR
1867: LD_EXP 46
1871: PUSH
1872: LD_INT 3
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1973
// begin uc_nation = 3 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 3
1886: ST_TO_ADDR
// hc_gallery =  ;
1887: LD_ADDR_OWVAR 33
1891: PUSH
1892: LD_STRING 
1894: ST_TO_ADDR
// hc_name =  ;
1895: LD_ADDR_OWVAR 26
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 3 , 5 ) ) ;
1903: LD_INT 0
1905: PPUSH
1906: LD_INT 3
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: LD_INT 5
1914: PPUSH
1915: CALL_OW 12
1919: PPUSH
1920: CALL_OW 380
// un = CreateHuman ;
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: CALL_OW 44
1933: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1934: LD_ADDR_EXP 61
1938: PUSH
1939: LD_EXP 61
1943: PUSH
1944: LD_VAR 0 3
1948: ADD
1949: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
1950: LD_VAR 0 3
1954: PPUSH
1955: LD_INT 161
1957: PPUSH
1958: LD_INT 108
1960: PPUSH
1961: LD_INT 6
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 50
// end ;
1971: GO 1876
1973: POP
1974: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
1975: LD_ADDR_VAR 0 2
1979: PUSH
1980: DOUBLE
1981: LD_INT 1
1983: DEC
1984: ST_TO_ADDR
1985: LD_EXP 46
1989: PUSH
1990: LD_INT 4
1992: ARRAY
1993: PUSH
1994: FOR_TO
1995: IFFALSE 2091
// begin uc_nation = 3 ;
1997: LD_ADDR_OWVAR 21
2001: PUSH
2002: LD_INT 3
2004: ST_TO_ADDR
// hc_gallery =  ;
2005: LD_ADDR_OWVAR 33
2009: PUSH
2010: LD_STRING 
2012: ST_TO_ADDR
// hc_name =  ;
2013: LD_ADDR_OWVAR 26
2017: PUSH
2018: LD_STRING 
2020: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( 3 , 5 ) ) ;
2021: LD_INT 0
2023: PPUSH
2024: LD_INT 4
2026: PPUSH
2027: LD_INT 3
2029: PPUSH
2030: LD_INT 5
2032: PPUSH
2033: CALL_OW 12
2037: PPUSH
2038: CALL_OW 380
// un = CreateHuman ;
2042: LD_ADDR_VAR 0 3
2046: PUSH
2047: CALL_OW 44
2051: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2052: LD_ADDR_EXP 61
2056: PUSH
2057: LD_EXP 61
2061: PUSH
2062: LD_VAR 0 3
2066: ADD
2067: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
2068: LD_VAR 0 3
2072: PPUSH
2073: LD_INT 161
2075: PPUSH
2076: LD_INT 108
2078: PPUSH
2079: LD_INT 6
2081: PPUSH
2082: LD_INT 0
2084: PPUSH
2085: CALL_OW 50
// end ;
2089: GO 1994
2091: POP
2092: POP
// if not TestCharacters ( 01_Gnyevko ) then
2093: LD_STRING 01_Gnyevko
2095: PPUSH
2096: CALL_OW 28
2100: NOT
2101: IFFALSE 2144
// begin PrepareMechanic ( sex_male , 3 ) ;
2103: LD_INT 1
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: CALL_OW 383
// randomMech = CreateHuman ;
2113: LD_ADDR_EXP 63
2117: PUSH
2118: CALL_OW 44
2122: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2123: LD_EXP 63
2127: PPUSH
2128: LD_INT 161
2130: PPUSH
2131: LD_INT 108
2133: PPUSH
2134: LD_INT 6
2136: PPUSH
2137: LD_INT 0
2139: PPUSH
2140: CALL_OW 50
// end ; if not belkovReturn then
2144: LD_EXP 6
2148: NOT
2149: IFFALSE 2163
// PlaceHumanInUnit ( Belkov2 , ru2_arm ) ;
2151: LD_EXP 60
2155: PPUSH
2156: LD_INT 95
2158: PPUSH
2159: CALL_OW 52
// end ;
2163: LD_VAR 0 1
2167: RET
// function PrepareBeriaBase ; var i , un ; begin
2168: LD_INT 0
2170: PPUSH
2171: PPUSH
2172: PPUSH
// SetBName ( beria , beria ) ;
2173: LD_INT 106
2175: PPUSH
2176: LD_STRING beria
2178: PPUSH
2179: CALL_OW 500
// uc_side = 6 ;
2183: LD_ADDR_OWVAR 20
2187: PUSH
2188: LD_INT 6
2190: ST_TO_ADDR
// uc_nation = 3 ;
2191: LD_ADDR_OWVAR 21
2195: PUSH
2196: LD_INT 3
2198: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2199: LD_ADDR_EXP 68
2203: PUSH
2204: LD_STRING Platonov
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL 3358 0 2
2214: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2215: LD_EXP 68
2219: PPUSH
2220: LD_INT 112
2222: PPUSH
2223: LD_INT 97
2225: PPUSH
2226: LD_INT 0
2228: PPUSH
2229: CALL_OW 48
// ComHold ( Platonov ) ;
2233: LD_EXP 68
2237: PPUSH
2238: CALL_OW 140
// platSoldiers = [ ] ;
2242: LD_ADDR_EXP 69
2246: PUSH
2247: EMPTY
2248: ST_TO_ADDR
// hc_gallery =  ;
2249: LD_ADDR_OWVAR 33
2253: PUSH
2254: LD_STRING 
2256: ST_TO_ADDR
// hc_name =  ;
2257: LD_ADDR_OWVAR 26
2261: PUSH
2262: LD_STRING 
2264: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( 1 , 3 ) ) ;
2265: LD_INT 1
2267: PPUSH
2268: LD_INT 1
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceUnitXYR ( un , 110 , 97 , 6 , false ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 97
2322: PPUSH
2323: LD_INT 6
2325: PPUSH
2326: LD_INT 0
2328: PPUSH
2329: CALL_OW 50
// for i := 1 to 3 do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: DOUBLE
2339: LD_INT 1
2341: DEC
2342: ST_TO_ADDR
2343: LD_INT 3
2345: PUSH
2346: FOR_TO
2347: IFFALSE 2426
// begin un = PrepareSolBun ( rand ( 1 , 3 ) , FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
2349: LD_ADDR_VAR 0 3
2353: PUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_INT 3
2359: PPUSH
2360: CALL_OW 12
2364: PPUSH
2365: LD_INT 8
2367: PPUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 6
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 30
2380: PUSH
2381: LD_INT 31
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PPUSH
2392: CALL_OW 70
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: PPUSH
2403: CALL 4414 0 2
2407: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2408: LD_ADDR_EXP 69
2412: PUSH
2413: LD_EXP 69
2417: PUSH
2418: LD_VAR 0 3
2422: ADD
2423: ST_TO_ADDR
// end ;
2424: GO 2346
2426: POP
2427: POP
// end ; end_of_file
2428: LD_VAR 0 1
2432: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2433: LD_INT 0
2435: PPUSH
// PrepareTrap ;
2436: CALL 2449 0 0
// PrepareBunkiers ;
2440: CALL 2813 0 0
// end ;
2444: LD_VAR 0 1
2448: RET
// function PrepareTrap ; var i , un ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
// trapTeam = [ ] ;
2454: LD_ADDR_EXP 71
2458: PUSH
2459: EMPTY
2460: ST_TO_ADDR
// uc_nation = 1 ;
2461: LD_ADDR_OWVAR 21
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// uc_side = 1 ;
2469: LD_ADDR_OWVAR 20
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// hc_gallery =  ;
2477: LD_ADDR_OWVAR 33
2481: PUSH
2482: LD_STRING 
2484: ST_TO_ADDR
// hc_name = profile_name ;
2485: LD_ADDR_OWVAR 26
2489: PUSH
2490: LD_OWVAR 78
2494: ST_TO_ADDR
// hc_importance = 100 ;
2495: LD_ADDR_OWVAR 32
2499: PUSH
2500: LD_INT 100
2502: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2503: LD_INT 1
2505: PPUSH
2506: LD_INT 1
2508: PPUSH
2509: LD_EXP 51
2513: PUSH
2514: LD_INT 1
2516: PLUS
2517: PPUSH
2518: CALL_OW 380
// trapCommander = CreateHuman ;
2522: LD_ADDR_EXP 70
2526: PUSH
2527: CALL_OW 44
2531: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2532: LD_EXP 70
2536: PPUSH
2537: LD_INT 13
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2547: LD_EXP 70
2551: PPUSH
2552: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2556: LD_ADDR_EXP 71
2560: PUSH
2561: LD_EXP 71
2565: PUSH
2566: LD_EXP 70
2570: ADD
2571: ST_TO_ADDR
// hc_importance = 0 ;
2572: LD_ADDR_OWVAR 32
2576: PUSH
2577: LD_INT 0
2579: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: DOUBLE
2586: LD_INT 1
2588: DEC
2589: ST_TO_ADDR
2590: LD_EXP 52
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: PUSH
2599: FOR_TO
2600: IFFALSE 2692
// begin hc_name =  ;
2602: LD_ADDR_OWVAR 26
2606: PUSH
2607: LD_STRING 
2609: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2610: LD_INT 0
2612: PPUSH
2613: LD_INT 1
2615: PPUSH
2616: LD_EXP 51
2620: PPUSH
2621: CALL_OW 380
// un = CreateHuman ;
2625: LD_ADDR_VAR 0 3
2629: PUSH
2630: CALL_OW 44
2634: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
2635: LD_VAR 0 3
2639: PPUSH
2640: LD_INT 12
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 49
// ComCrawl ( un ) ;
2650: LD_VAR 0 3
2654: PPUSH
2655: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 21
2669: PPUSH
2670: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2674: LD_ADDR_EXP 71
2678: PUSH
2679: LD_EXP 71
2683: PUSH
2684: LD_VAR 0 3
2688: ADD
2689: ST_TO_ADDR
// end ;
2690: GO 2599
2692: POP
2693: POP
// for i := 1 to trapAmountPeople [ 2 ] do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: DOUBLE
2700: LD_INT 1
2702: DEC
2703: ST_TO_ADDR
2704: LD_EXP 52
2708: PUSH
2709: LD_INT 2
2711: ARRAY
2712: PUSH
2713: FOR_TO
2714: IFFALSE 2806
// begin hc_name =  ;
2716: LD_ADDR_OWVAR 26
2720: PUSH
2721: LD_STRING 
2723: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2724: LD_INT 0
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_EXP 51
2734: PPUSH
2735: CALL_OW 380
// un = CreateHuman ;
2739: LD_ADDR_VAR 0 3
2743: PUSH
2744: CALL_OW 44
2748: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
2749: LD_VAR 0 3
2753: PPUSH
2754: LD_INT 14
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// ComCrawl ( un ) ;
2764: LD_VAR 0 3
2768: PPUSH
2769: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 116
2780: PPUSH
2781: LD_INT 21
2783: PPUSH
2784: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2788: LD_ADDR_EXP 71
2792: PUSH
2793: LD_EXP 71
2797: PUSH
2798: LD_VAR 0 3
2802: ADD
2803: ST_TO_ADDR
// end ;
2804: GO 2713
2806: POP
2807: POP
// end ;
2808: LD_VAR 0 1
2812: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
2813: LD_INT 0
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// uc_side = 1 ;
2819: LD_ADDR_OWVAR 20
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// uc_nation = nation_american ;
2827: LD_ADDR_OWVAR 21
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// bc_level = 1 ;
2835: LD_ADDR_OWVAR 43
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// bc_type = b_breastwork ;
2843: LD_ADDR_OWVAR 42
2847: PUSH
2848: LD_INT 31
2850: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
2851: LD_ADDR_VAR 0 4
2855: PUSH
2856: LD_INT 104
2858: PPUSH
2859: LD_INT 59
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: CALL_OW 47
2869: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
2870: LD_ADDR_EXP 72
2874: PUSH
2875: LD_EXP 72
2879: PUSH
2880: LD_VAR 0 4
2884: ADD
2885: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2886: LD_EXP 51
2890: PPUSH
2891: LD_VAR 0 4
2895: PPUSH
2896: CALL 4414 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
2900: LD_ADDR_VAR 0 4
2904: PUSH
2905: LD_INT 101
2907: PPUSH
2908: LD_INT 55
2910: PPUSH
2911: LD_INT 4
2913: PPUSH
2914: CALL_OW 47
2918: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
2919: LD_ADDR_EXP 72
2923: PUSH
2924: LD_EXP 72
2928: PUSH
2929: LD_VAR 0 4
2933: ADD
2934: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2935: LD_EXP 51
2939: PPUSH
2940: LD_VAR 0 4
2944: PPUSH
2945: CALL 4414 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
2949: LD_ADDR_VAR 0 4
2953: PUSH
2954: LD_INT 132
2956: PPUSH
2957: LD_INT 62
2959: PPUSH
2960: LD_INT 1
2962: PPUSH
2963: CALL_OW 47
2967: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
2968: LD_ADDR_EXP 73
2972: PUSH
2973: LD_EXP 73
2977: PUSH
2978: LD_VAR 0 4
2982: ADD
2983: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2984: LD_EXP 51
2988: PPUSH
2989: LD_VAR 0 4
2993: PPUSH
2994: CALL 4414 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: LD_INT 134
3005: PPUSH
3006: LD_INT 66
3008: PPUSH
3009: LD_INT 1
3011: PPUSH
3012: CALL_OW 47
3016: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3017: LD_ADDR_EXP 73
3021: PUSH
3022: LD_EXP 73
3026: PUSH
3027: LD_VAR 0 4
3031: ADD
3032: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3033: LD_EXP 51
3037: PPUSH
3038: LD_VAR 0 4
3042: PPUSH
3043: CALL 4414 0 2
// bc_type = b_depot ;
3047: LD_ADDR_OWVAR 42
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3055: LD_ADDR_EXP 74
3059: PUSH
3060: LD_INT 92
3062: PPUSH
3063: LD_INT 51
3065: PPUSH
3066: LD_INT 2
3068: PPUSH
3069: CALL_OW 47
3073: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3074: LD_ADDR_EXP 75
3078: PUSH
3079: LD_INT 193
3081: ST_TO_ADDR
// amLeftEngs = [ ] ;
3082: LD_ADDR_EXP 76
3086: PUSH
3087: EMPTY
3088: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 1
3101: PUSH
3102: LD_INT 1
3104: PUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 2
3110: PPUSH
3111: CALL_OW 12
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: LD_OWVAR 67
3125: ARRAY
3126: PUSH
3127: FOR_TO
3128: IFFALSE 3219
// begin uc_nation = 1 ;
3130: LD_ADDR_OWVAR 21
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// uc_side = 1 ;
3138: LD_ADDR_OWVAR 20
3142: PUSH
3143: LD_INT 1
3145: ST_TO_ADDR
// hc_gallery =  ;
3146: LD_ADDR_OWVAR 33
3150: PUSH
3151: LD_STRING 
3153: ST_TO_ADDR
// hc_name =  ;
3154: LD_ADDR_OWVAR 26
3158: PUSH
3159: LD_STRING 
3161: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3162: LD_INT 0
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: LD_EXP 51
3172: PPUSH
3173: CALL_OW 380
// un = CreateHuman ;
3177: LD_ADDR_VAR 0 3
3181: PUSH
3182: CALL_OW 44
3186: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3187: LD_ADDR_EXP 76
3191: PUSH
3192: LD_EXP 76
3196: PUSH
3197: LD_VAR 0 3
3201: ADD
3202: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3203: LD_VAR 0 3
3207: PPUSH
3208: LD_EXP 74
3212: PPUSH
3213: CALL_OW 52
// end ;
3217: GO 3127
3219: POP
3220: POP
// if Difficulty = 3 then
3221: LD_OWVAR 67
3225: PUSH
3226: LD_INT 3
3228: EQUAL
3229: IFFALSE 3353
// begin amRightEngs = [ ] ;
3231: LD_ADDR_EXP 77
3235: PUSH
3236: EMPTY
3237: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3238: LD_ADDR_VAR 0 2
3242: PUSH
3243: DOUBLE
3244: LD_INT 1
3246: DEC
3247: ST_TO_ADDR
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: CALL_OW 12
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3351
// begin uc_nation = 1 ;
3262: LD_ADDR_OWVAR 21
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_side = 1 ;
3270: LD_ADDR_OWVAR 20
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// hc_gallery =  ;
3278: LD_ADDR_OWVAR 33
3282: PUSH
3283: LD_STRING 
3285: ST_TO_ADDR
// hc_name =  ;
3286: LD_ADDR_OWVAR 26
3290: PUSH
3291: LD_STRING 
3293: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3294: LD_INT 0
3296: PPUSH
3297: LD_INT 2
3299: PPUSH
3300: LD_EXP 51
3304: PPUSH
3305: CALL_OW 380
// un = CreateHuman ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: CALL_OW 44
3318: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3319: LD_ADDR_EXP 77
3323: PUSH
3324: LD_EXP 77
3328: PUSH
3329: LD_VAR 0 3
3333: ADD
3334: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3335: LD_VAR 0 3
3339: PPUSH
3340: LD_EXP 75
3344: PPUSH
3345: CALL_OW 52
// end ;
3349: GO 3259
3351: POP
3352: POP
// end ; end ; end_of_file
3353: LD_VAR 0 1
3357: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3358: LD_INT 0
3360: PPUSH
3361: PPUSH
// if exist_mode then
3362: LD_VAR 0 2
3366: IFFALSE 3391
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3368: LD_ADDR_VAR 0 4
3372: PUSH
3373: LD_EXP 44
3377: PUSH
3378: LD_VAR 0 1
3382: STR
3383: PPUSH
3384: CALL_OW 34
3388: ST_TO_ADDR
3389: GO 3406
// unit := NewCharacter ( ident ) ;
3391: LD_ADDR_VAR 0 4
3395: PUSH
3396: LD_VAR 0 1
3400: PPUSH
3401: CALL_OW 25
3405: ST_TO_ADDR
// result := unit ;
3406: LD_ADDR_VAR 0 3
3410: PUSH
3411: LD_VAR 0 4
3415: ST_TO_ADDR
// end ;
3416: LD_VAR 0 3
3420: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
3421: LD_INT 0
3423: PPUSH
3424: PPUSH
3425: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 1
3435: PUSH
3436: LD_EXP 54
3440: PUSH
3441: LD_EXP 55
3445: PUSH
3446: LD_EXP 56
3450: PUSH
3451: LD_EXP 57
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: DIFF
3462: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_VAR 0 1
3472: PUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 12
3485: ARRAY
3486: ST_TO_ADDR
// if radio then
3487: LD_VAR 0 4
3491: IFFALSE 3540
// begin if GetSex ( speaker ) = sex_male then
3493: LD_VAR 0 7
3497: PPUSH
3498: CALL_OW 258
3502: PUSH
3503: LD_INT 1
3505: EQUAL
3506: IFFALSE 3524
// SayRadio ( speaker , dialogMID ) else
3508: LD_VAR 0 7
3512: PPUSH
3513: LD_VAR 0 2
3517: PPUSH
3518: CALL_OW 94
3522: GO 3538
// SayRadio ( speaker , dialogFID ) ;
3524: LD_VAR 0 7
3528: PPUSH
3529: LD_VAR 0 3
3533: PPUSH
3534: CALL_OW 94
// end else
3538: GO 3585
// begin if GetSex ( speaker ) = sex_male then
3540: LD_VAR 0 7
3544: PPUSH
3545: CALL_OW 258
3549: PUSH
3550: LD_INT 1
3552: EQUAL
3553: IFFALSE 3571
// Say ( speaker , dialogMID ) else
3555: LD_VAR 0 7
3559: PPUSH
3560: LD_VAR 0 2
3564: PPUSH
3565: CALL_OW 88
3569: GO 3585
// Say ( speaker , dialogFID ) ;
3571: LD_VAR 0 7
3575: PPUSH
3576: LD_VAR 0 3
3580: PPUSH
3581: CALL_OW 88
// end ; result := speaker ;
3585: LD_ADDR_VAR 0 5
3589: PUSH
3590: LD_VAR 0 7
3594: ST_TO_ADDR
// end ;
3595: LD_VAR 0 5
3599: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
3600: LD_INT 0
3602: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
3603: LD_VAR 0 1
3607: PPUSH
3608: CALL_OW 255
3612: PUSH
3613: LD_VAR 0 3
3617: EQUAL
3618: PUSH
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 302
3628: AND
3629: IFFALSE 3651
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
3631: LD_VAR 0 1
3635: PPUSH
3636: LD_EXP 43
3640: PUSH
3641: LD_VAR 0 2
3645: STR
3646: PPUSH
3647: CALL_OW 38
// end ;
3651: LD_VAR 0 4
3655: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
3656: LD_INT 0
3658: PPUSH
3659: PPUSH
3660: PPUSH
// resultCharactersToSave = [ ] ;
3661: LD_ADDR_VAR 0 6
3665: PUSH
3666: EMPTY
3667: ST_TO_ADDR
// for unit in characters do
3668: LD_ADDR_VAR 0 5
3672: PUSH
3673: LD_VAR 0 1
3677: PUSH
3678: FOR_IN
3679: IFFALSE 3727
// if GetSide ( unit ) = side and IsOK ( unit ) then
3681: LD_VAR 0 5
3685: PPUSH
3686: CALL_OW 255
3690: PUSH
3691: LD_VAR 0 3
3695: EQUAL
3696: PUSH
3697: LD_VAR 0 5
3701: PPUSH
3702: CALL_OW 302
3706: AND
3707: IFFALSE 3725
// resultCharactersToSave = resultCharactersToSave ^ unit ;
3709: LD_ADDR_VAR 0 6
3713: PUSH
3714: LD_VAR 0 6
3718: PUSH
3719: LD_VAR 0 5
3723: ADD
3724: ST_TO_ADDR
3725: GO 3678
3727: POP
3728: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
3729: LD_VAR 0 6
3733: PPUSH
3734: LD_EXP 43
3738: PUSH
3739: LD_VAR 0 2
3743: STR
3744: PPUSH
3745: CALL_OW 38
// end ;
3749: LD_VAR 0 4
3753: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
3754: LD_INT 0
3756: PPUSH
3757: PPUSH
3758: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: LD_STRING QMoreInfo
3766: PPUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 98
3776: ST_TO_ADDR
// case dec of 1 :
3777: LD_VAR 0 3
3781: PUSH
3782: LD_INT 1
3784: DOUBLE
3785: EQUAL
3786: IFTRUE 3790
3788: GO 3850
3790: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
3791: LD_EXP 54
3795: PPUSH
3796: LD_STRING D2a-Bur-1
3798: PPUSH
3799: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
3803: LD_EXP 68
3807: PPUSH
3808: LD_STRING D2a-Pla-1
3810: PPUSH
3811: CALL_OW 88
// q1 = q diff 1 ;
3815: LD_ADDR_VAR 0 4
3819: PUSH
3820: LD_VAR 0 1
3824: PUSH
3825: LD_INT 1
3827: DIFF
3828: ST_TO_ADDR
// if q1 >= 2 then
3829: LD_VAR 0 4
3833: PUSH
3834: LD_INT 2
3836: GREATEREQUAL
3837: IFFALSE 3848
// Question1 ( q1 ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: CALL 3754 0 1
// end ; 2 :
3848: GO 3987
3850: LD_INT 2
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3918
3858: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
3859: LD_EXP 54
3863: PPUSH
3864: LD_STRING D2b-Bur-1
3866: PPUSH
3867: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
3871: LD_EXP 68
3875: PPUSH
3876: LD_STRING D2b-Pla-1
3878: PPUSH
3879: CALL_OW 88
// q1 = q diff 2 ;
3883: LD_ADDR_VAR 0 4
3887: PUSH
3888: LD_VAR 0 1
3892: PUSH
3893: LD_INT 2
3895: DIFF
3896: ST_TO_ADDR
// if q1 >= 2 then
3897: LD_VAR 0 4
3901: PUSH
3902: LD_INT 2
3904: GREATEREQUAL
3905: IFFALSE 3916
// Question1 ( q1 ) ;
3907: LD_VAR 0 4
3911: PPUSH
3912: CALL 3754 0 1
// end ; 3 :
3916: GO 3987
3918: LD_INT 3
3920: DOUBLE
3921: EQUAL
3922: IFTRUE 3926
3924: GO 3986
3926: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
3927: LD_EXP 54
3931: PPUSH
3932: LD_STRING D2c-Bur-1
3934: PPUSH
3935: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
3939: LD_EXP 68
3943: PPUSH
3944: LD_STRING D2c-Pla-1
3946: PPUSH
3947: CALL_OW 88
// q1 = q diff 3 ;
3951: LD_ADDR_VAR 0 4
3955: PUSH
3956: LD_VAR 0 1
3960: PUSH
3961: LD_INT 3
3963: DIFF
3964: ST_TO_ADDR
// if q1 >= 2 then
3965: LD_VAR 0 4
3969: PUSH
3970: LD_INT 2
3972: GREATEREQUAL
3973: IFFALSE 3984
// Question1 ( q1 ) ;
3975: LD_VAR 0 4
3979: PPUSH
3980: CALL 3754 0 1
// end ; end ;
3984: GO 3987
3986: POP
// end ;
3987: LD_VAR 0 2
3991: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
3996: LD_VAR 0 1
4000: PPUSH
4001: CALL_OW 302
4005: NOT
4006: PUSH
4007: LD_VAR 0 2
4011: PPUSH
4012: CALL_OW 302
4016: NOT
4017: OR
4018: PUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: CALL_OW 302
4028: NOT
4029: OR
4030: PUSH
4031: LD_VAR 0 3
4035: PPUSH
4036: CALL_OW 261
4040: PUSH
4041: LD_INT 100
4043: EQUAL
4044: OR
4045: IFFALSE 4049
// exit ;
4047: GO 4168
// AddComTransport ( engineer , depot , mat_oil ) ;
4049: LD_VAR 0 1
4053: PPUSH
4054: LD_VAR 0 2
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// until Carry ( engineer ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: CALL_OW 281
4082: IFFALSE 4066
// RemoveTasks ( engineer ) ;
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_STRING O
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 0
4106: PUSH
4107: LD_VAR 0 3
4111: PUSH
4112: LD_INT 0
4114: PUSH
4115: LD_INT 0
4117: PUSH
4118: LD_INT 0
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: PPUSH
4133: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4137: LD_INT 35
4139: PPUSH
4140: CALL_OW 67
// until not Carry ( engineer ) ;
4144: LD_VAR 0 1
4148: PPUSH
4149: CALL_OW 281
4153: NOT
4154: IFFALSE 4137
// SetFuel ( vehicle , 100 ) ;
4156: LD_VAR 0 3
4160: PPUSH
4161: LD_INT 100
4163: PPUSH
4164: CALL_OW 240
// end ;
4168: LD_VAR 0 4
4172: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4173: LD_INT 0
4175: PPUSH
4176: PPUSH
4177: PPUSH
4178: PPUSH
4179: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4180: LD_ADDR_VAR 0 8
4184: PUSH
4185: LD_INT 48
4187: PUSH
4188: LD_INT 49
4190: PUSH
4191: LD_INT 50
4193: PUSH
4194: LD_INT 20
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: LD_INT 51
4202: PUSH
4203: LD_INT 52
4205: PUSH
4206: LD_INT 69
4208: PUSH
4209: LD_INT 39
4211: PUSH
4212: LD_INT 34
4214: PUSH
4215: LD_INT 40
4217: PUSH
4218: LD_INT 53
4220: PUSH
4221: LD_INT 71
4223: PUSH
4224: LD_INT 57
4226: PUSH
4227: LD_INT 58
4229: PUSH
4230: LD_INT 44
4232: PUSH
4233: LD_INT 32
4235: PUSH
4236: LD_INT 27
4238: PUSH
4239: LD_INT 23
4241: PUSH
4242: LD_INT 33
4244: PUSH
4245: LD_INT 59
4247: PUSH
4248: LD_INT 54
4250: PUSH
4251: LD_INT 55
4253: PUSH
4254: LD_INT 56
4256: PUSH
4257: LD_INT 63
4259: PUSH
4260: LD_INT 64
4262: PUSH
4263: LD_INT 65
4265: PUSH
4266: LD_INT 30
4268: PUSH
4269: LD_INT 31
4271: PUSH
4272: LD_INT 21
4274: PUSH
4275: LD_INT 22
4277: PUSH
4278: LD_INT 25
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4315: LD_ADDR_VAR 0 5
4319: PUSH
4320: DOUBLE
4321: LD_INT 1
4323: DEC
4324: ST_TO_ADDR
4325: LD_VAR 0 8
4329: PUSH
4330: FOR_TO
4331: IFFALSE 4407
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4333: LD_VAR 0 8
4337: PUSH
4338: LD_VAR 0 5
4342: ARRAY
4343: PPUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 321
4353: PUSH
4354: LD_INT 1
4356: EQUAL
4357: PUSH
4358: LD_VAR 0 8
4362: PUSH
4363: LD_VAR 0 5
4367: ARRAY
4368: PPUSH
4369: LD_VAR 0 3
4373: PPUSH
4374: CALL_OW 482
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: AND
4383: IFFALSE 4405
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
4385: LD_VAR 0 2
4389: PPUSH
4390: LD_VAR 0 8
4394: PUSH
4395: LD_VAR 0 5
4399: ARRAY
4400: PPUSH
4401: CALL_OW 184
4405: GO 4330
4407: POP
4408: POP
// end ;
4409: LD_VAR 0 4
4413: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
4418: PPUSH
// uc_side := GetSide ( b ) ;
4419: LD_ADDR_OWVAR 20
4423: PUSH
4424: LD_VAR 0 2
4428: PPUSH
4429: CALL_OW 255
4433: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_VAR 0 2
4443: PPUSH
4444: CALL_OW 248
4448: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4449: LD_INT 0
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: LD_VAR 0 1
4459: PPUSH
4460: CALL_OW 380
// un = CreateHuman ;
4464: LD_ADDR_VAR 0 4
4468: PUSH
4469: CALL_OW 44
4473: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4474: LD_ADDR_VAR 0 5
4478: PUSH
4479: LD_VAR 0 2
4483: PPUSH
4484: CALL_OW 254
4488: PUSH
4489: LD_INT 3
4491: MINUS
4492: ST_TO_ADDR
// if dir < 0 then
4493: LD_VAR 0 5
4497: PUSH
4498: LD_INT 0
4500: LESS
4501: IFFALSE 4517
// dir := 6 + dir ;
4503: LD_ADDR_VAR 0 5
4507: PUSH
4508: LD_INT 6
4510: PUSH
4511: LD_VAR 0 5
4515: PLUS
4516: ST_TO_ADDR
// SetDir ( un , dir ) ;
4517: LD_VAR 0 4
4521: PPUSH
4522: LD_VAR 0 5
4526: PPUSH
4527: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4531: LD_VAR 0 4
4535: PPUSH
4536: LD_VAR 0 2
4540: PPUSH
4541: CALL_OW 52
// result = un ;
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_VAR 0 4
4554: ST_TO_ADDR
// end ;
4555: LD_VAR 0 3
4559: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
// tmp = [ ] ;
4565: LD_ADDR_VAR 0 5
4569: PUSH
4570: EMPTY
4571: ST_TO_ADDR
// if not vehicles then
4572: LD_VAR 0 1
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4709
// for i in vehicles do
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_VAR 0 1
4590: PUSH
4591: FOR_IN
4592: IFFALSE 4693
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) , GetFuel ( i ) ] ) ;
4594: LD_ADDR_VAR 0 5
4598: PUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: LD_INT 1
4606: PPUSH
4607: LD_VAR 0 4
4611: PPUSH
4612: CALL_OW 265
4616: PUSH
4617: LD_VAR 0 4
4621: PPUSH
4622: CALL_OW 262
4626: PUSH
4627: LD_VAR 0 4
4631: PPUSH
4632: CALL_OW 263
4636: PUSH
4637: LD_VAR 0 4
4641: PPUSH
4642: CALL_OW 264
4646: PUSH
4647: LD_VAR 0 4
4651: PPUSH
4652: CALL_OW 261
4656: PUSH
4657: LD_VAR 0 4
4661: PPUSH
4662: CALL_OW 256
4666: PUSH
4667: LD_VAR 0 4
4671: PPUSH
4672: CALL_OW 261
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PPUSH
4686: CALL_OW 2
4690: ST_TO_ADDR
4691: GO 4591
4693: POP
4694: POP
// SaveVariable ( tmp , ident ) ;
4695: LD_VAR 0 5
4699: PPUSH
4700: LD_VAR 0 2
4704: PPUSH
4705: CALL_OW 39
// end ;
4709: LD_VAR 0 3
4713: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
4714: LD_INT 0
4716: PPUSH
4717: PPUSH
4718: PPUSH
// buildingsToSave = [ ] ;
4719: LD_ADDR_VAR 0 5
4723: PUSH
4724: EMPTY
4725: ST_TO_ADDR
// if not buildings then
4726: LD_VAR 0 1
4730: NOT
4731: IFFALSE 4735
// exit ;
4733: GO 5103
// for i in buildings do
4735: LD_ADDR_VAR 0 4
4739: PUSH
4740: LD_VAR 0 1
4744: PUSH
4745: FOR_IN
4746: IFFALSE 5087
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4748: LD_VAR 0 4
4752: PPUSH
4753: CALL_OW 266
4757: PUSH
4758: LD_INT 6
4760: PUSH
4761: LD_INT 7
4763: PUSH
4764: LD_INT 8
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: IN
4772: IFFALSE 4886
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
4774: LD_ADDR_VAR 0 5
4778: PUSH
4779: LD_VAR 0 5
4783: PUSH
4784: LD_VAR 0 4
4788: PPUSH
4789: CALL_OW 266
4793: PUSH
4794: LD_VAR 0 4
4798: PPUSH
4799: CALL_OW 250
4803: PUSH
4804: LD_VAR 0 4
4808: PPUSH
4809: CALL_OW 251
4813: PUSH
4814: LD_VAR 0 4
4818: PPUSH
4819: CALL_OW 254
4823: PUSH
4824: LD_VAR 0 4
4828: PPUSH
4829: CALL_OW 267
4833: PUSH
4834: LD_VAR 0 4
4838: PPUSH
4839: CALL_OW 248
4843: PUSH
4844: LD_VAR 0 4
4848: PPUSH
4849: LD_INT 1
4851: PPUSH
4852: CALL_OW 268
4856: PUSH
4857: LD_VAR 0 4
4861: PPUSH
4862: LD_INT 2
4864: PPUSH
4865: CALL_OW 268
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: EMPTY
4881: LIST
4882: ADD
4883: ST_TO_ADDR
4884: GO 5085
// if GetBType ( i ) in [ b_bunker , b_turret ] then
4886: LD_VAR 0 4
4890: PPUSH
4891: CALL_OW 266
4895: PUSH
4896: LD_INT 32
4898: PUSH
4899: LD_INT 33
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: IN
4906: IFFALSE 5003
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
4908: LD_ADDR_VAR 0 5
4912: PUSH
4913: LD_VAR 0 5
4917: PUSH
4918: LD_VAR 0 4
4922: PPUSH
4923: CALL_OW 266
4927: PUSH
4928: LD_VAR 0 4
4932: PPUSH
4933: CALL_OW 250
4937: PUSH
4938: LD_VAR 0 4
4942: PPUSH
4943: CALL_OW 251
4947: PUSH
4948: LD_VAR 0 4
4952: PPUSH
4953: CALL_OW 254
4957: PUSH
4958: LD_VAR 0 4
4962: PPUSH
4963: CALL_OW 267
4967: PUSH
4968: LD_VAR 0 4
4972: PPUSH
4973: CALL_OW 248
4977: PUSH
4978: LD_VAR 0 4
4982: PPUSH
4983: CALL_OW 269
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: ADD
5000: ST_TO_ADDR
5001: GO 5085
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
5003: LD_ADDR_VAR 0 5
5007: PUSH
5008: LD_VAR 0 5
5012: PUSH
5013: LD_VAR 0 4
5017: PPUSH
5018: CALL_OW 266
5022: PUSH
5023: LD_VAR 0 4
5027: PPUSH
5028: CALL_OW 250
5032: PUSH
5033: LD_VAR 0 4
5037: PPUSH
5038: CALL_OW 251
5042: PUSH
5043: LD_VAR 0 4
5047: PPUSH
5048: CALL_OW 254
5052: PUSH
5053: LD_VAR 0 4
5057: PPUSH
5058: CALL_OW 267
5062: PUSH
5063: LD_VAR 0 4
5067: PPUSH
5068: CALL_OW 248
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: ADD
5084: ST_TO_ADDR
// end ;
5085: GO 4745
5087: POP
5088: POP
// SaveVariable ( buildingsToSave , ident ) ;
5089: LD_VAR 0 5
5093: PPUSH
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 39
// end ;
5103: LD_VAR 0 3
5107: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds ; begin
5108: LD_INT 0
5110: PPUSH
5111: PPUSH
5112: PPUSH
5113: PPUSH
// belkovTeam = [ ] ;
5114: LD_ADDR_EXP 65
5118: PUSH
5119: EMPTY
5120: ST_TO_ADDR
// if belkovReturn then
5121: LD_EXP 6
5125: IFFALSE 5145
// belkovTeam = belkovTeam ^ Belkov else
5127: LD_ADDR_EXP 65
5131: PUSH
5132: LD_EXP 65
5136: PUSH
5137: LD_EXP 56
5141: ADD
5142: ST_TO_ADDR
5143: GO 5161
// belkovTeam = belkovTeam ^ Belkov2 ;
5145: LD_ADDR_EXP 65
5149: PUSH
5150: LD_EXP 65
5154: PUSH
5155: LD_EXP 60
5159: ADD
5160: ST_TO_ADDR
// for unit in other_survivors do
5161: LD_ADDR_VAR 0 3
5165: PUSH
5166: LD_EXP 58
5170: PUSH
5171: FOR_IN
5172: IFFALSE 5213
// if IsOK ( unit ) and belkovTeam < 5 then
5174: LD_VAR 0 3
5178: PPUSH
5179: CALL_OW 302
5183: PUSH
5184: LD_EXP 65
5188: PUSH
5189: LD_INT 5
5191: LESS
5192: AND
5193: IFFALSE 5211
// belkovTeam = belkovTeam ^ unit ;
5195: LD_ADDR_EXP 65
5199: PUSH
5200: LD_EXP 65
5204: PUSH
5205: LD_VAR 0 3
5209: ADD
5210: ST_TO_ADDR
5211: GO 5171
5213: POP
5214: POP
// if belkovTeam < 5 then
5215: LD_EXP 65
5219: PUSH
5220: LD_INT 5
5222: LESS
5223: IFFALSE 5375
// begin restRandSolds = 5 - belkovTeam ;
5225: LD_ADDR_VAR 0 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_EXP 65
5237: MINUS
5238: ST_TO_ADDR
// for i := 1 to restRandSolds do
5239: LD_ADDR_VAR 0 2
5243: PUSH
5244: DOUBLE
5245: LD_INT 1
5247: DEC
5248: ST_TO_ADDR
5249: LD_VAR 0 4
5253: PUSH
5254: FOR_TO
5255: IFFALSE 5373
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) do
5257: LD_ADDR_VAR 0 3
5261: PUSH
5262: LD_EXP 61
5266: PPUSH
5267: LD_INT 25
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: EMPTY
5278: LIST
5279: PPUSH
5280: CALL_OW 72
5284: PUSH
5285: FOR_IN
5286: IFFALSE 5369
// if not unit in belkovTeam then
5288: LD_VAR 0 3
5292: PUSH
5293: LD_EXP 65
5297: IN
5298: NOT
5299: IFFALSE 5367
// if not IsInUnit ( unit ) or GetBType ( IsInUnit ( unit ) ) = b_armoury then
5301: LD_VAR 0 3
5305: PPUSH
5306: CALL_OW 310
5310: NOT
5311: PUSH
5312: LD_VAR 0 3
5316: PPUSH
5317: CALL_OW 310
5321: PPUSH
5322: CALL_OW 266
5326: PUSH
5327: LD_INT 4
5329: EQUAL
5330: OR
5331: IFFALSE 5367
// begin belkovTeam = belkovTeam ^ unit ;
5333: LD_ADDR_EXP 65
5337: PUSH
5338: LD_EXP 65
5342: PUSH
5343: LD_VAR 0 3
5347: ADD
5348: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
5349: LD_ADDR_EXP 61
5353: PUSH
5354: LD_EXP 61
5358: PUSH
5359: LD_VAR 0 3
5363: DIFF
5364: ST_TO_ADDR
// break ;
5365: GO 5369
// end ;
5367: GO 5285
5369: POP
5370: POP
5371: GO 5254
5373: POP
5374: POP
// end ; belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5375: LD_ADDR_EXP 65
5379: PUSH
5380: LD_EXP 65
5384: PUSH
5385: LD_EXP 61
5389: PPUSH
5390: LD_INT 25
5392: PUSH
5393: LD_INT 4
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: PPUSH
5403: CALL_OW 72
5407: PUSH
5408: LD_INT 1
5410: ARRAY
5411: ADD
5412: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5413: LD_ADDR_EXP 61
5417: PUSH
5418: LD_EXP 61
5422: PUSH
5423: LD_EXP 61
5427: PPUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 4
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: EMPTY
5439: LIST
5440: PPUSH
5441: CALL_OW 72
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: DIFF
5450: ST_TO_ADDR
// end ;
5451: LD_VAR 0 1
5455: RET
// export function PlatonovSendSupport ; var i , randValue ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
// for i := 1 to 2 do
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: DOUBLE
5467: LD_INT 1
5469: DEC
5470: ST_TO_ADDR
5471: LD_INT 2
5473: PUSH
5474: FOR_TO
5475: IFFALSE 5590
// begin randValue = rand ( 1 , platSoldiers ) ;
5477: LD_ADDR_VAR 0 3
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_EXP 69
5489: PPUSH
5490: CALL_OW 12
5494: ST_TO_ADDR
// SetSide ( platSoldiers [ randValue ] , 3 ) ;
5495: LD_EXP 69
5499: PUSH
5500: LD_VAR 0 3
5504: ARRAY
5505: PPUSH
5506: LD_INT 3
5508: PPUSH
5509: CALL_OW 235
// if IsInUnit ( platSoldiers [ randValue ] ) then
5513: LD_EXP 69
5517: PUSH
5518: LD_VAR 0 3
5522: ARRAY
5523: PPUSH
5524: CALL_OW 310
5528: IFFALSE 5545
// ComExitBuilding ( platSoldiers [ randValue ] ) ;
5530: LD_EXP 69
5534: PUSH
5535: LD_VAR 0 3
5539: ARRAY
5540: PPUSH
5541: CALL_OW 122
// AddComMoveXY ( platSoldiers [ randValue ] , 112 , 96 ) ;
5545: LD_EXP 69
5549: PUSH
5550: LD_VAR 0 3
5554: ARRAY
5555: PPUSH
5556: LD_INT 112
5558: PPUSH
5559: LD_INT 96
5561: PPUSH
5562: CALL_OW 171
// platSoldiers = platSoldiers diff platSoldiers [ randValue ] ;
5566: LD_ADDR_EXP 69
5570: PUSH
5571: LD_EXP 69
5575: PUSH
5576: LD_EXP 69
5580: PUSH
5581: LD_VAR 0 3
5585: ARRAY
5586: DIFF
5587: ST_TO_ADDR
// end ;
5588: GO 5474
5590: POP
5591: POP
// end ; end_of_file
5592: LD_VAR 0 1
5596: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
5597: LD_INT 0
5599: PPUSH
5600: PPUSH
5601: PPUSH
5602: PPUSH
// CenterNowOnUnits ( Burlak ) ;
5603: LD_EXP 54
5607: PPUSH
5608: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
5612: LD_EXP 54
5616: PPUSH
5617: LD_INT 163
5619: PPUSH
5620: LD_INT 108
5622: PPUSH
5623: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
5627: LD_EXP 54
5631: PPUSH
5632: LD_EXP 59
5636: PPUSH
5637: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: LD_INT 22
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: LD_INT 21
5658: PUSH
5659: LD_INT 1
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PPUSH
5670: CALL_OW 69
5674: PUSH
5675: LD_EXP 54
5679: DIFF
5680: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
5681: LD_ADDR_VAR 0 4
5685: PUSH
5686: DOUBLE
5687: LD_INT 1
5689: DEC
5690: ST_TO_ADDR
5691: LD_EXP 47
5695: PUSH
5696: FOR_TO
5697: IFFALSE 5815
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_EXP 47
5713: PUSH
5714: LD_VAR 0 4
5718: ARRAY
5719: PUSH
5720: LD_INT 1
5722: ARRAY
5723: PPUSH
5724: LD_EXP 47
5728: PUSH
5729: LD_VAR 0 4
5733: ARRAY
5734: PUSH
5735: LD_INT 2
5737: ARRAY
5738: PPUSH
5739: CALL_OW 73
5743: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
5744: LD_VAR 0 3
5748: PPUSH
5749: LD_EXP 47
5753: PUSH
5754: LD_VAR 0 4
5758: ARRAY
5759: PUSH
5760: LD_INT 1
5762: ARRAY
5763: PPUSH
5764: LD_EXP 47
5768: PUSH
5769: LD_VAR 0 4
5773: ARRAY
5774: PUSH
5775: LD_INT 2
5777: ARRAY
5778: PPUSH
5779: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_EXP 59
5792: PPUSH
5793: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: LD_VAR 0 2
5806: PUSH
5807: LD_VAR 0 3
5811: DIFF
5812: ST_TO_ADDR
// end ;
5813: GO 5696
5815: POP
5816: POP
// repeat CenterNowOnUnits ( Burlak ) ;
5817: LD_EXP 54
5821: PPUSH
5822: CALL_OW 87
// wait ( 0 0$1 ) ;
5826: LD_INT 35
5828: PPUSH
5829: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
5833: LD_EXP 54
5837: PPUSH
5838: LD_EXP 59
5842: PPUSH
5843: CALL_OW 296
5847: PUSH
5848: LD_INT 4
5850: LESS
5851: IFFALSE 5817
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
5853: LD_EXP 54
5857: PUSH
5858: LD_EXP 59
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
5871: LD_EXP 59
5875: PPUSH
5876: LD_EXP 54
5880: PPUSH
5881: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
5885: LD_EXP 59
5889: PPUSH
5890: LD_STRING D1-Kur-1
5892: PPUSH
5893: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
5897: LD_EXP 54
5901: PPUSH
5902: LD_STRING D1-Bur-1
5904: PPUSH
5905: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
5909: LD_EXP 59
5913: PPUSH
5914: LD_STRING D1-Kur-2
5916: PPUSH
5917: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
5921: LD_EXP 54
5925: PPUSH
5926: LD_STRING D1-Bur-2
5928: PPUSH
5929: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
5933: LD_EXP 59
5937: PPUSH
5938: LD_STRING D1-Kur-3
5940: PPUSH
5941: CALL_OW 88
// if IsOK ( Gnyevko ) then
5945: LD_EXP 55
5949: PPUSH
5950: CALL_OW 302
5954: IFFALSE 5968
// Say ( Kurin , D1-Kur-3a ) ;
5956: LD_EXP 59
5960: PPUSH
5961: LD_STRING D1-Kur-3a
5963: PPUSH
5964: CALL_OW 88
// InGameOff ;
5968: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
5972: LD_INT 22
5974: PUSH
5975: LD_INT 3
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 21
5984: PUSH
5985: LD_INT 1
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: PUSH
6001: LD_EXP 54
6005: PUSH
6006: LD_EXP 55
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: DIFF
6015: PPUSH
6016: LD_INT 6
6018: PPUSH
6019: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6023: LD_EXP 62
6027: PPUSH
6028: LD_INT 3
6030: PPUSH
6031: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6035: LD_INT 9
6037: PPUSH
6038: LD_INT 22
6040: PUSH
6041: LD_INT 6
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 21
6050: PUSH
6051: LD_INT 1
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 70
6066: PUSH
6067: LD_EXP 59
6071: DIFF
6072: PPUSH
6073: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm ) ;
6077: LD_EXP 58
6081: PPUSH
6082: LD_INT 95
6084: PPUSH
6085: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm ) ;
6089: LD_EXP 56
6093: PPUSH
6094: LD_INT 95
6096: PPUSH
6097: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
6101: LD_STRING 01_Gnyevko
6103: PPUSH
6104: CALL_OW 28
6108: NOT
6109: IFFALSE 6123
// SetSide ( randomMech , 3 ) ;
6111: LD_EXP 63
6115: PPUSH
6116: LD_INT 3
6118: PPUSH
6119: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
6123: LD_STRING M1
6125: PPUSH
6126: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
6130: LD_INT 3
6132: PPUSH
6133: LD_INT 6
6135: PPUSH
6136: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
6140: LD_INT 3
6142: PPUSH
6143: LD_INT 7
6145: PPUSH
6146: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
6150: LD_INT 6
6152: PPUSH
6153: LD_INT 6
6155: PPUSH
6156: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
6160: LD_INT 6
6162: PPUSH
6163: LD_INT 7
6165: PPUSH
6166: CALL_OW 334
// SaveForQuickRestart ;
6170: CALL_OW 22
// end ;
6174: LD_VAR 0 1
6178: RET
// every 0 0$1 trigger not canExitBase and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6179: LD_EXP 19
6183: NOT
6184: PUSH
6185: LD_INT 20
6187: PPUSH
6188: LD_INT 22
6190: PUSH
6191: LD_INT 3
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 2
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 21
6213: PUSH
6214: LD_INT 2
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PPUSH
6230: CALL_OW 70
6234: PUSH
6235: LD_INT 0
6237: GREATER
6238: AND
6239: IFFALSE 6402
6241: GO 6243
6243: DISABLE
6244: LD_INT 0
6246: PPUSH
// begin enable ;
6247: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6248: LD_ADDR_VAR 0 1
6252: PUSH
6253: LD_INT 20
6255: PPUSH
6256: LD_INT 22
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 2
6268: PUSH
6269: LD_INT 21
6271: PUSH
6272: LD_INT 1
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 21
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 70
6302: PUSH
6303: FOR_IN
6304: IFFALSE 6400
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
6306: LD_VAR 0 1
6310: PPUSH
6311: LD_VAR 0 1
6315: PPUSH
6316: CALL_OW 250
6320: PPUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 251
6330: PUSH
6331: LD_INT 5
6333: PLUS
6334: PPUSH
6335: CALL_OW 111
// if unit <> Burlak and IsOk ( Kovalyuk ) then
6339: LD_VAR 0 1
6343: PUSH
6344: LD_EXP 54
6348: NONEQUAL
6349: PUSH
6350: LD_EXP 62
6354: PPUSH
6355: CALL_OW 302
6359: AND
6360: IFFALSE 6374
// Say ( Kovalyuk , D1b-Kov-1 ) ;
6362: LD_EXP 62
6366: PPUSH
6367: LD_STRING D1b-Kov-1
6369: PPUSH
6370: CALL_OW 88
// if unit = Burlak then
6374: LD_VAR 0 1
6378: PUSH
6379: LD_EXP 54
6383: EQUAL
6384: IFFALSE 6398
// Say ( Burlak , D1b-Bur-1 ) ;
6386: LD_EXP 54
6390: PPUSH
6391: LD_STRING D1b-Bur-1
6393: PPUSH
6394: CALL_OW 88
// end ;
6398: GO 6303
6400: POP
6401: POP
// end ;
6402: PPOPN 1
6404: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
6405: LD_EXP 7
6409: NOT
6410: PUSH
6411: LD_INT 9
6413: PPUSH
6414: LD_INT 22
6416: PUSH
6417: LD_INT 3
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 21
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 70
6442: PUSH
6443: LD_INT 0
6445: GREATER
6446: AND
6447: IFFALSE 6464
6449: GO 6451
6451: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
6452: LD_EXP 59
6456: PPUSH
6457: LD_STRING D1a-Kur-1
6459: PPUSH
6460: CALL_OW 88
6464: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
6465: LD_EXP 7
6469: NOT
6470: PUSH
6471: LD_EXP 54
6475: PPUSH
6476: CALL_OW 302
6480: AND
6481: PUSH
6482: LD_INT 8
6484: PPUSH
6485: LD_INT 22
6487: PUSH
6488: LD_INT 3
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 21
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PPUSH
6509: CALL_OW 70
6513: PUSH
6514: LD_INT 0
6516: GREATER
6517: AND
6518: IFFALSE 7010
6520: GO 6522
6522: DISABLE
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// begin enable ;
6529: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
6530: LD_ADDR_VAR 0 2
6534: PUSH
6535: LD_INT 22
6537: PUSH
6538: LD_INT 3
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 21
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PUSH
6564: FOR_IN
6565: IFFALSE 7008
// if See ( 6 , unit ) then
6567: LD_INT 6
6569: PPUSH
6570: LD_VAR 0 2
6574: PPUSH
6575: CALL_OW 292
6579: IFFALSE 7006
// begin meetPlatonov = true ;
6581: LD_ADDR_EXP 7
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// InGameOn ;
6589: CALL_OW 8
// DialogueOn ;
6593: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
6597: LD_ADDR_VAR 0 4
6601: PUSH
6602: LD_EXP 69
6606: PPUSH
6607: LD_INT 26
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 72
6621: PPUSH
6622: LD_STRING D2-RSol1-1
6624: PPUSH
6625: LD_STRING 
6627: PPUSH
6628: LD_INT 0
6630: PPUSH
6631: CALL 3421 0 4
6635: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
6636: LD_EXP 54
6640: PPUSH
6641: LD_STRING D2-Bur-1
6643: PPUSH
6644: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
6648: LD_VAR 0 4
6652: PPUSH
6653: LD_STRING D2-RSol1-2
6655: PPUSH
6656: CALL_OW 88
// DialogueOff ;
6660: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 21
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 50
6691: PUSH
6692: EMPTY
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: ST_TO_ADDR
// for i := 1 to yourUnits do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: DOUBLE
6711: LD_INT 1
6713: DEC
6714: ST_TO_ADDR
6715: LD_VAR 0 3
6719: PUSH
6720: FOR_TO
6721: IFFALSE 6790
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 1
6732: ARRAY
6733: PPUSH
6734: LD_EXP 48
6738: PUSH
6739: LD_VAR 0 1
6743: ARRAY
6744: PUSH
6745: LD_INT 1
6747: ARRAY
6748: PPUSH
6749: LD_EXP 48
6753: PUSH
6754: LD_VAR 0 1
6758: ARRAY
6759: PUSH
6760: LD_INT 2
6762: ARRAY
6763: PPUSH
6764: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
6768: LD_VAR 0 3
6772: PUSH
6773: LD_VAR 0 1
6777: ARRAY
6778: PPUSH
6779: LD_EXP 68
6783: PPUSH
6784: CALL_OW 179
// end ;
6788: GO 6720
6790: POP
6791: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6792: LD_EXP 54
6796: PPUSH
6797: CALL_OW 87
// wait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
6808: LD_EXP 54
6812: PPUSH
6813: LD_EXP 68
6817: PPUSH
6818: CALL_OW 296
6822: PUSH
6823: LD_INT 4
6825: LESS
6826: IFFALSE 6792
// ComTurnUnit ( Platonov , Burlak ) ;
6828: LD_EXP 68
6832: PPUSH
6833: LD_EXP 54
6837: PPUSH
6838: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
6842: LD_EXP 68
6846: PPUSH
6847: LD_STRING D2-Pla-2
6849: PPUSH
6850: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6854: LD_EXP 54
6858: PPUSH
6859: LD_STRING D2-Bur-2
6861: PPUSH
6862: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
6866: LD_EXP 68
6870: PPUSH
6871: LD_STRING D2-Pla-3
6873: PPUSH
6874: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
6878: LD_EXP 54
6882: PPUSH
6883: LD_STRING D2-Bur-3
6885: PPUSH
6886: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
6890: LD_EXP 68
6894: PPUSH
6895: LD_STRING D2-Pla-4
6897: PPUSH
6898: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6902: LD_EXP 54
6906: PPUSH
6907: LD_STRING D2-Bur-4
6909: PPUSH
6910: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
6914: LD_EXP 68
6918: PPUSH
6919: LD_STRING D2-Pla-5
6921: PPUSH
6922: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
6926: LD_INT 1
6928: PUSH
6929: LD_INT 2
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: LD_INT 4
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL 3754 0 1
// Say ( Platonov , D3-Pla-1 ) ;
6948: LD_EXP 68
6952: PPUSH
6953: LD_STRING D3-Pla-1
6955: PPUSH
6956: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
6960: LD_EXP 54
6964: PPUSH
6965: LD_STRING D3-Bur-1
6967: PPUSH
6968: CALL_OW 88
// InGameOff ;
6972: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
6976: LD_STRING M2a
6978: PPUSH
6979: CALL_OW 337
// ComFree ( Platonov ) ;
6983: LD_EXP 68
6987: PPUSH
6988: CALL_OW 139
// SetSide ( beria , 3 ) ;
6992: LD_INT 106
6994: PPUSH
6995: LD_INT 3
6997: PPUSH
6998: CALL_OW 235
// exit ;
7002: POP
7003: POP
7004: GO 7010
// end ;
7006: GO 6564
7008: POP
7009: POP
// end ;
7010: PPOPN 4
7012: END
// export function Dial_LabConstructed ; begin
7013: LD_INT 0
7015: PPUSH
// labConstructed = true ;
7016: LD_ADDR_EXP 8
7020: PUSH
7021: LD_INT 1
7023: ST_TO_ADDR
// DialogueOn ;
7024: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7028: LD_EXP 54
7032: PPUSH
7033: LD_STRING D5a-Bur-1
7035: PPUSH
7036: CALL_OW 88
// if workshopConstructed then
7040: LD_EXP 9
7044: IFFALSE 7060
// Say ( Platonov , D5a-Pla-1a ) else
7046: LD_EXP 68
7050: PPUSH
7051: LD_STRING D5a-Pla-1a
7053: PPUSH
7054: CALL_OW 88
7058: GO 7072
// Say ( Platonov , D5a-Pla-1a ) ;
7060: LD_EXP 68
7064: PPUSH
7065: LD_STRING D5a-Pla-1a
7067: PPUSH
7068: CALL_OW 88
// DialogueOff ;
7072: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
7076: LD_STRING M2b
7078: PPUSH
7079: CALL_OW 337
// end ;
7083: LD_VAR 0 1
7087: RET
// export function Dial_WorkshopConstructed ; begin
7088: LD_INT 0
7090: PPUSH
// workshopConstructed = true ;
7091: LD_ADDR_EXP 9
7095: PUSH
7096: LD_INT 1
7098: ST_TO_ADDR
// DialogueOn ;
7099: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
7103: LD_EXP 54
7107: PPUSH
7108: LD_STRING D5b-Bur-1
7110: PPUSH
7111: CALL_OW 88
// if labConstructed then
7115: LD_EXP 8
7119: IFFALSE 7135
// Say ( Platonov , D5b-Pla-1 ) else
7121: LD_EXP 68
7125: PPUSH
7126: LD_STRING D5b-Pla-1
7128: PPUSH
7129: CALL_OW 88
7133: GO 7147
// Say ( Platonov , D5b-Pla-1a ) ;
7135: LD_EXP 68
7139: PPUSH
7140: LD_STRING D5b-Pla-1a
7142: PPUSH
7143: CALL_OW 88
// DialogueOff ;
7147: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
7151: LD_STRING M2c
7153: PPUSH
7154: CALL_OW 337
// end ;
7158: LD_VAR 0 1
7162: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
7163: LD_INT 0
7165: PPUSH
// CenterNowOnUnits ( building ) ;
7166: LD_VAR 0 1
7170: PPUSH
7171: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
7175: LD_INT 22
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 21
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PPUSH
7204: CALL_OW 141
// DialogueOn ;
7208: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
7212: LD_EXP 68
7216: PPUSH
7217: LD_STRING D6-Pla-1
7219: PPUSH
7220: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
7224: LD_EXP 54
7228: PPUSH
7229: LD_STRING D6-Bur-1
7231: PPUSH
7232: CALL_OW 88
// DialogueOff ;
7236: CALL_OW 7
// if GetBType ( building ) = b_lab then
7240: LD_VAR 0 1
7244: PPUSH
7245: CALL_OW 266
7249: PUSH
7250: LD_INT 6
7252: EQUAL
7253: IFFALSE 7294
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) else
7255: LD_INT 106
7257: PPUSH
7258: CALL_OW 274
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: LD_INT 106
7268: PPUSH
7269: CALL_OW 274
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 275
7281: PUSH
7282: LD_EXP 49
7286: PLUS
7287: PPUSH
7288: CALL_OW 277
7292: GO 7331
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ;
7294: LD_INT 106
7296: PPUSH
7297: CALL_OW 274
7301: PPUSH
7302: LD_INT 1
7304: PPUSH
7305: LD_INT 106
7307: PPUSH
7308: CALL_OW 274
7312: PPUSH
7313: LD_INT 1
7315: PPUSH
7316: CALL_OW 275
7320: PUSH
7321: LD_EXP 50
7325: PLUS
7326: PPUSH
7327: CALL_OW 277
// RemoveUnit ( building ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: CALL_OW 64
// end ;
7340: LD_VAR 0 2
7344: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
7345: LD_EXP 9
7349: PUSH
7350: LD_EXP 8
7354: AND
7355: IFFALSE 7464
7357: GO 7359
7359: DISABLE
// begin DialogueOn ;
7360: CALL_OW 6
// if engineResearched then
7364: LD_EXP 10
7368: IFFALSE 7396
// begin Say ( Burlak , D7b-Bur-1 ) ;
7370: LD_EXP 54
7374: PPUSH
7375: LD_STRING D7b-Bur-1
7377: PPUSH
7378: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
7382: LD_EXP 68
7386: PPUSH
7387: LD_STRING D7b-Pla-1
7389: PPUSH
7390: CALL_OW 88
// end else
7394: GO 7420
// begin Say ( Burlak , D7a-Bur-1 ) ;
7396: LD_EXP 54
7400: PPUSH
7401: LD_STRING D7a-Bur-1
7403: PPUSH
7404: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
7408: LD_EXP 68
7412: PPUSH
7413: LD_STRING D7a-Pla-1
7415: PPUSH
7416: CALL_OW 88
// end ; DialogueOff ;
7420: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
7424: LD_STRING M2
7426: PPUSH
7427: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
7431: LD_INT 5
7433: PPUSH
7434: LD_EXP 68
7438: PPUSH
7439: CALL_OW 250
7443: PPUSH
7444: LD_EXP 68
7448: PPUSH
7449: CALL_OW 251
7453: PPUSH
7454: LD_INT 5
7456: PPUSH
7457: LD_INT 1
7459: PPUSH
7460: CALL_OW 56
// end ;
7464: END
// export function Dial_NewCrates ( x , y ) ; begin
7465: LD_INT 0
7467: PPUSH
// wait ( 0 0$18 ) ;
7468: LD_INT 630
7470: PPUSH
7471: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
7475: LD_EXP 68
7479: PPUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: LD_VAR 0 2
7489: PPUSH
7490: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
7494: LD_EXP 68
7498: PPUSH
7499: LD_STRING D4-Pla-1
7501: PPUSH
7502: CALL_OW 88
// end ;
7506: LD_VAR 0 3
7510: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
7511: LD_INT 0
7513: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
7514: LD_ADDR_EXP 13
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: PUSH
7548: LD_INT 1
7550: ARRAY
7551: ST_TO_ADDR
// constructedFirstVehicle = true ;
7552: LD_ADDR_EXP 12
7556: PUSH
7557: LD_INT 1
7559: ST_TO_ADDR
// InGameOn ;
7560: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
7564: LD_VAR 0 1
7568: PPUSH
7569: CALL_OW 87
// wait ( 0 0$3 ) ;
7573: LD_INT 105
7575: PPUSH
7576: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
7580: LD_EXP 54
7584: PPUSH
7585: LD_STRING D9-Bur-1
7587: PPUSH
7588: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
7592: LD_EXP 68
7596: PPUSH
7597: LD_EXP 13
7601: PPUSH
7602: CALL_OW 250
7606: PPUSH
7607: LD_EXP 13
7611: PPUSH
7612: CALL_OW 251
7616: PPUSH
7617: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7621: LD_INT 35
7623: PPUSH
7624: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
7628: LD_EXP 68
7632: PPUSH
7633: LD_EXP 13
7637: PPUSH
7638: CALL_OW 296
7642: PUSH
7643: LD_INT 4
7645: LESS
7646: IFFALSE 7621
// ComTurnUnit ( Platonov , firstVeh ) ;
7648: LD_EXP 68
7652: PPUSH
7653: LD_EXP 13
7657: PPUSH
7658: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
7662: LD_EXP 68
7666: PPUSH
7667: LD_STRING D9-Pla-1
7669: PPUSH
7670: CALL_OW 88
// InGameOff ;
7674: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
7678: LD_STRING M3
7680: PPUSH
7681: CALL_OW 337
// ComMoveXY ( Platonov , 112 , 97 ) ;
7685: LD_EXP 68
7689: PPUSH
7690: LD_INT 112
7692: PPUSH
7693: LD_INT 97
7695: PPUSH
7696: CALL_OW 111
// end ;
7700: LD_VAR 0 2
7704: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
7705: LD_EXP 13
7709: PPUSH
7710: LD_INT 9
7712: PPUSH
7713: CALL_OW 308
7717: PUSH
7718: LD_EXP 14
7722: NOT
7723: AND
7724: IFFALSE 8576
7726: GO 7728
7728: DISABLE
7729: LD_INT 0
7731: PPUSH
7732: PPUSH
7733: PPUSH
// begin vehicleForKurin = true ;
7734: LD_ADDR_EXP 14
7738: PUSH
7739: LD_INT 1
7741: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
7742: LD_ADDR_VAR 0 2
7746: PUSH
7747: LD_EXP 61
7751: PPUSH
7752: LD_INT 25
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 72
7766: PUSH
7767: LD_INT 1
7769: ARRAY
7770: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
7771: LD_ADDR_VAR 0 3
7775: PUSH
7776: LD_EXP 61
7780: PPUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 3
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 72
7795: PUSH
7796: LD_INT 1
7798: ARRAY
7799: ST_TO_ADDR
// InGameOn ;
7800: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
7804: LD_EXP 59
7808: PPUSH
7809: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
7813: LD_EXP 13
7817: PPUSH
7818: LD_EXP 59
7822: PPUSH
7823: CALL_OW 250
7827: PPUSH
7828: LD_EXP 59
7832: PPUSH
7833: CALL_OW 251
7837: PPUSH
7838: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
7842: LD_EXP 59
7846: PPUSH
7847: LD_STRING D10-Kur-1
7849: PPUSH
7850: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7854: LD_INT 35
7856: PPUSH
7857: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
7861: LD_EXP 13
7865: PPUSH
7866: LD_EXP 59
7870: PPUSH
7871: CALL_OW 250
7875: PPUSH
7876: LD_EXP 59
7880: PPUSH
7881: CALL_OW 251
7885: PPUSH
7886: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
7890: LD_EXP 13
7894: PPUSH
7895: LD_EXP 59
7899: PPUSH
7900: CALL_OW 296
7904: PUSH
7905: LD_INT 9
7907: LESS
7908: IFFALSE 7854
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
7910: LD_EXP 13
7914: PPUSH
7915: CALL_OW 313
7919: PPUSH
7920: CALL_OW 121
// wait ( 0 0$1 ) ;
7924: LD_INT 35
7926: PPUSH
7927: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
7931: LD_EXP 13
7935: PPUSH
7936: CALL_OW 256
7940: PUSH
7941: LD_INT 1000
7943: LESS
7944: IFFALSE 7976
// begin ComExitBuilding ( mech ) ;
7946: LD_VAR 0 3
7950: PPUSH
7951: CALL_OW 122
// wait ( 0 0$1 ) ;
7955: LD_INT 35
7957: PPUSH
7958: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
7962: LD_VAR 0 3
7966: PPUSH
7967: LD_EXP 13
7971: PPUSH
7972: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
7976: LD_EXP 13
7980: PPUSH
7981: CALL_OW 261
7985: PUSH
7986: LD_INT 90
7988: LESS
7989: IFFALSE 8024
// begin ComExitBuilding ( eng ) ;
7991: LD_VAR 0 2
7995: PPUSH
7996: CALL_OW 122
// wait ( 0 0$1 ) ;
8000: LD_INT 35
8002: PPUSH
8003: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
8007: LD_VAR 0 2
8011: PPUSH
8012: LD_INT 71
8014: PPUSH
8015: LD_EXP 13
8019: PPUSH
8020: CALL 3992 0 3
// end ; repeat wait ( 0 0$1 ) ;
8024: LD_INT 35
8026: PPUSH
8027: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
8031: LD_EXP 13
8035: PPUSH
8036: CALL_OW 256
8040: PUSH
8041: LD_INT 1000
8043: EQUAL
8044: PUSH
8045: LD_EXP 13
8049: PPUSH
8050: CALL_OW 261
8054: PUSH
8055: LD_INT 90
8057: GREATER
8058: AND
8059: IFFALSE 8024
// ComEnterUnit ( eng , kirov ) ;
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_INT 71
8068: PPUSH
8069: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
8073: LD_EXP 13
8077: PPUSH
8078: LD_INT 6
8080: PPUSH
8081: CALL_OW 235
// if belkovReturn then
8085: LD_EXP 6
8089: IFFALSE 8175
// begin if IsInUnit ( Belkov ) then
8091: LD_EXP 56
8095: PPUSH
8096: CALL_OW 310
8100: IFFALSE 8111
// ComExitBuilding ( Belkov ) ;
8102: LD_EXP 56
8106: PPUSH
8107: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8111: LD_INT 35
8113: PPUSH
8114: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
8118: LD_EXP 56
8122: PPUSH
8123: LD_EXP 13
8127: PPUSH
8128: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
8132: LD_EXP 56
8136: PPUSH
8137: CALL_OW 310
8141: PUSH
8142: LD_EXP 13
8146: EQUAL
8147: IFFALSE 8111
// Say ( Belkov , D10-Bel-1 ) ;
8149: LD_EXP 56
8153: PPUSH
8154: LD_STRING D10-Bel-1
8156: PPUSH
8157: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
8161: LD_EXP 59
8165: PPUSH
8166: LD_STRING D10-Kur-2
8168: PPUSH
8169: CALL_OW 88
// end else
8173: GO 8301
// begin if IsInUnit ( Belkov2 ) then
8175: LD_EXP 60
8179: PPUSH
8180: CALL_OW 310
8184: IFFALSE 8195
// ComExitBuilding ( Belkov2 ) ;
8186: LD_EXP 60
8190: PPUSH
8191: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8195: LD_INT 35
8197: PPUSH
8198: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
8202: LD_EXP 60
8206: PPUSH
8207: LD_EXP 13
8211: PPUSH
8212: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
8216: LD_EXP 60
8220: PPUSH
8221: CALL_OW 310
8225: PUSH
8226: LD_EXP 13
8230: EQUAL
8231: IFFALSE 8195
// meetBelkovBrother = true ;
8233: LD_ADDR_EXP 4
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
8241: LD_EXP 60
8245: PPUSH
8246: LD_STRING D10-Bel-1
8248: PPUSH
8249: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
8253: LD_EXP 54
8257: PPUSH
8258: LD_STRING D10-Bur-1
8260: PPUSH
8261: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
8265: LD_EXP 60
8269: PPUSH
8270: LD_STRING D10-Bel-2
8272: PPUSH
8273: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
8277: LD_EXP 54
8281: PPUSH
8282: LD_STRING D10-Bur-2
8284: PPUSH
8285: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
8289: LD_EXP 59
8293: PPUSH
8294: LD_STRING D10-Kur-2a
8296: PPUSH
8297: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
8301: LD_ADDR_EXP 66
8305: PUSH
8306: EMPTY
8307: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
8308: LD_ADDR_EXP 67
8312: PUSH
8313: EMPTY
8314: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
8315: LD_ADDR_EXP 21
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// CreateBelkovTeam ;
8323: CALL 5108 0 0
// ComExitBuilding ( belkovTeam ) ;
8327: LD_EXP 65
8331: PPUSH
8332: CALL_OW 122
// wait ( 0 0$1 ) ;
8336: LD_INT 35
8338: PPUSH
8339: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8343: LD_ADDR_EXP 64
8347: PUSH
8348: LD_INT 22
8350: PUSH
8351: LD_INT 6
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: LD_INT 21
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PPUSH
8372: CALL_OW 69
8376: PUSH
8377: LD_INT 1
8379: ARRAY
8380: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
8381: LD_ADDR_EXP 65
8385: PUSH
8386: LD_EXP 65
8390: PUSH
8391: LD_EXP 64
8395: ADD
8396: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
8397: LD_EXP 65
8401: PPUSH
8402: LD_INT 147
8404: PPUSH
8405: LD_INT 102
8407: PPUSH
8408: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
8412: LD_EXP 65
8416: PPUSH
8417: LD_INT 133
8419: PPUSH
8420: LD_INT 94
8422: PPUSH
8423: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
8427: LD_EXP 65
8431: PPUSH
8432: LD_INT 123
8434: PPUSH
8435: LD_INT 74
8437: PPUSH
8438: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
8442: LD_EXP 65
8446: PPUSH
8447: LD_INT 111
8449: PPUSH
8450: LD_INT 48
8452: PPUSH
8453: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
8457: LD_EXP 65
8461: PPUSH
8462: LD_INT 122
8464: PPUSH
8465: LD_INT 43
8467: PPUSH
8468: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
8472: LD_EXP 65
8476: PPUSH
8477: LD_INT 129
8479: PPUSH
8480: LD_INT 32
8482: PPUSH
8483: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
8487: LD_EXP 65
8491: PPUSH
8492: LD_INT 132
8494: PPUSH
8495: LD_INT 22
8497: PPUSH
8498: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8502: LD_INT 35
8504: PPUSH
8505: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
8509: LD_EXP 64
8513: PPUSH
8514: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
8518: LD_EXP 64
8522: PPUSH
8523: LD_INT 10
8525: PPUSH
8526: CALL_OW 299
8530: PUSH
8531: LD_INT 10
8533: LESS
8534: IFFALSE 8502
// CenterNowOnUnits ( Kurin ) ;
8536: LD_EXP 59
8540: PPUSH
8541: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
8545: LD_EXP 59
8549: PPUSH
8550: LD_STRING D10-Kur-2b
8552: PPUSH
8553: CALL_OW 88
// InGameOff ;
8557: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
8561: LD_STRING M4
8563: PPUSH
8564: CALL_OW 337
// backToBeria1 = true ;
8568: LD_ADDR_EXP 15
8572: PUSH
8573: LD_INT 1
8575: ST_TO_ADDR
// end ;
8576: PPOPN 3
8578: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
8579: LD_INT 9
8581: PPUSH
8582: LD_INT 22
8584: PUSH
8585: LD_INT 3
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 21
8594: PUSH
8595: LD_INT 2
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 70
8610: PUSH
8611: LD_EXP 14
8615: AND
8616: IFFALSE 8633
8618: GO 8620
8620: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
8621: LD_EXP 59
8625: PPUSH
8626: LD_STRING D1a-Kur-1a
8628: PPUSH
8629: CALL_OW 88
8633: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
8634: LD_EXP 21
8638: IFFALSE 8962
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
// begin enable ;
8647: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
8648: LD_INT 10
8650: PPUSH
8651: LD_INT 22
8653: PUSH
8654: LD_INT 6
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 70
8665: PUSH
8666: LD_INT 0
8668: EQUAL
8669: IFFALSE 8673
// exit ;
8671: GO 8962
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
8673: LD_ADDR_VAR 0 1
8677: PUSH
8678: LD_INT 10
8680: PPUSH
8681: LD_INT 22
8683: PUSH
8684: LD_INT 6
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 70
8695: PUSH
8696: FOR_IN
8697: IFFALSE 8948
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 ) then
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 247
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 1
8717: PUSH
8718: LD_EXP 56
8722: EQUAL
8723: NOT
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: LD_EXP 60
8734: EQUAL
8735: NOT
8736: AND
8737: AND
8738: IFFALSE 8779
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
8740: LD_ADDR_EXP 22
8744: PUSH
8745: LD_EXP 22
8749: PUSH
8750: LD_INT 1
8752: PLUS
8753: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
8754: LD_ADDR_EXP 66
8758: PUSH
8759: LD_EXP 66
8763: PUSH
8764: LD_VAR 0 1
8768: ADD
8769: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8770: LD_VAR 0 1
8774: PPUSH
8775: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 247
8788: PUSH
8789: LD_INT 2
8791: EQUAL
8792: IFFALSE 8946
// begin driver = UnitsInside ( unit ) ;
8794: LD_ADDR_VAR 0 2
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 313
8808: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
8809: LD_VAR 0 2
8813: PUSH
8814: LD_INT 1
8816: ARRAY
8817: PUSH
8818: LD_EXP 56
8822: EQUAL
8823: IFFALSE 8848
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
8825: LD_EXP 56
8829: PPUSH
8830: LD_STRING 02_TmpBelkov
8832: PPUSH
8833: CALL_OW 38
// RemoveUnit ( unit ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 64
// end else
8846: GO 8869
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
8848: LD_EXP 60
8852: PPUSH
8853: LD_STRING 02_TmpBelkov2
8855: PPUSH
8856: CALL_OW 38
// RemoveUnit ( unit ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
8869: LD_ADDR_EXP 67
8873: PUSH
8874: LD_EXP 67
8878: PUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 265
8888: PUSH
8889: LD_VAR 0 1
8893: PPUSH
8894: CALL_OW 262
8898: PUSH
8899: LD_VAR 0 1
8903: PPUSH
8904: CALL_OW 263
8908: PUSH
8909: LD_VAR 0 1
8913: PPUSH
8914: CALL_OW 264
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 261
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: ADD
8936: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 64
// end ; end ;
8946: GO 8696
8948: POP
8949: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
8950: LD_EXP 66
8954: PPUSH
8955: LD_STRING 02_TmpBelkovTeam
8957: PPUSH
8958: CALL_OW 38
// end ;
8962: PPOPN 2
8964: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do
8965: LD_INT 8
8967: PPUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 3
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 21
8980: PUSH
8981: LD_INT 1
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 71
8996: PUSH
8997: LD_INT 0
8999: EQUAL
9000: PUSH
9001: LD_EXP 15
9005: AND
9006: IFFALSE 9114
9008: GO 9010
9010: DISABLE
// begin backToBeria1 = false ;
9011: LD_ADDR_EXP 15
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
9019: LD_EXP 68
9023: PPUSH
9024: LD_STRING D11-Pla-1
9026: PPUSH
9027: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
9031: LD_INT 22
9033: PUSH
9034: LD_INT 3
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 21
9043: PUSH
9044: LD_INT 1
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 69
9059: PUSH
9060: LD_INT 1
9062: GREATER
9063: IFFALSE 9079
// Say ( Burlak , D11-Bur-1a ) else
9065: LD_EXP 54
9069: PPUSH
9070: LD_STRING D11-Bur-1a
9072: PPUSH
9073: CALL_OW 88
9077: GO 9091
// Say ( Burlak , D11-Bur-1 ) ;
9079: LD_EXP 54
9083: PPUSH
9084: LD_STRING D11-Bur-1
9086: PPUSH
9087: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
9091: LD_STRING M5
9093: PPUSH
9094: CALL_OW 337
// construcMoreVehicles = true ;
9098: LD_ADDR_EXP 17
9102: PUSH
9103: LD_INT 1
9105: ST_TO_ADDR
// spawnCrates = true ;
9106: LD_ADDR_EXP 20
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// end ;
9114: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
9115: LD_EXP 18
9119: PUSH
9120: LD_INT 22
9122: PUSH
9123: LD_INT 3
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 21
9132: PUSH
9133: LD_INT 1
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PPUSH
9144: CALL_OW 69
9148: GREATEREQUAL
9149: IFFALSE 9989
9151: GO 9153
9153: DISABLE
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
// begin canRemoveBelkovUnits = false ;
9158: LD_ADDR_EXP 21
9162: PUSH
9163: LD_INT 0
9165: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
9166: LD_INT 22
9168: PUSH
9169: LD_INT 3
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 2
9178: PUSH
9179: LD_INT 21
9181: PUSH
9182: LD_INT 1
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 21
9191: PUSH
9192: LD_INT 2
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PPUSH
9208: CALL_OW 69
9212: PPUSH
9213: CALL_OW 141
// InGameOn ;
9217: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
9221: LD_EXP 68
9225: PPUSH
9226: CALL_OW 85
// DialogueOn ;
9230: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
9234: LD_EXP 54
9238: PPUSH
9239: LD_STRING D12-Bur-1
9241: PPUSH
9242: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
9246: LD_EXP 68
9250: PPUSH
9251: LD_STRING D12-Pla-1
9253: PPUSH
9254: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9258: LD_EXP 54
9262: PPUSH
9263: LD_STRING D12-Bur-2
9265: PPUSH
9266: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
9270: LD_EXP 68
9274: PPUSH
9275: LD_STRING D12-Pla-2
9277: PPUSH
9278: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9282: LD_EXP 54
9286: PPUSH
9287: LD_STRING D12-Bur-3
9289: PPUSH
9290: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
9294: LD_EXP 68
9298: PPUSH
9299: LD_STRING D12-Pla-3
9301: PPUSH
9302: CALL_OW 88
// DialogueOff ;
9306: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
9310: LD_INT 6
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 80
// PrepareAmerican ;
9326: CALL 2433 0 0
// PrepareBelkovReturnTeam ;
9330: CALL 941 0 0
// if IsOK ( Belkov ) then
9334: LD_EXP 56
9338: PPUSH
9339: CALL_OW 302
9343: IFFALSE 9357
// tmpBelkov = Belkov else
9345: LD_ADDR_VAR 0 1
9349: PUSH
9350: LD_EXP 56
9354: ST_TO_ADDR
9355: GO 9367
// tmpBelkov = Belkov2 ;
9357: LD_ADDR_VAR 0 1
9361: PUSH
9362: LD_EXP 60
9366: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
9367: LD_EXP 64
9371: PPUSH
9372: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
9376: LD_EXP 70
9380: PPUSH
9381: LD_STRING D13-Sol1-1
9383: PPUSH
9384: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
9388: LD_VAR 0 1
9392: PPUSH
9393: LD_STRING D13-Bel-1
9395: PPUSH
9396: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
9400: LD_EXP 59
9404: PPUSH
9405: LD_STRING D13-Kur-1
9407: PPUSH
9408: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_STRING D13-Bel-2
9419: PPUSH
9420: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
9424: LD_EXP 65
9428: PPUSH
9429: LD_INT 121
9431: PPUSH
9432: LD_INT 29
9434: PPUSH
9435: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9439: LD_INT 35
9441: PPUSH
9442: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9446: LD_EXP 64
9450: PPUSH
9451: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
9455: LD_ADDR_VAR 0 2
9459: PUSH
9460: LD_EXP 65
9464: PPUSH
9465: LD_INT 21
9467: PUSH
9468: LD_INT 1
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 56
9477: PUSH
9478: EMPTY
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 72
9489: PPUSH
9490: LD_EXP 64
9494: PPUSH
9495: CALL_OW 74
9499: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
9500: LD_EXP 64
9504: PPUSH
9505: LD_VAR 0 2
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 5
9517: LESS
9518: IFFALSE 9531
// ComStop ( kirovVehicle ) else
9520: LD_EXP 64
9524: PPUSH
9525: CALL_OW 141
9529: GO 9546
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
9531: LD_EXP 65
9535: PPUSH
9536: LD_INT 121
9538: PPUSH
9539: LD_INT 29
9541: PPUSH
9542: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
9546: LD_EXP 65
9550: PPUSH
9551: LD_EXP 70
9555: PPUSH
9556: CALL_OW 74
9560: PPUSH
9561: LD_EXP 70
9565: PPUSH
9566: CALL_OW 296
9570: PUSH
9571: LD_INT 5
9573: LESS
9574: IFFALSE 9439
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
9576: LD_EXP 64
9580: PUSH
9581: LD_EXP 70
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 87
// ComWalk ( trapTeam ) ;
9594: LD_EXP 71
9598: PPUSH
9599: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
9603: LD_EXP 71
9607: PPUSH
9608: LD_EXP 64
9612: PPUSH
9613: CALL_OW 179
// ComStop ( belkovTeam ) ;
9617: LD_EXP 65
9621: PPUSH
9622: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
9626: LD_EXP 65
9630: PPUSH
9631: LD_EXP 70
9635: PPUSH
9636: CALL_OW 179
// Say ( trapCommander , D14-Sol1-1 ) ;
9640: LD_EXP 70
9644: PPUSH
9645: LD_STRING D14-Sol1-1
9647: PPUSH
9648: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
9652: LD_VAR 0 1
9656: PPUSH
9657: LD_STRING D14-Bel-1
9659: PPUSH
9660: CALL_OW 88
// immortalBelkovTeam = true ;
9664: LD_ADDR_EXP 23
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// ComExitVehicle ( tmpBelkov ) ;
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 121
// wait ( 0 0$1 ) ;
9681: LD_INT 35
9683: PPUSH
9684: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
9688: LD_EXP 70
9692: PPUSH
9693: LD_EXP 64
9697: PPUSH
9698: CALL_OW 120
// AddComHold ( trapTeam ) ;
9702: LD_EXP 71
9706: PPUSH
9707: CALL_OW 200
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
9711: LD_INT 6
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: LD_INT 2
9719: PPUSH
9720: LD_INT 1
9722: PPUSH
9723: CALL_OW 80
// ComMoveToArea ( belkovTeam , BelkovRetreatArea ) ;
9727: LD_EXP 65
9731: PPUSH
9732: LD_INT 15
9734: PPUSH
9735: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
9739: LD_INT 35
9741: PPUSH
9742: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
9755: LD_VAR 0 1
9759: PPUSH
9760: LD_INT 15
9762: PPUSH
9763: CALL_OW 308
9767: IFFALSE 9739
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_STRING D14-Bel-1a
9776: PPUSH
9777: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
9781: LD_EXP 59
9785: PPUSH
9786: LD_STRING D14-Kur-1
9788: PPUSH
9789: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_STRING D14-Bel-2
9800: PPUSH
9801: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
9805: LD_EXP 59
9809: PPUSH
9810: LD_STRING D14-Kur-2
9812: PPUSH
9813: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
9817: LD_EXP 68
9821: PPUSH
9822: CALL_OW 85
// wait ( 0 0$2 ) ;
9826: LD_INT 70
9828: PPUSH
9829: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
9833: LD_EXP 54
9837: PPUSH
9838: LD_STRING D14a-Bur-1
9840: PPUSH
9841: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
9845: LD_EXP 68
9849: PPUSH
9850: LD_STRING D14a-Pla-1
9852: PPUSH
9853: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
9857: LD_EXP 54
9861: PPUSH
9862: LD_STRING D14a-Bur-2
9864: PPUSH
9865: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
9869: LD_EXP 68
9873: PPUSH
9874: LD_STRING D14a-Pla-2
9876: PPUSH
9877: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
9881: LD_EXP 54
9885: PPUSH
9886: LD_STRING D14a-Bur-3
9888: PPUSH
9889: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
9893: LD_EXP 68
9897: PPUSH
9898: LD_STRING D14a-Pla-3
9900: PPUSH
9901: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
9905: LD_EXP 54
9909: PPUSH
9910: LD_STRING D14a-Bur-4
9912: PPUSH
9913: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
9917: LD_EXP 68
9921: PPUSH
9922: LD_STRING D14a-Pla-4
9924: PPUSH
9925: CALL_OW 88
// InGameOff ;
9929: CALL_OW 9
// immortalBelkovTeam = false ;
9933: LD_ADDR_EXP 23
9937: PUSH
9938: LD_INT 0
9940: ST_TO_ADDR
// activateAMAI = true ;
9941: LD_ADDR_EXP 25
9945: PUSH
9946: LD_INT 1
9948: ST_TO_ADDR
// canExitBase = true ;
9949: LD_ADDR_EXP 19
9953: PUSH
9954: LD_INT 1
9956: ST_TO_ADDR
// construcMoreVehicles = false ;
9957: LD_ADDR_EXP 17
9961: PUSH
9962: LD_INT 0
9964: ST_TO_ADDR
// spawnCrates = false ;
9965: LD_ADDR_EXP 20
9969: PUSH
9970: LD_INT 0
9972: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
9973: LD_STRING M6
9975: PPUSH
9976: CALL_OW 337
// ComFree ( trapTeam ) ;
9980: LD_EXP 71
9984: PPUSH
9985: CALL_OW 139
// end ;
9989: PPOPN 2
9991: END
// every 0 0$1 trigger immortalBelkovTeam do
9992: LD_EXP 23
9996: IFFALSE 10014
9998: GO 10000
10000: DISABLE
// begin enable ;
10001: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
10002: LD_EXP 65
10006: PPUSH
10007: LD_INT 1000
10009: PPUSH
10010: CALL_OW 234
// end ;
10014: END
// every 0 0$1 trigger canExitBase and not belkovSaved and belkovAttackTime > 0 0$00 do
10015: LD_EXP 19
10019: PUSH
10020: LD_EXP 33
10024: NOT
10025: AND
10026: PUSH
10027: LD_EXP 53
10031: PUSH
10032: LD_INT 0
10034: GREATER
10035: AND
10036: IFFALSE 10056
10038: GO 10040
10040: DISABLE
// begin enable ;
10041: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
10042: LD_ADDR_EXP 53
10046: PUSH
10047: LD_EXP 53
10051: PUSH
10052: LD_INT 35
10054: MINUS
10055: ST_TO_ADDR
// end ;
10056: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
10057: LD_EXP 53
10061: PUSH
10062: LD_INT 70
10064: LESS
10065: PUSH
10066: LD_EXP 71
10070: AND
10071: IFFALSE 10092
10073: GO 10075
10075: DISABLE
// begin enable ;
10076: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
10077: LD_EXP 65
10081: PPUSH
10082: LD_INT 120
10084: PPUSH
10085: LD_INT 28
10087: PPUSH
10088: CALL_OW 114
// end ;
10092: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
10093: LD_EXP 26
10097: NOT
10098: PUSH
10099: LD_EXP 27
10103: NOT
10104: OR
10105: IFFALSE 10482
10107: GO 10109
10109: DISABLE
10110: LD_INT 0
10112: PPUSH
// begin enable ;
10113: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
10114: LD_ADDR_VAR 0 1
10118: PUSH
10119: LD_INT 22
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 21
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 30
10141: PUSH
10142: LD_INT 31
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: PUSH
10159: FOR_IN
10160: IFFALSE 10480
// begin if See ( 3 , bunker ) then
10162: LD_INT 3
10164: PPUSH
10165: LD_VAR 0 1
10169: PPUSH
10170: CALL_OW 292
10174: IFFALSE 10478
// begin if bunker in leftBunkers and not sawLeftBunker then
10176: LD_VAR 0 1
10180: PUSH
10181: LD_EXP 72
10185: IN
10186: PUSH
10187: LD_EXP 26
10191: NOT
10192: AND
10193: IFFALSE 10344
// begin sawLeftBunker = true ;
10195: LD_ADDR_EXP 26
10199: PUSH
10200: LD_INT 1
10202: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 85
// DialogueOn ;
10212: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
10216: LD_EXP 54
10220: PPUSH
10221: LD_STRING D15-Bur-1
10223: PPUSH
10224: CALL_OW 88
// if IsOK ( Gnyevko ) then
10228: LD_EXP 55
10232: PPUSH
10233: CALL_OW 302
10237: IFFALSE 10251
// Say ( Gnyevko , D15-Gny-1 ) ;
10239: LD_EXP 55
10243: PPUSH
10244: LD_STRING D15-Gny-1
10246: PPUSH
10247: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10251: LD_EXP 62
10255: PPUSH
10256: CALL_OW 302
10260: IFFALSE 10274
// Say ( Kovalyuk , D15-Kov-1 ) ;
10262: LD_EXP 62
10266: PPUSH
10267: LD_STRING D15-Kov-1
10269: PPUSH
10270: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
10274: LD_EXP 54
10278: PPUSH
10279: LD_STRING D15-Bur-2
10281: PPUSH
10282: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10286: LD_EXP 62
10290: PPUSH
10291: CALL_OW 302
10295: IFFALSE 10309
// Say ( Kovalyuk , D15-Kov-2 ) ;
10297: LD_EXP 62
10301: PPUSH
10302: LD_STRING D15-Kov-2
10304: PPUSH
10305: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
10309: LD_EXP 54
10313: PPUSH
10314: LD_STRING D15-Bur-3
10316: PPUSH
10317: CALL_OW 88
// DialogueOff ;
10321: CALL_OW 7
// raportForPlatonov = 3 ;
10325: LD_ADDR_EXP 35
10329: PUSH
10330: LD_INT 3
10332: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
10333: LD_STRING M7
10335: PPUSH
10336: CALL_OW 337
// exit ;
10340: POP
10341: POP
10342: GO 10482
// end ; if bunker in rightBunkers and not sawRightBunker then
10344: LD_VAR 0 1
10348: PUSH
10349: LD_EXP 73
10353: IN
10354: PUSH
10355: LD_EXP 27
10359: NOT
10360: AND
10361: IFFALSE 10478
// begin sawRightBunker = true ;
10363: LD_ADDR_EXP 27
10367: PUSH
10368: LD_INT 1
10370: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL_OW 85
// DialogueOn ;
10380: CALL_OW 6
// if IsOK ( Kovalyuk ) then
10384: LD_EXP 62
10388: PPUSH
10389: CALL_OW 302
10393: IFFALSE 10427
// begin if sawLeftBunker then
10395: LD_EXP 26
10399: IFFALSE 10415
// Say ( Kovalyuk , D15-Kov-2a ) else
10401: LD_EXP 62
10405: PPUSH
10406: LD_STRING D15-Kov-2a
10408: PPUSH
10409: CALL_OW 88
10413: GO 10427
// Say ( Kovalyuk , D15-Kov-2 ) ;
10415: LD_EXP 62
10419: PPUSH
10420: LD_STRING D15-Kov-2
10422: PPUSH
10423: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
10427: LD_EXP 54
10431: PPUSH
10432: LD_STRING D16-Bur-1
10434: PPUSH
10435: CALL_OW 88
// if IsOK ( Gnyevko ) then
10439: LD_EXP 55
10443: PPUSH
10444: CALL_OW 302
10448: IFFALSE 10462
// Say ( Gnyevko , D16-Gny-1 ) ;
10450: LD_EXP 55
10454: PPUSH
10455: LD_STRING D16-Gny-1
10457: PPUSH
10458: CALL_OW 88
// DialogueOff ;
10462: CALL_OW 7
// raportForPlatonov = 2 ;
10466: LD_ADDR_EXP 35
10470: PUSH
10471: LD_INT 2
10473: ST_TO_ADDR
// exit ;
10474: POP
10475: POP
10476: GO 10482
// end ; end ; end ;
10478: GO 10159
10480: POP
10481: POP
// end ;
10482: PPOPN 1
10484: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
10485: LD_EXP 29
10489: NOT
10490: PUSH
10491: LD_EXP 73
10495: AND
10496: PUSH
10497: LD_EXP 62
10501: PPUSH
10502: CALL_OW 302
10506: PUSH
10507: LD_EXP 55
10511: PPUSH
10512: CALL_OW 302
10516: OR
10517: AND
10518: IFFALSE 10706
10520: GO 10522
10522: DISABLE
10523: LD_INT 0
10525: PPUSH
// begin enable ;
10526: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10527: LD_ADDR_VAR 0 1
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_INT 3
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 1
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 21
10557: PUSH
10558: LD_INT 2
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 69
10578: PUSH
10579: FOR_IN
10580: IFFALSE 10704
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
10582: LD_VAR 0 1
10586: PPUSH
10587: CALL_OW 320
10591: PUSH
10592: LD_EXP 73
10596: PUSH
10597: LD_INT 1
10599: ARRAY
10600: EQUAL
10601: PUSH
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 320
10611: PUSH
10612: LD_EXP 73
10616: PUSH
10617: LD_INT 2
10619: ARRAY
10620: EQUAL
10621: OR
10622: IFFALSE 10702
// begin dialogAttackRightBunkers = true ;
10624: LD_ADDR_EXP 29
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// DialogueOn ;
10632: CALL_OW 6
// if IsOK ( Gnyevko ) then
10636: LD_EXP 55
10640: PPUSH
10641: CALL_OW 302
10645: IFFALSE 10659
// Say ( Gnyevko , D16A-Gny-1 ) ;
10647: LD_EXP 55
10651: PPUSH
10652: LD_STRING D16A-Gny-1
10654: PPUSH
10655: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10659: LD_EXP 62
10663: PPUSH
10664: CALL_OW 302
10668: IFFALSE 10682
// Say ( Kovalyuk , D16A-Kov-1 ) ;
10670: LD_EXP 62
10674: PPUSH
10675: LD_STRING D16A-Kov-1
10677: PPUSH
10678: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
10682: LD_EXP 54
10686: PPUSH
10687: LD_STRING D16A-Bur-1
10689: PPUSH
10690: CALL_OW 88
// DialogueOff ;
10694: CALL_OW 7
// exit ;
10698: POP
10699: POP
10700: GO 10706
// end ; end ;
10702: GO 10579
10704: POP
10705: POP
// end ;
10706: PPOPN 1
10708: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) do var decsToChoose ;
10709: LD_INT 18
10711: PPUSH
10712: LD_INT 22
10714: PUSH
10715: LD_INT 3
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: PPUSH
10725: CALL_OW 70
10729: IFFALSE 11104
10731: GO 10733
10733: DISABLE
10734: LD_INT 0
10736: PPUSH
// begin if playerGetSupport then
10737: LD_EXP 30
10741: IFFALSE 10760
// decsToChoose = [ 1 , 3 ] else
10743: LD_ADDR_VAR 0 1
10747: PUSH
10748: LD_INT 1
10750: PUSH
10751: LD_INT 3
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: ST_TO_ADDR
10758: GO 10779
// decsToChoose = [ 1 , 2 , 3 ] ;
10760: LD_ADDR_VAR 0 1
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 3
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
10779: LD_STRING QAttackBw
10781: PPUSH
10782: LD_VAR 0 1
10786: PPUSH
10787: CALL_OW 98
10791: PUSH
10792: LD_INT 1
10794: DOUBLE
10795: EQUAL
10796: IFTRUE 10800
10798: GO 10893
10800: POP
// begin DialogueOn ;
10801: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
10805: LD_EXP 54
10809: PPUSH
10810: LD_STRING D17-Bur-1
10812: PPUSH
10813: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
10817: LD_EXP 68
10821: PPUSH
10822: LD_STRING D17-Pla-1
10824: PPUSH
10825: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
10829: LD_EXP 54
10833: PPUSH
10834: LD_STRING D17-Bur-2
10836: PPUSH
10837: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
10841: LD_EXP 68
10845: PPUSH
10846: LD_STRING D17-Pla-2
10848: PPUSH
10849: CALL_OW 94
// DialogueOff ;
10853: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
10857: LD_EXP 38
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 3
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: IN
10872: NOT
10873: IFFALSE 10891
// begin initiative = 1 ;
10875: LD_ADDR_EXP 38
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// platonovOpinion = 2 ;
10883: LD_ADDR_EXP 5
10887: PUSH
10888: LD_INT 2
10890: ST_TO_ADDR
// end ; end ; 2 :
10891: GO 11034
10893: LD_INT 2
10895: DOUBLE
10896: EQUAL
10897: IFTRUE 10901
10899: GO 11006
10901: POP
// begin DialogueOn ;
10902: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
10906: LD_EXP 54
10910: PPUSH
10911: LD_STRING D18-Bur-1
10913: PPUSH
10914: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
10918: LD_EXP 68
10922: PPUSH
10923: LD_STRING D18-Pla-1
10925: PPUSH
10926: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
10930: LD_EXP 54
10934: PPUSH
10935: LD_STRING D18-Bur-2
10937: PPUSH
10938: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
10942: LD_EXP 68
10946: PPUSH
10947: LD_STRING D18-Pla-2
10949: PPUSH
10950: CALL_OW 94
// DialogueOff ;
10954: CALL_OW 7
// playerGetSupport = true ;
10958: LD_ADDR_EXP 30
10962: PUSH
10963: LD_INT 1
10965: ST_TO_ADDR
// medalForGetSupport = false ;
10966: LD_ADDR_EXP 36
10970: PUSH
10971: LD_INT 0
10973: ST_TO_ADDR
// PlatonovSendSupport ;
10974: CALL 5456 0 0
// if initiative <> 3 then
10978: LD_EXP 38
10982: PUSH
10983: LD_INT 3
10985: NONEQUAL
10986: IFFALSE 11004
// begin initiative = 1 ;
10988: LD_ADDR_EXP 38
10992: PUSH
10993: LD_INT 1
10995: ST_TO_ADDR
// platonovOpinion = 2 ;
10996: LD_ADDR_EXP 5
11000: PUSH
11001: LD_INT 2
11003: ST_TO_ADDR
// end ; end ; 3 :
11004: GO 11034
11006: LD_INT 3
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11033
11014: POP
// begin initiative = 3 ;
11015: LD_ADDR_EXP 38
11019: PUSH
11020: LD_INT 3
11022: ST_TO_ADDR
// platonovOpinion = 0 ;
11023: LD_ADDR_EXP 5
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// end ; end ;
11031: GO 11034
11033: POP
// if IsOK ( Gnyevko ) then
11034: LD_EXP 55
11038: PPUSH
11039: CALL_OW 302
11043: IFFALSE 11069
// begin Say ( Gnyevko , D19-Gny-1 ) ;
11045: LD_EXP 55
11049: PPUSH
11050: LD_STRING D19-Gny-1
11052: PPUSH
11053: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
11057: LD_EXP 54
11061: PPUSH
11062: LD_STRING D19-Bur-1
11064: PPUSH
11065: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
11069: LD_EXP 62
11073: PPUSH
11074: CALL_OW 302
11078: IFFALSE 11104
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
11080: LD_EXP 62
11084: PPUSH
11085: LD_STRING D19-Kov-1
11087: PPUSH
11088: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
11092: LD_EXP 54
11096: PPUSH
11097: LD_STRING D19-Bur-2
11099: PPUSH
11100: CALL_OW 88
// end ; end ;
11104: PPOPN 1
11106: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
11107: LD_EXP 28
11111: NOT
11112: PUSH
11113: LD_EXP 72
11117: AND
11118: PUSH
11119: LD_INT 18
11121: PPUSH
11122: LD_INT 22
11124: PUSH
11125: LD_INT 3
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: PUSH
11140: LD_INT 0
11142: EQUAL
11143: AND
11144: PUSH
11145: LD_EXP 62
11149: PPUSH
11150: CALL_OW 302
11154: PUSH
11155: LD_EXP 55
11159: PPUSH
11160: CALL_OW 302
11164: OR
11165: AND
11166: IFFALSE 11354
11168: GO 11170
11170: DISABLE
11171: LD_INT 0
11173: PPUSH
// begin enable ;
11174: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11175: LD_ADDR_VAR 0 1
11179: PUSH
11180: LD_INT 22
11182: PUSH
11183: LD_INT 3
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 21
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PPUSH
11222: CALL_OW 69
11226: PUSH
11227: FOR_IN
11228: IFFALSE 11352
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 320
11239: PUSH
11240: LD_EXP 72
11244: PUSH
11245: LD_INT 1
11247: ARRAY
11248: EQUAL
11249: PUSH
11250: LD_VAR 0 1
11254: PPUSH
11255: CALL_OW 320
11259: PUSH
11260: LD_EXP 72
11264: PUSH
11265: LD_INT 2
11267: ARRAY
11268: EQUAL
11269: OR
11270: IFFALSE 11350
// begin dialogAttackLeftBunkers = true ;
11272: LD_ADDR_EXP 28
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// DialogueOn ;
11280: CALL_OW 6
// if IsOK ( Gnyevko ) then
11284: LD_EXP 55
11288: PPUSH
11289: CALL_OW 302
11293: IFFALSE 11307
// Say ( Gnyevko , D19A-Gny-1 ) ;
11295: LD_EXP 55
11299: PPUSH
11300: LD_STRING D19A-Gny-1
11302: PPUSH
11303: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11307: LD_EXP 62
11311: PPUSH
11312: CALL_OW 302
11316: IFFALSE 11330
// Say ( Kovalyuk , D19A-Kov-1 ) ;
11318: LD_EXP 62
11322: PPUSH
11323: LD_STRING D19A-Kov-1
11325: PPUSH
11326: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
11330: LD_EXP 54
11334: PPUSH
11335: LD_STRING D16A-Bur-1
11337: PPUSH
11338: CALL_OW 88
// DialogueOff ;
11342: CALL_OW 7
// exit ;
11346: POP
11347: POP
11348: GO 11354
// end ; end ;
11350: GO 11227
11352: POP
11353: POP
// end ;
11354: PPOPN 1
11356: END
// every 0 0$1 trigger not leftBunkers and canExitBase do
11357: LD_EXP 72
11361: NOT
11362: PUSH
11363: LD_EXP 19
11367: AND
11368: IFFALSE 11412
11370: GO 11372
11372: DISABLE
// begin DialogueOn ;
11373: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
11377: LD_EXP 54
11381: PPUSH
11382: LD_STRING D20-Bur-1
11384: PPUSH
11385: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
11389: LD_EXP 68
11393: PPUSH
11394: LD_STRING D20-Pla-1
11396: PPUSH
11397: CALL_OW 88
// DialogueOff ;
11401: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
11405: LD_STRING M8
11407: PPUSH
11408: CALL_OW 337
// end ;
11412: END
// every 0 0$1 trigger not rightBunkers and canExitBase do
11413: LD_EXP 73
11417: NOT
11418: PUSH
11419: LD_EXP 19
11423: AND
11424: IFFALSE 11461
11426: GO 11428
11428: DISABLE
// begin DialogueOn ;
11429: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
11433: LD_EXP 54
11437: PPUSH
11438: LD_STRING D20a-Bur-1
11440: PPUSH
11441: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
11445: LD_EXP 68
11449: PPUSH
11450: LD_STRING D20a-Pla-1
11452: PPUSH
11453: CALL_OW 88
// DialogueOff ;
11457: CALL_OW 7
// end ;
11461: END
// every 0 0$1 trigger not saveBelkovDecision do var yourUnit , trapUnit , decsToChoose ;
11462: LD_EXP 31
11466: NOT
11467: IFFALSE 11962
11469: GO 11471
11471: DISABLE
11472: LD_INT 0
11474: PPUSH
11475: PPUSH
11476: PPUSH
// begin enable ;
11477: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11478: LD_ADDR_VAR 0 1
11482: PUSH
11483: LD_INT 22
11485: PUSH
11486: LD_INT 3
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 21
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: PUSH
11530: FOR_IN
11531: IFFALSE 11960
// for trapUnit in trapTeam do
11533: LD_ADDR_VAR 0 2
11537: PUSH
11538: LD_EXP 71
11542: PUSH
11543: FOR_IN
11544: IFFALSE 11956
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
11546: LD_VAR 0 1
11550: PPUSH
11551: LD_VAR 0 2
11555: PPUSH
11556: CALL_OW 296
11560: PUSH
11561: LD_INT 16
11563: LESS
11564: IFFALSE 11954
// begin saveBelkovDecision = true ;
11566: LD_ADDR_EXP 31
11570: PUSH
11571: LD_INT 1
11573: ST_TO_ADDR
// if playerGetSupport then
11574: LD_EXP 30
11578: IFFALSE 11597
// decsToChoose = [ 1 , 3 ] else
11580: LD_ADDR_VAR 0 3
11584: PUSH
11585: LD_INT 1
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: ST_TO_ADDR
11595: GO 11616
// decsToChoose = [ 1 , 2 , 3 ] ;
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: LD_INT 2
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
11616: LD_STRING QAttackAm
11618: PPUSH
11619: LD_VAR 0 3
11623: PPUSH
11624: CALL_OW 98
11628: PUSH
11629: LD_INT 1
11631: DOUBLE
11632: EQUAL
11633: IFTRUE 11637
11635: GO 11706
11637: POP
// begin DialogueOn ;
11638: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
11642: LD_EXP 54
11646: PPUSH
11647: LD_STRING D21-Bur-1
11649: PPUSH
11650: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
11654: LD_EXP 68
11658: PPUSH
11659: LD_STRING D21-Pla-1
11661: PPUSH
11662: CALL_OW 94
// DialogueOff ;
11666: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
11670: LD_EXP 38
11674: PUSH
11675: LD_INT 2
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: IN
11685: NOT
11686: IFFALSE 11704
// begin initiative = 1 ;
11688: LD_ADDR_EXP 38
11692: PUSH
11693: LD_INT 1
11695: ST_TO_ADDR
// platonovOpinion = 2 ;
11696: LD_ADDR_EXP 5
11700: PUSH
11701: LD_INT 2
11703: ST_TO_ADDR
// end ; end ; 2 :
11704: GO 11898
11706: LD_INT 2
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11870
11714: POP
// begin DialogueOn ;
11715: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
11719: LD_EXP 54
11723: PPUSH
11724: LD_STRING D22-Bur-1
11726: PPUSH
11727: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
11731: LD_EXP 30
11735: PUSH
11736: LD_EXP 72
11740: PUSH
11741: LD_INT 0
11743: EQUAL
11744: PUSH
11745: LD_EXP 73
11749: PUSH
11750: LD_INT 0
11752: EQUAL
11753: OR
11754: AND
11755: IFFALSE 11769
// Say ( Platonov , D22-Pla-1b ) ;
11757: LD_EXP 68
11761: PPUSH
11762: LD_STRING D22-Pla-1b
11764: PPUSH
11765: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
11769: LD_EXP 30
11773: PUSH
11774: LD_EXP 72
11778: PUSH
11779: LD_EXP 73
11783: OR
11784: AND
11785: IFFALSE 11799
// Say ( Platonov , D22-Pla-1a ) ;
11787: LD_EXP 68
11791: PPUSH
11792: LD_STRING D22-Pla-1a
11794: PPUSH
11795: CALL_OW 88
// if not playerGetSupport then
11799: LD_EXP 30
11803: NOT
11804: IFFALSE 11838
// begin Say ( Platonov , D22-Pla-1 ) ;
11806: LD_EXP 68
11810: PPUSH
11811: LD_STRING D22-Pla-1
11813: PPUSH
11814: CALL_OW 88
// playerGetSupport = true ;
11818: LD_ADDR_EXP 30
11822: PUSH
11823: LD_INT 1
11825: ST_TO_ADDR
// medalForGetSupport = false ;
11826: LD_ADDR_EXP 36
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// PlatonovSendSupport ;
11834: CALL 5456 0 0
// end ; DialogueOff ;
11838: CALL_OW 7
// if initiative <> 3 then
11842: LD_EXP 38
11846: PUSH
11847: LD_INT 3
11849: NONEQUAL
11850: IFFALSE 11868
// begin initiative = 2 ;
11852: LD_ADDR_EXP 38
11856: PUSH
11857: LD_INT 2
11859: ST_TO_ADDR
// platonovOpinion = 1 ;
11860: LD_ADDR_EXP 5
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// end ; end ; 3 :
11868: GO 11898
11870: LD_INT 3
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11897
11878: POP
// begin initiative = 3 ;
11879: LD_ADDR_EXP 38
11883: PUSH
11884: LD_INT 3
11886: ST_TO_ADDR
// platonovOpinion = 0 ;
11887: LD_ADDR_EXP 5
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// end ; end ;
11895: GO 11898
11897: POP
// if IsOK ( Gnyevko ) then
11898: LD_EXP 55
11902: PPUSH
11903: CALL_OW 302
11907: IFFALSE 11933
// begin Say ( Gnyevko , D23-Gny-1 ) ;
11909: LD_EXP 55
11913: PPUSH
11914: LD_STRING D23-Gny-1
11916: PPUSH
11917: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
11921: LD_EXP 54
11925: PPUSH
11926: LD_STRING D23-Bur-1
11928: PPUSH
11929: CALL_OW 88
// end ; saveBelkovObjective = true ;
11933: LD_ADDR_EXP 32
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
11941: LD_STRING M9
11943: PPUSH
11944: CALL_OW 337
// exit ;
11948: POP
11949: POP
11950: POP
11951: POP
11952: GO 11962
// end ;
11954: GO 11543
11956: POP
11957: POP
11958: GO 11530
11960: POP
11961: POP
// end ;
11962: PPOPN 3
11964: END
// every 0 0$1 trigger canExitBase and not trapTeam and not belkovSaved do
11965: LD_EXP 19
11969: PUSH
11970: LD_EXP 71
11974: NOT
11975: AND
11976: PUSH
11977: LD_EXP 33
11981: NOT
11982: AND
11983: IFFALSE 12015
11985: GO 11987
11987: DISABLE
// begin belkovSaved = true ;
11988: LD_ADDR_EXP 33
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
11996: LD_EXP 65
12000: PPUSH
12001: LD_INT 3
12003: PPUSH
12004: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
12008: LD_STRING M9a
12010: PPUSH
12011: CALL_OW 337
// end ;
12015: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
12016: LD_EXP 33
12020: PUSH
12021: LD_EXP 54
12025: PPUSH
12026: LD_EXP 56
12030: PPUSH
12031: CALL_OW 296
12035: PUSH
12036: LD_INT 14
12038: LESS
12039: PUSH
12040: LD_EXP 54
12044: PPUSH
12045: LD_EXP 60
12049: PPUSH
12050: CALL_OW 296
12054: PUSH
12055: LD_INT 14
12057: LESS
12058: OR
12059: AND
12060: IFFALSE 12334
12062: GO 12064
12064: DISABLE
// begin InGameOn ;
12065: CALL_OW 8
// if IsOk ( Belkov ) then
12069: LD_EXP 56
12073: PPUSH
12074: CALL_OW 302
12078: IFFALSE 12176
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
12080: LD_EXP 54
12084: PUSH
12085: LD_EXP 56
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PPUSH
12094: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
12098: LD_EXP 54
12102: PPUSH
12103: LD_EXP 56
12107: PPUSH
12108: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
12112: LD_EXP 56
12116: PPUSH
12117: LD_EXP 54
12121: PPUSH
12122: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
12126: LD_EXP 56
12130: PPUSH
12131: LD_STRING D24-Bel-1
12133: PPUSH
12134: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12138: LD_EXP 54
12142: PPUSH
12143: LD_STRING D24-Bur-1
12145: PPUSH
12146: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
12150: LD_EXP 56
12154: PPUSH
12155: LD_STRING D24-Bel-2
12157: PPUSH
12158: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12162: LD_EXP 54
12166: PPUSH
12167: LD_STRING D24-Bur-2
12169: PPUSH
12170: CALL_OW 88
// end else
12174: GO 12282
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
12176: LD_EXP 54
12180: PUSH
12181: LD_EXP 60
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
12194: LD_EXP 54
12198: PPUSH
12199: LD_EXP 60
12203: PPUSH
12204: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
12208: LD_EXP 60
12212: PPUSH
12213: LD_EXP 54
12217: PPUSH
12218: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
12222: LD_EXP 60
12226: PPUSH
12227: LD_STRING D24-Bel-1
12229: PPUSH
12230: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12234: LD_EXP 54
12238: PPUSH
12239: LD_STRING D24-Bur-1
12241: PPUSH
12242: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
12246: LD_EXP 54
12250: PPUSH
12251: LD_STRING D24-Bur-1a
12253: PPUSH
12254: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
12258: LD_EXP 60
12262: PPUSH
12263: LD_STRING D24-Bel-2
12265: PPUSH
12266: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12270: LD_EXP 54
12274: PPUSH
12275: LD_STRING D24-Bur-2
12277: PPUSH
12278: CALL_OW 88
// end ; if captureBelkovVehicle then
12282: LD_EXP 34
12286: IFFALSE 12300
// Say ( Burlak , D24-Bur-2a ) ;
12288: LD_EXP 54
12292: PPUSH
12293: LD_STRING D24-Bur-2a
12295: PPUSH
12296: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
12300: LD_EXP 68
12304: PPUSH
12305: LD_STRING D24-Pla-2
12307: PPUSH
12308: CALL_OW 94
// if leftBunkers then
12312: LD_EXP 72
12316: IFFALSE 12330
// SayRadio ( Platonov , D24-Pla-2a ) ;
12318: LD_EXP 68
12322: PPUSH
12323: LD_STRING D24-Pla-2a
12325: PPUSH
12326: CALL_OW 94
// InGameOff ;
12330: CALL_OW 9
// end ;
12334: END
// every 0 0$1 trigger canExitBase and not IsInArea ( Burlak , BeriaBaseArea ) and raportForPlatonov = - 1 do
12335: LD_EXP 19
12339: PUSH
12340: LD_EXP 54
12344: PPUSH
12345: LD_INT 8
12347: PPUSH
12348: CALL_OW 308
12352: NOT
12353: AND
12354: PUSH
12355: LD_EXP 35
12359: PUSH
12360: LD_INT 1
12362: NEG
12363: EQUAL
12364: AND
12365: IFFALSE 12379
12367: GO 12369
12369: DISABLE
// begin enable ;
12370: ENABLE
// raportForPlatonov = 0 ;
12371: LD_ADDR_EXP 35
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// end ;
12379: END
// every 0 0$1 trigger canExitBase and raportForPlatonov >= 0 and not backToBeria2 do
12380: LD_EXP 19
12384: PUSH
12385: LD_EXP 35
12389: PUSH
12390: LD_INT 0
12392: GREATEREQUAL
12393: AND
12394: PUSH
12395: LD_EXP 16
12399: NOT
12400: AND
12401: IFFALSE 12646
12403: GO 12405
12405: DISABLE
// begin DialogueOn ;
12406: CALL_OW 6
// case raportForPlatonov of 0 :
12410: LD_EXP 35
12414: PUSH
12415: LD_INT 0
12417: DOUBLE
12418: EQUAL
12419: IFTRUE 12423
12421: GO 12450
12423: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
12424: LD_EXP 68
12428: PPUSH
12429: LD_STRING D25a-Pla-1
12431: PPUSH
12432: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
12436: LD_EXP 54
12440: PPUSH
12441: LD_STRING D25a-Bur-1
12443: PPUSH
12444: CALL_OW 88
// end ; 1 :
12448: GO 12630
12450: LD_INT 1
12452: DOUBLE
12453: EQUAL
12454: IFTRUE 12458
12456: GO 12485
12458: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12459: LD_EXP 68
12463: PPUSH
12464: LD_STRING D25-Pla-1
12466: PPUSH
12467: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
12471: LD_EXP 54
12475: PPUSH
12476: LD_STRING D25-Bur-1
12478: PPUSH
12479: CALL_OW 88
// end ; 2 :
12483: GO 12630
12485: LD_INT 2
12487: DOUBLE
12488: EQUAL
12489: IFTRUE 12493
12491: GO 12539
12493: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12494: LD_EXP 68
12498: PPUSH
12499: LD_STRING D25-Pla-1
12501: PPUSH
12502: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
12506: LD_EXP 54
12510: PPUSH
12511: LD_STRING D25-Bur-1a
12513: PPUSH
12514: CALL_OW 88
// if not sawLeftBunker then
12518: LD_EXP 26
12522: NOT
12523: IFFALSE 12537
// Say ( Platonov , D25c-Pla-1 ) ;
12525: LD_EXP 68
12529: PPUSH
12530: LD_STRING D25c-Pla-1
12532: PPUSH
12533: CALL_OW 88
// end ; 3 :
12537: GO 12630
12539: LD_INT 3
12541: DOUBLE
12542: EQUAL
12543: IFTRUE 12547
12545: GO 12629
12547: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12548: LD_EXP 68
12552: PPUSH
12553: LD_STRING D25-Pla-1
12555: PPUSH
12556: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
12560: LD_EXP 54
12564: PPUSH
12565: LD_STRING D25a-Bur-1b
12567: PPUSH
12568: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
12572: LD_EXP 54
12576: PPUSH
12577: LD_STRING D25b-Bur-1
12579: PPUSH
12580: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
12584: LD_EXP 68
12588: PPUSH
12589: LD_STRING D25b-Pla-1
12591: PPUSH
12592: CALL_OW 88
// playerGetSupport = true ;
12596: LD_ADDR_EXP 30
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// PlatonovSendSupport ;
12604: CALL 5456 0 0
// if not sawRightBunker then
12608: LD_EXP 27
12612: NOT
12613: IFFALSE 12627
// Say ( Platonov , D25c-Pla-1 ) ;
12615: LD_EXP 68
12619: PPUSH
12620: LD_STRING D25c-Pla-1
12622: PPUSH
12623: CALL_OW 88
// end ; end ;
12627: GO 12630
12629: POP
// Say ( Platonov , D25c-Pla-1a ) ;
12630: LD_EXP 68
12634: PPUSH
12635: LD_STRING D25c-Pla-1a
12637: PPUSH
12638: CALL_OW 88
// DialogueOff ;
12642: CALL_OW 7
// end ;
12646: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
12647: LD_INT 19
12649: PPUSH
12650: LD_INT 22
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: PPUSH
12663: CALL_OW 70
12667: PUSH
12668: LD_INT 0
12670: GREATER
12671: IFFALSE 12691
12673: GO 12675
12675: DISABLE
// begin northMapExplored = true ;
12676: LD_ADDR_EXP 37
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
12684: LD_STRING M10
12686: PPUSH
12687: CALL_OW 337
// end ;
12691: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
12692: LD_EXP 72
12696: NOT
12697: PUSH
12698: LD_EXP 37
12702: AND
12703: PUSH
12704: LD_EXP 33
12708: PUSH
12709: LD_EXP 32
12713: NOT
12714: OR
12715: AND
12716: IFFALSE 12736
12718: GO 12720
12720: DISABLE
// begin backToBeria2 = true ;
12721: LD_ADDR_EXP 16
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
12729: LD_STRING M10a
12731: PPUSH
12732: CALL_OW 337
// end ; end_of_file
12736: END
// export function PrepareNature ; var i , un ; begin
12737: LD_INT 0
12739: PPUSH
12740: PPUSH
12741: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12742: LD_ADDR_VAR 0 2
12746: PUSH
12747: DOUBLE
12748: LD_INT 1
12750: DEC
12751: ST_TO_ADDR
12752: LD_EXP 40
12756: PUSH
12757: LD_INT 1
12759: ARRAY
12760: PUSH
12761: FOR_TO
12762: IFFALSE 12872
// begin uc_side = 0 ;
12764: LD_ADDR_OWVAR 20
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// uc_nation = nation_nature ;
12772: LD_ADDR_OWVAR 21
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// hc_class = class_apeman ;
12780: LD_ADDR_OWVAR 28
12784: PUSH
12785: LD_INT 12
12787: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12788: LD_ADDR_OWVAR 31
12792: PUSH
12793: LD_EXP 41
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: PUSH
12802: LD_EXP 41
12806: PUSH
12807: LD_INT 2
12809: ARRAY
12810: PUSH
12811: LD_EXP 41
12815: PUSH
12816: LD_INT 3
12818: ARRAY
12819: PUSH
12820: LD_EXP 41
12824: PUSH
12825: LD_INT 4
12827: ARRAY
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12835: LD_ADDR_OWVAR 35
12839: PUSH
12840: LD_EXP 42
12844: ST_TO_ADDR
// un = CreateHuman ;
12845: LD_ADDR_VAR 0 3
12849: PUSH
12850: CALL_OW 44
12854: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_INT 21
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: CALL_OW 49
// end ;
12870: GO 12761
12872: POP
12873: POP
// for i := 1 to animalsAmount [ 2 ] do
12874: LD_ADDR_VAR 0 2
12878: PUSH
12879: DOUBLE
12880: LD_INT 1
12882: DEC
12883: ST_TO_ADDR
12884: LD_EXP 40
12888: PUSH
12889: LD_INT 2
12891: ARRAY
12892: PUSH
12893: FOR_TO
12894: IFFALSE 13004
// begin uc_side = 0 ;
12896: LD_ADDR_OWVAR 20
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// uc_nation = nation_nature ;
12904: LD_ADDR_OWVAR 21
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// hc_class = class_phororhacos ;
12912: LD_ADDR_OWVAR 28
12916: PUSH
12917: LD_INT 18
12919: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12920: LD_ADDR_OWVAR 31
12924: PUSH
12925: LD_EXP 41
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PUSH
12934: LD_EXP 41
12938: PUSH
12939: LD_INT 2
12941: ARRAY
12942: PUSH
12943: LD_EXP 41
12947: PUSH
12948: LD_INT 3
12950: ARRAY
12951: PUSH
12952: LD_EXP 41
12956: PUSH
12957: LD_INT 4
12959: ARRAY
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12967: LD_ADDR_OWVAR 35
12971: PUSH
12972: LD_EXP 42
12976: ST_TO_ADDR
// un = CreateHuman ;
12977: LD_ADDR_VAR 0 3
12981: PUSH
12982: CALL_OW 44
12986: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12987: LD_VAR 0 3
12991: PPUSH
12992: LD_INT 21
12994: PPUSH
12995: LD_INT 0
12997: PPUSH
12998: CALL_OW 49
// end ;
13002: GO 12893
13004: POP
13005: POP
// for i := 1 to animalsAmount [ 3 ] do
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_EXP 40
13020: PUSH
13021: LD_INT 3
13023: ARRAY
13024: PUSH
13025: FOR_TO
13026: IFFALSE 13136
// begin uc_side = 0 ;
13028: LD_ADDR_OWVAR 20
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// uc_nation = nation_nature ;
13036: LD_ADDR_OWVAR 21
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// hc_class = class_tiger ;
13044: LD_ADDR_OWVAR 28
13048: PUSH
13049: LD_INT 14
13051: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13052: LD_ADDR_OWVAR 31
13056: PUSH
13057: LD_EXP 41
13061: PUSH
13062: LD_INT 1
13064: ARRAY
13065: PUSH
13066: LD_EXP 41
13070: PUSH
13071: LD_INT 2
13073: ARRAY
13074: PUSH
13075: LD_EXP 41
13079: PUSH
13080: LD_INT 3
13082: ARRAY
13083: PUSH
13084: LD_EXP 41
13088: PUSH
13089: LD_INT 4
13091: ARRAY
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13099: LD_ADDR_OWVAR 35
13103: PUSH
13104: LD_EXP 42
13108: ST_TO_ADDR
// un = CreateHuman ;
13109: LD_ADDR_VAR 0 3
13113: PUSH
13114: CALL_OW 44
13118: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 21
13126: PPUSH
13127: LD_INT 0
13129: PPUSH
13130: CALL_OW 49
// end ;
13134: GO 13025
13136: POP
13137: POP
// for i := 1 to animalsAmount [ 4 ] do
13138: LD_ADDR_VAR 0 2
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_EXP 40
13152: PUSH
13153: LD_INT 4
13155: ARRAY
13156: PUSH
13157: FOR_TO
13158: IFFALSE 13268
// begin uc_side = 0 ;
13160: LD_ADDR_OWVAR 20
13164: PUSH
13165: LD_INT 0
13167: ST_TO_ADDR
// uc_nation = nation_nature ;
13168: LD_ADDR_OWVAR 21
13172: PUSH
13173: LD_INT 0
13175: ST_TO_ADDR
// hc_class = 21 ;
13176: LD_ADDR_OWVAR 28
13180: PUSH
13181: LD_INT 21
13183: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13184: LD_ADDR_OWVAR 31
13188: PUSH
13189: LD_EXP 41
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PUSH
13198: LD_EXP 41
13202: PUSH
13203: LD_INT 2
13205: ARRAY
13206: PUSH
13207: LD_EXP 41
13211: PUSH
13212: LD_INT 3
13214: ARRAY
13215: PUSH
13216: LD_EXP 41
13220: PUSH
13221: LD_INT 4
13223: ARRAY
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13231: LD_ADDR_OWVAR 35
13235: PUSH
13236: LD_EXP 42
13240: ST_TO_ADDR
// un = CreateHuman ;
13241: LD_ADDR_VAR 0 3
13245: PUSH
13246: CALL_OW 44
13250: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 21
13258: PPUSH
13259: LD_INT 0
13261: PPUSH
13262: CALL_OW 49
// end ;
13266: GO 13157
13268: POP
13269: POP
// end ; end_of_file
13270: LD_VAR 0 1
13274: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
13275: LD_EXP 20
13279: IFFALSE 13508
13281: GO 13283
13283: DISABLE
13284: LD_INT 0
13286: PPUSH
13287: PPUSH
13288: PPUSH
13289: PPUSH
13290: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_INT 3
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 21
13308: PUSH
13309: LD_INT 1
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 2
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 69
13335: ST_TO_ADDR
// wait ( 0 0$40 ) ;
13336: LD_INT 1400
13338: PPUSH
13339: CALL_OW 67
// carryCratesEngs = 0 ;
13343: LD_ADDR_VAR 0 3
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// for unit in playerEngs do
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 4
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13390
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
13364: LD_ADDR_VAR 0 3
13368: PUSH
13369: LD_VAR 0 3
13373: PUSH
13374: LD_VAR 0 2
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 289
13386: PLUS
13387: ST_TO_ADDR
13388: GO 13361
13390: POP
13391: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
13392: LD_INT 106
13394: PPUSH
13395: CALL_OW 274
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 275
13407: PUSH
13408: LD_INT 50
13410: LESS
13411: PUSH
13412: LD_INT 8
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 287
13422: PUSH
13423: LD_INT 10
13425: MUL
13426: PUSH
13427: LD_INT 106
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 275
13442: PLUS
13443: PUSH
13444: LD_VAR 0 3
13448: PLUS
13449: PUSH
13450: LD_INT 50
13452: LESS
13453: AND
13454: IFFALSE 13466
// spawnNextCrates = true else
13456: LD_ADDR_VAR 0 5
13460: PUSH
13461: LD_INT 1
13463: ST_TO_ADDR
13464: GO 13474
// spawnNextCrates = false ;
13466: LD_ADDR_VAR 0 5
13470: PUSH
13471: LD_INT 0
13473: ST_TO_ADDR
// if spawnNextCrates then
13474: LD_VAR 0 5
13478: IFFALSE 13501
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
13480: LD_INT 1
13482: PPUSH
13483: LD_INT 5
13485: PPUSH
13486: CALL_OW 12
13490: PPUSH
13491: LD_INT 8
13493: PPUSH
13494: LD_INT 1
13496: PPUSH
13497: CALL_OW 55
// until not spawnCrates ;
13501: LD_EXP 20
13505: NOT
13506: IFFALSE 13291
// end ; end_of_file
13508: PPOPN 5
13510: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 266
13520: PUSH
13521: LD_INT 6
13523: EQUAL
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_INT 3
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 30
13537: PUSH
13538: LD_INT 6
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PPUSH
13549: CALL_OW 69
13553: PUSH
13554: LD_INT 1
13556: GREATER
13557: AND
13558: PUSH
13559: LD_EXP 11
13563: NOT
13564: AND
13565: IFFALSE 13576
// Dial_StopConstructAgainSameBuilding ( building ) ;
13567: LD_VAR 0 1
13571: PPUSH
13572: CALL 7163 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 266
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 3
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 30
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PUSH
13619: LD_INT 1
13621: GREATER
13622: AND
13623: PUSH
13624: LD_EXP 11
13628: NOT
13629: AND
13630: IFFALSE 13641
// Dial_StopConstructAgainSameBuilding ( building ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL 7163 0 1
// end ;
13641: PPOPN 2
13643: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL_OW 255
13653: PUSH
13654: LD_INT 3
13656: EQUAL
13657: PUSH
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 266
13667: PUSH
13668: LD_INT 6
13670: EQUAL
13671: AND
13672: PUSH
13673: LD_EXP 8
13677: NOT
13678: AND
13679: IFFALSE 13685
// Dial_LabConstructed ;
13681: CALL 7013 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
13685: LD_VAR 0 1
13689: PPUSH
13690: CALL_OW 255
13694: PUSH
13695: LD_INT 3
13697: EQUAL
13698: PUSH
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 266
13708: PUSH
13709: LD_INT 2
13711: EQUAL
13712: AND
13713: PUSH
13714: LD_EXP 9
13718: NOT
13719: AND
13720: IFFALSE 13726
// Dial_WorkshopConstructed ;
13722: CALL 7088 0 0
// if GetSide ( building ) = 6 then
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 255
13735: PUSH
13736: LD_INT 6
13738: EQUAL
13739: IFFALSE 13916
// begin if GetBType ( building ) = b_breastwork then
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 266
13750: PUSH
13751: LD_INT 31
13753: EQUAL
13754: IFFALSE 13799
// ComEnterUnit ( UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
13756: LD_EXP 61
13760: PPUSH
13761: LD_INT 25
13763: PUSH
13764: LD_INT 1
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 56
13773: PUSH
13774: EMPTY
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PPUSH
13781: CALL_OW 72
13785: PUSH
13786: LD_INT 1
13788: ARRAY
13789: PPUSH
13790: LD_VAR 0 1
13794: PPUSH
13795: CALL_OW 120
// if GetBType ( building ) = b_lab then
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 266
13808: PUSH
13809: LD_INT 6
13811: EQUAL
13812: IFFALSE 13872
// begin ResAllTechs ( 6 , building , 3 ) ;
13814: LD_INT 6
13816: PPUSH
13817: LD_VAR 0 1
13821: PPUSH
13822: LD_INT 3
13824: PPUSH
13825: CALL 4173 0 3
// ComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_scientistic ] ) , building ) ;
13829: LD_EXP 61
13833: PPUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 4
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 72
13848: PPUSH
13849: LD_VAR 0 1
13853: PPUSH
13854: CALL_OW 120
// ComEnterUnit ( Kirilenkova , building ) ;
13858: LD_EXP 57
13862: PPUSH
13863: LD_VAR 0 1
13867: PPUSH
13868: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 266
13881: PUSH
13882: LD_INT 2
13884: EQUAL
13885: IFFALSE 13916
// ComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
13887: LD_EXP 61
13891: PPUSH
13892: LD_INT 25
13894: PUSH
13895: LD_INT 3
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 72
13906: PPUSH
13907: LD_VAR 0 1
13911: PPUSH
13912: CALL_OW 120
// end ; end ;
13916: PPOPN 1
13918: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
13919: LD_VAR 0 1
13923: PUSH
13924: LD_INT 47
13926: EQUAL
13927: PUSH
13928: LD_VAR 0 2
13932: PPUSH
13933: CALL_OW 255
13937: PUSH
13938: LD_INT 3
13940: EQUAL
13941: AND
13942: IFFALSE 13952
// engineResearched = true ;
13944: LD_ADDR_EXP 10
13948: PUSH
13949: LD_INT 1
13951: ST_TO_ADDR
// end ;
13952: PPOPN 2
13954: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 255
13964: PUSH
13965: LD_OWVAR 2
13969: EQUAL
13970: PUSH
13971: LD_VAR 0 2
13975: PPUSH
13976: CALL_OW 302
13980: AND
13981: PUSH
13982: LD_EXP 12
13986: NOT
13987: AND
13988: PUSH
13989: LD_EXP 17
13993: NOT
13994: AND
13995: IFFALSE 14006
// Dial_FirstVehConstructed ( factory ) ;
13997: LD_VAR 0 2
14001: PPUSH
14002: CALL 7511 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
14006: LD_VAR 0 2
14010: PPUSH
14011: CALL_OW 255
14015: PUSH
14016: LD_OWVAR 2
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 2
14026: PPUSH
14027: CALL_OW 302
14031: AND
14032: PUSH
14033: LD_EXP 17
14037: AND
14038: IFFALSE 14054
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
14040: LD_ADDR_EXP 18
14044: PUSH
14045: LD_EXP 18
14049: PUSH
14050: LD_INT 1
14052: PLUS
14053: ST_TO_ADDR
// end ;
14054: PPOPN 2
14056: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase then
14057: LD_EXP 19
14061: NOT
14062: IFFALSE 14078
// Dial_NewCrates ( x , y ) ;
14064: LD_VAR 0 2
14068: PPUSH
14069: LD_VAR 0 3
14073: PPUSH
14074: CALL 7465 0 2
// end ;
14078: PPOPN 5
14080: END
// on Command ( com ) do var i , j , temp , order , destiny ;
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
14087: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14088: LD_ADDR_VAR 0 2
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: PUSH
14122: FOR_IN
14123: IFFALSE 14270
// if GetTaskList ( i ) > 0 then
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 437
14134: PUSH
14135: LD_INT 0
14137: GREATER
14138: IFFALSE 14268
// for j = 1 to GetTaskList ( i ) do
14140: LD_ADDR_VAR 0 3
14144: PUSH
14145: DOUBLE
14146: LD_INT 1
14148: DEC
14149: ST_TO_ADDR
14150: LD_VAR 0 2
14154: PPUSH
14155: CALL_OW 437
14159: PUSH
14160: FOR_TO
14161: IFFALSE 14266
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
14163: LD_ADDR_VAR 0 4
14167: PUSH
14168: LD_VAR 0 2
14172: PPUSH
14173: CALL_OW 437
14177: PUSH
14178: LD_VAR 0 3
14182: ARRAY
14183: PUSH
14184: LD_INT 4
14186: ARRAY
14187: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
14188: LD_VAR 0 4
14192: PUSH
14193: LD_INT 71
14195: EQUAL
14196: PUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 255
14206: PUSH
14207: LD_INT 6
14209: EQUAL
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: CALL_OW 437
14220: PUSH
14221: LD_VAR 0 3
14225: ARRAY
14226: PUSH
14227: LD_INT 1
14229: ARRAY
14230: PUSH
14231: LD_STRING e
14233: EQUAL
14234: AND
14235: PUSH
14236: LD_VAR 0 4
14240: PPUSH
14241: CALL_OW 247
14245: PUSH
14246: LD_INT 2
14248: EQUAL
14249: AND
14250: OR
14251: IFFALSE 14264
// SetTaskList ( i , [ ] ) ;
14253: LD_VAR 0 2
14257: PPUSH
14258: EMPTY
14259: PPUSH
14260: CALL_OW 446
// end ;
14264: GO 14160
14266: POP
14267: POP
14268: GO 14122
14270: POP
14271: POP
// destiny = [ ] ;
14272: LD_ADDR_VAR 0 6
14276: PUSH
14277: EMPTY
14278: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_INT 22
14286: PUSH
14287: LD_INT 3
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: LD_INT 21
14299: PUSH
14300: LD_INT 1
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 21
14309: PUSH
14310: LD_INT 2
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: PUSH
14331: FOR_IN
14332: IFFALSE 14514
// if GetTaskList ( i ) > 0 then
14334: LD_VAR 0 2
14338: PPUSH
14339: CALL_OW 437
14343: PUSH
14344: LD_INT 0
14346: GREATER
14347: IFFALSE 14512
// for j = 1 to GetTaskList ( i ) do
14349: LD_ADDR_VAR 0 3
14353: PUSH
14354: DOUBLE
14355: LD_INT 1
14357: DEC
14358: ST_TO_ADDR
14359: LD_VAR 0 2
14363: PPUSH
14364: CALL_OW 437
14368: PUSH
14369: FOR_TO
14370: IFFALSE 14510
// begin order = GetTaskList ( i ) [ j ] [ 1 ] ;
14372: LD_ADDR_VAR 0 5
14376: PUSH
14377: LD_VAR 0 2
14381: PPUSH
14382: CALL_OW 437
14386: PUSH
14387: LD_VAR 0 3
14391: ARRAY
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: ST_TO_ADDR
// destiny = destiny ^ GetTaskList ( i ) [ j ] [ 2 ] ;
14397: LD_ADDR_VAR 0 6
14401: PUSH
14402: LD_VAR 0 6
14406: PUSH
14407: LD_VAR 0 2
14411: PPUSH
14412: CALL_OW 437
14416: PUSH
14417: LD_VAR 0 3
14421: ARRAY
14422: PUSH
14423: LD_INT 2
14425: ARRAY
14426: ADD
14427: ST_TO_ADDR
// destiny = destiny ^ GetTaskList ( i ) [ j ] [ 3 ] ;
14428: LD_ADDR_VAR 0 6
14432: PUSH
14433: LD_VAR 0 6
14437: PUSH
14438: LD_VAR 0 2
14442: PPUSH
14443: CALL_OW 437
14447: PUSH
14448: LD_VAR 0 3
14452: ARRAY
14453: PUSH
14454: LD_INT 3
14456: ARRAY
14457: ADD
14458: ST_TO_ADDR
// if order = M and not InArea ( destiny [ 1 ] , destiny [ 2 ] , VisibleMapPartArea ) then
14459: LD_VAR 0 5
14463: PUSH
14464: LD_STRING M
14466: EQUAL
14467: PUSH
14468: LD_VAR 0 6
14472: PUSH
14473: LD_INT 1
14475: ARRAY
14476: PPUSH
14477: LD_VAR 0 6
14481: PUSH
14482: LD_INT 2
14484: ARRAY
14485: PPUSH
14486: LD_INT 7
14488: PPUSH
14489: CALL_OW 309
14493: NOT
14494: AND
14495: IFFALSE 14508
// SetTaskList ( i , [ ] ) ;
14497: LD_VAR 0 2
14501: PPUSH
14502: EMPTY
14503: PPUSH
14504: CALL_OW 446
// end ;
14508: GO 14369
14510: POP
14511: POP
14512: GO 14331
14514: POP
14515: POP
// end ;
14516: PPOPN 6
14518: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 255
14528: PUSH
14529: LD_INT 1
14531: EQUAL
14532: PUSH
14533: LD_VAR 0 1
14537: PPUSH
14538: CALL_OW 247
14542: PUSH
14543: LD_INT 1
14545: EQUAL
14546: AND
14547: IFFALSE 14633
// begin if unit in trapTeam then
14549: LD_VAR 0 1
14553: PUSH
14554: LD_EXP 71
14558: IN
14559: IFFALSE 14577
// trapTeam = trapTeam diff unit ;
14561: LD_ADDR_EXP 71
14565: PUSH
14566: LD_EXP 71
14570: PUSH
14571: LD_VAR 0 1
14575: DIFF
14576: ST_TO_ADDR
// if unit in amLeftEngs then
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 76
14586: IN
14587: IFFALSE 14605
// amLeftEngs = amLeftEngs diff unit ;
14589: LD_ADDR_EXP 76
14593: PUSH
14594: LD_EXP 76
14598: PUSH
14599: LD_VAR 0 1
14603: DIFF
14604: ST_TO_ADDR
// if unit in amRightEngs then
14605: LD_VAR 0 1
14609: PUSH
14610: LD_EXP 77
14614: IN
14615: IFFALSE 14633
// amRightEngs = amRightEngs diff unit ;
14617: LD_ADDR_EXP 77
14621: PUSH
14622: LD_EXP 77
14626: PUSH
14627: LD_VAR 0 1
14631: DIFF
14632: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 255
14642: PUSH
14643: LD_INT 6
14645: EQUAL
14646: PUSH
14647: LD_VAR 0 1
14651: PPUSH
14652: CALL_OW 247
14656: PUSH
14657: LD_INT 1
14659: EQUAL
14660: AND
14661: IFFALSE 14691
// if unit in belkovTeam then
14663: LD_VAR 0 1
14667: PUSH
14668: LD_EXP 65
14672: IN
14673: IFFALSE 14691
// belkovTeam = belkovTeam diff unit ;
14675: LD_ADDR_EXP 65
14679: PUSH
14680: LD_EXP 65
14684: PUSH
14685: LD_VAR 0 1
14689: DIFF
14690: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
14691: LD_VAR 0 1
14695: PPUSH
14696: CALL_OW 255
14700: PUSH
14701: LD_INT 3
14703: EQUAL
14704: PUSH
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 247
14714: PUSH
14715: LD_INT 1
14717: EQUAL
14718: AND
14719: IFFALSE 14735
// lostComradesCounter = lostComradesCounter + 1 ;
14721: LD_ADDR_EXP 39
14725: PUSH
14726: LD_EXP 39
14730: PUSH
14731: LD_INT 1
14733: PLUS
14734: ST_TO_ADDR
// if unit = Burlak then
14735: LD_VAR 0 1
14739: PUSH
14740: LD_EXP 54
14744: EQUAL
14745: IFFALSE 14751
// BurlakIsDead ;
14747: CALL 15858 0 0
// if unit in platSoldiers then
14751: LD_VAR 0 1
14755: PUSH
14756: LD_EXP 69
14760: IN
14761: IFFALSE 14779
// platSoldiers = platSoldiers diff unit ;
14763: LD_ADDR_EXP 69
14767: PUSH
14768: LD_EXP 69
14772: PUSH
14773: LD_VAR 0 1
14777: DIFF
14778: ST_TO_ADDR
// end ;
14779: PPOPN 1
14781: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 255
14791: PUSH
14792: LD_INT 1
14794: EQUAL
14795: PUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 247
14805: PUSH
14806: LD_INT 3
14808: EQUAL
14809: AND
14810: IFFALSE 14868
// begin if unit in leftBunkers then
14812: LD_VAR 0 1
14816: PUSH
14817: LD_EXP 72
14821: IN
14822: IFFALSE 14840
// leftBunkers = leftBunkers diff unit ;
14824: LD_ADDR_EXP 72
14828: PUSH
14829: LD_EXP 72
14833: PUSH
14834: LD_VAR 0 1
14838: DIFF
14839: ST_TO_ADDR
// if unit in rightBunkers then
14840: LD_VAR 0 1
14844: PUSH
14845: LD_EXP 73
14849: IN
14850: IFFALSE 14868
// rightBunkers = rightBunkers diff unit ;
14852: LD_ADDR_EXP 73
14856: PUSH
14857: LD_EXP 73
14861: PUSH
14862: LD_VAR 0 1
14866: DIFF
14867: ST_TO_ADDR
// end ; end ;
14868: PPOPN 1
14870: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
14871: LD_VAR 0 3
14875: PUSH
14876: LD_INT 1
14878: EQUAL
14879: IFFALSE 14889
// captureBelkovVehicle = true ;
14881: LD_ADDR_EXP 34
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// end ;
14889: PPOPN 4
14891: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
14892: LD_VAR 0 1
14896: PUSH
14897: LD_INT 3
14899: EQUAL
14900: PUSH
14901: LD_VAR 0 2
14905: PUSH
14906: LD_INT 6
14908: EQUAL
14909: AND
14910: IFFALSE 14916
// AttackComrades ;
14912: CALL 15873 0 0
// end ; end_of_file
14916: PPOPN 2
14918: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14919: LD_EXP 16
14923: PUSH
14924: LD_INT 8
14926: PPUSH
14927: LD_INT 22
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 21
14939: PUSH
14940: LD_INT 1
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PPUSH
14951: CALL_OW 71
14955: PUSH
14956: LD_INT 0
14958: EQUAL
14959: AND
14960: IFFALSE 15026
14962: GO 14964
14964: DISABLE
// begin enable ;
14965: ENABLE
// if not saveBelkovObjective then
14966: LD_EXP 32
14970: NOT
14971: IFFALSE 15016
// begin case Query ( QContMission ) of 1 :
14973: LD_STRING QContMission
14975: PPUSH
14976: CALL_OW 97
14980: PUSH
14981: LD_INT 1
14983: DOUBLE
14984: EQUAL
14985: IFTRUE 14989
14987: GO 14996
14989: POP
// begin FinishMission ;
14990: CALL 15027 0 0
// end ; 2 :
14994: GO 15016
14996: LD_INT 2
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15015
15004: POP
// begin saveBelkovObjective = true ;
15005: LD_ADDR_EXP 32
15009: PUSH
15010: LD_INT 1
15012: ST_TO_ADDR
// end ; end ;
15013: GO 15016
15015: POP
// end ; if belkovSaved then
15016: LD_EXP 33
15020: IFFALSE 15026
// FinishMission ;
15022: CALL 15027 0 0
// end ;
15026: END
// function FinishMission ; begin
15027: LD_INT 0
15029: PPUSH
// SetRewards ;
15030: CALL 15051 0 0
// SavePlayerCharacters ;
15034: CALL 15341 0 0
// SaveGlobalVariables ;
15038: CALL 15545 0 0
// YouWin ;
15042: CALL_OW 103
// end ;
15046: LD_VAR 0 1
15050: RET
// function SetRewards ; begin
15051: LD_INT 0
15053: PPUSH
// case initiative of 1 :
15054: LD_EXP 38
15058: PUSH
15059: LD_INT 1
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15080
15067: POP
// AddMedal ( Initiative , 1 ) ; 2 :
15068: LD_STRING Initiative
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: CALL_OW 101
15078: GO 15125
15080: LD_INT 2
15082: DOUBLE
15083: EQUAL
15084: IFTRUE 15088
15086: GO 15102
15088: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
15089: LD_STRING Initiative
15091: PPUSH
15092: LD_INT 2
15094: NEG
15095: PPUSH
15096: CALL_OW 101
15100: GO 15125
15102: LD_INT 3
15104: DOUBLE
15105: EQUAL
15106: IFTRUE 15110
15108: GO 15124
15110: POP
// AddMedal ( Initiative , - 1 ) ; end ;
15111: LD_STRING Initiative
15113: PPUSH
15114: LD_INT 1
15116: NEG
15117: PPUSH
15118: CALL_OW 101
15122: GO 15125
15124: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
15125: LD_EXP 33
15129: PUSH
15130: LD_EXP 56
15134: PPUSH
15135: CALL_OW 302
15139: PUSH
15140: LD_EXP 60
15144: PPUSH
15145: CALL_OW 302
15149: OR
15150: AND
15151: IFFALSE 15163
// AddMedal ( Belkov , 1 ) ;
15153: LD_STRING Belkov
15155: PPUSH
15156: LD_INT 1
15158: PPUSH
15159: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
15163: LD_EXP 33
15167: NOT
15168: PUSH
15169: LD_EXP 32
15173: NOT
15174: AND
15175: IFFALSE 15188
// AddMedal ( Belkov , - 1 ) ;
15177: LD_STRING Belkov
15179: PPUSH
15180: LD_INT 1
15182: NEG
15183: PPUSH
15184: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
15188: LD_EXP 33
15192: NOT
15193: PUSH
15194: LD_EXP 32
15198: AND
15199: IFFALSE 15212
// AddMedal ( Belkov , - 2 ) ;
15201: LD_STRING Belkov
15203: PPUSH
15204: LD_INT 2
15206: NEG
15207: PPUSH
15208: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
15212: LD_EXP 33
15216: PUSH
15217: LD_EXP 6
15221: PUSH
15222: LD_EXP 56
15226: PPUSH
15227: CALL_OW 301
15231: AND
15232: AND
15233: PUSH
15234: LD_EXP 6
15238: NOT
15239: PUSH
15240: LD_EXP 60
15244: PPUSH
15245: CALL_OW 301
15249: AND
15250: OR
15251: IFFALSE 15264
// AddMedal ( Belkov , - 2 ) ;
15253: LD_STRING Belkov
15255: PPUSH
15256: LD_INT 2
15258: NEG
15259: PPUSH
15260: CALL_OW 101
// if lostComradesCounter = 0 then
15264: LD_EXP 39
15268: PUSH
15269: LD_INT 0
15271: EQUAL
15272: IFFALSE 15286
// AddMedal ( NoLosses , 1 ) else
15274: LD_STRING NoLosses
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 101
15284: GO 15296
// AddMedal ( NoLosses , 0 ) ;
15286: LD_STRING NoLosses
15288: PPUSH
15289: LD_INT 0
15291: PPUSH
15292: CALL_OW 101
// GiveMedals ( Main ) ;
15296: LD_STRING Main
15298: PPUSH
15299: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
15303: LD_INT 22
15305: PUSH
15306: LD_INT 3
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 21
15315: PUSH
15316: LD_INT 1
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: PPUSH
15332: CALL_OW 43
// end ;
15336: LD_VAR 0 1
15340: RET
// function SavePlayerCharacters ; var othersYour ; begin
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
15345: LD_EXP 54
15349: PPUSH
15350: LD_STRING Burlak
15352: PPUSH
15353: LD_INT 3
15355: PPUSH
15356: CALL 3600 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
15360: LD_EXP 55
15364: PPUSH
15365: LD_STRING Gnyevko
15367: PPUSH
15368: LD_INT 3
15370: PPUSH
15371: CALL 3600 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
15375: LD_EXP 62
15379: PPUSH
15380: LD_STRING Kovalyuk
15382: PPUSH
15383: LD_INT 3
15385: PPUSH
15386: CALL 3600 0 3
// if belkovReturn then
15390: LD_EXP 6
15394: IFFALSE 15413
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
15396: LD_EXP 56
15400: PPUSH
15401: LD_STRING Belkov
15403: PPUSH
15404: LD_INT 3
15406: PPUSH
15407: CALL 3600 0 3
15411: GO 15428
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
15413: LD_EXP 60
15417: PPUSH
15418: LD_STRING Belkov2
15420: PPUSH
15421: LD_INT 3
15423: PPUSH
15424: CALL 3600 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk ] ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_EXP 54
15466: PUSH
15467: LD_EXP 55
15471: PUSH
15472: LD_EXP 56
15476: PUSH
15477: LD_EXP 60
15481: PUSH
15482: LD_EXP 62
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: DIFF
15494: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
15495: LD_VAR 0 2
15499: PPUSH
15500: LD_STRING other_survivors
15502: PPUSH
15503: LD_INT 3
15505: PPUSH
15506: CALL 3656 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
15510: LD_EXP 69
15514: PPUSH
15515: LD_STRING other_beria
15517: PPUSH
15518: LD_INT 6
15520: PPUSH
15521: CALL 3656 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
15525: LD_EXP 61
15529: PPUSH
15530: LD_STRING other_kirov
15532: PPUSH
15533: LD_INT 6
15535: PPUSH
15536: CALL 3656 0 3
// end ;
15540: LD_VAR 0 1
15544: RET
// function SaveGlobalVariables ; var vehicles ; begin
15545: LD_INT 0
15547: PPUSH
15548: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: LD_INT 22
15556: PUSH
15557: LD_INT 3
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 50
15576: PUSH
15577: EMPTY
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: PPUSH
15585: CALL_OW 69
15589: ST_TO_ADDR
// if vehicles then
15590: LD_VAR 0 2
15594: IFFALSE 15608
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
15596: LD_VAR 0 2
15600: PPUSH
15601: LD_STRING 02_Vehicles_1
15603: PPUSH
15604: CALL 4560 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
15608: LD_INT 8
15610: PPUSH
15611: LD_INT 21
15613: PUSH
15614: LD_INT 3
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: EMPTY
15622: LIST
15623: PPUSH
15624: CALL_OW 70
15628: PPUSH
15629: LD_STRING 02_BeriaBase_2
15631: PPUSH
15632: CALL 4714 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
15636: LD_INT 9
15638: PPUSH
15639: LD_INT 22
15641: PUSH
15642: LD_INT 6
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 21
15651: PUSH
15652: LD_INT 3
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 70
15667: PPUSH
15668: LD_STRING 02_KirovBase_3
15670: PPUSH
15671: CALL 4714 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_PlayerAmericanBuildings_4 ) ;
15675: LD_INT 22
15677: PUSH
15678: LD_INT 3
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 21
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 50
15697: PUSH
15698: EMPTY
15699: LIST
15700: PUSH
15701: LD_INT 23
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: PPUSH
15717: CALL_OW 69
15721: PPUSH
15722: LD_STRING 02_PlayerAmericanBuildings_4
15724: PPUSH
15725: CALL 4714 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
15729: LD_INT 22
15731: PUSH
15732: LD_INT 1
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 21
15741: PUSH
15742: LD_INT 3
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 50
15751: PUSH
15752: EMPTY
15753: LIST
15754: PUSH
15755: LD_INT 23
15757: PUSH
15758: LD_INT 1
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: PPUSH
15771: CALL_OW 69
15775: PPUSH
15776: LD_STRING 02_AmericanBuildings_5
15778: PPUSH
15779: CALL 4714 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
15783: LD_EXP 4
15787: PPUSH
15788: LD_STRING 02_MeetBelkovBrother_6
15790: PPUSH
15791: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
15795: LD_INT 106
15797: PPUSH
15798: CALL_OW 274
15802: PPUSH
15803: LD_INT 1
15805: PPUSH
15806: CALL_OW 275
15810: PPUSH
15811: LD_STRING 02_BeriaResourceCrates_7
15813: PPUSH
15814: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
15818: LD_INT 106
15820: PPUSH
15821: CALL_OW 274
15825: PPUSH
15826: LD_INT 2
15828: PPUSH
15829: CALL_OW 275
15833: PPUSH
15834: LD_STRING 02_BeriaResourceOil_8
15836: PPUSH
15837: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
15841: LD_EXP 5
15845: PPUSH
15846: LD_STRING 02_PlatonovOpinion_9
15848: PPUSH
15849: CALL_OW 39
// end ; end_of_file
15853: LD_VAR 0 1
15857: RET
// export function BurlakIsDead ; begin
15858: LD_INT 0
15860: PPUSH
// YouLost ( Burlak ) ;
15861: LD_STRING Burlak
15863: PPUSH
15864: CALL_OW 104
// end ;
15868: LD_VAR 0 1
15872: RET
// export function AttackComrades ; begin
15873: LD_INT 0
15875: PPUSH
// YouLost ( SelfAttack ) ;
15876: LD_STRING SelfAttack
15878: PPUSH
15879: CALL_OW 104
// end ; end_of_file
15883: LD_VAR 0 1
15887: RET
// every 0 0$1 do var engs ;
15888: GO 15890
15890: DISABLE
15891: LD_INT 0
15893: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
15894: LD_ADDR_VAR 0 1
15898: PUSH
15899: LD_EXP 61
15903: PPUSH
15904: LD_INT 25
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 72
15918: ST_TO_ADDR
// AddComBuild ( engs , b_breastwork , 144 , 96 , 1 ) ;
15919: LD_VAR 0 1
15923: PPUSH
15924: LD_INT 31
15926: PPUSH
15927: LD_INT 144
15929: PPUSH
15930: LD_INT 96
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
15940: LD_VAR 0 1
15944: PPUSH
15945: LD_INT 31
15947: PPUSH
15948: LD_INT 146
15950: PPUSH
15951: LD_INT 107
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 180 , 118 , 5 ) ;
15961: LD_VAR 0 1
15965: PPUSH
15966: LD_INT 31
15968: PPUSH
15969: LD_INT 180
15971: PPUSH
15972: LD_INT 118
15974: PPUSH
15975: LD_INT 5
15977: PPUSH
15978: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
15982: LD_VAR 0 1
15986: PPUSH
15987: LD_INT 31
15989: PPUSH
15990: LD_INT 176
15992: PPUSH
15993: LD_INT 123
15995: PPUSH
15996: LD_INT 5
15998: PPUSH
15999: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_INT 71
16010: PPUSH
16011: CALL_OW 180
// end ;
16015: PPOPN 1
16017: END
// every 0 0$1 trigger activateAMAI do
16018: LD_EXP 25
16022: IFFALSE 16046
16024: GO 16026
16026: DISABLE
// begin enable ;
16027: ENABLE
// RepairDamageLeftBunkers ;
16028: CALL 16047 0 0
// if Difficulty = 3 then
16032: LD_OWVAR 67
16036: PUSH
16037: LD_INT 3
16039: EQUAL
16040: IFFALSE 16046
// RepairDamageRightBunkers ;
16042: CALL 16126 0 0
// end ;
16046: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
16051: PPUSH
// ComExitBuilding ( amLeftEngs ) ;
16052: LD_EXP 76
16056: PPUSH
16057: CALL_OW 122
// for bunker in leftBunkers do
16061: LD_ADDR_VAR 0 3
16065: PUSH
16066: LD_EXP 72
16070: PUSH
16071: FOR_IN
16072: IFFALSE 16105
// if GetLives ( bunker ) < 1000 then
16074: LD_VAR 0 3
16078: PPUSH
16079: CALL_OW 256
16083: PUSH
16084: LD_INT 1000
16086: LESS
16087: IFFALSE 16103
// AddComRepairBuilding ( amLeftEngs , bunker ) ;
16089: LD_EXP 76
16093: PPUSH
16094: LD_VAR 0 3
16098: PPUSH
16099: CALL_OW 190
16103: GO 16071
16105: POP
16106: POP
// AddComEnterUnit ( amLeftEngs , amLeftDepot ) ;
16107: LD_EXP 76
16111: PPUSH
16112: LD_EXP 74
16116: PPUSH
16117: CALL_OW 180
// end ;
16121: LD_VAR 0 1
16125: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
16126: LD_INT 0
16128: PPUSH
16129: PPUSH
16130: PPUSH
// ComExitBuilding ( amRightEngs ) ;
16131: LD_EXP 77
16135: PPUSH
16136: CALL_OW 122
// for bunker in rightBunkers do
16140: LD_ADDR_VAR 0 3
16144: PUSH
16145: LD_EXP 73
16149: PUSH
16150: FOR_IN
16151: IFFALSE 16184
// if GetLives ( bunker ) < 1000 then
16153: LD_VAR 0 3
16157: PPUSH
16158: CALL_OW 256
16162: PUSH
16163: LD_INT 1000
16165: LESS
16166: IFFALSE 16182
// AddComRepairBuilding ( amRightEngs , bunker ) ;
16168: LD_EXP 77
16172: PPUSH
16173: LD_VAR 0 3
16177: PPUSH
16178: CALL_OW 190
16182: GO 16150
16184: POP
16185: POP
// AddComEnterUnit ( amRightEngs , amRightDepot ) ;
16186: LD_EXP 77
16190: PPUSH
16191: LD_EXP 75
16195: PPUSH
16196: CALL_OW 180
// end ; end_of_file
16200: LD_VAR 0 1
16204: RET
