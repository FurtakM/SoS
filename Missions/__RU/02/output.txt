// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51010 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5835 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57484 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57484 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16927 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16927 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16927 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16927 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1665
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1665
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 54726 0 1
// for i in 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 2
1509: PUSH
1510: FOR_IN
1511: IFFALSE 1554
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 71
1520: PPUSH
1521: LD_INT 2
1523: PPUSH
1524: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1528: LD_VAR 0 1
1532: PPUSH
1533: LD_INT 121
1535: PPUSH
1536: LD_INT 111
1538: PPUSH
1539: CALL_OW 171
// AddComUnload ( tmp ) ;
1543: LD_VAR 0 1
1547: PPUSH
1548: CALL_OW 219
// end ;
1552: GO 1510
1554: POP
1555: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1556: LD_VAR 0 1
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 113
1566: PPUSH
1567: LD_INT 113
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1577: LD_INT 83
1579: PPUSH
1580: LD_INT 46
1582: PPUSH
1583: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1587: LD_INT 83
1589: PPUSH
1590: LD_INT 47
1592: PPUSH
1593: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1597: LD_INT 83
1599: PPUSH
1600: LD_INT 48
1602: PPUSH
1603: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_INT 26
1614: PPUSH
1615: LD_INT 116
1617: PPUSH
1618: LD_INT 98
1620: PPUSH
1621: LD_INT 0
1623: PPUSH
1624: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1628: LD_INT 35
1630: PPUSH
1631: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 60
1642: PUSH
1643: EMPTY
1644: LIST
1645: PPUSH
1646: CALL_OW 72
1650: NOT
1651: IFFALSE 1628
// ComEnterUnit ( tmp , kirov ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 71
1660: PPUSH
1661: CALL_OW 120
// end ;
1665: PPOPN 2
1667: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1668: LD_INT 0
1670: PPUSH
1671: PPUSH
1672: PPUSH
1673: PPUSH
1674: PPUSH
1675: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1676: LD_ADDR_VAR 0 3
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 6
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 21
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// if not belkovTank then
1710: LD_VAR 0 3
1714: NOT
1715: IFFALSE 1808
// begin uc_side := 6 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 6
1724: ST_TO_ADDR
// uc_nation := 3 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 3
1732: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1733: LD_INT 21
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: LD_INT 42
1744: PPUSH
1745: LD_INT 100
1747: PPUSH
1748: CALL 21944 0 5
// belkovTank := CreateVehicle ;
1752: LD_ADDR_VAR 0 3
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1762: LD_VAR 0 3
1766: PPUSH
1767: LD_INT 5
1769: PPUSH
1770: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 127
1781: PPUSH
1782: LD_INT 118
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1792: LD_EXP 36
1796: PPUSH
1797: LD_VAR 0 3
1801: PPUSH
1802: CALL_OW 120
// end else
1806: GO 1822
// begin belkovTank := belkovTank [ 1 ] ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_VAR 0 3
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1822: LD_VAR 0 3
1826: PPUSH
1827: LD_INT 71
1829: PPUSH
1830: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 71
1841: PPUSH
1842: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1846: LD_VAR 0 3
1850: PPUSH
1851: CALL_OW 256
1855: PUSH
1856: LD_INT 1000
1858: LESS
1859: IFFALSE 1972
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: LD_EXP 43
1870: PPUSH
1871: LD_INT 25
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PPUSH
1881: CALL_OW 72
1885: ST_TO_ADDR
// if not mech then
1886: LD_VAR 0 4
1890: NOT
1891: IFFALSE 1907
// SetLives ( belkovTank , 1000 ) else
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_INT 1000
1900: PPUSH
1901: CALL_OW 234
1905: GO 1972
// begin ComExit ( mech ) ;
1907: LD_VAR 0 4
1911: PPUSH
1912: CALL 54726 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 6
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1972: LD_INT 70
1974: PPUSH
1975: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1979: LD_VAR 0 3
1983: PPUSH
1984: CALL_OW 256
1988: PUSH
1989: LD_INT 1000
1991: EQUAL
1992: IFFALSE 1972
// if mech then
1994: LD_VAR 0 4
1998: IFFALSE 2042
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2000: LD_VAR 0 4
2004: PPUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 6
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 2
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2042: LD_EXP 36
2046: PPUSH
2047: LD_INT 107
2049: PPUSH
2050: LD_INT 104
2052: PPUSH
2053: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2057: LD_EXP 36
2061: PPUSH
2062: LD_INT 95
2064: PPUSH
2065: LD_INT 101
2067: PPUSH
2068: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2072: LD_EXP 36
2076: PPUSH
2077: LD_INT 89
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 171
// wait ( 0 0$2 ) ;
2087: LD_INT 70
2089: PPUSH
2090: CALL_OW 67
// for i in belkovTeam do
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_EXP 45
2103: PUSH
2104: FOR_IN
2105: IFFALSE 2133
// begin ComExit ( i ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL 54726 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 89
2123: PPUSH
2124: LD_INT 100
2126: PPUSH
2127: CALL_OW 171
// end ;
2131: GO 2104
2133: POP
2134: POP
// tmp := Belkov union belkovTeam ;
2135: LD_ADDR_VAR 0 5
2139: PUSH
2140: LD_EXP 36
2144: PUSH
2145: LD_EXP 45
2149: UNION
2150: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2151: LD_INT 35
2153: PPUSH
2154: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2158: LD_VAR 0 5
2162: PPUSH
2163: LD_INT 60
2165: PUSH
2166: EMPTY
2167: LIST
2168: PPUSH
2169: CALL_OW 72
2173: NOT
2174: IFFALSE 2151
// ComMoveXY ( tmp , 71 , 65 ) ;
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_INT 71
2183: PPUSH
2184: LD_INT 65
2186: PPUSH
2187: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2191: LD_VAR 0 5
2195: PPUSH
2196: LD_INT 61
2198: PPUSH
2199: LD_INT 37
2201: PPUSH
2202: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2206: LD_VAR 0 5
2210: PPUSH
2211: LD_INT 67
2213: PPUSH
2214: LD_INT 17
2216: PPUSH
2217: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 70
2228: PPUSH
2229: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2233: LD_EXP 36
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 8
2243: PPUSH
2244: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2248: LD_EXP 36
2252: PPUSH
2253: LD_INT 105
2255: PPUSH
2256: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2260: LD_EXP 36
2264: PPUSH
2265: LD_INT 86
2267: PPUSH
2268: LD_INT 37
2270: PPUSH
2271: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2275: LD_EXP 36
2279: PPUSH
2280: LD_INT 105
2282: PPUSH
2283: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2287: LD_VAR 0 5
2291: PPUSH
2292: LD_INT 88
2294: PPUSH
2295: LD_INT 29
2297: PPUSH
2298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// for i in tmp do
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 5
2318: PUSH
2319: FOR_IN
2320: IFFALSE 2351
// if not HasTask ( i ) then
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 314
2331: NOT
2332: IFFALSE 2349
// AddComMoveXY ( tmp , 88 , 29 ) ;
2334: LD_VAR 0 5
2338: PPUSH
2339: LD_INT 88
2341: PPUSH
2342: LD_INT 29
2344: PPUSH
2345: CALL_OW 171
2349: GO 2319
2351: POP
2352: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2353: LD_VAR 0 5
2357: PPUSH
2358: LD_INT 95
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 72
2372: IFFALSE 2466
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2374: LD_ADDR_VAR 0 2
2378: PUSH
2379: LD_VAR 0 5
2383: PPUSH
2384: LD_INT 95
2386: PUSH
2387: LD_INT 6
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 72
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2464
// begin if i = Belkov then
2402: LD_VAR 0 2
2406: PUSH
2407: LD_EXP 36
2411: EQUAL
2412: IFFALSE 2453
// begin belkovTank := IsInUnit ( Belkov ) ;
2414: LD_ADDR_VAR 0 3
2418: PUSH
2419: LD_EXP 36
2423: PPUSH
2424: CALL_OW 310
2428: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2429: LD_ADDR_VAR 0 6
2433: PUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: CALL_OW 261
2443: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2444: LD_VAR 0 3
2448: PPUSH
2449: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL_OW 64
// end ;
2462: GO 2399
2464: POP
2465: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_INT 52
2473: PUSH
2474: EMPTY
2475: LIST
2476: PPUSH
2477: CALL_OW 72
2481: NOT
2482: IFFALSE 2302
// wait ( 1 1$20 ) ;
2484: LD_INT 2800
2486: PPUSH
2487: CALL_OW 67
// if fuel < 50 then
2491: LD_VAR 0 6
2495: PUSH
2496: LD_INT 50
2498: LESS
2499: IFFALSE 2509
// fuel := 50 ;
2501: LD_ADDR_VAR 0 6
2505: PUSH
2506: LD_INT 50
2508: ST_TO_ADDR
// uc_side := 6 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 6
2516: ST_TO_ADDR
// uc_nation := 3 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 3
2524: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2525: LD_INT 21
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_INT 42
2536: PPUSH
2537: LD_VAR 0 6
2541: PUSH
2542: LD_INT 5
2544: MINUS
2545: PPUSH
2546: CALL 21944 0 5
// belkovTank := CreateVehicle ;
2550: LD_ADDR_VAR 0 3
2554: PUSH
2555: CALL_OW 45
2559: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2560: LD_VAR 0 3
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 60
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2590: LD_EXP 36
2594: PPUSH
2595: LD_VAR 0 3
2599: PPUSH
2600: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2604: LD_EXP 36
2608: PPUSH
2609: LD_INT 72
2611: PPUSH
2612: LD_INT 26
2614: PPUSH
2615: CALL_OW 111
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// for i in belkovTeam do
2626: LD_ADDR_VAR 0 2
2630: PUSH
2631: LD_EXP 45
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: LD_INT 60
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2657: LD_VAR 0 2
2661: PPUSH
2662: LD_INT 65
2664: PPUSH
2665: LD_INT 18
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2672: LD_INT 28
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2636
2681: POP
2682: POP
// repeat wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2690: LD_EXP 14
2694: PUSH
2695: LD_EXP 45
2699: PPUSH
2700: LD_INT 60
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: NOT
2711: AND
2712: IFFALSE 2683
// americanTrap := true ;
2714: LD_ADDR_EXP 17
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// end ;
2722: LD_VAR 0 1
2726: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2727: LD_EXP 4
2731: PUSH
2732: LD_EXP 40
2736: PPUSH
2737: CALL_OW 302
2741: AND
2742: IFFALSE 3062
2744: GO 2746
2746: DISABLE
2747: LD_INT 0
2749: PPUSH
2750: PPUSH
2751: PPUSH
2752: PPUSH
// begin enable ;
2753: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2754: LD_EXP 8
2758: PUSH
2759: LD_INT 0
2761: GREATER
2762: PUSH
2763: LD_EXP 40
2767: PPUSH
2768: CALL_OW 314
2772: NOT
2773: AND
2774: IFFALSE 2943
// begin dir := rand ( 0 , 5 ) ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_INT 0
2783: PPUSH
2784: LD_INT 5
2786: PPUSH
2787: CALL_OW 12
2791: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2792: LD_ADDR_VAR 0 1
2796: PUSH
2797: LD_EXP 40
2801: PPUSH
2802: CALL_OW 250
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 5
2814: PPUSH
2815: CALL_OW 272
2819: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_EXP 40
2829: PPUSH
2830: CALL_OW 251
2834: PPUSH
2835: LD_VAR 0 4
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 273
2847: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2848: LD_VAR 0 1
2852: PPUSH
2853: LD_VAR 0 2
2857: PPUSH
2858: CALL_OW 488
2862: PUSH
2863: LD_INT 106
2865: PPUSH
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 297
2880: PUSH
2881: LD_INT 26
2883: LESS
2884: AND
2885: IFFALSE 2908
// AddComMoveXY ( Platonov , x , y ) else
2887: LD_EXP 40
2891: PPUSH
2892: LD_VAR 0 1
2896: PPUSH
2897: LD_VAR 0 2
2901: PPUSH
2902: CALL_OW 171
2906: GO 2923
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2908: LD_EXP 40
2912: PPUSH
2913: LD_INT 64
2915: PPUSH
2916: LD_INT 96
2918: PPUSH
2919: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2923: LD_EXP 40
2927: PPUSH
2928: LD_INT 105
2930: PPUSH
2931: LD_INT 315
2933: PPUSH
2934: CALL_OW 12
2938: PPUSH
2939: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2943: LD_EXP 8
2947: PUSH
2948: LD_INT 0
2950: LESSEQUAL
2951: IFFALSE 2997
// begin if not IsAt ( Platonov , 64 , 96 ) then
2953: LD_EXP 40
2957: PPUSH
2958: LD_INT 64
2960: PPUSH
2961: LD_INT 96
2963: PPUSH
2964: CALL_OW 307
2968: NOT
2969: IFFALSE 2995
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2971: LD_EXP 40
2975: PPUSH
2976: LD_INT 64
2978: PPUSH
2979: LD_INT 96
2981: PPUSH
2982: CALL_OW 111
// AddComHold ( Platonov ) ;
2986: LD_EXP 40
2990: PPUSH
2991: CALL_OW 200
// end ; end else
2995: GO 3062
// if tick mod 0 0$75 = 0 0$00 then
2997: LD_OWVAR 1
3001: PUSH
3002: LD_INT 2625
3004: MOD
3005: PUSH
3006: LD_INT 0
3008: EQUAL
3009: IFFALSE 3062
// begin amount := rand ( 2 , 5 ) ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: LD_INT 2
3018: PPUSH
3019: LD_INT 5
3021: PPUSH
3022: CALL_OW 12
3026: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3027: LD_ADDR_EXP 8
3031: PUSH
3032: LD_EXP 8
3036: PUSH
3037: LD_VAR 0 3
3041: PUSH
3042: LD_INT 10
3044: MUL
3045: MINUS
3046: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_INT 5
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL_OW 55
// end ; end ;
3062: PPOPN 4
3064: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3065: LD_INT 106
3067: PPUSH
3068: CALL_OW 274
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 275
3080: PUSH
3081: LD_INT 30
3083: LESS
3084: IFFALSE 3294
3086: GO 3088
3088: DISABLE
3089: LD_INT 0
3091: PPUSH
3092: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3093: LD_ADDR_VAR 0 2
3097: PUSH
3098: LD_EXP 43
3102: PPUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 60
3108: PUSH
3109: EMPTY
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 25
3118: PUSH
3119: LD_INT 2
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// if not eng then
3135: LD_VAR 0 2
3139: NOT
3140: IFFALSE 3144
// exit ;
3142: GO 3294
// ComExit ( eng ) ;
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL 54726 0 1
// i := 5 ;
3153: LD_ADDR_VAR 0 1
3157: PUSH
3158: LD_INT 5
3160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3168: LD_VAR 0 2
3172: PPUSH
3173: LD_INT 60
3175: PUSH
3176: EMPTY
3177: LIST
3178: PPUSH
3179: CALL_OW 72
3183: NOT
3184: PUSH
3185: LD_VAR 0 2
3189: AND
3190: IFFALSE 3260
// begin ComTransport ( eng , kirov , mat_oil ) ;
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 71
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 67
3214: PPUSH
3215: LD_INT 99
3217: PPUSH
3218: CALL_OW 171
// AddComUnload ( eng ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3231: LD_VAR 0 2
3235: PPUSH
3236: LD_INT 107
3238: PPUSH
3239: LD_INT 104
3241: PPUSH
3242: CALL_OW 171
// i := i - 1 ;
3246: LD_ADDR_VAR 0 1
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: LD_INT 1
3258: MINUS
3259: ST_TO_ADDR
// end ; until i = 0 ;
3260: LD_VAR 0 1
3264: PUSH
3265: LD_INT 0
3267: EQUAL
3268: IFFALSE 3161
// AddComMoveUnit ( eng , kirov ) ;
3270: LD_VAR 0 2
3274: PPUSH
3275: LD_INT 71
3277: PPUSH
3278: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_INT 71
3289: PPUSH
3290: CALL_OW 180
// end ;
3294: PPOPN 2
3296: END
// export function SendReinforcements ; var i ; begin
3297: LD_INT 0
3299: PPUSH
3300: PPUSH
// reinforcementsGained := true ;
3301: LD_ADDR_EXP 25
3305: PUSH
3306: LD_INT 1
3308: ST_TO_ADDR
// for i := 1 to 2 do
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 2
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3405
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3325: LD_EXP 44
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PPUSH
3336: CALL 54726 0 1
3340: IFFALSE 3349
// wait ( 0 0$0.3 ) ;
3342: LD_INT 10
3344: PPUSH
3345: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3349: LD_EXP 44
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: LD_INT 75
3362: PPUSH
3363: LD_INT 84
3365: PPUSH
3366: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3370: LD_EXP 44
3374: PUSH
3375: LD_VAR 0 2
3379: ARRAY
3380: PPUSH
3381: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3385: LD_EXP 44
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: CALL_OW 235
// end ;
3403: GO 3322
3405: POP
3406: POP
// end ;
3407: LD_VAR 0 1
3411: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3412: LD_EXP 21
3416: PUSH
3417: LD_EXP 18
3421: AND
3422: PUSH
3423: LD_EXP 43
3427: PPUSH
3428: LD_INT 25
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 72
3442: AND
3443: IFFALSE 3600
3445: GO 3447
3447: DISABLE
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_EXP 43
3461: PPUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PPUSH
3472: CALL_OW 72
3476: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 30
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: ST_TO_ADDR
// if not fac then
3511: LD_VAR 0 2
3515: NOT
3516: IFFALSE 3520
// exit ;
3518: GO 3600
// fac := fac [ 1 ] ;
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_VAR 0 2
3529: PUSH
3530: LD_INT 1
3532: ARRAY
3533: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3534: LD_VAR 0 2
3538: PPUSH
3539: CALL_OW 313
3543: PUSH
3544: LD_INT 0
3546: EQUAL
3547: IFFALSE 3579
// begin ComExit ( mech ) ;
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL 54726 0 1
// wait ( 3 ) ;
3558: LD_INT 3
3560: PPUSH
3561: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3565: LD_VAR 0 1
3569: PPUSH
3570: LD_VAR 0 2
3574: PPUSH
3575: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3579: LD_VAR 0 2
3583: PPUSH
3584: LD_INT 21
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 42
3595: PPUSH
3596: CALL_OW 125
// end ;
3600: PPOPN 2
3602: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3603: LD_INT 0
3605: PPUSH
3606: PPUSH
3607: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3608: LD_VAR 0 1
3612: PPUSH
3613: LD_INT 90
3615: PPUSH
3616: LD_INT 100
3618: PPUSH
3619: CALL_OW 111
// wait ( 0 0$10 ) ;
3623: LD_INT 350
3625: PPUSH
3626: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3642: LD_INT 35
3644: PPUSH
3645: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 110
3663: ST_TO_ADDR
// if tag = 0 then
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: IFFALSE 3743
// begin if not HasTask ( vehicle ) then
3674: LD_VAR 0 1
3678: PPUSH
3679: CALL_OW 314
3683: NOT
3684: IFFALSE 3701
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3686: LD_VAR 0 1
3690: PPUSH
3691: LD_INT 83
3693: PPUSH
3694: LD_INT 68
3696: PPUSH
3697: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 256
3710: PUSH
3711: LD_INT 750
3713: LESS
3714: IFFALSE 3743
// begin SetTag ( vehicle , 1 ) ;
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 93
3735: PPUSH
3736: LD_INT 102
3738: PPUSH
3739: CALL_OW 111
// end ; end ; if tag = 1 then
3743: LD_VAR 0 4
3747: PUSH
3748: LD_INT 1
3750: EQUAL
3751: IFFALSE 3841
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3753: LD_VAR 0 1
3757: PPUSH
3758: LD_INT 113
3760: PPUSH
3761: LD_INT 106
3763: PPUSH
3764: CALL_OW 307
3768: NOT
3769: PUSH
3770: LD_VAR 0 1
3774: PPUSH
3775: CALL_OW 314
3779: NOT
3780: AND
3781: IFFALSE 3798
// ComMoveXY ( vehicle , 113 , 106 ) ;
3783: LD_VAR 0 1
3787: PPUSH
3788: LD_INT 113
3790: PPUSH
3791: LD_INT 106
3793: PPUSH
3794: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3798: LD_VAR 0 1
3802: PPUSH
3803: LD_INT 113
3805: PPUSH
3806: LD_INT 106
3808: PPUSH
3809: CALL_OW 307
3813: IFFALSE 3841
// begin SetTag ( vehicle , 2 ) ;
3815: LD_VAR 0 1
3819: PPUSH
3820: LD_INT 2
3822: PPUSH
3823: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: CALL_OW 311
3836: PPUSH
3837: CALL 56030 0 1
// end ; end ; if tag = 2 then
3841: LD_VAR 0 4
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: IFFALSE 3913
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3851: LD_VAR 0 1
3855: PPUSH
3856: CALL_OW 256
3860: PUSH
3861: LD_INT 1000
3863: EQUAL
3864: PUSH
3865: LD_VAR 0 1
3869: PPUSH
3870: CALL_OW 311
3874: AND
3875: IFFALSE 3913
// begin ComMoveUnit ( vehicle , kirov ) ;
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 71
3884: PPUSH
3885: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: LD_INT 71
3896: PPUSH
3897: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 301
3922: PUSH
3923: LD_EXP 23
3927: OR
3928: IFFALSE 3642
// if eastOutpostDestroyed then
3930: LD_EXP 23
3934: IFFALSE 3951
// ComMoveXY ( vehicle , 111 , 105 ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: LD_INT 111
3943: PPUSH
3944: LD_INT 105
3946: PPUSH
3947: CALL_OW 111
// end ; end_of_file
3951: LD_VAR 0 2
3955: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
3961: PPUSH
// uc_side := 1 ;
3962: LD_ADDR_OWVAR 20
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// uc_nation := 1 ;
3970: LD_ADDR_OWVAR 21
3974: PUSH
3975: LD_INT 1
3977: ST_TO_ADDR
// usWestForces := [ ] ;
3978: LD_ADDR_EXP 46
3982: PUSH
3983: EMPTY
3984: ST_TO_ADDR
// usEastForces := [ ] ;
3985: LD_ADDR_EXP 47
3989: PUSH
3990: EMPTY
3991: ST_TO_ADDR
// bc_type := b_depot ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_INT 0
3999: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4000: LD_ADDR_OWVAR 43
4004: PUSH
4005: LD_OWVAR 67
4009: PUSH
4010: LD_INT 1
4012: MINUS
4013: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4014: LD_INT 48
4016: PPUSH
4017: LD_INT 54
4019: PPUSH
4020: LD_INT 2
4022: PPUSH
4023: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: LD_INT 55
4034: PUSH
4035: LD_INT 55
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 59
4048: PUSH
4049: LD_INT 61
4051: PUSH
4052: LD_INT 4
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: ST_TO_ADDR
// if Difficulty > 1 then
4064: LD_OWVAR 67
4068: PUSH
4069: LD_INT 1
4071: GREATER
4072: IFFALSE 4108
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4074: LD_ADDR_VAR 0 4
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_INT 46
4091: PUSH
4092: LD_INT 64
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 2
4107: ST_TO_ADDR
// if Difficulty > 2 then
4108: LD_OWVAR 67
4112: PUSH
4113: LD_INT 2
4115: GREATER
4116: IFFALSE 4152
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 36
4135: PUSH
4136: LD_INT 48
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 2
4151: ST_TO_ADDR
// bc_type := b_breastwork ;
4152: LD_ADDR_OWVAR 42
4156: PUSH
4157: LD_INT 31
4159: ST_TO_ADDR
// InitHC_All ( ) ;
4160: CALL_OW 584
// for i in tmp do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_VAR 0 4
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4319
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4177: LD_VAR 0 2
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_VAR 0 2
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 2
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4208: LD_INT 0
4210: PPUSH
4211: LD_OWVAR 67
4215: PPUSH
4216: CALL_OW 381
// un := CreateHuman ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: CALL_OW 44
4229: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4230: LD_ADDR_EXP 46
4234: PUSH
4235: LD_EXP 46
4239: PPUSH
4240: LD_EXP 46
4244: PUSH
4245: LD_INT 1
4247: PLUS
4248: PPUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: CALL_OW 1
4258: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_VAR 0 2
4268: PUSH
4269: LD_INT 3
4271: ARRAY
4272: PUSH
4273: LD_INT 3
4275: PLUS
4276: PUSH
4277: LD_INT 6
4279: MOD
4280: PPUSH
4281: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_VAR 0 2
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: LD_VAR 0 2
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: PPUSH
4308: CALL_OW 428
4312: PPUSH
4313: CALL_OW 52
// end ;
4317: GO 4174
4319: POP
4320: POP
// for i := 1 to 2 do
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: DOUBLE
4327: LD_INT 1
4329: DEC
4330: ST_TO_ADDR
4331: LD_INT 2
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4411
// begin PrepareEngineer ( false , Difficulty ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_OWVAR 67
4344: PPUSH
4345: CALL_OW 382
// un := CreateHuman ;
4349: LD_ADDR_VAR 0 3
4353: PUSH
4354: CALL_OW 44
4358: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_EXP 46
4368: PPUSH
4369: LD_EXP 46
4373: PUSH
4374: LD_INT 1
4376: PLUS
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: CALL_OW 1
4387: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4388: LD_VAR 0 3
4392: PPUSH
4393: LD_INT 54
4395: PPUSH
4396: LD_INT 58
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 0
4404: PPUSH
4405: CALL_OW 50
// end ;
4409: GO 4334
4411: POP
4412: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4413: LD_ADDR_VAR 0 4
4417: PUSH
4418: LD_INT 87
4420: PUSH
4421: LD_INT 62
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 89
4434: PUSH
4435: LD_INT 67
4437: PUSH
4438: LD_INT 1
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// if Difficulty > 2 then
4450: LD_OWVAR 67
4454: PUSH
4455: LD_INT 2
4457: GREATER
4458: IFFALSE 4494
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4460: LD_ADDR_VAR 0 4
4464: PUSH
4465: LD_VAR 0 4
4469: PPUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_INT 88
4477: PUSH
4478: LD_INT 53
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 2
4493: ST_TO_ADDR
// bc_type := b_breastwork ;
4494: LD_ADDR_OWVAR 42
4498: PUSH
4499: LD_INT 31
4501: ST_TO_ADDR
// for i in tmp do
4502: LD_ADDR_VAR 0 2
4506: PUSH
4507: LD_VAR 0 4
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4657
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4515: LD_VAR 0 2
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: LD_VAR 0 2
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PPUSH
4533: LD_VAR 0 2
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PPUSH
4542: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 381
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4568: LD_ADDR_EXP 47
4572: PUSH
4573: LD_EXP 47
4577: PPUSH
4578: LD_EXP 47
4582: PUSH
4583: LD_INT 1
4585: PLUS
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 1
4596: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_VAR 0 2
4606: PUSH
4607: LD_INT 3
4609: ARRAY
4610: PUSH
4611: LD_INT 3
4613: PLUS
4614: PUSH
4615: LD_INT 6
4617: MOD
4618: PPUSH
4619: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4623: LD_VAR 0 3
4627: PPUSH
4628: LD_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: PPUSH
4637: LD_VAR 0 2
4641: PUSH
4642: LD_INT 2
4644: ARRAY
4645: PPUSH
4646: CALL_OW 428
4650: PPUSH
4651: CALL_OW 52
// end ;
4655: GO 4512
4657: POP
4658: POP
// for i := 1 to 2 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_INT 2
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4749
// begin PrepareEngineer ( false , Difficulty ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_OWVAR 67
4682: PPUSH
4683: CALL_OW 382
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 3
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4697: LD_ADDR_EXP 47
4701: PUSH
4702: LD_EXP 47
4706: PPUSH
4707: LD_EXP 47
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: PPUSH
4716: LD_VAR 0 3
4720: PPUSH
4721: CALL_OW 1
4725: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4726: LD_VAR 0 3
4730: PPUSH
4731: LD_INT 95
4733: PPUSH
4734: LD_INT 65
4736: PPUSH
4737: LD_INT 2
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 50
// end ;
4747: GO 4672
4749: POP
4750: POP
// end ;
4751: LD_VAR 0 1
4755: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
// usTrapForces := [ ] ;
4761: LD_ADDR_EXP 48
4765: PUSH
4766: EMPTY
4767: ST_TO_ADDR
// uc_side := 1 ;
4768: LD_ADDR_OWVAR 20
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// uc_nation := 1 ;
4776: LD_ADDR_OWVAR 21
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// InitHC_All ( ) ;
4784: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4788: LD_INT 1
4790: PPUSH
4791: LD_OWVAR 67
4795: PPUSH
4796: CALL_OW 381
// un := CreateHuman ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: CALL_OW 44
4809: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4810: LD_ADDR_EXP 48
4814: PUSH
4815: LD_EXP 48
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: CALL 54328 0 2
4829: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4830: LD_ADDR_VAR 0 2
4834: PUSH
4835: DOUBLE
4836: LD_INT 1
4838: DEC
4839: ST_TO_ADDR
4840: LD_INT 5
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: LD_INT 8
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: LD_OWVAR 67
4862: ARRAY
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4911
// begin PrepareSoldier ( false , Difficulty ) ;
4867: LD_INT 0
4869: PPUSH
4870: LD_OWVAR 67
4874: PPUSH
4875: CALL_OW 381
// un := CreateHuman ;
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: CALL_OW 44
4888: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4889: LD_ADDR_EXP 48
4893: PUSH
4894: LD_EXP 48
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL 54328 0 2
4908: ST_TO_ADDR
// end ;
4909: GO 4864
4911: POP
4912: POP
// for i := 1 to 2 do
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: DOUBLE
4919: LD_INT 1
4921: DEC
4922: ST_TO_ADDR
4923: LD_INT 2
4925: PUSH
4926: FOR_TO
4927: IFFALSE 4973
// begin PrepareScientist ( false , Difficulty ) ;
4929: LD_INT 0
4931: PPUSH
4932: LD_OWVAR 67
4936: PPUSH
4937: CALL_OW 384
// un := CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4951: LD_ADDR_EXP 48
4955: PUSH
4956: LD_EXP 48
4960: PPUSH
4961: LD_VAR 0 3
4965: PPUSH
4966: CALL 54328 0 2
4970: ST_TO_ADDR
// end ;
4971: GO 4926
4973: POP
4974: POP
// end ;
4975: LD_VAR 0 1
4979: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4980: LD_EXP 46
4984: IFFALSE 5554
4986: GO 4988
4988: DISABLE
4989: LD_INT 0
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
4995: PPUSH
// begin enable ;
4996: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4997: LD_ADDR_VAR 0 3
5001: PUSH
5002: LD_INT 8
5004: PPUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 21
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 70
5033: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_EXP 46
5043: PPUSH
5044: LD_INT 25
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 72
5058: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5059: LD_ADDR_VAR 0 5
5063: PUSH
5064: LD_EXP 46
5068: PPUSH
5069: LD_INT 25
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PPUSH
5079: CALL_OW 72
5083: ST_TO_ADDR
// if eng then
5084: LD_VAR 0 4
5088: IFFALSE 5282
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5090: LD_VAR 0 3
5094: PPUSH
5095: LD_INT 3
5097: PUSH
5098: LD_INT 24
5100: PUSH
5101: LD_INT 1000
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: IFFALSE 5228
// begin for i in eng do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 4
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5224
// if IsInUnit ( i ) then
5131: LD_VAR 0 1
5135: PPUSH
5136: CALL_OW 310
5140: IFFALSE 5153
// ComExit ( i ) else
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL 54726 0 1
5151: GO 5222
// if IsOk ( i ) and not HasTask ( i ) then
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 302
5162: PUSH
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 314
5172: NOT
5173: AND
5174: IFFALSE 5222
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5176: LD_VAR 0 1
5180: PPUSH
5181: LD_VAR 0 3
5185: PPUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 24
5191: PUSH
5192: LD_INT 1000
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 72
5207: PPUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 74
5217: PPUSH
5218: CALL_OW 130
5222: GO 5128
5224: POP
5225: POP
// end else
5226: GO 5282
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5228: LD_VAR 0 3
5232: PPUSH
5233: LD_INT 30
5235: PUSH
5236: LD_INT 0
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PPUSH
5243: CALL_OW 72
5247: IFFALSE 5282
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_VAR 0 3
5258: PPUSH
5259: LD_INT 30
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 72
5273: PUSH
5274: LD_INT 1
5276: ARRAY
5277: PPUSH
5278: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5282: LD_VAR 0 5
5286: PPUSH
5287: LD_INT 50
5289: PUSH
5290: EMPTY
5291: LIST
5292: PPUSH
5293: CALL_OW 72
5297: PUSH
5298: LD_INT 18
5300: PPUSH
5301: LD_INT 81
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 70
5315: PUSH
5316: LD_INT 1
5318: GREATER
5319: AND
5320: PUSH
5321: LD_INT 18
5323: PPUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 70
5338: NOT
5339: AND
5340: IFFALSE 5394
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5342: LD_ADDR_VAR 0 1
5346: PUSH
5347: LD_VAR 0 5
5351: PPUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PPUSH
5358: CALL_OW 72
5362: PUSH
5363: FOR_IN
5364: IFFALSE 5392
// begin ComExit ( i ) ;
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL 54726 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 46
5382: PPUSH
5383: LD_INT 62
5385: PPUSH
5386: CALL_OW 174
// end ;
5390: GO 5363
5392: POP
5393: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5394: LD_INT 18
5396: PPUSH
5397: LD_INT 81
5399: PUSH
5400: LD_INT 1
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 70
5411: NOT
5412: PUSH
5413: LD_VAR 0 5
5417: PPUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 54
5423: PUSH
5424: EMPTY
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 50
5433: PUSH
5434: EMPTY
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 72
5445: AND
5446: PUSH
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 30
5454: PUSH
5455: LD_INT 31
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 58
5464: PUSH
5465: EMPTY
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 72
5476: AND
5477: IFFALSE 5554
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5479: LD_VAR 0 5
5483: PPUSH
5484: LD_INT 3
5486: PUSH
5487: LD_INT 54
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 50
5499: PUSH
5500: EMPTY
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 72
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 31
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 58
5533: PUSH
5534: EMPTY
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 72
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 120
// end ;
5554: PPOPN 5
5556: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5557: LD_EXP 47
5561: IFFALSE 5832
5563: GO 5565
5565: DISABLE
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
// begin enable ;
5571: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5572: LD_ADDR_VAR 0 2
5576: PUSH
5577: LD_INT 15
5579: PPUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 21
5592: PUSH
5593: LD_INT 3
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 70
5608: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: LD_EXP 47
5618: PPUSH
5619: LD_INT 25
5621: PUSH
5622: LD_INT 2
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 72
5633: ST_TO_ADDR
// if eng then
5634: LD_VAR 0 3
5638: IFFALSE 5832
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 24
5650: PUSH
5651: LD_INT 1000
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 72
5666: IFFALSE 5778
// begin for i in eng do
5668: LD_ADDR_VAR 0 1
5672: PUSH
5673: LD_VAR 0 3
5677: PUSH
5678: FOR_IN
5679: IFFALSE 5774
// if IsInUnit ( i ) then
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 310
5690: IFFALSE 5703
// ComExit ( i ) else
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL 54726 0 1
5701: GO 5772
// if IsOk ( i ) and not HasTask ( i ) then
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 302
5712: PUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 314
5722: NOT
5723: AND
5724: IFFALSE 5772
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_INT 3
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: LD_INT 1000
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 72
5757: PPUSH
5758: LD_VAR 0 1
5762: PPUSH
5763: CALL_OW 74
5767: PPUSH
5768: CALL_OW 130
5772: GO 5678
5774: POP
5775: POP
// end else
5776: GO 5832
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5778: LD_VAR 0 2
5782: PPUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: CALL_OW 72
5797: IFFALSE 5832
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5799: LD_VAR 0 3
5803: PPUSH
5804: LD_VAR 0 2
5808: PPUSH
5809: LD_INT 30
5811: PUSH
5812: LD_INT 0
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 72
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: CALL_OW 120
// end ; end_of_file
5832: PPOPN 3
5834: END
// export function Action ; var i , tmp ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
5839: PPUSH
// InGameOn ;
5840: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5844: LD_INT 112
5846: PPUSH
5847: LD_INT 107
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 12
5855: NEG
5856: PPUSH
5857: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5861: LD_INT 121
5863: PPUSH
5864: LD_INT 113
5866: PPUSH
5867: CALL_OW 86
// tmp := PrepareBurlak ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL 1244 0 0
5880: ST_TO_ADDR
// for i in tmp do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5945
// begin SetDir ( i , 5 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 5
5901: PPUSH
5902: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_INT 3
5913: PPUSH
5914: LD_INT 0
5916: PPUSH
5917: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_INT 121
5928: PPUSH
5929: LD_INT 111
5931: PPUSH
5932: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5936: LD_INT 28
5938: PPUSH
5939: CALL_OW 67
// end ;
5943: GO 5891
5945: POP
5946: POP
// CenterOnUnits ( Kurin ) ;
5947: LD_EXP 38
5951: PPUSH
5952: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5956: LD_EXP 34
5960: PPUSH
5961: LD_EXP 38
5965: PPUSH
5966: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5977: LD_EXP 34
5981: PPUSH
5982: LD_EXP 38
5986: PPUSH
5987: CALL_OW 296
5991: PUSH
5992: LD_INT 6
5994: LESS
5995: IFFALSE 5970
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5997: LD_EXP 34
6001: PUSH
6002: LD_EXP 35
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: LD_EXP 38
6015: PPUSH
6016: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6020: LD_ADDR_VAR 0 2
6024: PUSH
6025: LD_VAR 0 3
6029: PUSH
6030: LD_EXP 34
6034: PUSH
6035: LD_EXP 35
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: DIFF
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6112
// if GetClass ( i ) = class_soldier then
6048: LD_VAR 0 2
6052: PPUSH
6053: CALL_OW 257
6057: PUSH
6058: LD_INT 1
6060: EQUAL
6061: IFFALSE 6098
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6063: LD_VAR 0 2
6067: PPUSH
6068: LD_INT 95
6070: PUSH
6071: LD_INT 209
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: LD_INT 2
6085: MOD
6086: PUSH
6087: LD_INT 1
6089: PLUS
6090: ARRAY
6091: PPUSH
6092: CALL_OW 120
6096: GO 6110
// ComEnterUnit ( i , ru_lab ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 83
6105: PPUSH
6106: CALL_OW 120
6110: GO 6045
6112: POP
6113: POP
// Say ( Kurin , D1-Kur-1 ) ;
6114: LD_EXP 38
6118: PPUSH
6119: LD_STRING D1-Kur-1
6121: PPUSH
6122: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6126: LD_EXP 34
6130: PPUSH
6131: LD_STRING D1-Bur-1
6133: PPUSH
6134: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6138: LD_INT 10
6140: PPUSH
6141: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6145: LD_EXP 38
6149: PPUSH
6150: LD_STRING D1-Kur-2
6152: PPUSH
6153: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6157: LD_EXP 39
6161: PPUSH
6162: CALL 54726 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_INT 115
6173: PPUSH
6174: LD_INT 108
6176: PPUSH
6177: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6181: LD_EXP 39
6185: PPUSH
6186: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6190: LD_EXP 34
6194: PPUSH
6195: LD_STRING D1-Bur-2
6197: PPUSH
6198: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6202: LD_EXP 38
6206: PPUSH
6207: LD_STRING D1-Kur-3
6209: PPUSH
6210: CALL_OW 88
// if Gnyevko then
6214: LD_EXP 35
6218: IFFALSE 6232
// Say ( Kurin , D1-Kur-3a ) ;
6220: LD_EXP 38
6224: PPUSH
6225: LD_STRING D1-Kur-3a
6227: PPUSH
6228: CALL_OW 88
// InGameOff ;
6232: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6236: LD_STRING M1
6238: PPUSH
6239: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6243: LD_INT 112
6245: PPUSH
6246: LD_INT 107
6248: PPUSH
6249: LD_INT 3
6251: PPUSH
6252: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6256: LD_INT 66
6258: PPUSH
6259: LD_INT 99
6261: PPUSH
6262: LD_INT 3
6264: PPUSH
6265: LD_INT 7
6267: NEG
6268: PPUSH
6269: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6273: LD_INT 66
6275: PPUSH
6276: LD_INT 99
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6286: LD_EXP 39
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 235
// if Gnyevko then
6298: LD_EXP 35
6302: IFFALSE 6316
// SetSide ( Gnyevko , 3 ) ;
6304: LD_EXP 35
6308: PPUSH
6309: LD_INT 3
6311: PPUSH
6312: CALL_OW 235
// SaveForQuickRestart ;
6316: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6320: LD_EXP 38
6324: PPUSH
6325: LD_INT 71
6327: PPUSH
6328: CALL_OW 120
// wait ( 0 0$2 ) ;
6332: LD_INT 70
6334: PPUSH
6335: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6339: LD_EXP 43
6343: PUSH
6344: LD_INT 2
6346: ARRAY
6347: PPUSH
6348: CALL 54726 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6352: LD_EXP 43
6356: PUSH
6357: LD_INT 2
6359: ARRAY
6360: PPUSH
6361: LD_INT 98
6363: PPUSH
6364: LD_INT 98
6366: PPUSH
6367: CALL_OW 428
6371: PPUSH
6372: CALL_OW 180
// wait ( 0 0$12 ) ;
6376: LD_INT 420
6378: PPUSH
6379: CALL_OW 67
// kurinDontWannaTalk := true ;
6383: LD_ADDR_EXP 5
6387: PUSH
6388: LD_INT 1
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 1
6395: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6396: LD_EXP 5
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 91
6413: PUSH
6414: LD_INT 71
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 69
6433: AND
6434: IFFALSE 6621
6436: GO 6438
6438: DISABLE
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// begin enable ;
6443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6444: LD_ADDR_VAR 0 2
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 91
6461: PUSH
6462: LD_INT 71
6464: PUSH
6465: LD_INT 14
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: ST_TO_ADDR
// InGameOn ;
6482: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6486: LD_INT 116
6488: PPUSH
6489: LD_INT 107
6491: PPUSH
6492: LD_INT 3
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 330
// ComExit ( Kurin ) ;
6502: LD_EXP 38
6506: PPUSH
6507: CALL 54726 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6511: LD_EXP 38
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 1
6523: ARRAY
6524: PPUSH
6525: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6529: LD_EXP 38
6533: PPUSH
6534: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6538: LD_VAR 0 2
6542: PPUSH
6543: LD_INT 87
6545: PPUSH
6546: LD_INT 99
6548: PPUSH
6549: CALL_OW 111
// if kirovHasTank then
6553: LD_EXP 6
6557: IFFALSE 6573
// Say ( Kurin , D1a-Kur-1a ) else
6559: LD_EXP 38
6563: PPUSH
6564: LD_STRING D1a-Kur-1a
6566: PPUSH
6567: CALL_OW 88
6571: GO 6585
// Say ( Kurin , D1a-Kur-1 ) ;
6573: LD_EXP 38
6577: PPUSH
6578: LD_STRING D1a-Kur-1
6580: PPUSH
6581: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6585: LD_EXP 38
6589: PPUSH
6590: LD_INT 71
6592: PPUSH
6593: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6597: LD_INT 116
6599: PPUSH
6600: LD_INT 107
6602: PPUSH
6603: LD_INT 3
6605: PPUSH
6606: CALL_OW 331
// wait ( 0 0$3 ) ;
6610: LD_INT 105
6612: PPUSH
6613: CALL_OW 67
// InGameOff ;
6617: CALL_OW 9
// end ;
6621: PPOPN 2
6623: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6624: LD_INT 22
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 95
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PPUSH
6648: CALL_OW 69
6652: PUSH
6653: LD_EXP 7
6657: AND
6658: IFFALSE 6997
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// begin enable ;
6670: ENABLE
// blockNorth := false ;
6671: LD_ADDR_EXP 7
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// InGameOn ;
6679: CALL_OW 8
// DialogueOn ;
6683: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 95
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6721: LD_EXP 39
6725: PUSH
6726: LD_VAR 0 2
6730: IN
6731: PUSH
6732: LD_EXP 39
6736: PPUSH
6737: CALL_OW 302
6741: AND
6742: IFFALSE 6758
// Say ( Kovalyuk , D1b-Kov-1 ) else
6744: LD_EXP 39
6748: PPUSH
6749: LD_STRING D1b-Kov-1
6751: PPUSH
6752: CALL_OW 88
6756: GO 6793
// if Burlak in tmp and IsOk ( Burlak ) then
6758: LD_EXP 34
6762: PUSH
6763: LD_VAR 0 2
6767: IN
6768: PUSH
6769: LD_EXP 34
6773: PPUSH
6774: CALL_OW 302
6778: AND
6779: IFFALSE 6793
// Say ( Burlak , D1b-Bur-1 ) ;
6781: LD_EXP 34
6785: PPUSH
6786: LD_STRING D1b-Bur-1
6788: PPUSH
6789: CALL_OW 88
// DialogueOff ;
6793: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6797: LD_INT 22
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: LD_INT 21
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: PPUSH
6833: CALL_OW 141
// for i in tmp do
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: LD_VAR 0 2
6846: PUSH
6847: FOR_IN
6848: IFFALSE 6976
// begin d := rand ( 2 , 3 ) ;
6850: LD_ADDR_VAR 0 5
6854: PUSH
6855: LD_INT 2
6857: PPUSH
6858: LD_INT 3
6860: PPUSH
6861: CALL_OW 12
6865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: LD_VAR 0 1
6875: PPUSH
6876: CALL_OW 250
6880: PPUSH
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_INT 6
6888: PPUSH
6889: CALL_OW 272
6893: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6894: LD_ADDR_VAR 0 4
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 251
6908: PPUSH
6909: LD_VAR 0 5
6913: PPUSH
6914: LD_INT 6
6916: PPUSH
6917: CALL_OW 273
6921: ST_TO_ADDR
// if ValidHex ( x , y ) then
6922: LD_VAR 0 3
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: CALL_OW 488
6936: IFFALSE 6959
// ComMoveXY ( i , x , y ) else
6938: LD_VAR 0 1
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 111
6957: GO 6974
// ComMoveXY ( i , 79 , 85 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 79
6966: PPUSH
6967: LD_INT 85
6969: PPUSH
6970: CALL_OW 111
// end ;
6974: GO 6847
6976: POP
6977: POP
// wait ( 0 0$5 ) ;
6978: LD_INT 175
6980: PPUSH
6981: CALL_OW 67
// InGameOff ;
6985: CALL_OW 9
// blockNorth := true ;
6989: LD_ADDR_EXP 7
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// end ;
6997: PPOPN 5
6999: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7000: LD_EXP 44
7004: PPUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 72
7019: PUSH
7020: LD_EXP 4
7024: NOT
7025: AND
7026: IFFALSE 7428
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7038: LD_ADDR_VAR 0 5
7042: PUSH
7043: LD_EXP 44
7047: PPUSH
7048: LD_EXP 34
7052: PPUSH
7053: CALL_OW 74
7057: ST_TO_ADDR
// InGameOn ;
7058: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7062: LD_VAR 0 5
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 5
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_INT 3
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7092: LD_VAR 0 5
7096: PPUSH
7097: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7101: LD_VAR 0 5
7105: PPUSH
7106: LD_EXP 34
7110: PPUSH
7111: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7115: LD_VAR 0 5
7119: PPUSH
7120: LD_STRING D2-RSol1-1
7122: PPUSH
7123: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_VAR 0 5
7136: PPUSH
7137: CALL_OW 250
7141: PPUSH
7142: LD_VAR 0 5
7146: PPUSH
7147: CALL_OW 254
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 272
7159: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: LD_VAR 0 5
7169: PPUSH
7170: CALL_OW 251
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 254
7184: PPUSH
7185: LD_INT 3
7187: PPUSH
7188: CALL_OW 273
7192: ST_TO_ADDR
// if ValidHex ( x , y ) then
7193: LD_VAR 0 3
7197: PPUSH
7198: LD_VAR 0 4
7202: PPUSH
7203: CALL_OW 488
7207: IFFALSE 7239
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7209: LD_EXP 35
7213: PUSH
7214: LD_EXP 39
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PPUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 111
7237: GO 7262
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7239: LD_EXP 35
7243: PUSH
7244: LD_EXP 39
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: LD_VAR 0 5
7257: PPUSH
7258: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7262: LD_EXP 34
7266: PPUSH
7267: LD_VAR 0 5
7271: PPUSH
7272: CALL_OW 112
// p := 0 ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7284: LD_INT 35
7286: PPUSH
7287: CALL_OW 67
// p := p + 1 ;
7291: LD_ADDR_VAR 0 2
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 1
7303: PLUS
7304: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7305: LD_VAR 0 2
7309: PUSH
7310: LD_INT 10
7312: GREATER
7313: PUSH
7314: LD_EXP 34
7318: PPUSH
7319: LD_VAR 0 5
7323: PPUSH
7324: CALL_OW 296
7328: PUSH
7329: LD_INT 6
7331: LESS
7332: OR
7333: IFFALSE 7284
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7335: LD_EXP 34
7339: PUSH
7340: LD_EXP 35
7344: PUSH
7345: LD_EXP 39
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PPUSH
7355: LD_VAR 0 5
7359: PPUSH
7360: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7364: LD_EXP 34
7368: PPUSH
7369: LD_STRING D2-Bur-1
7371: PPUSH
7372: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7376: LD_VAR 0 5
7380: PPUSH
7381: LD_STRING D2-RSol1-2
7383: PPUSH
7384: CALL_OW 88
// ComHold ( nearestGuard ) ;
7388: LD_VAR 0 5
7392: PPUSH
7393: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7397: LD_VAR 0 5
7401: PPUSH
7402: CALL_OW 250
7406: PPUSH
7407: LD_VAR 0 5
7411: PPUSH
7412: CALL_OW 251
7416: PPUSH
7417: LD_INT 3
7419: PPUSH
7420: CALL_OW 331
// InGameOff ;
7424: CALL_OW 9
// end ;
7428: PPOPN 5
7430: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7431: LD_EXP 34
7435: PPUSH
7436: LD_EXP 40
7440: PPUSH
7441: CALL_OW 296
7445: PUSH
7446: LD_INT 10
7448: LESS
7449: PUSH
7450: LD_INT 3
7452: PPUSH
7453: LD_EXP 40
7457: PPUSH
7458: CALL_OW 292
7462: AND
7463: IFFALSE 7819
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
// begin InGameOn ;
7471: CALL_OW 8
// beriaVisited := true ;
7475: LD_ADDR_EXP 4
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7483: LD_EXP 34
7487: PPUSH
7488: LD_EXP 40
7492: PPUSH
7493: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7497: LD_EXP 35
7501: PUSH
7502: LD_EXP 39
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: LD_INT 68
7513: PPUSH
7514: LD_INT 99
7516: PPUSH
7517: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7521: LD_EXP 40
7525: PPUSH
7526: LD_EXP 34
7530: PPUSH
7531: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7535: LD_EXP 40
7539: PPUSH
7540: LD_STRING D2-Pla-2
7542: PPUSH
7543: CALL_OW 88
// p := 0 ;
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7555: LD_INT 35
7557: PPUSH
7558: CALL_OW 67
// p := p + 1 ;
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7576: LD_EXP 34
7580: PPUSH
7581: LD_EXP 40
7585: PPUSH
7586: CALL_OW 296
7590: PUSH
7591: LD_INT 6
7593: LESS
7594: PUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 8
7602: GREATER
7603: OR
7604: IFFALSE 7555
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7606: LD_EXP 34
7610: PUSH
7611: LD_EXP 35
7615: PUSH
7616: LD_EXP 39
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: LD_EXP 40
7630: PPUSH
7631: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7635: LD_EXP 34
7639: PPUSH
7640: LD_STRING D2-Bur-2
7642: PPUSH
7643: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 3
7652: PPUSH
7653: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7657: LD_EXP 40
7661: PPUSH
7662: LD_STRING D2-Pla-3
7664: PPUSH
7665: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7669: LD_EXP 34
7673: PPUSH
7674: LD_STRING D2-Bur-3
7676: PPUSH
7677: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7681: LD_EXP 40
7685: PPUSH
7686: LD_STRING D2-Pla-4
7688: PPUSH
7689: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7693: LD_EXP 34
7697: PPUSH
7698: LD_STRING D2-Bur-4
7700: PPUSH
7701: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7705: LD_EXP 40
7709: PPUSH
7710: LD_STRING D2-Pla-5
7712: PPUSH
7713: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7717: LD_INT 1
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: LD_INT 4
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL 7822 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7739: LD_EXP 40
7743: PPUSH
7744: LD_STRING D3-Pla-1
7746: PPUSH
7747: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7751: LD_EXP 34
7755: PPUSH
7756: LD_STRING D3-Bur-1
7758: PPUSH
7759: CALL_OW 88
// InGameOff ;
7763: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7767: LD_STRING M2a
7769: PPUSH
7770: CALL_OW 337
// SetSide ( beria , 3 ) ;
7774: LD_INT 106
7776: PPUSH
7777: LD_INT 3
7779: PPUSH
7780: CALL_OW 235
// if not Gnyevko then
7784: LD_EXP 35
7788: NOT
7789: IFFALSE 7810
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7791: LD_INT 106
7793: PPUSH
7794: CALL_OW 313
7798: PUSH
7799: LD_INT 1
7801: ARRAY
7802: PPUSH
7803: LD_INT 3
7805: PPUSH
7806: CALL_OW 235
// ComFree ( Platonov ) ;
7810: LD_EXP 40
7814: PPUSH
7815: CALL_OW 139
// end ;
7819: PPOPN 1
7821: END
// function AskPlatonov ( questions ) ; var q ; begin
7822: LD_INT 0
7824: PPUSH
7825: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7826: LD_ADDR_VAR 0 3
7830: PUSH
7831: LD_STRING QMoreInfo
7833: PPUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 98
7843: ST_TO_ADDR
// case q of 1 :
7844: LD_VAR 0 3
7848: PUSH
7849: LD_INT 1
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7884
7857: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7858: LD_EXP 34
7862: PPUSH
7863: LD_STRING D2a-Bur-1
7865: PPUSH
7866: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7870: LD_EXP 40
7874: PPUSH
7875: LD_STRING D2a-Pla-1
7877: PPUSH
7878: CALL_OW 88
// end ; 2 :
7882: GO 7955
7884: LD_INT 2
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7919
7892: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7893: LD_EXP 34
7897: PPUSH
7898: LD_STRING D2b-Bur-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7905: LD_EXP 40
7909: PPUSH
7910: LD_STRING D2b-Pla-1
7912: PPUSH
7913: CALL_OW 88
// end ; 3 :
7917: GO 7955
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7954
7927: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7928: LD_EXP 34
7932: PPUSH
7933: LD_STRING D2c-Bur-1
7935: PPUSH
7936: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7940: LD_EXP 40
7944: PPUSH
7945: LD_STRING D2c-Pla-1
7947: PPUSH
7948: CALL_OW 88
// end ; end ;
7952: GO 7955
7954: POP
// if q < 4 and questions > 2 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 4
7962: LESS
7963: PUSH
7964: LD_VAR 0 1
7968: PUSH
7969: LD_INT 2
7971: GREATER
7972: AND
7973: IFFALSE 7990
// AskPlatonov ( questions diff q ) ;
7975: LD_VAR 0 1
7979: PUSH
7980: LD_VAR 0 3
7984: DIFF
7985: PPUSH
7986: CALL 7822 0 1
// end ;
7990: LD_VAR 0 2
7994: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7995: LD_INT 0
7997: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7998: LD_EXP 40
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 2
8012: PPUSH
8013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8024: LD_EXP 40
8028: PPUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 2
8038: PPUSH
8039: CALL_OW 297
8043: PUSH
8044: LD_INT 5
8046: LESS
8047: PUSH
8048: LD_VAR 0 1
8052: PPUSH
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 283
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: AND
8067: IFFALSE 8017
// ComStop ( Platonov ) ;
8069: LD_EXP 40
8073: PPUSH
8074: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8078: LD_EXP 40
8082: PPUSH
8083: LD_STRING D4-Pla-1
8085: PPUSH
8086: CALL_OW 88
// end ;
8090: LD_VAR 0 3
8094: RET
// every 0 0$2 trigger hasLab do
8095: LD_EXP 9
8099: IFFALSE 8163
8101: GO 8103
8103: DISABLE
// begin DialogueOn ;
8104: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8108: LD_EXP 34
8112: PPUSH
8113: LD_STRING D5a-Bur-1
8115: PPUSH
8116: CALL_OW 88
// if hasWorkshop then
8120: LD_EXP 10
8124: IFFALSE 8140
// Say ( Platonov , D5a-Pla-1 ) else
8126: LD_EXP 40
8130: PPUSH
8131: LD_STRING D5a-Pla-1
8133: PPUSH
8134: CALL_OW 88
8138: GO 8152
// Say ( Platonov , D5a-Pla-1a ) ;
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D5a-Pla-1a
8147: PPUSH
8148: CALL_OW 88
// DialogueOff ;
8152: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8156: LD_STRING M2b
8158: PPUSH
8159: CALL_OW 337
// end ;
8163: END
// every 0 0$2 trigger hasWorkshop do
8164: LD_EXP 10
8168: IFFALSE 8232
8170: GO 8172
8172: DISABLE
// begin DialogueOn ;
8173: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8177: LD_EXP 34
8181: PPUSH
8182: LD_STRING D5b-Bur-1
8184: PPUSH
8185: CALL_OW 88
// if hasLab then
8189: LD_EXP 9
8193: IFFALSE 8209
// Say ( Platonov , D5b-Pla-1 ) else
8195: LD_EXP 40
8199: PPUSH
8200: LD_STRING D5b-Pla-1
8202: PPUSH
8203: CALL_OW 88
8207: GO 8221
// Say ( Platonov , D5b-Pla-1a ) ;
8209: LD_EXP 40
8213: PPUSH
8214: LD_STRING D5b-Pla-1a
8216: PPUSH
8217: CALL_OW 88
// DialogueOff ;
8221: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8225: LD_STRING M2c
8227: PPUSH
8228: CALL_OW 337
// end ;
8232: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8233: LD_EXP 9
8237: PUSH
8238: LD_EXP 10
8242: AND
8243: IFFALSE 8337
8245: GO 8247
8247: DISABLE
// begin DialogueOn ;
8248: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8252: LD_INT 47
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL_OW 321
8262: PUSH
8263: LD_INT 2
8265: EQUAL
8266: IFFALSE 8294
// begin Say ( Burlak , D7b-Bur-1 ) ;
8268: LD_EXP 34
8272: PPUSH
8273: LD_STRING D7b-Bur-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8280: LD_EXP 40
8284: PPUSH
8285: LD_STRING D7b-Pla-1
8287: PPUSH
8288: CALL_OW 88
// end else
8292: GO 8318
// begin Say ( Burlak , D7a-Bur-1 ) ;
8294: LD_EXP 34
8298: PPUSH
8299: LD_STRING D7a-Bur-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8306: LD_EXP 40
8310: PPUSH
8311: LD_STRING D7a-Pla-1
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8322: LD_STRING M2
8324: PPUSH
8325: CALL_OW 337
// hasToBuildTank := true ;
8329: LD_ADDR_EXP 11
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// end ;
8337: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8338: LD_EXP 4
8342: PUSH
8343: LD_EXP 9
8347: NOT
8348: PUSH
8349: LD_EXP 10
8353: NOT
8354: OR
8355: PUSH
8356: LD_EXP 11
8360: OR
8361: AND
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 3
8375: PUSH
8376: LD_INT 91
8378: PUSH
8379: LD_INT 106
8381: PUSH
8382: LD_INT 32
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: AND
8403: IFFALSE 8512
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
// begin enable ;
8411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8412: LD_ADDR_VAR 0 1
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_INT 106
8435: PUSH
8436: LD_INT 32
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 69
8456: ST_TO_ADDR
// InGameOn ;
8457: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8461: LD_VAR 0 1
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8474: LD_VAR 0 1
8478: PPUSH
8479: LD_INT 66
8481: PPUSH
8482: LD_INT 99
8484: PPUSH
8485: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8489: LD_EXP 40
8493: PPUSH
8494: LD_STRING D8-Pla-1
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$3 ) ;
8501: LD_INT 105
8503: PPUSH
8504: CALL_OW 67
// InGameOff ;
8508: CALL_OW 9
// end ;
8512: PPOPN 1
8514: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8515: LD_INT 21
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 23
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 30
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 30
8553: PUSH
8554: LD_INT 31
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 70
8575: PUSH
8576: LD_EXP 31
8580: NOT
8581: AND
8582: IFFALSE 8793
8584: GO 8586
8586: DISABLE
8587: LD_INT 0
8589: PPUSH
// begin enable ;
8590: ENABLE
// InGameOn ;
8591: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: LD_INT 21
8602: PPUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 23
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 30
8638: PUSH
8639: LD_INT 31
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 70
8660: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8661: LD_EXP 40
8665: PPUSH
8666: LD_VAR 0 1
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: CALL_OW 112
// wait ( 0 0$2 ) ;
8679: LD_INT 70
8681: PPUSH
8682: CALL_OW 67
// ComHold ( Platonov ) ;
8686: LD_EXP 40
8690: PPUSH
8691: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8695: LD_EXP 40
8699: PPUSH
8700: LD_STRING D6-Pla-1
8702: PPUSH
8703: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8707: LD_EXP 34
8711: PPUSH
8712: LD_STRING D6-Bur-1
8714: PPUSH
8715: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8719: LD_VAR 0 1
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8732: LD_VAR 0 1
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PPUSH
8741: CALL_OW 266
8745: PUSH
8746: LD_INT 31
8748: EQUAL
8749: IFFALSE 8771
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8751: LD_INT 106
8753: PPUSH
8754: CALL_OW 274
8758: PPUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_INT 10
8764: PPUSH
8765: CALL_OW 276
8769: GO 8789
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8771: LD_INT 106
8773: PPUSH
8774: CALL_OW 274
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 30
8784: PPUSH
8785: CALL_OW 276
// InGameOff ;
8789: CALL_OW 9
// end ;
8793: PPOPN 1
8795: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8796: LD_EXP 4
8800: PUSH
8801: LD_INT 21
8803: PPUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 23
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 71
8843: AND
8844: IFFALSE 9101
8846: GO 8848
8848: DISABLE
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
// begin enable ;
8853: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_INT 21
8861: PPUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 3
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 21
8884: PUSH
8885: LD_INT 3
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 71
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: ST_TO_ADDR
// InGameOn ;
8906: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8910: LD_EXP 40
8914: PPUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8924: LD_EXP 40
8928: PPUSH
8929: LD_STRING DPlatAngry
8931: PPUSH
8932: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8936: LD_EXP 34
8940: PPUSH
8941: LD_STRING D6-Bur-1
8943: PPUSH
8944: CALL_OW 88
// RemoveUnit ( tmp ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 64
// InGameOff ;
8957: CALL_OW 9
// amount := 0 ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 266
8978: PUSH
8979: LD_INT 31
8981: DOUBLE
8982: EQUAL
8983: IFTRUE 8987
8985: GO 8998
8987: POP
// amount := 10 ; b_lab :
8988: LD_ADDR_VAR 0 2
8992: PUSH
8993: LD_INT 10
8995: ST_TO_ADDR
8996: GO 9075
8998: LD_INT 6
9000: DOUBLE
9001: EQUAL
9002: IFTRUE 9006
9004: GO 9017
9006: POP
// amount := 20 ; b_armoury :
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 20
9014: ST_TO_ADDR
9015: GO 9075
9017: LD_INT 4
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9036
9025: POP
// amount := 30 ; b_workshop :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 30
9033: ST_TO_ADDR
9034: GO 9075
9036: LD_INT 2
9038: DOUBLE
9039: EQUAL
9040: IFTRUE 9044
9042: GO 9055
9044: POP
// amount := 40 ; b_oil_power :
9045: LD_ADDR_VAR 0 2
9049: PUSH
9050: LD_INT 40
9052: ST_TO_ADDR
9053: GO 9075
9055: LD_INT 26
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9074
9063: POP
// amount := 20 ; end ;
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 20
9071: ST_TO_ADDR
9072: GO 9075
9074: POP
// if amount then
9075: LD_VAR 0 2
9079: IFFALSE 9101
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9081: LD_INT 106
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: LD_VAR 0 2
9096: PPUSH
9097: CALL_OW 276
// end ;
9101: PPOPN 2
9103: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9104: LD_INT 22
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 92
9116: PUSH
9117: LD_INT 112
9119: PUSH
9120: LD_INT 155
9122: PUSH
9123: LD_INT 8
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 69
9140: PUSH
9141: LD_INT 2
9143: LESS
9144: PUSH
9145: LD_EXP 34
9149: PPUSH
9150: LD_INT 112
9152: PPUSH
9153: LD_INT 155
9155: PPUSH
9156: CALL_OW 297
9160: PUSH
9161: LD_INT 8
9163: LESS
9164: AND
9165: IFFALSE 9399
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9173: LD_INT 112
9175: PPUSH
9176: LD_INT 155
9178: PPUSH
9179: LD_INT 3
9181: PPUSH
9182: LD_INT 4
9184: NEG
9185: PPUSH
9186: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9190: LD_INT 1
9192: PPUSH
9193: LD_EXP 34
9197: PPUSH
9198: CALL_OW 471
// uc_side := 1 ;
9202: LD_ADDR_OWVAR 20
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// uc_nation := 1 ;
9210: LD_ADDR_OWVAR 21
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: LD_STRING Dickens
9225: PPUSH
9226: CALL_OW 25
9230: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9231: LD_VAR 0 1
9235: PPUSH
9236: LD_INT 112
9238: PPUSH
9239: LD_INT 155
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 48
// wait ( 0 0$2 ) ;
9249: LD_INT 70
9251: PPUSH
9252: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: LD_EXP 34
9265: PPUSH
9266: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9270: LD_VAR 0 1
9274: PPUSH
9275: LD_STRING DUsSpawnSol
9277: PPUSH
9278: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9282: LD_INT 1
9284: PPUSH
9285: LD_EXP 34
9289: PPUSH
9290: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9294: LD_INT 112
9296: PPUSH
9297: LD_INT 155
9299: PPUSH
9300: LD_INT 3
9302: PPUSH
9303: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_INT 77
9314: PPUSH
9315: LD_INT 152
9317: PPUSH
9318: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9322: LD_INT 35
9324: PPUSH
9325: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: CALL_OW 302
9338: NOT
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: LD_INT 77
9347: PPUSH
9348: LD_INT 152
9350: PPUSH
9351: CALL_OW 307
9355: OR
9356: IFFALSE 9322
// if not IsOk ( Dickens ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: IFFALSE 9372
// exit ;
9370: GO 9399
// RemoveUnit ( Dickens ) ;
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_EXP 3
9390: PUSH
9391: LD_STRING Dickens
9393: STR
9394: PPUSH
9395: CALL_OW 38
// end ;
9399: PPOPN 1
9401: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9402: LD_EXP 34
9406: PPUSH
9407: CALL_OW 256
9411: PUSH
9412: LD_INT 600
9414: LESS
9415: IFFALSE 9432
9417: GO 9419
9419: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9420: LD_EXP 34
9424: PPUSH
9425: LD_STRING DUsSpawnBur
9427: PPUSH
9428: CALL_OW 88
9432: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9433: LD_EXP 12
9437: IFFALSE 10499
9439: GO 9441
9441: DISABLE
9442: LD_INT 0
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
// begin hasToBuildTank := false ;
9448: LD_ADDR_EXP 11
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9456: LD_ADDR_EXP 5
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 21
9481: PUSH
9482: LD_INT 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: ST_TO_ADDR
// InGameOn ;
9498: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9502: LD_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: PPUSH
9511: CALL_OW 85
// wait ( 0 0$1 ) ;
9515: LD_INT 35
9517: PPUSH
9518: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9522: LD_EXP 34
9526: PPUSH
9527: LD_STRING D9-Bur-1
9529: PPUSH
9530: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9534: LD_EXP 40
9538: PPUSH
9539: LD_VAR 0 2
9543: PUSH
9544: LD_INT 1
9546: ARRAY
9547: PPUSH
9548: CALL_OW 112
// p := 0 ;
9552: LD_ADDR_VAR 0 3
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9560: LD_INT 35
9562: PPUSH
9563: CALL_OW 67
// p := p + 1 ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9581: LD_EXP 40
9585: PPUSH
9586: LD_VAR 0 2
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: CALL_OW 296
9599: PUSH
9600: LD_INT 8
9602: LESS
9603: PUSH
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 8
9611: GREATER
9612: OR
9613: IFFALSE 9560
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9615: LD_EXP 40
9619: PPUSH
9620: LD_VAR 0 2
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PPUSH
9629: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9633: LD_EXP 40
9637: PPUSH
9638: LD_STRING D9-Pla-1
9640: PPUSH
9641: CALL_OW 88
// ComFree ( Platonov ) ;
9645: LD_EXP 40
9649: PPUSH
9650: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9654: LD_EXP 40
9658: PPUSH
9659: LD_INT 64
9661: PPUSH
9662: LD_INT 98
9664: PPUSH
9665: CALL_OW 171
// InGameOff ;
9669: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9673: LD_STRING M3
9675: PPUSH
9676: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9680: LD_EXP 41
9684: PPUSH
9685: LD_INT 70
9687: PPUSH
9688: LD_INT 108
9690: PPUSH
9691: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9695: LD_EXP 41
9699: PPUSH
9700: CALL_OW 200
// wait ( 1 ) ;
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 67
// ComExit ( Belkov ) ;
9711: LD_EXP 36
9715: PPUSH
9716: CALL 54726 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9720: LD_EXP 36
9724: PPUSH
9725: LD_INT 113
9727: PPUSH
9728: LD_INT 104
9730: PPUSH
9731: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9735: LD_EXP 36
9739: PPUSH
9740: LD_INT 116
9742: PPUSH
9743: LD_INT 108
9745: PPUSH
9746: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9750: LD_INT 35
9752: PPUSH
9753: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9757: LD_INT 22
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 91
9779: PUSH
9780: LD_INT 71
9782: PUSH
9783: LD_INT 8
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: IFFALSE 9750
// InGameOn ;
9802: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 91
9833: PUSH
9834: LD_INT 71
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: ST_TO_ADDR
// if belkovTeam < 3 then
9855: LD_EXP 45
9859: PUSH
9860: LD_INT 3
9862: LESS
9863: IFFALSE 9948
// begin for i := belkovTeam to 3 do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_EXP 45
9875: DEC
9876: ST_TO_ADDR
9877: LD_INT 3
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9946
// begin un := kirovBaseSquad [ 1 ] ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_EXP 43
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9897: LD_ADDR_EXP 43
9901: PUSH
9902: LD_EXP 43
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 3
9914: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9915: LD_ADDR_EXP 45
9919: PUSH
9920: LD_EXP 45
9924: PPUSH
9925: LD_EXP 45
9929: PUSH
9930: LD_INT 1
9932: PLUS
9933: PPUSH
9934: LD_VAR 0 4
9938: PPUSH
9939: CALL_OW 1
9943: ST_TO_ADDR
// end ;
9944: GO 9880
9946: POP
9947: POP
// end ; if Kirilenkova then
9948: LD_EXP 37
9952: IFFALSE 9976
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9954: LD_ADDR_EXP 45
9958: PUSH
9959: LD_EXP 45
9963: PPUSH
9964: LD_EXP 37
9968: PPUSH
9969: CALL 54328 0 2
9973: ST_TO_ADDR
9974: GO 10015
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9976: LD_ADDR_EXP 45
9980: PUSH
9981: LD_EXP 45
9985: PPUSH
9986: LD_EXP 43
9990: PPUSH
9991: LD_INT 25
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 72
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: CALL 54328 0 2
10014: ST_TO_ADDR
// ComExit ( Kurin ) ;
10015: LD_EXP 38
10019: PPUSH
10020: CALL 54726 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10024: LD_EXP 38
10028: PPUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_INT 1
10036: ARRAY
10037: PPUSH
10038: CALL_OW 179
// wait ( 0 0$1 ) ;
10042: LD_INT 35
10044: PPUSH
10045: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10049: LD_VAR 0 2
10053: PUSH
10054: LD_INT 1
10056: ARRAY
10057: PPUSH
10058: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PPUSH
10076: CALL_OW 311
10080: ST_TO_ADDR
// ComExit ( un ) ;
10081: LD_VAR 0 4
10085: PPUSH
10086: CALL 54726 0 1
// wait ( 0 0$1 ) ;
10090: LD_INT 35
10092: PPUSH
10093: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_EXP 38
10106: PPUSH
10107: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10111: LD_EXP 36
10115: PPUSH
10116: LD_VAR 0 2
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10129: LD_INT 10
10131: PPUSH
10132: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10136: LD_EXP 38
10140: PPUSH
10141: LD_STRING D10-Kur-1
10143: PPUSH
10144: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10148: LD_EXP 36
10152: PPUSH
10153: LD_INT 122
10155: PPUSH
10156: LD_INT 112
10158: PPUSH
10159: CALL_OW 176
// wait ( 0 0$2 ) ;
10163: LD_INT 70
10165: PPUSH
10166: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10170: LD_EXP 36
10174: PPUSH
10175: LD_STRING D10-Bel-1
10177: PPUSH
10178: CALL_OW 88
// if belkovBrother then
10182: LD_EXP 32
10186: IFFALSE 10238
// begin Say ( Burlak , D10-Bur-1 ) ;
10188: LD_EXP 34
10192: PPUSH
10193: LD_STRING D10-Bur-1
10195: PPUSH
10196: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10200: LD_EXP 36
10204: PPUSH
10205: LD_STRING D10-Bel-2
10207: PPUSH
10208: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10212: LD_EXP 34
10216: PPUSH
10217: LD_STRING D10-Bur-2
10219: PPUSH
10220: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10224: LD_EXP 38
10228: PPUSH
10229: LD_STRING D10-Kur-2a
10231: PPUSH
10232: CALL_OW 88
// end else
10236: GO 10250
// begin Say ( Kurin , D10-Kur-2 ) end ;
10238: LD_EXP 38
10242: PPUSH
10243: LD_STRING D10-Kur-2
10245: PPUSH
10246: CALL_OW 88
// wait ( 0 0$2 ) ;
10250: LD_INT 70
10252: PPUSH
10253: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10257: LD_EXP 38
10261: PPUSH
10262: LD_STRING D10-Kur-2b
10264: PPUSH
10265: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10269: LD_VAR 0 4
10273: PPUSH
10274: LD_INT 66
10276: PPUSH
10277: LD_INT 97
10279: PPUSH
10280: CALL_OW 111
// wait ( 0 0$5 ) ;
10284: LD_INT 175
10286: PPUSH
10287: CALL_OW 67
// InGameOff ;
10291: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10295: LD_EXP 33
10299: PPUSH
10300: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10304: LD_STRING M4
10306: PPUSH
10307: CALL_OW 337
// wait ( 0 0$6 ) ;
10311: LD_INT 210
10313: PPUSH
10314: CALL_OW 67
// kurinDontWannaTalk := true ;
10318: LD_ADDR_EXP 5
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10326: LD_INT 140
10328: PPUSH
10329: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10340: LD_EXP 34
10344: PPUSH
10345: CALL_OW 310
10349: PUSH
10350: LD_EXP 34
10354: PPUSH
10355: LD_INT 106
10357: PPUSH
10358: CALL_OW 296
10362: PUSH
10363: LD_INT 12
10365: LESS
10366: OR
10367: IFFALSE 10333
// DialogueOn ;
10369: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10373: LD_EXP 40
10377: PPUSH
10378: LD_STRING D11-Pla-1
10380: PPUSH
10381: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10385: LD_EXP 34
10389: PPUSH
10390: LD_STRING D11-Bur-1
10392: PPUSH
10393: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 69
10425: PUSH
10426: LD_INT 1
10428: GREATER
10429: IFFALSE 10443
// Say ( Burlak , D11-Bur-1a ) ;
10431: LD_EXP 34
10435: PPUSH
10436: LD_STRING D11-Bur-1a
10438: PPUSH
10439: CALL_OW 88
// DialogueOff ;
10443: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10447: LD_ADDR_EXP 8
10451: PUSH
10452: LD_INT 160
10454: PUSH
10455: LD_INT 150
10457: PUSH
10458: LD_INT 140
10460: PUSH
10461: LD_INT 120
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_OWVAR 67
10474: ARRAY
10475: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10476: LD_STRING M5
10478: PPUSH
10479: CALL_OW 337
// kirovHasTank := true ;
10483: LD_ADDR_EXP 6
10487: PUSH
10488: LD_INT 1
10490: ST_TO_ADDR
// hasToBuildTank := true ;
10491: LD_ADDR_EXP 11
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// end ;
10499: PPOPN 4
10501: END
// every 0 0$2 trigger allianceAttacked do
10502: LD_EXP 13
10506: IFFALSE 10545
10508: GO 10510
10510: DISABLE
// begin DialogueOn ;
10511: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10515: LD_EXP 38
10519: PPUSH
10520: LD_STRING DArestKur
10522: PPUSH
10523: CALL_OW 88
// dwait ( 0 0$1 ) ;
10527: LD_INT 35
10529: PPUSH
10530: CALL_OW 68
// YouLost ( SelfAttack ) ;
10534: LD_STRING SelfAttack
10536: PPUSH
10537: CALL_OW 104
// DialogueOff ;
10541: CALL_OW 7
// end ;
10545: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10546: LD_INT 22
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 21
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PPUSH
10570: CALL_OW 69
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_INT 3
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PPUSH
10599: CALL_OW 69
10603: GREATEREQUAL
10604: PUSH
10605: LD_EXP 6
10609: AND
10610: IFFALSE 10780
10612: GO 10614
10614: DISABLE
// begin hasToBuildTank := false ;
10615: LD_ADDR_EXP 11
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// blockNorth := false ;
10623: LD_ADDR_EXP 7
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// InGameOn ;
10631: CALL_OW 8
// wait ( 0 0$2 ) ;
10635: LD_INT 70
10637: PPUSH
10638: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10642: LD_INT 106
10644: PPUSH
10645: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10649: LD_EXP 40
10653: PPUSH
10654: LD_INT 65
10656: PPUSH
10657: LD_INT 97
10659: PPUSH
10660: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10664: LD_EXP 40
10668: PPUSH
10669: LD_EXP 34
10673: PPUSH
10674: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10678: LD_EXP 34
10682: PPUSH
10683: LD_STRING D12-Bur-1
10685: PPUSH
10686: CALL_OW 88
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10697: LD_EXP 40
10701: PPUSH
10702: LD_STRING D12-Pla-1
10704: PPUSH
10705: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10709: LD_EXP 34
10713: PPUSH
10714: LD_STRING D12-Bur-2
10716: PPUSH
10717: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10721: LD_EXP 40
10725: PPUSH
10726: LD_STRING D12-Pla-2
10728: PPUSH
10729: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10733: LD_EXP 34
10737: PPUSH
10738: LD_STRING D12-Bur-3
10740: PPUSH
10741: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10745: LD_EXP 40
10749: PPUSH
10750: LD_STRING D12-Pla-3
10752: PPUSH
10753: CALL_OW 88
// hasAllTanks := true ;
10757: LD_ADDR_EXP 14
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// InGameOff ;
10765: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10769: LD_STRING M6
10771: PPUSH
10772: CALL_OW 337
// PrepareAmerican ;
10776: CALL 3956 0 0
// end ;
10780: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10781: LD_EXP 17
10785: IFFALSE 12549
10787: GO 10789
10789: DISABLE
10790: LD_INT 0
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
// begin PrepareAmericanTrap ;
10799: CALL 4756 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_EXP 48
10812: PPUSH
10813: LD_INT 26
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 72
10827: PUSH
10828: LD_INT 1
10830: ARRAY
10831: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10832: LD_INT 22
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: LD_INT 21
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 60
10861: PUSH
10862: EMPTY
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 69
10874: PPUSH
10875: CALL_OW 141
// InGameOn ;
10879: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10883: LD_INT 69
10885: PPUSH
10886: LD_INT 22
10888: PPUSH
10889: CALL_OW 86
// wait ( 0 0$1 ) ;
10893: LD_INT 35
10895: PPUSH
10896: CALL_OW 67
// DialogueOn ;
10900: CALL_OW 6
// game_speed := 4 ;
10904: LD_ADDR_OWVAR 65
10908: PUSH
10909: LD_INT 4
10911: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10912: LD_VAR 0 2
10916: PPUSH
10917: LD_STRING D13-Sol1-1
10919: PPUSH
10920: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10924: LD_EXP 36
10928: PPUSH
10929: LD_STRING D13-Bel-1
10931: PPUSH
10932: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10936: LD_EXP 38
10940: PPUSH
10941: LD_STRING D13-Kur-1
10943: PPUSH
10944: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10948: LD_INT 10
10950: PPUSH
10951: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10955: LD_EXP 36
10959: PPUSH
10960: LD_STRING D13-Bel-2
10962: PPUSH
10963: CALL_OW 94
// DialogueOff ;
10967: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10971: LD_EXP 36
10975: PPUSH
10976: LD_INT 76
10978: PPUSH
10979: LD_INT 20
10981: PPUSH
10982: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10986: LD_EXP 45
10990: PPUSH
10991: LD_INT 72
10993: PPUSH
10994: LD_INT 20
10996: PPUSH
10997: CALL_OW 111
// wait ( 0 0$2 ) ;
11001: LD_INT 70
11003: PPUSH
11004: CALL_OW 67
// for i in usTrapForces do
11008: LD_ADDR_VAR 0 1
11012: PUSH
11013: LD_EXP 48
11017: PUSH
11018: FOR_IN
11019: IFFALSE 11052
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11021: LD_VAR 0 1
11025: PPUSH
11026: LD_INT 7
11028: PPUSH
11029: LD_INT 0
11031: PPUSH
11032: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_EXP 36
11045: PPUSH
11046: CALL_OW 119
// end ;
11050: GO 11018
11052: POP
11053: POP
// wait ( 0 0$0.3 ) ;
11054: LD_INT 10
11056: PPUSH
11057: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11061: LD_EXP 48
11065: PPUSH
11066: LD_INT 65
11068: PPUSH
11069: LD_INT 18
11071: PPUSH
11072: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11076: LD_INT 70
11078: PPUSH
11079: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11083: LD_EXP 48
11087: PPUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 3
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 72
11102: PUSH
11103: LD_INT 3
11105: GREATER
11106: IFFALSE 11076
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11108: LD_INT 65
11110: PPUSH
11111: LD_INT 18
11113: PPUSH
11114: LD_INT 3
11116: PPUSH
11117: LD_INT 26
11119: NEG
11120: PPUSH
11121: CALL_OW 330
// DialogueOn ;
11125: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11129: LD_VAR 0 2
11133: PPUSH
11134: LD_STRING D14-Sol1-1
11136: PPUSH
11137: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11141: LD_EXP 36
11145: PPUSH
11146: LD_STRING D14-Bel-1
11148: PPUSH
11149: CALL_OW 88
// DialogueOff ;
11153: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11157: LD_INT 65
11159: PPUSH
11160: LD_INT 18
11162: PPUSH
11163: LD_INT 3
11165: PPUSH
11166: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11170: LD_EXP 45
11174: PPUSH
11175: LD_INT 31
11177: PPUSH
11178: LD_INT 9
11180: PPUSH
11181: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11185: LD_EXP 48
11189: PPUSH
11190: LD_INT 50
11192: PPUSH
11193: LD_INT 16
11195: PPUSH
11196: CALL_OW 174
// wait ( 0 0$2 ) ;
11200: LD_INT 70
11202: PPUSH
11203: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11207: LD_ADDR_VAR 0 6
11211: PUSH
11212: LD_EXP 36
11216: PPUSH
11217: CALL_OW 310
11221: ST_TO_ADDR
// if not belkovTank then
11222: LD_VAR 0 6
11226: NOT
11227: IFFALSE 11267
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11229: LD_ADDR_VAR 0 6
11233: PUSH
11234: LD_INT 22
11236: PUSH
11237: LD_INT 6
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PPUSH
11258: CALL_OW 69
11262: PUSH
11263: LD_INT 1
11265: ARRAY
11266: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11267: LD_EXP 36
11271: PPUSH
11272: LD_INT 58
11274: PPUSH
11275: LD_INT 21
11277: PPUSH
11278: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11282: LD_EXP 36
11286: PPUSH
11287: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11291: LD_EXP 36
11295: PPUSH
11296: LD_INT 53
11298: PPUSH
11299: LD_INT 18
11301: PPUSH
11302: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11306: LD_EXP 36
11310: PPUSH
11311: LD_INT 31
11313: PPUSH
11314: LD_INT 9
11316: PPUSH
11317: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11321: LD_INT 35
11323: PPUSH
11324: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11328: LD_ADDR_VAR 0 1
11332: PUSH
11333: LD_EXP 36
11337: PUSH
11338: LD_EXP 45
11342: UNION
11343: PUSH
11344: LD_VAR 0 6
11348: UNION
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11382
// if GetLives ( i ) < 800 then
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 256
11362: PUSH
11363: LD_INT 800
11365: LESS
11366: IFFALSE 11380
// SetLives ( i , 800 ) ;
11368: LD_VAR 0 1
11372: PPUSH
11373: LD_INT 800
11375: PPUSH
11376: CALL_OW 234
11380: GO 11350
11382: POP
11383: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11384: LD_EXP 36
11388: PPUSH
11389: LD_INT 31
11391: PPUSH
11392: LD_INT 9
11394: PPUSH
11395: CALL_OW 297
11399: PUSH
11400: LD_INT 4
11402: LESS
11403: IFFALSE 11321
// for i := 1 to Difficulty do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: DOUBLE
11411: LD_INT 1
11413: DEC
11414: ST_TO_ADDR
11415: LD_OWVAR 67
11419: PUSH
11420: FOR_TO
11421: IFFALSE 11463
// if i <= belkovTeam then
11423: LD_VAR 0 1
11427: PUSH
11428: LD_EXP 45
11432: LESSEQUAL
11433: IFFALSE 11461
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11435: LD_EXP 45
11439: PUSH
11440: LD_VAR 0 1
11444: ARRAY
11445: PPUSH
11446: LD_INT 600
11448: PPUSH
11449: LD_INT 800
11451: PPUSH
11452: CALL_OW 12
11456: PPUSH
11457: CALL_OW 234
11461: GO 11420
11463: POP
11464: POP
// SetLives ( Belkov , 820 ) ;
11465: LD_EXP 36
11469: PPUSH
11470: LD_INT 820
11472: PPUSH
11473: CALL_OW 234
// InGameOff ;
11477: CALL_OW 9
// DialogueOn ;
11481: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11485: LD_EXP 36
11489: PPUSH
11490: LD_STRING D14-Bel-1a
11492: PPUSH
11493: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11497: LD_EXP 38
11501: PPUSH
11502: LD_STRING D14-Kur-1
11504: PPUSH
11505: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_STRING D14-Bel-2
11516: PPUSH
11517: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11521: LD_EXP 38
11525: PPUSH
11526: LD_STRING D14-Kur-2
11528: PPUSH
11529: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11533: LD_EXP 34
11537: PPUSH
11538: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11542: LD_EXP 34
11546: PPUSH
11547: LD_STRING D14a-Bur-1
11549: PPUSH
11550: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11554: LD_EXP 40
11558: PPUSH
11559: LD_STRING D14a-Pla-1
11561: PPUSH
11562: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11566: LD_EXP 34
11570: PPUSH
11571: LD_STRING D14a-Bur-2
11573: PPUSH
11574: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11578: LD_EXP 40
11582: PPUSH
11583: LD_STRING D14a-Pla-2
11585: PPUSH
11586: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11590: LD_EXP 34
11594: PPUSH
11595: LD_STRING D14a-Bur-3
11597: PPUSH
11598: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11602: LD_EXP 40
11606: PPUSH
11607: LD_STRING D14a-Pla-3
11609: PPUSH
11610: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11614: LD_EXP 34
11618: PPUSH
11619: LD_STRING D14a-Bur-4
11621: PPUSH
11622: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11626: LD_EXP 40
11630: PPUSH
11631: LD_STRING D14a-Pla-4
11633: PPUSH
11634: CALL_OW 88
// DialogueOff ;
11638: CALL_OW 7
// belkovTrapped := true ;
11642: LD_ADDR_EXP 18
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11650: LD_EXP 48
11654: PPUSH
11655: LD_INT 68
11657: PPUSH
11658: LD_INT 16
11660: PPUSH
11661: CALL_OW 111
// if belkovTank then
11665: LD_VAR 0 6
11669: IFFALSE 11708
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11671: LD_EXP 48
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: LD_VAR 0 6
11684: PPUSH
11685: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11689: LD_EXP 48
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_INT 69
11700: PPUSH
11701: LD_INT 20
11703: PPUSH
11704: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11708: LD_EXP 36
11712: PPUSH
11713: LD_INT 40
11715: PPUSH
11716: LD_INT 17
11718: PPUSH
11719: CALL_OW 111
// AddComHold ( Belkov ) ;
11723: LD_EXP 36
11727: PPUSH
11728: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 44
11739: PUSH
11740: LD_INT 18
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 42
11749: PUSH
11750: LD_INT 16
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 40
11759: PUSH
11760: LD_INT 15
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 44
11769: PUSH
11770: LD_INT 20
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 42
11779: PUSH
11780: LD_INT 20
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 42
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 42
11799: PUSH
11800: LD_INT 8
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: LD_EXP 45
11825: PPUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11908
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11844: LD_VAR 0 1
11848: PPUSH
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 1
11856: ARRAY
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PUSH
11871: LD_INT 2
11873: ARRAY
11874: PPUSH
11875: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 3
11896: ST_TO_ADDR
// AddComCrawl ( i ) ;
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 197
// end ;
11906: GO 11841
11908: POP
11909: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11910: LD_EXP 45
11914: PPUSH
11915: LD_INT 25
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 72
11929: IFFALSE 11961
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11931: LD_EXP 45
11935: PPUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 4
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 72
11950: PPUSH
11951: LD_INT 38
11953: PPUSH
11954: LD_INT 18
11956: PPUSH
11957: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11961: LD_ADDR_VAR 0 7
11965: PUSH
11966: LD_INT 9450
11968: PUSH
11969: LD_INT 8400
11971: PUSH
11972: LD_INT 6650
11974: PUSH
11975: LD_INT 5250
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: LD_OWVAR 67
11988: ARRAY
11989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11990: LD_INT 35
11992: PPUSH
11993: CALL_OW 67
// timer := timer - 0 0$1 ;
11997: LD_ADDR_VAR 0 7
12001: PUSH
12002: LD_VAR 0 7
12006: PUSH
12007: LD_INT 35
12009: MINUS
12010: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12011: LD_INT 19
12013: PPUSH
12014: LD_INT 22
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 70
12028: IFFALSE 12038
// timer := 0 0$0 ;
12030: LD_ADDR_VAR 0 7
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// until timer <= 0 ;
12038: LD_VAR 0 7
12042: PUSH
12043: LD_INT 0
12045: LESSEQUAL
12046: IFFALSE 11990
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12048: LD_EXP 48
12052: PPUSH
12053: LD_INT 50
12055: PUSH
12056: EMPTY
12057: LIST
12058: PPUSH
12059: CALL_OW 72
12063: NOT
12064: IFFALSE 12068
// exit ;
12066: GO 12549
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_EXP 48
12077: PPUSH
12078: LD_INT 25
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: LD_INT 54
12093: PUSH
12094: EMPTY
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12110: LD_ADDR_VAR 0 5
12114: PUSH
12115: LD_EXP 48
12119: PPUSH
12120: LD_INT 25
12122: PUSH
12123: LD_INT 4
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: LD_INT 54
12135: PUSH
12136: EMPTY
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// for i in sol do
12152: LD_ADDR_VAR 0 1
12156: PUSH
12157: LD_VAR 0 4
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12179
// SetTag ( i , 0 ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 0
12172: PPUSH
12173: CALL_OW 109
12177: GO 12162
12179: POP
12180: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12181: LD_VAR 0 5
12185: PPUSH
12186: LD_INT 60
12188: PPUSH
12189: LD_INT 8
12191: PPUSH
12192: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12196: LD_INT 22
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 21
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: IFFALSE 12265
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12226: LD_INT 22
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 21
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: PPUSH
12255: LD_INT 53
12257: PPUSH
12258: LD_INT 24
12260: PPUSH
12261: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12265: LD_INT 18
12267: PPUSH
12268: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12272: LD_ADDR_VAR 0 4
12276: PUSH
12277: LD_EXP 48
12281: PPUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 50
12294: PUSH
12295: EMPTY
12296: LIST
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: LD_INT 54
12303: PUSH
12304: EMPTY
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 72
12320: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12321: LD_VAR 0 4
12325: PPUSH
12326: LD_INT 0
12328: PPUSH
12329: CALL 51902 0 2
12333: PUSH
12334: LD_VAR 0 4
12338: EQUAL
12339: IFFALSE 12378
// begin wait ( 0 0$3 ) ;
12341: LD_INT 105
12343: PPUSH
12344: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12348: LD_VAR 0 4
12352: PPUSH
12353: LD_INT 41
12355: PPUSH
12356: LD_INT 18
12358: PPUSH
12359: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12363: LD_VAR 0 5
12367: PPUSH
12368: LD_INT 60
12370: PPUSH
12371: LD_INT 8
12373: PPUSH
12374: CALL_OW 111
// end ; for i in sol do
12378: LD_ADDR_VAR 0 1
12382: PUSH
12383: LD_VAR 0 4
12387: PUSH
12388: FOR_IN
12389: IFFALSE 12464
// if GetLives ( i ) < 800 then
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 256
12400: PUSH
12401: LD_INT 800
12403: LESS
12404: IFFALSE 12435
// begin SetTag ( i , 1 ) ;
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_INT 60
12425: PPUSH
12426: LD_INT 8
12428: PPUSH
12429: CALL_OW 111
// end else
12433: GO 12462
// if GetLives ( i ) = 1000 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 1000
12447: EQUAL
12448: IFFALSE 12462
// SetTag ( i , 0 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 0
12457: PPUSH
12458: CALL_OW 109
12462: GO 12388
12464: POP
12465: POP
// until belkovDied or not sol ;
12466: LD_EXP 19
12470: PUSH
12471: LD_VAR 0 4
12475: NOT
12476: OR
12477: IFFALSE 12265
// if not sol then
12479: LD_VAR 0 4
12483: NOT
12484: IFFALSE 12488
// exit ;
12486: GO 12549
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12488: LD_VAR 0 4
12492: PUSH
12493: LD_VAR 0 5
12497: ADD
12498: PPUSH
12499: LD_INT 56
12501: PPUSH
12502: LD_INT 25
12504: PPUSH
12505: CALL_OW 111
// wait ( 0 0$30 ) ;
12509: LD_INT 1050
12511: PPUSH
12512: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12516: LD_EXP 48
12520: PPUSH
12521: LD_INT 66
12523: PPUSH
12524: LD_INT 96
12526: PPUSH
12527: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12531: LD_VAR 0 5
12535: PPUSH
12536: LD_VAR 0 4
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: CALL_OW 112
// end ;
12549: PPOPN 7
12551: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12552: LD_EXP 18
12556: PUSH
12557: LD_EXP 19
12561: NOT
12562: AND
12563: PUSH
12564: LD_INT 9
12566: PPUSH
12567: LD_INT 22
12569: PUSH
12570: LD_INT 3
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 70
12581: AND
12582: IFFALSE 12902
12584: GO 12586
12586: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12587: LD_STRING QAttackAm
12589: PPUSH
12590: CALL_OW 97
12594: PUSH
12595: LD_INT 1
12597: DOUBLE
12598: EQUAL
12599: IFTRUE 12603
12601: GO 12670
12603: POP
// begin initiative := true ;
12604: LD_ADDR_EXP 31
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// DialogueOn ;
12612: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12616: LD_EXP 34
12620: PPUSH
12621: LD_STRING D17-Bur-1
12623: PPUSH
12624: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12628: LD_EXP 40
12632: PPUSH
12633: LD_STRING D17-Pla-1
12635: PPUSH
12636: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12640: LD_EXP 34
12644: PPUSH
12645: LD_STRING D17-Bur-2
12647: PPUSH
12648: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12652: LD_EXP 40
12656: PPUSH
12657: LD_STRING D17-Pla-2
12659: PPUSH
12660: CALL_OW 94
// DialogueOff ;
12664: CALL_OW 7
// end ; 2 :
12668: GO 12832
12670: LD_INT 2
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12770
12678: POP
// begin initiative := true ;
12679: LD_ADDR_EXP 31
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// DialogueOn ;
12687: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12691: LD_EXP 34
12695: PPUSH
12696: LD_STRING D18-Bur-1
12698: PPUSH
12699: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12703: LD_EXP 40
12707: PPUSH
12708: LD_STRING D18-Pla-1
12710: PPUSH
12711: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12715: LD_EXP 34
12719: PPUSH
12720: LD_STRING D18-Bur-2
12722: PPUSH
12723: CALL_OW 88
// if not reinforcementsGained then
12727: LD_EXP 25
12731: NOT
12732: IFFALSE 12752
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12734: LD_EXP 40
12738: PPUSH
12739: LD_STRING D18-Pla-2
12741: PPUSH
12742: CALL_OW 94
// SendReinforcements ;
12746: CALL 3297 0 0
// end else
12750: GO 12764
// SayRadio ( Platonov , D22-Pla-1b ) ;
12752: LD_EXP 40
12756: PPUSH
12757: LD_STRING D22-Pla-1b
12759: PPUSH
12760: CALL_OW 94
// DialogueOff ;
12764: CALL_OW 7
// end ; 3 :
12768: GO 12832
12770: LD_INT 3
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12831
12778: POP
// begin if IsOk ( Gnyevko ) then
12779: LD_EXP 35
12783: PPUSH
12784: CALL_OW 302
12788: IFFALSE 12804
// Say ( Gnyevko , D19A-Gny-1 ) else
12790: LD_EXP 35
12794: PPUSH
12795: LD_STRING D19A-Gny-1
12797: PPUSH
12798: CALL_OW 88
12802: GO 12827
// if IsOk ( Kovalyuk ) then
12804: LD_EXP 39
12808: PPUSH
12809: CALL_OW 302
12813: IFFALSE 12827
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12815: LD_EXP 39
12819: PPUSH
12820: LD_STRING D19A-Kov-1
12822: PPUSH
12823: CALL_OW 88
// exit ;
12827: GO 12902
// end ; end ;
12829: GO 12832
12831: POP
// if IsOk ( Gnyevko ) then
12832: LD_EXP 35
12836: PPUSH
12837: CALL_OW 302
12841: IFFALSE 12867
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12843: LD_EXP 35
12847: PPUSH
12848: LD_STRING D19-Gny-1
12850: PPUSH
12851: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12855: LD_EXP 34
12859: PPUSH
12860: LD_STRING D19-Bur-1
12862: PPUSH
12863: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12867: LD_EXP 39
12871: PPUSH
12872: CALL_OW 302
12876: IFFALSE 12902
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12878: LD_EXP 39
12882: PPUSH
12883: LD_STRING D19-Kov-1
12885: PPUSH
12886: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12890: LD_EXP 34
12894: PPUSH
12895: LD_STRING D19-Bur-2
12897: PPUSH
12898: CALL_OW 88
// end ; end ;
12902: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12903: LD_EXP 18
12907: PUSH
12908: LD_EXP 19
12912: NOT
12913: AND
12914: PUSH
12915: LD_INT 16
12917: PPUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 3
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 70
12932: AND
12933: IFFALSE 13161
12935: GO 12937
12937: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12938: LD_STRING QAttackBw
12940: PPUSH
12941: CALL_OW 97
12945: PUSH
12946: LD_INT 1
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12997
12954: POP
// begin initiative := true ;
12955: LD_ADDR_EXP 31
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// DialogueOn ;
12963: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12967: LD_EXP 34
12971: PPUSH
12972: LD_STRING D21-Bur-1
12974: PPUSH
12975: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12979: LD_EXP 40
12983: PPUSH
12984: LD_STRING D21-Pla-1
12986: PPUSH
12987: CALL_OW 94
// DialogueOff ;
12991: CALL_OW 7
// end ; 2 :
12995: GO 13112
12997: LD_INT 2
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13100
13005: POP
// begin initiative := true ;
13006: LD_ADDR_EXP 31
13010: PUSH
13011: LD_INT 1
13013: ST_TO_ADDR
// DialogueOn ;
13014: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13018: LD_EXP 34
13022: PPUSH
13023: LD_STRING D22-Bur-1
13025: PPUSH
13026: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13030: LD_EXP 25
13034: NOT
13035: PUSH
13036: LD_EXP 22
13040: AND
13041: IFFALSE 13061
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13043: LD_EXP 40
13047: PPUSH
13048: LD_STRING D22-Pla-1
13050: PPUSH
13051: CALL_OW 94
// SendReinforcements ;
13055: CALL 3297 0 0
// end else
13059: GO 13094
// if not westOutpostDestroyed then
13061: LD_EXP 22
13065: NOT
13066: IFFALSE 13082
// SayRadio ( Platonov , D22-Pla-1a ) else
13068: LD_EXP 40
13072: PPUSH
13073: LD_STRING D22-Pla-1a
13075: PPUSH
13076: CALL_OW 94
13080: GO 13094
// SayRadio ( Platonov , D22-Pla-1b ) ;
13082: LD_EXP 40
13086: PPUSH
13087: LD_STRING D22-Pla-1b
13089: PPUSH
13090: CALL_OW 94
// DialogueOff ;
13094: CALL_OW 7
// end ; 3 :
13098: GO 13112
13100: LD_INT 3
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13111
13108: POP
// begin end ; end ;
13109: GO 13112
13111: POP
// ChangeMissionObjectives ( M9 ) ;
13112: LD_STRING M9
13114: PPUSH
13115: CALL_OW 337
// wait ( 0 0$1 ) ;
13119: LD_INT 35
13121: PPUSH
13122: CALL_OW 67
// if IsOk ( Gnyevko ) then
13126: LD_EXP 35
13130: PPUSH
13131: CALL_OW 302
13135: IFFALSE 13161
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13137: LD_EXP 35
13141: PPUSH
13142: LD_STRING D23-Gny-1
13144: PPUSH
13145: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13149: LD_EXP 34
13153: PPUSH
13154: LD_STRING D23-Bur-1
13156: PPUSH
13157: CALL_OW 88
// end ; end ;
13161: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13162: LD_EXP 18
13166: PUSH
13167: LD_EXP 19
13171: AND
13172: PUSH
13173: LD_EXP 28
13177: NOT
13178: AND
13179: PUSH
13180: LD_EXP 45
13184: PPUSH
13185: LD_INT 91
13187: PUSH
13188: LD_EXP 34
13192: PUSH
13193: LD_INT 8
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 72
13205: AND
13206: IFFALSE 13250
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
// begin for i in belkovTeam do
13214: LD_ADDR_VAR 0 1
13218: PUSH
13219: LD_EXP 45
13223: PUSH
13224: FOR_IN
13225: IFFALSE 13241
// SetSide ( i , 3 ) ;
13227: LD_VAR 0 1
13231: PPUSH
13232: LD_INT 3
13234: PPUSH
13235: CALL_OW 235
13239: GO 13224
13241: POP
13242: POP
// ChangeMissionObjectives ( M9a ) ;
13243: LD_STRING M9a
13245: PPUSH
13246: CALL_OW 337
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13253: LD_EXP 34
13257: PPUSH
13258: LD_EXP 36
13262: PPUSH
13263: CALL_OW 296
13267: PUSH
13268: LD_INT 6
13270: LESS
13271: PUSH
13272: LD_EXP 18
13276: AND
13277: PUSH
13278: LD_EXP 36
13282: PPUSH
13283: CALL_OW 302
13287: AND
13288: PUSH
13289: LD_INT 3
13291: PPUSH
13292: CALL_OW 463
13296: NOT
13297: AND
13298: IFFALSE 13613
13300: GO 13302
13302: DISABLE
13303: LD_INT 0
13305: PPUSH
13306: PPUSH
// begin InGameOn ;
13307: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13311: LD_EXP 34
13315: PPUSH
13316: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13320: LD_EXP 34
13324: PPUSH
13325: LD_INT 37
13327: PPUSH
13328: LD_INT 17
13330: PPUSH
13331: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13335: LD_EXP 34
13339: PPUSH
13340: LD_EXP 36
13344: PPUSH
13345: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13349: LD_EXP 36
13353: PPUSH
13354: LD_EXP 34
13358: PPUSH
13359: CALL_OW 119
// p := 0 ;
13363: LD_ADDR_VAR 0 2
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13371: LD_INT 35
13373: PPUSH
13374: CALL_OW 67
// p := p + 1 ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_VAR 0 2
13387: PUSH
13388: LD_INT 1
13390: PLUS
13391: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13392: LD_EXP 34
13396: PPUSH
13397: LD_EXP 36
13401: PPUSH
13402: CALL_OW 296
13406: PUSH
13407: LD_INT 4
13409: LESS
13410: PUSH
13411: LD_VAR 0 2
13415: PUSH
13416: LD_INT 6
13418: GREATER
13419: OR
13420: IFFALSE 13371
// ComTurnUnit ( Burlak , Belkov ) ;
13422: LD_EXP 34
13426: PPUSH
13427: LD_EXP 36
13431: PPUSH
13432: CALL_OW 119
// DialogueOn ;
13436: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13440: LD_EXP 36
13444: PPUSH
13445: LD_STRING D24-Bel-1
13447: PPUSH
13448: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13452: LD_EXP 34
13456: PPUSH
13457: LD_STRING D24-Bur-1
13459: PPUSH
13460: CALL_OW 88
// if belkovBrother then
13464: LD_EXP 32
13468: IFFALSE 13482
// Say ( Burlak , D24-Bur-1a ) ;
13470: LD_EXP 34
13474: PPUSH
13475: LD_STRING D24-Bur-1a
13477: PPUSH
13478: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13482: LD_EXP 36
13486: PPUSH
13487: LD_STRING D24-Bel-2
13489: PPUSH
13490: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13494: LD_EXP 34
13498: PPUSH
13499: LD_STRING D24-Bur-2
13501: PPUSH
13502: CALL_OW 88
// if vehCaptured then
13506: LD_EXP 16
13510: IFFALSE 13524
// Say ( Burlak , D24-Bur-2a ) ;
13512: LD_EXP 34
13516: PPUSH
13517: LD_STRING D24-Bur-2a
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13524: LD_EXP 40
13528: PPUSH
13529: LD_STRING D24-Pla-2
13531: PPUSH
13532: CALL_OW 94
// if not westOutpostDestroyed then
13536: LD_EXP 22
13540: NOT
13541: IFFALSE 13555
// SayRadio ( Platonov , D24-Pla-2a ) ;
13543: LD_EXP 40
13547: PPUSH
13548: LD_STRING D24-Pla-2a
13550: PPUSH
13551: CALL_OW 94
// DialogueOff ;
13555: CALL_OW 7
// InGameOff ;
13559: CALL_OW 9
// belkovSaved := true ;
13563: LD_ADDR_EXP 28
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_EXP 45
13580: PUSH
13581: LD_EXP 36
13585: UNION
13586: PUSH
13587: FOR_IN
13588: IFFALSE 13604
// SetSide ( i , 3 ) ;
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_INT 3
13597: PPUSH
13598: CALL_OW 235
13602: GO 13587
13604: POP
13605: POP
// ChangeMissionObjectives ( M9a ) ;
13606: LD_STRING M9a
13608: PPUSH
13609: CALL_OW 337
// end ;
13613: PPOPN 2
13615: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13616: LD_INT 3
13618: PPUSH
13619: LD_INT 22
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 95
13631: PUSH
13632: LD_INT 8
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PPUSH
13648: CALL 57605 0 2
13652: IFFALSE 13837
13654: GO 13656
13656: DISABLE
// begin DialogueOn ;
13657: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13661: LD_INT 49
13663: PPUSH
13664: LD_INT 57
13666: PPUSH
13667: LD_INT 3
13669: PPUSH
13670: LD_INT 12
13672: NEG
13673: PPUSH
13674: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13678: LD_INT 49
13680: PPUSH
13681: LD_INT 57
13683: PPUSH
13684: LD_INT 3
13686: PPUSH
13687: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13691: LD_INT 49
13693: PPUSH
13694: LD_INT 57
13696: PPUSH
13697: CALL_OW 84
// if not eastOutpostDiscovered then
13701: LD_EXP 21
13705: NOT
13706: IFFALSE 13746
// begin Say ( Burlak , D15-Bur-1 ) ;
13708: LD_EXP 34
13712: PPUSH
13713: LD_STRING D15-Bur-1
13715: PPUSH
13716: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13720: LD_EXP 35
13724: PPUSH
13725: LD_STRING D15-Gny-1
13727: PPUSH
13728: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13732: LD_EXP 39
13736: PPUSH
13737: LD_STRING D15-Kov-1
13739: PPUSH
13740: CALL_OW 88
// end else
13744: GO 13782
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13746: LD_EXP 39
13750: PPUSH
13751: LD_STRING D16-Kov-1
13753: PPUSH
13754: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13758: LD_EXP 34
13762: PPUSH
13763: LD_STRING D16-Bur-1
13765: PPUSH
13766: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13770: LD_EXP 35
13774: PPUSH
13775: LD_STRING D16-Gny-1
13777: PPUSH
13778: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13782: LD_EXP 34
13786: PPUSH
13787: LD_STRING D15-Bur-2
13789: PPUSH
13790: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13794: LD_EXP 39
13798: PPUSH
13799: LD_STRING D15-Kov-2
13801: PPUSH
13802: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13806: LD_EXP 34
13810: PPUSH
13811: LD_STRING D15-Bur-3
13813: PPUSH
13814: CALL_OW 88
// DialogueOff ;
13818: CALL_OW 7
// westOutpostDiscovered := true ;
13822: LD_ADDR_EXP 20
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13830: LD_STRING M7
13832: PPUSH
13833: CALL_OW 337
// end ;
13837: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13838: LD_INT 3
13840: PPUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 95
13853: PUSH
13854: LD_INT 15
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL_OW 69
13869: PPUSH
13870: CALL 57605 0 2
13874: IFFALSE 14015
13876: GO 13878
13878: DISABLE
// begin DialogueOn ;
13879: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13883: LD_INT 95
13885: PPUSH
13886: LD_INT 65
13888: PPUSH
13889: LD_INT 3
13891: PPUSH
13892: LD_INT 12
13894: NEG
13895: PPUSH
13896: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13900: LD_INT 95
13902: PPUSH
13903: LD_INT 65
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13913: LD_INT 95
13915: PPUSH
13916: LD_INT 65
13918: PPUSH
13919: CALL_OW 84
// if westOutpostDiscovered then
13923: LD_EXP 20
13927: IFFALSE 13967
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13929: LD_EXP 39
13933: PPUSH
13934: LD_STRING D16-Kov-1
13936: PPUSH
13937: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13941: LD_EXP 34
13945: PPUSH
13946: LD_STRING D16-Bur-1
13948: PPUSH
13949: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13953: LD_EXP 35
13957: PPUSH
13958: LD_STRING D16-Gny-1
13960: PPUSH
13961: CALL_OW 88
// end else
13965: GO 14003
// begin Say ( Burlak , D15-Bur-1 ) ;
13967: LD_EXP 34
13971: PPUSH
13972: LD_STRING D15-Bur-1
13974: PPUSH
13975: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13979: LD_EXP 35
13983: PPUSH
13984: LD_STRING D15-Gny-1
13986: PPUSH
13987: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13991: LD_EXP 39
13995: PPUSH
13996: LD_STRING D15-Kov-1
13998: PPUSH
13999: CALL_OW 88
// end ; DialogueOff ;
14003: CALL_OW 7
// eastOutpostDiscovered := true ;
14007: LD_ADDR_EXP 21
14011: PUSH
14012: LD_INT 1
14014: ST_TO_ADDR
// end ;
14015: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 50
14031: PUSH
14032: EMPTY
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 70
14043: PUSH
14044: LD_INT 0
14046: EQUAL
14047: PUSH
14048: LD_EXP 20
14052: AND
14053: IFFALSE 14097
14055: GO 14057
14057: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14058: LD_EXP 34
14062: PPUSH
14063: LD_STRING D20-Bur-1
14065: PPUSH
14066: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14070: LD_EXP 40
14074: PPUSH
14075: LD_STRING D20-Pla-1
14077: PPUSH
14078: CALL_OW 94
// westOutpostDestroyed := true ;
14082: LD_ADDR_EXP 22
14086: PUSH
14087: LD_INT 1
14089: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14090: LD_STRING M8
14092: PPUSH
14093: CALL_OW 337
// end ;
14097: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14098: LD_INT 15
14100: PPUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 50
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 70
14125: PUSH
14126: LD_INT 0
14128: EQUAL
14129: PUSH
14130: LD_EXP 21
14134: AND
14135: IFFALSE 14265
14137: GO 14139
14139: DISABLE
14140: LD_INT 0
14142: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14143: LD_EXP 34
14147: PPUSH
14148: LD_STRING D20-Bur-1
14150: PPUSH
14151: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14155: LD_EXP 40
14159: PPUSH
14160: LD_STRING D20-Pla-1
14162: PPUSH
14163: CALL_OW 94
// eastOutpostDestroyed := true ;
14167: LD_ADDR_EXP 23
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14175: LD_INT 35
14177: PPUSH
14178: CALL_OW 67
// stop_talking := true ;
14182: LD_ADDR_OWVAR 56
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 23
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PUSH
14235: FOR_IN
14236: IFFALSE 14255
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14238: LD_VAR 0 1
14242: PPUSH
14243: LD_INT 1
14245: PPUSH
14246: LD_INT 1500
14248: PPUSH
14249: CALL_OW 591
14253: GO 14235
14255: POP
14256: POP
// stop_talking := false ;
14257: LD_ADDR_OWVAR 56
14261: PUSH
14262: LD_INT 0
14264: ST_TO_ADDR
// end ;
14265: PPOPN 1
14267: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14268: LD_INT 19
14270: PPUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 3
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 21
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PPUSH
14295: CALL_OW 70
14299: IFFALSE 14407
14301: GO 14303
14303: DISABLE
// begin DialogueOn ;
14304: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14308: LD_INT 19
14310: PPUSH
14311: LD_INT 22
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 21
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 70
14339: PPUSH
14340: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14344: LD_EXP 34
14348: PPUSH
14349: LD_STRING D26-Bur-1
14351: PPUSH
14352: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14356: LD_EXP 39
14360: PPUSH
14361: LD_STRING D26-Kov-1
14363: PPUSH
14364: CALL_OW 88
// if IsOk ( Gnyevko ) then
14368: LD_EXP 35
14372: PPUSH
14373: CALL_OW 302
14377: IFFALSE 14403
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14379: LD_EXP 35
14383: PPUSH
14384: LD_STRING D26-Gny-1
14386: PPUSH
14387: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14391: LD_EXP 34
14395: PPUSH
14396: LD_STRING D26-Bur-2
14398: PPUSH
14399: CALL_OW 88
// end ; DialogueOff ;
14403: CALL_OW 7
// end ;
14407: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14408: LD_EXP 21
14412: PUSH
14413: LD_EXP 23
14417: NOT
14418: AND
14419: PUSH
14420: LD_INT 17
14422: PPUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 1000
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 70
14458: PUSH
14459: LD_INT 1
14461: GREATER
14462: AND
14463: IFFALSE 14526
14465: GO 14467
14467: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14468: LD_EXP 35
14472: PPUSH
14473: LD_STRING D16A-Gny-1
14475: PPUSH
14476: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14480: LD_EXP 39
14484: PPUSH
14485: LD_STRING D16A-Kov-1
14487: PPUSH
14488: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14492: LD_EXP 35
14496: PPUSH
14497: CALL_OW 302
14501: PUSH
14502: LD_EXP 39
14506: PPUSH
14507: CALL_OW 302
14511: OR
14512: IFFALSE 14526
// Say ( Burlak , D16A-Bur-1 ) ;
14514: LD_EXP 34
14518: PPUSH
14519: LD_STRING D16A-Bur-1
14521: PPUSH
14522: CALL_OW 88
// end ;
14526: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 9
14532: PPUSH
14533: CALL_OW 294
14537: IFFALSE 14550
14539: GO 14541
14541: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14542: LD_ADDR_EXP 24
14546: PUSH
14547: LD_INT 1
14549: ST_TO_ADDR
// end ;
14550: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: CALL_OW 294
14561: IFFALSE 14581
14563: GO 14565
14565: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14566: LD_ADDR_EXP 27
14570: PUSH
14571: LD_EXP 27
14575: PPUSH
14576: CALL 55691 0 1
14580: ST_TO_ADDR
14581: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14582: LD_INT 3
14584: PPUSH
14585: LD_INT 11
14587: PPUSH
14588: CALL_OW 294
14592: IFFALSE 14612
14594: GO 14596
14596: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14597: LD_ADDR_EXP 27
14601: PUSH
14602: LD_EXP 27
14606: PPUSH
14607: CALL 55691 0 1
14611: ST_TO_ADDR
14612: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14613: LD_INT 3
14615: PPUSH
14616: LD_INT 12
14618: PPUSH
14619: CALL_OW 294
14623: IFFALSE 14643
14625: GO 14627
14627: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14628: LD_ADDR_EXP 27
14632: PUSH
14633: LD_EXP 27
14637: PPUSH
14638: CALL 55691 0 1
14642: ST_TO_ADDR
14643: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14644: LD_INT 3
14646: PPUSH
14647: LD_INT 13
14649: PPUSH
14650: CALL_OW 294
14654: IFFALSE 14674
14656: GO 14658
14658: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14659: LD_ADDR_EXP 27
14663: PUSH
14664: LD_EXP 27
14668: PPUSH
14669: CALL 55691 0 1
14673: ST_TO_ADDR
14674: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14675: LD_INT 3
14677: PPUSH
14678: LD_INT 14
14680: PPUSH
14681: CALL_OW 294
14685: IFFALSE 14705
14687: GO 14689
14689: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14690: LD_ADDR_EXP 27
14694: PUSH
14695: LD_EXP 27
14699: PPUSH
14700: CALL 55691 0 1
14704: ST_TO_ADDR
14705: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14706: LD_EXP 27
14710: PUSH
14711: LD_INT 5
14713: GREATEREQUAL
14714: PUSH
14715: LD_EXP 14
14719: AND
14720: IFFALSE 14740
14722: GO 14724
14724: DISABLE
// begin allMapPointsSpotted := true ;
14725: LD_ADDR_EXP 26
14729: PUSH
14730: LD_INT 1
14732: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14733: LD_STRING M10
14735: PPUSH
14736: CALL_OW 337
// end ;
14740: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14741: LD_EXP 26
14745: PUSH
14746: LD_EXP 22
14750: AND
14751: IFFALSE 14763
14753: GO 14755
14755: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14756: LD_STRING M10a
14758: PPUSH
14759: CALL_OW 337
// end ;
14763: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14764: LD_EXP 14
14768: IFFALSE 15401
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
14777: PPUSH
14778: PPUSH
14779: PPUSH
// begin wasOutsideBeria := false ;
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_INT 0
14787: ST_TO_ADDR
// wantToTalk := false ;
14788: LD_ADDR_VAR 0 2
14792: PUSH
14793: LD_INT 0
14795: ST_TO_ADDR
// westOutpostReported := false ;
14796: LD_ADDR_VAR 0 4
14800: PUSH
14801: LD_INT 0
14803: ST_TO_ADDR
// eastOutpostReported := false ;
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: LD_INT 0
14811: ST_TO_ADDR
// timer := 0 0$0 ;
14812: LD_ADDR_VAR 0 1
14816: PUSH
14817: LD_INT 0
14819: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14820: LD_INT 70
14822: PPUSH
14823: CALL_OW 67
// timer := timer + 0 0$2 ;
14827: LD_ADDR_VAR 0 1
14831: PUSH
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 70
14839: PLUS
14840: ST_TO_ADDR
// if timer >= 0 0$30 then
14841: LD_VAR 0 1
14845: PUSH
14846: LD_INT 1050
14848: GREATEREQUAL
14849: IFFALSE 14859
// wantToTalk := true ;
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_INT 1
14858: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14859: LD_EXP 34
14863: PPUSH
14864: LD_EXP 40
14868: PPUSH
14869: CALL_OW 296
14873: PUSH
14874: LD_INT 9
14876: GREATER
14877: IFFALSE 14887
// wasOutsideBeria := true ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_INT 1
14886: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14887: LD_VAR 0 2
14891: PUSH
14892: LD_VAR 0 3
14896: AND
14897: PUSH
14898: LD_EXP 34
14902: PPUSH
14903: LD_EXP 40
14907: PPUSH
14908: CALL_OW 296
14912: PUSH
14913: LD_INT 8
14915: LESS
14916: PUSH
14917: LD_EXP 34
14921: PPUSH
14922: CALL_OW 310
14926: PPUSH
14927: LD_EXP 40
14931: PPUSH
14932: CALL_OW 296
14936: PUSH
14937: LD_INT 8
14939: LESS
14940: OR
14941: AND
14942: IFFALSE 15290
// begin timer := 0 0$0 ;
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 0
14951: ST_TO_ADDR
// wantToTalk := false ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// wasOutsideBeria := false ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14968: LD_EXP 40
14972: PPUSH
14973: CALL_OW 87
// DialogueOn ;
14977: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14981: LD_EXP 40
14985: PPUSH
14986: LD_STRING D25-Pla-1
14988: PPUSH
14989: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14993: LD_VAR 0 4
14997: NOT
14998: PUSH
14999: LD_VAR 0 5
15003: NOT
15004: AND
15005: PUSH
15006: LD_EXP 20
15010: AND
15011: PUSH
15012: LD_EXP 21
15016: AND
15017: IFFALSE 15097
// begin westOutpostReported := true ;
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// eastOutpostReported := true ;
15027: LD_ADDR_VAR 0 5
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15035: LD_EXP 34
15039: PPUSH
15040: LD_STRING D25-Bur-1
15042: PPUSH
15043: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15047: LD_EXP 24
15051: PUSH
15052: LD_EXP 22
15056: NOT
15057: AND
15058: IFFALSE 15095
// begin Say ( Burlak , D25b-Bur-1 ) ;
15060: LD_EXP 34
15064: PPUSH
15065: LD_STRING D25b-Bur-1
15067: PPUSH
15068: CALL_OW 88
// if not reinforcementsGained then
15072: LD_EXP 25
15076: NOT
15077: IFFALSE 15095
// begin Say ( Platonov , D25b-Pla-1 ) ;
15079: LD_EXP 40
15083: PPUSH
15084: LD_STRING D25b-Pla-1
15086: PPUSH
15087: CALL_OW 88
// SendReinforcements ( ) ;
15091: CALL 3297 0 0
// end ; end ; end else
15095: GO 15286
// if not westOutpostReported and westOutpostDiscovered then
15097: LD_VAR 0 4
15101: NOT
15102: PUSH
15103: LD_EXP 20
15107: AND
15108: IFFALSE 15180
// begin westOutpostReported := true ;
15110: LD_ADDR_VAR 0 4
15114: PUSH
15115: LD_INT 1
15117: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15118: LD_EXP 34
15122: PPUSH
15123: LD_STRING D25a-Bur-1b
15125: PPUSH
15126: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15130: LD_EXP 24
15134: PUSH
15135: LD_EXP 22
15139: NOT
15140: AND
15141: IFFALSE 15178
// begin Say ( Burlak , D25b-Bur-1 ) ;
15143: LD_EXP 34
15147: PPUSH
15148: LD_STRING D25b-Bur-1
15150: PPUSH
15151: CALL_OW 88
// if not reinforcementsGained then
15155: LD_EXP 25
15159: NOT
15160: IFFALSE 15178
// begin Say ( Platonov , D25b-Pla-1 ) ;
15162: LD_EXP 40
15166: PPUSH
15167: LD_STRING D25b-Pla-1
15169: PPUSH
15170: CALL_OW 88
// SendReinforcements ( ) ;
15174: CALL 3297 0 0
// end ; end ; end else
15178: GO 15286
// if not eastOutpostReported and eastOutpostDiscovered then
15180: LD_VAR 0 5
15184: NOT
15185: PUSH
15186: LD_EXP 21
15190: AND
15191: IFFALSE 15215
// begin eastOutpostReported := true ;
15193: LD_ADDR_VAR 0 5
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15201: LD_EXP 34
15205: PPUSH
15206: LD_STRING D25a-Bur-1a
15208: PPUSH
15209: CALL_OW 88
// end else
15213: GO 15286
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15215: LD_EXP 20
15219: NOT
15220: PUSH
15221: LD_EXP 21
15225: NOT
15226: OR
15227: IFFALSE 15255
// begin Say ( Burlak , D25a-Bur-1 ) ;
15229: LD_EXP 34
15233: PPUSH
15234: LD_STRING D25a-Bur-1
15236: PPUSH
15237: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15241: LD_EXP 40
15245: PPUSH
15246: LD_STRING D25c-Pla-1
15248: PPUSH
15249: CALL_OW 88
// end else
15253: GO 15286
// if not allMapPointsSpotted then
15255: LD_EXP 26
15259: NOT
15260: IFFALSE 15286
// begin Say ( Burlak , D25a-Bur-1 ) ;
15262: LD_EXP 34
15266: PPUSH
15267: LD_STRING D25a-Bur-1
15269: PPUSH
15270: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15274: LD_EXP 40
15278: PPUSH
15279: LD_STRING D25c-Pla-1a
15281: PPUSH
15282: CALL_OW 88
// end ; DialogueOff ;
15286: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15290: LD_EXP 26
15294: PUSH
15295: LD_EXP 22
15299: AND
15300: IFFALSE 14820
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15302: LD_INT 22
15304: PUSH
15305: LD_INT 3
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 21
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 91
15324: PUSH
15325: LD_EXP 40
15329: PUSH
15330: LD_INT 10
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: IFFALSE 15390
// begin if not belkovDied and not belkovSaved then
15349: LD_EXP 19
15353: NOT
15354: PUSH
15355: LD_EXP 28
15359: NOT
15360: AND
15361: IFFALSE 15384
// begin if Query ( QContMission ) = 1 then
15363: LD_STRING QContMission
15365: PPUSH
15366: CALL_OW 97
15370: PUSH
15371: LD_INT 1
15373: EQUAL
15374: IFFALSE 15382
// begin EndMission ;
15376: CALL 15404 0 0
// exit ;
15380: GO 15401
// end ; end else
15382: GO 15390
// begin EndMission ;
15384: CALL 15404 0 0
// exit ;
15388: GO 15401
// end ; end ; wait ( 0 0$10 ) ;
15390: LD_INT 350
15392: PPUSH
15393: CALL_OW 67
// until false ;
15397: LD_INT 0
15399: IFFALSE 15302
// end ;
15401: PPOPN 5
15403: END
// function EndMission ; var i , tmp ; begin
15404: LD_INT 0
15406: PPUSH
15407: PPUSH
15408: PPUSH
// if initiative then
15409: LD_EXP 31
15413: IFFALSE 15427
// AddMedal ( Initiative , 1 ) else
15415: LD_STRING Initiative
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 101
15425: GO 15458
// if not eastOutpostDestroyed then
15427: LD_EXP 23
15431: NOT
15432: IFFALSE 15447
// AddMedal ( Initiative , - 2 ) else
15434: LD_STRING Initiative
15436: PPUSH
15437: LD_INT 2
15439: NEG
15440: PPUSH
15441: CALL_OW 101
15445: GO 15458
// AddMedal ( Initiative , - 1 ) ;
15447: LD_STRING Initiative
15449: PPUSH
15450: LD_INT 1
15452: NEG
15453: PPUSH
15454: CALL_OW 101
// if not belkovDied and belkovSaved then
15458: LD_EXP 19
15462: NOT
15463: PUSH
15464: LD_EXP 28
15468: AND
15469: IFFALSE 15483
// AddMedal ( Belkov , 1 ) else
15471: LD_STRING Belkov
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 101
15481: GO 15578
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15483: LD_EXP 45
15487: PPUSH
15488: LD_INT 22
15490: PUSH
15491: LD_INT 3
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PPUSH
15498: CALL_OW 72
15502: IFFALSE 15516
// AddMedal ( Belkov , 2 ) else
15504: LD_STRING Belkov
15506: PPUSH
15507: LD_INT 2
15509: PPUSH
15510: CALL_OW 101
15514: GO 15578
// if belkovDied then
15516: LD_EXP 19
15520: IFFALSE 15535
// AddMedal ( Belkov , - 1 ) else
15522: LD_STRING Belkov
15524: PPUSH
15525: LD_INT 1
15527: NEG
15528: PPUSH
15529: CALL_OW 101
15533: GO 15578
// if not belkovSaved then
15535: LD_EXP 28
15539: NOT
15540: IFFALSE 15555
// AddMedal ( Belkov , - 2 ) else
15542: LD_STRING Belkov
15544: PPUSH
15545: LD_INT 2
15547: NEG
15548: PPUSH
15549: CALL_OW 101
15553: GO 15578
// if belkovDied and belkovSaved then
15555: LD_EXP 19
15559: PUSH
15560: LD_EXP 28
15564: AND
15565: IFFALSE 15578
// AddMedal ( Belkov , - 3 ) ;
15567: LD_STRING Belkov
15569: PPUSH
15570: LD_INT 3
15572: NEG
15573: PPUSH
15574: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15578: LD_EXP 30
15582: PUSH
15583: LD_INT 0
15585: EQUAL
15586: IFFALSE 15600
// AddMedal ( NoLosses , 1 ) else
15588: LD_STRING NoLosses
15590: PPUSH
15591: LD_INT 1
15593: PPUSH
15594: CALL_OW 101
15598: GO 15611
// AddMedal ( NoLosses , - 1 ) ;
15600: LD_STRING NoLosses
15602: PPUSH
15603: LD_INT 1
15605: NEG
15606: PPUSH
15607: CALL_OW 101
// GiveMedals ( Main ) ;
15611: LD_STRING Main
15613: PPUSH
15614: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15618: LD_INT 22
15620: PUSH
15621: LD_INT 3
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 23
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: PPUSH
15658: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15662: LD_EXP 34
15666: PPUSH
15667: LD_EXP 3
15671: PUSH
15672: LD_STRING Burlak
15674: STR
15675: PPUSH
15676: CALL_OW 38
// if IsLive ( Gnyevko ) then
15680: LD_EXP 35
15684: PPUSH
15685: CALL_OW 300
15689: IFFALSE 15709
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15691: LD_EXP 35
15695: PPUSH
15696: LD_EXP 3
15700: PUSH
15701: LD_STRING Gnyevko
15703: STR
15704: PPUSH
15705: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15709: LD_EXP 39
15713: PPUSH
15714: CALL_OW 300
15718: IFFALSE 15738
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15720: LD_EXP 39
15724: PPUSH
15725: LD_EXP 3
15729: PUSH
15730: LD_STRING Kovalyuk
15732: STR
15733: PPUSH
15734: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15738: LD_EXP 36
15742: PPUSH
15743: CALL_OW 300
15747: PUSH
15748: LD_EXP 28
15752: AND
15753: IFFALSE 15773
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15755: LD_EXP 36
15759: PPUSH
15760: LD_EXP 3
15764: PUSH
15765: LD_STRING Belkov
15767: STR
15768: PPUSH
15769: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15773: LD_EXP 37
15777: PPUSH
15778: CALL_OW 300
15782: IFFALSE 15802
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15784: LD_EXP 37
15788: PPUSH
15789: LD_EXP 3
15793: PUSH
15794: LD_STRING Kirilenkova
15796: STR
15797: PPUSH
15798: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15802: LD_INT 22
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 23
15814: PUSH
15815: LD_INT 3
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: PUSH
15842: LD_EXP 34
15846: PUSH
15847: LD_EXP 35
15851: PUSH
15852: LD_EXP 39
15856: PUSH
15857: LD_EXP 36
15861: PUSH
15862: LD_EXP 37
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: DIFF
15874: PPUSH
15875: LD_EXP 3
15879: PUSH
15880: LD_STRING burlakTeam
15882: STR
15883: PPUSH
15884: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15888: LD_INT 22
15890: PUSH
15891: LD_INT 6
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 23
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: LD_EXP 40
15932: PUSH
15933: LD_EXP 38
15937: PUSH
15938: LD_EXP 36
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: PUSH
15948: LD_EXP 45
15952: UNION
15953: DIFF
15954: PPUSH
15955: LD_EXP 3
15959: PUSH
15960: LD_STRING kirovTeam
15962: STR
15963: PPUSH
15964: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15968: LD_EXP 23
15972: PPUSH
15973: LD_STRING 02_EasternOutpostDestroyed
15975: PPUSH
15976: CALL_OW 39
// tmp := [ ] ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: EMPTY
15986: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_INT 3
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: PUSH
16021: FOR_IN
16022: IFFALSE 16098
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_VAR 0 2
16038: PPUSH
16039: CALL_OW 266
16043: PUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 267
16053: PUSH
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 250
16063: PUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL_OW 251
16073: PUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL_OW 254
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: PPUSH
16091: CALL 54328 0 2
16095: ST_TO_ADDR
16096: GO 16021
16098: POP
16099: POP
// SaveVariable ( tmp , 02_Beria ) ;
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_STRING 02_Beria
16107: PPUSH
16108: CALL_OW 39
// tmp := [ ] ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: EMPTY
16118: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: LD_INT 22
16126: PUSH
16127: LD_INT 6
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 21
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: PUSH
16153: FOR_IN
16154: IFFALSE 16230
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: LD_VAR 0 3
16165: PPUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 266
16175: PUSH
16176: LD_VAR 0 2
16180: PPUSH
16181: CALL_OW 267
16185: PUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: CALL_OW 250
16195: PUSH
16196: LD_VAR 0 2
16200: PPUSH
16201: CALL_OW 251
16205: PUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: CALL_OW 254
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL 54328 0 2
16227: ST_TO_ADDR
16228: GO 16153
16230: POP
16231: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_STRING 02_Kirov
16239: PPUSH
16240: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16244: LD_INT 22
16246: PUSH
16247: LD_INT 3
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 21
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: PPUSH
16273: CALL 19029 0 1
16277: PPUSH
16278: LD_STRING 02_VehiclesCount
16280: PPUSH
16281: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16285: LD_INT 22
16287: PUSH
16288: LD_INT 6
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 2
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: PPUSH
16314: CALL 19029 0 1
16318: PPUSH
16319: LD_STRING 02_KirovVehiclesCount
16321: PPUSH
16322: CALL_OW 39
// YouWin ;
16326: CALL_OW 103
// end ; end_of_file
16330: LD_VAR 0 1
16334: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16335: LD_INT 420
16337: PPUSH
16338: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16342: LD_VAR 0 2
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: CALL 7995 0 2
// end ;
16356: PPOPN 5
16358: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL 74176 0 1
// if un = Burlak then
16368: LD_VAR 0 1
16372: PUSH
16373: LD_EXP 34
16377: EQUAL
16378: IFFALSE 16387
// YouLost ( Burlak ) ;
16380: LD_STRING Burlak
16382: PPUSH
16383: CALL_OW 104
// if un = Platonov then
16387: LD_VAR 0 1
16391: PUSH
16392: LD_EXP 40
16396: EQUAL
16397: IFFALSE 16406
// YouLost ( Platonov ) ;
16399: LD_STRING Platonov
16401: PPUSH
16402: CALL_OW 104
// if un = Kurin then
16406: LD_VAR 0 1
16410: PUSH
16411: LD_EXP 38
16415: EQUAL
16416: IFFALSE 16425
// YouLost ( Kurin ) ;
16418: LD_STRING Kurin
16420: PPUSH
16421: CALL_OW 104
// if un = Belkov then
16425: LD_VAR 0 1
16429: PUSH
16430: LD_EXP 36
16434: EQUAL
16435: IFFALSE 16445
// belkovDied := true ;
16437: LD_ADDR_EXP 19
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// if un in belkovTeam then
16445: LD_VAR 0 1
16449: PUSH
16450: LD_EXP 45
16454: IN
16455: IFFALSE 16488
// begin belkovTeam := belkovTeam diff un ;
16457: LD_ADDR_EXP 45
16461: PUSH
16462: LD_EXP 45
16466: PUSH
16467: LD_VAR 0 1
16471: DIFF
16472: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16473: LD_ADDR_EXP 29
16477: PUSH
16478: LD_EXP 29
16482: PPUSH
16483: CALL 55691 0 1
16487: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16488: LD_VAR 0 1
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 21
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 23
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: IN
16533: IFFALSE 16550
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16535: LD_ADDR_EXP 30
16539: PUSH
16540: LD_EXP 30
16544: PPUSH
16545: CALL 55691 0 1
16549: ST_TO_ADDR
// if un in usWestForces then
16550: LD_VAR 0 1
16554: PUSH
16555: LD_EXP 46
16559: IN
16560: IFFALSE 16578
// usWestForces := usWestForces diff un ;
16562: LD_ADDR_EXP 46
16566: PUSH
16567: LD_EXP 46
16571: PUSH
16572: LD_VAR 0 1
16576: DIFF
16577: ST_TO_ADDR
// if un in usEastForces then
16578: LD_VAR 0 1
16582: PUSH
16583: LD_EXP 47
16587: IN
16588: IFFALSE 16606
// usEastForces := usEastForces diff un ;
16590: LD_ADDR_EXP 47
16594: PUSH
16595: LD_EXP 47
16599: PUSH
16600: LD_VAR 0 1
16604: DIFF
16605: ST_TO_ADDR
// end ;
16606: PPOPN 1
16608: END
// on BuildingComplete ( b ) do var mech ;
16609: LD_INT 0
16611: PPUSH
// begin if GetSide ( b ) = 3 then
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 255
16621: PUSH
16622: LD_INT 3
16624: EQUAL
16625: IFFALSE 16684
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 266
16636: PUSH
16637: LD_INT 6
16639: PUSH
16640: LD_INT 7
16642: PUSH
16643: LD_INT 8
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: IN
16651: IFFALSE 16661
// hasLab := true ;
16653: LD_ADDR_EXP 9
16657: PUSH
16658: LD_INT 1
16660: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 266
16670: PUSH
16671: LD_INT 2
16673: EQUAL
16674: IFFALSE 16684
// hasWorkshop := true ;
16676: LD_ADDR_EXP 10
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 6
16696: EQUAL
16697: IFFALSE 16771
// begin if GetBType ( b ) = b_workshop then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 2
16711: EQUAL
16712: IFFALSE 16771
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_EXP 43
16723: PPUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 72
16738: ST_TO_ADDR
// if not mech then
16739: LD_VAR 0 2
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16771
// ComExit ( mech ) ;
16748: LD_VAR 0 2
16752: PPUSH
16753: CALL 54726 0 1
// AddComEnterUnit ( mech , b ) ;
16757: LD_VAR 0 2
16761: PPUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 180
// end ; end ; end ;
16771: PPOPN 2
16773: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16774: LD_VAR 0 1
16778: PPUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: CALL 74298 0 2
// if GetSide ( vehicle ) = 3 then
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 255
16797: PUSH
16798: LD_INT 3
16800: EQUAL
16801: IFFALSE 16826
// begin hasTank := true ;
16803: LD_ADDR_EXP 12
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16811: LD_ADDR_EXP 15
16815: PUSH
16816: LD_EXP 15
16820: PPUSH
16821: CALL 55691 0 1
16825: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 255
16835: PUSH
16836: LD_INT 6
16838: EQUAL
16839: IFFALSE 16850
// KirovAttack ( vehicle ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL 3603 0 1
// end ;
16850: PPOPN 2
16852: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16853: LD_VAR 0 1
16857: PUSH
16858: LD_EXP 33
16862: EQUAL
16863: IFFALSE 16869
// BelkovAttackScript ;
16865: CALL 1668 0 0
// end ;
16869: PPOPN 1
16871: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16872: LD_INT 0
16874: PPUSH
// begin if side = 1 then
16875: LD_VAR 0 3
16879: PUSH
16880: LD_INT 1
16882: EQUAL
16883: IFFALSE 16893
// vehCaptured := true ;
16885: LD_ADDR_EXP 16
16889: PUSH
16890: LD_INT 1
16892: ST_TO_ADDR
// end ;
16893: PPOPN 5
16895: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16896: LD_VAR 0 1
16900: PUSH
16901: LD_INT 3
16903: EQUAL
16904: PUSH
16905: LD_VAR 0 2
16909: PUSH
16910: LD_INT 6
16912: EQUAL
16913: AND
16914: IFFALSE 16924
// allianceAttacked := true ;
16916: LD_ADDR_EXP 13
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
// end ; end_of_file
16924: PPOPN 2
16926: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
// if exist_mode then
16931: LD_VAR 0 2
16935: IFFALSE 16960
// unit := CreateCharacter ( prefix & ident ) else
16937: LD_ADDR_VAR 0 5
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 1
16951: STR
16952: PPUSH
16953: CALL_OW 34
16957: ST_TO_ADDR
16958: GO 16975
// unit := NewCharacter ( ident ) ;
16960: LD_ADDR_VAR 0 5
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 25
16974: ST_TO_ADDR
// result := unit ;
16975: LD_ADDR_VAR 0 4
16979: PUSH
16980: LD_VAR 0 5
16984: ST_TO_ADDR
// end ;
16985: LD_VAR 0 4
16989: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16990: LD_INT 0
16992: PPUSH
16993: PPUSH
// if not side or not nation then
16994: LD_VAR 0 1
16998: NOT
16999: PUSH
17000: LD_VAR 0 2
17004: NOT
17005: OR
17006: IFFALSE 17010
// exit ;
17008: GO 17778
// case nation of nation_american :
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 1
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17237
17023: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17024: LD_ADDR_VAR 0 4
17028: PUSH
17029: LD_INT 35
17031: PUSH
17032: LD_INT 45
17034: PUSH
17035: LD_INT 46
17037: PUSH
17038: LD_INT 47
17040: PUSH
17041: LD_INT 82
17043: PUSH
17044: LD_INT 83
17046: PUSH
17047: LD_INT 84
17049: PUSH
17050: LD_INT 85
17052: PUSH
17053: LD_INT 86
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 6
17064: PUSH
17065: LD_INT 15
17067: PUSH
17068: LD_INT 16
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: LD_INT 12
17076: PUSH
17077: LD_INT 13
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 14
17085: PUSH
17086: LD_INT 20
17088: PUSH
17089: LD_INT 21
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 32
17100: PUSH
17101: LD_INT 27
17103: PUSH
17104: LD_INT 36
17106: PUSH
17107: LD_INT 69
17109: PUSH
17110: LD_INT 39
17112: PUSH
17113: LD_INT 34
17115: PUSH
17116: LD_INT 40
17118: PUSH
17119: LD_INT 48
17121: PUSH
17122: LD_INT 49
17124: PUSH
17125: LD_INT 50
17127: PUSH
17128: LD_INT 51
17130: PUSH
17131: LD_INT 52
17133: PUSH
17134: LD_INT 53
17136: PUSH
17137: LD_INT 54
17139: PUSH
17140: LD_INT 55
17142: PUSH
17143: LD_INT 56
17145: PUSH
17146: LD_INT 57
17148: PUSH
17149: LD_INT 58
17151: PUSH
17152: LD_INT 59
17154: PUSH
17155: LD_INT 60
17157: PUSH
17158: LD_INT 61
17160: PUSH
17161: LD_INT 62
17163: PUSH
17164: LD_INT 80
17166: PUSH
17167: LD_INT 82
17169: PUSH
17170: LD_INT 83
17172: PUSH
17173: LD_INT 84
17175: PUSH
17176: LD_INT 85
17178: PUSH
17179: LD_INT 86
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: ST_TO_ADDR
17235: GO 17702
17237: LD_INT 2
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17471
17245: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17246: LD_ADDR_VAR 0 4
17250: PUSH
17251: LD_INT 35
17253: PUSH
17254: LD_INT 45
17256: PUSH
17257: LD_INT 46
17259: PUSH
17260: LD_INT 47
17262: PUSH
17263: LD_INT 82
17265: PUSH
17266: LD_INT 83
17268: PUSH
17269: LD_INT 84
17271: PUSH
17272: LD_INT 85
17274: PUSH
17275: LD_INT 87
17277: PUSH
17278: LD_INT 70
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: LD_INT 11
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: LD_INT 4
17292: PUSH
17293: LD_INT 5
17295: PUSH
17296: LD_INT 6
17298: PUSH
17299: LD_INT 15
17301: PUSH
17302: LD_INT 18
17304: PUSH
17305: LD_INT 7
17307: PUSH
17308: LD_INT 17
17310: PUSH
17311: LD_INT 8
17313: PUSH
17314: LD_INT 20
17316: PUSH
17317: LD_INT 21
17319: PUSH
17320: LD_INT 22
17322: PUSH
17323: LD_INT 72
17325: PUSH
17326: LD_INT 26
17328: PUSH
17329: LD_INT 69
17331: PUSH
17332: LD_INT 39
17334: PUSH
17335: LD_INT 40
17337: PUSH
17338: LD_INT 41
17340: PUSH
17341: LD_INT 42
17343: PUSH
17344: LD_INT 43
17346: PUSH
17347: LD_INT 48
17349: PUSH
17350: LD_INT 49
17352: PUSH
17353: LD_INT 50
17355: PUSH
17356: LD_INT 51
17358: PUSH
17359: LD_INT 52
17361: PUSH
17362: LD_INT 53
17364: PUSH
17365: LD_INT 54
17367: PUSH
17368: LD_INT 55
17370: PUSH
17371: LD_INT 56
17373: PUSH
17374: LD_INT 60
17376: PUSH
17377: LD_INT 61
17379: PUSH
17380: LD_INT 62
17382: PUSH
17383: LD_INT 66
17385: PUSH
17386: LD_INT 67
17388: PUSH
17389: LD_INT 68
17391: PUSH
17392: LD_INT 81
17394: PUSH
17395: LD_INT 82
17397: PUSH
17398: LD_INT 83
17400: PUSH
17401: LD_INT 84
17403: PUSH
17404: LD_INT 85
17406: PUSH
17407: LD_INT 87
17409: PUSH
17410: LD_INT 88
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
17469: GO 17702
17471: LD_INT 3
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17701
17479: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17480: LD_ADDR_VAR 0 4
17484: PUSH
17485: LD_INT 46
17487: PUSH
17488: LD_INT 47
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 82
17499: PUSH
17500: LD_INT 83
17502: PUSH
17503: LD_INT 84
17505: PUSH
17506: LD_INT 85
17508: PUSH
17509: LD_INT 86
17511: PUSH
17512: LD_INT 11
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 20
17520: PUSH
17521: LD_INT 19
17523: PUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 24
17529: PUSH
17530: LD_INT 22
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: LD_INT 28
17538: PUSH
17539: LD_INT 29
17541: PUSH
17542: LD_INT 30
17544: PUSH
17545: LD_INT 31
17547: PUSH
17548: LD_INT 37
17550: PUSH
17551: LD_INT 38
17553: PUSH
17554: LD_INT 32
17556: PUSH
17557: LD_INT 27
17559: PUSH
17560: LD_INT 33
17562: PUSH
17563: LD_INT 69
17565: PUSH
17566: LD_INT 39
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 40
17574: PUSH
17575: LD_INT 71
17577: PUSH
17578: LD_INT 23
17580: PUSH
17581: LD_INT 44
17583: PUSH
17584: LD_INT 48
17586: PUSH
17587: LD_INT 49
17589: PUSH
17590: LD_INT 50
17592: PUSH
17593: LD_INT 51
17595: PUSH
17596: LD_INT 52
17598: PUSH
17599: LD_INT 53
17601: PUSH
17602: LD_INT 54
17604: PUSH
17605: LD_INT 55
17607: PUSH
17608: LD_INT 56
17610: PUSH
17611: LD_INT 57
17613: PUSH
17614: LD_INT 58
17616: PUSH
17617: LD_INT 59
17619: PUSH
17620: LD_INT 63
17622: PUSH
17623: LD_INT 64
17625: PUSH
17626: LD_INT 65
17628: PUSH
17629: LD_INT 82
17631: PUSH
17632: LD_INT 83
17634: PUSH
17635: LD_INT 84
17637: PUSH
17638: LD_INT 85
17640: PUSH
17641: LD_INT 86
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: ST_TO_ADDR
17699: GO 17702
17701: POP
// if state > - 1 and state < 3 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: GREATER
17711: PUSH
17712: LD_VAR 0 3
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: AND
17721: IFFALSE 17778
// for i in result do
17723: LD_ADDR_VAR 0 5
17727: PUSH
17728: LD_VAR 0 4
17732: PUSH
17733: FOR_IN
17734: IFFALSE 17776
// if GetTech ( i , side ) <> state then
17736: LD_VAR 0 5
17740: PPUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 321
17750: PUSH
17751: LD_VAR 0 3
17755: NONEQUAL
17756: IFFALSE 17774
// result := result diff i ;
17758: LD_ADDR_VAR 0 4
17762: PUSH
17763: LD_VAR 0 4
17767: PUSH
17768: LD_VAR 0 5
17772: DIFF
17773: ST_TO_ADDR
17774: GO 17733
17776: POP
17777: POP
// end ;
17778: LD_VAR 0 4
17782: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// result := true ;
17788: LD_ADDR_VAR 0 3
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17796: LD_ADDR_VAR 0 5
17800: PUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 480
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 5
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17869
// for i in tmp do
17820: LD_ADDR_VAR 0 4
17824: PUSH
17825: LD_VAR 0 5
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17867
// if GetTech ( i , side ) <> state_researched then
17833: LD_VAR 0 4
17837: PPUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 321
17847: PUSH
17848: LD_INT 2
17850: NONEQUAL
17851: IFFALSE 17865
// begin result := false ;
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// exit ;
17861: POP
17862: POP
17863: GO 17869
// end ;
17865: GO 17830
17867: POP
17868: POP
// end ;
17869: LD_VAR 0 3
17873: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
17880: PPUSH
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17889: LD_VAR 0 1
17893: NOT
17894: PUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 257
17904: PUSH
17905: LD_INT 9
17907: NONEQUAL
17908: OR
17909: IFFALSE 17913
// exit ;
17911: GO 18486
// side := GetSide ( unit ) ;
17913: LD_ADDR_VAR 0 9
17917: PUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 255
17927: ST_TO_ADDR
// tech_space := tech_spacanom ;
17928: LD_ADDR_VAR 0 12
17932: PUSH
17933: LD_INT 29
17935: ST_TO_ADDR
// tech_time := tech_taurad ;
17936: LD_ADDR_VAR 0 13
17940: PUSH
17941: LD_INT 28
17943: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17944: LD_ADDR_VAR 0 11
17948: PUSH
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17959: LD_VAR 0 11
17963: PPUSH
17964: CALL_OW 247
17968: PUSH
17969: LD_INT 2
17971: EQUAL
17972: IFFALSE 17976
// exit ;
17974: GO 18486
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17976: LD_ADDR_VAR 0 8
17980: PUSH
17981: LD_INT 81
17983: PUSH
17984: LD_VAR 0 9
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: ST_TO_ADDR
// if not tmp then
18019: LD_VAR 0 8
18023: NOT
18024: IFFALSE 18028
// exit ;
18026: GO 18486
// if in_unit then
18028: LD_VAR 0 11
18032: IFFALSE 18056
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18034: LD_ADDR_VAR 0 10
18038: PUSH
18039: LD_VAR 0 8
18043: PPUSH
18044: LD_VAR 0 11
18048: PPUSH
18049: CALL_OW 74
18053: ST_TO_ADDR
18054: GO 18076
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18056: LD_ADDR_VAR 0 10
18060: PUSH
18061: LD_VAR 0 8
18065: PPUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 74
18075: ST_TO_ADDR
// if not enemy then
18076: LD_VAR 0 10
18080: NOT
18081: IFFALSE 18085
// exit ;
18083: GO 18486
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18085: LD_VAR 0 11
18089: PUSH
18090: LD_VAR 0 11
18094: PPUSH
18095: LD_VAR 0 10
18099: PPUSH
18100: CALL_OW 296
18104: PUSH
18105: LD_INT 13
18107: GREATER
18108: AND
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_VAR 0 10
18119: PPUSH
18120: CALL_OW 296
18124: PUSH
18125: LD_INT 12
18127: GREATER
18128: OR
18129: IFFALSE 18133
// exit ;
18131: GO 18486
// missile := [ 1 ] ;
18133: LD_ADDR_VAR 0 14
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18144: LD_VAR 0 9
18148: PPUSH
18149: LD_VAR 0 12
18153: PPUSH
18154: CALL_OW 325
18158: IFFALSE 18187
// missile := Replace ( missile , missile + 1 , 2 ) ;
18160: LD_ADDR_VAR 0 14
18164: PUSH
18165: LD_VAR 0 14
18169: PPUSH
18170: LD_VAR 0 14
18174: PUSH
18175: LD_INT 1
18177: PLUS
18178: PPUSH
18179: LD_INT 2
18181: PPUSH
18182: CALL_OW 1
18186: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18187: LD_VAR 0 9
18191: PPUSH
18192: LD_VAR 0 13
18196: PPUSH
18197: CALL_OW 325
18201: PUSH
18202: LD_VAR 0 10
18206: PPUSH
18207: CALL_OW 255
18211: PPUSH
18212: LD_VAR 0 13
18216: PPUSH
18217: CALL_OW 325
18221: NOT
18222: AND
18223: IFFALSE 18252
// missile := Replace ( missile , missile + 1 , 3 ) ;
18225: LD_ADDR_VAR 0 14
18229: PUSH
18230: LD_VAR 0 14
18234: PPUSH
18235: LD_VAR 0 14
18239: PUSH
18240: LD_INT 1
18242: PLUS
18243: PPUSH
18244: LD_INT 3
18246: PPUSH
18247: CALL_OW 1
18251: ST_TO_ADDR
// if missile < 2 then
18252: LD_VAR 0 14
18256: PUSH
18257: LD_INT 2
18259: LESS
18260: IFFALSE 18264
// exit ;
18262: GO 18486
// x := GetX ( enemy ) ;
18264: LD_ADDR_VAR 0 4
18268: PUSH
18269: LD_VAR 0 10
18273: PPUSH
18274: CALL_OW 250
18278: ST_TO_ADDR
// y := GetY ( enemy ) ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_VAR 0 10
18288: PPUSH
18289: CALL_OW 251
18293: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18294: LD_ADDR_VAR 0 6
18298: PUSH
18299: LD_VAR 0 4
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 12
18315: PLUS
18316: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18317: LD_ADDR_VAR 0 7
18321: PUSH
18322: LD_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 12
18338: PLUS
18339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18340: LD_VAR 0 6
18344: PPUSH
18345: LD_VAR 0 7
18349: PPUSH
18350: CALL_OW 488
18354: NOT
18355: IFFALSE 18377
// begin _x := x ;
18357: LD_ADDR_VAR 0 6
18361: PUSH
18362: LD_VAR 0 4
18366: ST_TO_ADDR
// _y := y ;
18367: LD_ADDR_VAR 0 7
18371: PUSH
18372: LD_VAR 0 5
18376: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18377: LD_ADDR_VAR 0 3
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_VAR 0 14
18389: PPUSH
18390: CALL_OW 12
18394: ST_TO_ADDR
// case i of 1 :
18395: LD_VAR 0 3
18399: PUSH
18400: LD_INT 1
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18425
18408: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_VAR 0 10
18418: PPUSH
18419: CALL_OW 115
18423: GO 18486
18425: LD_INT 2
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18455
18433: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_VAR 0 6
18443: PPUSH
18444: LD_VAR 0 7
18448: PPUSH
18449: CALL_OW 153
18453: GO 18486
18455: LD_INT 3
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18485
18463: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18464: LD_VAR 0 1
18468: PPUSH
18469: LD_VAR 0 6
18473: PPUSH
18474: LD_VAR 0 7
18478: PPUSH
18479: CALL_OW 154
18483: GO 18486
18485: POP
// end ;
18486: LD_VAR 0 2
18490: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18491: LD_INT 0
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
// if not unit or not building then
18499: LD_VAR 0 1
18503: NOT
18504: PUSH
18505: LD_VAR 0 2
18509: NOT
18510: OR
18511: IFFALSE 18515
// exit ;
18513: GO 18673
// x := GetX ( building ) ;
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_VAR 0 2
18524: PPUSH
18525: CALL_OW 250
18529: ST_TO_ADDR
// y := GetY ( building ) ;
18530: LD_ADDR_VAR 0 6
18534: PUSH
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 251
18544: ST_TO_ADDR
// for i = 0 to 5 do
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: DOUBLE
18551: LD_INT 0
18553: DEC
18554: ST_TO_ADDR
18555: LD_INT 5
18557: PUSH
18558: FOR_TO
18559: IFFALSE 18671
// begin _x := ShiftX ( x , i , 3 ) ;
18561: LD_ADDR_VAR 0 7
18565: PUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 4
18575: PPUSH
18576: LD_INT 3
18578: PPUSH
18579: CALL_OW 272
18583: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18584: LD_ADDR_VAR 0 8
18588: PUSH
18589: LD_VAR 0 6
18593: PPUSH
18594: LD_VAR 0 4
18598: PPUSH
18599: LD_INT 3
18601: PPUSH
18602: CALL_OW 273
18606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18607: LD_VAR 0 7
18611: PPUSH
18612: LD_VAR 0 8
18616: PPUSH
18617: CALL_OW 488
18621: NOT
18622: IFFALSE 18626
// continue ;
18624: GO 18558
// if HexInfo ( _x , _y ) = 0 then
18626: LD_VAR 0 7
18630: PPUSH
18631: LD_VAR 0 8
18635: PPUSH
18636: CALL_OW 428
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: IFFALSE 18669
// begin ComMoveXY ( unit , _x , _y ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: LD_VAR 0 7
18655: PPUSH
18656: LD_VAR 0 8
18660: PPUSH
18661: CALL_OW 111
// exit ;
18665: POP
18666: POP
18667: GO 18673
// end ; end ;
18669: GO 18558
18671: POP
18672: POP
// end ;
18673: LD_VAR 0 3
18677: RET
// export function ScanBase ( side , base_area ) ; begin
18678: LD_INT 0
18680: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_VAR 0 2
18690: PPUSH
18691: LD_INT 81
18693: PUSH
18694: LD_VAR 0 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 70
18707: ST_TO_ADDR
// end ;
18708: LD_VAR 0 3
18712: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18713: LD_INT 0
18715: PPUSH
18716: PPUSH
18717: PPUSH
18718: PPUSH
// result := false ;
18719: LD_ADDR_VAR 0 2
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// side := GetSide ( unit ) ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 255
18741: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18742: LD_ADDR_VAR 0 4
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 248
18756: ST_TO_ADDR
// case nat of 1 :
18757: LD_VAR 0 4
18761: PUSH
18762: LD_INT 1
18764: DOUBLE
18765: EQUAL
18766: IFTRUE 18770
18768: GO 18781
18770: POP
// tech := tech_lassight ; 2 :
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_INT 12
18778: ST_TO_ADDR
18779: GO 18820
18781: LD_INT 2
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18800
18789: POP
// tech := tech_mortar ; 3 :
18790: LD_ADDR_VAR 0 5
18794: PUSH
18795: LD_INT 41
18797: ST_TO_ADDR
18798: GO 18820
18800: LD_INT 3
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18819
18808: POP
// tech := tech_bazooka ; end ;
18809: LD_ADDR_VAR 0 5
18813: PUSH
18814: LD_INT 44
18816: ST_TO_ADDR
18817: GO 18820
18819: POP
// if Researched ( side , tech ) then
18820: LD_VAR 0 3
18824: PPUSH
18825: LD_VAR 0 5
18829: PPUSH
18830: CALL_OW 325
18834: IFFALSE 18861
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18836: LD_ADDR_VAR 0 2
18840: PUSH
18841: LD_INT 5
18843: PUSH
18844: LD_INT 8
18846: PUSH
18847: LD_INT 9
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: LD_VAR 0 4
18859: ARRAY
18860: ST_TO_ADDR
// end ;
18861: LD_VAR 0 2
18865: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
18870: PPUSH
// if not mines then
18871: LD_VAR 0 2
18875: NOT
18876: IFFALSE 18880
// exit ;
18878: GO 19024
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18880: LD_ADDR_VAR 0 5
18884: PUSH
18885: LD_INT 81
18887: PUSH
18888: LD_VAR 0 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 3
18899: PUSH
18900: LD_INT 21
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PPUSH
18918: CALL_OW 69
18922: ST_TO_ADDR
// for i in mines do
18923: LD_ADDR_VAR 0 4
18927: PUSH
18928: LD_VAR 0 2
18932: PUSH
18933: FOR_IN
18934: IFFALSE 19022
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18936: LD_VAR 0 4
18940: PUSH
18941: LD_INT 1
18943: ARRAY
18944: PPUSH
18945: LD_VAR 0 4
18949: PUSH
18950: LD_INT 2
18952: ARRAY
18953: PPUSH
18954: CALL_OW 458
18958: NOT
18959: IFFALSE 18963
// continue ;
18961: GO 18933
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18963: LD_VAR 0 4
18967: PUSH
18968: LD_INT 1
18970: ARRAY
18971: PPUSH
18972: LD_VAR 0 4
18976: PUSH
18977: LD_INT 2
18979: ARRAY
18980: PPUSH
18981: CALL_OW 428
18985: PUSH
18986: LD_VAR 0 5
18990: IN
18991: IFFALSE 19020
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18993: LD_VAR 0 4
18997: PUSH
18998: LD_INT 1
19000: ARRAY
19001: PPUSH
19002: LD_VAR 0 4
19006: PUSH
19007: LD_INT 2
19009: ARRAY
19010: PPUSH
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 456
// end ;
19020: GO 18933
19022: POP
19023: POP
// end ;
19024: LD_VAR 0 3
19028: RET
// export function Count ( array ) ; var i ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
// result := 0 ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 0
19040: ST_TO_ADDR
// for i in array do
19041: LD_ADDR_VAR 0 3
19045: PUSH
19046: LD_VAR 0 1
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19076
// if i then
19054: LD_VAR 0 3
19058: IFFALSE 19074
// result := result + 1 ;
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_VAR 0 2
19069: PUSH
19070: LD_INT 1
19072: PLUS
19073: ST_TO_ADDR
19074: GO 19051
19076: POP
19077: POP
// end ;
19078: LD_VAR 0 2
19082: RET
// export function IsEmpty ( building ) ; begin
19083: LD_INT 0
19085: PPUSH
// if not building then
19086: LD_VAR 0 1
19090: NOT
19091: IFFALSE 19095
// exit ;
19093: GO 19138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19095: LD_ADDR_VAR 0 2
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 255
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 58
19124: PUSH
19125: EMPTY
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: IN
19137: ST_TO_ADDR
// end ;
19138: LD_VAR 0 2
19142: RET
// export function IsNotFull ( building ) ; var places ; begin
19143: LD_INT 0
19145: PPUSH
19146: PPUSH
// if not building then
19147: LD_VAR 0 1
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19327
// result := false ;
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// places := 0 ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
19172: LD_VAR 0 1
19176: PPUSH
19177: CALL_OW 266
19181: PUSH
19182: LD_INT 0
19184: DOUBLE
19185: EQUAL
19186: IFTRUE 19244
19188: LD_INT 1
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19244
19194: LD_INT 6
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19244
19200: LD_INT 7
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19244
19206: LD_INT 8
19208: DOUBLE
19209: EQUAL
19210: IFTRUE 19244
19212: LD_INT 4
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19244
19218: LD_INT 5
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19244
19224: LD_INT 2
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19244
19230: LD_INT 3
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19244
19236: LD_INT 35
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19255
19244: POP
// places := 6 ; b_bunker , b_breastwork :
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 6
19252: ST_TO_ADDR
19253: GO 19300
19255: LD_INT 32
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19269
19261: LD_INT 31
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19280
19269: POP
// places := 1 ; b_control_tower :
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_INT 1
19277: ST_TO_ADDR
19278: GO 19300
19280: LD_INT 36
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19299
19288: POP
// places := 3 ; end ;
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 3
19296: ST_TO_ADDR
19297: GO 19300
19299: POP
// if places then
19300: LD_VAR 0 3
19304: IFFALSE 19327
// result := UnitsInside ( building ) < places ;
19306: LD_ADDR_VAR 0 2
19310: PUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 313
19320: PUSH
19321: LD_VAR 0 3
19325: LESS
19326: ST_TO_ADDR
// end ;
19327: LD_VAR 0 2
19331: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19332: LD_INT 0
19334: PPUSH
19335: PPUSH
19336: PPUSH
19337: PPUSH
// tmp := [ ] ;
19338: LD_ADDR_VAR 0 3
19342: PUSH
19343: EMPTY
19344: ST_TO_ADDR
// list := [ ] ;
19345: LD_ADDR_VAR 0 5
19349: PUSH
19350: EMPTY
19351: ST_TO_ADDR
// for i = 16 to 25 do
19352: LD_ADDR_VAR 0 4
19356: PUSH
19357: DOUBLE
19358: LD_INT 16
19360: DEC
19361: ST_TO_ADDR
19362: LD_INT 25
19364: PUSH
19365: FOR_TO
19366: IFFALSE 19439
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 255
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 91
19397: PUSH
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 6
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: LD_VAR 0 4
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: PPUSH
19431: CALL_OW 69
19435: ADD
19436: ST_TO_ADDR
19437: GO 19365
19439: POP
19440: POP
// for i = 1 to tmp do
19441: LD_ADDR_VAR 0 4
19445: PUSH
19446: DOUBLE
19447: LD_INT 1
19449: DEC
19450: ST_TO_ADDR
19451: LD_VAR 0 3
19455: PUSH
19456: FOR_TO
19457: IFFALSE 19545
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19459: LD_ADDR_VAR 0 5
19463: PUSH
19464: LD_VAR 0 5
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: LD_VAR 0 4
19478: ARRAY
19479: PPUSH
19480: CALL_OW 266
19484: PUSH
19485: LD_VAR 0 3
19489: PUSH
19490: LD_VAR 0 4
19494: ARRAY
19495: PPUSH
19496: CALL_OW 250
19500: PUSH
19501: LD_VAR 0 3
19505: PUSH
19506: LD_VAR 0 4
19510: ARRAY
19511: PPUSH
19512: CALL_OW 251
19516: PUSH
19517: LD_VAR 0 3
19521: PUSH
19522: LD_VAR 0 4
19526: ARRAY
19527: PPUSH
19528: CALL_OW 254
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: ADD
19542: ST_TO_ADDR
19543: GO 19456
19545: POP
19546: POP
// result := list ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 5
19556: ST_TO_ADDR
// end ;
19557: LD_VAR 0 2
19561: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
19567: PPUSH
19568: PPUSH
19569: PPUSH
19570: PPUSH
// if not factory then
19571: LD_VAR 0 1
19575: NOT
19576: IFFALSE 19580
// exit ;
19578: GO 20173
// if control = control_apeman then
19580: LD_VAR 0 4
19584: PUSH
19585: LD_INT 5
19587: EQUAL
19588: IFFALSE 19697
// begin tmp := UnitsInside ( factory ) ;
19590: LD_ADDR_VAR 0 8
19594: PUSH
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 313
19604: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19605: LD_VAR 0 8
19609: PPUSH
19610: LD_INT 25
19612: PUSH
19613: LD_INT 12
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PPUSH
19620: CALL_OW 72
19624: NOT
19625: IFFALSE 19635
// control := control_manual ;
19627: LD_ADDR_VAR 0 4
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19635: LD_ADDR_VAR 0 8
19639: PUSH
19640: LD_VAR 0 1
19644: PPUSH
19645: CALL 19332 0 1
19649: ST_TO_ADDR
// if tmp then
19650: LD_VAR 0 8
19654: IFFALSE 19697
// begin for i in tmp do
19656: LD_ADDR_VAR 0 7
19660: PUSH
19661: LD_VAR 0 8
19665: PUSH
19666: FOR_IN
19667: IFFALSE 19695
// if i [ 1 ] = b_ext_radio then
19669: LD_VAR 0 7
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: PUSH
19678: LD_INT 22
19680: EQUAL
19681: IFFALSE 19693
// begin control := control_remote ;
19683: LD_ADDR_VAR 0 4
19687: PUSH
19688: LD_INT 2
19690: ST_TO_ADDR
// break ;
19691: GO 19695
// end ;
19693: GO 19666
19695: POP
19696: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_VAR 0 3
19711: PPUSH
19712: LD_VAR 0 4
19716: PPUSH
19717: LD_VAR 0 5
19721: PPUSH
19722: CALL_OW 448
19726: IFFALSE 19761
// begin result := [ chassis , engine , control , weapon ] ;
19728: LD_ADDR_VAR 0 6
19732: PUSH
19733: LD_VAR 0 2
19737: PUSH
19738: LD_VAR 0 3
19742: PUSH
19743: LD_VAR 0 4
19747: PUSH
19748: LD_VAR 0 5
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: ST_TO_ADDR
// exit ;
19759: GO 20173
// end ; _chassis := AvailableChassisList ( factory ) ;
19761: LD_ADDR_VAR 0 9
19765: PUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 475
19775: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19776: LD_ADDR_VAR 0 11
19780: PUSH
19781: LD_VAR 0 1
19785: PPUSH
19786: CALL_OW 476
19790: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19791: LD_ADDR_VAR 0 12
19795: PUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 477
19805: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19806: LD_ADDR_VAR 0 10
19810: PUSH
19811: LD_VAR 0 1
19815: PPUSH
19816: CALL_OW 478
19820: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19821: LD_VAR 0 9
19825: NOT
19826: PUSH
19827: LD_VAR 0 11
19831: NOT
19832: OR
19833: PUSH
19834: LD_VAR 0 12
19838: NOT
19839: OR
19840: PUSH
19841: LD_VAR 0 10
19845: NOT
19846: OR
19847: IFFALSE 19882
// begin result := [ chassis , engine , control , weapon ] ;
19849: LD_ADDR_VAR 0 6
19853: PUSH
19854: LD_VAR 0 2
19858: PUSH
19859: LD_VAR 0 3
19863: PUSH
19864: LD_VAR 0 4
19868: PUSH
19869: LD_VAR 0 5
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: ST_TO_ADDR
// exit ;
19880: GO 20173
// end ; if not chassis in _chassis then
19882: LD_VAR 0 2
19886: PUSH
19887: LD_VAR 0 9
19891: IN
19892: NOT
19893: IFFALSE 19919
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19895: LD_ADDR_VAR 0 2
19899: PUSH
19900: LD_VAR 0 9
19904: PUSH
19905: LD_INT 1
19907: PPUSH
19908: LD_VAR 0 9
19912: PPUSH
19913: CALL_OW 12
19917: ARRAY
19918: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19919: LD_VAR 0 2
19923: PPUSH
19924: LD_VAR 0 3
19928: PPUSH
19929: CALL 20178 0 2
19933: NOT
19934: IFFALSE 19993
// repeat engine := _engine [ 1 ] ;
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_VAR 0 11
19945: PUSH
19946: LD_INT 1
19948: ARRAY
19949: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19950: LD_ADDR_VAR 0 11
19954: PUSH
19955: LD_VAR 0 11
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 3
19967: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19968: LD_VAR 0 2
19972: PPUSH
19973: LD_VAR 0 3
19977: PPUSH
19978: CALL 20178 0 2
19982: PUSH
19983: LD_VAR 0 11
19987: PUSH
19988: EMPTY
19989: EQUAL
19990: OR
19991: IFFALSE 19936
// if not control in _control then
19993: LD_VAR 0 4
19997: PUSH
19998: LD_VAR 0 12
20002: IN
20003: NOT
20004: IFFALSE 20030
// control := _control [ rand ( 1 , _control ) ] ;
20006: LD_ADDR_VAR 0 4
20010: PUSH
20011: LD_VAR 0 12
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 12
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20030: LD_VAR 0 2
20034: PPUSH
20035: LD_VAR 0 5
20039: PPUSH
20040: CALL 20398 0 2
20044: NOT
20045: IFFALSE 20104
// repeat weapon := _weapon [ 1 ] ;
20047: LD_ADDR_VAR 0 5
20051: PUSH
20052: LD_VAR 0 10
20056: PUSH
20057: LD_INT 1
20059: ARRAY
20060: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20061: LD_ADDR_VAR 0 10
20065: PUSH
20066: LD_VAR 0 10
20070: PPUSH
20071: LD_INT 1
20073: PPUSH
20074: CALL_OW 3
20078: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_VAR 0 5
20088: PPUSH
20089: CALL 20398 0 2
20093: PUSH
20094: LD_VAR 0 10
20098: PUSH
20099: EMPTY
20100: EQUAL
20101: OR
20102: IFFALSE 20047
// result := [ ] ;
20104: LD_ADDR_VAR 0 6
20108: PUSH
20109: EMPTY
20110: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20111: LD_VAR 0 1
20115: PPUSH
20116: LD_VAR 0 2
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: LD_VAR 0 4
20130: PPUSH
20131: LD_VAR 0 5
20135: PPUSH
20136: CALL_OW 448
20140: IFFALSE 20173
// result := [ chassis , engine , control , weapon ] ;
20142: LD_ADDR_VAR 0 6
20146: PUSH
20147: LD_VAR 0 2
20151: PUSH
20152: LD_VAR 0 3
20156: PUSH
20157: LD_VAR 0 4
20161: PUSH
20162: LD_VAR 0 5
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: ST_TO_ADDR
// end ;
20173: LD_VAR 0 6
20177: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20178: LD_INT 0
20180: PPUSH
// if not chassis or not engine then
20181: LD_VAR 0 1
20185: NOT
20186: PUSH
20187: LD_VAR 0 2
20191: NOT
20192: OR
20193: IFFALSE 20197
// exit ;
20195: GO 20393
// case engine of engine_solar :
20197: LD_VAR 0 2
20201: PUSH
20202: LD_INT 2
20204: DOUBLE
20205: EQUAL
20206: IFTRUE 20210
20208: GO 20248
20210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: LD_INT 11
20218: PUSH
20219: LD_INT 12
20221: PUSH
20222: LD_INT 13
20224: PUSH
20225: LD_INT 14
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: ST_TO_ADDR
20246: GO 20377
20248: LD_INT 1
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20318
20256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20257: LD_ADDR_VAR 0 3
20261: PUSH
20262: LD_INT 11
20264: PUSH
20265: LD_INT 12
20267: PUSH
20268: LD_INT 13
20270: PUSH
20271: LD_INT 14
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 4
20285: PUSH
20286: LD_INT 5
20288: PUSH
20289: LD_INT 21
20291: PUSH
20292: LD_INT 23
20294: PUSH
20295: LD_INT 22
20297: PUSH
20298: LD_INT 24
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 20377
20318: LD_INT 3
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20376
20326: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20327: LD_ADDR_VAR 0 3
20331: PUSH
20332: LD_INT 13
20334: PUSH
20335: LD_INT 14
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: LD_INT 4
20346: PUSH
20347: LD_INT 5
20349: PUSH
20350: LD_INT 21
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 23
20358: PUSH
20359: LD_INT 24
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: ST_TO_ADDR
20374: GO 20377
20376: POP
// result := ( chassis in result ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_VAR 0 1
20386: PUSH
20387: LD_VAR 0 3
20391: IN
20392: ST_TO_ADDR
// end ;
20393: LD_VAR 0 3
20397: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20398: LD_INT 0
20400: PPUSH
// if not chassis or not weapon then
20401: LD_VAR 0 1
20405: NOT
20406: PUSH
20407: LD_VAR 0 2
20411: NOT
20412: OR
20413: IFFALSE 20417
// exit ;
20415: GO 21479
// case weapon of us_machine_gun :
20417: LD_VAR 0 2
20421: PUSH
20422: LD_INT 2
20424: DOUBLE
20425: EQUAL
20426: IFTRUE 20430
20428: GO 20460
20430: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 4
20447: PUSH
20448: LD_INT 5
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 21463
20460: LD_INT 3
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20498
20468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: ST_TO_ADDR
20496: GO 21463
20498: LD_INT 11
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20536
20506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20507: LD_ADDR_VAR 0 3
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 4
20523: PUSH
20524: LD_INT 5
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 21463
20536: LD_INT 4
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20570
20544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 21463
20570: LD_INT 5
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20604
20578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 3
20589: PUSH
20590: LD_INT 4
20592: PUSH
20593: LD_INT 5
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: ST_TO_ADDR
20602: GO 21463
20604: LD_INT 9
20606: DOUBLE
20607: EQUAL
20608: IFTRUE 20612
20610: GO 20638
20612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20613: LD_ADDR_VAR 0 3
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 4
20626: PUSH
20627: LD_INT 5
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: ST_TO_ADDR
20636: GO 21463
20638: LD_INT 7
20640: DOUBLE
20641: EQUAL
20642: IFTRUE 20646
20644: GO 20672
20646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20647: LD_ADDR_VAR 0 3
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: LD_INT 4
20660: PUSH
20661: LD_INT 5
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 21463
20672: LD_INT 12
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20706
20680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 3
20691: PUSH
20692: LD_INT 4
20694: PUSH
20695: LD_INT 5
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
20704: GO 21463
20706: LD_INT 13
20708: DOUBLE
20709: EQUAL
20710: IFTRUE 20714
20712: GO 20740
20714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20715: LD_ADDR_VAR 0 3
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: LD_INT 3
20725: PUSH
20726: LD_INT 4
20728: PUSH
20729: LD_INT 5
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 21463
20740: LD_INT 14
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20766
20748: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20749: LD_ADDR_VAR 0 3
20753: PUSH
20754: LD_INT 4
20756: PUSH
20757: LD_INT 5
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: ST_TO_ADDR
20764: GO 21463
20766: LD_INT 6
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20792
20774: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20775: LD_ADDR_VAR 0 3
20779: PUSH
20780: LD_INT 4
20782: PUSH
20783: LD_INT 5
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: ST_TO_ADDR
20790: GO 21463
20792: LD_INT 10
20794: DOUBLE
20795: EQUAL
20796: IFTRUE 20800
20798: GO 20818
20800: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20801: LD_ADDR_VAR 0 3
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: ST_TO_ADDR
20816: GO 21463
20818: LD_INT 22
20820: DOUBLE
20821: EQUAL
20822: IFTRUE 20826
20824: GO 20852
20826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20827: LD_ADDR_VAR 0 3
20831: PUSH
20832: LD_INT 11
20834: PUSH
20835: LD_INT 12
20837: PUSH
20838: LD_INT 13
20840: PUSH
20841: LD_INT 14
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: ST_TO_ADDR
20850: GO 21463
20852: LD_INT 23
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20886
20860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: LD_INT 11
20868: PUSH
20869: LD_INT 12
20871: PUSH
20872: LD_INT 13
20874: PUSH
20875: LD_INT 14
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
20884: GO 21463
20886: LD_INT 24
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20920
20894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20895: LD_ADDR_VAR 0 3
20899: PUSH
20900: LD_INT 11
20902: PUSH
20903: LD_INT 12
20905: PUSH
20906: LD_INT 13
20908: PUSH
20909: LD_INT 14
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: ST_TO_ADDR
20918: GO 21463
20920: LD_INT 30
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20954
20928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20929: LD_ADDR_VAR 0 3
20933: PUSH
20934: LD_INT 11
20936: PUSH
20937: LD_INT 12
20939: PUSH
20940: LD_INT 13
20942: PUSH
20943: LD_INT 14
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: ST_TO_ADDR
20952: GO 21463
20954: LD_INT 25
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 20980
20962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_INT 13
20970: PUSH
20971: LD_INT 14
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: ST_TO_ADDR
20978: GO 21463
20980: LD_INT 27
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 21006
20988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_INT 13
20996: PUSH
20997: LD_INT 14
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 21463
21006: LD_EXP 115
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21042
21016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 11
21024: PUSH
21025: LD_INT 12
21027: PUSH
21028: LD_INT 13
21030: PUSH
21031: LD_INT 14
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: ST_TO_ADDR
21040: GO 21463
21042: LD_INT 28
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21068
21050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 13
21058: PUSH
21059: LD_INT 14
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: ST_TO_ADDR
21066: GO 21463
21068: LD_INT 29
21070: DOUBLE
21071: EQUAL
21072: IFTRUE 21076
21074: GO 21094
21076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21077: LD_ADDR_VAR 0 3
21081: PUSH
21082: LD_INT 13
21084: PUSH
21085: LD_INT 14
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: ST_TO_ADDR
21092: GO 21463
21094: LD_INT 31
21096: DOUBLE
21097: EQUAL
21098: IFTRUE 21102
21100: GO 21120
21102: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21103: LD_ADDR_VAR 0 3
21107: PUSH
21108: LD_INT 13
21110: PUSH
21111: LD_INT 14
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 21463
21120: LD_INT 26
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21146
21128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 13
21136: PUSH
21137: LD_INT 14
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: ST_TO_ADDR
21144: GO 21463
21146: LD_INT 42
21148: DOUBLE
21149: EQUAL
21150: IFTRUE 21154
21152: GO 21180
21154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21155: LD_ADDR_VAR 0 3
21159: PUSH
21160: LD_INT 21
21162: PUSH
21163: LD_INT 22
21165: PUSH
21166: LD_INT 23
21168: PUSH
21169: LD_INT 24
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: ST_TO_ADDR
21178: GO 21463
21180: LD_INT 43
21182: DOUBLE
21183: EQUAL
21184: IFTRUE 21188
21186: GO 21214
21188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 22
21199: PUSH
21200: LD_INT 23
21202: PUSH
21203: LD_INT 24
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
21212: GO 21463
21214: LD_INT 44
21216: DOUBLE
21217: EQUAL
21218: IFTRUE 21222
21220: GO 21248
21222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21223: LD_ADDR_VAR 0 3
21227: PUSH
21228: LD_INT 21
21230: PUSH
21231: LD_INT 22
21233: PUSH
21234: LD_INT 23
21236: PUSH
21237: LD_INT 24
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: ST_TO_ADDR
21246: GO 21463
21248: LD_INT 45
21250: DOUBLE
21251: EQUAL
21252: IFTRUE 21256
21254: GO 21282
21256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21257: LD_ADDR_VAR 0 3
21261: PUSH
21262: LD_INT 21
21264: PUSH
21265: LD_INT 22
21267: PUSH
21268: LD_INT 23
21270: PUSH
21271: LD_INT 24
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: ST_TO_ADDR
21280: GO 21463
21282: LD_INT 49
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21316
21290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_INT 21
21298: PUSH
21299: LD_INT 22
21301: PUSH
21302: LD_INT 23
21304: PUSH
21305: LD_INT 24
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: ST_TO_ADDR
21314: GO 21463
21316: LD_INT 51
21318: DOUBLE
21319: EQUAL
21320: IFTRUE 21324
21322: GO 21350
21324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21325: LD_ADDR_VAR 0 3
21329: PUSH
21330: LD_INT 21
21332: PUSH
21333: LD_INT 22
21335: PUSH
21336: LD_INT 23
21338: PUSH
21339: LD_INT 24
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: ST_TO_ADDR
21348: GO 21463
21350: LD_INT 52
21352: DOUBLE
21353: EQUAL
21354: IFTRUE 21358
21356: GO 21384
21358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21359: LD_ADDR_VAR 0 3
21363: PUSH
21364: LD_INT 21
21366: PUSH
21367: LD_INT 22
21369: PUSH
21370: LD_INT 23
21372: PUSH
21373: LD_INT 24
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: ST_TO_ADDR
21382: GO 21463
21384: LD_INT 53
21386: DOUBLE
21387: EQUAL
21388: IFTRUE 21392
21390: GO 21410
21392: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_INT 23
21400: PUSH
21401: LD_INT 24
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: ST_TO_ADDR
21408: GO 21463
21410: LD_INT 46
21412: DOUBLE
21413: EQUAL
21414: IFTRUE 21418
21416: GO 21436
21418: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21419: LD_ADDR_VAR 0 3
21423: PUSH
21424: LD_INT 23
21426: PUSH
21427: LD_INT 24
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: ST_TO_ADDR
21434: GO 21463
21436: LD_INT 47
21438: DOUBLE
21439: EQUAL
21440: IFTRUE 21444
21442: GO 21462
21444: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21445: LD_ADDR_VAR 0 3
21449: PUSH
21450: LD_INT 23
21452: PUSH
21453: LD_INT 24
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: ST_TO_ADDR
21460: GO 21463
21462: POP
// result := ( chassis in result ) ;
21463: LD_ADDR_VAR 0 3
21467: PUSH
21468: LD_VAR 0 1
21472: PUSH
21473: LD_VAR 0 3
21477: IN
21478: ST_TO_ADDR
// end ;
21479: LD_VAR 0 3
21483: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21484: LD_INT 0
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
21491: PPUSH
21492: PPUSH
// result := array ;
21493: LD_ADDR_VAR 0 5
21497: PUSH
21498: LD_VAR 0 1
21502: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21503: LD_VAR 0 1
21507: NOT
21508: PUSH
21509: LD_VAR 0 2
21513: NOT
21514: OR
21515: PUSH
21516: LD_VAR 0 3
21520: NOT
21521: OR
21522: PUSH
21523: LD_VAR 0 2
21527: PUSH
21528: LD_VAR 0 1
21532: GREATER
21533: OR
21534: PUSH
21535: LD_VAR 0 3
21539: PUSH
21540: LD_VAR 0 1
21544: GREATER
21545: OR
21546: IFFALSE 21550
// exit ;
21548: GO 21846
// if direction then
21550: LD_VAR 0 4
21554: IFFALSE 21618
// begin d := 1 ;
21556: LD_ADDR_VAR 0 9
21560: PUSH
21561: LD_INT 1
21563: ST_TO_ADDR
// if i_from > i_to then
21564: LD_VAR 0 2
21568: PUSH
21569: LD_VAR 0 3
21573: GREATER
21574: IFFALSE 21600
// length := ( array - i_from ) + i_to else
21576: LD_ADDR_VAR 0 11
21580: PUSH
21581: LD_VAR 0 1
21585: PUSH
21586: LD_VAR 0 2
21590: MINUS
21591: PUSH
21592: LD_VAR 0 3
21596: PLUS
21597: ST_TO_ADDR
21598: GO 21616
// length := i_to - i_from ;
21600: LD_ADDR_VAR 0 11
21604: PUSH
21605: LD_VAR 0 3
21609: PUSH
21610: LD_VAR 0 2
21614: MINUS
21615: ST_TO_ADDR
// end else
21616: GO 21679
// begin d := - 1 ;
21618: LD_ADDR_VAR 0 9
21622: PUSH
21623: LD_INT 1
21625: NEG
21626: ST_TO_ADDR
// if i_from > i_to then
21627: LD_VAR 0 2
21631: PUSH
21632: LD_VAR 0 3
21636: GREATER
21637: IFFALSE 21657
// length := i_from - i_to else
21639: LD_ADDR_VAR 0 11
21643: PUSH
21644: LD_VAR 0 2
21648: PUSH
21649: LD_VAR 0 3
21653: MINUS
21654: ST_TO_ADDR
21655: GO 21679
// length := ( array - i_to ) + i_from ;
21657: LD_ADDR_VAR 0 11
21661: PUSH
21662: LD_VAR 0 1
21666: PUSH
21667: LD_VAR 0 3
21671: MINUS
21672: PUSH
21673: LD_VAR 0 2
21677: PLUS
21678: ST_TO_ADDR
// end ; if not length then
21679: LD_VAR 0 11
21683: NOT
21684: IFFALSE 21688
// exit ;
21686: GO 21846
// tmp := array ;
21688: LD_ADDR_VAR 0 10
21692: PUSH
21693: LD_VAR 0 1
21697: ST_TO_ADDR
// for i = 1 to length do
21698: LD_ADDR_VAR 0 6
21702: PUSH
21703: DOUBLE
21704: LD_INT 1
21706: DEC
21707: ST_TO_ADDR
21708: LD_VAR 0 11
21712: PUSH
21713: FOR_TO
21714: IFFALSE 21834
// begin for j = 1 to array do
21716: LD_ADDR_VAR 0 7
21720: PUSH
21721: DOUBLE
21722: LD_INT 1
21724: DEC
21725: ST_TO_ADDR
21726: LD_VAR 0 1
21730: PUSH
21731: FOR_TO
21732: IFFALSE 21820
// begin k := j + d ;
21734: LD_ADDR_VAR 0 8
21738: PUSH
21739: LD_VAR 0 7
21743: PUSH
21744: LD_VAR 0 9
21748: PLUS
21749: ST_TO_ADDR
// if k > array then
21750: LD_VAR 0 8
21754: PUSH
21755: LD_VAR 0 1
21759: GREATER
21760: IFFALSE 21770
// k := 1 ;
21762: LD_ADDR_VAR 0 8
21766: PUSH
21767: LD_INT 1
21769: ST_TO_ADDR
// if not k then
21770: LD_VAR 0 8
21774: NOT
21775: IFFALSE 21787
// k := array ;
21777: LD_ADDR_VAR 0 8
21781: PUSH
21782: LD_VAR 0 1
21786: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21787: LD_ADDR_VAR 0 10
21791: PUSH
21792: LD_VAR 0 10
21796: PPUSH
21797: LD_VAR 0 8
21801: PPUSH
21802: LD_VAR 0 1
21806: PUSH
21807: LD_VAR 0 7
21811: ARRAY
21812: PPUSH
21813: CALL_OW 1
21817: ST_TO_ADDR
// end ;
21818: GO 21731
21820: POP
21821: POP
// array := tmp ;
21822: LD_ADDR_VAR 0 1
21826: PUSH
21827: LD_VAR 0 10
21831: ST_TO_ADDR
// end ;
21832: GO 21713
21834: POP
21835: POP
// result := array ;
21836: LD_ADDR_VAR 0 5
21840: PUSH
21841: LD_VAR 0 1
21845: ST_TO_ADDR
// end ;
21846: LD_VAR 0 5
21850: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
// result := 0 ;
21855: LD_ADDR_VAR 0 3
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// if not array or not value in array then
21863: LD_VAR 0 1
21867: NOT
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: LD_VAR 0 1
21878: IN
21879: NOT
21880: OR
21881: IFFALSE 21885
// exit ;
21883: GO 21939
// for i = 1 to array do
21885: LD_ADDR_VAR 0 4
21889: PUSH
21890: DOUBLE
21891: LD_INT 1
21893: DEC
21894: ST_TO_ADDR
21895: LD_VAR 0 1
21899: PUSH
21900: FOR_TO
21901: IFFALSE 21937
// if value = array [ i ] then
21903: LD_VAR 0 2
21907: PUSH
21908: LD_VAR 0 1
21912: PUSH
21913: LD_VAR 0 4
21917: ARRAY
21918: EQUAL
21919: IFFALSE 21935
// begin result := i ;
21921: LD_ADDR_VAR 0 3
21925: PUSH
21926: LD_VAR 0 4
21930: ST_TO_ADDR
// exit ;
21931: POP
21932: POP
21933: GO 21939
// end ;
21935: GO 21900
21937: POP
21938: POP
// end ;
21939: LD_VAR 0 3
21943: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21944: LD_INT 0
21946: PPUSH
// vc_chassis := chassis ;
21947: LD_ADDR_OWVAR 37
21951: PUSH
21952: LD_VAR 0 1
21956: ST_TO_ADDR
// vc_engine := engine ;
21957: LD_ADDR_OWVAR 39
21961: PUSH
21962: LD_VAR 0 2
21966: ST_TO_ADDR
// vc_control := control ;
21967: LD_ADDR_OWVAR 38
21971: PUSH
21972: LD_VAR 0 3
21976: ST_TO_ADDR
// vc_weapon := weapon ;
21977: LD_ADDR_OWVAR 40
21981: PUSH
21982: LD_VAR 0 4
21986: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21987: LD_ADDR_OWVAR 41
21991: PUSH
21992: LD_VAR 0 5
21996: ST_TO_ADDR
// end ;
21997: LD_VAR 0 6
22001: RET
// export function WantPlant ( unit ) ; var task ; begin
22002: LD_INT 0
22004: PPUSH
22005: PPUSH
// result := false ;
22006: LD_ADDR_VAR 0 2
22010: PUSH
22011: LD_INT 0
22013: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22014: LD_ADDR_VAR 0 3
22018: PUSH
22019: LD_VAR 0 1
22023: PPUSH
22024: CALL_OW 437
22028: ST_TO_ADDR
// if task then
22029: LD_VAR 0 3
22033: IFFALSE 22061
// if task [ 1 ] [ 1 ] = p then
22035: LD_VAR 0 3
22039: PUSH
22040: LD_INT 1
22042: ARRAY
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PUSH
22048: LD_STRING p
22050: EQUAL
22051: IFFALSE 22061
// result := true ;
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: LD_INT 1
22060: ST_TO_ADDR
// end ;
22061: LD_VAR 0 2
22065: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
// if pos < 1 then
22072: LD_VAR 0 2
22076: PUSH
22077: LD_INT 1
22079: LESS
22080: IFFALSE 22084
// exit ;
22082: GO 22387
// if pos = 1 then
22084: LD_VAR 0 2
22088: PUSH
22089: LD_INT 1
22091: EQUAL
22092: IFFALSE 22125
// result := Replace ( arr , pos [ 1 ] , value ) else
22094: LD_ADDR_VAR 0 4
22098: PUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: LD_VAR 0 2
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: PPUSH
22113: LD_VAR 0 3
22117: PPUSH
22118: CALL_OW 1
22122: ST_TO_ADDR
22123: GO 22387
// begin tmp := arr ;
22125: LD_ADDR_VAR 0 6
22129: PUSH
22130: LD_VAR 0 1
22134: ST_TO_ADDR
// s_arr := [ tmp ] ;
22135: LD_ADDR_VAR 0 7
22139: PUSH
22140: LD_VAR 0 6
22144: PUSH
22145: EMPTY
22146: LIST
22147: ST_TO_ADDR
// for i = 1 to pos - 1 do
22148: LD_ADDR_VAR 0 5
22152: PUSH
22153: DOUBLE
22154: LD_INT 1
22156: DEC
22157: ST_TO_ADDR
22158: LD_VAR 0 2
22162: PUSH
22163: LD_INT 1
22165: MINUS
22166: PUSH
22167: FOR_TO
22168: IFFALSE 22213
// begin tmp := tmp [ pos [ i ] ] ;
22170: LD_ADDR_VAR 0 6
22174: PUSH
22175: LD_VAR 0 6
22179: PUSH
22180: LD_VAR 0 2
22184: PUSH
22185: LD_VAR 0 5
22189: ARRAY
22190: ARRAY
22191: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22192: LD_ADDR_VAR 0 7
22196: PUSH
22197: LD_VAR 0 7
22201: PUSH
22202: LD_VAR 0 6
22206: PUSH
22207: EMPTY
22208: LIST
22209: ADD
22210: ST_TO_ADDR
// end ;
22211: GO 22167
22213: POP
22214: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22215: LD_ADDR_VAR 0 6
22219: PUSH
22220: LD_VAR 0 6
22224: PPUSH
22225: LD_VAR 0 2
22229: PUSH
22230: LD_VAR 0 2
22234: ARRAY
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: CALL_OW 1
22245: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22246: LD_ADDR_VAR 0 7
22250: PUSH
22251: LD_VAR 0 7
22255: PPUSH
22256: LD_VAR 0 7
22260: PPUSH
22261: LD_VAR 0 6
22265: PPUSH
22266: CALL_OW 1
22270: ST_TO_ADDR
// for i = s_arr downto 2 do
22271: LD_ADDR_VAR 0 5
22275: PUSH
22276: DOUBLE
22277: LD_VAR 0 7
22281: INC
22282: ST_TO_ADDR
22283: LD_INT 2
22285: PUSH
22286: FOR_DOWNTO
22287: IFFALSE 22371
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22289: LD_ADDR_VAR 0 6
22293: PUSH
22294: LD_VAR 0 7
22298: PUSH
22299: LD_VAR 0 5
22303: PUSH
22304: LD_INT 1
22306: MINUS
22307: ARRAY
22308: PPUSH
22309: LD_VAR 0 2
22313: PUSH
22314: LD_VAR 0 5
22318: PUSH
22319: LD_INT 1
22321: MINUS
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 7
22328: PUSH
22329: LD_VAR 0 5
22333: ARRAY
22334: PPUSH
22335: CALL_OW 1
22339: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22340: LD_ADDR_VAR 0 7
22344: PUSH
22345: LD_VAR 0 7
22349: PPUSH
22350: LD_VAR 0 5
22354: PUSH
22355: LD_INT 1
22357: MINUS
22358: PPUSH
22359: LD_VAR 0 6
22363: PPUSH
22364: CALL_OW 1
22368: ST_TO_ADDR
// end ;
22369: GO 22286
22371: POP
22372: POP
// result := s_arr [ 1 ] ;
22373: LD_ADDR_VAR 0 4
22377: PUSH
22378: LD_VAR 0 7
22382: PUSH
22383: LD_INT 1
22385: ARRAY
22386: ST_TO_ADDR
// end ; end ;
22387: LD_VAR 0 4
22391: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
// if not list then
22396: LD_VAR 0 1
22400: NOT
22401: IFFALSE 22405
// exit ;
22403: GO 22496
// i := list [ pos1 ] ;
22405: LD_ADDR_VAR 0 5
22409: PUSH
22410: LD_VAR 0 1
22414: PUSH
22415: LD_VAR 0 2
22419: ARRAY
22420: ST_TO_ADDR
// if not i then
22421: LD_VAR 0 5
22425: NOT
22426: IFFALSE 22430
// exit ;
22428: GO 22496
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22430: LD_ADDR_VAR 0 1
22434: PUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: LD_VAR 0 1
22449: PUSH
22450: LD_VAR 0 3
22454: ARRAY
22455: PPUSH
22456: CALL_OW 1
22460: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22461: LD_ADDR_VAR 0 1
22465: PUSH
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_VAR 0 3
22475: PPUSH
22476: LD_VAR 0 5
22480: PPUSH
22481: CALL_OW 1
22485: ST_TO_ADDR
// result := list ;
22486: LD_ADDR_VAR 0 4
22490: PUSH
22491: LD_VAR 0 1
22495: ST_TO_ADDR
// end ;
22496: LD_VAR 0 4
22500: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22501: LD_INT 0
22503: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22504: LD_ADDR_VAR 0 5
22508: PUSH
22509: LD_VAR 0 1
22513: PPUSH
22514: CALL_OW 250
22518: PPUSH
22519: LD_VAR 0 1
22523: PPUSH
22524: CALL_OW 251
22528: PPUSH
22529: LD_VAR 0 2
22533: PPUSH
22534: LD_VAR 0 3
22538: PPUSH
22539: LD_VAR 0 4
22543: PPUSH
22544: CALL 22554 0 5
22548: ST_TO_ADDR
// end ;
22549: LD_VAR 0 5
22553: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22554: LD_INT 0
22556: PPUSH
22557: PPUSH
22558: PPUSH
22559: PPUSH
// if not list then
22560: LD_VAR 0 3
22564: NOT
22565: IFFALSE 22569
// exit ;
22567: GO 22957
// result := [ ] ;
22569: LD_ADDR_VAR 0 6
22573: PUSH
22574: EMPTY
22575: ST_TO_ADDR
// for i in list do
22576: LD_ADDR_VAR 0 7
22580: PUSH
22581: LD_VAR 0 3
22585: PUSH
22586: FOR_IN
22587: IFFALSE 22789
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22589: LD_ADDR_VAR 0 9
22593: PUSH
22594: LD_VAR 0 7
22598: PPUSH
22599: LD_VAR 0 1
22603: PPUSH
22604: LD_VAR 0 2
22608: PPUSH
22609: CALL_OW 297
22613: ST_TO_ADDR
// if not result then
22614: LD_VAR 0 6
22618: NOT
22619: IFFALSE 22645
// result := [ [ i , tmp ] ] else
22621: LD_ADDR_VAR 0 6
22625: PUSH
22626: LD_VAR 0 7
22630: PUSH
22631: LD_VAR 0 9
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: ST_TO_ADDR
22643: GO 22787
// begin if result [ result ] [ 2 ] < tmp then
22645: LD_VAR 0 6
22649: PUSH
22650: LD_VAR 0 6
22654: ARRAY
22655: PUSH
22656: LD_INT 2
22658: ARRAY
22659: PUSH
22660: LD_VAR 0 9
22664: LESS
22665: IFFALSE 22707
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22667: LD_ADDR_VAR 0 6
22671: PUSH
22672: LD_VAR 0 6
22676: PPUSH
22677: LD_VAR 0 6
22681: PUSH
22682: LD_INT 1
22684: PLUS
22685: PPUSH
22686: LD_VAR 0 7
22690: PUSH
22691: LD_VAR 0 9
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PPUSH
22700: CALL_OW 2
22704: ST_TO_ADDR
22705: GO 22787
// for j = 1 to result do
22707: LD_ADDR_VAR 0 8
22711: PUSH
22712: DOUBLE
22713: LD_INT 1
22715: DEC
22716: ST_TO_ADDR
22717: LD_VAR 0 6
22721: PUSH
22722: FOR_TO
22723: IFFALSE 22785
// begin if tmp < result [ j ] [ 2 ] then
22725: LD_VAR 0 9
22729: PUSH
22730: LD_VAR 0 6
22734: PUSH
22735: LD_VAR 0 8
22739: ARRAY
22740: PUSH
22741: LD_INT 2
22743: ARRAY
22744: LESS
22745: IFFALSE 22783
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22747: LD_ADDR_VAR 0 6
22751: PUSH
22752: LD_VAR 0 6
22756: PPUSH
22757: LD_VAR 0 8
22761: PPUSH
22762: LD_VAR 0 7
22766: PUSH
22767: LD_VAR 0 9
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PPUSH
22776: CALL_OW 2
22780: ST_TO_ADDR
// break ;
22781: GO 22785
// end ; end ;
22783: GO 22722
22785: POP
22786: POP
// end ; end ;
22787: GO 22586
22789: POP
22790: POP
// if result and not asc then
22791: LD_VAR 0 6
22795: PUSH
22796: LD_VAR 0 4
22800: NOT
22801: AND
22802: IFFALSE 22877
// begin tmp := result ;
22804: LD_ADDR_VAR 0 9
22808: PUSH
22809: LD_VAR 0 6
22813: ST_TO_ADDR
// for i = tmp downto 1 do
22814: LD_ADDR_VAR 0 7
22818: PUSH
22819: DOUBLE
22820: LD_VAR 0 9
22824: INC
22825: ST_TO_ADDR
22826: LD_INT 1
22828: PUSH
22829: FOR_DOWNTO
22830: IFFALSE 22875
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22832: LD_ADDR_VAR 0 6
22836: PUSH
22837: LD_VAR 0 6
22841: PPUSH
22842: LD_VAR 0 9
22846: PUSH
22847: LD_VAR 0 7
22851: MINUS
22852: PUSH
22853: LD_INT 1
22855: PLUS
22856: PPUSH
22857: LD_VAR 0 9
22861: PUSH
22862: LD_VAR 0 7
22866: ARRAY
22867: PPUSH
22868: CALL_OW 1
22872: ST_TO_ADDR
22873: GO 22829
22875: POP
22876: POP
// end ; tmp := [ ] ;
22877: LD_ADDR_VAR 0 9
22881: PUSH
22882: EMPTY
22883: ST_TO_ADDR
// if mode then
22884: LD_VAR 0 5
22888: IFFALSE 22957
// begin for i = 1 to result do
22890: LD_ADDR_VAR 0 7
22894: PUSH
22895: DOUBLE
22896: LD_INT 1
22898: DEC
22899: ST_TO_ADDR
22900: LD_VAR 0 6
22904: PUSH
22905: FOR_TO
22906: IFFALSE 22945
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22908: LD_ADDR_VAR 0 9
22912: PUSH
22913: LD_VAR 0 9
22917: PPUSH
22918: LD_VAR 0 7
22922: PPUSH
22923: LD_VAR 0 6
22927: PUSH
22928: LD_VAR 0 7
22932: ARRAY
22933: PUSH
22934: LD_INT 1
22936: ARRAY
22937: PPUSH
22938: CALL_OW 1
22942: ST_TO_ADDR
22943: GO 22905
22945: POP
22946: POP
// result := tmp ;
22947: LD_ADDR_VAR 0 6
22951: PUSH
22952: LD_VAR 0 9
22956: ST_TO_ADDR
// end ; end ;
22957: LD_VAR 0 6
22961: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22962: LD_INT 0
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22970: LD_ADDR_VAR 0 5
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: EMPTY
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// if not x or not y then
22992: LD_VAR 0 2
22996: NOT
22997: PUSH
22998: LD_VAR 0 3
23002: NOT
23003: OR
23004: IFFALSE 23008
// exit ;
23006: GO 24660
// if not range then
23008: LD_VAR 0 4
23012: NOT
23013: IFFALSE 23023
// range := 10 ;
23015: LD_ADDR_VAR 0 4
23019: PUSH
23020: LD_INT 10
23022: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23023: LD_ADDR_VAR 0 8
23027: PUSH
23028: LD_INT 81
23030: PUSH
23031: LD_VAR 0 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 92
23042: PUSH
23043: LD_VAR 0 2
23047: PUSH
23048: LD_VAR 0 3
23052: PUSH
23053: LD_VAR 0 4
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 3
23066: PUSH
23067: LD_INT 21
23069: PUSH
23070: LD_INT 3
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: PPUSH
23086: CALL_OW 69
23090: ST_TO_ADDR
// if not tmp then
23091: LD_VAR 0 8
23095: NOT
23096: IFFALSE 23100
// exit ;
23098: GO 24660
// for i in tmp do
23100: LD_ADDR_VAR 0 6
23104: PUSH
23105: LD_VAR 0 8
23109: PUSH
23110: FOR_IN
23111: IFFALSE 24635
// begin points := [ 0 , 0 , 0 ] ;
23113: LD_ADDR_VAR 0 9
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: ST_TO_ADDR
// bpoints := 1 ;
23132: LD_ADDR_VAR 0 10
23136: PUSH
23137: LD_INT 1
23139: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23140: LD_VAR 0 6
23144: PPUSH
23145: CALL_OW 247
23149: PUSH
23150: LD_INT 1
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23736
23158: POP
// begin if GetClass ( i ) = 1 then
23159: LD_VAR 0 6
23163: PPUSH
23164: CALL_OW 257
23168: PUSH
23169: LD_INT 1
23171: EQUAL
23172: IFFALSE 23193
// points := [ 10 , 5 , 3 ] ;
23174: LD_ADDR_VAR 0 9
23178: PUSH
23179: LD_INT 10
23181: PUSH
23182: LD_INT 5
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23193: LD_VAR 0 6
23197: PPUSH
23198: CALL_OW 257
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: LD_INT 3
23208: PUSH
23209: LD_INT 4
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: IN
23217: IFFALSE 23238
// points := [ 3 , 2 , 1 ] ;
23219: LD_ADDR_VAR 0 9
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23238: LD_VAR 0 6
23242: PPUSH
23243: CALL_OW 257
23247: PUSH
23248: LD_INT 5
23250: EQUAL
23251: IFFALSE 23272
// points := [ 130 , 5 , 2 ] ;
23253: LD_ADDR_VAR 0 9
23257: PUSH
23258: LD_INT 130
23260: PUSH
23261: LD_INT 5
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23272: LD_VAR 0 6
23276: PPUSH
23277: CALL_OW 257
23281: PUSH
23282: LD_INT 8
23284: EQUAL
23285: IFFALSE 23306
// points := [ 35 , 35 , 30 ] ;
23287: LD_ADDR_VAR 0 9
23291: PUSH
23292: LD_INT 35
23294: PUSH
23295: LD_INT 35
23297: PUSH
23298: LD_INT 30
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23306: LD_VAR 0 6
23310: PPUSH
23311: CALL_OW 257
23315: PUSH
23316: LD_INT 9
23318: EQUAL
23319: IFFALSE 23340
// points := [ 20 , 55 , 40 ] ;
23321: LD_ADDR_VAR 0 9
23325: PUSH
23326: LD_INT 20
23328: PUSH
23329: LD_INT 55
23331: PUSH
23332: LD_INT 40
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23340: LD_VAR 0 6
23344: PPUSH
23345: CALL_OW 257
23349: PUSH
23350: LD_INT 12
23352: PUSH
23353: LD_INT 16
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: IN
23360: IFFALSE 23381
// points := [ 5 , 3 , 2 ] ;
23362: LD_ADDR_VAR 0 9
23366: PUSH
23367: LD_INT 5
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: LIST
23380: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23381: LD_VAR 0 6
23385: PPUSH
23386: CALL_OW 257
23390: PUSH
23391: LD_INT 17
23393: EQUAL
23394: IFFALSE 23415
// points := [ 100 , 50 , 75 ] ;
23396: LD_ADDR_VAR 0 9
23400: PUSH
23401: LD_INT 100
23403: PUSH
23404: LD_INT 50
23406: PUSH
23407: LD_INT 75
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23415: LD_VAR 0 6
23419: PPUSH
23420: CALL_OW 257
23424: PUSH
23425: LD_INT 15
23427: EQUAL
23428: IFFALSE 23449
// points := [ 10 , 5 , 3 ] ;
23430: LD_ADDR_VAR 0 9
23434: PUSH
23435: LD_INT 10
23437: PUSH
23438: LD_INT 5
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23449: LD_VAR 0 6
23453: PPUSH
23454: CALL_OW 257
23458: PUSH
23459: LD_INT 14
23461: EQUAL
23462: IFFALSE 23483
// points := [ 10 , 0 , 0 ] ;
23464: LD_ADDR_VAR 0 9
23468: PUSH
23469: LD_INT 10
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23483: LD_VAR 0 6
23487: PPUSH
23488: CALL_OW 257
23492: PUSH
23493: LD_INT 11
23495: EQUAL
23496: IFFALSE 23517
// points := [ 30 , 10 , 5 ] ;
23498: LD_ADDR_VAR 0 9
23502: PUSH
23503: LD_INT 30
23505: PUSH
23506: LD_INT 10
23508: PUSH
23509: LD_INT 5
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23517: LD_VAR 0 1
23521: PPUSH
23522: LD_INT 5
23524: PPUSH
23525: CALL_OW 321
23529: PUSH
23530: LD_INT 2
23532: EQUAL
23533: IFFALSE 23550
// bpoints := bpoints * 1.8 ;
23535: LD_ADDR_VAR 0 10
23539: PUSH
23540: LD_VAR 0 10
23544: PUSH
23545: LD_REAL  1.80000000000000E+0000
23548: MUL
23549: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23550: LD_VAR 0 6
23554: PPUSH
23555: CALL_OW 257
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: LD_INT 3
23568: PUSH
23569: LD_INT 4
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: IN
23578: PUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: LD_INT 51
23586: PPUSH
23587: CALL_OW 321
23591: PUSH
23592: LD_INT 2
23594: EQUAL
23595: AND
23596: IFFALSE 23613
// bpoints := bpoints * 1.2 ;
23598: LD_ADDR_VAR 0 10
23602: PUSH
23603: LD_VAR 0 10
23607: PUSH
23608: LD_REAL  1.20000000000000E+0000
23611: MUL
23612: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23613: LD_VAR 0 6
23617: PPUSH
23618: CALL_OW 257
23622: PUSH
23623: LD_INT 5
23625: PUSH
23626: LD_INT 7
23628: PUSH
23629: LD_INT 9
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: IN
23637: PUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 52
23645: PPUSH
23646: CALL_OW 321
23650: PUSH
23651: LD_INT 2
23653: EQUAL
23654: AND
23655: IFFALSE 23672
// bpoints := bpoints * 1.5 ;
23657: LD_ADDR_VAR 0 10
23661: PUSH
23662: LD_VAR 0 10
23666: PUSH
23667: LD_REAL  1.50000000000000E+0000
23670: MUL
23671: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23672: LD_VAR 0 1
23676: PPUSH
23677: LD_INT 66
23679: PPUSH
23680: CALL_OW 321
23684: PUSH
23685: LD_INT 2
23687: EQUAL
23688: IFFALSE 23705
// bpoints := bpoints * 1.1 ;
23690: LD_ADDR_VAR 0 10
23694: PUSH
23695: LD_VAR 0 10
23699: PUSH
23700: LD_REAL  1.10000000000000E+0000
23703: MUL
23704: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23705: LD_ADDR_VAR 0 10
23709: PUSH
23710: LD_VAR 0 10
23714: PUSH
23715: LD_VAR 0 6
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: CALL_OW 259
23727: PUSH
23728: LD_REAL  1.15000000000000E+0000
23731: MUL
23732: MUL
23733: ST_TO_ADDR
// end ; unit_vehicle :
23734: GO 24564
23736: LD_INT 2
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 24552
23744: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23745: LD_VAR 0 6
23749: PPUSH
23750: CALL_OW 264
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 42
23760: PUSH
23761: LD_INT 24
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: IN
23769: IFFALSE 23790
// points := [ 25 , 5 , 3 ] ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_INT 25
23778: PUSH
23779: LD_INT 5
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23790: LD_VAR 0 6
23794: PPUSH
23795: CALL_OW 264
23799: PUSH
23800: LD_INT 4
23802: PUSH
23803: LD_INT 43
23805: PUSH
23806: LD_INT 25
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: IN
23814: IFFALSE 23835
// points := [ 40 , 15 , 5 ] ;
23816: LD_ADDR_VAR 0 9
23820: PUSH
23821: LD_INT 40
23823: PUSH
23824: LD_INT 15
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23835: LD_VAR 0 6
23839: PPUSH
23840: CALL_OW 264
23844: PUSH
23845: LD_INT 3
23847: PUSH
23848: LD_INT 23
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: IN
23855: IFFALSE 23876
// points := [ 7 , 25 , 8 ] ;
23857: LD_ADDR_VAR 0 9
23861: PUSH
23862: LD_INT 7
23864: PUSH
23865: LD_INT 25
23867: PUSH
23868: LD_INT 8
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23876: LD_VAR 0 6
23880: PPUSH
23881: CALL_OW 264
23885: PUSH
23886: LD_INT 5
23888: PUSH
23889: LD_INT 27
23891: PUSH
23892: LD_INT 44
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: IN
23900: IFFALSE 23921
// points := [ 14 , 50 , 16 ] ;
23902: LD_ADDR_VAR 0 9
23906: PUSH
23907: LD_INT 14
23909: PUSH
23910: LD_INT 50
23912: PUSH
23913: LD_INT 16
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23921: LD_VAR 0 6
23925: PPUSH
23926: CALL_OW 264
23930: PUSH
23931: LD_INT 6
23933: PUSH
23934: LD_INT 46
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: IN
23941: IFFALSE 23962
// points := [ 32 , 120 , 70 ] ;
23943: LD_ADDR_VAR 0 9
23947: PUSH
23948: LD_INT 32
23950: PUSH
23951: LD_INT 120
23953: PUSH
23954: LD_INT 70
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23962: LD_VAR 0 6
23966: PPUSH
23967: CALL_OW 264
23971: PUSH
23972: LD_INT 7
23974: PUSH
23975: LD_INT 28
23977: PUSH
23978: LD_INT 45
23980: PUSH
23981: LD_EXP 115
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: IN
23992: IFFALSE 24013
// points := [ 35 , 20 , 45 ] ;
23994: LD_ADDR_VAR 0 9
23998: PUSH
23999: LD_INT 35
24001: PUSH
24002: LD_INT 20
24004: PUSH
24005: LD_INT 45
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24013: LD_VAR 0 6
24017: PPUSH
24018: CALL_OW 264
24022: PUSH
24023: LD_INT 47
24025: PUSH
24026: EMPTY
24027: LIST
24028: IN
24029: IFFALSE 24050
// points := [ 67 , 45 , 75 ] ;
24031: LD_ADDR_VAR 0 9
24035: PUSH
24036: LD_INT 67
24038: PUSH
24039: LD_INT 45
24041: PUSH
24042: LD_INT 75
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24050: LD_VAR 0 6
24054: PPUSH
24055: CALL_OW 264
24059: PUSH
24060: LD_INT 26
24062: PUSH
24063: EMPTY
24064: LIST
24065: IN
24066: IFFALSE 24087
// points := [ 120 , 30 , 80 ] ;
24068: LD_ADDR_VAR 0 9
24072: PUSH
24073: LD_INT 120
24075: PUSH
24076: LD_INT 30
24078: PUSH
24079: LD_INT 80
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24087: LD_VAR 0 6
24091: PPUSH
24092: CALL_OW 264
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: EMPTY
24101: LIST
24102: IN
24103: IFFALSE 24124
// points := [ 40 , 1 , 1 ] ;
24105: LD_ADDR_VAR 0 9
24109: PUSH
24110: LD_INT 40
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24124: LD_VAR 0 6
24128: PPUSH
24129: CALL_OW 264
24133: PUSH
24134: LD_INT 29
24136: PUSH
24137: EMPTY
24138: LIST
24139: IN
24140: IFFALSE 24161
// points := [ 70 , 200 , 400 ] ;
24142: LD_ADDR_VAR 0 9
24146: PUSH
24147: LD_INT 70
24149: PUSH
24150: LD_INT 200
24152: PUSH
24153: LD_INT 400
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24161: LD_VAR 0 6
24165: PPUSH
24166: CALL_OW 264
24170: PUSH
24171: LD_INT 14
24173: PUSH
24174: LD_INT 53
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: IN
24181: IFFALSE 24202
// points := [ 40 , 10 , 20 ] ;
24183: LD_ADDR_VAR 0 9
24187: PUSH
24188: LD_INT 40
24190: PUSH
24191: LD_INT 10
24193: PUSH
24194: LD_INT 20
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24202: LD_VAR 0 6
24206: PPUSH
24207: CALL_OW 264
24211: PUSH
24212: LD_INT 9
24214: PUSH
24215: EMPTY
24216: LIST
24217: IN
24218: IFFALSE 24239
// points := [ 5 , 70 , 20 ] ;
24220: LD_ADDR_VAR 0 9
24224: PUSH
24225: LD_INT 5
24227: PUSH
24228: LD_INT 70
24230: PUSH
24231: LD_INT 20
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24239: LD_VAR 0 6
24243: PPUSH
24244: CALL_OW 264
24248: PUSH
24249: LD_INT 10
24251: PUSH
24252: EMPTY
24253: LIST
24254: IN
24255: IFFALSE 24276
// points := [ 35 , 110 , 70 ] ;
24257: LD_ADDR_VAR 0 9
24261: PUSH
24262: LD_INT 35
24264: PUSH
24265: LD_INT 110
24267: PUSH
24268: LD_INT 70
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24276: LD_VAR 0 6
24280: PPUSH
24281: CALL_OW 265
24285: PUSH
24286: LD_INT 25
24288: EQUAL
24289: IFFALSE 24310
// points := [ 80 , 65 , 100 ] ;
24291: LD_ADDR_VAR 0 9
24295: PUSH
24296: LD_INT 80
24298: PUSH
24299: LD_INT 65
24301: PUSH
24302: LD_INT 100
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24310: LD_VAR 0 6
24314: PPUSH
24315: CALL_OW 263
24319: PUSH
24320: LD_INT 1
24322: EQUAL
24323: IFFALSE 24358
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24325: LD_ADDR_VAR 0 10
24329: PUSH
24330: LD_VAR 0 10
24334: PUSH
24335: LD_VAR 0 6
24339: PPUSH
24340: CALL_OW 311
24344: PPUSH
24345: LD_INT 3
24347: PPUSH
24348: CALL_OW 259
24352: PUSH
24353: LD_INT 4
24355: MUL
24356: MUL
24357: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24358: LD_VAR 0 6
24362: PPUSH
24363: CALL_OW 263
24367: PUSH
24368: LD_INT 2
24370: EQUAL
24371: IFFALSE 24422
// begin j := IsControledBy ( i ) ;
24373: LD_ADDR_VAR 0 7
24377: PUSH
24378: LD_VAR 0 6
24382: PPUSH
24383: CALL_OW 312
24387: ST_TO_ADDR
// if j then
24388: LD_VAR 0 7
24392: IFFALSE 24422
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24394: LD_ADDR_VAR 0 10
24398: PUSH
24399: LD_VAR 0 10
24403: PUSH
24404: LD_VAR 0 7
24408: PPUSH
24409: LD_INT 3
24411: PPUSH
24412: CALL_OW 259
24416: PUSH
24417: LD_INT 3
24419: MUL
24420: MUL
24421: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24422: LD_VAR 0 6
24426: PPUSH
24427: CALL_OW 264
24431: PUSH
24432: LD_INT 5
24434: PUSH
24435: LD_INT 6
24437: PUSH
24438: LD_INT 46
24440: PUSH
24441: LD_INT 44
24443: PUSH
24444: LD_INT 47
24446: PUSH
24447: LD_INT 45
24449: PUSH
24450: LD_INT 28
24452: PUSH
24453: LD_INT 7
24455: PUSH
24456: LD_INT 27
24458: PUSH
24459: LD_INT 29
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: IN
24474: PUSH
24475: LD_VAR 0 1
24479: PPUSH
24480: LD_INT 52
24482: PPUSH
24483: CALL_OW 321
24487: PUSH
24488: LD_INT 2
24490: EQUAL
24491: AND
24492: IFFALSE 24509
// bpoints := bpoints * 1.2 ;
24494: LD_ADDR_VAR 0 10
24498: PUSH
24499: LD_VAR 0 10
24503: PUSH
24504: LD_REAL  1.20000000000000E+0000
24507: MUL
24508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24509: LD_VAR 0 6
24513: PPUSH
24514: CALL_OW 264
24518: PUSH
24519: LD_INT 6
24521: PUSH
24522: LD_INT 46
24524: PUSH
24525: LD_INT 47
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: IN
24533: IFFALSE 24550
// bpoints := bpoints * 1.2 ;
24535: LD_ADDR_VAR 0 10
24539: PUSH
24540: LD_VAR 0 10
24544: PUSH
24545: LD_REAL  1.20000000000000E+0000
24548: MUL
24549: ST_TO_ADDR
// end ; unit_building :
24550: GO 24564
24552: LD_INT 3
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24563
24560: POP
// ; end ;
24561: GO 24564
24563: POP
// for j = 1 to 3 do
24564: LD_ADDR_VAR 0 7
24568: PUSH
24569: DOUBLE
24570: LD_INT 1
24572: DEC
24573: ST_TO_ADDR
24574: LD_INT 3
24576: PUSH
24577: FOR_TO
24578: IFFALSE 24631
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24580: LD_ADDR_VAR 0 5
24584: PUSH
24585: LD_VAR 0 5
24589: PPUSH
24590: LD_VAR 0 7
24594: PPUSH
24595: LD_VAR 0 5
24599: PUSH
24600: LD_VAR 0 7
24604: ARRAY
24605: PUSH
24606: LD_VAR 0 9
24610: PUSH
24611: LD_VAR 0 7
24615: ARRAY
24616: PUSH
24617: LD_VAR 0 10
24621: MUL
24622: PLUS
24623: PPUSH
24624: CALL_OW 1
24628: ST_TO_ADDR
24629: GO 24577
24631: POP
24632: POP
// end ;
24633: GO 23110
24635: POP
24636: POP
// result := Replace ( result , 4 , tmp ) ;
24637: LD_ADDR_VAR 0 5
24641: PUSH
24642: LD_VAR 0 5
24646: PPUSH
24647: LD_INT 4
24649: PPUSH
24650: LD_VAR 0 8
24654: PPUSH
24655: CALL_OW 1
24659: ST_TO_ADDR
// end ;
24660: LD_VAR 0 5
24664: RET
// export function DangerAtRange ( unit , range ) ; begin
24665: LD_INT 0
24667: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24668: LD_ADDR_VAR 0 3
24672: PUSH
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL_OW 255
24682: PPUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 250
24692: PPUSH
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 251
24702: PPUSH
24703: LD_VAR 0 2
24707: PPUSH
24708: CALL 22962 0 4
24712: ST_TO_ADDR
// end ;
24713: LD_VAR 0 3
24717: RET
// export function DangerInArea ( side , area ) ; begin
24718: LD_INT 0
24720: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24721: LD_ADDR_VAR 0 3
24725: PUSH
24726: LD_VAR 0 2
24730: PPUSH
24731: LD_INT 81
24733: PUSH
24734: LD_VAR 0 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 70
24747: ST_TO_ADDR
// end ;
24748: LD_VAR 0 3
24752: RET
// export function IsExtension ( b ) ; begin
24753: LD_INT 0
24755: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24756: LD_ADDR_VAR 0 2
24760: PUSH
24761: LD_VAR 0 1
24765: PUSH
24766: LD_INT 23
24768: PUSH
24769: LD_INT 20
24771: PUSH
24772: LD_INT 22
24774: PUSH
24775: LD_INT 17
24777: PUSH
24778: LD_INT 24
24780: PUSH
24781: LD_INT 21
24783: PUSH
24784: LD_INT 19
24786: PUSH
24787: LD_INT 16
24789: PUSH
24790: LD_INT 25
24792: PUSH
24793: LD_INT 18
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: IN
24808: ST_TO_ADDR
// end ;
24809: LD_VAR 0 2
24813: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24814: LD_INT 0
24816: PPUSH
24817: PPUSH
24818: PPUSH
// result := [ ] ;
24819: LD_ADDR_VAR 0 4
24823: PUSH
24824: EMPTY
24825: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24826: LD_ADDR_VAR 0 5
24830: PUSH
24831: LD_VAR 0 2
24835: PPUSH
24836: LD_INT 21
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PPUSH
24846: CALL_OW 70
24850: ST_TO_ADDR
// if not tmp then
24851: LD_VAR 0 5
24855: NOT
24856: IFFALSE 24860
// exit ;
24858: GO 24924
// if checkLink then
24860: LD_VAR 0 3
24864: IFFALSE 24914
// begin for i in tmp do
24866: LD_ADDR_VAR 0 6
24870: PUSH
24871: LD_VAR 0 5
24875: PUSH
24876: FOR_IN
24877: IFFALSE 24912
// if GetBase ( i ) <> base then
24879: LD_VAR 0 6
24883: PPUSH
24884: CALL_OW 274
24888: PUSH
24889: LD_VAR 0 1
24893: NONEQUAL
24894: IFFALSE 24910
// ComLinkToBase ( base , i ) ;
24896: LD_VAR 0 1
24900: PPUSH
24901: LD_VAR 0 6
24905: PPUSH
24906: CALL_OW 169
24910: GO 24876
24912: POP
24913: POP
// end ; result := tmp ;
24914: LD_ADDR_VAR 0 4
24918: PUSH
24919: LD_VAR 0 5
24923: ST_TO_ADDR
// end ;
24924: LD_VAR 0 4
24928: RET
// export function ComComplete ( units , b ) ; var i ; begin
24929: LD_INT 0
24931: PPUSH
24932: PPUSH
// if not units then
24933: LD_VAR 0 1
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 25032
// for i in units do
24942: LD_ADDR_VAR 0 4
24946: PUSH
24947: LD_VAR 0 1
24951: PUSH
24952: FOR_IN
24953: IFFALSE 25030
// if BuildingStatus ( b ) = bs_build then
24955: LD_VAR 0 2
24959: PPUSH
24960: CALL_OW 461
24964: PUSH
24965: LD_INT 1
24967: EQUAL
24968: IFFALSE 25028
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24970: LD_VAR 0 4
24974: PPUSH
24975: LD_STRING h
24977: PUSH
24978: LD_VAR 0 2
24982: PPUSH
24983: CALL_OW 250
24987: PUSH
24988: LD_VAR 0 2
24992: PPUSH
24993: CALL_OW 251
24997: PUSH
24998: LD_VAR 0 2
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: PPUSH
25024: CALL_OW 446
25028: GO 24952
25030: POP
25031: POP
// end ;
25032: LD_VAR 0 3
25036: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25037: LD_INT 0
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25045: LD_VAR 0 1
25049: NOT
25050: PUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL_OW 263
25060: PUSH
25061: LD_INT 2
25063: NONEQUAL
25064: OR
25065: IFFALSE 25069
// exit ;
25067: GO 25385
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25069: LD_ADDR_VAR 0 6
25073: PUSH
25074: LD_INT 22
25076: PUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 255
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: LD_INT 30
25096: PUSH
25097: LD_INT 36
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 34
25106: PUSH
25107: LD_INT 31
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 69
25127: ST_TO_ADDR
// if not tmp then
25128: LD_VAR 0 6
25132: NOT
25133: IFFALSE 25137
// exit ;
25135: GO 25385
// result := [ ] ;
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: EMPTY
25143: ST_TO_ADDR
// for i in tmp do
25144: LD_ADDR_VAR 0 3
25148: PUSH
25149: LD_VAR 0 6
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25226
// begin t := UnitsInside ( i ) ;
25157: LD_ADDR_VAR 0 4
25161: PUSH
25162: LD_VAR 0 3
25166: PPUSH
25167: CALL_OW 313
25171: ST_TO_ADDR
// if t then
25172: LD_VAR 0 4
25176: IFFALSE 25224
// for j in t do
25178: LD_ADDR_VAR 0 7
25182: PUSH
25183: LD_VAR 0 4
25187: PUSH
25188: FOR_IN
25189: IFFALSE 25222
// result := Replace ( result , result + 1 , j ) ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: LD_VAR 0 2
25200: PPUSH
25201: LD_VAR 0 2
25205: PUSH
25206: LD_INT 1
25208: PLUS
25209: PPUSH
25210: LD_VAR 0 7
25214: PPUSH
25215: CALL_OW 1
25219: ST_TO_ADDR
25220: GO 25188
25222: POP
25223: POP
// end ;
25224: GO 25154
25226: POP
25227: POP
// if not result then
25228: LD_VAR 0 2
25232: NOT
25233: IFFALSE 25237
// exit ;
25235: GO 25385
// mech := result [ 1 ] ;
25237: LD_ADDR_VAR 0 5
25241: PUSH
25242: LD_VAR 0 2
25246: PUSH
25247: LD_INT 1
25249: ARRAY
25250: ST_TO_ADDR
// if result > 1 then
25251: LD_VAR 0 2
25255: PUSH
25256: LD_INT 1
25258: GREATER
25259: IFFALSE 25371
// begin for i = 2 to result do
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: DOUBLE
25267: LD_INT 2
25269: DEC
25270: ST_TO_ADDR
25271: LD_VAR 0 2
25275: PUSH
25276: FOR_TO
25277: IFFALSE 25369
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25279: LD_ADDR_VAR 0 4
25283: PUSH
25284: LD_VAR 0 2
25288: PUSH
25289: LD_VAR 0 3
25293: ARRAY
25294: PPUSH
25295: LD_INT 3
25297: PPUSH
25298: CALL_OW 259
25302: PUSH
25303: LD_VAR 0 2
25307: PUSH
25308: LD_VAR 0 3
25312: ARRAY
25313: PPUSH
25314: CALL_OW 432
25318: MINUS
25319: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25320: LD_VAR 0 4
25324: PUSH
25325: LD_VAR 0 5
25329: PPUSH
25330: LD_INT 3
25332: PPUSH
25333: CALL_OW 259
25337: PUSH
25338: LD_VAR 0 5
25342: PPUSH
25343: CALL_OW 432
25347: MINUS
25348: GREATEREQUAL
25349: IFFALSE 25367
// mech := result [ i ] ;
25351: LD_ADDR_VAR 0 5
25355: PUSH
25356: LD_VAR 0 2
25360: PUSH
25361: LD_VAR 0 3
25365: ARRAY
25366: ST_TO_ADDR
// end ;
25367: GO 25276
25369: POP
25370: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25371: LD_VAR 0 1
25375: PPUSH
25376: LD_VAR 0 5
25380: PPUSH
25381: CALL_OW 135
// end ;
25385: LD_VAR 0 2
25389: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
25401: PPUSH
25402: PPUSH
25403: PPUSH
25404: PPUSH
// result := [ ] ;
25405: LD_ADDR_VAR 0 7
25409: PUSH
25410: EMPTY
25411: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 266
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: IN
25432: NOT
25433: IFFALSE 25437
// exit ;
25435: GO 27071
// if name then
25437: LD_VAR 0 3
25441: IFFALSE 25457
// SetBName ( base_dep , name ) ;
25443: LD_VAR 0 1
25447: PPUSH
25448: LD_VAR 0 3
25452: PPUSH
25453: CALL_OW 500
// base := GetBase ( base_dep ) ;
25457: LD_ADDR_VAR 0 15
25461: PUSH
25462: LD_VAR 0 1
25466: PPUSH
25467: CALL_OW 274
25471: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25472: LD_ADDR_VAR 0 16
25476: PUSH
25477: LD_VAR 0 1
25481: PPUSH
25482: CALL_OW 255
25486: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25487: LD_ADDR_VAR 0 17
25491: PUSH
25492: LD_VAR 0 1
25496: PPUSH
25497: CALL_OW 248
25501: ST_TO_ADDR
// if sources then
25502: LD_VAR 0 5
25506: IFFALSE 25553
// for i = 1 to 3 do
25508: LD_ADDR_VAR 0 8
25512: PUSH
25513: DOUBLE
25514: LD_INT 1
25516: DEC
25517: ST_TO_ADDR
25518: LD_INT 3
25520: PUSH
25521: FOR_TO
25522: IFFALSE 25551
// AddResourceType ( base , i , sources [ i ] ) ;
25524: LD_VAR 0 15
25528: PPUSH
25529: LD_VAR 0 8
25533: PPUSH
25534: LD_VAR 0 5
25538: PUSH
25539: LD_VAR 0 8
25543: ARRAY
25544: PPUSH
25545: CALL_OW 276
25549: GO 25521
25551: POP
25552: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25553: LD_ADDR_VAR 0 18
25557: PUSH
25558: LD_VAR 0 15
25562: PPUSH
25563: LD_VAR 0 2
25567: PPUSH
25568: LD_INT 1
25570: PPUSH
25571: CALL 24814 0 3
25575: ST_TO_ADDR
// InitHc ;
25576: CALL_OW 19
// InitUc ;
25580: CALL_OW 18
// uc_side := side ;
25584: LD_ADDR_OWVAR 20
25588: PUSH
25589: LD_VAR 0 16
25593: ST_TO_ADDR
// uc_nation := nation ;
25594: LD_ADDR_OWVAR 21
25598: PUSH
25599: LD_VAR 0 17
25603: ST_TO_ADDR
// if buildings then
25604: LD_VAR 0 18
25608: IFFALSE 26930
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25610: LD_ADDR_VAR 0 19
25614: PUSH
25615: LD_VAR 0 18
25619: PPUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 30
25625: PUSH
25626: LD_INT 29
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 30
25635: PUSH
25636: LD_INT 30
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: PPUSH
25648: CALL_OW 72
25652: ST_TO_ADDR
// if tmp then
25653: LD_VAR 0 19
25657: IFFALSE 25705
// for i in tmp do
25659: LD_ADDR_VAR 0 8
25663: PUSH
25664: LD_VAR 0 19
25668: PUSH
25669: FOR_IN
25670: IFFALSE 25703
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25672: LD_VAR 0 8
25676: PPUSH
25677: CALL_OW 250
25681: PPUSH
25682: LD_VAR 0 8
25686: PPUSH
25687: CALL_OW 251
25691: PPUSH
25692: LD_VAR 0 16
25696: PPUSH
25697: CALL_OW 441
25701: GO 25669
25703: POP
25704: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25705: LD_VAR 0 18
25709: PPUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 30
25715: PUSH
25716: LD_INT 32
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 30
25725: PUSH
25726: LD_INT 33
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: PPUSH
25738: CALL_OW 72
25742: IFFALSE 25830
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25744: LD_ADDR_VAR 0 8
25748: PUSH
25749: LD_VAR 0 18
25753: PPUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 30
25759: PUSH
25760: LD_INT 32
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 30
25769: PUSH
25770: LD_INT 33
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: PPUSH
25782: CALL_OW 72
25786: PUSH
25787: FOR_IN
25788: IFFALSE 25828
// begin if not GetBWeapon ( i ) then
25790: LD_VAR 0 8
25794: PPUSH
25795: CALL_OW 269
25799: NOT
25800: IFFALSE 25826
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25802: LD_VAR 0 8
25806: PPUSH
25807: LD_VAR 0 8
25811: PPUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL 27076 0 2
25821: PPUSH
25822: CALL_OW 431
// end ;
25826: GO 25787
25828: POP
25829: POP
// end ; for i = 1 to personel do
25830: LD_ADDR_VAR 0 8
25834: PUSH
25835: DOUBLE
25836: LD_INT 1
25838: DEC
25839: ST_TO_ADDR
25840: LD_VAR 0 6
25844: PUSH
25845: FOR_TO
25846: IFFALSE 26910
// begin if i > 4 then
25848: LD_VAR 0 8
25852: PUSH
25853: LD_INT 4
25855: GREATER
25856: IFFALSE 25860
// break ;
25858: GO 26910
// case i of 1 :
25860: LD_VAR 0 8
25864: PUSH
25865: LD_INT 1
25867: DOUBLE
25868: EQUAL
25869: IFTRUE 25873
25871: GO 25953
25873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25874: LD_ADDR_VAR 0 12
25878: PUSH
25879: LD_VAR 0 18
25883: PPUSH
25884: LD_INT 22
25886: PUSH
25887: LD_VAR 0 16
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 58
25898: PUSH
25899: EMPTY
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: LD_INT 30
25907: PUSH
25908: LD_INT 32
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 30
25917: PUSH
25918: LD_INT 4
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 30
25927: PUSH
25928: LD_INT 5
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 72
25950: ST_TO_ADDR
25951: GO 26175
25953: LD_INT 2
25955: DOUBLE
25956: EQUAL
25957: IFTRUE 25961
25959: GO 26023
25961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25962: LD_ADDR_VAR 0 12
25966: PUSH
25967: LD_VAR 0 18
25971: PPUSH
25972: LD_INT 22
25974: PUSH
25975: LD_VAR 0 16
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 30
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 30
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PPUSH
26016: CALL_OW 72
26020: ST_TO_ADDR
26021: GO 26175
26023: LD_INT 3
26025: DOUBLE
26026: EQUAL
26027: IFTRUE 26031
26029: GO 26093
26031: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26032: LD_ADDR_VAR 0 12
26036: PUSH
26037: LD_VAR 0 18
26041: PPUSH
26042: LD_INT 22
26044: PUSH
26045: LD_VAR 0 16
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 30
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 30
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 72
26090: ST_TO_ADDR
26091: GO 26175
26093: LD_INT 4
26095: DOUBLE
26096: EQUAL
26097: IFTRUE 26101
26099: GO 26174
26101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26102: LD_ADDR_VAR 0 12
26106: PUSH
26107: LD_VAR 0 18
26111: PPUSH
26112: LD_INT 22
26114: PUSH
26115: LD_VAR 0 16
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: LD_INT 6
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 7
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: LD_INT 8
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 72
26171: ST_TO_ADDR
26172: GO 26175
26174: POP
// if i = 1 then
26175: LD_VAR 0 8
26179: PUSH
26180: LD_INT 1
26182: EQUAL
26183: IFFALSE 26294
// begin tmp := [ ] ;
26185: LD_ADDR_VAR 0 19
26189: PUSH
26190: EMPTY
26191: ST_TO_ADDR
// for j in f do
26192: LD_ADDR_VAR 0 9
26196: PUSH
26197: LD_VAR 0 12
26201: PUSH
26202: FOR_IN
26203: IFFALSE 26276
// if GetBType ( j ) = b_bunker then
26205: LD_VAR 0 9
26209: PPUSH
26210: CALL_OW 266
26214: PUSH
26215: LD_INT 32
26217: EQUAL
26218: IFFALSE 26245
// tmp := Insert ( tmp , 1 , j ) else
26220: LD_ADDR_VAR 0 19
26224: PUSH
26225: LD_VAR 0 19
26229: PPUSH
26230: LD_INT 1
26232: PPUSH
26233: LD_VAR 0 9
26237: PPUSH
26238: CALL_OW 2
26242: ST_TO_ADDR
26243: GO 26274
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26245: LD_ADDR_VAR 0 19
26249: PUSH
26250: LD_VAR 0 19
26254: PPUSH
26255: LD_VAR 0 19
26259: PUSH
26260: LD_INT 1
26262: PLUS
26263: PPUSH
26264: LD_VAR 0 9
26268: PPUSH
26269: CALL_OW 2
26273: ST_TO_ADDR
26274: GO 26202
26276: POP
26277: POP
// if tmp then
26278: LD_VAR 0 19
26282: IFFALSE 26294
// f := tmp ;
26284: LD_ADDR_VAR 0 12
26288: PUSH
26289: LD_VAR 0 19
26293: ST_TO_ADDR
// end ; x := personel [ i ] ;
26294: LD_ADDR_VAR 0 13
26298: PUSH
26299: LD_VAR 0 6
26303: PUSH
26304: LD_VAR 0 8
26308: ARRAY
26309: ST_TO_ADDR
// if x = - 1 then
26310: LD_VAR 0 13
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: EQUAL
26319: IFFALSE 26528
// begin for j in f do
26321: LD_ADDR_VAR 0 9
26325: PUSH
26326: LD_VAR 0 12
26330: PUSH
26331: FOR_IN
26332: IFFALSE 26524
// repeat InitHc ;
26334: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26338: LD_VAR 0 9
26342: PPUSH
26343: CALL_OW 266
26347: PUSH
26348: LD_INT 5
26350: EQUAL
26351: IFFALSE 26421
// begin if UnitsInside ( j ) < 3 then
26353: LD_VAR 0 9
26357: PPUSH
26358: CALL_OW 313
26362: PUSH
26363: LD_INT 3
26365: LESS
26366: IFFALSE 26402
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26368: LD_INT 0
26370: PPUSH
26371: LD_INT 5
26373: PUSH
26374: LD_INT 8
26376: PUSH
26377: LD_INT 9
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: LIST
26384: PUSH
26385: LD_VAR 0 17
26389: ARRAY
26390: PPUSH
26391: LD_VAR 0 4
26395: PPUSH
26396: CALL_OW 380
26400: GO 26419
// PrepareHuman ( false , i , skill ) ;
26402: LD_INT 0
26404: PPUSH
26405: LD_VAR 0 8
26409: PPUSH
26410: LD_VAR 0 4
26414: PPUSH
26415: CALL_OW 380
// end else
26419: GO 26438
// PrepareHuman ( false , i , skill ) ;
26421: LD_INT 0
26423: PPUSH
26424: LD_VAR 0 8
26428: PPUSH
26429: LD_VAR 0 4
26433: PPUSH
26434: CALL_OW 380
// un := CreateHuman ;
26438: LD_ADDR_VAR 0 14
26442: PUSH
26443: CALL_OW 44
26447: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26448: LD_ADDR_VAR 0 7
26452: PUSH
26453: LD_VAR 0 7
26457: PPUSH
26458: LD_INT 1
26460: PPUSH
26461: LD_VAR 0 14
26465: PPUSH
26466: CALL_OW 2
26470: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26471: LD_VAR 0 14
26475: PPUSH
26476: LD_VAR 0 9
26480: PPUSH
26481: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26485: LD_VAR 0 9
26489: PPUSH
26490: CALL_OW 313
26494: PUSH
26495: LD_INT 6
26497: EQUAL
26498: PUSH
26499: LD_VAR 0 9
26503: PPUSH
26504: CALL_OW 266
26508: PUSH
26509: LD_INT 32
26511: PUSH
26512: LD_INT 31
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: IN
26519: OR
26520: IFFALSE 26334
26522: GO 26331
26524: POP
26525: POP
// end else
26526: GO 26908
// for j = 1 to x do
26528: LD_ADDR_VAR 0 9
26532: PUSH
26533: DOUBLE
26534: LD_INT 1
26536: DEC
26537: ST_TO_ADDR
26538: LD_VAR 0 13
26542: PUSH
26543: FOR_TO
26544: IFFALSE 26906
// begin InitHc ;
26546: CALL_OW 19
// if not f then
26550: LD_VAR 0 12
26554: NOT
26555: IFFALSE 26644
// begin PrepareHuman ( false , i , skill ) ;
26557: LD_INT 0
26559: PPUSH
26560: LD_VAR 0 8
26564: PPUSH
26565: LD_VAR 0 4
26569: PPUSH
26570: CALL_OW 380
// un := CreateHuman ;
26574: LD_ADDR_VAR 0 14
26578: PUSH
26579: CALL_OW 44
26583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26584: LD_ADDR_VAR 0 7
26588: PUSH
26589: LD_VAR 0 7
26593: PPUSH
26594: LD_INT 1
26596: PPUSH
26597: LD_VAR 0 14
26601: PPUSH
26602: CALL_OW 2
26606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26607: LD_VAR 0 14
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 250
26621: PPUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL_OW 251
26631: PPUSH
26632: LD_INT 10
26634: PPUSH
26635: LD_INT 0
26637: PPUSH
26638: CALL_OW 50
// continue ;
26642: GO 26543
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26644: LD_VAR 0 12
26648: PUSH
26649: LD_INT 1
26651: ARRAY
26652: PPUSH
26653: CALL_OW 313
26657: PUSH
26658: LD_VAR 0 12
26662: PUSH
26663: LD_INT 1
26665: ARRAY
26666: PPUSH
26667: CALL_OW 266
26671: PUSH
26672: LD_INT 32
26674: PUSH
26675: LD_INT 31
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: IN
26682: AND
26683: PUSH
26684: LD_VAR 0 12
26688: PUSH
26689: LD_INT 1
26691: ARRAY
26692: PPUSH
26693: CALL_OW 313
26697: PUSH
26698: LD_INT 6
26700: EQUAL
26701: OR
26702: IFFALSE 26722
// f := Delete ( f , 1 ) ;
26704: LD_ADDR_VAR 0 12
26708: PUSH
26709: LD_VAR 0 12
26713: PPUSH
26714: LD_INT 1
26716: PPUSH
26717: CALL_OW 3
26721: ST_TO_ADDR
// if not f then
26722: LD_VAR 0 12
26726: NOT
26727: IFFALSE 26745
// begin x := x + 2 ;
26729: LD_ADDR_VAR 0 13
26733: PUSH
26734: LD_VAR 0 13
26738: PUSH
26739: LD_INT 2
26741: PLUS
26742: ST_TO_ADDR
// continue ;
26743: GO 26543
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26745: LD_VAR 0 12
26749: PUSH
26750: LD_INT 1
26752: ARRAY
26753: PPUSH
26754: CALL_OW 266
26758: PUSH
26759: LD_INT 5
26761: EQUAL
26762: IFFALSE 26836
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26764: LD_VAR 0 12
26768: PUSH
26769: LD_INT 1
26771: ARRAY
26772: PPUSH
26773: CALL_OW 313
26777: PUSH
26778: LD_INT 3
26780: LESS
26781: IFFALSE 26817
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26783: LD_INT 0
26785: PPUSH
26786: LD_INT 5
26788: PUSH
26789: LD_INT 8
26791: PUSH
26792: LD_INT 9
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: PUSH
26800: LD_VAR 0 17
26804: ARRAY
26805: PPUSH
26806: LD_VAR 0 4
26810: PPUSH
26811: CALL_OW 380
26815: GO 26834
// PrepareHuman ( false , i , skill ) ;
26817: LD_INT 0
26819: PPUSH
26820: LD_VAR 0 8
26824: PPUSH
26825: LD_VAR 0 4
26829: PPUSH
26830: CALL_OW 380
// end else
26834: GO 26853
// PrepareHuman ( false , i , skill ) ;
26836: LD_INT 0
26838: PPUSH
26839: LD_VAR 0 8
26843: PPUSH
26844: LD_VAR 0 4
26848: PPUSH
26849: CALL_OW 380
// un := CreateHuman ;
26853: LD_ADDR_VAR 0 14
26857: PUSH
26858: CALL_OW 44
26862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26863: LD_ADDR_VAR 0 7
26867: PUSH
26868: LD_VAR 0 7
26872: PPUSH
26873: LD_INT 1
26875: PPUSH
26876: LD_VAR 0 14
26880: PPUSH
26881: CALL_OW 2
26885: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26886: LD_VAR 0 14
26890: PPUSH
26891: LD_VAR 0 12
26895: PUSH
26896: LD_INT 1
26898: ARRAY
26899: PPUSH
26900: CALL_OW 52
// end ;
26904: GO 26543
26906: POP
26907: POP
// end ;
26908: GO 25845
26910: POP
26911: POP
// result := result ^ buildings ;
26912: LD_ADDR_VAR 0 7
26916: PUSH
26917: LD_VAR 0 7
26921: PUSH
26922: LD_VAR 0 18
26926: ADD
26927: ST_TO_ADDR
// end else
26928: GO 27071
// begin for i = 1 to personel do
26930: LD_ADDR_VAR 0 8
26934: PUSH
26935: DOUBLE
26936: LD_INT 1
26938: DEC
26939: ST_TO_ADDR
26940: LD_VAR 0 6
26944: PUSH
26945: FOR_TO
26946: IFFALSE 27069
// begin if i > 4 then
26948: LD_VAR 0 8
26952: PUSH
26953: LD_INT 4
26955: GREATER
26956: IFFALSE 26960
// break ;
26958: GO 27069
// x := personel [ i ] ;
26960: LD_ADDR_VAR 0 13
26964: PUSH
26965: LD_VAR 0 6
26969: PUSH
26970: LD_VAR 0 8
26974: ARRAY
26975: ST_TO_ADDR
// if x = - 1 then
26976: LD_VAR 0 13
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: EQUAL
26985: IFFALSE 26989
// continue ;
26987: GO 26945
// PrepareHuman ( false , i , skill ) ;
26989: LD_INT 0
26991: PPUSH
26992: LD_VAR 0 8
26996: PPUSH
26997: LD_VAR 0 4
27001: PPUSH
27002: CALL_OW 380
// un := CreateHuman ;
27006: LD_ADDR_VAR 0 14
27010: PUSH
27011: CALL_OW 44
27015: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27016: LD_VAR 0 14
27020: PPUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 250
27030: PPUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL_OW 251
27040: PPUSH
27041: LD_INT 10
27043: PPUSH
27044: LD_INT 0
27046: PPUSH
27047: CALL_OW 50
// result := result ^ un ;
27051: LD_ADDR_VAR 0 7
27055: PUSH
27056: LD_VAR 0 7
27060: PUSH
27061: LD_VAR 0 14
27065: ADD
27066: ST_TO_ADDR
// end ;
27067: GO 26945
27069: POP
27070: POP
// end ; end ;
27071: LD_VAR 0 7
27075: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27076: LD_INT 0
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
27082: PPUSH
27083: PPUSH
27084: PPUSH
27085: PPUSH
27086: PPUSH
27087: PPUSH
27088: PPUSH
27089: PPUSH
27090: PPUSH
27091: PPUSH
27092: PPUSH
27093: PPUSH
// result := false ;
27094: LD_ADDR_VAR 0 3
27098: PUSH
27099: LD_INT 0
27101: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27102: LD_VAR 0 1
27106: NOT
27107: PUSH
27108: LD_VAR 0 1
27112: PPUSH
27113: CALL_OW 266
27117: PUSH
27118: LD_INT 32
27120: PUSH
27121: LD_INT 33
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: IN
27128: NOT
27129: OR
27130: IFFALSE 27134
// exit ;
27132: GO 28243
// nat := GetNation ( tower ) ;
27134: LD_ADDR_VAR 0 12
27138: PUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 248
27148: ST_TO_ADDR
// side := GetSide ( tower ) ;
27149: LD_ADDR_VAR 0 16
27153: PUSH
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 255
27163: ST_TO_ADDR
// x := GetX ( tower ) ;
27164: LD_ADDR_VAR 0 10
27168: PUSH
27169: LD_VAR 0 1
27173: PPUSH
27174: CALL_OW 250
27178: ST_TO_ADDR
// y := GetY ( tower ) ;
27179: LD_ADDR_VAR 0 11
27183: PUSH
27184: LD_VAR 0 1
27188: PPUSH
27189: CALL_OW 251
27193: ST_TO_ADDR
// if not x or not y then
27194: LD_VAR 0 10
27198: NOT
27199: PUSH
27200: LD_VAR 0 11
27204: NOT
27205: OR
27206: IFFALSE 27210
// exit ;
27208: GO 28243
// weapon := 0 ;
27210: LD_ADDR_VAR 0 18
27214: PUSH
27215: LD_INT 0
27217: ST_TO_ADDR
// fac_list := [ ] ;
27218: LD_ADDR_VAR 0 17
27222: PUSH
27223: EMPTY
27224: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27225: LD_ADDR_VAR 0 6
27229: PUSH
27230: LD_VAR 0 1
27234: PPUSH
27235: CALL_OW 274
27239: PPUSH
27240: LD_VAR 0 2
27244: PPUSH
27245: LD_INT 0
27247: PPUSH
27248: CALL 24814 0 3
27252: PPUSH
27253: LD_INT 30
27255: PUSH
27256: LD_INT 3
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PPUSH
27263: CALL_OW 72
27267: ST_TO_ADDR
// if not factories then
27268: LD_VAR 0 6
27272: NOT
27273: IFFALSE 27277
// exit ;
27275: GO 28243
// for i in factories do
27277: LD_ADDR_VAR 0 8
27281: PUSH
27282: LD_VAR 0 6
27286: PUSH
27287: FOR_IN
27288: IFFALSE 27313
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27290: LD_ADDR_VAR 0 17
27294: PUSH
27295: LD_VAR 0 17
27299: PUSH
27300: LD_VAR 0 8
27304: PPUSH
27305: CALL_OW 478
27309: UNION
27310: ST_TO_ADDR
27311: GO 27287
27313: POP
27314: POP
// if not fac_list then
27315: LD_VAR 0 17
27319: NOT
27320: IFFALSE 27324
// exit ;
27322: GO 28243
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27324: LD_ADDR_VAR 0 5
27328: PUSH
27329: LD_INT 4
27331: PUSH
27332: LD_INT 5
27334: PUSH
27335: LD_INT 9
27337: PUSH
27338: LD_INT 10
27340: PUSH
27341: LD_INT 6
27343: PUSH
27344: LD_INT 7
27346: PUSH
27347: LD_INT 11
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 27
27361: PUSH
27362: LD_INT 28
27364: PUSH
27365: LD_INT 26
27367: PUSH
27368: LD_INT 30
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 43
27379: PUSH
27380: LD_INT 44
27382: PUSH
27383: LD_INT 46
27385: PUSH
27386: LD_INT 45
27388: PUSH
27389: LD_INT 47
27391: PUSH
27392: LD_INT 49
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: LIST
27407: PUSH
27408: LD_VAR 0 12
27412: ARRAY
27413: ST_TO_ADDR
// list := list isect fac_list ;
27414: LD_ADDR_VAR 0 5
27418: PUSH
27419: LD_VAR 0 5
27423: PUSH
27424: LD_VAR 0 17
27428: ISECT
27429: ST_TO_ADDR
// if not list then
27430: LD_VAR 0 5
27434: NOT
27435: IFFALSE 27439
// exit ;
27437: GO 28243
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27439: LD_VAR 0 12
27443: PUSH
27444: LD_INT 3
27446: EQUAL
27447: PUSH
27448: LD_INT 49
27450: PUSH
27451: LD_VAR 0 5
27455: IN
27456: AND
27457: PUSH
27458: LD_INT 31
27460: PPUSH
27461: LD_VAR 0 16
27465: PPUSH
27466: CALL_OW 321
27470: PUSH
27471: LD_INT 2
27473: EQUAL
27474: AND
27475: IFFALSE 27535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27477: LD_INT 22
27479: PUSH
27480: LD_VAR 0 16
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 35
27491: PUSH
27492: LD_INT 49
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 91
27501: PUSH
27502: LD_VAR 0 1
27506: PUSH
27507: LD_INT 10
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 69
27524: NOT
27525: IFFALSE 27535
// weapon := ru_time_lapser ;
27527: LD_ADDR_VAR 0 18
27531: PUSH
27532: LD_INT 49
27534: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27535: LD_VAR 0 12
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: IN
27550: PUSH
27551: LD_INT 11
27553: PUSH
27554: LD_VAR 0 5
27558: IN
27559: PUSH
27560: LD_INT 30
27562: PUSH
27563: LD_VAR 0 5
27567: IN
27568: OR
27569: AND
27570: PUSH
27571: LD_INT 6
27573: PPUSH
27574: LD_VAR 0 16
27578: PPUSH
27579: CALL_OW 321
27583: PUSH
27584: LD_INT 2
27586: EQUAL
27587: AND
27588: IFFALSE 27753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27590: LD_INT 22
27592: PUSH
27593: LD_VAR 0 16
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: LD_INT 35
27607: PUSH
27608: LD_INT 11
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 35
27617: PUSH
27618: LD_INT 30
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 91
27632: PUSH
27633: LD_VAR 0 1
27637: PUSH
27638: LD_INT 18
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: PPUSH
27651: CALL_OW 69
27655: NOT
27656: PUSH
27657: LD_INT 22
27659: PUSH
27660: LD_VAR 0 16
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: LD_INT 30
27674: PUSH
27675: LD_INT 32
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 30
27684: PUSH
27685: LD_INT 33
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 91
27699: PUSH
27700: LD_VAR 0 1
27704: PUSH
27705: LD_INT 12
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: PPUSH
27721: CALL_OW 69
27725: PUSH
27726: LD_INT 2
27728: GREATER
27729: AND
27730: IFFALSE 27753
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27732: LD_ADDR_VAR 0 18
27736: PUSH
27737: LD_INT 11
27739: PUSH
27740: LD_INT 30
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_VAR 0 12
27751: ARRAY
27752: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27753: LD_VAR 0 18
27757: NOT
27758: PUSH
27759: LD_INT 40
27761: PPUSH
27762: LD_VAR 0 16
27766: PPUSH
27767: CALL_OW 321
27771: PUSH
27772: LD_INT 2
27774: EQUAL
27775: AND
27776: PUSH
27777: LD_INT 7
27779: PUSH
27780: LD_VAR 0 5
27784: IN
27785: PUSH
27786: LD_INT 28
27788: PUSH
27789: LD_VAR 0 5
27793: IN
27794: OR
27795: PUSH
27796: LD_INT 45
27798: PUSH
27799: LD_VAR 0 5
27803: IN
27804: OR
27805: AND
27806: IFFALSE 28060
// begin hex := GetHexInfo ( x , y ) ;
27808: LD_ADDR_VAR 0 4
27812: PUSH
27813: LD_VAR 0 10
27817: PPUSH
27818: LD_VAR 0 11
27822: PPUSH
27823: CALL_OW 546
27827: ST_TO_ADDR
// if hex [ 1 ] then
27828: LD_VAR 0 4
27832: PUSH
27833: LD_INT 1
27835: ARRAY
27836: IFFALSE 27840
// exit ;
27838: GO 28243
// height := hex [ 2 ] ;
27840: LD_ADDR_VAR 0 15
27844: PUSH
27845: LD_VAR 0 4
27849: PUSH
27850: LD_INT 2
27852: ARRAY
27853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27854: LD_ADDR_VAR 0 14
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: LD_INT 3
27867: PUSH
27868: LD_INT 5
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// for i in tmp do
27877: LD_ADDR_VAR 0 8
27881: PUSH
27882: LD_VAR 0 14
27886: PUSH
27887: FOR_IN
27888: IFFALSE 28058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27890: LD_ADDR_VAR 0 9
27894: PUSH
27895: LD_VAR 0 10
27899: PPUSH
27900: LD_VAR 0 8
27904: PPUSH
27905: LD_INT 5
27907: PPUSH
27908: CALL_OW 272
27912: PUSH
27913: LD_VAR 0 11
27917: PPUSH
27918: LD_VAR 0 8
27922: PPUSH
27923: LD_INT 5
27925: PPUSH
27926: CALL_OW 273
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27935: LD_VAR 0 9
27939: PUSH
27940: LD_INT 1
27942: ARRAY
27943: PPUSH
27944: LD_VAR 0 9
27948: PUSH
27949: LD_INT 2
27951: ARRAY
27952: PPUSH
27953: CALL_OW 488
27957: IFFALSE 28056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27959: LD_ADDR_VAR 0 4
27963: PUSH
27964: LD_VAR 0 9
27968: PUSH
27969: LD_INT 1
27971: ARRAY
27972: PPUSH
27973: LD_VAR 0 9
27977: PUSH
27978: LD_INT 2
27980: ARRAY
27981: PPUSH
27982: CALL_OW 546
27986: ST_TO_ADDR
// if hex [ 1 ] then
27987: LD_VAR 0 4
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: IFFALSE 27999
// continue ;
27997: GO 27887
// h := hex [ 2 ] ;
27999: LD_ADDR_VAR 0 13
28003: PUSH
28004: LD_VAR 0 4
28008: PUSH
28009: LD_INT 2
28011: ARRAY
28012: ST_TO_ADDR
// if h + 7 < height then
28013: LD_VAR 0 13
28017: PUSH
28018: LD_INT 7
28020: PLUS
28021: PUSH
28022: LD_VAR 0 15
28026: LESS
28027: IFFALSE 28056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28029: LD_ADDR_VAR 0 18
28033: PUSH
28034: LD_INT 7
28036: PUSH
28037: LD_INT 28
28039: PUSH
28040: LD_INT 45
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: PUSH
28048: LD_VAR 0 12
28052: ARRAY
28053: ST_TO_ADDR
// break ;
28054: GO 28058
// end ; end ; end ;
28056: GO 27887
28058: POP
28059: POP
// end ; if not weapon then
28060: LD_VAR 0 18
28064: NOT
28065: IFFALSE 28125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28067: LD_ADDR_VAR 0 5
28071: PUSH
28072: LD_VAR 0 5
28076: PUSH
28077: LD_INT 11
28079: PUSH
28080: LD_INT 30
28082: PUSH
28083: LD_INT 49
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: DIFF
28091: ST_TO_ADDR
// if not list then
28092: LD_VAR 0 5
28096: NOT
28097: IFFALSE 28101
// exit ;
28099: GO 28243
// weapon := list [ rand ( 1 , list ) ] ;
28101: LD_ADDR_VAR 0 18
28105: PUSH
28106: LD_VAR 0 5
28110: PUSH
28111: LD_INT 1
28113: PPUSH
28114: LD_VAR 0 5
28118: PPUSH
28119: CALL_OW 12
28123: ARRAY
28124: ST_TO_ADDR
// end ; if weapon then
28125: LD_VAR 0 18
28129: IFFALSE 28243
// begin tmp := CostOfWeapon ( weapon ) ;
28131: LD_ADDR_VAR 0 14
28135: PUSH
28136: LD_VAR 0 18
28140: PPUSH
28141: CALL_OW 451
28145: ST_TO_ADDR
// j := GetBase ( tower ) ;
28146: LD_ADDR_VAR 0 9
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 274
28160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28161: LD_VAR 0 9
28165: PPUSH
28166: LD_INT 1
28168: PPUSH
28169: CALL_OW 275
28173: PUSH
28174: LD_VAR 0 14
28178: PUSH
28179: LD_INT 1
28181: ARRAY
28182: GREATEREQUAL
28183: PUSH
28184: LD_VAR 0 9
28188: PPUSH
28189: LD_INT 2
28191: PPUSH
28192: CALL_OW 275
28196: PUSH
28197: LD_VAR 0 14
28201: PUSH
28202: LD_INT 2
28204: ARRAY
28205: GREATEREQUAL
28206: AND
28207: PUSH
28208: LD_VAR 0 9
28212: PPUSH
28213: LD_INT 3
28215: PPUSH
28216: CALL_OW 275
28220: PUSH
28221: LD_VAR 0 14
28225: PUSH
28226: LD_INT 3
28228: ARRAY
28229: GREATEREQUAL
28230: AND
28231: IFFALSE 28243
// result := weapon ;
28233: LD_ADDR_VAR 0 3
28237: PUSH
28238: LD_VAR 0 18
28242: ST_TO_ADDR
// end ; end ;
28243: LD_VAR 0 3
28247: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28248: LD_INT 0
28250: PPUSH
28251: PPUSH
// result := true ;
28252: LD_ADDR_VAR 0 3
28256: PUSH
28257: LD_INT 1
28259: ST_TO_ADDR
// if array1 = array2 then
28260: LD_VAR 0 1
28264: PUSH
28265: LD_VAR 0 2
28269: EQUAL
28270: IFFALSE 28330
// begin for i = 1 to array1 do
28272: LD_ADDR_VAR 0 4
28276: PUSH
28277: DOUBLE
28278: LD_INT 1
28280: DEC
28281: ST_TO_ADDR
28282: LD_VAR 0 1
28286: PUSH
28287: FOR_TO
28288: IFFALSE 28326
// if array1 [ i ] <> array2 [ i ] then
28290: LD_VAR 0 1
28294: PUSH
28295: LD_VAR 0 4
28299: ARRAY
28300: PUSH
28301: LD_VAR 0 2
28305: PUSH
28306: LD_VAR 0 4
28310: ARRAY
28311: NONEQUAL
28312: IFFALSE 28324
// begin result := false ;
28314: LD_ADDR_VAR 0 3
28318: PUSH
28319: LD_INT 0
28321: ST_TO_ADDR
// break ;
28322: GO 28326
// end ;
28324: GO 28287
28326: POP
28327: POP
// end else
28328: GO 28338
// result := false ;
28330: LD_ADDR_VAR 0 3
28334: PUSH
28335: LD_INT 0
28337: ST_TO_ADDR
// end ;
28338: LD_VAR 0 3
28342: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28343: LD_INT 0
28345: PPUSH
28346: PPUSH
// if not array1 or not array2 then
28347: LD_VAR 0 1
28351: NOT
28352: PUSH
28353: LD_VAR 0 2
28357: NOT
28358: OR
28359: IFFALSE 28363
// exit ;
28361: GO 28427
// result := true ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_INT 1
28370: ST_TO_ADDR
// for i = 1 to array1 do
28371: LD_ADDR_VAR 0 4
28375: PUSH
28376: DOUBLE
28377: LD_INT 1
28379: DEC
28380: ST_TO_ADDR
28381: LD_VAR 0 1
28385: PUSH
28386: FOR_TO
28387: IFFALSE 28425
// if array1 [ i ] <> array2 [ i ] then
28389: LD_VAR 0 1
28393: PUSH
28394: LD_VAR 0 4
28398: ARRAY
28399: PUSH
28400: LD_VAR 0 2
28404: PUSH
28405: LD_VAR 0 4
28409: ARRAY
28410: NONEQUAL
28411: IFFALSE 28423
// begin result := false ;
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_INT 0
28420: ST_TO_ADDR
// break ;
28421: GO 28425
// end ;
28423: GO 28386
28425: POP
28426: POP
// end ;
28427: LD_VAR 0 3
28431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28432: LD_INT 0
28434: PPUSH
28435: PPUSH
28436: PPUSH
// pom := GetBase ( fac ) ;
28437: LD_ADDR_VAR 0 5
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 274
28451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28452: LD_ADDR_VAR 0 4
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_VAR 0 2
28470: PUSH
28471: LD_INT 2
28473: ARRAY
28474: PPUSH
28475: LD_VAR 0 2
28479: PUSH
28480: LD_INT 3
28482: ARRAY
28483: PPUSH
28484: LD_VAR 0 2
28488: PUSH
28489: LD_INT 4
28491: ARRAY
28492: PPUSH
28493: CALL_OW 449
28497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28498: LD_ADDR_VAR 0 3
28502: PUSH
28503: LD_VAR 0 5
28507: PPUSH
28508: LD_INT 1
28510: PPUSH
28511: CALL_OW 275
28515: PUSH
28516: LD_VAR 0 4
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: GREATEREQUAL
28525: PUSH
28526: LD_VAR 0 5
28530: PPUSH
28531: LD_INT 2
28533: PPUSH
28534: CALL_OW 275
28538: PUSH
28539: LD_VAR 0 4
28543: PUSH
28544: LD_INT 2
28546: ARRAY
28547: GREATEREQUAL
28548: AND
28549: PUSH
28550: LD_VAR 0 5
28554: PPUSH
28555: LD_INT 3
28557: PPUSH
28558: CALL_OW 275
28562: PUSH
28563: LD_VAR 0 4
28567: PUSH
28568: LD_INT 3
28570: ARRAY
28571: GREATEREQUAL
28572: AND
28573: ST_TO_ADDR
// end ;
28574: LD_VAR 0 3
28578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28579: LD_INT 0
28581: PPUSH
28582: PPUSH
28583: PPUSH
28584: PPUSH
// pom := GetBase ( building ) ;
28585: LD_ADDR_VAR 0 3
28589: PUSH
28590: LD_VAR 0 1
28594: PPUSH
28595: CALL_OW 274
28599: ST_TO_ADDR
// if not pom then
28600: LD_VAR 0 3
28604: NOT
28605: IFFALSE 28609
// exit ;
28607: GO 28779
// btype := GetBType ( building ) ;
28609: LD_ADDR_VAR 0 5
28613: PUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: CALL_OW 266
28623: ST_TO_ADDR
// if btype = b_armoury then
28624: LD_VAR 0 5
28628: PUSH
28629: LD_INT 4
28631: EQUAL
28632: IFFALSE 28642
// btype := b_barracks ;
28634: LD_ADDR_VAR 0 5
28638: PUSH
28639: LD_INT 5
28641: ST_TO_ADDR
// if btype = b_depot then
28642: LD_VAR 0 5
28646: PUSH
28647: LD_INT 0
28649: EQUAL
28650: IFFALSE 28660
// btype := b_warehouse ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_INT 1
28659: ST_TO_ADDR
// if btype = b_workshop then
28660: LD_VAR 0 5
28664: PUSH
28665: LD_INT 2
28667: EQUAL
28668: IFFALSE 28678
// btype := b_factory ;
28670: LD_ADDR_VAR 0 5
28674: PUSH
28675: LD_INT 3
28677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28678: LD_ADDR_VAR 0 4
28682: PUSH
28683: LD_VAR 0 5
28687: PPUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 248
28697: PPUSH
28698: CALL_OW 450
28702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28703: LD_ADDR_VAR 0 2
28707: PUSH
28708: LD_VAR 0 3
28712: PPUSH
28713: LD_INT 1
28715: PPUSH
28716: CALL_OW 275
28720: PUSH
28721: LD_VAR 0 4
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: GREATEREQUAL
28730: PUSH
28731: LD_VAR 0 3
28735: PPUSH
28736: LD_INT 2
28738: PPUSH
28739: CALL_OW 275
28743: PUSH
28744: LD_VAR 0 4
28748: PUSH
28749: LD_INT 2
28751: ARRAY
28752: GREATEREQUAL
28753: AND
28754: PUSH
28755: LD_VAR 0 3
28759: PPUSH
28760: LD_INT 3
28762: PPUSH
28763: CALL_OW 275
28767: PUSH
28768: LD_VAR 0 4
28772: PUSH
28773: LD_INT 3
28775: ARRAY
28776: GREATEREQUAL
28777: AND
28778: ST_TO_ADDR
// end ;
28779: LD_VAR 0 2
28783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28784: LD_INT 0
28786: PPUSH
28787: PPUSH
28788: PPUSH
// pom := GetBase ( building ) ;
28789: LD_ADDR_VAR 0 4
28793: PUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 274
28803: ST_TO_ADDR
// if not pom then
28804: LD_VAR 0 4
28808: NOT
28809: IFFALSE 28813
// exit ;
28811: GO 28914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28813: LD_ADDR_VAR 0 5
28817: PUSH
28818: LD_VAR 0 2
28822: PPUSH
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL_OW 248
28832: PPUSH
28833: CALL_OW 450
28837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28838: LD_ADDR_VAR 0 3
28842: PUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: LD_INT 1
28850: PPUSH
28851: CALL_OW 275
28855: PUSH
28856: LD_VAR 0 5
28860: PUSH
28861: LD_INT 1
28863: ARRAY
28864: GREATEREQUAL
28865: PUSH
28866: LD_VAR 0 4
28870: PPUSH
28871: LD_INT 2
28873: PPUSH
28874: CALL_OW 275
28878: PUSH
28879: LD_VAR 0 5
28883: PUSH
28884: LD_INT 2
28886: ARRAY
28887: GREATEREQUAL
28888: AND
28889: PUSH
28890: LD_VAR 0 4
28894: PPUSH
28895: LD_INT 3
28897: PPUSH
28898: CALL_OW 275
28902: PUSH
28903: LD_VAR 0 5
28907: PUSH
28908: LD_INT 3
28910: ARRAY
28911: GREATEREQUAL
28912: AND
28913: ST_TO_ADDR
// end ;
28914: LD_VAR 0 3
28918: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28919: LD_INT 0
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
28931: PPUSH
// result := false ;
28932: LD_ADDR_VAR 0 8
28936: PUSH
28937: LD_INT 0
28939: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28940: LD_VAR 0 5
28944: NOT
28945: PUSH
28946: LD_VAR 0 1
28950: NOT
28951: OR
28952: PUSH
28953: LD_VAR 0 2
28957: NOT
28958: OR
28959: PUSH
28960: LD_VAR 0 3
28964: NOT
28965: OR
28966: IFFALSE 28970
// exit ;
28968: GO 29784
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28970: LD_ADDR_VAR 0 14
28974: PUSH
28975: LD_VAR 0 1
28979: PPUSH
28980: LD_VAR 0 2
28984: PPUSH
28985: LD_VAR 0 3
28989: PPUSH
28990: LD_VAR 0 4
28994: PPUSH
28995: LD_VAR 0 5
28999: PUSH
29000: LD_INT 1
29002: ARRAY
29003: PPUSH
29004: CALL_OW 248
29008: PPUSH
29009: LD_INT 0
29011: PPUSH
29012: CALL 31021 0 6
29016: ST_TO_ADDR
// if not hexes then
29017: LD_VAR 0 14
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29784
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29026: LD_ADDR_VAR 0 17
29030: PUSH
29031: LD_VAR 0 5
29035: PPUSH
29036: LD_INT 22
29038: PUSH
29039: LD_VAR 0 13
29043: PPUSH
29044: CALL_OW 255
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: LD_INT 30
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 30
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 72
29089: ST_TO_ADDR
// for i = 1 to hexes do
29090: LD_ADDR_VAR 0 9
29094: PUSH
29095: DOUBLE
29096: LD_INT 1
29098: DEC
29099: ST_TO_ADDR
29100: LD_VAR 0 14
29104: PUSH
29105: FOR_TO
29106: IFFALSE 29782
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29108: LD_ADDR_VAR 0 13
29112: PUSH
29113: LD_VAR 0 14
29117: PUSH
29118: LD_VAR 0 9
29122: ARRAY
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 14
29132: PUSH
29133: LD_VAR 0 9
29137: ARRAY
29138: PUSH
29139: LD_INT 2
29141: ARRAY
29142: PPUSH
29143: CALL_OW 428
29147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29148: LD_VAR 0 14
29152: PUSH
29153: LD_VAR 0 9
29157: ARRAY
29158: PUSH
29159: LD_INT 1
29161: ARRAY
29162: PPUSH
29163: LD_VAR 0 14
29167: PUSH
29168: LD_VAR 0 9
29172: ARRAY
29173: PUSH
29174: LD_INT 2
29176: ARRAY
29177: PPUSH
29178: CALL_OW 351
29182: PUSH
29183: LD_VAR 0 14
29187: PUSH
29188: LD_VAR 0 9
29192: ARRAY
29193: PUSH
29194: LD_INT 1
29196: ARRAY
29197: PPUSH
29198: LD_VAR 0 14
29202: PUSH
29203: LD_VAR 0 9
29207: ARRAY
29208: PUSH
29209: LD_INT 2
29211: ARRAY
29212: PPUSH
29213: CALL_OW 488
29217: NOT
29218: OR
29219: PUSH
29220: LD_VAR 0 13
29224: PPUSH
29225: CALL_OW 247
29229: PUSH
29230: LD_INT 3
29232: EQUAL
29233: OR
29234: IFFALSE 29240
// exit ;
29236: POP
29237: POP
29238: GO 29784
// if not tmp then
29240: LD_VAR 0 13
29244: NOT
29245: IFFALSE 29249
// continue ;
29247: GO 29105
// result := true ;
29249: LD_ADDR_VAR 0 8
29253: PUSH
29254: LD_INT 1
29256: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29257: LD_VAR 0 6
29261: PUSH
29262: LD_VAR 0 13
29266: PPUSH
29267: CALL_OW 247
29271: PUSH
29272: LD_INT 2
29274: EQUAL
29275: AND
29276: PUSH
29277: LD_VAR 0 13
29281: PPUSH
29282: CALL_OW 263
29286: PUSH
29287: LD_INT 1
29289: EQUAL
29290: AND
29291: IFFALSE 29455
// begin if IsDrivenBy ( tmp ) then
29293: LD_VAR 0 13
29297: PPUSH
29298: CALL_OW 311
29302: IFFALSE 29306
// continue ;
29304: GO 29105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29306: LD_VAR 0 6
29310: PPUSH
29311: LD_INT 3
29313: PUSH
29314: LD_INT 60
29316: PUSH
29317: EMPTY
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 3
29326: PUSH
29327: LD_INT 55
29329: PUSH
29330: EMPTY
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 72
29345: IFFALSE 29453
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29347: LD_ADDR_VAR 0 18
29351: PUSH
29352: LD_VAR 0 6
29356: PPUSH
29357: LD_INT 3
29359: PUSH
29360: LD_INT 60
29362: PUSH
29363: EMPTY
29364: LIST
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 55
29375: PUSH
29376: EMPTY
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 72
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: ST_TO_ADDR
// if IsInUnit ( driver ) then
29396: LD_VAR 0 18
29400: PPUSH
29401: CALL_OW 310
29405: IFFALSE 29416
// ComExit ( driver ) ;
29407: LD_VAR 0 18
29411: PPUSH
29412: CALL 54726 0 1
// AddComEnterUnit ( driver , tmp ) ;
29416: LD_VAR 0 18
29420: PPUSH
29421: LD_VAR 0 13
29425: PPUSH
29426: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29430: LD_VAR 0 18
29434: PPUSH
29435: LD_VAR 0 7
29439: PPUSH
29440: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29444: LD_VAR 0 18
29448: PPUSH
29449: CALL_OW 181
// end ; continue ;
29453: GO 29105
// end ; if not cleaners or not tmp in cleaners then
29455: LD_VAR 0 6
29459: NOT
29460: PUSH
29461: LD_VAR 0 13
29465: PUSH
29466: LD_VAR 0 6
29470: IN
29471: NOT
29472: OR
29473: IFFALSE 29780
// begin if dep then
29475: LD_VAR 0 17
29479: IFFALSE 29615
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29481: LD_ADDR_VAR 0 16
29485: PUSH
29486: LD_VAR 0 17
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: CALL_OW 250
29499: PPUSH
29500: LD_VAR 0 17
29504: PUSH
29505: LD_INT 1
29507: ARRAY
29508: PPUSH
29509: CALL_OW 254
29513: PPUSH
29514: LD_INT 5
29516: PPUSH
29517: CALL_OW 272
29521: PUSH
29522: LD_VAR 0 17
29526: PUSH
29527: LD_INT 1
29529: ARRAY
29530: PPUSH
29531: CALL_OW 251
29535: PPUSH
29536: LD_VAR 0 17
29540: PUSH
29541: LD_INT 1
29543: ARRAY
29544: PPUSH
29545: CALL_OW 254
29549: PPUSH
29550: LD_INT 5
29552: PPUSH
29553: CALL_OW 273
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29562: LD_VAR 0 16
29566: PUSH
29567: LD_INT 1
29569: ARRAY
29570: PPUSH
29571: LD_VAR 0 16
29575: PUSH
29576: LD_INT 2
29578: ARRAY
29579: PPUSH
29580: CALL_OW 488
29584: IFFALSE 29615
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29586: LD_VAR 0 13
29590: PPUSH
29591: LD_VAR 0 16
29595: PUSH
29596: LD_INT 1
29598: ARRAY
29599: PPUSH
29600: LD_VAR 0 16
29604: PUSH
29605: LD_INT 2
29607: ARRAY
29608: PPUSH
29609: CALL_OW 111
// continue ;
29613: GO 29105
// end ; end ; r := GetDir ( tmp ) ;
29615: LD_ADDR_VAR 0 15
29619: PUSH
29620: LD_VAR 0 13
29624: PPUSH
29625: CALL_OW 254
29629: ST_TO_ADDR
// if r = 5 then
29630: LD_VAR 0 15
29634: PUSH
29635: LD_INT 5
29637: EQUAL
29638: IFFALSE 29648
// r := 0 ;
29640: LD_ADDR_VAR 0 15
29644: PUSH
29645: LD_INT 0
29647: ST_TO_ADDR
// for j = r to 5 do
29648: LD_ADDR_VAR 0 10
29652: PUSH
29653: DOUBLE
29654: LD_VAR 0 15
29658: DEC
29659: ST_TO_ADDR
29660: LD_INT 5
29662: PUSH
29663: FOR_TO
29664: IFFALSE 29778
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29666: LD_ADDR_VAR 0 11
29670: PUSH
29671: LD_VAR 0 13
29675: PPUSH
29676: CALL_OW 250
29680: PPUSH
29681: LD_VAR 0 10
29685: PPUSH
29686: LD_INT 2
29688: PPUSH
29689: CALL_OW 272
29693: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29694: LD_ADDR_VAR 0 12
29698: PUSH
29699: LD_VAR 0 13
29703: PPUSH
29704: CALL_OW 251
29708: PPUSH
29709: LD_VAR 0 10
29713: PPUSH
29714: LD_INT 2
29716: PPUSH
29717: CALL_OW 273
29721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29722: LD_VAR 0 11
29726: PPUSH
29727: LD_VAR 0 12
29731: PPUSH
29732: CALL_OW 488
29736: PUSH
29737: LD_VAR 0 11
29741: PPUSH
29742: LD_VAR 0 12
29746: PPUSH
29747: CALL_OW 428
29751: NOT
29752: AND
29753: IFFALSE 29776
// begin ComMoveXY ( tmp , _x , _y ) ;
29755: LD_VAR 0 13
29759: PPUSH
29760: LD_VAR 0 11
29764: PPUSH
29765: LD_VAR 0 12
29769: PPUSH
29770: CALL_OW 111
// break ;
29774: GO 29778
// end ; end ;
29776: GO 29663
29778: POP
29779: POP
// end ; end ;
29780: GO 29105
29782: POP
29783: POP
// end ;
29784: LD_VAR 0 8
29788: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29789: LD_INT 0
29791: PPUSH
// result := true ;
29792: LD_ADDR_VAR 0 3
29796: PUSH
29797: LD_INT 1
29799: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 24
29807: DOUBLE
29808: EQUAL
29809: IFTRUE 29819
29811: LD_INT 33
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 29844
29819: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29820: LD_ADDR_VAR 0 3
29824: PUSH
29825: LD_INT 32
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL_OW 321
29837: PUSH
29838: LD_INT 2
29840: EQUAL
29841: ST_TO_ADDR
29842: GO 30164
29844: LD_INT 20
29846: DOUBLE
29847: EQUAL
29848: IFTRUE 29852
29850: GO 29877
29852: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29853: LD_ADDR_VAR 0 3
29857: PUSH
29858: LD_INT 6
29860: PPUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL_OW 321
29870: PUSH
29871: LD_INT 2
29873: EQUAL
29874: ST_TO_ADDR
29875: GO 30164
29877: LD_INT 22
29879: DOUBLE
29880: EQUAL
29881: IFTRUE 29891
29883: LD_INT 36
29885: DOUBLE
29886: EQUAL
29887: IFTRUE 29891
29889: GO 29916
29891: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29892: LD_ADDR_VAR 0 3
29896: PUSH
29897: LD_INT 15
29899: PPUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 321
29909: PUSH
29910: LD_INT 2
29912: EQUAL
29913: ST_TO_ADDR
29914: GO 30164
29916: LD_INT 30
29918: DOUBLE
29919: EQUAL
29920: IFTRUE 29924
29922: GO 29949
29924: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29925: LD_ADDR_VAR 0 3
29929: PUSH
29930: LD_INT 20
29932: PPUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 321
29942: PUSH
29943: LD_INT 2
29945: EQUAL
29946: ST_TO_ADDR
29947: GO 30164
29949: LD_INT 28
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29963
29955: LD_INT 21
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 29988
29963: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29964: LD_ADDR_VAR 0 3
29968: PUSH
29969: LD_INT 21
29971: PPUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 321
29981: PUSH
29982: LD_INT 2
29984: EQUAL
29985: ST_TO_ADDR
29986: GO 30164
29988: LD_INT 16
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30023
29996: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_EXP 123
30006: PPUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 321
30016: PUSH
30017: LD_INT 2
30019: EQUAL
30020: ST_TO_ADDR
30021: GO 30164
30023: LD_INT 19
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30037
30029: LD_INT 23
30031: DOUBLE
30032: EQUAL
30033: IFTRUE 30037
30035: GO 30064
30037: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_EXP 122
30047: PPUSH
30048: LD_VAR 0 1
30052: PPUSH
30053: CALL_OW 321
30057: PUSH
30058: LD_INT 2
30060: EQUAL
30061: ST_TO_ADDR
30062: GO 30164
30064: LD_INT 17
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30097
30072: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 39
30080: PPUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 321
30090: PUSH
30091: LD_INT 2
30093: EQUAL
30094: ST_TO_ADDR
30095: GO 30164
30097: LD_INT 18
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30130
30105: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30106: LD_ADDR_VAR 0 3
30110: PUSH
30111: LD_INT 40
30113: PPUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 321
30123: PUSH
30124: LD_INT 2
30126: EQUAL
30127: ST_TO_ADDR
30128: GO 30164
30130: LD_INT 27
30132: DOUBLE
30133: EQUAL
30134: IFTRUE 30138
30136: GO 30163
30138: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30139: LD_ADDR_VAR 0 3
30143: PUSH
30144: LD_INT 35
30146: PPUSH
30147: LD_VAR 0 1
30151: PPUSH
30152: CALL_OW 321
30156: PUSH
30157: LD_INT 2
30159: EQUAL
30160: ST_TO_ADDR
30161: GO 30164
30163: POP
// end ;
30164: LD_VAR 0 3
30168: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30169: LD_INT 0
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
// result := false ;
30182: LD_ADDR_VAR 0 6
30186: PUSH
30187: LD_INT 0
30189: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30190: LD_VAR 0 1
30194: NOT
30195: PUSH
30196: LD_VAR 0 1
30200: PPUSH
30201: CALL_OW 266
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: IN
30216: NOT
30217: OR
30218: PUSH
30219: LD_VAR 0 2
30223: NOT
30224: OR
30225: PUSH
30226: LD_VAR 0 5
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: LD_INT 5
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: IN
30257: NOT
30258: OR
30259: PUSH
30260: LD_VAR 0 3
30264: PPUSH
30265: LD_VAR 0 4
30269: PPUSH
30270: CALL_OW 488
30274: NOT
30275: OR
30276: IFFALSE 30280
// exit ;
30278: GO 31016
// side := GetSide ( depot ) ;
30280: LD_ADDR_VAR 0 9
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 255
30294: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30295: LD_VAR 0 9
30299: PPUSH
30300: LD_VAR 0 2
30304: PPUSH
30305: CALL 29789 0 2
30309: NOT
30310: IFFALSE 30314
// exit ;
30312: GO 31016
// pom := GetBase ( depot ) ;
30314: LD_ADDR_VAR 0 10
30318: PUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: CALL_OW 274
30328: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30329: LD_ADDR_VAR 0 11
30333: PUSH
30334: LD_VAR 0 2
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 248
30348: PPUSH
30349: CALL_OW 450
30353: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30354: LD_VAR 0 10
30358: PPUSH
30359: LD_INT 1
30361: PPUSH
30362: CALL_OW 275
30366: PUSH
30367: LD_VAR 0 11
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: GREATEREQUAL
30376: PUSH
30377: LD_VAR 0 10
30381: PPUSH
30382: LD_INT 2
30384: PPUSH
30385: CALL_OW 275
30389: PUSH
30390: LD_VAR 0 11
30394: PUSH
30395: LD_INT 2
30397: ARRAY
30398: GREATEREQUAL
30399: AND
30400: PUSH
30401: LD_VAR 0 10
30405: PPUSH
30406: LD_INT 3
30408: PPUSH
30409: CALL_OW 275
30413: PUSH
30414: LD_VAR 0 11
30418: PUSH
30419: LD_INT 3
30421: ARRAY
30422: GREATEREQUAL
30423: AND
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 31016
// if GetBType ( depot ) = b_depot then
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 266
30438: PUSH
30439: LD_INT 0
30441: EQUAL
30442: IFFALSE 30454
// dist := 28 else
30444: LD_ADDR_VAR 0 14
30448: PUSH
30449: LD_INT 28
30451: ST_TO_ADDR
30452: GO 30462
// dist := 36 ;
30454: LD_ADDR_VAR 0 14
30458: PUSH
30459: LD_INT 36
30461: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30462: LD_VAR 0 1
30466: PPUSH
30467: LD_VAR 0 3
30471: PPUSH
30472: LD_VAR 0 4
30476: PPUSH
30477: CALL_OW 297
30481: PUSH
30482: LD_VAR 0 14
30486: GREATER
30487: IFFALSE 30491
// exit ;
30489: GO 31016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30491: LD_ADDR_VAR 0 12
30495: PUSH
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_VAR 0 3
30505: PPUSH
30506: LD_VAR 0 4
30510: PPUSH
30511: LD_VAR 0 5
30515: PPUSH
30516: LD_VAR 0 1
30520: PPUSH
30521: CALL_OW 248
30525: PPUSH
30526: LD_INT 0
30528: PPUSH
30529: CALL 31021 0 6
30533: ST_TO_ADDR
// if not hexes then
30534: LD_VAR 0 12
30538: NOT
30539: IFFALSE 30543
// exit ;
30541: GO 31016
// hex := GetHexInfo ( x , y ) ;
30543: LD_ADDR_VAR 0 15
30547: PUSH
30548: LD_VAR 0 3
30552: PPUSH
30553: LD_VAR 0 4
30557: PPUSH
30558: CALL_OW 546
30562: ST_TO_ADDR
// if hex [ 1 ] then
30563: LD_VAR 0 15
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: IFFALSE 30575
// exit ;
30573: GO 31016
// height := hex [ 2 ] ;
30575: LD_ADDR_VAR 0 13
30579: PUSH
30580: LD_VAR 0 15
30584: PUSH
30585: LD_INT 2
30587: ARRAY
30588: ST_TO_ADDR
// for i = 1 to hexes do
30589: LD_ADDR_VAR 0 7
30593: PUSH
30594: DOUBLE
30595: LD_INT 1
30597: DEC
30598: ST_TO_ADDR
30599: LD_VAR 0 12
30603: PUSH
30604: FOR_TO
30605: IFFALSE 30935
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30607: LD_VAR 0 12
30611: PUSH
30612: LD_VAR 0 7
30616: ARRAY
30617: PUSH
30618: LD_INT 1
30620: ARRAY
30621: PPUSH
30622: LD_VAR 0 12
30626: PUSH
30627: LD_VAR 0 7
30631: ARRAY
30632: PUSH
30633: LD_INT 2
30635: ARRAY
30636: PPUSH
30637: CALL_OW 488
30641: NOT
30642: PUSH
30643: LD_VAR 0 12
30647: PUSH
30648: LD_VAR 0 7
30652: ARRAY
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: PPUSH
30658: LD_VAR 0 12
30662: PUSH
30663: LD_VAR 0 7
30667: ARRAY
30668: PUSH
30669: LD_INT 2
30671: ARRAY
30672: PPUSH
30673: CALL_OW 428
30677: PUSH
30678: LD_INT 0
30680: GREATER
30681: OR
30682: PUSH
30683: LD_VAR 0 12
30687: PUSH
30688: LD_VAR 0 7
30692: ARRAY
30693: PUSH
30694: LD_INT 1
30696: ARRAY
30697: PPUSH
30698: LD_VAR 0 12
30702: PUSH
30703: LD_VAR 0 7
30707: ARRAY
30708: PUSH
30709: LD_INT 2
30711: ARRAY
30712: PPUSH
30713: CALL_OW 351
30717: OR
30718: IFFALSE 30724
// exit ;
30720: POP
30721: POP
30722: GO 31016
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30724: LD_ADDR_VAR 0 8
30728: PUSH
30729: LD_VAR 0 12
30733: PUSH
30734: LD_VAR 0 7
30738: ARRAY
30739: PUSH
30740: LD_INT 1
30742: ARRAY
30743: PPUSH
30744: LD_VAR 0 12
30748: PUSH
30749: LD_VAR 0 7
30753: ARRAY
30754: PUSH
30755: LD_INT 2
30757: ARRAY
30758: PPUSH
30759: CALL_OW 546
30763: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30764: LD_VAR 0 8
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: PUSH
30773: LD_VAR 0 8
30777: PUSH
30778: LD_INT 2
30780: ARRAY
30781: PUSH
30782: LD_VAR 0 13
30786: PUSH
30787: LD_INT 2
30789: PLUS
30790: GREATER
30791: OR
30792: PUSH
30793: LD_VAR 0 8
30797: PUSH
30798: LD_INT 2
30800: ARRAY
30801: PUSH
30802: LD_VAR 0 13
30806: PUSH
30807: LD_INT 2
30809: MINUS
30810: LESS
30811: OR
30812: PUSH
30813: LD_VAR 0 8
30817: PUSH
30818: LD_INT 3
30820: ARRAY
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 8
30827: PUSH
30828: LD_INT 9
30830: PUSH
30831: LD_INT 10
30833: PUSH
30834: LD_INT 11
30836: PUSH
30837: LD_INT 12
30839: PUSH
30840: LD_INT 13
30842: PUSH
30843: LD_INT 16
30845: PUSH
30846: LD_INT 17
30848: PUSH
30849: LD_INT 18
30851: PUSH
30852: LD_INT 19
30854: PUSH
30855: LD_INT 20
30857: PUSH
30858: LD_INT 21
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: IN
30876: NOT
30877: OR
30878: PUSH
30879: LD_VAR 0 8
30883: PUSH
30884: LD_INT 5
30886: ARRAY
30887: NOT
30888: OR
30889: PUSH
30890: LD_VAR 0 8
30894: PUSH
30895: LD_INT 6
30897: ARRAY
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 7
30907: PUSH
30908: LD_INT 9
30910: PUSH
30911: LD_INT 10
30913: PUSH
30914: LD_INT 11
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: IN
30925: NOT
30926: OR
30927: IFFALSE 30933
// exit ;
30929: POP
30930: POP
30931: GO 31016
// end ;
30933: GO 30604
30935: POP
30936: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30937: LD_VAR 0 9
30941: PPUSH
30942: LD_VAR 0 3
30946: PPUSH
30947: LD_VAR 0 4
30951: PPUSH
30952: LD_INT 20
30954: PPUSH
30955: CALL 22962 0 4
30959: PUSH
30960: LD_INT 4
30962: ARRAY
30963: IFFALSE 30967
// exit ;
30965: GO 31016
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30967: LD_VAR 0 2
30971: PUSH
30972: LD_INT 29
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: IN
30982: PUSH
30983: LD_VAR 0 3
30987: PPUSH
30988: LD_VAR 0 4
30992: PPUSH
30993: LD_VAR 0 9
30997: PPUSH
30998: CALL_OW 440
31002: NOT
31003: AND
31004: IFFALSE 31008
// exit ;
31006: GO 31016
// result := true ;
31008: LD_ADDR_VAR 0 6
31012: PUSH
31013: LD_INT 1
31015: ST_TO_ADDR
// end ;
31016: LD_VAR 0 6
31020: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31021: LD_INT 0
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
// result = [ ] ;
31081: LD_ADDR_VAR 0 7
31085: PUSH
31086: EMPTY
31087: ST_TO_ADDR
// temp_list = [ ] ;
31088: LD_ADDR_VAR 0 9
31092: PUSH
31093: EMPTY
31094: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31095: LD_VAR 0 4
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: LD_INT 4
31114: PUSH
31115: LD_INT 5
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: IN
31126: NOT
31127: PUSH
31128: LD_VAR 0 1
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: IN
31143: PUSH
31144: LD_VAR 0 5
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: IN
31163: NOT
31164: AND
31165: OR
31166: IFFALSE 31170
// exit ;
31168: GO 49561
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31170: LD_VAR 0 1
31174: PUSH
31175: LD_INT 6
31177: PUSH
31178: LD_INT 7
31180: PUSH
31181: LD_INT 8
31183: PUSH
31184: LD_INT 13
31186: PUSH
31187: LD_INT 12
31189: PUSH
31190: LD_INT 15
31192: PUSH
31193: LD_INT 11
31195: PUSH
31196: LD_INT 14
31198: PUSH
31199: LD_INT 10
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: IN
31213: IFFALSE 31223
// btype = b_lab ;
31215: LD_ADDR_VAR 0 1
31219: PUSH
31220: LD_INT 6
31222: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31223: LD_VAR 0 6
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: IN
31242: NOT
31243: PUSH
31244: LD_VAR 0 1
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 6
31263: PUSH
31264: LD_INT 36
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: LD_INT 5
31272: PUSH
31273: LD_INT 31
31275: PUSH
31276: LD_INT 32
31278: PUSH
31279: LD_INT 33
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: IN
31295: NOT
31296: PUSH
31297: LD_VAR 0 6
31301: PUSH
31302: LD_INT 1
31304: EQUAL
31305: AND
31306: OR
31307: PUSH
31308: LD_VAR 0 1
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: IN
31323: NOT
31324: PUSH
31325: LD_VAR 0 6
31329: PUSH
31330: LD_INT 2
31332: EQUAL
31333: AND
31334: OR
31335: IFFALSE 31345
// mode = 0 ;
31337: LD_ADDR_VAR 0 6
31341: PUSH
31342: LD_INT 0
31344: ST_TO_ADDR
// case mode of 0 :
31345: LD_VAR 0 6
31349: PUSH
31350: LD_INT 0
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 42811
31358: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31359: LD_ADDR_VAR 0 11
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31552: LD_ADDR_VAR 0 12
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31748: LD_ADDR_VAR 0 13
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31947: LD_ADDR_VAR 0 14
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 3
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 3
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32143: LD_ADDR_VAR 0 15
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32336: LD_ADDR_VAR 0 16
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32529: LD_ADDR_VAR 0 17
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: LD_INT 2
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32759: LD_ADDR_VAR 0 18
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32989: LD_ADDR_VAR 0 19
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: LD_INT 2
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: NEG
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33219: LD_ADDR_VAR 0 20
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33449: LD_ADDR_VAR 0 21
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33679: LD_ADDR_VAR 0 22
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: NEG
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33909: LD_ADDR_VAR 0 23
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 2
34108: NEG
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: LD_INT 3
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 3
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34189: LD_ADDR_VAR 0 24
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: NEG
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34465: LD_ADDR_VAR 0 25
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34739: LD_ADDR_VAR 0 26
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35015: LD_ADDR_VAR 0 27
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 2
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: NEG
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 3
35248: NEG
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 3
35260: NEG
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35295: LD_ADDR_VAR 0 28
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: LD_INT 3
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 3
35530: NEG
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 3
35542: NEG
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35577: LD_ADDR_VAR 0 29
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: LD_INT 3
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35856: LD_ADDR_VAR 0 30
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 3
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 3
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36134: LD_ADDR_VAR 0 31
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 3
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: NEG
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36412: LD_ADDR_VAR 0 32
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 3
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 3
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36690: LD_ADDR_VAR 0 33
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 3
36934: NEG
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36969: LD_ADDR_VAR 0 34
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37249: LD_ADDR_VAR 0 35
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37361: LD_ADDR_VAR 0 36
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37473: LD_ADDR_VAR 0 37
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37585: LD_ADDR_VAR 0 38
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37697: LD_ADDR_VAR 0 39
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37809: LD_ADDR_VAR 0 40
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37921: LD_ADDR_VAR 0 41
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 3
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38271: LD_ADDR_VAR 0 42
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: LD_INT 3
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 3
38580: NEG
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38621: LD_ADDR_VAR 0 43
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 3
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 3
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: NEG
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38969: LD_ADDR_VAR 0 44
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 3
39278: NEG
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39319: LD_ADDR_VAR 0 45
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 3
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 3
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39669: LD_ADDR_VAR 0 46
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 3
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 3
39965: NEG
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 3
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40017: LD_ADDR_VAR 0 47
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40168: LD_ADDR_VAR 0 48
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40315: LD_ADDR_VAR 0 49
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40459: LD_ADDR_VAR 0 50
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40603: LD_ADDR_VAR 0 51
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40750: LD_ADDR_VAR 0 52
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40901: LD_ADDR_VAR 0 53
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41131: LD_ADDR_VAR 0 54
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 2
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41361: LD_ADDR_VAR 0 55
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41591: LD_ADDR_VAR 0 56
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41821: LD_ADDR_VAR 0 57
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42051: LD_ADDR_VAR 0 58
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42281: LD_ADDR_VAR 0 59
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42369: LD_ADDR_VAR 0 60
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42457: LD_ADDR_VAR 0 61
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42545: LD_ADDR_VAR 0 62
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42633: LD_ADDR_VAR 0 63
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42721: LD_ADDR_VAR 0 64
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// end ; 1 :
42809: GO 48706
42811: LD_INT 1
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 45442
42819: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42820: LD_ADDR_VAR 0 11
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42864: LD_ADDR_VAR 0 12
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42905: LD_ADDR_VAR 0 13
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 3
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42945: LD_ADDR_VAR 0 14
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42986: LD_ADDR_VAR 0 15
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 3
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43030: LD_ADDR_VAR 0 16
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43076: LD_ADDR_VAR 0 17
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43120: LD_ADDR_VAR 0 18
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43161: LD_ADDR_VAR 0 19
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43201: LD_ADDR_VAR 0 20
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43242: LD_ADDR_VAR 0 21
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43286: LD_ADDR_VAR 0 22
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43332: LD_ADDR_VAR 0 23
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 3
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 4
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 3
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43376: LD_ADDR_VAR 0 24
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 4
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43417: LD_ADDR_VAR 0 25
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 4
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43457: LD_ADDR_VAR 0 26
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 4
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43498: LD_ADDR_VAR 0 27
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 4
43527: NEG
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43542: LD_ADDR_VAR 0 28
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: LD_INT 4
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 4
43573: NEG
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43588: LD_ADDR_VAR 0 29
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 3
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 4
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 4
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 3
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 5
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 5
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 4
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 6
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 6
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 5
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43743: LD_ADDR_VAR 0 30
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 4
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 4
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 5
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 5
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 5
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 6
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 6
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43886: LD_ADDR_VAR 0 31
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 4
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: LD_INT 4
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: LD_INT 4
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: LD_INT 4
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 5
43963: PUSH
43964: LD_INT 5
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 4
43973: PUSH
43974: LD_INT 5
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 6
43983: PUSH
43984: LD_INT 5
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 6
43993: PUSH
43994: LD_INT 6
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 5
44003: PUSH
44004: LD_INT 6
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44025: LD_ADDR_VAR 0 32
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 4
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 4
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 5
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 5
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 4
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 6
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 6
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44168: LD_ADDR_VAR 0 33
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 4
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 4
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 4
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 5
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 5
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 6
44288: NEG
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 6
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44323: LD_ADDR_VAR 0 34
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 4
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 4
44378: NEG
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 4
44390: NEG
44391: PUSH
44392: LD_INT 4
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 4
44402: NEG
44403: PUSH
44404: LD_INT 5
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 5
44414: NEG
44415: PUSH
44416: LD_INT 4
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 5
44426: NEG
44427: PUSH
44428: LD_INT 5
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 5
44438: NEG
44439: PUSH
44440: LD_INT 6
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 6
44450: NEG
44451: PUSH
44452: LD_INT 5
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 6
44462: NEG
44463: PUSH
44464: LD_INT 6
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44486: LD_ADDR_VAR 0 41
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44530: LD_ADDR_VAR 0 42
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44571: LD_ADDR_VAR 0 43
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44611: LD_ADDR_VAR 0 44
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44652: LD_ADDR_VAR 0 45
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: NEG
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44696: LD_ADDR_VAR 0 46
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 3
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44742: LD_ADDR_VAR 0 47
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44775: LD_ADDR_VAR 0 48
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44806: LD_ADDR_VAR 0 49
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44835: LD_ADDR_VAR 0 50
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44864: LD_ADDR_VAR 0 51
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44895: LD_ADDR_VAR 0 52
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44928: LD_ADDR_VAR 0 53
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44972: LD_ADDR_VAR 0 54
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45013: LD_ADDR_VAR 0 55
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 3
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45053: LD_ADDR_VAR 0 56
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45094: LD_ADDR_VAR 0 57
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 3
45112: NEG
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45138: LD_ADDR_VAR 0 58
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: NEG
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45184: LD_ADDR_VAR 0 59
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45228: LD_ADDR_VAR 0 60
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45269: LD_ADDR_VAR 0 61
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45309: LD_ADDR_VAR 0 62
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45350: LD_ADDR_VAR 0 63
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45394: LD_ADDR_VAR 0 64
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// end ; 2 :
45440: GO 48706
45442: LD_INT 2
45444: DOUBLE
45445: EQUAL
45446: IFTRUE 45450
45448: GO 48705
45450: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45451: LD_ADDR_VAR 0 29
45455: PUSH
45456: LD_INT 4
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 4
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 5
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 5
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 3
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 5
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 3
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 4
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 4
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: LD_INT 4
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 4
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 4
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 4
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 4
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 5
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 5
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 4
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 5
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 4
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 4
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 4
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 4
45836: NEG
45837: PUSH
45838: LD_INT 4
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 4
45848: NEG
45849: PUSH
45850: LD_INT 5
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: LD_INT 4
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 4
45884: NEG
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: NEG
45897: PUSH
45898: LD_INT 4
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 5
45908: NEG
45909: PUSH
45910: LD_INT 5
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: LD_INT 5
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 5
45932: NEG
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45989: LD_ADDR_VAR 0 30
45993: PUSH
45994: LD_INT 4
45996: PUSH
45997: LD_INT 4
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 4
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 5
46016: PUSH
46017: LD_INT 4
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 5
46026: PUSH
46027: LD_INT 5
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 4
46036: PUSH
46037: LD_INT 5
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 4
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 5
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: LD_INT 5
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 4
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 4
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 3
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 4
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 4
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 4
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 4
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 5
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 5
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 5
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: LD_INT 4
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 4
46341: NEG
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 4
46353: NEG
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 4
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 4
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 5
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 4
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 3
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 4
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 5
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 5
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46536: LD_ADDR_VAR 0 31
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 4
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 4
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 5
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 4
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 5
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 4
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 4
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: LD_INT 4
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: NEG
46751: PUSH
46752: LD_INT 5
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 3
46762: NEG
46763: PUSH
46764: LD_INT 4
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 3
46774: NEG
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 4
46786: NEG
46787: PUSH
46788: LD_INT 3
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 5
46798: NEG
46799: PUSH
46800: LD_INT 4
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 5
46810: NEG
46811: PUSH
46812: LD_INT 5
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: LD_INT 5
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 5
46834: NEG
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 4
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 4
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 4
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 4
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 5
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 5
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 3
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 3
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 5
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47086: LD_ADDR_VAR 0 32
47090: PUSH
47091: LD_INT 4
47093: NEG
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 4
47104: NEG
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 4
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 5
47149: NEG
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 5
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 5
47172: NEG
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 4
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 4
47255: NEG
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 4
47267: NEG
47268: PUSH
47269: LD_INT 4
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 4
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 4
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 5
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 4
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 5
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 3
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 5
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 3
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 4
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 4
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 4
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 4
47498: PUSH
47499: LD_INT 4
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 5
47518: PUSH
47519: LD_INT 4
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 5
47528: PUSH
47529: LD_INT 5
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: LD_INT 5
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 4
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 5
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: LD_INT 5
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47633: LD_ADDR_VAR 0 33
47637: PUSH
47638: LD_INT 4
47640: NEG
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 4
47652: NEG
47653: PUSH
47654: LD_INT 5
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: LD_INT 4
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: LD_INT 3
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 4
47688: NEG
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 5
47700: NEG
47701: PUSH
47702: LD_INT 4
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 5
47712: NEG
47713: PUSH
47714: LD_INT 5
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: LD_INT 5
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 5
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 4
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 4
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: LD_INT 4
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 5
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 5
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 4
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 3
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 5
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: LD_INT 4
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: LD_INT 4
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 4
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 4
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 4
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 5
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 5
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 5
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48171: LD_ADDR_VAR 0 34
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 4
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 5
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 4
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 4
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 5
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 5
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 4
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 4
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: LD_INT 4
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 4
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: LD_INT 4
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 5
48403: PUSH
48404: LD_INT 5
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 4
48413: PUSH
48414: LD_INT 5
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 5
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 5
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 4
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 4
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 4
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 4
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 4
48601: NEG
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 5
48612: NEG
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 5
48623: NEG
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 5
48635: NEG
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// end ; end ;
48703: GO 48706
48705: POP
// case btype of b_depot , b_warehouse :
48706: LD_VAR 0 1
48710: PUSH
48711: LD_INT 0
48713: DOUBLE
48714: EQUAL
48715: IFTRUE 48725
48717: LD_INT 1
48719: DOUBLE
48720: EQUAL
48721: IFTRUE 48725
48723: GO 48926
48725: POP
// case nation of nation_american :
48726: LD_VAR 0 5
48730: PUSH
48731: LD_INT 1
48733: DOUBLE
48734: EQUAL
48735: IFTRUE 48739
48737: GO 48795
48739: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48740: LD_ADDR_VAR 0 9
48744: PUSH
48745: LD_VAR 0 11
48749: PUSH
48750: LD_VAR 0 12
48754: PUSH
48755: LD_VAR 0 13
48759: PUSH
48760: LD_VAR 0 14
48764: PUSH
48765: LD_VAR 0 15
48769: PUSH
48770: LD_VAR 0 16
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: PUSH
48783: LD_VAR 0 4
48787: PUSH
48788: LD_INT 1
48790: PLUS
48791: ARRAY
48792: ST_TO_ADDR
48793: GO 48924
48795: LD_INT 2
48797: DOUBLE
48798: EQUAL
48799: IFTRUE 48803
48801: GO 48859
48803: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48804: LD_ADDR_VAR 0 9
48808: PUSH
48809: LD_VAR 0 17
48813: PUSH
48814: LD_VAR 0 18
48818: PUSH
48819: LD_VAR 0 19
48823: PUSH
48824: LD_VAR 0 20
48828: PUSH
48829: LD_VAR 0 21
48833: PUSH
48834: LD_VAR 0 22
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: PUSH
48847: LD_VAR 0 4
48851: PUSH
48852: LD_INT 1
48854: PLUS
48855: ARRAY
48856: ST_TO_ADDR
48857: GO 48924
48859: LD_INT 3
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48867
48865: GO 48923
48867: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48868: LD_ADDR_VAR 0 9
48872: PUSH
48873: LD_VAR 0 23
48877: PUSH
48878: LD_VAR 0 24
48882: PUSH
48883: LD_VAR 0 25
48887: PUSH
48888: LD_VAR 0 26
48892: PUSH
48893: LD_VAR 0 27
48897: PUSH
48898: LD_VAR 0 28
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_INT 1
48918: PLUS
48919: ARRAY
48920: ST_TO_ADDR
48921: GO 48924
48923: POP
48924: GO 49479
48926: LD_INT 2
48928: DOUBLE
48929: EQUAL
48930: IFTRUE 48940
48932: LD_INT 3
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48940
48938: GO 48996
48940: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48941: LD_ADDR_VAR 0 9
48945: PUSH
48946: LD_VAR 0 29
48950: PUSH
48951: LD_VAR 0 30
48955: PUSH
48956: LD_VAR 0 31
48960: PUSH
48961: LD_VAR 0 32
48965: PUSH
48966: LD_VAR 0 33
48970: PUSH
48971: LD_VAR 0 34
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: PUSH
48984: LD_VAR 0 4
48988: PUSH
48989: LD_INT 1
48991: PLUS
48992: ARRAY
48993: ST_TO_ADDR
48994: GO 49479
48996: LD_INT 16
48998: DOUBLE
48999: EQUAL
49000: IFTRUE 49058
49002: LD_INT 17
49004: DOUBLE
49005: EQUAL
49006: IFTRUE 49058
49008: LD_INT 18
49010: DOUBLE
49011: EQUAL
49012: IFTRUE 49058
49014: LD_INT 19
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49058
49020: LD_INT 22
49022: DOUBLE
49023: EQUAL
49024: IFTRUE 49058
49026: LD_INT 20
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49058
49032: LD_INT 21
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49058
49038: LD_INT 23
49040: DOUBLE
49041: EQUAL
49042: IFTRUE 49058
49044: LD_INT 24
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49058
49050: LD_INT 25
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49058
49056: GO 49114
49058: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49059: LD_ADDR_VAR 0 9
49063: PUSH
49064: LD_VAR 0 35
49068: PUSH
49069: LD_VAR 0 36
49073: PUSH
49074: LD_VAR 0 37
49078: PUSH
49079: LD_VAR 0 38
49083: PUSH
49084: LD_VAR 0 39
49088: PUSH
49089: LD_VAR 0 40
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: PUSH
49102: LD_VAR 0 4
49106: PUSH
49107: LD_INT 1
49109: PLUS
49110: ARRAY
49111: ST_TO_ADDR
49112: GO 49479
49114: LD_INT 6
49116: DOUBLE
49117: EQUAL
49118: IFTRUE 49170
49120: LD_INT 7
49122: DOUBLE
49123: EQUAL
49124: IFTRUE 49170
49126: LD_INT 8
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49170
49132: LD_INT 13
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49170
49138: LD_INT 12
49140: DOUBLE
49141: EQUAL
49142: IFTRUE 49170
49144: LD_INT 15
49146: DOUBLE
49147: EQUAL
49148: IFTRUE 49170
49150: LD_INT 11
49152: DOUBLE
49153: EQUAL
49154: IFTRUE 49170
49156: LD_INT 14
49158: DOUBLE
49159: EQUAL
49160: IFTRUE 49170
49162: LD_INT 10
49164: DOUBLE
49165: EQUAL
49166: IFTRUE 49170
49168: GO 49226
49170: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49171: LD_ADDR_VAR 0 9
49175: PUSH
49176: LD_VAR 0 41
49180: PUSH
49181: LD_VAR 0 42
49185: PUSH
49186: LD_VAR 0 43
49190: PUSH
49191: LD_VAR 0 44
49195: PUSH
49196: LD_VAR 0 45
49200: PUSH
49201: LD_VAR 0 46
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: PUSH
49214: LD_VAR 0 4
49218: PUSH
49219: LD_INT 1
49221: PLUS
49222: ARRAY
49223: ST_TO_ADDR
49224: GO 49479
49226: LD_INT 36
49228: DOUBLE
49229: EQUAL
49230: IFTRUE 49234
49232: GO 49290
49234: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49235: LD_ADDR_VAR 0 9
49239: PUSH
49240: LD_VAR 0 47
49244: PUSH
49245: LD_VAR 0 48
49249: PUSH
49250: LD_VAR 0 49
49254: PUSH
49255: LD_VAR 0 50
49259: PUSH
49260: LD_VAR 0 51
49264: PUSH
49265: LD_VAR 0 52
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: LD_VAR 0 4
49282: PUSH
49283: LD_INT 1
49285: PLUS
49286: ARRAY
49287: ST_TO_ADDR
49288: GO 49479
49290: LD_INT 4
49292: DOUBLE
49293: EQUAL
49294: IFTRUE 49316
49296: LD_INT 5
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49316
49302: LD_INT 34
49304: DOUBLE
49305: EQUAL
49306: IFTRUE 49316
49308: LD_INT 37
49310: DOUBLE
49311: EQUAL
49312: IFTRUE 49316
49314: GO 49372
49316: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49317: LD_ADDR_VAR 0 9
49321: PUSH
49322: LD_VAR 0 53
49326: PUSH
49327: LD_VAR 0 54
49331: PUSH
49332: LD_VAR 0 55
49336: PUSH
49337: LD_VAR 0 56
49341: PUSH
49342: LD_VAR 0 57
49346: PUSH
49347: LD_VAR 0 58
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: PUSH
49360: LD_VAR 0 4
49364: PUSH
49365: LD_INT 1
49367: PLUS
49368: ARRAY
49369: ST_TO_ADDR
49370: GO 49479
49372: LD_INT 31
49374: DOUBLE
49375: EQUAL
49376: IFTRUE 49422
49378: LD_INT 32
49380: DOUBLE
49381: EQUAL
49382: IFTRUE 49422
49384: LD_INT 33
49386: DOUBLE
49387: EQUAL
49388: IFTRUE 49422
49390: LD_INT 27
49392: DOUBLE
49393: EQUAL
49394: IFTRUE 49422
49396: LD_INT 26
49398: DOUBLE
49399: EQUAL
49400: IFTRUE 49422
49402: LD_INT 28
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49422
49408: LD_INT 29
49410: DOUBLE
49411: EQUAL
49412: IFTRUE 49422
49414: LD_INT 30
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49422
49420: GO 49478
49422: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_VAR 0 59
49432: PUSH
49433: LD_VAR 0 60
49437: PUSH
49438: LD_VAR 0 61
49442: PUSH
49443: LD_VAR 0 62
49447: PUSH
49448: LD_VAR 0 63
49452: PUSH
49453: LD_VAR 0 64
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: PUSH
49466: LD_VAR 0 4
49470: PUSH
49471: LD_INT 1
49473: PLUS
49474: ARRAY
49475: ST_TO_ADDR
49476: GO 49479
49478: POP
// temp_list2 = [ ] ;
49479: LD_ADDR_VAR 0 10
49483: PUSH
49484: EMPTY
49485: ST_TO_ADDR
// for i in temp_list do
49486: LD_ADDR_VAR 0 8
49490: PUSH
49491: LD_VAR 0 9
49495: PUSH
49496: FOR_IN
49497: IFFALSE 49549
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49499: LD_ADDR_VAR 0 10
49503: PUSH
49504: LD_VAR 0 10
49508: PUSH
49509: LD_VAR 0 8
49513: PUSH
49514: LD_INT 1
49516: ARRAY
49517: PUSH
49518: LD_VAR 0 2
49522: PLUS
49523: PUSH
49524: LD_VAR 0 8
49528: PUSH
49529: LD_INT 2
49531: ARRAY
49532: PUSH
49533: LD_VAR 0 3
49537: PLUS
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: ADD
49546: ST_TO_ADDR
49547: GO 49496
49549: POP
49550: POP
// result = temp_list2 ;
49551: LD_ADDR_VAR 0 7
49555: PUSH
49556: LD_VAR 0 10
49560: ST_TO_ADDR
// end ;
49561: LD_VAR 0 7
49565: RET
// export function EnemyInRange ( unit , dist ) ; begin
49566: LD_INT 0
49568: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49569: LD_ADDR_VAR 0 3
49573: PUSH
49574: LD_VAR 0 1
49578: PPUSH
49579: CALL_OW 255
49583: PPUSH
49584: LD_VAR 0 1
49588: PPUSH
49589: CALL_OW 250
49593: PPUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: CALL_OW 251
49603: PPUSH
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL 22962 0 4
49613: PUSH
49614: LD_INT 4
49616: ARRAY
49617: ST_TO_ADDR
// end ;
49618: LD_VAR 0 3
49622: RET
// export function PlayerSeeMe ( unit ) ; begin
49623: LD_INT 0
49625: PPUSH
// result := See ( your_side , unit ) ;
49626: LD_ADDR_VAR 0 2
49630: PUSH
49631: LD_OWVAR 2
49635: PPUSH
49636: LD_VAR 0 1
49640: PPUSH
49641: CALL_OW 292
49645: ST_TO_ADDR
// end ;
49646: LD_VAR 0 2
49650: RET
// export function ReverseDir ( unit ) ; begin
49651: LD_INT 0
49653: PPUSH
// if not unit then
49654: LD_VAR 0 1
49658: NOT
49659: IFFALSE 49663
// exit ;
49661: GO 49686
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49663: LD_ADDR_VAR 0 2
49667: PUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 254
49677: PUSH
49678: LD_INT 3
49680: PLUS
49681: PUSH
49682: LD_INT 6
49684: MOD
49685: ST_TO_ADDR
// end ;
49686: LD_VAR 0 2
49690: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49691: LD_INT 0
49693: PPUSH
49694: PPUSH
49695: PPUSH
49696: PPUSH
49697: PPUSH
// if not hexes then
49698: LD_VAR 0 2
49702: NOT
49703: IFFALSE 49707
// exit ;
49705: GO 49855
// dist := 9999 ;
49707: LD_ADDR_VAR 0 5
49711: PUSH
49712: LD_INT 9999
49714: ST_TO_ADDR
// for i = 1 to hexes do
49715: LD_ADDR_VAR 0 4
49719: PUSH
49720: DOUBLE
49721: LD_INT 1
49723: DEC
49724: ST_TO_ADDR
49725: LD_VAR 0 2
49729: PUSH
49730: FOR_TO
49731: IFFALSE 49843
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49733: LD_VAR 0 1
49737: PPUSH
49738: LD_VAR 0 2
49742: PUSH
49743: LD_VAR 0 4
49747: ARRAY
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PPUSH
49753: LD_VAR 0 2
49757: PUSH
49758: LD_VAR 0 4
49762: ARRAY
49763: PUSH
49764: LD_INT 2
49766: ARRAY
49767: PPUSH
49768: CALL_OW 297
49772: PUSH
49773: LD_VAR 0 5
49777: LESS
49778: IFFALSE 49841
// begin hex := hexes [ i ] ;
49780: LD_ADDR_VAR 0 7
49784: PUSH
49785: LD_VAR 0 2
49789: PUSH
49790: LD_VAR 0 4
49794: ARRAY
49795: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49796: LD_ADDR_VAR 0 5
49800: PUSH
49801: LD_VAR 0 1
49805: PPUSH
49806: LD_VAR 0 2
49810: PUSH
49811: LD_VAR 0 4
49815: ARRAY
49816: PUSH
49817: LD_INT 1
49819: ARRAY
49820: PPUSH
49821: LD_VAR 0 2
49825: PUSH
49826: LD_VAR 0 4
49830: ARRAY
49831: PUSH
49832: LD_INT 2
49834: ARRAY
49835: PPUSH
49836: CALL_OW 297
49840: ST_TO_ADDR
// end ; end ;
49841: GO 49730
49843: POP
49844: POP
// result := hex ;
49845: LD_ADDR_VAR 0 3
49849: PUSH
49850: LD_VAR 0 7
49854: ST_TO_ADDR
// end ;
49855: LD_VAR 0 3
49859: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49860: LD_INT 0
49862: PPUSH
49863: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49864: LD_VAR 0 1
49868: NOT
49869: PUSH
49870: LD_VAR 0 1
49874: PUSH
49875: LD_INT 21
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 23
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PPUSH
49899: CALL_OW 69
49903: IN
49904: NOT
49905: OR
49906: IFFALSE 49910
// exit ;
49908: GO 49957
// for i = 1 to 3 do
49910: LD_ADDR_VAR 0 3
49914: PUSH
49915: DOUBLE
49916: LD_INT 1
49918: DEC
49919: ST_TO_ADDR
49920: LD_INT 3
49922: PUSH
49923: FOR_TO
49924: IFFALSE 49955
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 250
49935: PPUSH
49936: LD_VAR 0 1
49940: PPUSH
49941: CALL_OW 251
49945: PPUSH
49946: LD_INT 1
49948: PPUSH
49949: CALL_OW 453
49953: GO 49923
49955: POP
49956: POP
// end ;
49957: LD_VAR 0 2
49961: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49962: LD_INT 0
49964: PPUSH
49965: PPUSH
49966: PPUSH
49967: PPUSH
49968: PPUSH
49969: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49970: LD_VAR 0 1
49974: NOT
49975: PUSH
49976: LD_VAR 0 2
49980: NOT
49981: OR
49982: PUSH
49983: LD_VAR 0 1
49987: PPUSH
49988: CALL_OW 314
49992: OR
49993: IFFALSE 49997
// exit ;
49995: GO 50438
// x := GetX ( enemy_unit ) ;
49997: LD_ADDR_VAR 0 7
50001: PUSH
50002: LD_VAR 0 2
50006: PPUSH
50007: CALL_OW 250
50011: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50012: LD_ADDR_VAR 0 8
50016: PUSH
50017: LD_VAR 0 2
50021: PPUSH
50022: CALL_OW 251
50026: ST_TO_ADDR
// if not x or not y then
50027: LD_VAR 0 7
50031: NOT
50032: PUSH
50033: LD_VAR 0 8
50037: NOT
50038: OR
50039: IFFALSE 50043
// exit ;
50041: GO 50438
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50043: LD_ADDR_VAR 0 6
50047: PUSH
50048: LD_VAR 0 7
50052: PPUSH
50053: LD_INT 0
50055: PPUSH
50056: LD_INT 4
50058: PPUSH
50059: CALL_OW 272
50063: PUSH
50064: LD_VAR 0 8
50068: PPUSH
50069: LD_INT 0
50071: PPUSH
50072: LD_INT 4
50074: PPUSH
50075: CALL_OW 273
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_VAR 0 7
50088: PPUSH
50089: LD_INT 1
50091: PPUSH
50092: LD_INT 4
50094: PPUSH
50095: CALL_OW 272
50099: PUSH
50100: LD_VAR 0 8
50104: PPUSH
50105: LD_INT 1
50107: PPUSH
50108: LD_INT 4
50110: PPUSH
50111: CALL_OW 273
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_VAR 0 7
50124: PPUSH
50125: LD_INT 2
50127: PPUSH
50128: LD_INT 4
50130: PPUSH
50131: CALL_OW 272
50135: PUSH
50136: LD_VAR 0 8
50140: PPUSH
50141: LD_INT 2
50143: PPUSH
50144: LD_INT 4
50146: PPUSH
50147: CALL_OW 273
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_VAR 0 7
50160: PPUSH
50161: LD_INT 3
50163: PPUSH
50164: LD_INT 4
50166: PPUSH
50167: CALL_OW 272
50171: PUSH
50172: LD_VAR 0 8
50176: PPUSH
50177: LD_INT 3
50179: PPUSH
50180: LD_INT 4
50182: PPUSH
50183: CALL_OW 273
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_VAR 0 7
50196: PPUSH
50197: LD_INT 4
50199: PPUSH
50200: LD_INT 4
50202: PPUSH
50203: CALL_OW 272
50207: PUSH
50208: LD_VAR 0 8
50212: PPUSH
50213: LD_INT 4
50215: PPUSH
50216: LD_INT 4
50218: PPUSH
50219: CALL_OW 273
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_VAR 0 7
50232: PPUSH
50233: LD_INT 5
50235: PPUSH
50236: LD_INT 4
50238: PPUSH
50239: CALL_OW 272
50243: PUSH
50244: LD_VAR 0 8
50248: PPUSH
50249: LD_INT 5
50251: PPUSH
50252: LD_INT 4
50254: PPUSH
50255: CALL_OW 273
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: ST_TO_ADDR
// for i = tmp downto 1 do
50272: LD_ADDR_VAR 0 4
50276: PUSH
50277: DOUBLE
50278: LD_VAR 0 6
50282: INC
50283: ST_TO_ADDR
50284: LD_INT 1
50286: PUSH
50287: FOR_DOWNTO
50288: IFFALSE 50389
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50290: LD_VAR 0 6
50294: PUSH
50295: LD_VAR 0 4
50299: ARRAY
50300: PUSH
50301: LD_INT 1
50303: ARRAY
50304: PPUSH
50305: LD_VAR 0 6
50309: PUSH
50310: LD_VAR 0 4
50314: ARRAY
50315: PUSH
50316: LD_INT 2
50318: ARRAY
50319: PPUSH
50320: CALL_OW 488
50324: NOT
50325: PUSH
50326: LD_VAR 0 6
50330: PUSH
50331: LD_VAR 0 4
50335: ARRAY
50336: PUSH
50337: LD_INT 1
50339: ARRAY
50340: PPUSH
50341: LD_VAR 0 6
50345: PUSH
50346: LD_VAR 0 4
50350: ARRAY
50351: PUSH
50352: LD_INT 2
50354: ARRAY
50355: PPUSH
50356: CALL_OW 428
50360: PUSH
50361: LD_INT 0
50363: NONEQUAL
50364: OR
50365: IFFALSE 50387
// tmp := Delete ( tmp , i ) ;
50367: LD_ADDR_VAR 0 6
50371: PUSH
50372: LD_VAR 0 6
50376: PPUSH
50377: LD_VAR 0 4
50381: PPUSH
50382: CALL_OW 3
50386: ST_TO_ADDR
50387: GO 50287
50389: POP
50390: POP
// j := GetClosestHex ( unit , tmp ) ;
50391: LD_ADDR_VAR 0 5
50395: PUSH
50396: LD_VAR 0 1
50400: PPUSH
50401: LD_VAR 0 6
50405: PPUSH
50406: CALL 49691 0 2
50410: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50411: LD_VAR 0 1
50415: PPUSH
50416: LD_VAR 0 5
50420: PUSH
50421: LD_INT 1
50423: ARRAY
50424: PPUSH
50425: LD_VAR 0 5
50429: PUSH
50430: LD_INT 2
50432: ARRAY
50433: PPUSH
50434: CALL_OW 111
// end ;
50438: LD_VAR 0 3
50442: RET
// export function PrepareApemanSoldier ( ) ; begin
50443: LD_INT 0
50445: PPUSH
// uc_nation := 0 ;
50446: LD_ADDR_OWVAR 21
50450: PUSH
50451: LD_INT 0
50453: ST_TO_ADDR
// hc_sex := sex_male ;
50454: LD_ADDR_OWVAR 27
50458: PUSH
50459: LD_INT 1
50461: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50462: LD_ADDR_OWVAR 28
50466: PUSH
50467: LD_INT 15
50469: ST_TO_ADDR
// hc_gallery :=  ;
50470: LD_ADDR_OWVAR 33
50474: PUSH
50475: LD_STRING 
50477: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50478: LD_ADDR_OWVAR 31
50482: PUSH
50483: LD_INT 0
50485: PPUSH
50486: LD_INT 3
50488: PPUSH
50489: CALL_OW 12
50493: PUSH
50494: LD_INT 0
50496: PPUSH
50497: LD_INT 3
50499: PPUSH
50500: CALL_OW 12
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// end ;
50517: LD_VAR 0 1
50521: RET
// export function PrepareApemanEngineer ( ) ; begin
50522: LD_INT 0
50524: PPUSH
// uc_nation := 0 ;
50525: LD_ADDR_OWVAR 21
50529: PUSH
50530: LD_INT 0
50532: ST_TO_ADDR
// hc_sex := sex_male ;
50533: LD_ADDR_OWVAR 27
50537: PUSH
50538: LD_INT 1
50540: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50541: LD_ADDR_OWVAR 28
50545: PUSH
50546: LD_INT 16
50548: ST_TO_ADDR
// hc_gallery :=  ;
50549: LD_ADDR_OWVAR 33
50553: PUSH
50554: LD_STRING 
50556: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50557: LD_ADDR_OWVAR 31
50561: PUSH
50562: LD_INT 0
50564: PPUSH
50565: LD_INT 3
50567: PPUSH
50568: CALL_OW 12
50572: PUSH
50573: LD_INT 0
50575: PPUSH
50576: LD_INT 3
50578: PPUSH
50579: CALL_OW 12
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
// end ;
50596: LD_VAR 0 1
50600: RET
// export function PrepareApeman ( agressivity ) ; begin
50601: LD_INT 0
50603: PPUSH
// uc_side := 0 ;
50604: LD_ADDR_OWVAR 20
50608: PUSH
50609: LD_INT 0
50611: ST_TO_ADDR
// uc_nation := 0 ;
50612: LD_ADDR_OWVAR 21
50616: PUSH
50617: LD_INT 0
50619: ST_TO_ADDR
// hc_sex := sex_male ;
50620: LD_ADDR_OWVAR 27
50624: PUSH
50625: LD_INT 1
50627: ST_TO_ADDR
// hc_class := class_apeman ;
50628: LD_ADDR_OWVAR 28
50632: PUSH
50633: LD_INT 12
50635: ST_TO_ADDR
// hc_gallery :=  ;
50636: LD_ADDR_OWVAR 33
50640: PUSH
50641: LD_STRING 
50643: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50644: LD_ADDR_OWVAR 35
50648: PUSH
50649: LD_VAR 0 1
50653: NEG
50654: PPUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: CALL_OW 12
50664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50665: LD_ADDR_OWVAR 31
50669: PUSH
50670: LD_INT 0
50672: PPUSH
50673: LD_INT 3
50675: PPUSH
50676: CALL_OW 12
50680: PUSH
50681: LD_INT 0
50683: PPUSH
50684: LD_INT 3
50686: PPUSH
50687: CALL_OW 12
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// end ;
50704: LD_VAR 0 2
50708: RET
// export function PrepareTiger ( agressivity ) ; begin
50709: LD_INT 0
50711: PPUSH
// uc_side := 0 ;
50712: LD_ADDR_OWVAR 20
50716: PUSH
50717: LD_INT 0
50719: ST_TO_ADDR
// uc_nation := 0 ;
50720: LD_ADDR_OWVAR 21
50724: PUSH
50725: LD_INT 0
50727: ST_TO_ADDR
// hc_class := class_tiger ;
50728: LD_ADDR_OWVAR 28
50732: PUSH
50733: LD_INT 14
50735: ST_TO_ADDR
// hc_gallery :=  ;
50736: LD_ADDR_OWVAR 33
50740: PUSH
50741: LD_STRING 
50743: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50744: LD_ADDR_OWVAR 35
50748: PUSH
50749: LD_VAR 0 1
50753: NEG
50754: PPUSH
50755: LD_VAR 0 1
50759: PPUSH
50760: CALL_OW 12
50764: ST_TO_ADDR
// end ;
50765: LD_VAR 0 2
50769: RET
// export function PrepareEnchidna ( ) ; begin
50770: LD_INT 0
50772: PPUSH
// uc_side := 0 ;
50773: LD_ADDR_OWVAR 20
50777: PUSH
50778: LD_INT 0
50780: ST_TO_ADDR
// uc_nation := 0 ;
50781: LD_ADDR_OWVAR 21
50785: PUSH
50786: LD_INT 0
50788: ST_TO_ADDR
// hc_class := class_baggie ;
50789: LD_ADDR_OWVAR 28
50793: PUSH
50794: LD_INT 13
50796: ST_TO_ADDR
// hc_gallery :=  ;
50797: LD_ADDR_OWVAR 33
50801: PUSH
50802: LD_STRING 
50804: ST_TO_ADDR
// end ;
50805: LD_VAR 0 1
50809: RET
// export function PrepareFrog ( ) ; begin
50810: LD_INT 0
50812: PPUSH
// uc_side := 0 ;
50813: LD_ADDR_OWVAR 20
50817: PUSH
50818: LD_INT 0
50820: ST_TO_ADDR
// uc_nation := 0 ;
50821: LD_ADDR_OWVAR 21
50825: PUSH
50826: LD_INT 0
50828: ST_TO_ADDR
// hc_class := class_frog ;
50829: LD_ADDR_OWVAR 28
50833: PUSH
50834: LD_INT 19
50836: ST_TO_ADDR
// hc_gallery :=  ;
50837: LD_ADDR_OWVAR 33
50841: PUSH
50842: LD_STRING 
50844: ST_TO_ADDR
// end ;
50845: LD_VAR 0 1
50849: RET
// export function PrepareFish ( ) ; begin
50850: LD_INT 0
50852: PPUSH
// uc_side := 0 ;
50853: LD_ADDR_OWVAR 20
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// uc_nation := 0 ;
50861: LD_ADDR_OWVAR 21
50865: PUSH
50866: LD_INT 0
50868: ST_TO_ADDR
// hc_class := class_fish ;
50869: LD_ADDR_OWVAR 28
50873: PUSH
50874: LD_INT 20
50876: ST_TO_ADDR
// hc_gallery :=  ;
50877: LD_ADDR_OWVAR 33
50881: PUSH
50882: LD_STRING 
50884: ST_TO_ADDR
// end ;
50885: LD_VAR 0 1
50889: RET
// export function PrepareBird ( ) ; begin
50890: LD_INT 0
50892: PPUSH
// uc_side := 0 ;
50893: LD_ADDR_OWVAR 20
50897: PUSH
50898: LD_INT 0
50900: ST_TO_ADDR
// uc_nation := 0 ;
50901: LD_ADDR_OWVAR 21
50905: PUSH
50906: LD_INT 0
50908: ST_TO_ADDR
// hc_class := class_phororhacos ;
50909: LD_ADDR_OWVAR 28
50913: PUSH
50914: LD_INT 18
50916: ST_TO_ADDR
// hc_gallery :=  ;
50917: LD_ADDR_OWVAR 33
50921: PUSH
50922: LD_STRING 
50924: ST_TO_ADDR
// end ;
50925: LD_VAR 0 1
50929: RET
// export function PrepareHorse ( ) ; begin
50930: LD_INT 0
50932: PPUSH
// uc_side := 0 ;
50933: LD_ADDR_OWVAR 20
50937: PUSH
50938: LD_INT 0
50940: ST_TO_ADDR
// uc_nation := 0 ;
50941: LD_ADDR_OWVAR 21
50945: PUSH
50946: LD_INT 0
50948: ST_TO_ADDR
// hc_class := class_horse ;
50949: LD_ADDR_OWVAR 28
50953: PUSH
50954: LD_INT 21
50956: ST_TO_ADDR
// hc_gallery :=  ;
50957: LD_ADDR_OWVAR 33
50961: PUSH
50962: LD_STRING 
50964: ST_TO_ADDR
// end ;
50965: LD_VAR 0 1
50969: RET
// export function PrepareMastodont ( ) ; begin
50970: LD_INT 0
50972: PPUSH
// uc_side := 0 ;
50973: LD_ADDR_OWVAR 20
50977: PUSH
50978: LD_INT 0
50980: ST_TO_ADDR
// uc_nation := 0 ;
50981: LD_ADDR_OWVAR 21
50985: PUSH
50986: LD_INT 0
50988: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50989: LD_ADDR_OWVAR 37
50993: PUSH
50994: LD_INT 31
50996: ST_TO_ADDR
// vc_control := control_rider ;
50997: LD_ADDR_OWVAR 38
51001: PUSH
51002: LD_INT 4
51004: ST_TO_ADDR
// end ;
51005: LD_VAR 0 1
51009: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51010: LD_INT 0
51012: PPUSH
51013: PPUSH
51014: PPUSH
// uc_side = 0 ;
51015: LD_ADDR_OWVAR 20
51019: PUSH
51020: LD_INT 0
51022: ST_TO_ADDR
// uc_nation = 0 ;
51023: LD_ADDR_OWVAR 21
51027: PUSH
51028: LD_INT 0
51030: ST_TO_ADDR
// InitHc_All ( ) ;
51031: CALL_OW 584
// InitVc ;
51035: CALL_OW 20
// if mastodonts then
51039: LD_VAR 0 6
51043: IFFALSE 51110
// for i = 1 to mastodonts do
51045: LD_ADDR_VAR 0 11
51049: PUSH
51050: DOUBLE
51051: LD_INT 1
51053: DEC
51054: ST_TO_ADDR
51055: LD_VAR 0 6
51059: PUSH
51060: FOR_TO
51061: IFFALSE 51108
// begin vc_chassis := 31 ;
51063: LD_ADDR_OWVAR 37
51067: PUSH
51068: LD_INT 31
51070: ST_TO_ADDR
// vc_control := control_rider ;
51071: LD_ADDR_OWVAR 38
51075: PUSH
51076: LD_INT 4
51078: ST_TO_ADDR
// animal := CreateVehicle ;
51079: LD_ADDR_VAR 0 12
51083: PUSH
51084: CALL_OW 45
51088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51089: LD_VAR 0 12
51093: PPUSH
51094: LD_VAR 0 8
51098: PPUSH
51099: LD_INT 0
51101: PPUSH
51102: CALL 53245 0 3
// end ;
51106: GO 51060
51108: POP
51109: POP
// if horses then
51110: LD_VAR 0 5
51114: IFFALSE 51181
// for i = 1 to horses do
51116: LD_ADDR_VAR 0 11
51120: PUSH
51121: DOUBLE
51122: LD_INT 1
51124: DEC
51125: ST_TO_ADDR
51126: LD_VAR 0 5
51130: PUSH
51131: FOR_TO
51132: IFFALSE 51179
// begin hc_class := 21 ;
51134: LD_ADDR_OWVAR 28
51138: PUSH
51139: LD_INT 21
51141: ST_TO_ADDR
// hc_gallery :=  ;
51142: LD_ADDR_OWVAR 33
51146: PUSH
51147: LD_STRING 
51149: ST_TO_ADDR
// animal := CreateHuman ;
51150: LD_ADDR_VAR 0 12
51154: PUSH
51155: CALL_OW 44
51159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51160: LD_VAR 0 12
51164: PPUSH
51165: LD_VAR 0 8
51169: PPUSH
51170: LD_INT 0
51172: PPUSH
51173: CALL 53245 0 3
// end ;
51177: GO 51131
51179: POP
51180: POP
// if birds then
51181: LD_VAR 0 1
51185: IFFALSE 51252
// for i = 1 to birds do
51187: LD_ADDR_VAR 0 11
51191: PUSH
51192: DOUBLE
51193: LD_INT 1
51195: DEC
51196: ST_TO_ADDR
51197: LD_VAR 0 1
51201: PUSH
51202: FOR_TO
51203: IFFALSE 51250
// begin hc_class = 18 ;
51205: LD_ADDR_OWVAR 28
51209: PUSH
51210: LD_INT 18
51212: ST_TO_ADDR
// hc_gallery =  ;
51213: LD_ADDR_OWVAR 33
51217: PUSH
51218: LD_STRING 
51220: ST_TO_ADDR
// animal := CreateHuman ;
51221: LD_ADDR_VAR 0 12
51225: PUSH
51226: CALL_OW 44
51230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51231: LD_VAR 0 12
51235: PPUSH
51236: LD_VAR 0 8
51240: PPUSH
51241: LD_INT 0
51243: PPUSH
51244: CALL 53245 0 3
// end ;
51248: GO 51202
51250: POP
51251: POP
// if tigers then
51252: LD_VAR 0 2
51256: IFFALSE 51340
// for i = 1 to tigers do
51258: LD_ADDR_VAR 0 11
51262: PUSH
51263: DOUBLE
51264: LD_INT 1
51266: DEC
51267: ST_TO_ADDR
51268: LD_VAR 0 2
51272: PUSH
51273: FOR_TO
51274: IFFALSE 51338
// begin hc_class = class_tiger ;
51276: LD_ADDR_OWVAR 28
51280: PUSH
51281: LD_INT 14
51283: ST_TO_ADDR
// hc_gallery =  ;
51284: LD_ADDR_OWVAR 33
51288: PUSH
51289: LD_STRING 
51291: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51292: LD_ADDR_OWVAR 35
51296: PUSH
51297: LD_INT 7
51299: NEG
51300: PPUSH
51301: LD_INT 7
51303: PPUSH
51304: CALL_OW 12
51308: ST_TO_ADDR
// animal := CreateHuman ;
51309: LD_ADDR_VAR 0 12
51313: PUSH
51314: CALL_OW 44
51318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51319: LD_VAR 0 12
51323: PPUSH
51324: LD_VAR 0 8
51328: PPUSH
51329: LD_INT 0
51331: PPUSH
51332: CALL 53245 0 3
// end ;
51336: GO 51273
51338: POP
51339: POP
// if apemans then
51340: LD_VAR 0 3
51344: IFFALSE 51467
// for i = 1 to apemans do
51346: LD_ADDR_VAR 0 11
51350: PUSH
51351: DOUBLE
51352: LD_INT 1
51354: DEC
51355: ST_TO_ADDR
51356: LD_VAR 0 3
51360: PUSH
51361: FOR_TO
51362: IFFALSE 51465
// begin hc_class = class_apeman ;
51364: LD_ADDR_OWVAR 28
51368: PUSH
51369: LD_INT 12
51371: ST_TO_ADDR
// hc_gallery =  ;
51372: LD_ADDR_OWVAR 33
51376: PUSH
51377: LD_STRING 
51379: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51380: LD_ADDR_OWVAR 35
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PPUSH
51389: LD_INT 2
51391: PPUSH
51392: CALL_OW 12
51396: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51397: LD_ADDR_OWVAR 31
51401: PUSH
51402: LD_INT 1
51404: PPUSH
51405: LD_INT 3
51407: PPUSH
51408: CALL_OW 12
51412: PUSH
51413: LD_INT 1
51415: PPUSH
51416: LD_INT 3
51418: PPUSH
51419: CALL_OW 12
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// animal := CreateHuman ;
51436: LD_ADDR_VAR 0 12
51440: PUSH
51441: CALL_OW 44
51445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51446: LD_VAR 0 12
51450: PPUSH
51451: LD_VAR 0 8
51455: PPUSH
51456: LD_INT 0
51458: PPUSH
51459: CALL 53245 0 3
// end ;
51463: GO 51361
51465: POP
51466: POP
// if enchidnas then
51467: LD_VAR 0 4
51471: IFFALSE 51538
// for i = 1 to enchidnas do
51473: LD_ADDR_VAR 0 11
51477: PUSH
51478: DOUBLE
51479: LD_INT 1
51481: DEC
51482: ST_TO_ADDR
51483: LD_VAR 0 4
51487: PUSH
51488: FOR_TO
51489: IFFALSE 51536
// begin hc_class = 13 ;
51491: LD_ADDR_OWVAR 28
51495: PUSH
51496: LD_INT 13
51498: ST_TO_ADDR
// hc_gallery =  ;
51499: LD_ADDR_OWVAR 33
51503: PUSH
51504: LD_STRING 
51506: ST_TO_ADDR
// animal := CreateHuman ;
51507: LD_ADDR_VAR 0 12
51511: PUSH
51512: CALL_OW 44
51516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51517: LD_VAR 0 12
51521: PPUSH
51522: LD_VAR 0 8
51526: PPUSH
51527: LD_INT 0
51529: PPUSH
51530: CALL 53245 0 3
// end ;
51534: GO 51488
51536: POP
51537: POP
// if fishes then
51538: LD_VAR 0 7
51542: IFFALSE 51609
// for i = 1 to fishes do
51544: LD_ADDR_VAR 0 11
51548: PUSH
51549: DOUBLE
51550: LD_INT 1
51552: DEC
51553: ST_TO_ADDR
51554: LD_VAR 0 7
51558: PUSH
51559: FOR_TO
51560: IFFALSE 51607
// begin hc_class = 20 ;
51562: LD_ADDR_OWVAR 28
51566: PUSH
51567: LD_INT 20
51569: ST_TO_ADDR
// hc_gallery =  ;
51570: LD_ADDR_OWVAR 33
51574: PUSH
51575: LD_STRING 
51577: ST_TO_ADDR
// animal := CreateHuman ;
51578: LD_ADDR_VAR 0 12
51582: PUSH
51583: CALL_OW 44
51587: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51588: LD_VAR 0 12
51592: PPUSH
51593: LD_VAR 0 9
51597: PPUSH
51598: LD_INT 0
51600: PPUSH
51601: CALL 53245 0 3
// end ;
51605: GO 51559
51607: POP
51608: POP
// end ;
51609: LD_VAR 0 10
51613: RET
// export function WantHeal ( sci , unit ) ; begin
51614: LD_INT 0
51616: PPUSH
// if GetTaskList ( sci ) > 0 then
51617: LD_VAR 0 1
51621: PPUSH
51622: CALL_OW 437
51626: PUSH
51627: LD_INT 0
51629: GREATER
51630: IFFALSE 51700
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 437
51641: PUSH
51642: LD_INT 1
51644: ARRAY
51645: PUSH
51646: LD_INT 1
51648: ARRAY
51649: PUSH
51650: LD_STRING l
51652: EQUAL
51653: PUSH
51654: LD_VAR 0 1
51658: PPUSH
51659: CALL_OW 437
51663: PUSH
51664: LD_INT 1
51666: ARRAY
51667: PUSH
51668: LD_INT 4
51670: ARRAY
51671: PUSH
51672: LD_VAR 0 2
51676: EQUAL
51677: AND
51678: IFFALSE 51690
// result := true else
51680: LD_ADDR_VAR 0 3
51684: PUSH
51685: LD_INT 1
51687: ST_TO_ADDR
51688: GO 51698
// result := false ;
51690: LD_ADDR_VAR 0 3
51694: PUSH
51695: LD_INT 0
51697: ST_TO_ADDR
// end else
51698: GO 51708
// result := false ;
51700: LD_ADDR_VAR 0 3
51704: PUSH
51705: LD_INT 0
51707: ST_TO_ADDR
// end ;
51708: LD_VAR 0 3
51712: RET
// export function HealTarget ( sci ) ; begin
51713: LD_INT 0
51715: PPUSH
// if not sci then
51716: LD_VAR 0 1
51720: NOT
51721: IFFALSE 51725
// exit ;
51723: GO 51790
// result := 0 ;
51725: LD_ADDR_VAR 0 2
51729: PUSH
51730: LD_INT 0
51732: ST_TO_ADDR
// if GetTaskList ( sci ) then
51733: LD_VAR 0 1
51737: PPUSH
51738: CALL_OW 437
51742: IFFALSE 51790
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 437
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: PUSH
51758: LD_INT 1
51760: ARRAY
51761: PUSH
51762: LD_STRING l
51764: EQUAL
51765: IFFALSE 51790
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51767: LD_ADDR_VAR 0 2
51771: PUSH
51772: LD_VAR 0 1
51776: PPUSH
51777: CALL_OW 437
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: PUSH
51786: LD_INT 4
51788: ARRAY
51789: ST_TO_ADDR
// end ;
51790: LD_VAR 0 2
51794: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51795: LD_INT 0
51797: PPUSH
51798: PPUSH
51799: PPUSH
51800: PPUSH
// if not base_units then
51801: LD_VAR 0 1
51805: NOT
51806: IFFALSE 51810
// exit ;
51808: GO 51897
// result := false ;
51810: LD_ADDR_VAR 0 2
51814: PUSH
51815: LD_INT 0
51817: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51818: LD_ADDR_VAR 0 5
51822: PUSH
51823: LD_VAR 0 1
51827: PPUSH
51828: LD_INT 21
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PPUSH
51838: CALL_OW 72
51842: ST_TO_ADDR
// if not tmp then
51843: LD_VAR 0 5
51847: NOT
51848: IFFALSE 51852
// exit ;
51850: GO 51897
// for i in tmp do
51852: LD_ADDR_VAR 0 3
51856: PUSH
51857: LD_VAR 0 5
51861: PUSH
51862: FOR_IN
51863: IFFALSE 51895
// begin result := EnemyInRange ( i , 22 ) ;
51865: LD_ADDR_VAR 0 2
51869: PUSH
51870: LD_VAR 0 3
51874: PPUSH
51875: LD_INT 22
51877: PPUSH
51878: CALL 49566 0 2
51882: ST_TO_ADDR
// if result then
51883: LD_VAR 0 2
51887: IFFALSE 51893
// exit ;
51889: POP
51890: POP
51891: GO 51897
// end ;
51893: GO 51862
51895: POP
51896: POP
// end ;
51897: LD_VAR 0 2
51901: RET
// export function FilterByTag ( units , tag ) ; begin
51902: LD_INT 0
51904: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51905: LD_ADDR_VAR 0 3
51909: PUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: LD_INT 120
51917: PUSH
51918: LD_VAR 0 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PPUSH
51927: CALL_OW 72
51931: ST_TO_ADDR
// end ;
51932: LD_VAR 0 3
51936: RET
// export function IsDriver ( un ) ; begin
51937: LD_INT 0
51939: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51940: LD_ADDR_VAR 0 2
51944: PUSH
51945: LD_VAR 0 1
51949: PUSH
51950: LD_INT 55
51952: PUSH
51953: EMPTY
51954: LIST
51955: PPUSH
51956: CALL_OW 69
51960: IN
51961: ST_TO_ADDR
// end ;
51962: LD_VAR 0 2
51966: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51967: LD_INT 0
51969: PPUSH
51970: PPUSH
// list := [ ] ;
51971: LD_ADDR_VAR 0 5
51975: PUSH
51976: EMPTY
51977: ST_TO_ADDR
// case d of 0 :
51978: LD_VAR 0 3
51982: PUSH
51983: LD_INT 0
51985: DOUBLE
51986: EQUAL
51987: IFTRUE 51991
51989: GO 52124
51991: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51992: LD_ADDR_VAR 0 5
51996: PUSH
51997: LD_VAR 0 1
52001: PUSH
52002: LD_INT 4
52004: MINUS
52005: PUSH
52006: LD_VAR 0 2
52010: PUSH
52011: LD_INT 4
52013: MINUS
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: PUSH
52023: LD_VAR 0 1
52027: PUSH
52028: LD_INT 3
52030: MINUS
52031: PUSH
52032: LD_VAR 0 2
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: LD_VAR 0 1
52049: PUSH
52050: LD_INT 4
52052: PLUS
52053: PUSH
52054: LD_VAR 0 2
52058: PUSH
52059: LD_INT 4
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: PUSH
52067: LD_VAR 0 1
52071: PUSH
52072: LD_INT 3
52074: PLUS
52075: PUSH
52076: LD_VAR 0 2
52080: PUSH
52081: LD_INT 3
52083: PLUS
52084: PUSH
52085: LD_INT 5
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: PUSH
52093: LD_VAR 0 1
52097: PUSH
52098: LD_VAR 0 2
52102: PUSH
52103: LD_INT 4
52105: PLUS
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: ST_TO_ADDR
// end ; 1 :
52122: GO 52822
52124: LD_INT 1
52126: DOUBLE
52127: EQUAL
52128: IFTRUE 52132
52130: GO 52265
52132: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52133: LD_ADDR_VAR 0 5
52137: PUSH
52138: LD_VAR 0 1
52142: PUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_INT 4
52150: MINUS
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: PUSH
52160: LD_VAR 0 1
52164: PUSH
52165: LD_INT 3
52167: MINUS
52168: PUSH
52169: LD_VAR 0 2
52173: PUSH
52174: LD_INT 3
52176: MINUS
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: PUSH
52186: LD_VAR 0 1
52190: PUSH
52191: LD_INT 4
52193: MINUS
52194: PUSH
52195: LD_VAR 0 2
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: PUSH
52208: LD_VAR 0 1
52212: PUSH
52213: LD_VAR 0 2
52217: PUSH
52218: LD_INT 3
52220: PLUS
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: PUSH
52230: LD_VAR 0 1
52234: PUSH
52235: LD_INT 4
52237: PLUS
52238: PUSH
52239: LD_VAR 0 2
52243: PUSH
52244: LD_INT 4
52246: PLUS
52247: PUSH
52248: LD_INT 5
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// end ; 2 :
52263: GO 52822
52265: LD_INT 2
52267: DOUBLE
52268: EQUAL
52269: IFTRUE 52273
52271: GO 52402
52273: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52274: LD_ADDR_VAR 0 5
52278: PUSH
52279: LD_VAR 0 1
52283: PUSH
52284: LD_VAR 0 2
52288: PUSH
52289: LD_INT 3
52291: MINUS
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: PUSH
52301: LD_VAR 0 1
52305: PUSH
52306: LD_INT 4
52308: PLUS
52309: PUSH
52310: LD_VAR 0 2
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: PUSH
52323: LD_VAR 0 1
52327: PUSH
52328: LD_VAR 0 2
52332: PUSH
52333: LD_INT 4
52335: PLUS
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: LD_VAR 0 1
52349: PUSH
52350: LD_INT 3
52352: MINUS
52353: PUSH
52354: LD_VAR 0 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: PUSH
52367: LD_VAR 0 1
52371: PUSH
52372: LD_INT 4
52374: MINUS
52375: PUSH
52376: LD_VAR 0 2
52380: PUSH
52381: LD_INT 4
52383: MINUS
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: ST_TO_ADDR
// end ; 3 :
52400: GO 52822
52402: LD_INT 3
52404: DOUBLE
52405: EQUAL
52406: IFTRUE 52410
52408: GO 52543
52410: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52411: LD_ADDR_VAR 0 5
52415: PUSH
52416: LD_VAR 0 1
52420: PUSH
52421: LD_INT 3
52423: PLUS
52424: PUSH
52425: LD_VAR 0 2
52429: PUSH
52430: LD_INT 4
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: PUSH
52438: LD_VAR 0 1
52442: PUSH
52443: LD_INT 4
52445: PLUS
52446: PUSH
52447: LD_VAR 0 2
52451: PUSH
52452: LD_INT 4
52454: PLUS
52455: PUSH
52456: LD_INT 5
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: PUSH
52464: LD_VAR 0 1
52468: PUSH
52469: LD_INT 4
52471: MINUS
52472: PUSH
52473: LD_VAR 0 2
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: LD_VAR 0 1
52490: PUSH
52491: LD_VAR 0 2
52495: PUSH
52496: LD_INT 4
52498: MINUS
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_INT 3
52515: MINUS
52516: PUSH
52517: LD_VAR 0 2
52521: PUSH
52522: LD_INT 3
52524: MINUS
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// end ; 4 :
52541: GO 52822
52543: LD_INT 4
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52551
52549: GO 52684
52551: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52552: LD_ADDR_VAR 0 5
52556: PUSH
52557: LD_VAR 0 1
52561: PUSH
52562: LD_VAR 0 2
52566: PUSH
52567: LD_INT 4
52569: PLUS
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: LIST
52578: PUSH
52579: LD_VAR 0 1
52583: PUSH
52584: LD_INT 3
52586: PLUS
52587: PUSH
52588: LD_VAR 0 2
52592: PUSH
52593: LD_INT 3
52595: PLUS
52596: PUSH
52597: LD_INT 5
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: PUSH
52605: LD_VAR 0 1
52609: PUSH
52610: LD_INT 4
52612: PLUS
52613: PUSH
52614: LD_VAR 0 2
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: PUSH
52627: LD_VAR 0 1
52631: PUSH
52632: LD_VAR 0 2
52636: PUSH
52637: LD_INT 3
52639: MINUS
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: PUSH
52649: LD_VAR 0 1
52653: PUSH
52654: LD_INT 4
52656: MINUS
52657: PUSH
52658: LD_VAR 0 2
52662: PUSH
52663: LD_INT 4
52665: MINUS
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: ST_TO_ADDR
// end ; 5 :
52682: GO 52822
52684: LD_INT 5
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52692
52690: GO 52821
52692: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52693: LD_ADDR_VAR 0 5
52697: PUSH
52698: LD_VAR 0 1
52702: PUSH
52703: LD_INT 4
52705: MINUS
52706: PUSH
52707: LD_VAR 0 2
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: PUSH
52720: LD_VAR 0 1
52724: PUSH
52725: LD_VAR 0 2
52729: PUSH
52730: LD_INT 4
52732: MINUS
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: PUSH
52742: LD_VAR 0 1
52746: PUSH
52747: LD_INT 4
52749: PLUS
52750: PUSH
52751: LD_VAR 0 2
52755: PUSH
52756: LD_INT 4
52758: PLUS
52759: PUSH
52760: LD_INT 5
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: PUSH
52768: LD_VAR 0 1
52772: PUSH
52773: LD_INT 3
52775: PLUS
52776: PUSH
52777: LD_VAR 0 2
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: PUSH
52790: LD_VAR 0 1
52794: PUSH
52795: LD_VAR 0 2
52799: PUSH
52800: LD_INT 3
52802: PLUS
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: ST_TO_ADDR
// end ; end ;
52819: GO 52822
52821: POP
// result := list ;
52822: LD_ADDR_VAR 0 4
52826: PUSH
52827: LD_VAR 0 5
52831: ST_TO_ADDR
// end ;
52832: LD_VAR 0 4
52836: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52837: LD_INT 0
52839: PPUSH
52840: PPUSH
52841: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52842: LD_VAR 0 1
52846: NOT
52847: PUSH
52848: LD_VAR 0 2
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: LD_INT 4
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: IN
52871: NOT
52872: OR
52873: IFFALSE 52877
// exit ;
52875: GO 52969
// tmp := [ ] ;
52877: LD_ADDR_VAR 0 5
52881: PUSH
52882: EMPTY
52883: ST_TO_ADDR
// for i in units do
52884: LD_ADDR_VAR 0 4
52888: PUSH
52889: LD_VAR 0 1
52893: PUSH
52894: FOR_IN
52895: IFFALSE 52938
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52897: LD_ADDR_VAR 0 5
52901: PUSH
52902: LD_VAR 0 5
52906: PPUSH
52907: LD_VAR 0 5
52911: PUSH
52912: LD_INT 1
52914: PLUS
52915: PPUSH
52916: LD_VAR 0 4
52920: PPUSH
52921: LD_VAR 0 2
52925: PPUSH
52926: CALL_OW 259
52930: PPUSH
52931: CALL_OW 2
52935: ST_TO_ADDR
52936: GO 52894
52938: POP
52939: POP
// if not tmp then
52940: LD_VAR 0 5
52944: NOT
52945: IFFALSE 52949
// exit ;
52947: GO 52969
// result := SortListByListDesc ( units , tmp ) ;
52949: LD_ADDR_VAR 0 3
52953: PUSH
52954: LD_VAR 0 1
52958: PPUSH
52959: LD_VAR 0 5
52963: PPUSH
52964: CALL_OW 77
52968: ST_TO_ADDR
// end ;
52969: LD_VAR 0 3
52973: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52974: LD_INT 0
52976: PPUSH
52977: PPUSH
52978: PPUSH
// result := false ;
52979: LD_ADDR_VAR 0 3
52983: PUSH
52984: LD_INT 0
52986: ST_TO_ADDR
// x := GetX ( building ) ;
52987: LD_ADDR_VAR 0 4
52991: PUSH
52992: LD_VAR 0 2
52996: PPUSH
52997: CALL_OW 250
53001: ST_TO_ADDR
// y := GetY ( building ) ;
53002: LD_ADDR_VAR 0 5
53006: PUSH
53007: LD_VAR 0 2
53011: PPUSH
53012: CALL_OW 251
53016: ST_TO_ADDR
// if not building or not x or not y then
53017: LD_VAR 0 2
53021: NOT
53022: PUSH
53023: LD_VAR 0 4
53027: NOT
53028: OR
53029: PUSH
53030: LD_VAR 0 5
53034: NOT
53035: OR
53036: IFFALSE 53040
// exit ;
53038: GO 53132
// if GetTaskList ( unit ) then
53040: LD_VAR 0 1
53044: PPUSH
53045: CALL_OW 437
53049: IFFALSE 53132
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53051: LD_STRING e
53053: PUSH
53054: LD_VAR 0 1
53058: PPUSH
53059: CALL_OW 437
53063: PUSH
53064: LD_INT 1
53066: ARRAY
53067: PUSH
53068: LD_INT 1
53070: ARRAY
53071: EQUAL
53072: PUSH
53073: LD_VAR 0 4
53077: PUSH
53078: LD_VAR 0 1
53082: PPUSH
53083: CALL_OW 437
53087: PUSH
53088: LD_INT 1
53090: ARRAY
53091: PUSH
53092: LD_INT 2
53094: ARRAY
53095: EQUAL
53096: AND
53097: PUSH
53098: LD_VAR 0 5
53102: PUSH
53103: LD_VAR 0 1
53107: PPUSH
53108: CALL_OW 437
53112: PUSH
53113: LD_INT 1
53115: ARRAY
53116: PUSH
53117: LD_INT 3
53119: ARRAY
53120: EQUAL
53121: AND
53122: IFFALSE 53132
// result := true end ;
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_INT 1
53131: ST_TO_ADDR
// end ;
53132: LD_VAR 0 3
53136: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53137: LD_INT 0
53139: PPUSH
// result := false ;
53140: LD_ADDR_VAR 0 4
53144: PUSH
53145: LD_INT 0
53147: ST_TO_ADDR
// if GetTaskList ( unit ) then
53148: LD_VAR 0 1
53152: PPUSH
53153: CALL_OW 437
53157: IFFALSE 53240
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53159: LD_STRING M
53161: PUSH
53162: LD_VAR 0 1
53166: PPUSH
53167: CALL_OW 437
53171: PUSH
53172: LD_INT 1
53174: ARRAY
53175: PUSH
53176: LD_INT 1
53178: ARRAY
53179: EQUAL
53180: PUSH
53181: LD_VAR 0 2
53185: PUSH
53186: LD_VAR 0 1
53190: PPUSH
53191: CALL_OW 437
53195: PUSH
53196: LD_INT 1
53198: ARRAY
53199: PUSH
53200: LD_INT 2
53202: ARRAY
53203: EQUAL
53204: AND
53205: PUSH
53206: LD_VAR 0 3
53210: PUSH
53211: LD_VAR 0 1
53215: PPUSH
53216: CALL_OW 437
53220: PUSH
53221: LD_INT 1
53223: ARRAY
53224: PUSH
53225: LD_INT 3
53227: ARRAY
53228: EQUAL
53229: AND
53230: IFFALSE 53240
// result := true ;
53232: LD_ADDR_VAR 0 4
53236: PUSH
53237: LD_INT 1
53239: ST_TO_ADDR
// end ; end ;
53240: LD_VAR 0 4
53244: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53245: LD_INT 0
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
// if not unit or not area then
53251: LD_VAR 0 1
53255: NOT
53256: PUSH
53257: LD_VAR 0 2
53261: NOT
53262: OR
53263: IFFALSE 53267
// exit ;
53265: GO 53431
// tmp := AreaToList ( area , i ) ;
53267: LD_ADDR_VAR 0 6
53271: PUSH
53272: LD_VAR 0 2
53276: PPUSH
53277: LD_VAR 0 5
53281: PPUSH
53282: CALL_OW 517
53286: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53287: LD_ADDR_VAR 0 5
53291: PUSH
53292: DOUBLE
53293: LD_INT 1
53295: DEC
53296: ST_TO_ADDR
53297: LD_VAR 0 6
53301: PUSH
53302: LD_INT 1
53304: ARRAY
53305: PUSH
53306: FOR_TO
53307: IFFALSE 53429
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53309: LD_ADDR_VAR 0 7
53313: PUSH
53314: LD_VAR 0 6
53318: PUSH
53319: LD_INT 1
53321: ARRAY
53322: PUSH
53323: LD_VAR 0 5
53327: ARRAY
53328: PUSH
53329: LD_VAR 0 6
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PUSH
53338: LD_VAR 0 5
53342: ARRAY
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53348: LD_VAR 0 7
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PPUSH
53357: LD_VAR 0 7
53361: PUSH
53362: LD_INT 2
53364: ARRAY
53365: PPUSH
53366: CALL_OW 428
53370: PUSH
53371: LD_INT 0
53373: EQUAL
53374: IFFALSE 53427
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53376: LD_VAR 0 1
53380: PPUSH
53381: LD_VAR 0 7
53385: PUSH
53386: LD_INT 1
53388: ARRAY
53389: PPUSH
53390: LD_VAR 0 7
53394: PUSH
53395: LD_INT 2
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 3
53403: PPUSH
53404: CALL_OW 48
// result := IsPlaced ( unit ) ;
53408: LD_ADDR_VAR 0 4
53412: PUSH
53413: LD_VAR 0 1
53417: PPUSH
53418: CALL_OW 305
53422: ST_TO_ADDR
// exit ;
53423: POP
53424: POP
53425: GO 53431
// end ; end ;
53427: GO 53306
53429: POP
53430: POP
// end ;
53431: LD_VAR 0 4
53435: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53436: LD_INT 0
53438: PPUSH
53439: PPUSH
53440: PPUSH
// if not side or side > 8 then
53441: LD_VAR 0 1
53445: NOT
53446: PUSH
53447: LD_VAR 0 1
53451: PUSH
53452: LD_INT 8
53454: GREATER
53455: OR
53456: IFFALSE 53460
// exit ;
53458: GO 53647
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53460: LD_ADDR_VAR 0 4
53464: PUSH
53465: LD_INT 22
53467: PUSH
53468: LD_VAR 0 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 21
53479: PUSH
53480: LD_INT 3
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PPUSH
53491: CALL_OW 69
53495: ST_TO_ADDR
// if not tmp then
53496: LD_VAR 0 4
53500: NOT
53501: IFFALSE 53505
// exit ;
53503: GO 53647
// enable_addtolog := true ;
53505: LD_ADDR_OWVAR 81
53509: PUSH
53510: LD_INT 1
53512: ST_TO_ADDR
// AddToLog ( [ ) ;
53513: LD_STRING [
53515: PPUSH
53516: CALL_OW 561
// for i in tmp do
53520: LD_ADDR_VAR 0 3
53524: PUSH
53525: LD_VAR 0 4
53529: PUSH
53530: FOR_IN
53531: IFFALSE 53638
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53533: LD_STRING [
53535: PUSH
53536: LD_VAR 0 3
53540: PPUSH
53541: CALL_OW 266
53545: STR
53546: PUSH
53547: LD_STRING , 
53549: STR
53550: PUSH
53551: LD_VAR 0 3
53555: PPUSH
53556: CALL_OW 250
53560: STR
53561: PUSH
53562: LD_STRING , 
53564: STR
53565: PUSH
53566: LD_VAR 0 3
53570: PPUSH
53571: CALL_OW 251
53575: STR
53576: PUSH
53577: LD_STRING , 
53579: STR
53580: PUSH
53581: LD_VAR 0 3
53585: PPUSH
53586: CALL_OW 254
53590: STR
53591: PUSH
53592: LD_STRING , 
53594: STR
53595: PUSH
53596: LD_VAR 0 3
53600: PPUSH
53601: LD_INT 1
53603: PPUSH
53604: CALL_OW 268
53608: STR
53609: PUSH
53610: LD_STRING , 
53612: STR
53613: PUSH
53614: LD_VAR 0 3
53618: PPUSH
53619: LD_INT 2
53621: PPUSH
53622: CALL_OW 268
53626: STR
53627: PUSH
53628: LD_STRING ],
53630: STR
53631: PPUSH
53632: CALL_OW 561
// end ;
53636: GO 53530
53638: POP
53639: POP
// AddToLog ( ]; ) ;
53640: LD_STRING ];
53642: PPUSH
53643: CALL_OW 561
// end ;
53647: LD_VAR 0 2
53651: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53652: LD_INT 0
53654: PPUSH
53655: PPUSH
53656: PPUSH
53657: PPUSH
53658: PPUSH
// if not area or not rate or not max then
53659: LD_VAR 0 1
53663: NOT
53664: PUSH
53665: LD_VAR 0 2
53669: NOT
53670: OR
53671: PUSH
53672: LD_VAR 0 4
53676: NOT
53677: OR
53678: IFFALSE 53682
// exit ;
53680: GO 53871
// while 1 do
53682: LD_INT 1
53684: IFFALSE 53871
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53686: LD_ADDR_VAR 0 9
53690: PUSH
53691: LD_VAR 0 1
53695: PPUSH
53696: LD_INT 1
53698: PPUSH
53699: CALL_OW 287
53703: PUSH
53704: LD_INT 10
53706: MUL
53707: ST_TO_ADDR
// r := rate / 10 ;
53708: LD_ADDR_VAR 0 7
53712: PUSH
53713: LD_VAR 0 2
53717: PUSH
53718: LD_INT 10
53720: DIVREAL
53721: ST_TO_ADDR
// time := 1 1$00 ;
53722: LD_ADDR_VAR 0 8
53726: PUSH
53727: LD_INT 2100
53729: ST_TO_ADDR
// if amount < min then
53730: LD_VAR 0 9
53734: PUSH
53735: LD_VAR 0 3
53739: LESS
53740: IFFALSE 53758
// r := r * 2 else
53742: LD_ADDR_VAR 0 7
53746: PUSH
53747: LD_VAR 0 7
53751: PUSH
53752: LD_INT 2
53754: MUL
53755: ST_TO_ADDR
53756: GO 53784
// if amount > max then
53758: LD_VAR 0 9
53762: PUSH
53763: LD_VAR 0 4
53767: GREATER
53768: IFFALSE 53784
// r := r / 2 ;
53770: LD_ADDR_VAR 0 7
53774: PUSH
53775: LD_VAR 0 7
53779: PUSH
53780: LD_INT 2
53782: DIVREAL
53783: ST_TO_ADDR
// time := time / r ;
53784: LD_ADDR_VAR 0 8
53788: PUSH
53789: LD_VAR 0 8
53793: PUSH
53794: LD_VAR 0 7
53798: DIVREAL
53799: ST_TO_ADDR
// if time < 0 then
53800: LD_VAR 0 8
53804: PUSH
53805: LD_INT 0
53807: LESS
53808: IFFALSE 53825
// time := time * - 1 ;
53810: LD_ADDR_VAR 0 8
53814: PUSH
53815: LD_VAR 0 8
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: MUL
53824: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53825: LD_VAR 0 8
53829: PUSH
53830: LD_INT 35
53832: PPUSH
53833: LD_INT 875
53835: PPUSH
53836: CALL_OW 12
53840: PLUS
53841: PPUSH
53842: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53846: LD_INT 1
53848: PPUSH
53849: LD_INT 5
53851: PPUSH
53852: CALL_OW 12
53856: PPUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: LD_INT 1
53864: PPUSH
53865: CALL_OW 55
// end ;
53869: GO 53682
// end ;
53871: LD_VAR 0 5
53875: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53876: LD_INT 0
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
// if not turrets or not factories then
53886: LD_VAR 0 1
53890: NOT
53891: PUSH
53892: LD_VAR 0 2
53896: NOT
53897: OR
53898: IFFALSE 53902
// exit ;
53900: GO 54209
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53902: LD_ADDR_VAR 0 10
53906: PUSH
53907: LD_INT 5
53909: PUSH
53910: LD_INT 6
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: LD_INT 5
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 24
53944: PUSH
53945: LD_INT 25
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 23
53954: PUSH
53955: LD_INT 27
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 42
53968: PUSH
53969: LD_INT 43
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 44
53978: PUSH
53979: LD_INT 46
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 45
53988: PUSH
53989: LD_INT 47
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: LIST
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: ST_TO_ADDR
// result := [ ] ;
54006: LD_ADDR_VAR 0 3
54010: PUSH
54011: EMPTY
54012: ST_TO_ADDR
// for i in turrets do
54013: LD_ADDR_VAR 0 4
54017: PUSH
54018: LD_VAR 0 1
54022: PUSH
54023: FOR_IN
54024: IFFALSE 54207
// begin nat := GetNation ( i ) ;
54026: LD_ADDR_VAR 0 7
54030: PUSH
54031: LD_VAR 0 4
54035: PPUSH
54036: CALL_OW 248
54040: ST_TO_ADDR
// weapon := 0 ;
54041: LD_ADDR_VAR 0 8
54045: PUSH
54046: LD_INT 0
54048: ST_TO_ADDR
// if not nat then
54049: LD_VAR 0 7
54053: NOT
54054: IFFALSE 54058
// continue ;
54056: GO 54023
// for j in list [ nat ] do
54058: LD_ADDR_VAR 0 5
54062: PUSH
54063: LD_VAR 0 10
54067: PUSH
54068: LD_VAR 0 7
54072: ARRAY
54073: PUSH
54074: FOR_IN
54075: IFFALSE 54116
// if GetBWeapon ( i ) = j [ 1 ] then
54077: LD_VAR 0 4
54081: PPUSH
54082: CALL_OW 269
54086: PUSH
54087: LD_VAR 0 5
54091: PUSH
54092: LD_INT 1
54094: ARRAY
54095: EQUAL
54096: IFFALSE 54114
// begin weapon := j [ 2 ] ;
54098: LD_ADDR_VAR 0 8
54102: PUSH
54103: LD_VAR 0 5
54107: PUSH
54108: LD_INT 2
54110: ARRAY
54111: ST_TO_ADDR
// break ;
54112: GO 54116
// end ;
54114: GO 54074
54116: POP
54117: POP
// if not weapon then
54118: LD_VAR 0 8
54122: NOT
54123: IFFALSE 54127
// continue ;
54125: GO 54023
// for k in factories do
54127: LD_ADDR_VAR 0 6
54131: PUSH
54132: LD_VAR 0 2
54136: PUSH
54137: FOR_IN
54138: IFFALSE 54203
// begin weapons := AvailableWeaponList ( k ) ;
54140: LD_ADDR_VAR 0 9
54144: PUSH
54145: LD_VAR 0 6
54149: PPUSH
54150: CALL_OW 478
54154: ST_TO_ADDR
// if not weapons then
54155: LD_VAR 0 9
54159: NOT
54160: IFFALSE 54164
// continue ;
54162: GO 54137
// if weapon in weapons then
54164: LD_VAR 0 8
54168: PUSH
54169: LD_VAR 0 9
54173: IN
54174: IFFALSE 54201
// begin result := [ i , weapon ] ;
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_VAR 0 4
54185: PUSH
54186: LD_VAR 0 8
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// exit ;
54195: POP
54196: POP
54197: POP
54198: POP
54199: GO 54209
// end ; end ;
54201: GO 54137
54203: POP
54204: POP
// end ;
54205: GO 54023
54207: POP
54208: POP
// end ;
54209: LD_VAR 0 3
54213: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54214: LD_INT 0
54216: PPUSH
// if not side or side > 8 then
54217: LD_VAR 0 3
54221: NOT
54222: PUSH
54223: LD_VAR 0 3
54227: PUSH
54228: LD_INT 8
54230: GREATER
54231: OR
54232: IFFALSE 54236
// exit ;
54234: GO 54295
// if not range then
54236: LD_VAR 0 4
54240: NOT
54241: IFFALSE 54252
// range := - 12 ;
54243: LD_ADDR_VAR 0 4
54247: PUSH
54248: LD_INT 12
54250: NEG
54251: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54252: LD_VAR 0 1
54256: PPUSH
54257: LD_VAR 0 2
54261: PPUSH
54262: LD_VAR 0 3
54266: PPUSH
54267: LD_VAR 0 4
54271: PPUSH
54272: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54276: LD_VAR 0 1
54280: PPUSH
54281: LD_VAR 0 2
54285: PPUSH
54286: LD_VAR 0 3
54290: PPUSH
54291: CALL_OW 331
// end ;
54295: LD_VAR 0 5
54299: RET
// export function Video ( mode ) ; begin
54300: LD_INT 0
54302: PPUSH
// ingame_video = mode ;
54303: LD_ADDR_OWVAR 52
54307: PUSH
54308: LD_VAR 0 1
54312: ST_TO_ADDR
// interface_hidden = mode ;
54313: LD_ADDR_OWVAR 54
54317: PUSH
54318: LD_VAR 0 1
54322: ST_TO_ADDR
// end ;
54323: LD_VAR 0 2
54327: RET
// export function Join ( array , element ) ; begin
54328: LD_INT 0
54330: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54331: LD_ADDR_VAR 0 3
54335: PUSH
54336: LD_VAR 0 1
54340: PPUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 1
54348: PLUS
54349: PPUSH
54350: LD_VAR 0 2
54354: PPUSH
54355: CALL_OW 1
54359: ST_TO_ADDR
// end ;
54360: LD_VAR 0 3
54364: RET
// export function JoinUnion ( array , element ) ; begin
54365: LD_INT 0
54367: PPUSH
// result := array union element ;
54368: LD_ADDR_VAR 0 3
54372: PUSH
54373: LD_VAR 0 1
54377: PUSH
54378: LD_VAR 0 2
54382: UNION
54383: ST_TO_ADDR
// end ;
54384: LD_VAR 0 3
54388: RET
// export function GetBehemoths ( side ) ; begin
54389: LD_INT 0
54391: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54392: LD_ADDR_VAR 0 2
54396: PUSH
54397: LD_INT 22
54399: PUSH
54400: LD_VAR 0 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 31
54411: PUSH
54412: LD_INT 25
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PPUSH
54423: CALL_OW 69
54427: ST_TO_ADDR
// end ;
54428: LD_VAR 0 2
54432: RET
// export function Shuffle ( array ) ; var i , index ; begin
54433: LD_INT 0
54435: PPUSH
54436: PPUSH
54437: PPUSH
// result := [ ] ;
54438: LD_ADDR_VAR 0 2
54442: PUSH
54443: EMPTY
54444: ST_TO_ADDR
// if not array then
54445: LD_VAR 0 1
54449: NOT
54450: IFFALSE 54454
// exit ;
54452: GO 54553
// Randomize ;
54454: CALL_OW 10
// for i = array downto 1 do
54458: LD_ADDR_VAR 0 3
54462: PUSH
54463: DOUBLE
54464: LD_VAR 0 1
54468: INC
54469: ST_TO_ADDR
54470: LD_INT 1
54472: PUSH
54473: FOR_DOWNTO
54474: IFFALSE 54551
// begin index := rand ( 1 , array ) ;
54476: LD_ADDR_VAR 0 4
54480: PUSH
54481: LD_INT 1
54483: PPUSH
54484: LD_VAR 0 1
54488: PPUSH
54489: CALL_OW 12
54493: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54494: LD_ADDR_VAR 0 2
54498: PUSH
54499: LD_VAR 0 2
54503: PPUSH
54504: LD_VAR 0 2
54508: PUSH
54509: LD_INT 1
54511: PLUS
54512: PPUSH
54513: LD_VAR 0 1
54517: PUSH
54518: LD_VAR 0 4
54522: ARRAY
54523: PPUSH
54524: CALL_OW 2
54528: ST_TO_ADDR
// array := Delete ( array , index ) ;
54529: LD_ADDR_VAR 0 1
54533: PUSH
54534: LD_VAR 0 1
54538: PPUSH
54539: LD_VAR 0 4
54543: PPUSH
54544: CALL_OW 3
54548: ST_TO_ADDR
// end ;
54549: GO 54473
54551: POP
54552: POP
// end ;
54553: LD_VAR 0 2
54557: RET
// export function GetBaseMaterials ( base ) ; begin
54558: LD_INT 0
54560: PPUSH
// result := [ 0 , 0 , 0 ] ;
54561: LD_ADDR_VAR 0 2
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// if not base then
54580: LD_VAR 0 1
54584: NOT
54585: IFFALSE 54589
// exit ;
54587: GO 54638
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54589: LD_ADDR_VAR 0 2
54593: PUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: LD_INT 1
54601: PPUSH
54602: CALL_OW 275
54606: PUSH
54607: LD_VAR 0 1
54611: PPUSH
54612: LD_INT 2
54614: PPUSH
54615: CALL_OW 275
54619: PUSH
54620: LD_VAR 0 1
54624: PPUSH
54625: LD_INT 3
54627: PPUSH
54628: CALL_OW 275
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// end ;
54638: LD_VAR 0 2
54642: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54643: LD_INT 0
54645: PPUSH
54646: PPUSH
// result := array ;
54647: LD_ADDR_VAR 0 3
54651: PUSH
54652: LD_VAR 0 1
54656: ST_TO_ADDR
// if size >= result then
54657: LD_VAR 0 2
54661: PUSH
54662: LD_VAR 0 3
54666: GREATEREQUAL
54667: IFFALSE 54671
// exit ;
54669: GO 54721
// if size then
54671: LD_VAR 0 2
54675: IFFALSE 54721
// for i := array downto size do
54677: LD_ADDR_VAR 0 4
54681: PUSH
54682: DOUBLE
54683: LD_VAR 0 1
54687: INC
54688: ST_TO_ADDR
54689: LD_VAR 0 2
54693: PUSH
54694: FOR_DOWNTO
54695: IFFALSE 54719
// result := Delete ( result , result ) ;
54697: LD_ADDR_VAR 0 3
54701: PUSH
54702: LD_VAR 0 3
54706: PPUSH
54707: LD_VAR 0 3
54711: PPUSH
54712: CALL_OW 3
54716: ST_TO_ADDR
54717: GO 54694
54719: POP
54720: POP
// end ;
54721: LD_VAR 0 3
54725: RET
// export function ComExit ( unit ) ; var tmp ; begin
54726: LD_INT 0
54728: PPUSH
54729: PPUSH
// if not IsInUnit ( unit ) then
54730: LD_VAR 0 1
54734: PPUSH
54735: CALL_OW 310
54739: NOT
54740: IFFALSE 54744
// exit ;
54742: GO 54804
// tmp := IsInUnit ( unit ) ;
54744: LD_ADDR_VAR 0 3
54748: PUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: CALL_OW 310
54758: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54759: LD_VAR 0 3
54763: PPUSH
54764: CALL_OW 247
54768: PUSH
54769: LD_INT 2
54771: EQUAL
54772: IFFALSE 54785
// ComExitVehicle ( unit ) else
54774: LD_VAR 0 1
54778: PPUSH
54779: CALL_OW 121
54783: GO 54794
// ComExitBuilding ( unit ) ;
54785: LD_VAR 0 1
54789: PPUSH
54790: CALL_OW 122
// result := tmp ;
54794: LD_ADDR_VAR 0 2
54798: PUSH
54799: LD_VAR 0 3
54803: ST_TO_ADDR
// end ;
54804: LD_VAR 0 2
54808: RET
// export function ComExitAll ( units ) ; var i ; begin
54809: LD_INT 0
54811: PPUSH
54812: PPUSH
// if not units then
54813: LD_VAR 0 1
54817: NOT
54818: IFFALSE 54822
// exit ;
54820: GO 54848
// for i in units do
54822: LD_ADDR_VAR 0 3
54826: PUSH
54827: LD_VAR 0 1
54831: PUSH
54832: FOR_IN
54833: IFFALSE 54846
// ComExit ( i ) ;
54835: LD_VAR 0 3
54839: PPUSH
54840: CALL 54726 0 1
54844: GO 54832
54846: POP
54847: POP
// end ;
54848: LD_VAR 0 2
54852: RET
// export function ResetHc ; begin
54853: LD_INT 0
54855: PPUSH
// InitHc ;
54856: CALL_OW 19
// hc_importance := 0 ;
54860: LD_ADDR_OWVAR 32
54864: PUSH
54865: LD_INT 0
54867: ST_TO_ADDR
// end ;
54868: LD_VAR 0 1
54872: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54873: LD_INT 0
54875: PPUSH
54876: PPUSH
54877: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54878: LD_ADDR_VAR 0 6
54882: PUSH
54883: LD_VAR 0 1
54887: PUSH
54888: LD_VAR 0 3
54892: PLUS
54893: PUSH
54894: LD_INT 2
54896: DIV
54897: ST_TO_ADDR
// if _x < 0 then
54898: LD_VAR 0 6
54902: PUSH
54903: LD_INT 0
54905: LESS
54906: IFFALSE 54923
// _x := _x * - 1 ;
54908: LD_ADDR_VAR 0 6
54912: PUSH
54913: LD_VAR 0 6
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: MUL
54922: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: LD_VAR 0 2
54932: PUSH
54933: LD_VAR 0 4
54937: PLUS
54938: PUSH
54939: LD_INT 2
54941: DIV
54942: ST_TO_ADDR
// if _y < 0 then
54943: LD_VAR 0 7
54947: PUSH
54948: LD_INT 0
54950: LESS
54951: IFFALSE 54968
// _y := _y * - 1 ;
54953: LD_ADDR_VAR 0 7
54957: PUSH
54958: LD_VAR 0 7
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: MUL
54967: ST_TO_ADDR
// result := [ _x , _y ] ;
54968: LD_ADDR_VAR 0 5
54972: PUSH
54973: LD_VAR 0 6
54977: PUSH
54978: LD_VAR 0 7
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// end ;
54987: LD_VAR 0 5
54991: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54992: LD_INT 0
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
// task := GetTaskList ( unit ) ;
54998: LD_ADDR_VAR 0 7
55002: PUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 437
55012: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55013: LD_VAR 0 7
55017: NOT
55018: PUSH
55019: LD_VAR 0 1
55023: PPUSH
55024: LD_VAR 0 2
55028: PPUSH
55029: CALL_OW 308
55033: NOT
55034: AND
55035: IFFALSE 55039
// exit ;
55037: GO 55157
// if IsInArea ( unit , area ) then
55039: LD_VAR 0 1
55043: PPUSH
55044: LD_VAR 0 2
55048: PPUSH
55049: CALL_OW 308
55053: IFFALSE 55071
// begin ComMoveToArea ( unit , goAway ) ;
55055: LD_VAR 0 1
55059: PPUSH
55060: LD_VAR 0 3
55064: PPUSH
55065: CALL_OW 113
// exit ;
55069: GO 55157
// end ; if task [ 1 ] [ 1 ] <> M then
55071: LD_VAR 0 7
55075: PUSH
55076: LD_INT 1
55078: ARRAY
55079: PUSH
55080: LD_INT 1
55082: ARRAY
55083: PUSH
55084: LD_STRING M
55086: NONEQUAL
55087: IFFALSE 55091
// exit ;
55089: GO 55157
// x := task [ 1 ] [ 2 ] ;
55091: LD_ADDR_VAR 0 5
55095: PUSH
55096: LD_VAR 0 7
55100: PUSH
55101: LD_INT 1
55103: ARRAY
55104: PUSH
55105: LD_INT 2
55107: ARRAY
55108: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55109: LD_ADDR_VAR 0 6
55113: PUSH
55114: LD_VAR 0 7
55118: PUSH
55119: LD_INT 1
55121: ARRAY
55122: PUSH
55123: LD_INT 3
55125: ARRAY
55126: ST_TO_ADDR
// if InArea ( x , y , area ) then
55127: LD_VAR 0 5
55131: PPUSH
55132: LD_VAR 0 6
55136: PPUSH
55137: LD_VAR 0 2
55141: PPUSH
55142: CALL_OW 309
55146: IFFALSE 55157
// ComStop ( unit ) ;
55148: LD_VAR 0 1
55152: PPUSH
55153: CALL_OW 141
// end ;
55157: LD_VAR 0 4
55161: RET
// export function Abs ( value ) ; begin
55162: LD_INT 0
55164: PPUSH
// result := value ;
55165: LD_ADDR_VAR 0 2
55169: PUSH
55170: LD_VAR 0 1
55174: ST_TO_ADDR
// if value < 0 then
55175: LD_VAR 0 1
55179: PUSH
55180: LD_INT 0
55182: LESS
55183: IFFALSE 55200
// result := value * - 1 ;
55185: LD_ADDR_VAR 0 2
55189: PUSH
55190: LD_VAR 0 1
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: MUL
55199: ST_TO_ADDR
// end ;
55200: LD_VAR 0 2
55204: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55205: LD_INT 0
55207: PPUSH
55208: PPUSH
55209: PPUSH
55210: PPUSH
55211: PPUSH
55212: PPUSH
55213: PPUSH
55214: PPUSH
// if not unit or not building then
55215: LD_VAR 0 1
55219: NOT
55220: PUSH
55221: LD_VAR 0 2
55225: NOT
55226: OR
55227: IFFALSE 55231
// exit ;
55229: GO 55457
// x := GetX ( building ) ;
55231: LD_ADDR_VAR 0 4
55235: PUSH
55236: LD_VAR 0 2
55240: PPUSH
55241: CALL_OW 250
55245: ST_TO_ADDR
// y := GetY ( building ) ;
55246: LD_ADDR_VAR 0 6
55250: PUSH
55251: LD_VAR 0 2
55255: PPUSH
55256: CALL_OW 251
55260: ST_TO_ADDR
// d := GetDir ( building ) ;
55261: LD_ADDR_VAR 0 8
55265: PUSH
55266: LD_VAR 0 2
55270: PPUSH
55271: CALL_OW 254
55275: ST_TO_ADDR
// r := 4 ;
55276: LD_ADDR_VAR 0 9
55280: PUSH
55281: LD_INT 4
55283: ST_TO_ADDR
// for i := 1 to 5 do
55284: LD_ADDR_VAR 0 10
55288: PUSH
55289: DOUBLE
55290: LD_INT 1
55292: DEC
55293: ST_TO_ADDR
55294: LD_INT 5
55296: PUSH
55297: FOR_TO
55298: IFFALSE 55455
// begin _x := ShiftX ( x , d , r + i ) ;
55300: LD_ADDR_VAR 0 5
55304: PUSH
55305: LD_VAR 0 4
55309: PPUSH
55310: LD_VAR 0 8
55314: PPUSH
55315: LD_VAR 0 9
55319: PUSH
55320: LD_VAR 0 10
55324: PLUS
55325: PPUSH
55326: CALL_OW 272
55330: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: LD_VAR 0 6
55340: PPUSH
55341: LD_VAR 0 8
55345: PPUSH
55346: LD_VAR 0 9
55350: PUSH
55351: LD_VAR 0 10
55355: PLUS
55356: PPUSH
55357: CALL_OW 273
55361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55362: LD_VAR 0 5
55366: PPUSH
55367: LD_VAR 0 7
55371: PPUSH
55372: CALL_OW 488
55376: PUSH
55377: LD_VAR 0 5
55381: PPUSH
55382: LD_VAR 0 7
55386: PPUSH
55387: CALL_OW 428
55391: PPUSH
55392: CALL_OW 247
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: IN
55407: NOT
55408: AND
55409: IFFALSE 55453
// begin ComMoveXY ( unit , _x , _y ) ;
55411: LD_VAR 0 1
55415: PPUSH
55416: LD_VAR 0 5
55420: PPUSH
55421: LD_VAR 0 7
55425: PPUSH
55426: CALL_OW 111
// result := [ _x , _y ] ;
55430: LD_ADDR_VAR 0 3
55434: PUSH
55435: LD_VAR 0 5
55439: PUSH
55440: LD_VAR 0 7
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// exit ;
55449: POP
55450: POP
55451: GO 55457
// end ; end ;
55453: GO 55297
55455: POP
55456: POP
// end ;
55457: LD_VAR 0 3
55461: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55462: LD_INT 0
55464: PPUSH
55465: PPUSH
55466: PPUSH
// result := 0 ;
55467: LD_ADDR_VAR 0 3
55471: PUSH
55472: LD_INT 0
55474: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55475: LD_VAR 0 1
55479: PUSH
55480: LD_INT 0
55482: LESS
55483: PUSH
55484: LD_VAR 0 1
55488: PUSH
55489: LD_INT 8
55491: GREATER
55492: OR
55493: PUSH
55494: LD_VAR 0 2
55498: PUSH
55499: LD_INT 0
55501: LESS
55502: OR
55503: PUSH
55504: LD_VAR 0 2
55508: PUSH
55509: LD_INT 8
55511: GREATER
55512: OR
55513: IFFALSE 55517
// exit ;
55515: GO 55592
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55517: LD_ADDR_VAR 0 4
55521: PUSH
55522: LD_INT 22
55524: PUSH
55525: LD_VAR 0 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PPUSH
55534: CALL_OW 69
55538: PUSH
55539: FOR_IN
55540: IFFALSE 55590
// begin un := UnitShoot ( i ) ;
55542: LD_ADDR_VAR 0 5
55546: PUSH
55547: LD_VAR 0 4
55551: PPUSH
55552: CALL_OW 504
55556: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55557: LD_VAR 0 5
55561: PPUSH
55562: CALL_OW 255
55566: PUSH
55567: LD_VAR 0 1
55571: EQUAL
55572: IFFALSE 55588
// begin result := un ;
55574: LD_ADDR_VAR 0 3
55578: PUSH
55579: LD_VAR 0 5
55583: ST_TO_ADDR
// exit ;
55584: POP
55585: POP
55586: GO 55592
// end ; end ;
55588: GO 55539
55590: POP
55591: POP
// end ;
55592: LD_VAR 0 3
55596: RET
// export function GetCargoBay ( units ) ; begin
55597: LD_INT 0
55599: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55600: LD_ADDR_VAR 0 2
55604: PUSH
55605: LD_VAR 0 1
55609: PPUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 34
55615: PUSH
55616: LD_INT 12
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 34
55625: PUSH
55626: LD_INT 51
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 34
55635: PUSH
55636: LD_INT 32
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 34
55645: PUSH
55646: LD_EXP 111
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: PPUSH
55662: CALL_OW 72
55666: ST_TO_ADDR
// end ;
55667: LD_VAR 0 2
55671: RET
// export function Negate ( value ) ; begin
55672: LD_INT 0
55674: PPUSH
// result := not value ;
55675: LD_ADDR_VAR 0 2
55679: PUSH
55680: LD_VAR 0 1
55684: NOT
55685: ST_TO_ADDR
// end ;
55686: LD_VAR 0 2
55690: RET
// export function Inc ( value ) ; begin
55691: LD_INT 0
55693: PPUSH
// result := value + 1 ;
55694: LD_ADDR_VAR 0 2
55698: PUSH
55699: LD_VAR 0 1
55703: PUSH
55704: LD_INT 1
55706: PLUS
55707: ST_TO_ADDR
// end ;
55708: LD_VAR 0 2
55712: RET
// export function Dec ( value ) ; begin
55713: LD_INT 0
55715: PPUSH
// result := value - 1 ;
55716: LD_ADDR_VAR 0 2
55720: PUSH
55721: LD_VAR 0 1
55725: PUSH
55726: LD_INT 1
55728: MINUS
55729: ST_TO_ADDR
// end ;
55730: LD_VAR 0 2
55734: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55735: LD_INT 0
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
55741: PPUSH
55742: PPUSH
55743: PPUSH
55744: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55745: LD_VAR 0 1
55749: PPUSH
55750: LD_VAR 0 2
55754: PPUSH
55755: CALL_OW 488
55759: NOT
55760: PUSH
55761: LD_VAR 0 3
55765: PPUSH
55766: LD_VAR 0 4
55770: PPUSH
55771: CALL_OW 488
55775: NOT
55776: OR
55777: IFFALSE 55790
// begin result := - 1 ;
55779: LD_ADDR_VAR 0 5
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: ST_TO_ADDR
// exit ;
55788: GO 56025
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55790: LD_ADDR_VAR 0 12
55794: PUSH
55795: LD_VAR 0 1
55799: PPUSH
55800: LD_VAR 0 2
55804: PPUSH
55805: LD_VAR 0 3
55809: PPUSH
55810: LD_VAR 0 4
55814: PPUSH
55815: CALL 54873 0 4
55819: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55820: LD_ADDR_VAR 0 11
55824: PUSH
55825: LD_VAR 0 1
55829: PPUSH
55830: LD_VAR 0 2
55834: PPUSH
55835: LD_VAR 0 12
55839: PUSH
55840: LD_INT 1
55842: ARRAY
55843: PPUSH
55844: LD_VAR 0 12
55848: PUSH
55849: LD_INT 2
55851: ARRAY
55852: PPUSH
55853: CALL_OW 298
55857: ST_TO_ADDR
// distance := 9999 ;
55858: LD_ADDR_VAR 0 10
55862: PUSH
55863: LD_INT 9999
55865: ST_TO_ADDR
// for i := 0 to 5 do
55866: LD_ADDR_VAR 0 6
55870: PUSH
55871: DOUBLE
55872: LD_INT 0
55874: DEC
55875: ST_TO_ADDR
55876: LD_INT 5
55878: PUSH
55879: FOR_TO
55880: IFFALSE 56023
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55882: LD_ADDR_VAR 0 7
55886: PUSH
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_VAR 0 6
55896: PPUSH
55897: LD_VAR 0 11
55901: PPUSH
55902: CALL_OW 272
55906: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55907: LD_ADDR_VAR 0 8
55911: PUSH
55912: LD_VAR 0 2
55916: PPUSH
55917: LD_VAR 0 6
55921: PPUSH
55922: LD_VAR 0 11
55926: PPUSH
55927: CALL_OW 273
55931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55932: LD_VAR 0 7
55936: PPUSH
55937: LD_VAR 0 8
55941: PPUSH
55942: CALL_OW 488
55946: NOT
55947: IFFALSE 55951
// continue ;
55949: GO 55879
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55951: LD_ADDR_VAR 0 9
55955: PUSH
55956: LD_VAR 0 12
55960: PUSH
55961: LD_INT 1
55963: ARRAY
55964: PPUSH
55965: LD_VAR 0 12
55969: PUSH
55970: LD_INT 2
55972: ARRAY
55973: PPUSH
55974: LD_VAR 0 7
55978: PPUSH
55979: LD_VAR 0 8
55983: PPUSH
55984: CALL_OW 298
55988: ST_TO_ADDR
// if tmp < distance then
55989: LD_VAR 0 9
55993: PUSH
55994: LD_VAR 0 10
55998: LESS
55999: IFFALSE 56021
// begin result := i ;
56001: LD_ADDR_VAR 0 5
56005: PUSH
56006: LD_VAR 0 6
56010: ST_TO_ADDR
// distance := tmp ;
56011: LD_ADDR_VAR 0 10
56015: PUSH
56016: LD_VAR 0 9
56020: ST_TO_ADDR
// end ; end ;
56021: GO 55879
56023: POP
56024: POP
// end ;
56025: LD_VAR 0 5
56029: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56030: LD_INT 0
56032: PPUSH
56033: PPUSH
// if not driver or not IsInUnit ( driver ) then
56034: LD_VAR 0 1
56038: NOT
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: CALL_OW 310
56049: NOT
56050: OR
56051: IFFALSE 56055
// exit ;
56053: GO 56145
// vehicle := IsInUnit ( driver ) ;
56055: LD_ADDR_VAR 0 3
56059: PUSH
56060: LD_VAR 0 1
56064: PPUSH
56065: CALL_OW 310
56069: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56070: LD_VAR 0 1
56074: PPUSH
56075: LD_STRING \
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: LD_STRING E
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_VAR 0 3
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PPUSH
56141: CALL_OW 446
// end ;
56145: LD_VAR 0 2
56149: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56150: LD_INT 0
56152: PPUSH
56153: PPUSH
// if not driver or not IsInUnit ( driver ) then
56154: LD_VAR 0 1
56158: NOT
56159: PUSH
56160: LD_VAR 0 1
56164: PPUSH
56165: CALL_OW 310
56169: NOT
56170: OR
56171: IFFALSE 56175
// exit ;
56173: GO 56265
// vehicle := IsInUnit ( driver ) ;
56175: LD_ADDR_VAR 0 3
56179: PUSH
56180: LD_VAR 0 1
56184: PPUSH
56185: CALL_OW 310
56189: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56190: LD_VAR 0 1
56194: PPUSH
56195: LD_STRING \
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: PUSH
56225: LD_STRING E
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_VAR 0 3
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PPUSH
56261: CALL_OW 447
// end ;
56265: LD_VAR 0 2
56269: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56270: LD_INT 0
56272: PPUSH
56273: PPUSH
56274: PPUSH
// tmp := [ ] ;
56275: LD_ADDR_VAR 0 5
56279: PUSH
56280: EMPTY
56281: ST_TO_ADDR
// for i in units do
56282: LD_ADDR_VAR 0 4
56286: PUSH
56287: LD_VAR 0 1
56291: PUSH
56292: FOR_IN
56293: IFFALSE 56331
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56295: LD_ADDR_VAR 0 5
56299: PUSH
56300: LD_VAR 0 5
56304: PPUSH
56305: LD_VAR 0 5
56309: PUSH
56310: LD_INT 1
56312: PLUS
56313: PPUSH
56314: LD_VAR 0 4
56318: PPUSH
56319: CALL_OW 256
56323: PPUSH
56324: CALL_OW 2
56328: ST_TO_ADDR
56329: GO 56292
56331: POP
56332: POP
// if not tmp then
56333: LD_VAR 0 5
56337: NOT
56338: IFFALSE 56342
// exit ;
56340: GO 56390
// if asc then
56342: LD_VAR 0 2
56346: IFFALSE 56370
// result := SortListByListAsc ( units , tmp ) else
56348: LD_ADDR_VAR 0 3
56352: PUSH
56353: LD_VAR 0 1
56357: PPUSH
56358: LD_VAR 0 5
56362: PPUSH
56363: CALL_OW 76
56367: ST_TO_ADDR
56368: GO 56390
// result := SortListByListDesc ( units , tmp ) ;
56370: LD_ADDR_VAR 0 3
56374: PUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: LD_VAR 0 5
56384: PPUSH
56385: CALL_OW 77
56389: ST_TO_ADDR
// end ;
56390: LD_VAR 0 3
56394: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56395: LD_INT 0
56397: PPUSH
56398: PPUSH
// task := GetTaskList ( mech ) ;
56399: LD_ADDR_VAR 0 4
56403: PUSH
56404: LD_VAR 0 1
56408: PPUSH
56409: CALL_OW 437
56413: ST_TO_ADDR
// if not task then
56414: LD_VAR 0 4
56418: NOT
56419: IFFALSE 56423
// exit ;
56421: GO 56465
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56423: LD_ADDR_VAR 0 3
56427: PUSH
56428: LD_VAR 0 4
56432: PUSH
56433: LD_INT 1
56435: ARRAY
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PUSH
56441: LD_STRING r
56443: EQUAL
56444: PUSH
56445: LD_VAR 0 4
56449: PUSH
56450: LD_INT 1
56452: ARRAY
56453: PUSH
56454: LD_INT 4
56456: ARRAY
56457: PUSH
56458: LD_VAR 0 2
56462: EQUAL
56463: AND
56464: ST_TO_ADDR
// end ;
56465: LD_VAR 0 3
56469: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56470: LD_INT 0
56472: PPUSH
// SetDir ( unit , d ) ;
56473: LD_VAR 0 1
56477: PPUSH
56478: LD_VAR 0 4
56482: PPUSH
56483: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56487: LD_VAR 0 1
56491: PPUSH
56492: LD_VAR 0 2
56496: PPUSH
56497: LD_VAR 0 3
56501: PPUSH
56502: LD_VAR 0 5
56506: PPUSH
56507: CALL_OW 48
// end ;
56511: LD_VAR 0 6
56515: RET
// export function ToNaturalNumber ( number ) ; begin
56516: LD_INT 0
56518: PPUSH
// result := number div 1 ;
56519: LD_ADDR_VAR 0 2
56523: PUSH
56524: LD_VAR 0 1
56528: PUSH
56529: LD_INT 1
56531: DIV
56532: ST_TO_ADDR
// if number < 0 then
56533: LD_VAR 0 1
56537: PUSH
56538: LD_INT 0
56540: LESS
56541: IFFALSE 56551
// result := 0 ;
56543: LD_ADDR_VAR 0 2
56547: PUSH
56548: LD_INT 0
56550: ST_TO_ADDR
// end ;
56551: LD_VAR 0 2
56555: RET
// export function SortByClass ( units , class ) ; var un ; begin
56556: LD_INT 0
56558: PPUSH
56559: PPUSH
// if not units or not class then
56560: LD_VAR 0 1
56564: NOT
56565: PUSH
56566: LD_VAR 0 2
56570: NOT
56571: OR
56572: IFFALSE 56576
// exit ;
56574: GO 56671
// result := [ ] ;
56576: LD_ADDR_VAR 0 3
56580: PUSH
56581: EMPTY
56582: ST_TO_ADDR
// for un in units do
56583: LD_ADDR_VAR 0 4
56587: PUSH
56588: LD_VAR 0 1
56592: PUSH
56593: FOR_IN
56594: IFFALSE 56669
// if GetClass ( un ) = class then
56596: LD_VAR 0 4
56600: PPUSH
56601: CALL_OW 257
56605: PUSH
56606: LD_VAR 0 2
56610: EQUAL
56611: IFFALSE 56638
// result := Insert ( result , 1 , un ) else
56613: LD_ADDR_VAR 0 3
56617: PUSH
56618: LD_VAR 0 3
56622: PPUSH
56623: LD_INT 1
56625: PPUSH
56626: LD_VAR 0 4
56630: PPUSH
56631: CALL_OW 2
56635: ST_TO_ADDR
56636: GO 56667
// result := Replace ( result , result + 1 , un ) ;
56638: LD_ADDR_VAR 0 3
56642: PUSH
56643: LD_VAR 0 3
56647: PPUSH
56648: LD_VAR 0 3
56652: PUSH
56653: LD_INT 1
56655: PLUS
56656: PPUSH
56657: LD_VAR 0 4
56661: PPUSH
56662: CALL_OW 1
56666: ST_TO_ADDR
56667: GO 56593
56669: POP
56670: POP
// end ;
56671: LD_VAR 0 3
56675: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56676: LD_INT 0
56678: PPUSH
56679: PPUSH
56680: PPUSH
56681: PPUSH
56682: PPUSH
56683: PPUSH
56684: PPUSH
// result := [ ] ;
56685: LD_ADDR_VAR 0 4
56689: PUSH
56690: EMPTY
56691: ST_TO_ADDR
// if x - r < 0 then
56692: LD_VAR 0 1
56696: PUSH
56697: LD_VAR 0 3
56701: MINUS
56702: PUSH
56703: LD_INT 0
56705: LESS
56706: IFFALSE 56718
// min_x := 0 else
56708: LD_ADDR_VAR 0 8
56712: PUSH
56713: LD_INT 0
56715: ST_TO_ADDR
56716: GO 56734
// min_x := x - r ;
56718: LD_ADDR_VAR 0 8
56722: PUSH
56723: LD_VAR 0 1
56727: PUSH
56728: LD_VAR 0 3
56732: MINUS
56733: ST_TO_ADDR
// if y - r < 0 then
56734: LD_VAR 0 2
56738: PUSH
56739: LD_VAR 0 3
56743: MINUS
56744: PUSH
56745: LD_INT 0
56747: LESS
56748: IFFALSE 56760
// min_y := 0 else
56750: LD_ADDR_VAR 0 7
56754: PUSH
56755: LD_INT 0
56757: ST_TO_ADDR
56758: GO 56776
// min_y := y - r ;
56760: LD_ADDR_VAR 0 7
56764: PUSH
56765: LD_VAR 0 2
56769: PUSH
56770: LD_VAR 0 3
56774: MINUS
56775: ST_TO_ADDR
// max_x := x + r ;
56776: LD_ADDR_VAR 0 9
56780: PUSH
56781: LD_VAR 0 1
56785: PUSH
56786: LD_VAR 0 3
56790: PLUS
56791: ST_TO_ADDR
// max_y := y + r ;
56792: LD_ADDR_VAR 0 10
56796: PUSH
56797: LD_VAR 0 2
56801: PUSH
56802: LD_VAR 0 3
56806: PLUS
56807: ST_TO_ADDR
// for _x = min_x to max_x do
56808: LD_ADDR_VAR 0 5
56812: PUSH
56813: DOUBLE
56814: LD_VAR 0 8
56818: DEC
56819: ST_TO_ADDR
56820: LD_VAR 0 9
56824: PUSH
56825: FOR_TO
56826: IFFALSE 56927
// for _y = min_y to max_y do
56828: LD_ADDR_VAR 0 6
56832: PUSH
56833: DOUBLE
56834: LD_VAR 0 7
56838: DEC
56839: ST_TO_ADDR
56840: LD_VAR 0 10
56844: PUSH
56845: FOR_TO
56846: IFFALSE 56923
// begin if not ValidHex ( _x , _y ) then
56848: LD_VAR 0 5
56852: PPUSH
56853: LD_VAR 0 6
56857: PPUSH
56858: CALL_OW 488
56862: NOT
56863: IFFALSE 56867
// continue ;
56865: GO 56845
// if GetResourceTypeXY ( _x , _y ) then
56867: LD_VAR 0 5
56871: PPUSH
56872: LD_VAR 0 6
56876: PPUSH
56877: CALL_OW 283
56881: IFFALSE 56921
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56883: LD_ADDR_VAR 0 4
56887: PUSH
56888: LD_VAR 0 4
56892: PPUSH
56893: LD_VAR 0 4
56897: PUSH
56898: LD_INT 1
56900: PLUS
56901: PPUSH
56902: LD_VAR 0 5
56906: PUSH
56907: LD_VAR 0 6
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PPUSH
56916: CALL_OW 1
56920: ST_TO_ADDR
// end ;
56921: GO 56845
56923: POP
56924: POP
56925: GO 56825
56927: POP
56928: POP
// end ;
56929: LD_VAR 0 4
56933: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56934: LD_INT 0
56936: PPUSH
56937: PPUSH
56938: PPUSH
56939: PPUSH
56940: PPUSH
56941: PPUSH
56942: PPUSH
56943: PPUSH
// if not units then
56944: LD_VAR 0 1
56948: NOT
56949: IFFALSE 56953
// exit ;
56951: GO 57479
// result := UnitFilter ( units , [ f_ok ] ) ;
56953: LD_ADDR_VAR 0 3
56957: PUSH
56958: LD_VAR 0 1
56962: PPUSH
56963: LD_INT 50
56965: PUSH
56966: EMPTY
56967: LIST
56968: PPUSH
56969: CALL_OW 72
56973: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56974: LD_ADDR_VAR 0 8
56978: PUSH
56979: LD_VAR 0 1
56983: PUSH
56984: LD_INT 1
56986: ARRAY
56987: PPUSH
56988: CALL_OW 255
56992: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56993: LD_ADDR_VAR 0 10
56997: PUSH
56998: LD_INT 29
57000: PUSH
57001: LD_EXP 114
57005: PUSH
57006: LD_INT 49
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// if not result then
57014: LD_VAR 0 3
57018: NOT
57019: IFFALSE 57023
// exit ;
57021: GO 57479
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57023: LD_ADDR_VAR 0 5
57027: PUSH
57028: LD_INT 81
57030: PUSH
57031: LD_VAR 0 8
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PPUSH
57040: CALL_OW 69
57044: ST_TO_ADDR
// for i in result do
57045: LD_ADDR_VAR 0 4
57049: PUSH
57050: LD_VAR 0 3
57054: PUSH
57055: FOR_IN
57056: IFFALSE 57477
// begin tag := GetTag ( i ) + 1 ;
57058: LD_ADDR_VAR 0 9
57062: PUSH
57063: LD_VAR 0 4
57067: PPUSH
57068: CALL_OW 110
57072: PUSH
57073: LD_INT 1
57075: PLUS
57076: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57077: LD_ADDR_VAR 0 7
57081: PUSH
57082: LD_VAR 0 4
57086: PPUSH
57087: CALL_OW 250
57091: PPUSH
57092: LD_VAR 0 4
57096: PPUSH
57097: CALL_OW 251
57101: PPUSH
57102: LD_INT 6
57104: PPUSH
57105: CALL 56676 0 3
57109: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57110: LD_VAR 0 4
57114: PPUSH
57115: CALL_OW 247
57119: PUSH
57120: LD_INT 2
57122: EQUAL
57123: PUSH
57124: LD_VAR 0 7
57128: AND
57129: PUSH
57130: LD_VAR 0 4
57134: PPUSH
57135: CALL_OW 264
57139: PUSH
57140: LD_VAR 0 10
57144: IN
57145: NOT
57146: AND
57147: IFFALSE 57186
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57149: LD_VAR 0 4
57153: PPUSH
57154: LD_VAR 0 7
57158: PUSH
57159: LD_INT 1
57161: ARRAY
57162: PUSH
57163: LD_INT 1
57165: ARRAY
57166: PPUSH
57167: LD_VAR 0 7
57171: PUSH
57172: LD_INT 1
57174: ARRAY
57175: PUSH
57176: LD_INT 2
57178: ARRAY
57179: PPUSH
57180: CALL_OW 116
57184: GO 57475
// if path > tag then
57186: LD_VAR 0 2
57190: PUSH
57191: LD_VAR 0 9
57195: GREATER
57196: IFFALSE 57404
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57198: LD_ADDR_VAR 0 6
57202: PUSH
57203: LD_VAR 0 5
57207: PPUSH
57208: LD_INT 91
57210: PUSH
57211: LD_VAR 0 4
57215: PUSH
57216: LD_INT 8
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: PPUSH
57224: CALL_OW 72
57228: ST_TO_ADDR
// if nearEnemy then
57229: LD_VAR 0 6
57233: IFFALSE 57302
// begin if GetWeapon ( i ) = ru_time_lapser then
57235: LD_VAR 0 4
57239: PPUSH
57240: CALL_OW 264
57244: PUSH
57245: LD_INT 49
57247: EQUAL
57248: IFFALSE 57276
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57250: LD_VAR 0 4
57254: PPUSH
57255: LD_VAR 0 6
57259: PPUSH
57260: LD_VAR 0 4
57264: PPUSH
57265: CALL_OW 74
57269: PPUSH
57270: CALL_OW 112
57274: GO 57300
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57276: LD_VAR 0 4
57280: PPUSH
57281: LD_VAR 0 6
57285: PPUSH
57286: LD_VAR 0 4
57290: PPUSH
57291: CALL_OW 74
57295: PPUSH
57296: CALL_OW 115
// end else
57300: GO 57402
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57302: LD_VAR 0 4
57306: PPUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_VAR 0 9
57316: ARRAY
57317: PUSH
57318: LD_INT 1
57320: ARRAY
57321: PPUSH
57322: LD_VAR 0 2
57326: PUSH
57327: LD_VAR 0 9
57331: ARRAY
57332: PUSH
57333: LD_INT 2
57335: ARRAY
57336: PPUSH
57337: CALL_OW 297
57341: PUSH
57342: LD_INT 6
57344: GREATER
57345: IFFALSE 57388
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57347: LD_VAR 0 4
57351: PPUSH
57352: LD_VAR 0 2
57356: PUSH
57357: LD_VAR 0 9
57361: ARRAY
57362: PUSH
57363: LD_INT 1
57365: ARRAY
57366: PPUSH
57367: LD_VAR 0 2
57371: PUSH
57372: LD_VAR 0 9
57376: ARRAY
57377: PUSH
57378: LD_INT 2
57380: ARRAY
57381: PPUSH
57382: CALL_OW 114
57386: GO 57402
// SetTag ( i , tag ) ;
57388: LD_VAR 0 4
57392: PPUSH
57393: LD_VAR 0 9
57397: PPUSH
57398: CALL_OW 109
// end else
57402: GO 57475
// if enemy then
57404: LD_VAR 0 5
57408: IFFALSE 57475
// begin if GetWeapon ( i ) = ru_time_lapser then
57410: LD_VAR 0 4
57414: PPUSH
57415: CALL_OW 264
57419: PUSH
57420: LD_INT 49
57422: EQUAL
57423: IFFALSE 57451
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57425: LD_VAR 0 4
57429: PPUSH
57430: LD_VAR 0 5
57434: PPUSH
57435: LD_VAR 0 4
57439: PPUSH
57440: CALL_OW 74
57444: PPUSH
57445: CALL_OW 112
57449: GO 57475
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57451: LD_VAR 0 4
57455: PPUSH
57456: LD_VAR 0 5
57460: PPUSH
57461: LD_VAR 0 4
57465: PPUSH
57466: CALL_OW 74
57470: PPUSH
57471: CALL_OW 115
// end ; end ;
57475: GO 57055
57477: POP
57478: POP
// end ;
57479: LD_VAR 0 3
57483: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57484: LD_INT 0
57486: PPUSH
57487: PPUSH
57488: PPUSH
// if not unit or IsInUnit ( unit ) then
57489: LD_VAR 0 1
57493: NOT
57494: PUSH
57495: LD_VAR 0 1
57499: PPUSH
57500: CALL_OW 310
57504: OR
57505: IFFALSE 57509
// exit ;
57507: GO 57600
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57509: LD_ADDR_VAR 0 4
57513: PUSH
57514: LD_VAR 0 1
57518: PPUSH
57519: CALL_OW 250
57523: PPUSH
57524: LD_VAR 0 2
57528: PPUSH
57529: LD_INT 1
57531: PPUSH
57532: CALL_OW 272
57536: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57537: LD_ADDR_VAR 0 5
57541: PUSH
57542: LD_VAR 0 1
57546: PPUSH
57547: CALL_OW 251
57551: PPUSH
57552: LD_VAR 0 2
57556: PPUSH
57557: LD_INT 1
57559: PPUSH
57560: CALL_OW 273
57564: ST_TO_ADDR
// if ValidHex ( x , y ) then
57565: LD_VAR 0 4
57569: PPUSH
57570: LD_VAR 0 5
57574: PPUSH
57575: CALL_OW 488
57579: IFFALSE 57600
// ComTurnXY ( unit , x , y ) ;
57581: LD_VAR 0 1
57585: PPUSH
57586: LD_VAR 0 4
57590: PPUSH
57591: LD_VAR 0 5
57595: PPUSH
57596: CALL_OW 118
// end ;
57600: LD_VAR 0 3
57604: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57605: LD_INT 0
57607: PPUSH
57608: PPUSH
// result := false ;
57609: LD_ADDR_VAR 0 3
57613: PUSH
57614: LD_INT 0
57616: ST_TO_ADDR
// if not units then
57617: LD_VAR 0 2
57621: NOT
57622: IFFALSE 57626
// exit ;
57624: GO 57671
// for i in units do
57626: LD_ADDR_VAR 0 4
57630: PUSH
57631: LD_VAR 0 2
57635: PUSH
57636: FOR_IN
57637: IFFALSE 57669
// if See ( side , i ) then
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_VAR 0 4
57648: PPUSH
57649: CALL_OW 292
57653: IFFALSE 57667
// begin result := true ;
57655: LD_ADDR_VAR 0 3
57659: PUSH
57660: LD_INT 1
57662: ST_TO_ADDR
// exit ;
57663: POP
57664: POP
57665: GO 57671
// end ;
57667: GO 57636
57669: POP
57670: POP
// end ;
57671: LD_VAR 0 3
57675: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57676: LD_INT 0
57678: PPUSH
57679: PPUSH
57680: PPUSH
57681: PPUSH
// if not unit or not points then
57682: LD_VAR 0 1
57686: NOT
57687: PUSH
57688: LD_VAR 0 2
57692: NOT
57693: OR
57694: IFFALSE 57698
// exit ;
57696: GO 57788
// dist := 99999 ;
57698: LD_ADDR_VAR 0 5
57702: PUSH
57703: LD_INT 99999
57705: ST_TO_ADDR
// for i in points do
57706: LD_ADDR_VAR 0 4
57710: PUSH
57711: LD_VAR 0 2
57715: PUSH
57716: FOR_IN
57717: IFFALSE 57786
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57719: LD_ADDR_VAR 0 6
57723: PUSH
57724: LD_VAR 0 1
57728: PPUSH
57729: LD_VAR 0 4
57733: PUSH
57734: LD_INT 1
57736: ARRAY
57737: PPUSH
57738: LD_VAR 0 4
57742: PUSH
57743: LD_INT 2
57745: ARRAY
57746: PPUSH
57747: CALL_OW 297
57751: ST_TO_ADDR
// if tmpDist < dist then
57752: LD_VAR 0 6
57756: PUSH
57757: LD_VAR 0 5
57761: LESS
57762: IFFALSE 57784
// begin result := i ;
57764: LD_ADDR_VAR 0 3
57768: PUSH
57769: LD_VAR 0 4
57773: ST_TO_ADDR
// dist := tmpDist ;
57774: LD_ADDR_VAR 0 5
57778: PUSH
57779: LD_VAR 0 6
57783: ST_TO_ADDR
// end ; end ;
57784: GO 57716
57786: POP
57787: POP
// end ;
57788: LD_VAR 0 3
57792: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57793: LD_INT 0
57795: PPUSH
// uc_side := side ;
57796: LD_ADDR_OWVAR 20
57800: PUSH
57801: LD_VAR 0 1
57805: ST_TO_ADDR
// uc_nation := 3 ;
57806: LD_ADDR_OWVAR 21
57810: PUSH
57811: LD_INT 3
57813: ST_TO_ADDR
// vc_chassis := 25 ;
57814: LD_ADDR_OWVAR 37
57818: PUSH
57819: LD_INT 25
57821: ST_TO_ADDR
// vc_engine := engine_siberite ;
57822: LD_ADDR_OWVAR 39
57826: PUSH
57827: LD_INT 3
57829: ST_TO_ADDR
// vc_control := control_computer ;
57830: LD_ADDR_OWVAR 38
57834: PUSH
57835: LD_INT 3
57837: ST_TO_ADDR
// vc_weapon := 59 ;
57838: LD_ADDR_OWVAR 40
57842: PUSH
57843: LD_INT 59
57845: ST_TO_ADDR
// result := CreateVehicle ;
57846: LD_ADDR_VAR 0 5
57850: PUSH
57851: CALL_OW 45
57855: ST_TO_ADDR
// SetDir ( result , d ) ;
57856: LD_VAR 0 5
57860: PPUSH
57861: LD_VAR 0 4
57865: PPUSH
57866: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57870: LD_VAR 0 5
57874: PPUSH
57875: LD_VAR 0 2
57879: PPUSH
57880: LD_VAR 0 3
57884: PPUSH
57885: LD_INT 0
57887: PPUSH
57888: CALL_OW 48
// end ;
57892: LD_VAR 0 5
57896: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57897: LD_INT 0
57899: PPUSH
57900: PPUSH
57901: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57902: LD_ADDR_VAR 0 2
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57925: LD_VAR 0 1
57929: NOT
57930: PUSH
57931: LD_VAR 0 1
57935: PPUSH
57936: CALL_OW 264
57940: PUSH
57941: LD_INT 12
57943: PUSH
57944: LD_INT 51
57946: PUSH
57947: LD_INT 32
57949: PUSH
57950: LD_EXP 111
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: IN
57961: NOT
57962: OR
57963: IFFALSE 57967
// exit ;
57965: GO 58065
// for i := 1 to 3 do
57967: LD_ADDR_VAR 0 3
57971: PUSH
57972: DOUBLE
57973: LD_INT 1
57975: DEC
57976: ST_TO_ADDR
57977: LD_INT 3
57979: PUSH
57980: FOR_TO
57981: IFFALSE 58063
// begin tmp := GetCargo ( cargo , i ) ;
57983: LD_ADDR_VAR 0 4
57987: PUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: LD_VAR 0 3
57997: PPUSH
57998: CALL_OW 289
58002: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58003: LD_ADDR_VAR 0 2
58007: PUSH
58008: LD_VAR 0 2
58012: PPUSH
58013: LD_VAR 0 3
58017: PPUSH
58018: LD_VAR 0 4
58022: PPUSH
58023: CALL_OW 1
58027: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58028: LD_ADDR_VAR 0 2
58032: PUSH
58033: LD_VAR 0 2
58037: PPUSH
58038: LD_INT 4
58040: PPUSH
58041: LD_VAR 0 2
58045: PUSH
58046: LD_INT 4
58048: ARRAY
58049: PUSH
58050: LD_VAR 0 4
58054: PLUS
58055: PPUSH
58056: CALL_OW 1
58060: ST_TO_ADDR
// end ;
58061: GO 57980
58063: POP
58064: POP
// end ;
58065: LD_VAR 0 2
58069: RET
// export function Length ( array ) ; begin
58070: LD_INT 0
58072: PPUSH
// result := array + 0 ;
58073: LD_ADDR_VAR 0 2
58077: PUSH
58078: LD_VAR 0 1
58082: PUSH
58083: LD_INT 0
58085: PLUS
58086: ST_TO_ADDR
// end ;
58087: LD_VAR 0 2
58091: RET
// export function PrepareArray ( array ) ; begin
58092: LD_INT 0
58094: PPUSH
// result := array diff 0 ;
58095: LD_ADDR_VAR 0 2
58099: PUSH
58100: LD_VAR 0 1
58104: PUSH
58105: LD_INT 0
58107: DIFF
58108: ST_TO_ADDR
// if not result [ 1 ] then
58109: LD_VAR 0 2
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: NOT
58118: IFFALSE 58138
// result := Delete ( result , 1 ) ;
58120: LD_ADDR_VAR 0 2
58124: PUSH
58125: LD_VAR 0 2
58129: PPUSH
58130: LD_INT 1
58132: PPUSH
58133: CALL_OW 3
58137: ST_TO_ADDR
// end ; end_of_file
58138: LD_VAR 0 2
58142: RET
// every 0 0$1 do
58143: GO 58145
58145: DISABLE
// begin enable ;
58146: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58147: LD_STRING updateTimer(
58149: PUSH
58150: LD_OWVAR 1
58154: STR
58155: PUSH
58156: LD_STRING );
58158: STR
58159: PPUSH
58160: CALL_OW 559
// end ;
58164: END
// export function SOS_MapStart ( ) ; begin
58165: LD_INT 0
58167: PPUSH
// if streamModeActive then
58168: LD_EXP 49
58172: IFFALSE 58181
// DefineStreamItems ( true ) ;
58174: LD_INT 1
58176: PPUSH
58177: CALL 59835 0 1
// UpdateFactoryWaypoints ( ) ;
58181: CALL 72696 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58185: CALL 72953 0 0
// end ;
58189: LD_VAR 0 1
58193: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58194: LD_INT 0
58196: PPUSH
// if p2 = 100 then
58197: LD_VAR 0 2
58201: PUSH
58202: LD_INT 100
58204: EQUAL
58205: IFFALSE 59208
// begin if not StreamModeActive then
58207: LD_EXP 49
58211: NOT
58212: IFFALSE 58222
// StreamModeActive := true ;
58214: LD_ADDR_EXP 49
58218: PUSH
58219: LD_INT 1
58221: ST_TO_ADDR
// if p3 = 0 then
58222: LD_VAR 0 3
58226: PUSH
58227: LD_INT 0
58229: EQUAL
58230: IFFALSE 58236
// InitStreamMode ;
58232: CALL 59371 0 0
// if p3 = 1 then
58236: LD_VAR 0 3
58240: PUSH
58241: LD_INT 1
58243: EQUAL
58244: IFFALSE 58254
// sRocket := true ;
58246: LD_ADDR_EXP 54
58250: PUSH
58251: LD_INT 1
58253: ST_TO_ADDR
// if p3 = 2 then
58254: LD_VAR 0 3
58258: PUSH
58259: LD_INT 2
58261: EQUAL
58262: IFFALSE 58272
// sSpeed := true ;
58264: LD_ADDR_EXP 53
58268: PUSH
58269: LD_INT 1
58271: ST_TO_ADDR
// if p3 = 3 then
58272: LD_VAR 0 3
58276: PUSH
58277: LD_INT 3
58279: EQUAL
58280: IFFALSE 58290
// sEngine := true ;
58282: LD_ADDR_EXP 55
58286: PUSH
58287: LD_INT 1
58289: ST_TO_ADDR
// if p3 = 4 then
58290: LD_VAR 0 3
58294: PUSH
58295: LD_INT 4
58297: EQUAL
58298: IFFALSE 58308
// sSpec := true ;
58300: LD_ADDR_EXP 52
58304: PUSH
58305: LD_INT 1
58307: ST_TO_ADDR
// if p3 = 5 then
58308: LD_VAR 0 3
58312: PUSH
58313: LD_INT 5
58315: EQUAL
58316: IFFALSE 58326
// sLevel := true ;
58318: LD_ADDR_EXP 56
58322: PUSH
58323: LD_INT 1
58325: ST_TO_ADDR
// if p3 = 6 then
58326: LD_VAR 0 3
58330: PUSH
58331: LD_INT 6
58333: EQUAL
58334: IFFALSE 58344
// sArmoury := true ;
58336: LD_ADDR_EXP 57
58340: PUSH
58341: LD_INT 1
58343: ST_TO_ADDR
// if p3 = 7 then
58344: LD_VAR 0 3
58348: PUSH
58349: LD_INT 7
58351: EQUAL
58352: IFFALSE 58362
// sRadar := true ;
58354: LD_ADDR_EXP 58
58358: PUSH
58359: LD_INT 1
58361: ST_TO_ADDR
// if p3 = 8 then
58362: LD_VAR 0 3
58366: PUSH
58367: LD_INT 8
58369: EQUAL
58370: IFFALSE 58380
// sBunker := true ;
58372: LD_ADDR_EXP 59
58376: PUSH
58377: LD_INT 1
58379: ST_TO_ADDR
// if p3 = 9 then
58380: LD_VAR 0 3
58384: PUSH
58385: LD_INT 9
58387: EQUAL
58388: IFFALSE 58398
// sHack := true ;
58390: LD_ADDR_EXP 60
58394: PUSH
58395: LD_INT 1
58397: ST_TO_ADDR
// if p3 = 10 then
58398: LD_VAR 0 3
58402: PUSH
58403: LD_INT 10
58405: EQUAL
58406: IFFALSE 58416
// sFire := true ;
58408: LD_ADDR_EXP 61
58412: PUSH
58413: LD_INT 1
58415: ST_TO_ADDR
// if p3 = 11 then
58416: LD_VAR 0 3
58420: PUSH
58421: LD_INT 11
58423: EQUAL
58424: IFFALSE 58434
// sRefresh := true ;
58426: LD_ADDR_EXP 62
58430: PUSH
58431: LD_INT 1
58433: ST_TO_ADDR
// if p3 = 12 then
58434: LD_VAR 0 3
58438: PUSH
58439: LD_INT 12
58441: EQUAL
58442: IFFALSE 58452
// sExp := true ;
58444: LD_ADDR_EXP 63
58448: PUSH
58449: LD_INT 1
58451: ST_TO_ADDR
// if p3 = 13 then
58452: LD_VAR 0 3
58456: PUSH
58457: LD_INT 13
58459: EQUAL
58460: IFFALSE 58470
// sDepot := true ;
58462: LD_ADDR_EXP 64
58466: PUSH
58467: LD_INT 1
58469: ST_TO_ADDR
// if p3 = 14 then
58470: LD_VAR 0 3
58474: PUSH
58475: LD_INT 14
58477: EQUAL
58478: IFFALSE 58488
// sFlag := true ;
58480: LD_ADDR_EXP 65
58484: PUSH
58485: LD_INT 1
58487: ST_TO_ADDR
// if p3 = 15 then
58488: LD_VAR 0 3
58492: PUSH
58493: LD_INT 15
58495: EQUAL
58496: IFFALSE 58506
// sKamikadze := true ;
58498: LD_ADDR_EXP 73
58502: PUSH
58503: LD_INT 1
58505: ST_TO_ADDR
// if p3 = 16 then
58506: LD_VAR 0 3
58510: PUSH
58511: LD_INT 16
58513: EQUAL
58514: IFFALSE 58524
// sTroll := true ;
58516: LD_ADDR_EXP 74
58520: PUSH
58521: LD_INT 1
58523: ST_TO_ADDR
// if p3 = 17 then
58524: LD_VAR 0 3
58528: PUSH
58529: LD_INT 17
58531: EQUAL
58532: IFFALSE 58542
// sSlow := true ;
58534: LD_ADDR_EXP 75
58538: PUSH
58539: LD_INT 1
58541: ST_TO_ADDR
// if p3 = 18 then
58542: LD_VAR 0 3
58546: PUSH
58547: LD_INT 18
58549: EQUAL
58550: IFFALSE 58560
// sLack := true ;
58552: LD_ADDR_EXP 76
58556: PUSH
58557: LD_INT 1
58559: ST_TO_ADDR
// if p3 = 19 then
58560: LD_VAR 0 3
58564: PUSH
58565: LD_INT 19
58567: EQUAL
58568: IFFALSE 58578
// sTank := true ;
58570: LD_ADDR_EXP 78
58574: PUSH
58575: LD_INT 1
58577: ST_TO_ADDR
// if p3 = 20 then
58578: LD_VAR 0 3
58582: PUSH
58583: LD_INT 20
58585: EQUAL
58586: IFFALSE 58596
// sRemote := true ;
58588: LD_ADDR_EXP 79
58592: PUSH
58593: LD_INT 1
58595: ST_TO_ADDR
// if p3 = 21 then
58596: LD_VAR 0 3
58600: PUSH
58601: LD_INT 21
58603: EQUAL
58604: IFFALSE 58614
// sPowell := true ;
58606: LD_ADDR_EXP 80
58610: PUSH
58611: LD_INT 1
58613: ST_TO_ADDR
// if p3 = 22 then
58614: LD_VAR 0 3
58618: PUSH
58619: LD_INT 22
58621: EQUAL
58622: IFFALSE 58632
// sTeleport := true ;
58624: LD_ADDR_EXP 83
58628: PUSH
58629: LD_INT 1
58631: ST_TO_ADDR
// if p3 = 23 then
58632: LD_VAR 0 3
58636: PUSH
58637: LD_INT 23
58639: EQUAL
58640: IFFALSE 58650
// sOilTower := true ;
58642: LD_ADDR_EXP 85
58646: PUSH
58647: LD_INT 1
58649: ST_TO_ADDR
// if p3 = 24 then
58650: LD_VAR 0 3
58654: PUSH
58655: LD_INT 24
58657: EQUAL
58658: IFFALSE 58668
// sShovel := true ;
58660: LD_ADDR_EXP 86
58664: PUSH
58665: LD_INT 1
58667: ST_TO_ADDR
// if p3 = 25 then
58668: LD_VAR 0 3
58672: PUSH
58673: LD_INT 25
58675: EQUAL
58676: IFFALSE 58686
// sSheik := true ;
58678: LD_ADDR_EXP 87
58682: PUSH
58683: LD_INT 1
58685: ST_TO_ADDR
// if p3 = 26 then
58686: LD_VAR 0 3
58690: PUSH
58691: LD_INT 26
58693: EQUAL
58694: IFFALSE 58704
// sEarthquake := true ;
58696: LD_ADDR_EXP 89
58700: PUSH
58701: LD_INT 1
58703: ST_TO_ADDR
// if p3 = 27 then
58704: LD_VAR 0 3
58708: PUSH
58709: LD_INT 27
58711: EQUAL
58712: IFFALSE 58722
// sAI := true ;
58714: LD_ADDR_EXP 90
58718: PUSH
58719: LD_INT 1
58721: ST_TO_ADDR
// if p3 = 28 then
58722: LD_VAR 0 3
58726: PUSH
58727: LD_INT 28
58729: EQUAL
58730: IFFALSE 58740
// sCargo := true ;
58732: LD_ADDR_EXP 93
58736: PUSH
58737: LD_INT 1
58739: ST_TO_ADDR
// if p3 = 29 then
58740: LD_VAR 0 3
58744: PUSH
58745: LD_INT 29
58747: EQUAL
58748: IFFALSE 58758
// sDLaser := true ;
58750: LD_ADDR_EXP 94
58754: PUSH
58755: LD_INT 1
58757: ST_TO_ADDR
// if p3 = 30 then
58758: LD_VAR 0 3
58762: PUSH
58763: LD_INT 30
58765: EQUAL
58766: IFFALSE 58776
// sExchange := true ;
58768: LD_ADDR_EXP 95
58772: PUSH
58773: LD_INT 1
58775: ST_TO_ADDR
// if p3 = 31 then
58776: LD_VAR 0 3
58780: PUSH
58781: LD_INT 31
58783: EQUAL
58784: IFFALSE 58794
// sFac := true ;
58786: LD_ADDR_EXP 96
58790: PUSH
58791: LD_INT 1
58793: ST_TO_ADDR
// if p3 = 32 then
58794: LD_VAR 0 3
58798: PUSH
58799: LD_INT 32
58801: EQUAL
58802: IFFALSE 58812
// sPower := true ;
58804: LD_ADDR_EXP 97
58808: PUSH
58809: LD_INT 1
58811: ST_TO_ADDR
// if p3 = 33 then
58812: LD_VAR 0 3
58816: PUSH
58817: LD_INT 33
58819: EQUAL
58820: IFFALSE 58830
// sRandom := true ;
58822: LD_ADDR_EXP 98
58826: PUSH
58827: LD_INT 1
58829: ST_TO_ADDR
// if p3 = 34 then
58830: LD_VAR 0 3
58834: PUSH
58835: LD_INT 34
58837: EQUAL
58838: IFFALSE 58848
// sShield := true ;
58840: LD_ADDR_EXP 99
58844: PUSH
58845: LD_INT 1
58847: ST_TO_ADDR
// if p3 = 35 then
58848: LD_VAR 0 3
58852: PUSH
58853: LD_INT 35
58855: EQUAL
58856: IFFALSE 58866
// sTime := true ;
58858: LD_ADDR_EXP 100
58862: PUSH
58863: LD_INT 1
58865: ST_TO_ADDR
// if p3 = 36 then
58866: LD_VAR 0 3
58870: PUSH
58871: LD_INT 36
58873: EQUAL
58874: IFFALSE 58884
// sTools := true ;
58876: LD_ADDR_EXP 101
58880: PUSH
58881: LD_INT 1
58883: ST_TO_ADDR
// if p3 = 101 then
58884: LD_VAR 0 3
58888: PUSH
58889: LD_INT 101
58891: EQUAL
58892: IFFALSE 58902
// sSold := true ;
58894: LD_ADDR_EXP 66
58898: PUSH
58899: LD_INT 1
58901: ST_TO_ADDR
// if p3 = 102 then
58902: LD_VAR 0 3
58906: PUSH
58907: LD_INT 102
58909: EQUAL
58910: IFFALSE 58920
// sDiff := true ;
58912: LD_ADDR_EXP 67
58916: PUSH
58917: LD_INT 1
58919: ST_TO_ADDR
// if p3 = 103 then
58920: LD_VAR 0 3
58924: PUSH
58925: LD_INT 103
58927: EQUAL
58928: IFFALSE 58938
// sFog := true ;
58930: LD_ADDR_EXP 70
58934: PUSH
58935: LD_INT 1
58937: ST_TO_ADDR
// if p3 = 104 then
58938: LD_VAR 0 3
58942: PUSH
58943: LD_INT 104
58945: EQUAL
58946: IFFALSE 58956
// sReset := true ;
58948: LD_ADDR_EXP 71
58952: PUSH
58953: LD_INT 1
58955: ST_TO_ADDR
// if p3 = 105 then
58956: LD_VAR 0 3
58960: PUSH
58961: LD_INT 105
58963: EQUAL
58964: IFFALSE 58974
// sSun := true ;
58966: LD_ADDR_EXP 72
58970: PUSH
58971: LD_INT 1
58973: ST_TO_ADDR
// if p3 = 106 then
58974: LD_VAR 0 3
58978: PUSH
58979: LD_INT 106
58981: EQUAL
58982: IFFALSE 58992
// sTiger := true ;
58984: LD_ADDR_EXP 68
58988: PUSH
58989: LD_INT 1
58991: ST_TO_ADDR
// if p3 = 107 then
58992: LD_VAR 0 3
58996: PUSH
58997: LD_INT 107
58999: EQUAL
59000: IFFALSE 59010
// sBomb := true ;
59002: LD_ADDR_EXP 69
59006: PUSH
59007: LD_INT 1
59009: ST_TO_ADDR
// if p3 = 108 then
59010: LD_VAR 0 3
59014: PUSH
59015: LD_INT 108
59017: EQUAL
59018: IFFALSE 59028
// sWound := true ;
59020: LD_ADDR_EXP 77
59024: PUSH
59025: LD_INT 1
59027: ST_TO_ADDR
// if p3 = 109 then
59028: LD_VAR 0 3
59032: PUSH
59033: LD_INT 109
59035: EQUAL
59036: IFFALSE 59046
// sBetray := true ;
59038: LD_ADDR_EXP 81
59042: PUSH
59043: LD_INT 1
59045: ST_TO_ADDR
// if p3 = 110 then
59046: LD_VAR 0 3
59050: PUSH
59051: LD_INT 110
59053: EQUAL
59054: IFFALSE 59064
// sContamin := true ;
59056: LD_ADDR_EXP 82
59060: PUSH
59061: LD_INT 1
59063: ST_TO_ADDR
// if p3 = 111 then
59064: LD_VAR 0 3
59068: PUSH
59069: LD_INT 111
59071: EQUAL
59072: IFFALSE 59082
// sOil := true ;
59074: LD_ADDR_EXP 84
59078: PUSH
59079: LD_INT 1
59081: ST_TO_ADDR
// if p3 = 112 then
59082: LD_VAR 0 3
59086: PUSH
59087: LD_INT 112
59089: EQUAL
59090: IFFALSE 59100
// sStu := true ;
59092: LD_ADDR_EXP 88
59096: PUSH
59097: LD_INT 1
59099: ST_TO_ADDR
// if p3 = 113 then
59100: LD_VAR 0 3
59104: PUSH
59105: LD_INT 113
59107: EQUAL
59108: IFFALSE 59118
// sBazooka := true ;
59110: LD_ADDR_EXP 91
59114: PUSH
59115: LD_INT 1
59117: ST_TO_ADDR
// if p3 = 114 then
59118: LD_VAR 0 3
59122: PUSH
59123: LD_INT 114
59125: EQUAL
59126: IFFALSE 59136
// sMortar := true ;
59128: LD_ADDR_EXP 92
59132: PUSH
59133: LD_INT 1
59135: ST_TO_ADDR
// if p3 = 115 then
59136: LD_VAR 0 3
59140: PUSH
59141: LD_INT 115
59143: EQUAL
59144: IFFALSE 59154
// sRanger := true ;
59146: LD_ADDR_EXP 102
59150: PUSH
59151: LD_INT 1
59153: ST_TO_ADDR
// if p3 = 116 then
59154: LD_VAR 0 3
59158: PUSH
59159: LD_INT 116
59161: EQUAL
59162: IFFALSE 59172
// sComputer := true ;
59164: LD_ADDR_EXP 103
59168: PUSH
59169: LD_INT 1
59171: ST_TO_ADDR
// if p3 = 117 then
59172: LD_VAR 0 3
59176: PUSH
59177: LD_INT 117
59179: EQUAL
59180: IFFALSE 59190
// s30 := true ;
59182: LD_ADDR_EXP 104
59186: PUSH
59187: LD_INT 1
59189: ST_TO_ADDR
// if p3 = 118 then
59190: LD_VAR 0 3
59194: PUSH
59195: LD_INT 118
59197: EQUAL
59198: IFFALSE 59208
// s60 := true ;
59200: LD_ADDR_EXP 105
59204: PUSH
59205: LD_INT 1
59207: ST_TO_ADDR
// end ; if p2 = 101 then
59208: LD_VAR 0 2
59212: PUSH
59213: LD_INT 101
59215: EQUAL
59216: IFFALSE 59344
// begin case p3 of 1 :
59218: LD_VAR 0 3
59222: PUSH
59223: LD_INT 1
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59231
59229: GO 59238
59231: POP
// hHackUnlimitedResources ; 2 :
59232: CALL 71442 0 0
59236: GO 59344
59238: LD_INT 2
59240: DOUBLE
59241: EQUAL
59242: IFTRUE 59246
59244: GO 59253
59246: POP
// hHackSetLevel10 ; 3 :
59247: CALL 71575 0 0
59251: GO 59344
59253: LD_INT 3
59255: DOUBLE
59256: EQUAL
59257: IFTRUE 59261
59259: GO 59268
59261: POP
// hHackSetLevel10YourUnits ; 4 :
59262: CALL 71660 0 0
59266: GO 59344
59268: LD_INT 4
59270: DOUBLE
59271: EQUAL
59272: IFTRUE 59276
59274: GO 59283
59276: POP
// hHackInvincible ; 5 :
59277: CALL 72108 0 0
59281: GO 59344
59283: LD_INT 5
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59298
59291: POP
// hHackInvisible ; 6 :
59292: CALL 72219 0 0
59296: GO 59344
59298: LD_INT 6
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59306
59304: GO 59313
59306: POP
// hHackChangeYourSide ; 7 :
59307: CALL 72276 0 0
59311: GO 59344
59313: LD_INT 7
59315: DOUBLE
59316: EQUAL
59317: IFTRUE 59321
59319: GO 59328
59321: POP
// hHackChangeUnitSide ; 8 :
59322: CALL 72318 0 0
59326: GO 59344
59328: LD_INT 8
59330: DOUBLE
59331: EQUAL
59332: IFTRUE 59336
59334: GO 59343
59336: POP
// hHackFog ; end ;
59337: CALL 72419 0 0
59341: GO 59344
59343: POP
// end ; end ;
59344: LD_VAR 0 7
59348: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
59349: GO 59351
59351: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
59352: LD_STRING initStreamRollete();
59354: PPUSH
59355: CALL_OW 559
// InitStreamMode ;
59359: CALL 59371 0 0
// DefineStreamItems ( false ) ;
59363: LD_INT 0
59365: PPUSH
59366: CALL 59835 0 1
// end ;
59370: END
// function InitStreamMode ; begin
59371: LD_INT 0
59373: PPUSH
// streamModeActive := false ;
59374: LD_ADDR_EXP 49
59378: PUSH
59379: LD_INT 0
59381: ST_TO_ADDR
// normalCounter := 36 ;
59382: LD_ADDR_EXP 50
59386: PUSH
59387: LD_INT 36
59389: ST_TO_ADDR
// hardcoreCounter := 18 ;
59390: LD_ADDR_EXP 51
59394: PUSH
59395: LD_INT 18
59397: ST_TO_ADDR
// sRocket := false ;
59398: LD_ADDR_EXP 54
59402: PUSH
59403: LD_INT 0
59405: ST_TO_ADDR
// sSpeed := false ;
59406: LD_ADDR_EXP 53
59410: PUSH
59411: LD_INT 0
59413: ST_TO_ADDR
// sEngine := false ;
59414: LD_ADDR_EXP 55
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// sSpec := false ;
59422: LD_ADDR_EXP 52
59426: PUSH
59427: LD_INT 0
59429: ST_TO_ADDR
// sLevel := false ;
59430: LD_ADDR_EXP 56
59434: PUSH
59435: LD_INT 0
59437: ST_TO_ADDR
// sArmoury := false ;
59438: LD_ADDR_EXP 57
59442: PUSH
59443: LD_INT 0
59445: ST_TO_ADDR
// sRadar := false ;
59446: LD_ADDR_EXP 58
59450: PUSH
59451: LD_INT 0
59453: ST_TO_ADDR
// sBunker := false ;
59454: LD_ADDR_EXP 59
59458: PUSH
59459: LD_INT 0
59461: ST_TO_ADDR
// sHack := false ;
59462: LD_ADDR_EXP 60
59466: PUSH
59467: LD_INT 0
59469: ST_TO_ADDR
// sFire := false ;
59470: LD_ADDR_EXP 61
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// sRefresh := false ;
59478: LD_ADDR_EXP 62
59482: PUSH
59483: LD_INT 0
59485: ST_TO_ADDR
// sExp := false ;
59486: LD_ADDR_EXP 63
59490: PUSH
59491: LD_INT 0
59493: ST_TO_ADDR
// sDepot := false ;
59494: LD_ADDR_EXP 64
59498: PUSH
59499: LD_INT 0
59501: ST_TO_ADDR
// sFlag := false ;
59502: LD_ADDR_EXP 65
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// sKamikadze := false ;
59510: LD_ADDR_EXP 73
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// sTroll := false ;
59518: LD_ADDR_EXP 74
59522: PUSH
59523: LD_INT 0
59525: ST_TO_ADDR
// sSlow := false ;
59526: LD_ADDR_EXP 75
59530: PUSH
59531: LD_INT 0
59533: ST_TO_ADDR
// sLack := false ;
59534: LD_ADDR_EXP 76
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// sTank := false ;
59542: LD_ADDR_EXP 78
59546: PUSH
59547: LD_INT 0
59549: ST_TO_ADDR
// sRemote := false ;
59550: LD_ADDR_EXP 79
59554: PUSH
59555: LD_INT 0
59557: ST_TO_ADDR
// sPowell := false ;
59558: LD_ADDR_EXP 80
59562: PUSH
59563: LD_INT 0
59565: ST_TO_ADDR
// sTeleport := false ;
59566: LD_ADDR_EXP 83
59570: PUSH
59571: LD_INT 0
59573: ST_TO_ADDR
// sOilTower := false ;
59574: LD_ADDR_EXP 85
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// sShovel := false ;
59582: LD_ADDR_EXP 86
59586: PUSH
59587: LD_INT 0
59589: ST_TO_ADDR
// sSheik := false ;
59590: LD_ADDR_EXP 87
59594: PUSH
59595: LD_INT 0
59597: ST_TO_ADDR
// sEarthquake := false ;
59598: LD_ADDR_EXP 89
59602: PUSH
59603: LD_INT 0
59605: ST_TO_ADDR
// sAI := false ;
59606: LD_ADDR_EXP 90
59610: PUSH
59611: LD_INT 0
59613: ST_TO_ADDR
// sCargo := false ;
59614: LD_ADDR_EXP 93
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// sDLaser := false ;
59622: LD_ADDR_EXP 94
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// sExchange := false ;
59630: LD_ADDR_EXP 95
59634: PUSH
59635: LD_INT 0
59637: ST_TO_ADDR
// sFac := false ;
59638: LD_ADDR_EXP 96
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// sPower := false ;
59646: LD_ADDR_EXP 97
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// sRandom := false ;
59654: LD_ADDR_EXP 98
59658: PUSH
59659: LD_INT 0
59661: ST_TO_ADDR
// sShield := false ;
59662: LD_ADDR_EXP 99
59666: PUSH
59667: LD_INT 0
59669: ST_TO_ADDR
// sTime := false ;
59670: LD_ADDR_EXP 100
59674: PUSH
59675: LD_INT 0
59677: ST_TO_ADDR
// sTools := false ;
59678: LD_ADDR_EXP 101
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// sSold := false ;
59686: LD_ADDR_EXP 66
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// sDiff := false ;
59694: LD_ADDR_EXP 67
59698: PUSH
59699: LD_INT 0
59701: ST_TO_ADDR
// sFog := false ;
59702: LD_ADDR_EXP 70
59706: PUSH
59707: LD_INT 0
59709: ST_TO_ADDR
// sReset := false ;
59710: LD_ADDR_EXP 71
59714: PUSH
59715: LD_INT 0
59717: ST_TO_ADDR
// sSun := false ;
59718: LD_ADDR_EXP 72
59722: PUSH
59723: LD_INT 0
59725: ST_TO_ADDR
// sTiger := false ;
59726: LD_ADDR_EXP 68
59730: PUSH
59731: LD_INT 0
59733: ST_TO_ADDR
// sBomb := false ;
59734: LD_ADDR_EXP 69
59738: PUSH
59739: LD_INT 0
59741: ST_TO_ADDR
// sWound := false ;
59742: LD_ADDR_EXP 77
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
// sBetray := false ;
59750: LD_ADDR_EXP 81
59754: PUSH
59755: LD_INT 0
59757: ST_TO_ADDR
// sContamin := false ;
59758: LD_ADDR_EXP 82
59762: PUSH
59763: LD_INT 0
59765: ST_TO_ADDR
// sOil := false ;
59766: LD_ADDR_EXP 84
59770: PUSH
59771: LD_INT 0
59773: ST_TO_ADDR
// sStu := false ;
59774: LD_ADDR_EXP 88
59778: PUSH
59779: LD_INT 0
59781: ST_TO_ADDR
// sBazooka := false ;
59782: LD_ADDR_EXP 91
59786: PUSH
59787: LD_INT 0
59789: ST_TO_ADDR
// sMortar := false ;
59790: LD_ADDR_EXP 92
59794: PUSH
59795: LD_INT 0
59797: ST_TO_ADDR
// sRanger := false ;
59798: LD_ADDR_EXP 102
59802: PUSH
59803: LD_INT 0
59805: ST_TO_ADDR
// sComputer := false ;
59806: LD_ADDR_EXP 103
59810: PUSH
59811: LD_INT 0
59813: ST_TO_ADDR
// s30 := false ;
59814: LD_ADDR_EXP 104
59818: PUSH
59819: LD_INT 0
59821: ST_TO_ADDR
// s60 := false ;
59822: LD_ADDR_EXP 105
59826: PUSH
59827: LD_INT 0
59829: ST_TO_ADDR
// end ;
59830: LD_VAR 0 1
59834: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59835: LD_INT 0
59837: PPUSH
59838: PPUSH
59839: PPUSH
59840: PPUSH
59841: PPUSH
59842: PPUSH
59843: PPUSH
// result := [ ] ;
59844: LD_ADDR_VAR 0 2
59848: PUSH
59849: EMPTY
59850: ST_TO_ADDR
// if campaign_id = 1 then
59851: LD_OWVAR 69
59855: PUSH
59856: LD_INT 1
59858: EQUAL
59859: IFFALSE 63025
// begin case mission_number of 1 :
59861: LD_OWVAR 70
59865: PUSH
59866: LD_INT 1
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59874
59872: GO 59950
59874: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59875: LD_ADDR_VAR 0 2
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 4
59885: PUSH
59886: LD_INT 11
59888: PUSH
59889: LD_INT 12
59891: PUSH
59892: LD_INT 15
59894: PUSH
59895: LD_INT 16
59897: PUSH
59898: LD_INT 22
59900: PUSH
59901: LD_INT 23
59903: PUSH
59904: LD_INT 26
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 101
59920: PUSH
59921: LD_INT 102
59923: PUSH
59924: LD_INT 106
59926: PUSH
59927: LD_INT 116
59929: PUSH
59930: LD_INT 117
59932: PUSH
59933: LD_INT 118
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: ST_TO_ADDR
59948: GO 63023
59950: LD_INT 2
59952: DOUBLE
59953: EQUAL
59954: IFTRUE 59958
59956: GO 60042
59958: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59959: LD_ADDR_VAR 0 2
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 4
59969: PUSH
59970: LD_INT 11
59972: PUSH
59973: LD_INT 12
59975: PUSH
59976: LD_INT 15
59978: PUSH
59979: LD_INT 16
59981: PUSH
59982: LD_INT 22
59984: PUSH
59985: LD_INT 23
59987: PUSH
59988: LD_INT 26
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 101
60004: PUSH
60005: LD_INT 102
60007: PUSH
60008: LD_INT 105
60010: PUSH
60011: LD_INT 106
60013: PUSH
60014: LD_INT 108
60016: PUSH
60017: LD_INT 116
60019: PUSH
60020: LD_INT 117
60022: PUSH
60023: LD_INT 118
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: ST_TO_ADDR
60040: GO 63023
60042: LD_INT 3
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60138
60050: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60051: LD_ADDR_VAR 0 2
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: LD_INT 11
60067: PUSH
60068: LD_INT 12
60070: PUSH
60071: LD_INT 15
60073: PUSH
60074: LD_INT 16
60076: PUSH
60077: LD_INT 22
60079: PUSH
60080: LD_INT 26
60082: PUSH
60083: LD_INT 36
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 101
60100: PUSH
60101: LD_INT 102
60103: PUSH
60104: LD_INT 105
60106: PUSH
60107: LD_INT 106
60109: PUSH
60110: LD_INT 108
60112: PUSH
60113: LD_INT 116
60115: PUSH
60116: LD_INT 117
60118: PUSH
60119: LD_INT 118
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: ST_TO_ADDR
60136: GO 63023
60138: LD_INT 4
60140: DOUBLE
60141: EQUAL
60142: IFTRUE 60146
60144: GO 60242
60146: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60147: LD_ADDR_VAR 0 2
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: LD_INT 5
60160: PUSH
60161: LD_INT 8
60163: PUSH
60164: LD_INT 11
60166: PUSH
60167: LD_INT 12
60169: PUSH
60170: LD_INT 15
60172: PUSH
60173: LD_INT 16
60175: PUSH
60176: LD_INT 22
60178: PUSH
60179: LD_INT 23
60181: PUSH
60182: LD_INT 26
60184: PUSH
60185: LD_INT 36
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 101
60204: PUSH
60205: LD_INT 102
60207: PUSH
60208: LD_INT 105
60210: PUSH
60211: LD_INT 106
60213: PUSH
60214: LD_INT 108
60216: PUSH
60217: LD_INT 116
60219: PUSH
60220: LD_INT 117
60222: PUSH
60223: LD_INT 118
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: ST_TO_ADDR
60240: GO 63023
60242: LD_INT 5
60244: DOUBLE
60245: EQUAL
60246: IFTRUE 60250
60248: GO 60362
60250: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60251: LD_ADDR_VAR 0 2
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: LD_INT 5
60264: PUSH
60265: LD_INT 6
60267: PUSH
60268: LD_INT 8
60270: PUSH
60271: LD_INT 11
60273: PUSH
60274: LD_INT 12
60276: PUSH
60277: LD_INT 15
60279: PUSH
60280: LD_INT 16
60282: PUSH
60283: LD_INT 22
60285: PUSH
60286: LD_INT 23
60288: PUSH
60289: LD_INT 25
60291: PUSH
60292: LD_INT 26
60294: PUSH
60295: LD_INT 36
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 101
60316: PUSH
60317: LD_INT 102
60319: PUSH
60320: LD_INT 105
60322: PUSH
60323: LD_INT 106
60325: PUSH
60326: LD_INT 108
60328: PUSH
60329: LD_INT 109
60331: PUSH
60332: LD_INT 112
60334: PUSH
60335: LD_INT 116
60337: PUSH
60338: LD_INT 117
60340: PUSH
60341: LD_INT 118
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: ST_TO_ADDR
60360: GO 63023
60362: LD_INT 6
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60370
60368: GO 60502
60370: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60371: LD_ADDR_VAR 0 2
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: LD_INT 4
60381: PUSH
60382: LD_INT 5
60384: PUSH
60385: LD_INT 6
60387: PUSH
60388: LD_INT 8
60390: PUSH
60391: LD_INT 11
60393: PUSH
60394: LD_INT 12
60396: PUSH
60397: LD_INT 15
60399: PUSH
60400: LD_INT 16
60402: PUSH
60403: LD_INT 20
60405: PUSH
60406: LD_INT 21
60408: PUSH
60409: LD_INT 22
60411: PUSH
60412: LD_INT 23
60414: PUSH
60415: LD_INT 25
60417: PUSH
60418: LD_INT 26
60420: PUSH
60421: LD_INT 30
60423: PUSH
60424: LD_INT 31
60426: PUSH
60427: LD_INT 32
60429: PUSH
60430: LD_INT 36
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 101
60456: PUSH
60457: LD_INT 102
60459: PUSH
60460: LD_INT 105
60462: PUSH
60463: LD_INT 106
60465: PUSH
60466: LD_INT 108
60468: PUSH
60469: LD_INT 109
60471: PUSH
60472: LD_INT 112
60474: PUSH
60475: LD_INT 116
60477: PUSH
60478: LD_INT 117
60480: PUSH
60481: LD_INT 118
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: ST_TO_ADDR
60500: GO 63023
60502: LD_INT 7
60504: DOUBLE
60505: EQUAL
60506: IFTRUE 60510
60508: GO 60622
60510: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60511: LD_ADDR_VAR 0 2
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 5
60524: PUSH
60525: LD_INT 7
60527: PUSH
60528: LD_INT 11
60530: PUSH
60531: LD_INT 12
60533: PUSH
60534: LD_INT 15
60536: PUSH
60537: LD_INT 16
60539: PUSH
60540: LD_INT 20
60542: PUSH
60543: LD_INT 21
60545: PUSH
60546: LD_INT 22
60548: PUSH
60549: LD_INT 23
60551: PUSH
60552: LD_INT 25
60554: PUSH
60555: LD_INT 26
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 101
60576: PUSH
60577: LD_INT 102
60579: PUSH
60580: LD_INT 103
60582: PUSH
60583: LD_INT 105
60585: PUSH
60586: LD_INT 106
60588: PUSH
60589: LD_INT 108
60591: PUSH
60592: LD_INT 112
60594: PUSH
60595: LD_INT 116
60597: PUSH
60598: LD_INT 117
60600: PUSH
60601: LD_INT 118
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: ST_TO_ADDR
60620: GO 63023
60622: LD_INT 8
60624: DOUBLE
60625: EQUAL
60626: IFTRUE 60630
60628: GO 60770
60630: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60631: LD_ADDR_VAR 0 2
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: LD_INT 4
60641: PUSH
60642: LD_INT 5
60644: PUSH
60645: LD_INT 6
60647: PUSH
60648: LD_INT 7
60650: PUSH
60651: LD_INT 8
60653: PUSH
60654: LD_INT 11
60656: PUSH
60657: LD_INT 12
60659: PUSH
60660: LD_INT 15
60662: PUSH
60663: LD_INT 16
60665: PUSH
60666: LD_INT 20
60668: PUSH
60669: LD_INT 21
60671: PUSH
60672: LD_INT 22
60674: PUSH
60675: LD_INT 23
60677: PUSH
60678: LD_INT 25
60680: PUSH
60681: LD_INT 26
60683: PUSH
60684: LD_INT 30
60686: PUSH
60687: LD_INT 31
60689: PUSH
60690: LD_INT 32
60692: PUSH
60693: LD_INT 36
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 101
60720: PUSH
60721: LD_INT 102
60723: PUSH
60724: LD_INT 103
60726: PUSH
60727: LD_INT 105
60729: PUSH
60730: LD_INT 106
60732: PUSH
60733: LD_INT 108
60735: PUSH
60736: LD_INT 109
60738: PUSH
60739: LD_INT 112
60741: PUSH
60742: LD_INT 116
60744: PUSH
60745: LD_INT 117
60747: PUSH
60748: LD_INT 118
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: ST_TO_ADDR
60768: GO 63023
60770: LD_INT 9
60772: DOUBLE
60773: EQUAL
60774: IFTRUE 60778
60776: GO 60926
60778: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60779: LD_ADDR_VAR 0 2
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: LD_INT 4
60789: PUSH
60790: LD_INT 5
60792: PUSH
60793: LD_INT 6
60795: PUSH
60796: LD_INT 7
60798: PUSH
60799: LD_INT 8
60801: PUSH
60802: LD_INT 11
60804: PUSH
60805: LD_INT 12
60807: PUSH
60808: LD_INT 15
60810: PUSH
60811: LD_INT 16
60813: PUSH
60814: LD_INT 20
60816: PUSH
60817: LD_INT 21
60819: PUSH
60820: LD_INT 22
60822: PUSH
60823: LD_INT 23
60825: PUSH
60826: LD_INT 25
60828: PUSH
60829: LD_INT 26
60831: PUSH
60832: LD_INT 28
60834: PUSH
60835: LD_INT 30
60837: PUSH
60838: LD_INT 31
60840: PUSH
60841: LD_INT 32
60843: PUSH
60844: LD_INT 36
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 101
60872: PUSH
60873: LD_INT 102
60875: PUSH
60876: LD_INT 103
60878: PUSH
60879: LD_INT 105
60881: PUSH
60882: LD_INT 106
60884: PUSH
60885: LD_INT 108
60887: PUSH
60888: LD_INT 109
60890: PUSH
60891: LD_INT 112
60893: PUSH
60894: LD_INT 114
60896: PUSH
60897: LD_INT 116
60899: PUSH
60900: LD_INT 117
60902: PUSH
60903: LD_INT 118
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: ST_TO_ADDR
60924: GO 63023
60926: LD_INT 10
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 61130
60934: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60935: LD_ADDR_VAR 0 2
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: LD_INT 5
60948: PUSH
60949: LD_INT 6
60951: PUSH
60952: LD_INT 7
60954: PUSH
60955: LD_INT 8
60957: PUSH
60958: LD_INT 9
60960: PUSH
60961: LD_INT 10
60963: PUSH
60964: LD_INT 11
60966: PUSH
60967: LD_INT 12
60969: PUSH
60970: LD_INT 13
60972: PUSH
60973: LD_INT 14
60975: PUSH
60976: LD_INT 15
60978: PUSH
60979: LD_INT 16
60981: PUSH
60982: LD_INT 17
60984: PUSH
60985: LD_INT 18
60987: PUSH
60988: LD_INT 19
60990: PUSH
60991: LD_INT 20
60993: PUSH
60994: LD_INT 21
60996: PUSH
60997: LD_INT 22
60999: PUSH
61000: LD_INT 23
61002: PUSH
61003: LD_INT 24
61005: PUSH
61006: LD_INT 25
61008: PUSH
61009: LD_INT 26
61011: PUSH
61012: LD_INT 28
61014: PUSH
61015: LD_INT 30
61017: PUSH
61018: LD_INT 31
61020: PUSH
61021: LD_INT 32
61023: PUSH
61024: LD_INT 36
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 101
61060: PUSH
61061: LD_INT 102
61063: PUSH
61064: LD_INT 103
61066: PUSH
61067: LD_INT 104
61069: PUSH
61070: LD_INT 105
61072: PUSH
61073: LD_INT 106
61075: PUSH
61076: LD_INT 107
61078: PUSH
61079: LD_INT 108
61081: PUSH
61082: LD_INT 109
61084: PUSH
61085: LD_INT 110
61087: PUSH
61088: LD_INT 111
61090: PUSH
61091: LD_INT 112
61093: PUSH
61094: LD_INT 114
61096: PUSH
61097: LD_INT 116
61099: PUSH
61100: LD_INT 117
61102: PUSH
61103: LD_INT 118
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: ST_TO_ADDR
61128: GO 63023
61130: LD_INT 11
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61138
61136: GO 61342
61138: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61139: LD_ADDR_VAR 0 2
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 4
61152: PUSH
61153: LD_INT 5
61155: PUSH
61156: LD_INT 6
61158: PUSH
61159: LD_INT 7
61161: PUSH
61162: LD_INT 8
61164: PUSH
61165: LD_INT 9
61167: PUSH
61168: LD_INT 10
61170: PUSH
61171: LD_INT 11
61173: PUSH
61174: LD_INT 12
61176: PUSH
61177: LD_INT 13
61179: PUSH
61180: LD_INT 14
61182: PUSH
61183: LD_INT 15
61185: PUSH
61186: LD_INT 16
61188: PUSH
61189: LD_INT 17
61191: PUSH
61192: LD_INT 18
61194: PUSH
61195: LD_INT 19
61197: PUSH
61198: LD_INT 20
61200: PUSH
61201: LD_INT 21
61203: PUSH
61204: LD_INT 22
61206: PUSH
61207: LD_INT 23
61209: PUSH
61210: LD_INT 24
61212: PUSH
61213: LD_INT 25
61215: PUSH
61216: LD_INT 26
61218: PUSH
61219: LD_INT 28
61221: PUSH
61222: LD_INT 30
61224: PUSH
61225: LD_INT 31
61227: PUSH
61228: LD_INT 32
61230: PUSH
61231: LD_INT 34
61233: PUSH
61234: LD_INT 36
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 101
61272: PUSH
61273: LD_INT 102
61275: PUSH
61276: LD_INT 103
61278: PUSH
61279: LD_INT 104
61281: PUSH
61282: LD_INT 105
61284: PUSH
61285: LD_INT 106
61287: PUSH
61288: LD_INT 107
61290: PUSH
61291: LD_INT 108
61293: PUSH
61294: LD_INT 109
61296: PUSH
61297: LD_INT 110
61299: PUSH
61300: LD_INT 111
61302: PUSH
61303: LD_INT 112
61305: PUSH
61306: LD_INT 114
61308: PUSH
61309: LD_INT 116
61311: PUSH
61312: LD_INT 117
61314: PUSH
61315: LD_INT 118
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: ST_TO_ADDR
61340: GO 63023
61342: LD_INT 12
61344: DOUBLE
61345: EQUAL
61346: IFTRUE 61350
61348: GO 61570
61350: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61351: LD_ADDR_VAR 0 2
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: LD_INT 5
61370: PUSH
61371: LD_INT 6
61373: PUSH
61374: LD_INT 7
61376: PUSH
61377: LD_INT 8
61379: PUSH
61380: LD_INT 9
61382: PUSH
61383: LD_INT 10
61385: PUSH
61386: LD_INT 11
61388: PUSH
61389: LD_INT 12
61391: PUSH
61392: LD_INT 13
61394: PUSH
61395: LD_INT 14
61397: PUSH
61398: LD_INT 15
61400: PUSH
61401: LD_INT 16
61403: PUSH
61404: LD_INT 17
61406: PUSH
61407: LD_INT 18
61409: PUSH
61410: LD_INT 19
61412: PUSH
61413: LD_INT 20
61415: PUSH
61416: LD_INT 21
61418: PUSH
61419: LD_INT 22
61421: PUSH
61422: LD_INT 23
61424: PUSH
61425: LD_INT 24
61427: PUSH
61428: LD_INT 25
61430: PUSH
61431: LD_INT 26
61433: PUSH
61434: LD_INT 27
61436: PUSH
61437: LD_INT 28
61439: PUSH
61440: LD_INT 30
61442: PUSH
61443: LD_INT 31
61445: PUSH
61446: LD_INT 32
61448: PUSH
61449: LD_INT 33
61451: PUSH
61452: LD_INT 34
61454: PUSH
61455: LD_INT 36
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 101
61496: PUSH
61497: LD_INT 102
61499: PUSH
61500: LD_INT 103
61502: PUSH
61503: LD_INT 104
61505: PUSH
61506: LD_INT 105
61508: PUSH
61509: LD_INT 106
61511: PUSH
61512: LD_INT 107
61514: PUSH
61515: LD_INT 108
61517: PUSH
61518: LD_INT 109
61520: PUSH
61521: LD_INT 110
61523: PUSH
61524: LD_INT 111
61526: PUSH
61527: LD_INT 112
61529: PUSH
61530: LD_INT 113
61532: PUSH
61533: LD_INT 114
61535: PUSH
61536: LD_INT 116
61538: PUSH
61539: LD_INT 117
61541: PUSH
61542: LD_INT 118
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: ST_TO_ADDR
61568: GO 63023
61570: LD_INT 13
61572: DOUBLE
61573: EQUAL
61574: IFTRUE 61578
61576: GO 61786
61578: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61579: LD_ADDR_VAR 0 2
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: LD_INT 4
61595: PUSH
61596: LD_INT 5
61598: PUSH
61599: LD_INT 8
61601: PUSH
61602: LD_INT 9
61604: PUSH
61605: LD_INT 10
61607: PUSH
61608: LD_INT 11
61610: PUSH
61611: LD_INT 12
61613: PUSH
61614: LD_INT 14
61616: PUSH
61617: LD_INT 15
61619: PUSH
61620: LD_INT 16
61622: PUSH
61623: LD_INT 17
61625: PUSH
61626: LD_INT 18
61628: PUSH
61629: LD_INT 19
61631: PUSH
61632: LD_INT 20
61634: PUSH
61635: LD_INT 21
61637: PUSH
61638: LD_INT 22
61640: PUSH
61641: LD_INT 23
61643: PUSH
61644: LD_INT 24
61646: PUSH
61647: LD_INT 25
61649: PUSH
61650: LD_INT 26
61652: PUSH
61653: LD_INT 27
61655: PUSH
61656: LD_INT 28
61658: PUSH
61659: LD_INT 30
61661: PUSH
61662: LD_INT 31
61664: PUSH
61665: LD_INT 32
61667: PUSH
61668: LD_INT 33
61670: PUSH
61671: LD_INT 34
61673: PUSH
61674: LD_INT 36
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 101
61712: PUSH
61713: LD_INT 102
61715: PUSH
61716: LD_INT 103
61718: PUSH
61719: LD_INT 104
61721: PUSH
61722: LD_INT 105
61724: PUSH
61725: LD_INT 106
61727: PUSH
61728: LD_INT 107
61730: PUSH
61731: LD_INT 108
61733: PUSH
61734: LD_INT 109
61736: PUSH
61737: LD_INT 110
61739: PUSH
61740: LD_INT 111
61742: PUSH
61743: LD_INT 112
61745: PUSH
61746: LD_INT 113
61748: PUSH
61749: LD_INT 114
61751: PUSH
61752: LD_INT 116
61754: PUSH
61755: LD_INT 117
61757: PUSH
61758: LD_INT 118
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: ST_TO_ADDR
61784: GO 63023
61786: LD_INT 14
61788: DOUBLE
61789: EQUAL
61790: IFTRUE 61794
61792: GO 62018
61794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61795: LD_ADDR_VAR 0 2
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: LD_INT 4
61811: PUSH
61812: LD_INT 5
61814: PUSH
61815: LD_INT 6
61817: PUSH
61818: LD_INT 7
61820: PUSH
61821: LD_INT 8
61823: PUSH
61824: LD_INT 9
61826: PUSH
61827: LD_INT 10
61829: PUSH
61830: LD_INT 11
61832: PUSH
61833: LD_INT 12
61835: PUSH
61836: LD_INT 13
61838: PUSH
61839: LD_INT 14
61841: PUSH
61842: LD_INT 15
61844: PUSH
61845: LD_INT 16
61847: PUSH
61848: LD_INT 17
61850: PUSH
61851: LD_INT 18
61853: PUSH
61854: LD_INT 19
61856: PUSH
61857: LD_INT 20
61859: PUSH
61860: LD_INT 21
61862: PUSH
61863: LD_INT 22
61865: PUSH
61866: LD_INT 23
61868: PUSH
61869: LD_INT 24
61871: PUSH
61872: LD_INT 25
61874: PUSH
61875: LD_INT 26
61877: PUSH
61878: LD_INT 27
61880: PUSH
61881: LD_INT 28
61883: PUSH
61884: LD_INT 29
61886: PUSH
61887: LD_INT 30
61889: PUSH
61890: LD_INT 31
61892: PUSH
61893: LD_INT 32
61895: PUSH
61896: LD_INT 33
61898: PUSH
61899: LD_INT 34
61901: PUSH
61902: LD_INT 36
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 101
61944: PUSH
61945: LD_INT 102
61947: PUSH
61948: LD_INT 103
61950: PUSH
61951: LD_INT 104
61953: PUSH
61954: LD_INT 105
61956: PUSH
61957: LD_INT 106
61959: PUSH
61960: LD_INT 107
61962: PUSH
61963: LD_INT 108
61965: PUSH
61966: LD_INT 109
61968: PUSH
61969: LD_INT 110
61971: PUSH
61972: LD_INT 111
61974: PUSH
61975: LD_INT 112
61977: PUSH
61978: LD_INT 113
61980: PUSH
61981: LD_INT 114
61983: PUSH
61984: LD_INT 116
61986: PUSH
61987: LD_INT 117
61989: PUSH
61990: LD_INT 118
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: ST_TO_ADDR
62016: GO 63023
62018: LD_INT 15
62020: DOUBLE
62021: EQUAL
62022: IFTRUE 62026
62024: GO 62250
62026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62027: LD_ADDR_VAR 0 2
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: LD_INT 4
62043: PUSH
62044: LD_INT 5
62046: PUSH
62047: LD_INT 6
62049: PUSH
62050: LD_INT 7
62052: PUSH
62053: LD_INT 8
62055: PUSH
62056: LD_INT 9
62058: PUSH
62059: LD_INT 10
62061: PUSH
62062: LD_INT 11
62064: PUSH
62065: LD_INT 12
62067: PUSH
62068: LD_INT 13
62070: PUSH
62071: LD_INT 14
62073: PUSH
62074: LD_INT 15
62076: PUSH
62077: LD_INT 16
62079: PUSH
62080: LD_INT 17
62082: PUSH
62083: LD_INT 18
62085: PUSH
62086: LD_INT 19
62088: PUSH
62089: LD_INT 20
62091: PUSH
62092: LD_INT 21
62094: PUSH
62095: LD_INT 22
62097: PUSH
62098: LD_INT 23
62100: PUSH
62101: LD_INT 24
62103: PUSH
62104: LD_INT 25
62106: PUSH
62107: LD_INT 26
62109: PUSH
62110: LD_INT 27
62112: PUSH
62113: LD_INT 28
62115: PUSH
62116: LD_INT 29
62118: PUSH
62119: LD_INT 30
62121: PUSH
62122: LD_INT 31
62124: PUSH
62125: LD_INT 32
62127: PUSH
62128: LD_INT 33
62130: PUSH
62131: LD_INT 34
62133: PUSH
62134: LD_INT 36
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 101
62176: PUSH
62177: LD_INT 102
62179: PUSH
62180: LD_INT 103
62182: PUSH
62183: LD_INT 104
62185: PUSH
62186: LD_INT 105
62188: PUSH
62189: LD_INT 106
62191: PUSH
62192: LD_INT 107
62194: PUSH
62195: LD_INT 108
62197: PUSH
62198: LD_INT 109
62200: PUSH
62201: LD_INT 110
62203: PUSH
62204: LD_INT 111
62206: PUSH
62207: LD_INT 112
62209: PUSH
62210: LD_INT 113
62212: PUSH
62213: LD_INT 114
62215: PUSH
62216: LD_INT 116
62218: PUSH
62219: LD_INT 117
62221: PUSH
62222: LD_INT 118
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: ST_TO_ADDR
62248: GO 63023
62250: LD_INT 16
62252: DOUBLE
62253: EQUAL
62254: IFTRUE 62258
62256: GO 62394
62258: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62259: LD_ADDR_VAR 0 2
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 4
62269: PUSH
62270: LD_INT 5
62272: PUSH
62273: LD_INT 7
62275: PUSH
62276: LD_INT 11
62278: PUSH
62279: LD_INT 12
62281: PUSH
62282: LD_INT 15
62284: PUSH
62285: LD_INT 16
62287: PUSH
62288: LD_INT 20
62290: PUSH
62291: LD_INT 21
62293: PUSH
62294: LD_INT 22
62296: PUSH
62297: LD_INT 23
62299: PUSH
62300: LD_INT 25
62302: PUSH
62303: LD_INT 26
62305: PUSH
62306: LD_INT 30
62308: PUSH
62309: LD_INT 31
62311: PUSH
62312: LD_INT 32
62314: PUSH
62315: LD_INT 33
62317: PUSH
62318: LD_INT 34
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 101
62344: PUSH
62345: LD_INT 102
62347: PUSH
62348: LD_INT 103
62350: PUSH
62351: LD_INT 106
62353: PUSH
62354: LD_INT 108
62356: PUSH
62357: LD_INT 112
62359: PUSH
62360: LD_INT 113
62362: PUSH
62363: LD_INT 114
62365: PUSH
62366: LD_INT 116
62368: PUSH
62369: LD_INT 117
62371: PUSH
62372: LD_INT 118
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: ST_TO_ADDR
62392: GO 63023
62394: LD_INT 17
62396: DOUBLE
62397: EQUAL
62398: IFTRUE 62402
62400: GO 62626
62402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62403: LD_ADDR_VAR 0 2
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 4
62419: PUSH
62420: LD_INT 5
62422: PUSH
62423: LD_INT 6
62425: PUSH
62426: LD_INT 7
62428: PUSH
62429: LD_INT 8
62431: PUSH
62432: LD_INT 9
62434: PUSH
62435: LD_INT 10
62437: PUSH
62438: LD_INT 11
62440: PUSH
62441: LD_INT 12
62443: PUSH
62444: LD_INT 13
62446: PUSH
62447: LD_INT 14
62449: PUSH
62450: LD_INT 15
62452: PUSH
62453: LD_INT 16
62455: PUSH
62456: LD_INT 17
62458: PUSH
62459: LD_INT 18
62461: PUSH
62462: LD_INT 19
62464: PUSH
62465: LD_INT 20
62467: PUSH
62468: LD_INT 21
62470: PUSH
62471: LD_INT 22
62473: PUSH
62474: LD_INT 23
62476: PUSH
62477: LD_INT 24
62479: PUSH
62480: LD_INT 25
62482: PUSH
62483: LD_INT 26
62485: PUSH
62486: LD_INT 27
62488: PUSH
62489: LD_INT 28
62491: PUSH
62492: LD_INT 29
62494: PUSH
62495: LD_INT 30
62497: PUSH
62498: LD_INT 31
62500: PUSH
62501: LD_INT 32
62503: PUSH
62504: LD_INT 33
62506: PUSH
62507: LD_INT 34
62509: PUSH
62510: LD_INT 36
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 101
62552: PUSH
62553: LD_INT 102
62555: PUSH
62556: LD_INT 103
62558: PUSH
62559: LD_INT 104
62561: PUSH
62562: LD_INT 105
62564: PUSH
62565: LD_INT 106
62567: PUSH
62568: LD_INT 107
62570: PUSH
62571: LD_INT 108
62573: PUSH
62574: LD_INT 109
62576: PUSH
62577: LD_INT 110
62579: PUSH
62580: LD_INT 111
62582: PUSH
62583: LD_INT 112
62585: PUSH
62586: LD_INT 113
62588: PUSH
62589: LD_INT 114
62591: PUSH
62592: LD_INT 116
62594: PUSH
62595: LD_INT 117
62597: PUSH
62598: LD_INT 118
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: ST_TO_ADDR
62624: GO 63023
62626: LD_INT 18
62628: DOUBLE
62629: EQUAL
62630: IFTRUE 62634
62632: GO 62782
62634: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62635: LD_ADDR_VAR 0 2
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 4
62645: PUSH
62646: LD_INT 5
62648: PUSH
62649: LD_INT 7
62651: PUSH
62652: LD_INT 11
62654: PUSH
62655: LD_INT 12
62657: PUSH
62658: LD_INT 15
62660: PUSH
62661: LD_INT 16
62663: PUSH
62664: LD_INT 20
62666: PUSH
62667: LD_INT 21
62669: PUSH
62670: LD_INT 22
62672: PUSH
62673: LD_INT 23
62675: PUSH
62676: LD_INT 25
62678: PUSH
62679: LD_INT 26
62681: PUSH
62682: LD_INT 30
62684: PUSH
62685: LD_INT 31
62687: PUSH
62688: LD_INT 32
62690: PUSH
62691: LD_INT 33
62693: PUSH
62694: LD_INT 34
62696: PUSH
62697: LD_INT 35
62699: PUSH
62700: LD_INT 36
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 101
62728: PUSH
62729: LD_INT 102
62731: PUSH
62732: LD_INT 103
62734: PUSH
62735: LD_INT 106
62737: PUSH
62738: LD_INT 108
62740: PUSH
62741: LD_INT 112
62743: PUSH
62744: LD_INT 113
62746: PUSH
62747: LD_INT 114
62749: PUSH
62750: LD_INT 115
62752: PUSH
62753: LD_INT 116
62755: PUSH
62756: LD_INT 117
62758: PUSH
62759: LD_INT 118
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: ST_TO_ADDR
62780: GO 63023
62782: LD_INT 19
62784: DOUBLE
62785: EQUAL
62786: IFTRUE 62790
62788: GO 63022
62790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62791: LD_ADDR_VAR 0 2
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 3
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 5
62810: PUSH
62811: LD_INT 6
62813: PUSH
62814: LD_INT 7
62816: PUSH
62817: LD_INT 8
62819: PUSH
62820: LD_INT 9
62822: PUSH
62823: LD_INT 10
62825: PUSH
62826: LD_INT 11
62828: PUSH
62829: LD_INT 12
62831: PUSH
62832: LD_INT 13
62834: PUSH
62835: LD_INT 14
62837: PUSH
62838: LD_INT 15
62840: PUSH
62841: LD_INT 16
62843: PUSH
62844: LD_INT 17
62846: PUSH
62847: LD_INT 18
62849: PUSH
62850: LD_INT 19
62852: PUSH
62853: LD_INT 20
62855: PUSH
62856: LD_INT 21
62858: PUSH
62859: LD_INT 22
62861: PUSH
62862: LD_INT 23
62864: PUSH
62865: LD_INT 24
62867: PUSH
62868: LD_INT 25
62870: PUSH
62871: LD_INT 26
62873: PUSH
62874: LD_INT 27
62876: PUSH
62877: LD_INT 28
62879: PUSH
62880: LD_INT 29
62882: PUSH
62883: LD_INT 30
62885: PUSH
62886: LD_INT 31
62888: PUSH
62889: LD_INT 32
62891: PUSH
62892: LD_INT 33
62894: PUSH
62895: LD_INT 34
62897: PUSH
62898: LD_INT 35
62900: PUSH
62901: LD_INT 36
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 101
62944: PUSH
62945: LD_INT 102
62947: PUSH
62948: LD_INT 103
62950: PUSH
62951: LD_INT 104
62953: PUSH
62954: LD_INT 105
62956: PUSH
62957: LD_INT 106
62959: PUSH
62960: LD_INT 107
62962: PUSH
62963: LD_INT 108
62965: PUSH
62966: LD_INT 109
62968: PUSH
62969: LD_INT 110
62971: PUSH
62972: LD_INT 111
62974: PUSH
62975: LD_INT 112
62977: PUSH
62978: LD_INT 113
62980: PUSH
62981: LD_INT 114
62983: PUSH
62984: LD_INT 115
62986: PUSH
62987: LD_INT 116
62989: PUSH
62990: LD_INT 117
62992: PUSH
62993: LD_INT 118
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: ST_TO_ADDR
63020: GO 63023
63022: POP
// end else
63023: GO 63254
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63025: LD_ADDR_VAR 0 2
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: LD_INT 4
63041: PUSH
63042: LD_INT 5
63044: PUSH
63045: LD_INT 6
63047: PUSH
63048: LD_INT 7
63050: PUSH
63051: LD_INT 8
63053: PUSH
63054: LD_INT 9
63056: PUSH
63057: LD_INT 10
63059: PUSH
63060: LD_INT 11
63062: PUSH
63063: LD_INT 12
63065: PUSH
63066: LD_INT 13
63068: PUSH
63069: LD_INT 14
63071: PUSH
63072: LD_INT 15
63074: PUSH
63075: LD_INT 16
63077: PUSH
63078: LD_INT 17
63080: PUSH
63081: LD_INT 18
63083: PUSH
63084: LD_INT 19
63086: PUSH
63087: LD_INT 20
63089: PUSH
63090: LD_INT 21
63092: PUSH
63093: LD_INT 22
63095: PUSH
63096: LD_INT 23
63098: PUSH
63099: LD_INT 24
63101: PUSH
63102: LD_INT 25
63104: PUSH
63105: LD_INT 26
63107: PUSH
63108: LD_INT 27
63110: PUSH
63111: LD_INT 28
63113: PUSH
63114: LD_INT 29
63116: PUSH
63117: LD_INT 30
63119: PUSH
63120: LD_INT 31
63122: PUSH
63123: LD_INT 32
63125: PUSH
63126: LD_INT 33
63128: PUSH
63129: LD_INT 34
63131: PUSH
63132: LD_INT 35
63134: PUSH
63135: LD_INT 36
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 101
63178: PUSH
63179: LD_INT 102
63181: PUSH
63182: LD_INT 103
63184: PUSH
63185: LD_INT 104
63187: PUSH
63188: LD_INT 105
63190: PUSH
63191: LD_INT 106
63193: PUSH
63194: LD_INT 107
63196: PUSH
63197: LD_INT 108
63199: PUSH
63200: LD_INT 109
63202: PUSH
63203: LD_INT 110
63205: PUSH
63206: LD_INT 111
63208: PUSH
63209: LD_INT 112
63211: PUSH
63212: LD_INT 113
63214: PUSH
63215: LD_INT 114
63217: PUSH
63218: LD_INT 115
63220: PUSH
63221: LD_INT 116
63223: PUSH
63224: LD_INT 117
63226: PUSH
63227: LD_INT 118
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: ST_TO_ADDR
// if result then
63254: LD_VAR 0 2
63258: IFFALSE 64044
// begin normal :=  ;
63260: LD_ADDR_VAR 0 5
63264: PUSH
63265: LD_STRING 
63267: ST_TO_ADDR
// hardcore :=  ;
63268: LD_ADDR_VAR 0 6
63272: PUSH
63273: LD_STRING 
63275: ST_TO_ADDR
// active :=  ;
63276: LD_ADDR_VAR 0 7
63280: PUSH
63281: LD_STRING 
63283: ST_TO_ADDR
// for i = 1 to normalCounter do
63284: LD_ADDR_VAR 0 8
63288: PUSH
63289: DOUBLE
63290: LD_INT 1
63292: DEC
63293: ST_TO_ADDR
63294: LD_EXP 50
63298: PUSH
63299: FOR_TO
63300: IFFALSE 63401
// begin tmp := 0 ;
63302: LD_ADDR_VAR 0 3
63306: PUSH
63307: LD_STRING 0
63309: ST_TO_ADDR
// if result [ 1 ] then
63310: LD_VAR 0 2
63314: PUSH
63315: LD_INT 1
63317: ARRAY
63318: IFFALSE 63383
// if result [ 1 ] [ 1 ] = i then
63320: LD_VAR 0 2
63324: PUSH
63325: LD_INT 1
63327: ARRAY
63328: PUSH
63329: LD_INT 1
63331: ARRAY
63332: PUSH
63333: LD_VAR 0 8
63337: EQUAL
63338: IFFALSE 63383
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63340: LD_ADDR_VAR 0 2
63344: PUSH
63345: LD_VAR 0 2
63349: PPUSH
63350: LD_INT 1
63352: PPUSH
63353: LD_VAR 0 2
63357: PUSH
63358: LD_INT 1
63360: ARRAY
63361: PPUSH
63362: LD_INT 1
63364: PPUSH
63365: CALL_OW 3
63369: PPUSH
63370: CALL_OW 1
63374: ST_TO_ADDR
// tmp := 1 ;
63375: LD_ADDR_VAR 0 3
63379: PUSH
63380: LD_STRING 1
63382: ST_TO_ADDR
// end ; normal := normal & tmp ;
63383: LD_ADDR_VAR 0 5
63387: PUSH
63388: LD_VAR 0 5
63392: PUSH
63393: LD_VAR 0 3
63397: STR
63398: ST_TO_ADDR
// end ;
63399: GO 63299
63401: POP
63402: POP
// for i = 1 to hardcoreCounter do
63403: LD_ADDR_VAR 0 8
63407: PUSH
63408: DOUBLE
63409: LD_INT 1
63411: DEC
63412: ST_TO_ADDR
63413: LD_EXP 51
63417: PUSH
63418: FOR_TO
63419: IFFALSE 63524
// begin tmp := 0 ;
63421: LD_ADDR_VAR 0 3
63425: PUSH
63426: LD_STRING 0
63428: ST_TO_ADDR
// if result [ 2 ] then
63429: LD_VAR 0 2
63433: PUSH
63434: LD_INT 2
63436: ARRAY
63437: IFFALSE 63506
// if result [ 2 ] [ 1 ] = 100 + i then
63439: LD_VAR 0 2
63443: PUSH
63444: LD_INT 2
63446: ARRAY
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PUSH
63452: LD_INT 100
63454: PUSH
63455: LD_VAR 0 8
63459: PLUS
63460: EQUAL
63461: IFFALSE 63506
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63463: LD_ADDR_VAR 0 2
63467: PUSH
63468: LD_VAR 0 2
63472: PPUSH
63473: LD_INT 2
63475: PPUSH
63476: LD_VAR 0 2
63480: PUSH
63481: LD_INT 2
63483: ARRAY
63484: PPUSH
63485: LD_INT 1
63487: PPUSH
63488: CALL_OW 3
63492: PPUSH
63493: CALL_OW 1
63497: ST_TO_ADDR
// tmp := 1 ;
63498: LD_ADDR_VAR 0 3
63502: PUSH
63503: LD_STRING 1
63505: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63506: LD_ADDR_VAR 0 6
63510: PUSH
63511: LD_VAR 0 6
63515: PUSH
63516: LD_VAR 0 3
63520: STR
63521: ST_TO_ADDR
// end ;
63522: GO 63418
63524: POP
63525: POP
// if isGameLoad then
63526: LD_VAR 0 1
63530: IFFALSE 64005
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63532: LD_ADDR_VAR 0 4
63536: PUSH
63537: LD_EXP 54
63541: PUSH
63542: LD_EXP 53
63546: PUSH
63547: LD_EXP 55
63551: PUSH
63552: LD_EXP 52
63556: PUSH
63557: LD_EXP 56
63561: PUSH
63562: LD_EXP 57
63566: PUSH
63567: LD_EXP 58
63571: PUSH
63572: LD_EXP 59
63576: PUSH
63577: LD_EXP 60
63581: PUSH
63582: LD_EXP 61
63586: PUSH
63587: LD_EXP 62
63591: PUSH
63592: LD_EXP 63
63596: PUSH
63597: LD_EXP 64
63601: PUSH
63602: LD_EXP 65
63606: PUSH
63607: LD_EXP 73
63611: PUSH
63612: LD_EXP 74
63616: PUSH
63617: LD_EXP 75
63621: PUSH
63622: LD_EXP 76
63626: PUSH
63627: LD_EXP 78
63631: PUSH
63632: LD_EXP 79
63636: PUSH
63637: LD_EXP 80
63641: PUSH
63642: LD_EXP 83
63646: PUSH
63647: LD_EXP 85
63651: PUSH
63652: LD_EXP 86
63656: PUSH
63657: LD_EXP 87
63661: PUSH
63662: LD_EXP 89
63666: PUSH
63667: LD_EXP 90
63671: PUSH
63672: LD_EXP 93
63676: PUSH
63677: LD_EXP 94
63681: PUSH
63682: LD_EXP 95
63686: PUSH
63687: LD_EXP 96
63691: PUSH
63692: LD_EXP 97
63696: PUSH
63697: LD_EXP 98
63701: PUSH
63702: LD_EXP 99
63706: PUSH
63707: LD_EXP 100
63711: PUSH
63712: LD_EXP 101
63716: PUSH
63717: LD_EXP 66
63721: PUSH
63722: LD_EXP 67
63726: PUSH
63727: LD_EXP 70
63731: PUSH
63732: LD_EXP 71
63736: PUSH
63737: LD_EXP 72
63741: PUSH
63742: LD_EXP 68
63746: PUSH
63747: LD_EXP 69
63751: PUSH
63752: LD_EXP 77
63756: PUSH
63757: LD_EXP 81
63761: PUSH
63762: LD_EXP 82
63766: PUSH
63767: LD_EXP 84
63771: PUSH
63772: LD_EXP 88
63776: PUSH
63777: LD_EXP 91
63781: PUSH
63782: LD_EXP 92
63786: PUSH
63787: LD_EXP 102
63791: PUSH
63792: LD_EXP 103
63796: PUSH
63797: LD_EXP 104
63801: PUSH
63802: LD_EXP 105
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: ST_TO_ADDR
// tmp :=  ;
63863: LD_ADDR_VAR 0 3
63867: PUSH
63868: LD_STRING 
63870: ST_TO_ADDR
// for i = 1 to normalCounter do
63871: LD_ADDR_VAR 0 8
63875: PUSH
63876: DOUBLE
63877: LD_INT 1
63879: DEC
63880: ST_TO_ADDR
63881: LD_EXP 50
63885: PUSH
63886: FOR_TO
63887: IFFALSE 63923
// begin if flags [ i ] then
63889: LD_VAR 0 4
63893: PUSH
63894: LD_VAR 0 8
63898: ARRAY
63899: IFFALSE 63921
// tmp := tmp & i & ; ;
63901: LD_ADDR_VAR 0 3
63905: PUSH
63906: LD_VAR 0 3
63910: PUSH
63911: LD_VAR 0 8
63915: STR
63916: PUSH
63917: LD_STRING ;
63919: STR
63920: ST_TO_ADDR
// end ;
63921: GO 63886
63923: POP
63924: POP
// for i = 1 to hardcoreCounter do
63925: LD_ADDR_VAR 0 8
63929: PUSH
63930: DOUBLE
63931: LD_INT 1
63933: DEC
63934: ST_TO_ADDR
63935: LD_EXP 51
63939: PUSH
63940: FOR_TO
63941: IFFALSE 63987
// begin if flags [ normalCounter + i ] then
63943: LD_VAR 0 4
63947: PUSH
63948: LD_EXP 50
63952: PUSH
63953: LD_VAR 0 8
63957: PLUS
63958: ARRAY
63959: IFFALSE 63985
// tmp := tmp & ( 100 + i ) & ; ;
63961: LD_ADDR_VAR 0 3
63965: PUSH
63966: LD_VAR 0 3
63970: PUSH
63971: LD_INT 100
63973: PUSH
63974: LD_VAR 0 8
63978: PLUS
63979: STR
63980: PUSH
63981: LD_STRING ;
63983: STR
63984: ST_TO_ADDR
// end ;
63985: GO 63940
63987: POP
63988: POP
// if tmp then
63989: LD_VAR 0 3
63993: IFFALSE 64005
// active := tmp ;
63995: LD_ADDR_VAR 0 7
63999: PUSH
64000: LD_VAR 0 3
64004: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64005: LD_STRING getStreamItemsFromMission("
64007: PUSH
64008: LD_VAR 0 5
64012: STR
64013: PUSH
64014: LD_STRING ","
64016: STR
64017: PUSH
64018: LD_VAR 0 6
64022: STR
64023: PUSH
64024: LD_STRING ","
64026: STR
64027: PUSH
64028: LD_VAR 0 7
64032: STR
64033: PUSH
64034: LD_STRING ")
64036: STR
64037: PPUSH
64038: CALL_OW 559
// end else
64042: GO 64051
// ToLua ( getStreamItemsFromMission("","","") ) ;
64044: LD_STRING getStreamItemsFromMission("","","")
64046: PPUSH
64047: CALL_OW 559
// end ;
64051: LD_VAR 0 2
64055: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64056: LD_EXP 49
64060: PUSH
64061: LD_EXP 54
64065: AND
64066: IFFALSE 64190
64068: GO 64070
64070: DISABLE
64071: LD_INT 0
64073: PPUSH
64074: PPUSH
// begin enable ;
64075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64076: LD_ADDR_VAR 0 2
64080: PUSH
64081: LD_INT 22
64083: PUSH
64084: LD_OWVAR 2
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: LD_INT 34
64098: PUSH
64099: LD_INT 7
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 34
64108: PUSH
64109: LD_INT 45
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 34
64118: PUSH
64119: LD_INT 28
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 34
64128: PUSH
64129: LD_INT 47
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PPUSH
64147: CALL_OW 69
64151: ST_TO_ADDR
// if not tmp then
64152: LD_VAR 0 2
64156: NOT
64157: IFFALSE 64161
// exit ;
64159: GO 64190
// for i in tmp do
64161: LD_ADDR_VAR 0 1
64165: PUSH
64166: LD_VAR 0 2
64170: PUSH
64171: FOR_IN
64172: IFFALSE 64188
// begin SetLives ( i , 0 ) ;
64174: LD_VAR 0 1
64178: PPUSH
64179: LD_INT 0
64181: PPUSH
64182: CALL_OW 234
// end ;
64186: GO 64171
64188: POP
64189: POP
// end ;
64190: PPOPN 2
64192: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64193: LD_EXP 49
64197: PUSH
64198: LD_EXP 55
64202: AND
64203: IFFALSE 64287
64205: GO 64207
64207: DISABLE
64208: LD_INT 0
64210: PPUSH
64211: PPUSH
// begin enable ;
64212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64213: LD_ADDR_VAR 0 2
64217: PUSH
64218: LD_INT 22
64220: PUSH
64221: LD_OWVAR 2
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 32
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PPUSH
64244: CALL_OW 69
64248: ST_TO_ADDR
// if not tmp then
64249: LD_VAR 0 2
64253: NOT
64254: IFFALSE 64258
// exit ;
64256: GO 64287
// for i in tmp do
64258: LD_ADDR_VAR 0 1
64262: PUSH
64263: LD_VAR 0 2
64267: PUSH
64268: FOR_IN
64269: IFFALSE 64285
// begin SetLives ( i , 0 ) ;
64271: LD_VAR 0 1
64275: PPUSH
64276: LD_INT 0
64278: PPUSH
64279: CALL_OW 234
// end ;
64283: GO 64268
64285: POP
64286: POP
// end ;
64287: PPOPN 2
64289: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64290: LD_EXP 49
64294: PUSH
64295: LD_EXP 52
64299: AND
64300: IFFALSE 64393
64302: GO 64304
64304: DISABLE
64305: LD_INT 0
64307: PPUSH
// begin enable ;
64308: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64309: LD_ADDR_VAR 0 1
64313: PUSH
64314: LD_INT 22
64316: PUSH
64317: LD_OWVAR 2
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 25
64331: PUSH
64332: LD_INT 5
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 25
64341: PUSH
64342: LD_INT 9
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 25
64351: PUSH
64352: LD_INT 8
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PPUSH
64369: CALL_OW 69
64373: PUSH
64374: FOR_IN
64375: IFFALSE 64391
// begin SetClass ( i , 1 ) ;
64377: LD_VAR 0 1
64381: PPUSH
64382: LD_INT 1
64384: PPUSH
64385: CALL_OW 336
// end ;
64389: GO 64374
64391: POP
64392: POP
// end ;
64393: PPOPN 1
64395: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64396: LD_EXP 49
64400: PUSH
64401: LD_EXP 53
64405: AND
64406: PUSH
64407: LD_OWVAR 65
64411: PUSH
64412: LD_INT 7
64414: LESS
64415: AND
64416: IFFALSE 64430
64418: GO 64420
64420: DISABLE
// begin enable ;
64421: ENABLE
// game_speed := 7 ;
64422: LD_ADDR_OWVAR 65
64426: PUSH
64427: LD_INT 7
64429: ST_TO_ADDR
// end ;
64430: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64431: LD_EXP 49
64435: PUSH
64436: LD_EXP 56
64440: AND
64441: IFFALSE 64643
64443: GO 64445
64445: DISABLE
64446: LD_INT 0
64448: PPUSH
64449: PPUSH
64450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64451: LD_ADDR_VAR 0 3
64455: PUSH
64456: LD_INT 81
64458: PUSH
64459: LD_OWVAR 2
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 21
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PPUSH
64482: CALL_OW 69
64486: ST_TO_ADDR
// if not tmp then
64487: LD_VAR 0 3
64491: NOT
64492: IFFALSE 64496
// exit ;
64494: GO 64643
// if tmp > 5 then
64496: LD_VAR 0 3
64500: PUSH
64501: LD_INT 5
64503: GREATER
64504: IFFALSE 64516
// k := 5 else
64506: LD_ADDR_VAR 0 2
64510: PUSH
64511: LD_INT 5
64513: ST_TO_ADDR
64514: GO 64526
// k := tmp ;
64516: LD_ADDR_VAR 0 2
64520: PUSH
64521: LD_VAR 0 3
64525: ST_TO_ADDR
// for i := 1 to k do
64526: LD_ADDR_VAR 0 1
64530: PUSH
64531: DOUBLE
64532: LD_INT 1
64534: DEC
64535: ST_TO_ADDR
64536: LD_VAR 0 2
64540: PUSH
64541: FOR_TO
64542: IFFALSE 64641
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64544: LD_VAR 0 3
64548: PUSH
64549: LD_VAR 0 1
64553: ARRAY
64554: PPUSH
64555: LD_VAR 0 1
64559: PUSH
64560: LD_INT 4
64562: MOD
64563: PUSH
64564: LD_INT 1
64566: PLUS
64567: PPUSH
64568: CALL_OW 259
64572: PUSH
64573: LD_INT 10
64575: LESS
64576: IFFALSE 64639
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64578: LD_VAR 0 3
64582: PUSH
64583: LD_VAR 0 1
64587: ARRAY
64588: PPUSH
64589: LD_VAR 0 1
64593: PUSH
64594: LD_INT 4
64596: MOD
64597: PUSH
64598: LD_INT 1
64600: PLUS
64601: PPUSH
64602: LD_VAR 0 3
64606: PUSH
64607: LD_VAR 0 1
64611: ARRAY
64612: PPUSH
64613: LD_VAR 0 1
64617: PUSH
64618: LD_INT 4
64620: MOD
64621: PUSH
64622: LD_INT 1
64624: PLUS
64625: PPUSH
64626: CALL_OW 259
64630: PUSH
64631: LD_INT 1
64633: PLUS
64634: PPUSH
64635: CALL_OW 237
64639: GO 64541
64641: POP
64642: POP
// end ;
64643: PPOPN 3
64645: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64646: LD_EXP 49
64650: PUSH
64651: LD_EXP 57
64655: AND
64656: IFFALSE 64676
64658: GO 64660
64660: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64661: LD_INT 4
64663: PPUSH
64664: LD_OWVAR 2
64668: PPUSH
64669: LD_INT 0
64671: PPUSH
64672: CALL_OW 324
64676: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64677: LD_EXP 49
64681: PUSH
64682: LD_EXP 86
64686: AND
64687: IFFALSE 64707
64689: GO 64691
64691: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64692: LD_INT 19
64694: PPUSH
64695: LD_OWVAR 2
64699: PPUSH
64700: LD_INT 0
64702: PPUSH
64703: CALL_OW 324
64707: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64708: LD_EXP 49
64712: PUSH
64713: LD_EXP 58
64717: AND
64718: IFFALSE 64820
64720: GO 64722
64722: DISABLE
64723: LD_INT 0
64725: PPUSH
64726: PPUSH
// begin enable ;
64727: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64728: LD_ADDR_VAR 0 2
64732: PUSH
64733: LD_INT 22
64735: PUSH
64736: LD_OWVAR 2
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: LD_INT 34
64750: PUSH
64751: LD_INT 11
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 34
64760: PUSH
64761: LD_INT 30
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PPUSH
64777: CALL_OW 69
64781: ST_TO_ADDR
// if not tmp then
64782: LD_VAR 0 2
64786: NOT
64787: IFFALSE 64791
// exit ;
64789: GO 64820
// for i in tmp do
64791: LD_ADDR_VAR 0 1
64795: PUSH
64796: LD_VAR 0 2
64800: PUSH
64801: FOR_IN
64802: IFFALSE 64818
// begin SetLives ( i , 0 ) ;
64804: LD_VAR 0 1
64808: PPUSH
64809: LD_INT 0
64811: PPUSH
64812: CALL_OW 234
// end ;
64816: GO 64801
64818: POP
64819: POP
// end ;
64820: PPOPN 2
64822: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64823: LD_EXP 49
64827: PUSH
64828: LD_EXP 59
64832: AND
64833: IFFALSE 64853
64835: GO 64837
64837: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64838: LD_INT 32
64840: PPUSH
64841: LD_OWVAR 2
64845: PPUSH
64846: LD_INT 0
64848: PPUSH
64849: CALL_OW 324
64853: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64854: LD_EXP 49
64858: PUSH
64859: LD_EXP 60
64863: AND
64864: IFFALSE 65045
64866: GO 64868
64868: DISABLE
64869: LD_INT 0
64871: PPUSH
64872: PPUSH
64873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64874: LD_ADDR_VAR 0 2
64878: PUSH
64879: LD_INT 22
64881: PUSH
64882: LD_OWVAR 2
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 33
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PPUSH
64905: CALL_OW 69
64909: ST_TO_ADDR
// if not tmp then
64910: LD_VAR 0 2
64914: NOT
64915: IFFALSE 64919
// exit ;
64917: GO 65045
// side := 0 ;
64919: LD_ADDR_VAR 0 3
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
// for i := 1 to 8 do
64927: LD_ADDR_VAR 0 1
64931: PUSH
64932: DOUBLE
64933: LD_INT 1
64935: DEC
64936: ST_TO_ADDR
64937: LD_INT 8
64939: PUSH
64940: FOR_TO
64941: IFFALSE 64989
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64943: LD_OWVAR 2
64947: PUSH
64948: LD_VAR 0 1
64952: NONEQUAL
64953: PUSH
64954: LD_OWVAR 2
64958: PPUSH
64959: LD_VAR 0 1
64963: PPUSH
64964: CALL_OW 81
64968: PUSH
64969: LD_INT 2
64971: EQUAL
64972: AND
64973: IFFALSE 64987
// begin side := i ;
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: LD_VAR 0 1
64984: ST_TO_ADDR
// break ;
64985: GO 64989
// end ;
64987: GO 64940
64989: POP
64990: POP
// if not side then
64991: LD_VAR 0 3
64995: NOT
64996: IFFALSE 65000
// exit ;
64998: GO 65045
// for i := 1 to tmp do
65000: LD_ADDR_VAR 0 1
65004: PUSH
65005: DOUBLE
65006: LD_INT 1
65008: DEC
65009: ST_TO_ADDR
65010: LD_VAR 0 2
65014: PUSH
65015: FOR_TO
65016: IFFALSE 65043
// if Prob ( 60 ) then
65018: LD_INT 60
65020: PPUSH
65021: CALL_OW 13
65025: IFFALSE 65041
// SetSide ( i , side ) ;
65027: LD_VAR 0 1
65031: PPUSH
65032: LD_VAR 0 3
65036: PPUSH
65037: CALL_OW 235
65041: GO 65015
65043: POP
65044: POP
// end ;
65045: PPOPN 3
65047: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65048: LD_EXP 49
65052: PUSH
65053: LD_EXP 62
65057: AND
65058: IFFALSE 65177
65060: GO 65062
65062: DISABLE
65063: LD_INT 0
65065: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65066: LD_ADDR_VAR 0 1
65070: PUSH
65071: LD_INT 22
65073: PUSH
65074: LD_OWVAR 2
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 21
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 3
65095: PUSH
65096: LD_INT 23
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: PPUSH
65115: CALL_OW 69
65119: PUSH
65120: FOR_IN
65121: IFFALSE 65175
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65123: LD_VAR 0 1
65127: PPUSH
65128: CALL_OW 257
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: LD_INT 4
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: IN
65151: IFFALSE 65173
// SetClass ( un , rand ( 1 , 4 ) ) ;
65153: LD_VAR 0 1
65157: PPUSH
65158: LD_INT 1
65160: PPUSH
65161: LD_INT 4
65163: PPUSH
65164: CALL_OW 12
65168: PPUSH
65169: CALL_OW 336
65173: GO 65120
65175: POP
65176: POP
// end ;
65177: PPOPN 1
65179: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65180: LD_EXP 49
65184: PUSH
65185: LD_EXP 61
65189: AND
65190: IFFALSE 65269
65192: GO 65194
65194: DISABLE
65195: LD_INT 0
65197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65198: LD_ADDR_VAR 0 1
65202: PUSH
65203: LD_INT 22
65205: PUSH
65206: LD_OWVAR 2
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 21
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PPUSH
65229: CALL_OW 69
65233: ST_TO_ADDR
// if not tmp then
65234: LD_VAR 0 1
65238: NOT
65239: IFFALSE 65243
// exit ;
65241: GO 65269
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65243: LD_VAR 0 1
65247: PUSH
65248: LD_INT 1
65250: PPUSH
65251: LD_VAR 0 1
65255: PPUSH
65256: CALL_OW 12
65260: ARRAY
65261: PPUSH
65262: LD_INT 100
65264: PPUSH
65265: CALL_OW 234
// end ;
65269: PPOPN 1
65271: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65272: LD_EXP 49
65276: PUSH
65277: LD_EXP 63
65281: AND
65282: IFFALSE 65380
65284: GO 65286
65286: DISABLE
65287: LD_INT 0
65289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65290: LD_ADDR_VAR 0 1
65294: PUSH
65295: LD_INT 22
65297: PUSH
65298: LD_OWVAR 2
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 21
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PPUSH
65321: CALL_OW 69
65325: ST_TO_ADDR
// if not tmp then
65326: LD_VAR 0 1
65330: NOT
65331: IFFALSE 65335
// exit ;
65333: GO 65380
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65335: LD_VAR 0 1
65339: PUSH
65340: LD_INT 1
65342: PPUSH
65343: LD_VAR 0 1
65347: PPUSH
65348: CALL_OW 12
65352: ARRAY
65353: PPUSH
65354: LD_INT 1
65356: PPUSH
65357: LD_INT 4
65359: PPUSH
65360: CALL_OW 12
65364: PPUSH
65365: LD_INT 3000
65367: PPUSH
65368: LD_INT 9000
65370: PPUSH
65371: CALL_OW 12
65375: PPUSH
65376: CALL_OW 492
// end ;
65380: PPOPN 1
65382: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65383: LD_EXP 49
65387: PUSH
65388: LD_EXP 64
65392: AND
65393: IFFALSE 65413
65395: GO 65397
65397: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65398: LD_INT 1
65400: PPUSH
65401: LD_OWVAR 2
65405: PPUSH
65406: LD_INT 0
65408: PPUSH
65409: CALL_OW 324
65413: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65414: LD_EXP 49
65418: PUSH
65419: LD_EXP 65
65423: AND
65424: IFFALSE 65507
65426: GO 65428
65428: DISABLE
65429: LD_INT 0
65431: PPUSH
65432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65433: LD_ADDR_VAR 0 2
65437: PUSH
65438: LD_INT 22
65440: PUSH
65441: LD_OWVAR 2
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 21
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PPUSH
65464: CALL_OW 69
65468: ST_TO_ADDR
// if not tmp then
65469: LD_VAR 0 2
65473: NOT
65474: IFFALSE 65478
// exit ;
65476: GO 65507
// for i in tmp do
65478: LD_ADDR_VAR 0 1
65482: PUSH
65483: LD_VAR 0 2
65487: PUSH
65488: FOR_IN
65489: IFFALSE 65505
// SetBLevel ( i , 10 ) ;
65491: LD_VAR 0 1
65495: PPUSH
65496: LD_INT 10
65498: PPUSH
65499: CALL_OW 241
65503: GO 65488
65505: POP
65506: POP
// end ;
65507: PPOPN 2
65509: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65510: LD_EXP 49
65514: PUSH
65515: LD_EXP 66
65519: AND
65520: IFFALSE 65631
65522: GO 65524
65524: DISABLE
65525: LD_INT 0
65527: PPUSH
65528: PPUSH
65529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65530: LD_ADDR_VAR 0 3
65534: PUSH
65535: LD_INT 22
65537: PUSH
65538: LD_OWVAR 2
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 25
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PPUSH
65561: CALL_OW 69
65565: ST_TO_ADDR
// if not tmp then
65566: LD_VAR 0 3
65570: NOT
65571: IFFALSE 65575
// exit ;
65573: GO 65631
// un := tmp [ rand ( 1 , tmp ) ] ;
65575: LD_ADDR_VAR 0 2
65579: PUSH
65580: LD_VAR 0 3
65584: PUSH
65585: LD_INT 1
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: CALL_OW 12
65597: ARRAY
65598: ST_TO_ADDR
// if Crawls ( un ) then
65599: LD_VAR 0 2
65603: PPUSH
65604: CALL_OW 318
65608: IFFALSE 65619
// ComWalk ( un ) ;
65610: LD_VAR 0 2
65614: PPUSH
65615: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65619: LD_VAR 0 2
65623: PPUSH
65624: LD_INT 5
65626: PPUSH
65627: CALL_OW 336
// end ;
65631: PPOPN 3
65633: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65634: LD_EXP 49
65638: PUSH
65639: LD_EXP 67
65643: AND
65644: PUSH
65645: LD_OWVAR 67
65649: PUSH
65650: LD_INT 4
65652: LESS
65653: AND
65654: IFFALSE 65673
65656: GO 65658
65658: DISABLE
// begin Difficulty := Difficulty + 1 ;
65659: LD_ADDR_OWVAR 67
65663: PUSH
65664: LD_OWVAR 67
65668: PUSH
65669: LD_INT 1
65671: PLUS
65672: ST_TO_ADDR
// end ;
65673: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65674: LD_EXP 49
65678: PUSH
65679: LD_EXP 68
65683: AND
65684: IFFALSE 65787
65686: GO 65688
65688: DISABLE
65689: LD_INT 0
65691: PPUSH
// begin for i := 1 to 5 do
65692: LD_ADDR_VAR 0 1
65696: PUSH
65697: DOUBLE
65698: LD_INT 1
65700: DEC
65701: ST_TO_ADDR
65702: LD_INT 5
65704: PUSH
65705: FOR_TO
65706: IFFALSE 65785
// begin uc_nation := nation_nature ;
65708: LD_ADDR_OWVAR 21
65712: PUSH
65713: LD_INT 0
65715: ST_TO_ADDR
// uc_side := 0 ;
65716: LD_ADDR_OWVAR 20
65720: PUSH
65721: LD_INT 0
65723: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65724: LD_ADDR_OWVAR 29
65728: PUSH
65729: LD_INT 12
65731: PUSH
65732: LD_INT 12
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: ST_TO_ADDR
// hc_agressivity := 20 ;
65739: LD_ADDR_OWVAR 35
65743: PUSH
65744: LD_INT 20
65746: ST_TO_ADDR
// hc_class := class_tiger ;
65747: LD_ADDR_OWVAR 28
65751: PUSH
65752: LD_INT 14
65754: ST_TO_ADDR
// hc_gallery :=  ;
65755: LD_ADDR_OWVAR 33
65759: PUSH
65760: LD_STRING 
65762: ST_TO_ADDR
// hc_name :=  ;
65763: LD_ADDR_OWVAR 26
65767: PUSH
65768: LD_STRING 
65770: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65771: CALL_OW 44
65775: PPUSH
65776: LD_INT 0
65778: PPUSH
65779: CALL_OW 51
// end ;
65783: GO 65705
65785: POP
65786: POP
// end ;
65787: PPOPN 1
65789: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65790: LD_EXP 49
65794: PUSH
65795: LD_EXP 69
65799: AND
65800: IFFALSE 65809
65802: GO 65804
65804: DISABLE
// StreamSibBomb ;
65805: CALL 65810 0 0
65809: END
// export function StreamSibBomb ; var i , x , y ; begin
65810: LD_INT 0
65812: PPUSH
65813: PPUSH
65814: PPUSH
65815: PPUSH
// result := false ;
65816: LD_ADDR_VAR 0 1
65820: PUSH
65821: LD_INT 0
65823: ST_TO_ADDR
// for i := 1 to 16 do
65824: LD_ADDR_VAR 0 2
65828: PUSH
65829: DOUBLE
65830: LD_INT 1
65832: DEC
65833: ST_TO_ADDR
65834: LD_INT 16
65836: PUSH
65837: FOR_TO
65838: IFFALSE 66037
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65840: LD_ADDR_VAR 0 3
65844: PUSH
65845: LD_INT 10
65847: PUSH
65848: LD_INT 20
65850: PUSH
65851: LD_INT 30
65853: PUSH
65854: LD_INT 40
65856: PUSH
65857: LD_INT 50
65859: PUSH
65860: LD_INT 60
65862: PUSH
65863: LD_INT 70
65865: PUSH
65866: LD_INT 80
65868: PUSH
65869: LD_INT 90
65871: PUSH
65872: LD_INT 100
65874: PUSH
65875: LD_INT 110
65877: PUSH
65878: LD_INT 120
65880: PUSH
65881: LD_INT 130
65883: PUSH
65884: LD_INT 140
65886: PUSH
65887: LD_INT 150
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PPUSH
65910: LD_INT 15
65912: PPUSH
65913: CALL_OW 12
65917: ARRAY
65918: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65919: LD_ADDR_VAR 0 4
65923: PUSH
65924: LD_INT 10
65926: PUSH
65927: LD_INT 20
65929: PUSH
65930: LD_INT 30
65932: PUSH
65933: LD_INT 40
65935: PUSH
65936: LD_INT 50
65938: PUSH
65939: LD_INT 60
65941: PUSH
65942: LD_INT 70
65944: PUSH
65945: LD_INT 80
65947: PUSH
65948: LD_INT 90
65950: PUSH
65951: LD_INT 100
65953: PUSH
65954: LD_INT 110
65956: PUSH
65957: LD_INT 120
65959: PUSH
65960: LD_INT 130
65962: PUSH
65963: LD_INT 140
65965: PUSH
65966: LD_INT 150
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: PPUSH
65989: LD_INT 15
65991: PPUSH
65992: CALL_OW 12
65996: ARRAY
65997: ST_TO_ADDR
// if ValidHex ( x , y ) then
65998: LD_VAR 0 3
66002: PPUSH
66003: LD_VAR 0 4
66007: PPUSH
66008: CALL_OW 488
66012: IFFALSE 66035
// begin result := [ x , y ] ;
66014: LD_ADDR_VAR 0 1
66018: PUSH
66019: LD_VAR 0 3
66023: PUSH
66024: LD_VAR 0 4
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// break ;
66033: GO 66037
// end ; end ;
66035: GO 65837
66037: POP
66038: POP
// if result then
66039: LD_VAR 0 1
66043: IFFALSE 66103
// begin ToLua ( playSibBomb() ) ;
66045: LD_STRING playSibBomb()
66047: PPUSH
66048: CALL_OW 559
// wait ( 0 0$14 ) ;
66052: LD_INT 490
66054: PPUSH
66055: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66059: LD_VAR 0 1
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: PPUSH
66068: LD_VAR 0 1
66072: PUSH
66073: LD_INT 2
66075: ARRAY
66076: PPUSH
66077: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66081: LD_VAR 0 1
66085: PUSH
66086: LD_INT 1
66088: ARRAY
66089: PPUSH
66090: LD_VAR 0 1
66094: PUSH
66095: LD_INT 2
66097: ARRAY
66098: PPUSH
66099: CALL_OW 429
// end ; end ;
66103: LD_VAR 0 1
66107: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66108: LD_EXP 49
66112: PUSH
66113: LD_EXP 71
66117: AND
66118: IFFALSE 66130
66120: GO 66122
66122: DISABLE
// YouLost (  ) ;
66123: LD_STRING 
66125: PPUSH
66126: CALL_OW 104
66130: END
// every 0 0$1 trigger StreamModeActive and sFog do
66131: LD_EXP 49
66135: PUSH
66136: LD_EXP 70
66140: AND
66141: IFFALSE 66155
66143: GO 66145
66145: DISABLE
// FogOff ( your_side ) ;
66146: LD_OWVAR 2
66150: PPUSH
66151: CALL_OW 344
66155: END
// every 0 0$1 trigger StreamModeActive and sSun do
66156: LD_EXP 49
66160: PUSH
66161: LD_EXP 72
66165: AND
66166: IFFALSE 66194
66168: GO 66170
66170: DISABLE
// begin solar_recharge_percent := 0 ;
66171: LD_ADDR_OWVAR 79
66175: PUSH
66176: LD_INT 0
66178: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66179: LD_INT 10500
66181: PPUSH
66182: CALL_OW 67
// solar_recharge_percent := 100 ;
66186: LD_ADDR_OWVAR 79
66190: PUSH
66191: LD_INT 100
66193: ST_TO_ADDR
// end ;
66194: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66195: LD_EXP 49
66199: PUSH
66200: LD_EXP 73
66204: AND
66205: IFFALSE 66444
66207: GO 66209
66209: DISABLE
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
66214: PPUSH
// begin tmp := [ ] ;
66215: LD_ADDR_VAR 0 3
66219: PUSH
66220: EMPTY
66221: ST_TO_ADDR
// for i := 1 to 6 do
66222: LD_ADDR_VAR 0 1
66226: PUSH
66227: DOUBLE
66228: LD_INT 1
66230: DEC
66231: ST_TO_ADDR
66232: LD_INT 6
66234: PUSH
66235: FOR_TO
66236: IFFALSE 66341
// begin uc_nation := nation_nature ;
66238: LD_ADDR_OWVAR 21
66242: PUSH
66243: LD_INT 0
66245: ST_TO_ADDR
// uc_side := 0 ;
66246: LD_ADDR_OWVAR 20
66250: PUSH
66251: LD_INT 0
66253: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66254: LD_ADDR_OWVAR 29
66258: PUSH
66259: LD_INT 12
66261: PUSH
66262: LD_INT 12
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: ST_TO_ADDR
// hc_agressivity := 20 ;
66269: LD_ADDR_OWVAR 35
66273: PUSH
66274: LD_INT 20
66276: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66277: LD_ADDR_OWVAR 28
66281: PUSH
66282: LD_INT 17
66284: ST_TO_ADDR
// hc_gallery :=  ;
66285: LD_ADDR_OWVAR 33
66289: PUSH
66290: LD_STRING 
66292: ST_TO_ADDR
// hc_name :=  ;
66293: LD_ADDR_OWVAR 26
66297: PUSH
66298: LD_STRING 
66300: ST_TO_ADDR
// un := CreateHuman ;
66301: LD_ADDR_VAR 0 2
66305: PUSH
66306: CALL_OW 44
66310: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66311: LD_VAR 0 2
66315: PPUSH
66316: LD_INT 1
66318: PPUSH
66319: CALL_OW 51
// tmp := tmp ^ un ;
66323: LD_ADDR_VAR 0 3
66327: PUSH
66328: LD_VAR 0 3
66332: PUSH
66333: LD_VAR 0 2
66337: ADD
66338: ST_TO_ADDR
// end ;
66339: GO 66235
66341: POP
66342: POP
// repeat wait ( 0 0$1 ) ;
66343: LD_INT 35
66345: PPUSH
66346: CALL_OW 67
// for un in tmp do
66350: LD_ADDR_VAR 0 2
66354: PUSH
66355: LD_VAR 0 3
66359: PUSH
66360: FOR_IN
66361: IFFALSE 66435
// begin if IsDead ( un ) then
66363: LD_VAR 0 2
66367: PPUSH
66368: CALL_OW 301
66372: IFFALSE 66392
// begin tmp := tmp diff un ;
66374: LD_ADDR_VAR 0 3
66378: PUSH
66379: LD_VAR 0 3
66383: PUSH
66384: LD_VAR 0 2
66388: DIFF
66389: ST_TO_ADDR
// continue ;
66390: GO 66360
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66392: LD_VAR 0 2
66396: PPUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 22
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PPUSH
66414: CALL_OW 69
66418: PPUSH
66419: LD_VAR 0 2
66423: PPUSH
66424: CALL_OW 74
66428: PPUSH
66429: CALL_OW 115
// end ;
66433: GO 66360
66435: POP
66436: POP
// until not tmp ;
66437: LD_VAR 0 3
66441: NOT
66442: IFFALSE 66343
// end ;
66444: PPOPN 3
66446: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66447: LD_EXP 49
66451: PUSH
66452: LD_EXP 74
66456: AND
66457: IFFALSE 66511
66459: GO 66461
66461: DISABLE
// begin ToLua ( displayTroll(); ) ;
66462: LD_STRING displayTroll();
66464: PPUSH
66465: CALL_OW 559
// wait ( 3 3$00 ) ;
66469: LD_INT 6300
66471: PPUSH
66472: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66476: LD_STRING hideTroll();
66478: PPUSH
66479: CALL_OW 559
// wait ( 1 1$00 ) ;
66483: LD_INT 2100
66485: PPUSH
66486: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66490: LD_STRING displayTroll();
66492: PPUSH
66493: CALL_OW 559
// wait ( 1 1$00 ) ;
66497: LD_INT 2100
66499: PPUSH
66500: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66504: LD_STRING hideTroll();
66506: PPUSH
66507: CALL_OW 559
// end ;
66511: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66512: LD_EXP 49
66516: PUSH
66517: LD_EXP 75
66521: AND
66522: IFFALSE 66585
66524: GO 66526
66526: DISABLE
66527: LD_INT 0
66529: PPUSH
// begin p := 0 ;
66530: LD_ADDR_VAR 0 1
66534: PUSH
66535: LD_INT 0
66537: ST_TO_ADDR
// repeat game_speed := 1 ;
66538: LD_ADDR_OWVAR 65
66542: PUSH
66543: LD_INT 1
66545: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66546: LD_INT 35
66548: PPUSH
66549: CALL_OW 67
// p := p + 1 ;
66553: LD_ADDR_VAR 0 1
66557: PUSH
66558: LD_VAR 0 1
66562: PUSH
66563: LD_INT 1
66565: PLUS
66566: ST_TO_ADDR
// until p >= 60 ;
66567: LD_VAR 0 1
66571: PUSH
66572: LD_INT 60
66574: GREATEREQUAL
66575: IFFALSE 66538
// game_speed := 4 ;
66577: LD_ADDR_OWVAR 65
66581: PUSH
66582: LD_INT 4
66584: ST_TO_ADDR
// end ;
66585: PPOPN 1
66587: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66588: LD_EXP 49
66592: PUSH
66593: LD_EXP 76
66597: AND
66598: IFFALSE 66744
66600: GO 66602
66602: DISABLE
66603: LD_INT 0
66605: PPUSH
66606: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66607: LD_ADDR_VAR 0 1
66611: PUSH
66612: LD_INT 22
66614: PUSH
66615: LD_OWVAR 2
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: LD_INT 30
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 30
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PPUSH
66656: CALL_OW 69
66660: ST_TO_ADDR
// if not depot then
66661: LD_VAR 0 1
66665: NOT
66666: IFFALSE 66670
// exit ;
66668: GO 66744
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66670: LD_ADDR_VAR 0 2
66674: PUSH
66675: LD_VAR 0 1
66679: PUSH
66680: LD_INT 1
66682: PPUSH
66683: LD_VAR 0 1
66687: PPUSH
66688: CALL_OW 12
66692: ARRAY
66693: PPUSH
66694: CALL_OW 274
66698: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66699: LD_VAR 0 2
66703: PPUSH
66704: LD_INT 1
66706: PPUSH
66707: LD_INT 0
66709: PPUSH
66710: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66714: LD_VAR 0 2
66718: PPUSH
66719: LD_INT 2
66721: PPUSH
66722: LD_INT 0
66724: PPUSH
66725: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66729: LD_VAR 0 2
66733: PPUSH
66734: LD_INT 3
66736: PPUSH
66737: LD_INT 0
66739: PPUSH
66740: CALL_OW 277
// end ;
66744: PPOPN 2
66746: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66747: LD_EXP 49
66751: PUSH
66752: LD_EXP 77
66756: AND
66757: IFFALSE 66854
66759: GO 66761
66761: DISABLE
66762: LD_INT 0
66764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66765: LD_ADDR_VAR 0 1
66769: PUSH
66770: LD_INT 22
66772: PUSH
66773: LD_OWVAR 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 21
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: LD_INT 23
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: PPUSH
66814: CALL_OW 69
66818: ST_TO_ADDR
// if not tmp then
66819: LD_VAR 0 1
66823: NOT
66824: IFFALSE 66828
// exit ;
66826: GO 66854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66828: LD_VAR 0 1
66832: PUSH
66833: LD_INT 1
66835: PPUSH
66836: LD_VAR 0 1
66840: PPUSH
66841: CALL_OW 12
66845: ARRAY
66846: PPUSH
66847: LD_INT 200
66849: PPUSH
66850: CALL_OW 234
// end ;
66854: PPOPN 1
66856: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66857: LD_EXP 49
66861: PUSH
66862: LD_EXP 78
66866: AND
66867: IFFALSE 66946
66869: GO 66871
66871: DISABLE
66872: LD_INT 0
66874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66875: LD_ADDR_VAR 0 1
66879: PUSH
66880: LD_INT 22
66882: PUSH
66883: LD_OWVAR 2
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 21
66894: PUSH
66895: LD_INT 2
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PPUSH
66906: CALL_OW 69
66910: ST_TO_ADDR
// if not tmp then
66911: LD_VAR 0 1
66915: NOT
66916: IFFALSE 66920
// exit ;
66918: GO 66946
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66920: LD_VAR 0 1
66924: PUSH
66925: LD_INT 1
66927: PPUSH
66928: LD_VAR 0 1
66932: PPUSH
66933: CALL_OW 12
66937: ARRAY
66938: PPUSH
66939: LD_INT 60
66941: PPUSH
66942: CALL_OW 234
// end ;
66946: PPOPN 1
66948: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66949: LD_EXP 49
66953: PUSH
66954: LD_EXP 79
66958: AND
66959: IFFALSE 67058
66961: GO 66963
66963: DISABLE
66964: LD_INT 0
66966: PPUSH
66967: PPUSH
// begin enable ;
66968: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66969: LD_ADDR_VAR 0 1
66973: PUSH
66974: LD_INT 22
66976: PUSH
66977: LD_OWVAR 2
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 61
66988: PUSH
66989: EMPTY
66990: LIST
66991: PUSH
66992: LD_INT 33
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: PPUSH
67007: CALL_OW 69
67011: ST_TO_ADDR
// if not tmp then
67012: LD_VAR 0 1
67016: NOT
67017: IFFALSE 67021
// exit ;
67019: GO 67058
// for i in tmp do
67021: LD_ADDR_VAR 0 2
67025: PUSH
67026: LD_VAR 0 1
67030: PUSH
67031: FOR_IN
67032: IFFALSE 67056
// if IsControledBy ( i ) then
67034: LD_VAR 0 2
67038: PPUSH
67039: CALL_OW 312
67043: IFFALSE 67054
// ComUnlink ( i ) ;
67045: LD_VAR 0 2
67049: PPUSH
67050: CALL_OW 136
67054: GO 67031
67056: POP
67057: POP
// end ;
67058: PPOPN 2
67060: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67061: LD_EXP 49
67065: PUSH
67066: LD_EXP 80
67070: AND
67071: IFFALSE 67211
67073: GO 67075
67075: DISABLE
67076: LD_INT 0
67078: PPUSH
67079: PPUSH
// begin ToLua ( displayPowell(); ) ;
67080: LD_STRING displayPowell();
67082: PPUSH
67083: CALL_OW 559
// uc_side := 0 ;
67087: LD_ADDR_OWVAR 20
67091: PUSH
67092: LD_INT 0
67094: ST_TO_ADDR
// uc_nation := 2 ;
67095: LD_ADDR_OWVAR 21
67099: PUSH
67100: LD_INT 2
67102: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67103: LD_ADDR_OWVAR 37
67107: PUSH
67108: LD_INT 14
67110: ST_TO_ADDR
// vc_engine := engine_siberite ;
67111: LD_ADDR_OWVAR 39
67115: PUSH
67116: LD_INT 3
67118: ST_TO_ADDR
// vc_control := control_apeman ;
67119: LD_ADDR_OWVAR 38
67123: PUSH
67124: LD_INT 5
67126: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67127: LD_ADDR_OWVAR 40
67131: PUSH
67132: LD_INT 29
67134: ST_TO_ADDR
// un := CreateVehicle ;
67135: LD_ADDR_VAR 0 2
67139: PUSH
67140: CALL_OW 45
67144: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67145: LD_VAR 0 2
67149: PPUSH
67150: LD_INT 1
67152: PPUSH
67153: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67157: LD_INT 35
67159: PPUSH
67160: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67164: LD_VAR 0 2
67168: PPUSH
67169: LD_INT 22
67171: PUSH
67172: LD_OWVAR 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PPUSH
67181: CALL_OW 69
67185: PPUSH
67186: LD_VAR 0 2
67190: PPUSH
67191: CALL_OW 74
67195: PPUSH
67196: CALL_OW 115
// until IsDead ( un ) ;
67200: LD_VAR 0 2
67204: PPUSH
67205: CALL_OW 301
67209: IFFALSE 67157
// end ;
67211: PPOPN 2
67213: END
// every 0 0$1 trigger StreamModeActive and sStu do
67214: LD_EXP 49
67218: PUSH
67219: LD_EXP 88
67223: AND
67224: IFFALSE 67240
67226: GO 67228
67228: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67229: LD_STRING displayStucuk();
67231: PPUSH
67232: CALL_OW 559
// ResetFog ;
67236: CALL_OW 335
// end ;
67240: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67241: LD_EXP 49
67245: PUSH
67246: LD_EXP 81
67250: AND
67251: IFFALSE 67392
67253: GO 67255
67255: DISABLE
67256: LD_INT 0
67258: PPUSH
67259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: LD_INT 22
67267: PUSH
67268: LD_OWVAR 2
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 21
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PPUSH
67291: CALL_OW 69
67295: ST_TO_ADDR
// if not tmp then
67296: LD_VAR 0 2
67300: NOT
67301: IFFALSE 67305
// exit ;
67303: GO 67392
// un := tmp [ rand ( 1 , tmp ) ] ;
67305: LD_ADDR_VAR 0 1
67309: PUSH
67310: LD_VAR 0 2
67314: PUSH
67315: LD_INT 1
67317: PPUSH
67318: LD_VAR 0 2
67322: PPUSH
67323: CALL_OW 12
67327: ARRAY
67328: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67329: LD_VAR 0 1
67333: PPUSH
67334: LD_INT 0
67336: PPUSH
67337: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67341: LD_VAR 0 1
67345: PPUSH
67346: LD_OWVAR 3
67350: PUSH
67351: LD_VAR 0 1
67355: DIFF
67356: PPUSH
67357: LD_VAR 0 1
67361: PPUSH
67362: CALL_OW 74
67366: PPUSH
67367: CALL_OW 115
// wait ( 0 0$20 ) ;
67371: LD_INT 700
67373: PPUSH
67374: CALL_OW 67
// SetSide ( un , your_side ) ;
67378: LD_VAR 0 1
67382: PPUSH
67383: LD_OWVAR 2
67387: PPUSH
67388: CALL_OW 235
// end ;
67392: PPOPN 2
67394: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67395: LD_EXP 49
67399: PUSH
67400: LD_EXP 82
67404: AND
67405: IFFALSE 67511
67407: GO 67409
67409: DISABLE
67410: LD_INT 0
67412: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67413: LD_ADDR_VAR 0 1
67417: PUSH
67418: LD_INT 22
67420: PUSH
67421: LD_OWVAR 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 2
67432: PUSH
67433: LD_INT 30
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 30
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PPUSH
67462: CALL_OW 69
67466: ST_TO_ADDR
// if not depot then
67467: LD_VAR 0 1
67471: NOT
67472: IFFALSE 67476
// exit ;
67474: GO 67511
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67476: LD_VAR 0 1
67480: PUSH
67481: LD_INT 1
67483: ARRAY
67484: PPUSH
67485: CALL_OW 250
67489: PPUSH
67490: LD_VAR 0 1
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PPUSH
67499: CALL_OW 251
67503: PPUSH
67504: LD_INT 70
67506: PPUSH
67507: CALL_OW 495
// end ;
67511: PPOPN 1
67513: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67514: LD_EXP 49
67518: PUSH
67519: LD_EXP 83
67523: AND
67524: IFFALSE 67735
67526: GO 67528
67528: DISABLE
67529: LD_INT 0
67531: PPUSH
67532: PPUSH
67533: PPUSH
67534: PPUSH
67535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67536: LD_ADDR_VAR 0 5
67540: PUSH
67541: LD_INT 22
67543: PUSH
67544: LD_OWVAR 2
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 21
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PPUSH
67567: CALL_OW 69
67571: ST_TO_ADDR
// if not tmp then
67572: LD_VAR 0 5
67576: NOT
67577: IFFALSE 67581
// exit ;
67579: GO 67735
// for i in tmp do
67581: LD_ADDR_VAR 0 1
67585: PUSH
67586: LD_VAR 0 5
67590: PUSH
67591: FOR_IN
67592: IFFALSE 67733
// begin d := rand ( 0 , 5 ) ;
67594: LD_ADDR_VAR 0 4
67598: PUSH
67599: LD_INT 0
67601: PPUSH
67602: LD_INT 5
67604: PPUSH
67605: CALL_OW 12
67609: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67610: LD_ADDR_VAR 0 2
67614: PUSH
67615: LD_VAR 0 1
67619: PPUSH
67620: CALL_OW 250
67624: PPUSH
67625: LD_VAR 0 4
67629: PPUSH
67630: LD_INT 3
67632: PPUSH
67633: LD_INT 12
67635: PPUSH
67636: CALL_OW 12
67640: PPUSH
67641: CALL_OW 272
67645: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67646: LD_ADDR_VAR 0 3
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: CALL_OW 251
67660: PPUSH
67661: LD_VAR 0 4
67665: PPUSH
67666: LD_INT 3
67668: PPUSH
67669: LD_INT 12
67671: PPUSH
67672: CALL_OW 12
67676: PPUSH
67677: CALL_OW 273
67681: ST_TO_ADDR
// if ValidHex ( x , y ) then
67682: LD_VAR 0 2
67686: PPUSH
67687: LD_VAR 0 3
67691: PPUSH
67692: CALL_OW 488
67696: IFFALSE 67731
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67698: LD_VAR 0 1
67702: PPUSH
67703: LD_VAR 0 2
67707: PPUSH
67708: LD_VAR 0 3
67712: PPUSH
67713: LD_INT 3
67715: PPUSH
67716: LD_INT 6
67718: PPUSH
67719: CALL_OW 12
67723: PPUSH
67724: LD_INT 1
67726: PPUSH
67727: CALL_OW 483
// end ;
67731: GO 67591
67733: POP
67734: POP
// end ;
67735: PPOPN 5
67737: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67738: LD_EXP 49
67742: PUSH
67743: LD_EXP 84
67747: AND
67748: IFFALSE 67842
67750: GO 67752
67752: DISABLE
67753: LD_INT 0
67755: PPUSH
67756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67757: LD_ADDR_VAR 0 2
67761: PUSH
67762: LD_INT 22
67764: PUSH
67765: LD_OWVAR 2
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 32
67776: PUSH
67777: LD_INT 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 21
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: PPUSH
67799: CALL_OW 69
67803: ST_TO_ADDR
// if not tmp then
67804: LD_VAR 0 2
67808: NOT
67809: IFFALSE 67813
// exit ;
67811: GO 67842
// for i in tmp do
67813: LD_ADDR_VAR 0 1
67817: PUSH
67818: LD_VAR 0 2
67822: PUSH
67823: FOR_IN
67824: IFFALSE 67840
// SetFuel ( i , 0 ) ;
67826: LD_VAR 0 1
67830: PPUSH
67831: LD_INT 0
67833: PPUSH
67834: CALL_OW 240
67838: GO 67823
67840: POP
67841: POP
// end ;
67842: PPOPN 2
67844: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67845: LD_EXP 49
67849: PUSH
67850: LD_EXP 85
67854: AND
67855: IFFALSE 67921
67857: GO 67859
67859: DISABLE
67860: LD_INT 0
67862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67863: LD_ADDR_VAR 0 1
67867: PUSH
67868: LD_INT 22
67870: PUSH
67871: LD_OWVAR 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 30
67882: PUSH
67883: LD_INT 29
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PPUSH
67894: CALL_OW 69
67898: ST_TO_ADDR
// if not tmp then
67899: LD_VAR 0 1
67903: NOT
67904: IFFALSE 67908
// exit ;
67906: GO 67921
// DestroyUnit ( tmp [ 1 ] ) ;
67908: LD_VAR 0 1
67912: PUSH
67913: LD_INT 1
67915: ARRAY
67916: PPUSH
67917: CALL_OW 65
// end ;
67921: PPOPN 1
67923: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67924: LD_EXP 49
67928: PUSH
67929: LD_EXP 87
67933: AND
67934: IFFALSE 68063
67936: GO 67938
67938: DISABLE
67939: LD_INT 0
67941: PPUSH
// begin uc_side := 0 ;
67942: LD_ADDR_OWVAR 20
67946: PUSH
67947: LD_INT 0
67949: ST_TO_ADDR
// uc_nation := nation_arabian ;
67950: LD_ADDR_OWVAR 21
67954: PUSH
67955: LD_INT 2
67957: ST_TO_ADDR
// hc_gallery :=  ;
67958: LD_ADDR_OWVAR 33
67962: PUSH
67963: LD_STRING 
67965: ST_TO_ADDR
// hc_name :=  ;
67966: LD_ADDR_OWVAR 26
67970: PUSH
67971: LD_STRING 
67973: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67974: LD_INT 1
67976: PPUSH
67977: LD_INT 11
67979: PPUSH
67980: LD_INT 10
67982: PPUSH
67983: CALL_OW 380
// un := CreateHuman ;
67987: LD_ADDR_VAR 0 1
67991: PUSH
67992: CALL_OW 44
67996: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67997: LD_VAR 0 1
68001: PPUSH
68002: LD_INT 1
68004: PPUSH
68005: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68009: LD_INT 35
68011: PPUSH
68012: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68016: LD_VAR 0 1
68020: PPUSH
68021: LD_INT 22
68023: PUSH
68024: LD_OWVAR 2
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PPUSH
68033: CALL_OW 69
68037: PPUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: CALL_OW 74
68047: PPUSH
68048: CALL_OW 115
// until IsDead ( un ) ;
68052: LD_VAR 0 1
68056: PPUSH
68057: CALL_OW 301
68061: IFFALSE 68009
// end ;
68063: PPOPN 1
68065: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68066: LD_EXP 49
68070: PUSH
68071: LD_EXP 89
68075: AND
68076: IFFALSE 68088
68078: GO 68080
68080: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68081: LD_STRING earthquake(getX(game), 0, 32)
68083: PPUSH
68084: CALL_OW 559
68088: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68089: LD_EXP 49
68093: PUSH
68094: LD_EXP 90
68098: AND
68099: IFFALSE 68190
68101: GO 68103
68103: DISABLE
68104: LD_INT 0
68106: PPUSH
// begin enable ;
68107: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68108: LD_ADDR_VAR 0 1
68112: PUSH
68113: LD_INT 22
68115: PUSH
68116: LD_OWVAR 2
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 21
68127: PUSH
68128: LD_INT 2
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 33
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: PPUSH
68150: CALL_OW 69
68154: ST_TO_ADDR
// if not tmp then
68155: LD_VAR 0 1
68159: NOT
68160: IFFALSE 68164
// exit ;
68162: GO 68190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 1
68171: PPUSH
68172: LD_VAR 0 1
68176: PPUSH
68177: CALL_OW 12
68181: ARRAY
68182: PPUSH
68183: LD_INT 1
68185: PPUSH
68186: CALL_OW 234
// end ;
68190: PPOPN 1
68192: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68193: LD_EXP 49
68197: PUSH
68198: LD_EXP 91
68202: AND
68203: IFFALSE 68344
68205: GO 68207
68207: DISABLE
68208: LD_INT 0
68210: PPUSH
68211: PPUSH
68212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68213: LD_ADDR_VAR 0 3
68217: PUSH
68218: LD_INT 22
68220: PUSH
68221: LD_OWVAR 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 25
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PPUSH
68244: CALL_OW 69
68248: ST_TO_ADDR
// if not tmp then
68249: LD_VAR 0 3
68253: NOT
68254: IFFALSE 68258
// exit ;
68256: GO 68344
// un := tmp [ rand ( 1 , tmp ) ] ;
68258: LD_ADDR_VAR 0 2
68262: PUSH
68263: LD_VAR 0 3
68267: PUSH
68268: LD_INT 1
68270: PPUSH
68271: LD_VAR 0 3
68275: PPUSH
68276: CALL_OW 12
68280: ARRAY
68281: ST_TO_ADDR
// if Crawls ( un ) then
68282: LD_VAR 0 2
68286: PPUSH
68287: CALL_OW 318
68291: IFFALSE 68302
// ComWalk ( un ) ;
68293: LD_VAR 0 2
68297: PPUSH
68298: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68302: LD_VAR 0 2
68306: PPUSH
68307: LD_INT 9
68309: PPUSH
68310: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68314: LD_INT 28
68316: PPUSH
68317: LD_OWVAR 2
68321: PPUSH
68322: LD_INT 2
68324: PPUSH
68325: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68329: LD_INT 29
68331: PPUSH
68332: LD_OWVAR 2
68336: PPUSH
68337: LD_INT 2
68339: PPUSH
68340: CALL_OW 322
// end ;
68344: PPOPN 3
68346: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68347: LD_EXP 49
68351: PUSH
68352: LD_EXP 92
68356: AND
68357: IFFALSE 68468
68359: GO 68361
68361: DISABLE
68362: LD_INT 0
68364: PPUSH
68365: PPUSH
68366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68367: LD_ADDR_VAR 0 3
68371: PUSH
68372: LD_INT 22
68374: PUSH
68375: LD_OWVAR 2
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 25
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PPUSH
68398: CALL_OW 69
68402: ST_TO_ADDR
// if not tmp then
68403: LD_VAR 0 3
68407: NOT
68408: IFFALSE 68412
// exit ;
68410: GO 68468
// un := tmp [ rand ( 1 , tmp ) ] ;
68412: LD_ADDR_VAR 0 2
68416: PUSH
68417: LD_VAR 0 3
68421: PUSH
68422: LD_INT 1
68424: PPUSH
68425: LD_VAR 0 3
68429: PPUSH
68430: CALL_OW 12
68434: ARRAY
68435: ST_TO_ADDR
// if Crawls ( un ) then
68436: LD_VAR 0 2
68440: PPUSH
68441: CALL_OW 318
68445: IFFALSE 68456
// ComWalk ( un ) ;
68447: LD_VAR 0 2
68451: PPUSH
68452: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68456: LD_VAR 0 2
68460: PPUSH
68461: LD_INT 8
68463: PPUSH
68464: CALL_OW 336
// end ;
68468: PPOPN 3
68470: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68471: LD_EXP 49
68475: PUSH
68476: LD_EXP 93
68480: AND
68481: IFFALSE 68625
68483: GO 68485
68485: DISABLE
68486: LD_INT 0
68488: PPUSH
68489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68490: LD_ADDR_VAR 0 2
68494: PUSH
68495: LD_INT 22
68497: PUSH
68498: LD_OWVAR 2
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 21
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: LD_INT 34
68522: PUSH
68523: LD_INT 12
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 34
68532: PUSH
68533: LD_INT 51
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 34
68542: PUSH
68543: LD_INT 32
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: PPUSH
68561: CALL_OW 69
68565: ST_TO_ADDR
// if not tmp then
68566: LD_VAR 0 2
68570: NOT
68571: IFFALSE 68575
// exit ;
68573: GO 68625
// for i in tmp do
68575: LD_ADDR_VAR 0 1
68579: PUSH
68580: LD_VAR 0 2
68584: PUSH
68585: FOR_IN
68586: IFFALSE 68623
// if GetCargo ( i , mat_artifact ) = 0 then
68588: LD_VAR 0 1
68592: PPUSH
68593: LD_INT 4
68595: PPUSH
68596: CALL_OW 289
68600: PUSH
68601: LD_INT 0
68603: EQUAL
68604: IFFALSE 68621
// SetCargo ( i , mat_siberit , 100 ) ;
68606: LD_VAR 0 1
68610: PPUSH
68611: LD_INT 3
68613: PPUSH
68614: LD_INT 100
68616: PPUSH
68617: CALL_OW 290
68621: GO 68585
68623: POP
68624: POP
// end ;
68625: PPOPN 2
68627: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68628: LD_EXP 49
68632: PUSH
68633: LD_EXP 94
68637: AND
68638: IFFALSE 68821
68640: GO 68642
68642: DISABLE
68643: LD_INT 0
68645: PPUSH
68646: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68647: LD_ADDR_VAR 0 2
68651: PUSH
68652: LD_INT 22
68654: PUSH
68655: LD_OWVAR 2
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PPUSH
68664: CALL_OW 69
68668: ST_TO_ADDR
// if not tmp then
68669: LD_VAR 0 2
68673: NOT
68674: IFFALSE 68678
// exit ;
68676: GO 68821
// for i := 1 to 2 do
68678: LD_ADDR_VAR 0 1
68682: PUSH
68683: DOUBLE
68684: LD_INT 1
68686: DEC
68687: ST_TO_ADDR
68688: LD_INT 2
68690: PUSH
68691: FOR_TO
68692: IFFALSE 68819
// begin uc_side := your_side ;
68694: LD_ADDR_OWVAR 20
68698: PUSH
68699: LD_OWVAR 2
68703: ST_TO_ADDR
// uc_nation := nation_american ;
68704: LD_ADDR_OWVAR 21
68708: PUSH
68709: LD_INT 1
68711: ST_TO_ADDR
// vc_chassis := us_morphling ;
68712: LD_ADDR_OWVAR 37
68716: PUSH
68717: LD_INT 5
68719: ST_TO_ADDR
// vc_engine := engine_siberite ;
68720: LD_ADDR_OWVAR 39
68724: PUSH
68725: LD_INT 3
68727: ST_TO_ADDR
// vc_control := control_computer ;
68728: LD_ADDR_OWVAR 38
68732: PUSH
68733: LD_INT 3
68735: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68736: LD_ADDR_OWVAR 40
68740: PUSH
68741: LD_INT 10
68743: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68744: LD_VAR 0 2
68748: PUSH
68749: LD_INT 1
68751: ARRAY
68752: PPUSH
68753: CALL_OW 310
68757: NOT
68758: IFFALSE 68805
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68760: CALL_OW 45
68764: PPUSH
68765: LD_VAR 0 2
68769: PUSH
68770: LD_INT 1
68772: ARRAY
68773: PPUSH
68774: CALL_OW 250
68778: PPUSH
68779: LD_VAR 0 2
68783: PUSH
68784: LD_INT 1
68786: ARRAY
68787: PPUSH
68788: CALL_OW 251
68792: PPUSH
68793: LD_INT 12
68795: PPUSH
68796: LD_INT 1
68798: PPUSH
68799: CALL_OW 50
68803: GO 68817
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68805: CALL_OW 45
68809: PPUSH
68810: LD_INT 1
68812: PPUSH
68813: CALL_OW 51
// end ;
68817: GO 68691
68819: POP
68820: POP
// end ;
68821: PPOPN 2
68823: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68824: LD_EXP 49
68828: PUSH
68829: LD_EXP 95
68833: AND
68834: IFFALSE 69056
68836: GO 68838
68838: DISABLE
68839: LD_INT 0
68841: PPUSH
68842: PPUSH
68843: PPUSH
68844: PPUSH
68845: PPUSH
68846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68847: LD_ADDR_VAR 0 6
68851: PUSH
68852: LD_INT 22
68854: PUSH
68855: LD_OWVAR 2
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 21
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 3
68876: PUSH
68877: LD_INT 23
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: PPUSH
68896: CALL_OW 69
68900: ST_TO_ADDR
// if not tmp then
68901: LD_VAR 0 6
68905: NOT
68906: IFFALSE 68910
// exit ;
68908: GO 69056
// s1 := rand ( 1 , 4 ) ;
68910: LD_ADDR_VAR 0 2
68914: PUSH
68915: LD_INT 1
68917: PPUSH
68918: LD_INT 4
68920: PPUSH
68921: CALL_OW 12
68925: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68926: LD_ADDR_VAR 0 4
68930: PUSH
68931: LD_VAR 0 6
68935: PUSH
68936: LD_INT 1
68938: ARRAY
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: CALL_OW 259
68949: ST_TO_ADDR
// if s1 = 1 then
68950: LD_VAR 0 2
68954: PUSH
68955: LD_INT 1
68957: EQUAL
68958: IFFALSE 68978
// s2 := rand ( 2 , 4 ) else
68960: LD_ADDR_VAR 0 3
68964: PUSH
68965: LD_INT 2
68967: PPUSH
68968: LD_INT 4
68970: PPUSH
68971: CALL_OW 12
68975: ST_TO_ADDR
68976: GO 68986
// s2 := 1 ;
68978: LD_ADDR_VAR 0 3
68982: PUSH
68983: LD_INT 1
68985: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68986: LD_ADDR_VAR 0 5
68990: PUSH
68991: LD_VAR 0 6
68995: PUSH
68996: LD_INT 1
68998: ARRAY
68999: PPUSH
69000: LD_VAR 0 3
69004: PPUSH
69005: CALL_OW 259
69009: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69010: LD_VAR 0 6
69014: PUSH
69015: LD_INT 1
69017: ARRAY
69018: PPUSH
69019: LD_VAR 0 2
69023: PPUSH
69024: LD_VAR 0 5
69028: PPUSH
69029: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69033: LD_VAR 0 6
69037: PUSH
69038: LD_INT 1
69040: ARRAY
69041: PPUSH
69042: LD_VAR 0 3
69046: PPUSH
69047: LD_VAR 0 4
69051: PPUSH
69052: CALL_OW 237
// end ;
69056: PPOPN 6
69058: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69059: LD_EXP 49
69063: PUSH
69064: LD_EXP 96
69068: AND
69069: IFFALSE 69148
69071: GO 69073
69073: DISABLE
69074: LD_INT 0
69076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69077: LD_ADDR_VAR 0 1
69081: PUSH
69082: LD_INT 22
69084: PUSH
69085: LD_OWVAR 2
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 30
69096: PUSH
69097: LD_INT 3
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PPUSH
69108: CALL_OW 69
69112: ST_TO_ADDR
// if not tmp then
69113: LD_VAR 0 1
69117: NOT
69118: IFFALSE 69122
// exit ;
69120: GO 69148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69122: LD_VAR 0 1
69126: PUSH
69127: LD_INT 1
69129: PPUSH
69130: LD_VAR 0 1
69134: PPUSH
69135: CALL_OW 12
69139: ARRAY
69140: PPUSH
69141: LD_INT 1
69143: PPUSH
69144: CALL_OW 234
// end ;
69148: PPOPN 1
69150: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69151: LD_EXP 49
69155: PUSH
69156: LD_EXP 97
69160: AND
69161: IFFALSE 69273
69163: GO 69165
69165: DISABLE
69166: LD_INT 0
69168: PPUSH
69169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69170: LD_ADDR_VAR 0 2
69174: PUSH
69175: LD_INT 22
69177: PUSH
69178: LD_OWVAR 2
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: LD_INT 30
69192: PUSH
69193: LD_INT 27
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 30
69202: PUSH
69203: LD_INT 26
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 30
69212: PUSH
69213: LD_INT 28
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PPUSH
69230: CALL_OW 69
69234: ST_TO_ADDR
// if not tmp then
69235: LD_VAR 0 2
69239: NOT
69240: IFFALSE 69244
// exit ;
69242: GO 69273
// for i in tmp do
69244: LD_ADDR_VAR 0 1
69248: PUSH
69249: LD_VAR 0 2
69253: PUSH
69254: FOR_IN
69255: IFFALSE 69271
// SetLives ( i , 1 ) ;
69257: LD_VAR 0 1
69261: PPUSH
69262: LD_INT 1
69264: PPUSH
69265: CALL_OW 234
69269: GO 69254
69271: POP
69272: POP
// end ;
69273: PPOPN 2
69275: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69276: LD_EXP 49
69280: PUSH
69281: LD_EXP 98
69285: AND
69286: IFFALSE 69573
69288: GO 69290
69290: DISABLE
69291: LD_INT 0
69293: PPUSH
69294: PPUSH
69295: PPUSH
// begin i := rand ( 1 , 7 ) ;
69296: LD_ADDR_VAR 0 1
69300: PUSH
69301: LD_INT 1
69303: PPUSH
69304: LD_INT 7
69306: PPUSH
69307: CALL_OW 12
69311: ST_TO_ADDR
// case i of 1 :
69312: LD_VAR 0 1
69316: PUSH
69317: LD_INT 1
69319: DOUBLE
69320: EQUAL
69321: IFTRUE 69325
69323: GO 69335
69325: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69326: LD_STRING earthquake(getX(game), 0, 32)
69328: PPUSH
69329: CALL_OW 559
69333: GO 69573
69335: LD_INT 2
69337: DOUBLE
69338: EQUAL
69339: IFTRUE 69343
69341: GO 69357
69343: POP
// begin ToLua ( displayStucuk(); ) ;
69344: LD_STRING displayStucuk();
69346: PPUSH
69347: CALL_OW 559
// ResetFog ;
69351: CALL_OW 335
// end ; 3 :
69355: GO 69573
69357: LD_INT 3
69359: DOUBLE
69360: EQUAL
69361: IFTRUE 69365
69363: GO 69469
69365: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69366: LD_ADDR_VAR 0 2
69370: PUSH
69371: LD_INT 22
69373: PUSH
69374: LD_OWVAR 2
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 25
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PPUSH
69397: CALL_OW 69
69401: ST_TO_ADDR
// if not tmp then
69402: LD_VAR 0 2
69406: NOT
69407: IFFALSE 69411
// exit ;
69409: GO 69573
// un := tmp [ rand ( 1 , tmp ) ] ;
69411: LD_ADDR_VAR 0 3
69415: PUSH
69416: LD_VAR 0 2
69420: PUSH
69421: LD_INT 1
69423: PPUSH
69424: LD_VAR 0 2
69428: PPUSH
69429: CALL_OW 12
69433: ARRAY
69434: ST_TO_ADDR
// if Crawls ( un ) then
69435: LD_VAR 0 3
69439: PPUSH
69440: CALL_OW 318
69444: IFFALSE 69455
// ComWalk ( un ) ;
69446: LD_VAR 0 3
69450: PPUSH
69451: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69455: LD_VAR 0 3
69459: PPUSH
69460: LD_INT 8
69462: PPUSH
69463: CALL_OW 336
// end ; 4 :
69467: GO 69573
69469: LD_INT 4
69471: DOUBLE
69472: EQUAL
69473: IFTRUE 69477
69475: GO 69551
69477: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69478: LD_ADDR_VAR 0 2
69482: PUSH
69483: LD_INT 22
69485: PUSH
69486: LD_OWVAR 2
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 30
69497: PUSH
69498: LD_INT 29
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PPUSH
69509: CALL_OW 69
69513: ST_TO_ADDR
// if not tmp then
69514: LD_VAR 0 2
69518: NOT
69519: IFFALSE 69523
// exit ;
69521: GO 69573
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69523: LD_VAR 0 2
69527: PUSH
69528: LD_INT 1
69530: ARRAY
69531: PPUSH
69532: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69536: LD_VAR 0 2
69540: PUSH
69541: LD_INT 1
69543: ARRAY
69544: PPUSH
69545: CALL_OW 65
// end ; 5 .. 7 :
69549: GO 69573
69551: LD_INT 5
69553: DOUBLE
69554: GREATEREQUAL
69555: IFFALSE 69563
69557: LD_INT 7
69559: DOUBLE
69560: LESSEQUAL
69561: IFTRUE 69565
69563: GO 69572
69565: POP
// StreamSibBomb ; end ;
69566: CALL 65810 0 0
69570: GO 69573
69572: POP
// end ;
69573: PPOPN 3
69575: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69576: LD_EXP 49
69580: PUSH
69581: LD_EXP 99
69585: AND
69586: IFFALSE 69742
69588: GO 69590
69590: DISABLE
69591: LD_INT 0
69593: PPUSH
69594: PPUSH
69595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69596: LD_ADDR_VAR 0 2
69600: PUSH
69601: LD_INT 81
69603: PUSH
69604: LD_OWVAR 2
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 2
69615: PUSH
69616: LD_INT 21
69618: PUSH
69619: LD_INT 1
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 21
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PPUSH
69645: CALL_OW 69
69649: ST_TO_ADDR
// if not tmp then
69650: LD_VAR 0 2
69654: NOT
69655: IFFALSE 69659
// exit ;
69657: GO 69742
// p := 0 ;
69659: LD_ADDR_VAR 0 3
69663: PUSH
69664: LD_INT 0
69666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69667: LD_INT 35
69669: PPUSH
69670: CALL_OW 67
// p := p + 1 ;
69674: LD_ADDR_VAR 0 3
69678: PUSH
69679: LD_VAR 0 3
69683: PUSH
69684: LD_INT 1
69686: PLUS
69687: ST_TO_ADDR
// for i in tmp do
69688: LD_ADDR_VAR 0 1
69692: PUSH
69693: LD_VAR 0 2
69697: PUSH
69698: FOR_IN
69699: IFFALSE 69730
// if GetLives ( i ) < 1000 then
69701: LD_VAR 0 1
69705: PPUSH
69706: CALL_OW 256
69710: PUSH
69711: LD_INT 1000
69713: LESS
69714: IFFALSE 69728
// SetLives ( i , 1000 ) ;
69716: LD_VAR 0 1
69720: PPUSH
69721: LD_INT 1000
69723: PPUSH
69724: CALL_OW 234
69728: GO 69698
69730: POP
69731: POP
// until p > 20 ;
69732: LD_VAR 0 3
69736: PUSH
69737: LD_INT 20
69739: GREATER
69740: IFFALSE 69667
// end ;
69742: PPOPN 3
69744: END
// every 0 0$1 trigger StreamModeActive and sTime do
69745: LD_EXP 49
69749: PUSH
69750: LD_EXP 100
69754: AND
69755: IFFALSE 69790
69757: GO 69759
69759: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69760: LD_INT 28
69762: PPUSH
69763: LD_OWVAR 2
69767: PPUSH
69768: LD_INT 2
69770: PPUSH
69771: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69775: LD_INT 30
69777: PPUSH
69778: LD_OWVAR 2
69782: PPUSH
69783: LD_INT 2
69785: PPUSH
69786: CALL_OW 322
// end ;
69790: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69791: LD_EXP 49
69795: PUSH
69796: LD_EXP 101
69800: AND
69801: IFFALSE 69922
69803: GO 69805
69805: DISABLE
69806: LD_INT 0
69808: PPUSH
69809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69810: LD_ADDR_VAR 0 2
69814: PUSH
69815: LD_INT 22
69817: PUSH
69818: LD_OWVAR 2
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 21
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: PUSH
69840: LD_INT 23
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: LIST
69858: PPUSH
69859: CALL_OW 69
69863: ST_TO_ADDR
// if not tmp then
69864: LD_VAR 0 2
69868: NOT
69869: IFFALSE 69873
// exit ;
69871: GO 69922
// for i in tmp do
69873: LD_ADDR_VAR 0 1
69877: PUSH
69878: LD_VAR 0 2
69882: PUSH
69883: FOR_IN
69884: IFFALSE 69920
// begin if Crawls ( i ) then
69886: LD_VAR 0 1
69890: PPUSH
69891: CALL_OW 318
69895: IFFALSE 69906
// ComWalk ( i ) ;
69897: LD_VAR 0 1
69901: PPUSH
69902: CALL_OW 138
// SetClass ( i , 2 ) ;
69906: LD_VAR 0 1
69910: PPUSH
69911: LD_INT 2
69913: PPUSH
69914: CALL_OW 336
// end ;
69918: GO 69883
69920: POP
69921: POP
// end ;
69922: PPOPN 2
69924: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69925: LD_EXP 49
69929: PUSH
69930: LD_EXP 102
69934: AND
69935: IFFALSE 70223
69937: GO 69939
69939: DISABLE
69940: LD_INT 0
69942: PPUSH
69943: PPUSH
69944: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69945: LD_OWVAR 2
69949: PPUSH
69950: LD_INT 9
69952: PPUSH
69953: LD_INT 1
69955: PPUSH
69956: LD_INT 1
69958: PPUSH
69959: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69963: LD_INT 9
69965: PPUSH
69966: LD_OWVAR 2
69970: PPUSH
69971: CALL_OW 343
// uc_side := 9 ;
69975: LD_ADDR_OWVAR 20
69979: PUSH
69980: LD_INT 9
69982: ST_TO_ADDR
// uc_nation := 2 ;
69983: LD_ADDR_OWVAR 21
69987: PUSH
69988: LD_INT 2
69990: ST_TO_ADDR
// hc_name := Dark Warrior ;
69991: LD_ADDR_OWVAR 26
69995: PUSH
69996: LD_STRING Dark Warrior
69998: ST_TO_ADDR
// hc_gallery :=  ;
69999: LD_ADDR_OWVAR 33
70003: PUSH
70004: LD_STRING 
70006: ST_TO_ADDR
// hc_noskilllimit := true ;
70007: LD_ADDR_OWVAR 76
70011: PUSH
70012: LD_INT 1
70014: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70015: LD_ADDR_OWVAR 31
70019: PUSH
70020: LD_INT 30
70022: PUSH
70023: LD_INT 30
70025: PUSH
70026: LD_INT 30
70028: PUSH
70029: LD_INT 30
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: ST_TO_ADDR
// un := CreateHuman ;
70038: LD_ADDR_VAR 0 3
70042: PUSH
70043: CALL_OW 44
70047: ST_TO_ADDR
// hc_noskilllimit := false ;
70048: LD_ADDR_OWVAR 76
70052: PUSH
70053: LD_INT 0
70055: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70056: LD_VAR 0 3
70060: PPUSH
70061: LD_INT 1
70063: PPUSH
70064: CALL_OW 51
// ToLua ( playRanger() ) ;
70068: LD_STRING playRanger()
70070: PPUSH
70071: CALL_OW 559
// p := 0 ;
70075: LD_ADDR_VAR 0 2
70079: PUSH
70080: LD_INT 0
70082: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70083: LD_INT 35
70085: PPUSH
70086: CALL_OW 67
// p := p + 1 ;
70090: LD_ADDR_VAR 0 2
70094: PUSH
70095: LD_VAR 0 2
70099: PUSH
70100: LD_INT 1
70102: PLUS
70103: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70104: LD_VAR 0 3
70108: PPUSH
70109: CALL_OW 256
70113: PUSH
70114: LD_INT 1000
70116: LESS
70117: IFFALSE 70131
// SetLives ( un , 1000 ) ;
70119: LD_VAR 0 3
70123: PPUSH
70124: LD_INT 1000
70126: PPUSH
70127: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70131: LD_VAR 0 3
70135: PPUSH
70136: LD_INT 81
70138: PUSH
70139: LD_OWVAR 2
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 91
70150: PUSH
70151: LD_VAR 0 3
70155: PUSH
70156: LD_INT 30
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PPUSH
70168: CALL_OW 69
70172: PPUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: CALL_OW 74
70182: PPUSH
70183: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70187: LD_VAR 0 2
70191: PUSH
70192: LD_INT 80
70194: GREATER
70195: PUSH
70196: LD_VAR 0 3
70200: PPUSH
70201: CALL_OW 301
70205: OR
70206: IFFALSE 70083
// if un then
70208: LD_VAR 0 3
70212: IFFALSE 70223
// RemoveUnit ( un ) ;
70214: LD_VAR 0 3
70218: PPUSH
70219: CALL_OW 64
// end ;
70223: PPOPN 3
70225: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70226: LD_EXP 103
70230: IFFALSE 70346
70232: GO 70234
70234: DISABLE
70235: LD_INT 0
70237: PPUSH
70238: PPUSH
70239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70240: LD_ADDR_VAR 0 2
70244: PUSH
70245: LD_INT 81
70247: PUSH
70248: LD_OWVAR 2
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 21
70259: PUSH
70260: LD_INT 1
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PPUSH
70271: CALL_OW 69
70275: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70276: LD_STRING playComputer()
70278: PPUSH
70279: CALL_OW 559
// if not tmp then
70283: LD_VAR 0 2
70287: NOT
70288: IFFALSE 70292
// exit ;
70290: GO 70346
// for i in tmp do
70292: LD_ADDR_VAR 0 1
70296: PUSH
70297: LD_VAR 0 2
70301: PUSH
70302: FOR_IN
70303: IFFALSE 70344
// for j := 1 to 4 do
70305: LD_ADDR_VAR 0 3
70309: PUSH
70310: DOUBLE
70311: LD_INT 1
70313: DEC
70314: ST_TO_ADDR
70315: LD_INT 4
70317: PUSH
70318: FOR_TO
70319: IFFALSE 70340
// SetSkill ( i , j , 10 ) ;
70321: LD_VAR 0 1
70325: PPUSH
70326: LD_VAR 0 3
70330: PPUSH
70331: LD_INT 10
70333: PPUSH
70334: CALL_OW 237
70338: GO 70318
70340: POP
70341: POP
70342: GO 70302
70344: POP
70345: POP
// end ;
70346: PPOPN 3
70348: END
// every 0 0$1 trigger s30 do var i , tmp ;
70349: LD_EXP 104
70353: IFFALSE 70422
70355: GO 70357
70357: DISABLE
70358: LD_INT 0
70360: PPUSH
70361: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70362: LD_ADDR_VAR 0 2
70366: PUSH
70367: LD_INT 22
70369: PUSH
70370: LD_OWVAR 2
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PPUSH
70379: CALL_OW 69
70383: ST_TO_ADDR
// if not tmp then
70384: LD_VAR 0 2
70388: NOT
70389: IFFALSE 70393
// exit ;
70391: GO 70422
// for i in tmp do
70393: LD_ADDR_VAR 0 1
70397: PUSH
70398: LD_VAR 0 2
70402: PUSH
70403: FOR_IN
70404: IFFALSE 70420
// SetLives ( i , 300 ) ;
70406: LD_VAR 0 1
70410: PPUSH
70411: LD_INT 300
70413: PPUSH
70414: CALL_OW 234
70418: GO 70403
70420: POP
70421: POP
// end ;
70422: PPOPN 2
70424: END
// every 0 0$1 trigger s60 do var i , tmp ;
70425: LD_EXP 105
70429: IFFALSE 70498
70431: GO 70433
70433: DISABLE
70434: LD_INT 0
70436: PPUSH
70437: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70438: LD_ADDR_VAR 0 2
70442: PUSH
70443: LD_INT 22
70445: PUSH
70446: LD_OWVAR 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PPUSH
70455: CALL_OW 69
70459: ST_TO_ADDR
// if not tmp then
70460: LD_VAR 0 2
70464: NOT
70465: IFFALSE 70469
// exit ;
70467: GO 70498
// for i in tmp do
70469: LD_ADDR_VAR 0 1
70473: PUSH
70474: LD_VAR 0 2
70478: PUSH
70479: FOR_IN
70480: IFFALSE 70496
// SetLives ( i , 600 ) ;
70482: LD_VAR 0 1
70486: PPUSH
70487: LD_INT 600
70489: PPUSH
70490: CALL_OW 234
70494: GO 70479
70496: POP
70497: POP
// end ;
70498: PPOPN 2
70500: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70501: LD_INT 0
70503: PPUSH
// case cmd of 301 :
70504: LD_VAR 0 1
70508: PUSH
70509: LD_INT 301
70511: DOUBLE
70512: EQUAL
70513: IFTRUE 70517
70515: GO 70549
70517: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70518: LD_VAR 0 6
70522: PPUSH
70523: LD_VAR 0 7
70527: PPUSH
70528: LD_VAR 0 8
70532: PPUSH
70533: LD_VAR 0 4
70537: PPUSH
70538: LD_VAR 0 5
70542: PPUSH
70543: CALL 71750 0 5
70547: GO 70670
70549: LD_INT 302
70551: DOUBLE
70552: EQUAL
70553: IFTRUE 70557
70555: GO 70594
70557: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70558: LD_VAR 0 6
70562: PPUSH
70563: LD_VAR 0 7
70567: PPUSH
70568: LD_VAR 0 8
70572: PPUSH
70573: LD_VAR 0 9
70577: PPUSH
70578: LD_VAR 0 4
70582: PPUSH
70583: LD_VAR 0 5
70587: PPUSH
70588: CALL 71841 0 6
70592: GO 70670
70594: LD_INT 303
70596: DOUBLE
70597: EQUAL
70598: IFTRUE 70602
70600: GO 70639
70602: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70603: LD_VAR 0 6
70607: PPUSH
70608: LD_VAR 0 7
70612: PPUSH
70613: LD_VAR 0 8
70617: PPUSH
70618: LD_VAR 0 9
70622: PPUSH
70623: LD_VAR 0 4
70627: PPUSH
70628: LD_VAR 0 5
70632: PPUSH
70633: CALL 70675 0 6
70637: GO 70670
70639: LD_INT 304
70641: DOUBLE
70642: EQUAL
70643: IFTRUE 70647
70645: GO 70669
70647: POP
// hHackTeleport ( unit , x , y ) ; end ;
70648: LD_VAR 0 2
70652: PPUSH
70653: LD_VAR 0 4
70657: PPUSH
70658: LD_VAR 0 5
70662: PPUSH
70663: CALL 72434 0 3
70667: GO 70670
70669: POP
// end ;
70670: LD_VAR 0 12
70674: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70675: LD_INT 0
70677: PPUSH
70678: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70679: LD_VAR 0 1
70683: PUSH
70684: LD_INT 1
70686: LESS
70687: PUSH
70688: LD_VAR 0 1
70692: PUSH
70693: LD_INT 3
70695: GREATER
70696: OR
70697: PUSH
70698: LD_VAR 0 5
70702: PPUSH
70703: LD_VAR 0 6
70707: PPUSH
70708: CALL_OW 428
70712: OR
70713: IFFALSE 70717
// exit ;
70715: GO 71437
// uc_side := your_side ;
70717: LD_ADDR_OWVAR 20
70721: PUSH
70722: LD_OWVAR 2
70726: ST_TO_ADDR
// uc_nation := nation ;
70727: LD_ADDR_OWVAR 21
70731: PUSH
70732: LD_VAR 0 1
70736: ST_TO_ADDR
// bc_level = 1 ;
70737: LD_ADDR_OWVAR 43
70741: PUSH
70742: LD_INT 1
70744: ST_TO_ADDR
// case btype of 1 :
70745: LD_VAR 0 2
70749: PUSH
70750: LD_INT 1
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70758
70756: GO 70769
70758: POP
// bc_type := b_depot ; 2 :
70759: LD_ADDR_OWVAR 42
70763: PUSH
70764: LD_INT 0
70766: ST_TO_ADDR
70767: GO 71381
70769: LD_INT 2
70771: DOUBLE
70772: EQUAL
70773: IFTRUE 70777
70775: GO 70788
70777: POP
// bc_type := b_warehouse ; 3 :
70778: LD_ADDR_OWVAR 42
70782: PUSH
70783: LD_INT 1
70785: ST_TO_ADDR
70786: GO 71381
70788: LD_INT 3
70790: DOUBLE
70791: EQUAL
70792: IFTRUE 70796
70794: GO 70807
70796: POP
// bc_type := b_lab ; 4 .. 9 :
70797: LD_ADDR_OWVAR 42
70801: PUSH
70802: LD_INT 6
70804: ST_TO_ADDR
70805: GO 71381
70807: LD_INT 4
70809: DOUBLE
70810: GREATEREQUAL
70811: IFFALSE 70819
70813: LD_INT 9
70815: DOUBLE
70816: LESSEQUAL
70817: IFTRUE 70821
70819: GO 70873
70821: POP
// begin bc_type := b_lab_half ;
70822: LD_ADDR_OWVAR 42
70826: PUSH
70827: LD_INT 7
70829: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70830: LD_ADDR_OWVAR 44
70834: PUSH
70835: LD_INT 10
70837: PUSH
70838: LD_INT 11
70840: PUSH
70841: LD_INT 12
70843: PUSH
70844: LD_INT 15
70846: PUSH
70847: LD_INT 14
70849: PUSH
70850: LD_INT 13
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: PUSH
70861: LD_VAR 0 2
70865: PUSH
70866: LD_INT 3
70868: MINUS
70869: ARRAY
70870: ST_TO_ADDR
// end ; 10 .. 13 :
70871: GO 71381
70873: LD_INT 10
70875: DOUBLE
70876: GREATEREQUAL
70877: IFFALSE 70885
70879: LD_INT 13
70881: DOUBLE
70882: LESSEQUAL
70883: IFTRUE 70887
70885: GO 70964
70887: POP
// begin bc_type := b_lab_full ;
70888: LD_ADDR_OWVAR 42
70892: PUSH
70893: LD_INT 8
70895: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70896: LD_ADDR_OWVAR 44
70900: PUSH
70901: LD_INT 10
70903: PUSH
70904: LD_INT 12
70906: PUSH
70907: LD_INT 14
70909: PUSH
70910: LD_INT 13
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: PUSH
70919: LD_VAR 0 2
70923: PUSH
70924: LD_INT 9
70926: MINUS
70927: ARRAY
70928: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70929: LD_ADDR_OWVAR 45
70933: PUSH
70934: LD_INT 11
70936: PUSH
70937: LD_INT 15
70939: PUSH
70940: LD_INT 12
70942: PUSH
70943: LD_INT 15
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: PUSH
70952: LD_VAR 0 2
70956: PUSH
70957: LD_INT 9
70959: MINUS
70960: ARRAY
70961: ST_TO_ADDR
// end ; 14 :
70962: GO 71381
70964: LD_INT 14
70966: DOUBLE
70967: EQUAL
70968: IFTRUE 70972
70970: GO 70983
70972: POP
// bc_type := b_workshop ; 15 :
70973: LD_ADDR_OWVAR 42
70977: PUSH
70978: LD_INT 2
70980: ST_TO_ADDR
70981: GO 71381
70983: LD_INT 15
70985: DOUBLE
70986: EQUAL
70987: IFTRUE 70991
70989: GO 71002
70991: POP
// bc_type := b_factory ; 16 :
70992: LD_ADDR_OWVAR 42
70996: PUSH
70997: LD_INT 3
70999: ST_TO_ADDR
71000: GO 71381
71002: LD_INT 16
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71010
71008: GO 71021
71010: POP
// bc_type := b_ext_gun ; 17 :
71011: LD_ADDR_OWVAR 42
71015: PUSH
71016: LD_INT 17
71018: ST_TO_ADDR
71019: GO 71381
71021: LD_INT 17
71023: DOUBLE
71024: EQUAL
71025: IFTRUE 71029
71027: GO 71057
71029: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71030: LD_ADDR_OWVAR 42
71034: PUSH
71035: LD_INT 19
71037: PUSH
71038: LD_INT 23
71040: PUSH
71041: LD_INT 19
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: PUSH
71049: LD_VAR 0 1
71053: ARRAY
71054: ST_TO_ADDR
71055: GO 71381
71057: LD_INT 18
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71065
71063: GO 71076
71065: POP
// bc_type := b_ext_radar ; 19 :
71066: LD_ADDR_OWVAR 42
71070: PUSH
71071: LD_INT 20
71073: ST_TO_ADDR
71074: GO 71381
71076: LD_INT 19
71078: DOUBLE
71079: EQUAL
71080: IFTRUE 71084
71082: GO 71095
71084: POP
// bc_type := b_ext_radio ; 20 :
71085: LD_ADDR_OWVAR 42
71089: PUSH
71090: LD_INT 22
71092: ST_TO_ADDR
71093: GO 71381
71095: LD_INT 20
71097: DOUBLE
71098: EQUAL
71099: IFTRUE 71103
71101: GO 71114
71103: POP
// bc_type := b_ext_siberium ; 21 :
71104: LD_ADDR_OWVAR 42
71108: PUSH
71109: LD_INT 21
71111: ST_TO_ADDR
71112: GO 71381
71114: LD_INT 21
71116: DOUBLE
71117: EQUAL
71118: IFTRUE 71122
71120: GO 71133
71122: POP
// bc_type := b_ext_computer ; 22 :
71123: LD_ADDR_OWVAR 42
71127: PUSH
71128: LD_INT 24
71130: ST_TO_ADDR
71131: GO 71381
71133: LD_INT 22
71135: DOUBLE
71136: EQUAL
71137: IFTRUE 71141
71139: GO 71152
71141: POP
// bc_type := b_ext_track ; 23 :
71142: LD_ADDR_OWVAR 42
71146: PUSH
71147: LD_INT 16
71149: ST_TO_ADDR
71150: GO 71381
71152: LD_INT 23
71154: DOUBLE
71155: EQUAL
71156: IFTRUE 71160
71158: GO 71171
71160: POP
// bc_type := b_ext_laser ; 24 :
71161: LD_ADDR_OWVAR 42
71165: PUSH
71166: LD_INT 25
71168: ST_TO_ADDR
71169: GO 71381
71171: LD_INT 24
71173: DOUBLE
71174: EQUAL
71175: IFTRUE 71179
71177: GO 71190
71179: POP
// bc_type := b_control_tower ; 25 :
71180: LD_ADDR_OWVAR 42
71184: PUSH
71185: LD_INT 36
71187: ST_TO_ADDR
71188: GO 71381
71190: LD_INT 25
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71198
71196: GO 71209
71198: POP
// bc_type := b_breastwork ; 26 :
71199: LD_ADDR_OWVAR 42
71203: PUSH
71204: LD_INT 31
71206: ST_TO_ADDR
71207: GO 71381
71209: LD_INT 26
71211: DOUBLE
71212: EQUAL
71213: IFTRUE 71217
71215: GO 71228
71217: POP
// bc_type := b_bunker ; 27 :
71218: LD_ADDR_OWVAR 42
71222: PUSH
71223: LD_INT 32
71225: ST_TO_ADDR
71226: GO 71381
71228: LD_INT 27
71230: DOUBLE
71231: EQUAL
71232: IFTRUE 71236
71234: GO 71247
71236: POP
// bc_type := b_turret ; 28 :
71237: LD_ADDR_OWVAR 42
71241: PUSH
71242: LD_INT 33
71244: ST_TO_ADDR
71245: GO 71381
71247: LD_INT 28
71249: DOUBLE
71250: EQUAL
71251: IFTRUE 71255
71253: GO 71266
71255: POP
// bc_type := b_armoury ; 29 :
71256: LD_ADDR_OWVAR 42
71260: PUSH
71261: LD_INT 4
71263: ST_TO_ADDR
71264: GO 71381
71266: LD_INT 29
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71274
71272: GO 71285
71274: POP
// bc_type := b_barracks ; 30 :
71275: LD_ADDR_OWVAR 42
71279: PUSH
71280: LD_INT 5
71282: ST_TO_ADDR
71283: GO 71381
71285: LD_INT 30
71287: DOUBLE
71288: EQUAL
71289: IFTRUE 71293
71291: GO 71304
71293: POP
// bc_type := b_solar_power ; 31 :
71294: LD_ADDR_OWVAR 42
71298: PUSH
71299: LD_INT 27
71301: ST_TO_ADDR
71302: GO 71381
71304: LD_INT 31
71306: DOUBLE
71307: EQUAL
71308: IFTRUE 71312
71310: GO 71323
71312: POP
// bc_type := b_oil_power ; 32 :
71313: LD_ADDR_OWVAR 42
71317: PUSH
71318: LD_INT 26
71320: ST_TO_ADDR
71321: GO 71381
71323: LD_INT 32
71325: DOUBLE
71326: EQUAL
71327: IFTRUE 71331
71329: GO 71342
71331: POP
// bc_type := b_siberite_power ; 33 :
71332: LD_ADDR_OWVAR 42
71336: PUSH
71337: LD_INT 28
71339: ST_TO_ADDR
71340: GO 71381
71342: LD_INT 33
71344: DOUBLE
71345: EQUAL
71346: IFTRUE 71350
71348: GO 71361
71350: POP
// bc_type := b_oil_mine ; 34 :
71351: LD_ADDR_OWVAR 42
71355: PUSH
71356: LD_INT 29
71358: ST_TO_ADDR
71359: GO 71381
71361: LD_INT 34
71363: DOUBLE
71364: EQUAL
71365: IFTRUE 71369
71367: GO 71380
71369: POP
// bc_type := b_siberite_mine ; end ;
71370: LD_ADDR_OWVAR 42
71374: PUSH
71375: LD_INT 30
71377: ST_TO_ADDR
71378: GO 71381
71380: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71381: LD_ADDR_VAR 0 8
71385: PUSH
71386: LD_VAR 0 5
71390: PPUSH
71391: LD_VAR 0 6
71395: PPUSH
71396: LD_VAR 0 3
71400: PPUSH
71401: CALL_OW 47
71405: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71406: LD_OWVAR 42
71410: PUSH
71411: LD_INT 32
71413: PUSH
71414: LD_INT 33
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: IN
71421: IFFALSE 71437
// PlaceWeaponTurret ( b , weapon ) ;
71423: LD_VAR 0 8
71427: PPUSH
71428: LD_VAR 0 4
71432: PPUSH
71433: CALL_OW 431
// end ;
71437: LD_VAR 0 7
71441: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71442: LD_INT 0
71444: PPUSH
71445: PPUSH
71446: PPUSH
71447: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71448: LD_ADDR_VAR 0 4
71452: PUSH
71453: LD_INT 22
71455: PUSH
71456: LD_OWVAR 2
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 2
71467: PUSH
71468: LD_INT 30
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 30
71480: PUSH
71481: LD_INT 1
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: LIST
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PPUSH
71497: CALL_OW 69
71501: ST_TO_ADDR
// if not tmp then
71502: LD_VAR 0 4
71506: NOT
71507: IFFALSE 71511
// exit ;
71509: GO 71570
// for i in tmp do
71511: LD_ADDR_VAR 0 2
71515: PUSH
71516: LD_VAR 0 4
71520: PUSH
71521: FOR_IN
71522: IFFALSE 71568
// for j = 1 to 3 do
71524: LD_ADDR_VAR 0 3
71528: PUSH
71529: DOUBLE
71530: LD_INT 1
71532: DEC
71533: ST_TO_ADDR
71534: LD_INT 3
71536: PUSH
71537: FOR_TO
71538: IFFALSE 71564
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71540: LD_VAR 0 2
71544: PPUSH
71545: CALL_OW 274
71549: PPUSH
71550: LD_VAR 0 3
71554: PPUSH
71555: LD_INT 99999
71557: PPUSH
71558: CALL_OW 277
71562: GO 71537
71564: POP
71565: POP
71566: GO 71521
71568: POP
71569: POP
// end ;
71570: LD_VAR 0 1
71574: RET
// export function hHackSetLevel10 ; var i , j ; begin
71575: LD_INT 0
71577: PPUSH
71578: PPUSH
71579: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71580: LD_ADDR_VAR 0 2
71584: PUSH
71585: LD_INT 21
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PPUSH
71595: CALL_OW 69
71599: PUSH
71600: FOR_IN
71601: IFFALSE 71653
// if IsSelected ( i ) then
71603: LD_VAR 0 2
71607: PPUSH
71608: CALL_OW 306
71612: IFFALSE 71651
// begin for j := 1 to 4 do
71614: LD_ADDR_VAR 0 3
71618: PUSH
71619: DOUBLE
71620: LD_INT 1
71622: DEC
71623: ST_TO_ADDR
71624: LD_INT 4
71626: PUSH
71627: FOR_TO
71628: IFFALSE 71649
// SetSkill ( i , j , 10 ) ;
71630: LD_VAR 0 2
71634: PPUSH
71635: LD_VAR 0 3
71639: PPUSH
71640: LD_INT 10
71642: PPUSH
71643: CALL_OW 237
71647: GO 71627
71649: POP
71650: POP
// end ;
71651: GO 71600
71653: POP
71654: POP
// end ;
71655: LD_VAR 0 1
71659: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71660: LD_INT 0
71662: PPUSH
71663: PPUSH
71664: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71665: LD_ADDR_VAR 0 2
71669: PUSH
71670: LD_INT 22
71672: PUSH
71673: LD_OWVAR 2
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 21
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PPUSH
71696: CALL_OW 69
71700: PUSH
71701: FOR_IN
71702: IFFALSE 71743
// begin for j := 1 to 4 do
71704: LD_ADDR_VAR 0 3
71708: PUSH
71709: DOUBLE
71710: LD_INT 1
71712: DEC
71713: ST_TO_ADDR
71714: LD_INT 4
71716: PUSH
71717: FOR_TO
71718: IFFALSE 71739
// SetSkill ( i , j , 10 ) ;
71720: LD_VAR 0 2
71724: PPUSH
71725: LD_VAR 0 3
71729: PPUSH
71730: LD_INT 10
71732: PPUSH
71733: CALL_OW 237
71737: GO 71717
71739: POP
71740: POP
// end ;
71741: GO 71701
71743: POP
71744: POP
// end ;
71745: LD_VAR 0 1
71749: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71750: LD_INT 0
71752: PPUSH
// uc_side := your_side ;
71753: LD_ADDR_OWVAR 20
71757: PUSH
71758: LD_OWVAR 2
71762: ST_TO_ADDR
// uc_nation := nation ;
71763: LD_ADDR_OWVAR 21
71767: PUSH
71768: LD_VAR 0 1
71772: ST_TO_ADDR
// InitHc ;
71773: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71777: LD_INT 0
71779: PPUSH
71780: LD_VAR 0 2
71784: PPUSH
71785: LD_VAR 0 3
71789: PPUSH
71790: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71794: LD_VAR 0 4
71798: PPUSH
71799: LD_VAR 0 5
71803: PPUSH
71804: CALL_OW 428
71808: PUSH
71809: LD_INT 0
71811: EQUAL
71812: IFFALSE 71836
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71814: CALL_OW 44
71818: PPUSH
71819: LD_VAR 0 4
71823: PPUSH
71824: LD_VAR 0 5
71828: PPUSH
71829: LD_INT 1
71831: PPUSH
71832: CALL_OW 48
// end ;
71836: LD_VAR 0 6
71840: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71841: LD_INT 0
71843: PPUSH
71844: PPUSH
// uc_side := your_side ;
71845: LD_ADDR_OWVAR 20
71849: PUSH
71850: LD_OWVAR 2
71854: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71855: LD_VAR 0 1
71859: PUSH
71860: LD_INT 1
71862: PUSH
71863: LD_INT 2
71865: PUSH
71866: LD_INT 3
71868: PUSH
71869: LD_INT 4
71871: PUSH
71872: LD_INT 5
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: IN
71882: IFFALSE 71894
// uc_nation := nation_american else
71884: LD_ADDR_OWVAR 21
71888: PUSH
71889: LD_INT 1
71891: ST_TO_ADDR
71892: GO 71937
// if chassis in [ 11 , 12 , 13 , 14 ] then
71894: LD_VAR 0 1
71898: PUSH
71899: LD_INT 11
71901: PUSH
71902: LD_INT 12
71904: PUSH
71905: LD_INT 13
71907: PUSH
71908: LD_INT 14
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: IN
71917: IFFALSE 71929
// uc_nation := nation_arabian else
71919: LD_ADDR_OWVAR 21
71923: PUSH
71924: LD_INT 2
71926: ST_TO_ADDR
71927: GO 71937
// uc_nation := nation_russian ;
71929: LD_ADDR_OWVAR 21
71933: PUSH
71934: LD_INT 3
71936: ST_TO_ADDR
// vc_chassis := chassis ;
71937: LD_ADDR_OWVAR 37
71941: PUSH
71942: LD_VAR 0 1
71946: ST_TO_ADDR
// vc_engine := engine ;
71947: LD_ADDR_OWVAR 39
71951: PUSH
71952: LD_VAR 0 2
71956: ST_TO_ADDR
// vc_control := control ;
71957: LD_ADDR_OWVAR 38
71961: PUSH
71962: LD_VAR 0 3
71966: ST_TO_ADDR
// vc_weapon := weapon ;
71967: LD_ADDR_OWVAR 40
71971: PUSH
71972: LD_VAR 0 4
71976: ST_TO_ADDR
// un := CreateVehicle ;
71977: LD_ADDR_VAR 0 8
71981: PUSH
71982: CALL_OW 45
71986: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71987: LD_VAR 0 8
71991: PPUSH
71992: LD_INT 0
71994: PPUSH
71995: LD_INT 5
71997: PPUSH
71998: CALL_OW 12
72002: PPUSH
72003: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72007: LD_VAR 0 8
72011: PPUSH
72012: LD_VAR 0 5
72016: PPUSH
72017: LD_VAR 0 6
72021: PPUSH
72022: LD_INT 1
72024: PPUSH
72025: CALL_OW 48
// end ;
72029: LD_VAR 0 7
72033: RET
// export hInvincible ; every 1 do
72034: GO 72036
72036: DISABLE
// hInvincible := [ ] ;
72037: LD_ADDR_EXP 106
72041: PUSH
72042: EMPTY
72043: ST_TO_ADDR
72044: END
// every 10 do var i ;
72045: GO 72047
72047: DISABLE
72048: LD_INT 0
72050: PPUSH
// begin enable ;
72051: ENABLE
// if not hInvincible then
72052: LD_EXP 106
72056: NOT
72057: IFFALSE 72061
// exit ;
72059: GO 72105
// for i in hInvincible do
72061: LD_ADDR_VAR 0 1
72065: PUSH
72066: LD_EXP 106
72070: PUSH
72071: FOR_IN
72072: IFFALSE 72103
// if GetLives ( i ) < 1000 then
72074: LD_VAR 0 1
72078: PPUSH
72079: CALL_OW 256
72083: PUSH
72084: LD_INT 1000
72086: LESS
72087: IFFALSE 72101
// SetLives ( i , 1000 ) ;
72089: LD_VAR 0 1
72093: PPUSH
72094: LD_INT 1000
72096: PPUSH
72097: CALL_OW 234
72101: GO 72071
72103: POP
72104: POP
// end ;
72105: PPOPN 1
72107: END
// export function hHackInvincible ; var i ; begin
72108: LD_INT 0
72110: PPUSH
72111: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72112: LD_ADDR_VAR 0 2
72116: PUSH
72117: LD_INT 2
72119: PUSH
72120: LD_INT 21
72122: PUSH
72123: LD_INT 1
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 21
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: PPUSH
72145: CALL_OW 69
72149: PUSH
72150: FOR_IN
72151: IFFALSE 72212
// if IsSelected ( i ) then
72153: LD_VAR 0 2
72157: PPUSH
72158: CALL_OW 306
72162: IFFALSE 72210
// begin if i in hInvincible then
72164: LD_VAR 0 2
72168: PUSH
72169: LD_EXP 106
72173: IN
72174: IFFALSE 72194
// hInvincible := hInvincible diff i else
72176: LD_ADDR_EXP 106
72180: PUSH
72181: LD_EXP 106
72185: PUSH
72186: LD_VAR 0 2
72190: DIFF
72191: ST_TO_ADDR
72192: GO 72210
// hInvincible := hInvincible union i ;
72194: LD_ADDR_EXP 106
72198: PUSH
72199: LD_EXP 106
72203: PUSH
72204: LD_VAR 0 2
72208: UNION
72209: ST_TO_ADDR
// end ;
72210: GO 72150
72212: POP
72213: POP
// end ;
72214: LD_VAR 0 1
72218: RET
// export function hHackInvisible ; var i , j ; begin
72219: LD_INT 0
72221: PPUSH
72222: PPUSH
72223: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72224: LD_ADDR_VAR 0 2
72228: PUSH
72229: LD_INT 21
72231: PUSH
72232: LD_INT 1
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PPUSH
72239: CALL_OW 69
72243: PUSH
72244: FOR_IN
72245: IFFALSE 72269
// if IsSelected ( i ) then
72247: LD_VAR 0 2
72251: PPUSH
72252: CALL_OW 306
72256: IFFALSE 72267
// ComForceInvisible ( i ) ;
72258: LD_VAR 0 2
72262: PPUSH
72263: CALL_OW 496
72267: GO 72244
72269: POP
72270: POP
// end ;
72271: LD_VAR 0 1
72275: RET
// export function hHackChangeYourSide ; begin
72276: LD_INT 0
72278: PPUSH
// if your_side = 8 then
72279: LD_OWVAR 2
72283: PUSH
72284: LD_INT 8
72286: EQUAL
72287: IFFALSE 72299
// your_side := 0 else
72289: LD_ADDR_OWVAR 2
72293: PUSH
72294: LD_INT 0
72296: ST_TO_ADDR
72297: GO 72313
// your_side := your_side + 1 ;
72299: LD_ADDR_OWVAR 2
72303: PUSH
72304: LD_OWVAR 2
72308: PUSH
72309: LD_INT 1
72311: PLUS
72312: ST_TO_ADDR
// end ;
72313: LD_VAR 0 1
72317: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72318: LD_INT 0
72320: PPUSH
72321: PPUSH
72322: PPUSH
// for i in all_units do
72323: LD_ADDR_VAR 0 2
72327: PUSH
72328: LD_OWVAR 3
72332: PUSH
72333: FOR_IN
72334: IFFALSE 72412
// if IsSelected ( i ) then
72336: LD_VAR 0 2
72340: PPUSH
72341: CALL_OW 306
72345: IFFALSE 72410
// begin j := GetSide ( i ) ;
72347: LD_ADDR_VAR 0 3
72351: PUSH
72352: LD_VAR 0 2
72356: PPUSH
72357: CALL_OW 255
72361: ST_TO_ADDR
// if j = 8 then
72362: LD_VAR 0 3
72366: PUSH
72367: LD_INT 8
72369: EQUAL
72370: IFFALSE 72382
// j := 0 else
72372: LD_ADDR_VAR 0 3
72376: PUSH
72377: LD_INT 0
72379: ST_TO_ADDR
72380: GO 72396
// j := j + 1 ;
72382: LD_ADDR_VAR 0 3
72386: PUSH
72387: LD_VAR 0 3
72391: PUSH
72392: LD_INT 1
72394: PLUS
72395: ST_TO_ADDR
// SetSide ( i , j ) ;
72396: LD_VAR 0 2
72400: PPUSH
72401: LD_VAR 0 3
72405: PPUSH
72406: CALL_OW 235
// end ;
72410: GO 72333
72412: POP
72413: POP
// end ;
72414: LD_VAR 0 1
72418: RET
// export function hHackFog ; begin
72419: LD_INT 0
72421: PPUSH
// FogOff ( true ) ;
72422: LD_INT 1
72424: PPUSH
72425: CALL_OW 344
// end ;
72429: LD_VAR 0 1
72433: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72434: LD_INT 0
72436: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72437: LD_VAR 0 1
72441: PPUSH
72442: LD_VAR 0 2
72446: PPUSH
72447: LD_VAR 0 3
72451: PPUSH
72452: LD_INT 1
72454: PPUSH
72455: LD_INT 1
72457: PPUSH
72458: CALL_OW 483
// CenterOnXY ( x , y ) ;
72462: LD_VAR 0 2
72466: PPUSH
72467: LD_VAR 0 3
72471: PPUSH
72472: CALL_OW 84
// end ;
72476: LD_VAR 0 4
72480: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72481: LD_INT 0
72483: PPUSH
72484: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72485: LD_VAR 0 1
72489: NOT
72490: PUSH
72491: LD_VAR 0 2
72495: PPUSH
72496: LD_VAR 0 3
72500: PPUSH
72501: CALL_OW 488
72505: NOT
72506: OR
72507: PUSH
72508: LD_VAR 0 1
72512: PPUSH
72513: CALL_OW 266
72517: PUSH
72518: LD_INT 3
72520: NONEQUAL
72521: PUSH
72522: LD_VAR 0 1
72526: PPUSH
72527: CALL_OW 247
72531: PUSH
72532: LD_INT 1
72534: EQUAL
72535: NOT
72536: AND
72537: OR
72538: IFFALSE 72542
// exit ;
72540: GO 72691
// if GetType ( factory ) = unit_human then
72542: LD_VAR 0 1
72546: PPUSH
72547: CALL_OW 247
72551: PUSH
72552: LD_INT 1
72554: EQUAL
72555: IFFALSE 72572
// factory := IsInUnit ( factory ) ;
72557: LD_ADDR_VAR 0 1
72561: PUSH
72562: LD_VAR 0 1
72566: PPUSH
72567: CALL_OW 310
72571: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72572: LD_VAR 0 1
72576: PPUSH
72577: CALL_OW 266
72581: PUSH
72582: LD_INT 3
72584: NONEQUAL
72585: IFFALSE 72589
// exit ;
72587: GO 72691
// if HexInfo ( x , y ) = factory then
72589: LD_VAR 0 2
72593: PPUSH
72594: LD_VAR 0 3
72598: PPUSH
72599: CALL_OW 428
72603: PUSH
72604: LD_VAR 0 1
72608: EQUAL
72609: IFFALSE 72636
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72611: LD_ADDR_EXP 107
72615: PUSH
72616: LD_EXP 107
72620: PPUSH
72621: LD_VAR 0 1
72625: PPUSH
72626: LD_INT 0
72628: PPUSH
72629: CALL_OW 1
72633: ST_TO_ADDR
72634: GO 72687
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72636: LD_ADDR_EXP 107
72640: PUSH
72641: LD_EXP 107
72645: PPUSH
72646: LD_VAR 0 1
72650: PPUSH
72651: LD_VAR 0 1
72655: PPUSH
72656: CALL_OW 255
72660: PUSH
72661: LD_VAR 0 1
72665: PUSH
72666: LD_VAR 0 2
72670: PUSH
72671: LD_VAR 0 3
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: PPUSH
72682: CALL_OW 1
72686: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72687: CALL 72696 0 0
// end ;
72691: LD_VAR 0 4
72695: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72696: LD_INT 0
72698: PPUSH
72699: PPUSH
72700: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72701: LD_STRING resetFactoryWaypoint();
72703: PPUSH
72704: CALL_OW 559
// if factoryWaypoints then
72708: LD_EXP 107
72712: IFFALSE 72838
// begin list := PrepareArray ( factoryWaypoints ) ;
72714: LD_ADDR_VAR 0 3
72718: PUSH
72719: LD_EXP 107
72723: PPUSH
72724: CALL 58092 0 1
72728: ST_TO_ADDR
// for i := 1 to list do
72729: LD_ADDR_VAR 0 2
72733: PUSH
72734: DOUBLE
72735: LD_INT 1
72737: DEC
72738: ST_TO_ADDR
72739: LD_VAR 0 3
72743: PUSH
72744: FOR_TO
72745: IFFALSE 72836
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72747: LD_STRING setFactoryWaypointXY(
72749: PUSH
72750: LD_VAR 0 3
72754: PUSH
72755: LD_VAR 0 2
72759: ARRAY
72760: PUSH
72761: LD_INT 1
72763: ARRAY
72764: STR
72765: PUSH
72766: LD_STRING ,
72768: STR
72769: PUSH
72770: LD_VAR 0 3
72774: PUSH
72775: LD_VAR 0 2
72779: ARRAY
72780: PUSH
72781: LD_INT 2
72783: ARRAY
72784: STR
72785: PUSH
72786: LD_STRING ,
72788: STR
72789: PUSH
72790: LD_VAR 0 3
72794: PUSH
72795: LD_VAR 0 2
72799: ARRAY
72800: PUSH
72801: LD_INT 3
72803: ARRAY
72804: STR
72805: PUSH
72806: LD_STRING ,
72808: STR
72809: PUSH
72810: LD_VAR 0 3
72814: PUSH
72815: LD_VAR 0 2
72819: ARRAY
72820: PUSH
72821: LD_INT 4
72823: ARRAY
72824: STR
72825: PUSH
72826: LD_STRING )
72828: STR
72829: PPUSH
72830: CALL_OW 559
72834: GO 72744
72836: POP
72837: POP
// end ; end ;
72838: LD_VAR 0 1
72842: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72843: LD_INT 0
72845: PPUSH
// if HexInfo ( x , y ) = warehouse then
72846: LD_VAR 0 2
72850: PPUSH
72851: LD_VAR 0 3
72855: PPUSH
72856: CALL_OW 428
72860: PUSH
72861: LD_VAR 0 1
72865: EQUAL
72866: IFFALSE 72893
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72868: LD_ADDR_EXP 108
72872: PUSH
72873: LD_EXP 108
72877: PPUSH
72878: LD_VAR 0 1
72882: PPUSH
72883: LD_INT 0
72885: PPUSH
72886: CALL_OW 1
72890: ST_TO_ADDR
72891: GO 72944
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72893: LD_ADDR_EXP 108
72897: PUSH
72898: LD_EXP 108
72902: PPUSH
72903: LD_VAR 0 1
72907: PPUSH
72908: LD_VAR 0 1
72912: PPUSH
72913: CALL_OW 255
72917: PUSH
72918: LD_VAR 0 1
72922: PUSH
72923: LD_VAR 0 2
72927: PUSH
72928: LD_VAR 0 3
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: PPUSH
72939: CALL_OW 1
72943: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72944: CALL 72953 0 0
// end ;
72948: LD_VAR 0 4
72952: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72953: LD_INT 0
72955: PPUSH
72956: PPUSH
72957: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72958: LD_STRING resetWarehouseGatheringPoints();
72960: PPUSH
72961: CALL_OW 559
// if warehouseGatheringPoints then
72965: LD_EXP 108
72969: IFFALSE 73095
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72971: LD_ADDR_VAR 0 3
72975: PUSH
72976: LD_EXP 108
72980: PPUSH
72981: CALL 58092 0 1
72985: ST_TO_ADDR
// for i := 1 to list do
72986: LD_ADDR_VAR 0 2
72990: PUSH
72991: DOUBLE
72992: LD_INT 1
72994: DEC
72995: ST_TO_ADDR
72996: LD_VAR 0 3
73000: PUSH
73001: FOR_TO
73002: IFFALSE 73093
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73004: LD_STRING setWarehouseGatheringPointXY(
73006: PUSH
73007: LD_VAR 0 3
73011: PUSH
73012: LD_VAR 0 2
73016: ARRAY
73017: PUSH
73018: LD_INT 1
73020: ARRAY
73021: STR
73022: PUSH
73023: LD_STRING ,
73025: STR
73026: PUSH
73027: LD_VAR 0 3
73031: PUSH
73032: LD_VAR 0 2
73036: ARRAY
73037: PUSH
73038: LD_INT 2
73040: ARRAY
73041: STR
73042: PUSH
73043: LD_STRING ,
73045: STR
73046: PUSH
73047: LD_VAR 0 3
73051: PUSH
73052: LD_VAR 0 2
73056: ARRAY
73057: PUSH
73058: LD_INT 3
73060: ARRAY
73061: STR
73062: PUSH
73063: LD_STRING ,
73065: STR
73066: PUSH
73067: LD_VAR 0 3
73071: PUSH
73072: LD_VAR 0 2
73076: ARRAY
73077: PUSH
73078: LD_INT 4
73080: ARRAY
73081: STR
73082: PUSH
73083: LD_STRING )
73085: STR
73086: PPUSH
73087: CALL_OW 559
73091: GO 73001
73093: POP
73094: POP
// end ; end ;
73095: LD_VAR 0 1
73099: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73100: LD_EXP 108
73104: IFFALSE 73791
73106: GO 73108
73108: DISABLE
73109: LD_INT 0
73111: PPUSH
73112: PPUSH
73113: PPUSH
73114: PPUSH
73115: PPUSH
73116: PPUSH
73117: PPUSH
73118: PPUSH
73119: PPUSH
// begin enable ;
73120: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73121: LD_ADDR_VAR 0 3
73125: PUSH
73126: LD_EXP 108
73130: PPUSH
73131: CALL 58092 0 1
73135: ST_TO_ADDR
// if not list then
73136: LD_VAR 0 3
73140: NOT
73141: IFFALSE 73145
// exit ;
73143: GO 73791
// for i := 1 to list do
73145: LD_ADDR_VAR 0 1
73149: PUSH
73150: DOUBLE
73151: LD_INT 1
73153: DEC
73154: ST_TO_ADDR
73155: LD_VAR 0 3
73159: PUSH
73160: FOR_TO
73161: IFFALSE 73789
// begin depot := list [ i ] [ 2 ] ;
73163: LD_ADDR_VAR 0 8
73167: PUSH
73168: LD_VAR 0 3
73172: PUSH
73173: LD_VAR 0 1
73177: ARRAY
73178: PUSH
73179: LD_INT 2
73181: ARRAY
73182: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73183: LD_ADDR_VAR 0 5
73187: PUSH
73188: LD_VAR 0 3
73192: PUSH
73193: LD_VAR 0 1
73197: ARRAY
73198: PUSH
73199: LD_INT 1
73201: ARRAY
73202: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73203: LD_VAR 0 8
73207: PPUSH
73208: CALL_OW 301
73212: PUSH
73213: LD_VAR 0 5
73217: PUSH
73218: LD_VAR 0 8
73222: PPUSH
73223: CALL_OW 255
73227: NONEQUAL
73228: OR
73229: IFFALSE 73258
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73231: LD_ADDR_EXP 108
73235: PUSH
73236: LD_EXP 108
73240: PPUSH
73241: LD_VAR 0 8
73245: PPUSH
73246: LD_INT 0
73248: PPUSH
73249: CALL_OW 1
73253: ST_TO_ADDR
// exit ;
73254: POP
73255: POP
73256: GO 73791
// end ; x := list [ i ] [ 3 ] ;
73258: LD_ADDR_VAR 0 6
73262: PUSH
73263: LD_VAR 0 3
73267: PUSH
73268: LD_VAR 0 1
73272: ARRAY
73273: PUSH
73274: LD_INT 3
73276: ARRAY
73277: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73278: LD_ADDR_VAR 0 7
73282: PUSH
73283: LD_VAR 0 3
73287: PUSH
73288: LD_VAR 0 1
73292: ARRAY
73293: PUSH
73294: LD_INT 4
73296: ARRAY
73297: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73298: LD_ADDR_VAR 0 9
73302: PUSH
73303: LD_VAR 0 6
73307: PPUSH
73308: LD_VAR 0 7
73312: PPUSH
73313: LD_INT 16
73315: PPUSH
73316: CALL 56676 0 3
73320: ST_TO_ADDR
// if not cratesNearbyPoint then
73321: LD_VAR 0 9
73325: NOT
73326: IFFALSE 73332
// exit ;
73328: POP
73329: POP
73330: GO 73791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73332: LD_ADDR_VAR 0 4
73336: PUSH
73337: LD_INT 22
73339: PUSH
73340: LD_VAR 0 5
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 3
73351: PUSH
73352: LD_INT 60
73354: PUSH
73355: EMPTY
73356: LIST
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 91
73364: PUSH
73365: LD_VAR 0 8
73369: PUSH
73370: LD_INT 6
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 2
73380: PUSH
73381: LD_INT 25
73383: PUSH
73384: LD_INT 2
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 25
73393: PUSH
73394: LD_INT 16
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: LIST
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: PPUSH
73412: CALL_OW 69
73416: PUSH
73417: LD_VAR 0 8
73421: PPUSH
73422: CALL_OW 313
73426: PPUSH
73427: LD_INT 3
73429: PUSH
73430: LD_INT 60
73432: PUSH
73433: EMPTY
73434: LIST
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 2
73442: PUSH
73443: LD_INT 25
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 25
73455: PUSH
73456: LD_INT 16
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: LIST
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PPUSH
73472: CALL_OW 72
73476: UNION
73477: ST_TO_ADDR
// if tmp then
73478: LD_VAR 0 4
73482: IFFALSE 73562
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73484: LD_ADDR_VAR 0 4
73488: PUSH
73489: LD_VAR 0 4
73493: PPUSH
73494: LD_INT 3
73496: PPUSH
73497: CALL 54643 0 2
73501: ST_TO_ADDR
// for j in tmp do
73502: LD_ADDR_VAR 0 2
73506: PUSH
73507: LD_VAR 0 4
73511: PUSH
73512: FOR_IN
73513: IFFALSE 73556
// begin if IsInUnit ( j ) then
73515: LD_VAR 0 2
73519: PPUSH
73520: CALL_OW 310
73524: IFFALSE 73535
// ComExit ( j ) ;
73526: LD_VAR 0 2
73530: PPUSH
73531: CALL 54726 0 1
// AddComCollect ( j , x , y ) ;
73535: LD_VAR 0 2
73539: PPUSH
73540: LD_VAR 0 6
73544: PPUSH
73545: LD_VAR 0 7
73549: PPUSH
73550: CALL_OW 177
// end ;
73554: GO 73512
73556: POP
73557: POP
// exit ;
73558: POP
73559: POP
73560: GO 73791
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73562: LD_ADDR_VAR 0 4
73566: PUSH
73567: LD_INT 22
73569: PUSH
73570: LD_VAR 0 5
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 91
73581: PUSH
73582: LD_VAR 0 8
73586: PUSH
73587: LD_INT 8
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 2
73597: PUSH
73598: LD_INT 34
73600: PUSH
73601: LD_INT 12
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 34
73610: PUSH
73611: LD_INT 51
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 34
73620: PUSH
73621: LD_INT 32
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 34
73630: PUSH
73631: LD_EXP 111
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: LIST
73651: PPUSH
73652: CALL_OW 69
73656: ST_TO_ADDR
// if tmp then
73657: LD_VAR 0 4
73661: IFFALSE 73787
// begin for j in tmp do
73663: LD_ADDR_VAR 0 2
73667: PUSH
73668: LD_VAR 0 4
73672: PUSH
73673: FOR_IN
73674: IFFALSE 73785
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73676: LD_VAR 0 2
73680: PPUSH
73681: CALL_OW 262
73685: PUSH
73686: LD_INT 3
73688: EQUAL
73689: PUSH
73690: LD_VAR 0 2
73694: PPUSH
73695: CALL_OW 261
73699: PUSH
73700: LD_INT 20
73702: GREATER
73703: OR
73704: PUSH
73705: LD_VAR 0 2
73709: PPUSH
73710: CALL_OW 314
73714: NOT
73715: AND
73716: PUSH
73717: LD_VAR 0 2
73721: PPUSH
73722: CALL_OW 263
73726: PUSH
73727: LD_INT 1
73729: NONEQUAL
73730: PUSH
73731: LD_VAR 0 2
73735: PPUSH
73736: CALL_OW 311
73740: OR
73741: AND
73742: IFFALSE 73783
// begin ComCollect ( j , x , y ) ;
73744: LD_VAR 0 2
73748: PPUSH
73749: LD_VAR 0 6
73753: PPUSH
73754: LD_VAR 0 7
73758: PPUSH
73759: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73763: LD_VAR 0 2
73767: PPUSH
73768: LD_VAR 0 8
73772: PPUSH
73773: CALL_OW 172
// exit ;
73777: POP
73778: POP
73779: POP
73780: POP
73781: GO 73791
// end ;
73783: GO 73673
73785: POP
73786: POP
// end ; end ;
73787: GO 73160
73789: POP
73790: POP
// end ; end_of_file
73791: PPOPN 9
73793: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
73794: LD_INT 0
73796: PPUSH
// ar_miner := 81 ;
73797: LD_ADDR_EXP 117
73801: PUSH
73802: LD_INT 81
73804: ST_TO_ADDR
// ar_crane := 88 ;
73805: LD_ADDR_EXP 116
73809: PUSH
73810: LD_INT 88
73812: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
73813: LD_ADDR_EXP 111
73817: PUSH
73818: LD_INT 89
73820: ST_TO_ADDR
// us_hack := 99 ;
73821: LD_ADDR_EXP 112
73825: PUSH
73826: LD_INT 99
73828: ST_TO_ADDR
// us_artillery := 97 ;
73829: LD_ADDR_EXP 113
73833: PUSH
73834: LD_INT 97
73836: ST_TO_ADDR
// ar_bio_bomb := 91 ;
73837: LD_ADDR_EXP 114
73841: PUSH
73842: LD_INT 91
73844: ST_TO_ADDR
// ar_mortar := 92 ;
73845: LD_ADDR_EXP 115
73849: PUSH
73850: LD_INT 92
73852: ST_TO_ADDR
// ru_flamethrower := 93 ;
73853: LD_ADDR_EXP 118
73857: PUSH
73858: LD_INT 93
73860: ST_TO_ADDR
// ru_radar := 98 ;
73861: LD_ADDR_EXP 110
73865: PUSH
73866: LD_INT 98
73868: ST_TO_ADDR
// tech_Artillery := 80 ;
73869: LD_ADDR_EXP 119
73873: PUSH
73874: LD_INT 80
73876: ST_TO_ADDR
// tech_RadMat := 81 ;
73877: LD_ADDR_EXP 120
73881: PUSH
73882: LD_INT 81
73884: ST_TO_ADDR
// tech_BasicTools := 82 ;
73885: LD_ADDR_EXP 121
73889: PUSH
73890: LD_INT 82
73892: ST_TO_ADDR
// tech_Cargo := 83 ;
73893: LD_ADDR_EXP 122
73897: PUSH
73898: LD_INT 83
73900: ST_TO_ADDR
// tech_Track := 84 ;
73901: LD_ADDR_EXP 123
73905: PUSH
73906: LD_INT 84
73908: ST_TO_ADDR
// tech_Crane := 85 ;
73909: LD_ADDR_EXP 124
73913: PUSH
73914: LD_INT 85
73916: ST_TO_ADDR
// tech_Bulldozer := 86 ;
73917: LD_ADDR_EXP 125
73921: PUSH
73922: LD_INT 86
73924: ST_TO_ADDR
// tech_Hovercraft := 87 ;
73925: LD_ADDR_EXP 126
73929: PUSH
73930: LD_INT 87
73932: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
73933: LD_ADDR_EXP 127
73937: PUSH
73938: LD_INT 88
73940: ST_TO_ADDR
// end ;
73941: LD_VAR 0 1
73945: RET
// every 1 do
73946: GO 73948
73948: DISABLE
// InitGlobalVariables ; end_of_file
73949: CALL 73794 0 0
73953: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73954: LD_VAR 0 1
73958: PPUSH
73959: LD_VAR 0 2
73963: PPUSH
73964: LD_VAR 0 3
73968: PPUSH
73969: LD_VAR 0 4
73973: PPUSH
73974: LD_VAR 0 5
73978: PPUSH
73979: LD_VAR 0 6
73983: PPUSH
73984: CALL 58194 0 6
// end ;
73988: PPOPN 6
73990: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73991: LD_INT 0
73993: PPUSH
// begin if not units then
73994: LD_VAR 0 1
73998: NOT
73999: IFFALSE 74003
// exit ;
74001: GO 74003
// end ;
74003: PPOPN 7
74005: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74006: CALL 58165 0 0
// end ; end_of_file
74010: PPOPN 1
74012: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74013: LD_VAR 0 1
74017: PUSH
74018: LD_INT 200
74020: DOUBLE
74021: GREATEREQUAL
74022: IFFALSE 74030
74024: LD_INT 299
74026: DOUBLE
74027: LESSEQUAL
74028: IFTRUE 74032
74030: GO 74064
74032: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74033: LD_VAR 0 1
74037: PPUSH
74038: LD_VAR 0 2
74042: PPUSH
74043: LD_VAR 0 3
74047: PPUSH
74048: LD_VAR 0 4
74052: PPUSH
74053: LD_VAR 0 5
74057: PPUSH
74058: CALL 74554 0 5
74062: GO 74141
74064: LD_INT 300
74066: DOUBLE
74067: GREATEREQUAL
74068: IFFALSE 74076
74070: LD_INT 399
74072: DOUBLE
74073: LESSEQUAL
74074: IFTRUE 74078
74076: GO 74140
74078: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74079: LD_VAR 0 1
74083: PPUSH
74084: LD_VAR 0 2
74088: PPUSH
74089: LD_VAR 0 3
74093: PPUSH
74094: LD_VAR 0 4
74098: PPUSH
74099: LD_VAR 0 5
74103: PPUSH
74104: LD_VAR 0 6
74108: PPUSH
74109: LD_VAR 0 7
74113: PPUSH
74114: LD_VAR 0 8
74118: PPUSH
74119: LD_VAR 0 9
74123: PPUSH
74124: LD_VAR 0 10
74128: PPUSH
74129: LD_VAR 0 11
74133: PPUSH
74134: CALL 70501 0 11
74138: GO 74141
74140: POP
// end ;
74141: PPOPN 11
74143: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74144: LD_VAR 0 1
74148: PPUSH
74149: LD_VAR 0 2
74153: PPUSH
74154: LD_VAR 0 3
74158: PPUSH
74159: LD_VAR 0 4
74163: PPUSH
74164: LD_VAR 0 5
74168: PPUSH
74169: CALL 74290 0 5
// end ; end_of_file
74173: PPOPN 5
74175: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74176: LD_INT 0
74178: PPUSH
74179: PPUSH
74180: PPUSH
74181: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74182: LD_VAR 0 1
74186: PPUSH
74187: CALL_OW 264
74191: PUSH
74192: LD_EXP 114
74196: EQUAL
74197: IFFALSE 74269
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74199: LD_INT 68
74201: PPUSH
74202: LD_VAR 0 1
74206: PPUSH
74207: CALL_OW 255
74211: PPUSH
74212: CALL_OW 321
74216: PUSH
74217: LD_INT 2
74219: EQUAL
74220: IFFALSE 74232
// eff := 70 else
74222: LD_ADDR_VAR 0 4
74226: PUSH
74227: LD_INT 70
74229: ST_TO_ADDR
74230: GO 74240
// eff := 30 ;
74232: LD_ADDR_VAR 0 4
74236: PUSH
74237: LD_INT 30
74239: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74240: LD_VAR 0 1
74244: PPUSH
74245: CALL_OW 250
74249: PPUSH
74250: LD_VAR 0 1
74254: PPUSH
74255: CALL_OW 251
74259: PPUSH
74260: LD_VAR 0 4
74264: PPUSH
74265: CALL_OW 495
// end ; end ;
74269: LD_VAR 0 2
74273: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74274: LD_INT 0
74276: PPUSH
// end ;
74277: LD_VAR 0 4
74281: RET
// export function SOS_Command ( cmd ) ; begin
74282: LD_INT 0
74284: PPUSH
// end ;
74285: LD_VAR 0 2
74289: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74290: LD_INT 0
74292: PPUSH
// end ;
74293: LD_VAR 0 6
74297: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
74298: LD_INT 0
74300: PPUSH
74301: PPUSH
// if not vehicle or not factory then
74302: LD_VAR 0 1
74306: NOT
74307: PUSH
74308: LD_VAR 0 2
74312: NOT
74313: OR
74314: IFFALSE 74318
// exit ;
74316: GO 74549
// if factoryWaypoints >= factory then
74318: LD_EXP 107
74322: PUSH
74323: LD_VAR 0 2
74327: GREATEREQUAL
74328: IFFALSE 74549
// if factoryWaypoints [ factory ] then
74330: LD_EXP 107
74334: PUSH
74335: LD_VAR 0 2
74339: ARRAY
74340: IFFALSE 74549
// begin if GetControl ( vehicle ) = control_manual then
74342: LD_VAR 0 1
74346: PPUSH
74347: CALL_OW 263
74351: PUSH
74352: LD_INT 1
74354: EQUAL
74355: IFFALSE 74436
// begin driver := IsDrivenBy ( vehicle ) ;
74357: LD_ADDR_VAR 0 4
74361: PUSH
74362: LD_VAR 0 1
74366: PPUSH
74367: CALL_OW 311
74371: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74372: LD_VAR 0 4
74376: PPUSH
74377: LD_EXP 107
74381: PUSH
74382: LD_VAR 0 2
74386: ARRAY
74387: PUSH
74388: LD_INT 3
74390: ARRAY
74391: PPUSH
74392: LD_EXP 107
74396: PUSH
74397: LD_VAR 0 2
74401: ARRAY
74402: PUSH
74403: LD_INT 4
74405: ARRAY
74406: PPUSH
74407: CALL_OW 171
// AddComExitVehicle ( driver ) ;
74411: LD_VAR 0 4
74415: PPUSH
74416: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74420: LD_VAR 0 4
74424: PPUSH
74425: LD_VAR 0 2
74429: PPUSH
74430: CALL_OW 180
// end else
74434: GO 74549
// if GetControl ( vehicle ) = control_remote then
74436: LD_VAR 0 1
74440: PPUSH
74441: CALL_OW 263
74445: PUSH
74446: LD_INT 2
74448: EQUAL
74449: IFFALSE 74510
// begin wait ( 0 0$2 ) ;
74451: LD_INT 70
74453: PPUSH
74454: CALL_OW 67
// if Connect ( vehicle ) then
74458: LD_VAR 0 1
74462: PPUSH
74463: CALL 25037 0 1
74467: IFFALSE 74508
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74469: LD_VAR 0 1
74473: PPUSH
74474: LD_EXP 107
74478: PUSH
74479: LD_VAR 0 2
74483: ARRAY
74484: PUSH
74485: LD_INT 3
74487: ARRAY
74488: PPUSH
74489: LD_EXP 107
74493: PUSH
74494: LD_VAR 0 2
74498: ARRAY
74499: PUSH
74500: LD_INT 4
74502: ARRAY
74503: PPUSH
74504: CALL_OW 171
// end else
74508: GO 74549
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74510: LD_VAR 0 1
74514: PPUSH
74515: LD_EXP 107
74519: PUSH
74520: LD_VAR 0 2
74524: ARRAY
74525: PUSH
74526: LD_INT 3
74528: ARRAY
74529: PPUSH
74530: LD_EXP 107
74534: PUSH
74535: LD_VAR 0 2
74539: ARRAY
74540: PUSH
74541: LD_INT 4
74543: ARRAY
74544: PPUSH
74545: CALL_OW 171
// end ; end ;
74549: LD_VAR 0 3
74553: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74554: LD_INT 0
74556: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74557: LD_VAR 0 1
74561: PUSH
74562: LD_INT 250
74564: EQUAL
74565: PUSH
74566: LD_VAR 0 2
74570: PPUSH
74571: CALL_OW 264
74575: PUSH
74576: LD_EXP 117
74580: EQUAL
74581: AND
74582: IFFALSE 74603
// MinerPlaceMine ( unit , x , y ) ;
74584: LD_VAR 0 2
74588: PPUSH
74589: LD_VAR 0 4
74593: PPUSH
74594: LD_VAR 0 5
74598: PPUSH
74599: CALL 77002 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74603: LD_VAR 0 1
74607: PUSH
74608: LD_INT 251
74610: EQUAL
74611: PUSH
74612: LD_VAR 0 2
74616: PPUSH
74617: CALL_OW 264
74621: PUSH
74622: LD_EXP 117
74626: EQUAL
74627: AND
74628: IFFALSE 74649
// MinerDetonateMine ( unit , x , y ) ;
74630: LD_VAR 0 2
74634: PPUSH
74635: LD_VAR 0 4
74639: PPUSH
74640: LD_VAR 0 5
74644: PPUSH
74645: CALL 77279 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74649: LD_VAR 0 1
74653: PUSH
74654: LD_INT 252
74656: EQUAL
74657: PUSH
74658: LD_VAR 0 2
74662: PPUSH
74663: CALL_OW 264
74667: PUSH
74668: LD_EXP 117
74672: EQUAL
74673: AND
74674: IFFALSE 74695
// MinerCreateMinefield ( unit , x , y ) ;
74676: LD_VAR 0 2
74680: PPUSH
74681: LD_VAR 0 4
74685: PPUSH
74686: LD_VAR 0 5
74690: PPUSH
74691: CALL 77696 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74695: LD_VAR 0 1
74699: PUSH
74700: LD_INT 253
74702: EQUAL
74703: PUSH
74704: LD_VAR 0 2
74708: PPUSH
74709: CALL_OW 257
74713: PUSH
74714: LD_INT 5
74716: EQUAL
74717: AND
74718: IFFALSE 74739
// ComBinocular ( unit , x , y ) ;
74720: LD_VAR 0 2
74724: PPUSH
74725: LD_VAR 0 4
74729: PPUSH
74730: LD_VAR 0 5
74734: PPUSH
74735: CALL 78067 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74739: LD_VAR 0 1
74743: PUSH
74744: LD_INT 254
74746: EQUAL
74747: PUSH
74748: LD_VAR 0 2
74752: PPUSH
74753: CALL_OW 264
74757: PUSH
74758: LD_EXP 112
74762: EQUAL
74763: AND
74764: PUSH
74765: LD_VAR 0 3
74769: PPUSH
74770: CALL_OW 263
74774: PUSH
74775: LD_INT 3
74777: EQUAL
74778: AND
74779: IFFALSE 74795
// HackDestroyVehicle ( unit , selectedUnit ) ;
74781: LD_VAR 0 2
74785: PPUSH
74786: LD_VAR 0 3
74790: PPUSH
74791: CALL 76362 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74795: LD_VAR 0 1
74799: PUSH
74800: LD_INT 255
74802: EQUAL
74803: PUSH
74804: LD_VAR 0 2
74808: PPUSH
74809: CALL_OW 264
74813: PUSH
74814: LD_INT 14
74816: PUSH
74817: LD_INT 53
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: IN
74824: AND
74825: PUSH
74826: LD_VAR 0 4
74830: PPUSH
74831: LD_VAR 0 5
74835: PPUSH
74836: CALL_OW 488
74840: AND
74841: IFFALSE 74865
// CutTreeXYR ( unit , x , y , 12 ) ;
74843: LD_VAR 0 2
74847: PPUSH
74848: LD_VAR 0 4
74852: PPUSH
74853: LD_VAR 0 5
74857: PPUSH
74858: LD_INT 12
74860: PPUSH
74861: CALL 74928 0 4
// if cmd = 256 then
74865: LD_VAR 0 1
74869: PUSH
74870: LD_INT 256
74872: EQUAL
74873: IFFALSE 74894
// SetFactoryWaypoint ( unit , x , y ) ;
74875: LD_VAR 0 2
74879: PPUSH
74880: LD_VAR 0 4
74884: PPUSH
74885: LD_VAR 0 5
74889: PPUSH
74890: CALL 72481 0 3
// if cmd = 257 then
74894: LD_VAR 0 1
74898: PUSH
74899: LD_INT 257
74901: EQUAL
74902: IFFALSE 74923
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74904: LD_VAR 0 2
74908: PPUSH
74909: LD_VAR 0 4
74913: PPUSH
74914: LD_VAR 0 5
74918: PPUSH
74919: CALL 72843 0 3
// end ;
74923: LD_VAR 0 6
74927: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74928: LD_INT 0
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
74934: PPUSH
74935: PPUSH
74936: PPUSH
74937: PPUSH
74938: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
74939: LD_VAR 0 1
74943: NOT
74944: PUSH
74945: LD_VAR 0 2
74949: PPUSH
74950: LD_VAR 0 3
74954: PPUSH
74955: CALL_OW 488
74959: NOT
74960: OR
74961: PUSH
74962: LD_VAR 0 4
74966: NOT
74967: OR
74968: IFFALSE 74972
// exit ;
74970: GO 75312
// list := [ ] ;
74972: LD_ADDR_VAR 0 13
74976: PUSH
74977: EMPTY
74978: ST_TO_ADDR
// if x - r < 0 then
74979: LD_VAR 0 2
74983: PUSH
74984: LD_VAR 0 4
74988: MINUS
74989: PUSH
74990: LD_INT 0
74992: LESS
74993: IFFALSE 75005
// min_x := 0 else
74995: LD_ADDR_VAR 0 7
74999: PUSH
75000: LD_INT 0
75002: ST_TO_ADDR
75003: GO 75021
// min_x := x - r ;
75005: LD_ADDR_VAR 0 7
75009: PUSH
75010: LD_VAR 0 2
75014: PUSH
75015: LD_VAR 0 4
75019: MINUS
75020: ST_TO_ADDR
// if y - r < 0 then
75021: LD_VAR 0 3
75025: PUSH
75026: LD_VAR 0 4
75030: MINUS
75031: PUSH
75032: LD_INT 0
75034: LESS
75035: IFFALSE 75047
// min_y := 0 else
75037: LD_ADDR_VAR 0 8
75041: PUSH
75042: LD_INT 0
75044: ST_TO_ADDR
75045: GO 75063
// min_y := y - r ;
75047: LD_ADDR_VAR 0 8
75051: PUSH
75052: LD_VAR 0 3
75056: PUSH
75057: LD_VAR 0 4
75061: MINUS
75062: ST_TO_ADDR
// max_x := x + r ;
75063: LD_ADDR_VAR 0 9
75067: PUSH
75068: LD_VAR 0 2
75072: PUSH
75073: LD_VAR 0 4
75077: PLUS
75078: ST_TO_ADDR
// max_y := y + r ;
75079: LD_ADDR_VAR 0 10
75083: PUSH
75084: LD_VAR 0 3
75088: PUSH
75089: LD_VAR 0 4
75093: PLUS
75094: ST_TO_ADDR
// for _x = min_x to max_x do
75095: LD_ADDR_VAR 0 11
75099: PUSH
75100: DOUBLE
75101: LD_VAR 0 7
75105: DEC
75106: ST_TO_ADDR
75107: LD_VAR 0 9
75111: PUSH
75112: FOR_TO
75113: IFFALSE 75230
// for _y = min_y to max_y do
75115: LD_ADDR_VAR 0 12
75119: PUSH
75120: DOUBLE
75121: LD_VAR 0 8
75125: DEC
75126: ST_TO_ADDR
75127: LD_VAR 0 10
75131: PUSH
75132: FOR_TO
75133: IFFALSE 75226
// begin if not ValidHex ( _x , _y ) then
75135: LD_VAR 0 11
75139: PPUSH
75140: LD_VAR 0 12
75144: PPUSH
75145: CALL_OW 488
75149: NOT
75150: IFFALSE 75154
// continue ;
75152: GO 75132
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75154: LD_VAR 0 11
75158: PPUSH
75159: LD_VAR 0 12
75163: PPUSH
75164: CALL_OW 351
75168: PUSH
75169: LD_VAR 0 11
75173: PPUSH
75174: LD_VAR 0 12
75178: PPUSH
75179: CALL_OW 554
75183: AND
75184: IFFALSE 75224
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75186: LD_ADDR_VAR 0 13
75190: PUSH
75191: LD_VAR 0 13
75195: PPUSH
75196: LD_VAR 0 13
75200: PUSH
75201: LD_INT 1
75203: PLUS
75204: PPUSH
75205: LD_VAR 0 11
75209: PUSH
75210: LD_VAR 0 12
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PPUSH
75219: CALL_OW 2
75223: ST_TO_ADDR
// end ;
75224: GO 75132
75226: POP
75227: POP
75228: GO 75112
75230: POP
75231: POP
// if not list then
75232: LD_VAR 0 13
75236: NOT
75237: IFFALSE 75241
// exit ;
75239: GO 75312
// for i in list do
75241: LD_ADDR_VAR 0 6
75245: PUSH
75246: LD_VAR 0 13
75250: PUSH
75251: FOR_IN
75252: IFFALSE 75310
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75254: LD_VAR 0 1
75258: PPUSH
75259: LD_STRING M
75261: PUSH
75262: LD_VAR 0 6
75266: PUSH
75267: LD_INT 1
75269: ARRAY
75270: PUSH
75271: LD_VAR 0 6
75275: PUSH
75276: LD_INT 2
75278: ARRAY
75279: PUSH
75280: LD_INT 0
75282: PUSH
75283: LD_INT 0
75285: PUSH
75286: LD_INT 0
75288: PUSH
75289: LD_INT 0
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: PUSH
75301: EMPTY
75302: LIST
75303: PPUSH
75304: CALL_OW 447
75308: GO 75251
75310: POP
75311: POP
// end ;
75312: LD_VAR 0 5
75316: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75317: LD_EXP 128
75321: NOT
75322: IFFALSE 75372
75324: GO 75326
75326: DISABLE
// begin initHack := true ;
75327: LD_ADDR_EXP 128
75331: PUSH
75332: LD_INT 1
75334: ST_TO_ADDR
// hackTanks := [ ] ;
75335: LD_ADDR_EXP 129
75339: PUSH
75340: EMPTY
75341: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75342: LD_ADDR_EXP 130
75346: PUSH
75347: EMPTY
75348: ST_TO_ADDR
// hackLimit := 3 ;
75349: LD_ADDR_EXP 131
75353: PUSH
75354: LD_INT 3
75356: ST_TO_ADDR
// hackDist := 12 ;
75357: LD_ADDR_EXP 132
75361: PUSH
75362: LD_INT 12
75364: ST_TO_ADDR
// hackCounter := [ ] ;
75365: LD_ADDR_EXP 133
75369: PUSH
75370: EMPTY
75371: ST_TO_ADDR
// end ;
75372: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75373: LD_EXP 128
75377: PUSH
75378: LD_INT 34
75380: PUSH
75381: LD_EXP 112
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PPUSH
75390: CALL_OW 69
75394: AND
75395: IFFALSE 75650
75397: GO 75399
75399: DISABLE
75400: LD_INT 0
75402: PPUSH
75403: PPUSH
// begin enable ;
75404: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75405: LD_ADDR_VAR 0 1
75409: PUSH
75410: LD_INT 34
75412: PUSH
75413: LD_EXP 112
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: PPUSH
75422: CALL_OW 69
75426: PUSH
75427: FOR_IN
75428: IFFALSE 75648
// begin if not i in hackTanks then
75430: LD_VAR 0 1
75434: PUSH
75435: LD_EXP 129
75439: IN
75440: NOT
75441: IFFALSE 75524
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75443: LD_ADDR_EXP 129
75447: PUSH
75448: LD_EXP 129
75452: PPUSH
75453: LD_EXP 129
75457: PUSH
75458: LD_INT 1
75460: PLUS
75461: PPUSH
75462: LD_VAR 0 1
75466: PPUSH
75467: CALL_OW 1
75471: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75472: LD_ADDR_EXP 130
75476: PUSH
75477: LD_EXP 130
75481: PPUSH
75482: LD_EXP 130
75486: PUSH
75487: LD_INT 1
75489: PLUS
75490: PPUSH
75491: EMPTY
75492: PPUSH
75493: CALL_OW 1
75497: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75498: LD_ADDR_EXP 133
75502: PUSH
75503: LD_EXP 133
75507: PPUSH
75508: LD_EXP 133
75512: PUSH
75513: LD_INT 1
75515: PLUS
75516: PPUSH
75517: EMPTY
75518: PPUSH
75519: CALL_OW 1
75523: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75524: LD_VAR 0 1
75528: PPUSH
75529: CALL_OW 302
75533: NOT
75534: IFFALSE 75547
// begin HackUnlinkAll ( i ) ;
75536: LD_VAR 0 1
75540: PPUSH
75541: CALL 75653 0 1
// continue ;
75545: GO 75427
// end ; HackCheckCapturedStatus ( i ) ;
75547: LD_VAR 0 1
75551: PPUSH
75552: CALL 76096 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75556: LD_ADDR_VAR 0 2
75560: PUSH
75561: LD_INT 81
75563: PUSH
75564: LD_VAR 0 1
75568: PPUSH
75569: CALL_OW 255
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 33
75580: PUSH
75581: LD_INT 3
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 91
75590: PUSH
75591: LD_VAR 0 1
75595: PUSH
75596: LD_EXP 132
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 50
75608: PUSH
75609: EMPTY
75610: LIST
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: PPUSH
75618: CALL_OW 69
75622: ST_TO_ADDR
// if not tmp then
75623: LD_VAR 0 2
75627: NOT
75628: IFFALSE 75632
// continue ;
75630: GO 75427
// HackLink ( i , tmp ) ;
75632: LD_VAR 0 1
75636: PPUSH
75637: LD_VAR 0 2
75641: PPUSH
75642: CALL 75789 0 2
// end ;
75646: GO 75427
75648: POP
75649: POP
// end ;
75650: PPOPN 2
75652: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75653: LD_INT 0
75655: PPUSH
75656: PPUSH
75657: PPUSH
// if not hack in hackTanks then
75658: LD_VAR 0 1
75662: PUSH
75663: LD_EXP 129
75667: IN
75668: NOT
75669: IFFALSE 75673
// exit ;
75671: GO 75784
// index := GetElementIndex ( hackTanks , hack ) ;
75673: LD_ADDR_VAR 0 4
75677: PUSH
75678: LD_EXP 129
75682: PPUSH
75683: LD_VAR 0 1
75687: PPUSH
75688: CALL 21851 0 2
75692: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75693: LD_EXP 130
75697: PUSH
75698: LD_VAR 0 4
75702: ARRAY
75703: IFFALSE 75784
// begin for i in hackTanksCaptured [ index ] do
75705: LD_ADDR_VAR 0 3
75709: PUSH
75710: LD_EXP 130
75714: PUSH
75715: LD_VAR 0 4
75719: ARRAY
75720: PUSH
75721: FOR_IN
75722: IFFALSE 75748
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75724: LD_VAR 0 3
75728: PUSH
75729: LD_INT 1
75731: ARRAY
75732: PPUSH
75733: LD_VAR 0 3
75737: PUSH
75738: LD_INT 2
75740: ARRAY
75741: PPUSH
75742: CALL_OW 235
75746: GO 75721
75748: POP
75749: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75750: LD_ADDR_EXP 130
75754: PUSH
75755: LD_EXP 130
75759: PPUSH
75760: LD_VAR 0 4
75764: PPUSH
75765: EMPTY
75766: PPUSH
75767: CALL_OW 1
75771: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75772: LD_VAR 0 1
75776: PPUSH
75777: LD_INT 0
75779: PPUSH
75780: CALL_OW 505
// end ; end ;
75784: LD_VAR 0 2
75788: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75789: LD_INT 0
75791: PPUSH
75792: PPUSH
75793: PPUSH
// if not hack in hackTanks or not vehicles then
75794: LD_VAR 0 1
75798: PUSH
75799: LD_EXP 129
75803: IN
75804: NOT
75805: PUSH
75806: LD_VAR 0 2
75810: NOT
75811: OR
75812: IFFALSE 75816
// exit ;
75814: GO 76091
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75816: LD_ADDR_VAR 0 2
75820: PUSH
75821: LD_VAR 0 1
75825: PPUSH
75826: LD_VAR 0 2
75830: PPUSH
75831: LD_INT 1
75833: PPUSH
75834: LD_INT 1
75836: PPUSH
75837: CALL 22501 0 4
75841: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75842: LD_ADDR_VAR 0 5
75846: PUSH
75847: LD_EXP 129
75851: PPUSH
75852: LD_VAR 0 1
75856: PPUSH
75857: CALL 21851 0 2
75861: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75862: LD_EXP 130
75866: PUSH
75867: LD_VAR 0 5
75871: ARRAY
75872: PUSH
75873: LD_EXP 131
75877: LESS
75878: IFFALSE 76067
// begin for i := 1 to vehicles do
75880: LD_ADDR_VAR 0 4
75884: PUSH
75885: DOUBLE
75886: LD_INT 1
75888: DEC
75889: ST_TO_ADDR
75890: LD_VAR 0 2
75894: PUSH
75895: FOR_TO
75896: IFFALSE 76065
// begin if hackTanksCaptured [ index ] = hackLimit then
75898: LD_EXP 130
75902: PUSH
75903: LD_VAR 0 5
75907: ARRAY
75908: PUSH
75909: LD_EXP 131
75913: EQUAL
75914: IFFALSE 75918
// break ;
75916: GO 76065
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75918: LD_ADDR_EXP 133
75922: PUSH
75923: LD_EXP 133
75927: PPUSH
75928: LD_VAR 0 5
75932: PPUSH
75933: LD_EXP 133
75937: PUSH
75938: LD_VAR 0 5
75942: ARRAY
75943: PUSH
75944: LD_INT 1
75946: PLUS
75947: PPUSH
75948: CALL_OW 1
75952: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75953: LD_ADDR_EXP 130
75957: PUSH
75958: LD_EXP 130
75962: PPUSH
75963: LD_VAR 0 5
75967: PUSH
75968: LD_EXP 130
75972: PUSH
75973: LD_VAR 0 5
75977: ARRAY
75978: PUSH
75979: LD_INT 1
75981: PLUS
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PPUSH
75987: LD_VAR 0 2
75991: PUSH
75992: LD_VAR 0 4
75996: ARRAY
75997: PUSH
75998: LD_VAR 0 2
76002: PUSH
76003: LD_VAR 0 4
76007: ARRAY
76008: PPUSH
76009: CALL_OW 255
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PPUSH
76018: CALL 22066 0 3
76022: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76023: LD_VAR 0 2
76027: PUSH
76028: LD_VAR 0 4
76032: ARRAY
76033: PPUSH
76034: LD_VAR 0 1
76038: PPUSH
76039: CALL_OW 255
76043: PPUSH
76044: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76048: LD_VAR 0 2
76052: PUSH
76053: LD_VAR 0 4
76057: ARRAY
76058: PPUSH
76059: CALL_OW 141
// end ;
76063: GO 75895
76065: POP
76066: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76067: LD_VAR 0 1
76071: PPUSH
76072: LD_EXP 130
76076: PUSH
76077: LD_VAR 0 5
76081: ARRAY
76082: PUSH
76083: LD_INT 0
76085: PLUS
76086: PPUSH
76087: CALL_OW 505
// end ;
76091: LD_VAR 0 3
76095: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76096: LD_INT 0
76098: PPUSH
76099: PPUSH
76100: PPUSH
76101: PPUSH
// if not hack in hackTanks then
76102: LD_VAR 0 1
76106: PUSH
76107: LD_EXP 129
76111: IN
76112: NOT
76113: IFFALSE 76117
// exit ;
76115: GO 76357
// index := GetElementIndex ( hackTanks , hack ) ;
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_EXP 129
76126: PPUSH
76127: LD_VAR 0 1
76131: PPUSH
76132: CALL 21851 0 2
76136: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76137: LD_ADDR_VAR 0 3
76141: PUSH
76142: DOUBLE
76143: LD_EXP 130
76147: PUSH
76148: LD_VAR 0 4
76152: ARRAY
76153: INC
76154: ST_TO_ADDR
76155: LD_INT 1
76157: PUSH
76158: FOR_DOWNTO
76159: IFFALSE 76331
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76161: LD_ADDR_VAR 0 5
76165: PUSH
76166: LD_EXP 130
76170: PUSH
76171: LD_VAR 0 4
76175: ARRAY
76176: PUSH
76177: LD_VAR 0 3
76181: ARRAY
76182: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76183: LD_VAR 0 5
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PPUSH
76192: CALL_OW 302
76196: NOT
76197: PUSH
76198: LD_VAR 0 5
76202: PUSH
76203: LD_INT 1
76205: ARRAY
76206: PPUSH
76207: CALL_OW 255
76211: PUSH
76212: LD_VAR 0 1
76216: PPUSH
76217: CALL_OW 255
76221: NONEQUAL
76222: OR
76223: IFFALSE 76329
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76225: LD_VAR 0 5
76229: PUSH
76230: LD_INT 1
76232: ARRAY
76233: PPUSH
76234: CALL_OW 305
76238: PUSH
76239: LD_VAR 0 5
76243: PUSH
76244: LD_INT 1
76246: ARRAY
76247: PPUSH
76248: CALL_OW 255
76252: PUSH
76253: LD_VAR 0 1
76257: PPUSH
76258: CALL_OW 255
76262: EQUAL
76263: AND
76264: IFFALSE 76288
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76266: LD_VAR 0 5
76270: PUSH
76271: LD_INT 1
76273: ARRAY
76274: PPUSH
76275: LD_VAR 0 5
76279: PUSH
76280: LD_INT 2
76282: ARRAY
76283: PPUSH
76284: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76288: LD_ADDR_EXP 130
76292: PUSH
76293: LD_EXP 130
76297: PPUSH
76298: LD_VAR 0 4
76302: PPUSH
76303: LD_EXP 130
76307: PUSH
76308: LD_VAR 0 4
76312: ARRAY
76313: PPUSH
76314: LD_VAR 0 3
76318: PPUSH
76319: CALL_OW 3
76323: PPUSH
76324: CALL_OW 1
76328: ST_TO_ADDR
// end ; end ;
76329: GO 76158
76331: POP
76332: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76333: LD_VAR 0 1
76337: PPUSH
76338: LD_EXP 130
76342: PUSH
76343: LD_VAR 0 4
76347: ARRAY
76348: PUSH
76349: LD_INT 0
76351: PLUS
76352: PPUSH
76353: CALL_OW 505
// end ;
76357: LD_VAR 0 2
76361: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76362: LD_INT 0
76364: PPUSH
76365: PPUSH
76366: PPUSH
76367: PPUSH
// if not hack in hackTanks then
76368: LD_VAR 0 1
76372: PUSH
76373: LD_EXP 129
76377: IN
76378: NOT
76379: IFFALSE 76383
// exit ;
76381: GO 76468
// index := GetElementIndex ( hackTanks , hack ) ;
76383: LD_ADDR_VAR 0 5
76387: PUSH
76388: LD_EXP 129
76392: PPUSH
76393: LD_VAR 0 1
76397: PPUSH
76398: CALL 21851 0 2
76402: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76403: LD_ADDR_VAR 0 4
76407: PUSH
76408: DOUBLE
76409: LD_INT 1
76411: DEC
76412: ST_TO_ADDR
76413: LD_EXP 130
76417: PUSH
76418: LD_VAR 0 5
76422: ARRAY
76423: PUSH
76424: FOR_TO
76425: IFFALSE 76466
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76427: LD_EXP 130
76431: PUSH
76432: LD_VAR 0 5
76436: ARRAY
76437: PUSH
76438: LD_VAR 0 4
76442: ARRAY
76443: PUSH
76444: LD_INT 1
76446: ARRAY
76447: PUSH
76448: LD_VAR 0 2
76452: EQUAL
76453: IFFALSE 76464
// KillUnit ( vehicle ) ;
76455: LD_VAR 0 2
76459: PPUSH
76460: CALL_OW 66
76464: GO 76424
76466: POP
76467: POP
// end ;
76468: LD_VAR 0 3
76472: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76473: LD_EXP 134
76477: NOT
76478: IFFALSE 76513
76480: GO 76482
76482: DISABLE
// begin initMiner := true ;
76483: LD_ADDR_EXP 134
76487: PUSH
76488: LD_INT 1
76490: ST_TO_ADDR
// minersList := [ ] ;
76491: LD_ADDR_EXP 135
76495: PUSH
76496: EMPTY
76497: ST_TO_ADDR
// minerMinesList := [ ] ;
76498: LD_ADDR_EXP 136
76502: PUSH
76503: EMPTY
76504: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76505: LD_ADDR_EXP 137
76509: PUSH
76510: LD_INT 5
76512: ST_TO_ADDR
// end ;
76513: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76514: LD_EXP 134
76518: PUSH
76519: LD_INT 34
76521: PUSH
76522: LD_EXP 117
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PPUSH
76531: CALL_OW 69
76535: AND
76536: IFFALSE 76999
76538: GO 76540
76540: DISABLE
76541: LD_INT 0
76543: PPUSH
76544: PPUSH
76545: PPUSH
76546: PPUSH
// begin enable ;
76547: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76548: LD_ADDR_VAR 0 1
76552: PUSH
76553: LD_INT 34
76555: PUSH
76556: LD_EXP 117
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: PPUSH
76565: CALL_OW 69
76569: PUSH
76570: FOR_IN
76571: IFFALSE 76643
// begin if not i in minersList then
76573: LD_VAR 0 1
76577: PUSH
76578: LD_EXP 135
76582: IN
76583: NOT
76584: IFFALSE 76641
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76586: LD_ADDR_EXP 135
76590: PUSH
76591: LD_EXP 135
76595: PPUSH
76596: LD_EXP 135
76600: PUSH
76601: LD_INT 1
76603: PLUS
76604: PPUSH
76605: LD_VAR 0 1
76609: PPUSH
76610: CALL_OW 1
76614: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76615: LD_ADDR_EXP 136
76619: PUSH
76620: LD_EXP 136
76624: PPUSH
76625: LD_EXP 136
76629: PUSH
76630: LD_INT 1
76632: PLUS
76633: PPUSH
76634: EMPTY
76635: PPUSH
76636: CALL_OW 1
76640: ST_TO_ADDR
// end end ;
76641: GO 76570
76643: POP
76644: POP
// for i := minerMinesList downto 1 do
76645: LD_ADDR_VAR 0 1
76649: PUSH
76650: DOUBLE
76651: LD_EXP 136
76655: INC
76656: ST_TO_ADDR
76657: LD_INT 1
76659: PUSH
76660: FOR_DOWNTO
76661: IFFALSE 76997
// begin if IsLive ( minersList [ i ] ) then
76663: LD_EXP 135
76667: PUSH
76668: LD_VAR 0 1
76672: ARRAY
76673: PPUSH
76674: CALL_OW 300
76678: IFFALSE 76706
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76680: LD_EXP 135
76684: PUSH
76685: LD_VAR 0 1
76689: ARRAY
76690: PPUSH
76691: LD_EXP 136
76695: PUSH
76696: LD_VAR 0 1
76700: ARRAY
76701: PPUSH
76702: CALL_OW 505
// if not minerMinesList [ i ] then
76706: LD_EXP 136
76710: PUSH
76711: LD_VAR 0 1
76715: ARRAY
76716: NOT
76717: IFFALSE 76721
// continue ;
76719: GO 76660
// for j := minerMinesList [ i ] downto 1 do
76721: LD_ADDR_VAR 0 2
76725: PUSH
76726: DOUBLE
76727: LD_EXP 136
76731: PUSH
76732: LD_VAR 0 1
76736: ARRAY
76737: INC
76738: ST_TO_ADDR
76739: LD_INT 1
76741: PUSH
76742: FOR_DOWNTO
76743: IFFALSE 76993
// begin side := GetSide ( minersList [ i ] ) ;
76745: LD_ADDR_VAR 0 3
76749: PUSH
76750: LD_EXP 135
76754: PUSH
76755: LD_VAR 0 1
76759: ARRAY
76760: PPUSH
76761: CALL_OW 255
76765: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76766: LD_ADDR_VAR 0 4
76770: PUSH
76771: LD_EXP 136
76775: PUSH
76776: LD_VAR 0 1
76780: ARRAY
76781: PUSH
76782: LD_VAR 0 2
76786: ARRAY
76787: PUSH
76788: LD_INT 1
76790: ARRAY
76791: PPUSH
76792: LD_EXP 136
76796: PUSH
76797: LD_VAR 0 1
76801: ARRAY
76802: PUSH
76803: LD_VAR 0 2
76807: ARRAY
76808: PUSH
76809: LD_INT 2
76811: ARRAY
76812: PPUSH
76813: CALL_OW 428
76817: ST_TO_ADDR
// if not tmp then
76818: LD_VAR 0 4
76822: NOT
76823: IFFALSE 76827
// continue ;
76825: GO 76742
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76827: LD_VAR 0 4
76831: PUSH
76832: LD_INT 81
76834: PUSH
76835: LD_VAR 0 3
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PPUSH
76844: CALL_OW 69
76848: IN
76849: PUSH
76850: LD_EXP 136
76854: PUSH
76855: LD_VAR 0 1
76859: ARRAY
76860: PUSH
76861: LD_VAR 0 2
76865: ARRAY
76866: PUSH
76867: LD_INT 1
76869: ARRAY
76870: PPUSH
76871: LD_EXP 136
76875: PUSH
76876: LD_VAR 0 1
76880: ARRAY
76881: PUSH
76882: LD_VAR 0 2
76886: ARRAY
76887: PUSH
76888: LD_INT 2
76890: ARRAY
76891: PPUSH
76892: CALL_OW 458
76896: AND
76897: IFFALSE 76991
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76899: LD_EXP 136
76903: PUSH
76904: LD_VAR 0 1
76908: ARRAY
76909: PUSH
76910: LD_VAR 0 2
76914: ARRAY
76915: PUSH
76916: LD_INT 1
76918: ARRAY
76919: PPUSH
76920: LD_EXP 136
76924: PUSH
76925: LD_VAR 0 1
76929: ARRAY
76930: PUSH
76931: LD_VAR 0 2
76935: ARRAY
76936: PUSH
76937: LD_INT 2
76939: ARRAY
76940: PPUSH
76941: LD_VAR 0 3
76945: PPUSH
76946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76950: LD_ADDR_EXP 136
76954: PUSH
76955: LD_EXP 136
76959: PPUSH
76960: LD_VAR 0 1
76964: PPUSH
76965: LD_EXP 136
76969: PUSH
76970: LD_VAR 0 1
76974: ARRAY
76975: PPUSH
76976: LD_VAR 0 2
76980: PPUSH
76981: CALL_OW 3
76985: PPUSH
76986: CALL_OW 1
76990: ST_TO_ADDR
// end ; end ;
76991: GO 76742
76993: POP
76994: POP
// end ;
76995: GO 76660
76997: POP
76998: POP
// end ;
76999: PPOPN 4
77001: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77002: LD_INT 0
77004: PPUSH
77005: PPUSH
// result := false ;
77006: LD_ADDR_VAR 0 4
77010: PUSH
77011: LD_INT 0
77013: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77014: LD_VAR 0 1
77018: PPUSH
77019: CALL_OW 264
77023: PUSH
77024: LD_EXP 117
77028: EQUAL
77029: NOT
77030: IFFALSE 77034
// exit ;
77032: GO 77274
// index := GetElementIndex ( minersList , unit ) ;
77034: LD_ADDR_VAR 0 5
77038: PUSH
77039: LD_EXP 135
77043: PPUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: CALL 21851 0 2
77053: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77054: LD_EXP 136
77058: PUSH
77059: LD_VAR 0 5
77063: ARRAY
77064: PUSH
77065: LD_EXP 137
77069: GREATEREQUAL
77070: IFFALSE 77074
// exit ;
77072: GO 77274
// ComMoveXY ( unit , x , y ) ;
77074: LD_VAR 0 1
77078: PPUSH
77079: LD_VAR 0 2
77083: PPUSH
77084: LD_VAR 0 3
77088: PPUSH
77089: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77093: LD_INT 35
77095: PPUSH
77096: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77100: LD_VAR 0 1
77104: PPUSH
77105: LD_VAR 0 2
77109: PPUSH
77110: LD_VAR 0 3
77114: PPUSH
77115: CALL 53137 0 3
77119: NOT
77120: PUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL_OW 314
77130: AND
77131: IFFALSE 77135
// exit ;
77133: GO 77274
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77135: LD_VAR 0 2
77139: PPUSH
77140: LD_VAR 0 3
77144: PPUSH
77145: CALL_OW 428
77149: PUSH
77150: LD_VAR 0 1
77154: EQUAL
77155: PUSH
77156: LD_VAR 0 1
77160: PPUSH
77161: CALL_OW 314
77165: NOT
77166: AND
77167: IFFALSE 77093
// PlaySoundXY ( x , y , PlantMine ) ;
77169: LD_VAR 0 2
77173: PPUSH
77174: LD_VAR 0 3
77178: PPUSH
77179: LD_STRING PlantMine
77181: PPUSH
77182: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77186: LD_VAR 0 2
77190: PPUSH
77191: LD_VAR 0 3
77195: PPUSH
77196: LD_VAR 0 1
77200: PPUSH
77201: CALL_OW 255
77205: PPUSH
77206: LD_INT 0
77208: PPUSH
77209: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77213: LD_ADDR_EXP 136
77217: PUSH
77218: LD_EXP 136
77222: PPUSH
77223: LD_VAR 0 5
77227: PUSH
77228: LD_EXP 136
77232: PUSH
77233: LD_VAR 0 5
77237: ARRAY
77238: PUSH
77239: LD_INT 1
77241: PLUS
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PPUSH
77247: LD_VAR 0 2
77251: PUSH
77252: LD_VAR 0 3
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PPUSH
77261: CALL 22066 0 3
77265: ST_TO_ADDR
// result := true ;
77266: LD_ADDR_VAR 0 4
77270: PUSH
77271: LD_INT 1
77273: ST_TO_ADDR
// end ;
77274: LD_VAR 0 4
77278: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77279: LD_INT 0
77281: PPUSH
77282: PPUSH
77283: PPUSH
// if not unit in minersList then
77284: LD_VAR 0 1
77288: PUSH
77289: LD_EXP 135
77293: IN
77294: NOT
77295: IFFALSE 77299
// exit ;
77297: GO 77691
// index := GetElementIndex ( minersList , unit ) ;
77299: LD_ADDR_VAR 0 6
77303: PUSH
77304: LD_EXP 135
77308: PPUSH
77309: LD_VAR 0 1
77313: PPUSH
77314: CALL 21851 0 2
77318: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77319: LD_ADDR_VAR 0 5
77323: PUSH
77324: DOUBLE
77325: LD_EXP 136
77329: PUSH
77330: LD_VAR 0 6
77334: ARRAY
77335: INC
77336: ST_TO_ADDR
77337: LD_INT 1
77339: PUSH
77340: FOR_DOWNTO
77341: IFFALSE 77502
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77343: LD_EXP 136
77347: PUSH
77348: LD_VAR 0 6
77352: ARRAY
77353: PUSH
77354: LD_VAR 0 5
77358: ARRAY
77359: PUSH
77360: LD_INT 1
77362: ARRAY
77363: PUSH
77364: LD_VAR 0 2
77368: EQUAL
77369: PUSH
77370: LD_EXP 136
77374: PUSH
77375: LD_VAR 0 6
77379: ARRAY
77380: PUSH
77381: LD_VAR 0 5
77385: ARRAY
77386: PUSH
77387: LD_INT 2
77389: ARRAY
77390: PUSH
77391: LD_VAR 0 3
77395: EQUAL
77396: AND
77397: IFFALSE 77500
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77399: LD_EXP 136
77403: PUSH
77404: LD_VAR 0 6
77408: ARRAY
77409: PUSH
77410: LD_VAR 0 5
77414: ARRAY
77415: PUSH
77416: LD_INT 1
77418: ARRAY
77419: PPUSH
77420: LD_EXP 136
77424: PUSH
77425: LD_VAR 0 6
77429: ARRAY
77430: PUSH
77431: LD_VAR 0 5
77435: ARRAY
77436: PUSH
77437: LD_INT 2
77439: ARRAY
77440: PPUSH
77441: LD_VAR 0 1
77445: PPUSH
77446: CALL_OW 255
77450: PPUSH
77451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77455: LD_ADDR_EXP 136
77459: PUSH
77460: LD_EXP 136
77464: PPUSH
77465: LD_VAR 0 6
77469: PPUSH
77470: LD_EXP 136
77474: PUSH
77475: LD_VAR 0 6
77479: ARRAY
77480: PPUSH
77481: LD_VAR 0 5
77485: PPUSH
77486: CALL_OW 3
77490: PPUSH
77491: CALL_OW 1
77495: ST_TO_ADDR
// exit ;
77496: POP
77497: POP
77498: GO 77691
// end ; end ;
77500: GO 77340
77502: POP
77503: POP
// for i := minerMinesList [ index ] downto 1 do
77504: LD_ADDR_VAR 0 5
77508: PUSH
77509: DOUBLE
77510: LD_EXP 136
77514: PUSH
77515: LD_VAR 0 6
77519: ARRAY
77520: INC
77521: ST_TO_ADDR
77522: LD_INT 1
77524: PUSH
77525: FOR_DOWNTO
77526: IFFALSE 77689
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77528: LD_EXP 136
77532: PUSH
77533: LD_VAR 0 6
77537: ARRAY
77538: PUSH
77539: LD_VAR 0 5
77543: ARRAY
77544: PUSH
77545: LD_INT 1
77547: ARRAY
77548: PPUSH
77549: LD_EXP 136
77553: PUSH
77554: LD_VAR 0 6
77558: ARRAY
77559: PUSH
77560: LD_VAR 0 5
77564: ARRAY
77565: PUSH
77566: LD_INT 2
77568: ARRAY
77569: PPUSH
77570: LD_VAR 0 2
77574: PPUSH
77575: LD_VAR 0 3
77579: PPUSH
77580: CALL_OW 298
77584: PUSH
77585: LD_INT 6
77587: LESS
77588: IFFALSE 77687
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77590: LD_EXP 136
77594: PUSH
77595: LD_VAR 0 6
77599: ARRAY
77600: PUSH
77601: LD_VAR 0 5
77605: ARRAY
77606: PUSH
77607: LD_INT 1
77609: ARRAY
77610: PPUSH
77611: LD_EXP 136
77615: PUSH
77616: LD_VAR 0 6
77620: ARRAY
77621: PUSH
77622: LD_VAR 0 5
77626: ARRAY
77627: PUSH
77628: LD_INT 2
77630: ARRAY
77631: PPUSH
77632: LD_VAR 0 1
77636: PPUSH
77637: CALL_OW 255
77641: PPUSH
77642: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77646: LD_ADDR_EXP 136
77650: PUSH
77651: LD_EXP 136
77655: PPUSH
77656: LD_VAR 0 6
77660: PPUSH
77661: LD_EXP 136
77665: PUSH
77666: LD_VAR 0 6
77670: ARRAY
77671: PPUSH
77672: LD_VAR 0 5
77676: PPUSH
77677: CALL_OW 3
77681: PPUSH
77682: CALL_OW 1
77686: ST_TO_ADDR
// end ; end ;
77687: GO 77525
77689: POP
77690: POP
// end ;
77691: LD_VAR 0 4
77695: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77696: LD_INT 0
77698: PPUSH
77699: PPUSH
77700: PPUSH
77701: PPUSH
77702: PPUSH
77703: PPUSH
77704: PPUSH
77705: PPUSH
77706: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77707: LD_VAR 0 1
77711: PPUSH
77712: CALL_OW 264
77716: PUSH
77717: LD_EXP 117
77721: EQUAL
77722: NOT
77723: PUSH
77724: LD_VAR 0 1
77728: PUSH
77729: LD_EXP 135
77733: IN
77734: NOT
77735: OR
77736: IFFALSE 77740
// exit ;
77738: GO 78062
// index := GetElementIndex ( minersList , unit ) ;
77740: LD_ADDR_VAR 0 6
77744: PUSH
77745: LD_EXP 135
77749: PPUSH
77750: LD_VAR 0 1
77754: PPUSH
77755: CALL 21851 0 2
77759: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77760: LD_ADDR_VAR 0 8
77764: PUSH
77765: LD_EXP 137
77769: PUSH
77770: LD_EXP 136
77774: PUSH
77775: LD_VAR 0 6
77779: ARRAY
77780: MINUS
77781: ST_TO_ADDR
// if not minesFreeAmount then
77782: LD_VAR 0 8
77786: NOT
77787: IFFALSE 77791
// exit ;
77789: GO 78062
// tmp := [ ] ;
77791: LD_ADDR_VAR 0 7
77795: PUSH
77796: EMPTY
77797: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77798: LD_ADDR_VAR 0 5
77802: PUSH
77803: DOUBLE
77804: LD_INT 1
77806: DEC
77807: ST_TO_ADDR
77808: LD_VAR 0 8
77812: PUSH
77813: FOR_TO
77814: IFFALSE 78009
// begin _d := rand ( 0 , 5 ) ;
77816: LD_ADDR_VAR 0 11
77820: PUSH
77821: LD_INT 0
77823: PPUSH
77824: LD_INT 5
77826: PPUSH
77827: CALL_OW 12
77831: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77832: LD_ADDR_VAR 0 12
77836: PUSH
77837: LD_INT 2
77839: PPUSH
77840: LD_INT 6
77842: PPUSH
77843: CALL_OW 12
77847: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77848: LD_ADDR_VAR 0 9
77852: PUSH
77853: LD_VAR 0 2
77857: PPUSH
77858: LD_VAR 0 11
77862: PPUSH
77863: LD_VAR 0 12
77867: PPUSH
77868: CALL_OW 272
77872: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77873: LD_ADDR_VAR 0 10
77877: PUSH
77878: LD_VAR 0 3
77882: PPUSH
77883: LD_VAR 0 11
77887: PPUSH
77888: LD_VAR 0 12
77892: PPUSH
77893: CALL_OW 273
77897: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77898: LD_VAR 0 9
77902: PPUSH
77903: LD_VAR 0 10
77907: PPUSH
77908: CALL_OW 488
77912: PUSH
77913: LD_VAR 0 9
77917: PUSH
77918: LD_VAR 0 10
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_VAR 0 7
77931: IN
77932: NOT
77933: AND
77934: PUSH
77935: LD_VAR 0 9
77939: PPUSH
77940: LD_VAR 0 10
77944: PPUSH
77945: CALL_OW 458
77949: NOT
77950: AND
77951: IFFALSE 77993
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77953: LD_ADDR_VAR 0 7
77957: PUSH
77958: LD_VAR 0 7
77962: PPUSH
77963: LD_VAR 0 7
77967: PUSH
77968: LD_INT 1
77970: PLUS
77971: PPUSH
77972: LD_VAR 0 9
77976: PUSH
77977: LD_VAR 0 10
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: PPUSH
77986: CALL_OW 1
77990: ST_TO_ADDR
77991: GO 78007
// i := i - 1 ;
77993: LD_ADDR_VAR 0 5
77997: PUSH
77998: LD_VAR 0 5
78002: PUSH
78003: LD_INT 1
78005: MINUS
78006: ST_TO_ADDR
// end ;
78007: GO 77813
78009: POP
78010: POP
// for i in tmp do
78011: LD_ADDR_VAR 0 5
78015: PUSH
78016: LD_VAR 0 7
78020: PUSH
78021: FOR_IN
78022: IFFALSE 78060
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78024: LD_VAR 0 1
78028: PPUSH
78029: LD_VAR 0 5
78033: PUSH
78034: LD_INT 1
78036: ARRAY
78037: PPUSH
78038: LD_VAR 0 5
78042: PUSH
78043: LD_INT 2
78045: ARRAY
78046: PPUSH
78047: CALL 77002 0 3
78051: NOT
78052: IFFALSE 78058
// exit ;
78054: POP
78055: POP
78056: GO 78062
78058: GO 78021
78060: POP
78061: POP
// end ;
78062: LD_VAR 0 4
78066: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78067: LD_INT 0
78069: PPUSH
78070: PPUSH
78071: PPUSH
78072: PPUSH
78073: PPUSH
78074: PPUSH
78075: PPUSH
// if not GetClass ( unit ) = class_sniper then
78076: LD_VAR 0 1
78080: PPUSH
78081: CALL_OW 257
78085: PUSH
78086: LD_INT 5
78088: EQUAL
78089: NOT
78090: IFFALSE 78094
// exit ;
78092: GO 78482
// dist := 8 ;
78094: LD_ADDR_VAR 0 5
78098: PUSH
78099: LD_INT 8
78101: ST_TO_ADDR
// viewRange := 12 ;
78102: LD_ADDR_VAR 0 7
78106: PUSH
78107: LD_INT 12
78109: ST_TO_ADDR
// side := GetSide ( unit ) ;
78110: LD_ADDR_VAR 0 6
78114: PUSH
78115: LD_VAR 0 1
78119: PPUSH
78120: CALL_OW 255
78124: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78125: LD_INT 61
78127: PPUSH
78128: LD_VAR 0 6
78132: PPUSH
78133: CALL_OW 321
78137: PUSH
78138: LD_INT 2
78140: EQUAL
78141: IFFALSE 78151
// viewRange := 16 ;
78143: LD_ADDR_VAR 0 7
78147: PUSH
78148: LD_INT 16
78150: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78151: LD_VAR 0 1
78155: PPUSH
78156: LD_VAR 0 2
78160: PPUSH
78161: LD_VAR 0 3
78165: PPUSH
78166: CALL_OW 297
78170: PUSH
78171: LD_VAR 0 5
78175: GREATER
78176: IFFALSE 78255
// begin ComMoveXY ( unit , x , y ) ;
78178: LD_VAR 0 1
78182: PPUSH
78183: LD_VAR 0 2
78187: PPUSH
78188: LD_VAR 0 3
78192: PPUSH
78193: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78197: LD_INT 35
78199: PPUSH
78200: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78204: LD_VAR 0 1
78208: PPUSH
78209: LD_VAR 0 2
78213: PPUSH
78214: LD_VAR 0 3
78218: PPUSH
78219: CALL 53137 0 3
78223: NOT
78224: IFFALSE 78228
// exit ;
78226: GO 78482
// until GetDistUnitXY ( unit , x , y ) < dist ;
78228: LD_VAR 0 1
78232: PPUSH
78233: LD_VAR 0 2
78237: PPUSH
78238: LD_VAR 0 3
78242: PPUSH
78243: CALL_OW 297
78247: PUSH
78248: LD_VAR 0 5
78252: LESS
78253: IFFALSE 78197
// end ; ComTurnXY ( unit , x , y ) ;
78255: LD_VAR 0 1
78259: PPUSH
78260: LD_VAR 0 2
78264: PPUSH
78265: LD_VAR 0 3
78269: PPUSH
78270: CALL_OW 118
// wait ( 5 ) ;
78274: LD_INT 5
78276: PPUSH
78277: CALL_OW 67
// _d := GetDir ( unit ) ;
78281: LD_ADDR_VAR 0 10
78285: PUSH
78286: LD_VAR 0 1
78290: PPUSH
78291: CALL_OW 254
78295: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78296: LD_ADDR_VAR 0 8
78300: PUSH
78301: LD_VAR 0 1
78305: PPUSH
78306: CALL_OW 250
78310: PPUSH
78311: LD_VAR 0 10
78315: PPUSH
78316: LD_VAR 0 5
78320: PPUSH
78321: CALL_OW 272
78325: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78326: LD_ADDR_VAR 0 9
78330: PUSH
78331: LD_VAR 0 1
78335: PPUSH
78336: CALL_OW 251
78340: PPUSH
78341: LD_VAR 0 10
78345: PPUSH
78346: LD_VAR 0 5
78350: PPUSH
78351: CALL_OW 273
78355: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78356: LD_VAR 0 8
78360: PPUSH
78361: LD_VAR 0 9
78365: PPUSH
78366: CALL_OW 488
78370: NOT
78371: IFFALSE 78375
// exit ;
78373: GO 78482
// ComAnimCustom ( unit , 1 ) ;
78375: LD_VAR 0 1
78379: PPUSH
78380: LD_INT 1
78382: PPUSH
78383: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78387: LD_VAR 0 8
78391: PPUSH
78392: LD_VAR 0 9
78396: PPUSH
78397: LD_VAR 0 6
78401: PPUSH
78402: LD_VAR 0 7
78406: PPUSH
78407: CALL_OW 330
// repeat wait ( 1 ) ;
78411: LD_INT 1
78413: PPUSH
78414: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78418: LD_VAR 0 1
78422: PPUSH
78423: CALL_OW 316
78427: PUSH
78428: LD_VAR 0 1
78432: PPUSH
78433: CALL_OW 314
78437: OR
78438: PUSH
78439: LD_VAR 0 1
78443: PPUSH
78444: CALL_OW 302
78448: NOT
78449: OR
78450: PUSH
78451: LD_VAR 0 1
78455: PPUSH
78456: CALL_OW 301
78460: OR
78461: IFFALSE 78411
// RemoveSeeing ( _x , _y , side ) ;
78463: LD_VAR 0 8
78467: PPUSH
78468: LD_VAR 0 9
78472: PPUSH
78473: LD_VAR 0 6
78477: PPUSH
78478: CALL_OW 331
// end ; end_of_file
78482: LD_VAR 0 4
78486: RET
