// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 65 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51808 0 9
// PrepareRussian ;
  43: CALL 395 0 0
// Action ;
  47: CALL 6166 0 0
// if debug then
  51: LD_EXP 1
  55: IFFALSE 64
// FogOff ( 3 ) ;
  57: LD_INT 3
  59: PPUSH
  60: CALL_OW 344
// end ;
  64: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  76: LD_ADDR_EXP 2
  80: PUSH
  81: LD_STRING 01_
  83: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  84: LD_ADDR_EXP 3
  88: PUSH
  89: LD_STRING 02_
  91: ST_TO_ADDR
// beriaVisited := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kurinDontWannaTalk := false ;
 100: LD_ADDR_EXP 5
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// kirovHasTank := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// blockNorth := true ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// hasLab := false ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasWorkshop := false ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// hasToBuildTank := false ;
 140: LD_ADDR_EXP 11
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// hasTank := false ;
 148: LD_ADDR_EXP 12
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 156: LD_ADDR_EXP 8
 160: PUSH
 161: LD_INT 60
 163: ST_TO_ADDR
// allianceAttacked := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// hasAllTanks := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// vehCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// vehCaptured := false ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// americanTrap := false ;
 196: LD_ADDR_EXP 17
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// belkovTrapped := false ;
 204: LD_ADDR_EXP 18
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// belkovDied := false ;
 212: LD_ADDR_EXP 19
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// belkovSaved := false ;
 220: LD_ADDR_EXP 28
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// westOutpostDiscovered := false ;
 228: LD_ADDR_EXP 20
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 236: LD_ADDR_EXP 21
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// westOutpostDestroyed := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 252: LD_ADDR_EXP 23
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 260: LD_ADDR_EXP 24
 264: PUSH
 265: LD_INT 0
 267: ST_TO_ADDR
// reinforcementsGained := false ;
 268: LD_ADDR_EXP 25
 272: PUSH
 273: LD_INT 0
 275: ST_TO_ADDR
// allMapPointsSpotted := false ;
 276: LD_ADDR_EXP 26
 280: PUSH
 281: LD_INT 0
 283: ST_TO_ADDR
// mapSpotCounter := 0 ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 292: LD_ADDR_EXP 29
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 300: LD_ADDR_EXP 30
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// initiative := false ;
 308: LD_ADDR_EXP 31
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// belkovBrother := false ;
 316: LD_ADDR_EXP 32
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 324: LD_ADDR_EXP 33
 328: PUSH
 329: LD_INT 1
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 1
 336: RET
// every 0 0$1 trigger vehCounter >= 5 do
 337: LD_EXP 15
 341: PUSH
 342: LD_INT 5
 344: GREATEREQUAL
 345: IFFALSE 357
 347: GO 349
 349: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 350: LD_STRING ACH_WORKSHOP
 352: PPUSH
 353: CALL_OW 543
 357: END
// every 0 0$1 trigger vehCaptured do
 358: LD_EXP 16
 362: IFFALSE 374
 364: GO 366
 366: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 367: LD_STRING ACH_RETAKE
 369: PPUSH
 370: CALL_OW 543
 374: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 375: LD_INT 193
 377: PPUSH
 378: CALL_OW 301
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 387: LD_STRING ACH_DEPOT
 389: PPUSH
 390: CALL_OW 543
 394: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un , additional ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// uc_side := 6 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 6
 410: ST_TO_ADDR
// uc_nation := 3 ;
 411: LD_ADDR_OWVAR 21
 415: PUSH
 416: LD_INT 3
 418: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 419: LD_INT 71
 421: PPUSH
 422: LD_STRING kirov
 424: PPUSH
 425: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 429: LD_ADDR_EXP 38
 433: PUSH
 434: LD_STRING Kurin
 436: PPUSH
 437: CALL_OW 25
 441: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 442: LD_EXP 38
 446: PPUSH
 447: LD_INT 117
 449: PPUSH
 450: LD_INT 108
 452: PPUSH
 453: LD_INT 0
 455: PPUSH
 456: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 460: LD_EXP 38
 464: PPUSH
 465: LD_INT 2
 467: PPUSH
 468: CALL 58293 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 472: LD_ADDR_EXP 39
 476: PUSH
 477: LD_STRING Kovalyuk
 479: PPUSH
 480: CALL_OW 25
 484: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 485: LD_EXP 39
 489: PPUSH
 490: LD_INT 71
 492: PPUSH
 493: CALL_OW 52
// additional := ( 3 - Count ( CreateCharacterSet ( 01_belkovTeam ) ) ) ;
 497: LD_ADDR_VAR 0 6
 501: PUSH
 502: LD_INT 3
 504: PUSH
 505: LD_STRING 01_belkovTeam
 507: PPUSH
 508: CALL_OW 31
 512: PPUSH
 513: CALL 19450 0 1
 517: MINUS
 518: ST_TO_ADDR
// if additional < 0 then
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 0
 526: LESS
 527: IFFALSE 537
// additional := 0 ;
 529: LD_ADDR_VAR 0 6
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// tmp := [ [ ru2_arm1 , class_soldier , 2 + additional ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: LD_INT 95
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_VAR 0 6
 555: PLUS
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 209
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 83
 578: PUSH
 579: LD_INT 4
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 71
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 71
 606: PUSH
 607: LD_INT 3
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// InitHC_All ( ) ;
 625: CALL_OW 584
// belkovBrother := false ;
 629: LD_ADDR_EXP 32
 633: PUSH
 634: LD_INT 0
 636: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 637: LD_EXP 2
 641: PUSH
 642: LD_STRING Belkov
 644: STR
 645: PPUSH
 646: CALL_OW 28
 650: NOT
 651: PUSH
 652: LD_EXP 1
 656: NOT
 657: AND
 658: IFFALSE 695
// begin Belkov := NewCharacter ( Belkov2 ) ;
 660: LD_ADDR_EXP 36
 664: PUSH
 665: LD_STRING Belkov2
 667: PPUSH
 668: CALL_OW 25
 672: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 673: LD_EXP 36
 677: PPUSH
 678: LD_INT 71
 680: PPUSH
 681: CALL_OW 52
// belkovBrother := true ;
 685: LD_ADDR_EXP 32
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// end else
 693: GO 761
// begin un := NewCharacter ( Belkov2 ) ;
 695: LD_ADDR_VAR 0 5
 699: PUSH
 700: LD_STRING Belkov2
 702: PPUSH
 703: CALL_OW 25
 707: ST_TO_ADDR
// SetTag ( un , tBelkov ) ;
 708: LD_VAR 0 5
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL_OW 109
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 720: LD_ADDR_EXP 43
 724: PUSH
 725: LD_EXP 43
 729: PPUSH
 730: LD_EXP 43
 734: PUSH
 735: LD_INT 1
 737: PLUS
 738: PPUSH
 739: LD_VAR 0 5
 743: PPUSH
 744: CALL_OW 1
 748: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 749: LD_VAR 0 5
 753: PPUSH
 754: LD_INT 209
 756: PPUSH
 757: CALL_OW 52
// end ; for i in tmp do
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_VAR 0 4
 770: PUSH
 771: FOR_IN
 772: IFFALSE 878
// for j := 1 to i [ 3 ] do
 774: LD_ADDR_VAR 0 3
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_VAR 0 2
 788: PUSH
 789: LD_INT 3
 791: ARRAY
 792: PUSH
 793: FOR_TO
 794: IFFALSE 874
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 796: LD_INT 0
 798: PPUSH
 799: LD_VAR 0 2
 803: PUSH
 804: LD_INT 2
 806: ARRAY
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: CALL_OW 380
// un := CreateHuman ;
 815: LD_ADDR_VAR 0 5
 819: PUSH
 820: CALL_OW 44
 824: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 825: LD_VAR 0 5
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 1
 837: ARRAY
 838: PPUSH
 839: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 843: LD_ADDR_EXP 43
 847: PUSH
 848: LD_EXP 43
 852: PPUSH
 853: LD_EXP 43
 857: PUSH
 858: LD_INT 1
 860: PLUS
 861: PPUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: CALL_OW 1
 871: ST_TO_ADDR
// end ;
 872: GO 793
 874: POP
 875: POP
 876: GO 771
 878: POP
 879: POP
// SetBName ( beria , beria ) ;
 880: LD_INT 106
 882: PPUSH
 883: LD_STRING beria
 885: PPUSH
 886: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 890: LD_ADDR_EXP 40
 894: PUSH
 895: LD_STRING Platonov
 897: PPUSH
 898: CALL_OW 25
 902: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 903: LD_EXP 40
 907: PPUSH
 908: LD_INT 66
 910: PPUSH
 911: LD_INT 99
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 921: LD_EXP 40
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL 58293 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 933: LD_ADDR_EXP 41
 937: PUSH
 938: LD_STRING Kuklajs
 940: PPUSH
 941: CALL_OW 25
 945: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 946: LD_ADDR_EXP 42
 950: PUSH
 951: LD_STRING Benko
 953: PPUSH
 954: CALL_OW 25
 958: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 959: LD_EXP 41
 963: PPUSH
 964: LD_INT 76
 966: PPUSH
 967: LD_INT 99
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 977: LD_EXP 42
 981: PPUSH
 982: LD_INT 68
 984: PPUSH
 985: LD_INT 88
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 995: LD_EXP 41
 999: PUSH
1000: LD_EXP 42
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
1013: LD_ADDR_EXP 44
1017: PUSH
1018: LD_EXP 44
1022: PPUSH
1023: LD_EXP 44
1027: PUSH
1028: LD_INT 1
1030: PLUS
1031: PPUSH
1032: LD_EXP 41
1036: PPUSH
1037: CALL_OW 1
1041: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
1042: LD_ADDR_EXP 44
1046: PUSH
1047: LD_EXP 44
1051: PPUSH
1052: LD_EXP 44
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: PPUSH
1061: LD_EXP 42
1065: PPUSH
1066: CALL_OW 1
1070: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: LD_INT 63
1078: PUSH
1079: LD_INT 86
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 74
1092: PUSH
1093: LD_INT 94
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 77
1106: PUSH
1107: LD_INT 103
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: ST_TO_ADDR
// for i in tmp do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_VAR 0 4
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1261
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1136: LD_INT 0
1138: PPUSH
1139: LD_INT 1
1141: PPUSH
1142: LD_INT 3
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 2
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_OWVAR 67
1164: ARRAY
1165: PPUSH
1166: CALL_OW 380
// un := CreateHuman ;
1170: LD_ADDR_VAR 0 5
1174: PUSH
1175: CALL_OW 44
1179: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1180: LD_VAR 0 5
1184: PPUSH
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 3
1192: ARRAY
1193: PPUSH
1194: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1198: LD_VAR 0 5
1202: PPUSH
1203: LD_VAR 0 2
1207: PUSH
1208: LD_INT 1
1210: ARRAY
1211: PPUSH
1212: LD_VAR 0 2
1216: PUSH
1217: LD_INT 2
1219: ARRAY
1220: PPUSH
1221: CALL_OW 428
1225: PPUSH
1226: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1230: LD_ADDR_EXP 44
1234: PUSH
1235: LD_EXP 44
1239: PPUSH
1240: LD_EXP 44
1244: PUSH
1245: LD_INT 1
1247: PLUS
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// end ;
1259: GO 1133
1261: POP
1262: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1263: LD_EXP 2
1267: PUSH
1268: LD_STRING Gnyevko
1270: STR
1271: PPUSH
1272: CALL_OW 28
1276: NOT
1277: PUSH
1278: LD_EXP 1
1282: NOT
1283: AND
1284: IFFALSE 1311
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 2
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1299: CALL_OW 44
1303: PPUSH
1304: LD_INT 106
1306: PPUSH
1307: CALL_OW 52
// end ; end ;
1311: LD_VAR 0 1
1315: RET
// export function PrepareBurlak ; var i ; begin
1316: LD_INT 0
1318: PPUSH
1319: PPUSH
// uc_side := 3 ;
1320: LD_ADDR_OWVAR 20
1324: PUSH
1325: LD_INT 3
1327: ST_TO_ADDR
// uc_nation := 3 ;
1328: LD_ADDR_OWVAR 21
1332: PUSH
1333: LD_INT 3
1335: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1336: LD_ADDR_EXP 34
1340: PUSH
1341: LD_STRING Burlak
1343: PPUSH
1344: LD_EXP 1
1348: NOT
1349: PPUSH
1350: LD_EXP 2
1354: PPUSH
1355: CALL 17264 0 3
1359: ST_TO_ADDR
// uc_side := 6 ;
1360: LD_ADDR_OWVAR 20
1364: PUSH
1365: LD_INT 6
1367: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1368: LD_ADDR_EXP 35
1372: PUSH
1373: LD_STRING Gnyevko
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 17264 0 3
1391: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1392: LD_ADDR_EXP 37
1396: PUSH
1397: LD_STRING Kirilenkova
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 17264 0 3
1415: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1416: LD_ADDR_EXP 36
1420: PUSH
1421: LD_STRING Belkov
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 17264 0 3
1439: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_belkovTeam ) ;
1440: LD_ADDR_EXP 45
1444: PUSH
1445: LD_STRING 01_belkovTeam
1447: PPUSH
1448: CALL_OW 31
1452: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1453: LD_ADDR_VAR 0 1
1457: PUSH
1458: LD_EXP 34
1462: PUSH
1463: LD_EXP 35
1467: PUSH
1468: LD_EXP 37
1472: PUSH
1473: LD_EXP 36
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: PUSH
1484: LD_EXP 45
1488: UNION
1489: ST_TO_ADDR
// end ;
1490: LD_VAR 0 1
1494: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1495: LD_EXP 4
1499: PUSH
1500: LD_INT 47
1502: PPUSH
1503: LD_INT 3
1505: PPUSH
1506: CALL_OW 321
1510: PUSH
1511: LD_INT 2
1513: EQUAL
1514: AND
1515: IFFALSE 1742
1517: GO 1519
1519: DISABLE
1520: LD_INT 0
1522: PPUSH
1523: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1524: LD_ADDR_VAR 0 1
1528: PUSH
1529: LD_EXP 43
1533: PPUSH
1534: LD_INT 25
1536: PUSH
1537: LD_INT 2
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: CALL_OW 72
1548: ST_TO_ADDR
// if not tmp then
1549: LD_VAR 0 1
1553: NOT
1554: IFFALSE 1558
// exit ;
1556: GO 1742
// wait ( 0 0$5 ) ;
1558: LD_INT 175
1560: PPUSH
1561: CALL_OW 67
// ComExit ( tmp ) ;
1565: LD_VAR 0 1
1569: PPUSH
1570: CALL 55529 0 1
// for i := 1 to 2 do
1574: LD_ADDR_VAR 0 2
1578: PUSH
1579: DOUBLE
1580: LD_INT 1
1582: DEC
1583: ST_TO_ADDR
1584: LD_INT 2
1586: PUSH
1587: FOR_TO
1588: IFFALSE 1631
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1590: LD_VAR 0 1
1594: PPUSH
1595: LD_INT 71
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1605: LD_VAR 0 1
1609: PPUSH
1610: LD_INT 121
1612: PPUSH
1613: LD_INT 111
1615: PPUSH
1616: CALL_OW 171
// AddComUnload ( tmp ) ;
1620: LD_VAR 0 1
1624: PPUSH
1625: CALL_OW 219
// end ;
1629: GO 1587
1631: POP
1632: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1633: LD_VAR 0 1
1637: PPUSH
1638: LD_INT 2
1640: PPUSH
1641: LD_INT 113
1643: PPUSH
1644: LD_INT 113
1646: PPUSH
1647: LD_INT 0
1649: PPUSH
1650: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1654: LD_INT 83
1656: PPUSH
1657: LD_INT 46
1659: PPUSH
1660: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1664: LD_INT 83
1666: PPUSH
1667: LD_INT 47
1669: PPUSH
1670: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1674: LD_INT 83
1676: PPUSH
1677: LD_INT 48
1679: PPUSH
1680: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1684: LD_VAR 0 1
1688: PPUSH
1689: LD_INT 26
1691: PPUSH
1692: LD_INT 116
1694: PPUSH
1695: LD_INT 98
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1705: LD_INT 35
1707: PPUSH
1708: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1712: LD_VAR 0 1
1716: PPUSH
1717: LD_INT 60
1719: PUSH
1720: EMPTY
1721: LIST
1722: PPUSH
1723: CALL_OW 72
1727: NOT
1728: IFFALSE 1705
// ComEnterUnit ( tmp , kirov ) ;
1730: LD_VAR 0 1
1734: PPUSH
1735: LD_INT 71
1737: PPUSH
1738: CALL_OW 120
// end ;
1742: PPOPN 2
1744: END
// export function BelkovAttackScript ; var i , un , brother , belkovTank , mech , tmp , fuel ; begin
1745: LD_INT 0
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_INT 22
1762: PUSH
1763: LD_INT 6
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 21
1772: PUSH
1773: LD_INT 2
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL_OW 69
1788: ST_TO_ADDR
// if not belkovTank then
1789: LD_VAR 0 5
1793: NOT
1794: IFFALSE 1887
// begin uc_side := 6 ;
1796: LD_ADDR_OWVAR 20
1800: PUSH
1801: LD_INT 6
1803: ST_TO_ADDR
// uc_nation := 3 ;
1804: LD_ADDR_OWVAR 21
1808: PUSH
1809: LD_INT 3
1811: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1812: LD_INT 21
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: LD_INT 42
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 22188 0 5
// belkovTank := CreateVehicle ;
1831: LD_ADDR_VAR 0 5
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1841: LD_VAR 0 5
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1853: LD_VAR 0 5
1857: PPUSH
1858: LD_INT 127
1860: PPUSH
1861: LD_INT 118
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1871: LD_EXP 36
1875: PPUSH
1876: LD_VAR 0 5
1880: PPUSH
1881: CALL_OW 120
// end else
1885: GO 1901
// begin belkovTank := belkovTank [ 1 ] ;
1887: LD_ADDR_VAR 0 5
1891: PUSH
1892: LD_VAR 0 5
1896: PUSH
1897: LD_INT 1
1899: ARRAY
1900: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1901: LD_VAR 0 5
1905: PPUSH
1906: LD_INT 71
1908: PPUSH
1909: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1913: LD_VAR 0 5
1917: PPUSH
1918: LD_INT 71
1920: PPUSH
1921: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1925: LD_VAR 0 5
1929: PPUSH
1930: CALL_OW 256
1934: PUSH
1935: LD_INT 1000
1937: LESS
1938: IFFALSE 2051
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_EXP 43
1949: PPUSH
1950: LD_INT 25
1952: PUSH
1953: LD_INT 3
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PPUSH
1960: CALL_OW 72
1964: ST_TO_ADDR
// if not mech then
1965: LD_VAR 0 6
1969: NOT
1970: IFFALSE 1986
// SetLives ( belkovTank , 1000 ) else
1972: LD_VAR 0 5
1976: PPUSH
1977: LD_INT 1000
1979: PPUSH
1980: CALL_OW 234
1984: GO 2051
// begin ComExit ( mech ) ;
1986: LD_VAR 0 6
1990: PPUSH
1991: CALL 55529 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1995: LD_VAR 0 6
1999: PPUSH
2000: LD_VAR 0 5
2004: PPUSH
2005: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2009: LD_VAR 0 6
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 6
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 30
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 69
2042: PUSH
2043: LD_INT 1
2045: ARRAY
2046: PPUSH
2047: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
2051: LD_INT 70
2053: PPUSH
2054: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 1000
2070: EQUAL
2071: IFFALSE 2051
// if mech then
2073: LD_VAR 0 6
2077: IFFALSE 2121
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_INT 22
2086: PUSH
2087: LD_INT 6
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 30
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PPUSH
2108: CALL_OW 69
2112: PUSH
2113: LD_INT 1
2115: ARRAY
2116: PPUSH
2117: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2121: LD_EXP 36
2125: PPUSH
2126: LD_INT 107
2128: PPUSH
2129: LD_INT 104
2131: PPUSH
2132: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2136: LD_EXP 36
2140: PPUSH
2141: LD_INT 95
2143: PPUSH
2144: LD_INT 101
2146: PPUSH
2147: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2151: LD_EXP 36
2155: PPUSH
2156: LD_INT 89
2158: PPUSH
2159: LD_INT 100
2161: PPUSH
2162: CALL_OW 171
// wait ( 0 0$2 ) ;
2166: LD_INT 70
2168: PPUSH
2169: CALL_OW 67
// brother := FilterAllUnits ( [ [ f_side , 6 ] , [ f_tag , tBelkov ] , [ f_class , class_soldier ] ] ) ;
2173: LD_ADDR_VAR 0 4
2177: PUSH
2178: LD_INT 22
2180: PUSH
2181: LD_INT 6
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 120
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 25
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PPUSH
2213: CALL_OW 69
2217: ST_TO_ADDR
// if brother then
2218: LD_VAR 0 4
2222: IFFALSE 2265
// if not brother [ 1 ] in belkovTeam then
2224: LD_VAR 0 4
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: PUSH
2233: LD_EXP 45
2237: IN
2238: NOT
2239: IFFALSE 2265
// belkovTeam := Join ( belkovTeam , brother [ 1 ] ) ;
2241: LD_ADDR_EXP 45
2245: PUSH
2246: LD_EXP 45
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL 55131 0 2
2264: ST_TO_ADDR
// if belkovTeam < 3 then
2265: LD_EXP 45
2269: PUSH
2270: LD_INT 3
2272: LESS
2273: IFFALSE 2358
// begin for i := belkovTeam to 3 do
2275: LD_ADDR_VAR 0 2
2279: PUSH
2280: DOUBLE
2281: LD_EXP 45
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 3
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2356
// begin un := kirovBaseSquad [ 1 ] ;
2293: LD_ADDR_VAR 0 3
2297: PUSH
2298: LD_EXP 43
2302: PUSH
2303: LD_INT 1
2305: ARRAY
2306: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
2307: LD_ADDR_EXP 43
2311: PUSH
2312: LD_EXP 43
2316: PPUSH
2317: LD_INT 1
2319: PPUSH
2320: CALL_OW 3
2324: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
2325: LD_ADDR_EXP 45
2329: PUSH
2330: LD_EXP 45
2334: PPUSH
2335: LD_EXP 45
2339: PUSH
2340: LD_INT 1
2342: PLUS
2343: PPUSH
2344: LD_VAR 0 3
2348: PPUSH
2349: CALL_OW 1
2353: ST_TO_ADDR
// end ;
2354: GO 2290
2356: POP
2357: POP
// end ; if Kirilenkova then
2358: LD_EXP 37
2362: IFFALSE 2386
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
2364: LD_ADDR_EXP 45
2368: PUSH
2369: LD_EXP 45
2373: PPUSH
2374: LD_EXP 37
2378: PPUSH
2379: CALL 55131 0 2
2383: ST_TO_ADDR
2384: GO 2425
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
2386: LD_ADDR_EXP 45
2390: PUSH
2391: LD_EXP 45
2395: PPUSH
2396: LD_EXP 43
2400: PPUSH
2401: LD_INT 25
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PPUSH
2411: CALL_OW 72
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: CALL 55131 0 2
2424: ST_TO_ADDR
// for i in belkovTeam do
2425: LD_ADDR_VAR 0 2
2429: PUSH
2430: LD_EXP 45
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2464
// begin ComExit ( i ) ;
2438: LD_VAR 0 2
2442: PPUSH
2443: CALL 55529 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2447: LD_VAR 0 2
2451: PPUSH
2452: LD_INT 89
2454: PPUSH
2455: LD_INT 100
2457: PPUSH
2458: CALL_OW 171
// end ;
2462: GO 2435
2464: POP
2465: POP
// tmp := Belkov union belkovTeam ;
2466: LD_ADDR_VAR 0 7
2470: PUSH
2471: LD_EXP 36
2475: PUSH
2476: LD_EXP 45
2480: UNION
2481: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2482: LD_INT 35
2484: PPUSH
2485: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2489: LD_VAR 0 7
2493: PPUSH
2494: LD_INT 60
2496: PUSH
2497: EMPTY
2498: LIST
2499: PPUSH
2500: CALL_OW 72
2504: NOT
2505: IFFALSE 2482
// ComMoveXY ( tmp , 71 , 65 ) ;
2507: LD_VAR 0 7
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: LD_INT 65
2517: PPUSH
2518: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2522: LD_VAR 0 7
2526: PPUSH
2527: LD_INT 61
2529: PPUSH
2530: LD_INT 37
2532: PPUSH
2533: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2537: LD_VAR 0 7
2541: PPUSH
2542: LD_INT 67
2544: PPUSH
2545: LD_INT 17
2547: PPUSH
2548: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2552: LD_VAR 0 7
2556: PPUSH
2557: LD_INT 70
2559: PPUSH
2560: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2564: LD_EXP 36
2568: PPUSH
2569: LD_INT 63
2571: PPUSH
2572: LD_INT 8
2574: PPUSH
2575: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2579: LD_EXP 36
2583: PPUSH
2584: LD_INT 105
2586: PPUSH
2587: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2591: LD_EXP 36
2595: PPUSH
2596: LD_INT 86
2598: PPUSH
2599: LD_INT 37
2601: PPUSH
2602: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2606: LD_EXP 36
2610: PPUSH
2611: LD_INT 105
2613: PPUSH
2614: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2618: LD_VAR 0 7
2622: PPUSH
2623: LD_INT 88
2625: PPUSH
2626: LD_INT 29
2628: PPUSH
2629: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2633: LD_INT 35
2635: PPUSH
2636: CALL_OW 67
// for i in tmp do
2640: LD_ADDR_VAR 0 2
2644: PUSH
2645: LD_VAR 0 7
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2682
// if not HasTask ( i ) then
2653: LD_VAR 0 2
2657: PPUSH
2658: CALL_OW 314
2662: NOT
2663: IFFALSE 2680
// AddComMoveXY ( tmp , 88 , 29 ) ;
2665: LD_VAR 0 7
2669: PPUSH
2670: LD_INT 88
2672: PPUSH
2673: LD_INT 29
2675: PPUSH
2676: CALL_OW 171
2680: GO 2650
2682: POP
2683: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2684: LD_VAR 0 7
2688: PPUSH
2689: LD_INT 95
2691: PUSH
2692: LD_INT 6
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 72
2703: IFFALSE 2797
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: LD_VAR 0 7
2714: PPUSH
2715: LD_INT 95
2717: PUSH
2718: LD_INT 6
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 72
2729: PUSH
2730: FOR_IN
2731: IFFALSE 2795
// begin if i = Belkov then
2733: LD_VAR 0 2
2737: PUSH
2738: LD_EXP 36
2742: EQUAL
2743: IFFALSE 2784
// begin belkovTank := IsInUnit ( Belkov ) ;
2745: LD_ADDR_VAR 0 5
2749: PUSH
2750: LD_EXP 36
2754: PPUSH
2755: CALL_OW 310
2759: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2760: LD_ADDR_VAR 0 8
2764: PUSH
2765: LD_VAR 0 5
2769: PPUSH
2770: CALL_OW 261
2774: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2775: LD_VAR 0 5
2779: PPUSH
2780: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 64
// end ;
2793: GO 2730
2795: POP
2796: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2797: LD_VAR 0 7
2801: PPUSH
2802: LD_INT 52
2804: PUSH
2805: EMPTY
2806: LIST
2807: PPUSH
2808: CALL_OW 72
2812: NOT
2813: IFFALSE 2633
// wait ( 1 1$20 ) ;
2815: LD_INT 2800
2817: PPUSH
2818: CALL_OW 67
// if fuel < 50 then
2822: LD_VAR 0 8
2826: PUSH
2827: LD_INT 50
2829: LESS
2830: IFFALSE 2840
// fuel := 50 ;
2832: LD_ADDR_VAR 0 8
2836: PUSH
2837: LD_INT 50
2839: ST_TO_ADDR
// uc_side := 6 ;
2840: LD_ADDR_OWVAR 20
2844: PUSH
2845: LD_INT 6
2847: ST_TO_ADDR
// uc_nation := 3 ;
2848: LD_ADDR_OWVAR 21
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2856: LD_INT 21
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 42
2867: PPUSH
2868: LD_VAR 0 8
2872: PUSH
2873: LD_INT 5
2875: MINUS
2876: PPUSH
2877: CALL 22188 0 5
// belkovTank := CreateVehicle ;
2881: LD_ADDR_VAR 0 5
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2891: LD_VAR 0 5
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2903: LD_VAR 0 5
2907: PPUSH
2908: LD_INT 60
2910: PPUSH
2911: LD_INT 3
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2921: LD_EXP 36
2925: PPUSH
2926: LD_VAR 0 5
2930: PPUSH
2931: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2935: LD_EXP 36
2939: PPUSH
2940: LD_INT 72
2942: PPUSH
2943: LD_INT 26
2945: PPUSH
2946: CALL_OW 111
// wait ( 0 0$2 ) ;
2950: LD_INT 70
2952: PPUSH
2953: CALL_OW 67
// for i in belkovTeam do
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_EXP 45
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3012
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2970: LD_VAR 0 2
2974: PPUSH
2975: LD_INT 60
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 0
2983: PPUSH
2984: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2988: LD_VAR 0 2
2992: PPUSH
2993: LD_INT 65
2995: PPUSH
2996: LD_INT 18
2998: PPUSH
2999: CALL_OW 111
// wait ( 0 0$0.8 ) ;
3003: LD_INT 28
3005: PPUSH
3006: CALL_OW 67
// end ;
3010: GO 2967
3012: POP
3013: POP
// repeat wait ( 0 0$1 ) ;
3014: LD_INT 35
3016: PPUSH
3017: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
3021: LD_EXP 14
3025: PUSH
3026: LD_EXP 45
3030: PPUSH
3031: LD_INT 60
3033: PUSH
3034: EMPTY
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: NOT
3042: AND
3043: IFFALSE 3014
// americanTrap := true ;
3045: LD_ADDR_EXP 17
3049: PUSH
3050: LD_INT 1
3052: ST_TO_ADDR
// end ;
3053: LD_VAR 0 1
3057: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
3058: LD_EXP 4
3062: PUSH
3063: LD_EXP 40
3067: PPUSH
3068: CALL_OW 302
3072: AND
3073: IFFALSE 3393
3075: GO 3077
3077: DISABLE
3078: LD_INT 0
3080: PPUSH
3081: PPUSH
3082: PPUSH
3083: PPUSH
// begin enable ;
3084: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
3085: LD_EXP 8
3089: PUSH
3090: LD_INT 0
3092: GREATER
3093: PUSH
3094: LD_EXP 40
3098: PPUSH
3099: CALL_OW 314
3103: NOT
3104: AND
3105: IFFALSE 3274
// begin dir := rand ( 0 , 5 ) ;
3107: LD_ADDR_VAR 0 4
3111: PUSH
3112: LD_INT 0
3114: PPUSH
3115: LD_INT 5
3117: PPUSH
3118: CALL_OW 12
3122: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
3123: LD_ADDR_VAR 0 1
3127: PUSH
3128: LD_EXP 40
3132: PPUSH
3133: CALL_OW 250
3137: PPUSH
3138: LD_VAR 0 4
3142: PPUSH
3143: LD_INT 5
3145: PPUSH
3146: CALL_OW 272
3150: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
3151: LD_ADDR_VAR 0 2
3155: PUSH
3156: LD_EXP 40
3160: PPUSH
3161: CALL_OW 251
3165: PPUSH
3166: LD_VAR 0 4
3170: PPUSH
3171: LD_INT 5
3173: PPUSH
3174: CALL_OW 273
3178: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
3179: LD_VAR 0 1
3183: PPUSH
3184: LD_VAR 0 2
3188: PPUSH
3189: CALL_OW 488
3193: PUSH
3194: LD_INT 106
3196: PPUSH
3197: LD_VAR 0 1
3201: PPUSH
3202: LD_VAR 0 2
3206: PPUSH
3207: CALL_OW 297
3211: PUSH
3212: LD_INT 26
3214: LESS
3215: AND
3216: IFFALSE 3239
// AddComMoveXY ( Platonov , x , y ) else
3218: LD_EXP 40
3222: PPUSH
3223: LD_VAR 0 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 171
3237: GO 3254
// AddComMoveXY ( Platonov , 64 , 96 ) ;
3239: LD_EXP 40
3243: PPUSH
3244: LD_INT 64
3246: PPUSH
3247: LD_INT 96
3249: PPUSH
3250: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
3254: LD_EXP 40
3258: PPUSH
3259: LD_INT 105
3261: PPUSH
3262: LD_INT 315
3264: PPUSH
3265: CALL_OW 12
3269: PPUSH
3270: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
3274: LD_EXP 8
3278: PUSH
3279: LD_INT 0
3281: LESSEQUAL
3282: IFFALSE 3328
// begin if not IsAt ( Platonov , 64 , 96 ) then
3284: LD_EXP 40
3288: PPUSH
3289: LD_INT 64
3291: PPUSH
3292: LD_INT 96
3294: PPUSH
3295: CALL_OW 307
3299: NOT
3300: IFFALSE 3326
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
3302: LD_EXP 40
3306: PPUSH
3307: LD_INT 64
3309: PPUSH
3310: LD_INT 96
3312: PPUSH
3313: CALL_OW 111
// AddComHold ( Platonov ) ;
3317: LD_EXP 40
3321: PPUSH
3322: CALL_OW 200
// end ; end else
3326: GO 3393
// if tick mod 0 0$75 = 0 0$00 then
3328: LD_OWVAR 1
3332: PUSH
3333: LD_INT 2625
3335: MOD
3336: PUSH
3337: LD_INT 0
3339: EQUAL
3340: IFFALSE 3393
// begin amount := rand ( 2 , 5 ) ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_INT 2
3349: PPUSH
3350: LD_INT 5
3352: PPUSH
3353: CALL_OW 12
3357: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3358: LD_ADDR_EXP 8
3362: PUSH
3363: LD_EXP 8
3367: PUSH
3368: LD_VAR 0 3
3372: PUSH
3373: LD_INT 10
3375: MUL
3376: MINUS
3377: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3378: LD_VAR 0 3
3382: PPUSH
3383: LD_INT 5
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 55
// end ; end ;
3393: PPOPN 4
3395: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3396: LD_INT 106
3398: PPUSH
3399: CALL_OW 274
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: CALL_OW 275
3411: PUSH
3412: LD_INT 30
3414: LESS
3415: IFFALSE 3625
3417: GO 3419
3419: DISABLE
3420: LD_INT 0
3422: PPUSH
3423: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3424: LD_ADDR_VAR 0 2
3428: PUSH
3429: LD_EXP 43
3433: PPUSH
3434: LD_INT 3
3436: PUSH
3437: LD_INT 60
3439: PUSH
3440: EMPTY
3441: LIST
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 25
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 72
3465: ST_TO_ADDR
// if not eng then
3466: LD_VAR 0 2
3470: NOT
3471: IFFALSE 3475
// exit ;
3473: GO 3625
// ComExit ( eng ) ;
3475: LD_VAR 0 2
3479: PPUSH
3480: CALL 55529 0 1
// i := 5 ;
3484: LD_ADDR_VAR 0 1
3488: PUSH
3489: LD_INT 5
3491: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3492: LD_INT 35
3494: PPUSH
3495: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3499: LD_VAR 0 2
3503: PPUSH
3504: LD_INT 60
3506: PUSH
3507: EMPTY
3508: LIST
3509: PPUSH
3510: CALL_OW 72
3514: NOT
3515: PUSH
3516: LD_VAR 0 2
3520: AND
3521: IFFALSE 3591
// begin ComTransport ( eng , kirov , mat_oil ) ;
3523: LD_VAR 0 2
3527: PPUSH
3528: LD_INT 71
3530: PPUSH
3531: LD_INT 2
3533: PPUSH
3534: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3538: LD_VAR 0 2
3542: PPUSH
3543: LD_INT 67
3545: PPUSH
3546: LD_INT 99
3548: PPUSH
3549: CALL_OW 171
// AddComUnload ( eng ) ;
3553: LD_VAR 0 2
3557: PPUSH
3558: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3562: LD_VAR 0 2
3566: PPUSH
3567: LD_INT 107
3569: PPUSH
3570: LD_INT 104
3572: PPUSH
3573: CALL_OW 171
// i := i - 1 ;
3577: LD_ADDR_VAR 0 1
3581: PUSH
3582: LD_VAR 0 1
3586: PUSH
3587: LD_INT 1
3589: MINUS
3590: ST_TO_ADDR
// end ; until i = 0 ;
3591: LD_VAR 0 1
3595: PUSH
3596: LD_INT 0
3598: EQUAL
3599: IFFALSE 3492
// AddComMoveUnit ( eng , kirov ) ;
3601: LD_VAR 0 2
3605: PPUSH
3606: LD_INT 71
3608: PPUSH
3609: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3613: LD_VAR 0 2
3617: PPUSH
3618: LD_INT 71
3620: PPUSH
3621: CALL_OW 180
// end ;
3625: PPOPN 2
3627: END
// export function SendReinforcements ; var i ; begin
3628: LD_INT 0
3630: PPUSH
3631: PPUSH
// reinforcementsGained := true ;
3632: LD_ADDR_EXP 25
3636: PUSH
3637: LD_INT 1
3639: ST_TO_ADDR
// for i := 1 to 2 do
3640: LD_ADDR_VAR 0 2
3644: PUSH
3645: DOUBLE
3646: LD_INT 1
3648: DEC
3649: ST_TO_ADDR
3650: LD_INT 2
3652: PUSH
3653: FOR_TO
3654: IFFALSE 3736
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3656: LD_EXP 44
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PPUSH
3667: CALL 55529 0 1
3671: IFFALSE 3680
// wait ( 0 0$0.3 ) ;
3673: LD_INT 10
3675: PPUSH
3676: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3680: LD_EXP 44
3684: PUSH
3685: LD_VAR 0 2
3689: ARRAY
3690: PPUSH
3691: LD_INT 75
3693: PPUSH
3694: LD_INT 84
3696: PPUSH
3697: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3701: LD_EXP 44
3705: PUSH
3706: LD_VAR 0 2
3710: ARRAY
3711: PPUSH
3712: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3716: LD_EXP 44
3720: PUSH
3721: LD_VAR 0 2
3725: ARRAY
3726: PPUSH
3727: LD_INT 3
3729: PPUSH
3730: CALL_OW 235
// end ;
3734: GO 3653
3736: POP
3737: POP
// end ;
3738: LD_VAR 0 1
3742: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3743: LD_EXP 21
3747: PUSH
3748: LD_EXP 18
3752: AND
3753: PUSH
3754: LD_EXP 43
3758: PPUSH
3759: LD_INT 25
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL_OW 72
3773: AND
3774: IFFALSE 3931
3776: GO 3778
3778: DISABLE
3779: LD_INT 0
3781: PPUSH
3782: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3783: LD_ADDR_VAR 0 1
3787: PUSH
3788: LD_EXP 43
3792: PPUSH
3793: LD_INT 25
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 72
3807: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: LD_INT 22
3815: PUSH
3816: LD_INT 6
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 30
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PPUSH
3837: CALL_OW 69
3841: ST_TO_ADDR
// if not fac then
3842: LD_VAR 0 2
3846: NOT
3847: IFFALSE 3851
// exit ;
3849: GO 3931
// fac := fac [ 1 ] ;
3851: LD_ADDR_VAR 0 2
3855: PUSH
3856: LD_VAR 0 2
3860: PUSH
3861: LD_INT 1
3863: ARRAY
3864: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3865: LD_VAR 0 2
3869: PPUSH
3870: CALL_OW 313
3874: PUSH
3875: LD_INT 0
3877: EQUAL
3878: IFFALSE 3910
// begin ComExit ( mech ) ;
3880: LD_VAR 0 1
3884: PPUSH
3885: CALL 55529 0 1
// wait ( 3 ) ;
3889: LD_INT 3
3891: PPUSH
3892: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_VAR 0 2
3905: PPUSH
3906: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_INT 21
3917: PPUSH
3918: LD_INT 1
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_INT 42
3926: PPUSH
3927: CALL_OW 125
// end ;
3931: PPOPN 2
3933: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3939: LD_VAR 0 1
3943: PPUSH
3944: LD_INT 90
3946: PPUSH
3947: LD_INT 100
3949: PPUSH
3950: CALL_OW 111
// wait ( 0 0$10 ) ;
3954: LD_INT 350
3956: PPUSH
3957: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3961: LD_VAR 0 1
3965: PPUSH
3966: LD_INT 0
3968: PPUSH
3969: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3973: LD_INT 35
3975: PPUSH
3976: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3980: LD_ADDR_VAR 0 4
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 110
3994: ST_TO_ADDR
// if tag = 0 then
3995: LD_VAR 0 4
3999: PUSH
4000: LD_INT 0
4002: EQUAL
4003: IFFALSE 4074
// begin if not HasTask ( vehicle ) then
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 314
4014: NOT
4015: IFFALSE 4032
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
4017: LD_VAR 0 1
4021: PPUSH
4022: LD_INT 83
4024: PPUSH
4025: LD_INT 68
4027: PPUSH
4028: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 256
4041: PUSH
4042: LD_INT 750
4044: LESS
4045: IFFALSE 4074
// begin SetTag ( vehicle , 1 ) ;
4047: LD_VAR 0 1
4051: PPUSH
4052: LD_INT 1
4054: PPUSH
4055: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
4059: LD_VAR 0 1
4063: PPUSH
4064: LD_INT 93
4066: PPUSH
4067: LD_INT 102
4069: PPUSH
4070: CALL_OW 111
// end ; end ; if tag = 1 then
4074: LD_VAR 0 4
4078: PUSH
4079: LD_INT 1
4081: EQUAL
4082: IFFALSE 4172
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
4084: LD_VAR 0 1
4088: PPUSH
4089: LD_INT 113
4091: PPUSH
4092: LD_INT 106
4094: PPUSH
4095: CALL_OW 307
4099: NOT
4100: PUSH
4101: LD_VAR 0 1
4105: PPUSH
4106: CALL_OW 314
4110: NOT
4111: AND
4112: IFFALSE 4129
// ComMoveXY ( vehicle , 113 , 106 ) ;
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_INT 113
4121: PPUSH
4122: LD_INT 106
4124: PPUSH
4125: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 113
4136: PPUSH
4137: LD_INT 106
4139: PPUSH
4140: CALL_OW 307
4144: IFFALSE 4172
// begin SetTag ( vehicle , 2 ) ;
4146: LD_VAR 0 1
4150: PPUSH
4151: LD_INT 2
4153: PPUSH
4154: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
4158: LD_VAR 0 1
4162: PPUSH
4163: CALL_OW 311
4167: PPUSH
4168: CALL 56831 0 1
// end ; end ; if tag = 2 then
4172: LD_VAR 0 4
4176: PUSH
4177: LD_INT 2
4179: EQUAL
4180: IFFALSE 4244
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
4182: LD_VAR 0 1
4186: PPUSH
4187: CALL_OW 256
4191: PUSH
4192: LD_INT 1000
4194: EQUAL
4195: PUSH
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 311
4205: AND
4206: IFFALSE 4244
// begin ComMoveUnit ( vehicle , kirov ) ;
4208: LD_VAR 0 1
4212: PPUSH
4213: LD_INT 71
4215: PPUSH
4216: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 71
4227: PPUSH
4228: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
4232: LD_VAR 0 1
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 301
4253: PUSH
4254: LD_EXP 23
4258: OR
4259: IFFALSE 3973
// if eastOutpostDestroyed then
4261: LD_EXP 23
4265: IFFALSE 4282
// ComMoveXY ( vehicle , 111 , 105 ) ;
4267: LD_VAR 0 1
4271: PPUSH
4272: LD_INT 111
4274: PPUSH
4275: LD_INT 105
4277: PPUSH
4278: CALL_OW 111
// end ; end_of_file
4282: LD_VAR 0 2
4286: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
4291: PPUSH
4292: PPUSH
// uc_side := 1 ;
4293: LD_ADDR_OWVAR 20
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// uc_nation := 1 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// usWestForces := [ ] ;
4309: LD_ADDR_EXP 46
4313: PUSH
4314: EMPTY
4315: ST_TO_ADDR
// usEastForces := [ ] ;
4316: LD_ADDR_EXP 47
4320: PUSH
4321: EMPTY
4322: ST_TO_ADDR
// bc_type := b_depot ;
4323: LD_ADDR_OWVAR 42
4327: PUSH
4328: LD_INT 0
4330: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4331: LD_ADDR_OWVAR 43
4335: PUSH
4336: LD_OWVAR 67
4340: PUSH
4341: LD_INT 1
4343: MINUS
4344: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4345: LD_INT 48
4347: PPUSH
4348: LD_INT 54
4350: PPUSH
4351: LD_INT 2
4353: PPUSH
4354: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4358: LD_ADDR_VAR 0 4
4362: PUSH
4363: LD_INT 55
4365: PUSH
4366: LD_INT 55
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 59
4379: PUSH
4380: LD_INT 61
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// if Difficulty > 1 then
4395: LD_OWVAR 67
4399: PUSH
4400: LD_INT 1
4402: GREATER
4403: IFFALSE 4439
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4405: LD_ADDR_VAR 0 4
4409: PUSH
4410: LD_VAR 0 4
4414: PPUSH
4415: LD_VAR 0 4
4419: PPUSH
4420: LD_INT 46
4422: PUSH
4423: LD_INT 64
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: PPUSH
4434: CALL_OW 2
4438: ST_TO_ADDR
// if Difficulty > 2 then
4439: LD_OWVAR 67
4443: PUSH
4444: LD_INT 2
4446: GREATER
4447: IFFALSE 4483
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4449: LD_ADDR_VAR 0 4
4453: PUSH
4454: LD_VAR 0 4
4458: PPUSH
4459: LD_VAR 0 4
4463: PPUSH
4464: LD_INT 36
4466: PUSH
4467: LD_INT 48
4469: PUSH
4470: LD_INT 3
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: PPUSH
4478: CALL_OW 2
4482: ST_TO_ADDR
// bc_type := b_breastwork ;
4483: LD_ADDR_OWVAR 42
4487: PUSH
4488: LD_INT 31
4490: ST_TO_ADDR
// InitHC_All ( ) ;
4491: CALL_OW 584
// for i in tmp do
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: LD_VAR 0 4
4504: PUSH
4505: FOR_IN
4506: IFFALSE 4650
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4508: LD_VAR 0 2
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_VAR 0 2
4521: PUSH
4522: LD_INT 2
4524: ARRAY
4525: PPUSH
4526: LD_VAR 0 2
4530: PUSH
4531: LD_INT 3
4533: ARRAY
4534: PPUSH
4535: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4539: LD_INT 0
4541: PPUSH
4542: LD_OWVAR 67
4546: PPUSH
4547: CALL_OW 381
// un := CreateHuman ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: CALL_OW 44
4560: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4561: LD_ADDR_EXP 46
4565: PUSH
4566: LD_EXP 46
4570: PPUSH
4571: LD_EXP 46
4575: PUSH
4576: LD_INT 1
4578: PLUS
4579: PPUSH
4580: LD_VAR 0 3
4584: PPUSH
4585: CALL_OW 1
4589: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4590: LD_VAR 0 3
4594: PPUSH
4595: LD_VAR 0 2
4599: PUSH
4600: LD_INT 3
4602: ARRAY
4603: PUSH
4604: LD_INT 3
4606: PLUS
4607: PUSH
4608: LD_INT 6
4610: MOD
4611: PPUSH
4612: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_VAR 0 2
4625: PUSH
4626: LD_INT 1
4628: ARRAY
4629: PPUSH
4630: LD_VAR 0 2
4634: PUSH
4635: LD_INT 2
4637: ARRAY
4638: PPUSH
4639: CALL_OW 428
4643: PPUSH
4644: CALL_OW 52
// end ;
4648: GO 4505
4650: POP
4651: POP
// for i := 1 to 2 do
4652: LD_ADDR_VAR 0 2
4656: PUSH
4657: DOUBLE
4658: LD_INT 1
4660: DEC
4661: ST_TO_ADDR
4662: LD_INT 2
4664: PUSH
4665: FOR_TO
4666: IFFALSE 4742
// begin PrepareEngineer ( false , Difficulty ) ;
4668: LD_INT 0
4670: PPUSH
4671: LD_OWVAR 67
4675: PPUSH
4676: CALL_OW 382
// un := CreateHuman ;
4680: LD_ADDR_VAR 0 3
4684: PUSH
4685: CALL_OW 44
4689: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4690: LD_ADDR_EXP 46
4694: PUSH
4695: LD_EXP 46
4699: PPUSH
4700: LD_EXP 46
4704: PUSH
4705: LD_INT 1
4707: PLUS
4708: PPUSH
4709: LD_VAR 0 3
4713: PPUSH
4714: CALL_OW 1
4718: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4719: LD_VAR 0 3
4723: PPUSH
4724: LD_INT 54
4726: PPUSH
4727: LD_INT 58
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: LD_INT 0
4735: PPUSH
4736: CALL_OW 50
// end ;
4740: GO 4665
4742: POP
4743: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4744: LD_ADDR_VAR 0 4
4748: PUSH
4749: LD_INT 87
4751: PUSH
4752: LD_INT 62
4754: PUSH
4755: LD_INT 1
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 89
4765: PUSH
4766: LD_INT 67
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
// if Difficulty > 2 then
4781: LD_OWVAR 67
4785: PUSH
4786: LD_INT 2
4788: GREATER
4789: IFFALSE 4825
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4791: LD_ADDR_VAR 0 4
4795: PUSH
4796: LD_VAR 0 4
4800: PPUSH
4801: LD_VAR 0 4
4805: PPUSH
4806: LD_INT 88
4808: PUSH
4809: LD_INT 53
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: PPUSH
4820: CALL_OW 2
4824: ST_TO_ADDR
// bc_type := b_breastwork ;
4825: LD_ADDR_OWVAR 42
4829: PUSH
4830: LD_INT 31
4832: ST_TO_ADDR
// for i in tmp do
4833: LD_ADDR_VAR 0 2
4837: PUSH
4838: LD_VAR 0 4
4842: PUSH
4843: FOR_IN
4844: IFFALSE 4988
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4846: LD_VAR 0 2
4850: PUSH
4851: LD_INT 1
4853: ARRAY
4854: PPUSH
4855: LD_VAR 0 2
4859: PUSH
4860: LD_INT 2
4862: ARRAY
4863: PPUSH
4864: LD_VAR 0 2
4868: PUSH
4869: LD_INT 3
4871: ARRAY
4872: PPUSH
4873: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4877: LD_INT 0
4879: PPUSH
4880: LD_OWVAR 67
4884: PPUSH
4885: CALL_OW 381
// un := CreateHuman ;
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: CALL_OW 44
4898: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4899: LD_ADDR_EXP 47
4903: PUSH
4904: LD_EXP 47
4908: PPUSH
4909: LD_EXP 47
4913: PUSH
4914: LD_INT 1
4916: PLUS
4917: PPUSH
4918: LD_VAR 0 3
4922: PPUSH
4923: CALL_OW 1
4927: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4928: LD_VAR 0 3
4932: PPUSH
4933: LD_VAR 0 2
4937: PUSH
4938: LD_INT 3
4940: ARRAY
4941: PUSH
4942: LD_INT 3
4944: PLUS
4945: PUSH
4946: LD_INT 6
4948: MOD
4949: PPUSH
4950: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_VAR 0 2
4963: PUSH
4964: LD_INT 1
4966: ARRAY
4967: PPUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 2
4975: ARRAY
4976: PPUSH
4977: CALL_OW 428
4981: PPUSH
4982: CALL_OW 52
// end ;
4986: GO 4843
4988: POP
4989: POP
// for i := 1 to 2 do
4990: LD_ADDR_VAR 0 2
4994: PUSH
4995: DOUBLE
4996: LD_INT 1
4998: DEC
4999: ST_TO_ADDR
5000: LD_INT 2
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5080
// begin PrepareEngineer ( false , Difficulty ) ;
5006: LD_INT 0
5008: PPUSH
5009: LD_OWVAR 67
5013: PPUSH
5014: CALL_OW 382
// un := CreateHuman ;
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: CALL_OW 44
5027: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
5028: LD_ADDR_EXP 47
5032: PUSH
5033: LD_EXP 47
5037: PPUSH
5038: LD_EXP 47
5042: PUSH
5043: LD_INT 1
5045: PLUS
5046: PPUSH
5047: LD_VAR 0 3
5051: PPUSH
5052: CALL_OW 1
5056: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 95
5064: PPUSH
5065: LD_INT 65
5067: PPUSH
5068: LD_INT 2
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: CALL_OW 50
// end ;
5078: GO 5003
5080: POP
5081: POP
// end ;
5082: LD_VAR 0 1
5086: RET
// export function PrepareAmericanTrap ; var i , un ; begin
5087: LD_INT 0
5089: PPUSH
5090: PPUSH
5091: PPUSH
// usTrapForces := [ ] ;
5092: LD_ADDR_EXP 48
5096: PUSH
5097: EMPTY
5098: ST_TO_ADDR
// uc_side := 1 ;
5099: LD_ADDR_OWVAR 20
5103: PUSH
5104: LD_INT 1
5106: ST_TO_ADDR
// uc_nation := 1 ;
5107: LD_ADDR_OWVAR 21
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// InitHC_All ( ) ;
5115: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
5119: LD_INT 1
5121: PPUSH
5122: LD_OWVAR 67
5126: PPUSH
5127: CALL_OW 381
// un := CreateHuman ;
5131: LD_ADDR_VAR 0 3
5135: PUSH
5136: CALL_OW 44
5140: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5141: LD_ADDR_EXP 48
5145: PUSH
5146: LD_EXP 48
5150: PPUSH
5151: LD_VAR 0 3
5155: PPUSH
5156: CALL 55131 0 2
5160: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
5161: LD_ADDR_VAR 0 2
5165: PUSH
5166: DOUBLE
5167: LD_INT 1
5169: DEC
5170: ST_TO_ADDR
5171: LD_INT 5
5173: PUSH
5174: LD_INT 6
5176: PUSH
5177: LD_INT 7
5179: PUSH
5180: LD_INT 8
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: PUSH
5189: LD_OWVAR 67
5193: ARRAY
5194: PUSH
5195: FOR_TO
5196: IFFALSE 5242
// begin PrepareSoldier ( false , Difficulty ) ;
5198: LD_INT 0
5200: PPUSH
5201: LD_OWVAR 67
5205: PPUSH
5206: CALL_OW 381
// un := CreateHuman ;
5210: LD_ADDR_VAR 0 3
5214: PUSH
5215: CALL_OW 44
5219: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5220: LD_ADDR_EXP 48
5224: PUSH
5225: LD_EXP 48
5229: PPUSH
5230: LD_VAR 0 3
5234: PPUSH
5235: CALL 55131 0 2
5239: ST_TO_ADDR
// end ;
5240: GO 5195
5242: POP
5243: POP
// for i := 1 to 2 do
5244: LD_ADDR_VAR 0 2
5248: PUSH
5249: DOUBLE
5250: LD_INT 1
5252: DEC
5253: ST_TO_ADDR
5254: LD_INT 2
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5304
// begin PrepareScientist ( false , Difficulty ) ;
5260: LD_INT 0
5262: PPUSH
5263: LD_OWVAR 67
5267: PPUSH
5268: CALL_OW 384
// un := CreateHuman ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: CALL_OW 44
5281: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5282: LD_ADDR_EXP 48
5286: PUSH
5287: LD_EXP 48
5291: PPUSH
5292: LD_VAR 0 3
5296: PPUSH
5297: CALL 55131 0 2
5301: ST_TO_ADDR
// end ;
5302: GO 5257
5304: POP
5305: POP
// end ;
5306: LD_VAR 0 1
5310: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
5311: LD_EXP 46
5315: IFFALSE 5885
5317: GO 5319
5319: DISABLE
5320: LD_INT 0
5322: PPUSH
5323: PPUSH
5324: PPUSH
5325: PPUSH
5326: PPUSH
// begin enable ;
5327: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_INT 8
5335: PPUSH
5336: LD_INT 22
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 21
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PPUSH
5360: CALL_OW 70
5364: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5365: LD_ADDR_VAR 0 4
5369: PUSH
5370: LD_EXP 46
5374: PPUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PPUSH
5385: CALL_OW 72
5389: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5390: LD_ADDR_VAR 0 5
5394: PUSH
5395: LD_EXP 46
5399: PPUSH
5400: LD_INT 25
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 72
5414: ST_TO_ADDR
// if eng then
5415: LD_VAR 0 4
5419: IFFALSE 5613
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5421: LD_VAR 0 3
5425: PPUSH
5426: LD_INT 3
5428: PUSH
5429: LD_INT 24
5431: PUSH
5432: LD_INT 1000
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 72
5447: IFFALSE 5559
// begin for i in eng do
5449: LD_ADDR_VAR 0 1
5453: PUSH
5454: LD_VAR 0 4
5458: PUSH
5459: FOR_IN
5460: IFFALSE 5555
// if IsInUnit ( i ) then
5462: LD_VAR 0 1
5466: PPUSH
5467: CALL_OW 310
5471: IFFALSE 5484
// ComExit ( i ) else
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL 55529 0 1
5482: GO 5553
// if IsOk ( i ) and not HasTask ( i ) then
5484: LD_VAR 0 1
5488: PPUSH
5489: CALL_OW 302
5493: PUSH
5494: LD_VAR 0 1
5498: PPUSH
5499: CALL_OW 314
5503: NOT
5504: AND
5505: IFFALSE 5553
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5507: LD_VAR 0 1
5511: PPUSH
5512: LD_VAR 0 3
5516: PPUSH
5517: LD_INT 3
5519: PUSH
5520: LD_INT 24
5522: PUSH
5523: LD_INT 1000
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 72
5538: PPUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: CALL_OW 74
5548: PPUSH
5549: CALL_OW 130
5553: GO 5459
5555: POP
5556: POP
// end else
5557: GO 5613
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5559: LD_VAR 0 3
5563: PPUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 0
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PPUSH
5574: CALL_OW 72
5578: IFFALSE 5613
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5580: LD_VAR 0 4
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_INT 30
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 72
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PPUSH
5609: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5613: LD_VAR 0 5
5617: PPUSH
5618: LD_INT 50
5620: PUSH
5621: EMPTY
5622: LIST
5623: PPUSH
5624: CALL_OW 72
5628: PUSH
5629: LD_INT 18
5631: PPUSH
5632: LD_INT 81
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL_OW 70
5646: PUSH
5647: LD_INT 1
5649: GREATER
5650: AND
5651: PUSH
5652: LD_INT 18
5654: PPUSH
5655: LD_INT 22
5657: PUSH
5658: LD_INT 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 70
5669: NOT
5670: AND
5671: IFFALSE 5725
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 5
5682: PPUSH
5683: LD_INT 50
5685: PUSH
5686: EMPTY
5687: LIST
5688: PPUSH
5689: CALL_OW 72
5693: PUSH
5694: FOR_IN
5695: IFFALSE 5723
// begin ComExit ( i ) ;
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 55529 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5706: LD_VAR 0 1
5710: PPUSH
5711: LD_INT 46
5713: PPUSH
5714: LD_INT 62
5716: PPUSH
5717: CALL_OW 174
// end ;
5721: GO 5694
5723: POP
5724: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5725: LD_INT 18
5727: PPUSH
5728: LD_INT 81
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 70
5742: NOT
5743: PUSH
5744: LD_VAR 0 5
5748: PPUSH
5749: LD_INT 3
5751: PUSH
5752: LD_INT 54
5754: PUSH
5755: EMPTY
5756: LIST
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 50
5764: PUSH
5765: EMPTY
5766: LIST
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PPUSH
5772: CALL_OW 72
5776: AND
5777: PUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 31
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 58
5795: PUSH
5796: EMPTY
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PPUSH
5803: CALL_OW 72
5807: AND
5808: IFFALSE 5885
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5810: LD_VAR 0 5
5814: PPUSH
5815: LD_INT 3
5817: PUSH
5818: LD_INT 54
5820: PUSH
5821: EMPTY
5822: LIST
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 50
5830: PUSH
5831: EMPTY
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PPUSH
5838: CALL_OW 72
5842: PUSH
5843: LD_INT 1
5845: ARRAY
5846: PPUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 31
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 58
5864: PUSH
5865: EMPTY
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 72
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: CALL_OW 120
// end ;
5885: PPOPN 5
5887: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5888: LD_EXP 47
5892: IFFALSE 6163
5894: GO 5896
5896: DISABLE
5897: LD_INT 0
5899: PPUSH
5900: PPUSH
5901: PPUSH
// begin enable ;
5902: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: LD_INT 15
5910: PPUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 1
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: LD_INT 21
5923: PUSH
5924: LD_INT 3
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PPUSH
5935: CALL_OW 70
5939: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5940: LD_ADDR_VAR 0 3
5944: PUSH
5945: LD_EXP 47
5949: PPUSH
5950: LD_INT 25
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 72
5964: ST_TO_ADDR
// if eng then
5965: LD_VAR 0 3
5969: IFFALSE 6163
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 3
5978: PUSH
5979: LD_INT 24
5981: PUSH
5982: LD_INT 1000
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PPUSH
5993: CALL_OW 72
5997: IFFALSE 6109
// begin for i in eng do
5999: LD_ADDR_VAR 0 1
6003: PUSH
6004: LD_VAR 0 3
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6105
// if IsInUnit ( i ) then
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 310
6021: IFFALSE 6034
// ComExit ( i ) else
6023: LD_VAR 0 1
6027: PPUSH
6028: CALL 55529 0 1
6032: GO 6103
// if IsOk ( i ) and not HasTask ( i ) then
6034: LD_VAR 0 1
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 314
6053: NOT
6054: AND
6055: IFFALSE 6103
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
6057: LD_VAR 0 1
6061: PPUSH
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 3
6069: PUSH
6070: LD_INT 24
6072: PUSH
6073: LD_INT 1000
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PPUSH
6084: CALL_OW 72
6088: PPUSH
6089: LD_VAR 0 1
6093: PPUSH
6094: CALL_OW 74
6098: PPUSH
6099: CALL_OW 130
6103: GO 6009
6105: POP
6106: POP
// end else
6107: GO 6163
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
6109: LD_VAR 0 2
6113: PPUSH
6114: LD_INT 30
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PPUSH
6124: CALL_OW 72
6128: IFFALSE 6163
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
6130: LD_VAR 0 3
6134: PPUSH
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 30
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PPUSH
6150: CALL_OW 72
6154: PUSH
6155: LD_INT 1
6157: ARRAY
6158: PPUSH
6159: CALL_OW 120
// end ; end_of_file
6163: PPOPN 3
6165: END
// export function Action ; var i , tmp ; begin
6166: LD_INT 0
6168: PPUSH
6169: PPUSH
6170: PPUSH
// InGameOn ;
6171: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
6175: LD_INT 112
6177: PPUSH
6178: LD_INT 107
6180: PPUSH
6181: LD_INT 3
6183: PPUSH
6184: LD_INT 12
6186: NEG
6187: PPUSH
6188: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
6192: LD_INT 121
6194: PPUSH
6195: LD_INT 113
6197: PPUSH
6198: CALL_OW 86
// tmp := PrepareBurlak ;
6202: LD_ADDR_VAR 0 3
6206: PUSH
6207: CALL 1316 0 0
6211: ST_TO_ADDR
// for i in tmp do
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 3
6221: PUSH
6222: FOR_IN
6223: IFFALSE 6276
// begin SetDir ( i , 5 ) ;
6225: LD_VAR 0 2
6229: PPUSH
6230: LD_INT 5
6232: PPUSH
6233: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
6237: LD_VAR 0 2
6241: PPUSH
6242: LD_INT 3
6244: PPUSH
6245: LD_INT 0
6247: PPUSH
6248: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_INT 121
6259: PPUSH
6260: LD_INT 111
6262: PPUSH
6263: CALL_OW 111
// wait ( 0 0$0.8 ) ;
6267: LD_INT 28
6269: PPUSH
6270: CALL_OW 67
// end ;
6274: GO 6222
6276: POP
6277: POP
// CenterOnUnits ( Kurin ) ;
6278: LD_EXP 38
6282: PPUSH
6283: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
6287: LD_EXP 34
6291: PPUSH
6292: LD_EXP 38
6296: PPUSH
6297: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
6301: LD_INT 35
6303: PPUSH
6304: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
6308: LD_EXP 34
6312: PPUSH
6313: LD_EXP 38
6317: PPUSH
6318: CALL_OW 296
6322: PUSH
6323: LD_INT 6
6325: LESS
6326: IFFALSE 6301
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6328: LD_EXP 34
6332: PUSH
6333: LD_EXP 35
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PPUSH
6342: LD_EXP 38
6346: PPUSH
6347: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_VAR 0 3
6360: PUSH
6361: LD_EXP 34
6365: PUSH
6366: LD_EXP 35
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: DIFF
6375: PUSH
6376: FOR_IN
6377: IFFALSE 6443
// if GetClass ( i ) = class_soldier then
6379: LD_VAR 0 2
6383: PPUSH
6384: CALL_OW 257
6388: PUSH
6389: LD_INT 1
6391: EQUAL
6392: IFFALSE 6429
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6394: LD_VAR 0 2
6398: PPUSH
6399: LD_INT 95
6401: PUSH
6402: LD_INT 209
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_VAR 0 2
6413: PUSH
6414: LD_INT 2
6416: MOD
6417: PUSH
6418: LD_INT 1
6420: PLUS
6421: ARRAY
6422: PPUSH
6423: CALL_OW 120
6427: GO 6441
// ComEnterUnit ( i , ru_lab ) ;
6429: LD_VAR 0 2
6433: PPUSH
6434: LD_INT 83
6436: PPUSH
6437: CALL_OW 120
6441: GO 6376
6443: POP
6444: POP
// Say ( Kurin , D1-Kur-1 ) ;
6445: LD_EXP 38
6449: PPUSH
6450: LD_STRING D1-Kur-1
6452: PPUSH
6453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6457: LD_EXP 34
6461: PPUSH
6462: LD_STRING D1-Bur-1
6464: PPUSH
6465: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6469: LD_INT 10
6471: PPUSH
6472: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6476: LD_EXP 38
6480: PPUSH
6481: LD_STRING D1-Kur-2
6483: PPUSH
6484: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6488: LD_EXP 39
6492: PPUSH
6493: CALL 55529 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6497: LD_EXP 39
6501: PPUSH
6502: LD_INT 115
6504: PPUSH
6505: LD_INT 108
6507: PPUSH
6508: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6512: LD_EXP 39
6516: PPUSH
6517: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6521: LD_EXP 34
6525: PPUSH
6526: LD_STRING D1-Bur-2
6528: PPUSH
6529: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6533: LD_EXP 38
6537: PPUSH
6538: LD_STRING D1-Kur-3
6540: PPUSH
6541: CALL_OW 88
// if Gnyevko then
6545: LD_EXP 35
6549: IFFALSE 6563
// Say ( Kurin , D1-Kur-3a ) ;
6551: LD_EXP 38
6555: PPUSH
6556: LD_STRING D1-Kur-3a
6558: PPUSH
6559: CALL_OW 88
// InGameOff ;
6563: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6567: LD_STRING M1
6569: PPUSH
6570: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6574: LD_INT 112
6576: PPUSH
6577: LD_INT 107
6579: PPUSH
6580: LD_INT 3
6582: PPUSH
6583: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6587: LD_INT 66
6589: PPUSH
6590: LD_INT 99
6592: PPUSH
6593: LD_INT 3
6595: PPUSH
6596: LD_INT 7
6598: NEG
6599: PPUSH
6600: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6604: LD_INT 66
6606: PPUSH
6607: LD_INT 99
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6617: LD_EXP 39
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 235
// if Gnyevko then
6629: LD_EXP 35
6633: IFFALSE 6647
// SetSide ( Gnyevko , 3 ) ;
6635: LD_EXP 35
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: CALL_OW 235
// SaveForQuickRestart ;
6647: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6651: LD_EXP 38
6655: PPUSH
6656: LD_INT 71
6658: PPUSH
6659: CALL_OW 120
// wait ( 0 0$2 ) ;
6663: LD_INT 70
6665: PPUSH
6666: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6670: LD_EXP 43
6674: PUSH
6675: LD_INT 2
6677: ARRAY
6678: PPUSH
6679: CALL 55529 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6683: LD_EXP 43
6687: PUSH
6688: LD_INT 2
6690: ARRAY
6691: PPUSH
6692: LD_INT 98
6694: PPUSH
6695: LD_INT 98
6697: PPUSH
6698: CALL_OW 428
6702: PPUSH
6703: CALL_OW 180
// wait ( 0 0$12 ) ;
6707: LD_INT 420
6709: PPUSH
6710: CALL_OW 67
// kurinDontWannaTalk := true ;
6714: LD_ADDR_EXP 5
6718: PUSH
6719: LD_INT 1
6721: ST_TO_ADDR
// end ;
6722: LD_VAR 0 1
6726: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6727: LD_EXP 5
6731: PUSH
6732: LD_INT 22
6734: PUSH
6735: LD_INT 3
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 91
6744: PUSH
6745: LD_INT 71
6747: PUSH
6748: LD_INT 8
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PPUSH
6760: CALL_OW 69
6764: AND
6765: IFFALSE 6952
6767: GO 6769
6769: DISABLE
6770: LD_INT 0
6772: PPUSH
6773: PPUSH
// begin enable ;
6774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6775: LD_ADDR_VAR 0 2
6779: PUSH
6780: LD_INT 22
6782: PUSH
6783: LD_INT 3
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 91
6792: PUSH
6793: LD_INT 71
6795: PUSH
6796: LD_INT 14
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PPUSH
6808: CALL_OW 69
6812: ST_TO_ADDR
// InGameOn ;
6813: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6817: LD_INT 116
6819: PPUSH
6820: LD_INT 107
6822: PPUSH
6823: LD_INT 3
6825: PPUSH
6826: LD_INT 3
6828: PPUSH
6829: CALL_OW 330
// ComExit ( Kurin ) ;
6833: LD_EXP 38
6837: PPUSH
6838: CALL 55529 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6842: LD_EXP 38
6846: PPUSH
6847: LD_VAR 0 2
6851: PUSH
6852: LD_INT 1
6854: ARRAY
6855: PPUSH
6856: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6860: LD_EXP 38
6864: PPUSH
6865: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6869: LD_VAR 0 2
6873: PPUSH
6874: LD_INT 87
6876: PPUSH
6877: LD_INT 99
6879: PPUSH
6880: CALL_OW 111
// if kirovHasTank then
6884: LD_EXP 6
6888: IFFALSE 6904
// Say ( Kurin , D1a-Kur-1a ) else
6890: LD_EXP 38
6894: PPUSH
6895: LD_STRING D1a-Kur-1a
6897: PPUSH
6898: CALL_OW 88
6902: GO 6916
// Say ( Kurin , D1a-Kur-1 ) ;
6904: LD_EXP 38
6908: PPUSH
6909: LD_STRING D1a-Kur-1
6911: PPUSH
6912: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6916: LD_EXP 38
6920: PPUSH
6921: LD_INT 71
6923: PPUSH
6924: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6928: LD_INT 116
6930: PPUSH
6931: LD_INT 107
6933: PPUSH
6934: LD_INT 3
6936: PPUSH
6937: CALL_OW 331
// wait ( 0 0$3 ) ;
6941: LD_INT 105
6943: PPUSH
6944: CALL_OW 67
// InGameOff ;
6948: CALL_OW 9
// end ;
6952: PPOPN 2
6954: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6955: LD_INT 22
6957: PUSH
6958: LD_INT 3
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 95
6967: PUSH
6968: LD_INT 4
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 7
6988: AND
6989: IFFALSE 7328
6991: GO 6993
6993: DISABLE
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
// begin enable ;
7001: ENABLE
// blockNorth := false ;
7002: LD_ADDR_EXP 7
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// InGameOn ;
7010: CALL_OW 8
// DialogueOn ;
7014: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: LD_INT 22
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 95
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
7052: LD_EXP 39
7056: PUSH
7057: LD_VAR 0 2
7061: IN
7062: PUSH
7063: LD_EXP 39
7067: PPUSH
7068: CALL_OW 302
7072: AND
7073: IFFALSE 7089
// Say ( Kovalyuk , D1b-Kov-1 ) else
7075: LD_EXP 39
7079: PPUSH
7080: LD_STRING D1b-Kov-1
7082: PPUSH
7083: CALL_OW 88
7087: GO 7124
// if Burlak in tmp and IsOk ( Burlak ) then
7089: LD_EXP 34
7093: PUSH
7094: LD_VAR 0 2
7098: IN
7099: PUSH
7100: LD_EXP 34
7104: PPUSH
7105: CALL_OW 302
7109: AND
7110: IFFALSE 7124
// Say ( Burlak , D1b-Bur-1 ) ;
7112: LD_EXP 34
7116: PPUSH
7117: LD_STRING D1b-Bur-1
7119: PPUSH
7120: CALL_OW 88
// DialogueOff ;
7124: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
7128: LD_INT 22
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: LD_INT 21
7143: PUSH
7144: LD_INT 3
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: PPUSH
7164: CALL_OW 141
// for i in tmp do
7168: LD_ADDR_VAR 0 1
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: FOR_IN
7179: IFFALSE 7307
// begin d := rand ( 2 , 3 ) ;
7181: LD_ADDR_VAR 0 5
7185: PUSH
7186: LD_INT 2
7188: PPUSH
7189: LD_INT 3
7191: PPUSH
7192: CALL_OW 12
7196: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
7197: LD_ADDR_VAR 0 3
7201: PUSH
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 250
7211: PPUSH
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 6
7219: PPUSH
7220: CALL_OW 272
7224: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
7225: LD_ADDR_VAR 0 4
7229: PUSH
7230: LD_VAR 0 1
7234: PPUSH
7235: CALL_OW 251
7239: PPUSH
7240: LD_VAR 0 5
7244: PPUSH
7245: LD_INT 6
7247: PPUSH
7248: CALL_OW 273
7252: ST_TO_ADDR
// if ValidHex ( x , y ) then
7253: LD_VAR 0 3
7257: PPUSH
7258: LD_VAR 0 4
7262: PPUSH
7263: CALL_OW 488
7267: IFFALSE 7290
// ComMoveXY ( i , x , y ) else
7269: LD_VAR 0 1
7273: PPUSH
7274: LD_VAR 0 3
7278: PPUSH
7279: LD_VAR 0 4
7283: PPUSH
7284: CALL_OW 111
7288: GO 7305
// ComMoveXY ( i , 79 , 85 ) ;
7290: LD_VAR 0 1
7294: PPUSH
7295: LD_INT 79
7297: PPUSH
7298: LD_INT 85
7300: PPUSH
7301: CALL_OW 111
// end ;
7305: GO 7178
7307: POP
7308: POP
// wait ( 0 0$5 ) ;
7309: LD_INT 175
7311: PPUSH
7312: CALL_OW 67
// InGameOff ;
7316: CALL_OW 9
// blockNorth := true ;
7320: LD_ADDR_EXP 7
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// end ;
7328: PPOPN 5
7330: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7331: LD_EXP 44
7335: PPUSH
7336: LD_INT 101
7338: PUSH
7339: LD_INT 3
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 72
7350: PUSH
7351: LD_EXP 4
7355: NOT
7356: AND
7357: IFFALSE 7759
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7369: LD_ADDR_VAR 0 5
7373: PUSH
7374: LD_EXP 44
7378: PPUSH
7379: LD_EXP 34
7383: PPUSH
7384: CALL_OW 74
7388: ST_TO_ADDR
// InGameOn ;
7389: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 250
7402: PPUSH
7403: LD_VAR 0 5
7407: PPUSH
7408: CALL_OW 251
7412: PPUSH
7413: LD_INT 3
7415: PPUSH
7416: LD_INT 6
7418: PPUSH
7419: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_EXP 34
7441: PPUSH
7442: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7446: LD_VAR 0 5
7450: PPUSH
7451: LD_STRING D2-RSol1-1
7453: PPUSH
7454: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7458: LD_ADDR_VAR 0 3
7462: PUSH
7463: LD_VAR 0 5
7467: PPUSH
7468: CALL_OW 250
7472: PPUSH
7473: LD_VAR 0 5
7477: PPUSH
7478: CALL_OW 254
7482: PPUSH
7483: LD_INT 3
7485: PPUSH
7486: CALL_OW 272
7490: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7491: LD_ADDR_VAR 0 4
7495: PUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL_OW 251
7505: PPUSH
7506: LD_VAR 0 5
7510: PPUSH
7511: CALL_OW 254
7515: PPUSH
7516: LD_INT 3
7518: PPUSH
7519: CALL_OW 273
7523: ST_TO_ADDR
// if ValidHex ( x , y ) then
7524: LD_VAR 0 3
7528: PPUSH
7529: LD_VAR 0 4
7533: PPUSH
7534: CALL_OW 488
7538: IFFALSE 7570
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7540: LD_EXP 35
7544: PUSH
7545: LD_EXP 39
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PPUSH
7554: LD_VAR 0 3
7558: PPUSH
7559: LD_VAR 0 4
7563: PPUSH
7564: CALL_OW 111
7568: GO 7593
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7570: LD_EXP 35
7574: PUSH
7575: LD_EXP 39
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PPUSH
7584: LD_VAR 0 5
7588: PPUSH
7589: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7593: LD_EXP 34
7597: PPUSH
7598: LD_VAR 0 5
7602: PPUSH
7603: CALL_OW 112
// p := 0 ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 0
7614: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7615: LD_INT 35
7617: PPUSH
7618: CALL_OW 67
// p := p + 1 ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_VAR 0 2
7631: PUSH
7632: LD_INT 1
7634: PLUS
7635: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7636: LD_VAR 0 2
7640: PUSH
7641: LD_INT 10
7643: GREATER
7644: PUSH
7645: LD_EXP 34
7649: PPUSH
7650: LD_VAR 0 5
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 6
7662: LESS
7663: OR
7664: IFFALSE 7615
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7666: LD_EXP 34
7670: PUSH
7671: LD_EXP 35
7675: PUSH
7676: LD_EXP 39
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: PPUSH
7686: LD_VAR 0 5
7690: PPUSH
7691: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7695: LD_EXP 34
7699: PPUSH
7700: LD_STRING D2-Bur-1
7702: PPUSH
7703: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7707: LD_VAR 0 5
7711: PPUSH
7712: LD_STRING D2-RSol1-2
7714: PPUSH
7715: CALL_OW 88
// ComHold ( nearestGuard ) ;
7719: LD_VAR 0 5
7723: PPUSH
7724: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 250
7737: PPUSH
7738: LD_VAR 0 5
7742: PPUSH
7743: CALL_OW 251
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 331
// InGameOff ;
7755: CALL_OW 9
// end ;
7759: PPOPN 5
7761: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7762: LD_EXP 34
7766: PPUSH
7767: LD_EXP 40
7771: PPUSH
7772: CALL_OW 296
7776: PUSH
7777: LD_INT 10
7779: LESS
7780: PUSH
7781: LD_INT 3
7783: PPUSH
7784: LD_EXP 40
7788: PPUSH
7789: CALL_OW 292
7793: AND
7794: IFFALSE 8150
7796: GO 7798
7798: DISABLE
7799: LD_INT 0
7801: PPUSH
// begin InGameOn ;
7802: CALL_OW 8
// beriaVisited := true ;
7806: LD_ADDR_EXP 4
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7814: LD_EXP 34
7818: PPUSH
7819: LD_EXP 40
7823: PPUSH
7824: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7828: LD_EXP 35
7832: PUSH
7833: LD_EXP 39
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: LD_INT 68
7844: PPUSH
7845: LD_INT 99
7847: PPUSH
7848: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7852: LD_EXP 40
7856: PPUSH
7857: LD_EXP 34
7861: PPUSH
7862: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7866: LD_EXP 40
7870: PPUSH
7871: LD_STRING D2-Pla-2
7873: PPUSH
7874: CALL_OW 88
// p := 0 ;
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7886: LD_INT 35
7888: PPUSH
7889: CALL_OW 67
// p := p + 1 ;
7893: LD_ADDR_VAR 0 1
7897: PUSH
7898: LD_VAR 0 1
7902: PUSH
7903: LD_INT 1
7905: PLUS
7906: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7907: LD_EXP 34
7911: PPUSH
7912: LD_EXP 40
7916: PPUSH
7917: CALL_OW 296
7921: PUSH
7922: LD_INT 6
7924: LESS
7925: PUSH
7926: LD_VAR 0 1
7930: PUSH
7931: LD_INT 8
7933: GREATER
7934: OR
7935: IFFALSE 7886
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7937: LD_EXP 34
7941: PUSH
7942: LD_EXP 35
7946: PUSH
7947: LD_EXP 39
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: PPUSH
7957: LD_EXP 40
7961: PPUSH
7962: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7966: LD_EXP 34
7970: PPUSH
7971: LD_STRING D2-Bur-2
7973: PPUSH
7974: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7978: LD_INT 6
7980: PPUSH
7981: LD_INT 3
7983: PPUSH
7984: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7988: LD_EXP 40
7992: PPUSH
7993: LD_STRING D2-Pla-3
7995: PPUSH
7996: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8000: LD_EXP 34
8004: PPUSH
8005: LD_STRING D2-Bur-3
8007: PPUSH
8008: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8012: LD_EXP 40
8016: PPUSH
8017: LD_STRING D2-Pla-4
8019: PPUSH
8020: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8024: LD_EXP 34
8028: PPUSH
8029: LD_STRING D2-Bur-4
8031: PPUSH
8032: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8036: LD_EXP 40
8040: PPUSH
8041: LD_STRING D2-Pla-5
8043: PPUSH
8044: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
8048: LD_INT 1
8050: PUSH
8051: LD_INT 2
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: PPUSH
8066: CALL 8153 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8070: LD_EXP 40
8074: PPUSH
8075: LD_STRING D3-Pla-1
8077: PPUSH
8078: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8082: LD_EXP 34
8086: PPUSH
8087: LD_STRING D3-Bur-1
8089: PPUSH
8090: CALL_OW 88
// InGameOff ;
8094: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8098: LD_STRING M2a
8100: PPUSH
8101: CALL_OW 337
// SetSide ( beria , 3 ) ;
8105: LD_INT 106
8107: PPUSH
8108: LD_INT 3
8110: PPUSH
8111: CALL_OW 235
// if not Gnyevko then
8115: LD_EXP 35
8119: NOT
8120: IFFALSE 8141
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
8122: LD_INT 106
8124: PPUSH
8125: CALL_OW 313
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: PPUSH
8134: LD_INT 3
8136: PPUSH
8137: CALL_OW 235
// ComFree ( Platonov ) ;
8141: LD_EXP 40
8145: PPUSH
8146: CALL_OW 139
// end ;
8150: PPOPN 1
8152: END
// function AskPlatonov ( questions ) ; var q ; begin
8153: LD_INT 0
8155: PPUSH
8156: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
8157: LD_ADDR_VAR 0 3
8161: PUSH
8162: LD_STRING QMoreInfo
8164: PPUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 98
8174: ST_TO_ADDR
// case q of 1 :
8175: LD_VAR 0 3
8179: PUSH
8180: LD_INT 1
8182: DOUBLE
8183: EQUAL
8184: IFTRUE 8188
8186: GO 8215
8188: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
8189: LD_EXP 34
8193: PPUSH
8194: LD_STRING D2a-Bur-1
8196: PPUSH
8197: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
8201: LD_EXP 40
8205: PPUSH
8206: LD_STRING D2a-Pla-1
8208: PPUSH
8209: CALL_OW 88
// end ; 2 :
8213: GO 8286
8215: LD_INT 2
8217: DOUBLE
8218: EQUAL
8219: IFTRUE 8223
8221: GO 8250
8223: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
8224: LD_EXP 34
8228: PPUSH
8229: LD_STRING D2b-Bur-1
8231: PPUSH
8232: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
8236: LD_EXP 40
8240: PPUSH
8241: LD_STRING D2b-Pla-1
8243: PPUSH
8244: CALL_OW 88
// end ; 3 :
8248: GO 8286
8250: LD_INT 3
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8285
8258: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
8259: LD_EXP 34
8263: PPUSH
8264: LD_STRING D2c-Bur-1
8266: PPUSH
8267: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
8271: LD_EXP 40
8275: PPUSH
8276: LD_STRING D2c-Pla-1
8278: PPUSH
8279: CALL_OW 88
// end ; end ;
8283: GO 8286
8285: POP
// if q < 4 and questions > 2 then
8286: LD_VAR 0 3
8290: PUSH
8291: LD_INT 4
8293: LESS
8294: PUSH
8295: LD_VAR 0 1
8299: PUSH
8300: LD_INT 2
8302: GREATER
8303: AND
8304: IFFALSE 8321
// AskPlatonov ( questions diff q ) ;
8306: LD_VAR 0 1
8310: PUSH
8311: LD_VAR 0 3
8315: DIFF
8316: PPUSH
8317: CALL 8153 0 1
// end ;
8321: LD_VAR 0 2
8325: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8326: LD_INT 0
8328: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8329: LD_EXP 40
8333: PPUSH
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_VAR 0 2
8343: PPUSH
8344: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8348: LD_INT 35
8350: PPUSH
8351: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8355: LD_EXP 40
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_VAR 0 2
8369: PPUSH
8370: CALL_OW 297
8374: PUSH
8375: LD_INT 5
8377: LESS
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_VAR 0 2
8388: PPUSH
8389: CALL_OW 283
8393: PUSH
8394: LD_INT 1
8396: EQUAL
8397: AND
8398: IFFALSE 8348
// ComStop ( Platonov ) ;
8400: LD_EXP 40
8404: PPUSH
8405: CALL_OW 141
// if ingame_video then
8409: LD_OWVAR 52
8413: IFFALSE 8417
// exit ;
8415: GO 8429
// Say ( Platonov , D4-Pla-1 ) ;
8417: LD_EXP 40
8421: PPUSH
8422: LD_STRING D4-Pla-1
8424: PPUSH
8425: CALL_OW 88
// end ;
8429: LD_VAR 0 3
8433: RET
// every 0 0$2 trigger hasLab do
8434: LD_EXP 9
8438: IFFALSE 8502
8440: GO 8442
8442: DISABLE
// begin DialogueOn ;
8443: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8447: LD_EXP 34
8451: PPUSH
8452: LD_STRING D5a-Bur-1
8454: PPUSH
8455: CALL_OW 88
// if hasWorkshop then
8459: LD_EXP 10
8463: IFFALSE 8479
// Say ( Platonov , D5a-Pla-1 ) else
8465: LD_EXP 40
8469: PPUSH
8470: LD_STRING D5a-Pla-1
8472: PPUSH
8473: CALL_OW 88
8477: GO 8491
// Say ( Platonov , D5a-Pla-1a ) ;
8479: LD_EXP 40
8483: PPUSH
8484: LD_STRING D5a-Pla-1a
8486: PPUSH
8487: CALL_OW 88
// DialogueOff ;
8491: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8495: LD_STRING M2b
8497: PPUSH
8498: CALL_OW 337
// end ;
8502: END
// every 0 0$2 trigger hasWorkshop do
8503: LD_EXP 10
8507: IFFALSE 8571
8509: GO 8511
8511: DISABLE
// begin DialogueOn ;
8512: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8516: LD_EXP 34
8520: PPUSH
8521: LD_STRING D5b-Bur-1
8523: PPUSH
8524: CALL_OW 88
// if hasLab then
8528: LD_EXP 9
8532: IFFALSE 8548
// Say ( Platonov , D5b-Pla-1 ) else
8534: LD_EXP 40
8538: PPUSH
8539: LD_STRING D5b-Pla-1
8541: PPUSH
8542: CALL_OW 88
8546: GO 8560
// Say ( Platonov , D5b-Pla-1a ) ;
8548: LD_EXP 40
8552: PPUSH
8553: LD_STRING D5b-Pla-1a
8555: PPUSH
8556: CALL_OW 88
// DialogueOff ;
8560: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8564: LD_STRING M2c
8566: PPUSH
8567: CALL_OW 337
// end ;
8571: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8572: LD_EXP 9
8576: PUSH
8577: LD_EXP 10
8581: AND
8582: IFFALSE 8676
8584: GO 8586
8586: DISABLE
// begin DialogueOn ;
8587: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8591: LD_INT 47
8593: PPUSH
8594: LD_INT 3
8596: PPUSH
8597: CALL_OW 321
8601: PUSH
8602: LD_INT 2
8604: EQUAL
8605: IFFALSE 8633
// begin Say ( Burlak , D7b-Bur-1 ) ;
8607: LD_EXP 34
8611: PPUSH
8612: LD_STRING D7b-Bur-1
8614: PPUSH
8615: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8619: LD_EXP 40
8623: PPUSH
8624: LD_STRING D7b-Pla-1
8626: PPUSH
8627: CALL_OW 88
// end else
8631: GO 8657
// begin Say ( Burlak , D7a-Bur-1 ) ;
8633: LD_EXP 34
8637: PPUSH
8638: LD_STRING D7a-Bur-1
8640: PPUSH
8641: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8645: LD_EXP 40
8649: PPUSH
8650: LD_STRING D7a-Pla-1
8652: PPUSH
8653: CALL_OW 88
// end ; DialogueOff ;
8657: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8661: LD_STRING M2
8663: PPUSH
8664: CALL_OW 337
// hasToBuildTank := true ;
8668: LD_ADDR_EXP 11
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// end ;
8676: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8677: LD_EXP 4
8681: PUSH
8682: LD_EXP 9
8686: NOT
8687: PUSH
8688: LD_EXP 10
8692: NOT
8693: OR
8694: PUSH
8695: LD_EXP 11
8699: OR
8700: AND
8701: PUSH
8702: LD_INT 22
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 3
8714: PUSH
8715: LD_INT 91
8717: PUSH
8718: LD_INT 106
8720: PUSH
8721: LD_INT 32
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 69
8741: AND
8742: IFFALSE 8851
8744: GO 8746
8746: DISABLE
8747: LD_INT 0
8749: PPUSH
// begin enable ;
8750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 22
8758: PUSH
8759: LD_INT 3
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 3
8768: PUSH
8769: LD_INT 91
8771: PUSH
8772: LD_INT 106
8774: PUSH
8775: LD_INT 32
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PPUSH
8791: CALL_OW 69
8795: ST_TO_ADDR
// InGameOn ;
8796: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8800: LD_VAR 0 1
8804: PUSH
8805: LD_INT 1
8807: ARRAY
8808: PPUSH
8809: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8813: LD_VAR 0 1
8817: PPUSH
8818: LD_INT 66
8820: PPUSH
8821: LD_INT 99
8823: PPUSH
8824: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8828: LD_EXP 40
8832: PPUSH
8833: LD_STRING D8-Pla-1
8835: PPUSH
8836: CALL_OW 88
// wait ( 0 0$3 ) ;
8840: LD_INT 105
8842: PPUSH
8843: CALL_OW 67
// InGameOff ;
8847: CALL_OW 9
// end ;
8851: PPOPN 1
8853: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8854: LD_INT 21
8856: PPUSH
8857: LD_INT 22
8859: PUSH
8860: LD_INT 3
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 23
8869: PUSH
8870: LD_INT 3
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 30
8892: PUSH
8893: LD_INT 31
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 70
8914: PUSH
8915: LD_EXP 31
8919: NOT
8920: AND
8921: IFFALSE 9153
8923: GO 8925
8925: DISABLE
8926: LD_INT 0
8928: PPUSH
// begin enable ;
8929: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_INT 21
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 23
8950: PUSH
8951: LD_INT 3
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 2
8960: PUSH
8961: LD_INT 30
8963: PUSH
8964: LD_INT 4
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 30
8973: PUSH
8974: LD_INT 31
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 70
8995: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8996: LD_EXP 40
9000: PPUSH
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9010: LD_INT 35
9012: PPUSH
9013: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9017: LD_EXP 40
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 296
9031: PUSH
9032: LD_INT 6
9034: LESS
9035: IFFALSE 9010
// InGameOn ;
9037: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9041: LD_EXP 40
9045: PPUSH
9046: LD_VAR 0 1
9050: PPUSH
9051: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
9055: LD_EXP 40
9059: PPUSH
9060: LD_STRING D6-Pla-1
9062: PPUSH
9063: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9067: LD_EXP 34
9071: PPUSH
9072: LD_STRING D6-Bur-1
9074: PPUSH
9075: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
9079: LD_VAR 0 1
9083: PUSH
9084: LD_INT 1
9086: ARRAY
9087: PPUSH
9088: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
9092: LD_VAR 0 1
9096: PUSH
9097: LD_INT 1
9099: ARRAY
9100: PPUSH
9101: CALL_OW 266
9105: PUSH
9106: LD_INT 31
9108: EQUAL
9109: IFFALSE 9131
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
9111: LD_INT 106
9113: PPUSH
9114: CALL_OW 274
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: LD_INT 10
9124: PPUSH
9125: CALL_OW 276
9129: GO 9149
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
9131: LD_INT 106
9133: PPUSH
9134: CALL_OW 274
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: LD_INT 30
9144: PPUSH
9145: CALL_OW 276
// InGameOff ;
9149: CALL_OW 9
// end ;
9153: PPOPN 1
9155: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
9156: LD_EXP 4
9160: PUSH
9161: LD_INT 21
9163: PPUSH
9164: LD_INT 22
9166: PUSH
9167: LD_INT 3
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 23
9176: PUSH
9177: LD_INT 3
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 21
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: LIST
9198: PPUSH
9199: CALL_OW 71
9203: AND
9204: IFFALSE 9502
9206: GO 9208
9208: DISABLE
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
// begin enable ;
9213: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
9214: LD_ADDR_VAR 0 1
9218: PUSH
9219: LD_INT 21
9221: PPUSH
9222: LD_INT 22
9224: PUSH
9225: LD_INT 3
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 23
9234: PUSH
9235: LD_INT 3
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 21
9244: PUSH
9245: LD_INT 3
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 71
9261: PUSH
9262: LD_INT 1
9264: ARRAY
9265: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9266: LD_EXP 40
9270: PPUSH
9271: LD_VAR 0 1
9275: PPUSH
9276: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9280: LD_INT 35
9282: PPUSH
9283: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9287: LD_EXP 40
9291: PPUSH
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 296
9301: PUSH
9302: LD_INT 6
9304: LESS
9305: IFFALSE 9280
// InGameOn ;
9307: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9311: LD_EXP 40
9315: PPUSH
9316: LD_VAR 0 1
9320: PPUSH
9321: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
9325: LD_EXP 40
9329: PPUSH
9330: LD_STRING DPlatAngry
9332: PPUSH
9333: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9337: LD_EXP 34
9341: PPUSH
9342: LD_STRING D6-Bur-1
9344: PPUSH
9345: CALL_OW 88
// RemoveUnit ( tmp ) ;
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 64
// InGameOff ;
9358: CALL_OW 9
// amount := 0 ;
9362: LD_ADDR_VAR 0 2
9366: PUSH
9367: LD_INT 0
9369: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9370: LD_VAR 0 1
9374: PPUSH
9375: CALL_OW 266
9379: PUSH
9380: LD_INT 31
9382: DOUBLE
9383: EQUAL
9384: IFTRUE 9388
9386: GO 9399
9388: POP
// amount := 10 ; b_lab :
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_INT 10
9396: ST_TO_ADDR
9397: GO 9476
9399: LD_INT 6
9401: DOUBLE
9402: EQUAL
9403: IFTRUE 9407
9405: GO 9418
9407: POP
// amount := 20 ; b_armoury :
9408: LD_ADDR_VAR 0 2
9412: PUSH
9413: LD_INT 20
9415: ST_TO_ADDR
9416: GO 9476
9418: LD_INT 4
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9437
9426: POP
// amount := 30 ; b_workshop :
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: LD_INT 30
9434: ST_TO_ADDR
9435: GO 9476
9437: LD_INT 2
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9456
9445: POP
// amount := 40 ; b_oil_power :
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: LD_INT 40
9453: ST_TO_ADDR
9454: GO 9476
9456: LD_INT 26
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9475
9464: POP
// amount := 20 ; end ;
9465: LD_ADDR_VAR 0 2
9469: PUSH
9470: LD_INT 20
9472: ST_TO_ADDR
9473: GO 9476
9475: POP
// if amount then
9476: LD_VAR 0 2
9480: IFFALSE 9502
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9482: LD_INT 106
9484: PPUSH
9485: CALL_OW 274
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: LD_VAR 0 2
9497: PPUSH
9498: CALL_OW 276
// end ;
9502: PPOPN 2
9504: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9505: LD_INT 22
9507: PUSH
9508: LD_INT 3
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 92
9517: PUSH
9518: LD_INT 112
9520: PUSH
9521: LD_INT 155
9523: PUSH
9524: LD_INT 8
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: PUSH
9542: LD_INT 2
9544: LESS
9545: PUSH
9546: LD_EXP 34
9550: PPUSH
9551: LD_INT 112
9553: PPUSH
9554: LD_INT 155
9556: PPUSH
9557: CALL_OW 297
9561: PUSH
9562: LD_INT 8
9564: LESS
9565: AND
9566: IFFALSE 9779
9568: GO 9570
9570: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9571: LD_INT 112
9573: PPUSH
9574: LD_INT 155
9576: PPUSH
9577: LD_INT 3
9579: PPUSH
9580: LD_INT 4
9582: NEG
9583: PPUSH
9584: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9588: LD_INT 1
9590: PPUSH
9591: LD_EXP 34
9595: PPUSH
9596: CALL_OW 471
// uc_side := 1 ;
9600: LD_ADDR_OWVAR 20
9604: PUSH
9605: LD_INT 1
9607: ST_TO_ADDR
// uc_nation := 1 ;
9608: LD_ADDR_OWVAR 21
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9616: LD_ADDR_EXP 49
9620: PUSH
9621: LD_STRING Dickens
9623: PPUSH
9624: CALL_OW 25
9628: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9629: LD_EXP 49
9633: PPUSH
9634: LD_INT 112
9636: PPUSH
9637: LD_INT 155
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: CALL_OW 48
// wait ( 0 0$2 ) ;
9647: LD_INT 70
9649: PPUSH
9650: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9654: LD_EXP 49
9658: PPUSH
9659: LD_EXP 34
9663: PPUSH
9664: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9668: LD_EXP 49
9672: PPUSH
9673: LD_STRING DUsSpawnSol
9675: PPUSH
9676: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9680: LD_INT 1
9682: PPUSH
9683: LD_EXP 34
9687: PPUSH
9688: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9692: LD_INT 112
9694: PPUSH
9695: LD_INT 155
9697: PPUSH
9698: LD_INT 3
9700: PPUSH
9701: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9705: LD_EXP 49
9709: PPUSH
9710: LD_INT 77
9712: PPUSH
9713: LD_INT 152
9715: PPUSH
9716: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9727: LD_EXP 49
9731: PPUSH
9732: CALL_OW 302
9736: NOT
9737: PUSH
9738: LD_EXP 49
9742: PPUSH
9743: LD_INT 77
9745: PPUSH
9746: LD_INT 152
9748: PPUSH
9749: CALL_OW 307
9753: OR
9754: IFFALSE 9720
// if not IsOk ( Dickens ) then
9756: LD_EXP 49
9760: PPUSH
9761: CALL_OW 302
9765: NOT
9766: IFFALSE 9770
// exit ;
9768: GO 9779
// RemoveUnit ( Dickens ) ;
9770: LD_EXP 49
9774: PPUSH
9775: CALL_OW 64
// end ;
9779: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9780: LD_EXP 34
9784: PPUSH
9785: CALL_OW 256
9789: PUSH
9790: LD_INT 600
9792: LESS
9793: IFFALSE 9810
9795: GO 9797
9797: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9798: LD_EXP 34
9802: PPUSH
9803: LD_STRING DUsSpawnBur
9805: PPUSH
9806: CALL_OW 88
9810: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9811: LD_EXP 12
9815: IFFALSE 10717
9817: GO 9819
9819: DISABLE
9820: LD_INT 0
9822: PPUSH
9823: PPUSH
9824: PPUSH
9825: PPUSH
// begin hasToBuildTank := false ;
9826: LD_ADDR_EXP 11
9830: PUSH
9831: LD_INT 0
9833: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9834: LD_ADDR_EXP 5
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9842: LD_ADDR_VAR 0 2
9846: PUSH
9847: LD_INT 22
9849: PUSH
9850: LD_INT 3
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: ST_TO_ADDR
// InGameOn ;
9876: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9880: LD_VAR 0 2
9884: PUSH
9885: LD_INT 1
9887: ARRAY
9888: PPUSH
9889: CALL_OW 85
// wait ( 0 0$1 ) ;
9893: LD_INT 35
9895: PPUSH
9896: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9900: LD_EXP 34
9904: PPUSH
9905: LD_STRING D9-Bur-1
9907: PPUSH
9908: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9912: LD_EXP 40
9916: PPUSH
9917: LD_VAR 0 2
9921: PUSH
9922: LD_INT 1
9924: ARRAY
9925: PPUSH
9926: CALL_OW 112
// p := 0 ;
9930: LD_ADDR_VAR 0 3
9934: PUSH
9935: LD_INT 0
9937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9938: LD_INT 35
9940: PPUSH
9941: CALL_OW 67
// p := p + 1 ;
9945: LD_ADDR_VAR 0 3
9949: PUSH
9950: LD_VAR 0 3
9954: PUSH
9955: LD_INT 1
9957: PLUS
9958: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9959: LD_EXP 40
9963: PPUSH
9964: LD_VAR 0 2
9968: PUSH
9969: LD_INT 1
9971: ARRAY
9972: PPUSH
9973: CALL_OW 296
9977: PUSH
9978: LD_INT 8
9980: LESS
9981: PUSH
9982: LD_VAR 0 3
9986: PUSH
9987: LD_INT 8
9989: GREATER
9990: OR
9991: IFFALSE 9938
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9993: LD_EXP 40
9997: PPUSH
9998: LD_VAR 0 2
10002: PUSH
10003: LD_INT 1
10005: ARRAY
10006: PPUSH
10007: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
10011: LD_EXP 40
10015: PPUSH
10016: LD_STRING D9-Pla-1
10018: PPUSH
10019: CALL_OW 88
// ComFree ( Platonov ) ;
10023: LD_EXP 40
10027: PPUSH
10028: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
10032: LD_EXP 40
10036: PPUSH
10037: LD_INT 64
10039: PPUSH
10040: LD_INT 98
10042: PPUSH
10043: CALL_OW 171
// InGameOff ;
10047: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
10051: LD_STRING M3
10053: PPUSH
10054: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
10058: LD_EXP 41
10062: PPUSH
10063: LD_INT 70
10065: PPUSH
10066: LD_INT 108
10068: PPUSH
10069: CALL_OW 111
// AddComHold ( Kuklajs ) ;
10073: LD_EXP 41
10077: PPUSH
10078: CALL_OW 200
// wait ( 1 ) ;
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 67
// ComExit ( Belkov ) ;
10089: LD_EXP 36
10093: PPUSH
10094: CALL 55529 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
10098: LD_EXP 36
10102: PPUSH
10103: LD_INT 113
10105: PPUSH
10106: LD_INT 104
10108: PPUSH
10109: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
10113: LD_EXP 36
10117: PPUSH
10118: LD_INT 116
10120: PPUSH
10121: LD_INT 108
10123: PPUSH
10124: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
10128: LD_INT 35
10130: PPUSH
10131: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10135: LD_INT 22
10137: PUSH
10138: LD_INT 3
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 21
10147: PUSH
10148: LD_INT 2
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 91
10157: PUSH
10158: LD_INT 71
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 69
10178: IFFALSE 10128
// InGameOn ;
10180: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 3
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 2
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 91
10211: PUSH
10212: LD_INT 71
10214: PUSH
10215: LD_INT 8
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 69
10232: ST_TO_ADDR
// ComExit ( Kurin ) ;
10233: LD_EXP 38
10237: PPUSH
10238: CALL 55529 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10242: LD_EXP 38
10246: PPUSH
10247: LD_VAR 0 2
10251: PUSH
10252: LD_INT 1
10254: ARRAY
10255: PPUSH
10256: CALL_OW 179
// wait ( 0 0$1 ) ;
10260: LD_INT 35
10262: PPUSH
10263: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10267: LD_VAR 0 2
10271: PUSH
10272: LD_INT 1
10274: ARRAY
10275: PPUSH
10276: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: LD_VAR 0 2
10289: PUSH
10290: LD_INT 1
10292: ARRAY
10293: PPUSH
10294: CALL_OW 311
10298: ST_TO_ADDR
// ComExit ( un ) ;
10299: LD_VAR 0 4
10303: PPUSH
10304: CALL 55529 0 1
// wait ( 0 0$1 ) ;
10308: LD_INT 35
10310: PPUSH
10311: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10315: LD_VAR 0 4
10319: PPUSH
10320: LD_EXP 38
10324: PPUSH
10325: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10329: LD_EXP 36
10333: PPUSH
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PPUSH
10343: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10347: LD_INT 10
10349: PPUSH
10350: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10354: LD_EXP 38
10358: PPUSH
10359: LD_STRING D10-Kur-1
10361: PPUSH
10362: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10366: LD_EXP 36
10370: PPUSH
10371: LD_INT 122
10373: PPUSH
10374: LD_INT 112
10376: PPUSH
10377: CALL_OW 176
// wait ( 0 0$2 ) ;
10381: LD_INT 70
10383: PPUSH
10384: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10388: LD_EXP 36
10392: PPUSH
10393: LD_STRING D10-Bel-1
10395: PPUSH
10396: CALL_OW 88
// if belkovBrother then
10400: LD_EXP 32
10404: IFFALSE 10456
// begin Say ( Burlak , D10-Bur-1 ) ;
10406: LD_EXP 34
10410: PPUSH
10411: LD_STRING D10-Bur-1
10413: PPUSH
10414: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10418: LD_EXP 36
10422: PPUSH
10423: LD_STRING D10-Bel-2
10425: PPUSH
10426: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10430: LD_EXP 34
10434: PPUSH
10435: LD_STRING D10-Bur-2
10437: PPUSH
10438: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10442: LD_EXP 38
10446: PPUSH
10447: LD_STRING D10-Kur-2a
10449: PPUSH
10450: CALL_OW 88
// end else
10454: GO 10468
// begin Say ( Kurin , D10-Kur-2 ) end ;
10456: LD_EXP 38
10460: PPUSH
10461: LD_STRING D10-Kur-2
10463: PPUSH
10464: CALL_OW 88
// wait ( 0 0$2 ) ;
10468: LD_INT 70
10470: PPUSH
10471: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10475: LD_EXP 38
10479: PPUSH
10480: LD_STRING D10-Kur-2b
10482: PPUSH
10483: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10487: LD_VAR 0 4
10491: PPUSH
10492: LD_INT 66
10494: PPUSH
10495: LD_INT 97
10497: PPUSH
10498: CALL_OW 111
// wait ( 0 0$5 ) ;
10502: LD_INT 175
10504: PPUSH
10505: CALL_OW 67
// InGameOff ;
10509: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10513: LD_EXP 33
10517: PPUSH
10518: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10522: LD_STRING M4
10524: PPUSH
10525: CALL_OW 337
// wait ( 0 0$6 ) ;
10529: LD_INT 210
10531: PPUSH
10532: CALL_OW 67
// kurinDontWannaTalk := true ;
10536: LD_ADDR_EXP 5
10540: PUSH
10541: LD_INT 1
10543: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10544: LD_INT 140
10546: PPUSH
10547: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10551: LD_INT 35
10553: PPUSH
10554: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10558: LD_EXP 34
10562: PPUSH
10563: CALL_OW 310
10567: PUSH
10568: LD_EXP 34
10572: PPUSH
10573: LD_INT 106
10575: PPUSH
10576: CALL_OW 296
10580: PUSH
10581: LD_INT 12
10583: LESS
10584: OR
10585: IFFALSE 10551
// DialogueOn ;
10587: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10591: LD_EXP 40
10595: PPUSH
10596: LD_STRING D11-Pla-1
10598: PPUSH
10599: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10603: LD_EXP 34
10607: PPUSH
10608: LD_STRING D11-Bur-1
10610: PPUSH
10611: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10615: LD_INT 22
10617: PUSH
10618: LD_INT 3
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 21
10627: PUSH
10628: LD_INT 1
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PPUSH
10639: CALL_OW 69
10643: PUSH
10644: LD_INT 1
10646: GREATER
10647: IFFALSE 10661
// Say ( Burlak , D11-Bur-1a ) ;
10649: LD_EXP 34
10653: PPUSH
10654: LD_STRING D11-Bur-1a
10656: PPUSH
10657: CALL_OW 88
// DialogueOff ;
10661: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10665: LD_ADDR_EXP 8
10669: PUSH
10670: LD_INT 160
10672: PUSH
10673: LD_INT 150
10675: PUSH
10676: LD_INT 140
10678: PUSH
10679: LD_INT 120
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: LD_OWVAR 67
10692: ARRAY
10693: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10694: LD_STRING M5
10696: PPUSH
10697: CALL_OW 337
// kirovHasTank := true ;
10701: LD_ADDR_EXP 6
10705: PUSH
10706: LD_INT 1
10708: ST_TO_ADDR
// hasToBuildTank := true ;
10709: LD_ADDR_EXP 11
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: PPOPN 4
10719: END
// every 0 0$2 trigger allianceAttacked do
10720: LD_EXP 13
10724: IFFALSE 10763
10726: GO 10728
10728: DISABLE
// begin DialogueOn ;
10729: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10733: LD_EXP 38
10737: PPUSH
10738: LD_STRING DArestKur
10740: PPUSH
10741: CALL_OW 88
// dwait ( 0 0$1 ) ;
10745: LD_INT 35
10747: PPUSH
10748: CALL_OW 68
// YouLost ( SelfAttack ) ;
10752: LD_STRING SelfAttack
10754: PPUSH
10755: CALL_OW 104
// DialogueOff ;
10759: CALL_OW 7
// end ;
10763: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10764: LD_INT 22
10766: PUSH
10767: LD_INT 3
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 21
10776: PUSH
10777: LD_INT 2
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: PUSH
10793: LD_INT 22
10795: PUSH
10796: LD_INT 3
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 69
10821: GREATEREQUAL
10822: PUSH
10823: LD_EXP 6
10827: AND
10828: IFFALSE 10998
10830: GO 10832
10832: DISABLE
// begin hasToBuildTank := false ;
10833: LD_ADDR_EXP 11
10837: PUSH
10838: LD_INT 0
10840: ST_TO_ADDR
// blockNorth := false ;
10841: LD_ADDR_EXP 7
10845: PUSH
10846: LD_INT 0
10848: ST_TO_ADDR
// InGameOn ;
10849: CALL_OW 8
// wait ( 0 0$2 ) ;
10853: LD_INT 70
10855: PPUSH
10856: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10860: LD_INT 106
10862: PPUSH
10863: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10867: LD_EXP 40
10871: PPUSH
10872: LD_INT 65
10874: PPUSH
10875: LD_INT 97
10877: PPUSH
10878: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10882: LD_EXP 40
10886: PPUSH
10887: LD_EXP 34
10891: PPUSH
10892: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10896: LD_EXP 34
10900: PPUSH
10901: LD_STRING D12-Bur-1
10903: PPUSH
10904: CALL_OW 88
// wait ( 0 0$1 ) ;
10908: LD_INT 35
10910: PPUSH
10911: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10915: LD_EXP 40
10919: PPUSH
10920: LD_STRING D12-Pla-1
10922: PPUSH
10923: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10927: LD_EXP 34
10931: PPUSH
10932: LD_STRING D12-Bur-2
10934: PPUSH
10935: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10939: LD_EXP 40
10943: PPUSH
10944: LD_STRING D12-Pla-2
10946: PPUSH
10947: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10951: LD_EXP 34
10955: PPUSH
10956: LD_STRING D12-Bur-3
10958: PPUSH
10959: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10963: LD_EXP 40
10967: PPUSH
10968: LD_STRING D12-Pla-3
10970: PPUSH
10971: CALL_OW 88
// hasAllTanks := true ;
10975: LD_ADDR_EXP 14
10979: PUSH
10980: LD_INT 1
10982: ST_TO_ADDR
// InGameOff ;
10983: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10987: LD_STRING M6
10989: PPUSH
10990: CALL_OW 337
// PrepareAmerican ;
10994: CALL 4287 0 0
// end ;
10998: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10999: LD_EXP 17
11003: IFFALSE 12778
11005: GO 11007
11007: DISABLE
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
// begin PrepareAmericanTrap ;
11017: CALL 5087 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
11021: LD_ADDR_VAR 0 2
11025: PUSH
11026: LD_EXP 48
11030: PPUSH
11031: LD_INT 26
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PPUSH
11041: CALL_OW 72
11045: PUSH
11046: LD_INT 1
11048: ARRAY
11049: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
11050: LD_INT 22
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 60
11079: PUSH
11080: EMPTY
11081: LIST
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: PPUSH
11093: CALL_OW 141
// InGameOn ;
11097: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
11101: LD_INT 69
11103: PPUSH
11104: LD_INT 22
11106: PPUSH
11107: CALL_OW 86
// wait ( 0 0$1 ) ;
11111: LD_INT 35
11113: PPUSH
11114: CALL_OW 67
// DialogueOn ;
11118: CALL_OW 6
// game_speed := 4 ;
11122: LD_ADDR_OWVAR 65
11126: PUSH
11127: LD_INT 4
11129: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
11130: LD_VAR 0 2
11134: PPUSH
11135: LD_STRING D13-Sol1-1
11137: PPUSH
11138: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
11142: LD_EXP 36
11146: PPUSH
11147: LD_STRING D13-Bel-1
11149: PPUSH
11150: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11154: LD_EXP 38
11158: PPUSH
11159: LD_STRING D13-Kur-1
11161: PPUSH
11162: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
11166: LD_INT 10
11168: PPUSH
11169: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
11173: LD_EXP 36
11177: PPUSH
11178: LD_STRING D13-Bel-2
11180: PPUSH
11181: CALL_OW 94
// DialogueOff ;
11185: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11189: LD_EXP 36
11193: PPUSH
11194: LD_INT 76
11196: PPUSH
11197: LD_INT 20
11199: PPUSH
11200: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11204: LD_EXP 45
11208: PPUSH
11209: LD_INT 72
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 111
// wait ( 0 0$2 ) ;
11219: LD_INT 70
11221: PPUSH
11222: CALL_OW 67
// for i in usTrapForces do
11226: LD_ADDR_VAR 0 1
11230: PUSH
11231: LD_EXP 48
11235: PUSH
11236: FOR_IN
11237: IFFALSE 11270
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11239: LD_VAR 0 1
11243: PPUSH
11244: LD_INT 7
11246: PPUSH
11247: LD_INT 0
11249: PPUSH
11250: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11254: LD_VAR 0 1
11258: PPUSH
11259: LD_EXP 36
11263: PPUSH
11264: CALL_OW 119
// end ;
11268: GO 11236
11270: POP
11271: POP
// wait ( 0 0$0.3 ) ;
11272: LD_INT 10
11274: PPUSH
11275: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11279: LD_EXP 48
11283: PPUSH
11284: LD_INT 65
11286: PPUSH
11287: LD_INT 18
11289: PPUSH
11290: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11294: LD_INT 70
11296: PPUSH
11297: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11301: LD_EXP 48
11305: PPUSH
11306: LD_INT 101
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PPUSH
11316: CALL_OW 72
11320: PUSH
11321: LD_INT 3
11323: GREATER
11324: IFFALSE 11294
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11326: LD_INT 65
11328: PPUSH
11329: LD_INT 18
11331: PPUSH
11332: LD_INT 3
11334: PPUSH
11335: LD_INT 26
11337: NEG
11338: PPUSH
11339: CALL_OW 330
// DialogueOn ;
11343: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11347: LD_VAR 0 2
11351: PPUSH
11352: LD_STRING D14-Sol1-1
11354: PPUSH
11355: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11359: LD_EXP 36
11363: PPUSH
11364: LD_STRING D14-Bel-1
11366: PPUSH
11367: CALL_OW 88
// DialogueOff ;
11371: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11375: LD_INT 65
11377: PPUSH
11378: LD_INT 18
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11388: LD_EXP 45
11392: PPUSH
11393: LD_INT 31
11395: PPUSH
11396: LD_INT 9
11398: PPUSH
11399: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11403: LD_EXP 48
11407: PPUSH
11408: LD_INT 50
11410: PPUSH
11411: LD_INT 16
11413: PPUSH
11414: CALL_OW 174
// wait ( 0 0$2 ) ;
11418: LD_INT 70
11420: PPUSH
11421: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11425: LD_ADDR_VAR 0 6
11429: PUSH
11430: LD_EXP 36
11434: PPUSH
11435: CALL_OW 310
11439: ST_TO_ADDR
// if not belkovTank then
11440: LD_VAR 0 6
11444: NOT
11445: IFFALSE 11485
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11447: LD_ADDR_VAR 0 6
11451: PUSH
11452: LD_INT 22
11454: PUSH
11455: LD_INT 6
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 21
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: PUSH
11481: LD_INT 1
11483: ARRAY
11484: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11485: LD_EXP 36
11489: PPUSH
11490: LD_INT 58
11492: PPUSH
11493: LD_INT 21
11495: PPUSH
11496: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11500: LD_EXP 36
11504: PPUSH
11505: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_INT 53
11516: PPUSH
11517: LD_INT 18
11519: PPUSH
11520: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11524: LD_EXP 36
11528: PPUSH
11529: LD_INT 31
11531: PPUSH
11532: LD_INT 9
11534: PPUSH
11535: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11539: LD_INT 35
11541: PPUSH
11542: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11546: LD_ADDR_VAR 0 1
11550: PUSH
11551: LD_EXP 36
11555: PUSH
11556: LD_EXP 45
11560: UNION
11561: PUSH
11562: LD_VAR 0 6
11566: UNION
11567: PUSH
11568: FOR_IN
11569: IFFALSE 11600
// if GetLives ( i ) < 800 then
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 256
11580: PUSH
11581: LD_INT 800
11583: LESS
11584: IFFALSE 11598
// SetLives ( i , 800 ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 800
11593: PPUSH
11594: CALL_OW 234
11598: GO 11568
11600: POP
11601: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11602: LD_EXP 36
11606: PPUSH
11607: LD_INT 31
11609: PPUSH
11610: LD_INT 9
11612: PPUSH
11613: CALL_OW 297
11617: PUSH
11618: LD_INT 4
11620: LESS
11621: IFFALSE 11539
// for i := 1 to Difficulty do
11623: LD_ADDR_VAR 0 1
11627: PUSH
11628: DOUBLE
11629: LD_INT 1
11631: DEC
11632: ST_TO_ADDR
11633: LD_OWVAR 67
11637: PUSH
11638: FOR_TO
11639: IFFALSE 11681
// if i <= belkovTeam then
11641: LD_VAR 0 1
11645: PUSH
11646: LD_EXP 45
11650: LESSEQUAL
11651: IFFALSE 11679
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11653: LD_EXP 45
11657: PUSH
11658: LD_VAR 0 1
11662: ARRAY
11663: PPUSH
11664: LD_INT 600
11666: PPUSH
11667: LD_INT 800
11669: PPUSH
11670: CALL_OW 12
11674: PPUSH
11675: CALL_OW 234
11679: GO 11638
11681: POP
11682: POP
// SetLives ( Belkov , 820 ) ;
11683: LD_EXP 36
11687: PPUSH
11688: LD_INT 820
11690: PPUSH
11691: CALL_OW 234
// InGameOff ;
11695: CALL_OW 9
// DialogueOn ;
11699: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11703: LD_EXP 36
11707: PPUSH
11708: LD_STRING D14-Bel-1a
11710: PPUSH
11711: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11715: LD_EXP 38
11719: PPUSH
11720: LD_STRING D14-Kur-1
11722: PPUSH
11723: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11727: LD_EXP 36
11731: PPUSH
11732: LD_STRING D14-Bel-2
11734: PPUSH
11735: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11739: LD_EXP 38
11743: PPUSH
11744: LD_STRING D14-Kur-2
11746: PPUSH
11747: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11751: LD_EXP 34
11755: PPUSH
11756: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11760: LD_EXP 34
11764: PPUSH
11765: LD_STRING D14a-Bur-1
11767: PPUSH
11768: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11772: LD_EXP 40
11776: PPUSH
11777: LD_STRING D14a-Pla-1
11779: PPUSH
11780: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11784: LD_EXP 34
11788: PPUSH
11789: LD_STRING D14a-Bur-2
11791: PPUSH
11792: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11796: LD_EXP 40
11800: PPUSH
11801: LD_STRING D14a-Pla-2
11803: PPUSH
11804: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11808: LD_EXP 34
11812: PPUSH
11813: LD_STRING D14a-Bur-3
11815: PPUSH
11816: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11820: LD_EXP 40
11824: PPUSH
11825: LD_STRING D14a-Pla-3
11827: PPUSH
11828: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11832: LD_EXP 34
11836: PPUSH
11837: LD_STRING D14a-Bur-4
11839: PPUSH
11840: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11844: LD_EXP 40
11848: PPUSH
11849: LD_STRING D14a-Pla-4
11851: PPUSH
11852: CALL_OW 88
// DialogueOff ;
11856: CALL_OW 7
// belkovTrapped := true ;
11860: LD_ADDR_EXP 18
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11868: LD_EXP 48
11872: PPUSH
11873: LD_INT 68
11875: PPUSH
11876: LD_INT 16
11878: PPUSH
11879: CALL_OW 111
// if belkovTank then
11883: LD_VAR 0 6
11887: IFFALSE 11926
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11889: LD_EXP 48
11893: PUSH
11894: LD_INT 1
11896: ARRAY
11897: PPUSH
11898: LD_VAR 0 6
11902: PPUSH
11903: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11907: LD_EXP 48
11911: PUSH
11912: LD_INT 1
11914: ARRAY
11915: PPUSH
11916: LD_INT 69
11918: PPUSH
11919: LD_INT 20
11921: PPUSH
11922: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11926: LD_EXP 36
11930: PPUSH
11931: LD_INT 40
11933: PPUSH
11934: LD_INT 17
11936: PPUSH
11937: CALL_OW 111
// AddComHold ( Belkov ) ;
11941: LD_EXP 36
11945: PPUSH
11946: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] , [ 41 , 16 ] ] ;
11950: LD_ADDR_VAR 0 3
11954: PUSH
11955: LD_INT 44
11957: PUSH
11958: LD_INT 18
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 42
11967: PUSH
11968: LD_INT 16
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 40
11977: PUSH
11978: LD_INT 15
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 44
11987: PUSH
11988: LD_INT 20
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 42
11997: PUSH
11998: LD_INT 20
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 42
12007: PUSH
12008: LD_INT 12
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 42
12017: PUSH
12018: LD_INT 8
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 41
12027: PUSH
12028: LD_INT 16
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
12045: LD_ADDR_VAR 0 1
12049: PUSH
12050: LD_EXP 45
12054: PPUSH
12055: LD_INT 25
12057: PUSH
12058: LD_INT 1
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 72
12069: PUSH
12070: FOR_IN
12071: IFFALSE 12137
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: LD_VAR 0 3
12082: PUSH
12083: LD_INT 1
12085: ARRAY
12086: PUSH
12087: LD_INT 1
12089: ARRAY
12090: PPUSH
12091: LD_VAR 0 3
12095: PUSH
12096: LD_INT 1
12098: ARRAY
12099: PUSH
12100: LD_INT 2
12102: ARRAY
12103: PPUSH
12104: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
12108: LD_ADDR_VAR 0 3
12112: PUSH
12113: LD_VAR 0 3
12117: PPUSH
12118: LD_INT 1
12120: PPUSH
12121: CALL_OW 3
12125: ST_TO_ADDR
// AddComCrawl ( i ) ;
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 197
// end ;
12135: GO 12070
12137: POP
12138: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
12139: LD_EXP 45
12143: PPUSH
12144: LD_INT 25
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 72
12158: IFFALSE 12190
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
12160: LD_EXP 45
12164: PPUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 4
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PPUSH
12175: CALL_OW 72
12179: PPUSH
12180: LD_INT 38
12182: PPUSH
12183: LD_INT 18
12185: PPUSH
12186: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12190: LD_ADDR_VAR 0 7
12194: PUSH
12195: LD_INT 9450
12197: PUSH
12198: LD_INT 8400
12200: PUSH
12201: LD_INT 6650
12203: PUSH
12204: LD_INT 5250
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: LD_OWVAR 67
12217: ARRAY
12218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12219: LD_INT 35
12221: PPUSH
12222: CALL_OW 67
// timer := timer - 0 0$1 ;
12226: LD_ADDR_VAR 0 7
12230: PUSH
12231: LD_VAR 0 7
12235: PUSH
12236: LD_INT 35
12238: MINUS
12239: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12240: LD_INT 19
12242: PPUSH
12243: LD_INT 22
12245: PUSH
12246: LD_INT 3
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 70
12257: IFFALSE 12267
// timer := 0 0$0 ;
12259: LD_ADDR_VAR 0 7
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// until timer <= 0 ;
12267: LD_VAR 0 7
12271: PUSH
12272: LD_INT 0
12274: LESSEQUAL
12275: IFFALSE 12219
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12277: LD_EXP 48
12281: PPUSH
12282: LD_INT 50
12284: PUSH
12285: EMPTY
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: NOT
12293: IFFALSE 12297
// exit ;
12295: GO 12778
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12297: LD_ADDR_VAR 0 4
12301: PUSH
12302: LD_EXP 48
12306: PPUSH
12307: LD_INT 25
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 3
12319: PUSH
12320: LD_INT 54
12322: PUSH
12323: EMPTY
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 72
12338: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12339: LD_ADDR_VAR 0 5
12343: PUSH
12344: LD_EXP 48
12348: PPUSH
12349: LD_INT 25
12351: PUSH
12352: LD_INT 4
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 3
12361: PUSH
12362: LD_INT 54
12364: PUSH
12365: EMPTY
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 72
12380: ST_TO_ADDR
// for i in sol do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_VAR 0 4
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12408
// SetTag ( i , 0 ) ;
12394: LD_VAR 0 1
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 109
12406: GO 12391
12408: POP
12409: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12410: LD_VAR 0 5
12414: PPUSH
12415: LD_INT 60
12417: PPUSH
12418: LD_INT 8
12420: PPUSH
12421: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12425: LD_INT 22
12427: PUSH
12428: LD_INT 1
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 21
12437: PUSH
12438: LD_INT 2
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PPUSH
12449: CALL_OW 69
12453: IFFALSE 12494
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12455: LD_INT 22
12457: PUSH
12458: LD_INT 1
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PPUSH
12479: CALL_OW 69
12483: PPUSH
12484: LD_INT 53
12486: PPUSH
12487: LD_INT 24
12489: PPUSH
12490: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12494: LD_INT 18
12496: PPUSH
12497: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12501: LD_ADDR_VAR 0 4
12505: PUSH
12506: LD_EXP 48
12510: PPUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 1
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 50
12523: PUSH
12524: EMPTY
12525: LIST
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: LD_INT 54
12532: PUSH
12533: EMPTY
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 72
12549: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12550: LD_VAR 0 4
12554: PPUSH
12555: LD_INT 0
12557: PPUSH
12558: CALL 52700 0 2
12562: PUSH
12563: LD_VAR 0 4
12567: EQUAL
12568: IFFALSE 12607
// begin wait ( 0 0$3 ) ;
12570: LD_INT 105
12572: PPUSH
12573: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12577: LD_VAR 0 4
12581: PPUSH
12582: LD_INT 41
12584: PPUSH
12585: LD_INT 18
12587: PPUSH
12588: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12592: LD_VAR 0 5
12596: PPUSH
12597: LD_INT 60
12599: PPUSH
12600: LD_INT 8
12602: PPUSH
12603: CALL_OW 111
// end ; for i in sol do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_VAR 0 4
12616: PUSH
12617: FOR_IN
12618: IFFALSE 12693
// if GetLives ( i ) < 800 then
12620: LD_VAR 0 1
12624: PPUSH
12625: CALL_OW 256
12629: PUSH
12630: LD_INT 800
12632: LESS
12633: IFFALSE 12664
// begin SetTag ( i , 1 ) ;
12635: LD_VAR 0 1
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12647: LD_VAR 0 1
12651: PPUSH
12652: LD_INT 60
12654: PPUSH
12655: LD_INT 8
12657: PPUSH
12658: CALL_OW 111
// end else
12662: GO 12691
// if GetLives ( i ) = 1000 then
12664: LD_VAR 0 1
12668: PPUSH
12669: CALL_OW 256
12673: PUSH
12674: LD_INT 1000
12676: EQUAL
12677: IFFALSE 12691
// SetTag ( i , 0 ) ;
12679: LD_VAR 0 1
12683: PPUSH
12684: LD_INT 0
12686: PPUSH
12687: CALL_OW 109
12691: GO 12617
12693: POP
12694: POP
// until belkovDied or not sol ;
12695: LD_EXP 19
12699: PUSH
12700: LD_VAR 0 4
12704: NOT
12705: OR
12706: IFFALSE 12494
// if not sol then
12708: LD_VAR 0 4
12712: NOT
12713: IFFALSE 12717
// exit ;
12715: GO 12778
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12717: LD_VAR 0 4
12721: PUSH
12722: LD_VAR 0 5
12726: ADD
12727: PPUSH
12728: LD_INT 56
12730: PPUSH
12731: LD_INT 25
12733: PPUSH
12734: CALL_OW 111
// wait ( 0 0$30 ) ;
12738: LD_INT 1050
12740: PPUSH
12741: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12745: LD_EXP 48
12749: PPUSH
12750: LD_INT 66
12752: PPUSH
12753: LD_INT 96
12755: PPUSH
12756: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12760: LD_VAR 0 5
12764: PPUSH
12765: LD_VAR 0 4
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: CALL_OW 112
// end ;
12778: PPOPN 7
12780: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12781: LD_EXP 18
12785: PUSH
12786: LD_EXP 19
12790: NOT
12791: AND
12792: PUSH
12793: LD_INT 9
12795: PPUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 3
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 70
12810: AND
12811: IFFALSE 13138
12813: GO 12815
12815: DISABLE
// begin if not initiative then
12816: LD_EXP 31
12820: NOT
12821: IFFALSE 13068
// begin case Query ( QAttackAm ) of 1 :
12823: LD_STRING QAttackAm
12825: PPUSH
12826: CALL_OW 97
12830: PUSH
12831: LD_INT 1
12833: DOUBLE
12834: EQUAL
12835: IFTRUE 12839
12837: GO 12906
12839: POP
// begin initiative := true ;
12840: LD_ADDR_EXP 31
12844: PUSH
12845: LD_INT 1
12847: ST_TO_ADDR
// DialogueOn ;
12848: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12852: LD_EXP 34
12856: PPUSH
12857: LD_STRING D17-Bur-1
12859: PPUSH
12860: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12864: LD_EXP 40
12868: PPUSH
12869: LD_STRING D17-Pla-1
12871: PPUSH
12872: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12876: LD_EXP 34
12880: PPUSH
12881: LD_STRING D17-Bur-2
12883: PPUSH
12884: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12888: LD_EXP 40
12892: PPUSH
12893: LD_STRING D17-Pla-2
12895: PPUSH
12896: CALL_OW 94
// DialogueOff ;
12900: CALL_OW 7
// end ; 2 :
12904: GO 13068
12906: LD_INT 2
12908: DOUBLE
12909: EQUAL
12910: IFTRUE 12914
12912: GO 13006
12914: POP
// begin initiative := true ;
12915: LD_ADDR_EXP 31
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// DialogueOn ;
12923: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12927: LD_EXP 34
12931: PPUSH
12932: LD_STRING D18-Bur-1
12934: PPUSH
12935: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12939: LD_EXP 40
12943: PPUSH
12944: LD_STRING D18-Pla-1
12946: PPUSH
12947: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12951: LD_EXP 34
12955: PPUSH
12956: LD_STRING D18-Bur-2
12958: PPUSH
12959: CALL_OW 88
// if not reinforcementsGained then
12963: LD_EXP 25
12967: NOT
12968: IFFALSE 12988
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12970: LD_EXP 40
12974: PPUSH
12975: LD_STRING D18-Pla-2
12977: PPUSH
12978: CALL_OW 94
// SendReinforcements ;
12982: CALL 3628 0 0
// end else
12986: GO 13000
// SayRadio ( Platonov , D22-Pla-1b ) ;
12988: LD_EXP 40
12992: PPUSH
12993: LD_STRING D22-Pla-1b
12995: PPUSH
12996: CALL_OW 94
// DialogueOff ;
13000: CALL_OW 7
// end ; 3 :
13004: GO 13068
13006: LD_INT 3
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13067
13014: POP
// begin if IsOk ( Gnyevko ) then
13015: LD_EXP 35
13019: PPUSH
13020: CALL_OW 302
13024: IFFALSE 13040
// Say ( Gnyevko , D19A-Gny-1 ) else
13026: LD_EXP 35
13030: PPUSH
13031: LD_STRING D19A-Gny-1
13033: PPUSH
13034: CALL_OW 88
13038: GO 13063
// if IsOk ( Kovalyuk ) then
13040: LD_EXP 39
13044: PPUSH
13045: CALL_OW 302
13049: IFFALSE 13063
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13051: LD_EXP 39
13055: PPUSH
13056: LD_STRING D19A-Kov-1
13058: PPUSH
13059: CALL_OW 88
// exit ;
13063: GO 13138
// end ; end ;
13065: GO 13068
13067: POP
// end ; if IsOk ( Gnyevko ) then
13068: LD_EXP 35
13072: PPUSH
13073: CALL_OW 302
13077: IFFALSE 13103
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13079: LD_EXP 35
13083: PPUSH
13084: LD_STRING D19-Gny-1
13086: PPUSH
13087: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13091: LD_EXP 34
13095: PPUSH
13096: LD_STRING D19-Bur-1
13098: PPUSH
13099: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
13103: LD_EXP 39
13107: PPUSH
13108: CALL_OW 302
13112: IFFALSE 13138
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13114: LD_EXP 39
13118: PPUSH
13119: LD_STRING D19-Kov-1
13121: PPUSH
13122: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13126: LD_EXP 34
13130: PPUSH
13131: LD_STRING D19-Bur-2
13133: PPUSH
13134: CALL_OW 88
// end ; end ;
13138: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
13139: LD_EXP 18
13143: PUSH
13144: LD_EXP 19
13148: NOT
13149: AND
13150: PUSH
13151: LD_INT 16
13153: PPUSH
13154: LD_INT 22
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 70
13168: AND
13169: IFFALSE 13404
13171: GO 13173
13173: DISABLE
// begin if not initiative then
13174: LD_EXP 31
13178: NOT
13179: IFFALSE 13355
// begin case Query ( QAttackBw ) of 1 :
13181: LD_STRING QAttackBw
13183: PPUSH
13184: CALL_OW 97
13188: PUSH
13189: LD_INT 1
13191: DOUBLE
13192: EQUAL
13193: IFTRUE 13197
13195: GO 13240
13197: POP
// begin initiative := true ;
13198: LD_ADDR_EXP 31
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// DialogueOn ;
13206: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13210: LD_EXP 34
13214: PPUSH
13215: LD_STRING D21-Bur-1
13217: PPUSH
13218: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13222: LD_EXP 40
13226: PPUSH
13227: LD_STRING D21-Pla-1
13229: PPUSH
13230: CALL_OW 94
// DialogueOff ;
13234: CALL_OW 7
// end ; 2 :
13238: GO 13355
13240: LD_INT 2
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13248
13246: GO 13343
13248: POP
// begin initiative := true ;
13249: LD_ADDR_EXP 31
13253: PUSH
13254: LD_INT 1
13256: ST_TO_ADDR
// DialogueOn ;
13257: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13261: LD_EXP 34
13265: PPUSH
13266: LD_STRING D22-Bur-1
13268: PPUSH
13269: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13273: LD_EXP 25
13277: NOT
13278: PUSH
13279: LD_EXP 22
13283: AND
13284: IFFALSE 13304
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13286: LD_EXP 40
13290: PPUSH
13291: LD_STRING D22-Pla-1
13293: PPUSH
13294: CALL_OW 94
// SendReinforcements ;
13298: CALL 3628 0 0
// end else
13302: GO 13337
// if not westOutpostDestroyed then
13304: LD_EXP 22
13308: NOT
13309: IFFALSE 13325
// SayRadio ( Platonov , D22-Pla-1a ) else
13311: LD_EXP 40
13315: PPUSH
13316: LD_STRING D22-Pla-1a
13318: PPUSH
13319: CALL_OW 94
13323: GO 13337
// SayRadio ( Platonov , D22-Pla-1b ) ;
13325: LD_EXP 40
13329: PPUSH
13330: LD_STRING D22-Pla-1b
13332: PPUSH
13333: CALL_OW 94
// DialogueOff ;
13337: CALL_OW 7
// end ; 3 :
13341: GO 13355
13343: LD_INT 3
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13354
13351: POP
// begin end ; end ;
13352: GO 13355
13354: POP
// end ; ChangeMissionObjectives ( M9 ) ;
13355: LD_STRING M9
13357: PPUSH
13358: CALL_OW 337
// wait ( 0 0$1 ) ;
13362: LD_INT 35
13364: PPUSH
13365: CALL_OW 67
// if IsOk ( Gnyevko ) then
13369: LD_EXP 35
13373: PPUSH
13374: CALL_OW 302
13378: IFFALSE 13404
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13380: LD_EXP 35
13384: PPUSH
13385: LD_STRING D23-Gny-1
13387: PPUSH
13388: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13392: LD_EXP 34
13396: PPUSH
13397: LD_STRING D23-Bur-1
13399: PPUSH
13400: CALL_OW 88
// end ; end ;
13404: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13405: LD_EXP 18
13409: PUSH
13410: LD_EXP 19
13414: AND
13415: PUSH
13416: LD_EXP 28
13420: NOT
13421: AND
13422: PUSH
13423: LD_EXP 45
13427: PPUSH
13428: LD_INT 91
13430: PUSH
13431: LD_EXP 34
13435: PUSH
13436: LD_INT 8
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: PPUSH
13444: CALL_OW 72
13448: AND
13449: IFFALSE 13493
13451: GO 13453
13453: DISABLE
13454: LD_INT 0
13456: PPUSH
// begin for i in belkovTeam do
13457: LD_ADDR_VAR 0 1
13461: PUSH
13462: LD_EXP 45
13466: PUSH
13467: FOR_IN
13468: IFFALSE 13484
// SetSide ( i , 3 ) ;
13470: LD_VAR 0 1
13474: PPUSH
13475: LD_INT 3
13477: PPUSH
13478: CALL_OW 235
13482: GO 13467
13484: POP
13485: POP
// ChangeMissionObjectives ( M9a ) ;
13486: LD_STRING M9a
13488: PPUSH
13489: CALL_OW 337
// end ;
13493: PPOPN 1
13495: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13496: LD_EXP 34
13500: PPUSH
13501: LD_EXP 36
13505: PPUSH
13506: CALL_OW 296
13510: PUSH
13511: LD_INT 6
13513: LESS
13514: PUSH
13515: LD_EXP 18
13519: AND
13520: PUSH
13521: LD_EXP 36
13525: PPUSH
13526: CALL_OW 302
13530: AND
13531: PUSH
13532: LD_INT 3
13534: PPUSH
13535: CALL_OW 463
13539: NOT
13540: AND
13541: IFFALSE 13856
13543: GO 13545
13545: DISABLE
13546: LD_INT 0
13548: PPUSH
13549: PPUSH
// begin InGameOn ;
13550: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13554: LD_EXP 34
13558: PPUSH
13559: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13563: LD_EXP 34
13567: PPUSH
13568: LD_INT 37
13570: PPUSH
13571: LD_INT 17
13573: PPUSH
13574: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13578: LD_EXP 34
13582: PPUSH
13583: LD_EXP 36
13587: PPUSH
13588: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13592: LD_EXP 36
13596: PPUSH
13597: LD_EXP 34
13601: PPUSH
13602: CALL_OW 119
// p := 0 ;
13606: LD_ADDR_VAR 0 2
13610: PUSH
13611: LD_INT 0
13613: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13614: LD_INT 35
13616: PPUSH
13617: CALL_OW 67
// p := p + 1 ;
13621: LD_ADDR_VAR 0 2
13625: PUSH
13626: LD_VAR 0 2
13630: PUSH
13631: LD_INT 1
13633: PLUS
13634: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13635: LD_EXP 34
13639: PPUSH
13640: LD_EXP 36
13644: PPUSH
13645: CALL_OW 296
13649: PUSH
13650: LD_INT 4
13652: LESS
13653: PUSH
13654: LD_VAR 0 2
13658: PUSH
13659: LD_INT 6
13661: GREATER
13662: OR
13663: IFFALSE 13614
// ComTurnUnit ( Burlak , Belkov ) ;
13665: LD_EXP 34
13669: PPUSH
13670: LD_EXP 36
13674: PPUSH
13675: CALL_OW 119
// DialogueOn ;
13679: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13683: LD_EXP 36
13687: PPUSH
13688: LD_STRING D24-Bel-1
13690: PPUSH
13691: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13695: LD_EXP 34
13699: PPUSH
13700: LD_STRING D24-Bur-1
13702: PPUSH
13703: CALL_OW 88
// if belkovBrother then
13707: LD_EXP 32
13711: IFFALSE 13725
// Say ( Burlak , D24-Bur-1a ) ;
13713: LD_EXP 34
13717: PPUSH
13718: LD_STRING D24-Bur-1a
13720: PPUSH
13721: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13725: LD_EXP 36
13729: PPUSH
13730: LD_STRING D24-Bel-2
13732: PPUSH
13733: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13737: LD_EXP 34
13741: PPUSH
13742: LD_STRING D24-Bur-2
13744: PPUSH
13745: CALL_OW 88
// if vehCaptured then
13749: LD_EXP 16
13753: IFFALSE 13767
// Say ( Burlak , D24-Bur-2a ) ;
13755: LD_EXP 34
13759: PPUSH
13760: LD_STRING D24-Bur-2a
13762: PPUSH
13763: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13767: LD_EXP 40
13771: PPUSH
13772: LD_STRING D24-Pla-2
13774: PPUSH
13775: CALL_OW 94
// if not westOutpostDestroyed then
13779: LD_EXP 22
13783: NOT
13784: IFFALSE 13798
// SayRadio ( Platonov , D24-Pla-2a ) ;
13786: LD_EXP 40
13790: PPUSH
13791: LD_STRING D24-Pla-2a
13793: PPUSH
13794: CALL_OW 94
// DialogueOff ;
13798: CALL_OW 7
// InGameOff ;
13802: CALL_OW 9
// belkovSaved := true ;
13806: LD_ADDR_EXP 28
13810: PUSH
13811: LD_INT 1
13813: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_EXP 45
13823: PUSH
13824: LD_EXP 36
13828: UNION
13829: PUSH
13830: FOR_IN
13831: IFFALSE 13847
// SetSide ( i , 3 ) ;
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_INT 3
13840: PPUSH
13841: CALL_OW 235
13845: GO 13830
13847: POP
13848: POP
// ChangeMissionObjectives ( M9a ) ;
13849: LD_STRING M9a
13851: PPUSH
13852: CALL_OW 337
// end ;
13856: PPOPN 2
13858: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13859: LD_INT 3
13861: PPUSH
13862: LD_INT 22
13864: PUSH
13865: LD_INT 1
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 95
13874: PUSH
13875: LD_INT 8
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 69
13890: PPUSH
13891: CALL 58414 0 2
13895: IFFALSE 14080
13897: GO 13899
13899: DISABLE
// begin DialogueOn ;
13900: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13904: LD_INT 49
13906: PPUSH
13907: LD_INT 57
13909: PPUSH
13910: LD_INT 3
13912: PPUSH
13913: LD_INT 12
13915: NEG
13916: PPUSH
13917: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13921: LD_INT 49
13923: PPUSH
13924: LD_INT 57
13926: PPUSH
13927: LD_INT 3
13929: PPUSH
13930: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13934: LD_INT 49
13936: PPUSH
13937: LD_INT 57
13939: PPUSH
13940: CALL_OW 84
// if not eastOutpostDiscovered then
13944: LD_EXP 21
13948: NOT
13949: IFFALSE 13989
// begin Say ( Burlak , D15-Bur-1 ) ;
13951: LD_EXP 34
13955: PPUSH
13956: LD_STRING D15-Bur-1
13958: PPUSH
13959: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13963: LD_EXP 35
13967: PPUSH
13968: LD_STRING D15-Gny-1
13970: PPUSH
13971: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13975: LD_EXP 39
13979: PPUSH
13980: LD_STRING D15-Kov-1
13982: PPUSH
13983: CALL_OW 88
// end else
13987: GO 14025
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13989: LD_EXP 39
13993: PPUSH
13994: LD_STRING D16-Kov-1
13996: PPUSH
13997: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14001: LD_EXP 34
14005: PPUSH
14006: LD_STRING D16-Bur-1
14008: PPUSH
14009: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14013: LD_EXP 35
14017: PPUSH
14018: LD_STRING D16-Gny-1
14020: PPUSH
14021: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
14025: LD_EXP 34
14029: PPUSH
14030: LD_STRING D15-Bur-2
14032: PPUSH
14033: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
14037: LD_EXP 39
14041: PPUSH
14042: LD_STRING D15-Kov-2
14044: PPUSH
14045: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
14049: LD_EXP 34
14053: PPUSH
14054: LD_STRING D15-Bur-3
14056: PPUSH
14057: CALL_OW 88
// DialogueOff ;
14061: CALL_OW 7
// westOutpostDiscovered := true ;
14065: LD_ADDR_EXP 20
14069: PUSH
14070: LD_INT 1
14072: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
14073: LD_STRING M7
14075: PPUSH
14076: CALL_OW 337
// end ;
14080: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
14081: LD_INT 3
14083: PPUSH
14084: LD_INT 22
14086: PUSH
14087: LD_INT 1
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 95
14096: PUSH
14097: LD_INT 15
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PPUSH
14108: CALL_OW 69
14112: PPUSH
14113: CALL 58414 0 2
14117: IFFALSE 14258
14119: GO 14121
14121: DISABLE
// begin DialogueOn ;
14122: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
14126: LD_INT 95
14128: PPUSH
14129: LD_INT 65
14131: PPUSH
14132: LD_INT 3
14134: PPUSH
14135: LD_INT 12
14137: NEG
14138: PPUSH
14139: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
14143: LD_INT 95
14145: PPUSH
14146: LD_INT 65
14148: PPUSH
14149: LD_INT 3
14151: PPUSH
14152: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
14156: LD_INT 95
14158: PPUSH
14159: LD_INT 65
14161: PPUSH
14162: CALL_OW 84
// if westOutpostDiscovered then
14166: LD_EXP 20
14170: IFFALSE 14210
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14172: LD_EXP 39
14176: PPUSH
14177: LD_STRING D16-Kov-1
14179: PPUSH
14180: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14184: LD_EXP 34
14188: PPUSH
14189: LD_STRING D16-Bur-1
14191: PPUSH
14192: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14196: LD_EXP 35
14200: PPUSH
14201: LD_STRING D16-Gny-1
14203: PPUSH
14204: CALL_OW 88
// end else
14208: GO 14246
// begin Say ( Burlak , D15-Bur-1 ) ;
14210: LD_EXP 34
14214: PPUSH
14215: LD_STRING D15-Bur-1
14217: PPUSH
14218: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14222: LD_EXP 35
14226: PPUSH
14227: LD_STRING D15-Gny-1
14229: PPUSH
14230: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14234: LD_EXP 39
14238: PPUSH
14239: LD_STRING D15-Kov-1
14241: PPUSH
14242: CALL_OW 88
// end ; DialogueOff ;
14246: CALL_OW 7
// eastOutpostDiscovered := true ;
14250: LD_ADDR_EXP 21
14254: PUSH
14255: LD_INT 1
14257: ST_TO_ADDR
// end ;
14258: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14259: LD_INT 8
14261: PPUSH
14262: LD_INT 22
14264: PUSH
14265: LD_INT 1
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 50
14274: PUSH
14275: EMPTY
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 70
14286: PUSH
14287: LD_INT 0
14289: EQUAL
14290: PUSH
14291: LD_EXP 20
14295: AND
14296: IFFALSE 14340
14298: GO 14300
14300: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14301: LD_EXP 34
14305: PPUSH
14306: LD_STRING D20-Bur-1
14308: PPUSH
14309: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14313: LD_EXP 40
14317: PPUSH
14318: LD_STRING D20-Pla-1
14320: PPUSH
14321: CALL_OW 94
// westOutpostDestroyed := true ;
14325: LD_ADDR_EXP 22
14329: PUSH
14330: LD_INT 1
14332: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14333: LD_STRING M8
14335: PPUSH
14336: CALL_OW 337
// end ;
14340: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14341: LD_INT 15
14343: PPUSH
14344: LD_INT 22
14346: PUSH
14347: LD_INT 1
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: PUSH
14369: LD_INT 0
14371: EQUAL
14372: PUSH
14373: LD_EXP 21
14377: AND
14378: IFFALSE 14508
14380: GO 14382
14382: DISABLE
14383: LD_INT 0
14385: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14386: LD_EXP 34
14390: PPUSH
14391: LD_STRING D20-Bur-1
14393: PPUSH
14394: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14398: LD_EXP 40
14402: PPUSH
14403: LD_STRING D20-Pla-1
14405: PPUSH
14406: CALL_OW 94
// eastOutpostDestroyed := true ;
14410: LD_ADDR_EXP 23
14414: PUSH
14415: LD_INT 1
14417: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14418: LD_INT 35
14420: PPUSH
14421: CALL_OW 67
// stop_talking := true ;
14425: LD_ADDR_OWVAR 56
14429: PUSH
14430: LD_INT 1
14432: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_INT 22
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 23
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 21
14460: PUSH
14461: LD_INT 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 69
14477: PUSH
14478: FOR_IN
14479: IFFALSE 14498
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: LD_INT 1500
14491: PPUSH
14492: CALL_OW 591
14496: GO 14478
14498: POP
14499: POP
// stop_talking := false ;
14500: LD_ADDR_OWVAR 56
14504: PUSH
14505: LD_INT 0
14507: ST_TO_ADDR
// end ;
14508: PPOPN 1
14510: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14511: LD_INT 19
14513: PPUSH
14514: LD_INT 22
14516: PUSH
14517: LD_INT 3
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 70
14542: IFFALSE 14650
14544: GO 14546
14546: DISABLE
// begin DialogueOn ;
14547: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14551: LD_INT 19
14553: PPUSH
14554: LD_INT 22
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 70
14582: PPUSH
14583: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14587: LD_EXP 34
14591: PPUSH
14592: LD_STRING D26-Bur-1
14594: PPUSH
14595: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14599: LD_EXP 39
14603: PPUSH
14604: LD_STRING D26-Kov-1
14606: PPUSH
14607: CALL_OW 88
// if IsOk ( Gnyevko ) then
14611: LD_EXP 35
14615: PPUSH
14616: CALL_OW 302
14620: IFFALSE 14646
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14622: LD_EXP 35
14626: PPUSH
14627: LD_STRING D26-Gny-1
14629: PPUSH
14630: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14634: LD_EXP 34
14638: PPUSH
14639: LD_STRING D26-Bur-2
14641: PPUSH
14642: CALL_OW 88
// end ; DialogueOff ;
14646: CALL_OW 7
// end ;
14650: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14651: LD_EXP 21
14655: PUSH
14656: LD_EXP 23
14660: NOT
14661: AND
14662: PUSH
14663: LD_INT 17
14665: PPUSH
14666: LD_INT 22
14668: PUSH
14669: LD_INT 3
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 3
14678: PUSH
14679: LD_INT 24
14681: PUSH
14682: LD_INT 1000
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PPUSH
14697: CALL_OW 70
14701: PUSH
14702: LD_INT 1
14704: GREATER
14705: AND
14706: IFFALSE 14769
14708: GO 14710
14710: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14711: LD_EXP 35
14715: PPUSH
14716: LD_STRING D16A-Gny-1
14718: PPUSH
14719: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14723: LD_EXP 39
14727: PPUSH
14728: LD_STRING D16A-Kov-1
14730: PPUSH
14731: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14735: LD_EXP 35
14739: PPUSH
14740: CALL_OW 302
14744: PUSH
14745: LD_EXP 39
14749: PPUSH
14750: CALL_OW 302
14754: OR
14755: IFFALSE 14769
// Say ( Burlak , D16A-Bur-1 ) ;
14757: LD_EXP 34
14761: PPUSH
14762: LD_STRING D16A-Bur-1
14764: PPUSH
14765: CALL_OW 88
// end ;
14769: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14770: LD_INT 3
14772: PPUSH
14773: LD_INT 9
14775: PPUSH
14776: CALL_OW 294
14780: IFFALSE 14793
14782: GO 14784
14784: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14785: LD_ADDR_EXP 24
14789: PUSH
14790: LD_INT 1
14792: ST_TO_ADDR
// end ;
14793: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14794: LD_INT 3
14796: PPUSH
14797: LD_INT 10
14799: PPUSH
14800: CALL_OW 294
14804: IFFALSE 14824
14806: GO 14808
14808: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14809: LD_ADDR_EXP 27
14813: PUSH
14814: LD_EXP 27
14818: PPUSH
14819: CALL 56492 0 1
14823: ST_TO_ADDR
14824: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14825: LD_INT 3
14827: PPUSH
14828: LD_INT 11
14830: PPUSH
14831: CALL_OW 294
14835: IFFALSE 14855
14837: GO 14839
14839: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14840: LD_ADDR_EXP 27
14844: PUSH
14845: LD_EXP 27
14849: PPUSH
14850: CALL 56492 0 1
14854: ST_TO_ADDR
14855: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14856: LD_INT 3
14858: PPUSH
14859: LD_INT 12
14861: PPUSH
14862: CALL_OW 294
14866: IFFALSE 14886
14868: GO 14870
14870: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14871: LD_ADDR_EXP 27
14875: PUSH
14876: LD_EXP 27
14880: PPUSH
14881: CALL 56492 0 1
14885: ST_TO_ADDR
14886: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14887: LD_INT 3
14889: PPUSH
14890: LD_INT 13
14892: PPUSH
14893: CALL_OW 294
14897: IFFALSE 14917
14899: GO 14901
14901: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14902: LD_ADDR_EXP 27
14906: PUSH
14907: LD_EXP 27
14911: PPUSH
14912: CALL 56492 0 1
14916: ST_TO_ADDR
14917: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14918: LD_INT 3
14920: PPUSH
14921: LD_INT 14
14923: PPUSH
14924: CALL_OW 294
14928: IFFALSE 14948
14930: GO 14932
14932: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14933: LD_ADDR_EXP 27
14937: PUSH
14938: LD_EXP 27
14942: PPUSH
14943: CALL 56492 0 1
14947: ST_TO_ADDR
14948: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14949: LD_EXP 27
14953: PUSH
14954: LD_INT 5
14956: GREATEREQUAL
14957: PUSH
14958: LD_EXP 14
14962: AND
14963: IFFALSE 14983
14965: GO 14967
14967: DISABLE
// begin allMapPointsSpotted := true ;
14968: LD_ADDR_EXP 26
14972: PUSH
14973: LD_INT 1
14975: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14976: LD_STRING M10
14978: PPUSH
14979: CALL_OW 337
// end ;
14983: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14984: LD_EXP 26
14988: PUSH
14989: LD_EXP 22
14993: AND
14994: IFFALSE 15006
14996: GO 14998
14998: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14999: LD_STRING M10a
15001: PPUSH
15002: CALL_OW 337
// end ;
15006: END
// every 0 0$1 trigger hasAllTanks do var timer , tmp , burlakIsInsideBuilding , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
15007: LD_EXP 14
15011: IFFALSE 15701
15013: GO 15015
15015: DISABLE
15016: LD_INT 0
15018: PPUSH
15019: PPUSH
15020: PPUSH
15021: PPUSH
15022: PPUSH
15023: PPUSH
15024: PPUSH
// begin wasOutsideBeria := false ;
15025: LD_ADDR_VAR 0 5
15029: PUSH
15030: LD_INT 0
15032: ST_TO_ADDR
// wantToTalk := false ;
15033: LD_ADDR_VAR 0 4
15037: PUSH
15038: LD_INT 0
15040: ST_TO_ADDR
// westOutpostReported := false ;
15041: LD_ADDR_VAR 0 6
15045: PUSH
15046: LD_INT 0
15048: ST_TO_ADDR
// eastOutpostReported := false ;
15049: LD_ADDR_VAR 0 7
15053: PUSH
15054: LD_INT 0
15056: ST_TO_ADDR
// timer := 0 0$0 ;
15057: LD_ADDR_VAR 0 1
15061: PUSH
15062: LD_INT 0
15064: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
15065: LD_INT 70
15067: PPUSH
15068: CALL_OW 67
// timer := timer + 0 0$2 ;
15072: LD_ADDR_VAR 0 1
15076: PUSH
15077: LD_VAR 0 1
15081: PUSH
15082: LD_INT 70
15084: PLUS
15085: ST_TO_ADDR
// burlakIsInsideBuilding := false ;
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_INT 0
15093: ST_TO_ADDR
// tmp := IsInUnit ( Burlak ) ;
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_EXP 34
15103: PPUSH
15104: CALL_OW 310
15108: ST_TO_ADDR
// if tmp then
15109: LD_VAR 0 2
15113: IFFALSE 15134
// burlakIsInsideBuilding := GetType ( tmp ) = unit_building ;
15115: LD_ADDR_VAR 0 3
15119: PUSH
15120: LD_VAR 0 2
15124: PPUSH
15125: CALL_OW 247
15129: PUSH
15130: LD_INT 3
15132: EQUAL
15133: ST_TO_ADDR
// if timer >= 0 0$30 then
15134: LD_VAR 0 1
15138: PUSH
15139: LD_INT 1050
15141: GREATEREQUAL
15142: IFFALSE 15152
// wantToTalk := true ;
15144: LD_ADDR_VAR 0 4
15148: PUSH
15149: LD_INT 1
15151: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 and not burlakIsInsideBuilding then
15152: LD_EXP 34
15156: PPUSH
15157: LD_EXP 40
15161: PPUSH
15162: CALL_OW 296
15166: PUSH
15167: LD_INT 9
15169: GREATER
15170: PUSH
15171: LD_VAR 0 3
15175: NOT
15176: AND
15177: IFFALSE 15187
// wasOutsideBeria := true ;
15179: LD_ADDR_VAR 0 5
15183: PUSH
15184: LD_INT 1
15186: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
15187: LD_VAR 0 4
15191: PUSH
15192: LD_VAR 0 5
15196: AND
15197: PUSH
15198: LD_EXP 34
15202: PPUSH
15203: LD_EXP 40
15207: PPUSH
15208: CALL_OW 296
15212: PUSH
15213: LD_INT 8
15215: LESS
15216: PUSH
15217: LD_EXP 34
15221: PPUSH
15222: CALL_OW 310
15226: PPUSH
15227: LD_EXP 40
15231: PPUSH
15232: CALL_OW 296
15236: PUSH
15237: LD_INT 8
15239: LESS
15240: OR
15241: AND
15242: IFFALSE 15590
// begin timer := 0 0$0 ;
15244: LD_ADDR_VAR 0 1
15248: PUSH
15249: LD_INT 0
15251: ST_TO_ADDR
// wantToTalk := false ;
15252: LD_ADDR_VAR 0 4
15256: PUSH
15257: LD_INT 0
15259: ST_TO_ADDR
// wasOutsideBeria := false ;
15260: LD_ADDR_VAR 0 5
15264: PUSH
15265: LD_INT 0
15267: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15268: LD_EXP 40
15272: PPUSH
15273: CALL_OW 87
// DialogueOn ;
15277: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15281: LD_EXP 40
15285: PPUSH
15286: LD_STRING D25-Pla-1
15288: PPUSH
15289: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15293: LD_VAR 0 6
15297: NOT
15298: PUSH
15299: LD_VAR 0 7
15303: NOT
15304: AND
15305: PUSH
15306: LD_EXP 20
15310: AND
15311: PUSH
15312: LD_EXP 21
15316: AND
15317: IFFALSE 15397
// begin westOutpostReported := true ;
15319: LD_ADDR_VAR 0 6
15323: PUSH
15324: LD_INT 1
15326: ST_TO_ADDR
// eastOutpostReported := true ;
15327: LD_ADDR_VAR 0 7
15331: PUSH
15332: LD_INT 1
15334: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15335: LD_EXP 34
15339: PPUSH
15340: LD_STRING D25-Bur-1
15342: PPUSH
15343: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15347: LD_EXP 24
15351: PUSH
15352: LD_EXP 22
15356: NOT
15357: AND
15358: IFFALSE 15395
// begin Say ( Burlak , D25b-Bur-1 ) ;
15360: LD_EXP 34
15364: PPUSH
15365: LD_STRING D25b-Bur-1
15367: PPUSH
15368: CALL_OW 88
// if not reinforcementsGained then
15372: LD_EXP 25
15376: NOT
15377: IFFALSE 15395
// begin Say ( Platonov , D25b-Pla-1 ) ;
15379: LD_EXP 40
15383: PPUSH
15384: LD_STRING D25b-Pla-1
15386: PPUSH
15387: CALL_OW 88
// SendReinforcements ( ) ;
15391: CALL 3628 0 0
// end ; end ; end else
15395: GO 15586
// if not westOutpostReported and westOutpostDiscovered then
15397: LD_VAR 0 6
15401: NOT
15402: PUSH
15403: LD_EXP 20
15407: AND
15408: IFFALSE 15480
// begin westOutpostReported := true ;
15410: LD_ADDR_VAR 0 6
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15418: LD_EXP 34
15422: PPUSH
15423: LD_STRING D25a-Bur-1b
15425: PPUSH
15426: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15430: LD_EXP 24
15434: PUSH
15435: LD_EXP 22
15439: NOT
15440: AND
15441: IFFALSE 15478
// begin Say ( Burlak , D25b-Bur-1 ) ;
15443: LD_EXP 34
15447: PPUSH
15448: LD_STRING D25b-Bur-1
15450: PPUSH
15451: CALL_OW 88
// if not reinforcementsGained then
15455: LD_EXP 25
15459: NOT
15460: IFFALSE 15478
// begin Say ( Platonov , D25b-Pla-1 ) ;
15462: LD_EXP 40
15466: PPUSH
15467: LD_STRING D25b-Pla-1
15469: PPUSH
15470: CALL_OW 88
// SendReinforcements ( ) ;
15474: CALL 3628 0 0
// end ; end ; end else
15478: GO 15586
// if not eastOutpostReported and eastOutpostDiscovered then
15480: LD_VAR 0 7
15484: NOT
15485: PUSH
15486: LD_EXP 21
15490: AND
15491: IFFALSE 15515
// begin eastOutpostReported := true ;
15493: LD_ADDR_VAR 0 7
15497: PUSH
15498: LD_INT 1
15500: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15501: LD_EXP 34
15505: PPUSH
15506: LD_STRING D25a-Bur-1a
15508: PPUSH
15509: CALL_OW 88
// end else
15513: GO 15586
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15515: LD_EXP 20
15519: NOT
15520: PUSH
15521: LD_EXP 21
15525: NOT
15526: OR
15527: IFFALSE 15555
// begin Say ( Burlak , D25a-Bur-1 ) ;
15529: LD_EXP 34
15533: PPUSH
15534: LD_STRING D25a-Bur-1
15536: PPUSH
15537: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15541: LD_EXP 40
15545: PPUSH
15546: LD_STRING D25c-Pla-1
15548: PPUSH
15549: CALL_OW 88
// end else
15553: GO 15586
// if not allMapPointsSpotted then
15555: LD_EXP 26
15559: NOT
15560: IFFALSE 15586
// begin Say ( Burlak , D25a-Bur-1 ) ;
15562: LD_EXP 34
15566: PPUSH
15567: LD_STRING D25a-Bur-1
15569: PPUSH
15570: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15574: LD_EXP 40
15578: PPUSH
15579: LD_STRING D25c-Pla-1a
15581: PPUSH
15582: CALL_OW 88
// end ; DialogueOff ;
15586: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15590: LD_EXP 26
15594: PUSH
15595: LD_EXP 22
15599: AND
15600: IFFALSE 15065
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15602: LD_INT 22
15604: PUSH
15605: LD_INT 3
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 21
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 91
15624: PUSH
15625: LD_EXP 40
15629: PUSH
15630: LD_INT 10
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: PPUSH
15643: CALL_OW 69
15647: IFFALSE 15690
// begin if not belkovDied and not belkovSaved then
15649: LD_EXP 19
15653: NOT
15654: PUSH
15655: LD_EXP 28
15659: NOT
15660: AND
15661: IFFALSE 15684
// begin if Query ( QContMission ) = 1 then
15663: LD_STRING QContMission
15665: PPUSH
15666: CALL_OW 97
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: IFFALSE 15682
// begin EndMission ;
15676: CALL 15704 0 0
// exit ;
15680: GO 15701
// end ; end else
15682: GO 15690
// begin EndMission ;
15684: CALL 15704 0 0
// exit ;
15688: GO 15701
// end ; end ; wait ( 0 0$10 ) ;
15690: LD_INT 350
15692: PPUSH
15693: CALL_OW 67
// until false ;
15697: LD_INT 0
15699: IFFALSE 15602
// end ;
15701: PPOPN 7
15703: END
// function EndMission ; var i , tmp ; begin
15704: LD_INT 0
15706: PPUSH
15707: PPUSH
15708: PPUSH
// if initiative then
15709: LD_EXP 31
15713: IFFALSE 15727
// AddMedal ( Initiative , 1 ) else
15715: LD_STRING Initiative
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 101
15725: GO 15758
// if not eastOutpostDestroyed then
15727: LD_EXP 23
15731: NOT
15732: IFFALSE 15747
// AddMedal ( Initiative , - 2 ) else
15734: LD_STRING Initiative
15736: PPUSH
15737: LD_INT 2
15739: NEG
15740: PPUSH
15741: CALL_OW 101
15745: GO 15758
// AddMedal ( Initiative , - 1 ) ;
15747: LD_STRING Initiative
15749: PPUSH
15750: LD_INT 1
15752: NEG
15753: PPUSH
15754: CALL_OW 101
// if not belkovDied and belkovSaved then
15758: LD_EXP 19
15762: NOT
15763: PUSH
15764: LD_EXP 28
15768: AND
15769: IFFALSE 15783
// AddMedal ( Belkov , 1 ) else
15771: LD_STRING Belkov
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: CALL_OW 101
15781: GO 15878
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15783: LD_EXP 45
15787: PPUSH
15788: LD_INT 22
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 72
15802: IFFALSE 15816
// AddMedal ( Belkov , 2 ) else
15804: LD_STRING Belkov
15806: PPUSH
15807: LD_INT 2
15809: PPUSH
15810: CALL_OW 101
15814: GO 15878
// if belkovDied then
15816: LD_EXP 19
15820: IFFALSE 15835
// AddMedal ( Belkov , - 1 ) else
15822: LD_STRING Belkov
15824: PPUSH
15825: LD_INT 1
15827: NEG
15828: PPUSH
15829: CALL_OW 101
15833: GO 15878
// if not belkovSaved then
15835: LD_EXP 28
15839: NOT
15840: IFFALSE 15855
// AddMedal ( Belkov , - 2 ) else
15842: LD_STRING Belkov
15844: PPUSH
15845: LD_INT 2
15847: NEG
15848: PPUSH
15849: CALL_OW 101
15853: GO 15878
// if belkovDied and belkovSaved then
15855: LD_EXP 19
15859: PUSH
15860: LD_EXP 28
15864: AND
15865: IFFALSE 15878
// AddMedal ( Belkov , - 3 ) ;
15867: LD_STRING Belkov
15869: PPUSH
15870: LD_INT 3
15872: NEG
15873: PPUSH
15874: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15878: LD_EXP 30
15882: PUSH
15883: LD_INT 0
15885: EQUAL
15886: IFFALSE 15900
// AddMedal ( NoLosses , 1 ) else
15888: LD_STRING NoLosses
15890: PPUSH
15891: LD_INT 1
15893: PPUSH
15894: CALL_OW 101
15898: GO 15911
// AddMedal ( NoLosses , - 1 ) ;
15900: LD_STRING NoLosses
15902: PPUSH
15903: LD_INT 1
15905: NEG
15906: PPUSH
15907: CALL_OW 101
// GiveMedals ( Main ) ;
15911: LD_STRING Main
15913: PPUSH
15914: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15918: LD_INT 22
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 23
15930: PUSH
15931: LD_INT 3
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 69
15957: PPUSH
15958: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15962: LD_EXP 34
15966: PPUSH
15967: LD_EXP 3
15971: PUSH
15972: LD_STRING Burlak
15974: STR
15975: PPUSH
15976: CALL_OW 38
// if IsLive ( Gnyevko ) then
15980: LD_EXP 35
15984: PPUSH
15985: CALL_OW 300
15989: IFFALSE 16009
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15991: LD_EXP 35
15995: PPUSH
15996: LD_EXP 3
16000: PUSH
16001: LD_STRING Gnyevko
16003: STR
16004: PPUSH
16005: CALL_OW 38
// if IsLive ( Kovalyuk ) then
16009: LD_EXP 39
16013: PPUSH
16014: CALL_OW 300
16018: IFFALSE 16038
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
16020: LD_EXP 39
16024: PPUSH
16025: LD_EXP 3
16029: PUSH
16030: LD_STRING Kovalyuk
16032: STR
16033: PPUSH
16034: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
16038: LD_EXP 36
16042: PPUSH
16043: CALL_OW 300
16047: PUSH
16048: LD_EXP 28
16052: AND
16053: IFFALSE 16073
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
16055: LD_EXP 36
16059: PPUSH
16060: LD_EXP 3
16064: PUSH
16065: LD_STRING Belkov
16067: STR
16068: PPUSH
16069: CALL_OW 38
// if IsLive ( Kirilenkova ) then
16073: LD_EXP 37
16077: PPUSH
16078: CALL_OW 300
16082: IFFALSE 16102
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
16084: LD_EXP 37
16088: PPUSH
16089: LD_EXP 3
16093: PUSH
16094: LD_STRING Kirilenkova
16096: STR
16097: PPUSH
16098: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
16102: LD_INT 22
16104: PUSH
16105: LD_INT 3
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 23
16114: PUSH
16115: LD_INT 3
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 21
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: PUSH
16142: LD_EXP 34
16146: PUSH
16147: LD_EXP 35
16151: PUSH
16152: LD_EXP 39
16156: PUSH
16157: LD_EXP 36
16161: PUSH
16162: LD_EXP 37
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: DIFF
16174: PPUSH
16175: LD_EXP 3
16179: PUSH
16180: LD_STRING burlakTeam
16182: STR
16183: PPUSH
16184: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
16188: LD_INT 22
16190: PUSH
16191: LD_INT 6
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 23
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PUSH
16228: LD_EXP 40
16232: PUSH
16233: LD_EXP 38
16237: PUSH
16238: LD_EXP 36
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PUSH
16248: LD_EXP 45
16252: UNION
16253: DIFF
16254: PPUSH
16255: LD_EXP 3
16259: PUSH
16260: LD_STRING kirovTeam
16262: STR
16263: PPUSH
16264: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16268: LD_EXP 23
16272: PPUSH
16273: LD_STRING 02_EasternOutpostDestroyed
16275: PPUSH
16276: CALL_OW 39
// tmp := [ ] ;
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: EMPTY
16286: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16287: LD_ADDR_VAR 0 2
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_INT 3
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 21
16304: PUSH
16305: LD_INT 3
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: PUSH
16321: FOR_IN
16322: IFFALSE 16398
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16324: LD_ADDR_VAR 0 3
16328: PUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: CALL_OW 266
16343: PUSH
16344: LD_VAR 0 2
16348: PPUSH
16349: CALL_OW 267
16353: PUSH
16354: LD_VAR 0 2
16358: PPUSH
16359: CALL_OW 250
16363: PUSH
16364: LD_VAR 0 2
16368: PPUSH
16369: CALL_OW 251
16373: PUSH
16374: LD_VAR 0 2
16378: PPUSH
16379: CALL_OW 254
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL 55131 0 2
16395: ST_TO_ADDR
16396: GO 16321
16398: POP
16399: POP
// SaveVariable ( tmp , 02_Beria ) ;
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_STRING 02_Beria
16407: PPUSH
16408: CALL_OW 39
// tmp := [ ] ;
16412: LD_ADDR_VAR 0 3
16416: PUSH
16417: EMPTY
16418: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16419: LD_ADDR_VAR 0 2
16423: PUSH
16424: LD_INT 22
16426: PUSH
16427: LD_INT 6
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 21
16436: PUSH
16437: LD_INT 3
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 69
16452: PUSH
16453: FOR_IN
16454: IFFALSE 16530
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16456: LD_ADDR_VAR 0 3
16460: PUSH
16461: LD_VAR 0 3
16465: PPUSH
16466: LD_VAR 0 2
16470: PPUSH
16471: CALL_OW 266
16475: PUSH
16476: LD_VAR 0 2
16480: PPUSH
16481: CALL_OW 267
16485: PUSH
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL_OW 250
16495: PUSH
16496: LD_VAR 0 2
16500: PPUSH
16501: CALL_OW 251
16505: PUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: CALL_OW 254
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: PPUSH
16523: CALL 55131 0 2
16527: ST_TO_ADDR
16528: GO 16453
16530: POP
16531: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_STRING 02_Kirov
16539: PPUSH
16540: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16544: LD_INT 22
16546: PUSH
16547: LD_INT 3
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 21
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PPUSH
16568: CALL_OW 69
16572: PPUSH
16573: CALL 19450 0 1
16577: PPUSH
16578: LD_STRING 02_VehiclesCount
16580: PPUSH
16581: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16585: LD_INT 22
16587: PUSH
16588: LD_INT 6
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 21
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL_OW 69
16613: PPUSH
16614: CALL 19450 0 1
16618: PPUSH
16619: LD_STRING 02_KirovVehiclesCount
16621: PPUSH
16622: CALL_OW 39
// YouWin ;
16626: CALL_OW 103
// end ; end_of_file
16630: LD_VAR 0 1
16634: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not mode then
16635: LD_VAR 0 5
16639: NOT
16640: IFFALSE 16644
// exit ;
16642: GO 16665
// wait ( 0 0$12 ) ;
16644: LD_INT 420
16646: PPUSH
16647: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16651: LD_VAR 0 2
16655: PPUSH
16656: LD_VAR 0 3
16660: PPUSH
16661: CALL 8326 0 2
// end ;
16665: PPOPN 5
16667: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL 76390 0 1
// if un = Burlak then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_EXP 34
16686: EQUAL
16687: IFFALSE 16696
// YouLost ( Burlak ) ;
16689: LD_STRING Burlak
16691: PPUSH
16692: CALL_OW 104
// if un = Platonov then
16696: LD_VAR 0 1
16700: PUSH
16701: LD_EXP 40
16705: EQUAL
16706: IFFALSE 16715
// YouLost ( Platonov ) ;
16708: LD_STRING Platonov
16710: PPUSH
16711: CALL_OW 104
// if un = Kurin then
16715: LD_VAR 0 1
16719: PUSH
16720: LD_EXP 38
16724: EQUAL
16725: IFFALSE 16734
// YouLost ( Kurin ) ;
16727: LD_STRING Kurin
16729: PPUSH
16730: CALL_OW 104
// if un = Belkov then
16734: LD_VAR 0 1
16738: PUSH
16739: LD_EXP 36
16743: EQUAL
16744: IFFALSE 16754
// belkovDied := true ;
16746: LD_ADDR_EXP 19
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// if un in belkovTeam then
16754: LD_VAR 0 1
16758: PUSH
16759: LD_EXP 45
16763: IN
16764: IFFALSE 16797
// begin belkovTeam := belkovTeam diff un ;
16766: LD_ADDR_EXP 45
16770: PUSH
16771: LD_EXP 45
16775: PUSH
16776: LD_VAR 0 1
16780: DIFF
16781: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16782: LD_ADDR_EXP 29
16786: PUSH
16787: LD_EXP 29
16791: PPUSH
16792: CALL 56492 0 1
16796: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_INT 3
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 21
16814: PUSH
16815: LD_INT 1
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 23
16824: PUSH
16825: LD_INT 3
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: IN
16842: IFFALSE 16859
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16844: LD_ADDR_EXP 30
16848: PUSH
16849: LD_EXP 30
16853: PPUSH
16854: CALL 56492 0 1
16858: ST_TO_ADDR
// if un in usWestForces then
16859: LD_VAR 0 1
16863: PUSH
16864: LD_EXP 46
16868: IN
16869: IFFALSE 16887
// usWestForces := usWestForces diff un ;
16871: LD_ADDR_EXP 46
16875: PUSH
16876: LD_EXP 46
16880: PUSH
16881: LD_VAR 0 1
16885: DIFF
16886: ST_TO_ADDR
// if un in usEastForces then
16887: LD_VAR 0 1
16891: PUSH
16892: LD_EXP 47
16896: IN
16897: IFFALSE 16915
// usEastForces := usEastForces diff un ;
16899: LD_ADDR_EXP 47
16903: PUSH
16904: LD_EXP 47
16908: PUSH
16909: LD_VAR 0 1
16913: DIFF
16914: ST_TO_ADDR
// if un = Dickens then
16915: LD_VAR 0 1
16919: PUSH
16920: LD_EXP 49
16924: EQUAL
16925: IFFALSE 16943
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
16927: LD_INT 1
16929: PPUSH
16930: LD_EXP 3
16934: PUSH
16935: LD_STRING DickensKilled
16937: STR
16938: PPUSH
16939: CALL_OW 39
// end ;
16943: PPOPN 1
16945: END
// on BuildingComplete ( b ) do var mech ;
16946: LD_INT 0
16948: PPUSH
// begin if GetSide ( b ) = 3 then
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 255
16958: PUSH
16959: LD_INT 3
16961: EQUAL
16962: IFFALSE 17021
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 266
16973: PUSH
16974: LD_INT 6
16976: PUSH
16977: LD_INT 7
16979: PUSH
16980: LD_INT 8
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: IN
16988: IFFALSE 16998
// hasLab := true ;
16990: LD_ADDR_EXP 9
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 266
17007: PUSH
17008: LD_INT 2
17010: EQUAL
17011: IFFALSE 17021
// hasWorkshop := true ;
17013: LD_ADDR_EXP 10
17017: PUSH
17018: LD_INT 1
17020: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
17021: LD_VAR 0 1
17025: PPUSH
17026: CALL_OW 255
17030: PUSH
17031: LD_INT 6
17033: EQUAL
17034: IFFALSE 17108
// begin if GetBType ( b ) = b_workshop then
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 266
17045: PUSH
17046: LD_INT 2
17048: EQUAL
17049: IFFALSE 17108
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_EXP 43
17060: PPUSH
17061: LD_INT 25
17063: PUSH
17064: LD_INT 3
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PPUSH
17071: CALL_OW 72
17075: ST_TO_ADDR
// if not mech then
17076: LD_VAR 0 2
17080: NOT
17081: IFFALSE 17085
// exit ;
17083: GO 17108
// ComExit ( mech ) ;
17085: LD_VAR 0 2
17089: PPUSH
17090: CALL 55529 0 1
// AddComEnterUnit ( mech , b ) ;
17094: LD_VAR 0 2
17098: PPUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 180
// end ; end ; end ;
17108: PPOPN 2
17110: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17111: LD_VAR 0 1
17115: PPUSH
17116: LD_VAR 0 2
17120: PPUSH
17121: CALL 76448 0 2
// if GetSide ( vehicle ) = 3 then
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 255
17134: PUSH
17135: LD_INT 3
17137: EQUAL
17138: IFFALSE 17163
// begin hasTank := true ;
17140: LD_ADDR_EXP 12
17144: PUSH
17145: LD_INT 1
17147: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
17148: LD_ADDR_EXP 15
17152: PUSH
17153: LD_EXP 15
17157: PPUSH
17158: CALL 56492 0 1
17162: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 255
17172: PUSH
17173: LD_INT 6
17175: EQUAL
17176: IFFALSE 17187
// KirovAttack ( vehicle ) ;
17178: LD_VAR 0 1
17182: PPUSH
17183: CALL 3934 0 1
// end ;
17187: PPOPN 2
17189: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
17190: LD_VAR 0 1
17194: PUSH
17195: LD_EXP 33
17199: EQUAL
17200: IFFALSE 17206
// BelkovAttackScript ;
17202: CALL 1745 0 0
// end ;
17206: PPOPN 1
17208: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
17209: LD_INT 0
17211: PPUSH
// begin if side = 1 then
17212: LD_VAR 0 3
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17230
// vehCaptured := true ;
17222: LD_ADDR_EXP 16
17226: PUSH
17227: LD_INT 1
17229: ST_TO_ADDR
// end ;
17230: PPOPN 5
17232: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
17233: LD_VAR 0 1
17237: PUSH
17238: LD_INT 3
17240: EQUAL
17241: PUSH
17242: LD_VAR 0 2
17246: PUSH
17247: LD_INT 6
17249: EQUAL
17250: AND
17251: IFFALSE 17261
// allianceAttacked := true ;
17253: LD_ADDR_EXP 13
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// end ; end_of_file
17261: PPOPN 2
17263: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17264: LD_INT 0
17266: PPUSH
17267: PPUSH
// if exist_mode then
17268: LD_VAR 0 2
17272: IFFALSE 17318
// begin unit := CreateCharacter ( prefix & ident ) ;
17274: LD_ADDR_VAR 0 5
17278: PUSH
17279: LD_VAR 0 3
17283: PUSH
17284: LD_VAR 0 1
17288: STR
17289: PPUSH
17290: CALL_OW 34
17294: ST_TO_ADDR
// if unit then
17295: LD_VAR 0 5
17299: IFFALSE 17316
// DeleteCharacters ( prefix & ident ) ;
17301: LD_VAR 0 3
17305: PUSH
17306: LD_VAR 0 1
17310: STR
17311: PPUSH
17312: CALL_OW 40
// end else
17316: GO 17333
// unit := NewCharacter ( ident ) ;
17318: LD_ADDR_VAR 0 5
17322: PUSH
17323: LD_VAR 0 1
17327: PPUSH
17328: CALL_OW 25
17332: ST_TO_ADDR
// result := unit ;
17333: LD_ADDR_VAR 0 4
17337: PUSH
17338: LD_VAR 0 5
17342: ST_TO_ADDR
// end ;
17343: LD_VAR 0 4
17347: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
// if exist_mode then
17352: LD_VAR 0 2
17356: IFFALSE 17381
// unit := CreateCharacter ( prefix & ident ) else
17358: LD_ADDR_VAR 0 5
17362: PUSH
17363: LD_VAR 0 3
17367: PUSH
17368: LD_VAR 0 1
17372: STR
17373: PPUSH
17374: CALL_OW 34
17378: ST_TO_ADDR
17379: GO 17396
// unit := NewCharacter ( ident ) ;
17381: LD_ADDR_VAR 0 5
17385: PUSH
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 25
17395: ST_TO_ADDR
// result := unit ;
17396: LD_ADDR_VAR 0 4
17400: PUSH
17401: LD_VAR 0 5
17405: ST_TO_ADDR
// end ;
17406: LD_VAR 0 4
17410: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17411: LD_INT 0
17413: PPUSH
17414: PPUSH
// if not side or not nation then
17415: LD_VAR 0 1
17419: NOT
17420: PUSH
17421: LD_VAR 0 2
17425: NOT
17426: OR
17427: IFFALSE 17431
// exit ;
17429: GO 18199
// case nation of nation_american :
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 1
17438: DOUBLE
17439: EQUAL
17440: IFTRUE 17444
17442: GO 17658
17444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17445: LD_ADDR_VAR 0 4
17449: PUSH
17450: LD_INT 35
17452: PUSH
17453: LD_INT 45
17455: PUSH
17456: LD_INT 46
17458: PUSH
17459: LD_INT 47
17461: PUSH
17462: LD_INT 82
17464: PUSH
17465: LD_INT 83
17467: PUSH
17468: LD_INT 84
17470: PUSH
17471: LD_INT 85
17473: PUSH
17474: LD_INT 86
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: LD_INT 6
17485: PUSH
17486: LD_INT 15
17488: PUSH
17489: LD_INT 16
17491: PUSH
17492: LD_INT 7
17494: PUSH
17495: LD_INT 12
17497: PUSH
17498: LD_INT 13
17500: PUSH
17501: LD_INT 10
17503: PUSH
17504: LD_INT 14
17506: PUSH
17507: LD_INT 20
17509: PUSH
17510: LD_INT 21
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_INT 25
17518: PUSH
17519: LD_INT 32
17521: PUSH
17522: LD_INT 27
17524: PUSH
17525: LD_INT 36
17527: PUSH
17528: LD_INT 69
17530: PUSH
17531: LD_INT 39
17533: PUSH
17534: LD_INT 34
17536: PUSH
17537: LD_INT 40
17539: PUSH
17540: LD_INT 48
17542: PUSH
17543: LD_INT 49
17545: PUSH
17546: LD_INT 50
17548: PUSH
17549: LD_INT 51
17551: PUSH
17552: LD_INT 52
17554: PUSH
17555: LD_INT 53
17557: PUSH
17558: LD_INT 54
17560: PUSH
17561: LD_INT 55
17563: PUSH
17564: LD_INT 56
17566: PUSH
17567: LD_INT 57
17569: PUSH
17570: LD_INT 58
17572: PUSH
17573: LD_INT 59
17575: PUSH
17576: LD_INT 60
17578: PUSH
17579: LD_INT 61
17581: PUSH
17582: LD_INT 62
17584: PUSH
17585: LD_INT 80
17587: PUSH
17588: LD_INT 82
17590: PUSH
17591: LD_INT 83
17593: PUSH
17594: LD_INT 84
17596: PUSH
17597: LD_INT 85
17599: PUSH
17600: LD_INT 86
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: ST_TO_ADDR
17656: GO 18123
17658: LD_INT 2
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17892
17666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17667: LD_ADDR_VAR 0 4
17671: PUSH
17672: LD_INT 35
17674: PUSH
17675: LD_INT 45
17677: PUSH
17678: LD_INT 46
17680: PUSH
17681: LD_INT 47
17683: PUSH
17684: LD_INT 82
17686: PUSH
17687: LD_INT 83
17689: PUSH
17690: LD_INT 84
17692: PUSH
17693: LD_INT 85
17695: PUSH
17696: LD_INT 87
17698: PUSH
17699: LD_INT 70
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: LD_INT 11
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: LD_INT 4
17713: PUSH
17714: LD_INT 5
17716: PUSH
17717: LD_INT 6
17719: PUSH
17720: LD_INT 15
17722: PUSH
17723: LD_INT 18
17725: PUSH
17726: LD_INT 7
17728: PUSH
17729: LD_INT 17
17731: PUSH
17732: LD_INT 8
17734: PUSH
17735: LD_INT 20
17737: PUSH
17738: LD_INT 21
17740: PUSH
17741: LD_INT 22
17743: PUSH
17744: LD_INT 72
17746: PUSH
17747: LD_INT 26
17749: PUSH
17750: LD_INT 69
17752: PUSH
17753: LD_INT 39
17755: PUSH
17756: LD_INT 40
17758: PUSH
17759: LD_INT 41
17761: PUSH
17762: LD_INT 42
17764: PUSH
17765: LD_INT 43
17767: PUSH
17768: LD_INT 48
17770: PUSH
17771: LD_INT 49
17773: PUSH
17774: LD_INT 50
17776: PUSH
17777: LD_INT 51
17779: PUSH
17780: LD_INT 52
17782: PUSH
17783: LD_INT 53
17785: PUSH
17786: LD_INT 54
17788: PUSH
17789: LD_INT 55
17791: PUSH
17792: LD_INT 56
17794: PUSH
17795: LD_INT 60
17797: PUSH
17798: LD_INT 61
17800: PUSH
17801: LD_INT 62
17803: PUSH
17804: LD_INT 66
17806: PUSH
17807: LD_INT 67
17809: PUSH
17810: LD_INT 68
17812: PUSH
17813: LD_INT 81
17815: PUSH
17816: LD_INT 82
17818: PUSH
17819: LD_INT 83
17821: PUSH
17822: LD_INT 84
17824: PUSH
17825: LD_INT 85
17827: PUSH
17828: LD_INT 87
17830: PUSH
17831: LD_INT 88
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: ST_TO_ADDR
17890: GO 18123
17892: LD_INT 3
17894: DOUBLE
17895: EQUAL
17896: IFTRUE 17900
17898: GO 18122
17900: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17901: LD_ADDR_VAR 0 4
17905: PUSH
17906: LD_INT 46
17908: PUSH
17909: LD_INT 47
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 82
17920: PUSH
17921: LD_INT 83
17923: PUSH
17924: LD_INT 84
17926: PUSH
17927: LD_INT 85
17929: PUSH
17930: LD_INT 86
17932: PUSH
17933: LD_INT 11
17935: PUSH
17936: LD_INT 9
17938: PUSH
17939: LD_INT 20
17941: PUSH
17942: LD_INT 19
17944: PUSH
17945: LD_INT 21
17947: PUSH
17948: LD_INT 24
17950: PUSH
17951: LD_INT 22
17953: PUSH
17954: LD_INT 25
17956: PUSH
17957: LD_INT 28
17959: PUSH
17960: LD_INT 29
17962: PUSH
17963: LD_INT 30
17965: PUSH
17966: LD_INT 31
17968: PUSH
17969: LD_INT 37
17971: PUSH
17972: LD_INT 38
17974: PUSH
17975: LD_INT 32
17977: PUSH
17978: LD_INT 27
17980: PUSH
17981: LD_INT 33
17983: PUSH
17984: LD_INT 69
17986: PUSH
17987: LD_INT 39
17989: PUSH
17990: LD_INT 34
17992: PUSH
17993: LD_INT 40
17995: PUSH
17996: LD_INT 71
17998: PUSH
17999: LD_INT 23
18001: PUSH
18002: LD_INT 44
18004: PUSH
18005: LD_INT 48
18007: PUSH
18008: LD_INT 49
18010: PUSH
18011: LD_INT 50
18013: PUSH
18014: LD_INT 51
18016: PUSH
18017: LD_INT 52
18019: PUSH
18020: LD_INT 53
18022: PUSH
18023: LD_INT 54
18025: PUSH
18026: LD_INT 55
18028: PUSH
18029: LD_INT 56
18031: PUSH
18032: LD_INT 57
18034: PUSH
18035: LD_INT 58
18037: PUSH
18038: LD_INT 59
18040: PUSH
18041: LD_INT 63
18043: PUSH
18044: LD_INT 64
18046: PUSH
18047: LD_INT 65
18049: PUSH
18050: LD_INT 82
18052: PUSH
18053: LD_INT 83
18055: PUSH
18056: LD_INT 84
18058: PUSH
18059: LD_INT 85
18061: PUSH
18062: LD_INT 86
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: ST_TO_ADDR
18120: GO 18123
18122: POP
// if state > - 1 and state < 3 then
18123: LD_VAR 0 3
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: GREATER
18132: PUSH
18133: LD_VAR 0 3
18137: PUSH
18138: LD_INT 3
18140: LESS
18141: AND
18142: IFFALSE 18199
// for i in result do
18144: LD_ADDR_VAR 0 5
18148: PUSH
18149: LD_VAR 0 4
18153: PUSH
18154: FOR_IN
18155: IFFALSE 18197
// if GetTech ( i , side ) <> state then
18157: LD_VAR 0 5
18161: PPUSH
18162: LD_VAR 0 1
18166: PPUSH
18167: CALL_OW 321
18171: PUSH
18172: LD_VAR 0 3
18176: NONEQUAL
18177: IFFALSE 18195
// result := result diff i ;
18179: LD_ADDR_VAR 0 4
18183: PUSH
18184: LD_VAR 0 4
18188: PUSH
18189: LD_VAR 0 5
18193: DIFF
18194: ST_TO_ADDR
18195: GO 18154
18197: POP
18198: POP
// end ;
18199: LD_VAR 0 4
18203: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18204: LD_INT 0
18206: PPUSH
18207: PPUSH
18208: PPUSH
// result := true ;
18209: LD_ADDR_VAR 0 3
18213: PUSH
18214: LD_INT 1
18216: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18217: LD_ADDR_VAR 0 5
18221: PUSH
18222: LD_VAR 0 2
18226: PPUSH
18227: CALL_OW 480
18231: ST_TO_ADDR
// if not tmp then
18232: LD_VAR 0 5
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18290
// for i in tmp do
18241: LD_ADDR_VAR 0 4
18245: PUSH
18246: LD_VAR 0 5
18250: PUSH
18251: FOR_IN
18252: IFFALSE 18288
// if GetTech ( i , side ) <> state_researched then
18254: LD_VAR 0 4
18258: PPUSH
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 321
18268: PUSH
18269: LD_INT 2
18271: NONEQUAL
18272: IFFALSE 18286
// begin result := false ;
18274: LD_ADDR_VAR 0 3
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// exit ;
18282: POP
18283: POP
18284: GO 18290
// end ;
18286: GO 18251
18288: POP
18289: POP
// end ;
18290: LD_VAR 0 3
18294: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18295: LD_INT 0
18297: PPUSH
18298: PPUSH
18299: PPUSH
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18310: LD_VAR 0 1
18314: NOT
18315: PUSH
18316: LD_VAR 0 1
18320: PPUSH
18321: CALL_OW 257
18325: PUSH
18326: LD_INT 9
18328: NONEQUAL
18329: OR
18330: IFFALSE 18334
// exit ;
18332: GO 18907
// side := GetSide ( unit ) ;
18334: LD_ADDR_VAR 0 9
18338: PUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 255
18348: ST_TO_ADDR
// tech_space := tech_spacanom ;
18349: LD_ADDR_VAR 0 12
18353: PUSH
18354: LD_INT 29
18356: ST_TO_ADDR
// tech_time := tech_taurad ;
18357: LD_ADDR_VAR 0 13
18361: PUSH
18362: LD_INT 28
18364: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18365: LD_ADDR_VAR 0 11
18369: PUSH
18370: LD_VAR 0 1
18374: PPUSH
18375: CALL_OW 310
18379: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18380: LD_VAR 0 11
18384: PPUSH
18385: CALL_OW 247
18389: PUSH
18390: LD_INT 2
18392: EQUAL
18393: IFFALSE 18397
// exit ;
18395: GO 18907
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18397: LD_ADDR_VAR 0 8
18401: PUSH
18402: LD_INT 81
18404: PUSH
18405: LD_VAR 0 9
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 3
18416: PUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PPUSH
18435: CALL_OW 69
18439: ST_TO_ADDR
// if not tmp then
18440: LD_VAR 0 8
18444: NOT
18445: IFFALSE 18449
// exit ;
18447: GO 18907
// if in_unit then
18449: LD_VAR 0 11
18453: IFFALSE 18477
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18455: LD_ADDR_VAR 0 10
18459: PUSH
18460: LD_VAR 0 8
18464: PPUSH
18465: LD_VAR 0 11
18469: PPUSH
18470: CALL_OW 74
18474: ST_TO_ADDR
18475: GO 18497
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18477: LD_ADDR_VAR 0 10
18481: PUSH
18482: LD_VAR 0 8
18486: PPUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 74
18496: ST_TO_ADDR
// if not enemy then
18497: LD_VAR 0 10
18501: NOT
18502: IFFALSE 18506
// exit ;
18504: GO 18907
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18506: LD_VAR 0 11
18510: PUSH
18511: LD_VAR 0 11
18515: PPUSH
18516: LD_VAR 0 10
18520: PPUSH
18521: CALL_OW 296
18525: PUSH
18526: LD_INT 13
18528: GREATER
18529: AND
18530: PUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_VAR 0 10
18540: PPUSH
18541: CALL_OW 296
18545: PUSH
18546: LD_INT 12
18548: GREATER
18549: OR
18550: IFFALSE 18554
// exit ;
18552: GO 18907
// missile := [ 1 ] ;
18554: LD_ADDR_VAR 0 14
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: EMPTY
18563: LIST
18564: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18565: LD_VAR 0 9
18569: PPUSH
18570: LD_VAR 0 12
18574: PPUSH
18575: CALL_OW 325
18579: IFFALSE 18608
// missile := Replace ( missile , missile + 1 , 2 ) ;
18581: LD_ADDR_VAR 0 14
18585: PUSH
18586: LD_VAR 0 14
18590: PPUSH
18591: LD_VAR 0 14
18595: PUSH
18596: LD_INT 1
18598: PLUS
18599: PPUSH
18600: LD_INT 2
18602: PPUSH
18603: CALL_OW 1
18607: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18608: LD_VAR 0 9
18612: PPUSH
18613: LD_VAR 0 13
18617: PPUSH
18618: CALL_OW 325
18622: PUSH
18623: LD_VAR 0 10
18627: PPUSH
18628: CALL_OW 255
18632: PPUSH
18633: LD_VAR 0 13
18637: PPUSH
18638: CALL_OW 325
18642: NOT
18643: AND
18644: IFFALSE 18673
// missile := Replace ( missile , missile + 1 , 3 ) ;
18646: LD_ADDR_VAR 0 14
18650: PUSH
18651: LD_VAR 0 14
18655: PPUSH
18656: LD_VAR 0 14
18660: PUSH
18661: LD_INT 1
18663: PLUS
18664: PPUSH
18665: LD_INT 3
18667: PPUSH
18668: CALL_OW 1
18672: ST_TO_ADDR
// if missile < 2 then
18673: LD_VAR 0 14
18677: PUSH
18678: LD_INT 2
18680: LESS
18681: IFFALSE 18685
// exit ;
18683: GO 18907
// x := GetX ( enemy ) ;
18685: LD_ADDR_VAR 0 4
18689: PUSH
18690: LD_VAR 0 10
18694: PPUSH
18695: CALL_OW 250
18699: ST_TO_ADDR
// y := GetY ( enemy ) ;
18700: LD_ADDR_VAR 0 5
18704: PUSH
18705: LD_VAR 0 10
18709: PPUSH
18710: CALL_OW 251
18714: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18715: LD_ADDR_VAR 0 6
18719: PUSH
18720: LD_VAR 0 4
18724: PUSH
18725: LD_INT 1
18727: NEG
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 12
18736: PLUS
18737: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18738: LD_ADDR_VAR 0 7
18742: PUSH
18743: LD_VAR 0 5
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 12
18759: PLUS
18760: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18761: LD_VAR 0 6
18765: PPUSH
18766: LD_VAR 0 7
18770: PPUSH
18771: CALL_OW 488
18775: NOT
18776: IFFALSE 18798
// begin _x := x ;
18778: LD_ADDR_VAR 0 6
18782: PUSH
18783: LD_VAR 0 4
18787: ST_TO_ADDR
// _y := y ;
18788: LD_ADDR_VAR 0 7
18792: PUSH
18793: LD_VAR 0 5
18797: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18798: LD_ADDR_VAR 0 3
18802: PUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_VAR 0 14
18810: PPUSH
18811: CALL_OW 12
18815: ST_TO_ADDR
// case i of 1 :
18816: LD_VAR 0 3
18820: PUSH
18821: LD_INT 1
18823: DOUBLE
18824: EQUAL
18825: IFTRUE 18829
18827: GO 18846
18829: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_VAR 0 10
18839: PPUSH
18840: CALL_OW 115
18844: GO 18907
18846: LD_INT 2
18848: DOUBLE
18849: EQUAL
18850: IFTRUE 18854
18852: GO 18876
18854: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18855: LD_VAR 0 1
18859: PPUSH
18860: LD_VAR 0 6
18864: PPUSH
18865: LD_VAR 0 7
18869: PPUSH
18870: CALL_OW 153
18874: GO 18907
18876: LD_INT 3
18878: DOUBLE
18879: EQUAL
18880: IFTRUE 18884
18882: GO 18906
18884: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_VAR 0 6
18894: PPUSH
18895: LD_VAR 0 7
18899: PPUSH
18900: CALL_OW 154
18904: GO 18907
18906: POP
// end ;
18907: LD_VAR 0 2
18911: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18912: LD_INT 0
18914: PPUSH
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
// if not unit or not building then
18920: LD_VAR 0 1
18924: NOT
18925: PUSH
18926: LD_VAR 0 2
18930: NOT
18931: OR
18932: IFFALSE 18936
// exit ;
18934: GO 19094
// x := GetX ( building ) ;
18936: LD_ADDR_VAR 0 5
18940: PUSH
18941: LD_VAR 0 2
18945: PPUSH
18946: CALL_OW 250
18950: ST_TO_ADDR
// y := GetY ( building ) ;
18951: LD_ADDR_VAR 0 6
18955: PUSH
18956: LD_VAR 0 2
18960: PPUSH
18961: CALL_OW 251
18965: ST_TO_ADDR
// for i = 0 to 5 do
18966: LD_ADDR_VAR 0 4
18970: PUSH
18971: DOUBLE
18972: LD_INT 0
18974: DEC
18975: ST_TO_ADDR
18976: LD_INT 5
18978: PUSH
18979: FOR_TO
18980: IFFALSE 19092
// begin _x := ShiftX ( x , i , 3 ) ;
18982: LD_ADDR_VAR 0 7
18986: PUSH
18987: LD_VAR 0 5
18991: PPUSH
18992: LD_VAR 0 4
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: CALL_OW 272
19004: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19005: LD_ADDR_VAR 0 8
19009: PUSH
19010: LD_VAR 0 6
19014: PPUSH
19015: LD_VAR 0 4
19019: PPUSH
19020: LD_INT 3
19022: PPUSH
19023: CALL_OW 273
19027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19028: LD_VAR 0 7
19032: PPUSH
19033: LD_VAR 0 8
19037: PPUSH
19038: CALL_OW 488
19042: NOT
19043: IFFALSE 19047
// continue ;
19045: GO 18979
// if HexInfo ( _x , _y ) = 0 then
19047: LD_VAR 0 7
19051: PPUSH
19052: LD_VAR 0 8
19056: PPUSH
19057: CALL_OW 428
19061: PUSH
19062: LD_INT 0
19064: EQUAL
19065: IFFALSE 19090
// begin ComMoveXY ( unit , _x , _y ) ;
19067: LD_VAR 0 1
19071: PPUSH
19072: LD_VAR 0 7
19076: PPUSH
19077: LD_VAR 0 8
19081: PPUSH
19082: CALL_OW 111
// exit ;
19086: POP
19087: POP
19088: GO 19094
// end ; end ;
19090: GO 18979
19092: POP
19093: POP
// end ;
19094: LD_VAR 0 3
19098: RET
// export function ScanBase ( side , base_area ) ; begin
19099: LD_INT 0
19101: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_VAR 0 2
19111: PPUSH
19112: LD_INT 81
19114: PUSH
19115: LD_VAR 0 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PPUSH
19124: CALL_OW 70
19128: ST_TO_ADDR
// end ;
19129: LD_VAR 0 3
19133: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
// result := false ;
19140: LD_ADDR_VAR 0 2
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// side := GetSide ( unit ) ;
19148: LD_ADDR_VAR 0 3
19152: PUSH
19153: LD_VAR 0 1
19157: PPUSH
19158: CALL_OW 255
19162: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19163: LD_ADDR_VAR 0 4
19167: PUSH
19168: LD_VAR 0 1
19172: PPUSH
19173: CALL_OW 248
19177: ST_TO_ADDR
// case nat of 1 :
19178: LD_VAR 0 4
19182: PUSH
19183: LD_INT 1
19185: DOUBLE
19186: EQUAL
19187: IFTRUE 19191
19189: GO 19202
19191: POP
// tech := tech_lassight ; 2 :
19192: LD_ADDR_VAR 0 5
19196: PUSH
19197: LD_INT 12
19199: ST_TO_ADDR
19200: GO 19241
19202: LD_INT 2
19204: DOUBLE
19205: EQUAL
19206: IFTRUE 19210
19208: GO 19221
19210: POP
// tech := tech_mortar ; 3 :
19211: LD_ADDR_VAR 0 5
19215: PUSH
19216: LD_INT 41
19218: ST_TO_ADDR
19219: GO 19241
19221: LD_INT 3
19223: DOUBLE
19224: EQUAL
19225: IFTRUE 19229
19227: GO 19240
19229: POP
// tech := tech_bazooka ; end ;
19230: LD_ADDR_VAR 0 5
19234: PUSH
19235: LD_INT 44
19237: ST_TO_ADDR
19238: GO 19241
19240: POP
// if Researched ( side , tech ) then
19241: LD_VAR 0 3
19245: PPUSH
19246: LD_VAR 0 5
19250: PPUSH
19251: CALL_OW 325
19255: IFFALSE 19282
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: LD_INT 5
19264: PUSH
19265: LD_INT 8
19267: PUSH
19268: LD_INT 9
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: LD_VAR 0 4
19280: ARRAY
19281: ST_TO_ADDR
// end ;
19282: LD_VAR 0 2
19286: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19287: LD_INT 0
19289: PPUSH
19290: PPUSH
19291: PPUSH
// if not mines then
19292: LD_VAR 0 2
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19445
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_INT 81
19308: PUSH
19309: LD_VAR 0 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 3
19320: PUSH
19321: LD_INT 21
19323: PUSH
19324: LD_INT 3
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PPUSH
19339: CALL_OW 69
19343: ST_TO_ADDR
// for i in mines do
19344: LD_ADDR_VAR 0 4
19348: PUSH
19349: LD_VAR 0 2
19353: PUSH
19354: FOR_IN
19355: IFFALSE 19443
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19357: LD_VAR 0 4
19361: PUSH
19362: LD_INT 1
19364: ARRAY
19365: PPUSH
19366: LD_VAR 0 4
19370: PUSH
19371: LD_INT 2
19373: ARRAY
19374: PPUSH
19375: CALL_OW 458
19379: NOT
19380: IFFALSE 19384
// continue ;
19382: GO 19354
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19384: LD_VAR 0 4
19388: PUSH
19389: LD_INT 1
19391: ARRAY
19392: PPUSH
19393: LD_VAR 0 4
19397: PUSH
19398: LD_INT 2
19400: ARRAY
19401: PPUSH
19402: CALL_OW 428
19406: PUSH
19407: LD_VAR 0 5
19411: IN
19412: IFFALSE 19441
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19414: LD_VAR 0 4
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: PPUSH
19423: LD_VAR 0 4
19427: PUSH
19428: LD_INT 2
19430: ARRAY
19431: PPUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 456
// end ;
19441: GO 19354
19443: POP
19444: POP
// end ;
19445: LD_VAR 0 3
19449: RET
// export function Count ( array ) ; begin
19450: LD_INT 0
19452: PPUSH
// result := array + 0 ;
19453: LD_ADDR_VAR 0 2
19457: PUSH
19458: LD_VAR 0 1
19462: PUSH
19463: LD_INT 0
19465: PLUS
19466: ST_TO_ADDR
// end ;
19467: LD_VAR 0 2
19471: RET
// export function IsEmpty ( building ) ; begin
19472: LD_INT 0
19474: PPUSH
// if not building then
19475: LD_VAR 0 1
19479: NOT
19480: IFFALSE 19484
// exit ;
19482: GO 19527
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19484: LD_ADDR_VAR 0 2
19488: PUSH
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 22
19496: PUSH
19497: LD_VAR 0 1
19501: PPUSH
19502: CALL_OW 255
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 58
19513: PUSH
19514: EMPTY
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: IN
19526: ST_TO_ADDR
// end ;
19527: LD_VAR 0 2
19531: RET
// export function IsNotFull ( building ) ; var places ; begin
19532: LD_INT 0
19534: PPUSH
19535: PPUSH
// if not building then
19536: LD_VAR 0 1
19540: NOT
19541: IFFALSE 19545
// exit ;
19543: GO 19573
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_VAR 0 1
19554: PPUSH
19555: LD_INT 3
19557: PUSH
19558: LD_INT 62
19560: PUSH
19561: EMPTY
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 72
19572: ST_TO_ADDR
// end ;
19573: LD_VAR 0 2
19577: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19578: LD_INT 0
19580: PPUSH
19581: PPUSH
19582: PPUSH
19583: PPUSH
// tmp := [ ] ;
19584: LD_ADDR_VAR 0 3
19588: PUSH
19589: EMPTY
19590: ST_TO_ADDR
// list := [ ] ;
19591: LD_ADDR_VAR 0 5
19595: PUSH
19596: EMPTY
19597: ST_TO_ADDR
// for i = 16 to 25 do
19598: LD_ADDR_VAR 0 4
19602: PUSH
19603: DOUBLE
19604: LD_INT 16
19606: DEC
19607: ST_TO_ADDR
19608: LD_INT 25
19610: PUSH
19611: FOR_TO
19612: IFFALSE 19685
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19614: LD_ADDR_VAR 0 3
19618: PUSH
19619: LD_VAR 0 3
19623: PUSH
19624: LD_INT 22
19626: PUSH
19627: LD_VAR 0 1
19631: PPUSH
19632: CALL_OW 255
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 91
19643: PUSH
19644: LD_VAR 0 1
19648: PUSH
19649: LD_INT 6
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 30
19659: PUSH
19660: LD_VAR 0 4
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: PUSH
19674: EMPTY
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: ADD
19682: ST_TO_ADDR
19683: GO 19611
19685: POP
19686: POP
// for i = 1 to tmp do
19687: LD_ADDR_VAR 0 4
19691: PUSH
19692: DOUBLE
19693: LD_INT 1
19695: DEC
19696: ST_TO_ADDR
19697: LD_VAR 0 3
19701: PUSH
19702: FOR_TO
19703: IFFALSE 19791
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19705: LD_ADDR_VAR 0 5
19709: PUSH
19710: LD_VAR 0 5
19714: PUSH
19715: LD_VAR 0 3
19719: PUSH
19720: LD_VAR 0 4
19724: ARRAY
19725: PPUSH
19726: CALL_OW 266
19730: PUSH
19731: LD_VAR 0 3
19735: PUSH
19736: LD_VAR 0 4
19740: ARRAY
19741: PPUSH
19742: CALL_OW 250
19746: PUSH
19747: LD_VAR 0 3
19751: PUSH
19752: LD_VAR 0 4
19756: ARRAY
19757: PPUSH
19758: CALL_OW 251
19762: PUSH
19763: LD_VAR 0 3
19767: PUSH
19768: LD_VAR 0 4
19772: ARRAY
19773: PPUSH
19774: CALL_OW 254
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: EMPTY
19786: LIST
19787: ADD
19788: ST_TO_ADDR
19789: GO 19702
19791: POP
19792: POP
// result := list ;
19793: LD_ADDR_VAR 0 2
19797: PUSH
19798: LD_VAR 0 5
19802: ST_TO_ADDR
// end ;
19803: LD_VAR 0 2
19807: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19808: LD_INT 0
19810: PPUSH
19811: PPUSH
19812: PPUSH
19813: PPUSH
19814: PPUSH
19815: PPUSH
19816: PPUSH
// if not factory then
19817: LD_VAR 0 1
19821: NOT
19822: IFFALSE 19826
// exit ;
19824: GO 20419
// if control = control_apeman then
19826: LD_VAR 0 4
19830: PUSH
19831: LD_INT 5
19833: EQUAL
19834: IFFALSE 19943
// begin tmp := UnitsInside ( factory ) ;
19836: LD_ADDR_VAR 0 8
19840: PUSH
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL_OW 313
19850: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19851: LD_VAR 0 8
19855: PPUSH
19856: LD_INT 25
19858: PUSH
19859: LD_INT 12
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 72
19870: NOT
19871: IFFALSE 19881
// control := control_manual ;
19873: LD_ADDR_VAR 0 4
19877: PUSH
19878: LD_INT 1
19880: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19881: LD_ADDR_VAR 0 8
19885: PUSH
19886: LD_VAR 0 1
19890: PPUSH
19891: CALL 19578 0 1
19895: ST_TO_ADDR
// if tmp then
19896: LD_VAR 0 8
19900: IFFALSE 19943
// begin for i in tmp do
19902: LD_ADDR_VAR 0 7
19906: PUSH
19907: LD_VAR 0 8
19911: PUSH
19912: FOR_IN
19913: IFFALSE 19941
// if i [ 1 ] = b_ext_radio then
19915: LD_VAR 0 7
19919: PUSH
19920: LD_INT 1
19922: ARRAY
19923: PUSH
19924: LD_INT 22
19926: EQUAL
19927: IFFALSE 19939
// begin control := control_remote ;
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: LD_INT 2
19936: ST_TO_ADDR
// break ;
19937: GO 19941
// end ;
19939: GO 19912
19941: POP
19942: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19943: LD_VAR 0 1
19947: PPUSH
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_VAR 0 3
19957: PPUSH
19958: LD_VAR 0 4
19962: PPUSH
19963: LD_VAR 0 5
19967: PPUSH
19968: CALL_OW 448
19972: IFFALSE 20007
// begin result := [ chassis , engine , control , weapon ] ;
19974: LD_ADDR_VAR 0 6
19978: PUSH
19979: LD_VAR 0 2
19983: PUSH
19984: LD_VAR 0 3
19988: PUSH
19989: LD_VAR 0 4
19993: PUSH
19994: LD_VAR 0 5
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: ST_TO_ADDR
// exit ;
20005: GO 20419
// end ; _chassis := AvailableChassisList ( factory ) ;
20007: LD_ADDR_VAR 0 9
20011: PUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 475
20021: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20022: LD_ADDR_VAR 0 11
20026: PUSH
20027: LD_VAR 0 1
20031: PPUSH
20032: CALL_OW 476
20036: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20037: LD_ADDR_VAR 0 12
20041: PUSH
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 477
20051: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20052: LD_ADDR_VAR 0 10
20056: PUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 478
20066: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20067: LD_VAR 0 9
20071: NOT
20072: PUSH
20073: LD_VAR 0 11
20077: NOT
20078: OR
20079: PUSH
20080: LD_VAR 0 12
20084: NOT
20085: OR
20086: PUSH
20087: LD_VAR 0 10
20091: NOT
20092: OR
20093: IFFALSE 20128
// begin result := [ chassis , engine , control , weapon ] ;
20095: LD_ADDR_VAR 0 6
20099: PUSH
20100: LD_VAR 0 2
20104: PUSH
20105: LD_VAR 0 3
20109: PUSH
20110: LD_VAR 0 4
20114: PUSH
20115: LD_VAR 0 5
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: ST_TO_ADDR
// exit ;
20126: GO 20419
// end ; if not chassis in _chassis then
20128: LD_VAR 0 2
20132: PUSH
20133: LD_VAR 0 9
20137: IN
20138: NOT
20139: IFFALSE 20165
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_VAR 0 9
20150: PUSH
20151: LD_INT 1
20153: PPUSH
20154: LD_VAR 0 9
20158: PPUSH
20159: CALL_OW 12
20163: ARRAY
20164: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20165: LD_VAR 0 2
20169: PPUSH
20170: LD_VAR 0 3
20174: PPUSH
20175: CALL 20424 0 2
20179: NOT
20180: IFFALSE 20239
// repeat engine := _engine [ 1 ] ;
20182: LD_ADDR_VAR 0 3
20186: PUSH
20187: LD_VAR 0 11
20191: PUSH
20192: LD_INT 1
20194: ARRAY
20195: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20196: LD_ADDR_VAR 0 11
20200: PUSH
20201: LD_VAR 0 11
20205: PPUSH
20206: LD_INT 1
20208: PPUSH
20209: CALL_OW 3
20213: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20214: LD_VAR 0 2
20218: PPUSH
20219: LD_VAR 0 3
20223: PPUSH
20224: CALL 20424 0 2
20228: PUSH
20229: LD_VAR 0 11
20233: PUSH
20234: EMPTY
20235: EQUAL
20236: OR
20237: IFFALSE 20182
// if not control in _control then
20239: LD_VAR 0 4
20243: PUSH
20244: LD_VAR 0 12
20248: IN
20249: NOT
20250: IFFALSE 20276
// control := _control [ rand ( 1 , _control ) ] ;
20252: LD_ADDR_VAR 0 4
20256: PUSH
20257: LD_VAR 0 12
20261: PUSH
20262: LD_INT 1
20264: PPUSH
20265: LD_VAR 0 12
20269: PPUSH
20270: CALL_OW 12
20274: ARRAY
20275: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20276: LD_VAR 0 2
20280: PPUSH
20281: LD_VAR 0 5
20285: PPUSH
20286: CALL 20644 0 2
20290: NOT
20291: IFFALSE 20350
// repeat weapon := _weapon [ 1 ] ;
20293: LD_ADDR_VAR 0 5
20297: PUSH
20298: LD_VAR 0 10
20302: PUSH
20303: LD_INT 1
20305: ARRAY
20306: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20307: LD_ADDR_VAR 0 10
20311: PUSH
20312: LD_VAR 0 10
20316: PPUSH
20317: LD_INT 1
20319: PPUSH
20320: CALL_OW 3
20324: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_VAR 0 5
20334: PPUSH
20335: CALL 20644 0 2
20339: PUSH
20340: LD_VAR 0 10
20344: PUSH
20345: EMPTY
20346: EQUAL
20347: OR
20348: IFFALSE 20293
// result := [ ] ;
20350: LD_ADDR_VAR 0 6
20354: PUSH
20355: EMPTY
20356: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_VAR 0 2
20366: PPUSH
20367: LD_VAR 0 3
20371: PPUSH
20372: LD_VAR 0 4
20376: PPUSH
20377: LD_VAR 0 5
20381: PPUSH
20382: CALL_OW 448
20386: IFFALSE 20419
// result := [ chassis , engine , control , weapon ] ;
20388: LD_ADDR_VAR 0 6
20392: PUSH
20393: LD_VAR 0 2
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: LD_VAR 0 4
20407: PUSH
20408: LD_VAR 0 5
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: ST_TO_ADDR
// end ;
20419: LD_VAR 0 6
20423: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20424: LD_INT 0
20426: PPUSH
// if not chassis or not engine then
20427: LD_VAR 0 1
20431: NOT
20432: PUSH
20433: LD_VAR 0 2
20437: NOT
20438: OR
20439: IFFALSE 20443
// exit ;
20441: GO 20639
// case engine of engine_solar :
20443: LD_VAR 0 2
20447: PUSH
20448: LD_INT 2
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 20494
20456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20457: LD_ADDR_VAR 0 3
20461: PUSH
20462: LD_INT 11
20464: PUSH
20465: LD_INT 12
20467: PUSH
20468: LD_INT 13
20470: PUSH
20471: LD_INT 14
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: ST_TO_ADDR
20492: GO 20623
20494: LD_INT 1
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20564
20502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20503: LD_ADDR_VAR 0 3
20507: PUSH
20508: LD_INT 11
20510: PUSH
20511: LD_INT 12
20513: PUSH
20514: LD_INT 13
20516: PUSH
20517: LD_INT 14
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 4
20531: PUSH
20532: LD_INT 5
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 23
20540: PUSH
20541: LD_INT 22
20543: PUSH
20544: LD_INT 24
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
20562: GO 20623
20564: LD_INT 3
20566: DOUBLE
20567: EQUAL
20568: IFTRUE 20572
20570: GO 20622
20572: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20573: LD_ADDR_VAR 0 3
20577: PUSH
20578: LD_INT 13
20580: PUSH
20581: LD_INT 14
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 3
20589: PUSH
20590: LD_INT 4
20592: PUSH
20593: LD_INT 5
20595: PUSH
20596: LD_INT 21
20598: PUSH
20599: LD_INT 22
20601: PUSH
20602: LD_INT 23
20604: PUSH
20605: LD_INT 24
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: ST_TO_ADDR
20620: GO 20623
20622: POP
// result := ( chassis in result ) ;
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_VAR 0 1
20632: PUSH
20633: LD_VAR 0 3
20637: IN
20638: ST_TO_ADDR
// end ;
20639: LD_VAR 0 3
20643: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20644: LD_INT 0
20646: PPUSH
// if not chassis or not weapon then
20647: LD_VAR 0 1
20651: NOT
20652: PUSH
20653: LD_VAR 0 2
20657: NOT
20658: OR
20659: IFFALSE 20663
// exit ;
20661: GO 21723
// case weapon of us_machine_gun :
20663: LD_VAR 0 2
20667: PUSH
20668: LD_INT 2
20670: DOUBLE
20671: EQUAL
20672: IFTRUE 20676
20674: GO 20706
20676: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: LD_INT 3
20690: PUSH
20691: LD_INT 4
20693: PUSH
20694: LD_INT 5
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
20704: GO 21707
20706: LD_INT 3
20708: DOUBLE
20709: EQUAL
20710: IFTRUE 20714
20712: GO 20744
20714: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20715: LD_ADDR_VAR 0 3
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: LD_INT 3
20728: PUSH
20729: LD_INT 4
20731: PUSH
20732: LD_INT 5
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: ST_TO_ADDR
20742: GO 21707
20744: LD_INT 11
20746: DOUBLE
20747: EQUAL
20748: IFTRUE 20752
20750: GO 20782
20752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20753: LD_ADDR_VAR 0 3
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: ST_TO_ADDR
20780: GO 21707
20782: LD_INT 4
20784: DOUBLE
20785: EQUAL
20786: IFTRUE 20790
20788: GO 20816
20790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20791: LD_ADDR_VAR 0 3
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: LD_INT 3
20801: PUSH
20802: LD_INT 4
20804: PUSH
20805: LD_INT 5
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 21707
20816: LD_INT 5
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20850
20824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20825: LD_ADDR_VAR 0 3
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: LD_INT 4
20838: PUSH
20839: LD_INT 5
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: ST_TO_ADDR
20848: GO 21707
20850: LD_INT 9
20852: DOUBLE
20853: EQUAL
20854: IFTRUE 20858
20856: GO 20884
20858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20859: LD_ADDR_VAR 0 3
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 3
20869: PUSH
20870: LD_INT 4
20872: PUSH
20873: LD_INT 5
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: ST_TO_ADDR
20882: GO 21707
20884: LD_INT 7
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20918
20892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20893: LD_ADDR_VAR 0 3
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 3
20903: PUSH
20904: LD_INT 4
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: ST_TO_ADDR
20916: GO 21707
20918: LD_INT 12
20920: DOUBLE
20921: EQUAL
20922: IFTRUE 20926
20924: GO 20952
20926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: LD_INT 3
20937: PUSH
20938: LD_INT 4
20940: PUSH
20941: LD_INT 5
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: ST_TO_ADDR
20950: GO 21707
20952: LD_INT 13
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20986
20960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: LD_INT 4
20974: PUSH
20975: LD_INT 5
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: ST_TO_ADDR
20984: GO 21707
20986: LD_INT 14
20988: DOUBLE
20989: EQUAL
20990: IFTRUE 20994
20992: GO 21012
20994: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20995: LD_ADDR_VAR 0 3
20999: PUSH
21000: LD_INT 4
21002: PUSH
21003: LD_INT 5
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: ST_TO_ADDR
21010: GO 21707
21012: LD_INT 6
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21038
21020: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21021: LD_ADDR_VAR 0 3
21025: PUSH
21026: LD_INT 4
21028: PUSH
21029: LD_INT 5
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: ST_TO_ADDR
21036: GO 21707
21038: LD_INT 10
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21064
21046: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21047: LD_ADDR_VAR 0 3
21051: PUSH
21052: LD_INT 4
21054: PUSH
21055: LD_INT 5
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: ST_TO_ADDR
21062: GO 21707
21064: LD_INT 22
21066: DOUBLE
21067: EQUAL
21068: IFTRUE 21072
21070: GO 21098
21072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 11
21080: PUSH
21081: LD_INT 12
21083: PUSH
21084: LD_INT 13
21086: PUSH
21087: LD_INT 14
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: ST_TO_ADDR
21096: GO 21707
21098: LD_INT 23
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21132
21106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21107: LD_ADDR_VAR 0 3
21111: PUSH
21112: LD_INT 11
21114: PUSH
21115: LD_INT 12
21117: PUSH
21118: LD_INT 13
21120: PUSH
21121: LD_INT 14
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: ST_TO_ADDR
21130: GO 21707
21132: LD_INT 24
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21166
21140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21141: LD_ADDR_VAR 0 3
21145: PUSH
21146: LD_INT 11
21148: PUSH
21149: LD_INT 12
21151: PUSH
21152: LD_INT 13
21154: PUSH
21155: LD_INT 14
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: ST_TO_ADDR
21164: GO 21707
21166: LD_INT 30
21168: DOUBLE
21169: EQUAL
21170: IFTRUE 21174
21172: GO 21200
21174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21175: LD_ADDR_VAR 0 3
21179: PUSH
21180: LD_INT 11
21182: PUSH
21183: LD_INT 12
21185: PUSH
21186: LD_INT 13
21188: PUSH
21189: LD_INT 14
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: ST_TO_ADDR
21198: GO 21707
21200: LD_INT 25
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21226
21208: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21209: LD_ADDR_VAR 0 3
21213: PUSH
21214: LD_INT 13
21216: PUSH
21217: LD_INT 14
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: ST_TO_ADDR
21224: GO 21707
21226: LD_INT 27
21228: DOUBLE
21229: EQUAL
21230: IFTRUE 21234
21232: GO 21252
21234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21235: LD_ADDR_VAR 0 3
21239: PUSH
21240: LD_INT 13
21242: PUSH
21243: LD_INT 14
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: ST_TO_ADDR
21250: GO 21707
21252: LD_INT 92
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21286
21260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21261: LD_ADDR_VAR 0 3
21265: PUSH
21266: LD_INT 11
21268: PUSH
21269: LD_INT 12
21271: PUSH
21272: LD_INT 13
21274: PUSH
21275: LD_INT 14
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: ST_TO_ADDR
21284: GO 21707
21286: LD_INT 28
21288: DOUBLE
21289: EQUAL
21290: IFTRUE 21294
21292: GO 21312
21294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21295: LD_ADDR_VAR 0 3
21299: PUSH
21300: LD_INT 13
21302: PUSH
21303: LD_INT 14
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 21707
21312: LD_INT 29
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21338
21320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21321: LD_ADDR_VAR 0 3
21325: PUSH
21326: LD_INT 13
21328: PUSH
21329: LD_INT 14
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: ST_TO_ADDR
21336: GO 21707
21338: LD_INT 31
21340: DOUBLE
21341: EQUAL
21342: IFTRUE 21346
21344: GO 21364
21346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21347: LD_ADDR_VAR 0 3
21351: PUSH
21352: LD_INT 13
21354: PUSH
21355: LD_INT 14
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: ST_TO_ADDR
21362: GO 21707
21364: LD_INT 26
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21390
21372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21373: LD_ADDR_VAR 0 3
21377: PUSH
21378: LD_INT 13
21380: PUSH
21381: LD_INT 14
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: ST_TO_ADDR
21388: GO 21707
21390: LD_INT 42
21392: DOUBLE
21393: EQUAL
21394: IFTRUE 21398
21396: GO 21424
21398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21399: LD_ADDR_VAR 0 3
21403: PUSH
21404: LD_INT 21
21406: PUSH
21407: LD_INT 22
21409: PUSH
21410: LD_INT 23
21412: PUSH
21413: LD_INT 24
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: ST_TO_ADDR
21422: GO 21707
21424: LD_INT 43
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21458
21432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21433: LD_ADDR_VAR 0 3
21437: PUSH
21438: LD_INT 21
21440: PUSH
21441: LD_INT 22
21443: PUSH
21444: LD_INT 23
21446: PUSH
21447: LD_INT 24
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: ST_TO_ADDR
21456: GO 21707
21458: LD_INT 44
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21492
21466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21467: LD_ADDR_VAR 0 3
21471: PUSH
21472: LD_INT 21
21474: PUSH
21475: LD_INT 22
21477: PUSH
21478: LD_INT 23
21480: PUSH
21481: LD_INT 24
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: ST_TO_ADDR
21490: GO 21707
21492: LD_INT 45
21494: DOUBLE
21495: EQUAL
21496: IFTRUE 21500
21498: GO 21526
21500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21501: LD_ADDR_VAR 0 3
21505: PUSH
21506: LD_INT 21
21508: PUSH
21509: LD_INT 22
21511: PUSH
21512: LD_INT 23
21514: PUSH
21515: LD_INT 24
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: ST_TO_ADDR
21524: GO 21707
21526: LD_INT 49
21528: DOUBLE
21529: EQUAL
21530: IFTRUE 21534
21532: GO 21560
21534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21535: LD_ADDR_VAR 0 3
21539: PUSH
21540: LD_INT 21
21542: PUSH
21543: LD_INT 22
21545: PUSH
21546: LD_INT 23
21548: PUSH
21549: LD_INT 24
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: ST_TO_ADDR
21558: GO 21707
21560: LD_INT 51
21562: DOUBLE
21563: EQUAL
21564: IFTRUE 21568
21566: GO 21594
21568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: LD_INT 21
21576: PUSH
21577: LD_INT 22
21579: PUSH
21580: LD_INT 23
21582: PUSH
21583: LD_INT 24
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: ST_TO_ADDR
21592: GO 21707
21594: LD_INT 52
21596: DOUBLE
21597: EQUAL
21598: IFTRUE 21602
21600: GO 21628
21602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21603: LD_ADDR_VAR 0 3
21607: PUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_INT 23
21616: PUSH
21617: LD_INT 24
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
21626: GO 21707
21628: LD_INT 53
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21654
21636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21637: LD_ADDR_VAR 0 3
21641: PUSH
21642: LD_INT 23
21644: PUSH
21645: LD_INT 24
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: ST_TO_ADDR
21652: GO 21707
21654: LD_INT 46
21656: DOUBLE
21657: EQUAL
21658: IFTRUE 21662
21660: GO 21680
21662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21663: LD_ADDR_VAR 0 3
21667: PUSH
21668: LD_INT 23
21670: PUSH
21671: LD_INT 24
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: ST_TO_ADDR
21678: GO 21707
21680: LD_INT 47
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21706
21688: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21689: LD_ADDR_VAR 0 3
21693: PUSH
21694: LD_INT 23
21696: PUSH
21697: LD_INT 24
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: ST_TO_ADDR
21704: GO 21707
21706: POP
// result := ( chassis in result ) ;
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_VAR 0 1
21716: PUSH
21717: LD_VAR 0 3
21721: IN
21722: ST_TO_ADDR
// end ;
21723: LD_VAR 0 3
21727: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21728: LD_INT 0
21730: PPUSH
21731: PPUSH
21732: PPUSH
21733: PPUSH
21734: PPUSH
21735: PPUSH
21736: PPUSH
// result := array ;
21737: LD_ADDR_VAR 0 5
21741: PUSH
21742: LD_VAR 0 1
21746: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21747: LD_VAR 0 1
21751: NOT
21752: PUSH
21753: LD_VAR 0 2
21757: NOT
21758: OR
21759: PUSH
21760: LD_VAR 0 3
21764: NOT
21765: OR
21766: PUSH
21767: LD_VAR 0 2
21771: PUSH
21772: LD_VAR 0 1
21776: GREATER
21777: OR
21778: PUSH
21779: LD_VAR 0 3
21783: PUSH
21784: LD_VAR 0 1
21788: GREATER
21789: OR
21790: IFFALSE 21794
// exit ;
21792: GO 22090
// if direction then
21794: LD_VAR 0 4
21798: IFFALSE 21862
// begin d := 1 ;
21800: LD_ADDR_VAR 0 9
21804: PUSH
21805: LD_INT 1
21807: ST_TO_ADDR
// if i_from > i_to then
21808: LD_VAR 0 2
21812: PUSH
21813: LD_VAR 0 3
21817: GREATER
21818: IFFALSE 21844
// length := ( array - i_from ) + i_to else
21820: LD_ADDR_VAR 0 11
21824: PUSH
21825: LD_VAR 0 1
21829: PUSH
21830: LD_VAR 0 2
21834: MINUS
21835: PUSH
21836: LD_VAR 0 3
21840: PLUS
21841: ST_TO_ADDR
21842: GO 21860
// length := i_to - i_from ;
21844: LD_ADDR_VAR 0 11
21848: PUSH
21849: LD_VAR 0 3
21853: PUSH
21854: LD_VAR 0 2
21858: MINUS
21859: ST_TO_ADDR
// end else
21860: GO 21923
// begin d := - 1 ;
21862: LD_ADDR_VAR 0 9
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: ST_TO_ADDR
// if i_from > i_to then
21871: LD_VAR 0 2
21875: PUSH
21876: LD_VAR 0 3
21880: GREATER
21881: IFFALSE 21901
// length := i_from - i_to else
21883: LD_ADDR_VAR 0 11
21887: PUSH
21888: LD_VAR 0 2
21892: PUSH
21893: LD_VAR 0 3
21897: MINUS
21898: ST_TO_ADDR
21899: GO 21923
// length := ( array - i_to ) + i_from ;
21901: LD_ADDR_VAR 0 11
21905: PUSH
21906: LD_VAR 0 1
21910: PUSH
21911: LD_VAR 0 3
21915: MINUS
21916: PUSH
21917: LD_VAR 0 2
21921: PLUS
21922: ST_TO_ADDR
// end ; if not length then
21923: LD_VAR 0 11
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 22090
// tmp := array ;
21932: LD_ADDR_VAR 0 10
21936: PUSH
21937: LD_VAR 0 1
21941: ST_TO_ADDR
// for i = 1 to length do
21942: LD_ADDR_VAR 0 6
21946: PUSH
21947: DOUBLE
21948: LD_INT 1
21950: DEC
21951: ST_TO_ADDR
21952: LD_VAR 0 11
21956: PUSH
21957: FOR_TO
21958: IFFALSE 22078
// begin for j = 1 to array do
21960: LD_ADDR_VAR 0 7
21964: PUSH
21965: DOUBLE
21966: LD_INT 1
21968: DEC
21969: ST_TO_ADDR
21970: LD_VAR 0 1
21974: PUSH
21975: FOR_TO
21976: IFFALSE 22064
// begin k := j + d ;
21978: LD_ADDR_VAR 0 8
21982: PUSH
21983: LD_VAR 0 7
21987: PUSH
21988: LD_VAR 0 9
21992: PLUS
21993: ST_TO_ADDR
// if k > array then
21994: LD_VAR 0 8
21998: PUSH
21999: LD_VAR 0 1
22003: GREATER
22004: IFFALSE 22014
// k := 1 ;
22006: LD_ADDR_VAR 0 8
22010: PUSH
22011: LD_INT 1
22013: ST_TO_ADDR
// if not k then
22014: LD_VAR 0 8
22018: NOT
22019: IFFALSE 22031
// k := array ;
22021: LD_ADDR_VAR 0 8
22025: PUSH
22026: LD_VAR 0 1
22030: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22031: LD_ADDR_VAR 0 10
22035: PUSH
22036: LD_VAR 0 10
22040: PPUSH
22041: LD_VAR 0 8
22045: PPUSH
22046: LD_VAR 0 1
22050: PUSH
22051: LD_VAR 0 7
22055: ARRAY
22056: PPUSH
22057: CALL_OW 1
22061: ST_TO_ADDR
// end ;
22062: GO 21975
22064: POP
22065: POP
// array := tmp ;
22066: LD_ADDR_VAR 0 1
22070: PUSH
22071: LD_VAR 0 10
22075: ST_TO_ADDR
// end ;
22076: GO 21957
22078: POP
22079: POP
// result := array ;
22080: LD_ADDR_VAR 0 5
22084: PUSH
22085: LD_VAR 0 1
22089: ST_TO_ADDR
// end ;
22090: LD_VAR 0 5
22094: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22095: LD_INT 0
22097: PPUSH
22098: PPUSH
// result := 0 ;
22099: LD_ADDR_VAR 0 3
22103: PUSH
22104: LD_INT 0
22106: ST_TO_ADDR
// if not array or not value in array then
22107: LD_VAR 0 1
22111: NOT
22112: PUSH
22113: LD_VAR 0 2
22117: PUSH
22118: LD_VAR 0 1
22122: IN
22123: NOT
22124: OR
22125: IFFALSE 22129
// exit ;
22127: GO 22183
// for i = 1 to array do
22129: LD_ADDR_VAR 0 4
22133: PUSH
22134: DOUBLE
22135: LD_INT 1
22137: DEC
22138: ST_TO_ADDR
22139: LD_VAR 0 1
22143: PUSH
22144: FOR_TO
22145: IFFALSE 22181
// if value = array [ i ] then
22147: LD_VAR 0 2
22151: PUSH
22152: LD_VAR 0 1
22156: PUSH
22157: LD_VAR 0 4
22161: ARRAY
22162: EQUAL
22163: IFFALSE 22179
// begin result := i ;
22165: LD_ADDR_VAR 0 3
22169: PUSH
22170: LD_VAR 0 4
22174: ST_TO_ADDR
// exit ;
22175: POP
22176: POP
22177: GO 22183
// end ;
22179: GO 22144
22181: POP
22182: POP
// end ;
22183: LD_VAR 0 3
22187: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22188: LD_INT 0
22190: PPUSH
// vc_chassis := chassis ;
22191: LD_ADDR_OWVAR 37
22195: PUSH
22196: LD_VAR 0 1
22200: ST_TO_ADDR
// vc_engine := engine ;
22201: LD_ADDR_OWVAR 39
22205: PUSH
22206: LD_VAR 0 2
22210: ST_TO_ADDR
// vc_control := control ;
22211: LD_ADDR_OWVAR 38
22215: PUSH
22216: LD_VAR 0 3
22220: ST_TO_ADDR
// vc_weapon := weapon ;
22221: LD_ADDR_OWVAR 40
22225: PUSH
22226: LD_VAR 0 4
22230: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22231: LD_ADDR_OWVAR 41
22235: PUSH
22236: LD_VAR 0 5
22240: ST_TO_ADDR
// end ;
22241: LD_VAR 0 6
22245: RET
// export function WantPlant ( unit ) ; var task ; begin
22246: LD_INT 0
22248: PPUSH
22249: PPUSH
// result := false ;
22250: LD_ADDR_VAR 0 2
22254: PUSH
22255: LD_INT 0
22257: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22258: LD_ADDR_VAR 0 3
22262: PUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: CALL_OW 437
22272: ST_TO_ADDR
// if task then
22273: LD_VAR 0 3
22277: IFFALSE 22305
// if task [ 1 ] [ 1 ] = p then
22279: LD_VAR 0 3
22283: PUSH
22284: LD_INT 1
22286: ARRAY
22287: PUSH
22288: LD_INT 1
22290: ARRAY
22291: PUSH
22292: LD_STRING p
22294: EQUAL
22295: IFFALSE 22305
// result := true ;
22297: LD_ADDR_VAR 0 2
22301: PUSH
22302: LD_INT 1
22304: ST_TO_ADDR
// end ;
22305: LD_VAR 0 2
22309: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22310: LD_INT 0
22312: PPUSH
22313: PPUSH
22314: PPUSH
22315: PPUSH
// if pos < 1 then
22316: LD_VAR 0 2
22320: PUSH
22321: LD_INT 1
22323: LESS
22324: IFFALSE 22328
// exit ;
22326: GO 22631
// if pos = 1 then
22328: LD_VAR 0 2
22332: PUSH
22333: LD_INT 1
22335: EQUAL
22336: IFFALSE 22369
// result := Replace ( arr , pos [ 1 ] , value ) else
22338: LD_ADDR_VAR 0 4
22342: PUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_VAR 0 2
22352: PUSH
22353: LD_INT 1
22355: ARRAY
22356: PPUSH
22357: LD_VAR 0 3
22361: PPUSH
22362: CALL_OW 1
22366: ST_TO_ADDR
22367: GO 22631
// begin tmp := arr ;
22369: LD_ADDR_VAR 0 6
22373: PUSH
22374: LD_VAR 0 1
22378: ST_TO_ADDR
// s_arr := [ tmp ] ;
22379: LD_ADDR_VAR 0 7
22383: PUSH
22384: LD_VAR 0 6
22388: PUSH
22389: EMPTY
22390: LIST
22391: ST_TO_ADDR
// for i = 1 to pos - 1 do
22392: LD_ADDR_VAR 0 5
22396: PUSH
22397: DOUBLE
22398: LD_INT 1
22400: DEC
22401: ST_TO_ADDR
22402: LD_VAR 0 2
22406: PUSH
22407: LD_INT 1
22409: MINUS
22410: PUSH
22411: FOR_TO
22412: IFFALSE 22457
// begin tmp := tmp [ pos [ i ] ] ;
22414: LD_ADDR_VAR 0 6
22418: PUSH
22419: LD_VAR 0 6
22423: PUSH
22424: LD_VAR 0 2
22428: PUSH
22429: LD_VAR 0 5
22433: ARRAY
22434: ARRAY
22435: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22436: LD_ADDR_VAR 0 7
22440: PUSH
22441: LD_VAR 0 7
22445: PUSH
22446: LD_VAR 0 6
22450: PUSH
22451: EMPTY
22452: LIST
22453: ADD
22454: ST_TO_ADDR
// end ;
22455: GO 22411
22457: POP
22458: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22459: LD_ADDR_VAR 0 6
22463: PUSH
22464: LD_VAR 0 6
22468: PPUSH
22469: LD_VAR 0 2
22473: PUSH
22474: LD_VAR 0 2
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: CALL_OW 1
22489: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22490: LD_ADDR_VAR 0 7
22494: PUSH
22495: LD_VAR 0 7
22499: PPUSH
22500: LD_VAR 0 7
22504: PPUSH
22505: LD_VAR 0 6
22509: PPUSH
22510: CALL_OW 1
22514: ST_TO_ADDR
// for i = s_arr downto 2 do
22515: LD_ADDR_VAR 0 5
22519: PUSH
22520: DOUBLE
22521: LD_VAR 0 7
22525: INC
22526: ST_TO_ADDR
22527: LD_INT 2
22529: PUSH
22530: FOR_DOWNTO
22531: IFFALSE 22615
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22533: LD_ADDR_VAR 0 6
22537: PUSH
22538: LD_VAR 0 7
22542: PUSH
22543: LD_VAR 0 5
22547: PUSH
22548: LD_INT 1
22550: MINUS
22551: ARRAY
22552: PPUSH
22553: LD_VAR 0 2
22557: PUSH
22558: LD_VAR 0 5
22562: PUSH
22563: LD_INT 1
22565: MINUS
22566: ARRAY
22567: PPUSH
22568: LD_VAR 0 7
22572: PUSH
22573: LD_VAR 0 5
22577: ARRAY
22578: PPUSH
22579: CALL_OW 1
22583: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22584: LD_ADDR_VAR 0 7
22588: PUSH
22589: LD_VAR 0 7
22593: PPUSH
22594: LD_VAR 0 5
22598: PUSH
22599: LD_INT 1
22601: MINUS
22602: PPUSH
22603: LD_VAR 0 6
22607: PPUSH
22608: CALL_OW 1
22612: ST_TO_ADDR
// end ;
22613: GO 22530
22615: POP
22616: POP
// result := s_arr [ 1 ] ;
22617: LD_ADDR_VAR 0 4
22621: PUSH
22622: LD_VAR 0 7
22626: PUSH
22627: LD_INT 1
22629: ARRAY
22630: ST_TO_ADDR
// end ; end ;
22631: LD_VAR 0 4
22635: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22636: LD_INT 0
22638: PPUSH
22639: PPUSH
// if not list then
22640: LD_VAR 0 1
22644: NOT
22645: IFFALSE 22649
// exit ;
22647: GO 22740
// i := list [ pos1 ] ;
22649: LD_ADDR_VAR 0 5
22653: PUSH
22654: LD_VAR 0 1
22658: PUSH
22659: LD_VAR 0 2
22663: ARRAY
22664: ST_TO_ADDR
// if not i then
22665: LD_VAR 0 5
22669: NOT
22670: IFFALSE 22674
// exit ;
22672: GO 22740
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22674: LD_ADDR_VAR 0 1
22678: PUSH
22679: LD_VAR 0 1
22683: PPUSH
22684: LD_VAR 0 2
22688: PPUSH
22689: LD_VAR 0 1
22693: PUSH
22694: LD_VAR 0 3
22698: ARRAY
22699: PPUSH
22700: CALL_OW 1
22704: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22705: LD_ADDR_VAR 0 1
22709: PUSH
22710: LD_VAR 0 1
22714: PPUSH
22715: LD_VAR 0 3
22719: PPUSH
22720: LD_VAR 0 5
22724: PPUSH
22725: CALL_OW 1
22729: ST_TO_ADDR
// result := list ;
22730: LD_ADDR_VAR 0 4
22734: PUSH
22735: LD_VAR 0 1
22739: ST_TO_ADDR
// end ;
22740: LD_VAR 0 4
22744: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22745: LD_INT 0
22747: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22748: LD_ADDR_VAR 0 5
22752: PUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 250
22762: PPUSH
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 251
22772: PPUSH
22773: LD_VAR 0 2
22777: PPUSH
22778: LD_VAR 0 3
22782: PPUSH
22783: LD_VAR 0 4
22787: PPUSH
22788: CALL 23166 0 5
22792: ST_TO_ADDR
// end ;
22793: LD_VAR 0 5
22797: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
22802: PPUSH
22803: PPUSH
// if not list or not unit then
22804: LD_VAR 0 2
22808: NOT
22809: PUSH
22810: LD_VAR 0 1
22814: NOT
22815: OR
22816: IFFALSE 22820
// exit ;
22818: GO 23161
// result := [ ] ;
22820: LD_ADDR_VAR 0 5
22824: PUSH
22825: EMPTY
22826: ST_TO_ADDR
// for i in list do
22827: LD_ADDR_VAR 0 6
22831: PUSH
22832: LD_VAR 0 2
22836: PUSH
22837: FOR_IN
22838: IFFALSE 23056
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22840: LD_ADDR_VAR 0 8
22844: PUSH
22845: LD_VAR 0 1
22849: PPUSH
22850: LD_VAR 0 6
22854: PUSH
22855: LD_INT 1
22857: ARRAY
22858: PPUSH
22859: LD_VAR 0 6
22863: PUSH
22864: LD_INT 2
22866: ARRAY
22867: PPUSH
22868: CALL_OW 297
22872: ST_TO_ADDR
// if not Count ( result ) then
22873: LD_VAR 0 5
22877: PPUSH
22878: CALL 19450 0 1
22882: NOT
22883: IFFALSE 22916
// begin result := Join ( result , [ i , tmp ] ) ;
22885: LD_ADDR_VAR 0 5
22889: PUSH
22890: LD_VAR 0 5
22894: PPUSH
22895: LD_VAR 0 6
22899: PUSH
22900: LD_VAR 0 8
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL 55131 0 2
22913: ST_TO_ADDR
// continue ;
22914: GO 22837
// end ; if result [ result ] [ 2 ] <= tmp then
22916: LD_VAR 0 5
22920: PUSH
22921: LD_VAR 0 5
22925: ARRAY
22926: PUSH
22927: LD_INT 2
22929: ARRAY
22930: PUSH
22931: LD_VAR 0 8
22935: LESSEQUAL
22936: IFFALSE 22969
// result := Join ( result , [ i , tmp ] ) else
22938: LD_ADDR_VAR 0 5
22942: PUSH
22943: LD_VAR 0 5
22947: PPUSH
22948: LD_VAR 0 6
22952: PUSH
22953: LD_VAR 0 8
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PPUSH
22962: CALL 55131 0 2
22966: ST_TO_ADDR
22967: GO 23054
// begin for j := 1 to Count ( result ) do
22969: LD_ADDR_VAR 0 7
22973: PUSH
22974: DOUBLE
22975: LD_INT 1
22977: DEC
22978: ST_TO_ADDR
22979: LD_VAR 0 5
22983: PPUSH
22984: CALL 19450 0 1
22988: PUSH
22989: FOR_TO
22990: IFFALSE 23052
// begin if tmp < result [ j ] [ 2 ] then
22992: LD_VAR 0 8
22996: PUSH
22997: LD_VAR 0 5
23001: PUSH
23002: LD_VAR 0 7
23006: ARRAY
23007: PUSH
23008: LD_INT 2
23010: ARRAY
23011: LESS
23012: IFFALSE 23050
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23014: LD_ADDR_VAR 0 5
23018: PUSH
23019: LD_VAR 0 5
23023: PPUSH
23024: LD_VAR 0 7
23028: PPUSH
23029: LD_VAR 0 6
23033: PUSH
23034: LD_VAR 0 8
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: CALL_OW 2
23047: ST_TO_ADDR
// break ;
23048: GO 23052
// end ; end ;
23050: GO 22989
23052: POP
23053: POP
// end ; end ;
23054: GO 22837
23056: POP
23057: POP
// if result and not asc then
23058: LD_VAR 0 5
23062: PUSH
23063: LD_VAR 0 3
23067: NOT
23068: AND
23069: IFFALSE 23086
// result := ReverseArray ( result ) ;
23071: LD_ADDR_VAR 0 5
23075: PUSH
23076: LD_VAR 0 5
23080: PPUSH
23081: CALL 50326 0 1
23085: ST_TO_ADDR
// tmp := [ ] ;
23086: LD_ADDR_VAR 0 8
23090: PUSH
23091: EMPTY
23092: ST_TO_ADDR
// if mode then
23093: LD_VAR 0 4
23097: IFFALSE 23161
// begin for i := 1 to result do
23099: LD_ADDR_VAR 0 6
23103: PUSH
23104: DOUBLE
23105: LD_INT 1
23107: DEC
23108: ST_TO_ADDR
23109: LD_VAR 0 5
23113: PUSH
23114: FOR_TO
23115: IFFALSE 23149
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23117: LD_ADDR_VAR 0 8
23121: PUSH
23122: LD_VAR 0 8
23126: PPUSH
23127: LD_VAR 0 5
23131: PUSH
23132: LD_VAR 0 6
23136: ARRAY
23137: PUSH
23138: LD_INT 1
23140: ARRAY
23141: PPUSH
23142: CALL 55131 0 2
23146: ST_TO_ADDR
23147: GO 23114
23149: POP
23150: POP
// result := tmp ;
23151: LD_ADDR_VAR 0 5
23155: PUSH
23156: LD_VAR 0 8
23160: ST_TO_ADDR
// end ; end ;
23161: LD_VAR 0 5
23165: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23166: LD_INT 0
23168: PPUSH
23169: PPUSH
23170: PPUSH
23171: PPUSH
// if not list then
23172: LD_VAR 0 3
23176: NOT
23177: IFFALSE 23181
// exit ;
23179: GO 23569
// result := [ ] ;
23181: LD_ADDR_VAR 0 6
23185: PUSH
23186: EMPTY
23187: ST_TO_ADDR
// for i in list do
23188: LD_ADDR_VAR 0 7
23192: PUSH
23193: LD_VAR 0 3
23197: PUSH
23198: FOR_IN
23199: IFFALSE 23401
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23201: LD_ADDR_VAR 0 9
23205: PUSH
23206: LD_VAR 0 7
23210: PPUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: LD_VAR 0 2
23220: PPUSH
23221: CALL_OW 297
23225: ST_TO_ADDR
// if not result then
23226: LD_VAR 0 6
23230: NOT
23231: IFFALSE 23257
// result := [ [ i , tmp ] ] else
23233: LD_ADDR_VAR 0 6
23237: PUSH
23238: LD_VAR 0 7
23242: PUSH
23243: LD_VAR 0 9
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: EMPTY
23253: LIST
23254: ST_TO_ADDR
23255: GO 23399
// begin if result [ result ] [ 2 ] <= tmp then
23257: LD_VAR 0 6
23261: PUSH
23262: LD_VAR 0 6
23266: ARRAY
23267: PUSH
23268: LD_INT 2
23270: ARRAY
23271: PUSH
23272: LD_VAR 0 9
23276: LESSEQUAL
23277: IFFALSE 23319
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23279: LD_ADDR_VAR 0 6
23283: PUSH
23284: LD_VAR 0 6
23288: PPUSH
23289: LD_VAR 0 6
23293: PUSH
23294: LD_INT 1
23296: PLUS
23297: PPUSH
23298: LD_VAR 0 7
23302: PUSH
23303: LD_VAR 0 9
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PPUSH
23312: CALL_OW 2
23316: ST_TO_ADDR
23317: GO 23399
// for j := 1 to result do
23319: LD_ADDR_VAR 0 8
23323: PUSH
23324: DOUBLE
23325: LD_INT 1
23327: DEC
23328: ST_TO_ADDR
23329: LD_VAR 0 6
23333: PUSH
23334: FOR_TO
23335: IFFALSE 23397
// begin if tmp < result [ j ] [ 2 ] then
23337: LD_VAR 0 9
23341: PUSH
23342: LD_VAR 0 6
23346: PUSH
23347: LD_VAR 0 8
23351: ARRAY
23352: PUSH
23353: LD_INT 2
23355: ARRAY
23356: LESS
23357: IFFALSE 23395
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23359: LD_ADDR_VAR 0 6
23363: PUSH
23364: LD_VAR 0 6
23368: PPUSH
23369: LD_VAR 0 8
23373: PPUSH
23374: LD_VAR 0 7
23378: PUSH
23379: LD_VAR 0 9
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 2
23392: ST_TO_ADDR
// break ;
23393: GO 23397
// end ; end ;
23395: GO 23334
23397: POP
23398: POP
// end ; end ;
23399: GO 23198
23401: POP
23402: POP
// if result and not asc then
23403: LD_VAR 0 6
23407: PUSH
23408: LD_VAR 0 4
23412: NOT
23413: AND
23414: IFFALSE 23489
// begin tmp := result ;
23416: LD_ADDR_VAR 0 9
23420: PUSH
23421: LD_VAR 0 6
23425: ST_TO_ADDR
// for i = tmp downto 1 do
23426: LD_ADDR_VAR 0 7
23430: PUSH
23431: DOUBLE
23432: LD_VAR 0 9
23436: INC
23437: ST_TO_ADDR
23438: LD_INT 1
23440: PUSH
23441: FOR_DOWNTO
23442: IFFALSE 23487
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23444: LD_ADDR_VAR 0 6
23448: PUSH
23449: LD_VAR 0 6
23453: PPUSH
23454: LD_VAR 0 9
23458: PUSH
23459: LD_VAR 0 7
23463: MINUS
23464: PUSH
23465: LD_INT 1
23467: PLUS
23468: PPUSH
23469: LD_VAR 0 9
23473: PUSH
23474: LD_VAR 0 7
23478: ARRAY
23479: PPUSH
23480: CALL_OW 1
23484: ST_TO_ADDR
23485: GO 23441
23487: POP
23488: POP
// end ; tmp := [ ] ;
23489: LD_ADDR_VAR 0 9
23493: PUSH
23494: EMPTY
23495: ST_TO_ADDR
// if mode then
23496: LD_VAR 0 5
23500: IFFALSE 23569
// begin for i = 1 to result do
23502: LD_ADDR_VAR 0 7
23506: PUSH
23507: DOUBLE
23508: LD_INT 1
23510: DEC
23511: ST_TO_ADDR
23512: LD_VAR 0 6
23516: PUSH
23517: FOR_TO
23518: IFFALSE 23557
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23520: LD_ADDR_VAR 0 9
23524: PUSH
23525: LD_VAR 0 9
23529: PPUSH
23530: LD_VAR 0 7
23534: PPUSH
23535: LD_VAR 0 6
23539: PUSH
23540: LD_VAR 0 7
23544: ARRAY
23545: PUSH
23546: LD_INT 1
23548: ARRAY
23549: PPUSH
23550: CALL_OW 1
23554: ST_TO_ADDR
23555: GO 23517
23557: POP
23558: POP
// result := tmp ;
23559: LD_ADDR_VAR 0 6
23563: PUSH
23564: LD_VAR 0 9
23568: ST_TO_ADDR
// end ; end ;
23569: LD_VAR 0 6
23573: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23574: LD_INT 0
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23582: LD_ADDR_VAR 0 5
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: EMPTY
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: ST_TO_ADDR
// if not x or not y then
23604: LD_VAR 0 2
23608: NOT
23609: PUSH
23610: LD_VAR 0 3
23614: NOT
23615: OR
23616: IFFALSE 23620
// exit ;
23618: GO 25270
// if not range then
23620: LD_VAR 0 4
23624: NOT
23625: IFFALSE 23635
// range := 10 ;
23627: LD_ADDR_VAR 0 4
23631: PUSH
23632: LD_INT 10
23634: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23635: LD_ADDR_VAR 0 8
23639: PUSH
23640: LD_INT 81
23642: PUSH
23643: LD_VAR 0 1
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 92
23654: PUSH
23655: LD_VAR 0 2
23659: PUSH
23660: LD_VAR 0 3
23664: PUSH
23665: LD_VAR 0 4
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 3
23678: PUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 3
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 69
23702: ST_TO_ADDR
// if not tmp then
23703: LD_VAR 0 8
23707: NOT
23708: IFFALSE 23712
// exit ;
23710: GO 25270
// for i in tmp do
23712: LD_ADDR_VAR 0 6
23716: PUSH
23717: LD_VAR 0 8
23721: PUSH
23722: FOR_IN
23723: IFFALSE 25245
// begin points := [ 0 , 0 , 0 ] ;
23725: LD_ADDR_VAR 0 9
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: ST_TO_ADDR
// bpoints := 1 ;
23744: LD_ADDR_VAR 0 10
23748: PUSH
23749: LD_INT 1
23751: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23752: LD_VAR 0 6
23756: PPUSH
23757: CALL_OW 247
23761: PUSH
23762: LD_INT 1
23764: DOUBLE
23765: EQUAL
23766: IFTRUE 23770
23768: GO 24348
23770: POP
// begin if GetClass ( i ) = 1 then
23771: LD_VAR 0 6
23775: PPUSH
23776: CALL_OW 257
23780: PUSH
23781: LD_INT 1
23783: EQUAL
23784: IFFALSE 23805
// points := [ 10 , 5 , 3 ] ;
23786: LD_ADDR_VAR 0 9
23790: PUSH
23791: LD_INT 10
23793: PUSH
23794: LD_INT 5
23796: PUSH
23797: LD_INT 3
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23805: LD_VAR 0 6
23809: PPUSH
23810: CALL_OW 257
23814: PUSH
23815: LD_INT 2
23817: PUSH
23818: LD_INT 3
23820: PUSH
23821: LD_INT 4
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: IN
23829: IFFALSE 23850
// points := [ 3 , 2 , 1 ] ;
23831: LD_ADDR_VAR 0 9
23835: PUSH
23836: LD_INT 3
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23850: LD_VAR 0 6
23854: PPUSH
23855: CALL_OW 257
23859: PUSH
23860: LD_INT 5
23862: EQUAL
23863: IFFALSE 23884
// points := [ 130 , 5 , 2 ] ;
23865: LD_ADDR_VAR 0 9
23869: PUSH
23870: LD_INT 130
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23884: LD_VAR 0 6
23888: PPUSH
23889: CALL_OW 257
23893: PUSH
23894: LD_INT 8
23896: EQUAL
23897: IFFALSE 23918
// points := [ 35 , 35 , 30 ] ;
23899: LD_ADDR_VAR 0 9
23903: PUSH
23904: LD_INT 35
23906: PUSH
23907: LD_INT 35
23909: PUSH
23910: LD_INT 30
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23918: LD_VAR 0 6
23922: PPUSH
23923: CALL_OW 257
23927: PUSH
23928: LD_INT 9
23930: EQUAL
23931: IFFALSE 23952
// points := [ 20 , 55 , 40 ] ;
23933: LD_ADDR_VAR 0 9
23937: PUSH
23938: LD_INT 20
23940: PUSH
23941: LD_INT 55
23943: PUSH
23944: LD_INT 40
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23952: LD_VAR 0 6
23956: PPUSH
23957: CALL_OW 257
23961: PUSH
23962: LD_INT 12
23964: PUSH
23965: LD_INT 16
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: IN
23972: IFFALSE 23993
// points := [ 5 , 3 , 2 ] ;
23974: LD_ADDR_VAR 0 9
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: LD_INT 3
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23993: LD_VAR 0 6
23997: PPUSH
23998: CALL_OW 257
24002: PUSH
24003: LD_INT 17
24005: EQUAL
24006: IFFALSE 24027
// points := [ 100 , 50 , 75 ] ;
24008: LD_ADDR_VAR 0 9
24012: PUSH
24013: LD_INT 100
24015: PUSH
24016: LD_INT 50
24018: PUSH
24019: LD_INT 75
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24027: LD_VAR 0 6
24031: PPUSH
24032: CALL_OW 257
24036: PUSH
24037: LD_INT 15
24039: EQUAL
24040: IFFALSE 24061
// points := [ 10 , 5 , 3 ] ;
24042: LD_ADDR_VAR 0 9
24046: PUSH
24047: LD_INT 10
24049: PUSH
24050: LD_INT 5
24052: PUSH
24053: LD_INT 3
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24061: LD_VAR 0 6
24065: PPUSH
24066: CALL_OW 257
24070: PUSH
24071: LD_INT 14
24073: EQUAL
24074: IFFALSE 24095
// points := [ 10 , 0 , 0 ] ;
24076: LD_ADDR_VAR 0 9
24080: PUSH
24081: LD_INT 10
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24095: LD_VAR 0 6
24099: PPUSH
24100: CALL_OW 257
24104: PUSH
24105: LD_INT 11
24107: EQUAL
24108: IFFALSE 24129
// points := [ 30 , 10 , 5 ] ;
24110: LD_ADDR_VAR 0 9
24114: PUSH
24115: LD_INT 30
24117: PUSH
24118: LD_INT 10
24120: PUSH
24121: LD_INT 5
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24129: LD_VAR 0 1
24133: PPUSH
24134: LD_INT 5
24136: PPUSH
24137: CALL_OW 321
24141: PUSH
24142: LD_INT 2
24144: EQUAL
24145: IFFALSE 24162
// bpoints := bpoints * 1.8 ;
24147: LD_ADDR_VAR 0 10
24151: PUSH
24152: LD_VAR 0 10
24156: PUSH
24157: LD_REAL  1.80000000000000E+0000
24160: MUL
24161: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24162: LD_VAR 0 6
24166: PPUSH
24167: CALL_OW 257
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 4
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: IN
24190: PUSH
24191: LD_VAR 0 1
24195: PPUSH
24196: LD_INT 51
24198: PPUSH
24199: CALL_OW 321
24203: PUSH
24204: LD_INT 2
24206: EQUAL
24207: AND
24208: IFFALSE 24225
// bpoints := bpoints * 1.2 ;
24210: LD_ADDR_VAR 0 10
24214: PUSH
24215: LD_VAR 0 10
24219: PUSH
24220: LD_REAL  1.20000000000000E+0000
24223: MUL
24224: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24225: LD_VAR 0 6
24229: PPUSH
24230: CALL_OW 257
24234: PUSH
24235: LD_INT 5
24237: PUSH
24238: LD_INT 7
24240: PUSH
24241: LD_INT 9
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: IN
24249: PUSH
24250: LD_VAR 0 1
24254: PPUSH
24255: LD_INT 52
24257: PPUSH
24258: CALL_OW 321
24262: PUSH
24263: LD_INT 2
24265: EQUAL
24266: AND
24267: IFFALSE 24284
// bpoints := bpoints * 1.5 ;
24269: LD_ADDR_VAR 0 10
24273: PUSH
24274: LD_VAR 0 10
24278: PUSH
24279: LD_REAL  1.50000000000000E+0000
24282: MUL
24283: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24284: LD_VAR 0 1
24288: PPUSH
24289: LD_INT 66
24291: PPUSH
24292: CALL_OW 321
24296: PUSH
24297: LD_INT 2
24299: EQUAL
24300: IFFALSE 24317
// bpoints := bpoints * 1.1 ;
24302: LD_ADDR_VAR 0 10
24306: PUSH
24307: LD_VAR 0 10
24311: PUSH
24312: LD_REAL  1.10000000000000E+0000
24315: MUL
24316: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24317: LD_ADDR_VAR 0 10
24321: PUSH
24322: LD_VAR 0 10
24326: PUSH
24327: LD_VAR 0 6
24331: PPUSH
24332: LD_INT 1
24334: PPUSH
24335: CALL_OW 259
24339: PUSH
24340: LD_REAL  1.15000000000000E+0000
24343: MUL
24344: MUL
24345: ST_TO_ADDR
// end ; unit_vehicle :
24346: GO 25174
24348: LD_INT 2
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 25162
24356: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24357: LD_VAR 0 6
24361: PPUSH
24362: CALL_OW 264
24366: PUSH
24367: LD_INT 2
24369: PUSH
24370: LD_INT 42
24372: PUSH
24373: LD_INT 24
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: IN
24381: IFFALSE 24402
// points := [ 25 , 5 , 3 ] ;
24383: LD_ADDR_VAR 0 9
24387: PUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: LD_INT 3
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24402: LD_VAR 0 6
24406: PPUSH
24407: CALL_OW 264
24411: PUSH
24412: LD_INT 4
24414: PUSH
24415: LD_INT 43
24417: PUSH
24418: LD_INT 25
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: IN
24426: IFFALSE 24447
// points := [ 40 , 15 , 5 ] ;
24428: LD_ADDR_VAR 0 9
24432: PUSH
24433: LD_INT 40
24435: PUSH
24436: LD_INT 15
24438: PUSH
24439: LD_INT 5
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24447: LD_VAR 0 6
24451: PPUSH
24452: CALL_OW 264
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: LD_INT 23
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: IN
24467: IFFALSE 24488
// points := [ 7 , 25 , 8 ] ;
24469: LD_ADDR_VAR 0 9
24473: PUSH
24474: LD_INT 7
24476: PUSH
24477: LD_INT 25
24479: PUSH
24480: LD_INT 8
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24488: LD_VAR 0 6
24492: PPUSH
24493: CALL_OW 264
24497: PUSH
24498: LD_INT 5
24500: PUSH
24501: LD_INT 27
24503: PUSH
24504: LD_INT 44
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: LIST
24511: IN
24512: IFFALSE 24533
// points := [ 14 , 50 , 16 ] ;
24514: LD_ADDR_VAR 0 9
24518: PUSH
24519: LD_INT 14
24521: PUSH
24522: LD_INT 50
24524: PUSH
24525: LD_INT 16
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24533: LD_VAR 0 6
24537: PPUSH
24538: CALL_OW 264
24542: PUSH
24543: LD_INT 6
24545: PUSH
24546: LD_INT 46
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: IN
24553: IFFALSE 24574
// points := [ 32 , 120 , 70 ] ;
24555: LD_ADDR_VAR 0 9
24559: PUSH
24560: LD_INT 32
24562: PUSH
24563: LD_INT 120
24565: PUSH
24566: LD_INT 70
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24574: LD_VAR 0 6
24578: PPUSH
24579: CALL_OW 264
24583: PUSH
24584: LD_INT 7
24586: PUSH
24587: LD_INT 28
24589: PUSH
24590: LD_INT 45
24592: PUSH
24593: LD_INT 92
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: IN
24602: IFFALSE 24623
// points := [ 35 , 20 , 45 ] ;
24604: LD_ADDR_VAR 0 9
24608: PUSH
24609: LD_INT 35
24611: PUSH
24612: LD_INT 20
24614: PUSH
24615: LD_INT 45
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: LIST
24622: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24623: LD_VAR 0 6
24627: PPUSH
24628: CALL_OW 264
24632: PUSH
24633: LD_INT 47
24635: PUSH
24636: EMPTY
24637: LIST
24638: IN
24639: IFFALSE 24660
// points := [ 67 , 45 , 75 ] ;
24641: LD_ADDR_VAR 0 9
24645: PUSH
24646: LD_INT 67
24648: PUSH
24649: LD_INT 45
24651: PUSH
24652: LD_INT 75
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24660: LD_VAR 0 6
24664: PPUSH
24665: CALL_OW 264
24669: PUSH
24670: LD_INT 26
24672: PUSH
24673: EMPTY
24674: LIST
24675: IN
24676: IFFALSE 24697
// points := [ 120 , 30 , 80 ] ;
24678: LD_ADDR_VAR 0 9
24682: PUSH
24683: LD_INT 120
24685: PUSH
24686: LD_INT 30
24688: PUSH
24689: LD_INT 80
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24697: LD_VAR 0 6
24701: PPUSH
24702: CALL_OW 264
24706: PUSH
24707: LD_INT 22
24709: PUSH
24710: EMPTY
24711: LIST
24712: IN
24713: IFFALSE 24734
// points := [ 40 , 1 , 1 ] ;
24715: LD_ADDR_VAR 0 9
24719: PUSH
24720: LD_INT 40
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24734: LD_VAR 0 6
24738: PPUSH
24739: CALL_OW 264
24743: PUSH
24744: LD_INT 29
24746: PUSH
24747: EMPTY
24748: LIST
24749: IN
24750: IFFALSE 24771
// points := [ 70 , 200 , 400 ] ;
24752: LD_ADDR_VAR 0 9
24756: PUSH
24757: LD_INT 70
24759: PUSH
24760: LD_INT 200
24762: PUSH
24763: LD_INT 400
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24771: LD_VAR 0 6
24775: PPUSH
24776: CALL_OW 264
24780: PUSH
24781: LD_INT 14
24783: PUSH
24784: LD_INT 53
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: IN
24791: IFFALSE 24812
// points := [ 40 , 10 , 20 ] ;
24793: LD_ADDR_VAR 0 9
24797: PUSH
24798: LD_INT 40
24800: PUSH
24801: LD_INT 10
24803: PUSH
24804: LD_INT 20
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24812: LD_VAR 0 6
24816: PPUSH
24817: CALL_OW 264
24821: PUSH
24822: LD_INT 9
24824: PUSH
24825: EMPTY
24826: LIST
24827: IN
24828: IFFALSE 24849
// points := [ 5 , 70 , 20 ] ;
24830: LD_ADDR_VAR 0 9
24834: PUSH
24835: LD_INT 5
24837: PUSH
24838: LD_INT 70
24840: PUSH
24841: LD_INT 20
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24849: LD_VAR 0 6
24853: PPUSH
24854: CALL_OW 264
24858: PUSH
24859: LD_INT 10
24861: PUSH
24862: EMPTY
24863: LIST
24864: IN
24865: IFFALSE 24886
// points := [ 35 , 110 , 70 ] ;
24867: LD_ADDR_VAR 0 9
24871: PUSH
24872: LD_INT 35
24874: PUSH
24875: LD_INT 110
24877: PUSH
24878: LD_INT 70
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24886: LD_VAR 0 6
24890: PPUSH
24891: CALL_OW 265
24895: PUSH
24896: LD_INT 25
24898: EQUAL
24899: IFFALSE 24920
// points := [ 80 , 65 , 100 ] ;
24901: LD_ADDR_VAR 0 9
24905: PUSH
24906: LD_INT 80
24908: PUSH
24909: LD_INT 65
24911: PUSH
24912: LD_INT 100
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24920: LD_VAR 0 6
24924: PPUSH
24925: CALL_OW 263
24929: PUSH
24930: LD_INT 1
24932: EQUAL
24933: IFFALSE 24968
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24935: LD_ADDR_VAR 0 10
24939: PUSH
24940: LD_VAR 0 10
24944: PUSH
24945: LD_VAR 0 6
24949: PPUSH
24950: CALL_OW 311
24954: PPUSH
24955: LD_INT 3
24957: PPUSH
24958: CALL_OW 259
24962: PUSH
24963: LD_INT 4
24965: MUL
24966: MUL
24967: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24968: LD_VAR 0 6
24972: PPUSH
24973: CALL_OW 263
24977: PUSH
24978: LD_INT 2
24980: EQUAL
24981: IFFALSE 25032
// begin j := IsControledBy ( i ) ;
24983: LD_ADDR_VAR 0 7
24987: PUSH
24988: LD_VAR 0 6
24992: PPUSH
24993: CALL_OW 312
24997: ST_TO_ADDR
// if j then
24998: LD_VAR 0 7
25002: IFFALSE 25032
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25004: LD_ADDR_VAR 0 10
25008: PUSH
25009: LD_VAR 0 10
25013: PUSH
25014: LD_VAR 0 7
25018: PPUSH
25019: LD_INT 3
25021: PPUSH
25022: CALL_OW 259
25026: PUSH
25027: LD_INT 3
25029: MUL
25030: MUL
25031: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25032: LD_VAR 0 6
25036: PPUSH
25037: CALL_OW 264
25041: PUSH
25042: LD_INT 5
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: LD_INT 46
25050: PUSH
25051: LD_INT 44
25053: PUSH
25054: LD_INT 47
25056: PUSH
25057: LD_INT 45
25059: PUSH
25060: LD_INT 28
25062: PUSH
25063: LD_INT 7
25065: PUSH
25066: LD_INT 27
25068: PUSH
25069: LD_INT 29
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: IN
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: LD_INT 52
25092: PPUSH
25093: CALL_OW 321
25097: PUSH
25098: LD_INT 2
25100: EQUAL
25101: AND
25102: IFFALSE 25119
// bpoints := bpoints * 1.2 ;
25104: LD_ADDR_VAR 0 10
25108: PUSH
25109: LD_VAR 0 10
25113: PUSH
25114: LD_REAL  1.20000000000000E+0000
25117: MUL
25118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25119: LD_VAR 0 6
25123: PPUSH
25124: CALL_OW 264
25128: PUSH
25129: LD_INT 6
25131: PUSH
25132: LD_INT 46
25134: PUSH
25135: LD_INT 47
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: IN
25143: IFFALSE 25160
// bpoints := bpoints * 1.2 ;
25145: LD_ADDR_VAR 0 10
25149: PUSH
25150: LD_VAR 0 10
25154: PUSH
25155: LD_REAL  1.20000000000000E+0000
25158: MUL
25159: ST_TO_ADDR
// end ; unit_building :
25160: GO 25174
25162: LD_INT 3
25164: DOUBLE
25165: EQUAL
25166: IFTRUE 25170
25168: GO 25173
25170: POP
// ; end ;
25171: GO 25174
25173: POP
// for j = 1 to 3 do
25174: LD_ADDR_VAR 0 7
25178: PUSH
25179: DOUBLE
25180: LD_INT 1
25182: DEC
25183: ST_TO_ADDR
25184: LD_INT 3
25186: PUSH
25187: FOR_TO
25188: IFFALSE 25241
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25190: LD_ADDR_VAR 0 5
25194: PUSH
25195: LD_VAR 0 5
25199: PPUSH
25200: LD_VAR 0 7
25204: PPUSH
25205: LD_VAR 0 5
25209: PUSH
25210: LD_VAR 0 7
25214: ARRAY
25215: PUSH
25216: LD_VAR 0 9
25220: PUSH
25221: LD_VAR 0 7
25225: ARRAY
25226: PUSH
25227: LD_VAR 0 10
25231: MUL
25232: PLUS
25233: PPUSH
25234: CALL_OW 1
25238: ST_TO_ADDR
25239: GO 25187
25241: POP
25242: POP
// end ;
25243: GO 23722
25245: POP
25246: POP
// result := Replace ( result , 4 , tmp ) ;
25247: LD_ADDR_VAR 0 5
25251: PUSH
25252: LD_VAR 0 5
25256: PPUSH
25257: LD_INT 4
25259: PPUSH
25260: LD_VAR 0 8
25264: PPUSH
25265: CALL_OW 1
25269: ST_TO_ADDR
// end ;
25270: LD_VAR 0 5
25274: RET
// export function DangerAtRange ( unit , range ) ; begin
25275: LD_INT 0
25277: PPUSH
// if not unit then
25278: LD_VAR 0 1
25282: NOT
25283: IFFALSE 25287
// exit ;
25285: GO 25332
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25287: LD_ADDR_VAR 0 3
25291: PUSH
25292: LD_VAR 0 1
25296: PPUSH
25297: CALL_OW 255
25301: PPUSH
25302: LD_VAR 0 1
25306: PPUSH
25307: CALL_OW 250
25311: PPUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 251
25321: PPUSH
25322: LD_VAR 0 2
25326: PPUSH
25327: CALL 23574 0 4
25331: ST_TO_ADDR
// end ;
25332: LD_VAR 0 3
25336: RET
// export function DangerInArea ( side , area ) ; begin
25337: LD_INT 0
25339: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_VAR 0 2
25349: PPUSH
25350: LD_INT 81
25352: PUSH
25353: LD_VAR 0 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PPUSH
25362: CALL_OW 70
25366: ST_TO_ADDR
// end ;
25367: LD_VAR 0 3
25371: RET
// export function IsExtension ( b ) ; begin
25372: LD_INT 0
25374: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25375: LD_ADDR_VAR 0 2
25379: PUSH
25380: LD_VAR 0 1
25384: PUSH
25385: LD_INT 23
25387: PUSH
25388: LD_INT 20
25390: PUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 17
25396: PUSH
25397: LD_INT 24
25399: PUSH
25400: LD_INT 21
25402: PUSH
25403: LD_INT 19
25405: PUSH
25406: LD_INT 16
25408: PUSH
25409: LD_INT 25
25411: PUSH
25412: LD_INT 18
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: IN
25427: ST_TO_ADDR
// end ;
25428: LD_VAR 0 2
25432: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25433: LD_INT 0
25435: PPUSH
25436: PPUSH
25437: PPUSH
// result := [ ] ;
25438: LD_ADDR_VAR 0 4
25442: PUSH
25443: EMPTY
25444: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: LD_VAR 0 2
25454: PPUSH
25455: LD_INT 21
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PPUSH
25465: CALL_OW 70
25469: ST_TO_ADDR
// if not tmp then
25470: LD_VAR 0 5
25474: NOT
25475: IFFALSE 25479
// exit ;
25477: GO 25543
// if checkLink then
25479: LD_VAR 0 3
25483: IFFALSE 25533
// begin for i in tmp do
25485: LD_ADDR_VAR 0 6
25489: PUSH
25490: LD_VAR 0 5
25494: PUSH
25495: FOR_IN
25496: IFFALSE 25531
// if GetBase ( i ) <> base then
25498: LD_VAR 0 6
25502: PPUSH
25503: CALL_OW 274
25507: PUSH
25508: LD_VAR 0 1
25512: NONEQUAL
25513: IFFALSE 25529
// ComLinkToBase ( base , i ) ;
25515: LD_VAR 0 1
25519: PPUSH
25520: LD_VAR 0 6
25524: PPUSH
25525: CALL_OW 169
25529: GO 25495
25531: POP
25532: POP
// end ; result := tmp ;
25533: LD_ADDR_VAR 0 4
25537: PUSH
25538: LD_VAR 0 5
25542: ST_TO_ADDR
// end ;
25543: LD_VAR 0 4
25547: RET
// export function ComComplete ( units , b ) ; var i ; begin
25548: LD_INT 0
25550: PPUSH
25551: PPUSH
// if not units then
25552: LD_VAR 0 1
25556: NOT
25557: IFFALSE 25561
// exit ;
25559: GO 25651
// for i in units do
25561: LD_ADDR_VAR 0 4
25565: PUSH
25566: LD_VAR 0 1
25570: PUSH
25571: FOR_IN
25572: IFFALSE 25649
// if BuildingStatus ( b ) = bs_build then
25574: LD_VAR 0 2
25578: PPUSH
25579: CALL_OW 461
25583: PUSH
25584: LD_INT 1
25586: EQUAL
25587: IFFALSE 25647
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25589: LD_VAR 0 4
25593: PPUSH
25594: LD_STRING h
25596: PUSH
25597: LD_VAR 0 2
25601: PPUSH
25602: CALL_OW 250
25606: PUSH
25607: LD_VAR 0 2
25611: PPUSH
25612: CALL_OW 251
25616: PUSH
25617: LD_VAR 0 2
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: PUSH
25640: EMPTY
25641: LIST
25642: PPUSH
25643: CALL_OW 446
25647: GO 25571
25649: POP
25650: POP
// end ;
25651: LD_VAR 0 3
25655: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25656: LD_INT 0
25658: PPUSH
25659: PPUSH
25660: PPUSH
25661: PPUSH
25662: PPUSH
25663: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25664: LD_VAR 0 1
25668: NOT
25669: PUSH
25670: LD_VAR 0 1
25674: PPUSH
25675: CALL_OW 263
25679: PUSH
25680: LD_INT 2
25682: NONEQUAL
25683: OR
25684: IFFALSE 25688
// exit ;
25686: GO 26004
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25688: LD_ADDR_VAR 0 6
25692: PUSH
25693: LD_INT 22
25695: PUSH
25696: LD_VAR 0 1
25700: PPUSH
25701: CALL_OW 255
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 30
25715: PUSH
25716: LD_INT 36
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 34
25725: PUSH
25726: LD_INT 31
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: ST_TO_ADDR
// if not tmp then
25747: LD_VAR 0 6
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 26004
// result := [ ] ;
25756: LD_ADDR_VAR 0 2
25760: PUSH
25761: EMPTY
25762: ST_TO_ADDR
// for i in tmp do
25763: LD_ADDR_VAR 0 3
25767: PUSH
25768: LD_VAR 0 6
25772: PUSH
25773: FOR_IN
25774: IFFALSE 25845
// begin t := UnitsInside ( i ) ;
25776: LD_ADDR_VAR 0 4
25780: PUSH
25781: LD_VAR 0 3
25785: PPUSH
25786: CALL_OW 313
25790: ST_TO_ADDR
// if t then
25791: LD_VAR 0 4
25795: IFFALSE 25843
// for j in t do
25797: LD_ADDR_VAR 0 7
25801: PUSH
25802: LD_VAR 0 4
25806: PUSH
25807: FOR_IN
25808: IFFALSE 25841
// result := Replace ( result , result + 1 , j ) ;
25810: LD_ADDR_VAR 0 2
25814: PUSH
25815: LD_VAR 0 2
25819: PPUSH
25820: LD_VAR 0 2
25824: PUSH
25825: LD_INT 1
25827: PLUS
25828: PPUSH
25829: LD_VAR 0 7
25833: PPUSH
25834: CALL_OW 1
25838: ST_TO_ADDR
25839: GO 25807
25841: POP
25842: POP
// end ;
25843: GO 25773
25845: POP
25846: POP
// if not result then
25847: LD_VAR 0 2
25851: NOT
25852: IFFALSE 25856
// exit ;
25854: GO 26004
// mech := result [ 1 ] ;
25856: LD_ADDR_VAR 0 5
25860: PUSH
25861: LD_VAR 0 2
25865: PUSH
25866: LD_INT 1
25868: ARRAY
25869: ST_TO_ADDR
// if result > 1 then
25870: LD_VAR 0 2
25874: PUSH
25875: LD_INT 1
25877: GREATER
25878: IFFALSE 25990
// begin for i = 2 to result do
25880: LD_ADDR_VAR 0 3
25884: PUSH
25885: DOUBLE
25886: LD_INT 2
25888: DEC
25889: ST_TO_ADDR
25890: LD_VAR 0 2
25894: PUSH
25895: FOR_TO
25896: IFFALSE 25988
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25898: LD_ADDR_VAR 0 4
25902: PUSH
25903: LD_VAR 0 2
25907: PUSH
25908: LD_VAR 0 3
25912: ARRAY
25913: PPUSH
25914: LD_INT 3
25916: PPUSH
25917: CALL_OW 259
25921: PUSH
25922: LD_VAR 0 2
25926: PUSH
25927: LD_VAR 0 3
25931: ARRAY
25932: PPUSH
25933: CALL_OW 432
25937: MINUS
25938: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25939: LD_VAR 0 4
25943: PUSH
25944: LD_VAR 0 5
25948: PPUSH
25949: LD_INT 3
25951: PPUSH
25952: CALL_OW 259
25956: PUSH
25957: LD_VAR 0 5
25961: PPUSH
25962: CALL_OW 432
25966: MINUS
25967: GREATEREQUAL
25968: IFFALSE 25986
// mech := result [ i ] ;
25970: LD_ADDR_VAR 0 5
25974: PUSH
25975: LD_VAR 0 2
25979: PUSH
25980: LD_VAR 0 3
25984: ARRAY
25985: ST_TO_ADDR
// end ;
25986: GO 25895
25988: POP
25989: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25990: LD_VAR 0 1
25994: PPUSH
25995: LD_VAR 0 5
25999: PPUSH
26000: CALL_OW 135
// end ;
26004: LD_VAR 0 2
26008: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
// result := [ ] ;
26024: LD_ADDR_VAR 0 7
26028: PUSH
26029: EMPTY
26030: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26031: LD_VAR 0 1
26035: PPUSH
26036: CALL_OW 266
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: IN
26051: NOT
26052: IFFALSE 26056
// exit ;
26054: GO 27690
// if name then
26056: LD_VAR 0 3
26060: IFFALSE 26076
// SetBName ( base_dep , name ) ;
26062: LD_VAR 0 1
26066: PPUSH
26067: LD_VAR 0 3
26071: PPUSH
26072: CALL_OW 500
// base := GetBase ( base_dep ) ;
26076: LD_ADDR_VAR 0 15
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 274
26090: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26091: LD_ADDR_VAR 0 16
26095: PUSH
26096: LD_VAR 0 1
26100: PPUSH
26101: CALL_OW 255
26105: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26106: LD_ADDR_VAR 0 17
26110: PUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 248
26120: ST_TO_ADDR
// if sources then
26121: LD_VAR 0 5
26125: IFFALSE 26172
// for i = 1 to 3 do
26127: LD_ADDR_VAR 0 8
26131: PUSH
26132: DOUBLE
26133: LD_INT 1
26135: DEC
26136: ST_TO_ADDR
26137: LD_INT 3
26139: PUSH
26140: FOR_TO
26141: IFFALSE 26170
// AddResourceType ( base , i , sources [ i ] ) ;
26143: LD_VAR 0 15
26147: PPUSH
26148: LD_VAR 0 8
26152: PPUSH
26153: LD_VAR 0 5
26157: PUSH
26158: LD_VAR 0 8
26162: ARRAY
26163: PPUSH
26164: CALL_OW 276
26168: GO 26140
26170: POP
26171: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26172: LD_ADDR_VAR 0 18
26176: PUSH
26177: LD_VAR 0 15
26181: PPUSH
26182: LD_VAR 0 2
26186: PPUSH
26187: LD_INT 1
26189: PPUSH
26190: CALL 25433 0 3
26194: ST_TO_ADDR
// InitHc ;
26195: CALL_OW 19
// InitUc ;
26199: CALL_OW 18
// uc_side := side ;
26203: LD_ADDR_OWVAR 20
26207: PUSH
26208: LD_VAR 0 16
26212: ST_TO_ADDR
// uc_nation := nation ;
26213: LD_ADDR_OWVAR 21
26217: PUSH
26218: LD_VAR 0 17
26222: ST_TO_ADDR
// if buildings then
26223: LD_VAR 0 18
26227: IFFALSE 27549
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26229: LD_ADDR_VAR 0 19
26233: PUSH
26234: LD_VAR 0 18
26238: PPUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 30
26244: PUSH
26245: LD_INT 29
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 30
26254: PUSH
26255: LD_INT 30
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: LIST
26266: PPUSH
26267: CALL_OW 72
26271: ST_TO_ADDR
// if tmp then
26272: LD_VAR 0 19
26276: IFFALSE 26324
// for i in tmp do
26278: LD_ADDR_VAR 0 8
26282: PUSH
26283: LD_VAR 0 19
26287: PUSH
26288: FOR_IN
26289: IFFALSE 26322
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26291: LD_VAR 0 8
26295: PPUSH
26296: CALL_OW 250
26300: PPUSH
26301: LD_VAR 0 8
26305: PPUSH
26306: CALL_OW 251
26310: PPUSH
26311: LD_VAR 0 16
26315: PPUSH
26316: CALL_OW 441
26320: GO 26288
26322: POP
26323: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26324: LD_VAR 0 18
26328: PPUSH
26329: LD_INT 2
26331: PUSH
26332: LD_INT 30
26334: PUSH
26335: LD_INT 32
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 30
26344: PUSH
26345: LD_INT 33
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: LIST
26356: PPUSH
26357: CALL_OW 72
26361: IFFALSE 26449
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26363: LD_ADDR_VAR 0 8
26367: PUSH
26368: LD_VAR 0 18
26372: PPUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 30
26378: PUSH
26379: LD_INT 32
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 30
26388: PUSH
26389: LD_INT 33
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 72
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26447
// begin if not GetBWeapon ( i ) then
26409: LD_VAR 0 8
26413: PPUSH
26414: CALL_OW 269
26418: NOT
26419: IFFALSE 26445
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26421: LD_VAR 0 8
26425: PPUSH
26426: LD_VAR 0 8
26430: PPUSH
26431: LD_VAR 0 2
26435: PPUSH
26436: CALL 27695 0 2
26440: PPUSH
26441: CALL_OW 431
// end ;
26445: GO 26406
26447: POP
26448: POP
// end ; for i = 1 to personel do
26449: LD_ADDR_VAR 0 8
26453: PUSH
26454: DOUBLE
26455: LD_INT 1
26457: DEC
26458: ST_TO_ADDR
26459: LD_VAR 0 6
26463: PUSH
26464: FOR_TO
26465: IFFALSE 27529
// begin if i > 4 then
26467: LD_VAR 0 8
26471: PUSH
26472: LD_INT 4
26474: GREATER
26475: IFFALSE 26479
// break ;
26477: GO 27529
// case i of 1 :
26479: LD_VAR 0 8
26483: PUSH
26484: LD_INT 1
26486: DOUBLE
26487: EQUAL
26488: IFTRUE 26492
26490: GO 26572
26492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26493: LD_ADDR_VAR 0 12
26497: PUSH
26498: LD_VAR 0 18
26502: PPUSH
26503: LD_INT 22
26505: PUSH
26506: LD_VAR 0 16
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 58
26517: PUSH
26518: EMPTY
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 30
26526: PUSH
26527: LD_INT 32
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 30
26536: PUSH
26537: LD_INT 4
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 30
26546: PUSH
26547: LD_INT 5
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 72
26569: ST_TO_ADDR
26570: GO 26794
26572: LD_INT 2
26574: DOUBLE
26575: EQUAL
26576: IFTRUE 26580
26578: GO 26642
26580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26581: LD_ADDR_VAR 0 12
26585: PUSH
26586: LD_VAR 0 18
26590: PPUSH
26591: LD_INT 22
26593: PUSH
26594: LD_VAR 0 16
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: LD_INT 30
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 30
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PPUSH
26635: CALL_OW 72
26639: ST_TO_ADDR
26640: GO 26794
26642: LD_INT 3
26644: DOUBLE
26645: EQUAL
26646: IFTRUE 26650
26648: GO 26712
26650: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26651: LD_ADDR_VAR 0 12
26655: PUSH
26656: LD_VAR 0 18
26660: PPUSH
26661: LD_INT 22
26663: PUSH
26664: LD_VAR 0 16
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: LD_INT 30
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 30
26688: PUSH
26689: LD_INT 3
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 72
26709: ST_TO_ADDR
26710: GO 26794
26712: LD_INT 4
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 26793
26720: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26721: LD_ADDR_VAR 0 12
26725: PUSH
26726: LD_VAR 0 18
26730: PPUSH
26731: LD_INT 22
26733: PUSH
26734: LD_VAR 0 16
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: LD_INT 30
26748: PUSH
26749: LD_INT 6
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 30
26758: PUSH
26759: LD_INT 7
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 30
26768: PUSH
26769: LD_INT 8
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PPUSH
26786: CALL_OW 72
26790: ST_TO_ADDR
26791: GO 26794
26793: POP
// if i = 1 then
26794: LD_VAR 0 8
26798: PUSH
26799: LD_INT 1
26801: EQUAL
26802: IFFALSE 26913
// begin tmp := [ ] ;
26804: LD_ADDR_VAR 0 19
26808: PUSH
26809: EMPTY
26810: ST_TO_ADDR
// for j in f do
26811: LD_ADDR_VAR 0 9
26815: PUSH
26816: LD_VAR 0 12
26820: PUSH
26821: FOR_IN
26822: IFFALSE 26895
// if GetBType ( j ) = b_bunker then
26824: LD_VAR 0 9
26828: PPUSH
26829: CALL_OW 266
26833: PUSH
26834: LD_INT 32
26836: EQUAL
26837: IFFALSE 26864
// tmp := Insert ( tmp , 1 , j ) else
26839: LD_ADDR_VAR 0 19
26843: PUSH
26844: LD_VAR 0 19
26848: PPUSH
26849: LD_INT 1
26851: PPUSH
26852: LD_VAR 0 9
26856: PPUSH
26857: CALL_OW 2
26861: ST_TO_ADDR
26862: GO 26893
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26864: LD_ADDR_VAR 0 19
26868: PUSH
26869: LD_VAR 0 19
26873: PPUSH
26874: LD_VAR 0 19
26878: PUSH
26879: LD_INT 1
26881: PLUS
26882: PPUSH
26883: LD_VAR 0 9
26887: PPUSH
26888: CALL_OW 2
26892: ST_TO_ADDR
26893: GO 26821
26895: POP
26896: POP
// if tmp then
26897: LD_VAR 0 19
26901: IFFALSE 26913
// f := tmp ;
26903: LD_ADDR_VAR 0 12
26907: PUSH
26908: LD_VAR 0 19
26912: ST_TO_ADDR
// end ; x := personel [ i ] ;
26913: LD_ADDR_VAR 0 13
26917: PUSH
26918: LD_VAR 0 6
26922: PUSH
26923: LD_VAR 0 8
26927: ARRAY
26928: ST_TO_ADDR
// if x = - 1 then
26929: LD_VAR 0 13
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: EQUAL
26938: IFFALSE 27147
// begin for j in f do
26940: LD_ADDR_VAR 0 9
26944: PUSH
26945: LD_VAR 0 12
26949: PUSH
26950: FOR_IN
26951: IFFALSE 27143
// repeat InitHc ;
26953: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26957: LD_VAR 0 9
26961: PPUSH
26962: CALL_OW 266
26966: PUSH
26967: LD_INT 5
26969: EQUAL
26970: IFFALSE 27040
// begin if UnitsInside ( j ) < 3 then
26972: LD_VAR 0 9
26976: PPUSH
26977: CALL_OW 313
26981: PUSH
26982: LD_INT 3
26984: LESS
26985: IFFALSE 27021
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26987: LD_INT 0
26989: PPUSH
26990: LD_INT 5
26992: PUSH
26993: LD_INT 8
26995: PUSH
26996: LD_INT 9
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: PUSH
27004: LD_VAR 0 17
27008: ARRAY
27009: PPUSH
27010: LD_VAR 0 4
27014: PPUSH
27015: CALL_OW 380
27019: GO 27038
// PrepareHuman ( false , i , skill ) ;
27021: LD_INT 0
27023: PPUSH
27024: LD_VAR 0 8
27028: PPUSH
27029: LD_VAR 0 4
27033: PPUSH
27034: CALL_OW 380
// end else
27038: GO 27057
// PrepareHuman ( false , i , skill ) ;
27040: LD_INT 0
27042: PPUSH
27043: LD_VAR 0 8
27047: PPUSH
27048: LD_VAR 0 4
27052: PPUSH
27053: CALL_OW 380
// un := CreateHuman ;
27057: LD_ADDR_VAR 0 14
27061: PUSH
27062: CALL_OW 44
27066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27067: LD_ADDR_VAR 0 7
27071: PUSH
27072: LD_VAR 0 7
27076: PPUSH
27077: LD_INT 1
27079: PPUSH
27080: LD_VAR 0 14
27084: PPUSH
27085: CALL_OW 2
27089: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27090: LD_VAR 0 14
27094: PPUSH
27095: LD_VAR 0 9
27099: PPUSH
27100: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27104: LD_VAR 0 9
27108: PPUSH
27109: CALL_OW 313
27113: PUSH
27114: LD_INT 6
27116: EQUAL
27117: PUSH
27118: LD_VAR 0 9
27122: PPUSH
27123: CALL_OW 266
27127: PUSH
27128: LD_INT 32
27130: PUSH
27131: LD_INT 31
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: IN
27138: OR
27139: IFFALSE 26953
27141: GO 26950
27143: POP
27144: POP
// end else
27145: GO 27527
// for j = 1 to x do
27147: LD_ADDR_VAR 0 9
27151: PUSH
27152: DOUBLE
27153: LD_INT 1
27155: DEC
27156: ST_TO_ADDR
27157: LD_VAR 0 13
27161: PUSH
27162: FOR_TO
27163: IFFALSE 27525
// begin InitHc ;
27165: CALL_OW 19
// if not f then
27169: LD_VAR 0 12
27173: NOT
27174: IFFALSE 27263
// begin PrepareHuman ( false , i , skill ) ;
27176: LD_INT 0
27178: PPUSH
27179: LD_VAR 0 8
27183: PPUSH
27184: LD_VAR 0 4
27188: PPUSH
27189: CALL_OW 380
// un := CreateHuman ;
27193: LD_ADDR_VAR 0 14
27197: PUSH
27198: CALL_OW 44
27202: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27203: LD_ADDR_VAR 0 7
27207: PUSH
27208: LD_VAR 0 7
27212: PPUSH
27213: LD_INT 1
27215: PPUSH
27216: LD_VAR 0 14
27220: PPUSH
27221: CALL_OW 2
27225: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27226: LD_VAR 0 14
27230: PPUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 250
27240: PPUSH
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 251
27250: PPUSH
27251: LD_INT 10
27253: PPUSH
27254: LD_INT 0
27256: PPUSH
27257: CALL_OW 50
// continue ;
27261: GO 27162
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27263: LD_VAR 0 12
27267: PUSH
27268: LD_INT 1
27270: ARRAY
27271: PPUSH
27272: CALL_OW 313
27276: PUSH
27277: LD_VAR 0 12
27281: PUSH
27282: LD_INT 1
27284: ARRAY
27285: PPUSH
27286: CALL_OW 266
27290: PUSH
27291: LD_INT 32
27293: PUSH
27294: LD_INT 31
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: IN
27301: AND
27302: PUSH
27303: LD_VAR 0 12
27307: PUSH
27308: LD_INT 1
27310: ARRAY
27311: PPUSH
27312: CALL_OW 313
27316: PUSH
27317: LD_INT 6
27319: EQUAL
27320: OR
27321: IFFALSE 27341
// f := Delete ( f , 1 ) ;
27323: LD_ADDR_VAR 0 12
27327: PUSH
27328: LD_VAR 0 12
27332: PPUSH
27333: LD_INT 1
27335: PPUSH
27336: CALL_OW 3
27340: ST_TO_ADDR
// if not f then
27341: LD_VAR 0 12
27345: NOT
27346: IFFALSE 27364
// begin x := x + 2 ;
27348: LD_ADDR_VAR 0 13
27352: PUSH
27353: LD_VAR 0 13
27357: PUSH
27358: LD_INT 2
27360: PLUS
27361: ST_TO_ADDR
// continue ;
27362: GO 27162
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27364: LD_VAR 0 12
27368: PUSH
27369: LD_INT 1
27371: ARRAY
27372: PPUSH
27373: CALL_OW 266
27377: PUSH
27378: LD_INT 5
27380: EQUAL
27381: IFFALSE 27455
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27383: LD_VAR 0 12
27387: PUSH
27388: LD_INT 1
27390: ARRAY
27391: PPUSH
27392: CALL_OW 313
27396: PUSH
27397: LD_INT 3
27399: LESS
27400: IFFALSE 27436
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27402: LD_INT 0
27404: PPUSH
27405: LD_INT 5
27407: PUSH
27408: LD_INT 8
27410: PUSH
27411: LD_INT 9
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: PUSH
27419: LD_VAR 0 17
27423: ARRAY
27424: PPUSH
27425: LD_VAR 0 4
27429: PPUSH
27430: CALL_OW 380
27434: GO 27453
// PrepareHuman ( false , i , skill ) ;
27436: LD_INT 0
27438: PPUSH
27439: LD_VAR 0 8
27443: PPUSH
27444: LD_VAR 0 4
27448: PPUSH
27449: CALL_OW 380
// end else
27453: GO 27472
// PrepareHuman ( false , i , skill ) ;
27455: LD_INT 0
27457: PPUSH
27458: LD_VAR 0 8
27462: PPUSH
27463: LD_VAR 0 4
27467: PPUSH
27468: CALL_OW 380
// un := CreateHuman ;
27472: LD_ADDR_VAR 0 14
27476: PUSH
27477: CALL_OW 44
27481: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27482: LD_ADDR_VAR 0 7
27486: PUSH
27487: LD_VAR 0 7
27491: PPUSH
27492: LD_INT 1
27494: PPUSH
27495: LD_VAR 0 14
27499: PPUSH
27500: CALL_OW 2
27504: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27505: LD_VAR 0 14
27509: PPUSH
27510: LD_VAR 0 12
27514: PUSH
27515: LD_INT 1
27517: ARRAY
27518: PPUSH
27519: CALL_OW 52
// end ;
27523: GO 27162
27525: POP
27526: POP
// end ;
27527: GO 26464
27529: POP
27530: POP
// result := result ^ buildings ;
27531: LD_ADDR_VAR 0 7
27535: PUSH
27536: LD_VAR 0 7
27540: PUSH
27541: LD_VAR 0 18
27545: ADD
27546: ST_TO_ADDR
// end else
27547: GO 27690
// begin for i = 1 to personel do
27549: LD_ADDR_VAR 0 8
27553: PUSH
27554: DOUBLE
27555: LD_INT 1
27557: DEC
27558: ST_TO_ADDR
27559: LD_VAR 0 6
27563: PUSH
27564: FOR_TO
27565: IFFALSE 27688
// begin if i > 4 then
27567: LD_VAR 0 8
27571: PUSH
27572: LD_INT 4
27574: GREATER
27575: IFFALSE 27579
// break ;
27577: GO 27688
// x := personel [ i ] ;
27579: LD_ADDR_VAR 0 13
27583: PUSH
27584: LD_VAR 0 6
27588: PUSH
27589: LD_VAR 0 8
27593: ARRAY
27594: ST_TO_ADDR
// if x = - 1 then
27595: LD_VAR 0 13
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: EQUAL
27604: IFFALSE 27608
// continue ;
27606: GO 27564
// PrepareHuman ( false , i , skill ) ;
27608: LD_INT 0
27610: PPUSH
27611: LD_VAR 0 8
27615: PPUSH
27616: LD_VAR 0 4
27620: PPUSH
27621: CALL_OW 380
// un := CreateHuman ;
27625: LD_ADDR_VAR 0 14
27629: PUSH
27630: CALL_OW 44
27634: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27635: LD_VAR 0 14
27639: PPUSH
27640: LD_VAR 0 1
27644: PPUSH
27645: CALL_OW 250
27649: PPUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 251
27659: PPUSH
27660: LD_INT 10
27662: PPUSH
27663: LD_INT 0
27665: PPUSH
27666: CALL_OW 50
// result := result ^ un ;
27670: LD_ADDR_VAR 0 7
27674: PUSH
27675: LD_VAR 0 7
27679: PUSH
27680: LD_VAR 0 14
27684: ADD
27685: ST_TO_ADDR
// end ;
27686: GO 27564
27688: POP
27689: POP
// end ; end ;
27690: LD_VAR 0 7
27694: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27695: LD_INT 0
27697: PPUSH
27698: PPUSH
27699: PPUSH
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
27712: PPUSH
// result := false ;
27713: LD_ADDR_VAR 0 3
27717: PUSH
27718: LD_INT 0
27720: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27721: LD_VAR 0 1
27725: NOT
27726: PUSH
27727: LD_VAR 0 1
27731: PPUSH
27732: CALL_OW 266
27736: PUSH
27737: LD_INT 32
27739: PUSH
27740: LD_INT 33
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: IN
27747: NOT
27748: OR
27749: IFFALSE 27753
// exit ;
27751: GO 28862
// nat := GetNation ( tower ) ;
27753: LD_ADDR_VAR 0 12
27757: PUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL_OW 248
27767: ST_TO_ADDR
// side := GetSide ( tower ) ;
27768: LD_ADDR_VAR 0 16
27772: PUSH
27773: LD_VAR 0 1
27777: PPUSH
27778: CALL_OW 255
27782: ST_TO_ADDR
// x := GetX ( tower ) ;
27783: LD_ADDR_VAR 0 10
27787: PUSH
27788: LD_VAR 0 1
27792: PPUSH
27793: CALL_OW 250
27797: ST_TO_ADDR
// y := GetY ( tower ) ;
27798: LD_ADDR_VAR 0 11
27802: PUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 251
27812: ST_TO_ADDR
// if not x or not y then
27813: LD_VAR 0 10
27817: NOT
27818: PUSH
27819: LD_VAR 0 11
27823: NOT
27824: OR
27825: IFFALSE 27829
// exit ;
27827: GO 28862
// weapon := 0 ;
27829: LD_ADDR_VAR 0 18
27833: PUSH
27834: LD_INT 0
27836: ST_TO_ADDR
// fac_list := [ ] ;
27837: LD_ADDR_VAR 0 17
27841: PUSH
27842: EMPTY
27843: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27844: LD_ADDR_VAR 0 6
27848: PUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 274
27858: PPUSH
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_INT 0
27866: PPUSH
27867: CALL 25433 0 3
27871: PPUSH
27872: LD_INT 30
27874: PUSH
27875: LD_INT 3
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PPUSH
27882: CALL_OW 72
27886: ST_TO_ADDR
// if not factories then
27887: LD_VAR 0 6
27891: NOT
27892: IFFALSE 27896
// exit ;
27894: GO 28862
// for i in factories do
27896: LD_ADDR_VAR 0 8
27900: PUSH
27901: LD_VAR 0 6
27905: PUSH
27906: FOR_IN
27907: IFFALSE 27932
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27909: LD_ADDR_VAR 0 17
27913: PUSH
27914: LD_VAR 0 17
27918: PUSH
27919: LD_VAR 0 8
27923: PPUSH
27924: CALL_OW 478
27928: UNION
27929: ST_TO_ADDR
27930: GO 27906
27932: POP
27933: POP
// if not fac_list then
27934: LD_VAR 0 17
27938: NOT
27939: IFFALSE 27943
// exit ;
27941: GO 28862
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27943: LD_ADDR_VAR 0 5
27947: PUSH
27948: LD_INT 4
27950: PUSH
27951: LD_INT 5
27953: PUSH
27954: LD_INT 9
27956: PUSH
27957: LD_INT 10
27959: PUSH
27960: LD_INT 6
27962: PUSH
27963: LD_INT 7
27965: PUSH
27966: LD_INT 11
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 27
27980: PUSH
27981: LD_INT 28
27983: PUSH
27984: LD_INT 26
27986: PUSH
27987: LD_INT 30
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 43
27998: PUSH
27999: LD_INT 44
28001: PUSH
28002: LD_INT 46
28004: PUSH
28005: LD_INT 45
28007: PUSH
28008: LD_INT 47
28010: PUSH
28011: LD_INT 49
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: PUSH
28027: LD_VAR 0 12
28031: ARRAY
28032: ST_TO_ADDR
// list := list isect fac_list ;
28033: LD_ADDR_VAR 0 5
28037: PUSH
28038: LD_VAR 0 5
28042: PUSH
28043: LD_VAR 0 17
28047: ISECT
28048: ST_TO_ADDR
// if not list then
28049: LD_VAR 0 5
28053: NOT
28054: IFFALSE 28058
// exit ;
28056: GO 28862
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28058: LD_VAR 0 12
28062: PUSH
28063: LD_INT 3
28065: EQUAL
28066: PUSH
28067: LD_INT 49
28069: PUSH
28070: LD_VAR 0 5
28074: IN
28075: AND
28076: PUSH
28077: LD_INT 31
28079: PPUSH
28080: LD_VAR 0 16
28084: PPUSH
28085: CALL_OW 321
28089: PUSH
28090: LD_INT 2
28092: EQUAL
28093: AND
28094: IFFALSE 28154
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28096: LD_INT 22
28098: PUSH
28099: LD_VAR 0 16
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 35
28110: PUSH
28111: LD_INT 49
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 91
28120: PUSH
28121: LD_VAR 0 1
28125: PUSH
28126: LD_INT 10
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: PPUSH
28139: CALL_OW 69
28143: NOT
28144: IFFALSE 28154
// weapon := ru_time_lapser ;
28146: LD_ADDR_VAR 0 18
28150: PUSH
28151: LD_INT 49
28153: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28154: LD_VAR 0 12
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: IN
28169: PUSH
28170: LD_INT 11
28172: PUSH
28173: LD_VAR 0 5
28177: IN
28178: PUSH
28179: LD_INT 30
28181: PUSH
28182: LD_VAR 0 5
28186: IN
28187: OR
28188: AND
28189: PUSH
28190: LD_INT 6
28192: PPUSH
28193: LD_VAR 0 16
28197: PPUSH
28198: CALL_OW 321
28202: PUSH
28203: LD_INT 2
28205: EQUAL
28206: AND
28207: IFFALSE 28372
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28209: LD_INT 22
28211: PUSH
28212: LD_VAR 0 16
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: LD_INT 35
28226: PUSH
28227: LD_INT 11
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 35
28236: PUSH
28237: LD_INT 30
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 91
28251: PUSH
28252: LD_VAR 0 1
28256: PUSH
28257: LD_INT 18
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: PPUSH
28270: CALL_OW 69
28274: NOT
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_VAR 0 16
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 30
28293: PUSH
28294: LD_INT 32
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 30
28303: PUSH
28304: LD_INT 33
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 91
28318: PUSH
28319: LD_VAR 0 1
28323: PUSH
28324: LD_INT 12
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: PUSH
28337: EMPTY
28338: LIST
28339: PPUSH
28340: CALL_OW 69
28344: PUSH
28345: LD_INT 2
28347: GREATER
28348: AND
28349: IFFALSE 28372
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28351: LD_ADDR_VAR 0 18
28355: PUSH
28356: LD_INT 11
28358: PUSH
28359: LD_INT 30
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_VAR 0 12
28370: ARRAY
28371: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28372: LD_VAR 0 18
28376: NOT
28377: PUSH
28378: LD_INT 40
28380: PPUSH
28381: LD_VAR 0 16
28385: PPUSH
28386: CALL_OW 321
28390: PUSH
28391: LD_INT 2
28393: EQUAL
28394: AND
28395: PUSH
28396: LD_INT 7
28398: PUSH
28399: LD_VAR 0 5
28403: IN
28404: PUSH
28405: LD_INT 28
28407: PUSH
28408: LD_VAR 0 5
28412: IN
28413: OR
28414: PUSH
28415: LD_INT 45
28417: PUSH
28418: LD_VAR 0 5
28422: IN
28423: OR
28424: AND
28425: IFFALSE 28679
// begin hex := GetHexInfo ( x , y ) ;
28427: LD_ADDR_VAR 0 4
28431: PUSH
28432: LD_VAR 0 10
28436: PPUSH
28437: LD_VAR 0 11
28441: PPUSH
28442: CALL_OW 546
28446: ST_TO_ADDR
// if hex [ 1 ] then
28447: LD_VAR 0 4
28451: PUSH
28452: LD_INT 1
28454: ARRAY
28455: IFFALSE 28459
// exit ;
28457: GO 28862
// height := hex [ 2 ] ;
28459: LD_ADDR_VAR 0 15
28463: PUSH
28464: LD_VAR 0 4
28468: PUSH
28469: LD_INT 2
28471: ARRAY
28472: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28473: LD_ADDR_VAR 0 14
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: LD_INT 5
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// for i in tmp do
28496: LD_ADDR_VAR 0 8
28500: PUSH
28501: LD_VAR 0 14
28505: PUSH
28506: FOR_IN
28507: IFFALSE 28677
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_VAR 0 10
28518: PPUSH
28519: LD_VAR 0 8
28523: PPUSH
28524: LD_INT 5
28526: PPUSH
28527: CALL_OW 272
28531: PUSH
28532: LD_VAR 0 11
28536: PPUSH
28537: LD_VAR 0 8
28541: PPUSH
28542: LD_INT 5
28544: PPUSH
28545: CALL_OW 273
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28554: LD_VAR 0 9
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: PPUSH
28563: LD_VAR 0 9
28567: PUSH
28568: LD_INT 2
28570: ARRAY
28571: PPUSH
28572: CALL_OW 488
28576: IFFALSE 28675
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28578: LD_ADDR_VAR 0 4
28582: PUSH
28583: LD_VAR 0 9
28587: PUSH
28588: LD_INT 1
28590: ARRAY
28591: PPUSH
28592: LD_VAR 0 9
28596: PUSH
28597: LD_INT 2
28599: ARRAY
28600: PPUSH
28601: CALL_OW 546
28605: ST_TO_ADDR
// if hex [ 1 ] then
28606: LD_VAR 0 4
28610: PUSH
28611: LD_INT 1
28613: ARRAY
28614: IFFALSE 28618
// continue ;
28616: GO 28506
// h := hex [ 2 ] ;
28618: LD_ADDR_VAR 0 13
28622: PUSH
28623: LD_VAR 0 4
28627: PUSH
28628: LD_INT 2
28630: ARRAY
28631: ST_TO_ADDR
// if h + 7 < height then
28632: LD_VAR 0 13
28636: PUSH
28637: LD_INT 7
28639: PLUS
28640: PUSH
28641: LD_VAR 0 15
28645: LESS
28646: IFFALSE 28675
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28648: LD_ADDR_VAR 0 18
28652: PUSH
28653: LD_INT 7
28655: PUSH
28656: LD_INT 28
28658: PUSH
28659: LD_INT 45
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: PUSH
28667: LD_VAR 0 12
28671: ARRAY
28672: ST_TO_ADDR
// break ;
28673: GO 28677
// end ; end ; end ;
28675: GO 28506
28677: POP
28678: POP
// end ; if not weapon then
28679: LD_VAR 0 18
28683: NOT
28684: IFFALSE 28744
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28686: LD_ADDR_VAR 0 5
28690: PUSH
28691: LD_VAR 0 5
28695: PUSH
28696: LD_INT 11
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 49
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: DIFF
28710: ST_TO_ADDR
// if not list then
28711: LD_VAR 0 5
28715: NOT
28716: IFFALSE 28720
// exit ;
28718: GO 28862
// weapon := list [ rand ( 1 , list ) ] ;
28720: LD_ADDR_VAR 0 18
28724: PUSH
28725: LD_VAR 0 5
28729: PUSH
28730: LD_INT 1
28732: PPUSH
28733: LD_VAR 0 5
28737: PPUSH
28738: CALL_OW 12
28742: ARRAY
28743: ST_TO_ADDR
// end ; if weapon then
28744: LD_VAR 0 18
28748: IFFALSE 28862
// begin tmp := CostOfWeapon ( weapon ) ;
28750: LD_ADDR_VAR 0 14
28754: PUSH
28755: LD_VAR 0 18
28759: PPUSH
28760: CALL_OW 451
28764: ST_TO_ADDR
// j := GetBase ( tower ) ;
28765: LD_ADDR_VAR 0 9
28769: PUSH
28770: LD_VAR 0 1
28774: PPUSH
28775: CALL_OW 274
28779: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28780: LD_VAR 0 9
28784: PPUSH
28785: LD_INT 1
28787: PPUSH
28788: CALL_OW 275
28792: PUSH
28793: LD_VAR 0 14
28797: PUSH
28798: LD_INT 1
28800: ARRAY
28801: GREATEREQUAL
28802: PUSH
28803: LD_VAR 0 9
28807: PPUSH
28808: LD_INT 2
28810: PPUSH
28811: CALL_OW 275
28815: PUSH
28816: LD_VAR 0 14
28820: PUSH
28821: LD_INT 2
28823: ARRAY
28824: GREATEREQUAL
28825: AND
28826: PUSH
28827: LD_VAR 0 9
28831: PPUSH
28832: LD_INT 3
28834: PPUSH
28835: CALL_OW 275
28839: PUSH
28840: LD_VAR 0 14
28844: PUSH
28845: LD_INT 3
28847: ARRAY
28848: GREATEREQUAL
28849: AND
28850: IFFALSE 28862
// result := weapon ;
28852: LD_ADDR_VAR 0 3
28856: PUSH
28857: LD_VAR 0 18
28861: ST_TO_ADDR
// end ; end ;
28862: LD_VAR 0 3
28866: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28867: LD_INT 0
28869: PPUSH
28870: PPUSH
// result := true ;
28871: LD_ADDR_VAR 0 3
28875: PUSH
28876: LD_INT 1
28878: ST_TO_ADDR
// if array1 = array2 then
28879: LD_VAR 0 1
28883: PUSH
28884: LD_VAR 0 2
28888: EQUAL
28889: IFFALSE 28949
// begin for i = 1 to array1 do
28891: LD_ADDR_VAR 0 4
28895: PUSH
28896: DOUBLE
28897: LD_INT 1
28899: DEC
28900: ST_TO_ADDR
28901: LD_VAR 0 1
28905: PUSH
28906: FOR_TO
28907: IFFALSE 28945
// if array1 [ i ] <> array2 [ i ] then
28909: LD_VAR 0 1
28913: PUSH
28914: LD_VAR 0 4
28918: ARRAY
28919: PUSH
28920: LD_VAR 0 2
28924: PUSH
28925: LD_VAR 0 4
28929: ARRAY
28930: NONEQUAL
28931: IFFALSE 28943
// begin result := false ;
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_INT 0
28940: ST_TO_ADDR
// break ;
28941: GO 28945
// end ;
28943: GO 28906
28945: POP
28946: POP
// end else
28947: GO 28957
// result := false ;
28949: LD_ADDR_VAR 0 3
28953: PUSH
28954: LD_INT 0
28956: ST_TO_ADDR
// end ;
28957: LD_VAR 0 3
28961: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28962: LD_INT 0
28964: PPUSH
28965: PPUSH
// if not array1 or not array2 then
28966: LD_VAR 0 1
28970: NOT
28971: PUSH
28972: LD_VAR 0 2
28976: NOT
28977: OR
28978: IFFALSE 28982
// exit ;
28980: GO 29046
// result := true ;
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: LD_INT 1
28989: ST_TO_ADDR
// for i = 1 to array1 do
28990: LD_ADDR_VAR 0 4
28994: PUSH
28995: DOUBLE
28996: LD_INT 1
28998: DEC
28999: ST_TO_ADDR
29000: LD_VAR 0 1
29004: PUSH
29005: FOR_TO
29006: IFFALSE 29044
// if array1 [ i ] <> array2 [ i ] then
29008: LD_VAR 0 1
29012: PUSH
29013: LD_VAR 0 4
29017: ARRAY
29018: PUSH
29019: LD_VAR 0 2
29023: PUSH
29024: LD_VAR 0 4
29028: ARRAY
29029: NONEQUAL
29030: IFFALSE 29042
// begin result := false ;
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 0
29039: ST_TO_ADDR
// break ;
29040: GO 29044
// end ;
29042: GO 29005
29044: POP
29045: POP
// end ;
29046: LD_VAR 0 3
29050: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29051: LD_INT 0
29053: PPUSH
29054: PPUSH
29055: PPUSH
// pom := GetBase ( fac ) ;
29056: LD_ADDR_VAR 0 5
29060: PUSH
29061: LD_VAR 0 1
29065: PPUSH
29066: CALL_OW 274
29070: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29071: LD_ADDR_VAR 0 4
29075: PUSH
29076: LD_VAR 0 2
29080: PUSH
29081: LD_INT 1
29083: ARRAY
29084: PPUSH
29085: LD_VAR 0 2
29089: PUSH
29090: LD_INT 2
29092: ARRAY
29093: PPUSH
29094: LD_VAR 0 2
29098: PUSH
29099: LD_INT 3
29101: ARRAY
29102: PPUSH
29103: LD_VAR 0 2
29107: PUSH
29108: LD_INT 4
29110: ARRAY
29111: PPUSH
29112: CALL_OW 449
29116: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29117: LD_ADDR_VAR 0 3
29121: PUSH
29122: LD_VAR 0 5
29126: PPUSH
29127: LD_INT 1
29129: PPUSH
29130: CALL_OW 275
29134: PUSH
29135: LD_VAR 0 4
29139: PUSH
29140: LD_INT 1
29142: ARRAY
29143: GREATEREQUAL
29144: PUSH
29145: LD_VAR 0 5
29149: PPUSH
29150: LD_INT 2
29152: PPUSH
29153: CALL_OW 275
29157: PUSH
29158: LD_VAR 0 4
29162: PUSH
29163: LD_INT 2
29165: ARRAY
29166: GREATEREQUAL
29167: AND
29168: PUSH
29169: LD_VAR 0 5
29173: PPUSH
29174: LD_INT 3
29176: PPUSH
29177: CALL_OW 275
29181: PUSH
29182: LD_VAR 0 4
29186: PUSH
29187: LD_INT 3
29189: ARRAY
29190: GREATEREQUAL
29191: AND
29192: ST_TO_ADDR
// end ;
29193: LD_VAR 0 3
29197: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
29202: PPUSH
29203: PPUSH
// pom := GetBase ( building ) ;
29204: LD_ADDR_VAR 0 3
29208: PUSH
29209: LD_VAR 0 1
29213: PPUSH
29214: CALL_OW 274
29218: ST_TO_ADDR
// if not pom then
29219: LD_VAR 0 3
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29398
// btype := GetBType ( building ) ;
29228: LD_ADDR_VAR 0 5
29232: PUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 266
29242: ST_TO_ADDR
// if btype = b_armoury then
29243: LD_VAR 0 5
29247: PUSH
29248: LD_INT 4
29250: EQUAL
29251: IFFALSE 29261
// btype := b_barracks ;
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_INT 5
29260: ST_TO_ADDR
// if btype = b_depot then
29261: LD_VAR 0 5
29265: PUSH
29266: LD_INT 0
29268: EQUAL
29269: IFFALSE 29279
// btype := b_warehouse ;
29271: LD_ADDR_VAR 0 5
29275: PUSH
29276: LD_INT 1
29278: ST_TO_ADDR
// if btype = b_workshop then
29279: LD_VAR 0 5
29283: PUSH
29284: LD_INT 2
29286: EQUAL
29287: IFFALSE 29297
// btype := b_factory ;
29289: LD_ADDR_VAR 0 5
29293: PUSH
29294: LD_INT 3
29296: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29297: LD_ADDR_VAR 0 4
29301: PUSH
29302: LD_VAR 0 5
29306: PPUSH
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 248
29316: PPUSH
29317: CALL_OW 450
29321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: LD_VAR 0 3
29331: PPUSH
29332: LD_INT 1
29334: PPUSH
29335: CALL_OW 275
29339: PUSH
29340: LD_VAR 0 4
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: GREATEREQUAL
29349: PUSH
29350: LD_VAR 0 3
29354: PPUSH
29355: LD_INT 2
29357: PPUSH
29358: CALL_OW 275
29362: PUSH
29363: LD_VAR 0 4
29367: PUSH
29368: LD_INT 2
29370: ARRAY
29371: GREATEREQUAL
29372: AND
29373: PUSH
29374: LD_VAR 0 3
29378: PPUSH
29379: LD_INT 3
29381: PPUSH
29382: CALL_OW 275
29386: PUSH
29387: LD_VAR 0 4
29391: PUSH
29392: LD_INT 3
29394: ARRAY
29395: GREATEREQUAL
29396: AND
29397: ST_TO_ADDR
// end ;
29398: LD_VAR 0 2
29402: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29403: LD_INT 0
29405: PPUSH
29406: PPUSH
29407: PPUSH
// pom := GetBase ( building ) ;
29408: LD_ADDR_VAR 0 4
29412: PUSH
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 274
29422: ST_TO_ADDR
// if not pom then
29423: LD_VAR 0 4
29427: NOT
29428: IFFALSE 29432
// exit ;
29430: GO 29533
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29432: LD_ADDR_VAR 0 5
29436: PUSH
29437: LD_VAR 0 2
29441: PPUSH
29442: LD_VAR 0 1
29446: PPUSH
29447: CALL_OW 248
29451: PPUSH
29452: CALL_OW 450
29456: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29457: LD_ADDR_VAR 0 3
29461: PUSH
29462: LD_VAR 0 4
29466: PPUSH
29467: LD_INT 1
29469: PPUSH
29470: CALL_OW 275
29474: PUSH
29475: LD_VAR 0 5
29479: PUSH
29480: LD_INT 1
29482: ARRAY
29483: GREATEREQUAL
29484: PUSH
29485: LD_VAR 0 4
29489: PPUSH
29490: LD_INT 2
29492: PPUSH
29493: CALL_OW 275
29497: PUSH
29498: LD_VAR 0 5
29502: PUSH
29503: LD_INT 2
29505: ARRAY
29506: GREATEREQUAL
29507: AND
29508: PUSH
29509: LD_VAR 0 4
29513: PPUSH
29514: LD_INT 3
29516: PPUSH
29517: CALL_OW 275
29521: PUSH
29522: LD_VAR 0 5
29526: PUSH
29527: LD_INT 3
29529: ARRAY
29530: GREATEREQUAL
29531: AND
29532: ST_TO_ADDR
// end ;
29533: LD_VAR 0 3
29537: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29538: LD_INT 0
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
29550: PPUSH
// result := false ;
29551: LD_ADDR_VAR 0 8
29555: PUSH
29556: LD_INT 0
29558: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29559: LD_VAR 0 5
29563: NOT
29564: PUSH
29565: LD_VAR 0 1
29569: NOT
29570: OR
29571: PUSH
29572: LD_VAR 0 2
29576: NOT
29577: OR
29578: PUSH
29579: LD_VAR 0 3
29583: NOT
29584: OR
29585: IFFALSE 29589
// exit ;
29587: GO 30403
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29589: LD_ADDR_VAR 0 14
29593: PUSH
29594: LD_VAR 0 1
29598: PPUSH
29599: LD_VAR 0 2
29603: PPUSH
29604: LD_VAR 0 3
29608: PPUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: LD_VAR 0 5
29618: PUSH
29619: LD_INT 1
29621: ARRAY
29622: PPUSH
29623: CALL_OW 248
29627: PPUSH
29628: LD_INT 0
29630: PPUSH
29631: CALL 31656 0 6
29635: ST_TO_ADDR
// if not hexes then
29636: LD_VAR 0 14
29640: NOT
29641: IFFALSE 29645
// exit ;
29643: GO 30403
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29645: LD_ADDR_VAR 0 17
29649: PUSH
29650: LD_VAR 0 5
29654: PPUSH
29655: LD_INT 22
29657: PUSH
29658: LD_VAR 0 13
29662: PPUSH
29663: CALL_OW 255
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 30
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 72
29708: ST_TO_ADDR
// for i = 1 to hexes do
29709: LD_ADDR_VAR 0 9
29713: PUSH
29714: DOUBLE
29715: LD_INT 1
29717: DEC
29718: ST_TO_ADDR
29719: LD_VAR 0 14
29723: PUSH
29724: FOR_TO
29725: IFFALSE 30401
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29727: LD_ADDR_VAR 0 13
29731: PUSH
29732: LD_VAR 0 14
29736: PUSH
29737: LD_VAR 0 9
29741: ARRAY
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_VAR 0 14
29751: PUSH
29752: LD_VAR 0 9
29756: ARRAY
29757: PUSH
29758: LD_INT 2
29760: ARRAY
29761: PPUSH
29762: CALL_OW 428
29766: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29767: LD_VAR 0 14
29771: PUSH
29772: LD_VAR 0 9
29776: ARRAY
29777: PUSH
29778: LD_INT 1
29780: ARRAY
29781: PPUSH
29782: LD_VAR 0 14
29786: PUSH
29787: LD_VAR 0 9
29791: ARRAY
29792: PUSH
29793: LD_INT 2
29795: ARRAY
29796: PPUSH
29797: CALL_OW 351
29801: PUSH
29802: LD_VAR 0 14
29806: PUSH
29807: LD_VAR 0 9
29811: ARRAY
29812: PUSH
29813: LD_INT 1
29815: ARRAY
29816: PPUSH
29817: LD_VAR 0 14
29821: PUSH
29822: LD_VAR 0 9
29826: ARRAY
29827: PUSH
29828: LD_INT 2
29830: ARRAY
29831: PPUSH
29832: CALL_OW 488
29836: NOT
29837: OR
29838: PUSH
29839: LD_VAR 0 13
29843: PPUSH
29844: CALL_OW 247
29848: PUSH
29849: LD_INT 3
29851: EQUAL
29852: OR
29853: IFFALSE 29859
// exit ;
29855: POP
29856: POP
29857: GO 30403
// if not tmp then
29859: LD_VAR 0 13
29863: NOT
29864: IFFALSE 29868
// continue ;
29866: GO 29724
// result := true ;
29868: LD_ADDR_VAR 0 8
29872: PUSH
29873: LD_INT 1
29875: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29876: LD_VAR 0 6
29880: PUSH
29881: LD_VAR 0 13
29885: PPUSH
29886: CALL_OW 247
29890: PUSH
29891: LD_INT 2
29893: EQUAL
29894: AND
29895: PUSH
29896: LD_VAR 0 13
29900: PPUSH
29901: CALL_OW 263
29905: PUSH
29906: LD_INT 1
29908: EQUAL
29909: AND
29910: IFFALSE 30074
// begin if IsDrivenBy ( tmp ) then
29912: LD_VAR 0 13
29916: PPUSH
29917: CALL_OW 311
29921: IFFALSE 29925
// continue ;
29923: GO 29724
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29925: LD_VAR 0 6
29929: PPUSH
29930: LD_INT 3
29932: PUSH
29933: LD_INT 60
29935: PUSH
29936: EMPTY
29937: LIST
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: LD_INT 55
29948: PUSH
29949: EMPTY
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PPUSH
29960: CALL_OW 72
29964: IFFALSE 30072
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29966: LD_ADDR_VAR 0 18
29970: PUSH
29971: LD_VAR 0 6
29975: PPUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 60
29981: PUSH
29982: EMPTY
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 55
29994: PUSH
29995: EMPTY
29996: LIST
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 72
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: ST_TO_ADDR
// if IsInUnit ( driver ) then
30015: LD_VAR 0 18
30019: PPUSH
30020: CALL_OW 310
30024: IFFALSE 30035
// ComExit ( driver ) ;
30026: LD_VAR 0 18
30030: PPUSH
30031: CALL 55529 0 1
// AddComEnterUnit ( driver , tmp ) ;
30035: LD_VAR 0 18
30039: PPUSH
30040: LD_VAR 0 13
30044: PPUSH
30045: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30049: LD_VAR 0 18
30053: PPUSH
30054: LD_VAR 0 7
30058: PPUSH
30059: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30063: LD_VAR 0 18
30067: PPUSH
30068: CALL_OW 181
// end ; continue ;
30072: GO 29724
// end ; if not cleaners or not tmp in cleaners then
30074: LD_VAR 0 6
30078: NOT
30079: PUSH
30080: LD_VAR 0 13
30084: PUSH
30085: LD_VAR 0 6
30089: IN
30090: NOT
30091: OR
30092: IFFALSE 30399
// begin if dep then
30094: LD_VAR 0 17
30098: IFFALSE 30234
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30100: LD_ADDR_VAR 0 16
30104: PUSH
30105: LD_VAR 0 17
30109: PUSH
30110: LD_INT 1
30112: ARRAY
30113: PPUSH
30114: CALL_OW 250
30118: PPUSH
30119: LD_VAR 0 17
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PPUSH
30128: CALL_OW 254
30132: PPUSH
30133: LD_INT 5
30135: PPUSH
30136: CALL_OW 272
30140: PUSH
30141: LD_VAR 0 17
30145: PUSH
30146: LD_INT 1
30148: ARRAY
30149: PPUSH
30150: CALL_OW 251
30154: PPUSH
30155: LD_VAR 0 17
30159: PUSH
30160: LD_INT 1
30162: ARRAY
30163: PPUSH
30164: CALL_OW 254
30168: PPUSH
30169: LD_INT 5
30171: PPUSH
30172: CALL_OW 273
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30181: LD_VAR 0 16
30185: PUSH
30186: LD_INT 1
30188: ARRAY
30189: PPUSH
30190: LD_VAR 0 16
30194: PUSH
30195: LD_INT 2
30197: ARRAY
30198: PPUSH
30199: CALL_OW 488
30203: IFFALSE 30234
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30205: LD_VAR 0 13
30209: PPUSH
30210: LD_VAR 0 16
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: LD_VAR 0 16
30223: PUSH
30224: LD_INT 2
30226: ARRAY
30227: PPUSH
30228: CALL_OW 111
// continue ;
30232: GO 29724
// end ; end ; r := GetDir ( tmp ) ;
30234: LD_ADDR_VAR 0 15
30238: PUSH
30239: LD_VAR 0 13
30243: PPUSH
30244: CALL_OW 254
30248: ST_TO_ADDR
// if r = 5 then
30249: LD_VAR 0 15
30253: PUSH
30254: LD_INT 5
30256: EQUAL
30257: IFFALSE 30267
// r := 0 ;
30259: LD_ADDR_VAR 0 15
30263: PUSH
30264: LD_INT 0
30266: ST_TO_ADDR
// for j = r to 5 do
30267: LD_ADDR_VAR 0 10
30271: PUSH
30272: DOUBLE
30273: LD_VAR 0 15
30277: DEC
30278: ST_TO_ADDR
30279: LD_INT 5
30281: PUSH
30282: FOR_TO
30283: IFFALSE 30397
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30285: LD_ADDR_VAR 0 11
30289: PUSH
30290: LD_VAR 0 13
30294: PPUSH
30295: CALL_OW 250
30299: PPUSH
30300: LD_VAR 0 10
30304: PPUSH
30305: LD_INT 2
30307: PPUSH
30308: CALL_OW 272
30312: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30313: LD_ADDR_VAR 0 12
30317: PUSH
30318: LD_VAR 0 13
30322: PPUSH
30323: CALL_OW 251
30327: PPUSH
30328: LD_VAR 0 10
30332: PPUSH
30333: LD_INT 2
30335: PPUSH
30336: CALL_OW 273
30340: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30341: LD_VAR 0 11
30345: PPUSH
30346: LD_VAR 0 12
30350: PPUSH
30351: CALL_OW 488
30355: PUSH
30356: LD_VAR 0 11
30360: PPUSH
30361: LD_VAR 0 12
30365: PPUSH
30366: CALL_OW 428
30370: NOT
30371: AND
30372: IFFALSE 30395
// begin ComMoveXY ( tmp , _x , _y ) ;
30374: LD_VAR 0 13
30378: PPUSH
30379: LD_VAR 0 11
30383: PPUSH
30384: LD_VAR 0 12
30388: PPUSH
30389: CALL_OW 111
// break ;
30393: GO 30397
// end ; end ;
30395: GO 30282
30397: POP
30398: POP
// end ; end ;
30399: GO 29724
30401: POP
30402: POP
// end ;
30403: LD_VAR 0 8
30407: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30408: LD_INT 0
30410: PPUSH
// result := true ;
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 1
30418: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30419: LD_VAR 0 2
30423: PUSH
30424: LD_INT 24
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30438
30430: LD_INT 33
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30463
30438: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 32
30446: PPUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 321
30456: PUSH
30457: LD_INT 2
30459: EQUAL
30460: ST_TO_ADDR
30461: GO 30779
30463: LD_INT 20
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30496
30471: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: LD_INT 6
30479: PPUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 321
30489: PUSH
30490: LD_INT 2
30492: EQUAL
30493: ST_TO_ADDR
30494: GO 30779
30496: LD_INT 22
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30510
30502: LD_INT 36
30504: DOUBLE
30505: EQUAL
30506: IFTRUE 30510
30508: GO 30535
30510: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_INT 15
30518: PPUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 321
30528: PUSH
30529: LD_INT 2
30531: EQUAL
30532: ST_TO_ADDR
30533: GO 30779
30535: LD_INT 30
30537: DOUBLE
30538: EQUAL
30539: IFTRUE 30543
30541: GO 30568
30543: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30544: LD_ADDR_VAR 0 3
30548: PUSH
30549: LD_INT 20
30551: PPUSH
30552: LD_VAR 0 1
30556: PPUSH
30557: CALL_OW 321
30561: PUSH
30562: LD_INT 2
30564: EQUAL
30565: ST_TO_ADDR
30566: GO 30779
30568: LD_INT 28
30570: DOUBLE
30571: EQUAL
30572: IFTRUE 30582
30574: LD_INT 21
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30607
30582: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 21
30590: PPUSH
30591: LD_VAR 0 1
30595: PPUSH
30596: CALL_OW 321
30600: PUSH
30601: LD_INT 2
30603: EQUAL
30604: ST_TO_ADDR
30605: GO 30779
30607: LD_INT 16
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30640
30615: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30616: LD_ADDR_VAR 0 3
30620: PUSH
30621: LD_INT 84
30623: PPUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 321
30633: PUSH
30634: LD_INT 2
30636: EQUAL
30637: ST_TO_ADDR
30638: GO 30779
30640: LD_INT 19
30642: DOUBLE
30643: EQUAL
30644: IFTRUE 30654
30646: LD_INT 23
30648: DOUBLE
30649: EQUAL
30650: IFTRUE 30654
30652: GO 30679
30654: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30655: LD_ADDR_VAR 0 3
30659: PUSH
30660: LD_INT 83
30662: PPUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 321
30672: PUSH
30673: LD_INT 2
30675: EQUAL
30676: ST_TO_ADDR
30677: GO 30779
30679: LD_INT 17
30681: DOUBLE
30682: EQUAL
30683: IFTRUE 30687
30685: GO 30712
30687: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30688: LD_ADDR_VAR 0 3
30692: PUSH
30693: LD_INT 39
30695: PPUSH
30696: LD_VAR 0 1
30700: PPUSH
30701: CALL_OW 321
30705: PUSH
30706: LD_INT 2
30708: EQUAL
30709: ST_TO_ADDR
30710: GO 30779
30712: LD_INT 18
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30745
30720: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 40
30728: PPUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 321
30738: PUSH
30739: LD_INT 2
30741: EQUAL
30742: ST_TO_ADDR
30743: GO 30779
30745: LD_INT 27
30747: DOUBLE
30748: EQUAL
30749: IFTRUE 30753
30751: GO 30778
30753: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30754: LD_ADDR_VAR 0 3
30758: PUSH
30759: LD_INT 35
30761: PPUSH
30762: LD_VAR 0 1
30766: PPUSH
30767: CALL_OW 321
30771: PUSH
30772: LD_INT 2
30774: EQUAL
30775: ST_TO_ADDR
30776: GO 30779
30778: POP
// end ;
30779: LD_VAR 0 3
30783: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30784: LD_INT 0
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
// result := false ;
30797: LD_ADDR_VAR 0 6
30801: PUSH
30802: LD_INT 0
30804: ST_TO_ADDR
// if btype = b_depot then
30805: LD_VAR 0 2
30809: PUSH
30810: LD_INT 0
30812: EQUAL
30813: IFFALSE 30825
// begin result := true ;
30815: LD_ADDR_VAR 0 6
30819: PUSH
30820: LD_INT 1
30822: ST_TO_ADDR
// exit ;
30823: GO 31651
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30825: LD_VAR 0 1
30829: NOT
30830: PUSH
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 266
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: IN
30851: NOT
30852: OR
30853: PUSH
30854: LD_VAR 0 2
30858: NOT
30859: OR
30860: PUSH
30861: LD_VAR 0 5
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: LD_INT 4
30880: PUSH
30881: LD_INT 5
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: IN
30892: NOT
30893: OR
30894: PUSH
30895: LD_VAR 0 3
30899: PPUSH
30900: LD_VAR 0 4
30904: PPUSH
30905: CALL_OW 488
30909: NOT
30910: OR
30911: IFFALSE 30915
// exit ;
30913: GO 31651
// side := GetSide ( depot ) ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 255
30929: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30930: LD_VAR 0 9
30934: PPUSH
30935: LD_VAR 0 2
30939: PPUSH
30940: CALL 30408 0 2
30944: NOT
30945: IFFALSE 30949
// exit ;
30947: GO 31651
// pom := GetBase ( depot ) ;
30949: LD_ADDR_VAR 0 10
30953: PUSH
30954: LD_VAR 0 1
30958: PPUSH
30959: CALL_OW 274
30963: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30964: LD_ADDR_VAR 0 11
30968: PUSH
30969: LD_VAR 0 2
30973: PPUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 248
30983: PPUSH
30984: CALL_OW 450
30988: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30989: LD_VAR 0 10
30993: PPUSH
30994: LD_INT 1
30996: PPUSH
30997: CALL_OW 275
31001: PUSH
31002: LD_VAR 0 11
31006: PUSH
31007: LD_INT 1
31009: ARRAY
31010: GREATEREQUAL
31011: PUSH
31012: LD_VAR 0 10
31016: PPUSH
31017: LD_INT 2
31019: PPUSH
31020: CALL_OW 275
31024: PUSH
31025: LD_VAR 0 11
31029: PUSH
31030: LD_INT 2
31032: ARRAY
31033: GREATEREQUAL
31034: AND
31035: PUSH
31036: LD_VAR 0 10
31040: PPUSH
31041: LD_INT 3
31043: PPUSH
31044: CALL_OW 275
31048: PUSH
31049: LD_VAR 0 11
31053: PUSH
31054: LD_INT 3
31056: ARRAY
31057: GREATEREQUAL
31058: AND
31059: NOT
31060: IFFALSE 31064
// exit ;
31062: GO 31651
// if GetBType ( depot ) = b_depot then
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 266
31073: PUSH
31074: LD_INT 0
31076: EQUAL
31077: IFFALSE 31089
// dist := 28 else
31079: LD_ADDR_VAR 0 14
31083: PUSH
31084: LD_INT 28
31086: ST_TO_ADDR
31087: GO 31097
// dist := 36 ;
31089: LD_ADDR_VAR 0 14
31093: PUSH
31094: LD_INT 36
31096: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31097: LD_VAR 0 1
31101: PPUSH
31102: LD_VAR 0 3
31106: PPUSH
31107: LD_VAR 0 4
31111: PPUSH
31112: CALL_OW 297
31116: PUSH
31117: LD_VAR 0 14
31121: GREATER
31122: IFFALSE 31126
// exit ;
31124: GO 31651
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31126: LD_ADDR_VAR 0 12
31130: PUSH
31131: LD_VAR 0 2
31135: PPUSH
31136: LD_VAR 0 3
31140: PPUSH
31141: LD_VAR 0 4
31145: PPUSH
31146: LD_VAR 0 5
31150: PPUSH
31151: LD_VAR 0 1
31155: PPUSH
31156: CALL_OW 248
31160: PPUSH
31161: LD_INT 0
31163: PPUSH
31164: CALL 31656 0 6
31168: ST_TO_ADDR
// if not hexes then
31169: LD_VAR 0 12
31173: NOT
31174: IFFALSE 31178
// exit ;
31176: GO 31651
// hex := GetHexInfo ( x , y ) ;
31178: LD_ADDR_VAR 0 15
31182: PUSH
31183: LD_VAR 0 3
31187: PPUSH
31188: LD_VAR 0 4
31192: PPUSH
31193: CALL_OW 546
31197: ST_TO_ADDR
// if hex [ 1 ] then
31198: LD_VAR 0 15
31202: PUSH
31203: LD_INT 1
31205: ARRAY
31206: IFFALSE 31210
// exit ;
31208: GO 31651
// height := hex [ 2 ] ;
31210: LD_ADDR_VAR 0 13
31214: PUSH
31215: LD_VAR 0 15
31219: PUSH
31220: LD_INT 2
31222: ARRAY
31223: ST_TO_ADDR
// for i = 1 to hexes do
31224: LD_ADDR_VAR 0 7
31228: PUSH
31229: DOUBLE
31230: LD_INT 1
31232: DEC
31233: ST_TO_ADDR
31234: LD_VAR 0 12
31238: PUSH
31239: FOR_TO
31240: IFFALSE 31570
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31242: LD_VAR 0 12
31246: PUSH
31247: LD_VAR 0 7
31251: ARRAY
31252: PUSH
31253: LD_INT 1
31255: ARRAY
31256: PPUSH
31257: LD_VAR 0 12
31261: PUSH
31262: LD_VAR 0 7
31266: ARRAY
31267: PUSH
31268: LD_INT 2
31270: ARRAY
31271: PPUSH
31272: CALL_OW 488
31276: NOT
31277: PUSH
31278: LD_VAR 0 12
31282: PUSH
31283: LD_VAR 0 7
31287: ARRAY
31288: PUSH
31289: LD_INT 1
31291: ARRAY
31292: PPUSH
31293: LD_VAR 0 12
31297: PUSH
31298: LD_VAR 0 7
31302: ARRAY
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: PPUSH
31308: CALL_OW 428
31312: PUSH
31313: LD_INT 0
31315: GREATER
31316: OR
31317: PUSH
31318: LD_VAR 0 12
31322: PUSH
31323: LD_VAR 0 7
31327: ARRAY
31328: PUSH
31329: LD_INT 1
31331: ARRAY
31332: PPUSH
31333: LD_VAR 0 12
31337: PUSH
31338: LD_VAR 0 7
31342: ARRAY
31343: PUSH
31344: LD_INT 2
31346: ARRAY
31347: PPUSH
31348: CALL_OW 351
31352: OR
31353: IFFALSE 31359
// exit ;
31355: POP
31356: POP
31357: GO 31651
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31359: LD_ADDR_VAR 0 8
31363: PUSH
31364: LD_VAR 0 12
31368: PUSH
31369: LD_VAR 0 7
31373: ARRAY
31374: PUSH
31375: LD_INT 1
31377: ARRAY
31378: PPUSH
31379: LD_VAR 0 12
31383: PUSH
31384: LD_VAR 0 7
31388: ARRAY
31389: PUSH
31390: LD_INT 2
31392: ARRAY
31393: PPUSH
31394: CALL_OW 546
31398: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31399: LD_VAR 0 8
31403: PUSH
31404: LD_INT 1
31406: ARRAY
31407: PUSH
31408: LD_VAR 0 8
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PUSH
31417: LD_VAR 0 13
31421: PUSH
31422: LD_INT 2
31424: PLUS
31425: GREATER
31426: OR
31427: PUSH
31428: LD_VAR 0 8
31432: PUSH
31433: LD_INT 2
31435: ARRAY
31436: PUSH
31437: LD_VAR 0 13
31441: PUSH
31442: LD_INT 2
31444: MINUS
31445: LESS
31446: OR
31447: PUSH
31448: LD_VAR 0 8
31452: PUSH
31453: LD_INT 3
31455: ARRAY
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 8
31462: PUSH
31463: LD_INT 9
31465: PUSH
31466: LD_INT 10
31468: PUSH
31469: LD_INT 11
31471: PUSH
31472: LD_INT 12
31474: PUSH
31475: LD_INT 13
31477: PUSH
31478: LD_INT 16
31480: PUSH
31481: LD_INT 17
31483: PUSH
31484: LD_INT 18
31486: PUSH
31487: LD_INT 19
31489: PUSH
31490: LD_INT 20
31492: PUSH
31493: LD_INT 21
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: IN
31511: NOT
31512: OR
31513: PUSH
31514: LD_VAR 0 8
31518: PUSH
31519: LD_INT 5
31521: ARRAY
31522: NOT
31523: OR
31524: PUSH
31525: LD_VAR 0 8
31529: PUSH
31530: LD_INT 6
31532: ARRAY
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: LD_INT 7
31542: PUSH
31543: LD_INT 9
31545: PUSH
31546: LD_INT 10
31548: PUSH
31549: LD_INT 11
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: IN
31560: NOT
31561: OR
31562: IFFALSE 31568
// exit ;
31564: POP
31565: POP
31566: GO 31651
// end ;
31568: GO 31239
31570: POP
31571: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31572: LD_VAR 0 9
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: LD_VAR 0 4
31586: PPUSH
31587: LD_INT 20
31589: PPUSH
31590: CALL 23574 0 4
31594: PUSH
31595: LD_INT 4
31597: ARRAY
31598: IFFALSE 31602
// exit ;
31600: GO 31651
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31602: LD_VAR 0 2
31606: PUSH
31607: LD_INT 29
31609: PUSH
31610: LD_INT 30
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: IN
31617: PUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: LD_VAR 0 4
31627: PPUSH
31628: LD_VAR 0 9
31632: PPUSH
31633: CALL_OW 440
31637: NOT
31638: AND
31639: IFFALSE 31643
// exit ;
31641: GO 31651
// result := true ;
31643: LD_ADDR_VAR 0 6
31647: PUSH
31648: LD_INT 1
31650: ST_TO_ADDR
// end ;
31651: LD_VAR 0 6
31655: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
31665: PPUSH
31666: PPUSH
31667: PPUSH
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
31694: PPUSH
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
31707: PPUSH
31708: PPUSH
31709: PPUSH
31710: PPUSH
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
// result = [ ] ;
31716: LD_ADDR_VAR 0 7
31720: PUSH
31721: EMPTY
31722: ST_TO_ADDR
// temp_list = [ ] ;
31723: LD_ADDR_VAR 0 9
31727: PUSH
31728: EMPTY
31729: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31730: LD_VAR 0 4
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: LD_INT 5
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: IN
31761: NOT
31762: PUSH
31763: LD_VAR 0 1
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: IN
31778: PUSH
31779: LD_VAR 0 5
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: IN
31798: NOT
31799: AND
31800: OR
31801: IFFALSE 31805
// exit ;
31803: GO 50196
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31805: LD_VAR 0 1
31809: PUSH
31810: LD_INT 6
31812: PUSH
31813: LD_INT 7
31815: PUSH
31816: LD_INT 8
31818: PUSH
31819: LD_INT 13
31821: PUSH
31822: LD_INT 12
31824: PUSH
31825: LD_INT 15
31827: PUSH
31828: LD_INT 11
31830: PUSH
31831: LD_INT 14
31833: PUSH
31834: LD_INT 10
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: IN
31848: IFFALSE 31858
// btype = b_lab ;
31850: LD_ADDR_VAR 0 1
31854: PUSH
31855: LD_INT 6
31857: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31858: LD_VAR 0 6
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: IN
31877: NOT
31878: PUSH
31879: LD_VAR 0 1
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: LD_INT 3
31895: PUSH
31896: LD_INT 6
31898: PUSH
31899: LD_INT 36
31901: PUSH
31902: LD_INT 4
31904: PUSH
31905: LD_INT 5
31907: PUSH
31908: LD_INT 31
31910: PUSH
31911: LD_INT 32
31913: PUSH
31914: LD_INT 33
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: IN
31930: NOT
31931: PUSH
31932: LD_VAR 0 6
31936: PUSH
31937: LD_INT 1
31939: EQUAL
31940: AND
31941: OR
31942: PUSH
31943: LD_VAR 0 1
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: IN
31958: NOT
31959: PUSH
31960: LD_VAR 0 6
31964: PUSH
31965: LD_INT 2
31967: EQUAL
31968: AND
31969: OR
31970: IFFALSE 31980
// mode = 0 ;
31972: LD_ADDR_VAR 0 6
31976: PUSH
31977: LD_INT 0
31979: ST_TO_ADDR
// case mode of 0 :
31980: LD_VAR 0 6
31984: PUSH
31985: LD_INT 0
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 43446
31993: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31994: LD_ADDR_VAR 0 11
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32187: LD_ADDR_VAR 0 12
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 3
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32383: LD_ADDR_VAR 0 13
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: NEG
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 3
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32582: LD_ADDR_VAR 0 14
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: LD_INT 2
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32778: LD_ADDR_VAR 0 15
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32971: LD_ADDR_VAR 0 16
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 3
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33164: LD_ADDR_VAR 0 17
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33394: LD_ADDR_VAR 0 18
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 2
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: LD_INT 2
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: NEG
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33624: LD_ADDR_VAR 0 19
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: NEG
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33854: LD_ADDR_VAR 0 20
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: LD_INT 2
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: NEG
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34084: LD_ADDR_VAR 0 21
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 2
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 2
34260: NEG
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 2
34271: NEG
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: LD_INT 2
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34314: LD_ADDR_VAR 0 22
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: LD_INT 2
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34544: LD_ADDR_VAR 0 23
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 2
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 2
34755: NEG
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: LD_INT 3
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34824: LD_ADDR_VAR 0 24
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: NEG
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 2
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: NEG
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35100: LD_ADDR_VAR 0 25
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: NEG
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 3
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35374: LD_ADDR_VAR 0 26
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 3
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 3
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35650: LD_ADDR_VAR 0 27
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 2
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 2
35872: NEG
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 3
35883: NEG
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 3
35895: NEG
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35930: LD_ADDR_VAR 0 28
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 2
36106: NEG
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: NEG
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: LD_INT 3
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 3
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 3
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36212: LD_ADDR_VAR 0 29
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: LD_INT 3
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 3
36456: NEG
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36491: LD_ADDR_VAR 0 30
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: NEG
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 2
36668: NEG
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 3
36734: NEG
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36769: LD_ADDR_VAR 0 31
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 3
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 3
37012: NEG
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37047: LD_ADDR_VAR 0 32
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 3
37290: NEG
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37325: LD_ADDR_VAR 0 33
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: NEG
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: LD_INT 3
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 3
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 3
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37604: LD_ADDR_VAR 0 34
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 3
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: NEG
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37884: LD_ADDR_VAR 0 35
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37996: LD_ADDR_VAR 0 36
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38108: LD_ADDR_VAR 0 37
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38220: LD_ADDR_VAR 0 38
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38332: LD_ADDR_VAR 0 39
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38444: LD_ADDR_VAR 0 40
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38556: LD_ADDR_VAR 0 41
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: LD_INT 3
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 3
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 3
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 3
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 3
38841: NEG
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: NEG
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 3
38865: NEG
38866: PUSH
38867: LD_INT 3
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38906: LD_ADDR_VAR 0 42
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: LD_INT 3
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 3
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: NEG
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: LD_INT 3
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39256: LD_ADDR_VAR 0 43
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: LD_INT 3
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: LD_INT 3
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39604: LD_ADDR_VAR 0 44
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 3
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 3
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 3
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 3
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 3
39901: NEG
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 3
39913: NEG
39914: PUSH
39915: LD_INT 3
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39954: LD_ADDR_VAR 0 45
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 3
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 3
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 3
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: NEG
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40304: LD_ADDR_VAR 0 46
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 3
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 3
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 3
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40652: LD_ADDR_VAR 0 47
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40803: LD_ADDR_VAR 0 48
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40950: LD_ADDR_VAR 0 49
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41094: LD_ADDR_VAR 0 50
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41238: LD_ADDR_VAR 0 51
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41385: LD_ADDR_VAR 0 52
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41536: LD_ADDR_VAR 0 53
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41766: LD_ADDR_VAR 0 54
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41996: LD_ADDR_VAR 0 55
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42226: LD_ADDR_VAR 0 56
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42456: LD_ADDR_VAR 0 57
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42686: LD_ADDR_VAR 0 58
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42916: LD_ADDR_VAR 0 59
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43004: LD_ADDR_VAR 0 60
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43092: LD_ADDR_VAR 0 61
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43180: LD_ADDR_VAR 0 62
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43268: LD_ADDR_VAR 0 63
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43356: LD_ADDR_VAR 0 64
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// end ; 1 :
43444: GO 49341
43446: LD_INT 1
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 46077
43454: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43455: LD_ADDR_VAR 0 11
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 3
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 3
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43499: LD_ADDR_VAR 0 12
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43540: LD_ADDR_VAR 0 13
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43580: LD_ADDR_VAR 0 14
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 3
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43621: LD_ADDR_VAR 0 15
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 3
43639: NEG
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 3
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43665: LD_ADDR_VAR 0 16
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 3
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 3
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43711: LD_ADDR_VAR 0 17
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 3
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 3
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43755: LD_ADDR_VAR 0 18
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43796: LD_ADDR_VAR 0 19
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43836: LD_ADDR_VAR 0 20
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43877: LD_ADDR_VAR 0 21
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43921: LD_ADDR_VAR 0 22
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43967: LD_ADDR_VAR 0 23
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 3
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 4
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 3
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44011: LD_ADDR_VAR 0 24
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 4
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44052: LD_ADDR_VAR 0 25
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 4
44069: PUSH
44070: LD_INT 3
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44092: LD_ADDR_VAR 0 26
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 4
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44133: LD_ADDR_VAR 0 27
44137: PUSH
44138: LD_INT 3
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 4
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44177: LD_ADDR_VAR 0 28
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 3
44196: NEG
44197: PUSH
44198: LD_INT 4
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 4
44208: NEG
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44223: LD_ADDR_VAR 0 29
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 4
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 4
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 3
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 5
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 5
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 4
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 6
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 6
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 5
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44378: LD_ADDR_VAR 0 30
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 3
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 3
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 4
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 4
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 4
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 5
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 5
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 5
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 6
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 6
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44521: LD_ADDR_VAR 0 31
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 4
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 4
44568: PUSH
44569: LD_INT 4
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: LD_INT 4
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 5
44588: PUSH
44589: LD_INT 4
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 5
44598: PUSH
44599: LD_INT 5
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 4
44608: PUSH
44609: LD_INT 5
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 6
44618: PUSH
44619: LD_INT 5
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 6
44628: PUSH
44629: LD_INT 6
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 5
44638: PUSH
44639: LD_INT 6
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44660: LD_ADDR_VAR 0 32
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 3
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 4
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 5
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 6
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 6
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 5
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44803: LD_ADDR_VAR 0 33
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: NEG
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 4
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 4
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 4
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 5
44889: NEG
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 5
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 5
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 6
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 6
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44958: LD_ADDR_VAR 0 34
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 3
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 3
44977: NEG
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 3
44989: NEG
44990: PUSH
44991: LD_INT 3
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: LD_INT 4
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 4
45013: NEG
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 4
45025: NEG
45026: PUSH
45027: LD_INT 4
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 4
45037: NEG
45038: PUSH
45039: LD_INT 5
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 5
45049: NEG
45050: PUSH
45051: LD_INT 4
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 5
45061: NEG
45062: PUSH
45063: LD_INT 5
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 5
45073: NEG
45074: PUSH
45075: LD_INT 6
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 6
45085: NEG
45086: PUSH
45087: LD_INT 5
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 6
45097: NEG
45098: PUSH
45099: LD_INT 6
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45121: LD_ADDR_VAR 0 41
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 3
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45165: LD_ADDR_VAR 0 42
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45206: LD_ADDR_VAR 0 43
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 3
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45246: LD_ADDR_VAR 0 44
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 3
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45287: LD_ADDR_VAR 0 45
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45331: LD_ADDR_VAR 0 46
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 3
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45377: LD_ADDR_VAR 0 47
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 3
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45410: LD_ADDR_VAR 0 48
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45441: LD_ADDR_VAR 0 49
45445: PUSH
45446: LD_INT 3
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45470: LD_ADDR_VAR 0 50
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45499: LD_ADDR_VAR 0 51
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45530: LD_ADDR_VAR 0 52
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45563: LD_ADDR_VAR 0 53
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 3
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45607: LD_ADDR_VAR 0 54
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45648: LD_ADDR_VAR 0 55
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 3
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45688: LD_ADDR_VAR 0 56
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 3
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45729: LD_ADDR_VAR 0 57
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45773: LD_ADDR_VAR 0 58
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 3
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 3
45792: NEG
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 3
45804: NEG
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45819: LD_ADDR_VAR 0 59
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45863: LD_ADDR_VAR 0 60
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45904: LD_ADDR_VAR 0 61
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45944: LD_ADDR_VAR 0 62
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45985: LD_ADDR_VAR 0 63
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46029: LD_ADDR_VAR 0 64
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// end ; 2 :
46075: GO 49341
46077: LD_INT 2
46079: DOUBLE
46080: EQUAL
46081: IFTRUE 46085
46083: GO 49340
46085: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46086: LD_ADDR_VAR 0 29
46090: PUSH
46091: LD_INT 4
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 4
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 5
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 5
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 4
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 5
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 4
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 4
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: PUSH
46227: LD_INT 4
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 4
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 4
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 4
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 5
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 5
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 4
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 5
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 4
46425: NEG
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 4
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 4
46448: NEG
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 4
46471: NEG
46472: PUSH
46473: LD_INT 4
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 4
46483: NEG
46484: PUSH
46485: LD_INT 5
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: LD_INT 4
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: NEG
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 4
46519: NEG
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 5
46531: NEG
46532: PUSH
46533: LD_INT 4
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 5
46543: NEG
46544: PUSH
46545: LD_INT 5
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: NEG
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 5
46567: NEG
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46624: LD_ADDR_VAR 0 30
46628: PUSH
46629: LD_INT 4
46631: PUSH
46632: LD_INT 4
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 4
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 5
46651: PUSH
46652: LD_INT 4
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 5
46661: PUSH
46662: LD_INT 5
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 4
46671: PUSH
46672: LD_INT 5
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: LD_INT 4
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 5
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 5
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 4
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 4
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 4
46814: NEG
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 3
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 5
46870: NEG
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 5
46881: NEG
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 5
46893: NEG
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: LD_INT 4
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: NEG
46977: PUSH
46978: LD_INT 3
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 4
46988: NEG
46989: PUSH
46990: LD_INT 4
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 4
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: NEG
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 4
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 5
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 4
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 3
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 4
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 5
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: LD_INT 5
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47171: LD_ADDR_VAR 0 31
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 4
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 4
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 5
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 4
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 3
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 5
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 4
47327: NEG
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 4
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 4
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 4
47373: NEG
47374: PUSH
47375: LD_INT 4
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 4
47385: NEG
47386: PUSH
47387: LD_INT 5
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: LD_INT 4
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 4
47421: NEG
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 5
47433: NEG
47434: PUSH
47435: LD_INT 4
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: LD_INT 5
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 3
47457: NEG
47458: PUSH
47459: LD_INT 5
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 5
47469: NEG
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 4
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 4
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 4
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 4
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 5
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 5
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 4
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 5
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47721: LD_ADDR_VAR 0 32
47725: PUSH
47726: LD_INT 4
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 4
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 4
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 5
47784: NEG
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 5
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 5
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 3
47830: NEG
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 4
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 4
47890: NEG
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 4
47902: NEG
47903: PUSH
47904: LD_INT 4
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 4
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 4
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 5
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 4
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 3
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 4
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 5
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 3
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 5
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 4
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 4
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 4
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 4
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 5
48153: PUSH
48154: LD_INT 4
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 5
48163: PUSH
48164: LD_INT 5
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 4
48173: PUSH
48174: LD_INT 5
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: LD_INT 4
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 5
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 5
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48268: LD_ADDR_VAR 0 33
48272: PUSH
48273: LD_INT 4
48275: NEG
48276: PUSH
48277: LD_INT 4
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 4
48287: NEG
48288: PUSH
48289: LD_INT 5
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 4
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 4
48323: NEG
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 5
48335: NEG
48336: PUSH
48337: LD_INT 4
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 5
48347: NEG
48348: PUSH
48349: LD_INT 5
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 3
48359: NEG
48360: PUSH
48361: LD_INT 5
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 5
48371: NEG
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 4
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 4
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 4
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 4
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 5
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 4
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 3
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 5
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 4
48608: PUSH
48609: LD_INT 4
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 3
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 4
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: LD_INT 4
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 4
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 4
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 5
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 5
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 4
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 5
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48806: LD_ADDR_VAR 0 34
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 4
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 5
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 4
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 3
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 4
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 5
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 5
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 4
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 4
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 4
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: PUSH
49009: LD_INT 4
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 5
49028: PUSH
49029: LD_INT 4
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: PUSH
49039: LD_INT 5
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 4
49048: PUSH
49049: LD_INT 5
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 4
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 5
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: LD_INT 5
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 4
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 4
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 4
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 4
49191: NEG
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 4
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 4
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 5
49247: NEG
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 5
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 5
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// end ; end ;
49338: GO 49341
49340: POP
// case btype of b_depot , b_warehouse :
49341: LD_VAR 0 1
49345: PUSH
49346: LD_INT 0
49348: DOUBLE
49349: EQUAL
49350: IFTRUE 49360
49352: LD_INT 1
49354: DOUBLE
49355: EQUAL
49356: IFTRUE 49360
49358: GO 49561
49360: POP
// case nation of nation_american :
49361: LD_VAR 0 5
49365: PUSH
49366: LD_INT 1
49368: DOUBLE
49369: EQUAL
49370: IFTRUE 49374
49372: GO 49430
49374: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49375: LD_ADDR_VAR 0 9
49379: PUSH
49380: LD_VAR 0 11
49384: PUSH
49385: LD_VAR 0 12
49389: PUSH
49390: LD_VAR 0 13
49394: PUSH
49395: LD_VAR 0 14
49399: PUSH
49400: LD_VAR 0 15
49404: PUSH
49405: LD_VAR 0 16
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: PUSH
49418: LD_VAR 0 4
49422: PUSH
49423: LD_INT 1
49425: PLUS
49426: ARRAY
49427: ST_TO_ADDR
49428: GO 49559
49430: LD_INT 2
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49438
49436: GO 49494
49438: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49439: LD_ADDR_VAR 0 9
49443: PUSH
49444: LD_VAR 0 17
49448: PUSH
49449: LD_VAR 0 18
49453: PUSH
49454: LD_VAR 0 19
49458: PUSH
49459: LD_VAR 0 20
49463: PUSH
49464: LD_VAR 0 21
49468: PUSH
49469: LD_VAR 0 22
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: PUSH
49482: LD_VAR 0 4
49486: PUSH
49487: LD_INT 1
49489: PLUS
49490: ARRAY
49491: ST_TO_ADDR
49492: GO 49559
49494: LD_INT 3
49496: DOUBLE
49497: EQUAL
49498: IFTRUE 49502
49500: GO 49558
49502: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49503: LD_ADDR_VAR 0 9
49507: PUSH
49508: LD_VAR 0 23
49512: PUSH
49513: LD_VAR 0 24
49517: PUSH
49518: LD_VAR 0 25
49522: PUSH
49523: LD_VAR 0 26
49527: PUSH
49528: LD_VAR 0 27
49532: PUSH
49533: LD_VAR 0 28
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: PUSH
49546: LD_VAR 0 4
49550: PUSH
49551: LD_INT 1
49553: PLUS
49554: ARRAY
49555: ST_TO_ADDR
49556: GO 49559
49558: POP
49559: GO 50114
49561: LD_INT 2
49563: DOUBLE
49564: EQUAL
49565: IFTRUE 49575
49567: LD_INT 3
49569: DOUBLE
49570: EQUAL
49571: IFTRUE 49575
49573: GO 49631
49575: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49576: LD_ADDR_VAR 0 9
49580: PUSH
49581: LD_VAR 0 29
49585: PUSH
49586: LD_VAR 0 30
49590: PUSH
49591: LD_VAR 0 31
49595: PUSH
49596: LD_VAR 0 32
49600: PUSH
49601: LD_VAR 0 33
49605: PUSH
49606: LD_VAR 0 34
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: PUSH
49619: LD_VAR 0 4
49623: PUSH
49624: LD_INT 1
49626: PLUS
49627: ARRAY
49628: ST_TO_ADDR
49629: GO 50114
49631: LD_INT 16
49633: DOUBLE
49634: EQUAL
49635: IFTRUE 49693
49637: LD_INT 17
49639: DOUBLE
49640: EQUAL
49641: IFTRUE 49693
49643: LD_INT 18
49645: DOUBLE
49646: EQUAL
49647: IFTRUE 49693
49649: LD_INT 19
49651: DOUBLE
49652: EQUAL
49653: IFTRUE 49693
49655: LD_INT 22
49657: DOUBLE
49658: EQUAL
49659: IFTRUE 49693
49661: LD_INT 20
49663: DOUBLE
49664: EQUAL
49665: IFTRUE 49693
49667: LD_INT 21
49669: DOUBLE
49670: EQUAL
49671: IFTRUE 49693
49673: LD_INT 23
49675: DOUBLE
49676: EQUAL
49677: IFTRUE 49693
49679: LD_INT 24
49681: DOUBLE
49682: EQUAL
49683: IFTRUE 49693
49685: LD_INT 25
49687: DOUBLE
49688: EQUAL
49689: IFTRUE 49693
49691: GO 49749
49693: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49694: LD_ADDR_VAR 0 9
49698: PUSH
49699: LD_VAR 0 35
49703: PUSH
49704: LD_VAR 0 36
49708: PUSH
49709: LD_VAR 0 37
49713: PUSH
49714: LD_VAR 0 38
49718: PUSH
49719: LD_VAR 0 39
49723: PUSH
49724: LD_VAR 0 40
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: PUSH
49737: LD_VAR 0 4
49741: PUSH
49742: LD_INT 1
49744: PLUS
49745: ARRAY
49746: ST_TO_ADDR
49747: GO 50114
49749: LD_INT 6
49751: DOUBLE
49752: EQUAL
49753: IFTRUE 49805
49755: LD_INT 7
49757: DOUBLE
49758: EQUAL
49759: IFTRUE 49805
49761: LD_INT 8
49763: DOUBLE
49764: EQUAL
49765: IFTRUE 49805
49767: LD_INT 13
49769: DOUBLE
49770: EQUAL
49771: IFTRUE 49805
49773: LD_INT 12
49775: DOUBLE
49776: EQUAL
49777: IFTRUE 49805
49779: LD_INT 15
49781: DOUBLE
49782: EQUAL
49783: IFTRUE 49805
49785: LD_INT 11
49787: DOUBLE
49788: EQUAL
49789: IFTRUE 49805
49791: LD_INT 14
49793: DOUBLE
49794: EQUAL
49795: IFTRUE 49805
49797: LD_INT 10
49799: DOUBLE
49800: EQUAL
49801: IFTRUE 49805
49803: GO 49861
49805: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49806: LD_ADDR_VAR 0 9
49810: PUSH
49811: LD_VAR 0 41
49815: PUSH
49816: LD_VAR 0 42
49820: PUSH
49821: LD_VAR 0 43
49825: PUSH
49826: LD_VAR 0 44
49830: PUSH
49831: LD_VAR 0 45
49835: PUSH
49836: LD_VAR 0 46
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: PUSH
49849: LD_VAR 0 4
49853: PUSH
49854: LD_INT 1
49856: PLUS
49857: ARRAY
49858: ST_TO_ADDR
49859: GO 50114
49861: LD_INT 36
49863: DOUBLE
49864: EQUAL
49865: IFTRUE 49869
49867: GO 49925
49869: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49870: LD_ADDR_VAR 0 9
49874: PUSH
49875: LD_VAR 0 47
49879: PUSH
49880: LD_VAR 0 48
49884: PUSH
49885: LD_VAR 0 49
49889: PUSH
49890: LD_VAR 0 50
49894: PUSH
49895: LD_VAR 0 51
49899: PUSH
49900: LD_VAR 0 52
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: PUSH
49913: LD_VAR 0 4
49917: PUSH
49918: LD_INT 1
49920: PLUS
49921: ARRAY
49922: ST_TO_ADDR
49923: GO 50114
49925: LD_INT 4
49927: DOUBLE
49928: EQUAL
49929: IFTRUE 49951
49931: LD_INT 5
49933: DOUBLE
49934: EQUAL
49935: IFTRUE 49951
49937: LD_INT 34
49939: DOUBLE
49940: EQUAL
49941: IFTRUE 49951
49943: LD_INT 37
49945: DOUBLE
49946: EQUAL
49947: IFTRUE 49951
49949: GO 50007
49951: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49952: LD_ADDR_VAR 0 9
49956: PUSH
49957: LD_VAR 0 53
49961: PUSH
49962: LD_VAR 0 54
49966: PUSH
49967: LD_VAR 0 55
49971: PUSH
49972: LD_VAR 0 56
49976: PUSH
49977: LD_VAR 0 57
49981: PUSH
49982: LD_VAR 0 58
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: PUSH
49995: LD_VAR 0 4
49999: PUSH
50000: LD_INT 1
50002: PLUS
50003: ARRAY
50004: ST_TO_ADDR
50005: GO 50114
50007: LD_INT 31
50009: DOUBLE
50010: EQUAL
50011: IFTRUE 50057
50013: LD_INT 32
50015: DOUBLE
50016: EQUAL
50017: IFTRUE 50057
50019: LD_INT 33
50021: DOUBLE
50022: EQUAL
50023: IFTRUE 50057
50025: LD_INT 27
50027: DOUBLE
50028: EQUAL
50029: IFTRUE 50057
50031: LD_INT 26
50033: DOUBLE
50034: EQUAL
50035: IFTRUE 50057
50037: LD_INT 28
50039: DOUBLE
50040: EQUAL
50041: IFTRUE 50057
50043: LD_INT 29
50045: DOUBLE
50046: EQUAL
50047: IFTRUE 50057
50049: LD_INT 30
50051: DOUBLE
50052: EQUAL
50053: IFTRUE 50057
50055: GO 50113
50057: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50058: LD_ADDR_VAR 0 9
50062: PUSH
50063: LD_VAR 0 59
50067: PUSH
50068: LD_VAR 0 60
50072: PUSH
50073: LD_VAR 0 61
50077: PUSH
50078: LD_VAR 0 62
50082: PUSH
50083: LD_VAR 0 63
50087: PUSH
50088: LD_VAR 0 64
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: PUSH
50101: LD_VAR 0 4
50105: PUSH
50106: LD_INT 1
50108: PLUS
50109: ARRAY
50110: ST_TO_ADDR
50111: GO 50114
50113: POP
// temp_list2 = [ ] ;
50114: LD_ADDR_VAR 0 10
50118: PUSH
50119: EMPTY
50120: ST_TO_ADDR
// for i in temp_list do
50121: LD_ADDR_VAR 0 8
50125: PUSH
50126: LD_VAR 0 9
50130: PUSH
50131: FOR_IN
50132: IFFALSE 50184
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50134: LD_ADDR_VAR 0 10
50138: PUSH
50139: LD_VAR 0 10
50143: PUSH
50144: LD_VAR 0 8
50148: PUSH
50149: LD_INT 1
50151: ARRAY
50152: PUSH
50153: LD_VAR 0 2
50157: PLUS
50158: PUSH
50159: LD_VAR 0 8
50163: PUSH
50164: LD_INT 2
50166: ARRAY
50167: PUSH
50168: LD_VAR 0 3
50172: PLUS
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: EMPTY
50179: LIST
50180: ADD
50181: ST_TO_ADDR
50182: GO 50131
50184: POP
50185: POP
// result = temp_list2 ;
50186: LD_ADDR_VAR 0 7
50190: PUSH
50191: LD_VAR 0 10
50195: ST_TO_ADDR
// end ;
50196: LD_VAR 0 7
50200: RET
// export function EnemyInRange ( unit , dist ) ; begin
50201: LD_INT 0
50203: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50204: LD_ADDR_VAR 0 3
50208: PUSH
50209: LD_VAR 0 1
50213: PPUSH
50214: CALL_OW 255
50218: PPUSH
50219: LD_VAR 0 1
50223: PPUSH
50224: CALL_OW 250
50228: PPUSH
50229: LD_VAR 0 1
50233: PPUSH
50234: CALL_OW 251
50238: PPUSH
50239: LD_VAR 0 2
50243: PPUSH
50244: CALL 23574 0 4
50248: PUSH
50249: LD_INT 4
50251: ARRAY
50252: ST_TO_ADDR
// end ;
50253: LD_VAR 0 3
50257: RET
// export function PlayerSeeMe ( unit ) ; begin
50258: LD_INT 0
50260: PPUSH
// result := See ( your_side , unit ) ;
50261: LD_ADDR_VAR 0 2
50265: PUSH
50266: LD_OWVAR 2
50270: PPUSH
50271: LD_VAR 0 1
50275: PPUSH
50276: CALL_OW 292
50280: ST_TO_ADDR
// end ;
50281: LD_VAR 0 2
50285: RET
// export function ReverseDir ( unit ) ; begin
50286: LD_INT 0
50288: PPUSH
// if not unit then
50289: LD_VAR 0 1
50293: NOT
50294: IFFALSE 50298
// exit ;
50296: GO 50321
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50298: LD_ADDR_VAR 0 2
50302: PUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 254
50312: PUSH
50313: LD_INT 3
50315: PLUS
50316: PUSH
50317: LD_INT 6
50319: MOD
50320: ST_TO_ADDR
// end ;
50321: LD_VAR 0 2
50325: RET
// export function ReverseArray ( array ) ; var i ; begin
50326: LD_INT 0
50328: PPUSH
50329: PPUSH
// if not array then
50330: LD_VAR 0 1
50334: NOT
50335: IFFALSE 50339
// exit ;
50337: GO 50394
// result := [ ] ;
50339: LD_ADDR_VAR 0 2
50343: PUSH
50344: EMPTY
50345: ST_TO_ADDR
// for i := array downto 1 do
50346: LD_ADDR_VAR 0 3
50350: PUSH
50351: DOUBLE
50352: LD_VAR 0 1
50356: INC
50357: ST_TO_ADDR
50358: LD_INT 1
50360: PUSH
50361: FOR_DOWNTO
50362: IFFALSE 50392
// result := Join ( result , array [ i ] ) ;
50364: LD_ADDR_VAR 0 2
50368: PUSH
50369: LD_VAR 0 2
50373: PPUSH
50374: LD_VAR 0 1
50378: PUSH
50379: LD_VAR 0 3
50383: ARRAY
50384: PPUSH
50385: CALL 55131 0 2
50389: ST_TO_ADDR
50390: GO 50361
50392: POP
50393: POP
// end ;
50394: LD_VAR 0 2
50398: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50399: LD_INT 0
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
// if not unit or not hexes then
50407: LD_VAR 0 1
50411: NOT
50412: PUSH
50413: LD_VAR 0 2
50417: NOT
50418: OR
50419: IFFALSE 50423
// exit ;
50421: GO 50546
// dist := 9999 ;
50423: LD_ADDR_VAR 0 5
50427: PUSH
50428: LD_INT 9999
50430: ST_TO_ADDR
// for i = 1 to hexes do
50431: LD_ADDR_VAR 0 4
50435: PUSH
50436: DOUBLE
50437: LD_INT 1
50439: DEC
50440: ST_TO_ADDR
50441: LD_VAR 0 2
50445: PUSH
50446: FOR_TO
50447: IFFALSE 50534
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50449: LD_ADDR_VAR 0 6
50453: PUSH
50454: LD_VAR 0 1
50458: PPUSH
50459: LD_VAR 0 2
50463: PUSH
50464: LD_VAR 0 4
50468: ARRAY
50469: PUSH
50470: LD_INT 1
50472: ARRAY
50473: PPUSH
50474: LD_VAR 0 2
50478: PUSH
50479: LD_VAR 0 4
50483: ARRAY
50484: PUSH
50485: LD_INT 2
50487: ARRAY
50488: PPUSH
50489: CALL_OW 297
50493: ST_TO_ADDR
// if tdist < dist then
50494: LD_VAR 0 6
50498: PUSH
50499: LD_VAR 0 5
50503: LESS
50504: IFFALSE 50532
// begin hex := hexes [ i ] ;
50506: LD_ADDR_VAR 0 8
50510: PUSH
50511: LD_VAR 0 2
50515: PUSH
50516: LD_VAR 0 4
50520: ARRAY
50521: ST_TO_ADDR
// dist := tdist ;
50522: LD_ADDR_VAR 0 5
50526: PUSH
50527: LD_VAR 0 6
50531: ST_TO_ADDR
// end ; end ;
50532: GO 50446
50534: POP
50535: POP
// result := hex ;
50536: LD_ADDR_VAR 0 3
50540: PUSH
50541: LD_VAR 0 8
50545: ST_TO_ADDR
// end ;
50546: LD_VAR 0 3
50550: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50551: LD_INT 0
50553: PPUSH
50554: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50555: LD_VAR 0 1
50559: NOT
50560: PUSH
50561: LD_VAR 0 1
50565: PUSH
50566: LD_INT 21
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 23
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PPUSH
50590: CALL_OW 69
50594: IN
50595: NOT
50596: OR
50597: IFFALSE 50601
// exit ;
50599: GO 50648
// for i = 1 to 3 do
50601: LD_ADDR_VAR 0 3
50605: PUSH
50606: DOUBLE
50607: LD_INT 1
50609: DEC
50610: ST_TO_ADDR
50611: LD_INT 3
50613: PUSH
50614: FOR_TO
50615: IFFALSE 50646
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50617: LD_VAR 0 1
50621: PPUSH
50622: CALL_OW 250
50626: PPUSH
50627: LD_VAR 0 1
50631: PPUSH
50632: CALL_OW 251
50636: PPUSH
50637: LD_INT 1
50639: PPUSH
50640: CALL_OW 453
50644: GO 50614
50646: POP
50647: POP
// end ;
50648: LD_VAR 0 2
50652: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50653: LD_INT 0
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
// if not unit or not enemy_unit then
50661: LD_VAR 0 1
50665: NOT
50666: PUSH
50667: LD_VAR 0 2
50671: NOT
50672: OR
50673: IFFALSE 50677
// exit ;
50675: GO 51144
// if GetLives ( i ) < 250 then
50677: LD_VAR 0 4
50681: PPUSH
50682: CALL_OW 256
50686: PUSH
50687: LD_INT 250
50689: LESS
50690: IFFALSE 50703
// begin ComAutodestruct ( i ) ;
50692: LD_VAR 0 4
50696: PPUSH
50697: CALL 50551 0 1
// exit ;
50701: GO 51144
// end ; x := GetX ( enemy_unit ) ;
50703: LD_ADDR_VAR 0 7
50707: PUSH
50708: LD_VAR 0 2
50712: PPUSH
50713: CALL_OW 250
50717: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50718: LD_ADDR_VAR 0 8
50722: PUSH
50723: LD_VAR 0 2
50727: PPUSH
50728: CALL_OW 251
50732: ST_TO_ADDR
// if not x or not y then
50733: LD_VAR 0 7
50737: NOT
50738: PUSH
50739: LD_VAR 0 8
50743: NOT
50744: OR
50745: IFFALSE 50749
// exit ;
50747: GO 51144
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50749: LD_ADDR_VAR 0 6
50753: PUSH
50754: LD_VAR 0 7
50758: PPUSH
50759: LD_INT 0
50761: PPUSH
50762: LD_INT 4
50764: PPUSH
50765: CALL_OW 272
50769: PUSH
50770: LD_VAR 0 8
50774: PPUSH
50775: LD_INT 0
50777: PPUSH
50778: LD_INT 4
50780: PPUSH
50781: CALL_OW 273
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_VAR 0 7
50794: PPUSH
50795: LD_INT 1
50797: PPUSH
50798: LD_INT 4
50800: PPUSH
50801: CALL_OW 272
50805: PUSH
50806: LD_VAR 0 8
50810: PPUSH
50811: LD_INT 1
50813: PPUSH
50814: LD_INT 4
50816: PPUSH
50817: CALL_OW 273
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_VAR 0 7
50830: PPUSH
50831: LD_INT 2
50833: PPUSH
50834: LD_INT 4
50836: PPUSH
50837: CALL_OW 272
50841: PUSH
50842: LD_VAR 0 8
50846: PPUSH
50847: LD_INT 2
50849: PPUSH
50850: LD_INT 4
50852: PPUSH
50853: CALL_OW 273
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_VAR 0 7
50866: PPUSH
50867: LD_INT 3
50869: PPUSH
50870: LD_INT 4
50872: PPUSH
50873: CALL_OW 272
50877: PUSH
50878: LD_VAR 0 8
50882: PPUSH
50883: LD_INT 3
50885: PPUSH
50886: LD_INT 4
50888: PPUSH
50889: CALL_OW 273
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_VAR 0 7
50902: PPUSH
50903: LD_INT 4
50905: PPUSH
50906: LD_INT 4
50908: PPUSH
50909: CALL_OW 272
50913: PUSH
50914: LD_VAR 0 8
50918: PPUSH
50919: LD_INT 4
50921: PPUSH
50922: LD_INT 4
50924: PPUSH
50925: CALL_OW 273
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_VAR 0 7
50938: PPUSH
50939: LD_INT 5
50941: PPUSH
50942: LD_INT 4
50944: PPUSH
50945: CALL_OW 272
50949: PUSH
50950: LD_VAR 0 8
50954: PPUSH
50955: LD_INT 5
50957: PPUSH
50958: LD_INT 4
50960: PPUSH
50961: CALL_OW 273
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: ST_TO_ADDR
// for i = tmp downto 1 do
50978: LD_ADDR_VAR 0 4
50982: PUSH
50983: DOUBLE
50984: LD_VAR 0 6
50988: INC
50989: ST_TO_ADDR
50990: LD_INT 1
50992: PUSH
50993: FOR_DOWNTO
50994: IFFALSE 51095
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50996: LD_VAR 0 6
51000: PUSH
51001: LD_VAR 0 4
51005: ARRAY
51006: PUSH
51007: LD_INT 1
51009: ARRAY
51010: PPUSH
51011: LD_VAR 0 6
51015: PUSH
51016: LD_VAR 0 4
51020: ARRAY
51021: PUSH
51022: LD_INT 2
51024: ARRAY
51025: PPUSH
51026: CALL_OW 488
51030: NOT
51031: PUSH
51032: LD_VAR 0 6
51036: PUSH
51037: LD_VAR 0 4
51041: ARRAY
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: PPUSH
51047: LD_VAR 0 6
51051: PUSH
51052: LD_VAR 0 4
51056: ARRAY
51057: PUSH
51058: LD_INT 2
51060: ARRAY
51061: PPUSH
51062: CALL_OW 428
51066: PUSH
51067: LD_INT 0
51069: NONEQUAL
51070: OR
51071: IFFALSE 51093
// tmp := Delete ( tmp , i ) ;
51073: LD_ADDR_VAR 0 6
51077: PUSH
51078: LD_VAR 0 6
51082: PPUSH
51083: LD_VAR 0 4
51087: PPUSH
51088: CALL_OW 3
51092: ST_TO_ADDR
51093: GO 50993
51095: POP
51096: POP
// j := GetClosestHex ( unit , tmp ) ;
51097: LD_ADDR_VAR 0 5
51101: PUSH
51102: LD_VAR 0 1
51106: PPUSH
51107: LD_VAR 0 6
51111: PPUSH
51112: CALL 50399 0 2
51116: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51117: LD_VAR 0 1
51121: PPUSH
51122: LD_VAR 0 5
51126: PUSH
51127: LD_INT 1
51129: ARRAY
51130: PPUSH
51131: LD_VAR 0 5
51135: PUSH
51136: LD_INT 2
51138: ARRAY
51139: PPUSH
51140: CALL_OW 111
// end ;
51144: LD_VAR 0 3
51148: RET
// export function PrepareApemanSoldier ( ) ; begin
51149: LD_INT 0
51151: PPUSH
// uc_nation := 0 ;
51152: LD_ADDR_OWVAR 21
51156: PUSH
51157: LD_INT 0
51159: ST_TO_ADDR
// hc_sex := sex_male ;
51160: LD_ADDR_OWVAR 27
51164: PUSH
51165: LD_INT 1
51167: ST_TO_ADDR
// hc_name :=  ;
51168: LD_ADDR_OWVAR 26
51172: PUSH
51173: LD_STRING 
51175: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51176: LD_ADDR_OWVAR 28
51180: PUSH
51181: LD_INT 15
51183: ST_TO_ADDR
// hc_gallery :=  ;
51184: LD_ADDR_OWVAR 33
51188: PUSH
51189: LD_STRING 
51191: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51192: LD_ADDR_OWVAR 31
51196: PUSH
51197: LD_INT 0
51199: PPUSH
51200: LD_INT 3
51202: PPUSH
51203: CALL_OW 12
51207: PUSH
51208: LD_INT 0
51210: PPUSH
51211: LD_INT 3
51213: PPUSH
51214: CALL_OW 12
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: ST_TO_ADDR
// end ;
51231: LD_VAR 0 1
51235: RET
// export function PrepareApemanEngineer ( ) ; begin
51236: LD_INT 0
51238: PPUSH
// uc_nation := 0 ;
51239: LD_ADDR_OWVAR 21
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// hc_sex := sex_male ;
51247: LD_ADDR_OWVAR 27
51251: PUSH
51252: LD_INT 1
51254: ST_TO_ADDR
// hc_name :=  ;
51255: LD_ADDR_OWVAR 26
51259: PUSH
51260: LD_STRING 
51262: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51263: LD_ADDR_OWVAR 28
51267: PUSH
51268: LD_INT 16
51270: ST_TO_ADDR
// hc_gallery :=  ;
51271: LD_ADDR_OWVAR 33
51275: PUSH
51276: LD_STRING 
51278: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51279: LD_ADDR_OWVAR 31
51283: PUSH
51284: LD_INT 0
51286: PPUSH
51287: LD_INT 3
51289: PPUSH
51290: CALL_OW 12
51294: PUSH
51295: LD_INT 0
51297: PPUSH
51298: LD_INT 3
51300: PPUSH
51301: CALL_OW 12
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: ST_TO_ADDR
// end ;
51318: LD_VAR 0 1
51322: RET
// export function PrepareApeman ( agressivity ) ; begin
51323: LD_INT 0
51325: PPUSH
// uc_side := 0 ;
51326: LD_ADDR_OWVAR 20
51330: PUSH
51331: LD_INT 0
51333: ST_TO_ADDR
// uc_nation := 0 ;
51334: LD_ADDR_OWVAR 21
51338: PUSH
51339: LD_INT 0
51341: ST_TO_ADDR
// hc_sex := sex_male ;
51342: LD_ADDR_OWVAR 27
51346: PUSH
51347: LD_INT 1
51349: ST_TO_ADDR
// hc_class := class_apeman ;
51350: LD_ADDR_OWVAR 28
51354: PUSH
51355: LD_INT 12
51357: ST_TO_ADDR
// hc_gallery :=  ;
51358: LD_ADDR_OWVAR 33
51362: PUSH
51363: LD_STRING 
51365: ST_TO_ADDR
// hc_name :=  ;
51366: LD_ADDR_OWVAR 26
51370: PUSH
51371: LD_STRING 
51373: ST_TO_ADDR
// if agressivity = 0 then
51374: LD_VAR 0 1
51378: PUSH
51379: LD_INT 0
51381: EQUAL
51382: IFFALSE 51394
// hc_agressivity := 0 else
51384: LD_ADDR_OWVAR 35
51388: PUSH
51389: LD_INT 0
51391: ST_TO_ADDR
51392: GO 51415
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51394: LD_ADDR_OWVAR 35
51398: PUSH
51399: LD_VAR 0 1
51403: NEG
51404: PPUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 12
51414: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51415: LD_ADDR_OWVAR 31
51419: PUSH
51420: LD_INT 0
51422: PPUSH
51423: LD_INT 3
51425: PPUSH
51426: CALL_OW 12
51430: PUSH
51431: LD_INT 0
51433: PPUSH
51434: LD_INT 3
51436: PPUSH
51437: CALL_OW 12
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: ST_TO_ADDR
// end ;
51454: LD_VAR 0 2
51458: RET
// export function PrepareTiger ( agressivity ) ; begin
51459: LD_INT 0
51461: PPUSH
// uc_side := 0 ;
51462: LD_ADDR_OWVAR 20
51466: PUSH
51467: LD_INT 0
51469: ST_TO_ADDR
// uc_nation := 0 ;
51470: LD_ADDR_OWVAR 21
51474: PUSH
51475: LD_INT 0
51477: ST_TO_ADDR
// hc_class := class_tiger ;
51478: LD_ADDR_OWVAR 28
51482: PUSH
51483: LD_INT 14
51485: ST_TO_ADDR
// hc_gallery :=  ;
51486: LD_ADDR_OWVAR 33
51490: PUSH
51491: LD_STRING 
51493: ST_TO_ADDR
// hc_name :=  ;
51494: LD_ADDR_OWVAR 26
51498: PUSH
51499: LD_STRING 
51501: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51502: LD_ADDR_OWVAR 35
51506: PUSH
51507: LD_VAR 0 1
51511: NEG
51512: PPUSH
51513: LD_VAR 0 1
51517: PPUSH
51518: CALL_OW 12
51522: ST_TO_ADDR
// end ;
51523: LD_VAR 0 2
51527: RET
// export function PrepareEnchidna ( ) ; begin
51528: LD_INT 0
51530: PPUSH
// uc_side := 0 ;
51531: LD_ADDR_OWVAR 20
51535: PUSH
51536: LD_INT 0
51538: ST_TO_ADDR
// uc_nation := 0 ;
51539: LD_ADDR_OWVAR 21
51543: PUSH
51544: LD_INT 0
51546: ST_TO_ADDR
// hc_class := class_baggie ;
51547: LD_ADDR_OWVAR 28
51551: PUSH
51552: LD_INT 13
51554: ST_TO_ADDR
// hc_gallery :=  ;
51555: LD_ADDR_OWVAR 33
51559: PUSH
51560: LD_STRING 
51562: ST_TO_ADDR
// hc_name :=  ;
51563: LD_ADDR_OWVAR 26
51567: PUSH
51568: LD_STRING 
51570: ST_TO_ADDR
// end ;
51571: LD_VAR 0 1
51575: RET
// export function PrepareFrog ( ) ; begin
51576: LD_INT 0
51578: PPUSH
// uc_side := 0 ;
51579: LD_ADDR_OWVAR 20
51583: PUSH
51584: LD_INT 0
51586: ST_TO_ADDR
// uc_nation := 0 ;
51587: LD_ADDR_OWVAR 21
51591: PUSH
51592: LD_INT 0
51594: ST_TO_ADDR
// hc_class := class_frog ;
51595: LD_ADDR_OWVAR 28
51599: PUSH
51600: LD_INT 19
51602: ST_TO_ADDR
// hc_gallery :=  ;
51603: LD_ADDR_OWVAR 33
51607: PUSH
51608: LD_STRING 
51610: ST_TO_ADDR
// hc_name :=  ;
51611: LD_ADDR_OWVAR 26
51615: PUSH
51616: LD_STRING 
51618: ST_TO_ADDR
// end ;
51619: LD_VAR 0 1
51623: RET
// export function PrepareFish ( ) ; begin
51624: LD_INT 0
51626: PPUSH
// uc_side := 0 ;
51627: LD_ADDR_OWVAR 20
51631: PUSH
51632: LD_INT 0
51634: ST_TO_ADDR
// uc_nation := 0 ;
51635: LD_ADDR_OWVAR 21
51639: PUSH
51640: LD_INT 0
51642: ST_TO_ADDR
// hc_class := class_fish ;
51643: LD_ADDR_OWVAR 28
51647: PUSH
51648: LD_INT 20
51650: ST_TO_ADDR
// hc_gallery :=  ;
51651: LD_ADDR_OWVAR 33
51655: PUSH
51656: LD_STRING 
51658: ST_TO_ADDR
// hc_name :=  ;
51659: LD_ADDR_OWVAR 26
51663: PUSH
51664: LD_STRING 
51666: ST_TO_ADDR
// end ;
51667: LD_VAR 0 1
51671: RET
// export function PrepareBird ( ) ; begin
51672: LD_INT 0
51674: PPUSH
// uc_side := 0 ;
51675: LD_ADDR_OWVAR 20
51679: PUSH
51680: LD_INT 0
51682: ST_TO_ADDR
// uc_nation := 0 ;
51683: LD_ADDR_OWVAR 21
51687: PUSH
51688: LD_INT 0
51690: ST_TO_ADDR
// hc_class := class_phororhacos ;
51691: LD_ADDR_OWVAR 28
51695: PUSH
51696: LD_INT 18
51698: ST_TO_ADDR
// hc_gallery :=  ;
51699: LD_ADDR_OWVAR 33
51703: PUSH
51704: LD_STRING 
51706: ST_TO_ADDR
// hc_name :=  ;
51707: LD_ADDR_OWVAR 26
51711: PUSH
51712: LD_STRING 
51714: ST_TO_ADDR
// end ;
51715: LD_VAR 0 1
51719: RET
// export function PrepareHorse ( ) ; begin
51720: LD_INT 0
51722: PPUSH
// uc_side := 0 ;
51723: LD_ADDR_OWVAR 20
51727: PUSH
51728: LD_INT 0
51730: ST_TO_ADDR
// uc_nation := 0 ;
51731: LD_ADDR_OWVAR 21
51735: PUSH
51736: LD_INT 0
51738: ST_TO_ADDR
// hc_class := class_horse ;
51739: LD_ADDR_OWVAR 28
51743: PUSH
51744: LD_INT 21
51746: ST_TO_ADDR
// hc_gallery :=  ;
51747: LD_ADDR_OWVAR 33
51751: PUSH
51752: LD_STRING 
51754: ST_TO_ADDR
// hc_name :=  ;
51755: LD_ADDR_OWVAR 26
51759: PUSH
51760: LD_STRING 
51762: ST_TO_ADDR
// end ;
51763: LD_VAR 0 1
51767: RET
// export function PrepareMastodont ( ) ; begin
51768: LD_INT 0
51770: PPUSH
// uc_side := 0 ;
51771: LD_ADDR_OWVAR 20
51775: PUSH
51776: LD_INT 0
51778: ST_TO_ADDR
// uc_nation := 0 ;
51779: LD_ADDR_OWVAR 21
51783: PUSH
51784: LD_INT 0
51786: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51787: LD_ADDR_OWVAR 37
51791: PUSH
51792: LD_INT 31
51794: ST_TO_ADDR
// vc_control := control_rider ;
51795: LD_ADDR_OWVAR 38
51799: PUSH
51800: LD_INT 4
51802: ST_TO_ADDR
// end ;
51803: LD_VAR 0 1
51807: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51808: LD_INT 0
51810: PPUSH
51811: PPUSH
51812: PPUSH
// uc_side = 0 ;
51813: LD_ADDR_OWVAR 20
51817: PUSH
51818: LD_INT 0
51820: ST_TO_ADDR
// uc_nation = 0 ;
51821: LD_ADDR_OWVAR 21
51825: PUSH
51826: LD_INT 0
51828: ST_TO_ADDR
// InitHc_All ( ) ;
51829: CALL_OW 584
// InitVc ;
51833: CALL_OW 20
// if mastodonts then
51837: LD_VAR 0 6
51841: IFFALSE 51908
// for i = 1 to mastodonts do
51843: LD_ADDR_VAR 0 11
51847: PUSH
51848: DOUBLE
51849: LD_INT 1
51851: DEC
51852: ST_TO_ADDR
51853: LD_VAR 0 6
51857: PUSH
51858: FOR_TO
51859: IFFALSE 51906
// begin vc_chassis := 31 ;
51861: LD_ADDR_OWVAR 37
51865: PUSH
51866: LD_INT 31
51868: ST_TO_ADDR
// vc_control := control_rider ;
51869: LD_ADDR_OWVAR 38
51873: PUSH
51874: LD_INT 4
51876: ST_TO_ADDR
// animal := CreateVehicle ;
51877: LD_ADDR_VAR 0 12
51881: PUSH
51882: CALL_OW 45
51886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51887: LD_VAR 0 12
51891: PPUSH
51892: LD_VAR 0 8
51896: PPUSH
51897: LD_INT 0
51899: PPUSH
51900: CALL 54036 0 3
// end ;
51904: GO 51858
51906: POP
51907: POP
// if horses then
51908: LD_VAR 0 5
51912: IFFALSE 51979
// for i = 1 to horses do
51914: LD_ADDR_VAR 0 11
51918: PUSH
51919: DOUBLE
51920: LD_INT 1
51922: DEC
51923: ST_TO_ADDR
51924: LD_VAR 0 5
51928: PUSH
51929: FOR_TO
51930: IFFALSE 51977
// begin hc_class := 21 ;
51932: LD_ADDR_OWVAR 28
51936: PUSH
51937: LD_INT 21
51939: ST_TO_ADDR
// hc_gallery :=  ;
51940: LD_ADDR_OWVAR 33
51944: PUSH
51945: LD_STRING 
51947: ST_TO_ADDR
// animal := CreateHuman ;
51948: LD_ADDR_VAR 0 12
51952: PUSH
51953: CALL_OW 44
51957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51958: LD_VAR 0 12
51962: PPUSH
51963: LD_VAR 0 8
51967: PPUSH
51968: LD_INT 0
51970: PPUSH
51971: CALL 54036 0 3
// end ;
51975: GO 51929
51977: POP
51978: POP
// if birds then
51979: LD_VAR 0 1
51983: IFFALSE 52050
// for i = 1 to birds do
51985: LD_ADDR_VAR 0 11
51989: PUSH
51990: DOUBLE
51991: LD_INT 1
51993: DEC
51994: ST_TO_ADDR
51995: LD_VAR 0 1
51999: PUSH
52000: FOR_TO
52001: IFFALSE 52048
// begin hc_class := 18 ;
52003: LD_ADDR_OWVAR 28
52007: PUSH
52008: LD_INT 18
52010: ST_TO_ADDR
// hc_gallery =  ;
52011: LD_ADDR_OWVAR 33
52015: PUSH
52016: LD_STRING 
52018: ST_TO_ADDR
// animal := CreateHuman ;
52019: LD_ADDR_VAR 0 12
52023: PUSH
52024: CALL_OW 44
52028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52029: LD_VAR 0 12
52033: PPUSH
52034: LD_VAR 0 8
52038: PPUSH
52039: LD_INT 0
52041: PPUSH
52042: CALL 54036 0 3
// end ;
52046: GO 52000
52048: POP
52049: POP
// if tigers then
52050: LD_VAR 0 2
52054: IFFALSE 52138
// for i = 1 to tigers do
52056: LD_ADDR_VAR 0 11
52060: PUSH
52061: DOUBLE
52062: LD_INT 1
52064: DEC
52065: ST_TO_ADDR
52066: LD_VAR 0 2
52070: PUSH
52071: FOR_TO
52072: IFFALSE 52136
// begin hc_class = class_tiger ;
52074: LD_ADDR_OWVAR 28
52078: PUSH
52079: LD_INT 14
52081: ST_TO_ADDR
// hc_gallery =  ;
52082: LD_ADDR_OWVAR 33
52086: PUSH
52087: LD_STRING 
52089: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52090: LD_ADDR_OWVAR 35
52094: PUSH
52095: LD_INT 7
52097: NEG
52098: PPUSH
52099: LD_INT 7
52101: PPUSH
52102: CALL_OW 12
52106: ST_TO_ADDR
// animal := CreateHuman ;
52107: LD_ADDR_VAR 0 12
52111: PUSH
52112: CALL_OW 44
52116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52117: LD_VAR 0 12
52121: PPUSH
52122: LD_VAR 0 8
52126: PPUSH
52127: LD_INT 0
52129: PPUSH
52130: CALL 54036 0 3
// end ;
52134: GO 52071
52136: POP
52137: POP
// if apemans then
52138: LD_VAR 0 3
52142: IFFALSE 52265
// for i = 1 to apemans do
52144: LD_ADDR_VAR 0 11
52148: PUSH
52149: DOUBLE
52150: LD_INT 1
52152: DEC
52153: ST_TO_ADDR
52154: LD_VAR 0 3
52158: PUSH
52159: FOR_TO
52160: IFFALSE 52263
// begin hc_class = class_apeman ;
52162: LD_ADDR_OWVAR 28
52166: PUSH
52167: LD_INT 12
52169: ST_TO_ADDR
// hc_gallery =  ;
52170: LD_ADDR_OWVAR 33
52174: PUSH
52175: LD_STRING 
52177: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52178: LD_ADDR_OWVAR 35
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PPUSH
52187: LD_INT 2
52189: PPUSH
52190: CALL_OW 12
52194: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52195: LD_ADDR_OWVAR 31
52199: PUSH
52200: LD_INT 1
52202: PPUSH
52203: LD_INT 3
52205: PPUSH
52206: CALL_OW 12
52210: PUSH
52211: LD_INT 1
52213: PPUSH
52214: LD_INT 3
52216: PPUSH
52217: CALL_OW 12
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: ST_TO_ADDR
// animal := CreateHuman ;
52234: LD_ADDR_VAR 0 12
52238: PUSH
52239: CALL_OW 44
52243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52244: LD_VAR 0 12
52248: PPUSH
52249: LD_VAR 0 8
52253: PPUSH
52254: LD_INT 0
52256: PPUSH
52257: CALL 54036 0 3
// end ;
52261: GO 52159
52263: POP
52264: POP
// if enchidnas then
52265: LD_VAR 0 4
52269: IFFALSE 52336
// for i = 1 to enchidnas do
52271: LD_ADDR_VAR 0 11
52275: PUSH
52276: DOUBLE
52277: LD_INT 1
52279: DEC
52280: ST_TO_ADDR
52281: LD_VAR 0 4
52285: PUSH
52286: FOR_TO
52287: IFFALSE 52334
// begin hc_class = 13 ;
52289: LD_ADDR_OWVAR 28
52293: PUSH
52294: LD_INT 13
52296: ST_TO_ADDR
// hc_gallery =  ;
52297: LD_ADDR_OWVAR 33
52301: PUSH
52302: LD_STRING 
52304: ST_TO_ADDR
// animal := CreateHuman ;
52305: LD_ADDR_VAR 0 12
52309: PUSH
52310: CALL_OW 44
52314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52315: LD_VAR 0 12
52319: PPUSH
52320: LD_VAR 0 8
52324: PPUSH
52325: LD_INT 0
52327: PPUSH
52328: CALL 54036 0 3
// end ;
52332: GO 52286
52334: POP
52335: POP
// if fishes then
52336: LD_VAR 0 7
52340: IFFALSE 52407
// for i = 1 to fishes do
52342: LD_ADDR_VAR 0 11
52346: PUSH
52347: DOUBLE
52348: LD_INT 1
52350: DEC
52351: ST_TO_ADDR
52352: LD_VAR 0 7
52356: PUSH
52357: FOR_TO
52358: IFFALSE 52405
// begin hc_class = 20 ;
52360: LD_ADDR_OWVAR 28
52364: PUSH
52365: LD_INT 20
52367: ST_TO_ADDR
// hc_gallery =  ;
52368: LD_ADDR_OWVAR 33
52372: PUSH
52373: LD_STRING 
52375: ST_TO_ADDR
// animal := CreateHuman ;
52376: LD_ADDR_VAR 0 12
52380: PUSH
52381: CALL_OW 44
52385: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52386: LD_VAR 0 12
52390: PPUSH
52391: LD_VAR 0 9
52395: PPUSH
52396: LD_INT 0
52398: PPUSH
52399: CALL 54036 0 3
// end ;
52403: GO 52357
52405: POP
52406: POP
// end ;
52407: LD_VAR 0 10
52411: RET
// export function WantHeal ( sci , unit ) ; begin
52412: LD_INT 0
52414: PPUSH
// if GetTaskList ( sci ) > 0 then
52415: LD_VAR 0 1
52419: PPUSH
52420: CALL_OW 437
52424: PUSH
52425: LD_INT 0
52427: GREATER
52428: IFFALSE 52498
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52430: LD_VAR 0 1
52434: PPUSH
52435: CALL_OW 437
52439: PUSH
52440: LD_INT 1
52442: ARRAY
52443: PUSH
52444: LD_INT 1
52446: ARRAY
52447: PUSH
52448: LD_STRING l
52450: EQUAL
52451: PUSH
52452: LD_VAR 0 1
52456: PPUSH
52457: CALL_OW 437
52461: PUSH
52462: LD_INT 1
52464: ARRAY
52465: PUSH
52466: LD_INT 4
52468: ARRAY
52469: PUSH
52470: LD_VAR 0 2
52474: EQUAL
52475: AND
52476: IFFALSE 52488
// result := true else
52478: LD_ADDR_VAR 0 3
52482: PUSH
52483: LD_INT 1
52485: ST_TO_ADDR
52486: GO 52496
// result := false ;
52488: LD_ADDR_VAR 0 3
52492: PUSH
52493: LD_INT 0
52495: ST_TO_ADDR
// end else
52496: GO 52506
// result := false ;
52498: LD_ADDR_VAR 0 3
52502: PUSH
52503: LD_INT 0
52505: ST_TO_ADDR
// end ;
52506: LD_VAR 0 3
52510: RET
// export function HealTarget ( sci ) ; begin
52511: LD_INT 0
52513: PPUSH
// if not sci then
52514: LD_VAR 0 1
52518: NOT
52519: IFFALSE 52523
// exit ;
52521: GO 52588
// result := 0 ;
52523: LD_ADDR_VAR 0 2
52527: PUSH
52528: LD_INT 0
52530: ST_TO_ADDR
// if GetTaskList ( sci ) then
52531: LD_VAR 0 1
52535: PPUSH
52536: CALL_OW 437
52540: IFFALSE 52588
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52542: LD_VAR 0 1
52546: PPUSH
52547: CALL_OW 437
52551: PUSH
52552: LD_INT 1
52554: ARRAY
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PUSH
52560: LD_STRING l
52562: EQUAL
52563: IFFALSE 52588
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52565: LD_ADDR_VAR 0 2
52569: PUSH
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 437
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: PUSH
52584: LD_INT 4
52586: ARRAY
52587: ST_TO_ADDR
// end ;
52588: LD_VAR 0 2
52592: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52593: LD_INT 0
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
// if not base_units then
52599: LD_VAR 0 1
52603: NOT
52604: IFFALSE 52608
// exit ;
52606: GO 52695
// result := false ;
52608: LD_ADDR_VAR 0 2
52612: PUSH
52613: LD_INT 0
52615: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52616: LD_ADDR_VAR 0 5
52620: PUSH
52621: LD_VAR 0 1
52625: PPUSH
52626: LD_INT 21
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PPUSH
52636: CALL_OW 72
52640: ST_TO_ADDR
// if not tmp then
52641: LD_VAR 0 5
52645: NOT
52646: IFFALSE 52650
// exit ;
52648: GO 52695
// for i in tmp do
52650: LD_ADDR_VAR 0 3
52654: PUSH
52655: LD_VAR 0 5
52659: PUSH
52660: FOR_IN
52661: IFFALSE 52693
// begin result := EnemyInRange ( i , 22 ) ;
52663: LD_ADDR_VAR 0 2
52667: PUSH
52668: LD_VAR 0 3
52672: PPUSH
52673: LD_INT 22
52675: PPUSH
52676: CALL 50201 0 2
52680: ST_TO_ADDR
// if result then
52681: LD_VAR 0 2
52685: IFFALSE 52691
// exit ;
52687: POP
52688: POP
52689: GO 52695
// end ;
52691: GO 52660
52693: POP
52694: POP
// end ;
52695: LD_VAR 0 2
52699: RET
// export function FilterByTag ( units , tag ) ; begin
52700: LD_INT 0
52702: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52703: LD_ADDR_VAR 0 3
52707: PUSH
52708: LD_VAR 0 1
52712: PPUSH
52713: LD_INT 120
52715: PUSH
52716: LD_VAR 0 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PPUSH
52725: CALL_OW 72
52729: ST_TO_ADDR
// end ;
52730: LD_VAR 0 3
52734: RET
// export function IsDriver ( un ) ; begin
52735: LD_INT 0
52737: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52738: LD_ADDR_VAR 0 2
52742: PUSH
52743: LD_VAR 0 1
52747: PUSH
52748: LD_INT 55
52750: PUSH
52751: EMPTY
52752: LIST
52753: PPUSH
52754: CALL_OW 69
52758: IN
52759: ST_TO_ADDR
// end ;
52760: LD_VAR 0 2
52764: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52765: LD_INT 0
52767: PPUSH
52768: PPUSH
// list := [ ] ;
52769: LD_ADDR_VAR 0 5
52773: PUSH
52774: EMPTY
52775: ST_TO_ADDR
// case d of 0 :
52776: LD_VAR 0 3
52780: PUSH
52781: LD_INT 0
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52922
52789: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52790: LD_ADDR_VAR 0 5
52794: PUSH
52795: LD_VAR 0 1
52799: PUSH
52800: LD_INT 4
52802: MINUS
52803: PUSH
52804: LD_VAR 0 2
52808: PUSH
52809: LD_INT 4
52811: MINUS
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: PUSH
52821: LD_VAR 0 1
52825: PUSH
52826: LD_INT 3
52828: MINUS
52829: PUSH
52830: LD_VAR 0 2
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: PUSH
52843: LD_VAR 0 1
52847: PUSH
52848: LD_INT 4
52850: PLUS
52851: PUSH
52852: LD_VAR 0 2
52856: PUSH
52857: LD_INT 4
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_VAR 0 1
52869: PUSH
52870: LD_INT 3
52872: PLUS
52873: PUSH
52874: LD_VAR 0 2
52878: PUSH
52879: LD_INT 3
52881: PLUS
52882: PUSH
52883: LD_INT 5
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: PUSH
52891: LD_VAR 0 1
52895: PUSH
52896: LD_VAR 0 2
52900: PUSH
52901: LD_INT 4
52903: PLUS
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// end ; 1 :
52920: GO 53620
52922: LD_INT 1
52924: DOUBLE
52925: EQUAL
52926: IFTRUE 52930
52928: GO 53063
52930: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52931: LD_ADDR_VAR 0 5
52935: PUSH
52936: LD_VAR 0 1
52940: PUSH
52941: LD_VAR 0 2
52945: PUSH
52946: LD_INT 4
52948: MINUS
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: PUSH
52958: LD_VAR 0 1
52962: PUSH
52963: LD_INT 3
52965: MINUS
52966: PUSH
52967: LD_VAR 0 2
52971: PUSH
52972: LD_INT 3
52974: MINUS
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: LD_VAR 0 1
52988: PUSH
52989: LD_INT 4
52991: MINUS
52992: PUSH
52993: LD_VAR 0 2
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: PUSH
53006: LD_VAR 0 1
53010: PUSH
53011: LD_VAR 0 2
53015: PUSH
53016: LD_INT 3
53018: PLUS
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: PUSH
53028: LD_VAR 0 1
53032: PUSH
53033: LD_INT 4
53035: PLUS
53036: PUSH
53037: LD_VAR 0 2
53041: PUSH
53042: LD_INT 4
53044: PLUS
53045: PUSH
53046: LD_INT 5
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: ST_TO_ADDR
// end ; 2 :
53061: GO 53620
53063: LD_INT 2
53065: DOUBLE
53066: EQUAL
53067: IFTRUE 53071
53069: GO 53200
53071: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53072: LD_ADDR_VAR 0 5
53076: PUSH
53077: LD_VAR 0 1
53081: PUSH
53082: LD_VAR 0 2
53086: PUSH
53087: LD_INT 3
53089: MINUS
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_INT 4
53106: PLUS
53107: PUSH
53108: LD_VAR 0 2
53112: PUSH
53113: LD_INT 4
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: LD_VAR 0 1
53125: PUSH
53126: LD_VAR 0 2
53130: PUSH
53131: LD_INT 4
53133: PLUS
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: PUSH
53143: LD_VAR 0 1
53147: PUSH
53148: LD_INT 3
53150: MINUS
53151: PUSH
53152: LD_VAR 0 2
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: PUSH
53165: LD_VAR 0 1
53169: PUSH
53170: LD_INT 4
53172: MINUS
53173: PUSH
53174: LD_VAR 0 2
53178: PUSH
53179: LD_INT 4
53181: MINUS
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// end ; 3 :
53198: GO 53620
53200: LD_INT 3
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53208
53206: GO 53341
53208: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53209: LD_ADDR_VAR 0 5
53213: PUSH
53214: LD_VAR 0 1
53218: PUSH
53219: LD_INT 3
53221: PLUS
53222: PUSH
53223: LD_VAR 0 2
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: LD_VAR 0 1
53240: PUSH
53241: LD_INT 4
53243: PLUS
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_INT 4
53252: PLUS
53253: PUSH
53254: LD_INT 5
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: LD_VAR 0 1
53266: PUSH
53267: LD_INT 4
53269: MINUS
53270: PUSH
53271: LD_VAR 0 2
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: PUSH
53284: LD_VAR 0 1
53288: PUSH
53289: LD_VAR 0 2
53293: PUSH
53294: LD_INT 4
53296: MINUS
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: PUSH
53306: LD_VAR 0 1
53310: PUSH
53311: LD_INT 3
53313: MINUS
53314: PUSH
53315: LD_VAR 0 2
53319: PUSH
53320: LD_INT 3
53322: MINUS
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// end ; 4 :
53339: GO 53620
53341: LD_INT 4
53343: DOUBLE
53344: EQUAL
53345: IFTRUE 53349
53347: GO 53482
53349: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53350: LD_ADDR_VAR 0 5
53354: PUSH
53355: LD_VAR 0 1
53359: PUSH
53360: LD_VAR 0 2
53364: PUSH
53365: LD_INT 4
53367: PLUS
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: PUSH
53377: LD_VAR 0 1
53381: PUSH
53382: LD_INT 3
53384: PLUS
53385: PUSH
53386: LD_VAR 0 2
53390: PUSH
53391: LD_INT 3
53393: PLUS
53394: PUSH
53395: LD_INT 5
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: LD_VAR 0 1
53407: PUSH
53408: LD_INT 4
53410: PLUS
53411: PUSH
53412: LD_VAR 0 2
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: PUSH
53425: LD_VAR 0 1
53429: PUSH
53430: LD_VAR 0 2
53434: PUSH
53435: LD_INT 3
53437: MINUS
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: LIST
53446: PUSH
53447: LD_VAR 0 1
53451: PUSH
53452: LD_INT 4
53454: MINUS
53455: PUSH
53456: LD_VAR 0 2
53460: PUSH
53461: LD_INT 4
53463: MINUS
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// end ; 5 :
53480: GO 53620
53482: LD_INT 5
53484: DOUBLE
53485: EQUAL
53486: IFTRUE 53490
53488: GO 53619
53490: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53491: LD_ADDR_VAR 0 5
53495: PUSH
53496: LD_VAR 0 1
53500: PUSH
53501: LD_INT 4
53503: MINUS
53504: PUSH
53505: LD_VAR 0 2
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: LD_VAR 0 1
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_INT 4
53530: MINUS
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: LD_VAR 0 1
53544: PUSH
53545: LD_INT 4
53547: PLUS
53548: PUSH
53549: LD_VAR 0 2
53553: PUSH
53554: LD_INT 4
53556: PLUS
53557: PUSH
53558: LD_INT 5
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: PUSH
53566: LD_VAR 0 1
53570: PUSH
53571: LD_INT 3
53573: PLUS
53574: PUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_INT 4
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: PUSH
53588: LD_VAR 0 1
53592: PUSH
53593: LD_VAR 0 2
53597: PUSH
53598: LD_INT 3
53600: PLUS
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// end ; end ;
53617: GO 53620
53619: POP
// result := list ;
53620: LD_ADDR_VAR 0 4
53624: PUSH
53625: LD_VAR 0 5
53629: ST_TO_ADDR
// end ;
53630: LD_VAR 0 4
53634: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53635: LD_INT 0
53637: PPUSH
53638: PPUSH
53639: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53640: LD_VAR 0 1
53644: NOT
53645: PUSH
53646: LD_VAR 0 2
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: IN
53669: NOT
53670: OR
53671: IFFALSE 53675
// exit ;
53673: GO 53758
// tmp := [ ] ;
53675: LD_ADDR_VAR 0 5
53679: PUSH
53680: EMPTY
53681: ST_TO_ADDR
// for i in units do
53682: LD_ADDR_VAR 0 4
53686: PUSH
53687: LD_VAR 0 1
53691: PUSH
53692: FOR_IN
53693: IFFALSE 53727
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53695: LD_ADDR_VAR 0 5
53699: PUSH
53700: LD_VAR 0 5
53704: PPUSH
53705: LD_VAR 0 4
53709: PPUSH
53710: LD_VAR 0 2
53714: PPUSH
53715: CALL_OW 259
53719: PPUSH
53720: CALL 55131 0 2
53724: ST_TO_ADDR
53725: GO 53692
53727: POP
53728: POP
// if not tmp then
53729: LD_VAR 0 5
53733: NOT
53734: IFFALSE 53738
// exit ;
53736: GO 53758
// result := SortListByListDesc ( units , tmp ) ;
53738: LD_ADDR_VAR 0 3
53742: PUSH
53743: LD_VAR 0 1
53747: PPUSH
53748: LD_VAR 0 5
53752: PPUSH
53753: CALL_OW 77
53757: ST_TO_ADDR
// end ;
53758: LD_VAR 0 3
53762: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53763: LD_INT 0
53765: PPUSH
53766: PPUSH
53767: PPUSH
// result := false ;
53768: LD_ADDR_VAR 0 3
53772: PUSH
53773: LD_INT 0
53775: ST_TO_ADDR
// if not building then
53776: LD_VAR 0 2
53780: NOT
53781: IFFALSE 53785
// exit ;
53783: GO 53923
// x := GetX ( building ) ;
53785: LD_ADDR_VAR 0 4
53789: PUSH
53790: LD_VAR 0 2
53794: PPUSH
53795: CALL_OW 250
53799: ST_TO_ADDR
// y := GetY ( building ) ;
53800: LD_ADDR_VAR 0 5
53804: PUSH
53805: LD_VAR 0 2
53809: PPUSH
53810: CALL_OW 251
53814: ST_TO_ADDR
// if not x or not y then
53815: LD_VAR 0 4
53819: NOT
53820: PUSH
53821: LD_VAR 0 5
53825: NOT
53826: OR
53827: IFFALSE 53831
// exit ;
53829: GO 53923
// if GetTaskList ( unit ) then
53831: LD_VAR 0 1
53835: PPUSH
53836: CALL_OW 437
53840: IFFALSE 53923
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53842: LD_STRING e
53844: PUSH
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 437
53854: PUSH
53855: LD_INT 1
53857: ARRAY
53858: PUSH
53859: LD_INT 1
53861: ARRAY
53862: EQUAL
53863: PUSH
53864: LD_VAR 0 4
53868: PUSH
53869: LD_VAR 0 1
53873: PPUSH
53874: CALL_OW 437
53878: PUSH
53879: LD_INT 1
53881: ARRAY
53882: PUSH
53883: LD_INT 2
53885: ARRAY
53886: EQUAL
53887: AND
53888: PUSH
53889: LD_VAR 0 5
53893: PUSH
53894: LD_VAR 0 1
53898: PPUSH
53899: CALL_OW 437
53903: PUSH
53904: LD_INT 1
53906: ARRAY
53907: PUSH
53908: LD_INT 3
53910: ARRAY
53911: EQUAL
53912: AND
53913: IFFALSE 53923
// result := true end ;
53915: LD_ADDR_VAR 0 3
53919: PUSH
53920: LD_INT 1
53922: ST_TO_ADDR
// end ;
53923: LD_VAR 0 3
53927: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53928: LD_INT 0
53930: PPUSH
// result := false ;
53931: LD_ADDR_VAR 0 4
53935: PUSH
53936: LD_INT 0
53938: ST_TO_ADDR
// if GetTaskList ( unit ) then
53939: LD_VAR 0 1
53943: PPUSH
53944: CALL_OW 437
53948: IFFALSE 54031
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53950: LD_STRING M
53952: PUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: CALL_OW 437
53962: PUSH
53963: LD_INT 1
53965: ARRAY
53966: PUSH
53967: LD_INT 1
53969: ARRAY
53970: EQUAL
53971: PUSH
53972: LD_VAR 0 2
53976: PUSH
53977: LD_VAR 0 1
53981: PPUSH
53982: CALL_OW 437
53986: PUSH
53987: LD_INT 1
53989: ARRAY
53990: PUSH
53991: LD_INT 2
53993: ARRAY
53994: EQUAL
53995: AND
53996: PUSH
53997: LD_VAR 0 3
54001: PUSH
54002: LD_VAR 0 1
54006: PPUSH
54007: CALL_OW 437
54011: PUSH
54012: LD_INT 1
54014: ARRAY
54015: PUSH
54016: LD_INT 3
54018: ARRAY
54019: EQUAL
54020: AND
54021: IFFALSE 54031
// result := true ;
54023: LD_ADDR_VAR 0 4
54027: PUSH
54028: LD_INT 1
54030: ST_TO_ADDR
// end ; end ;
54031: LD_VAR 0 4
54035: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54036: LD_INT 0
54038: PPUSH
54039: PPUSH
54040: PPUSH
54041: PPUSH
// if not unit or not area then
54042: LD_VAR 0 1
54046: NOT
54047: PUSH
54048: LD_VAR 0 2
54052: NOT
54053: OR
54054: IFFALSE 54058
// exit ;
54056: GO 54234
// tmp := AreaToList ( area , i ) ;
54058: LD_ADDR_VAR 0 6
54062: PUSH
54063: LD_VAR 0 2
54067: PPUSH
54068: LD_VAR 0 5
54072: PPUSH
54073: CALL_OW 517
54077: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54078: LD_ADDR_VAR 0 5
54082: PUSH
54083: DOUBLE
54084: LD_INT 1
54086: DEC
54087: ST_TO_ADDR
54088: LD_VAR 0 6
54092: PUSH
54093: LD_INT 1
54095: ARRAY
54096: PUSH
54097: FOR_TO
54098: IFFALSE 54232
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54100: LD_ADDR_VAR 0 7
54104: PUSH
54105: LD_VAR 0 6
54109: PUSH
54110: LD_INT 1
54112: ARRAY
54113: PUSH
54114: LD_VAR 0 5
54118: ARRAY
54119: PUSH
54120: LD_VAR 0 6
54124: PUSH
54125: LD_INT 2
54127: ARRAY
54128: PUSH
54129: LD_VAR 0 5
54133: ARRAY
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54139: LD_INT 92
54141: PUSH
54142: LD_VAR 0 7
54146: PUSH
54147: LD_INT 1
54149: ARRAY
54150: PUSH
54151: LD_VAR 0 7
54155: PUSH
54156: LD_INT 2
54158: ARRAY
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: PPUSH
54169: CALL_OW 69
54173: PUSH
54174: LD_INT 0
54176: EQUAL
54177: IFFALSE 54230
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54179: LD_VAR 0 1
54183: PPUSH
54184: LD_VAR 0 7
54188: PUSH
54189: LD_INT 1
54191: ARRAY
54192: PPUSH
54193: LD_VAR 0 7
54197: PUSH
54198: LD_INT 2
54200: ARRAY
54201: PPUSH
54202: LD_VAR 0 3
54206: PPUSH
54207: CALL_OW 48
// result := IsPlaced ( unit ) ;
54211: LD_ADDR_VAR 0 4
54215: PUSH
54216: LD_VAR 0 1
54220: PPUSH
54221: CALL_OW 305
54225: ST_TO_ADDR
// exit ;
54226: POP
54227: POP
54228: GO 54234
// end ; end ;
54230: GO 54097
54232: POP
54233: POP
// end ;
54234: LD_VAR 0 4
54238: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54239: LD_INT 0
54241: PPUSH
54242: PPUSH
54243: PPUSH
// if not side or side > 8 then
54244: LD_VAR 0 1
54248: NOT
54249: PUSH
54250: LD_VAR 0 1
54254: PUSH
54255: LD_INT 8
54257: GREATER
54258: OR
54259: IFFALSE 54263
// exit ;
54261: GO 54450
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54263: LD_ADDR_VAR 0 4
54267: PUSH
54268: LD_INT 22
54270: PUSH
54271: LD_VAR 0 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 21
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PPUSH
54294: CALL_OW 69
54298: ST_TO_ADDR
// if not tmp then
54299: LD_VAR 0 4
54303: NOT
54304: IFFALSE 54308
// exit ;
54306: GO 54450
// enable_addtolog := true ;
54308: LD_ADDR_OWVAR 81
54312: PUSH
54313: LD_INT 1
54315: ST_TO_ADDR
// AddToLog ( [ ) ;
54316: LD_STRING [
54318: PPUSH
54319: CALL_OW 561
// for i in tmp do
54323: LD_ADDR_VAR 0 3
54327: PUSH
54328: LD_VAR 0 4
54332: PUSH
54333: FOR_IN
54334: IFFALSE 54441
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54336: LD_STRING [
54338: PUSH
54339: LD_VAR 0 3
54343: PPUSH
54344: CALL_OW 266
54348: STR
54349: PUSH
54350: LD_STRING , 
54352: STR
54353: PUSH
54354: LD_VAR 0 3
54358: PPUSH
54359: CALL_OW 250
54363: STR
54364: PUSH
54365: LD_STRING , 
54367: STR
54368: PUSH
54369: LD_VAR 0 3
54373: PPUSH
54374: CALL_OW 251
54378: STR
54379: PUSH
54380: LD_STRING , 
54382: STR
54383: PUSH
54384: LD_VAR 0 3
54388: PPUSH
54389: CALL_OW 254
54393: STR
54394: PUSH
54395: LD_STRING , 
54397: STR
54398: PUSH
54399: LD_VAR 0 3
54403: PPUSH
54404: LD_INT 1
54406: PPUSH
54407: CALL_OW 268
54411: STR
54412: PUSH
54413: LD_STRING , 
54415: STR
54416: PUSH
54417: LD_VAR 0 3
54421: PPUSH
54422: LD_INT 2
54424: PPUSH
54425: CALL_OW 268
54429: STR
54430: PUSH
54431: LD_STRING ],
54433: STR
54434: PPUSH
54435: CALL_OW 561
// end ;
54439: GO 54333
54441: POP
54442: POP
// AddToLog ( ]; ) ;
54443: LD_STRING ];
54445: PPUSH
54446: CALL_OW 561
// end ;
54450: LD_VAR 0 2
54454: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54455: LD_INT 0
54457: PPUSH
54458: PPUSH
54459: PPUSH
54460: PPUSH
54461: PPUSH
// if not area or not rate or not max then
54462: LD_VAR 0 1
54466: NOT
54467: PUSH
54468: LD_VAR 0 2
54472: NOT
54473: OR
54474: PUSH
54475: LD_VAR 0 4
54479: NOT
54480: OR
54481: IFFALSE 54485
// exit ;
54483: GO 54674
// while 1 do
54485: LD_INT 1
54487: IFFALSE 54674
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54489: LD_ADDR_VAR 0 9
54493: PUSH
54494: LD_VAR 0 1
54498: PPUSH
54499: LD_INT 1
54501: PPUSH
54502: CALL_OW 287
54506: PUSH
54507: LD_INT 10
54509: MUL
54510: ST_TO_ADDR
// r := rate / 10 ;
54511: LD_ADDR_VAR 0 7
54515: PUSH
54516: LD_VAR 0 2
54520: PUSH
54521: LD_INT 10
54523: DIVREAL
54524: ST_TO_ADDR
// time := 1 1$00 ;
54525: LD_ADDR_VAR 0 8
54529: PUSH
54530: LD_INT 2100
54532: ST_TO_ADDR
// if amount < min then
54533: LD_VAR 0 9
54537: PUSH
54538: LD_VAR 0 3
54542: LESS
54543: IFFALSE 54561
// r := r * 2 else
54545: LD_ADDR_VAR 0 7
54549: PUSH
54550: LD_VAR 0 7
54554: PUSH
54555: LD_INT 2
54557: MUL
54558: ST_TO_ADDR
54559: GO 54587
// if amount > max then
54561: LD_VAR 0 9
54565: PUSH
54566: LD_VAR 0 4
54570: GREATER
54571: IFFALSE 54587
// r := r / 2 ;
54573: LD_ADDR_VAR 0 7
54577: PUSH
54578: LD_VAR 0 7
54582: PUSH
54583: LD_INT 2
54585: DIVREAL
54586: ST_TO_ADDR
// time := time / r ;
54587: LD_ADDR_VAR 0 8
54591: PUSH
54592: LD_VAR 0 8
54596: PUSH
54597: LD_VAR 0 7
54601: DIVREAL
54602: ST_TO_ADDR
// if time < 0 then
54603: LD_VAR 0 8
54607: PUSH
54608: LD_INT 0
54610: LESS
54611: IFFALSE 54628
// time := time * - 1 ;
54613: LD_ADDR_VAR 0 8
54617: PUSH
54618: LD_VAR 0 8
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: MUL
54627: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54628: LD_VAR 0 8
54632: PUSH
54633: LD_INT 35
54635: PPUSH
54636: LD_INT 875
54638: PPUSH
54639: CALL_OW 12
54643: PLUS
54644: PPUSH
54645: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54649: LD_INT 1
54651: PPUSH
54652: LD_INT 5
54654: PPUSH
54655: CALL_OW 12
54659: PPUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: LD_INT 1
54667: PPUSH
54668: CALL_OW 55
// end ;
54672: GO 54485
// end ;
54674: LD_VAR 0 5
54678: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54679: LD_INT 0
54681: PPUSH
54682: PPUSH
54683: PPUSH
54684: PPUSH
54685: PPUSH
54686: PPUSH
54687: PPUSH
54688: PPUSH
// if not turrets or not factories then
54689: LD_VAR 0 1
54693: NOT
54694: PUSH
54695: LD_VAR 0 2
54699: NOT
54700: OR
54701: IFFALSE 54705
// exit ;
54703: GO 55012
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54705: LD_ADDR_VAR 0 10
54709: PUSH
54710: LD_INT 5
54712: PUSH
54713: LD_INT 6
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 4
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 5
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 24
54747: PUSH
54748: LD_INT 25
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 23
54757: PUSH
54758: LD_INT 27
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 42
54771: PUSH
54772: LD_INT 43
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 44
54781: PUSH
54782: LD_INT 46
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 45
54791: PUSH
54792: LD_INT 47
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: ST_TO_ADDR
// result := [ ] ;
54809: LD_ADDR_VAR 0 3
54813: PUSH
54814: EMPTY
54815: ST_TO_ADDR
// for i in turrets do
54816: LD_ADDR_VAR 0 4
54820: PUSH
54821: LD_VAR 0 1
54825: PUSH
54826: FOR_IN
54827: IFFALSE 55010
// begin nat := GetNation ( i ) ;
54829: LD_ADDR_VAR 0 7
54833: PUSH
54834: LD_VAR 0 4
54838: PPUSH
54839: CALL_OW 248
54843: ST_TO_ADDR
// weapon := 0 ;
54844: LD_ADDR_VAR 0 8
54848: PUSH
54849: LD_INT 0
54851: ST_TO_ADDR
// if not nat then
54852: LD_VAR 0 7
54856: NOT
54857: IFFALSE 54861
// continue ;
54859: GO 54826
// for j in list [ nat ] do
54861: LD_ADDR_VAR 0 5
54865: PUSH
54866: LD_VAR 0 10
54870: PUSH
54871: LD_VAR 0 7
54875: ARRAY
54876: PUSH
54877: FOR_IN
54878: IFFALSE 54919
// if GetBWeapon ( i ) = j [ 1 ] then
54880: LD_VAR 0 4
54884: PPUSH
54885: CALL_OW 269
54889: PUSH
54890: LD_VAR 0 5
54894: PUSH
54895: LD_INT 1
54897: ARRAY
54898: EQUAL
54899: IFFALSE 54917
// begin weapon := j [ 2 ] ;
54901: LD_ADDR_VAR 0 8
54905: PUSH
54906: LD_VAR 0 5
54910: PUSH
54911: LD_INT 2
54913: ARRAY
54914: ST_TO_ADDR
// break ;
54915: GO 54919
// end ;
54917: GO 54877
54919: POP
54920: POP
// if not weapon then
54921: LD_VAR 0 8
54925: NOT
54926: IFFALSE 54930
// continue ;
54928: GO 54826
// for k in factories do
54930: LD_ADDR_VAR 0 6
54934: PUSH
54935: LD_VAR 0 2
54939: PUSH
54940: FOR_IN
54941: IFFALSE 55006
// begin weapons := AvailableWeaponList ( k ) ;
54943: LD_ADDR_VAR 0 9
54947: PUSH
54948: LD_VAR 0 6
54952: PPUSH
54953: CALL_OW 478
54957: ST_TO_ADDR
// if not weapons then
54958: LD_VAR 0 9
54962: NOT
54963: IFFALSE 54967
// continue ;
54965: GO 54940
// if weapon in weapons then
54967: LD_VAR 0 8
54971: PUSH
54972: LD_VAR 0 9
54976: IN
54977: IFFALSE 55004
// begin result := [ i , weapon ] ;
54979: LD_ADDR_VAR 0 3
54983: PUSH
54984: LD_VAR 0 4
54988: PUSH
54989: LD_VAR 0 8
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: ST_TO_ADDR
// exit ;
54998: POP
54999: POP
55000: POP
55001: POP
55002: GO 55012
// end ; end ;
55004: GO 54940
55006: POP
55007: POP
// end ;
55008: GO 54826
55010: POP
55011: POP
// end ;
55012: LD_VAR 0 3
55016: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55017: LD_INT 0
55019: PPUSH
// if not side or side > 8 then
55020: LD_VAR 0 3
55024: NOT
55025: PUSH
55026: LD_VAR 0 3
55030: PUSH
55031: LD_INT 8
55033: GREATER
55034: OR
55035: IFFALSE 55039
// exit ;
55037: GO 55098
// if not range then
55039: LD_VAR 0 4
55043: NOT
55044: IFFALSE 55055
// range := - 12 ;
55046: LD_ADDR_VAR 0 4
55050: PUSH
55051: LD_INT 12
55053: NEG
55054: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55055: LD_VAR 0 1
55059: PPUSH
55060: LD_VAR 0 2
55064: PPUSH
55065: LD_VAR 0 3
55069: PPUSH
55070: LD_VAR 0 4
55074: PPUSH
55075: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55079: LD_VAR 0 1
55083: PPUSH
55084: LD_VAR 0 2
55088: PPUSH
55089: LD_VAR 0 3
55093: PPUSH
55094: CALL_OW 331
// end ;
55098: LD_VAR 0 5
55102: RET
// export function Video ( mode ) ; begin
55103: LD_INT 0
55105: PPUSH
// ingame_video = mode ;
55106: LD_ADDR_OWVAR 52
55110: PUSH
55111: LD_VAR 0 1
55115: ST_TO_ADDR
// interface_hidden = mode ;
55116: LD_ADDR_OWVAR 54
55120: PUSH
55121: LD_VAR 0 1
55125: ST_TO_ADDR
// end ;
55126: LD_VAR 0 2
55130: RET
// export function Join ( array , element ) ; begin
55131: LD_INT 0
55133: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55134: LD_ADDR_VAR 0 3
55138: PUSH
55139: LD_VAR 0 1
55143: PPUSH
55144: LD_VAR 0 1
55148: PUSH
55149: LD_INT 1
55151: PLUS
55152: PPUSH
55153: LD_VAR 0 2
55157: PPUSH
55158: CALL_OW 1
55162: ST_TO_ADDR
// end ;
55163: LD_VAR 0 3
55167: RET
// export function JoinUnion ( array , element ) ; begin
55168: LD_INT 0
55170: PPUSH
// result := array union element ;
55171: LD_ADDR_VAR 0 3
55175: PUSH
55176: LD_VAR 0 1
55180: PUSH
55181: LD_VAR 0 2
55185: UNION
55186: ST_TO_ADDR
// end ;
55187: LD_VAR 0 3
55191: RET
// export function GetBehemoths ( side ) ; begin
55192: LD_INT 0
55194: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55195: LD_ADDR_VAR 0 2
55199: PUSH
55200: LD_INT 22
55202: PUSH
55203: LD_VAR 0 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 31
55214: PUSH
55215: LD_INT 25
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 69
55230: ST_TO_ADDR
// end ;
55231: LD_VAR 0 2
55235: RET
// export function Shuffle ( array ) ; var i , index ; begin
55236: LD_INT 0
55238: PPUSH
55239: PPUSH
55240: PPUSH
// result := [ ] ;
55241: LD_ADDR_VAR 0 2
55245: PUSH
55246: EMPTY
55247: ST_TO_ADDR
// if not array then
55248: LD_VAR 0 1
55252: NOT
55253: IFFALSE 55257
// exit ;
55255: GO 55356
// Randomize ;
55257: CALL_OW 10
// for i = array downto 1 do
55261: LD_ADDR_VAR 0 3
55265: PUSH
55266: DOUBLE
55267: LD_VAR 0 1
55271: INC
55272: ST_TO_ADDR
55273: LD_INT 1
55275: PUSH
55276: FOR_DOWNTO
55277: IFFALSE 55354
// begin index := rand ( 1 , array ) ;
55279: LD_ADDR_VAR 0 4
55283: PUSH
55284: LD_INT 1
55286: PPUSH
55287: LD_VAR 0 1
55291: PPUSH
55292: CALL_OW 12
55296: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55297: LD_ADDR_VAR 0 2
55301: PUSH
55302: LD_VAR 0 2
55306: PPUSH
55307: LD_VAR 0 2
55311: PUSH
55312: LD_INT 1
55314: PLUS
55315: PPUSH
55316: LD_VAR 0 1
55320: PUSH
55321: LD_VAR 0 4
55325: ARRAY
55326: PPUSH
55327: CALL_OW 2
55331: ST_TO_ADDR
// array := Delete ( array , index ) ;
55332: LD_ADDR_VAR 0 1
55336: PUSH
55337: LD_VAR 0 1
55341: PPUSH
55342: LD_VAR 0 4
55346: PPUSH
55347: CALL_OW 3
55351: ST_TO_ADDR
// end ;
55352: GO 55276
55354: POP
55355: POP
// end ;
55356: LD_VAR 0 2
55360: RET
// export function GetBaseMaterials ( base ) ; begin
55361: LD_INT 0
55363: PPUSH
// result := [ 0 , 0 , 0 ] ;
55364: LD_ADDR_VAR 0 2
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// if not base then
55383: LD_VAR 0 1
55387: NOT
55388: IFFALSE 55392
// exit ;
55390: GO 55441
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55392: LD_ADDR_VAR 0 2
55396: PUSH
55397: LD_VAR 0 1
55401: PPUSH
55402: LD_INT 1
55404: PPUSH
55405: CALL_OW 275
55409: PUSH
55410: LD_VAR 0 1
55414: PPUSH
55415: LD_INT 2
55417: PPUSH
55418: CALL_OW 275
55422: PUSH
55423: LD_VAR 0 1
55427: PPUSH
55428: LD_INT 3
55430: PPUSH
55431: CALL_OW 275
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// end ;
55441: LD_VAR 0 2
55445: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55446: LD_INT 0
55448: PPUSH
55449: PPUSH
// result := array ;
55450: LD_ADDR_VAR 0 3
55454: PUSH
55455: LD_VAR 0 1
55459: ST_TO_ADDR
// if size >= result then
55460: LD_VAR 0 2
55464: PUSH
55465: LD_VAR 0 3
55469: GREATEREQUAL
55470: IFFALSE 55474
// exit ;
55472: GO 55524
// if size then
55474: LD_VAR 0 2
55478: IFFALSE 55524
// for i := array downto size do
55480: LD_ADDR_VAR 0 4
55484: PUSH
55485: DOUBLE
55486: LD_VAR 0 1
55490: INC
55491: ST_TO_ADDR
55492: LD_VAR 0 2
55496: PUSH
55497: FOR_DOWNTO
55498: IFFALSE 55522
// result := Delete ( result , result ) ;
55500: LD_ADDR_VAR 0 3
55504: PUSH
55505: LD_VAR 0 3
55509: PPUSH
55510: LD_VAR 0 3
55514: PPUSH
55515: CALL_OW 3
55519: ST_TO_ADDR
55520: GO 55497
55522: POP
55523: POP
// end ;
55524: LD_VAR 0 3
55528: RET
// export function ComExit ( unit ) ; var tmp ; begin
55529: LD_INT 0
55531: PPUSH
55532: PPUSH
// if not IsInUnit ( unit ) then
55533: LD_VAR 0 1
55537: PPUSH
55538: CALL_OW 310
55542: NOT
55543: IFFALSE 55547
// exit ;
55545: GO 55607
// tmp := IsInUnit ( unit ) ;
55547: LD_ADDR_VAR 0 3
55551: PUSH
55552: LD_VAR 0 1
55556: PPUSH
55557: CALL_OW 310
55561: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55562: LD_VAR 0 3
55566: PPUSH
55567: CALL_OW 247
55571: PUSH
55572: LD_INT 2
55574: EQUAL
55575: IFFALSE 55588
// ComExitVehicle ( unit ) else
55577: LD_VAR 0 1
55581: PPUSH
55582: CALL_OW 121
55586: GO 55597
// ComExitBuilding ( unit ) ;
55588: LD_VAR 0 1
55592: PPUSH
55593: CALL_OW 122
// result := tmp ;
55597: LD_ADDR_VAR 0 2
55601: PUSH
55602: LD_VAR 0 3
55606: ST_TO_ADDR
// end ;
55607: LD_VAR 0 2
55611: RET
// export function ComExitAll ( units ) ; var i ; begin
55612: LD_INT 0
55614: PPUSH
55615: PPUSH
// if not units then
55616: LD_VAR 0 1
55620: NOT
55621: IFFALSE 55625
// exit ;
55623: GO 55651
// for i in units do
55625: LD_ADDR_VAR 0 3
55629: PUSH
55630: LD_VAR 0 1
55634: PUSH
55635: FOR_IN
55636: IFFALSE 55649
// ComExit ( i ) ;
55638: LD_VAR 0 3
55642: PPUSH
55643: CALL 55529 0 1
55647: GO 55635
55649: POP
55650: POP
// end ;
55651: LD_VAR 0 2
55655: RET
// export function ResetHc ; begin
55656: LD_INT 0
55658: PPUSH
// InitHc ;
55659: CALL_OW 19
// hc_importance := 0 ;
55663: LD_ADDR_OWVAR 32
55667: PUSH
55668: LD_INT 0
55670: ST_TO_ADDR
// end ;
55671: LD_VAR 0 1
55675: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55676: LD_INT 0
55678: PPUSH
55679: PPUSH
55680: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55681: LD_ADDR_VAR 0 6
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: LD_VAR 0 3
55695: PLUS
55696: PUSH
55697: LD_INT 2
55699: DIV
55700: ST_TO_ADDR
// if _x < 0 then
55701: LD_VAR 0 6
55705: PUSH
55706: LD_INT 0
55708: LESS
55709: IFFALSE 55726
// _x := _x * - 1 ;
55711: LD_ADDR_VAR 0 6
55715: PUSH
55716: LD_VAR 0 6
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: MUL
55725: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55726: LD_ADDR_VAR 0 7
55730: PUSH
55731: LD_VAR 0 2
55735: PUSH
55736: LD_VAR 0 4
55740: PLUS
55741: PUSH
55742: LD_INT 2
55744: DIV
55745: ST_TO_ADDR
// if _y < 0 then
55746: LD_VAR 0 7
55750: PUSH
55751: LD_INT 0
55753: LESS
55754: IFFALSE 55771
// _y := _y * - 1 ;
55756: LD_ADDR_VAR 0 7
55760: PUSH
55761: LD_VAR 0 7
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: MUL
55770: ST_TO_ADDR
// result := [ _x , _y ] ;
55771: LD_ADDR_VAR 0 5
55775: PUSH
55776: LD_VAR 0 6
55780: PUSH
55781: LD_VAR 0 7
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// end ;
55790: LD_VAR 0 5
55794: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55795: LD_INT 0
55797: PPUSH
55798: PPUSH
55799: PPUSH
55800: PPUSH
// task := GetTaskList ( unit ) ;
55801: LD_ADDR_VAR 0 7
55805: PUSH
55806: LD_VAR 0 1
55810: PPUSH
55811: CALL_OW 437
55815: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55816: LD_VAR 0 7
55820: NOT
55821: PUSH
55822: LD_VAR 0 1
55826: PPUSH
55827: LD_VAR 0 2
55831: PPUSH
55832: CALL_OW 308
55836: NOT
55837: AND
55838: IFFALSE 55842
// exit ;
55840: GO 55960
// if IsInArea ( unit , area ) then
55842: LD_VAR 0 1
55846: PPUSH
55847: LD_VAR 0 2
55851: PPUSH
55852: CALL_OW 308
55856: IFFALSE 55874
// begin ComMoveToArea ( unit , goAway ) ;
55858: LD_VAR 0 1
55862: PPUSH
55863: LD_VAR 0 3
55867: PPUSH
55868: CALL_OW 113
// exit ;
55872: GO 55960
// end ; if task [ 1 ] [ 1 ] <> M then
55874: LD_VAR 0 7
55878: PUSH
55879: LD_INT 1
55881: ARRAY
55882: PUSH
55883: LD_INT 1
55885: ARRAY
55886: PUSH
55887: LD_STRING M
55889: NONEQUAL
55890: IFFALSE 55894
// exit ;
55892: GO 55960
// x := task [ 1 ] [ 2 ] ;
55894: LD_ADDR_VAR 0 5
55898: PUSH
55899: LD_VAR 0 7
55903: PUSH
55904: LD_INT 1
55906: ARRAY
55907: PUSH
55908: LD_INT 2
55910: ARRAY
55911: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55912: LD_ADDR_VAR 0 6
55916: PUSH
55917: LD_VAR 0 7
55921: PUSH
55922: LD_INT 1
55924: ARRAY
55925: PUSH
55926: LD_INT 3
55928: ARRAY
55929: ST_TO_ADDR
// if InArea ( x , y , area ) then
55930: LD_VAR 0 5
55934: PPUSH
55935: LD_VAR 0 6
55939: PPUSH
55940: LD_VAR 0 2
55944: PPUSH
55945: CALL_OW 309
55949: IFFALSE 55960
// ComStop ( unit ) ;
55951: LD_VAR 0 1
55955: PPUSH
55956: CALL_OW 141
// end ;
55960: LD_VAR 0 4
55964: RET
// export function Abs ( value ) ; begin
55965: LD_INT 0
55967: PPUSH
// result := value ;
55968: LD_ADDR_VAR 0 2
55972: PUSH
55973: LD_VAR 0 1
55977: ST_TO_ADDR
// if value < 0 then
55978: LD_VAR 0 1
55982: PUSH
55983: LD_INT 0
55985: LESS
55986: IFFALSE 56003
// result := value * - 1 ;
55988: LD_ADDR_VAR 0 2
55992: PUSH
55993: LD_VAR 0 1
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: MUL
56002: ST_TO_ADDR
// end ;
56003: LD_VAR 0 2
56007: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56008: LD_INT 0
56010: PPUSH
56011: PPUSH
56012: PPUSH
56013: PPUSH
56014: PPUSH
56015: PPUSH
56016: PPUSH
56017: PPUSH
// if not unit or not building then
56018: LD_VAR 0 1
56022: NOT
56023: PUSH
56024: LD_VAR 0 2
56028: NOT
56029: OR
56030: IFFALSE 56034
// exit ;
56032: GO 56260
// x := GetX ( building ) ;
56034: LD_ADDR_VAR 0 4
56038: PUSH
56039: LD_VAR 0 2
56043: PPUSH
56044: CALL_OW 250
56048: ST_TO_ADDR
// y := GetY ( building ) ;
56049: LD_ADDR_VAR 0 6
56053: PUSH
56054: LD_VAR 0 2
56058: PPUSH
56059: CALL_OW 251
56063: ST_TO_ADDR
// d := GetDir ( building ) ;
56064: LD_ADDR_VAR 0 8
56068: PUSH
56069: LD_VAR 0 2
56073: PPUSH
56074: CALL_OW 254
56078: ST_TO_ADDR
// r := 4 ;
56079: LD_ADDR_VAR 0 9
56083: PUSH
56084: LD_INT 4
56086: ST_TO_ADDR
// for i := 1 to 5 do
56087: LD_ADDR_VAR 0 10
56091: PUSH
56092: DOUBLE
56093: LD_INT 1
56095: DEC
56096: ST_TO_ADDR
56097: LD_INT 5
56099: PUSH
56100: FOR_TO
56101: IFFALSE 56258
// begin _x := ShiftX ( x , d , r + i ) ;
56103: LD_ADDR_VAR 0 5
56107: PUSH
56108: LD_VAR 0 4
56112: PPUSH
56113: LD_VAR 0 8
56117: PPUSH
56118: LD_VAR 0 9
56122: PUSH
56123: LD_VAR 0 10
56127: PLUS
56128: PPUSH
56129: CALL_OW 272
56133: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56134: LD_ADDR_VAR 0 7
56138: PUSH
56139: LD_VAR 0 6
56143: PPUSH
56144: LD_VAR 0 8
56148: PPUSH
56149: LD_VAR 0 9
56153: PUSH
56154: LD_VAR 0 10
56158: PLUS
56159: PPUSH
56160: CALL_OW 273
56164: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56165: LD_VAR 0 5
56169: PPUSH
56170: LD_VAR 0 7
56174: PPUSH
56175: CALL_OW 488
56179: PUSH
56180: LD_VAR 0 5
56184: PPUSH
56185: LD_VAR 0 7
56189: PPUSH
56190: CALL_OW 428
56194: PPUSH
56195: CALL_OW 247
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: IN
56210: NOT
56211: AND
56212: IFFALSE 56256
// begin ComMoveXY ( unit , _x , _y ) ;
56214: LD_VAR 0 1
56218: PPUSH
56219: LD_VAR 0 5
56223: PPUSH
56224: LD_VAR 0 7
56228: PPUSH
56229: CALL_OW 111
// result := [ _x , _y ] ;
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: LD_VAR 0 5
56242: PUSH
56243: LD_VAR 0 7
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// exit ;
56252: POP
56253: POP
56254: GO 56260
// end ; end ;
56256: GO 56100
56258: POP
56259: POP
// end ;
56260: LD_VAR 0 3
56264: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56265: LD_INT 0
56267: PPUSH
56268: PPUSH
56269: PPUSH
// result := 0 ;
56270: LD_ADDR_VAR 0 3
56274: PUSH
56275: LD_INT 0
56277: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56278: LD_VAR 0 1
56282: PUSH
56283: LD_INT 0
56285: LESS
56286: PUSH
56287: LD_VAR 0 1
56291: PUSH
56292: LD_INT 8
56294: GREATER
56295: OR
56296: PUSH
56297: LD_VAR 0 2
56301: PUSH
56302: LD_INT 0
56304: LESS
56305: OR
56306: PUSH
56307: LD_VAR 0 2
56311: PUSH
56312: LD_INT 8
56314: GREATER
56315: OR
56316: IFFALSE 56320
// exit ;
56318: GO 56395
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56320: LD_ADDR_VAR 0 4
56324: PUSH
56325: LD_INT 22
56327: PUSH
56328: LD_VAR 0 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PPUSH
56337: CALL_OW 69
56341: PUSH
56342: FOR_IN
56343: IFFALSE 56393
// begin un := UnitShoot ( i ) ;
56345: LD_ADDR_VAR 0 5
56349: PUSH
56350: LD_VAR 0 4
56354: PPUSH
56355: CALL_OW 504
56359: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56360: LD_VAR 0 5
56364: PPUSH
56365: CALL_OW 255
56369: PUSH
56370: LD_VAR 0 1
56374: EQUAL
56375: IFFALSE 56391
// begin result := un ;
56377: LD_ADDR_VAR 0 3
56381: PUSH
56382: LD_VAR 0 5
56386: ST_TO_ADDR
// exit ;
56387: POP
56388: POP
56389: GO 56395
// end ; end ;
56391: GO 56342
56393: POP
56394: POP
// end ;
56395: LD_VAR 0 3
56399: RET
// export function GetCargoBay ( units ) ; begin
56400: LD_INT 0
56402: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56403: LD_ADDR_VAR 0 2
56407: PUSH
56408: LD_VAR 0 1
56412: PPUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 34
56418: PUSH
56419: LD_INT 12
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 34
56428: PUSH
56429: LD_INT 51
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 34
56438: PUSH
56439: LD_INT 32
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 34
56448: PUSH
56449: LD_INT 89
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: PPUSH
56463: CALL_OW 72
56467: ST_TO_ADDR
// end ;
56468: LD_VAR 0 2
56472: RET
// export function Negate ( value ) ; begin
56473: LD_INT 0
56475: PPUSH
// result := not value ;
56476: LD_ADDR_VAR 0 2
56480: PUSH
56481: LD_VAR 0 1
56485: NOT
56486: ST_TO_ADDR
// end ;
56487: LD_VAR 0 2
56491: RET
// export function Inc ( value ) ; begin
56492: LD_INT 0
56494: PPUSH
// result := value + 1 ;
56495: LD_ADDR_VAR 0 2
56499: PUSH
56500: LD_VAR 0 1
56504: PUSH
56505: LD_INT 1
56507: PLUS
56508: ST_TO_ADDR
// end ;
56509: LD_VAR 0 2
56513: RET
// export function Dec ( value ) ; begin
56514: LD_INT 0
56516: PPUSH
// result := value - 1 ;
56517: LD_ADDR_VAR 0 2
56521: PUSH
56522: LD_VAR 0 1
56526: PUSH
56527: LD_INT 1
56529: MINUS
56530: ST_TO_ADDR
// end ;
56531: LD_VAR 0 2
56535: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56536: LD_INT 0
56538: PPUSH
56539: PPUSH
56540: PPUSH
56541: PPUSH
56542: PPUSH
56543: PPUSH
56544: PPUSH
56545: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56546: LD_VAR 0 1
56550: PPUSH
56551: LD_VAR 0 2
56555: PPUSH
56556: CALL_OW 488
56560: NOT
56561: PUSH
56562: LD_VAR 0 3
56566: PPUSH
56567: LD_VAR 0 4
56571: PPUSH
56572: CALL_OW 488
56576: NOT
56577: OR
56578: IFFALSE 56591
// begin result := - 1 ;
56580: LD_ADDR_VAR 0 5
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: ST_TO_ADDR
// exit ;
56589: GO 56826
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56591: LD_ADDR_VAR 0 12
56595: PUSH
56596: LD_VAR 0 1
56600: PPUSH
56601: LD_VAR 0 2
56605: PPUSH
56606: LD_VAR 0 3
56610: PPUSH
56611: LD_VAR 0 4
56615: PPUSH
56616: CALL 55676 0 4
56620: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56621: LD_ADDR_VAR 0 11
56625: PUSH
56626: LD_VAR 0 1
56630: PPUSH
56631: LD_VAR 0 2
56635: PPUSH
56636: LD_VAR 0 12
56640: PUSH
56641: LD_INT 1
56643: ARRAY
56644: PPUSH
56645: LD_VAR 0 12
56649: PUSH
56650: LD_INT 2
56652: ARRAY
56653: PPUSH
56654: CALL_OW 298
56658: ST_TO_ADDR
// distance := 9999 ;
56659: LD_ADDR_VAR 0 10
56663: PUSH
56664: LD_INT 9999
56666: ST_TO_ADDR
// for i := 0 to 5 do
56667: LD_ADDR_VAR 0 6
56671: PUSH
56672: DOUBLE
56673: LD_INT 0
56675: DEC
56676: ST_TO_ADDR
56677: LD_INT 5
56679: PUSH
56680: FOR_TO
56681: IFFALSE 56824
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56683: LD_ADDR_VAR 0 7
56687: PUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: LD_VAR 0 6
56697: PPUSH
56698: LD_VAR 0 11
56702: PPUSH
56703: CALL_OW 272
56707: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56708: LD_ADDR_VAR 0 8
56712: PUSH
56713: LD_VAR 0 2
56717: PPUSH
56718: LD_VAR 0 6
56722: PPUSH
56723: LD_VAR 0 11
56727: PPUSH
56728: CALL_OW 273
56732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56733: LD_VAR 0 7
56737: PPUSH
56738: LD_VAR 0 8
56742: PPUSH
56743: CALL_OW 488
56747: NOT
56748: IFFALSE 56752
// continue ;
56750: GO 56680
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56752: LD_ADDR_VAR 0 9
56756: PUSH
56757: LD_VAR 0 12
56761: PUSH
56762: LD_INT 1
56764: ARRAY
56765: PPUSH
56766: LD_VAR 0 12
56770: PUSH
56771: LD_INT 2
56773: ARRAY
56774: PPUSH
56775: LD_VAR 0 7
56779: PPUSH
56780: LD_VAR 0 8
56784: PPUSH
56785: CALL_OW 298
56789: ST_TO_ADDR
// if tmp < distance then
56790: LD_VAR 0 9
56794: PUSH
56795: LD_VAR 0 10
56799: LESS
56800: IFFALSE 56822
// begin result := i ;
56802: LD_ADDR_VAR 0 5
56806: PUSH
56807: LD_VAR 0 6
56811: ST_TO_ADDR
// distance := tmp ;
56812: LD_ADDR_VAR 0 10
56816: PUSH
56817: LD_VAR 0 9
56821: ST_TO_ADDR
// end ; end ;
56822: GO 56680
56824: POP
56825: POP
// end ;
56826: LD_VAR 0 5
56830: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56831: LD_INT 0
56833: PPUSH
56834: PPUSH
// if not driver or not IsInUnit ( driver ) then
56835: LD_VAR 0 1
56839: NOT
56840: PUSH
56841: LD_VAR 0 1
56845: PPUSH
56846: CALL_OW 310
56850: NOT
56851: OR
56852: IFFALSE 56856
// exit ;
56854: GO 56946
// vehicle := IsInUnit ( driver ) ;
56856: LD_ADDR_VAR 0 3
56860: PUSH
56861: LD_VAR 0 1
56865: PPUSH
56866: CALL_OW 310
56870: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56871: LD_VAR 0 1
56875: PPUSH
56876: LD_STRING \
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: PUSH
56906: LD_STRING E
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_VAR 0 3
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PPUSH
56942: CALL_OW 446
// end ;
56946: LD_VAR 0 2
56950: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56951: LD_INT 0
56953: PPUSH
56954: PPUSH
// if not driver or not IsInUnit ( driver ) then
56955: LD_VAR 0 1
56959: NOT
56960: PUSH
56961: LD_VAR 0 1
56965: PPUSH
56966: CALL_OW 310
56970: NOT
56971: OR
56972: IFFALSE 56976
// exit ;
56974: GO 57066
// vehicle := IsInUnit ( driver ) ;
56976: LD_ADDR_VAR 0 3
56980: PUSH
56981: LD_VAR 0 1
56985: PPUSH
56986: CALL_OW 310
56990: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56991: LD_VAR 0 1
56995: PPUSH
56996: LD_STRING \
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: PUSH
57026: LD_STRING E
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_VAR 0 3
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PPUSH
57062: CALL_OW 447
// end ;
57066: LD_VAR 0 2
57070: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57071: LD_INT 0
57073: PPUSH
57074: PPUSH
57075: PPUSH
// tmp := [ ] ;
57076: LD_ADDR_VAR 0 5
57080: PUSH
57081: EMPTY
57082: ST_TO_ADDR
// for i in units do
57083: LD_ADDR_VAR 0 4
57087: PUSH
57088: LD_VAR 0 1
57092: PUSH
57093: FOR_IN
57094: IFFALSE 57132
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57096: LD_ADDR_VAR 0 5
57100: PUSH
57101: LD_VAR 0 5
57105: PPUSH
57106: LD_VAR 0 5
57110: PUSH
57111: LD_INT 1
57113: PLUS
57114: PPUSH
57115: LD_VAR 0 4
57119: PPUSH
57120: CALL_OW 256
57124: PPUSH
57125: CALL_OW 2
57129: ST_TO_ADDR
57130: GO 57093
57132: POP
57133: POP
// if not tmp then
57134: LD_VAR 0 5
57138: NOT
57139: IFFALSE 57143
// exit ;
57141: GO 57191
// if asc then
57143: LD_VAR 0 2
57147: IFFALSE 57171
// result := SortListByListAsc ( units , tmp ) else
57149: LD_ADDR_VAR 0 3
57153: PUSH
57154: LD_VAR 0 1
57158: PPUSH
57159: LD_VAR 0 5
57163: PPUSH
57164: CALL_OW 76
57168: ST_TO_ADDR
57169: GO 57191
// result := SortListByListDesc ( units , tmp ) ;
57171: LD_ADDR_VAR 0 3
57175: PUSH
57176: LD_VAR 0 1
57180: PPUSH
57181: LD_VAR 0 5
57185: PPUSH
57186: CALL_OW 77
57190: ST_TO_ADDR
// end ;
57191: LD_VAR 0 3
57195: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57196: LD_INT 0
57198: PPUSH
57199: PPUSH
// task := GetTaskList ( mech ) ;
57200: LD_ADDR_VAR 0 4
57204: PUSH
57205: LD_VAR 0 1
57209: PPUSH
57210: CALL_OW 437
57214: ST_TO_ADDR
// if not task then
57215: LD_VAR 0 4
57219: NOT
57220: IFFALSE 57224
// exit ;
57222: GO 57266
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57224: LD_ADDR_VAR 0 3
57228: PUSH
57229: LD_VAR 0 4
57233: PUSH
57234: LD_INT 1
57236: ARRAY
57237: PUSH
57238: LD_INT 1
57240: ARRAY
57241: PUSH
57242: LD_STRING r
57244: EQUAL
57245: PUSH
57246: LD_VAR 0 4
57250: PUSH
57251: LD_INT 1
57253: ARRAY
57254: PUSH
57255: LD_INT 4
57257: ARRAY
57258: PUSH
57259: LD_VAR 0 2
57263: EQUAL
57264: AND
57265: ST_TO_ADDR
// end ;
57266: LD_VAR 0 3
57270: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57271: LD_INT 0
57273: PPUSH
// SetDir ( unit , d ) ;
57274: LD_VAR 0 1
57278: PPUSH
57279: LD_VAR 0 4
57283: PPUSH
57284: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57288: LD_ADDR_VAR 0 6
57292: PUSH
57293: LD_VAR 0 1
57297: PPUSH
57298: LD_VAR 0 2
57302: PPUSH
57303: LD_VAR 0 3
57307: PPUSH
57308: LD_VAR 0 5
57312: PPUSH
57313: CALL_OW 48
57317: ST_TO_ADDR
// end ;
57318: LD_VAR 0 6
57322: RET
// export function ToNaturalNumber ( number ) ; begin
57323: LD_INT 0
57325: PPUSH
// result := number div 1 ;
57326: LD_ADDR_VAR 0 2
57330: PUSH
57331: LD_VAR 0 1
57335: PUSH
57336: LD_INT 1
57338: DIV
57339: ST_TO_ADDR
// if number < 0 then
57340: LD_VAR 0 1
57344: PUSH
57345: LD_INT 0
57347: LESS
57348: IFFALSE 57358
// result := 0 ;
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: LD_INT 0
57357: ST_TO_ADDR
// end ;
57358: LD_VAR 0 2
57362: RET
// export function SortByClass ( units , class ) ; var un ; begin
57363: LD_INT 0
57365: PPUSH
57366: PPUSH
// if not units or not class then
57367: LD_VAR 0 1
57371: NOT
57372: PUSH
57373: LD_VAR 0 2
57377: NOT
57378: OR
57379: IFFALSE 57383
// exit ;
57381: GO 57478
// result := [ ] ;
57383: LD_ADDR_VAR 0 3
57387: PUSH
57388: EMPTY
57389: ST_TO_ADDR
// for un in units do
57390: LD_ADDR_VAR 0 4
57394: PUSH
57395: LD_VAR 0 1
57399: PUSH
57400: FOR_IN
57401: IFFALSE 57476
// if GetClass ( un ) = class then
57403: LD_VAR 0 4
57407: PPUSH
57408: CALL_OW 257
57412: PUSH
57413: LD_VAR 0 2
57417: EQUAL
57418: IFFALSE 57445
// result := Insert ( result , 1 , un ) else
57420: LD_ADDR_VAR 0 3
57424: PUSH
57425: LD_VAR 0 3
57429: PPUSH
57430: LD_INT 1
57432: PPUSH
57433: LD_VAR 0 4
57437: PPUSH
57438: CALL_OW 2
57442: ST_TO_ADDR
57443: GO 57474
// result := Replace ( result , result + 1 , un ) ;
57445: LD_ADDR_VAR 0 3
57449: PUSH
57450: LD_VAR 0 3
57454: PPUSH
57455: LD_VAR 0 3
57459: PUSH
57460: LD_INT 1
57462: PLUS
57463: PPUSH
57464: LD_VAR 0 4
57468: PPUSH
57469: CALL_OW 1
57473: ST_TO_ADDR
57474: GO 57400
57476: POP
57477: POP
// end ;
57478: LD_VAR 0 3
57482: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57483: LD_INT 0
57485: PPUSH
57486: PPUSH
57487: PPUSH
57488: PPUSH
57489: PPUSH
57490: PPUSH
57491: PPUSH
// result := [ ] ;
57492: LD_ADDR_VAR 0 4
57496: PUSH
57497: EMPTY
57498: ST_TO_ADDR
// if x - r < 0 then
57499: LD_VAR 0 1
57503: PUSH
57504: LD_VAR 0 3
57508: MINUS
57509: PUSH
57510: LD_INT 0
57512: LESS
57513: IFFALSE 57525
// min_x := 0 else
57515: LD_ADDR_VAR 0 8
57519: PUSH
57520: LD_INT 0
57522: ST_TO_ADDR
57523: GO 57541
// min_x := x - r ;
57525: LD_ADDR_VAR 0 8
57529: PUSH
57530: LD_VAR 0 1
57534: PUSH
57535: LD_VAR 0 3
57539: MINUS
57540: ST_TO_ADDR
// if y - r < 0 then
57541: LD_VAR 0 2
57545: PUSH
57546: LD_VAR 0 3
57550: MINUS
57551: PUSH
57552: LD_INT 0
57554: LESS
57555: IFFALSE 57567
// min_y := 0 else
57557: LD_ADDR_VAR 0 7
57561: PUSH
57562: LD_INT 0
57564: ST_TO_ADDR
57565: GO 57583
// min_y := y - r ;
57567: LD_ADDR_VAR 0 7
57571: PUSH
57572: LD_VAR 0 2
57576: PUSH
57577: LD_VAR 0 3
57581: MINUS
57582: ST_TO_ADDR
// max_x := x + r ;
57583: LD_ADDR_VAR 0 9
57587: PUSH
57588: LD_VAR 0 1
57592: PUSH
57593: LD_VAR 0 3
57597: PLUS
57598: ST_TO_ADDR
// max_y := y + r ;
57599: LD_ADDR_VAR 0 10
57603: PUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_VAR 0 3
57613: PLUS
57614: ST_TO_ADDR
// for _x = min_x to max_x do
57615: LD_ADDR_VAR 0 5
57619: PUSH
57620: DOUBLE
57621: LD_VAR 0 8
57625: DEC
57626: ST_TO_ADDR
57627: LD_VAR 0 9
57631: PUSH
57632: FOR_TO
57633: IFFALSE 57734
// for _y = min_y to max_y do
57635: LD_ADDR_VAR 0 6
57639: PUSH
57640: DOUBLE
57641: LD_VAR 0 7
57645: DEC
57646: ST_TO_ADDR
57647: LD_VAR 0 10
57651: PUSH
57652: FOR_TO
57653: IFFALSE 57730
// begin if not ValidHex ( _x , _y ) then
57655: LD_VAR 0 5
57659: PPUSH
57660: LD_VAR 0 6
57664: PPUSH
57665: CALL_OW 488
57669: NOT
57670: IFFALSE 57674
// continue ;
57672: GO 57652
// if GetResourceTypeXY ( _x , _y ) then
57674: LD_VAR 0 5
57678: PPUSH
57679: LD_VAR 0 6
57683: PPUSH
57684: CALL_OW 283
57688: IFFALSE 57728
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57690: LD_ADDR_VAR 0 4
57694: PUSH
57695: LD_VAR 0 4
57699: PPUSH
57700: LD_VAR 0 4
57704: PUSH
57705: LD_INT 1
57707: PLUS
57708: PPUSH
57709: LD_VAR 0 5
57713: PUSH
57714: LD_VAR 0 6
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PPUSH
57723: CALL_OW 1
57727: ST_TO_ADDR
// end ;
57728: GO 57652
57730: POP
57731: POP
57732: GO 57632
57734: POP
57735: POP
// end ;
57736: LD_VAR 0 4
57740: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57741: LD_INT 0
57743: PPUSH
57744: PPUSH
57745: PPUSH
57746: PPUSH
57747: PPUSH
57748: PPUSH
57749: PPUSH
57750: PPUSH
// if not units then
57751: LD_VAR 0 1
57755: NOT
57756: IFFALSE 57760
// exit ;
57758: GO 58288
// result := UnitFilter ( units , [ f_ok ] ) ;
57760: LD_ADDR_VAR 0 3
57764: PUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: LD_INT 50
57772: PUSH
57773: EMPTY
57774: LIST
57775: PPUSH
57776: CALL_OW 72
57780: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57781: LD_ADDR_VAR 0 8
57785: PUSH
57786: LD_VAR 0 1
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PPUSH
57795: CALL_OW 255
57799: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57800: LD_ADDR_VAR 0 10
57804: PUSH
57805: LD_INT 29
57807: PUSH
57808: LD_INT 91
57810: PUSH
57811: LD_INT 49
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// if not result then
57819: LD_VAR 0 3
57823: NOT
57824: IFFALSE 57828
// exit ;
57826: GO 58288
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57828: LD_ADDR_VAR 0 5
57832: PUSH
57833: LD_INT 81
57835: PUSH
57836: LD_VAR 0 8
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PPUSH
57845: CALL_OW 69
57849: ST_TO_ADDR
// for i in result do
57850: LD_ADDR_VAR 0 4
57854: PUSH
57855: LD_VAR 0 3
57859: PUSH
57860: FOR_IN
57861: IFFALSE 58286
// begin tag := GetTag ( i ) + 1 ;
57863: LD_ADDR_VAR 0 9
57867: PUSH
57868: LD_VAR 0 4
57872: PPUSH
57873: CALL_OW 110
57877: PUSH
57878: LD_INT 1
57880: PLUS
57881: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57882: LD_ADDR_VAR 0 7
57886: PUSH
57887: LD_VAR 0 4
57891: PPUSH
57892: CALL_OW 250
57896: PPUSH
57897: LD_VAR 0 4
57901: PPUSH
57902: CALL_OW 251
57906: PPUSH
57907: LD_INT 4
57909: PPUSH
57910: CALL 57483 0 3
57914: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57915: LD_VAR 0 4
57919: PPUSH
57920: CALL_OW 247
57924: PUSH
57925: LD_INT 2
57927: EQUAL
57928: PUSH
57929: LD_VAR 0 7
57933: PUSH
57934: LD_INT 2
57936: GREATER
57937: AND
57938: PUSH
57939: LD_VAR 0 4
57943: PPUSH
57944: CALL_OW 264
57948: PUSH
57949: LD_VAR 0 10
57953: IN
57954: NOT
57955: AND
57956: IFFALSE 57995
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57958: LD_VAR 0 4
57962: PPUSH
57963: LD_VAR 0 7
57967: PUSH
57968: LD_INT 1
57970: ARRAY
57971: PUSH
57972: LD_INT 1
57974: ARRAY
57975: PPUSH
57976: LD_VAR 0 7
57980: PUSH
57981: LD_INT 1
57983: ARRAY
57984: PUSH
57985: LD_INT 2
57987: ARRAY
57988: PPUSH
57989: CALL_OW 116
57993: GO 58284
// if path > tag then
57995: LD_VAR 0 2
57999: PUSH
58000: LD_VAR 0 9
58004: GREATER
58005: IFFALSE 58213
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58007: LD_ADDR_VAR 0 6
58011: PUSH
58012: LD_VAR 0 5
58016: PPUSH
58017: LD_INT 91
58019: PUSH
58020: LD_VAR 0 4
58024: PUSH
58025: LD_INT 8
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: PPUSH
58033: CALL_OW 72
58037: ST_TO_ADDR
// if nearEnemy then
58038: LD_VAR 0 6
58042: IFFALSE 58111
// begin if GetWeapon ( i ) = ru_time_lapser then
58044: LD_VAR 0 4
58048: PPUSH
58049: CALL_OW 264
58053: PUSH
58054: LD_INT 49
58056: EQUAL
58057: IFFALSE 58085
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58059: LD_VAR 0 4
58063: PPUSH
58064: LD_VAR 0 6
58068: PPUSH
58069: LD_VAR 0 4
58073: PPUSH
58074: CALL_OW 74
58078: PPUSH
58079: CALL_OW 112
58083: GO 58109
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58085: LD_VAR 0 4
58089: PPUSH
58090: LD_VAR 0 6
58094: PPUSH
58095: LD_VAR 0 4
58099: PPUSH
58100: CALL_OW 74
58104: PPUSH
58105: CALL 59359 0 2
// end else
58109: GO 58211
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58111: LD_VAR 0 4
58115: PPUSH
58116: LD_VAR 0 2
58120: PUSH
58121: LD_VAR 0 9
58125: ARRAY
58126: PUSH
58127: LD_INT 1
58129: ARRAY
58130: PPUSH
58131: LD_VAR 0 2
58135: PUSH
58136: LD_VAR 0 9
58140: ARRAY
58141: PUSH
58142: LD_INT 2
58144: ARRAY
58145: PPUSH
58146: CALL_OW 297
58150: PUSH
58151: LD_INT 6
58153: GREATER
58154: IFFALSE 58197
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58156: LD_VAR 0 4
58160: PPUSH
58161: LD_VAR 0 2
58165: PUSH
58166: LD_VAR 0 9
58170: ARRAY
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PPUSH
58176: LD_VAR 0 2
58180: PUSH
58181: LD_VAR 0 9
58185: ARRAY
58186: PUSH
58187: LD_INT 2
58189: ARRAY
58190: PPUSH
58191: CALL_OW 114
58195: GO 58211
// SetTag ( i , tag ) ;
58197: LD_VAR 0 4
58201: PPUSH
58202: LD_VAR 0 9
58206: PPUSH
58207: CALL_OW 109
// end else
58211: GO 58284
// if enemy then
58213: LD_VAR 0 5
58217: IFFALSE 58284
// begin if GetWeapon ( i ) = ru_time_lapser then
58219: LD_VAR 0 4
58223: PPUSH
58224: CALL_OW 264
58228: PUSH
58229: LD_INT 49
58231: EQUAL
58232: IFFALSE 58260
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58234: LD_VAR 0 4
58238: PPUSH
58239: LD_VAR 0 5
58243: PPUSH
58244: LD_VAR 0 4
58248: PPUSH
58249: CALL_OW 74
58253: PPUSH
58254: CALL_OW 112
58258: GO 58284
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58260: LD_VAR 0 4
58264: PPUSH
58265: LD_VAR 0 5
58269: PPUSH
58270: LD_VAR 0 4
58274: PPUSH
58275: CALL_OW 74
58279: PPUSH
58280: CALL 59359 0 2
// end ; end ;
58284: GO 57860
58286: POP
58287: POP
// end ;
58288: LD_VAR 0 3
58292: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58293: LD_INT 0
58295: PPUSH
58296: PPUSH
58297: PPUSH
// if not unit or IsInUnit ( unit ) then
58298: LD_VAR 0 1
58302: NOT
58303: PUSH
58304: LD_VAR 0 1
58308: PPUSH
58309: CALL_OW 310
58313: OR
58314: IFFALSE 58318
// exit ;
58316: GO 58409
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58318: LD_ADDR_VAR 0 4
58322: PUSH
58323: LD_VAR 0 1
58327: PPUSH
58328: CALL_OW 250
58332: PPUSH
58333: LD_VAR 0 2
58337: PPUSH
58338: LD_INT 1
58340: PPUSH
58341: CALL_OW 272
58345: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58346: LD_ADDR_VAR 0 5
58350: PUSH
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL_OW 251
58360: PPUSH
58361: LD_VAR 0 2
58365: PPUSH
58366: LD_INT 1
58368: PPUSH
58369: CALL_OW 273
58373: ST_TO_ADDR
// if ValidHex ( x , y ) then
58374: LD_VAR 0 4
58378: PPUSH
58379: LD_VAR 0 5
58383: PPUSH
58384: CALL_OW 488
58388: IFFALSE 58409
// ComTurnXY ( unit , x , y ) ;
58390: LD_VAR 0 1
58394: PPUSH
58395: LD_VAR 0 4
58399: PPUSH
58400: LD_VAR 0 5
58404: PPUSH
58405: CALL_OW 118
// end ;
58409: LD_VAR 0 3
58413: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58414: LD_INT 0
58416: PPUSH
58417: PPUSH
// result := false ;
58418: LD_ADDR_VAR 0 3
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// if not units then
58426: LD_VAR 0 2
58430: NOT
58431: IFFALSE 58435
// exit ;
58433: GO 58480
// for i in units do
58435: LD_ADDR_VAR 0 4
58439: PUSH
58440: LD_VAR 0 2
58444: PUSH
58445: FOR_IN
58446: IFFALSE 58478
// if See ( side , i ) then
58448: LD_VAR 0 1
58452: PPUSH
58453: LD_VAR 0 4
58457: PPUSH
58458: CALL_OW 292
58462: IFFALSE 58476
// begin result := true ;
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: LD_INT 1
58471: ST_TO_ADDR
// exit ;
58472: POP
58473: POP
58474: GO 58480
// end ;
58476: GO 58445
58478: POP
58479: POP
// end ;
58480: LD_VAR 0 3
58484: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58485: LD_INT 0
58487: PPUSH
58488: PPUSH
58489: PPUSH
58490: PPUSH
// if not unit or not points then
58491: LD_VAR 0 1
58495: NOT
58496: PUSH
58497: LD_VAR 0 2
58501: NOT
58502: OR
58503: IFFALSE 58507
// exit ;
58505: GO 58597
// dist := 99999 ;
58507: LD_ADDR_VAR 0 5
58511: PUSH
58512: LD_INT 99999
58514: ST_TO_ADDR
// for i in points do
58515: LD_ADDR_VAR 0 4
58519: PUSH
58520: LD_VAR 0 2
58524: PUSH
58525: FOR_IN
58526: IFFALSE 58595
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58528: LD_ADDR_VAR 0 6
58532: PUSH
58533: LD_VAR 0 1
58537: PPUSH
58538: LD_VAR 0 4
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PPUSH
58547: LD_VAR 0 4
58551: PUSH
58552: LD_INT 2
58554: ARRAY
58555: PPUSH
58556: CALL_OW 297
58560: ST_TO_ADDR
// if tmpDist < dist then
58561: LD_VAR 0 6
58565: PUSH
58566: LD_VAR 0 5
58570: LESS
58571: IFFALSE 58593
// begin result := i ;
58573: LD_ADDR_VAR 0 3
58577: PUSH
58578: LD_VAR 0 4
58582: ST_TO_ADDR
// dist := tmpDist ;
58583: LD_ADDR_VAR 0 5
58587: PUSH
58588: LD_VAR 0 6
58592: ST_TO_ADDR
// end ; end ;
58593: GO 58525
58595: POP
58596: POP
// end ;
58597: LD_VAR 0 3
58601: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58602: LD_INT 0
58604: PPUSH
// uc_side := side ;
58605: LD_ADDR_OWVAR 20
58609: PUSH
58610: LD_VAR 0 1
58614: ST_TO_ADDR
// uc_nation := 3 ;
58615: LD_ADDR_OWVAR 21
58619: PUSH
58620: LD_INT 3
58622: ST_TO_ADDR
// vc_chassis := 25 ;
58623: LD_ADDR_OWVAR 37
58627: PUSH
58628: LD_INT 25
58630: ST_TO_ADDR
// vc_engine := engine_siberite ;
58631: LD_ADDR_OWVAR 39
58635: PUSH
58636: LD_INT 3
58638: ST_TO_ADDR
// vc_control := control_computer ;
58639: LD_ADDR_OWVAR 38
58643: PUSH
58644: LD_INT 3
58646: ST_TO_ADDR
// vc_weapon := 59 ;
58647: LD_ADDR_OWVAR 40
58651: PUSH
58652: LD_INT 59
58654: ST_TO_ADDR
// result := CreateVehicle ;
58655: LD_ADDR_VAR 0 5
58659: PUSH
58660: CALL_OW 45
58664: ST_TO_ADDR
// SetDir ( result , d ) ;
58665: LD_VAR 0 5
58669: PPUSH
58670: LD_VAR 0 4
58674: PPUSH
58675: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58679: LD_VAR 0 5
58683: PPUSH
58684: LD_VAR 0 2
58688: PPUSH
58689: LD_VAR 0 3
58693: PPUSH
58694: LD_INT 0
58696: PPUSH
58697: CALL_OW 48
// end ;
58701: LD_VAR 0 5
58705: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58706: LD_INT 0
58708: PPUSH
58709: PPUSH
58710: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58711: LD_ADDR_VAR 0 2
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58734: LD_VAR 0 1
58738: NOT
58739: PUSH
58740: LD_VAR 0 1
58744: PPUSH
58745: CALL_OW 264
58749: PUSH
58750: LD_INT 12
58752: PUSH
58753: LD_INT 51
58755: PUSH
58756: LD_INT 32
58758: PUSH
58759: LD_INT 89
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: IN
58768: NOT
58769: OR
58770: IFFALSE 58774
// exit ;
58772: GO 58872
// for i := 1 to 3 do
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: DOUBLE
58780: LD_INT 1
58782: DEC
58783: ST_TO_ADDR
58784: LD_INT 3
58786: PUSH
58787: FOR_TO
58788: IFFALSE 58870
// begin tmp := GetCargo ( cargo , i ) ;
58790: LD_ADDR_VAR 0 4
58794: PUSH
58795: LD_VAR 0 1
58799: PPUSH
58800: LD_VAR 0 3
58804: PPUSH
58805: CALL_OW 289
58809: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58810: LD_ADDR_VAR 0 2
58814: PUSH
58815: LD_VAR 0 2
58819: PPUSH
58820: LD_VAR 0 3
58824: PPUSH
58825: LD_VAR 0 4
58829: PPUSH
58830: CALL_OW 1
58834: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58835: LD_ADDR_VAR 0 2
58839: PUSH
58840: LD_VAR 0 2
58844: PPUSH
58845: LD_INT 4
58847: PPUSH
58848: LD_VAR 0 2
58852: PUSH
58853: LD_INT 4
58855: ARRAY
58856: PUSH
58857: LD_VAR 0 4
58861: PLUS
58862: PPUSH
58863: CALL_OW 1
58867: ST_TO_ADDR
// end ;
58868: GO 58787
58870: POP
58871: POP
// end ;
58872: LD_VAR 0 2
58876: RET
// export function Length ( array ) ; begin
58877: LD_INT 0
58879: PPUSH
// result := array + 0 ;
58880: LD_ADDR_VAR 0 2
58884: PUSH
58885: LD_VAR 0 1
58889: PUSH
58890: LD_INT 0
58892: PLUS
58893: ST_TO_ADDR
// end ;
58894: LD_VAR 0 2
58898: RET
// export function PrepareArray ( array ) ; begin
58899: LD_INT 0
58901: PPUSH
// result := array diff 0 ;
58902: LD_ADDR_VAR 0 2
58906: PUSH
58907: LD_VAR 0 1
58911: PUSH
58912: LD_INT 0
58914: DIFF
58915: ST_TO_ADDR
// if not result [ 1 ] then
58916: LD_VAR 0 2
58920: PUSH
58921: LD_INT 1
58923: ARRAY
58924: NOT
58925: IFFALSE 58945
// result := Delete ( result , 1 ) ;
58927: LD_ADDR_VAR 0 2
58931: PUSH
58932: LD_VAR 0 2
58936: PPUSH
58937: LD_INT 1
58939: PPUSH
58940: CALL_OW 3
58944: ST_TO_ADDR
// end ;
58945: LD_VAR 0 2
58949: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58950: LD_INT 0
58952: PPUSH
58953: PPUSH
58954: PPUSH
58955: PPUSH
// sibRocketRange := 25 ;
58956: LD_ADDR_VAR 0 6
58960: PUSH
58961: LD_INT 25
58963: ST_TO_ADDR
// result := false ;
58964: LD_ADDR_VAR 0 4
58968: PUSH
58969: LD_INT 0
58971: ST_TO_ADDR
// for i := 0 to 5 do
58972: LD_ADDR_VAR 0 5
58976: PUSH
58977: DOUBLE
58978: LD_INT 0
58980: DEC
58981: ST_TO_ADDR
58982: LD_INT 5
58984: PUSH
58985: FOR_TO
58986: IFFALSE 59053
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58988: LD_VAR 0 1
58992: PPUSH
58993: LD_VAR 0 5
58997: PPUSH
58998: LD_VAR 0 6
59002: PPUSH
59003: CALL_OW 272
59007: PPUSH
59008: LD_VAR 0 2
59012: PPUSH
59013: LD_VAR 0 5
59017: PPUSH
59018: LD_VAR 0 6
59022: PPUSH
59023: CALL_OW 273
59027: PPUSH
59028: LD_VAR 0 3
59032: PPUSH
59033: CALL_OW 309
59037: IFFALSE 59051
// begin result := true ;
59039: LD_ADDR_VAR 0 4
59043: PUSH
59044: LD_INT 1
59046: ST_TO_ADDR
// exit ;
59047: POP
59048: POP
59049: GO 59055
// end ;
59051: GO 58985
59053: POP
59054: POP
// end ;
59055: LD_VAR 0 4
59059: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59060: LD_INT 0
59062: PPUSH
59063: PPUSH
59064: PPUSH
// if btype = b_depot then
59065: LD_VAR 0 2
59069: PUSH
59070: LD_INT 0
59072: EQUAL
59073: IFFALSE 59085
// begin result := true ;
59075: LD_ADDR_VAR 0 3
59079: PUSH
59080: LD_INT 1
59082: ST_TO_ADDR
// exit ;
59083: GO 59201
// end ; pom := GetBase ( depot ) ;
59085: LD_ADDR_VAR 0 4
59089: PUSH
59090: LD_VAR 0 1
59094: PPUSH
59095: CALL_OW 274
59099: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59100: LD_ADDR_VAR 0 5
59104: PUSH
59105: LD_VAR 0 2
59109: PPUSH
59110: LD_VAR 0 1
59114: PPUSH
59115: CALL_OW 248
59119: PPUSH
59120: CALL_OW 450
59124: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59125: LD_ADDR_VAR 0 3
59129: PUSH
59130: LD_VAR 0 4
59134: PPUSH
59135: LD_INT 1
59137: PPUSH
59138: CALL_OW 275
59142: PUSH
59143: LD_VAR 0 5
59147: PUSH
59148: LD_INT 1
59150: ARRAY
59151: GREATEREQUAL
59152: PUSH
59153: LD_VAR 0 4
59157: PPUSH
59158: LD_INT 2
59160: PPUSH
59161: CALL_OW 275
59165: PUSH
59166: LD_VAR 0 5
59170: PUSH
59171: LD_INT 2
59173: ARRAY
59174: GREATEREQUAL
59175: AND
59176: PUSH
59177: LD_VAR 0 4
59181: PPUSH
59182: LD_INT 3
59184: PPUSH
59185: CALL_OW 275
59189: PUSH
59190: LD_VAR 0 5
59194: PUSH
59195: LD_INT 3
59197: ARRAY
59198: GREATEREQUAL
59199: AND
59200: ST_TO_ADDR
// end ;
59201: LD_VAR 0 3
59205: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59206: LD_INT 0
59208: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59209: LD_VAR 0 1
59213: PPUSH
59214: LD_VAR 0 2
59218: PPUSH
59219: LD_INT 0
59221: PPUSH
59222: LD_INT 0
59224: PPUSH
59225: LD_INT 1
59227: PPUSH
59228: LD_INT 0
59230: PPUSH
59231: CALL_OW 587
// end ;
59235: LD_VAR 0 3
59239: RET
// export function CenterOnNow ( unit ) ; begin
59240: LD_INT 0
59242: PPUSH
// result := IsInUnit ( unit ) ;
59243: LD_ADDR_VAR 0 2
59247: PUSH
59248: LD_VAR 0 1
59252: PPUSH
59253: CALL_OW 310
59257: ST_TO_ADDR
// if not result then
59258: LD_VAR 0 2
59262: NOT
59263: IFFALSE 59275
// result := unit ;
59265: LD_ADDR_VAR 0 2
59269: PUSH
59270: LD_VAR 0 1
59274: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59275: LD_VAR 0 1
59279: PPUSH
59280: CALL_OW 87
// end ;
59284: LD_VAR 0 2
59288: RET
// export function ComMoveHex ( unit , hex ) ; begin
59289: LD_INT 0
59291: PPUSH
// if not hex then
59292: LD_VAR 0 2
59296: NOT
59297: IFFALSE 59301
// exit ;
59299: GO 59354
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59301: LD_VAR 0 2
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PPUSH
59310: LD_VAR 0 2
59314: PUSH
59315: LD_INT 2
59317: ARRAY
59318: PPUSH
59319: CALL_OW 428
59323: IFFALSE 59327
// exit ;
59325: GO 59354
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59327: LD_VAR 0 1
59331: PPUSH
59332: LD_VAR 0 2
59336: PUSH
59337: LD_INT 1
59339: ARRAY
59340: PPUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 2
59348: ARRAY
59349: PPUSH
59350: CALL_OW 111
// end ;
59354: LD_VAR 0 3
59358: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59359: LD_INT 0
59361: PPUSH
59362: PPUSH
59363: PPUSH
// if not unit or not enemy then
59364: LD_VAR 0 1
59368: NOT
59369: PUSH
59370: LD_VAR 0 2
59374: NOT
59375: OR
59376: IFFALSE 59380
// exit ;
59378: GO 59504
// x := GetX ( enemy ) ;
59380: LD_ADDR_VAR 0 4
59384: PUSH
59385: LD_VAR 0 2
59389: PPUSH
59390: CALL_OW 250
59394: ST_TO_ADDR
// y := GetY ( enemy ) ;
59395: LD_ADDR_VAR 0 5
59399: PUSH
59400: LD_VAR 0 2
59404: PPUSH
59405: CALL_OW 251
59409: ST_TO_ADDR
// if ValidHex ( x , y ) then
59410: LD_VAR 0 4
59414: PPUSH
59415: LD_VAR 0 5
59419: PPUSH
59420: CALL_OW 488
59424: IFFALSE 59504
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59426: LD_VAR 0 2
59430: PPUSH
59431: CALL_OW 247
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: IN
59446: PUSH
59447: LD_VAR 0 1
59451: PPUSH
59452: CALL_OW 255
59456: PPUSH
59457: LD_VAR 0 2
59461: PPUSH
59462: CALL_OW 292
59466: OR
59467: IFFALSE 59485
// ComAttackUnit ( unit , enemy ) else
59469: LD_VAR 0 1
59473: PPUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: CALL_OW 115
59483: GO 59504
// ComAgressiveMove ( unit , x , y ) ;
59485: LD_VAR 0 1
59489: PPUSH
59490: LD_VAR 0 4
59494: PPUSH
59495: LD_VAR 0 5
59499: PPUSH
59500: CALL_OW 114
// end ;
59504: LD_VAR 0 3
59508: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59509: LD_INT 0
59511: PPUSH
59512: PPUSH
59513: PPUSH
// list := AreaToList ( area , 0 ) ;
59514: LD_ADDR_VAR 0 5
59518: PUSH
59519: LD_VAR 0 1
59523: PPUSH
59524: LD_INT 0
59526: PPUSH
59527: CALL_OW 517
59531: ST_TO_ADDR
// if not list then
59532: LD_VAR 0 5
59536: NOT
59537: IFFALSE 59541
// exit ;
59539: GO 59671
// if all then
59541: LD_VAR 0 2
59545: IFFALSE 59633
// begin for i := 1 to list [ 1 ] do
59547: LD_ADDR_VAR 0 4
59551: PUSH
59552: DOUBLE
59553: LD_INT 1
59555: DEC
59556: ST_TO_ADDR
59557: LD_VAR 0 5
59561: PUSH
59562: LD_INT 1
59564: ARRAY
59565: PUSH
59566: FOR_TO
59567: IFFALSE 59629
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59569: LD_ADDR_VAR 0 3
59573: PUSH
59574: LD_VAR 0 3
59578: PPUSH
59579: LD_VAR 0 3
59583: PUSH
59584: LD_INT 1
59586: PLUS
59587: PPUSH
59588: LD_VAR 0 5
59592: PUSH
59593: LD_INT 1
59595: ARRAY
59596: PUSH
59597: LD_VAR 0 4
59601: ARRAY
59602: PUSH
59603: LD_VAR 0 5
59607: PUSH
59608: LD_INT 2
59610: ARRAY
59611: PUSH
59612: LD_VAR 0 4
59616: ARRAY
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PPUSH
59622: CALL_OW 1
59626: ST_TO_ADDR
59627: GO 59566
59629: POP
59630: POP
// exit ;
59631: GO 59671
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59633: LD_ADDR_VAR 0 3
59637: PUSH
59638: LD_VAR 0 5
59642: PUSH
59643: LD_INT 1
59645: ARRAY
59646: PUSH
59647: LD_INT 1
59649: ARRAY
59650: PUSH
59651: LD_VAR 0 5
59655: PUSH
59656: LD_INT 2
59658: ARRAY
59659: PUSH
59660: LD_INT 1
59662: ARRAY
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: ST_TO_ADDR
// end ;
59671: LD_VAR 0 3
59675: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59676: LD_INT 0
59678: PPUSH
59679: PPUSH
// list := AreaToList ( area , 0 ) ;
59680: LD_ADDR_VAR 0 4
59684: PUSH
59685: LD_VAR 0 1
59689: PPUSH
59690: LD_INT 0
59692: PPUSH
59693: CALL_OW 517
59697: ST_TO_ADDR
// if not list then
59698: LD_VAR 0 4
59702: NOT
59703: IFFALSE 59707
// exit ;
59705: GO 59748
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59707: LD_ADDR_VAR 0 3
59711: PUSH
59712: LD_VAR 0 4
59716: PUSH
59717: LD_INT 1
59719: ARRAY
59720: PUSH
59721: LD_INT 1
59723: ARRAY
59724: PUSH
59725: LD_VAR 0 4
59729: PUSH
59730: LD_INT 2
59732: ARRAY
59733: PUSH
59734: LD_INT 1
59736: ARRAY
59737: PUSH
59738: LD_VAR 0 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: ST_TO_ADDR
// end ;
59748: LD_VAR 0 3
59752: RET
// export function First ( array ) ; begin
59753: LD_INT 0
59755: PPUSH
// if not array then
59756: LD_VAR 0 1
59760: NOT
59761: IFFALSE 59765
// exit ;
59763: GO 59779
// result := array [ 1 ] ;
59765: LD_ADDR_VAR 0 2
59769: PUSH
59770: LD_VAR 0 1
59774: PUSH
59775: LD_INT 1
59777: ARRAY
59778: ST_TO_ADDR
// end ;
59779: LD_VAR 0 2
59783: RET
// export function Last ( array ) ; begin
59784: LD_INT 0
59786: PPUSH
// if not array then
59787: LD_VAR 0 1
59791: NOT
59792: IFFALSE 59796
// exit ;
59794: GO 59812
// result := array [ array ] ;
59796: LD_ADDR_VAR 0 2
59800: PUSH
59801: LD_VAR 0 1
59805: PUSH
59806: LD_VAR 0 1
59810: ARRAY
59811: ST_TO_ADDR
// end ;
59812: LD_VAR 0 2
59816: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59817: LD_INT 0
59819: PPUSH
59820: PPUSH
// result := [ ] ;
59821: LD_ADDR_VAR 0 5
59825: PUSH
59826: EMPTY
59827: ST_TO_ADDR
// if not array then
59828: LD_VAR 0 1
59832: NOT
59833: IFFALSE 59837
// exit ;
59835: GO 59949
// for i := 1 to array do
59837: LD_ADDR_VAR 0 6
59841: PUSH
59842: DOUBLE
59843: LD_INT 1
59845: DEC
59846: ST_TO_ADDR
59847: LD_VAR 0 1
59851: PUSH
59852: FOR_TO
59853: IFFALSE 59947
// if array [ i ] [ index ] = value then
59855: LD_VAR 0 1
59859: PUSH
59860: LD_VAR 0 6
59864: ARRAY
59865: PUSH
59866: LD_VAR 0 2
59870: ARRAY
59871: PUSH
59872: LD_VAR 0 3
59876: EQUAL
59877: IFFALSE 59945
// begin if indexColumn then
59879: LD_VAR 0 4
59883: IFFALSE 59919
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59885: LD_ADDR_VAR 0 5
59889: PUSH
59890: LD_VAR 0 5
59894: PPUSH
59895: LD_VAR 0 1
59899: PUSH
59900: LD_VAR 0 6
59904: ARRAY
59905: PUSH
59906: LD_VAR 0 4
59910: ARRAY
59911: PPUSH
59912: CALL 55131 0 2
59916: ST_TO_ADDR
59917: GO 59945
// result := Join ( result , array [ i ] ) ;
59919: LD_ADDR_VAR 0 5
59923: PUSH
59924: LD_VAR 0 5
59928: PPUSH
59929: LD_VAR 0 1
59933: PUSH
59934: LD_VAR 0 6
59938: ARRAY
59939: PPUSH
59940: CALL 55131 0 2
59944: ST_TO_ADDR
// end ;
59945: GO 59852
59947: POP
59948: POP
// end ;
59949: LD_VAR 0 5
59953: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59954: LD_INT 0
59956: PPUSH
// if not vehicles or not parkingPoint then
59957: LD_VAR 0 1
59961: NOT
59962: PUSH
59963: LD_VAR 0 2
59967: NOT
59968: OR
59969: IFFALSE 59973
// exit ;
59971: GO 60071
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59973: LD_ADDR_VAR 0 1
59977: PUSH
59978: LD_VAR 0 1
59982: PPUSH
59983: LD_INT 50
59985: PUSH
59986: EMPTY
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: LD_INT 92
59994: PUSH
59995: LD_VAR 0 2
59999: PUSH
60000: LD_INT 1
60002: ARRAY
60003: PUSH
60004: LD_VAR 0 2
60008: PUSH
60009: LD_INT 2
60011: ARRAY
60012: PUSH
60013: LD_INT 8
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PPUSH
60030: CALL_OW 72
60034: ST_TO_ADDR
// if not vehicles then
60035: LD_VAR 0 1
60039: NOT
60040: IFFALSE 60044
// exit ;
60042: GO 60071
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60044: LD_VAR 0 1
60048: PPUSH
60049: LD_VAR 0 2
60053: PUSH
60054: LD_INT 1
60056: ARRAY
60057: PPUSH
60058: LD_VAR 0 2
60062: PUSH
60063: LD_INT 2
60065: ARRAY
60066: PPUSH
60067: CALL_OW 111
// end ;
60071: LD_VAR 0 3
60075: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60076: LD_INT 0
60078: PPUSH
60079: PPUSH
60080: PPUSH
// if not side or not area then
60081: LD_VAR 0 1
60085: NOT
60086: PUSH
60087: LD_VAR 0 2
60091: NOT
60092: OR
60093: IFFALSE 60097
// exit ;
60095: GO 60216
// tmp := AreaToList ( area , 0 ) ;
60097: LD_ADDR_VAR 0 5
60101: PUSH
60102: LD_VAR 0 2
60106: PPUSH
60107: LD_INT 0
60109: PPUSH
60110: CALL_OW 517
60114: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60115: LD_ADDR_VAR 0 4
60119: PUSH
60120: DOUBLE
60121: LD_INT 1
60123: DEC
60124: ST_TO_ADDR
60125: LD_VAR 0 5
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: PUSH
60134: FOR_TO
60135: IFFALSE 60214
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60137: LD_VAR 0 5
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PUSH
60146: LD_VAR 0 4
60150: ARRAY
60151: PPUSH
60152: LD_VAR 0 5
60156: PUSH
60157: LD_INT 2
60159: ARRAY
60160: PUSH
60161: LD_VAR 0 4
60165: ARRAY
60166: PPUSH
60167: CALL_OW 351
60171: IFFALSE 60212
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60173: LD_VAR 0 5
60177: PUSH
60178: LD_INT 1
60180: ARRAY
60181: PUSH
60182: LD_VAR 0 4
60186: ARRAY
60187: PPUSH
60188: LD_VAR 0 5
60192: PUSH
60193: LD_INT 2
60195: ARRAY
60196: PUSH
60197: LD_VAR 0 4
60201: ARRAY
60202: PPUSH
60203: LD_VAR 0 1
60207: PPUSH
60208: CALL_OW 244
// end ;
60212: GO 60134
60214: POP
60215: POP
// end ; end_of_file
60216: LD_VAR 0 3
60220: RET
// export globalGameSaveCounter ; every 0 0$1 do
60221: GO 60223
60223: DISABLE
// begin enable ;
60224: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60225: LD_STRING updateTimer(
60227: PUSH
60228: LD_OWVAR 1
60232: STR
60233: PUSH
60234: LD_STRING );
60236: STR
60237: PPUSH
60238: CALL_OW 559
// end ;
60242: END
// every 0 0$1 do
60243: GO 60245
60245: DISABLE
// begin globalGameSaveCounter := 0 ;
60246: LD_ADDR_EXP 50
60250: PUSH
60251: LD_INT 0
60253: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
60254: LD_STRING setGameSaveCounter(0)
60256: PPUSH
60257: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
60261: LD_STRING initStreamRollete();
60263: PPUSH
60264: CALL_OW 559
// InitStreamMode ;
60268: CALL 61611 0 0
// DefineStreamItems ( false ) ;
60272: LD_INT 0
60274: PPUSH
60275: CALL 62075 0 1
// end ;
60279: END
// export function SOS_MapStart ( ) ; begin
60280: LD_INT 0
60282: PPUSH
// if streamModeActive then
60283: LD_EXP 51
60287: IFFALSE 60296
// DefineStreamItems ( true ) ;
60289: LD_INT 1
60291: PPUSH
60292: CALL 62075 0 1
// UpdateLuaVariables ( ) ;
60296: CALL 60313 0 0
// UpdateFactoryWaypoints ( ) ;
60300: CALL 75077 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60304: CALL 75329 0 0
// end ;
60308: LD_VAR 0 1
60312: RET
// function UpdateLuaVariables ( ) ; begin
60313: LD_INT 0
60315: PPUSH
// if globalGameSaveCounter then
60316: LD_EXP 50
60320: IFFALSE 60354
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
60322: LD_ADDR_EXP 50
60326: PUSH
60327: LD_EXP 50
60331: PPUSH
60332: CALL 56492 0 1
60336: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60337: LD_STRING setGameSaveCounter(
60339: PUSH
60340: LD_EXP 50
60344: STR
60345: PUSH
60346: LD_STRING )
60348: STR
60349: PPUSH
60350: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60354: LD_STRING setGameDifficulty(
60356: PUSH
60357: LD_OWVAR 67
60361: STR
60362: PUSH
60363: LD_STRING )
60365: STR
60366: PPUSH
60367: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60371: LD_STRING displayDifficulty(
60373: PUSH
60374: LD_OWVAR 67
60378: STR
60379: PUSH
60380: LD_STRING )
60382: STR
60383: PPUSH
60384: CALL_OW 559
// end ;
60388: LD_VAR 0 1
60392: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60393: LD_INT 0
60395: PPUSH
// if p2 = stream_mode then
60396: LD_VAR 0 2
60400: PUSH
60401: LD_INT 100
60403: EQUAL
60404: IFFALSE 61407
// begin if not StreamModeActive then
60406: LD_EXP 51
60410: NOT
60411: IFFALSE 60421
// StreamModeActive := true ;
60413: LD_ADDR_EXP 51
60417: PUSH
60418: LD_INT 1
60420: ST_TO_ADDR
// if p3 = 0 then
60421: LD_VAR 0 3
60425: PUSH
60426: LD_INT 0
60428: EQUAL
60429: IFFALSE 60435
// InitStreamMode ;
60431: CALL 61611 0 0
// if p3 = 1 then
60435: LD_VAR 0 3
60439: PUSH
60440: LD_INT 1
60442: EQUAL
60443: IFFALSE 60453
// sRocket := true ;
60445: LD_ADDR_EXP 56
60449: PUSH
60450: LD_INT 1
60452: ST_TO_ADDR
// if p3 = 2 then
60453: LD_VAR 0 3
60457: PUSH
60458: LD_INT 2
60460: EQUAL
60461: IFFALSE 60471
// sSpeed := true ;
60463: LD_ADDR_EXP 55
60467: PUSH
60468: LD_INT 1
60470: ST_TO_ADDR
// if p3 = 3 then
60471: LD_VAR 0 3
60475: PUSH
60476: LD_INT 3
60478: EQUAL
60479: IFFALSE 60489
// sEngine := true ;
60481: LD_ADDR_EXP 57
60485: PUSH
60486: LD_INT 1
60488: ST_TO_ADDR
// if p3 = 4 then
60489: LD_VAR 0 3
60493: PUSH
60494: LD_INT 4
60496: EQUAL
60497: IFFALSE 60507
// sSpec := true ;
60499: LD_ADDR_EXP 54
60503: PUSH
60504: LD_INT 1
60506: ST_TO_ADDR
// if p3 = 5 then
60507: LD_VAR 0 3
60511: PUSH
60512: LD_INT 5
60514: EQUAL
60515: IFFALSE 60525
// sLevel := true ;
60517: LD_ADDR_EXP 58
60521: PUSH
60522: LD_INT 1
60524: ST_TO_ADDR
// if p3 = 6 then
60525: LD_VAR 0 3
60529: PUSH
60530: LD_INT 6
60532: EQUAL
60533: IFFALSE 60543
// sArmoury := true ;
60535: LD_ADDR_EXP 59
60539: PUSH
60540: LD_INT 1
60542: ST_TO_ADDR
// if p3 = 7 then
60543: LD_VAR 0 3
60547: PUSH
60548: LD_INT 7
60550: EQUAL
60551: IFFALSE 60561
// sRadar := true ;
60553: LD_ADDR_EXP 60
60557: PUSH
60558: LD_INT 1
60560: ST_TO_ADDR
// if p3 = 8 then
60561: LD_VAR 0 3
60565: PUSH
60566: LD_INT 8
60568: EQUAL
60569: IFFALSE 60579
// sBunker := true ;
60571: LD_ADDR_EXP 61
60575: PUSH
60576: LD_INT 1
60578: ST_TO_ADDR
// if p3 = 9 then
60579: LD_VAR 0 3
60583: PUSH
60584: LD_INT 9
60586: EQUAL
60587: IFFALSE 60597
// sHack := true ;
60589: LD_ADDR_EXP 62
60593: PUSH
60594: LD_INT 1
60596: ST_TO_ADDR
// if p3 = 10 then
60597: LD_VAR 0 3
60601: PUSH
60602: LD_INT 10
60604: EQUAL
60605: IFFALSE 60615
// sFire := true ;
60607: LD_ADDR_EXP 63
60611: PUSH
60612: LD_INT 1
60614: ST_TO_ADDR
// if p3 = 11 then
60615: LD_VAR 0 3
60619: PUSH
60620: LD_INT 11
60622: EQUAL
60623: IFFALSE 60633
// sRefresh := true ;
60625: LD_ADDR_EXP 64
60629: PUSH
60630: LD_INT 1
60632: ST_TO_ADDR
// if p3 = 12 then
60633: LD_VAR 0 3
60637: PUSH
60638: LD_INT 12
60640: EQUAL
60641: IFFALSE 60651
// sExp := true ;
60643: LD_ADDR_EXP 65
60647: PUSH
60648: LD_INT 1
60650: ST_TO_ADDR
// if p3 = 13 then
60651: LD_VAR 0 3
60655: PUSH
60656: LD_INT 13
60658: EQUAL
60659: IFFALSE 60669
// sDepot := true ;
60661: LD_ADDR_EXP 66
60665: PUSH
60666: LD_INT 1
60668: ST_TO_ADDR
// if p3 = 14 then
60669: LD_VAR 0 3
60673: PUSH
60674: LD_INT 14
60676: EQUAL
60677: IFFALSE 60687
// sFlag := true ;
60679: LD_ADDR_EXP 67
60683: PUSH
60684: LD_INT 1
60686: ST_TO_ADDR
// if p3 = 15 then
60687: LD_VAR 0 3
60691: PUSH
60692: LD_INT 15
60694: EQUAL
60695: IFFALSE 60705
// sKamikadze := true ;
60697: LD_ADDR_EXP 75
60701: PUSH
60702: LD_INT 1
60704: ST_TO_ADDR
// if p3 = 16 then
60705: LD_VAR 0 3
60709: PUSH
60710: LD_INT 16
60712: EQUAL
60713: IFFALSE 60723
// sTroll := true ;
60715: LD_ADDR_EXP 76
60719: PUSH
60720: LD_INT 1
60722: ST_TO_ADDR
// if p3 = 17 then
60723: LD_VAR 0 3
60727: PUSH
60728: LD_INT 17
60730: EQUAL
60731: IFFALSE 60741
// sSlow := true ;
60733: LD_ADDR_EXP 77
60737: PUSH
60738: LD_INT 1
60740: ST_TO_ADDR
// if p3 = 18 then
60741: LD_VAR 0 3
60745: PUSH
60746: LD_INT 18
60748: EQUAL
60749: IFFALSE 60759
// sLack := true ;
60751: LD_ADDR_EXP 78
60755: PUSH
60756: LD_INT 1
60758: ST_TO_ADDR
// if p3 = 19 then
60759: LD_VAR 0 3
60763: PUSH
60764: LD_INT 19
60766: EQUAL
60767: IFFALSE 60777
// sTank := true ;
60769: LD_ADDR_EXP 80
60773: PUSH
60774: LD_INT 1
60776: ST_TO_ADDR
// if p3 = 20 then
60777: LD_VAR 0 3
60781: PUSH
60782: LD_INT 20
60784: EQUAL
60785: IFFALSE 60795
// sRemote := true ;
60787: LD_ADDR_EXP 81
60791: PUSH
60792: LD_INT 1
60794: ST_TO_ADDR
// if p3 = 21 then
60795: LD_VAR 0 3
60799: PUSH
60800: LD_INT 21
60802: EQUAL
60803: IFFALSE 60813
// sPowell := true ;
60805: LD_ADDR_EXP 82
60809: PUSH
60810: LD_INT 1
60812: ST_TO_ADDR
// if p3 = 22 then
60813: LD_VAR 0 3
60817: PUSH
60818: LD_INT 22
60820: EQUAL
60821: IFFALSE 60831
// sTeleport := true ;
60823: LD_ADDR_EXP 85
60827: PUSH
60828: LD_INT 1
60830: ST_TO_ADDR
// if p3 = 23 then
60831: LD_VAR 0 3
60835: PUSH
60836: LD_INT 23
60838: EQUAL
60839: IFFALSE 60849
// sOilTower := true ;
60841: LD_ADDR_EXP 87
60845: PUSH
60846: LD_INT 1
60848: ST_TO_ADDR
// if p3 = 24 then
60849: LD_VAR 0 3
60853: PUSH
60854: LD_INT 24
60856: EQUAL
60857: IFFALSE 60867
// sShovel := true ;
60859: LD_ADDR_EXP 88
60863: PUSH
60864: LD_INT 1
60866: ST_TO_ADDR
// if p3 = 25 then
60867: LD_VAR 0 3
60871: PUSH
60872: LD_INT 25
60874: EQUAL
60875: IFFALSE 60885
// sSheik := true ;
60877: LD_ADDR_EXP 89
60881: PUSH
60882: LD_INT 1
60884: ST_TO_ADDR
// if p3 = 26 then
60885: LD_VAR 0 3
60889: PUSH
60890: LD_INT 26
60892: EQUAL
60893: IFFALSE 60903
// sEarthquake := true ;
60895: LD_ADDR_EXP 91
60899: PUSH
60900: LD_INT 1
60902: ST_TO_ADDR
// if p3 = 27 then
60903: LD_VAR 0 3
60907: PUSH
60908: LD_INT 27
60910: EQUAL
60911: IFFALSE 60921
// sAI := true ;
60913: LD_ADDR_EXP 92
60917: PUSH
60918: LD_INT 1
60920: ST_TO_ADDR
// if p3 = 28 then
60921: LD_VAR 0 3
60925: PUSH
60926: LD_INT 28
60928: EQUAL
60929: IFFALSE 60939
// sCargo := true ;
60931: LD_ADDR_EXP 95
60935: PUSH
60936: LD_INT 1
60938: ST_TO_ADDR
// if p3 = 29 then
60939: LD_VAR 0 3
60943: PUSH
60944: LD_INT 29
60946: EQUAL
60947: IFFALSE 60957
// sDLaser := true ;
60949: LD_ADDR_EXP 96
60953: PUSH
60954: LD_INT 1
60956: ST_TO_ADDR
// if p3 = 30 then
60957: LD_VAR 0 3
60961: PUSH
60962: LD_INT 30
60964: EQUAL
60965: IFFALSE 60975
// sExchange := true ;
60967: LD_ADDR_EXP 97
60971: PUSH
60972: LD_INT 1
60974: ST_TO_ADDR
// if p3 = 31 then
60975: LD_VAR 0 3
60979: PUSH
60980: LD_INT 31
60982: EQUAL
60983: IFFALSE 60993
// sFac := true ;
60985: LD_ADDR_EXP 98
60989: PUSH
60990: LD_INT 1
60992: ST_TO_ADDR
// if p3 = 32 then
60993: LD_VAR 0 3
60997: PUSH
60998: LD_INT 32
61000: EQUAL
61001: IFFALSE 61011
// sPower := true ;
61003: LD_ADDR_EXP 99
61007: PUSH
61008: LD_INT 1
61010: ST_TO_ADDR
// if p3 = 33 then
61011: LD_VAR 0 3
61015: PUSH
61016: LD_INT 33
61018: EQUAL
61019: IFFALSE 61029
// sRandom := true ;
61021: LD_ADDR_EXP 100
61025: PUSH
61026: LD_INT 1
61028: ST_TO_ADDR
// if p3 = 34 then
61029: LD_VAR 0 3
61033: PUSH
61034: LD_INT 34
61036: EQUAL
61037: IFFALSE 61047
// sShield := true ;
61039: LD_ADDR_EXP 101
61043: PUSH
61044: LD_INT 1
61046: ST_TO_ADDR
// if p3 = 35 then
61047: LD_VAR 0 3
61051: PUSH
61052: LD_INT 35
61054: EQUAL
61055: IFFALSE 61065
// sTime := true ;
61057: LD_ADDR_EXP 102
61061: PUSH
61062: LD_INT 1
61064: ST_TO_ADDR
// if p3 = 36 then
61065: LD_VAR 0 3
61069: PUSH
61070: LD_INT 36
61072: EQUAL
61073: IFFALSE 61083
// sTools := true ;
61075: LD_ADDR_EXP 103
61079: PUSH
61080: LD_INT 1
61082: ST_TO_ADDR
// if p3 = 101 then
61083: LD_VAR 0 3
61087: PUSH
61088: LD_INT 101
61090: EQUAL
61091: IFFALSE 61101
// sSold := true ;
61093: LD_ADDR_EXP 68
61097: PUSH
61098: LD_INT 1
61100: ST_TO_ADDR
// if p3 = 102 then
61101: LD_VAR 0 3
61105: PUSH
61106: LD_INT 102
61108: EQUAL
61109: IFFALSE 61119
// sDiff := true ;
61111: LD_ADDR_EXP 69
61115: PUSH
61116: LD_INT 1
61118: ST_TO_ADDR
// if p3 = 103 then
61119: LD_VAR 0 3
61123: PUSH
61124: LD_INT 103
61126: EQUAL
61127: IFFALSE 61137
// sFog := true ;
61129: LD_ADDR_EXP 72
61133: PUSH
61134: LD_INT 1
61136: ST_TO_ADDR
// if p3 = 104 then
61137: LD_VAR 0 3
61141: PUSH
61142: LD_INT 104
61144: EQUAL
61145: IFFALSE 61155
// sReset := true ;
61147: LD_ADDR_EXP 73
61151: PUSH
61152: LD_INT 1
61154: ST_TO_ADDR
// if p3 = 105 then
61155: LD_VAR 0 3
61159: PUSH
61160: LD_INT 105
61162: EQUAL
61163: IFFALSE 61173
// sSun := true ;
61165: LD_ADDR_EXP 74
61169: PUSH
61170: LD_INT 1
61172: ST_TO_ADDR
// if p3 = 106 then
61173: LD_VAR 0 3
61177: PUSH
61178: LD_INT 106
61180: EQUAL
61181: IFFALSE 61191
// sTiger := true ;
61183: LD_ADDR_EXP 70
61187: PUSH
61188: LD_INT 1
61190: ST_TO_ADDR
// if p3 = 107 then
61191: LD_VAR 0 3
61195: PUSH
61196: LD_INT 107
61198: EQUAL
61199: IFFALSE 61209
// sBomb := true ;
61201: LD_ADDR_EXP 71
61205: PUSH
61206: LD_INT 1
61208: ST_TO_ADDR
// if p3 = 108 then
61209: LD_VAR 0 3
61213: PUSH
61214: LD_INT 108
61216: EQUAL
61217: IFFALSE 61227
// sWound := true ;
61219: LD_ADDR_EXP 79
61223: PUSH
61224: LD_INT 1
61226: ST_TO_ADDR
// if p3 = 109 then
61227: LD_VAR 0 3
61231: PUSH
61232: LD_INT 109
61234: EQUAL
61235: IFFALSE 61245
// sBetray := true ;
61237: LD_ADDR_EXP 83
61241: PUSH
61242: LD_INT 1
61244: ST_TO_ADDR
// if p3 = 110 then
61245: LD_VAR 0 3
61249: PUSH
61250: LD_INT 110
61252: EQUAL
61253: IFFALSE 61263
// sContamin := true ;
61255: LD_ADDR_EXP 84
61259: PUSH
61260: LD_INT 1
61262: ST_TO_ADDR
// if p3 = 111 then
61263: LD_VAR 0 3
61267: PUSH
61268: LD_INT 111
61270: EQUAL
61271: IFFALSE 61281
// sOil := true ;
61273: LD_ADDR_EXP 86
61277: PUSH
61278: LD_INT 1
61280: ST_TO_ADDR
// if p3 = 112 then
61281: LD_VAR 0 3
61285: PUSH
61286: LD_INT 112
61288: EQUAL
61289: IFFALSE 61299
// sStu := true ;
61291: LD_ADDR_EXP 90
61295: PUSH
61296: LD_INT 1
61298: ST_TO_ADDR
// if p3 = 113 then
61299: LD_VAR 0 3
61303: PUSH
61304: LD_INT 113
61306: EQUAL
61307: IFFALSE 61317
// sBazooka := true ;
61309: LD_ADDR_EXP 93
61313: PUSH
61314: LD_INT 1
61316: ST_TO_ADDR
// if p3 = 114 then
61317: LD_VAR 0 3
61321: PUSH
61322: LD_INT 114
61324: EQUAL
61325: IFFALSE 61335
// sMortar := true ;
61327: LD_ADDR_EXP 94
61331: PUSH
61332: LD_INT 1
61334: ST_TO_ADDR
// if p3 = 115 then
61335: LD_VAR 0 3
61339: PUSH
61340: LD_INT 115
61342: EQUAL
61343: IFFALSE 61353
// sRanger := true ;
61345: LD_ADDR_EXP 104
61349: PUSH
61350: LD_INT 1
61352: ST_TO_ADDR
// if p3 = 116 then
61353: LD_VAR 0 3
61357: PUSH
61358: LD_INT 116
61360: EQUAL
61361: IFFALSE 61371
// sComputer := true ;
61363: LD_ADDR_EXP 105
61367: PUSH
61368: LD_INT 1
61370: ST_TO_ADDR
// if p3 = 117 then
61371: LD_VAR 0 3
61375: PUSH
61376: LD_INT 117
61378: EQUAL
61379: IFFALSE 61389
// s30 := true ;
61381: LD_ADDR_EXP 106
61385: PUSH
61386: LD_INT 1
61388: ST_TO_ADDR
// if p3 = 118 then
61389: LD_VAR 0 3
61393: PUSH
61394: LD_INT 118
61396: EQUAL
61397: IFFALSE 61407
// s60 := true ;
61399: LD_ADDR_EXP 107
61403: PUSH
61404: LD_INT 1
61406: ST_TO_ADDR
// end ; if p2 = hack_mode then
61407: LD_VAR 0 2
61411: PUSH
61412: LD_INT 101
61414: EQUAL
61415: IFFALSE 61543
// begin case p3 of 1 :
61417: LD_VAR 0 3
61421: PUSH
61422: LD_INT 1
61424: DOUBLE
61425: EQUAL
61426: IFTRUE 61430
61428: GO 61437
61430: POP
// hHackUnlimitedResources ; 2 :
61431: CALL 73690 0 0
61435: GO 61543
61437: LD_INT 2
61439: DOUBLE
61440: EQUAL
61441: IFTRUE 61445
61443: GO 61452
61445: POP
// hHackSetLevel10 ; 3 :
61446: CALL 73823 0 0
61450: GO 61543
61452: LD_INT 3
61454: DOUBLE
61455: EQUAL
61456: IFTRUE 61460
61458: GO 61467
61460: POP
// hHackSetLevel10YourUnits ; 4 :
61461: CALL 73908 0 0
61465: GO 61543
61467: LD_INT 4
61469: DOUBLE
61470: EQUAL
61471: IFTRUE 61475
61473: GO 61482
61475: POP
// hHackInvincible ; 5 :
61476: CALL 74356 0 0
61480: GO 61543
61482: LD_INT 5
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61490
61488: GO 61497
61490: POP
// hHackInvisible ; 6 :
61491: CALL 74467 0 0
61495: GO 61543
61497: LD_INT 6
61499: DOUBLE
61500: EQUAL
61501: IFTRUE 61505
61503: GO 61512
61505: POP
// hHackChangeYourSide ; 7 :
61506: CALL 74524 0 0
61510: GO 61543
61512: LD_INT 7
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61520
61518: GO 61527
61520: POP
// hHackChangeUnitSide ; 8 :
61521: CALL 74566 0 0
61525: GO 61543
61527: LD_INT 8
61529: DOUBLE
61530: EQUAL
61531: IFTRUE 61535
61533: GO 61542
61535: POP
// hHackFog ; end ;
61536: CALL 74667 0 0
61540: GO 61543
61542: POP
// end ; if p2 = game_save_mode then
61543: LD_VAR 0 2
61547: PUSH
61548: LD_INT 102
61550: EQUAL
61551: IFFALSE 61606
// begin if p3 = 1 then
61553: LD_VAR 0 3
61557: PUSH
61558: LD_INT 1
61560: EQUAL
61561: IFFALSE 61573
// globalGameSaveCounter := p4 ;
61563: LD_ADDR_EXP 50
61567: PUSH
61568: LD_VAR 0 4
61572: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
61573: LD_VAR 0 3
61577: PUSH
61578: LD_INT 2
61580: EQUAL
61581: PUSH
61582: LD_EXP 50
61586: AND
61587: IFFALSE 61606
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61589: LD_STRING setGameSaveCounter(
61591: PUSH
61592: LD_EXP 50
61596: STR
61597: PUSH
61598: LD_STRING )
61600: STR
61601: PPUSH
61602: CALL_OW 559
// end ; end ;
61606: LD_VAR 0 7
61610: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
61611: LD_INT 0
61613: PPUSH
// streamModeActive := false ;
61614: LD_ADDR_EXP 51
61618: PUSH
61619: LD_INT 0
61621: ST_TO_ADDR
// normalCounter := 36 ;
61622: LD_ADDR_EXP 52
61626: PUSH
61627: LD_INT 36
61629: ST_TO_ADDR
// hardcoreCounter := 18 ;
61630: LD_ADDR_EXP 53
61634: PUSH
61635: LD_INT 18
61637: ST_TO_ADDR
// sRocket := false ;
61638: LD_ADDR_EXP 56
61642: PUSH
61643: LD_INT 0
61645: ST_TO_ADDR
// sSpeed := false ;
61646: LD_ADDR_EXP 55
61650: PUSH
61651: LD_INT 0
61653: ST_TO_ADDR
// sEngine := false ;
61654: LD_ADDR_EXP 57
61658: PUSH
61659: LD_INT 0
61661: ST_TO_ADDR
// sSpec := false ;
61662: LD_ADDR_EXP 54
61666: PUSH
61667: LD_INT 0
61669: ST_TO_ADDR
// sLevel := false ;
61670: LD_ADDR_EXP 58
61674: PUSH
61675: LD_INT 0
61677: ST_TO_ADDR
// sArmoury := false ;
61678: LD_ADDR_EXP 59
61682: PUSH
61683: LD_INT 0
61685: ST_TO_ADDR
// sRadar := false ;
61686: LD_ADDR_EXP 60
61690: PUSH
61691: LD_INT 0
61693: ST_TO_ADDR
// sBunker := false ;
61694: LD_ADDR_EXP 61
61698: PUSH
61699: LD_INT 0
61701: ST_TO_ADDR
// sHack := false ;
61702: LD_ADDR_EXP 62
61706: PUSH
61707: LD_INT 0
61709: ST_TO_ADDR
// sFire := false ;
61710: LD_ADDR_EXP 63
61714: PUSH
61715: LD_INT 0
61717: ST_TO_ADDR
// sRefresh := false ;
61718: LD_ADDR_EXP 64
61722: PUSH
61723: LD_INT 0
61725: ST_TO_ADDR
// sExp := false ;
61726: LD_ADDR_EXP 65
61730: PUSH
61731: LD_INT 0
61733: ST_TO_ADDR
// sDepot := false ;
61734: LD_ADDR_EXP 66
61738: PUSH
61739: LD_INT 0
61741: ST_TO_ADDR
// sFlag := false ;
61742: LD_ADDR_EXP 67
61746: PUSH
61747: LD_INT 0
61749: ST_TO_ADDR
// sKamikadze := false ;
61750: LD_ADDR_EXP 75
61754: PUSH
61755: LD_INT 0
61757: ST_TO_ADDR
// sTroll := false ;
61758: LD_ADDR_EXP 76
61762: PUSH
61763: LD_INT 0
61765: ST_TO_ADDR
// sSlow := false ;
61766: LD_ADDR_EXP 77
61770: PUSH
61771: LD_INT 0
61773: ST_TO_ADDR
// sLack := false ;
61774: LD_ADDR_EXP 78
61778: PUSH
61779: LD_INT 0
61781: ST_TO_ADDR
// sTank := false ;
61782: LD_ADDR_EXP 80
61786: PUSH
61787: LD_INT 0
61789: ST_TO_ADDR
// sRemote := false ;
61790: LD_ADDR_EXP 81
61794: PUSH
61795: LD_INT 0
61797: ST_TO_ADDR
// sPowell := false ;
61798: LD_ADDR_EXP 82
61802: PUSH
61803: LD_INT 0
61805: ST_TO_ADDR
// sTeleport := false ;
61806: LD_ADDR_EXP 85
61810: PUSH
61811: LD_INT 0
61813: ST_TO_ADDR
// sOilTower := false ;
61814: LD_ADDR_EXP 87
61818: PUSH
61819: LD_INT 0
61821: ST_TO_ADDR
// sShovel := false ;
61822: LD_ADDR_EXP 88
61826: PUSH
61827: LD_INT 0
61829: ST_TO_ADDR
// sSheik := false ;
61830: LD_ADDR_EXP 89
61834: PUSH
61835: LD_INT 0
61837: ST_TO_ADDR
// sEarthquake := false ;
61838: LD_ADDR_EXP 91
61842: PUSH
61843: LD_INT 0
61845: ST_TO_ADDR
// sAI := false ;
61846: LD_ADDR_EXP 92
61850: PUSH
61851: LD_INT 0
61853: ST_TO_ADDR
// sCargo := false ;
61854: LD_ADDR_EXP 95
61858: PUSH
61859: LD_INT 0
61861: ST_TO_ADDR
// sDLaser := false ;
61862: LD_ADDR_EXP 96
61866: PUSH
61867: LD_INT 0
61869: ST_TO_ADDR
// sExchange := false ;
61870: LD_ADDR_EXP 97
61874: PUSH
61875: LD_INT 0
61877: ST_TO_ADDR
// sFac := false ;
61878: LD_ADDR_EXP 98
61882: PUSH
61883: LD_INT 0
61885: ST_TO_ADDR
// sPower := false ;
61886: LD_ADDR_EXP 99
61890: PUSH
61891: LD_INT 0
61893: ST_TO_ADDR
// sRandom := false ;
61894: LD_ADDR_EXP 100
61898: PUSH
61899: LD_INT 0
61901: ST_TO_ADDR
// sShield := false ;
61902: LD_ADDR_EXP 101
61906: PUSH
61907: LD_INT 0
61909: ST_TO_ADDR
// sTime := false ;
61910: LD_ADDR_EXP 102
61914: PUSH
61915: LD_INT 0
61917: ST_TO_ADDR
// sTools := false ;
61918: LD_ADDR_EXP 103
61922: PUSH
61923: LD_INT 0
61925: ST_TO_ADDR
// sSold := false ;
61926: LD_ADDR_EXP 68
61930: PUSH
61931: LD_INT 0
61933: ST_TO_ADDR
// sDiff := false ;
61934: LD_ADDR_EXP 69
61938: PUSH
61939: LD_INT 0
61941: ST_TO_ADDR
// sFog := false ;
61942: LD_ADDR_EXP 72
61946: PUSH
61947: LD_INT 0
61949: ST_TO_ADDR
// sReset := false ;
61950: LD_ADDR_EXP 73
61954: PUSH
61955: LD_INT 0
61957: ST_TO_ADDR
// sSun := false ;
61958: LD_ADDR_EXP 74
61962: PUSH
61963: LD_INT 0
61965: ST_TO_ADDR
// sTiger := false ;
61966: LD_ADDR_EXP 70
61970: PUSH
61971: LD_INT 0
61973: ST_TO_ADDR
// sBomb := false ;
61974: LD_ADDR_EXP 71
61978: PUSH
61979: LD_INT 0
61981: ST_TO_ADDR
// sWound := false ;
61982: LD_ADDR_EXP 79
61986: PUSH
61987: LD_INT 0
61989: ST_TO_ADDR
// sBetray := false ;
61990: LD_ADDR_EXP 83
61994: PUSH
61995: LD_INT 0
61997: ST_TO_ADDR
// sContamin := false ;
61998: LD_ADDR_EXP 84
62002: PUSH
62003: LD_INT 0
62005: ST_TO_ADDR
// sOil := false ;
62006: LD_ADDR_EXP 86
62010: PUSH
62011: LD_INT 0
62013: ST_TO_ADDR
// sStu := false ;
62014: LD_ADDR_EXP 90
62018: PUSH
62019: LD_INT 0
62021: ST_TO_ADDR
// sBazooka := false ;
62022: LD_ADDR_EXP 93
62026: PUSH
62027: LD_INT 0
62029: ST_TO_ADDR
// sMortar := false ;
62030: LD_ADDR_EXP 94
62034: PUSH
62035: LD_INT 0
62037: ST_TO_ADDR
// sRanger := false ;
62038: LD_ADDR_EXP 104
62042: PUSH
62043: LD_INT 0
62045: ST_TO_ADDR
// sComputer := false ;
62046: LD_ADDR_EXP 105
62050: PUSH
62051: LD_INT 0
62053: ST_TO_ADDR
// s30 := false ;
62054: LD_ADDR_EXP 106
62058: PUSH
62059: LD_INT 0
62061: ST_TO_ADDR
// s60 := false ;
62062: LD_ADDR_EXP 107
62066: PUSH
62067: LD_INT 0
62069: ST_TO_ADDR
// end ;
62070: LD_VAR 0 1
62074: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62075: LD_INT 0
62077: PPUSH
62078: PPUSH
62079: PPUSH
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
// result := [ ] ;
62084: LD_ADDR_VAR 0 2
62088: PUSH
62089: EMPTY
62090: ST_TO_ADDR
// if campaign_id = 1 then
62091: LD_OWVAR 69
62095: PUSH
62096: LD_INT 1
62098: EQUAL
62099: IFFALSE 65265
// begin case mission_number of 1 :
62101: LD_OWVAR 70
62105: PUSH
62106: LD_INT 1
62108: DOUBLE
62109: EQUAL
62110: IFTRUE 62114
62112: GO 62190
62114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62115: LD_ADDR_VAR 0 2
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: LD_INT 11
62128: PUSH
62129: LD_INT 12
62131: PUSH
62132: LD_INT 15
62134: PUSH
62135: LD_INT 16
62137: PUSH
62138: LD_INT 22
62140: PUSH
62141: LD_INT 23
62143: PUSH
62144: LD_INT 26
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 101
62160: PUSH
62161: LD_INT 102
62163: PUSH
62164: LD_INT 106
62166: PUSH
62167: LD_INT 116
62169: PUSH
62170: LD_INT 117
62172: PUSH
62173: LD_INT 118
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: ST_TO_ADDR
62188: GO 65263
62190: LD_INT 2
62192: DOUBLE
62193: EQUAL
62194: IFTRUE 62198
62196: GO 62282
62198: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62199: LD_ADDR_VAR 0 2
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: LD_INT 4
62209: PUSH
62210: LD_INT 11
62212: PUSH
62213: LD_INT 12
62215: PUSH
62216: LD_INT 15
62218: PUSH
62219: LD_INT 16
62221: PUSH
62222: LD_INT 22
62224: PUSH
62225: LD_INT 23
62227: PUSH
62228: LD_INT 26
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 101
62244: PUSH
62245: LD_INT 102
62247: PUSH
62248: LD_INT 105
62250: PUSH
62251: LD_INT 106
62253: PUSH
62254: LD_INT 108
62256: PUSH
62257: LD_INT 116
62259: PUSH
62260: LD_INT 117
62262: PUSH
62263: LD_INT 118
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: ST_TO_ADDR
62280: GO 65263
62282: LD_INT 3
62284: DOUBLE
62285: EQUAL
62286: IFTRUE 62290
62288: GO 62378
62290: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
62291: LD_ADDR_VAR 0 2
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 4
62301: PUSH
62302: LD_INT 5
62304: PUSH
62305: LD_INT 11
62307: PUSH
62308: LD_INT 12
62310: PUSH
62311: LD_INT 15
62313: PUSH
62314: LD_INT 16
62316: PUSH
62317: LD_INT 22
62319: PUSH
62320: LD_INT 26
62322: PUSH
62323: LD_INT 36
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 101
62340: PUSH
62341: LD_INT 102
62343: PUSH
62344: LD_INT 105
62346: PUSH
62347: LD_INT 106
62349: PUSH
62350: LD_INT 108
62352: PUSH
62353: LD_INT 116
62355: PUSH
62356: LD_INT 117
62358: PUSH
62359: LD_INT 118
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: ST_TO_ADDR
62376: GO 65263
62378: LD_INT 4
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62386
62384: GO 62482
62386: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
62387: LD_ADDR_VAR 0 2
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: LD_INT 5
62400: PUSH
62401: LD_INT 8
62403: PUSH
62404: LD_INT 11
62406: PUSH
62407: LD_INT 12
62409: PUSH
62410: LD_INT 15
62412: PUSH
62413: LD_INT 16
62415: PUSH
62416: LD_INT 22
62418: PUSH
62419: LD_INT 23
62421: PUSH
62422: LD_INT 26
62424: PUSH
62425: LD_INT 36
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 101
62444: PUSH
62445: LD_INT 102
62447: PUSH
62448: LD_INT 105
62450: PUSH
62451: LD_INT 106
62453: PUSH
62454: LD_INT 108
62456: PUSH
62457: LD_INT 116
62459: PUSH
62460: LD_INT 117
62462: PUSH
62463: LD_INT 118
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: ST_TO_ADDR
62480: GO 65263
62482: LD_INT 5
62484: DOUBLE
62485: EQUAL
62486: IFTRUE 62490
62488: GO 62602
62490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62491: LD_ADDR_VAR 0 2
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: LD_INT 5
62504: PUSH
62505: LD_INT 6
62507: PUSH
62508: LD_INT 8
62510: PUSH
62511: LD_INT 11
62513: PUSH
62514: LD_INT 12
62516: PUSH
62517: LD_INT 15
62519: PUSH
62520: LD_INT 16
62522: PUSH
62523: LD_INT 22
62525: PUSH
62526: LD_INT 23
62528: PUSH
62529: LD_INT 25
62531: PUSH
62532: LD_INT 26
62534: PUSH
62535: LD_INT 36
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 101
62556: PUSH
62557: LD_INT 102
62559: PUSH
62560: LD_INT 105
62562: PUSH
62563: LD_INT 106
62565: PUSH
62566: LD_INT 108
62568: PUSH
62569: LD_INT 109
62571: PUSH
62572: LD_INT 112
62574: PUSH
62575: LD_INT 116
62577: PUSH
62578: LD_INT 117
62580: PUSH
62581: LD_INT 118
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: ST_TO_ADDR
62600: GO 65263
62602: LD_INT 6
62604: DOUBLE
62605: EQUAL
62606: IFTRUE 62610
62608: GO 62742
62610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
62611: LD_ADDR_VAR 0 2
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: LD_INT 4
62621: PUSH
62622: LD_INT 5
62624: PUSH
62625: LD_INT 6
62627: PUSH
62628: LD_INT 8
62630: PUSH
62631: LD_INT 11
62633: PUSH
62634: LD_INT 12
62636: PUSH
62637: LD_INT 15
62639: PUSH
62640: LD_INT 16
62642: PUSH
62643: LD_INT 20
62645: PUSH
62646: LD_INT 21
62648: PUSH
62649: LD_INT 22
62651: PUSH
62652: LD_INT 23
62654: PUSH
62655: LD_INT 25
62657: PUSH
62658: LD_INT 26
62660: PUSH
62661: LD_INT 30
62663: PUSH
62664: LD_INT 31
62666: PUSH
62667: LD_INT 32
62669: PUSH
62670: LD_INT 36
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 101
62696: PUSH
62697: LD_INT 102
62699: PUSH
62700: LD_INT 105
62702: PUSH
62703: LD_INT 106
62705: PUSH
62706: LD_INT 108
62708: PUSH
62709: LD_INT 109
62711: PUSH
62712: LD_INT 112
62714: PUSH
62715: LD_INT 116
62717: PUSH
62718: LD_INT 117
62720: PUSH
62721: LD_INT 118
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: ST_TO_ADDR
62740: GO 65263
62742: LD_INT 7
62744: DOUBLE
62745: EQUAL
62746: IFTRUE 62750
62748: GO 62862
62750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
62751: LD_ADDR_VAR 0 2
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: LD_INT 5
62764: PUSH
62765: LD_INT 7
62767: PUSH
62768: LD_INT 11
62770: PUSH
62771: LD_INT 12
62773: PUSH
62774: LD_INT 15
62776: PUSH
62777: LD_INT 16
62779: PUSH
62780: LD_INT 20
62782: PUSH
62783: LD_INT 21
62785: PUSH
62786: LD_INT 22
62788: PUSH
62789: LD_INT 23
62791: PUSH
62792: LD_INT 25
62794: PUSH
62795: LD_INT 26
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 101
62816: PUSH
62817: LD_INT 102
62819: PUSH
62820: LD_INT 103
62822: PUSH
62823: LD_INT 105
62825: PUSH
62826: LD_INT 106
62828: PUSH
62829: LD_INT 108
62831: PUSH
62832: LD_INT 112
62834: PUSH
62835: LD_INT 116
62837: PUSH
62838: LD_INT 117
62840: PUSH
62841: LD_INT 118
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: ST_TO_ADDR
62860: GO 65263
62862: LD_INT 8
62864: DOUBLE
62865: EQUAL
62866: IFTRUE 62870
62868: GO 63010
62870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
62871: LD_ADDR_VAR 0 2
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 4
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: LD_INT 6
62887: PUSH
62888: LD_INT 7
62890: PUSH
62891: LD_INT 8
62893: PUSH
62894: LD_INT 11
62896: PUSH
62897: LD_INT 12
62899: PUSH
62900: LD_INT 15
62902: PUSH
62903: LD_INT 16
62905: PUSH
62906: LD_INT 20
62908: PUSH
62909: LD_INT 21
62911: PUSH
62912: LD_INT 22
62914: PUSH
62915: LD_INT 23
62917: PUSH
62918: LD_INT 25
62920: PUSH
62921: LD_INT 26
62923: PUSH
62924: LD_INT 30
62926: PUSH
62927: LD_INT 31
62929: PUSH
62930: LD_INT 32
62932: PUSH
62933: LD_INT 36
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 101
62960: PUSH
62961: LD_INT 102
62963: PUSH
62964: LD_INT 103
62966: PUSH
62967: LD_INT 105
62969: PUSH
62970: LD_INT 106
62972: PUSH
62973: LD_INT 108
62975: PUSH
62976: LD_INT 109
62978: PUSH
62979: LD_INT 112
62981: PUSH
62982: LD_INT 116
62984: PUSH
62985: LD_INT 117
62987: PUSH
62988: LD_INT 118
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: ST_TO_ADDR
63008: GO 65263
63010: LD_INT 9
63012: DOUBLE
63013: EQUAL
63014: IFTRUE 63018
63016: GO 63166
63018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63019: LD_ADDR_VAR 0 2
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 4
63029: PUSH
63030: LD_INT 5
63032: PUSH
63033: LD_INT 6
63035: PUSH
63036: LD_INT 7
63038: PUSH
63039: LD_INT 8
63041: PUSH
63042: LD_INT 11
63044: PUSH
63045: LD_INT 12
63047: PUSH
63048: LD_INT 15
63050: PUSH
63051: LD_INT 16
63053: PUSH
63054: LD_INT 20
63056: PUSH
63057: LD_INT 21
63059: PUSH
63060: LD_INT 22
63062: PUSH
63063: LD_INT 23
63065: PUSH
63066: LD_INT 25
63068: PUSH
63069: LD_INT 26
63071: PUSH
63072: LD_INT 28
63074: PUSH
63075: LD_INT 30
63077: PUSH
63078: LD_INT 31
63080: PUSH
63081: LD_INT 32
63083: PUSH
63084: LD_INT 36
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 101
63112: PUSH
63113: LD_INT 102
63115: PUSH
63116: LD_INT 103
63118: PUSH
63119: LD_INT 105
63121: PUSH
63122: LD_INT 106
63124: PUSH
63125: LD_INT 108
63127: PUSH
63128: LD_INT 109
63130: PUSH
63131: LD_INT 112
63133: PUSH
63134: LD_INT 114
63136: PUSH
63137: LD_INT 116
63139: PUSH
63140: LD_INT 117
63142: PUSH
63143: LD_INT 118
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: ST_TO_ADDR
63164: GO 65263
63166: LD_INT 10
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63174
63172: GO 63370
63174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63175: LD_ADDR_VAR 0 2
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 5
63188: PUSH
63189: LD_INT 6
63191: PUSH
63192: LD_INT 7
63194: PUSH
63195: LD_INT 8
63197: PUSH
63198: LD_INT 9
63200: PUSH
63201: LD_INT 10
63203: PUSH
63204: LD_INT 11
63206: PUSH
63207: LD_INT 12
63209: PUSH
63210: LD_INT 13
63212: PUSH
63213: LD_INT 14
63215: PUSH
63216: LD_INT 15
63218: PUSH
63219: LD_INT 16
63221: PUSH
63222: LD_INT 17
63224: PUSH
63225: LD_INT 18
63227: PUSH
63228: LD_INT 19
63230: PUSH
63231: LD_INT 20
63233: PUSH
63234: LD_INT 21
63236: PUSH
63237: LD_INT 22
63239: PUSH
63240: LD_INT 23
63242: PUSH
63243: LD_INT 24
63245: PUSH
63246: LD_INT 25
63248: PUSH
63249: LD_INT 26
63251: PUSH
63252: LD_INT 28
63254: PUSH
63255: LD_INT 30
63257: PUSH
63258: LD_INT 31
63260: PUSH
63261: LD_INT 32
63263: PUSH
63264: LD_INT 36
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 101
63300: PUSH
63301: LD_INT 102
63303: PUSH
63304: LD_INT 103
63306: PUSH
63307: LD_INT 104
63309: PUSH
63310: LD_INT 105
63312: PUSH
63313: LD_INT 106
63315: PUSH
63316: LD_INT 107
63318: PUSH
63319: LD_INT 108
63321: PUSH
63322: LD_INT 109
63324: PUSH
63325: LD_INT 110
63327: PUSH
63328: LD_INT 111
63330: PUSH
63331: LD_INT 112
63333: PUSH
63334: LD_INT 114
63336: PUSH
63337: LD_INT 116
63339: PUSH
63340: LD_INT 117
63342: PUSH
63343: LD_INT 118
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: ST_TO_ADDR
63368: GO 65263
63370: LD_INT 11
63372: DOUBLE
63373: EQUAL
63374: IFTRUE 63378
63376: GO 63582
63378: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
63379: LD_ADDR_VAR 0 2
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: LD_INT 5
63395: PUSH
63396: LD_INT 6
63398: PUSH
63399: LD_INT 7
63401: PUSH
63402: LD_INT 8
63404: PUSH
63405: LD_INT 9
63407: PUSH
63408: LD_INT 10
63410: PUSH
63411: LD_INT 11
63413: PUSH
63414: LD_INT 12
63416: PUSH
63417: LD_INT 13
63419: PUSH
63420: LD_INT 14
63422: PUSH
63423: LD_INT 15
63425: PUSH
63426: LD_INT 16
63428: PUSH
63429: LD_INT 17
63431: PUSH
63432: LD_INT 18
63434: PUSH
63435: LD_INT 19
63437: PUSH
63438: LD_INT 20
63440: PUSH
63441: LD_INT 21
63443: PUSH
63444: LD_INT 22
63446: PUSH
63447: LD_INT 23
63449: PUSH
63450: LD_INT 24
63452: PUSH
63453: LD_INT 25
63455: PUSH
63456: LD_INT 26
63458: PUSH
63459: LD_INT 28
63461: PUSH
63462: LD_INT 30
63464: PUSH
63465: LD_INT 31
63467: PUSH
63468: LD_INT 32
63470: PUSH
63471: LD_INT 34
63473: PUSH
63474: LD_INT 36
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 101
63512: PUSH
63513: LD_INT 102
63515: PUSH
63516: LD_INT 103
63518: PUSH
63519: LD_INT 104
63521: PUSH
63522: LD_INT 105
63524: PUSH
63525: LD_INT 106
63527: PUSH
63528: LD_INT 107
63530: PUSH
63531: LD_INT 108
63533: PUSH
63534: LD_INT 109
63536: PUSH
63537: LD_INT 110
63539: PUSH
63540: LD_INT 111
63542: PUSH
63543: LD_INT 112
63545: PUSH
63546: LD_INT 114
63548: PUSH
63549: LD_INT 116
63551: PUSH
63552: LD_INT 117
63554: PUSH
63555: LD_INT 118
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: ST_TO_ADDR
63580: GO 65263
63582: LD_INT 12
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63590
63588: GO 63810
63590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
63591: LD_ADDR_VAR 0 2
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: LD_INT 4
63607: PUSH
63608: LD_INT 5
63610: PUSH
63611: LD_INT 6
63613: PUSH
63614: LD_INT 7
63616: PUSH
63617: LD_INT 8
63619: PUSH
63620: LD_INT 9
63622: PUSH
63623: LD_INT 10
63625: PUSH
63626: LD_INT 11
63628: PUSH
63629: LD_INT 12
63631: PUSH
63632: LD_INT 13
63634: PUSH
63635: LD_INT 14
63637: PUSH
63638: LD_INT 15
63640: PUSH
63641: LD_INT 16
63643: PUSH
63644: LD_INT 17
63646: PUSH
63647: LD_INT 18
63649: PUSH
63650: LD_INT 19
63652: PUSH
63653: LD_INT 20
63655: PUSH
63656: LD_INT 21
63658: PUSH
63659: LD_INT 22
63661: PUSH
63662: LD_INT 23
63664: PUSH
63665: LD_INT 24
63667: PUSH
63668: LD_INT 25
63670: PUSH
63671: LD_INT 26
63673: PUSH
63674: LD_INT 27
63676: PUSH
63677: LD_INT 28
63679: PUSH
63680: LD_INT 30
63682: PUSH
63683: LD_INT 31
63685: PUSH
63686: LD_INT 32
63688: PUSH
63689: LD_INT 33
63691: PUSH
63692: LD_INT 34
63694: PUSH
63695: LD_INT 36
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 101
63736: PUSH
63737: LD_INT 102
63739: PUSH
63740: LD_INT 103
63742: PUSH
63743: LD_INT 104
63745: PUSH
63746: LD_INT 105
63748: PUSH
63749: LD_INT 106
63751: PUSH
63752: LD_INT 107
63754: PUSH
63755: LD_INT 108
63757: PUSH
63758: LD_INT 109
63760: PUSH
63761: LD_INT 110
63763: PUSH
63764: LD_INT 111
63766: PUSH
63767: LD_INT 112
63769: PUSH
63770: LD_INT 113
63772: PUSH
63773: LD_INT 114
63775: PUSH
63776: LD_INT 116
63778: PUSH
63779: LD_INT 117
63781: PUSH
63782: LD_INT 118
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: ST_TO_ADDR
63808: GO 65263
63810: LD_INT 13
63812: DOUBLE
63813: EQUAL
63814: IFTRUE 63818
63816: GO 64026
63818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
63819: LD_ADDR_VAR 0 2
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: LD_INT 4
63835: PUSH
63836: LD_INT 5
63838: PUSH
63839: LD_INT 8
63841: PUSH
63842: LD_INT 9
63844: PUSH
63845: LD_INT 10
63847: PUSH
63848: LD_INT 11
63850: PUSH
63851: LD_INT 12
63853: PUSH
63854: LD_INT 14
63856: PUSH
63857: LD_INT 15
63859: PUSH
63860: LD_INT 16
63862: PUSH
63863: LD_INT 17
63865: PUSH
63866: LD_INT 18
63868: PUSH
63869: LD_INT 19
63871: PUSH
63872: LD_INT 20
63874: PUSH
63875: LD_INT 21
63877: PUSH
63878: LD_INT 22
63880: PUSH
63881: LD_INT 23
63883: PUSH
63884: LD_INT 24
63886: PUSH
63887: LD_INT 25
63889: PUSH
63890: LD_INT 26
63892: PUSH
63893: LD_INT 27
63895: PUSH
63896: LD_INT 28
63898: PUSH
63899: LD_INT 30
63901: PUSH
63902: LD_INT 31
63904: PUSH
63905: LD_INT 32
63907: PUSH
63908: LD_INT 33
63910: PUSH
63911: LD_INT 34
63913: PUSH
63914: LD_INT 36
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 101
63952: PUSH
63953: LD_INT 102
63955: PUSH
63956: LD_INT 103
63958: PUSH
63959: LD_INT 104
63961: PUSH
63962: LD_INT 105
63964: PUSH
63965: LD_INT 106
63967: PUSH
63968: LD_INT 107
63970: PUSH
63971: LD_INT 108
63973: PUSH
63974: LD_INT 109
63976: PUSH
63977: LD_INT 110
63979: PUSH
63980: LD_INT 111
63982: PUSH
63983: LD_INT 112
63985: PUSH
63986: LD_INT 113
63988: PUSH
63989: LD_INT 114
63991: PUSH
63992: LD_INT 116
63994: PUSH
63995: LD_INT 117
63997: PUSH
63998: LD_INT 118
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: ST_TO_ADDR
64024: GO 65263
64026: LD_INT 14
64028: DOUBLE
64029: EQUAL
64030: IFTRUE 64034
64032: GO 64258
64034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64035: LD_ADDR_VAR 0 2
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: LD_INT 3
64048: PUSH
64049: LD_INT 4
64051: PUSH
64052: LD_INT 5
64054: PUSH
64055: LD_INT 6
64057: PUSH
64058: LD_INT 7
64060: PUSH
64061: LD_INT 8
64063: PUSH
64064: LD_INT 9
64066: PUSH
64067: LD_INT 10
64069: PUSH
64070: LD_INT 11
64072: PUSH
64073: LD_INT 12
64075: PUSH
64076: LD_INT 13
64078: PUSH
64079: LD_INT 14
64081: PUSH
64082: LD_INT 15
64084: PUSH
64085: LD_INT 16
64087: PUSH
64088: LD_INT 17
64090: PUSH
64091: LD_INT 18
64093: PUSH
64094: LD_INT 19
64096: PUSH
64097: LD_INT 20
64099: PUSH
64100: LD_INT 21
64102: PUSH
64103: LD_INT 22
64105: PUSH
64106: LD_INT 23
64108: PUSH
64109: LD_INT 24
64111: PUSH
64112: LD_INT 25
64114: PUSH
64115: LD_INT 26
64117: PUSH
64118: LD_INT 27
64120: PUSH
64121: LD_INT 28
64123: PUSH
64124: LD_INT 29
64126: PUSH
64127: LD_INT 30
64129: PUSH
64130: LD_INT 31
64132: PUSH
64133: LD_INT 32
64135: PUSH
64136: LD_INT 33
64138: PUSH
64139: LD_INT 34
64141: PUSH
64142: LD_INT 36
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 101
64184: PUSH
64185: LD_INT 102
64187: PUSH
64188: LD_INT 103
64190: PUSH
64191: LD_INT 104
64193: PUSH
64194: LD_INT 105
64196: PUSH
64197: LD_INT 106
64199: PUSH
64200: LD_INT 107
64202: PUSH
64203: LD_INT 108
64205: PUSH
64206: LD_INT 109
64208: PUSH
64209: LD_INT 110
64211: PUSH
64212: LD_INT 111
64214: PUSH
64215: LD_INT 112
64217: PUSH
64218: LD_INT 113
64220: PUSH
64221: LD_INT 114
64223: PUSH
64224: LD_INT 116
64226: PUSH
64227: LD_INT 117
64229: PUSH
64230: LD_INT 118
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: ST_TO_ADDR
64256: GO 65263
64258: LD_INT 15
64260: DOUBLE
64261: EQUAL
64262: IFTRUE 64266
64264: GO 64490
64266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64267: LD_ADDR_VAR 0 2
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: LD_INT 3
64280: PUSH
64281: LD_INT 4
64283: PUSH
64284: LD_INT 5
64286: PUSH
64287: LD_INT 6
64289: PUSH
64290: LD_INT 7
64292: PUSH
64293: LD_INT 8
64295: PUSH
64296: LD_INT 9
64298: PUSH
64299: LD_INT 10
64301: PUSH
64302: LD_INT 11
64304: PUSH
64305: LD_INT 12
64307: PUSH
64308: LD_INT 13
64310: PUSH
64311: LD_INT 14
64313: PUSH
64314: LD_INT 15
64316: PUSH
64317: LD_INT 16
64319: PUSH
64320: LD_INT 17
64322: PUSH
64323: LD_INT 18
64325: PUSH
64326: LD_INT 19
64328: PUSH
64329: LD_INT 20
64331: PUSH
64332: LD_INT 21
64334: PUSH
64335: LD_INT 22
64337: PUSH
64338: LD_INT 23
64340: PUSH
64341: LD_INT 24
64343: PUSH
64344: LD_INT 25
64346: PUSH
64347: LD_INT 26
64349: PUSH
64350: LD_INT 27
64352: PUSH
64353: LD_INT 28
64355: PUSH
64356: LD_INT 29
64358: PUSH
64359: LD_INT 30
64361: PUSH
64362: LD_INT 31
64364: PUSH
64365: LD_INT 32
64367: PUSH
64368: LD_INT 33
64370: PUSH
64371: LD_INT 34
64373: PUSH
64374: LD_INT 36
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 101
64416: PUSH
64417: LD_INT 102
64419: PUSH
64420: LD_INT 103
64422: PUSH
64423: LD_INT 104
64425: PUSH
64426: LD_INT 105
64428: PUSH
64429: LD_INT 106
64431: PUSH
64432: LD_INT 107
64434: PUSH
64435: LD_INT 108
64437: PUSH
64438: LD_INT 109
64440: PUSH
64441: LD_INT 110
64443: PUSH
64444: LD_INT 111
64446: PUSH
64447: LD_INT 112
64449: PUSH
64450: LD_INT 113
64452: PUSH
64453: LD_INT 114
64455: PUSH
64456: LD_INT 116
64458: PUSH
64459: LD_INT 117
64461: PUSH
64462: LD_INT 118
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: ST_TO_ADDR
64488: GO 65263
64490: LD_INT 16
64492: DOUBLE
64493: EQUAL
64494: IFTRUE 64498
64496: GO 64634
64498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64499: LD_ADDR_VAR 0 2
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 4
64509: PUSH
64510: LD_INT 5
64512: PUSH
64513: LD_INT 7
64515: PUSH
64516: LD_INT 11
64518: PUSH
64519: LD_INT 12
64521: PUSH
64522: LD_INT 15
64524: PUSH
64525: LD_INT 16
64527: PUSH
64528: LD_INT 20
64530: PUSH
64531: LD_INT 21
64533: PUSH
64534: LD_INT 22
64536: PUSH
64537: LD_INT 23
64539: PUSH
64540: LD_INT 25
64542: PUSH
64543: LD_INT 26
64545: PUSH
64546: LD_INT 30
64548: PUSH
64549: LD_INT 31
64551: PUSH
64552: LD_INT 32
64554: PUSH
64555: LD_INT 33
64557: PUSH
64558: LD_INT 34
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 101
64584: PUSH
64585: LD_INT 102
64587: PUSH
64588: LD_INT 103
64590: PUSH
64591: LD_INT 106
64593: PUSH
64594: LD_INT 108
64596: PUSH
64597: LD_INT 112
64599: PUSH
64600: LD_INT 113
64602: PUSH
64603: LD_INT 114
64605: PUSH
64606: LD_INT 116
64608: PUSH
64609: LD_INT 117
64611: PUSH
64612: LD_INT 118
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: ST_TO_ADDR
64632: GO 65263
64634: LD_INT 17
64636: DOUBLE
64637: EQUAL
64638: IFTRUE 64642
64640: GO 64866
64642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
64643: LD_ADDR_VAR 0 2
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: LD_INT 4
64659: PUSH
64660: LD_INT 5
64662: PUSH
64663: LD_INT 6
64665: PUSH
64666: LD_INT 7
64668: PUSH
64669: LD_INT 8
64671: PUSH
64672: LD_INT 9
64674: PUSH
64675: LD_INT 10
64677: PUSH
64678: LD_INT 11
64680: PUSH
64681: LD_INT 12
64683: PUSH
64684: LD_INT 13
64686: PUSH
64687: LD_INT 14
64689: PUSH
64690: LD_INT 15
64692: PUSH
64693: LD_INT 16
64695: PUSH
64696: LD_INT 17
64698: PUSH
64699: LD_INT 18
64701: PUSH
64702: LD_INT 19
64704: PUSH
64705: LD_INT 20
64707: PUSH
64708: LD_INT 21
64710: PUSH
64711: LD_INT 22
64713: PUSH
64714: LD_INT 23
64716: PUSH
64717: LD_INT 24
64719: PUSH
64720: LD_INT 25
64722: PUSH
64723: LD_INT 26
64725: PUSH
64726: LD_INT 27
64728: PUSH
64729: LD_INT 28
64731: PUSH
64732: LD_INT 29
64734: PUSH
64735: LD_INT 30
64737: PUSH
64738: LD_INT 31
64740: PUSH
64741: LD_INT 32
64743: PUSH
64744: LD_INT 33
64746: PUSH
64747: LD_INT 34
64749: PUSH
64750: LD_INT 36
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 101
64792: PUSH
64793: LD_INT 102
64795: PUSH
64796: LD_INT 103
64798: PUSH
64799: LD_INT 104
64801: PUSH
64802: LD_INT 105
64804: PUSH
64805: LD_INT 106
64807: PUSH
64808: LD_INT 107
64810: PUSH
64811: LD_INT 108
64813: PUSH
64814: LD_INT 109
64816: PUSH
64817: LD_INT 110
64819: PUSH
64820: LD_INT 111
64822: PUSH
64823: LD_INT 112
64825: PUSH
64826: LD_INT 113
64828: PUSH
64829: LD_INT 114
64831: PUSH
64832: LD_INT 116
64834: PUSH
64835: LD_INT 117
64837: PUSH
64838: LD_INT 118
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: ST_TO_ADDR
64864: GO 65263
64866: LD_INT 18
64868: DOUBLE
64869: EQUAL
64870: IFTRUE 64874
64872: GO 65022
64874: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
64875: LD_ADDR_VAR 0 2
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: LD_INT 5
64888: PUSH
64889: LD_INT 7
64891: PUSH
64892: LD_INT 11
64894: PUSH
64895: LD_INT 12
64897: PUSH
64898: LD_INT 15
64900: PUSH
64901: LD_INT 16
64903: PUSH
64904: LD_INT 20
64906: PUSH
64907: LD_INT 21
64909: PUSH
64910: LD_INT 22
64912: PUSH
64913: LD_INT 23
64915: PUSH
64916: LD_INT 25
64918: PUSH
64919: LD_INT 26
64921: PUSH
64922: LD_INT 30
64924: PUSH
64925: LD_INT 31
64927: PUSH
64928: LD_INT 32
64930: PUSH
64931: LD_INT 33
64933: PUSH
64934: LD_INT 34
64936: PUSH
64937: LD_INT 35
64939: PUSH
64940: LD_INT 36
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 101
64968: PUSH
64969: LD_INT 102
64971: PUSH
64972: LD_INT 103
64974: PUSH
64975: LD_INT 106
64977: PUSH
64978: LD_INT 108
64980: PUSH
64981: LD_INT 112
64983: PUSH
64984: LD_INT 113
64986: PUSH
64987: LD_INT 114
64989: PUSH
64990: LD_INT 115
64992: PUSH
64993: LD_INT 116
64995: PUSH
64996: LD_INT 117
64998: PUSH
64999: LD_INT 118
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: ST_TO_ADDR
65020: GO 65263
65022: LD_INT 19
65024: DOUBLE
65025: EQUAL
65026: IFTRUE 65030
65028: GO 65262
65030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65031: LD_ADDR_VAR 0 2
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: LD_INT 5
65050: PUSH
65051: LD_INT 6
65053: PUSH
65054: LD_INT 7
65056: PUSH
65057: LD_INT 8
65059: PUSH
65060: LD_INT 9
65062: PUSH
65063: LD_INT 10
65065: PUSH
65066: LD_INT 11
65068: PUSH
65069: LD_INT 12
65071: PUSH
65072: LD_INT 13
65074: PUSH
65075: LD_INT 14
65077: PUSH
65078: LD_INT 15
65080: PUSH
65081: LD_INT 16
65083: PUSH
65084: LD_INT 17
65086: PUSH
65087: LD_INT 18
65089: PUSH
65090: LD_INT 19
65092: PUSH
65093: LD_INT 20
65095: PUSH
65096: LD_INT 21
65098: PUSH
65099: LD_INT 22
65101: PUSH
65102: LD_INT 23
65104: PUSH
65105: LD_INT 24
65107: PUSH
65108: LD_INT 25
65110: PUSH
65111: LD_INT 26
65113: PUSH
65114: LD_INT 27
65116: PUSH
65117: LD_INT 28
65119: PUSH
65120: LD_INT 29
65122: PUSH
65123: LD_INT 30
65125: PUSH
65126: LD_INT 31
65128: PUSH
65129: LD_INT 32
65131: PUSH
65132: LD_INT 33
65134: PUSH
65135: LD_INT 34
65137: PUSH
65138: LD_INT 35
65140: PUSH
65141: LD_INT 36
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 101
65184: PUSH
65185: LD_INT 102
65187: PUSH
65188: LD_INT 103
65190: PUSH
65191: LD_INT 104
65193: PUSH
65194: LD_INT 105
65196: PUSH
65197: LD_INT 106
65199: PUSH
65200: LD_INT 107
65202: PUSH
65203: LD_INT 108
65205: PUSH
65206: LD_INT 109
65208: PUSH
65209: LD_INT 110
65211: PUSH
65212: LD_INT 111
65214: PUSH
65215: LD_INT 112
65217: PUSH
65218: LD_INT 113
65220: PUSH
65221: LD_INT 114
65223: PUSH
65224: LD_INT 115
65226: PUSH
65227: LD_INT 116
65229: PUSH
65230: LD_INT 117
65232: PUSH
65233: LD_INT 118
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: ST_TO_ADDR
65260: GO 65263
65262: POP
// end else
65263: GO 65494
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65265: LD_ADDR_VAR 0 2
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: LD_INT 5
65284: PUSH
65285: LD_INT 6
65287: PUSH
65288: LD_INT 7
65290: PUSH
65291: LD_INT 8
65293: PUSH
65294: LD_INT 9
65296: PUSH
65297: LD_INT 10
65299: PUSH
65300: LD_INT 11
65302: PUSH
65303: LD_INT 12
65305: PUSH
65306: LD_INT 13
65308: PUSH
65309: LD_INT 14
65311: PUSH
65312: LD_INT 15
65314: PUSH
65315: LD_INT 16
65317: PUSH
65318: LD_INT 17
65320: PUSH
65321: LD_INT 18
65323: PUSH
65324: LD_INT 19
65326: PUSH
65327: LD_INT 20
65329: PUSH
65330: LD_INT 21
65332: PUSH
65333: LD_INT 22
65335: PUSH
65336: LD_INT 23
65338: PUSH
65339: LD_INT 24
65341: PUSH
65342: LD_INT 25
65344: PUSH
65345: LD_INT 26
65347: PUSH
65348: LD_INT 27
65350: PUSH
65351: LD_INT 28
65353: PUSH
65354: LD_INT 29
65356: PUSH
65357: LD_INT 30
65359: PUSH
65360: LD_INT 31
65362: PUSH
65363: LD_INT 32
65365: PUSH
65366: LD_INT 33
65368: PUSH
65369: LD_INT 34
65371: PUSH
65372: LD_INT 35
65374: PUSH
65375: LD_INT 36
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 101
65418: PUSH
65419: LD_INT 102
65421: PUSH
65422: LD_INT 103
65424: PUSH
65425: LD_INT 104
65427: PUSH
65428: LD_INT 105
65430: PUSH
65431: LD_INT 106
65433: PUSH
65434: LD_INT 107
65436: PUSH
65437: LD_INT 108
65439: PUSH
65440: LD_INT 109
65442: PUSH
65443: LD_INT 110
65445: PUSH
65446: LD_INT 111
65448: PUSH
65449: LD_INT 112
65451: PUSH
65452: LD_INT 113
65454: PUSH
65455: LD_INT 114
65457: PUSH
65458: LD_INT 115
65460: PUSH
65461: LD_INT 116
65463: PUSH
65464: LD_INT 117
65466: PUSH
65467: LD_INT 118
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// if result then
65494: LD_VAR 0 2
65498: IFFALSE 66284
// begin normal :=  ;
65500: LD_ADDR_VAR 0 5
65504: PUSH
65505: LD_STRING 
65507: ST_TO_ADDR
// hardcore :=  ;
65508: LD_ADDR_VAR 0 6
65512: PUSH
65513: LD_STRING 
65515: ST_TO_ADDR
// active :=  ;
65516: LD_ADDR_VAR 0 7
65520: PUSH
65521: LD_STRING 
65523: ST_TO_ADDR
// for i = 1 to normalCounter do
65524: LD_ADDR_VAR 0 8
65528: PUSH
65529: DOUBLE
65530: LD_INT 1
65532: DEC
65533: ST_TO_ADDR
65534: LD_EXP 52
65538: PUSH
65539: FOR_TO
65540: IFFALSE 65641
// begin tmp := 0 ;
65542: LD_ADDR_VAR 0 3
65546: PUSH
65547: LD_STRING 0
65549: ST_TO_ADDR
// if result [ 1 ] then
65550: LD_VAR 0 2
65554: PUSH
65555: LD_INT 1
65557: ARRAY
65558: IFFALSE 65623
// if result [ 1 ] [ 1 ] = i then
65560: LD_VAR 0 2
65564: PUSH
65565: LD_INT 1
65567: ARRAY
65568: PUSH
65569: LD_INT 1
65571: ARRAY
65572: PUSH
65573: LD_VAR 0 8
65577: EQUAL
65578: IFFALSE 65623
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
65580: LD_ADDR_VAR 0 2
65584: PUSH
65585: LD_VAR 0 2
65589: PPUSH
65590: LD_INT 1
65592: PPUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_INT 1
65600: ARRAY
65601: PPUSH
65602: LD_INT 1
65604: PPUSH
65605: CALL_OW 3
65609: PPUSH
65610: CALL_OW 1
65614: ST_TO_ADDR
// tmp := 1 ;
65615: LD_ADDR_VAR 0 3
65619: PUSH
65620: LD_STRING 1
65622: ST_TO_ADDR
// end ; normal := normal & tmp ;
65623: LD_ADDR_VAR 0 5
65627: PUSH
65628: LD_VAR 0 5
65632: PUSH
65633: LD_VAR 0 3
65637: STR
65638: ST_TO_ADDR
// end ;
65639: GO 65539
65641: POP
65642: POP
// for i = 1 to hardcoreCounter do
65643: LD_ADDR_VAR 0 8
65647: PUSH
65648: DOUBLE
65649: LD_INT 1
65651: DEC
65652: ST_TO_ADDR
65653: LD_EXP 53
65657: PUSH
65658: FOR_TO
65659: IFFALSE 65764
// begin tmp := 0 ;
65661: LD_ADDR_VAR 0 3
65665: PUSH
65666: LD_STRING 0
65668: ST_TO_ADDR
// if result [ 2 ] then
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 2
65676: ARRAY
65677: IFFALSE 65746
// if result [ 2 ] [ 1 ] = 100 + i then
65679: LD_VAR 0 2
65683: PUSH
65684: LD_INT 2
65686: ARRAY
65687: PUSH
65688: LD_INT 1
65690: ARRAY
65691: PUSH
65692: LD_INT 100
65694: PUSH
65695: LD_VAR 0 8
65699: PLUS
65700: EQUAL
65701: IFFALSE 65746
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
65703: LD_ADDR_VAR 0 2
65707: PUSH
65708: LD_VAR 0 2
65712: PPUSH
65713: LD_INT 2
65715: PPUSH
65716: LD_VAR 0 2
65720: PUSH
65721: LD_INT 2
65723: ARRAY
65724: PPUSH
65725: LD_INT 1
65727: PPUSH
65728: CALL_OW 3
65732: PPUSH
65733: CALL_OW 1
65737: ST_TO_ADDR
// tmp := 1 ;
65738: LD_ADDR_VAR 0 3
65742: PUSH
65743: LD_STRING 1
65745: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
65746: LD_ADDR_VAR 0 6
65750: PUSH
65751: LD_VAR 0 6
65755: PUSH
65756: LD_VAR 0 3
65760: STR
65761: ST_TO_ADDR
// end ;
65762: GO 65658
65764: POP
65765: POP
// if isGameLoad then
65766: LD_VAR 0 1
65770: IFFALSE 66245
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
65772: LD_ADDR_VAR 0 4
65776: PUSH
65777: LD_EXP 56
65781: PUSH
65782: LD_EXP 55
65786: PUSH
65787: LD_EXP 57
65791: PUSH
65792: LD_EXP 54
65796: PUSH
65797: LD_EXP 58
65801: PUSH
65802: LD_EXP 59
65806: PUSH
65807: LD_EXP 60
65811: PUSH
65812: LD_EXP 61
65816: PUSH
65817: LD_EXP 62
65821: PUSH
65822: LD_EXP 63
65826: PUSH
65827: LD_EXP 64
65831: PUSH
65832: LD_EXP 65
65836: PUSH
65837: LD_EXP 66
65841: PUSH
65842: LD_EXP 67
65846: PUSH
65847: LD_EXP 75
65851: PUSH
65852: LD_EXP 76
65856: PUSH
65857: LD_EXP 77
65861: PUSH
65862: LD_EXP 78
65866: PUSH
65867: LD_EXP 80
65871: PUSH
65872: LD_EXP 81
65876: PUSH
65877: LD_EXP 82
65881: PUSH
65882: LD_EXP 85
65886: PUSH
65887: LD_EXP 87
65891: PUSH
65892: LD_EXP 88
65896: PUSH
65897: LD_EXP 89
65901: PUSH
65902: LD_EXP 91
65906: PUSH
65907: LD_EXP 92
65911: PUSH
65912: LD_EXP 95
65916: PUSH
65917: LD_EXP 96
65921: PUSH
65922: LD_EXP 97
65926: PUSH
65927: LD_EXP 98
65931: PUSH
65932: LD_EXP 99
65936: PUSH
65937: LD_EXP 100
65941: PUSH
65942: LD_EXP 101
65946: PUSH
65947: LD_EXP 102
65951: PUSH
65952: LD_EXP 103
65956: PUSH
65957: LD_EXP 68
65961: PUSH
65962: LD_EXP 69
65966: PUSH
65967: LD_EXP 72
65971: PUSH
65972: LD_EXP 73
65976: PUSH
65977: LD_EXP 74
65981: PUSH
65982: LD_EXP 70
65986: PUSH
65987: LD_EXP 71
65991: PUSH
65992: LD_EXP 79
65996: PUSH
65997: LD_EXP 83
66001: PUSH
66002: LD_EXP 84
66006: PUSH
66007: LD_EXP 86
66011: PUSH
66012: LD_EXP 90
66016: PUSH
66017: LD_EXP 93
66021: PUSH
66022: LD_EXP 94
66026: PUSH
66027: LD_EXP 104
66031: PUSH
66032: LD_EXP 105
66036: PUSH
66037: LD_EXP 106
66041: PUSH
66042: LD_EXP 107
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// tmp :=  ;
66103: LD_ADDR_VAR 0 3
66107: PUSH
66108: LD_STRING 
66110: ST_TO_ADDR
// for i = 1 to normalCounter do
66111: LD_ADDR_VAR 0 8
66115: PUSH
66116: DOUBLE
66117: LD_INT 1
66119: DEC
66120: ST_TO_ADDR
66121: LD_EXP 52
66125: PUSH
66126: FOR_TO
66127: IFFALSE 66163
// begin if flags [ i ] then
66129: LD_VAR 0 4
66133: PUSH
66134: LD_VAR 0 8
66138: ARRAY
66139: IFFALSE 66161
// tmp := tmp & i & ; ;
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: LD_VAR 0 3
66150: PUSH
66151: LD_VAR 0 8
66155: STR
66156: PUSH
66157: LD_STRING ;
66159: STR
66160: ST_TO_ADDR
// end ;
66161: GO 66126
66163: POP
66164: POP
// for i = 1 to hardcoreCounter do
66165: LD_ADDR_VAR 0 8
66169: PUSH
66170: DOUBLE
66171: LD_INT 1
66173: DEC
66174: ST_TO_ADDR
66175: LD_EXP 53
66179: PUSH
66180: FOR_TO
66181: IFFALSE 66227
// begin if flags [ normalCounter + i ] then
66183: LD_VAR 0 4
66187: PUSH
66188: LD_EXP 52
66192: PUSH
66193: LD_VAR 0 8
66197: PLUS
66198: ARRAY
66199: IFFALSE 66225
// tmp := tmp & ( 100 + i ) & ; ;
66201: LD_ADDR_VAR 0 3
66205: PUSH
66206: LD_VAR 0 3
66210: PUSH
66211: LD_INT 100
66213: PUSH
66214: LD_VAR 0 8
66218: PLUS
66219: STR
66220: PUSH
66221: LD_STRING ;
66223: STR
66224: ST_TO_ADDR
// end ;
66225: GO 66180
66227: POP
66228: POP
// if tmp then
66229: LD_VAR 0 3
66233: IFFALSE 66245
// active := tmp ;
66235: LD_ADDR_VAR 0 7
66239: PUSH
66240: LD_VAR 0 3
66244: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66245: LD_STRING getStreamItemsFromMission("
66247: PUSH
66248: LD_VAR 0 5
66252: STR
66253: PUSH
66254: LD_STRING ","
66256: STR
66257: PUSH
66258: LD_VAR 0 6
66262: STR
66263: PUSH
66264: LD_STRING ","
66266: STR
66267: PUSH
66268: LD_VAR 0 7
66272: STR
66273: PUSH
66274: LD_STRING ")
66276: STR
66277: PPUSH
66278: CALL_OW 559
// end else
66282: GO 66291
// ToLua ( getStreamItemsFromMission("","","") ) ;
66284: LD_STRING getStreamItemsFromMission("","","")
66286: PPUSH
66287: CALL_OW 559
// end ;
66291: LD_VAR 0 2
66295: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66296: LD_EXP 51
66300: PUSH
66301: LD_EXP 56
66305: AND
66306: IFFALSE 66430
66308: GO 66310
66310: DISABLE
66311: LD_INT 0
66313: PPUSH
66314: PPUSH
// begin enable ;
66315: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_INT 22
66323: PUSH
66324: LD_OWVAR 2
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: PUSH
66336: LD_INT 34
66338: PUSH
66339: LD_INT 7
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 34
66348: PUSH
66349: LD_INT 45
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 34
66358: PUSH
66359: LD_INT 28
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 34
66368: PUSH
66369: LD_INT 47
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PPUSH
66387: CALL_OW 69
66391: ST_TO_ADDR
// if not tmp then
66392: LD_VAR 0 2
66396: NOT
66397: IFFALSE 66401
// exit ;
66399: GO 66430
// for i in tmp do
66401: LD_ADDR_VAR 0 1
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: FOR_IN
66412: IFFALSE 66428
// begin SetLives ( i , 0 ) ;
66414: LD_VAR 0 1
66418: PPUSH
66419: LD_INT 0
66421: PPUSH
66422: CALL_OW 234
// end ;
66426: GO 66411
66428: POP
66429: POP
// end ;
66430: PPOPN 2
66432: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66433: LD_EXP 51
66437: PUSH
66438: LD_EXP 57
66442: AND
66443: IFFALSE 66527
66445: GO 66447
66447: DISABLE
66448: LD_INT 0
66450: PPUSH
66451: PPUSH
// begin enable ;
66452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66453: LD_ADDR_VAR 0 2
66457: PUSH
66458: LD_INT 22
66460: PUSH
66461: LD_OWVAR 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 32
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PPUSH
66484: CALL_OW 69
66488: ST_TO_ADDR
// if not tmp then
66489: LD_VAR 0 2
66493: NOT
66494: IFFALSE 66498
// exit ;
66496: GO 66527
// for i in tmp do
66498: LD_ADDR_VAR 0 1
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: FOR_IN
66509: IFFALSE 66525
// begin SetLives ( i , 0 ) ;
66511: LD_VAR 0 1
66515: PPUSH
66516: LD_INT 0
66518: PPUSH
66519: CALL_OW 234
// end ;
66523: GO 66508
66525: POP
66526: POP
// end ;
66527: PPOPN 2
66529: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66530: LD_EXP 51
66534: PUSH
66535: LD_EXP 54
66539: AND
66540: IFFALSE 66633
66542: GO 66544
66544: DISABLE
66545: LD_INT 0
66547: PPUSH
// begin enable ;
66548: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66549: LD_ADDR_VAR 0 1
66553: PUSH
66554: LD_INT 22
66556: PUSH
66557: LD_OWVAR 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: LD_INT 25
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 25
66581: PUSH
66582: LD_INT 9
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 25
66591: PUSH
66592: LD_INT 8
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PPUSH
66609: CALL_OW 69
66613: PUSH
66614: FOR_IN
66615: IFFALSE 66631
// begin SetClass ( i , 1 ) ;
66617: LD_VAR 0 1
66621: PPUSH
66622: LD_INT 1
66624: PPUSH
66625: CALL_OW 336
// end ;
66629: GO 66614
66631: POP
66632: POP
// end ;
66633: PPOPN 1
66635: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66636: LD_EXP 51
66640: PUSH
66641: LD_EXP 55
66645: AND
66646: PUSH
66647: LD_OWVAR 65
66651: PUSH
66652: LD_INT 7
66654: LESS
66655: AND
66656: IFFALSE 66670
66658: GO 66660
66660: DISABLE
// begin enable ;
66661: ENABLE
// game_speed := 7 ;
66662: LD_ADDR_OWVAR 65
66666: PUSH
66667: LD_INT 7
66669: ST_TO_ADDR
// end ;
66670: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66671: LD_EXP 51
66675: PUSH
66676: LD_EXP 58
66680: AND
66681: IFFALSE 66883
66683: GO 66685
66685: DISABLE
66686: LD_INT 0
66688: PPUSH
66689: PPUSH
66690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66691: LD_ADDR_VAR 0 3
66695: PUSH
66696: LD_INT 81
66698: PUSH
66699: LD_OWVAR 2
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 21
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PPUSH
66722: CALL_OW 69
66726: ST_TO_ADDR
// if not tmp then
66727: LD_VAR 0 3
66731: NOT
66732: IFFALSE 66736
// exit ;
66734: GO 66883
// if tmp > 5 then
66736: LD_VAR 0 3
66740: PUSH
66741: LD_INT 5
66743: GREATER
66744: IFFALSE 66756
// k := 5 else
66746: LD_ADDR_VAR 0 2
66750: PUSH
66751: LD_INT 5
66753: ST_TO_ADDR
66754: GO 66766
// k := tmp ;
66756: LD_ADDR_VAR 0 2
66760: PUSH
66761: LD_VAR 0 3
66765: ST_TO_ADDR
// for i := 1 to k do
66766: LD_ADDR_VAR 0 1
66770: PUSH
66771: DOUBLE
66772: LD_INT 1
66774: DEC
66775: ST_TO_ADDR
66776: LD_VAR 0 2
66780: PUSH
66781: FOR_TO
66782: IFFALSE 66881
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66784: LD_VAR 0 3
66788: PUSH
66789: LD_VAR 0 1
66793: ARRAY
66794: PPUSH
66795: LD_VAR 0 1
66799: PUSH
66800: LD_INT 4
66802: MOD
66803: PUSH
66804: LD_INT 1
66806: PLUS
66807: PPUSH
66808: CALL_OW 259
66812: PUSH
66813: LD_INT 10
66815: LESS
66816: IFFALSE 66879
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66818: LD_VAR 0 3
66822: PUSH
66823: LD_VAR 0 1
66827: ARRAY
66828: PPUSH
66829: LD_VAR 0 1
66833: PUSH
66834: LD_INT 4
66836: MOD
66837: PUSH
66838: LD_INT 1
66840: PLUS
66841: PPUSH
66842: LD_VAR 0 3
66846: PUSH
66847: LD_VAR 0 1
66851: ARRAY
66852: PPUSH
66853: LD_VAR 0 1
66857: PUSH
66858: LD_INT 4
66860: MOD
66861: PUSH
66862: LD_INT 1
66864: PLUS
66865: PPUSH
66866: CALL_OW 259
66870: PUSH
66871: LD_INT 1
66873: PLUS
66874: PPUSH
66875: CALL_OW 237
66879: GO 66781
66881: POP
66882: POP
// end ;
66883: PPOPN 3
66885: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66886: LD_EXP 51
66890: PUSH
66891: LD_EXP 59
66895: AND
66896: IFFALSE 66916
66898: GO 66900
66900: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66901: LD_INT 4
66903: PPUSH
66904: LD_OWVAR 2
66908: PPUSH
66909: LD_INT 0
66911: PPUSH
66912: CALL_OW 324
66916: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66917: LD_EXP 51
66921: PUSH
66922: LD_EXP 88
66926: AND
66927: IFFALSE 66947
66929: GO 66931
66931: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66932: LD_INT 19
66934: PPUSH
66935: LD_OWVAR 2
66939: PPUSH
66940: LD_INT 0
66942: PPUSH
66943: CALL_OW 324
66947: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66948: LD_EXP 51
66952: PUSH
66953: LD_EXP 60
66957: AND
66958: IFFALSE 67060
66960: GO 66962
66962: DISABLE
66963: LD_INT 0
66965: PPUSH
66966: PPUSH
// begin enable ;
66967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66968: LD_ADDR_VAR 0 2
66972: PUSH
66973: LD_INT 22
66975: PUSH
66976: LD_OWVAR 2
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 2
66987: PUSH
66988: LD_INT 34
66990: PUSH
66991: LD_INT 11
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 34
67000: PUSH
67001: LD_INT 30
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PPUSH
67017: CALL_OW 69
67021: ST_TO_ADDR
// if not tmp then
67022: LD_VAR 0 2
67026: NOT
67027: IFFALSE 67031
// exit ;
67029: GO 67060
// for i in tmp do
67031: LD_ADDR_VAR 0 1
67035: PUSH
67036: LD_VAR 0 2
67040: PUSH
67041: FOR_IN
67042: IFFALSE 67058
// begin SetLives ( i , 0 ) ;
67044: LD_VAR 0 1
67048: PPUSH
67049: LD_INT 0
67051: PPUSH
67052: CALL_OW 234
// end ;
67056: GO 67041
67058: POP
67059: POP
// end ;
67060: PPOPN 2
67062: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67063: LD_EXP 51
67067: PUSH
67068: LD_EXP 61
67072: AND
67073: IFFALSE 67093
67075: GO 67077
67077: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67078: LD_INT 32
67080: PPUSH
67081: LD_OWVAR 2
67085: PPUSH
67086: LD_INT 0
67088: PPUSH
67089: CALL_OW 324
67093: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67094: LD_EXP 51
67098: PUSH
67099: LD_EXP 62
67103: AND
67104: IFFALSE 67285
67106: GO 67108
67108: DISABLE
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67114: LD_ADDR_VAR 0 2
67118: PUSH
67119: LD_INT 22
67121: PUSH
67122: LD_OWVAR 2
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 33
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PPUSH
67145: CALL_OW 69
67149: ST_TO_ADDR
// if not tmp then
67150: LD_VAR 0 2
67154: NOT
67155: IFFALSE 67159
// exit ;
67157: GO 67285
// side := 0 ;
67159: LD_ADDR_VAR 0 3
67163: PUSH
67164: LD_INT 0
67166: ST_TO_ADDR
// for i := 1 to 8 do
67167: LD_ADDR_VAR 0 1
67171: PUSH
67172: DOUBLE
67173: LD_INT 1
67175: DEC
67176: ST_TO_ADDR
67177: LD_INT 8
67179: PUSH
67180: FOR_TO
67181: IFFALSE 67229
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67183: LD_OWVAR 2
67187: PUSH
67188: LD_VAR 0 1
67192: NONEQUAL
67193: PUSH
67194: LD_OWVAR 2
67198: PPUSH
67199: LD_VAR 0 1
67203: PPUSH
67204: CALL_OW 81
67208: PUSH
67209: LD_INT 2
67211: EQUAL
67212: AND
67213: IFFALSE 67227
// begin side := i ;
67215: LD_ADDR_VAR 0 3
67219: PUSH
67220: LD_VAR 0 1
67224: ST_TO_ADDR
// break ;
67225: GO 67229
// end ;
67227: GO 67180
67229: POP
67230: POP
// if not side then
67231: LD_VAR 0 3
67235: NOT
67236: IFFALSE 67240
// exit ;
67238: GO 67285
// for i := 1 to tmp do
67240: LD_ADDR_VAR 0 1
67244: PUSH
67245: DOUBLE
67246: LD_INT 1
67248: DEC
67249: ST_TO_ADDR
67250: LD_VAR 0 2
67254: PUSH
67255: FOR_TO
67256: IFFALSE 67283
// if Prob ( 60 ) then
67258: LD_INT 60
67260: PPUSH
67261: CALL_OW 13
67265: IFFALSE 67281
// SetSide ( i , side ) ;
67267: LD_VAR 0 1
67271: PPUSH
67272: LD_VAR 0 3
67276: PPUSH
67277: CALL_OW 235
67281: GO 67255
67283: POP
67284: POP
// end ;
67285: PPOPN 3
67287: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67288: LD_EXP 51
67292: PUSH
67293: LD_EXP 64
67297: AND
67298: IFFALSE 67417
67300: GO 67302
67302: DISABLE
67303: LD_INT 0
67305: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67306: LD_ADDR_VAR 0 1
67310: PUSH
67311: LD_INT 22
67313: PUSH
67314: LD_OWVAR 2
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 21
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 23
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: PPUSH
67355: CALL_OW 69
67359: PUSH
67360: FOR_IN
67361: IFFALSE 67415
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
67363: LD_VAR 0 1
67367: PPUSH
67368: CALL_OW 257
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 3
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: IN
67391: IFFALSE 67413
// SetClass ( un , rand ( 1 , 4 ) ) ;
67393: LD_VAR 0 1
67397: PPUSH
67398: LD_INT 1
67400: PPUSH
67401: LD_INT 4
67403: PPUSH
67404: CALL_OW 12
67408: PPUSH
67409: CALL_OW 336
67413: GO 67360
67415: POP
67416: POP
// end ;
67417: PPOPN 1
67419: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67420: LD_EXP 51
67424: PUSH
67425: LD_EXP 63
67429: AND
67430: IFFALSE 67509
67432: GO 67434
67434: DISABLE
67435: LD_INT 0
67437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67438: LD_ADDR_VAR 0 1
67442: PUSH
67443: LD_INT 22
67445: PUSH
67446: LD_OWVAR 2
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 21
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PPUSH
67469: CALL_OW 69
67473: ST_TO_ADDR
// if not tmp then
67474: LD_VAR 0 1
67478: NOT
67479: IFFALSE 67483
// exit ;
67481: GO 67509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67483: LD_VAR 0 1
67487: PUSH
67488: LD_INT 1
67490: PPUSH
67491: LD_VAR 0 1
67495: PPUSH
67496: CALL_OW 12
67500: ARRAY
67501: PPUSH
67502: LD_INT 100
67504: PPUSH
67505: CALL_OW 234
// end ;
67509: PPOPN 1
67511: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67512: LD_EXP 51
67516: PUSH
67517: LD_EXP 65
67521: AND
67522: IFFALSE 67620
67524: GO 67526
67526: DISABLE
67527: LD_INT 0
67529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67530: LD_ADDR_VAR 0 1
67534: PUSH
67535: LD_INT 22
67537: PUSH
67538: LD_OWVAR 2
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 21
67549: PUSH
67550: LD_INT 1
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PPUSH
67561: CALL_OW 69
67565: ST_TO_ADDR
// if not tmp then
67566: LD_VAR 0 1
67570: NOT
67571: IFFALSE 67575
// exit ;
67573: GO 67620
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67575: LD_VAR 0 1
67579: PUSH
67580: LD_INT 1
67582: PPUSH
67583: LD_VAR 0 1
67587: PPUSH
67588: CALL_OW 12
67592: ARRAY
67593: PPUSH
67594: LD_INT 1
67596: PPUSH
67597: LD_INT 4
67599: PPUSH
67600: CALL_OW 12
67604: PPUSH
67605: LD_INT 3000
67607: PPUSH
67608: LD_INT 9000
67610: PPUSH
67611: CALL_OW 12
67615: PPUSH
67616: CALL_OW 492
// end ;
67620: PPOPN 1
67622: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67623: LD_EXP 51
67627: PUSH
67628: LD_EXP 66
67632: AND
67633: IFFALSE 67653
67635: GO 67637
67637: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67638: LD_INT 1
67640: PPUSH
67641: LD_OWVAR 2
67645: PPUSH
67646: LD_INT 0
67648: PPUSH
67649: CALL_OW 324
67653: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67654: LD_EXP 51
67658: PUSH
67659: LD_EXP 67
67663: AND
67664: IFFALSE 67747
67666: GO 67668
67668: DISABLE
67669: LD_INT 0
67671: PPUSH
67672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67673: LD_ADDR_VAR 0 2
67677: PUSH
67678: LD_INT 22
67680: PUSH
67681: LD_OWVAR 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 21
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PPUSH
67704: CALL_OW 69
67708: ST_TO_ADDR
// if not tmp then
67709: LD_VAR 0 2
67713: NOT
67714: IFFALSE 67718
// exit ;
67716: GO 67747
// for i in tmp do
67718: LD_ADDR_VAR 0 1
67722: PUSH
67723: LD_VAR 0 2
67727: PUSH
67728: FOR_IN
67729: IFFALSE 67745
// SetBLevel ( i , 10 ) ;
67731: LD_VAR 0 1
67735: PPUSH
67736: LD_INT 10
67738: PPUSH
67739: CALL_OW 241
67743: GO 67728
67745: POP
67746: POP
// end ;
67747: PPOPN 2
67749: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67750: LD_EXP 51
67754: PUSH
67755: LD_EXP 68
67759: AND
67760: IFFALSE 67871
67762: GO 67764
67764: DISABLE
67765: LD_INT 0
67767: PPUSH
67768: PPUSH
67769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67770: LD_ADDR_VAR 0 3
67774: PUSH
67775: LD_INT 22
67777: PUSH
67778: LD_OWVAR 2
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 25
67789: PUSH
67790: LD_INT 1
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PPUSH
67801: CALL_OW 69
67805: ST_TO_ADDR
// if not tmp then
67806: LD_VAR 0 3
67810: NOT
67811: IFFALSE 67815
// exit ;
67813: GO 67871
// un := tmp [ rand ( 1 , tmp ) ] ;
67815: LD_ADDR_VAR 0 2
67819: PUSH
67820: LD_VAR 0 3
67824: PUSH
67825: LD_INT 1
67827: PPUSH
67828: LD_VAR 0 3
67832: PPUSH
67833: CALL_OW 12
67837: ARRAY
67838: ST_TO_ADDR
// if Crawls ( un ) then
67839: LD_VAR 0 2
67843: PPUSH
67844: CALL_OW 318
67848: IFFALSE 67859
// ComWalk ( un ) ;
67850: LD_VAR 0 2
67854: PPUSH
67855: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67859: LD_VAR 0 2
67863: PPUSH
67864: LD_INT 5
67866: PPUSH
67867: CALL_OW 336
// end ;
67871: PPOPN 3
67873: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
67874: LD_EXP 51
67878: PUSH
67879: LD_EXP 69
67883: AND
67884: PUSH
67885: LD_OWVAR 67
67889: PUSH
67890: LD_INT 4
67892: LESS
67893: AND
67894: IFFALSE 67913
67896: GO 67898
67898: DISABLE
// begin Difficulty := Difficulty + 1 ;
67899: LD_ADDR_OWVAR 67
67903: PUSH
67904: LD_OWVAR 67
67908: PUSH
67909: LD_INT 1
67911: PLUS
67912: ST_TO_ADDR
// end ;
67913: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67914: LD_EXP 51
67918: PUSH
67919: LD_EXP 70
67923: AND
67924: IFFALSE 68027
67926: GO 67928
67928: DISABLE
67929: LD_INT 0
67931: PPUSH
// begin for i := 1 to 5 do
67932: LD_ADDR_VAR 0 1
67936: PUSH
67937: DOUBLE
67938: LD_INT 1
67940: DEC
67941: ST_TO_ADDR
67942: LD_INT 5
67944: PUSH
67945: FOR_TO
67946: IFFALSE 68025
// begin uc_nation := nation_nature ;
67948: LD_ADDR_OWVAR 21
67952: PUSH
67953: LD_INT 0
67955: ST_TO_ADDR
// uc_side := 0 ;
67956: LD_ADDR_OWVAR 20
67960: PUSH
67961: LD_INT 0
67963: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67964: LD_ADDR_OWVAR 29
67968: PUSH
67969: LD_INT 12
67971: PUSH
67972: LD_INT 12
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: ST_TO_ADDR
// hc_agressivity := 20 ;
67979: LD_ADDR_OWVAR 35
67983: PUSH
67984: LD_INT 20
67986: ST_TO_ADDR
// hc_class := class_tiger ;
67987: LD_ADDR_OWVAR 28
67991: PUSH
67992: LD_INT 14
67994: ST_TO_ADDR
// hc_gallery :=  ;
67995: LD_ADDR_OWVAR 33
67999: PUSH
68000: LD_STRING 
68002: ST_TO_ADDR
// hc_name :=  ;
68003: LD_ADDR_OWVAR 26
68007: PUSH
68008: LD_STRING 
68010: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68011: CALL_OW 44
68015: PPUSH
68016: LD_INT 0
68018: PPUSH
68019: CALL_OW 51
// end ;
68023: GO 67945
68025: POP
68026: POP
// end ;
68027: PPOPN 1
68029: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68030: LD_EXP 51
68034: PUSH
68035: LD_EXP 71
68039: AND
68040: IFFALSE 68049
68042: GO 68044
68044: DISABLE
// StreamSibBomb ;
68045: CALL 68050 0 0
68049: END
// export function StreamSibBomb ; var i , x , y ; begin
68050: LD_INT 0
68052: PPUSH
68053: PPUSH
68054: PPUSH
68055: PPUSH
// result := false ;
68056: LD_ADDR_VAR 0 1
68060: PUSH
68061: LD_INT 0
68063: ST_TO_ADDR
// for i := 1 to 16 do
68064: LD_ADDR_VAR 0 2
68068: PUSH
68069: DOUBLE
68070: LD_INT 1
68072: DEC
68073: ST_TO_ADDR
68074: LD_INT 16
68076: PUSH
68077: FOR_TO
68078: IFFALSE 68277
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68080: LD_ADDR_VAR 0 3
68084: PUSH
68085: LD_INT 10
68087: PUSH
68088: LD_INT 20
68090: PUSH
68091: LD_INT 30
68093: PUSH
68094: LD_INT 40
68096: PUSH
68097: LD_INT 50
68099: PUSH
68100: LD_INT 60
68102: PUSH
68103: LD_INT 70
68105: PUSH
68106: LD_INT 80
68108: PUSH
68109: LD_INT 90
68111: PUSH
68112: LD_INT 100
68114: PUSH
68115: LD_INT 110
68117: PUSH
68118: LD_INT 120
68120: PUSH
68121: LD_INT 130
68123: PUSH
68124: LD_INT 140
68126: PUSH
68127: LD_INT 150
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 1
68149: PPUSH
68150: LD_INT 15
68152: PPUSH
68153: CALL_OW 12
68157: ARRAY
68158: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68159: LD_ADDR_VAR 0 4
68163: PUSH
68164: LD_INT 10
68166: PUSH
68167: LD_INT 20
68169: PUSH
68170: LD_INT 30
68172: PUSH
68173: LD_INT 40
68175: PUSH
68176: LD_INT 50
68178: PUSH
68179: LD_INT 60
68181: PUSH
68182: LD_INT 70
68184: PUSH
68185: LD_INT 80
68187: PUSH
68188: LD_INT 90
68190: PUSH
68191: LD_INT 100
68193: PUSH
68194: LD_INT 110
68196: PUSH
68197: LD_INT 120
68199: PUSH
68200: LD_INT 130
68202: PUSH
68203: LD_INT 140
68205: PUSH
68206: LD_INT 150
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 1
68228: PPUSH
68229: LD_INT 15
68231: PPUSH
68232: CALL_OW 12
68236: ARRAY
68237: ST_TO_ADDR
// if ValidHex ( x , y ) then
68238: LD_VAR 0 3
68242: PPUSH
68243: LD_VAR 0 4
68247: PPUSH
68248: CALL_OW 488
68252: IFFALSE 68275
// begin result := [ x , y ] ;
68254: LD_ADDR_VAR 0 1
68258: PUSH
68259: LD_VAR 0 3
68263: PUSH
68264: LD_VAR 0 4
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// break ;
68273: GO 68277
// end ; end ;
68275: GO 68077
68277: POP
68278: POP
// if result then
68279: LD_VAR 0 1
68283: IFFALSE 68343
// begin ToLua ( playSibBomb() ) ;
68285: LD_STRING playSibBomb()
68287: PPUSH
68288: CALL_OW 559
// wait ( 0 0$14 ) ;
68292: LD_INT 490
68294: PPUSH
68295: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68299: LD_VAR 0 1
68303: PUSH
68304: LD_INT 1
68306: ARRAY
68307: PPUSH
68308: LD_VAR 0 1
68312: PUSH
68313: LD_INT 2
68315: ARRAY
68316: PPUSH
68317: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68321: LD_VAR 0 1
68325: PUSH
68326: LD_INT 1
68328: ARRAY
68329: PPUSH
68330: LD_VAR 0 1
68334: PUSH
68335: LD_INT 2
68337: ARRAY
68338: PPUSH
68339: CALL_OW 429
// end ; end ;
68343: LD_VAR 0 1
68347: RET
// every 0 0$1 trigger StreamModeActive and sReset do
68348: LD_EXP 51
68352: PUSH
68353: LD_EXP 73
68357: AND
68358: IFFALSE 68370
68360: GO 68362
68362: DISABLE
// YouLost (  ) ;
68363: LD_STRING 
68365: PPUSH
68366: CALL_OW 104
68370: END
// every 0 0$1 trigger StreamModeActive and sFog do
68371: LD_EXP 51
68375: PUSH
68376: LD_EXP 72
68380: AND
68381: IFFALSE 68395
68383: GO 68385
68385: DISABLE
// FogOff ( your_side ) ;
68386: LD_OWVAR 2
68390: PPUSH
68391: CALL_OW 344
68395: END
// every 0 0$1 trigger StreamModeActive and sSun do
68396: LD_EXP 51
68400: PUSH
68401: LD_EXP 74
68405: AND
68406: IFFALSE 68434
68408: GO 68410
68410: DISABLE
// begin solar_recharge_percent := 0 ;
68411: LD_ADDR_OWVAR 79
68415: PUSH
68416: LD_INT 0
68418: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68419: LD_INT 10500
68421: PPUSH
68422: CALL_OW 67
// solar_recharge_percent := 100 ;
68426: LD_ADDR_OWVAR 79
68430: PUSH
68431: LD_INT 100
68433: ST_TO_ADDR
// end ;
68434: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68435: LD_EXP 51
68439: PUSH
68440: LD_EXP 75
68444: AND
68445: IFFALSE 68684
68447: GO 68449
68449: DISABLE
68450: LD_INT 0
68452: PPUSH
68453: PPUSH
68454: PPUSH
// begin tmp := [ ] ;
68455: LD_ADDR_VAR 0 3
68459: PUSH
68460: EMPTY
68461: ST_TO_ADDR
// for i := 1 to 6 do
68462: LD_ADDR_VAR 0 1
68466: PUSH
68467: DOUBLE
68468: LD_INT 1
68470: DEC
68471: ST_TO_ADDR
68472: LD_INT 6
68474: PUSH
68475: FOR_TO
68476: IFFALSE 68581
// begin uc_nation := nation_nature ;
68478: LD_ADDR_OWVAR 21
68482: PUSH
68483: LD_INT 0
68485: ST_TO_ADDR
// uc_side := 0 ;
68486: LD_ADDR_OWVAR 20
68490: PUSH
68491: LD_INT 0
68493: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68494: LD_ADDR_OWVAR 29
68498: PUSH
68499: LD_INT 12
68501: PUSH
68502: LD_INT 12
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: ST_TO_ADDR
// hc_agressivity := 20 ;
68509: LD_ADDR_OWVAR 35
68513: PUSH
68514: LD_INT 20
68516: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68517: LD_ADDR_OWVAR 28
68521: PUSH
68522: LD_INT 17
68524: ST_TO_ADDR
// hc_gallery :=  ;
68525: LD_ADDR_OWVAR 33
68529: PUSH
68530: LD_STRING 
68532: ST_TO_ADDR
// hc_name :=  ;
68533: LD_ADDR_OWVAR 26
68537: PUSH
68538: LD_STRING 
68540: ST_TO_ADDR
// un := CreateHuman ;
68541: LD_ADDR_VAR 0 2
68545: PUSH
68546: CALL_OW 44
68550: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68551: LD_VAR 0 2
68555: PPUSH
68556: LD_INT 1
68558: PPUSH
68559: CALL_OW 51
// tmp := tmp ^ un ;
68563: LD_ADDR_VAR 0 3
68567: PUSH
68568: LD_VAR 0 3
68572: PUSH
68573: LD_VAR 0 2
68577: ADD
68578: ST_TO_ADDR
// end ;
68579: GO 68475
68581: POP
68582: POP
// repeat wait ( 0 0$1 ) ;
68583: LD_INT 35
68585: PPUSH
68586: CALL_OW 67
// for un in tmp do
68590: LD_ADDR_VAR 0 2
68594: PUSH
68595: LD_VAR 0 3
68599: PUSH
68600: FOR_IN
68601: IFFALSE 68675
// begin if IsDead ( un ) then
68603: LD_VAR 0 2
68607: PPUSH
68608: CALL_OW 301
68612: IFFALSE 68632
// begin tmp := tmp diff un ;
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_VAR 0 3
68623: PUSH
68624: LD_VAR 0 2
68628: DIFF
68629: ST_TO_ADDR
// continue ;
68630: GO 68600
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68632: LD_VAR 0 2
68636: PPUSH
68637: LD_INT 3
68639: PUSH
68640: LD_INT 22
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PPUSH
68654: CALL_OW 69
68658: PPUSH
68659: LD_VAR 0 2
68663: PPUSH
68664: CALL_OW 74
68668: PPUSH
68669: CALL_OW 115
// end ;
68673: GO 68600
68675: POP
68676: POP
// until not tmp ;
68677: LD_VAR 0 3
68681: NOT
68682: IFFALSE 68583
// end ;
68684: PPOPN 3
68686: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68687: LD_EXP 51
68691: PUSH
68692: LD_EXP 76
68696: AND
68697: IFFALSE 68751
68699: GO 68701
68701: DISABLE
// begin ToLua ( displayTroll(); ) ;
68702: LD_STRING displayTroll();
68704: PPUSH
68705: CALL_OW 559
// wait ( 3 3$00 ) ;
68709: LD_INT 6300
68711: PPUSH
68712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68716: LD_STRING hideTroll();
68718: PPUSH
68719: CALL_OW 559
// wait ( 1 1$00 ) ;
68723: LD_INT 2100
68725: PPUSH
68726: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68730: LD_STRING displayTroll();
68732: PPUSH
68733: CALL_OW 559
// wait ( 1 1$00 ) ;
68737: LD_INT 2100
68739: PPUSH
68740: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68744: LD_STRING hideTroll();
68746: PPUSH
68747: CALL_OW 559
// end ;
68751: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68752: LD_EXP 51
68756: PUSH
68757: LD_EXP 77
68761: AND
68762: IFFALSE 68825
68764: GO 68766
68766: DISABLE
68767: LD_INT 0
68769: PPUSH
// begin p := 0 ;
68770: LD_ADDR_VAR 0 1
68774: PUSH
68775: LD_INT 0
68777: ST_TO_ADDR
// repeat game_speed := 1 ;
68778: LD_ADDR_OWVAR 65
68782: PUSH
68783: LD_INT 1
68785: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68786: LD_INT 35
68788: PPUSH
68789: CALL_OW 67
// p := p + 1 ;
68793: LD_ADDR_VAR 0 1
68797: PUSH
68798: LD_VAR 0 1
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: ST_TO_ADDR
// until p >= 60 ;
68807: LD_VAR 0 1
68811: PUSH
68812: LD_INT 60
68814: GREATEREQUAL
68815: IFFALSE 68778
// game_speed := 4 ;
68817: LD_ADDR_OWVAR 65
68821: PUSH
68822: LD_INT 4
68824: ST_TO_ADDR
// end ;
68825: PPOPN 1
68827: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68828: LD_EXP 51
68832: PUSH
68833: LD_EXP 78
68837: AND
68838: IFFALSE 68984
68840: GO 68842
68842: DISABLE
68843: LD_INT 0
68845: PPUSH
68846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68847: LD_ADDR_VAR 0 1
68851: PUSH
68852: LD_INT 22
68854: PUSH
68855: LD_OWVAR 2
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 30
68869: PUSH
68870: LD_INT 0
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 30
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: LIST
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PPUSH
68896: CALL_OW 69
68900: ST_TO_ADDR
// if not depot then
68901: LD_VAR 0 1
68905: NOT
68906: IFFALSE 68910
// exit ;
68908: GO 68984
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68910: LD_ADDR_VAR 0 2
68914: PUSH
68915: LD_VAR 0 1
68919: PUSH
68920: LD_INT 1
68922: PPUSH
68923: LD_VAR 0 1
68927: PPUSH
68928: CALL_OW 12
68932: ARRAY
68933: PPUSH
68934: CALL_OW 274
68938: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68939: LD_VAR 0 2
68943: PPUSH
68944: LD_INT 1
68946: PPUSH
68947: LD_INT 0
68949: PPUSH
68950: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68954: LD_VAR 0 2
68958: PPUSH
68959: LD_INT 2
68961: PPUSH
68962: LD_INT 0
68964: PPUSH
68965: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68969: LD_VAR 0 2
68973: PPUSH
68974: LD_INT 3
68976: PPUSH
68977: LD_INT 0
68979: PPUSH
68980: CALL_OW 277
// end ;
68984: PPOPN 2
68986: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68987: LD_EXP 51
68991: PUSH
68992: LD_EXP 79
68996: AND
68997: IFFALSE 69094
68999: GO 69001
69001: DISABLE
69002: LD_INT 0
69004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69005: LD_ADDR_VAR 0 1
69009: PUSH
69010: LD_INT 22
69012: PUSH
69013: LD_OWVAR 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 21
69024: PUSH
69025: LD_INT 1
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 3
69034: PUSH
69035: LD_INT 23
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: PPUSH
69054: CALL_OW 69
69058: ST_TO_ADDR
// if not tmp then
69059: LD_VAR 0 1
69063: NOT
69064: IFFALSE 69068
// exit ;
69066: GO 69094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69068: LD_VAR 0 1
69072: PUSH
69073: LD_INT 1
69075: PPUSH
69076: LD_VAR 0 1
69080: PPUSH
69081: CALL_OW 12
69085: ARRAY
69086: PPUSH
69087: LD_INT 200
69089: PPUSH
69090: CALL_OW 234
// end ;
69094: PPOPN 1
69096: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69097: LD_EXP 51
69101: PUSH
69102: LD_EXP 80
69106: AND
69107: IFFALSE 69186
69109: GO 69111
69111: DISABLE
69112: LD_INT 0
69114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69115: LD_ADDR_VAR 0 1
69119: PUSH
69120: LD_INT 22
69122: PUSH
69123: LD_OWVAR 2
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 21
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PPUSH
69146: CALL_OW 69
69150: ST_TO_ADDR
// if not tmp then
69151: LD_VAR 0 1
69155: NOT
69156: IFFALSE 69160
// exit ;
69158: GO 69186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69160: LD_VAR 0 1
69164: PUSH
69165: LD_INT 1
69167: PPUSH
69168: LD_VAR 0 1
69172: PPUSH
69173: CALL_OW 12
69177: ARRAY
69178: PPUSH
69179: LD_INT 60
69181: PPUSH
69182: CALL_OW 234
// end ;
69186: PPOPN 1
69188: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69189: LD_EXP 51
69193: PUSH
69194: LD_EXP 81
69198: AND
69199: IFFALSE 69298
69201: GO 69203
69203: DISABLE
69204: LD_INT 0
69206: PPUSH
69207: PPUSH
// begin enable ;
69208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69209: LD_ADDR_VAR 0 1
69213: PUSH
69214: LD_INT 22
69216: PUSH
69217: LD_OWVAR 2
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 61
69228: PUSH
69229: EMPTY
69230: LIST
69231: PUSH
69232: LD_INT 33
69234: PUSH
69235: LD_INT 2
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: LIST
69246: PPUSH
69247: CALL_OW 69
69251: ST_TO_ADDR
// if not tmp then
69252: LD_VAR 0 1
69256: NOT
69257: IFFALSE 69261
// exit ;
69259: GO 69298
// for i in tmp do
69261: LD_ADDR_VAR 0 2
69265: PUSH
69266: LD_VAR 0 1
69270: PUSH
69271: FOR_IN
69272: IFFALSE 69296
// if IsControledBy ( i ) then
69274: LD_VAR 0 2
69278: PPUSH
69279: CALL_OW 312
69283: IFFALSE 69294
// ComUnlink ( i ) ;
69285: LD_VAR 0 2
69289: PPUSH
69290: CALL_OW 136
69294: GO 69271
69296: POP
69297: POP
// end ;
69298: PPOPN 2
69300: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69301: LD_EXP 51
69305: PUSH
69306: LD_EXP 82
69310: AND
69311: IFFALSE 69451
69313: GO 69315
69315: DISABLE
69316: LD_INT 0
69318: PPUSH
69319: PPUSH
// begin ToLua ( displayPowell(); ) ;
69320: LD_STRING displayPowell();
69322: PPUSH
69323: CALL_OW 559
// uc_side := 0 ;
69327: LD_ADDR_OWVAR 20
69331: PUSH
69332: LD_INT 0
69334: ST_TO_ADDR
// uc_nation := 2 ;
69335: LD_ADDR_OWVAR 21
69339: PUSH
69340: LD_INT 2
69342: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
69343: LD_ADDR_OWVAR 37
69347: PUSH
69348: LD_INT 14
69350: ST_TO_ADDR
// vc_engine := engine_siberite ;
69351: LD_ADDR_OWVAR 39
69355: PUSH
69356: LD_INT 3
69358: ST_TO_ADDR
// vc_control := control_apeman ;
69359: LD_ADDR_OWVAR 38
69363: PUSH
69364: LD_INT 5
69366: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
69367: LD_ADDR_OWVAR 40
69371: PUSH
69372: LD_INT 29
69374: ST_TO_ADDR
// un := CreateVehicle ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: CALL_OW 45
69384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69385: LD_VAR 0 2
69389: PPUSH
69390: LD_INT 1
69392: PPUSH
69393: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69397: LD_INT 35
69399: PPUSH
69400: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69404: LD_VAR 0 2
69408: PPUSH
69409: LD_INT 22
69411: PUSH
69412: LD_OWVAR 2
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PPUSH
69421: CALL_OW 69
69425: PPUSH
69426: LD_VAR 0 2
69430: PPUSH
69431: CALL_OW 74
69435: PPUSH
69436: CALL_OW 115
// until IsDead ( un ) ;
69440: LD_VAR 0 2
69444: PPUSH
69445: CALL_OW 301
69449: IFFALSE 69397
// end ;
69451: PPOPN 2
69453: END
// every 0 0$1 trigger StreamModeActive and sStu do
69454: LD_EXP 51
69458: PUSH
69459: LD_EXP 90
69463: AND
69464: IFFALSE 69480
69466: GO 69468
69468: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69469: LD_STRING displayStucuk();
69471: PPUSH
69472: CALL_OW 559
// ResetFog ;
69476: CALL_OW 335
// end ;
69480: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69481: LD_EXP 51
69485: PUSH
69486: LD_EXP 83
69490: AND
69491: IFFALSE 69632
69493: GO 69495
69495: DISABLE
69496: LD_INT 0
69498: PPUSH
69499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_INT 22
69507: PUSH
69508: LD_OWVAR 2
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 21
69519: PUSH
69520: LD_INT 1
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PPUSH
69531: CALL_OW 69
69535: ST_TO_ADDR
// if not tmp then
69536: LD_VAR 0 2
69540: NOT
69541: IFFALSE 69545
// exit ;
69543: GO 69632
// un := tmp [ rand ( 1 , tmp ) ] ;
69545: LD_ADDR_VAR 0 1
69549: PUSH
69550: LD_VAR 0 2
69554: PUSH
69555: LD_INT 1
69557: PPUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: CALL_OW 12
69567: ARRAY
69568: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69569: LD_VAR 0 1
69573: PPUSH
69574: LD_INT 0
69576: PPUSH
69577: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69581: LD_VAR 0 1
69585: PPUSH
69586: LD_OWVAR 3
69590: PUSH
69591: LD_VAR 0 1
69595: DIFF
69596: PPUSH
69597: LD_VAR 0 1
69601: PPUSH
69602: CALL_OW 74
69606: PPUSH
69607: CALL_OW 115
// wait ( 0 0$20 ) ;
69611: LD_INT 700
69613: PPUSH
69614: CALL_OW 67
// SetSide ( un , your_side ) ;
69618: LD_VAR 0 1
69622: PPUSH
69623: LD_OWVAR 2
69627: PPUSH
69628: CALL_OW 235
// end ;
69632: PPOPN 2
69634: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69635: LD_EXP 51
69639: PUSH
69640: LD_EXP 84
69644: AND
69645: IFFALSE 69751
69647: GO 69649
69649: DISABLE
69650: LD_INT 0
69652: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69653: LD_ADDR_VAR 0 1
69657: PUSH
69658: LD_INT 22
69660: PUSH
69661: LD_OWVAR 2
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: LD_INT 30
69675: PUSH
69676: LD_INT 0
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 30
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: LIST
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PPUSH
69702: CALL_OW 69
69706: ST_TO_ADDR
// if not depot then
69707: LD_VAR 0 1
69711: NOT
69712: IFFALSE 69716
// exit ;
69714: GO 69751
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69716: LD_VAR 0 1
69720: PUSH
69721: LD_INT 1
69723: ARRAY
69724: PPUSH
69725: CALL_OW 250
69729: PPUSH
69730: LD_VAR 0 1
69734: PUSH
69735: LD_INT 1
69737: ARRAY
69738: PPUSH
69739: CALL_OW 251
69743: PPUSH
69744: LD_INT 70
69746: PPUSH
69747: CALL_OW 495
// end ;
69751: PPOPN 1
69753: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69754: LD_EXP 51
69758: PUSH
69759: LD_EXP 85
69763: AND
69764: IFFALSE 69975
69766: GO 69768
69768: DISABLE
69769: LD_INT 0
69771: PPUSH
69772: PPUSH
69773: PPUSH
69774: PPUSH
69775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69776: LD_ADDR_VAR 0 5
69780: PUSH
69781: LD_INT 22
69783: PUSH
69784: LD_OWVAR 2
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 21
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PPUSH
69807: CALL_OW 69
69811: ST_TO_ADDR
// if not tmp then
69812: LD_VAR 0 5
69816: NOT
69817: IFFALSE 69821
// exit ;
69819: GO 69975
// for i in tmp do
69821: LD_ADDR_VAR 0 1
69825: PUSH
69826: LD_VAR 0 5
69830: PUSH
69831: FOR_IN
69832: IFFALSE 69973
// begin d := rand ( 0 , 5 ) ;
69834: LD_ADDR_VAR 0 4
69838: PUSH
69839: LD_INT 0
69841: PPUSH
69842: LD_INT 5
69844: PPUSH
69845: CALL_OW 12
69849: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69850: LD_ADDR_VAR 0 2
69854: PUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: CALL_OW 250
69864: PPUSH
69865: LD_VAR 0 4
69869: PPUSH
69870: LD_INT 3
69872: PPUSH
69873: LD_INT 12
69875: PPUSH
69876: CALL_OW 12
69880: PPUSH
69881: CALL_OW 272
69885: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69886: LD_ADDR_VAR 0 3
69890: PUSH
69891: LD_VAR 0 1
69895: PPUSH
69896: CALL_OW 251
69900: PPUSH
69901: LD_VAR 0 4
69905: PPUSH
69906: LD_INT 3
69908: PPUSH
69909: LD_INT 12
69911: PPUSH
69912: CALL_OW 12
69916: PPUSH
69917: CALL_OW 273
69921: ST_TO_ADDR
// if ValidHex ( x , y ) then
69922: LD_VAR 0 2
69926: PPUSH
69927: LD_VAR 0 3
69931: PPUSH
69932: CALL_OW 488
69936: IFFALSE 69971
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69938: LD_VAR 0 1
69942: PPUSH
69943: LD_VAR 0 2
69947: PPUSH
69948: LD_VAR 0 3
69952: PPUSH
69953: LD_INT 3
69955: PPUSH
69956: LD_INT 6
69958: PPUSH
69959: CALL_OW 12
69963: PPUSH
69964: LD_INT 1
69966: PPUSH
69967: CALL_OW 483
// end ;
69971: GO 69831
69973: POP
69974: POP
// end ;
69975: PPOPN 5
69977: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69978: LD_EXP 51
69982: PUSH
69983: LD_EXP 86
69987: AND
69988: IFFALSE 70082
69990: GO 69992
69992: DISABLE
69993: LD_INT 0
69995: PPUSH
69996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69997: LD_ADDR_VAR 0 2
70001: PUSH
70002: LD_INT 22
70004: PUSH
70005: LD_OWVAR 2
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 32
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 21
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: LIST
70038: PPUSH
70039: CALL_OW 69
70043: ST_TO_ADDR
// if not tmp then
70044: LD_VAR 0 2
70048: NOT
70049: IFFALSE 70053
// exit ;
70051: GO 70082
// for i in tmp do
70053: LD_ADDR_VAR 0 1
70057: PUSH
70058: LD_VAR 0 2
70062: PUSH
70063: FOR_IN
70064: IFFALSE 70080
// SetFuel ( i , 0 ) ;
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_INT 0
70073: PPUSH
70074: CALL_OW 240
70078: GO 70063
70080: POP
70081: POP
// end ;
70082: PPOPN 2
70084: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70085: LD_EXP 51
70089: PUSH
70090: LD_EXP 87
70094: AND
70095: IFFALSE 70161
70097: GO 70099
70099: DISABLE
70100: LD_INT 0
70102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70103: LD_ADDR_VAR 0 1
70107: PUSH
70108: LD_INT 22
70110: PUSH
70111: LD_OWVAR 2
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 30
70122: PUSH
70123: LD_INT 29
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PPUSH
70134: CALL_OW 69
70138: ST_TO_ADDR
// if not tmp then
70139: LD_VAR 0 1
70143: NOT
70144: IFFALSE 70148
// exit ;
70146: GO 70161
// DestroyUnit ( tmp [ 1 ] ) ;
70148: LD_VAR 0 1
70152: PUSH
70153: LD_INT 1
70155: ARRAY
70156: PPUSH
70157: CALL_OW 65
// end ;
70161: PPOPN 1
70163: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70164: LD_EXP 51
70168: PUSH
70169: LD_EXP 89
70173: AND
70174: IFFALSE 70303
70176: GO 70178
70178: DISABLE
70179: LD_INT 0
70181: PPUSH
// begin uc_side := 0 ;
70182: LD_ADDR_OWVAR 20
70186: PUSH
70187: LD_INT 0
70189: ST_TO_ADDR
// uc_nation := nation_arabian ;
70190: LD_ADDR_OWVAR 21
70194: PUSH
70195: LD_INT 2
70197: ST_TO_ADDR
// hc_gallery :=  ;
70198: LD_ADDR_OWVAR 33
70202: PUSH
70203: LD_STRING 
70205: ST_TO_ADDR
// hc_name :=  ;
70206: LD_ADDR_OWVAR 26
70210: PUSH
70211: LD_STRING 
70213: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70214: LD_INT 1
70216: PPUSH
70217: LD_INT 11
70219: PPUSH
70220: LD_INT 10
70222: PPUSH
70223: CALL_OW 380
// un := CreateHuman ;
70227: LD_ADDR_VAR 0 1
70231: PUSH
70232: CALL_OW 44
70236: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70237: LD_VAR 0 1
70241: PPUSH
70242: LD_INT 1
70244: PPUSH
70245: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70249: LD_INT 35
70251: PPUSH
70252: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70256: LD_VAR 0 1
70260: PPUSH
70261: LD_INT 22
70263: PUSH
70264: LD_OWVAR 2
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PPUSH
70273: CALL_OW 69
70277: PPUSH
70278: LD_VAR 0 1
70282: PPUSH
70283: CALL_OW 74
70287: PPUSH
70288: CALL_OW 115
// until IsDead ( un ) ;
70292: LD_VAR 0 1
70296: PPUSH
70297: CALL_OW 301
70301: IFFALSE 70249
// end ;
70303: PPOPN 1
70305: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70306: LD_EXP 51
70310: PUSH
70311: LD_EXP 91
70315: AND
70316: IFFALSE 70328
70318: GO 70320
70320: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70321: LD_STRING earthquake(getX(game), 0, 32)
70323: PPUSH
70324: CALL_OW 559
70328: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
70329: LD_EXP 51
70333: PUSH
70334: LD_EXP 92
70338: AND
70339: IFFALSE 70430
70341: GO 70343
70343: DISABLE
70344: LD_INT 0
70346: PPUSH
// begin enable ;
70347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
70348: LD_ADDR_VAR 0 1
70352: PUSH
70353: LD_INT 22
70355: PUSH
70356: LD_OWVAR 2
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 21
70367: PUSH
70368: LD_INT 2
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 33
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: PPUSH
70390: CALL_OW 69
70394: ST_TO_ADDR
// if not tmp then
70395: LD_VAR 0 1
70399: NOT
70400: IFFALSE 70404
// exit ;
70402: GO 70430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70404: LD_VAR 0 1
70408: PUSH
70409: LD_INT 1
70411: PPUSH
70412: LD_VAR 0 1
70416: PPUSH
70417: CALL_OW 12
70421: ARRAY
70422: PPUSH
70423: LD_INT 1
70425: PPUSH
70426: CALL_OW 234
// end ;
70430: PPOPN 1
70432: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70433: LD_EXP 51
70437: PUSH
70438: LD_EXP 93
70442: AND
70443: IFFALSE 70584
70445: GO 70447
70447: DISABLE
70448: LD_INT 0
70450: PPUSH
70451: PPUSH
70452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70453: LD_ADDR_VAR 0 3
70457: PUSH
70458: LD_INT 22
70460: PUSH
70461: LD_OWVAR 2
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 25
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PPUSH
70484: CALL_OW 69
70488: ST_TO_ADDR
// if not tmp then
70489: LD_VAR 0 3
70493: NOT
70494: IFFALSE 70498
// exit ;
70496: GO 70584
// un := tmp [ rand ( 1 , tmp ) ] ;
70498: LD_ADDR_VAR 0 2
70502: PUSH
70503: LD_VAR 0 3
70507: PUSH
70508: LD_INT 1
70510: PPUSH
70511: LD_VAR 0 3
70515: PPUSH
70516: CALL_OW 12
70520: ARRAY
70521: ST_TO_ADDR
// if Crawls ( un ) then
70522: LD_VAR 0 2
70526: PPUSH
70527: CALL_OW 318
70531: IFFALSE 70542
// ComWalk ( un ) ;
70533: LD_VAR 0 2
70537: PPUSH
70538: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70542: LD_VAR 0 2
70546: PPUSH
70547: LD_INT 9
70549: PPUSH
70550: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70554: LD_INT 28
70556: PPUSH
70557: LD_OWVAR 2
70561: PPUSH
70562: LD_INT 2
70564: PPUSH
70565: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70569: LD_INT 29
70571: PPUSH
70572: LD_OWVAR 2
70576: PPUSH
70577: LD_INT 2
70579: PPUSH
70580: CALL_OW 322
// end ;
70584: PPOPN 3
70586: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70587: LD_EXP 51
70591: PUSH
70592: LD_EXP 94
70596: AND
70597: IFFALSE 70708
70599: GO 70601
70601: DISABLE
70602: LD_INT 0
70604: PPUSH
70605: PPUSH
70606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70607: LD_ADDR_VAR 0 3
70611: PUSH
70612: LD_INT 22
70614: PUSH
70615: LD_OWVAR 2
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 25
70626: PUSH
70627: LD_INT 1
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PPUSH
70638: CALL_OW 69
70642: ST_TO_ADDR
// if not tmp then
70643: LD_VAR 0 3
70647: NOT
70648: IFFALSE 70652
// exit ;
70650: GO 70708
// un := tmp [ rand ( 1 , tmp ) ] ;
70652: LD_ADDR_VAR 0 2
70656: PUSH
70657: LD_VAR 0 3
70661: PUSH
70662: LD_INT 1
70664: PPUSH
70665: LD_VAR 0 3
70669: PPUSH
70670: CALL_OW 12
70674: ARRAY
70675: ST_TO_ADDR
// if Crawls ( un ) then
70676: LD_VAR 0 2
70680: PPUSH
70681: CALL_OW 318
70685: IFFALSE 70696
// ComWalk ( un ) ;
70687: LD_VAR 0 2
70691: PPUSH
70692: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70696: LD_VAR 0 2
70700: PPUSH
70701: LD_INT 8
70703: PPUSH
70704: CALL_OW 336
// end ;
70708: PPOPN 3
70710: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70711: LD_EXP 51
70715: PUSH
70716: LD_EXP 95
70720: AND
70721: IFFALSE 70865
70723: GO 70725
70725: DISABLE
70726: LD_INT 0
70728: PPUSH
70729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70730: LD_ADDR_VAR 0 2
70734: PUSH
70735: LD_INT 22
70737: PUSH
70738: LD_OWVAR 2
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 21
70749: PUSH
70750: LD_INT 2
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 2
70759: PUSH
70760: LD_INT 34
70762: PUSH
70763: LD_INT 12
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 34
70772: PUSH
70773: LD_INT 51
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 34
70782: PUSH
70783: LD_INT 32
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: PPUSH
70801: CALL_OW 69
70805: ST_TO_ADDR
// if not tmp then
70806: LD_VAR 0 2
70810: NOT
70811: IFFALSE 70815
// exit ;
70813: GO 70865
// for i in tmp do
70815: LD_ADDR_VAR 0 1
70819: PUSH
70820: LD_VAR 0 2
70824: PUSH
70825: FOR_IN
70826: IFFALSE 70863
// if GetCargo ( i , mat_artifact ) = 0 then
70828: LD_VAR 0 1
70832: PPUSH
70833: LD_INT 4
70835: PPUSH
70836: CALL_OW 289
70840: PUSH
70841: LD_INT 0
70843: EQUAL
70844: IFFALSE 70861
// SetCargo ( i , mat_siberit , 100 ) ;
70846: LD_VAR 0 1
70850: PPUSH
70851: LD_INT 3
70853: PPUSH
70854: LD_INT 100
70856: PPUSH
70857: CALL_OW 290
70861: GO 70825
70863: POP
70864: POP
// end ;
70865: PPOPN 2
70867: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70868: LD_EXP 51
70872: PUSH
70873: LD_EXP 96
70877: AND
70878: IFFALSE 71061
70880: GO 70882
70882: DISABLE
70883: LD_INT 0
70885: PPUSH
70886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70887: LD_ADDR_VAR 0 2
70891: PUSH
70892: LD_INT 22
70894: PUSH
70895: LD_OWVAR 2
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PPUSH
70904: CALL_OW 69
70908: ST_TO_ADDR
// if not tmp then
70909: LD_VAR 0 2
70913: NOT
70914: IFFALSE 70918
// exit ;
70916: GO 71061
// for i := 1 to 2 do
70918: LD_ADDR_VAR 0 1
70922: PUSH
70923: DOUBLE
70924: LD_INT 1
70926: DEC
70927: ST_TO_ADDR
70928: LD_INT 2
70930: PUSH
70931: FOR_TO
70932: IFFALSE 71059
// begin uc_side := your_side ;
70934: LD_ADDR_OWVAR 20
70938: PUSH
70939: LD_OWVAR 2
70943: ST_TO_ADDR
// uc_nation := nation_american ;
70944: LD_ADDR_OWVAR 21
70948: PUSH
70949: LD_INT 1
70951: ST_TO_ADDR
// vc_chassis := us_morphling ;
70952: LD_ADDR_OWVAR 37
70956: PUSH
70957: LD_INT 5
70959: ST_TO_ADDR
// vc_engine := engine_siberite ;
70960: LD_ADDR_OWVAR 39
70964: PUSH
70965: LD_INT 3
70967: ST_TO_ADDR
// vc_control := control_computer ;
70968: LD_ADDR_OWVAR 38
70972: PUSH
70973: LD_INT 3
70975: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70976: LD_ADDR_OWVAR 40
70980: PUSH
70981: LD_INT 10
70983: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70984: LD_VAR 0 2
70988: PUSH
70989: LD_INT 1
70991: ARRAY
70992: PPUSH
70993: CALL_OW 310
70997: NOT
70998: IFFALSE 71045
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71000: CALL_OW 45
71004: PPUSH
71005: LD_VAR 0 2
71009: PUSH
71010: LD_INT 1
71012: ARRAY
71013: PPUSH
71014: CALL_OW 250
71018: PPUSH
71019: LD_VAR 0 2
71023: PUSH
71024: LD_INT 1
71026: ARRAY
71027: PPUSH
71028: CALL_OW 251
71032: PPUSH
71033: LD_INT 12
71035: PPUSH
71036: LD_INT 1
71038: PPUSH
71039: CALL_OW 50
71043: GO 71057
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71045: CALL_OW 45
71049: PPUSH
71050: LD_INT 1
71052: PPUSH
71053: CALL_OW 51
// end ;
71057: GO 70931
71059: POP
71060: POP
// end ;
71061: PPOPN 2
71063: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71064: LD_EXP 51
71068: PUSH
71069: LD_EXP 97
71073: AND
71074: IFFALSE 71296
71076: GO 71078
71078: DISABLE
71079: LD_INT 0
71081: PPUSH
71082: PPUSH
71083: PPUSH
71084: PPUSH
71085: PPUSH
71086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71087: LD_ADDR_VAR 0 6
71091: PUSH
71092: LD_INT 22
71094: PUSH
71095: LD_OWVAR 2
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 21
71106: PUSH
71107: LD_INT 1
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: PUSH
71117: LD_INT 23
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: PPUSH
71136: CALL_OW 69
71140: ST_TO_ADDR
// if not tmp then
71141: LD_VAR 0 6
71145: NOT
71146: IFFALSE 71150
// exit ;
71148: GO 71296
// s1 := rand ( 1 , 4 ) ;
71150: LD_ADDR_VAR 0 2
71154: PUSH
71155: LD_INT 1
71157: PPUSH
71158: LD_INT 4
71160: PPUSH
71161: CALL_OW 12
71165: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71166: LD_ADDR_VAR 0 4
71170: PUSH
71171: LD_VAR 0 6
71175: PUSH
71176: LD_INT 1
71178: ARRAY
71179: PPUSH
71180: LD_VAR 0 2
71184: PPUSH
71185: CALL_OW 259
71189: ST_TO_ADDR
// if s1 = 1 then
71190: LD_VAR 0 2
71194: PUSH
71195: LD_INT 1
71197: EQUAL
71198: IFFALSE 71218
// s2 := rand ( 2 , 4 ) else
71200: LD_ADDR_VAR 0 3
71204: PUSH
71205: LD_INT 2
71207: PPUSH
71208: LD_INT 4
71210: PPUSH
71211: CALL_OW 12
71215: ST_TO_ADDR
71216: GO 71226
// s2 := 1 ;
71218: LD_ADDR_VAR 0 3
71222: PUSH
71223: LD_INT 1
71225: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71226: LD_ADDR_VAR 0 5
71230: PUSH
71231: LD_VAR 0 6
71235: PUSH
71236: LD_INT 1
71238: ARRAY
71239: PPUSH
71240: LD_VAR 0 3
71244: PPUSH
71245: CALL_OW 259
71249: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71250: LD_VAR 0 6
71254: PUSH
71255: LD_INT 1
71257: ARRAY
71258: PPUSH
71259: LD_VAR 0 2
71263: PPUSH
71264: LD_VAR 0 5
71268: PPUSH
71269: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71273: LD_VAR 0 6
71277: PUSH
71278: LD_INT 1
71280: ARRAY
71281: PPUSH
71282: LD_VAR 0 3
71286: PPUSH
71287: LD_VAR 0 4
71291: PPUSH
71292: CALL_OW 237
// end ;
71296: PPOPN 6
71298: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71299: LD_EXP 51
71303: PUSH
71304: LD_EXP 98
71308: AND
71309: IFFALSE 71388
71311: GO 71313
71313: DISABLE
71314: LD_INT 0
71316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71317: LD_ADDR_VAR 0 1
71321: PUSH
71322: LD_INT 22
71324: PUSH
71325: LD_OWVAR 2
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 30
71336: PUSH
71337: LD_INT 3
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PPUSH
71348: CALL_OW 69
71352: ST_TO_ADDR
// if not tmp then
71353: LD_VAR 0 1
71357: NOT
71358: IFFALSE 71362
// exit ;
71360: GO 71388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71362: LD_VAR 0 1
71366: PUSH
71367: LD_INT 1
71369: PPUSH
71370: LD_VAR 0 1
71374: PPUSH
71375: CALL_OW 12
71379: ARRAY
71380: PPUSH
71381: LD_INT 1
71383: PPUSH
71384: CALL_OW 234
// end ;
71388: PPOPN 1
71390: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
71391: LD_EXP 51
71395: PUSH
71396: LD_EXP 99
71400: AND
71401: IFFALSE 71513
71403: GO 71405
71405: DISABLE
71406: LD_INT 0
71408: PPUSH
71409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71410: LD_ADDR_VAR 0 2
71414: PUSH
71415: LD_INT 22
71417: PUSH
71418: LD_OWVAR 2
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 2
71429: PUSH
71430: LD_INT 30
71432: PUSH
71433: LD_INT 27
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 30
71442: PUSH
71443: LD_INT 26
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 30
71452: PUSH
71453: LD_INT 28
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PPUSH
71470: CALL_OW 69
71474: ST_TO_ADDR
// if not tmp then
71475: LD_VAR 0 2
71479: NOT
71480: IFFALSE 71484
// exit ;
71482: GO 71513
// for i in tmp do
71484: LD_ADDR_VAR 0 1
71488: PUSH
71489: LD_VAR 0 2
71493: PUSH
71494: FOR_IN
71495: IFFALSE 71511
// SetLives ( i , 1 ) ;
71497: LD_VAR 0 1
71501: PPUSH
71502: LD_INT 1
71504: PPUSH
71505: CALL_OW 234
71509: GO 71494
71511: POP
71512: POP
// end ;
71513: PPOPN 2
71515: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71516: LD_EXP 51
71520: PUSH
71521: LD_EXP 100
71525: AND
71526: IFFALSE 71813
71528: GO 71530
71530: DISABLE
71531: LD_INT 0
71533: PPUSH
71534: PPUSH
71535: PPUSH
// begin i := rand ( 1 , 7 ) ;
71536: LD_ADDR_VAR 0 1
71540: PUSH
71541: LD_INT 1
71543: PPUSH
71544: LD_INT 7
71546: PPUSH
71547: CALL_OW 12
71551: ST_TO_ADDR
// case i of 1 :
71552: LD_VAR 0 1
71556: PUSH
71557: LD_INT 1
71559: DOUBLE
71560: EQUAL
71561: IFTRUE 71565
71563: GO 71575
71565: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71566: LD_STRING earthquake(getX(game), 0, 32)
71568: PPUSH
71569: CALL_OW 559
71573: GO 71813
71575: LD_INT 2
71577: DOUBLE
71578: EQUAL
71579: IFTRUE 71583
71581: GO 71597
71583: POP
// begin ToLua ( displayStucuk(); ) ;
71584: LD_STRING displayStucuk();
71586: PPUSH
71587: CALL_OW 559
// ResetFog ;
71591: CALL_OW 335
// end ; 3 :
71595: GO 71813
71597: LD_INT 3
71599: DOUBLE
71600: EQUAL
71601: IFTRUE 71605
71603: GO 71709
71605: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71606: LD_ADDR_VAR 0 2
71610: PUSH
71611: LD_INT 22
71613: PUSH
71614: LD_OWVAR 2
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 25
71625: PUSH
71626: LD_INT 1
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PPUSH
71637: CALL_OW 69
71641: ST_TO_ADDR
// if not tmp then
71642: LD_VAR 0 2
71646: NOT
71647: IFFALSE 71651
// exit ;
71649: GO 71813
// un := tmp [ rand ( 1 , tmp ) ] ;
71651: LD_ADDR_VAR 0 3
71655: PUSH
71656: LD_VAR 0 2
71660: PUSH
71661: LD_INT 1
71663: PPUSH
71664: LD_VAR 0 2
71668: PPUSH
71669: CALL_OW 12
71673: ARRAY
71674: ST_TO_ADDR
// if Crawls ( un ) then
71675: LD_VAR 0 3
71679: PPUSH
71680: CALL_OW 318
71684: IFFALSE 71695
// ComWalk ( un ) ;
71686: LD_VAR 0 3
71690: PPUSH
71691: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71695: LD_VAR 0 3
71699: PPUSH
71700: LD_INT 8
71702: PPUSH
71703: CALL_OW 336
// end ; 4 :
71707: GO 71813
71709: LD_INT 4
71711: DOUBLE
71712: EQUAL
71713: IFTRUE 71717
71715: GO 71791
71717: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71718: LD_ADDR_VAR 0 2
71722: PUSH
71723: LD_INT 22
71725: PUSH
71726: LD_OWVAR 2
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 30
71737: PUSH
71738: LD_INT 29
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PPUSH
71749: CALL_OW 69
71753: ST_TO_ADDR
// if not tmp then
71754: LD_VAR 0 2
71758: NOT
71759: IFFALSE 71763
// exit ;
71761: GO 71813
// CenterNowOnUnits ( tmp [ 1 ] ) ;
71763: LD_VAR 0 2
71767: PUSH
71768: LD_INT 1
71770: ARRAY
71771: PPUSH
71772: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
71776: LD_VAR 0 2
71780: PUSH
71781: LD_INT 1
71783: ARRAY
71784: PPUSH
71785: CALL_OW 65
// end ; 5 .. 7 :
71789: GO 71813
71791: LD_INT 5
71793: DOUBLE
71794: GREATEREQUAL
71795: IFFALSE 71803
71797: LD_INT 7
71799: DOUBLE
71800: LESSEQUAL
71801: IFTRUE 71805
71803: GO 71812
71805: POP
// StreamSibBomb ; end ;
71806: CALL 68050 0 0
71810: GO 71813
71812: POP
// end ;
71813: PPOPN 3
71815: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71816: LD_EXP 51
71820: PUSH
71821: LD_EXP 101
71825: AND
71826: IFFALSE 71982
71828: GO 71830
71830: DISABLE
71831: LD_INT 0
71833: PPUSH
71834: PPUSH
71835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71836: LD_ADDR_VAR 0 2
71840: PUSH
71841: LD_INT 81
71843: PUSH
71844: LD_OWVAR 2
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: LD_INT 21
71858: PUSH
71859: LD_INT 1
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 21
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: LIST
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PPUSH
71885: CALL_OW 69
71889: ST_TO_ADDR
// if not tmp then
71890: LD_VAR 0 2
71894: NOT
71895: IFFALSE 71899
// exit ;
71897: GO 71982
// p := 0 ;
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71907: LD_INT 35
71909: PPUSH
71910: CALL_OW 67
// p := p + 1 ;
71914: LD_ADDR_VAR 0 3
71918: PUSH
71919: LD_VAR 0 3
71923: PUSH
71924: LD_INT 1
71926: PLUS
71927: ST_TO_ADDR
// for i in tmp do
71928: LD_ADDR_VAR 0 1
71932: PUSH
71933: LD_VAR 0 2
71937: PUSH
71938: FOR_IN
71939: IFFALSE 71970
// if GetLives ( i ) < 1000 then
71941: LD_VAR 0 1
71945: PPUSH
71946: CALL_OW 256
71950: PUSH
71951: LD_INT 1000
71953: LESS
71954: IFFALSE 71968
// SetLives ( i , 1000 ) ;
71956: LD_VAR 0 1
71960: PPUSH
71961: LD_INT 1000
71963: PPUSH
71964: CALL_OW 234
71968: GO 71938
71970: POP
71971: POP
// until p > 20 ;
71972: LD_VAR 0 3
71976: PUSH
71977: LD_INT 20
71979: GREATER
71980: IFFALSE 71907
// end ;
71982: PPOPN 3
71984: END
// every 0 0$1 trigger StreamModeActive and sTime do
71985: LD_EXP 51
71989: PUSH
71990: LD_EXP 102
71994: AND
71995: IFFALSE 72030
71997: GO 71999
71999: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72000: LD_INT 28
72002: PPUSH
72003: LD_OWVAR 2
72007: PPUSH
72008: LD_INT 2
72010: PPUSH
72011: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72015: LD_INT 30
72017: PPUSH
72018: LD_OWVAR 2
72022: PPUSH
72023: LD_INT 2
72025: PPUSH
72026: CALL_OW 322
// end ;
72030: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72031: LD_EXP 51
72035: PUSH
72036: LD_EXP 103
72040: AND
72041: IFFALSE 72162
72043: GO 72045
72045: DISABLE
72046: LD_INT 0
72048: PPUSH
72049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72050: LD_ADDR_VAR 0 2
72054: PUSH
72055: LD_INT 22
72057: PUSH
72058: LD_OWVAR 2
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 21
72069: PUSH
72070: LD_INT 1
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 3
72079: PUSH
72080: LD_INT 23
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: LIST
72098: PPUSH
72099: CALL_OW 69
72103: ST_TO_ADDR
// if not tmp then
72104: LD_VAR 0 2
72108: NOT
72109: IFFALSE 72113
// exit ;
72111: GO 72162
// for i in tmp do
72113: LD_ADDR_VAR 0 1
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: FOR_IN
72124: IFFALSE 72160
// begin if Crawls ( i ) then
72126: LD_VAR 0 1
72130: PPUSH
72131: CALL_OW 318
72135: IFFALSE 72146
// ComWalk ( i ) ;
72137: LD_VAR 0 1
72141: PPUSH
72142: CALL_OW 138
// SetClass ( i , 2 ) ;
72146: LD_VAR 0 1
72150: PPUSH
72151: LD_INT 2
72153: PPUSH
72154: CALL_OW 336
// end ;
72158: GO 72123
72160: POP
72161: POP
// end ;
72162: PPOPN 2
72164: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72165: LD_EXP 51
72169: PUSH
72170: LD_EXP 104
72174: AND
72175: IFFALSE 72463
72177: GO 72179
72179: DISABLE
72180: LD_INT 0
72182: PPUSH
72183: PPUSH
72184: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72185: LD_OWVAR 2
72189: PPUSH
72190: LD_INT 9
72192: PPUSH
72193: LD_INT 1
72195: PPUSH
72196: LD_INT 1
72198: PPUSH
72199: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72203: LD_INT 9
72205: PPUSH
72206: LD_OWVAR 2
72210: PPUSH
72211: CALL_OW 343
// uc_side := 9 ;
72215: LD_ADDR_OWVAR 20
72219: PUSH
72220: LD_INT 9
72222: ST_TO_ADDR
// uc_nation := 2 ;
72223: LD_ADDR_OWVAR 21
72227: PUSH
72228: LD_INT 2
72230: ST_TO_ADDR
// hc_name := Dark Warrior ;
72231: LD_ADDR_OWVAR 26
72235: PUSH
72236: LD_STRING Dark Warrior
72238: ST_TO_ADDR
// hc_gallery :=  ;
72239: LD_ADDR_OWVAR 33
72243: PUSH
72244: LD_STRING 
72246: ST_TO_ADDR
// hc_noskilllimit := true ;
72247: LD_ADDR_OWVAR 76
72251: PUSH
72252: LD_INT 1
72254: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72255: LD_ADDR_OWVAR 31
72259: PUSH
72260: LD_INT 30
72262: PUSH
72263: LD_INT 30
72265: PUSH
72266: LD_INT 30
72268: PUSH
72269: LD_INT 30
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: ST_TO_ADDR
// un := CreateHuman ;
72278: LD_ADDR_VAR 0 3
72282: PUSH
72283: CALL_OW 44
72287: ST_TO_ADDR
// hc_noskilllimit := false ;
72288: LD_ADDR_OWVAR 76
72292: PUSH
72293: LD_INT 0
72295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72296: LD_VAR 0 3
72300: PPUSH
72301: LD_INT 1
72303: PPUSH
72304: CALL_OW 51
// ToLua ( playRanger() ) ;
72308: LD_STRING playRanger()
72310: PPUSH
72311: CALL_OW 559
// p := 0 ;
72315: LD_ADDR_VAR 0 2
72319: PUSH
72320: LD_INT 0
72322: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72323: LD_INT 35
72325: PPUSH
72326: CALL_OW 67
// p := p + 1 ;
72330: LD_ADDR_VAR 0 2
72334: PUSH
72335: LD_VAR 0 2
72339: PUSH
72340: LD_INT 1
72342: PLUS
72343: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
72344: LD_VAR 0 3
72348: PPUSH
72349: CALL_OW 256
72353: PUSH
72354: LD_INT 1000
72356: LESS
72357: IFFALSE 72371
// SetLives ( un , 1000 ) ;
72359: LD_VAR 0 3
72363: PPUSH
72364: LD_INT 1000
72366: PPUSH
72367: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
72371: LD_VAR 0 3
72375: PPUSH
72376: LD_INT 81
72378: PUSH
72379: LD_OWVAR 2
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 91
72390: PUSH
72391: LD_VAR 0 3
72395: PUSH
72396: LD_INT 30
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PPUSH
72408: CALL_OW 69
72412: PPUSH
72413: LD_VAR 0 3
72417: PPUSH
72418: CALL_OW 74
72422: PPUSH
72423: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72427: LD_VAR 0 2
72431: PUSH
72432: LD_INT 80
72434: GREATER
72435: PUSH
72436: LD_VAR 0 3
72440: PPUSH
72441: CALL_OW 301
72445: OR
72446: IFFALSE 72323
// if un then
72448: LD_VAR 0 3
72452: IFFALSE 72463
// RemoveUnit ( un ) ;
72454: LD_VAR 0 3
72458: PPUSH
72459: CALL_OW 64
// end ;
72463: PPOPN 3
72465: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72466: LD_EXP 105
72470: IFFALSE 72586
72472: GO 72474
72474: DISABLE
72475: LD_INT 0
72477: PPUSH
72478: PPUSH
72479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72480: LD_ADDR_VAR 0 2
72484: PUSH
72485: LD_INT 81
72487: PUSH
72488: LD_OWVAR 2
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 21
72499: PUSH
72500: LD_INT 1
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PPUSH
72511: CALL_OW 69
72515: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72516: LD_STRING playComputer()
72518: PPUSH
72519: CALL_OW 559
// if not tmp then
72523: LD_VAR 0 2
72527: NOT
72528: IFFALSE 72532
// exit ;
72530: GO 72586
// for i in tmp do
72532: LD_ADDR_VAR 0 1
72536: PUSH
72537: LD_VAR 0 2
72541: PUSH
72542: FOR_IN
72543: IFFALSE 72584
// for j := 1 to 4 do
72545: LD_ADDR_VAR 0 3
72549: PUSH
72550: DOUBLE
72551: LD_INT 1
72553: DEC
72554: ST_TO_ADDR
72555: LD_INT 4
72557: PUSH
72558: FOR_TO
72559: IFFALSE 72580
// SetSkill ( i , j , 10 ) ;
72561: LD_VAR 0 1
72565: PPUSH
72566: LD_VAR 0 3
72570: PPUSH
72571: LD_INT 10
72573: PPUSH
72574: CALL_OW 237
72578: GO 72558
72580: POP
72581: POP
72582: GO 72542
72584: POP
72585: POP
// end ;
72586: PPOPN 3
72588: END
// every 0 0$1 trigger s30 do var i , tmp ;
72589: LD_EXP 106
72593: IFFALSE 72662
72595: GO 72597
72597: DISABLE
72598: LD_INT 0
72600: PPUSH
72601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72602: LD_ADDR_VAR 0 2
72606: PUSH
72607: LD_INT 22
72609: PUSH
72610: LD_OWVAR 2
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PPUSH
72619: CALL_OW 69
72623: ST_TO_ADDR
// if not tmp then
72624: LD_VAR 0 2
72628: NOT
72629: IFFALSE 72633
// exit ;
72631: GO 72662
// for i in tmp do
72633: LD_ADDR_VAR 0 1
72637: PUSH
72638: LD_VAR 0 2
72642: PUSH
72643: FOR_IN
72644: IFFALSE 72660
// SetLives ( i , 300 ) ;
72646: LD_VAR 0 1
72650: PPUSH
72651: LD_INT 300
72653: PPUSH
72654: CALL_OW 234
72658: GO 72643
72660: POP
72661: POP
// end ;
72662: PPOPN 2
72664: END
// every 0 0$1 trigger s60 do var i , tmp ;
72665: LD_EXP 107
72669: IFFALSE 72738
72671: GO 72673
72673: DISABLE
72674: LD_INT 0
72676: PPUSH
72677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72678: LD_ADDR_VAR 0 2
72682: PUSH
72683: LD_INT 22
72685: PUSH
72686: LD_OWVAR 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PPUSH
72695: CALL_OW 69
72699: ST_TO_ADDR
// if not tmp then
72700: LD_VAR 0 2
72704: NOT
72705: IFFALSE 72709
// exit ;
72707: GO 72738
// for i in tmp do
72709: LD_ADDR_VAR 0 1
72713: PUSH
72714: LD_VAR 0 2
72718: PUSH
72719: FOR_IN
72720: IFFALSE 72736
// SetLives ( i , 600 ) ;
72722: LD_VAR 0 1
72726: PPUSH
72727: LD_INT 600
72729: PPUSH
72730: CALL_OW 234
72734: GO 72719
72736: POP
72737: POP
// end ;
72738: PPOPN 2
72740: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72741: LD_INT 0
72743: PPUSH
// case cmd of 301 :
72744: LD_VAR 0 1
72748: PUSH
72749: LD_INT 301
72751: DOUBLE
72752: EQUAL
72753: IFTRUE 72757
72755: GO 72789
72757: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72758: LD_VAR 0 6
72762: PPUSH
72763: LD_VAR 0 7
72767: PPUSH
72768: LD_VAR 0 8
72772: PPUSH
72773: LD_VAR 0 4
72777: PPUSH
72778: LD_VAR 0 5
72782: PPUSH
72783: CALL 73998 0 5
72787: GO 72910
72789: LD_INT 302
72791: DOUBLE
72792: EQUAL
72793: IFTRUE 72797
72795: GO 72834
72797: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72798: LD_VAR 0 6
72802: PPUSH
72803: LD_VAR 0 7
72807: PPUSH
72808: LD_VAR 0 8
72812: PPUSH
72813: LD_VAR 0 9
72817: PPUSH
72818: LD_VAR 0 4
72822: PPUSH
72823: LD_VAR 0 5
72827: PPUSH
72828: CALL 74089 0 6
72832: GO 72910
72834: LD_INT 303
72836: DOUBLE
72837: EQUAL
72838: IFTRUE 72842
72840: GO 72879
72842: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72843: LD_VAR 0 6
72847: PPUSH
72848: LD_VAR 0 7
72852: PPUSH
72853: LD_VAR 0 8
72857: PPUSH
72858: LD_VAR 0 9
72862: PPUSH
72863: LD_VAR 0 4
72867: PPUSH
72868: LD_VAR 0 5
72872: PPUSH
72873: CALL 72915 0 6
72877: GO 72910
72879: LD_INT 304
72881: DOUBLE
72882: EQUAL
72883: IFTRUE 72887
72885: GO 72909
72887: POP
// hHackTeleport ( unit , x , y ) ; end ;
72888: LD_VAR 0 2
72892: PPUSH
72893: LD_VAR 0 4
72897: PPUSH
72898: LD_VAR 0 5
72902: PPUSH
72903: CALL 74682 0 3
72907: GO 72910
72909: POP
// end ;
72910: LD_VAR 0 12
72914: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72915: LD_INT 0
72917: PPUSH
72918: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72919: LD_VAR 0 1
72923: PUSH
72924: LD_INT 1
72926: LESS
72927: PUSH
72928: LD_VAR 0 1
72932: PUSH
72933: LD_INT 3
72935: GREATER
72936: OR
72937: PUSH
72938: LD_VAR 0 5
72942: PPUSH
72943: LD_VAR 0 6
72947: PPUSH
72948: CALL_OW 428
72952: OR
72953: IFFALSE 72957
// exit ;
72955: GO 73685
// uc_side := your_side ;
72957: LD_ADDR_OWVAR 20
72961: PUSH
72962: LD_OWVAR 2
72966: ST_TO_ADDR
// uc_nation := nation ;
72967: LD_ADDR_OWVAR 21
72971: PUSH
72972: LD_VAR 0 1
72976: ST_TO_ADDR
// bc_level = 1 ;
72977: LD_ADDR_OWVAR 43
72981: PUSH
72982: LD_INT 1
72984: ST_TO_ADDR
// case btype of 1 :
72985: LD_VAR 0 2
72989: PUSH
72990: LD_INT 1
72992: DOUBLE
72993: EQUAL
72994: IFTRUE 72998
72996: GO 73009
72998: POP
// bc_type := b_depot ; 2 :
72999: LD_ADDR_OWVAR 42
73003: PUSH
73004: LD_INT 0
73006: ST_TO_ADDR
73007: GO 73629
73009: LD_INT 2
73011: DOUBLE
73012: EQUAL
73013: IFTRUE 73017
73015: GO 73028
73017: POP
// bc_type := b_warehouse ; 3 :
73018: LD_ADDR_OWVAR 42
73022: PUSH
73023: LD_INT 1
73025: ST_TO_ADDR
73026: GO 73629
73028: LD_INT 3
73030: DOUBLE
73031: EQUAL
73032: IFTRUE 73036
73034: GO 73047
73036: POP
// bc_type := b_lab ; 4 .. 9 :
73037: LD_ADDR_OWVAR 42
73041: PUSH
73042: LD_INT 6
73044: ST_TO_ADDR
73045: GO 73629
73047: LD_INT 4
73049: DOUBLE
73050: GREATEREQUAL
73051: IFFALSE 73059
73053: LD_INT 9
73055: DOUBLE
73056: LESSEQUAL
73057: IFTRUE 73061
73059: GO 73121
73061: POP
// begin bc_type := b_lab_half ;
73062: LD_ADDR_OWVAR 42
73066: PUSH
73067: LD_INT 7
73069: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73070: LD_ADDR_OWVAR 44
73074: PUSH
73075: LD_INT 10
73077: PUSH
73078: LD_INT 11
73080: PUSH
73081: LD_INT 12
73083: PUSH
73084: LD_INT 15
73086: PUSH
73087: LD_INT 14
73089: PUSH
73090: LD_INT 13
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: PUSH
73101: LD_VAR 0 2
73105: PUSH
73106: LD_INT 3
73108: MINUS
73109: ARRAY
73110: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
73111: LD_ADDR_OWVAR 45
73115: PUSH
73116: LD_INT 9
73118: ST_TO_ADDR
// end ; 10 .. 13 :
73119: GO 73629
73121: LD_INT 10
73123: DOUBLE
73124: GREATEREQUAL
73125: IFFALSE 73133
73127: LD_INT 13
73129: DOUBLE
73130: LESSEQUAL
73131: IFTRUE 73135
73133: GO 73212
73135: POP
// begin bc_type := b_lab_full ;
73136: LD_ADDR_OWVAR 42
73140: PUSH
73141: LD_INT 8
73143: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73144: LD_ADDR_OWVAR 44
73148: PUSH
73149: LD_INT 10
73151: PUSH
73152: LD_INT 12
73154: PUSH
73155: LD_INT 14
73157: PUSH
73158: LD_INT 13
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: PUSH
73167: LD_VAR 0 2
73171: PUSH
73172: LD_INT 9
73174: MINUS
73175: ARRAY
73176: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73177: LD_ADDR_OWVAR 45
73181: PUSH
73182: LD_INT 11
73184: PUSH
73185: LD_INT 15
73187: PUSH
73188: LD_INT 12
73190: PUSH
73191: LD_INT 15
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: PUSH
73200: LD_VAR 0 2
73204: PUSH
73205: LD_INT 9
73207: MINUS
73208: ARRAY
73209: ST_TO_ADDR
// end ; 14 :
73210: GO 73629
73212: LD_INT 14
73214: DOUBLE
73215: EQUAL
73216: IFTRUE 73220
73218: GO 73231
73220: POP
// bc_type := b_workshop ; 15 :
73221: LD_ADDR_OWVAR 42
73225: PUSH
73226: LD_INT 2
73228: ST_TO_ADDR
73229: GO 73629
73231: LD_INT 15
73233: DOUBLE
73234: EQUAL
73235: IFTRUE 73239
73237: GO 73250
73239: POP
// bc_type := b_factory ; 16 :
73240: LD_ADDR_OWVAR 42
73244: PUSH
73245: LD_INT 3
73247: ST_TO_ADDR
73248: GO 73629
73250: LD_INT 16
73252: DOUBLE
73253: EQUAL
73254: IFTRUE 73258
73256: GO 73269
73258: POP
// bc_type := b_ext_gun ; 17 :
73259: LD_ADDR_OWVAR 42
73263: PUSH
73264: LD_INT 17
73266: ST_TO_ADDR
73267: GO 73629
73269: LD_INT 17
73271: DOUBLE
73272: EQUAL
73273: IFTRUE 73277
73275: GO 73305
73277: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73278: LD_ADDR_OWVAR 42
73282: PUSH
73283: LD_INT 19
73285: PUSH
73286: LD_INT 23
73288: PUSH
73289: LD_INT 19
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: PUSH
73297: LD_VAR 0 1
73301: ARRAY
73302: ST_TO_ADDR
73303: GO 73629
73305: LD_INT 18
73307: DOUBLE
73308: EQUAL
73309: IFTRUE 73313
73311: GO 73324
73313: POP
// bc_type := b_ext_radar ; 19 :
73314: LD_ADDR_OWVAR 42
73318: PUSH
73319: LD_INT 20
73321: ST_TO_ADDR
73322: GO 73629
73324: LD_INT 19
73326: DOUBLE
73327: EQUAL
73328: IFTRUE 73332
73330: GO 73343
73332: POP
// bc_type := b_ext_radio ; 20 :
73333: LD_ADDR_OWVAR 42
73337: PUSH
73338: LD_INT 22
73340: ST_TO_ADDR
73341: GO 73629
73343: LD_INT 20
73345: DOUBLE
73346: EQUAL
73347: IFTRUE 73351
73349: GO 73362
73351: POP
// bc_type := b_ext_siberium ; 21 :
73352: LD_ADDR_OWVAR 42
73356: PUSH
73357: LD_INT 21
73359: ST_TO_ADDR
73360: GO 73629
73362: LD_INT 21
73364: DOUBLE
73365: EQUAL
73366: IFTRUE 73370
73368: GO 73381
73370: POP
// bc_type := b_ext_computer ; 22 :
73371: LD_ADDR_OWVAR 42
73375: PUSH
73376: LD_INT 24
73378: ST_TO_ADDR
73379: GO 73629
73381: LD_INT 22
73383: DOUBLE
73384: EQUAL
73385: IFTRUE 73389
73387: GO 73400
73389: POP
// bc_type := b_ext_track ; 23 :
73390: LD_ADDR_OWVAR 42
73394: PUSH
73395: LD_INT 16
73397: ST_TO_ADDR
73398: GO 73629
73400: LD_INT 23
73402: DOUBLE
73403: EQUAL
73404: IFTRUE 73408
73406: GO 73419
73408: POP
// bc_type := b_ext_laser ; 24 :
73409: LD_ADDR_OWVAR 42
73413: PUSH
73414: LD_INT 25
73416: ST_TO_ADDR
73417: GO 73629
73419: LD_INT 24
73421: DOUBLE
73422: EQUAL
73423: IFTRUE 73427
73425: GO 73438
73427: POP
// bc_type := b_control_tower ; 25 :
73428: LD_ADDR_OWVAR 42
73432: PUSH
73433: LD_INT 36
73435: ST_TO_ADDR
73436: GO 73629
73438: LD_INT 25
73440: DOUBLE
73441: EQUAL
73442: IFTRUE 73446
73444: GO 73457
73446: POP
// bc_type := b_breastwork ; 26 :
73447: LD_ADDR_OWVAR 42
73451: PUSH
73452: LD_INT 31
73454: ST_TO_ADDR
73455: GO 73629
73457: LD_INT 26
73459: DOUBLE
73460: EQUAL
73461: IFTRUE 73465
73463: GO 73476
73465: POP
// bc_type := b_bunker ; 27 :
73466: LD_ADDR_OWVAR 42
73470: PUSH
73471: LD_INT 32
73473: ST_TO_ADDR
73474: GO 73629
73476: LD_INT 27
73478: DOUBLE
73479: EQUAL
73480: IFTRUE 73484
73482: GO 73495
73484: POP
// bc_type := b_turret ; 28 :
73485: LD_ADDR_OWVAR 42
73489: PUSH
73490: LD_INT 33
73492: ST_TO_ADDR
73493: GO 73629
73495: LD_INT 28
73497: DOUBLE
73498: EQUAL
73499: IFTRUE 73503
73501: GO 73514
73503: POP
// bc_type := b_armoury ; 29 :
73504: LD_ADDR_OWVAR 42
73508: PUSH
73509: LD_INT 4
73511: ST_TO_ADDR
73512: GO 73629
73514: LD_INT 29
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73522
73520: GO 73533
73522: POP
// bc_type := b_barracks ; 30 :
73523: LD_ADDR_OWVAR 42
73527: PUSH
73528: LD_INT 5
73530: ST_TO_ADDR
73531: GO 73629
73533: LD_INT 30
73535: DOUBLE
73536: EQUAL
73537: IFTRUE 73541
73539: GO 73552
73541: POP
// bc_type := b_solar_power ; 31 :
73542: LD_ADDR_OWVAR 42
73546: PUSH
73547: LD_INT 27
73549: ST_TO_ADDR
73550: GO 73629
73552: LD_INT 31
73554: DOUBLE
73555: EQUAL
73556: IFTRUE 73560
73558: GO 73571
73560: POP
// bc_type := b_oil_power ; 32 :
73561: LD_ADDR_OWVAR 42
73565: PUSH
73566: LD_INT 26
73568: ST_TO_ADDR
73569: GO 73629
73571: LD_INT 32
73573: DOUBLE
73574: EQUAL
73575: IFTRUE 73579
73577: GO 73590
73579: POP
// bc_type := b_siberite_power ; 33 :
73580: LD_ADDR_OWVAR 42
73584: PUSH
73585: LD_INT 28
73587: ST_TO_ADDR
73588: GO 73629
73590: LD_INT 33
73592: DOUBLE
73593: EQUAL
73594: IFTRUE 73598
73596: GO 73609
73598: POP
// bc_type := b_oil_mine ; 34 :
73599: LD_ADDR_OWVAR 42
73603: PUSH
73604: LD_INT 29
73606: ST_TO_ADDR
73607: GO 73629
73609: LD_INT 34
73611: DOUBLE
73612: EQUAL
73613: IFTRUE 73617
73615: GO 73628
73617: POP
// bc_type := b_siberite_mine ; end ;
73618: LD_ADDR_OWVAR 42
73622: PUSH
73623: LD_INT 30
73625: ST_TO_ADDR
73626: GO 73629
73628: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73629: LD_ADDR_VAR 0 8
73633: PUSH
73634: LD_VAR 0 5
73638: PPUSH
73639: LD_VAR 0 6
73643: PPUSH
73644: LD_VAR 0 3
73648: PPUSH
73649: CALL_OW 47
73653: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73654: LD_OWVAR 42
73658: PUSH
73659: LD_INT 32
73661: PUSH
73662: LD_INT 33
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: IN
73669: IFFALSE 73685
// PlaceWeaponTurret ( b , weapon ) ;
73671: LD_VAR 0 8
73675: PPUSH
73676: LD_VAR 0 4
73680: PPUSH
73681: CALL_OW 431
// end ;
73685: LD_VAR 0 7
73689: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73690: LD_INT 0
73692: PPUSH
73693: PPUSH
73694: PPUSH
73695: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73696: LD_ADDR_VAR 0 4
73700: PUSH
73701: LD_INT 22
73703: PUSH
73704: LD_OWVAR 2
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: PUSH
73713: LD_INT 2
73715: PUSH
73716: LD_INT 30
73718: PUSH
73719: LD_INT 0
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 30
73728: PUSH
73729: LD_INT 1
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: LIST
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PPUSH
73745: CALL_OW 69
73749: ST_TO_ADDR
// if not tmp then
73750: LD_VAR 0 4
73754: NOT
73755: IFFALSE 73759
// exit ;
73757: GO 73818
// for i in tmp do
73759: LD_ADDR_VAR 0 2
73763: PUSH
73764: LD_VAR 0 4
73768: PUSH
73769: FOR_IN
73770: IFFALSE 73816
// for j = 1 to 3 do
73772: LD_ADDR_VAR 0 3
73776: PUSH
73777: DOUBLE
73778: LD_INT 1
73780: DEC
73781: ST_TO_ADDR
73782: LD_INT 3
73784: PUSH
73785: FOR_TO
73786: IFFALSE 73812
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73788: LD_VAR 0 2
73792: PPUSH
73793: CALL_OW 274
73797: PPUSH
73798: LD_VAR 0 3
73802: PPUSH
73803: LD_INT 99999
73805: PPUSH
73806: CALL_OW 277
73810: GO 73785
73812: POP
73813: POP
73814: GO 73769
73816: POP
73817: POP
// end ;
73818: LD_VAR 0 1
73822: RET
// export function hHackSetLevel10 ; var i , j ; begin
73823: LD_INT 0
73825: PPUSH
73826: PPUSH
73827: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73828: LD_ADDR_VAR 0 2
73832: PUSH
73833: LD_INT 21
73835: PUSH
73836: LD_INT 1
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PPUSH
73843: CALL_OW 69
73847: PUSH
73848: FOR_IN
73849: IFFALSE 73901
// if IsSelected ( i ) then
73851: LD_VAR 0 2
73855: PPUSH
73856: CALL_OW 306
73860: IFFALSE 73899
// begin for j := 1 to 4 do
73862: LD_ADDR_VAR 0 3
73866: PUSH
73867: DOUBLE
73868: LD_INT 1
73870: DEC
73871: ST_TO_ADDR
73872: LD_INT 4
73874: PUSH
73875: FOR_TO
73876: IFFALSE 73897
// SetSkill ( i , j , 10 ) ;
73878: LD_VAR 0 2
73882: PPUSH
73883: LD_VAR 0 3
73887: PPUSH
73888: LD_INT 10
73890: PPUSH
73891: CALL_OW 237
73895: GO 73875
73897: POP
73898: POP
// end ;
73899: GO 73848
73901: POP
73902: POP
// end ;
73903: LD_VAR 0 1
73907: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73908: LD_INT 0
73910: PPUSH
73911: PPUSH
73912: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73913: LD_ADDR_VAR 0 2
73917: PUSH
73918: LD_INT 22
73920: PUSH
73921: LD_OWVAR 2
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 21
73932: PUSH
73933: LD_INT 1
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PPUSH
73944: CALL_OW 69
73948: PUSH
73949: FOR_IN
73950: IFFALSE 73991
// begin for j := 1 to 4 do
73952: LD_ADDR_VAR 0 3
73956: PUSH
73957: DOUBLE
73958: LD_INT 1
73960: DEC
73961: ST_TO_ADDR
73962: LD_INT 4
73964: PUSH
73965: FOR_TO
73966: IFFALSE 73987
// SetSkill ( i , j , 10 ) ;
73968: LD_VAR 0 2
73972: PPUSH
73973: LD_VAR 0 3
73977: PPUSH
73978: LD_INT 10
73980: PPUSH
73981: CALL_OW 237
73985: GO 73965
73987: POP
73988: POP
// end ;
73989: GO 73949
73991: POP
73992: POP
// end ;
73993: LD_VAR 0 1
73997: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73998: LD_INT 0
74000: PPUSH
// uc_side := your_side ;
74001: LD_ADDR_OWVAR 20
74005: PUSH
74006: LD_OWVAR 2
74010: ST_TO_ADDR
// uc_nation := nation ;
74011: LD_ADDR_OWVAR 21
74015: PUSH
74016: LD_VAR 0 1
74020: ST_TO_ADDR
// InitHc ;
74021: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74025: LD_INT 0
74027: PPUSH
74028: LD_VAR 0 2
74032: PPUSH
74033: LD_VAR 0 3
74037: PPUSH
74038: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74042: LD_VAR 0 4
74046: PPUSH
74047: LD_VAR 0 5
74051: PPUSH
74052: CALL_OW 428
74056: PUSH
74057: LD_INT 0
74059: EQUAL
74060: IFFALSE 74084
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74062: CALL_OW 44
74066: PPUSH
74067: LD_VAR 0 4
74071: PPUSH
74072: LD_VAR 0 5
74076: PPUSH
74077: LD_INT 1
74079: PPUSH
74080: CALL_OW 48
// end ;
74084: LD_VAR 0 6
74088: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74089: LD_INT 0
74091: PPUSH
74092: PPUSH
// uc_side := your_side ;
74093: LD_ADDR_OWVAR 20
74097: PUSH
74098: LD_OWVAR 2
74102: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74103: LD_VAR 0 1
74107: PUSH
74108: LD_INT 1
74110: PUSH
74111: LD_INT 2
74113: PUSH
74114: LD_INT 3
74116: PUSH
74117: LD_INT 4
74119: PUSH
74120: LD_INT 5
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: IN
74130: IFFALSE 74142
// uc_nation := nation_american else
74132: LD_ADDR_OWVAR 21
74136: PUSH
74137: LD_INT 1
74139: ST_TO_ADDR
74140: GO 74185
// if chassis in [ 11 , 12 , 13 , 14 ] then
74142: LD_VAR 0 1
74146: PUSH
74147: LD_INT 11
74149: PUSH
74150: LD_INT 12
74152: PUSH
74153: LD_INT 13
74155: PUSH
74156: LD_INT 14
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: IN
74165: IFFALSE 74177
// uc_nation := nation_arabian else
74167: LD_ADDR_OWVAR 21
74171: PUSH
74172: LD_INT 2
74174: ST_TO_ADDR
74175: GO 74185
// uc_nation := nation_russian ;
74177: LD_ADDR_OWVAR 21
74181: PUSH
74182: LD_INT 3
74184: ST_TO_ADDR
// vc_chassis := chassis ;
74185: LD_ADDR_OWVAR 37
74189: PUSH
74190: LD_VAR 0 1
74194: ST_TO_ADDR
// vc_engine := engine ;
74195: LD_ADDR_OWVAR 39
74199: PUSH
74200: LD_VAR 0 2
74204: ST_TO_ADDR
// vc_control := control ;
74205: LD_ADDR_OWVAR 38
74209: PUSH
74210: LD_VAR 0 3
74214: ST_TO_ADDR
// vc_weapon := weapon ;
74215: LD_ADDR_OWVAR 40
74219: PUSH
74220: LD_VAR 0 4
74224: ST_TO_ADDR
// un := CreateVehicle ;
74225: LD_ADDR_VAR 0 8
74229: PUSH
74230: CALL_OW 45
74234: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74235: LD_VAR 0 8
74239: PPUSH
74240: LD_INT 0
74242: PPUSH
74243: LD_INT 5
74245: PPUSH
74246: CALL_OW 12
74250: PPUSH
74251: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74255: LD_VAR 0 8
74259: PPUSH
74260: LD_VAR 0 5
74264: PPUSH
74265: LD_VAR 0 6
74269: PPUSH
74270: LD_INT 1
74272: PPUSH
74273: CALL_OW 48
// end ;
74277: LD_VAR 0 7
74281: RET
// export hInvincible ; every 1 do
74282: GO 74284
74284: DISABLE
// hInvincible := [ ] ;
74285: LD_ADDR_EXP 108
74289: PUSH
74290: EMPTY
74291: ST_TO_ADDR
74292: END
// every 10 do var i ;
74293: GO 74295
74295: DISABLE
74296: LD_INT 0
74298: PPUSH
// begin enable ;
74299: ENABLE
// if not hInvincible then
74300: LD_EXP 108
74304: NOT
74305: IFFALSE 74309
// exit ;
74307: GO 74353
// for i in hInvincible do
74309: LD_ADDR_VAR 0 1
74313: PUSH
74314: LD_EXP 108
74318: PUSH
74319: FOR_IN
74320: IFFALSE 74351
// if GetLives ( i ) < 1000 then
74322: LD_VAR 0 1
74326: PPUSH
74327: CALL_OW 256
74331: PUSH
74332: LD_INT 1000
74334: LESS
74335: IFFALSE 74349
// SetLives ( i , 1000 ) ;
74337: LD_VAR 0 1
74341: PPUSH
74342: LD_INT 1000
74344: PPUSH
74345: CALL_OW 234
74349: GO 74319
74351: POP
74352: POP
// end ;
74353: PPOPN 1
74355: END
// export function hHackInvincible ; var i ; begin
74356: LD_INT 0
74358: PPUSH
74359: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74360: LD_ADDR_VAR 0 2
74364: PUSH
74365: LD_INT 2
74367: PUSH
74368: LD_INT 21
74370: PUSH
74371: LD_INT 1
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: PUSH
74378: LD_INT 21
74380: PUSH
74381: LD_INT 2
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: PPUSH
74393: CALL_OW 69
74397: PUSH
74398: FOR_IN
74399: IFFALSE 74460
// if IsSelected ( i ) then
74401: LD_VAR 0 2
74405: PPUSH
74406: CALL_OW 306
74410: IFFALSE 74458
// begin if i in hInvincible then
74412: LD_VAR 0 2
74416: PUSH
74417: LD_EXP 108
74421: IN
74422: IFFALSE 74442
// hInvincible := hInvincible diff i else
74424: LD_ADDR_EXP 108
74428: PUSH
74429: LD_EXP 108
74433: PUSH
74434: LD_VAR 0 2
74438: DIFF
74439: ST_TO_ADDR
74440: GO 74458
// hInvincible := hInvincible union i ;
74442: LD_ADDR_EXP 108
74446: PUSH
74447: LD_EXP 108
74451: PUSH
74452: LD_VAR 0 2
74456: UNION
74457: ST_TO_ADDR
// end ;
74458: GO 74398
74460: POP
74461: POP
// end ;
74462: LD_VAR 0 1
74466: RET
// export function hHackInvisible ; var i , j ; begin
74467: LD_INT 0
74469: PPUSH
74470: PPUSH
74471: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74472: LD_ADDR_VAR 0 2
74476: PUSH
74477: LD_INT 21
74479: PUSH
74480: LD_INT 1
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PPUSH
74487: CALL_OW 69
74491: PUSH
74492: FOR_IN
74493: IFFALSE 74517
// if IsSelected ( i ) then
74495: LD_VAR 0 2
74499: PPUSH
74500: CALL_OW 306
74504: IFFALSE 74515
// ComForceInvisible ( i ) ;
74506: LD_VAR 0 2
74510: PPUSH
74511: CALL_OW 496
74515: GO 74492
74517: POP
74518: POP
// end ;
74519: LD_VAR 0 1
74523: RET
// export function hHackChangeYourSide ; begin
74524: LD_INT 0
74526: PPUSH
// if your_side = 8 then
74527: LD_OWVAR 2
74531: PUSH
74532: LD_INT 8
74534: EQUAL
74535: IFFALSE 74547
// your_side := 0 else
74537: LD_ADDR_OWVAR 2
74541: PUSH
74542: LD_INT 0
74544: ST_TO_ADDR
74545: GO 74561
// your_side := your_side + 1 ;
74547: LD_ADDR_OWVAR 2
74551: PUSH
74552: LD_OWVAR 2
74556: PUSH
74557: LD_INT 1
74559: PLUS
74560: ST_TO_ADDR
// end ;
74561: LD_VAR 0 1
74565: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74566: LD_INT 0
74568: PPUSH
74569: PPUSH
74570: PPUSH
// for i in all_units do
74571: LD_ADDR_VAR 0 2
74575: PUSH
74576: LD_OWVAR 3
74580: PUSH
74581: FOR_IN
74582: IFFALSE 74660
// if IsSelected ( i ) then
74584: LD_VAR 0 2
74588: PPUSH
74589: CALL_OW 306
74593: IFFALSE 74658
// begin j := GetSide ( i ) ;
74595: LD_ADDR_VAR 0 3
74599: PUSH
74600: LD_VAR 0 2
74604: PPUSH
74605: CALL_OW 255
74609: ST_TO_ADDR
// if j = 8 then
74610: LD_VAR 0 3
74614: PUSH
74615: LD_INT 8
74617: EQUAL
74618: IFFALSE 74630
// j := 0 else
74620: LD_ADDR_VAR 0 3
74624: PUSH
74625: LD_INT 0
74627: ST_TO_ADDR
74628: GO 74644
// j := j + 1 ;
74630: LD_ADDR_VAR 0 3
74634: PUSH
74635: LD_VAR 0 3
74639: PUSH
74640: LD_INT 1
74642: PLUS
74643: ST_TO_ADDR
// SetSide ( i , j ) ;
74644: LD_VAR 0 2
74648: PPUSH
74649: LD_VAR 0 3
74653: PPUSH
74654: CALL_OW 235
// end ;
74658: GO 74581
74660: POP
74661: POP
// end ;
74662: LD_VAR 0 1
74666: RET
// export function hHackFog ; begin
74667: LD_INT 0
74669: PPUSH
// FogOff ( true ) ;
74670: LD_INT 1
74672: PPUSH
74673: CALL_OW 344
// end ;
74677: LD_VAR 0 1
74681: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74682: LD_INT 0
74684: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74685: LD_VAR 0 1
74689: PPUSH
74690: LD_VAR 0 2
74694: PPUSH
74695: LD_VAR 0 3
74699: PPUSH
74700: LD_INT 1
74702: PPUSH
74703: LD_INT 1
74705: PPUSH
74706: CALL_OW 483
// CenterOnXY ( x , y ) ;
74710: LD_VAR 0 2
74714: PPUSH
74715: LD_VAR 0 3
74719: PPUSH
74720: CALL_OW 84
// end ;
74724: LD_VAR 0 4
74728: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
74729: LD_INT 0
74731: PPUSH
74732: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
74733: LD_VAR 0 1
74737: NOT
74738: PUSH
74739: LD_VAR 0 2
74743: PPUSH
74744: LD_VAR 0 3
74748: PPUSH
74749: CALL_OW 488
74753: NOT
74754: OR
74755: PUSH
74756: LD_VAR 0 1
74760: PPUSH
74761: CALL_OW 266
74765: PUSH
74766: LD_INT 3
74768: NONEQUAL
74769: PUSH
74770: LD_VAR 0 1
74774: PPUSH
74775: CALL_OW 247
74779: PUSH
74780: LD_INT 1
74782: EQUAL
74783: NOT
74784: AND
74785: OR
74786: IFFALSE 74790
// exit ;
74788: GO 75072
// if GetType ( factory ) = unit_human then
74790: LD_VAR 0 1
74794: PPUSH
74795: CALL_OW 247
74799: PUSH
74800: LD_INT 1
74802: EQUAL
74803: IFFALSE 74820
// factory := IsInUnit ( factory ) ;
74805: LD_ADDR_VAR 0 1
74809: PUSH
74810: LD_VAR 0 1
74814: PPUSH
74815: CALL_OW 310
74819: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74820: LD_VAR 0 1
74824: PPUSH
74825: CALL_OW 266
74829: PUSH
74830: LD_INT 3
74832: NONEQUAL
74833: IFFALSE 74837
// exit ;
74835: GO 75072
// for i := 1 to Count ( factoryWaypoints ) do
74837: LD_ADDR_VAR 0 5
74841: PUSH
74842: DOUBLE
74843: LD_INT 1
74845: DEC
74846: ST_TO_ADDR
74847: LD_EXP 109
74851: PPUSH
74852: CALL 19450 0 1
74856: PUSH
74857: FOR_TO
74858: IFFALSE 75020
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74860: LD_VAR 0 2
74864: PPUSH
74865: LD_VAR 0 3
74869: PPUSH
74870: CALL_OW 428
74874: PUSH
74875: LD_EXP 109
74879: PUSH
74880: LD_VAR 0 5
74884: ARRAY
74885: PUSH
74886: LD_INT 2
74888: ARRAY
74889: EQUAL
74890: IFFALSE 74922
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74892: LD_ADDR_EXP 109
74896: PUSH
74897: LD_EXP 109
74901: PPUSH
74902: LD_VAR 0 5
74906: PPUSH
74907: CALL_OW 3
74911: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74912: CALL 75077 0 0
// exit ;
74916: POP
74917: POP
74918: GO 75072
// end else
74920: GO 75018
// if factory = factoryWaypoints [ i ] [ 2 ] then
74922: LD_VAR 0 1
74926: PUSH
74927: LD_EXP 109
74931: PUSH
74932: LD_VAR 0 5
74936: ARRAY
74937: PUSH
74938: LD_INT 2
74940: ARRAY
74941: EQUAL
74942: IFFALSE 75018
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74944: LD_ADDR_EXP 109
74948: PUSH
74949: LD_EXP 109
74953: PPUSH
74954: LD_VAR 0 5
74958: PPUSH
74959: CALL_OW 3
74963: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74964: LD_ADDR_EXP 109
74968: PUSH
74969: LD_EXP 109
74973: PPUSH
74974: LD_VAR 0 1
74978: PPUSH
74979: CALL_OW 255
74983: PUSH
74984: LD_VAR 0 1
74988: PUSH
74989: LD_VAR 0 2
74993: PUSH
74994: LD_VAR 0 3
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: PPUSH
75005: CALL 55131 0 2
75009: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75010: CALL 75077 0 0
// exit ;
75014: POP
75015: POP
75016: GO 75072
// end ; end ;
75018: GO 74857
75020: POP
75021: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
75022: LD_ADDR_EXP 109
75026: PUSH
75027: LD_EXP 109
75031: PPUSH
75032: LD_VAR 0 1
75036: PPUSH
75037: CALL_OW 255
75041: PUSH
75042: LD_VAR 0 1
75046: PUSH
75047: LD_VAR 0 2
75051: PUSH
75052: LD_VAR 0 3
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: PPUSH
75063: CALL 55131 0 2
75067: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75068: CALL 75077 0 0
// end ;
75072: LD_VAR 0 4
75076: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75077: LD_INT 0
75079: PPUSH
75080: PPUSH
75081: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75082: LD_STRING resetFactoryWaypoint();
75084: PPUSH
75085: CALL_OW 559
// if factoryWaypoints then
75089: LD_EXP 109
75093: IFFALSE 75214
// begin list := factoryWaypoints ;
75095: LD_ADDR_VAR 0 3
75099: PUSH
75100: LD_EXP 109
75104: ST_TO_ADDR
// for i := 1 to list do
75105: LD_ADDR_VAR 0 2
75109: PUSH
75110: DOUBLE
75111: LD_INT 1
75113: DEC
75114: ST_TO_ADDR
75115: LD_VAR 0 3
75119: PUSH
75120: FOR_TO
75121: IFFALSE 75212
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75123: LD_STRING setFactoryWaypointXY(
75125: PUSH
75126: LD_VAR 0 3
75130: PUSH
75131: LD_VAR 0 2
75135: ARRAY
75136: PUSH
75137: LD_INT 1
75139: ARRAY
75140: STR
75141: PUSH
75142: LD_STRING ,
75144: STR
75145: PUSH
75146: LD_VAR 0 3
75150: PUSH
75151: LD_VAR 0 2
75155: ARRAY
75156: PUSH
75157: LD_INT 2
75159: ARRAY
75160: STR
75161: PUSH
75162: LD_STRING ,
75164: STR
75165: PUSH
75166: LD_VAR 0 3
75170: PUSH
75171: LD_VAR 0 2
75175: ARRAY
75176: PUSH
75177: LD_INT 3
75179: ARRAY
75180: STR
75181: PUSH
75182: LD_STRING ,
75184: STR
75185: PUSH
75186: LD_VAR 0 3
75190: PUSH
75191: LD_VAR 0 2
75195: ARRAY
75196: PUSH
75197: LD_INT 4
75199: ARRAY
75200: STR
75201: PUSH
75202: LD_STRING )
75204: STR
75205: PPUSH
75206: CALL_OW 559
75210: GO 75120
75212: POP
75213: POP
// end ; end ;
75214: LD_VAR 0 1
75218: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75219: LD_INT 0
75221: PPUSH
// if HexInfo ( x , y ) = warehouse then
75222: LD_VAR 0 2
75226: PPUSH
75227: LD_VAR 0 3
75231: PPUSH
75232: CALL_OW 428
75236: PUSH
75237: LD_VAR 0 1
75241: EQUAL
75242: IFFALSE 75269
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75244: LD_ADDR_EXP 111
75248: PUSH
75249: LD_EXP 111
75253: PPUSH
75254: LD_VAR 0 1
75258: PPUSH
75259: LD_INT 0
75261: PPUSH
75262: CALL_OW 1
75266: ST_TO_ADDR
75267: GO 75320
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75269: LD_ADDR_EXP 111
75273: PUSH
75274: LD_EXP 111
75278: PPUSH
75279: LD_VAR 0 1
75283: PPUSH
75284: LD_VAR 0 1
75288: PPUSH
75289: CALL_OW 255
75293: PUSH
75294: LD_VAR 0 1
75298: PUSH
75299: LD_VAR 0 2
75303: PUSH
75304: LD_VAR 0 3
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: PPUSH
75315: CALL_OW 1
75319: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75320: CALL 75329 0 0
// end ;
75324: LD_VAR 0 4
75328: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75329: LD_INT 0
75331: PPUSH
75332: PPUSH
75333: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75334: LD_STRING resetWarehouseGatheringPoints();
75336: PPUSH
75337: CALL_OW 559
// if warehouseGatheringPoints then
75341: LD_EXP 111
75345: IFFALSE 75471
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75347: LD_ADDR_VAR 0 3
75351: PUSH
75352: LD_EXP 111
75356: PPUSH
75357: CALL 58899 0 1
75361: ST_TO_ADDR
// for i := 1 to list do
75362: LD_ADDR_VAR 0 2
75366: PUSH
75367: DOUBLE
75368: LD_INT 1
75370: DEC
75371: ST_TO_ADDR
75372: LD_VAR 0 3
75376: PUSH
75377: FOR_TO
75378: IFFALSE 75469
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75380: LD_STRING setWarehouseGatheringPointXY(
75382: PUSH
75383: LD_VAR 0 3
75387: PUSH
75388: LD_VAR 0 2
75392: ARRAY
75393: PUSH
75394: LD_INT 1
75396: ARRAY
75397: STR
75398: PUSH
75399: LD_STRING ,
75401: STR
75402: PUSH
75403: LD_VAR 0 3
75407: PUSH
75408: LD_VAR 0 2
75412: ARRAY
75413: PUSH
75414: LD_INT 2
75416: ARRAY
75417: STR
75418: PUSH
75419: LD_STRING ,
75421: STR
75422: PUSH
75423: LD_VAR 0 3
75427: PUSH
75428: LD_VAR 0 2
75432: ARRAY
75433: PUSH
75434: LD_INT 3
75436: ARRAY
75437: STR
75438: PUSH
75439: LD_STRING ,
75441: STR
75442: PUSH
75443: LD_VAR 0 3
75447: PUSH
75448: LD_VAR 0 2
75452: ARRAY
75453: PUSH
75454: LD_INT 4
75456: ARRAY
75457: STR
75458: PUSH
75459: LD_STRING )
75461: STR
75462: PPUSH
75463: CALL_OW 559
75467: GO 75377
75469: POP
75470: POP
// end ; end ;
75471: LD_VAR 0 1
75475: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
75476: LD_EXP 111
75480: IFFALSE 76165
75482: GO 75484
75484: DISABLE
75485: LD_INT 0
75487: PPUSH
75488: PPUSH
75489: PPUSH
75490: PPUSH
75491: PPUSH
75492: PPUSH
75493: PPUSH
75494: PPUSH
75495: PPUSH
// begin enable ;
75496: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
75497: LD_ADDR_VAR 0 3
75501: PUSH
75502: LD_EXP 111
75506: PPUSH
75507: CALL 58899 0 1
75511: ST_TO_ADDR
// if not list then
75512: LD_VAR 0 3
75516: NOT
75517: IFFALSE 75521
// exit ;
75519: GO 76165
// for i := 1 to list do
75521: LD_ADDR_VAR 0 1
75525: PUSH
75526: DOUBLE
75527: LD_INT 1
75529: DEC
75530: ST_TO_ADDR
75531: LD_VAR 0 3
75535: PUSH
75536: FOR_TO
75537: IFFALSE 76163
// begin depot := list [ i ] [ 2 ] ;
75539: LD_ADDR_VAR 0 8
75543: PUSH
75544: LD_VAR 0 3
75548: PUSH
75549: LD_VAR 0 1
75553: ARRAY
75554: PUSH
75555: LD_INT 2
75557: ARRAY
75558: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
75559: LD_ADDR_VAR 0 5
75563: PUSH
75564: LD_VAR 0 3
75568: PUSH
75569: LD_VAR 0 1
75573: ARRAY
75574: PUSH
75575: LD_INT 1
75577: ARRAY
75578: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
75579: LD_VAR 0 8
75583: PPUSH
75584: CALL_OW 301
75588: PUSH
75589: LD_VAR 0 5
75593: PUSH
75594: LD_VAR 0 8
75598: PPUSH
75599: CALL_OW 255
75603: NONEQUAL
75604: OR
75605: IFFALSE 75634
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
75607: LD_ADDR_EXP 111
75611: PUSH
75612: LD_EXP 111
75616: PPUSH
75617: LD_VAR 0 8
75621: PPUSH
75622: LD_INT 0
75624: PPUSH
75625: CALL_OW 1
75629: ST_TO_ADDR
// exit ;
75630: POP
75631: POP
75632: GO 76165
// end ; x := list [ i ] [ 3 ] ;
75634: LD_ADDR_VAR 0 6
75638: PUSH
75639: LD_VAR 0 3
75643: PUSH
75644: LD_VAR 0 1
75648: ARRAY
75649: PUSH
75650: LD_INT 3
75652: ARRAY
75653: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
75654: LD_ADDR_VAR 0 7
75658: PUSH
75659: LD_VAR 0 3
75663: PUSH
75664: LD_VAR 0 1
75668: ARRAY
75669: PUSH
75670: LD_INT 4
75672: ARRAY
75673: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
75674: LD_ADDR_VAR 0 9
75678: PUSH
75679: LD_VAR 0 6
75683: PPUSH
75684: LD_VAR 0 7
75688: PPUSH
75689: LD_INT 16
75691: PPUSH
75692: CALL 57483 0 3
75696: ST_TO_ADDR
// if not cratesNearbyPoint then
75697: LD_VAR 0 9
75701: NOT
75702: IFFALSE 75708
// exit ;
75704: POP
75705: POP
75706: GO 76165
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
75708: LD_ADDR_VAR 0 4
75712: PUSH
75713: LD_INT 22
75715: PUSH
75716: LD_VAR 0 5
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: PUSH
75725: LD_INT 3
75727: PUSH
75728: LD_INT 60
75730: PUSH
75731: EMPTY
75732: LIST
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 91
75740: PUSH
75741: LD_VAR 0 8
75745: PUSH
75746: LD_INT 6
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 2
75756: PUSH
75757: LD_INT 25
75759: PUSH
75760: LD_INT 2
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 25
75769: PUSH
75770: LD_INT 16
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: PPUSH
75788: CALL_OW 69
75792: PUSH
75793: LD_VAR 0 8
75797: PPUSH
75798: CALL_OW 313
75802: PPUSH
75803: LD_INT 3
75805: PUSH
75806: LD_INT 60
75808: PUSH
75809: EMPTY
75810: LIST
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: PUSH
75816: LD_INT 2
75818: PUSH
75819: LD_INT 25
75821: PUSH
75822: LD_INT 2
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 25
75831: PUSH
75832: LD_INT 16
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: LIST
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PPUSH
75848: CALL_OW 72
75852: UNION
75853: ST_TO_ADDR
// if tmp then
75854: LD_VAR 0 4
75858: IFFALSE 75938
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75860: LD_ADDR_VAR 0 4
75864: PUSH
75865: LD_VAR 0 4
75869: PPUSH
75870: LD_INT 3
75872: PPUSH
75873: CALL 55446 0 2
75877: ST_TO_ADDR
// for j in tmp do
75878: LD_ADDR_VAR 0 2
75882: PUSH
75883: LD_VAR 0 4
75887: PUSH
75888: FOR_IN
75889: IFFALSE 75932
// begin if IsInUnit ( j ) then
75891: LD_VAR 0 2
75895: PPUSH
75896: CALL_OW 310
75900: IFFALSE 75911
// ComExit ( j ) ;
75902: LD_VAR 0 2
75906: PPUSH
75907: CALL 55529 0 1
// AddComCollect ( j , x , y ) ;
75911: LD_VAR 0 2
75915: PPUSH
75916: LD_VAR 0 6
75920: PPUSH
75921: LD_VAR 0 7
75925: PPUSH
75926: CALL_OW 177
// end ;
75930: GO 75888
75932: POP
75933: POP
// exit ;
75934: POP
75935: POP
75936: GO 76165
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75938: LD_ADDR_VAR 0 4
75942: PUSH
75943: LD_INT 22
75945: PUSH
75946: LD_VAR 0 5
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 91
75957: PUSH
75958: LD_VAR 0 8
75962: PUSH
75963: LD_INT 8
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 2
75973: PUSH
75974: LD_INT 34
75976: PUSH
75977: LD_INT 12
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_INT 34
75986: PUSH
75987: LD_INT 51
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: PUSH
75994: LD_INT 34
75996: PUSH
75997: LD_INT 32
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PUSH
76004: LD_INT 34
76006: PUSH
76007: LD_INT 89
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: LIST
76025: PPUSH
76026: CALL_OW 69
76030: ST_TO_ADDR
// if tmp then
76031: LD_VAR 0 4
76035: IFFALSE 76161
// begin for j in tmp do
76037: LD_ADDR_VAR 0 2
76041: PUSH
76042: LD_VAR 0 4
76046: PUSH
76047: FOR_IN
76048: IFFALSE 76159
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76050: LD_VAR 0 2
76054: PPUSH
76055: CALL_OW 262
76059: PUSH
76060: LD_INT 3
76062: EQUAL
76063: PUSH
76064: LD_VAR 0 2
76068: PPUSH
76069: CALL_OW 261
76073: PUSH
76074: LD_INT 20
76076: GREATER
76077: OR
76078: PUSH
76079: LD_VAR 0 2
76083: PPUSH
76084: CALL_OW 314
76088: NOT
76089: AND
76090: PUSH
76091: LD_VAR 0 2
76095: PPUSH
76096: CALL_OW 263
76100: PUSH
76101: LD_INT 1
76103: NONEQUAL
76104: PUSH
76105: LD_VAR 0 2
76109: PPUSH
76110: CALL_OW 311
76114: OR
76115: AND
76116: IFFALSE 76157
// begin ComCollect ( j , x , y ) ;
76118: LD_VAR 0 2
76122: PPUSH
76123: LD_VAR 0 6
76127: PPUSH
76128: LD_VAR 0 7
76132: PPUSH
76133: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76137: LD_VAR 0 2
76141: PPUSH
76142: LD_VAR 0 8
76146: PPUSH
76147: CALL_OW 172
// exit ;
76151: POP
76152: POP
76153: POP
76154: POP
76155: GO 76165
// end ;
76157: GO 76047
76159: POP
76160: POP
// end ; end ;
76161: GO 75536
76163: POP
76164: POP
// end ; end_of_file
76165: PPOPN 9
76167: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76168: LD_VAR 0 1
76172: PPUSH
76173: LD_VAR 0 2
76177: PPUSH
76178: LD_VAR 0 3
76182: PPUSH
76183: LD_VAR 0 4
76187: PPUSH
76188: LD_VAR 0 5
76192: PPUSH
76193: LD_VAR 0 6
76197: PPUSH
76198: CALL 60393 0 6
// end ;
76202: PPOPN 6
76204: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76205: LD_INT 0
76207: PPUSH
// begin if not units then
76208: LD_VAR 0 1
76212: NOT
76213: IFFALSE 76217
// exit ;
76215: GO 76217
// end ;
76217: PPOPN 7
76219: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76220: CALL 60280 0 0
// end ; end_of_file
76224: PPOPN 1
76226: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76227: LD_VAR 0 1
76231: PUSH
76232: LD_INT 200
76234: DOUBLE
76235: GREATEREQUAL
76236: IFFALSE 76244
76238: LD_INT 299
76240: DOUBLE
76241: LESSEQUAL
76242: IFTRUE 76246
76244: GO 76278
76246: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76247: LD_VAR 0 1
76251: PPUSH
76252: LD_VAR 0 2
76256: PPUSH
76257: LD_VAR 0 3
76261: PPUSH
76262: LD_VAR 0 4
76266: PPUSH
76267: LD_VAR 0 5
76271: PPUSH
76272: CALL 77055 0 5
76276: GO 76355
76278: LD_INT 300
76280: DOUBLE
76281: GREATEREQUAL
76282: IFFALSE 76290
76284: LD_INT 399
76286: DOUBLE
76287: LESSEQUAL
76288: IFTRUE 76292
76290: GO 76354
76292: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76293: LD_VAR 0 1
76297: PPUSH
76298: LD_VAR 0 2
76302: PPUSH
76303: LD_VAR 0 3
76307: PPUSH
76308: LD_VAR 0 4
76312: PPUSH
76313: LD_VAR 0 5
76317: PPUSH
76318: LD_VAR 0 6
76322: PPUSH
76323: LD_VAR 0 7
76327: PPUSH
76328: LD_VAR 0 8
76332: PPUSH
76333: LD_VAR 0 9
76337: PPUSH
76338: LD_VAR 0 10
76342: PPUSH
76343: LD_VAR 0 11
76347: PPUSH
76348: CALL 72741 0 11
76352: GO 76355
76354: POP
// end ;
76355: PPOPN 11
76357: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76358: LD_VAR 0 1
76362: PPUSH
76363: LD_VAR 0 2
76367: PPUSH
76368: LD_VAR 0 3
76372: PPUSH
76373: LD_VAR 0 4
76377: PPUSH
76378: LD_VAR 0 5
76382: PPUSH
76383: CALL 76440 0 5
// end ; end_of_file
76387: PPOPN 5
76389: END
// export function SOS_UnitDestroyed ( un ) ; begin
76390: LD_INT 0
76392: PPUSH
// ComRadiation ( un ) ;
76393: LD_VAR 0 1
76397: PPUSH
76398: CALL 77459 0 1
// end ;
76402: LD_VAR 0 2
76406: RET
// export function SOS_UnitKamikazed ( un ) ; begin
76407: LD_INT 0
76409: PPUSH
// ComRadiation ( un ) ;
76410: LD_VAR 0 1
76414: PPUSH
76415: CALL 77459 0 1
// end ;
76419: LD_VAR 0 2
76423: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
76424: LD_INT 0
76426: PPUSH
// end ;
76427: LD_VAR 0 4
76431: RET
// export function SOS_Command ( cmd ) ; begin
76432: LD_INT 0
76434: PPUSH
// end ;
76435: LD_VAR 0 2
76439: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
76440: LD_INT 0
76442: PPUSH
// end ;
76443: LD_VAR 0 6
76447: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
76448: LD_INT 0
76450: PPUSH
76451: PPUSH
76452: PPUSH
76453: PPUSH
// if not vehicle or not factory then
76454: LD_VAR 0 1
76458: NOT
76459: PUSH
76460: LD_VAR 0 2
76464: NOT
76465: OR
76466: IFFALSE 76470
// exit ;
76468: GO 77050
// if not factoryWaypoints then
76470: LD_EXP 109
76474: NOT
76475: IFFALSE 76479
// exit ;
76477: GO 77050
// for i := 1 to Count ( factoryWaypoints ) do
76479: LD_ADDR_VAR 0 4
76483: PUSH
76484: DOUBLE
76485: LD_INT 1
76487: DEC
76488: ST_TO_ADDR
76489: LD_EXP 109
76493: PPUSH
76494: CALL 19450 0 1
76498: PUSH
76499: FOR_TO
76500: IFFALSE 77048
// if factoryWaypoints [ i ] [ 2 ] = factory then
76502: LD_EXP 109
76506: PUSH
76507: LD_VAR 0 4
76511: ARRAY
76512: PUSH
76513: LD_INT 2
76515: ARRAY
76516: PUSH
76517: LD_VAR 0 2
76521: EQUAL
76522: IFFALSE 77046
// begin if GetControl ( vehicle ) = control_manual then
76524: LD_VAR 0 1
76528: PPUSH
76529: CALL_OW 263
76533: PUSH
76534: LD_INT 1
76536: EQUAL
76537: IFFALSE 76899
// begin driver := IsDrivenBy ( vehicle ) ;
76539: LD_ADDR_VAR 0 5
76543: PUSH
76544: LD_VAR 0 1
76548: PPUSH
76549: CALL_OW 311
76553: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
76554: LD_VAR 0 5
76558: PUSH
76559: LD_EXP 110
76563: IN
76564: PUSH
76565: LD_VAR 0 1
76569: PUSH
76570: LD_EXP 110
76574: IN
76575: OR
76576: IFFALSE 76582
// exit ;
76578: POP
76579: POP
76580: GO 77050
// if not HasTask ( driver ) then
76582: LD_VAR 0 5
76586: PPUSH
76587: CALL_OW 314
76591: NOT
76592: IFFALSE 76897
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
76594: LD_ADDR_EXP 110
76598: PUSH
76599: LD_EXP 110
76603: PPUSH
76604: LD_VAR 0 5
76608: PPUSH
76609: CALL 55131 0 2
76613: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
76614: LD_ADDR_EXP 110
76618: PUSH
76619: LD_EXP 110
76623: PPUSH
76624: LD_VAR 0 1
76628: PPUSH
76629: CALL 55131 0 2
76633: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76634: LD_ADDR_VAR 0 6
76638: PUSH
76639: LD_EXP 109
76643: PUSH
76644: LD_VAR 0 4
76648: ARRAY
76649: PUSH
76650: LD_INT 3
76652: ARRAY
76653: PPUSH
76654: LD_EXP 109
76658: PUSH
76659: LD_VAR 0 4
76663: ARRAY
76664: PUSH
76665: LD_INT 4
76667: ARRAY
76668: PPUSH
76669: CALL_OW 428
76673: ST_TO_ADDR
// if hex then
76674: LD_VAR 0 6
76678: IFFALSE 76696
// ComMoveUnit ( driver , hex ) else
76680: LD_VAR 0 5
76684: PPUSH
76685: LD_VAR 0 6
76689: PPUSH
76690: CALL_OW 112
76694: GO 76780
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
76696: LD_VAR 0 1
76700: PPUSH
76701: LD_EXP 109
76705: PUSH
76706: LD_VAR 0 4
76710: ARRAY
76711: PUSH
76712: LD_INT 3
76714: ARRAY
76715: PPUSH
76716: LD_EXP 109
76720: PUSH
76721: LD_VAR 0 4
76725: ARRAY
76726: PUSH
76727: LD_INT 4
76729: ARRAY
76730: PPUSH
76731: CALL_OW 297
76735: PUSH
76736: LD_INT 0
76738: GREATER
76739: IFFALSE 76780
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76741: LD_VAR 0 5
76745: PPUSH
76746: LD_EXP 109
76750: PUSH
76751: LD_VAR 0 4
76755: ARRAY
76756: PUSH
76757: LD_INT 3
76759: ARRAY
76760: PPUSH
76761: LD_EXP 109
76765: PUSH
76766: LD_VAR 0 4
76770: ARRAY
76771: PUSH
76772: LD_INT 4
76774: ARRAY
76775: PPUSH
76776: CALL_OW 111
// AddComExitVehicle ( driver ) ;
76780: LD_VAR 0 5
76784: PPUSH
76785: CALL_OW 181
// if Multiplayer then
76789: LD_OWVAR 4
76793: IFFALSE 76842
// begin repeat wait ( 10 ) ;
76795: LD_INT 10
76797: PPUSH
76798: CALL_OW 67
// until not IsInUnit ( driver ) ;
76802: LD_VAR 0 5
76806: PPUSH
76807: CALL_OW 310
76811: NOT
76812: IFFALSE 76795
// if not HasTask ( driver ) then
76814: LD_VAR 0 5
76818: PPUSH
76819: CALL_OW 314
76823: NOT
76824: IFFALSE 76840
// ComEnterUnit ( driver , factory ) ;
76826: LD_VAR 0 5
76830: PPUSH
76831: LD_VAR 0 2
76835: PPUSH
76836: CALL_OW 120
// end else
76840: GO 76856
// AddComEnterUnit ( driver , factory ) ;
76842: LD_VAR 0 5
76846: PPUSH
76847: LD_VAR 0 2
76851: PPUSH
76852: CALL_OW 180
// wait ( 0 0$1 ) ;
76856: LD_INT 35
76858: PPUSH
76859: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
76863: LD_ADDR_EXP 110
76867: PUSH
76868: LD_EXP 110
76872: PUSH
76873: LD_VAR 0 5
76877: DIFF
76878: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
76879: LD_ADDR_EXP 110
76883: PUSH
76884: LD_EXP 110
76888: PUSH
76889: LD_VAR 0 1
76893: DIFF
76894: ST_TO_ADDR
// break ;
76895: GO 77048
// end ; end else
76897: GO 77046
// if GetControl ( vehicle ) = control_remote then
76899: LD_VAR 0 1
76903: PPUSH
76904: CALL_OW 263
76908: PUSH
76909: LD_INT 2
76911: EQUAL
76912: IFFALSE 76998
// begin wait ( 0 0$2 ) ;
76914: LD_INT 70
76916: PPUSH
76917: CALL_OW 67
// repeat wait ( 10 ) ;
76921: LD_INT 10
76923: PPUSH
76924: CALL_OW 67
// Connect ( vehicle ) ;
76928: LD_VAR 0 1
76932: PPUSH
76933: CALL 25656 0 1
// until IsControledBy ( vehicle ) ;
76937: LD_VAR 0 1
76941: PPUSH
76942: CALL_OW 312
76946: IFFALSE 76921
// wait ( 10 ) ;
76948: LD_INT 10
76950: PPUSH
76951: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76955: LD_VAR 0 1
76959: PPUSH
76960: LD_EXP 109
76964: PUSH
76965: LD_VAR 0 4
76969: ARRAY
76970: PUSH
76971: LD_INT 3
76973: ARRAY
76974: PPUSH
76975: LD_EXP 109
76979: PUSH
76980: LD_VAR 0 4
76984: ARRAY
76985: PUSH
76986: LD_INT 4
76988: ARRAY
76989: PPUSH
76990: CALL_OW 111
// break ;
76994: GO 77048
// end else
76996: GO 77046
// begin wait ( 0 0$3 ) ;
76998: LD_INT 105
77000: PPUSH
77001: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77005: LD_VAR 0 1
77009: PPUSH
77010: LD_EXP 109
77014: PUSH
77015: LD_VAR 0 4
77019: ARRAY
77020: PUSH
77021: LD_INT 3
77023: ARRAY
77024: PPUSH
77025: LD_EXP 109
77029: PUSH
77030: LD_VAR 0 4
77034: ARRAY
77035: PUSH
77036: LD_INT 4
77038: ARRAY
77039: PPUSH
77040: CALL_OW 111
// break ;
77044: GO 77048
// end ; end ;
77046: GO 76499
77048: POP
77049: POP
// end ;
77050: LD_VAR 0 3
77054: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77055: LD_INT 0
77057: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77058: LD_VAR 0 1
77062: PUSH
77063: LD_INT 250
77065: EQUAL
77066: PUSH
77067: LD_VAR 0 2
77071: PPUSH
77072: CALL_OW 264
77076: PUSH
77077: LD_INT 81
77079: EQUAL
77080: AND
77081: IFFALSE 77102
// MinerPlaceMine ( unit , x , y ) ;
77083: LD_VAR 0 2
77087: PPUSH
77088: LD_VAR 0 4
77092: PPUSH
77093: LD_VAR 0 5
77097: PPUSH
77098: CALL 80194 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77102: LD_VAR 0 1
77106: PUSH
77107: LD_INT 251
77109: EQUAL
77110: PUSH
77111: LD_VAR 0 2
77115: PPUSH
77116: CALL_OW 264
77120: PUSH
77121: LD_INT 81
77123: EQUAL
77124: AND
77125: IFFALSE 77146
// MinerDetonateMine ( unit , x , y ) ;
77127: LD_VAR 0 2
77131: PPUSH
77132: LD_VAR 0 4
77136: PPUSH
77137: LD_VAR 0 5
77141: PPUSH
77142: CALL 80469 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77146: LD_VAR 0 1
77150: PUSH
77151: LD_INT 252
77153: EQUAL
77154: PUSH
77155: LD_VAR 0 2
77159: PPUSH
77160: CALL_OW 264
77164: PUSH
77165: LD_INT 81
77167: EQUAL
77168: AND
77169: IFFALSE 77190
// MinerCreateMinefield ( unit , x , y ) ;
77171: LD_VAR 0 2
77175: PPUSH
77176: LD_VAR 0 4
77180: PPUSH
77181: LD_VAR 0 5
77185: PPUSH
77186: CALL 80886 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77190: LD_VAR 0 1
77194: PUSH
77195: LD_INT 253
77197: EQUAL
77198: PUSH
77199: LD_VAR 0 2
77203: PPUSH
77204: CALL_OW 257
77208: PUSH
77209: LD_INT 5
77211: EQUAL
77212: AND
77213: IFFALSE 77234
// ComBinocular ( unit , x , y ) ;
77215: LD_VAR 0 2
77219: PPUSH
77220: LD_VAR 0 4
77224: PPUSH
77225: LD_VAR 0 5
77229: PPUSH
77230: CALL 81255 0 3
// if selectedUnit then
77234: LD_VAR 0 3
77238: IFFALSE 77294
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77240: LD_VAR 0 1
77244: PUSH
77245: LD_INT 254
77247: EQUAL
77248: PUSH
77249: LD_VAR 0 2
77253: PPUSH
77254: CALL_OW 264
77258: PUSH
77259: LD_INT 99
77261: EQUAL
77262: AND
77263: PUSH
77264: LD_VAR 0 3
77268: PPUSH
77269: CALL_OW 263
77273: PUSH
77274: LD_INT 3
77276: EQUAL
77277: AND
77278: IFFALSE 77294
// HackDestroyVehicle ( unit , selectedUnit ) ;
77280: LD_VAR 0 2
77284: PPUSH
77285: LD_VAR 0 3
77289: PPUSH
77290: CALL 79558 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77294: LD_VAR 0 1
77298: PUSH
77299: LD_INT 255
77301: EQUAL
77302: PUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: CALL_OW 264
77312: PUSH
77313: LD_INT 14
77315: PUSH
77316: LD_INT 53
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: IN
77323: AND
77324: PUSH
77325: LD_VAR 0 4
77329: PPUSH
77330: LD_VAR 0 5
77334: PPUSH
77335: CALL_OW 488
77339: AND
77340: IFFALSE 77364
// CutTreeXYR ( unit , x , y , 12 ) ;
77342: LD_VAR 0 2
77346: PPUSH
77347: LD_VAR 0 4
77351: PPUSH
77352: LD_VAR 0 5
77356: PPUSH
77357: LD_INT 12
77359: PPUSH
77360: CALL 77555 0 4
// if cmd = 256 then
77364: LD_VAR 0 1
77368: PUSH
77369: LD_INT 256
77371: EQUAL
77372: IFFALSE 77393
// SetFactoryWaypoint ( unit , x , y ) ;
77374: LD_VAR 0 2
77378: PPUSH
77379: LD_VAR 0 4
77383: PPUSH
77384: LD_VAR 0 5
77388: PPUSH
77389: CALL 74729 0 3
// if cmd = 257 then
77393: LD_VAR 0 1
77397: PUSH
77398: LD_INT 257
77400: EQUAL
77401: IFFALSE 77422
// SetWarehouseGatheringPoint ( unit , x , y ) ;
77403: LD_VAR 0 2
77407: PPUSH
77408: LD_VAR 0 4
77412: PPUSH
77413: LD_VAR 0 5
77417: PPUSH
77418: CALL 75219 0 3
// if cmd = 258 then
77422: LD_VAR 0 1
77426: PUSH
77427: LD_INT 258
77429: EQUAL
77430: IFFALSE 77454
// BurnTreeXYR ( unit , x , y , 8 ) ;
77432: LD_VAR 0 2
77436: PPUSH
77437: LD_VAR 0 4
77441: PPUSH
77442: LD_VAR 0 5
77446: PPUSH
77447: LD_INT 8
77449: PPUSH
77450: CALL 77949 0 4
// end ;
77454: LD_VAR 0 6
77458: RET
// export function ComRadiation ( un ) ; var eff ; begin
77459: LD_INT 0
77461: PPUSH
77462: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
77463: LD_VAR 0 1
77467: PPUSH
77468: CALL_OW 264
77472: PUSH
77473: LD_INT 91
77475: NONEQUAL
77476: IFFALSE 77480
// exit ;
77478: GO 77550
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77480: LD_INT 68
77482: PPUSH
77483: LD_VAR 0 1
77487: PPUSH
77488: CALL_OW 255
77492: PPUSH
77493: CALL_OW 321
77497: PUSH
77498: LD_INT 2
77500: EQUAL
77501: IFFALSE 77513
// eff := 50 else
77503: LD_ADDR_VAR 0 3
77507: PUSH
77508: LD_INT 50
77510: ST_TO_ADDR
77511: GO 77521
// eff := 25 ;
77513: LD_ADDR_VAR 0 3
77517: PUSH
77518: LD_INT 25
77520: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77521: LD_VAR 0 1
77525: PPUSH
77526: CALL_OW 250
77530: PPUSH
77531: LD_VAR 0 1
77535: PPUSH
77536: CALL_OW 251
77540: PPUSH
77541: LD_VAR 0 3
77545: PPUSH
77546: CALL_OW 495
// end ;
77550: LD_VAR 0 2
77554: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77555: LD_INT 0
77557: PPUSH
77558: PPUSH
77559: PPUSH
77560: PPUSH
77561: PPUSH
77562: PPUSH
77563: PPUSH
77564: PPUSH
77565: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
77566: LD_VAR 0 1
77570: PPUSH
77571: CALL_OW 302
77575: NOT
77576: PUSH
77577: LD_VAR 0 2
77581: PPUSH
77582: LD_VAR 0 3
77586: PPUSH
77587: CALL_OW 488
77591: NOT
77592: OR
77593: PUSH
77594: LD_VAR 0 4
77598: NOT
77599: OR
77600: IFFALSE 77604
// exit ;
77602: GO 77944
// list := [ ] ;
77604: LD_ADDR_VAR 0 13
77608: PUSH
77609: EMPTY
77610: ST_TO_ADDR
// if x - r < 0 then
77611: LD_VAR 0 2
77615: PUSH
77616: LD_VAR 0 4
77620: MINUS
77621: PUSH
77622: LD_INT 0
77624: LESS
77625: IFFALSE 77637
// min_x := 0 else
77627: LD_ADDR_VAR 0 7
77631: PUSH
77632: LD_INT 0
77634: ST_TO_ADDR
77635: GO 77653
// min_x := x - r ;
77637: LD_ADDR_VAR 0 7
77641: PUSH
77642: LD_VAR 0 2
77646: PUSH
77647: LD_VAR 0 4
77651: MINUS
77652: ST_TO_ADDR
// if y - r < 0 then
77653: LD_VAR 0 3
77657: PUSH
77658: LD_VAR 0 4
77662: MINUS
77663: PUSH
77664: LD_INT 0
77666: LESS
77667: IFFALSE 77679
// min_y := 0 else
77669: LD_ADDR_VAR 0 8
77673: PUSH
77674: LD_INT 0
77676: ST_TO_ADDR
77677: GO 77695
// min_y := y - r ;
77679: LD_ADDR_VAR 0 8
77683: PUSH
77684: LD_VAR 0 3
77688: PUSH
77689: LD_VAR 0 4
77693: MINUS
77694: ST_TO_ADDR
// max_x := x + r ;
77695: LD_ADDR_VAR 0 9
77699: PUSH
77700: LD_VAR 0 2
77704: PUSH
77705: LD_VAR 0 4
77709: PLUS
77710: ST_TO_ADDR
// max_y := y + r ;
77711: LD_ADDR_VAR 0 10
77715: PUSH
77716: LD_VAR 0 3
77720: PUSH
77721: LD_VAR 0 4
77725: PLUS
77726: ST_TO_ADDR
// for _x = min_x to max_x do
77727: LD_ADDR_VAR 0 11
77731: PUSH
77732: DOUBLE
77733: LD_VAR 0 7
77737: DEC
77738: ST_TO_ADDR
77739: LD_VAR 0 9
77743: PUSH
77744: FOR_TO
77745: IFFALSE 77862
// for _y = min_y to max_y do
77747: LD_ADDR_VAR 0 12
77751: PUSH
77752: DOUBLE
77753: LD_VAR 0 8
77757: DEC
77758: ST_TO_ADDR
77759: LD_VAR 0 10
77763: PUSH
77764: FOR_TO
77765: IFFALSE 77858
// begin if not ValidHex ( _x , _y ) then
77767: LD_VAR 0 11
77771: PPUSH
77772: LD_VAR 0 12
77776: PPUSH
77777: CALL_OW 488
77781: NOT
77782: IFFALSE 77786
// continue ;
77784: GO 77764
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77786: LD_VAR 0 11
77790: PPUSH
77791: LD_VAR 0 12
77795: PPUSH
77796: CALL_OW 351
77800: PUSH
77801: LD_VAR 0 11
77805: PPUSH
77806: LD_VAR 0 12
77810: PPUSH
77811: CALL_OW 554
77815: AND
77816: IFFALSE 77856
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77818: LD_ADDR_VAR 0 13
77822: PUSH
77823: LD_VAR 0 13
77827: PPUSH
77828: LD_VAR 0 13
77832: PUSH
77833: LD_INT 1
77835: PLUS
77836: PPUSH
77837: LD_VAR 0 11
77841: PUSH
77842: LD_VAR 0 12
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PPUSH
77851: CALL_OW 2
77855: ST_TO_ADDR
// end ;
77856: GO 77764
77858: POP
77859: POP
77860: GO 77744
77862: POP
77863: POP
// if not list then
77864: LD_VAR 0 13
77868: NOT
77869: IFFALSE 77873
// exit ;
77871: GO 77944
// for i in list do
77873: LD_ADDR_VAR 0 6
77877: PUSH
77878: LD_VAR 0 13
77882: PUSH
77883: FOR_IN
77884: IFFALSE 77942
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77886: LD_VAR 0 1
77890: PPUSH
77891: LD_STRING M
77893: PUSH
77894: LD_VAR 0 6
77898: PUSH
77899: LD_INT 1
77901: ARRAY
77902: PUSH
77903: LD_VAR 0 6
77907: PUSH
77908: LD_INT 2
77910: ARRAY
77911: PUSH
77912: LD_INT 0
77914: PUSH
77915: LD_INT 0
77917: PUSH
77918: LD_INT 0
77920: PUSH
77921: LD_INT 0
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: LIST
77930: LIST
77931: LIST
77932: PUSH
77933: EMPTY
77934: LIST
77935: PPUSH
77936: CALL_OW 447
77940: GO 77883
77942: POP
77943: POP
// end ;
77944: LD_VAR 0 5
77948: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
77949: LD_INT 0
77951: PPUSH
77952: PPUSH
77953: PPUSH
77954: PPUSH
77955: PPUSH
77956: PPUSH
77957: PPUSH
77958: PPUSH
77959: PPUSH
77960: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77961: LD_VAR 0 1
77965: PPUSH
77966: CALL_OW 302
77970: NOT
77971: PUSH
77972: LD_VAR 0 2
77976: PPUSH
77977: LD_VAR 0 3
77981: PPUSH
77982: CALL_OW 488
77986: NOT
77987: OR
77988: PUSH
77989: LD_VAR 0 4
77993: NOT
77994: OR
77995: IFFALSE 77999
// exit ;
77997: GO 78512
// list := [ ] ;
77999: LD_ADDR_VAR 0 13
78003: PUSH
78004: EMPTY
78005: ST_TO_ADDR
// if x - r < 0 then
78006: LD_VAR 0 2
78010: PUSH
78011: LD_VAR 0 4
78015: MINUS
78016: PUSH
78017: LD_INT 0
78019: LESS
78020: IFFALSE 78032
// min_x := 0 else
78022: LD_ADDR_VAR 0 7
78026: PUSH
78027: LD_INT 0
78029: ST_TO_ADDR
78030: GO 78048
// min_x := x - r ;
78032: LD_ADDR_VAR 0 7
78036: PUSH
78037: LD_VAR 0 2
78041: PUSH
78042: LD_VAR 0 4
78046: MINUS
78047: ST_TO_ADDR
// if y - r < 0 then
78048: LD_VAR 0 3
78052: PUSH
78053: LD_VAR 0 4
78057: MINUS
78058: PUSH
78059: LD_INT 0
78061: LESS
78062: IFFALSE 78074
// min_y := 0 else
78064: LD_ADDR_VAR 0 8
78068: PUSH
78069: LD_INT 0
78071: ST_TO_ADDR
78072: GO 78090
// min_y := y - r ;
78074: LD_ADDR_VAR 0 8
78078: PUSH
78079: LD_VAR 0 3
78083: PUSH
78084: LD_VAR 0 4
78088: MINUS
78089: ST_TO_ADDR
// max_x := x + r ;
78090: LD_ADDR_VAR 0 9
78094: PUSH
78095: LD_VAR 0 2
78099: PUSH
78100: LD_VAR 0 4
78104: PLUS
78105: ST_TO_ADDR
// max_y := y + r ;
78106: LD_ADDR_VAR 0 10
78110: PUSH
78111: LD_VAR 0 3
78115: PUSH
78116: LD_VAR 0 4
78120: PLUS
78121: ST_TO_ADDR
// for _x = min_x to max_x do
78122: LD_ADDR_VAR 0 11
78126: PUSH
78127: DOUBLE
78128: LD_VAR 0 7
78132: DEC
78133: ST_TO_ADDR
78134: LD_VAR 0 9
78138: PUSH
78139: FOR_TO
78140: IFFALSE 78257
// for _y = min_y to max_y do
78142: LD_ADDR_VAR 0 12
78146: PUSH
78147: DOUBLE
78148: LD_VAR 0 8
78152: DEC
78153: ST_TO_ADDR
78154: LD_VAR 0 10
78158: PUSH
78159: FOR_TO
78160: IFFALSE 78253
// begin if not ValidHex ( _x , _y ) then
78162: LD_VAR 0 11
78166: PPUSH
78167: LD_VAR 0 12
78171: PPUSH
78172: CALL_OW 488
78176: NOT
78177: IFFALSE 78181
// continue ;
78179: GO 78159
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78181: LD_VAR 0 11
78185: PPUSH
78186: LD_VAR 0 12
78190: PPUSH
78191: CALL_OW 351
78195: PUSH
78196: LD_VAR 0 11
78200: PPUSH
78201: LD_VAR 0 12
78205: PPUSH
78206: CALL_OW 554
78210: AND
78211: IFFALSE 78251
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78213: LD_ADDR_VAR 0 13
78217: PUSH
78218: LD_VAR 0 13
78222: PPUSH
78223: LD_VAR 0 13
78227: PUSH
78228: LD_INT 1
78230: PLUS
78231: PPUSH
78232: LD_VAR 0 11
78236: PUSH
78237: LD_VAR 0 12
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PPUSH
78246: CALL_OW 2
78250: ST_TO_ADDR
// end ;
78251: GO 78159
78253: POP
78254: POP
78255: GO 78139
78257: POP
78258: POP
// if not list then
78259: LD_VAR 0 13
78263: NOT
78264: IFFALSE 78268
// exit ;
78266: GO 78512
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
78268: LD_ADDR_VAR 0 13
78272: PUSH
78273: LD_VAR 0 1
78277: PPUSH
78278: LD_VAR 0 13
78282: PPUSH
78283: LD_INT 1
78285: PPUSH
78286: LD_INT 1
78288: PPUSH
78289: CALL 22798 0 4
78293: ST_TO_ADDR
// ComStop ( flame ) ;
78294: LD_VAR 0 1
78298: PPUSH
78299: CALL_OW 141
// for i in list do
78303: LD_ADDR_VAR 0 6
78307: PUSH
78308: LD_VAR 0 13
78312: PUSH
78313: FOR_IN
78314: IFFALSE 78345
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
78316: LD_VAR 0 1
78320: PPUSH
78321: LD_VAR 0 6
78325: PUSH
78326: LD_INT 1
78328: ARRAY
78329: PPUSH
78330: LD_VAR 0 6
78334: PUSH
78335: LD_INT 2
78337: ARRAY
78338: PPUSH
78339: CALL_OW 176
78343: GO 78313
78345: POP
78346: POP
// repeat wait ( 0 0$1 ) ;
78347: LD_INT 35
78349: PPUSH
78350: CALL_OW 67
// task := GetTaskList ( flame ) ;
78354: LD_ADDR_VAR 0 14
78358: PUSH
78359: LD_VAR 0 1
78363: PPUSH
78364: CALL_OW 437
78368: ST_TO_ADDR
// if not task then
78369: LD_VAR 0 14
78373: NOT
78374: IFFALSE 78378
// exit ;
78376: GO 78512
// if task [ 1 ] [ 1 ] <> | then
78378: LD_VAR 0 14
78382: PUSH
78383: LD_INT 1
78385: ARRAY
78386: PUSH
78387: LD_INT 1
78389: ARRAY
78390: PUSH
78391: LD_STRING |
78393: NONEQUAL
78394: IFFALSE 78398
// exit ;
78396: GO 78512
// _x := task [ 1 ] [ 2 ] ;
78398: LD_ADDR_VAR 0 11
78402: PUSH
78403: LD_VAR 0 14
78407: PUSH
78408: LD_INT 1
78410: ARRAY
78411: PUSH
78412: LD_INT 2
78414: ARRAY
78415: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
78416: LD_ADDR_VAR 0 12
78420: PUSH
78421: LD_VAR 0 14
78425: PUSH
78426: LD_INT 1
78428: ARRAY
78429: PUSH
78430: LD_INT 3
78432: ARRAY
78433: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
78434: LD_VAR 0 11
78438: PPUSH
78439: LD_VAR 0 12
78443: PPUSH
78444: CALL_OW 351
78448: NOT
78449: PUSH
78450: LD_VAR 0 11
78454: PPUSH
78455: LD_VAR 0 12
78459: PPUSH
78460: CALL_OW 554
78464: NOT
78465: OR
78466: IFFALSE 78500
// begin task := Delete ( task , 1 ) ;
78468: LD_ADDR_VAR 0 14
78472: PUSH
78473: LD_VAR 0 14
78477: PPUSH
78478: LD_INT 1
78480: PPUSH
78481: CALL_OW 3
78485: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
78486: LD_VAR 0 1
78490: PPUSH
78491: LD_VAR 0 14
78495: PPUSH
78496: CALL_OW 446
// end ; until not HasTask ( flame ) ;
78500: LD_VAR 0 1
78504: PPUSH
78505: CALL_OW 314
78509: NOT
78510: IFFALSE 78347
// end ;
78512: LD_VAR 0 5
78516: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78517: LD_EXP 113
78521: NOT
78522: IFFALSE 78572
78524: GO 78526
78526: DISABLE
// begin initHack := true ;
78527: LD_ADDR_EXP 113
78531: PUSH
78532: LD_INT 1
78534: ST_TO_ADDR
// hackTanks := [ ] ;
78535: LD_ADDR_EXP 114
78539: PUSH
78540: EMPTY
78541: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78542: LD_ADDR_EXP 115
78546: PUSH
78547: EMPTY
78548: ST_TO_ADDR
// hackLimit := 3 ;
78549: LD_ADDR_EXP 116
78553: PUSH
78554: LD_INT 3
78556: ST_TO_ADDR
// hackDist := 12 ;
78557: LD_ADDR_EXP 117
78561: PUSH
78562: LD_INT 12
78564: ST_TO_ADDR
// hackCounter := [ ] ;
78565: LD_ADDR_EXP 118
78569: PUSH
78570: EMPTY
78571: ST_TO_ADDR
// end ;
78572: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78573: LD_EXP 113
78577: PUSH
78578: LD_INT 34
78580: PUSH
78581: LD_INT 99
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PPUSH
78588: CALL_OW 69
78592: AND
78593: IFFALSE 78846
78595: GO 78597
78597: DISABLE
78598: LD_INT 0
78600: PPUSH
78601: PPUSH
// begin enable ;
78602: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78603: LD_ADDR_VAR 0 1
78607: PUSH
78608: LD_INT 34
78610: PUSH
78611: LD_INT 99
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: PPUSH
78618: CALL_OW 69
78622: PUSH
78623: FOR_IN
78624: IFFALSE 78844
// begin if not i in hackTanks then
78626: LD_VAR 0 1
78630: PUSH
78631: LD_EXP 114
78635: IN
78636: NOT
78637: IFFALSE 78720
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78639: LD_ADDR_EXP 114
78643: PUSH
78644: LD_EXP 114
78648: PPUSH
78649: LD_EXP 114
78653: PUSH
78654: LD_INT 1
78656: PLUS
78657: PPUSH
78658: LD_VAR 0 1
78662: PPUSH
78663: CALL_OW 1
78667: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78668: LD_ADDR_EXP 115
78672: PUSH
78673: LD_EXP 115
78677: PPUSH
78678: LD_EXP 115
78682: PUSH
78683: LD_INT 1
78685: PLUS
78686: PPUSH
78687: EMPTY
78688: PPUSH
78689: CALL_OW 1
78693: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78694: LD_ADDR_EXP 118
78698: PUSH
78699: LD_EXP 118
78703: PPUSH
78704: LD_EXP 118
78708: PUSH
78709: LD_INT 1
78711: PLUS
78712: PPUSH
78713: EMPTY
78714: PPUSH
78715: CALL_OW 1
78719: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78720: LD_VAR 0 1
78724: PPUSH
78725: CALL_OW 302
78729: NOT
78730: IFFALSE 78743
// begin HackUnlinkAll ( i ) ;
78732: LD_VAR 0 1
78736: PPUSH
78737: CALL 78849 0 1
// continue ;
78741: GO 78623
// end ; HackCheckCapturedStatus ( i ) ;
78743: LD_VAR 0 1
78747: PPUSH
78748: CALL 79292 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78752: LD_ADDR_VAR 0 2
78756: PUSH
78757: LD_INT 81
78759: PUSH
78760: LD_VAR 0 1
78764: PPUSH
78765: CALL_OW 255
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: LD_INT 33
78776: PUSH
78777: LD_INT 3
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 91
78786: PUSH
78787: LD_VAR 0 1
78791: PUSH
78792: LD_EXP 117
78796: PUSH
78797: EMPTY
78798: LIST
78799: LIST
78800: LIST
78801: PUSH
78802: LD_INT 50
78804: PUSH
78805: EMPTY
78806: LIST
78807: PUSH
78808: EMPTY
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: PPUSH
78814: CALL_OW 69
78818: ST_TO_ADDR
// if not tmp then
78819: LD_VAR 0 2
78823: NOT
78824: IFFALSE 78828
// continue ;
78826: GO 78623
// HackLink ( i , tmp ) ;
78828: LD_VAR 0 1
78832: PPUSH
78833: LD_VAR 0 2
78837: PPUSH
78838: CALL 78985 0 2
// end ;
78842: GO 78623
78844: POP
78845: POP
// end ;
78846: PPOPN 2
78848: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78849: LD_INT 0
78851: PPUSH
78852: PPUSH
78853: PPUSH
// if not hack in hackTanks then
78854: LD_VAR 0 1
78858: PUSH
78859: LD_EXP 114
78863: IN
78864: NOT
78865: IFFALSE 78869
// exit ;
78867: GO 78980
// index := GetElementIndex ( hackTanks , hack ) ;
78869: LD_ADDR_VAR 0 4
78873: PUSH
78874: LD_EXP 114
78878: PPUSH
78879: LD_VAR 0 1
78883: PPUSH
78884: CALL 22095 0 2
78888: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78889: LD_EXP 115
78893: PUSH
78894: LD_VAR 0 4
78898: ARRAY
78899: IFFALSE 78980
// begin for i in hackTanksCaptured [ index ] do
78901: LD_ADDR_VAR 0 3
78905: PUSH
78906: LD_EXP 115
78910: PUSH
78911: LD_VAR 0 4
78915: ARRAY
78916: PUSH
78917: FOR_IN
78918: IFFALSE 78944
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78920: LD_VAR 0 3
78924: PUSH
78925: LD_INT 1
78927: ARRAY
78928: PPUSH
78929: LD_VAR 0 3
78933: PUSH
78934: LD_INT 2
78936: ARRAY
78937: PPUSH
78938: CALL_OW 235
78942: GO 78917
78944: POP
78945: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78946: LD_ADDR_EXP 115
78950: PUSH
78951: LD_EXP 115
78955: PPUSH
78956: LD_VAR 0 4
78960: PPUSH
78961: EMPTY
78962: PPUSH
78963: CALL_OW 1
78967: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78968: LD_VAR 0 1
78972: PPUSH
78973: LD_INT 0
78975: PPUSH
78976: CALL_OW 505
// end ; end ;
78980: LD_VAR 0 2
78984: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78985: LD_INT 0
78987: PPUSH
78988: PPUSH
78989: PPUSH
// if not hack in hackTanks or not vehicles then
78990: LD_VAR 0 1
78994: PUSH
78995: LD_EXP 114
78999: IN
79000: NOT
79001: PUSH
79002: LD_VAR 0 2
79006: NOT
79007: OR
79008: IFFALSE 79012
// exit ;
79010: GO 79287
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79012: LD_ADDR_VAR 0 2
79016: PUSH
79017: LD_VAR 0 1
79021: PPUSH
79022: LD_VAR 0 2
79026: PPUSH
79027: LD_INT 1
79029: PPUSH
79030: LD_INT 1
79032: PPUSH
79033: CALL 22745 0 4
79037: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79038: LD_ADDR_VAR 0 5
79042: PUSH
79043: LD_EXP 114
79047: PPUSH
79048: LD_VAR 0 1
79052: PPUSH
79053: CALL 22095 0 2
79057: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79058: LD_EXP 115
79062: PUSH
79063: LD_VAR 0 5
79067: ARRAY
79068: PUSH
79069: LD_EXP 116
79073: LESS
79074: IFFALSE 79263
// begin for i := 1 to vehicles do
79076: LD_ADDR_VAR 0 4
79080: PUSH
79081: DOUBLE
79082: LD_INT 1
79084: DEC
79085: ST_TO_ADDR
79086: LD_VAR 0 2
79090: PUSH
79091: FOR_TO
79092: IFFALSE 79261
// begin if hackTanksCaptured [ index ] = hackLimit then
79094: LD_EXP 115
79098: PUSH
79099: LD_VAR 0 5
79103: ARRAY
79104: PUSH
79105: LD_EXP 116
79109: EQUAL
79110: IFFALSE 79114
// break ;
79112: GO 79261
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79114: LD_ADDR_EXP 118
79118: PUSH
79119: LD_EXP 118
79123: PPUSH
79124: LD_VAR 0 5
79128: PPUSH
79129: LD_EXP 118
79133: PUSH
79134: LD_VAR 0 5
79138: ARRAY
79139: PUSH
79140: LD_INT 1
79142: PLUS
79143: PPUSH
79144: CALL_OW 1
79148: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79149: LD_ADDR_EXP 115
79153: PUSH
79154: LD_EXP 115
79158: PPUSH
79159: LD_VAR 0 5
79163: PUSH
79164: LD_EXP 115
79168: PUSH
79169: LD_VAR 0 5
79173: ARRAY
79174: PUSH
79175: LD_INT 1
79177: PLUS
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PPUSH
79183: LD_VAR 0 2
79187: PUSH
79188: LD_VAR 0 4
79192: ARRAY
79193: PUSH
79194: LD_VAR 0 2
79198: PUSH
79199: LD_VAR 0 4
79203: ARRAY
79204: PPUSH
79205: CALL_OW 255
79209: PUSH
79210: EMPTY
79211: LIST
79212: LIST
79213: PPUSH
79214: CALL 22310 0 3
79218: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79219: LD_VAR 0 2
79223: PUSH
79224: LD_VAR 0 4
79228: ARRAY
79229: PPUSH
79230: LD_VAR 0 1
79234: PPUSH
79235: CALL_OW 255
79239: PPUSH
79240: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79244: LD_VAR 0 2
79248: PUSH
79249: LD_VAR 0 4
79253: ARRAY
79254: PPUSH
79255: CALL_OW 141
// end ;
79259: GO 79091
79261: POP
79262: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79263: LD_VAR 0 1
79267: PPUSH
79268: LD_EXP 115
79272: PUSH
79273: LD_VAR 0 5
79277: ARRAY
79278: PUSH
79279: LD_INT 0
79281: PLUS
79282: PPUSH
79283: CALL_OW 505
// end ;
79287: LD_VAR 0 3
79291: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79292: LD_INT 0
79294: PPUSH
79295: PPUSH
79296: PPUSH
79297: PPUSH
// if not hack in hackTanks then
79298: LD_VAR 0 1
79302: PUSH
79303: LD_EXP 114
79307: IN
79308: NOT
79309: IFFALSE 79313
// exit ;
79311: GO 79553
// index := GetElementIndex ( hackTanks , hack ) ;
79313: LD_ADDR_VAR 0 4
79317: PUSH
79318: LD_EXP 114
79322: PPUSH
79323: LD_VAR 0 1
79327: PPUSH
79328: CALL 22095 0 2
79332: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79333: LD_ADDR_VAR 0 3
79337: PUSH
79338: DOUBLE
79339: LD_EXP 115
79343: PUSH
79344: LD_VAR 0 4
79348: ARRAY
79349: INC
79350: ST_TO_ADDR
79351: LD_INT 1
79353: PUSH
79354: FOR_DOWNTO
79355: IFFALSE 79527
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79357: LD_ADDR_VAR 0 5
79361: PUSH
79362: LD_EXP 115
79366: PUSH
79367: LD_VAR 0 4
79371: ARRAY
79372: PUSH
79373: LD_VAR 0 3
79377: ARRAY
79378: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79379: LD_VAR 0 5
79383: PUSH
79384: LD_INT 1
79386: ARRAY
79387: PPUSH
79388: CALL_OW 302
79392: NOT
79393: PUSH
79394: LD_VAR 0 5
79398: PUSH
79399: LD_INT 1
79401: ARRAY
79402: PPUSH
79403: CALL_OW 255
79407: PUSH
79408: LD_VAR 0 1
79412: PPUSH
79413: CALL_OW 255
79417: NONEQUAL
79418: OR
79419: IFFALSE 79525
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79421: LD_VAR 0 5
79425: PUSH
79426: LD_INT 1
79428: ARRAY
79429: PPUSH
79430: CALL_OW 305
79434: PUSH
79435: LD_VAR 0 5
79439: PUSH
79440: LD_INT 1
79442: ARRAY
79443: PPUSH
79444: CALL_OW 255
79448: PUSH
79449: LD_VAR 0 1
79453: PPUSH
79454: CALL_OW 255
79458: EQUAL
79459: AND
79460: IFFALSE 79484
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79462: LD_VAR 0 5
79466: PUSH
79467: LD_INT 1
79469: ARRAY
79470: PPUSH
79471: LD_VAR 0 5
79475: PUSH
79476: LD_INT 2
79478: ARRAY
79479: PPUSH
79480: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79484: LD_ADDR_EXP 115
79488: PUSH
79489: LD_EXP 115
79493: PPUSH
79494: LD_VAR 0 4
79498: PPUSH
79499: LD_EXP 115
79503: PUSH
79504: LD_VAR 0 4
79508: ARRAY
79509: PPUSH
79510: LD_VAR 0 3
79514: PPUSH
79515: CALL_OW 3
79519: PPUSH
79520: CALL_OW 1
79524: ST_TO_ADDR
// end ; end ;
79525: GO 79354
79527: POP
79528: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79529: LD_VAR 0 1
79533: PPUSH
79534: LD_EXP 115
79538: PUSH
79539: LD_VAR 0 4
79543: ARRAY
79544: PUSH
79545: LD_INT 0
79547: PLUS
79548: PPUSH
79549: CALL_OW 505
// end ;
79553: LD_VAR 0 2
79557: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79558: LD_INT 0
79560: PPUSH
79561: PPUSH
79562: PPUSH
79563: PPUSH
// if not hack in hackTanks then
79564: LD_VAR 0 1
79568: PUSH
79569: LD_EXP 114
79573: IN
79574: NOT
79575: IFFALSE 79579
// exit ;
79577: GO 79664
// index := GetElementIndex ( hackTanks , hack ) ;
79579: LD_ADDR_VAR 0 5
79583: PUSH
79584: LD_EXP 114
79588: PPUSH
79589: LD_VAR 0 1
79593: PPUSH
79594: CALL 22095 0 2
79598: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79599: LD_ADDR_VAR 0 4
79603: PUSH
79604: DOUBLE
79605: LD_INT 1
79607: DEC
79608: ST_TO_ADDR
79609: LD_EXP 115
79613: PUSH
79614: LD_VAR 0 5
79618: ARRAY
79619: PUSH
79620: FOR_TO
79621: IFFALSE 79662
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79623: LD_EXP 115
79627: PUSH
79628: LD_VAR 0 5
79632: ARRAY
79633: PUSH
79634: LD_VAR 0 4
79638: ARRAY
79639: PUSH
79640: LD_INT 1
79642: ARRAY
79643: PUSH
79644: LD_VAR 0 2
79648: EQUAL
79649: IFFALSE 79660
// KillUnit ( vehicle ) ;
79651: LD_VAR 0 2
79655: PPUSH
79656: CALL_OW 66
79660: GO 79620
79662: POP
79663: POP
// end ;
79664: LD_VAR 0 3
79668: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79669: LD_EXP 119
79673: NOT
79674: IFFALSE 79709
79676: GO 79678
79678: DISABLE
// begin initMiner := true ;
79679: LD_ADDR_EXP 119
79683: PUSH
79684: LD_INT 1
79686: ST_TO_ADDR
// minersList := [ ] ;
79687: LD_ADDR_EXP 120
79691: PUSH
79692: EMPTY
79693: ST_TO_ADDR
// minerMinesList := [ ] ;
79694: LD_ADDR_EXP 121
79698: PUSH
79699: EMPTY
79700: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79701: LD_ADDR_EXP 122
79705: PUSH
79706: LD_INT 5
79708: ST_TO_ADDR
// end ;
79709: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79710: LD_EXP 119
79714: PUSH
79715: LD_INT 34
79717: PUSH
79718: LD_INT 81
79720: PUSH
79721: EMPTY
79722: LIST
79723: LIST
79724: PPUSH
79725: CALL_OW 69
79729: AND
79730: IFFALSE 80191
79732: GO 79734
79734: DISABLE
79735: LD_INT 0
79737: PPUSH
79738: PPUSH
79739: PPUSH
79740: PPUSH
// begin enable ;
79741: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79742: LD_ADDR_VAR 0 1
79746: PUSH
79747: LD_INT 34
79749: PUSH
79750: LD_INT 81
79752: PUSH
79753: EMPTY
79754: LIST
79755: LIST
79756: PPUSH
79757: CALL_OW 69
79761: PUSH
79762: FOR_IN
79763: IFFALSE 79835
// begin if not i in minersList then
79765: LD_VAR 0 1
79769: PUSH
79770: LD_EXP 120
79774: IN
79775: NOT
79776: IFFALSE 79833
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79778: LD_ADDR_EXP 120
79782: PUSH
79783: LD_EXP 120
79787: PPUSH
79788: LD_EXP 120
79792: PUSH
79793: LD_INT 1
79795: PLUS
79796: PPUSH
79797: LD_VAR 0 1
79801: PPUSH
79802: CALL_OW 1
79806: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79807: LD_ADDR_EXP 121
79811: PUSH
79812: LD_EXP 121
79816: PPUSH
79817: LD_EXP 121
79821: PUSH
79822: LD_INT 1
79824: PLUS
79825: PPUSH
79826: EMPTY
79827: PPUSH
79828: CALL_OW 1
79832: ST_TO_ADDR
// end end ;
79833: GO 79762
79835: POP
79836: POP
// for i := minerMinesList downto 1 do
79837: LD_ADDR_VAR 0 1
79841: PUSH
79842: DOUBLE
79843: LD_EXP 121
79847: INC
79848: ST_TO_ADDR
79849: LD_INT 1
79851: PUSH
79852: FOR_DOWNTO
79853: IFFALSE 80189
// begin if IsLive ( minersList [ i ] ) then
79855: LD_EXP 120
79859: PUSH
79860: LD_VAR 0 1
79864: ARRAY
79865: PPUSH
79866: CALL_OW 300
79870: IFFALSE 79898
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79872: LD_EXP 120
79876: PUSH
79877: LD_VAR 0 1
79881: ARRAY
79882: PPUSH
79883: LD_EXP 121
79887: PUSH
79888: LD_VAR 0 1
79892: ARRAY
79893: PPUSH
79894: CALL_OW 505
// if not minerMinesList [ i ] then
79898: LD_EXP 121
79902: PUSH
79903: LD_VAR 0 1
79907: ARRAY
79908: NOT
79909: IFFALSE 79913
// continue ;
79911: GO 79852
// for j := minerMinesList [ i ] downto 1 do
79913: LD_ADDR_VAR 0 2
79917: PUSH
79918: DOUBLE
79919: LD_EXP 121
79923: PUSH
79924: LD_VAR 0 1
79928: ARRAY
79929: INC
79930: ST_TO_ADDR
79931: LD_INT 1
79933: PUSH
79934: FOR_DOWNTO
79935: IFFALSE 80185
// begin side := GetSide ( minersList [ i ] ) ;
79937: LD_ADDR_VAR 0 3
79941: PUSH
79942: LD_EXP 120
79946: PUSH
79947: LD_VAR 0 1
79951: ARRAY
79952: PPUSH
79953: CALL_OW 255
79957: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79958: LD_ADDR_VAR 0 4
79962: PUSH
79963: LD_EXP 121
79967: PUSH
79968: LD_VAR 0 1
79972: ARRAY
79973: PUSH
79974: LD_VAR 0 2
79978: ARRAY
79979: PUSH
79980: LD_INT 1
79982: ARRAY
79983: PPUSH
79984: LD_EXP 121
79988: PUSH
79989: LD_VAR 0 1
79993: ARRAY
79994: PUSH
79995: LD_VAR 0 2
79999: ARRAY
80000: PUSH
80001: LD_INT 2
80003: ARRAY
80004: PPUSH
80005: CALL_OW 428
80009: ST_TO_ADDR
// if not tmp then
80010: LD_VAR 0 4
80014: NOT
80015: IFFALSE 80019
// continue ;
80017: GO 79934
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80019: LD_VAR 0 4
80023: PUSH
80024: LD_INT 81
80026: PUSH
80027: LD_VAR 0 3
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PPUSH
80036: CALL_OW 69
80040: IN
80041: PUSH
80042: LD_EXP 121
80046: PUSH
80047: LD_VAR 0 1
80051: ARRAY
80052: PUSH
80053: LD_VAR 0 2
80057: ARRAY
80058: PUSH
80059: LD_INT 1
80061: ARRAY
80062: PPUSH
80063: LD_EXP 121
80067: PUSH
80068: LD_VAR 0 1
80072: ARRAY
80073: PUSH
80074: LD_VAR 0 2
80078: ARRAY
80079: PUSH
80080: LD_INT 2
80082: ARRAY
80083: PPUSH
80084: CALL_OW 458
80088: AND
80089: IFFALSE 80183
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80091: LD_EXP 121
80095: PUSH
80096: LD_VAR 0 1
80100: ARRAY
80101: PUSH
80102: LD_VAR 0 2
80106: ARRAY
80107: PUSH
80108: LD_INT 1
80110: ARRAY
80111: PPUSH
80112: LD_EXP 121
80116: PUSH
80117: LD_VAR 0 1
80121: ARRAY
80122: PUSH
80123: LD_VAR 0 2
80127: ARRAY
80128: PUSH
80129: LD_INT 2
80131: ARRAY
80132: PPUSH
80133: LD_VAR 0 3
80137: PPUSH
80138: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80142: LD_ADDR_EXP 121
80146: PUSH
80147: LD_EXP 121
80151: PPUSH
80152: LD_VAR 0 1
80156: PPUSH
80157: LD_EXP 121
80161: PUSH
80162: LD_VAR 0 1
80166: ARRAY
80167: PPUSH
80168: LD_VAR 0 2
80172: PPUSH
80173: CALL_OW 3
80177: PPUSH
80178: CALL_OW 1
80182: ST_TO_ADDR
// end ; end ;
80183: GO 79934
80185: POP
80186: POP
// end ;
80187: GO 79852
80189: POP
80190: POP
// end ;
80191: PPOPN 4
80193: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80194: LD_INT 0
80196: PPUSH
80197: PPUSH
// result := false ;
80198: LD_ADDR_VAR 0 4
80202: PUSH
80203: LD_INT 0
80205: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80206: LD_VAR 0 1
80210: PPUSH
80211: CALL_OW 264
80215: PUSH
80216: LD_INT 81
80218: EQUAL
80219: NOT
80220: IFFALSE 80224
// exit ;
80222: GO 80464
// index := GetElementIndex ( minersList , unit ) ;
80224: LD_ADDR_VAR 0 5
80228: PUSH
80229: LD_EXP 120
80233: PPUSH
80234: LD_VAR 0 1
80238: PPUSH
80239: CALL 22095 0 2
80243: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80244: LD_EXP 121
80248: PUSH
80249: LD_VAR 0 5
80253: ARRAY
80254: PUSH
80255: LD_EXP 122
80259: GREATEREQUAL
80260: IFFALSE 80264
// exit ;
80262: GO 80464
// ComMoveXY ( unit , x , y ) ;
80264: LD_VAR 0 1
80268: PPUSH
80269: LD_VAR 0 2
80273: PPUSH
80274: LD_VAR 0 3
80278: PPUSH
80279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80283: LD_INT 35
80285: PPUSH
80286: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80290: LD_VAR 0 1
80294: PPUSH
80295: LD_VAR 0 2
80299: PPUSH
80300: LD_VAR 0 3
80304: PPUSH
80305: CALL 53928 0 3
80309: NOT
80310: PUSH
80311: LD_VAR 0 1
80315: PPUSH
80316: CALL_OW 314
80320: AND
80321: IFFALSE 80325
// exit ;
80323: GO 80464
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80325: LD_VAR 0 2
80329: PPUSH
80330: LD_VAR 0 3
80334: PPUSH
80335: CALL_OW 428
80339: PUSH
80340: LD_VAR 0 1
80344: EQUAL
80345: PUSH
80346: LD_VAR 0 1
80350: PPUSH
80351: CALL_OW 314
80355: NOT
80356: AND
80357: IFFALSE 80283
// PlaySoundXY ( x , y , PlantMine ) ;
80359: LD_VAR 0 2
80363: PPUSH
80364: LD_VAR 0 3
80368: PPUSH
80369: LD_STRING PlantMine
80371: PPUSH
80372: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80376: LD_VAR 0 2
80380: PPUSH
80381: LD_VAR 0 3
80385: PPUSH
80386: LD_VAR 0 1
80390: PPUSH
80391: CALL_OW 255
80395: PPUSH
80396: LD_INT 0
80398: PPUSH
80399: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80403: LD_ADDR_EXP 121
80407: PUSH
80408: LD_EXP 121
80412: PPUSH
80413: LD_VAR 0 5
80417: PUSH
80418: LD_EXP 121
80422: PUSH
80423: LD_VAR 0 5
80427: ARRAY
80428: PUSH
80429: LD_INT 1
80431: PLUS
80432: PUSH
80433: EMPTY
80434: LIST
80435: LIST
80436: PPUSH
80437: LD_VAR 0 2
80441: PUSH
80442: LD_VAR 0 3
80446: PUSH
80447: EMPTY
80448: LIST
80449: LIST
80450: PPUSH
80451: CALL 22310 0 3
80455: ST_TO_ADDR
// result := true ;
80456: LD_ADDR_VAR 0 4
80460: PUSH
80461: LD_INT 1
80463: ST_TO_ADDR
// end ;
80464: LD_VAR 0 4
80468: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80469: LD_INT 0
80471: PPUSH
80472: PPUSH
80473: PPUSH
// if not unit in minersList then
80474: LD_VAR 0 1
80478: PUSH
80479: LD_EXP 120
80483: IN
80484: NOT
80485: IFFALSE 80489
// exit ;
80487: GO 80881
// index := GetElementIndex ( minersList , unit ) ;
80489: LD_ADDR_VAR 0 6
80493: PUSH
80494: LD_EXP 120
80498: PPUSH
80499: LD_VAR 0 1
80503: PPUSH
80504: CALL 22095 0 2
80508: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80509: LD_ADDR_VAR 0 5
80513: PUSH
80514: DOUBLE
80515: LD_EXP 121
80519: PUSH
80520: LD_VAR 0 6
80524: ARRAY
80525: INC
80526: ST_TO_ADDR
80527: LD_INT 1
80529: PUSH
80530: FOR_DOWNTO
80531: IFFALSE 80692
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80533: LD_EXP 121
80537: PUSH
80538: LD_VAR 0 6
80542: ARRAY
80543: PUSH
80544: LD_VAR 0 5
80548: ARRAY
80549: PUSH
80550: LD_INT 1
80552: ARRAY
80553: PUSH
80554: LD_VAR 0 2
80558: EQUAL
80559: PUSH
80560: LD_EXP 121
80564: PUSH
80565: LD_VAR 0 6
80569: ARRAY
80570: PUSH
80571: LD_VAR 0 5
80575: ARRAY
80576: PUSH
80577: LD_INT 2
80579: ARRAY
80580: PUSH
80581: LD_VAR 0 3
80585: EQUAL
80586: AND
80587: IFFALSE 80690
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80589: LD_EXP 121
80593: PUSH
80594: LD_VAR 0 6
80598: ARRAY
80599: PUSH
80600: LD_VAR 0 5
80604: ARRAY
80605: PUSH
80606: LD_INT 1
80608: ARRAY
80609: PPUSH
80610: LD_EXP 121
80614: PUSH
80615: LD_VAR 0 6
80619: ARRAY
80620: PUSH
80621: LD_VAR 0 5
80625: ARRAY
80626: PUSH
80627: LD_INT 2
80629: ARRAY
80630: PPUSH
80631: LD_VAR 0 1
80635: PPUSH
80636: CALL_OW 255
80640: PPUSH
80641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80645: LD_ADDR_EXP 121
80649: PUSH
80650: LD_EXP 121
80654: PPUSH
80655: LD_VAR 0 6
80659: PPUSH
80660: LD_EXP 121
80664: PUSH
80665: LD_VAR 0 6
80669: ARRAY
80670: PPUSH
80671: LD_VAR 0 5
80675: PPUSH
80676: CALL_OW 3
80680: PPUSH
80681: CALL_OW 1
80685: ST_TO_ADDR
// exit ;
80686: POP
80687: POP
80688: GO 80881
// end ; end ;
80690: GO 80530
80692: POP
80693: POP
// for i := minerMinesList [ index ] downto 1 do
80694: LD_ADDR_VAR 0 5
80698: PUSH
80699: DOUBLE
80700: LD_EXP 121
80704: PUSH
80705: LD_VAR 0 6
80709: ARRAY
80710: INC
80711: ST_TO_ADDR
80712: LD_INT 1
80714: PUSH
80715: FOR_DOWNTO
80716: IFFALSE 80879
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80718: LD_EXP 121
80722: PUSH
80723: LD_VAR 0 6
80727: ARRAY
80728: PUSH
80729: LD_VAR 0 5
80733: ARRAY
80734: PUSH
80735: LD_INT 1
80737: ARRAY
80738: PPUSH
80739: LD_EXP 121
80743: PUSH
80744: LD_VAR 0 6
80748: ARRAY
80749: PUSH
80750: LD_VAR 0 5
80754: ARRAY
80755: PUSH
80756: LD_INT 2
80758: ARRAY
80759: PPUSH
80760: LD_VAR 0 2
80764: PPUSH
80765: LD_VAR 0 3
80769: PPUSH
80770: CALL_OW 298
80774: PUSH
80775: LD_INT 6
80777: LESS
80778: IFFALSE 80877
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80780: LD_EXP 121
80784: PUSH
80785: LD_VAR 0 6
80789: ARRAY
80790: PUSH
80791: LD_VAR 0 5
80795: ARRAY
80796: PUSH
80797: LD_INT 1
80799: ARRAY
80800: PPUSH
80801: LD_EXP 121
80805: PUSH
80806: LD_VAR 0 6
80810: ARRAY
80811: PUSH
80812: LD_VAR 0 5
80816: ARRAY
80817: PUSH
80818: LD_INT 2
80820: ARRAY
80821: PPUSH
80822: LD_VAR 0 1
80826: PPUSH
80827: CALL_OW 255
80831: PPUSH
80832: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80836: LD_ADDR_EXP 121
80840: PUSH
80841: LD_EXP 121
80845: PPUSH
80846: LD_VAR 0 6
80850: PPUSH
80851: LD_EXP 121
80855: PUSH
80856: LD_VAR 0 6
80860: ARRAY
80861: PPUSH
80862: LD_VAR 0 5
80866: PPUSH
80867: CALL_OW 3
80871: PPUSH
80872: CALL_OW 1
80876: ST_TO_ADDR
// end ; end ;
80877: GO 80715
80879: POP
80880: POP
// end ;
80881: LD_VAR 0 4
80885: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80886: LD_INT 0
80888: PPUSH
80889: PPUSH
80890: PPUSH
80891: PPUSH
80892: PPUSH
80893: PPUSH
80894: PPUSH
80895: PPUSH
80896: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80897: LD_VAR 0 1
80901: PPUSH
80902: CALL_OW 264
80906: PUSH
80907: LD_INT 81
80909: EQUAL
80910: NOT
80911: PUSH
80912: LD_VAR 0 1
80916: PUSH
80917: LD_EXP 120
80921: IN
80922: NOT
80923: OR
80924: IFFALSE 80928
// exit ;
80926: GO 81250
// index := GetElementIndex ( minersList , unit ) ;
80928: LD_ADDR_VAR 0 6
80932: PUSH
80933: LD_EXP 120
80937: PPUSH
80938: LD_VAR 0 1
80942: PPUSH
80943: CALL 22095 0 2
80947: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80948: LD_ADDR_VAR 0 8
80952: PUSH
80953: LD_EXP 122
80957: PUSH
80958: LD_EXP 121
80962: PUSH
80963: LD_VAR 0 6
80967: ARRAY
80968: MINUS
80969: ST_TO_ADDR
// if not minesFreeAmount then
80970: LD_VAR 0 8
80974: NOT
80975: IFFALSE 80979
// exit ;
80977: GO 81250
// tmp := [ ] ;
80979: LD_ADDR_VAR 0 7
80983: PUSH
80984: EMPTY
80985: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80986: LD_ADDR_VAR 0 5
80990: PUSH
80991: DOUBLE
80992: LD_INT 1
80994: DEC
80995: ST_TO_ADDR
80996: LD_VAR 0 8
81000: PUSH
81001: FOR_TO
81002: IFFALSE 81197
// begin _d := rand ( 0 , 5 ) ;
81004: LD_ADDR_VAR 0 11
81008: PUSH
81009: LD_INT 0
81011: PPUSH
81012: LD_INT 5
81014: PPUSH
81015: CALL_OW 12
81019: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81020: LD_ADDR_VAR 0 12
81024: PUSH
81025: LD_INT 2
81027: PPUSH
81028: LD_INT 6
81030: PPUSH
81031: CALL_OW 12
81035: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81036: LD_ADDR_VAR 0 9
81040: PUSH
81041: LD_VAR 0 2
81045: PPUSH
81046: LD_VAR 0 11
81050: PPUSH
81051: LD_VAR 0 12
81055: PPUSH
81056: CALL_OW 272
81060: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81061: LD_ADDR_VAR 0 10
81065: PUSH
81066: LD_VAR 0 3
81070: PPUSH
81071: LD_VAR 0 11
81075: PPUSH
81076: LD_VAR 0 12
81080: PPUSH
81081: CALL_OW 273
81085: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81086: LD_VAR 0 9
81090: PPUSH
81091: LD_VAR 0 10
81095: PPUSH
81096: CALL_OW 488
81100: PUSH
81101: LD_VAR 0 9
81105: PUSH
81106: LD_VAR 0 10
81110: PUSH
81111: EMPTY
81112: LIST
81113: LIST
81114: PUSH
81115: LD_VAR 0 7
81119: IN
81120: NOT
81121: AND
81122: PUSH
81123: LD_VAR 0 9
81127: PPUSH
81128: LD_VAR 0 10
81132: PPUSH
81133: CALL_OW 458
81137: NOT
81138: AND
81139: IFFALSE 81181
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81141: LD_ADDR_VAR 0 7
81145: PUSH
81146: LD_VAR 0 7
81150: PPUSH
81151: LD_VAR 0 7
81155: PUSH
81156: LD_INT 1
81158: PLUS
81159: PPUSH
81160: LD_VAR 0 9
81164: PUSH
81165: LD_VAR 0 10
81169: PUSH
81170: EMPTY
81171: LIST
81172: LIST
81173: PPUSH
81174: CALL_OW 1
81178: ST_TO_ADDR
81179: GO 81195
// i := i - 1 ;
81181: LD_ADDR_VAR 0 5
81185: PUSH
81186: LD_VAR 0 5
81190: PUSH
81191: LD_INT 1
81193: MINUS
81194: ST_TO_ADDR
// end ;
81195: GO 81001
81197: POP
81198: POP
// for i in tmp do
81199: LD_ADDR_VAR 0 5
81203: PUSH
81204: LD_VAR 0 7
81208: PUSH
81209: FOR_IN
81210: IFFALSE 81248
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81212: LD_VAR 0 1
81216: PPUSH
81217: LD_VAR 0 5
81221: PUSH
81222: LD_INT 1
81224: ARRAY
81225: PPUSH
81226: LD_VAR 0 5
81230: PUSH
81231: LD_INT 2
81233: ARRAY
81234: PPUSH
81235: CALL 80194 0 3
81239: NOT
81240: IFFALSE 81246
// exit ;
81242: POP
81243: POP
81244: GO 81250
81246: GO 81209
81248: POP
81249: POP
// end ;
81250: LD_VAR 0 4
81254: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
81255: LD_INT 0
81257: PPUSH
81258: PPUSH
81259: PPUSH
81260: PPUSH
81261: PPUSH
81262: PPUSH
81263: PPUSH
81264: PPUSH
81265: PPUSH
// if GetClass ( unit ) <> class_sniper then
81266: LD_VAR 0 1
81270: PPUSH
81271: CALL_OW 257
81275: PUSH
81276: LD_INT 5
81278: NONEQUAL
81279: IFFALSE 81283
// exit ;
81281: GO 81749
// dist := 8 ;
81283: LD_ADDR_VAR 0 5
81287: PUSH
81288: LD_INT 8
81290: ST_TO_ADDR
// viewRange := 12 ;
81291: LD_ADDR_VAR 0 8
81295: PUSH
81296: LD_INT 12
81298: ST_TO_ADDR
// side := GetSide ( unit ) ;
81299: LD_ADDR_VAR 0 6
81303: PUSH
81304: LD_VAR 0 1
81308: PPUSH
81309: CALL_OW 255
81313: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81314: LD_INT 61
81316: PPUSH
81317: LD_VAR 0 6
81321: PPUSH
81322: CALL_OW 321
81326: PUSH
81327: LD_INT 2
81329: EQUAL
81330: IFFALSE 81340
// viewRange := 16 ;
81332: LD_ADDR_VAR 0 8
81336: PUSH
81337: LD_INT 16
81339: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81340: LD_VAR 0 1
81344: PPUSH
81345: LD_VAR 0 2
81349: PPUSH
81350: LD_VAR 0 3
81354: PPUSH
81355: CALL_OW 297
81359: PUSH
81360: LD_VAR 0 5
81364: GREATER
81365: IFFALSE 81444
// begin ComMoveXY ( unit , x , y ) ;
81367: LD_VAR 0 1
81371: PPUSH
81372: LD_VAR 0 2
81376: PPUSH
81377: LD_VAR 0 3
81381: PPUSH
81382: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81386: LD_INT 35
81388: PPUSH
81389: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81393: LD_VAR 0 1
81397: PPUSH
81398: LD_VAR 0 2
81402: PPUSH
81403: LD_VAR 0 3
81407: PPUSH
81408: CALL 53928 0 3
81412: NOT
81413: IFFALSE 81417
// exit ;
81415: GO 81749
// until GetDistUnitXY ( unit , x , y ) < dist ;
81417: LD_VAR 0 1
81421: PPUSH
81422: LD_VAR 0 2
81426: PPUSH
81427: LD_VAR 0 3
81431: PPUSH
81432: CALL_OW 297
81436: PUSH
81437: LD_VAR 0 5
81441: LESS
81442: IFFALSE 81386
// end ; ComTurnXY ( unit , x , y ) ;
81444: LD_VAR 0 1
81448: PPUSH
81449: LD_VAR 0 2
81453: PPUSH
81454: LD_VAR 0 3
81458: PPUSH
81459: CALL_OW 118
// repeat if Multiplayer then
81463: LD_OWVAR 4
81467: IFFALSE 81478
// wait ( 35 ) else
81469: LD_INT 35
81471: PPUSH
81472: CALL_OW 67
81476: GO 81485
// wait ( 5 ) ;
81478: LD_INT 5
81480: PPUSH
81481: CALL_OW 67
// _d := GetDir ( unit ) ;
81485: LD_ADDR_VAR 0 11
81489: PUSH
81490: LD_VAR 0 1
81494: PPUSH
81495: CALL_OW 254
81499: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
81500: LD_ADDR_VAR 0 7
81504: PUSH
81505: LD_VAR 0 1
81509: PPUSH
81510: CALL_OW 250
81514: PPUSH
81515: LD_VAR 0 1
81519: PPUSH
81520: CALL_OW 251
81524: PPUSH
81525: LD_VAR 0 2
81529: PPUSH
81530: LD_VAR 0 3
81534: PPUSH
81535: CALL 56536 0 4
81539: ST_TO_ADDR
// until dir = _d ;
81540: LD_VAR 0 7
81544: PUSH
81545: LD_VAR 0 11
81549: EQUAL
81550: IFFALSE 81463
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
81552: LD_ADDR_VAR 0 9
81556: PUSH
81557: LD_VAR 0 1
81561: PPUSH
81562: CALL_OW 250
81566: PPUSH
81567: LD_VAR 0 7
81571: PPUSH
81572: LD_VAR 0 5
81576: PPUSH
81577: CALL_OW 272
81581: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
81582: LD_ADDR_VAR 0 10
81586: PUSH
81587: LD_VAR 0 1
81591: PPUSH
81592: CALL_OW 251
81596: PPUSH
81597: LD_VAR 0 7
81601: PPUSH
81602: LD_VAR 0 5
81606: PPUSH
81607: CALL_OW 273
81611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81612: LD_VAR 0 9
81616: PPUSH
81617: LD_VAR 0 10
81621: PPUSH
81622: CALL_OW 488
81626: NOT
81627: IFFALSE 81631
// exit ;
81629: GO 81749
// ComAnimCustom ( unit , 1 ) ;
81631: LD_VAR 0 1
81635: PPUSH
81636: LD_INT 1
81638: PPUSH
81639: CALL_OW 592
// p := 0 ;
81643: LD_ADDR_VAR 0 12
81647: PUSH
81648: LD_INT 0
81650: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81651: LD_VAR 0 9
81655: PPUSH
81656: LD_VAR 0 10
81660: PPUSH
81661: LD_VAR 0 6
81665: PPUSH
81666: LD_VAR 0 8
81670: PPUSH
81671: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
81675: LD_INT 35
81677: PPUSH
81678: CALL_OW 67
// p := Inc ( p ) ;
81682: LD_ADDR_VAR 0 12
81686: PUSH
81687: LD_VAR 0 12
81691: PPUSH
81692: CALL 56492 0 1
81696: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
81697: LD_VAR 0 12
81701: PUSH
81702: LD_INT 3
81704: EQUAL
81705: PUSH
81706: LD_VAR 0 1
81710: PPUSH
81711: CALL_OW 302
81715: NOT
81716: OR
81717: PUSH
81718: LD_VAR 0 1
81722: PPUSH
81723: CALL_OW 301
81727: OR
81728: IFFALSE 81675
// RemoveSeeing ( _x , _y , side ) ;
81730: LD_VAR 0 9
81734: PPUSH
81735: LD_VAR 0 10
81739: PPUSH
81740: LD_VAR 0 6
81744: PPUSH
81745: CALL_OW 331
// end ; end_of_file
81749: LD_VAR 0 4
81753: RET
