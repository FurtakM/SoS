// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// CreateNature ;
  28: CALL 16596 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6956 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4115 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4115 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4115 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4115 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4115 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4115 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4115 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5354 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4967 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4115 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4115 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4115 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareBunkiers ;
2882: CALL 3485 0 0
// PrepareTrap ;
2886: CALL 2895 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker , animal ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
3491: PPUSH
// for animal in FilterUnitsInArea ( LeftHillArea , [ [ f_side , 0 ] ] ) do
3492: LD_ADDR_VAR 0 5
3496: PUSH
3497: LD_INT 17
3499: PPUSH
3500: LD_INT 22
3502: PUSH
3503: LD_INT 0
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3532
// RemoveUnit ( animal ) ;
3521: LD_VAR 0 5
3525: PPUSH
3526: CALL_OW 64
3530: GO 3518
3532: POP
3533: POP
// uc_side = 1 ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// uc_nation = nation_american ;
3542: LD_ADDR_OWVAR 21
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// bc_level = 1 ;
3550: LD_ADDR_OWVAR 43
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// bc_type = b_breastwork ;
3558: LD_ADDR_OWVAR 42
3562: PUSH
3563: LD_INT 31
3565: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_INT 104
3573: PPUSH
3574: LD_INT 59
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: CALL_OW 47
3584: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3585: LD_ADDR_EXP 82
3589: PUSH
3590: LD_EXP 82
3594: PUSH
3595: LD_VAR 0 4
3599: ADD
3600: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3601: LD_EXP 59
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL 5208 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 101
3622: PPUSH
3623: LD_INT 55
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: CALL_OW 47
3633: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3634: LD_ADDR_EXP 82
3638: PUSH
3639: LD_EXP 82
3643: PUSH
3644: LD_VAR 0 4
3648: ADD
3649: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3650: LD_EXP 59
3654: PPUSH
3655: LD_VAR 0 4
3659: PPUSH
3660: CALL 5208 0 2
// for animal in FilterUnitsInArea ( RightHillArea , [ [ f_side , 0 ] ] ) do
3664: LD_ADDR_VAR 0 5
3668: PUSH
3669: LD_INT 16
3671: PPUSH
3672: LD_INT 22
3674: PUSH
3675: LD_INT 0
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: PPUSH
3685: CALL_OW 70
3689: PUSH
3690: FOR_IN
3691: IFFALSE 3704
// RemoveUnit ( animal ) ;
3693: LD_VAR 0 5
3697: PPUSH
3698: CALL_OW 64
3702: GO 3690
3704: POP
3705: POP
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3706: LD_ADDR_VAR 0 4
3710: PUSH
3711: LD_INT 132
3713: PPUSH
3714: LD_INT 62
3716: PPUSH
3717: LD_INT 1
3719: PPUSH
3720: CALL_OW 47
3724: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3725: LD_ADDR_EXP 83
3729: PUSH
3730: LD_EXP 83
3734: PUSH
3735: LD_VAR 0 4
3739: ADD
3740: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3741: LD_EXP 59
3745: PPUSH
3746: LD_VAR 0 4
3750: PPUSH
3751: CALL 5208 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3755: LD_ADDR_VAR 0 4
3759: PUSH
3760: LD_INT 134
3762: PPUSH
3763: LD_INT 66
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 47
3773: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3774: LD_ADDR_EXP 83
3778: PUSH
3779: LD_EXP 83
3783: PUSH
3784: LD_VAR 0 4
3788: ADD
3789: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3790: LD_EXP 59
3794: PPUSH
3795: LD_VAR 0 4
3799: PPUSH
3800: CALL 5208 0 2
// bc_type = b_depot ;
3804: LD_ADDR_OWVAR 42
3808: PUSH
3809: LD_INT 0
3811: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3812: LD_ADDR_EXP 84
3816: PUSH
3817: LD_INT 92
3819: PPUSH
3820: LD_INT 51
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 47
3830: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3831: LD_ADDR_EXP 85
3835: PUSH
3836: LD_INT 193
3838: ST_TO_ADDR
// amLeftEngs = [ ] ;
3839: LD_ADDR_EXP 86
3843: PUSH
3844: EMPTY
3845: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3846: LD_ADDR_VAR 0 2
3850: PUSH
3851: DOUBLE
3852: LD_INT 1
3854: DEC
3855: ST_TO_ADDR
3856: LD_INT 1
3858: PUSH
3859: LD_INT 1
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 12
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: LD_OWVAR 67
3882: ARRAY
3883: PUSH
3884: FOR_TO
3885: IFFALSE 3976
// begin uc_nation = 1 ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// uc_side = 1 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// hc_gallery =  ;
3903: LD_ADDR_OWVAR 33
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// hc_name =  ;
3911: LD_ADDR_OWVAR 26
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3919: LD_INT 0
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_EXP 59
3929: PPUSH
3930: CALL_OW 380
// un = CreateHuman ;
3934: LD_ADDR_VAR 0 3
3938: PUSH
3939: CALL_OW 44
3943: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3944: LD_ADDR_EXP 86
3948: PUSH
3949: LD_EXP 86
3953: PUSH
3954: LD_VAR 0 3
3958: ADD
3959: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3960: LD_VAR 0 3
3964: PPUSH
3965: LD_EXP 84
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3884
3976: POP
3977: POP
// if Difficulty = 3 then
3978: LD_OWVAR 67
3982: PUSH
3983: LD_INT 3
3985: EQUAL
3986: IFFALSE 4110
// begin amRightEngs = [ ] ;
3988: LD_ADDR_EXP 87
3992: PUSH
3993: EMPTY
3994: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 1
4007: PPUSH
4008: LD_INT 2
4010: PPUSH
4011: CALL_OW 12
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4108
// begin uc_nation = 1 ;
4019: LD_ADDR_OWVAR 21
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// uc_side = 1 ;
4027: LD_ADDR_OWVAR 20
4031: PUSH
4032: LD_INT 1
4034: ST_TO_ADDR
// hc_gallery =  ;
4035: LD_ADDR_OWVAR 33
4039: PUSH
4040: LD_STRING 
4042: ST_TO_ADDR
// hc_name =  ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING 
4050: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
4051: LD_INT 0
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: LD_EXP 59
4061: PPUSH
4062: CALL_OW 380
// un = CreateHuman ;
4066: LD_ADDR_VAR 0 3
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
4076: LD_ADDR_EXP 87
4080: PUSH
4081: LD_EXP 87
4085: PUSH
4086: LD_VAR 0 3
4090: ADD
4091: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_EXP 85
4101: PPUSH
4102: CALL_OW 52
// end ;
4106: GO 4016
4108: POP
4109: POP
// end ; end ; end_of_file
4110: LD_VAR 0 1
4114: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4115: LD_INT 0
4117: PPUSH
4118: PPUSH
// if exist_mode then
4119: LD_VAR 0 2
4123: IFFALSE 4148
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4125: LD_ADDR_VAR 0 4
4129: PUSH
4130: LD_EXP 49
4134: PUSH
4135: LD_VAR 0 1
4139: STR
4140: PPUSH
4141: CALL_OW 34
4145: ST_TO_ADDR
4146: GO 4163
// unit := NewCharacter ( ident ) ;
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_VAR 0 1
4157: PPUSH
4158: CALL_OW 25
4162: ST_TO_ADDR
// result := unit ;
4163: LD_ADDR_VAR 0 3
4167: PUSH
4168: LD_VAR 0 4
4172: ST_TO_ADDR
// end ;
4173: LD_VAR 0 3
4177: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4178: LD_INT 0
4180: PPUSH
4181: PPUSH
4182: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4183: LD_ADDR_VAR 0 1
4187: PUSH
4188: LD_VAR 0 1
4192: PUSH
4193: LD_EXP 62
4197: PUSH
4198: LD_EXP 63
4202: PUSH
4203: LD_EXP 64
4207: PUSH
4208: LD_EXP 65
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: DIFF
4219: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: PPUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 12
4242: ARRAY
4243: ST_TO_ADDR
// if radio then
4244: LD_VAR 0 4
4248: IFFALSE 4297
// begin if GetSex ( speaker ) = sex_male then
4250: LD_VAR 0 7
4254: PPUSH
4255: CALL_OW 258
4259: PUSH
4260: LD_INT 1
4262: EQUAL
4263: IFFALSE 4281
// SayRadio ( speaker , dialogMID ) else
4265: LD_VAR 0 7
4269: PPUSH
4270: LD_VAR 0 2
4274: PPUSH
4275: CALL_OW 94
4279: GO 4295
// SayRadio ( speaker , dialogFID ) ;
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_VAR 0 3
4290: PPUSH
4291: CALL_OW 94
// end else
4295: GO 4342
// begin if GetSex ( speaker ) = sex_male then
4297: LD_VAR 0 7
4301: PPUSH
4302: CALL_OW 258
4306: PUSH
4307: LD_INT 1
4309: EQUAL
4310: IFFALSE 4328
// Say ( speaker , dialogMID ) else
4312: LD_VAR 0 7
4316: PPUSH
4317: LD_VAR 0 2
4321: PPUSH
4322: CALL_OW 88
4326: GO 4342
// Say ( speaker , dialogFID ) ;
4328: LD_VAR 0 7
4332: PPUSH
4333: LD_VAR 0 3
4337: PPUSH
4338: CALL_OW 88
// end ; result := speaker ;
4342: LD_ADDR_VAR 0 5
4346: PUSH
4347: LD_VAR 0 7
4351: ST_TO_ADDR
// end ;
4352: LD_VAR 0 5
4356: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4357: LD_INT 0
4359: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 255
4369: PUSH
4370: LD_VAR 0 3
4374: EQUAL
4375: PUSH
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 302
4385: AND
4386: IFFALSE 4408
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4388: LD_VAR 0 1
4392: PPUSH
4393: LD_EXP 48
4397: PUSH
4398: LD_VAR 0 2
4402: STR
4403: PPUSH
4404: CALL_OW 38
// end ;
4408: LD_VAR 0 4
4412: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4413: LD_INT 0
4415: PPUSH
4416: PPUSH
4417: PPUSH
// resultCharactersToSave = [ ] ;
4418: LD_ADDR_VAR 0 6
4422: PUSH
4423: EMPTY
4424: ST_TO_ADDR
// for unit in characters do
4425: LD_ADDR_VAR 0 5
4429: PUSH
4430: LD_VAR 0 1
4434: PUSH
4435: FOR_IN
4436: IFFALSE 4484
// if GetSide ( unit ) = side and IsOK ( unit ) then
4438: LD_VAR 0 5
4442: PPUSH
4443: CALL_OW 255
4447: PUSH
4448: LD_VAR 0 3
4452: EQUAL
4453: PUSH
4454: LD_VAR 0 5
4458: PPUSH
4459: CALL_OW 302
4463: AND
4464: IFFALSE 4482
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 6
4475: PUSH
4476: LD_VAR 0 5
4480: ADD
4481: ST_TO_ADDR
4482: GO 4435
4484: POP
4485: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4486: LD_VAR 0 6
4490: PPUSH
4491: LD_EXP 48
4495: PUSH
4496: LD_VAR 0 2
4500: STR
4501: PPUSH
4502: CALL_OW 38
// end ;
4506: LD_VAR 0 4
4510: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_STRING QMoreInfo
4523: PPUSH
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 98
4533: ST_TO_ADDR
// case dec of 1 :
4534: LD_VAR 0 3
4538: PUSH
4539: LD_INT 1
4541: DOUBLE
4542: EQUAL
4543: IFTRUE 4547
4545: GO 4607
4547: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4548: LD_EXP 62
4552: PPUSH
4553: LD_STRING D2a-Bur-1
4555: PPUSH
4556: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4560: LD_EXP 76
4564: PPUSH
4565: LD_STRING D2a-Pla-1
4567: PPUSH
4568: CALL_OW 88
// q1 = q diff 1 ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_VAR 0 1
4581: PUSH
4582: LD_INT 1
4584: DIFF
4585: ST_TO_ADDR
// if q1 >= 2 then
4586: LD_VAR 0 4
4590: PUSH
4591: LD_INT 2
4593: GREATEREQUAL
4594: IFFALSE 4605
// Question1 ( q1 ) ;
4596: LD_VAR 0 4
4600: PPUSH
4601: CALL 4511 0 1
// end ; 2 :
4605: GO 4744
4607: LD_INT 2
4609: DOUBLE
4610: EQUAL
4611: IFTRUE 4615
4613: GO 4675
4615: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4616: LD_EXP 62
4620: PPUSH
4621: LD_STRING D2b-Bur-1
4623: PPUSH
4624: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4628: LD_EXP 76
4632: PPUSH
4633: LD_STRING D2b-Pla-1
4635: PPUSH
4636: CALL_OW 88
// q1 = q diff 2 ;
4640: LD_ADDR_VAR 0 4
4644: PUSH
4645: LD_VAR 0 1
4649: PUSH
4650: LD_INT 2
4652: DIFF
4653: ST_TO_ADDR
// if q1 >= 2 then
4654: LD_VAR 0 4
4658: PUSH
4659: LD_INT 2
4661: GREATEREQUAL
4662: IFFALSE 4673
// Question1 ( q1 ) ;
4664: LD_VAR 0 4
4668: PPUSH
4669: CALL 4511 0 1
// end ; 3 :
4673: GO 4744
4675: LD_INT 3
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4743
4683: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4684: LD_EXP 62
4688: PPUSH
4689: LD_STRING D2c-Bur-1
4691: PPUSH
4692: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4696: LD_EXP 76
4700: PPUSH
4701: LD_STRING D2c-Pla-1
4703: PPUSH
4704: CALL_OW 88
// q1 = q diff 3 ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 1
4717: PUSH
4718: LD_INT 3
4720: DIFF
4721: ST_TO_ADDR
// if q1 >= 2 then
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 2
4729: GREATEREQUAL
4730: IFFALSE 4741
// Question1 ( q1 ) ;
4732: LD_VAR 0 4
4736: PPUSH
4737: CALL 4511 0 1
// end ; end ;
4741: GO 4744
4743: POP
// end ;
4744: LD_VAR 0 2
4748: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL_OW 302
4762: NOT
4763: PUSH
4764: LD_VAR 0 2
4768: PPUSH
4769: CALL_OW 302
4773: NOT
4774: OR
4775: PUSH
4776: LD_VAR 0 3
4780: PPUSH
4781: CALL_OW 302
4785: NOT
4786: OR
4787: PUSH
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL_OW 261
4797: PUSH
4798: LD_INT 100
4800: EQUAL
4801: OR
4802: PUSH
4803: LD_VAR 0 2
4807: PPUSH
4808: CALL_OW 266
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: IN
4823: NOT
4824: OR
4825: IFFALSE 4829
// exit ;
4827: GO 4962
// AddComTransport ( engineer , depot , mat_oil ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: LD_INT 2
4841: PPUSH
4842: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4846: LD_INT 35
4848: PPUSH
4849: CALL_OW 67
// until Carry ( engineer ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: CALL_OW 281
4862: IFFALSE 4846
// RemoveTasks ( engineer ) ;
4864: LD_VAR 0 1
4868: PPUSH
4869: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_STRING O
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 0
4894: PUSH
4895: LD_INT 0
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: PPUSH
4913: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// until not Carry ( engineer ) ;
4924: LD_VAR 0 1
4928: PPUSH
4929: CALL_OW 281
4933: NOT
4934: IFFALSE 4917
// SetFuel ( vehicle , 100 ) ;
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 100
4943: PPUSH
4944: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4948: LD_VAR 0 1
4952: PPUSH
4953: LD_VAR 0 2
4957: PPUSH
4958: CALL_OW 180
// end ;
4962: LD_VAR 0 4
4966: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4967: LD_INT 0
4969: PPUSH
4970: PPUSH
4971: PPUSH
4972: PPUSH
4973: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4974: LD_ADDR_VAR 0 8
4978: PUSH
4979: LD_INT 48
4981: PUSH
4982: LD_INT 49
4984: PUSH
4985: LD_INT 50
4987: PUSH
4988: LD_INT 20
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 51
4996: PUSH
4997: LD_INT 52
4999: PUSH
5000: LD_INT 69
5002: PUSH
5003: LD_INT 39
5005: PUSH
5006: LD_INT 34
5008: PUSH
5009: LD_INT 40
5011: PUSH
5012: LD_INT 53
5014: PUSH
5015: LD_INT 71
5017: PUSH
5018: LD_INT 57
5020: PUSH
5021: LD_INT 58
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 32
5029: PUSH
5030: LD_INT 27
5032: PUSH
5033: LD_INT 23
5035: PUSH
5036: LD_INT 33
5038: PUSH
5039: LD_INT 59
5041: PUSH
5042: LD_INT 54
5044: PUSH
5045: LD_INT 55
5047: PUSH
5048: LD_INT 56
5050: PUSH
5051: LD_INT 63
5053: PUSH
5054: LD_INT 64
5056: PUSH
5057: LD_INT 65
5059: PUSH
5060: LD_INT 30
5062: PUSH
5063: LD_INT 31
5065: PUSH
5066: LD_INT 21
5068: PUSH
5069: LD_INT 22
5071: PUSH
5072: LD_INT 25
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5109: LD_ADDR_VAR 0 5
5113: PUSH
5114: DOUBLE
5115: LD_INT 1
5117: DEC
5118: ST_TO_ADDR
5119: LD_VAR 0 8
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5201
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5127: LD_VAR 0 8
5131: PUSH
5132: LD_VAR 0 5
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 1
5142: PPUSH
5143: CALL_OW 321
5147: PUSH
5148: LD_INT 1
5150: EQUAL
5151: PUSH
5152: LD_VAR 0 8
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: LD_VAR 0 3
5167: PPUSH
5168: CALL_OW 482
5172: PUSH
5173: LD_INT 1
5175: EQUAL
5176: AND
5177: IFFALSE 5199
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5179: LD_VAR 0 2
5183: PPUSH
5184: LD_VAR 0 8
5188: PUSH
5189: LD_VAR 0 5
5193: ARRAY
5194: PPUSH
5195: CALL_OW 184
5199: GO 5124
5201: POP
5202: POP
// end ;
5203: LD_VAR 0 4
5207: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
5212: PPUSH
// uc_side := GetSide ( b ) ;
5213: LD_ADDR_OWVAR 20
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: CALL_OW 255
5227: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5228: LD_ADDR_OWVAR 21
5232: PUSH
5233: LD_VAR 0 2
5237: PPUSH
5238: CALL_OW 248
5242: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 1
5248: PPUSH
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 380
// un = CreateHuman ;
5258: LD_ADDR_VAR 0 4
5262: PUSH
5263: CALL_OW 44
5267: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 254
5282: PUSH
5283: LD_INT 3
5285: MINUS
5286: ST_TO_ADDR
// if dir < 0 then
5287: LD_VAR 0 5
5291: PUSH
5292: LD_INT 0
5294: LESS
5295: IFFALSE 5311
// dir := 6 + dir ;
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_VAR 0 5
5309: PLUS
5310: ST_TO_ADDR
// SetDir ( un , dir ) ;
5311: LD_VAR 0 4
5315: PPUSH
5316: LD_VAR 0 5
5320: PPUSH
5321: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5325: LD_VAR 0 4
5329: PPUSH
5330: LD_VAR 0 2
5334: PPUSH
5335: CALL_OW 52
// result = un ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 4
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 3
5353: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5354: LD_INT 0
5356: PPUSH
5357: PPUSH
// dir := GetDir ( b ) - 3 ;
5358: LD_ADDR_VAR 0 4
5362: PUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 254
5372: PUSH
5373: LD_INT 3
5375: MINUS
5376: ST_TO_ADDR
// if dir < 0 then
5377: LD_VAR 0 4
5381: PUSH
5382: LD_INT 0
5384: LESS
5385: IFFALSE 5401
// dir := 6 + dir ;
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: LD_INT 6
5394: PUSH
5395: LD_VAR 0 4
5399: PLUS
5400: ST_TO_ADDR
// SetDir ( un , dir ) ;
5401: LD_VAR 0 1
5405: PPUSH
5406: LD_VAR 0 4
5410: PPUSH
5411: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5415: LD_VAR 0 1
5419: PPUSH
5420: LD_VAR 0 2
5424: PPUSH
5425: CALL_OW 52
// result = un ;
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_VAR 0 1
5438: ST_TO_ADDR
// end ;
5439: LD_VAR 0 3
5443: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5444: LD_INT 0
5446: PPUSH
5447: PPUSH
5448: PPUSH
// tmp = [ ] ;
5449: LD_ADDR_VAR 0 5
5453: PUSH
5454: EMPTY
5455: ST_TO_ADDR
// if not vehicles then
5456: LD_VAR 0 1
5460: NOT
5461: IFFALSE 5465
// exit ;
5463: GO 5582
// for i in vehicles do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PUSH
5475: FOR_IN
5476: IFFALSE 5566
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_VAR 0 5
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_VAR 0 4
5495: PPUSH
5496: CALL_OW 265
5500: PUSH
5501: LD_VAR 0 4
5505: PPUSH
5506: CALL_OW 262
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: CALL_OW 263
5520: PUSH
5521: LD_VAR 0 4
5525: PPUSH
5526: CALL_OW 264
5530: PUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 261
5540: PUSH
5541: LD_VAR 0 4
5545: PPUSH
5546: CALL_OW 256
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 2
5563: ST_TO_ADDR
5564: GO 5475
5566: POP
5567: POP
// SaveVariable ( tmp , ident ) ;
5568: LD_VAR 0 5
5572: PPUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 39
// end ;
5582: LD_VAR 0 3
5586: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5587: LD_INT 0
5589: PPUSH
5590: PPUSH
5591: PPUSH
// buildingsToSave = [ ] ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: EMPTY
5598: ST_TO_ADDR
// if not buildings then
5599: LD_VAR 0 1
5603: NOT
5604: IFFALSE 5608
// exit ;
5606: GO 6183
// for i in buildings do
5608: LD_ADDR_VAR 0 4
5612: PUSH
5613: LD_VAR 0 1
5617: PUSH
5618: FOR_IN
5619: IFFALSE 6167
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5621: LD_VAR 0 4
5625: PPUSH
5626: CALL_OW 266
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: LD_INT 7
5636: PUSH
5637: LD_INT 8
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: IN
5645: IFFALSE 5770
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5647: LD_ADDR_VAR 0 5
5651: PUSH
5652: LD_VAR 0 5
5656: PUSH
5657: LD_VAR 0 4
5661: PPUSH
5662: CALL_OW 266
5666: PUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 250
5676: PUSH
5677: LD_VAR 0 4
5681: PPUSH
5682: CALL_OW 251
5686: PUSH
5687: LD_VAR 0 4
5691: PPUSH
5692: CALL_OW 254
5696: PUSH
5697: LD_VAR 0 4
5701: PPUSH
5702: CALL_OW 267
5706: PUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: CALL_OW 248
5716: PUSH
5717: LD_VAR 0 4
5721: PPUSH
5722: CALL_OW 256
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 1
5734: PPUSH
5735: CALL_OW 268
5739: PUSH
5740: LD_VAR 0 4
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: CALL_OW 268
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: EMPTY
5765: LIST
5766: ADD
5767: ST_TO_ADDR
5768: GO 6165
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5770: LD_VAR 0 4
5774: PPUSH
5775: CALL_OW 266
5779: PUSH
5780: LD_INT 32
5782: PUSH
5783: LD_INT 33
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: IN
5790: IFFALSE 5898
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5792: LD_ADDR_VAR 0 5
5796: PUSH
5797: LD_VAR 0 5
5801: PUSH
5802: LD_VAR 0 4
5806: PPUSH
5807: CALL_OW 266
5811: PUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 250
5821: PUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 251
5831: PUSH
5832: LD_VAR 0 4
5836: PPUSH
5837: CALL_OW 254
5841: PUSH
5842: LD_VAR 0 4
5846: PPUSH
5847: CALL_OW 267
5851: PUSH
5852: LD_VAR 0 4
5856: PPUSH
5857: CALL_OW 248
5861: PUSH
5862: LD_VAR 0 4
5866: PPUSH
5867: CALL_OW 256
5871: PUSH
5872: LD_VAR 0 4
5876: PPUSH
5877: CALL_OW 269
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: ADD
5895: ST_TO_ADDR
5896: GO 6165
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5898: LD_VAR 0 4
5902: PPUSH
5903: CALL_OW 266
5907: PUSH
5908: LD_INT 0
5910: PUSH
5911: LD_INT 1
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: IN
5918: IFFALSE 6072
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5920: LD_ADDR_VAR 0 5
5924: PUSH
5925: LD_VAR 0 5
5929: PUSH
5930: LD_VAR 0 4
5934: PPUSH
5935: CALL_OW 266
5939: PUSH
5940: LD_VAR 0 4
5944: PPUSH
5945: CALL_OW 250
5949: PUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: CALL_OW 251
5959: PUSH
5960: LD_VAR 0 4
5964: PPUSH
5965: CALL_OW 254
5969: PUSH
5970: LD_VAR 0 4
5974: PPUSH
5975: CALL_OW 267
5979: PUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 248
5989: PUSH
5990: LD_VAR 0 4
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_VAR 0 4
6004: PPUSH
6005: CALL_OW 274
6009: PPUSH
6010: LD_INT 1
6012: PPUSH
6013: CALL_OW 275
6017: PUSH
6018: LD_VAR 0 4
6022: PPUSH
6023: CALL_OW 274
6027: PPUSH
6028: LD_INT 2
6030: PPUSH
6031: CALL_OW 275
6035: PUSH
6036: LD_VAR 0 4
6040: PPUSH
6041: CALL_OW 274
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: CALL_OW 275
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: ADD
6069: ST_TO_ADDR
6070: GO 6165
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: LD_VAR 0 5
6081: PUSH
6082: LD_VAR 0 4
6086: PPUSH
6087: CALL_OW 266
6091: PUSH
6092: LD_VAR 0 4
6096: PPUSH
6097: CALL_OW 250
6101: PUSH
6102: LD_VAR 0 4
6106: PPUSH
6107: CALL_OW 251
6111: PUSH
6112: LD_VAR 0 4
6116: PPUSH
6117: CALL_OW 254
6121: PUSH
6122: LD_VAR 0 4
6126: PPUSH
6127: CALL_OW 267
6131: PUSH
6132: LD_VAR 0 4
6136: PPUSH
6137: CALL_OW 248
6141: PUSH
6142: LD_VAR 0 4
6146: PPUSH
6147: CALL_OW 256
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: ADD
6164: ST_TO_ADDR
// end ;
6165: GO 5618
6167: POP
6168: POP
// SaveVariable ( buildingsToSave , ident ) ;
6169: LD_VAR 0 5
6173: PPUSH
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 39
// end ;
6183: LD_VAR 0 3
6187: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6188: LD_INT 0
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
// belkovTeam = [ ] ;
6195: LD_ADDR_EXP 73
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// if belkovReturn then
6202: LD_EXP 6
6206: IFFALSE 6224
// belkovTeam = belkovTeam ^ Belkov ;
6208: LD_ADDR_EXP 73
6212: PUSH
6213: LD_EXP 73
6217: PUSH
6218: LD_EXP 64
6222: ADD
6223: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6224: LD_ADDR_EXP 73
6228: PUSH
6229: LD_EXP 73
6233: PUSH
6234: LD_EXP 68
6238: ADD
6239: ST_TO_ADDR
// for unit in other_survivors do
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: LD_EXP 66
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6292
// if IsOK ( unit ) and belkovTeam < 5 then
6253: LD_VAR 0 3
6257: PPUSH
6258: CALL_OW 302
6262: PUSH
6263: LD_EXP 73
6267: PUSH
6268: LD_INT 5
6270: LESS
6271: AND
6272: IFFALSE 6290
// belkovTeam = belkovTeam ^ unit ;
6274: LD_ADDR_EXP 73
6278: PUSH
6279: LD_EXP 73
6283: PUSH
6284: LD_VAR 0 3
6288: ADD
6289: ST_TO_ADDR
6290: GO 6250
6292: POP
6293: POP
// if belkovTeam < 5 then
6294: LD_EXP 73
6298: PUSH
6299: LD_INT 5
6301: LESS
6302: IFFALSE 6428
// begin restRandSolds = 5 - belkovTeam ;
6304: LD_ADDR_VAR 0 4
6308: PUSH
6309: LD_INT 5
6311: PUSH
6312: LD_EXP 73
6316: MINUS
6317: ST_TO_ADDR
// for i := 1 to restRandSolds do
6318: LD_ADDR_VAR 0 2
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6426
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_EXP 69
6345: PPUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: PPUSH
6359: CALL_OW 72
6363: PUSH
6364: LD_EXP 67
6368: DIFF
6369: PUSH
6370: FOR_IN
6371: IFFALSE 6422
// if not unit in belkovTeam then
6373: LD_VAR 0 3
6377: PUSH
6378: LD_EXP 73
6382: IN
6383: NOT
6384: IFFALSE 6420
// begin belkovTeam = belkovTeam ^ unit ;
6386: LD_ADDR_EXP 73
6390: PUSH
6391: LD_EXP 73
6395: PUSH
6396: LD_VAR 0 3
6400: ADD
6401: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6402: LD_ADDR_EXP 69
6406: PUSH
6407: LD_EXP 69
6411: PUSH
6412: LD_VAR 0 3
6416: DIFF
6417: ST_TO_ADDR
// break ;
6418: GO 6422
// end ;
6420: GO 6370
6422: POP
6423: POP
6424: GO 6333
6426: POP
6427: POP
// end ; tmp = belkovTeam diff Belkov ;
6428: LD_ADDR_VAR 0 5
6432: PUSH
6433: LD_EXP 73
6437: PUSH
6438: LD_EXP 64
6442: DIFF
6443: ST_TO_ADDR
// if tmp < 4 then
6444: LD_VAR 0 5
6448: PUSH
6449: LD_INT 4
6451: LESS
6452: IFFALSE 6536
// begin for i := 1 to 4 - tmp do
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: DOUBLE
6460: LD_INT 1
6462: DEC
6463: ST_TO_ADDR
6464: LD_INT 4
6466: PUSH
6467: LD_VAR 0 5
6471: MINUS
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6534
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6476: LD_INT 0
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 2
6484: PPUSH
6485: CALL_OW 12
6489: PPUSH
6490: CALL_OW 381
// unit = CreateHuman ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: CALL_OW 44
6503: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6504: LD_ADDR_EXP 73
6508: PUSH
6509: LD_EXP 73
6513: PUSH
6514: LD_VAR 0 3
6518: ADD
6519: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6520: LD_VAR 0 3
6524: PPUSH
6525: LD_INT 209
6527: PPUSH
6528: CALL_OW 52
// end ;
6532: GO 6473
6534: POP
6535: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6536: LD_STRING 01_Kirilenkova
6538: PPUSH
6539: CALL_OW 28
6543: IFFALSE 6563
// belkovTeam = belkovTeam ^ Kirilenkova else
6545: LD_ADDR_EXP 73
6549: PUSH
6550: LD_EXP 73
6554: PUSH
6555: LD_EXP 65
6559: ADD
6560: ST_TO_ADDR
6561: GO 6639
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6563: LD_ADDR_EXP 73
6567: PUSH
6568: LD_EXP 73
6572: PUSH
6573: LD_EXP 69
6577: PPUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: PPUSH
6591: CALL_OW 72
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: ADD
6600: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6601: LD_ADDR_EXP 69
6605: PUSH
6606: LD_EXP 69
6610: PUSH
6611: LD_EXP 69
6615: PPUSH
6616: LD_INT 25
6618: PUSH
6619: LD_INT 4
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: PPUSH
6629: CALL_OW 72
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: DIFF
6638: ST_TO_ADDR
// end ; end ;
6639: LD_VAR 0 1
6643: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6648: LD_EXP 78
6652: NOT
6653: PUSH
6654: LD_EXP 78
6658: PPUSH
6659: CALL_OW 302
6663: NOT
6664: OR
6665: IFFALSE 6768
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_EXP 77
6676: PPUSH
6677: LD_INT 50
6679: PUSH
6680: EMPTY
6681: LIST
6682: PPUSH
6683: CALL_OW 72
6687: PUSH
6688: LD_EXP 79
6692: DIFF
6693: ST_TO_ADDR
// if soldsOK then
6694: LD_VAR 0 2
6698: IFFALSE 6768
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6700: LD_VAR 0 2
6704: PUSH
6705: LD_INT 1
6707: ARRAY
6708: PPUSH
6709: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6713: LD_VAR 0 2
6717: PUSH
6718: LD_INT 1
6720: ARRAY
6721: PPUSH
6722: LD_INT 112
6724: PPUSH
6725: LD_INT 96
6727: PPUSH
6728: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6732: LD_VAR 0 2
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: PPUSH
6741: LD_INT 3
6743: PPUSH
6744: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6748: LD_ADDR_EXP 77
6752: PUSH
6753: LD_EXP 77
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 1
6765: ARRAY
6766: DIFF
6767: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6768: LD_EXP 79
6772: NOT
6773: PUSH
6774: LD_EXP 79
6778: PPUSH
6779: CALL_OW 302
6783: NOT
6784: OR
6785: IFFALSE 6888
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 77
6796: PPUSH
6797: LD_INT 50
6799: PUSH
6800: EMPTY
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_EXP 78
6812: DIFF
6813: ST_TO_ADDR
// if soldsOK then
6814: LD_VAR 0 2
6818: IFFALSE 6888
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 1
6827: ARRAY
6828: PPUSH
6829: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: PPUSH
6842: LD_INT 112
6844: PPUSH
6845: LD_INT 96
6847: PPUSH
6848: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 1
6859: ARRAY
6860: PPUSH
6861: LD_INT 3
6863: PPUSH
6864: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6868: LD_ADDR_EXP 77
6872: PUSH
6873: LD_EXP 77
6877: PUSH
6878: LD_VAR 0 2
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: DIFF
6887: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6888: LD_EXP 78
6892: PUSH
6893: LD_EXP 79
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6906: LD_EXP 78
6910: PUSH
6911: LD_EXP 79
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: LD_INT 112
6922: PPUSH
6923: LD_INT 96
6925: PPUSH
6926: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6930: LD_EXP 78
6934: PUSH
6935: LD_EXP 79
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: LD_INT 3
6946: PPUSH
6947: CALL_OW 235
// end ; end_of_file
6951: LD_VAR 0 1
6955: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6962: LD_EXP 62
6966: PPUSH
6967: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6971: LD_EXP 62
6975: PPUSH
6976: LD_INT 163
6978: PPUSH
6979: LD_INT 108
6981: PPUSH
6982: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6986: LD_EXP 62
6990: PPUSH
6991: LD_EXP 67
6995: PPUSH
6996: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 21
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: PUSH
7034: LD_EXP 62
7038: DIFF
7039: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_EXP 52
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7174
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_EXP 52
7072: PUSH
7073: LD_VAR 0 4
7077: ARRAY
7078: PUSH
7079: LD_INT 1
7081: ARRAY
7082: PPUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_VAR 0 4
7092: ARRAY
7093: PUSH
7094: LD_INT 2
7096: ARRAY
7097: PPUSH
7098: CALL_OW 73
7102: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_EXP 52
7112: PUSH
7113: LD_VAR 0 4
7117: ARRAY
7118: PUSH
7119: LD_INT 1
7121: ARRAY
7122: PPUSH
7123: LD_EXP 52
7127: PUSH
7128: LD_VAR 0 4
7132: ARRAY
7133: PUSH
7134: LD_INT 2
7136: ARRAY
7137: PPUSH
7138: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7142: LD_VAR 0 3
7146: PPUSH
7147: LD_EXP 67
7151: PPUSH
7152: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_VAR 0 2
7165: PUSH
7166: LD_VAR 0 3
7170: DIFF
7171: ST_TO_ADDR
// end ;
7172: GO 7055
7174: POP
7175: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7176: LD_EXP 62
7180: PPUSH
7181: CALL_OW 87
// wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7192: LD_EXP 62
7196: PPUSH
7197: LD_EXP 67
7201: PPUSH
7202: CALL_OW 296
7206: PUSH
7207: LD_INT 4
7209: LESS
7210: IFFALSE 7176
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7212: LD_EXP 62
7216: PUSH
7217: LD_EXP 67
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PPUSH
7226: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7230: LD_EXP 67
7234: PPUSH
7235: LD_EXP 62
7239: PPUSH
7240: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7244: LD_EXP 67
7248: PPUSH
7249: LD_STRING D1-Kur-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7256: LD_EXP 62
7260: PPUSH
7261: LD_STRING D1-Bur-1
7263: PPUSH
7264: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7268: LD_EXP 67
7272: PPUSH
7273: LD_STRING D1-Kur-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7280: LD_EXP 62
7284: PPUSH
7285: LD_STRING D1-Bur-2
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7292: LD_EXP 67
7296: PPUSH
7297: LD_STRING D1-Kur-3
7299: PPUSH
7300: CALL_OW 88
// if IsOK ( Gnyevko ) then
7304: LD_EXP 63
7308: PPUSH
7309: CALL_OW 302
7313: IFFALSE 7327
// Say ( Kurin , D1-Kur-3a ) ;
7315: LD_EXP 67
7319: PPUSH
7320: LD_STRING D1-Kur-3a
7322: PPUSH
7323: CALL_OW 88
// InGameOff ;
7327: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7331: LD_INT 22
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 69
7359: PUSH
7360: LD_EXP 62
7364: PUSH
7365: LD_EXP 63
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: DIFF
7374: PPUSH
7375: LD_INT 6
7377: PPUSH
7378: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7382: LD_EXP 70
7386: PPUSH
7387: LD_INT 3
7389: PPUSH
7390: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7394: LD_INT 9
7396: PPUSH
7397: LD_INT 22
7399: PUSH
7400: LD_INT 6
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 1
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PPUSH
7421: CALL_OW 70
7425: PUSH
7426: LD_EXP 67
7430: DIFF
7431: PPUSH
7432: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7436: LD_EXP 66
7440: PPUSH
7441: LD_INT 95
7443: PPUSH
7444: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7448: LD_EXP 64
7452: PPUSH
7453: LD_INT 95
7455: PPUSH
7456: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7460: LD_EXP 65
7464: PPUSH
7465: CALL_OW 305
7469: IFFALSE 7483
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7471: LD_EXP 65
7475: PPUSH
7476: LD_INT 83
7478: PPUSH
7479: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7483: LD_STRING 01_Gnyevko
7485: PPUSH
7486: CALL_OW 28
7490: NOT
7491: IFFALSE 7505
// SetSide ( randomMech , 3 ) ;
7493: LD_EXP 71
7497: PPUSH
7498: LD_INT 3
7500: PPUSH
7501: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7505: LD_STRING M1
7507: PPUSH
7508: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7512: LD_INT 3
7514: PPUSH
7515: LD_INT 6
7517: PPUSH
7518: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7522: LD_INT 3
7524: PPUSH
7525: LD_INT 7
7527: PPUSH
7528: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7532: LD_INT 6
7534: PPUSH
7535: LD_INT 6
7537: PPUSH
7538: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7542: LD_INT 6
7544: PPUSH
7545: LD_INT 7
7547: PPUSH
7548: CALL_OW 334
// SaveForQuickRestart ;
7552: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7556: LD_EXP 66
7560: PPUSH
7561: LD_INT 95
7563: PPUSH
7564: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7568: LD_EXP 64
7572: PPUSH
7573: LD_INT 95
7575: PPUSH
7576: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7580: LD_EXP 65
7584: PPUSH
7585: CALL_OW 305
7589: IFFALSE 7603
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7591: LD_EXP 65
7595: PPUSH
7596: LD_INT 83
7598: PPUSH
7599: CALL_OW 120
// end ;
7603: LD_VAR 0 1
7607: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7608: LD_EXP 20
7612: NOT
7613: PUSH
7614: LD_INT 20
7616: PPUSH
7617: LD_INT 22
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 1
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PPUSH
7659: CALL_OW 70
7663: PUSH
7664: LD_INT 0
7666: GREATER
7667: AND
7668: IFFALSE 8042
7670: GO 7672
7672: DISABLE
7673: LD_INT 0
7675: PPUSH
// begin enable ;
7676: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7677: LD_ADDR_VAR 0 1
7681: PUSH
7682: LD_INT 20
7684: PPUSH
7685: LD_INT 22
7687: PUSH
7688: LD_INT 3
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 21
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 21
7710: PUSH
7711: LD_INT 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PPUSH
7727: CALL_OW 70
7731: PUSH
7732: FOR_IN
7733: IFFALSE 8019
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 250
7749: PPUSH
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 251
7759: PUSH
7760: LD_INT 5
7762: PLUS
7763: PPUSH
7764: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7768: LD_EXP 7
7772: NOT
7773: PUSH
7774: LD_EXP 33
7778: NOT
7779: AND
7780: IFFALSE 7843
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7782: LD_VAR 0 1
7786: PUSH
7787: LD_EXP 62
7791: NONEQUAL
7792: PUSH
7793: LD_EXP 70
7797: PPUSH
7798: CALL_OW 302
7802: AND
7803: IFFALSE 7817
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7805: LD_EXP 70
7809: PPUSH
7810: LD_STRING D1b-Kov-1
7812: PPUSH
7813: CALL_OW 88
// if unit = Burlak then
7817: LD_VAR 0 1
7821: PUSH
7822: LD_EXP 62
7826: EQUAL
7827: IFFALSE 7841
// Say ( Burlak , D1b-Bur-1 ) ;
7829: LD_EXP 62
7833: PPUSH
7834: LD_STRING D1b-Bur-1
7836: PPUSH
7837: CALL_OW 88
// end else
7841: GO 7862
// if not dialogLoopBlocker then
7843: LD_EXP 33
7847: NOT
7848: IFFALSE 7862
// Say ( Platonov , D8-Pla-1 ) ;
7850: LD_EXP 76
7854: PPUSH
7855: LD_STRING D8-Pla-1
7857: PPUSH
7858: CALL_OW 88
// if not dialogLoopBlocker then
7862: LD_EXP 33
7866: NOT
7867: IFFALSE 7877
// dialogLoopBlocker = true ;
7869: LD_ADDR_EXP 33
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7877: LD_INT 20
7879: PPUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 70
7926: PPUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 250
7936: PPUSH
7937: LD_VAR 0 1
7941: PPUSH
7942: CALL_OW 251
7946: PUSH
7947: LD_INT 5
7949: PLUS
7950: PPUSH
7951: CALL_OW 111
// wait ( 0 0$1 ) ;
7955: LD_INT 35
7957: PPUSH
7958: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7962: LD_INT 20
7964: PPUSH
7965: LD_INT 22
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 2
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PPUSH
8007: CALL_OW 70
8011: PUSH
8012: LD_INT 0
8014: EQUAL
8015: IFFALSE 7877
// end ;
8017: GO 7732
8019: POP
8020: POP
// if dialogLoopBlocker then
8021: LD_EXP 33
8025: IFFALSE 8042
// begin wait ( 0 0$5 ) ;
8027: LD_INT 175
8029: PPUSH
8030: CALL_OW 67
// dialogLoopBlocker = false ;
8034: LD_ADDR_EXP 33
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// end ; end ;
8042: PPOPN 1
8044: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
8045: LD_EXP 19
8049: NOT
8050: PUSH
8051: LD_INT 8
8053: PPUSH
8054: LD_INT 22
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 1
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 21
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 71
8100: PUSH
8101: LD_INT 0
8103: GREATER
8104: AND
8105: IFFALSE 8240
8107: GO 8109
8109: DISABLE
8110: LD_INT 0
8112: PPUSH
// begin enable ;
8113: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8114: LD_ADDR_VAR 0 1
8118: PUSH
8119: LD_INT 8
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 3
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 2
8134: PUSH
8135: LD_INT 21
8137: PUSH
8138: LD_INT 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 21
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 71
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8223
// begin ComMoveXY ( unit , 114 , 98 ) ;
8172: LD_VAR 0 1
8176: PPUSH
8177: LD_INT 114
8179: PPUSH
8180: LD_INT 98
8182: PPUSH
8183: CALL_OW 111
// if dialogLoopBlocker then
8187: LD_EXP 33
8191: IFFALSE 8197
// exit ;
8193: POP
8194: POP
8195: GO 8240
// dialogLoopBlocker = true ;
8197: LD_ADDR_EXP 33
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8205: LD_EXP 76
8209: PPUSH
8210: LD_STRING D8-Pla-1
8212: PPUSH
8213: CALL_OW 88
// exit ;
8217: POP
8218: POP
8219: GO 8240
// end ;
8221: GO 8169
8223: POP
8224: POP
// wait ( 0 0$5 ) ;
8225: LD_INT 175
8227: PPUSH
8228: CALL_OW 67
// dialogLoopBlocker = false ;
8232: LD_ADDR_EXP 33
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// end ;
8240: PPOPN 1
8242: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8243: LD_EXP 7
8247: NOT
8248: PUSH
8249: LD_INT 9
8251: PPUSH
8252: LD_INT 22
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 70
8280: PUSH
8281: LD_INT 0
8283: GREATER
8284: AND
8285: IFFALSE 8302
8287: GO 8289
8289: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8290: LD_EXP 67
8294: PPUSH
8295: LD_STRING D1a-Kur-1
8297: PPUSH
8298: CALL_OW 88
8302: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8303: LD_EXP 7
8307: NOT
8308: PUSH
8309: LD_EXP 62
8313: PPUSH
8314: CALL_OW 302
8318: AND
8319: PUSH
8320: LD_INT 29
8322: PPUSH
8323: LD_INT 22
8325: PUSH
8326: LD_INT 3
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 21
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 70
8351: PUSH
8352: LD_INT 0
8354: GREATER
8355: AND
8356: IFFALSE 8983
8358: GO 8360
8360: DISABLE
8361: LD_INT 0
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
8367: PPUSH
// begin enable ;
8368: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_INT 22
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: PUSH
8403: FOR_IN
8404: IFFALSE 8981
// if See ( 6 , unit ) then
8406: LD_INT 6
8408: PPUSH
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 292
8418: IFFALSE 8979
// begin meetPlatonov = true ;
8420: LD_ADDR_EXP 7
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// InGameOn ;
8428: CALL_OW 8
// DialogueOn ;
8432: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_EXP 77
8445: PPUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 4
8470: PUSH
8471: LD_INT 8
8473: PPUSH
8474: LD_INT 22
8476: PUSH
8477: LD_INT 6
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 21
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 30
8496: PUSH
8497: LD_INT 31
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 3
8506: PUSH
8507: LD_INT 58
8509: PUSH
8510: EMPTY
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: ADD
8528: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8529: LD_ADDR_VAR 0 5
8533: PUSH
8534: LD_VAR 0 4
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: CALL_OW 74
8548: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8549: LD_VAR 0 5
8553: PPUSH
8554: CALL_OW 247
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: IFFALSE 8583
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8564: LD_ADDR_VAR 0 5
8568: PUSH
8569: LD_VAR 0 5
8573: PPUSH
8574: CALL_OW 313
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8583: LD_VAR 0 5
8587: PPUSH
8588: LD_STRING D2-RSol1-1
8590: PPUSH
8591: LD_STRING 
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL 4178 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8601: LD_EXP 62
8605: PPUSH
8606: LD_STRING D2-Bur-1
8608: PPUSH
8609: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_STRING D2-RSol1-2
8620: PPUSH
8621: CALL_OW 88
// DialogueOff ;
8625: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 21
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 50
8656: PUSH
8657: EMPTY
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: PPUSH
8665: CALL_OW 69
8669: ST_TO_ADDR
// for i := 1 to yourUnits do
8670: LD_ADDR_VAR 0 1
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 3
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8755
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8688: LD_VAR 0 3
8692: PUSH
8693: LD_VAR 0 1
8697: ARRAY
8698: PPUSH
8699: LD_EXP 53
8703: PUSH
8704: LD_VAR 0 1
8708: ARRAY
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: LD_EXP 53
8718: PUSH
8719: LD_VAR 0 1
8723: ARRAY
8724: PUSH
8725: LD_INT 2
8727: ARRAY
8728: PPUSH
8729: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8733: LD_VAR 0 3
8737: PUSH
8738: LD_VAR 0 1
8742: ARRAY
8743: PPUSH
8744: LD_EXP 76
8748: PPUSH
8749: CALL_OW 179
// end ;
8753: GO 8685
8755: POP
8756: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8757: LD_EXP 62
8761: PPUSH
8762: CALL_OW 87
// wait ( 0 0$1 ) ;
8766: LD_INT 35
8768: PPUSH
8769: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8773: LD_EXP 62
8777: PPUSH
8778: LD_EXP 76
8782: PPUSH
8783: CALL_OW 296
8787: PUSH
8788: LD_INT 4
8790: LESS
8791: IFFALSE 8757
// ComTurnUnit ( Platonov , Burlak ) ;
8793: LD_EXP 76
8797: PPUSH
8798: LD_EXP 62
8802: PPUSH
8803: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8807: LD_EXP 76
8811: PPUSH
8812: LD_STRING D2-Pla-2
8814: PPUSH
8815: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8819: LD_EXP 62
8823: PPUSH
8824: LD_STRING D2-Bur-2
8826: PPUSH
8827: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8831: LD_EXP 76
8835: PPUSH
8836: LD_STRING D2-Pla-3
8838: PPUSH
8839: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8843: LD_EXP 62
8847: PPUSH
8848: LD_STRING D2-Bur-3
8850: PPUSH
8851: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8855: LD_EXP 76
8859: PPUSH
8860: LD_STRING D2-Pla-4
8862: PPUSH
8863: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8867: LD_EXP 62
8871: PPUSH
8872: LD_STRING D2-Bur-4
8874: PPUSH
8875: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8879: LD_EXP 76
8883: PPUSH
8884: LD_STRING D2-Pla-5
8886: PPUSH
8887: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8891: LD_INT 1
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: LD_INT 3
8899: PUSH
8900: LD_INT 4
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL 4511 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8913: LD_EXP 76
8917: PPUSH
8918: LD_STRING D3-Pla-1
8920: PPUSH
8921: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8925: LD_EXP 62
8929: PPUSH
8930: LD_STRING D3-Bur-1
8932: PPUSH
8933: CALL_OW 88
// InGameOff ;
8937: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8941: LD_STRING M2a
8943: PPUSH
8944: CALL_OW 337
// ComFree ( Platonov ) ;
8948: LD_EXP 76
8952: PPUSH
8953: CALL_OW 139
// SetSide ( beria , 3 ) ;
8957: LD_INT 106
8959: PPUSH
8960: LD_INT 3
8962: PPUSH
8963: CALL_OW 235
// canExitBase = false ;
8967: LD_ADDR_EXP 19
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// exit ;
8975: POP
8976: POP
8977: GO 8983
// end ;
8979: GO 8403
8981: POP
8982: POP
// end ;
8983: PPOPN 5
8985: END
// export function Dial_LabConstructed ; begin
8986: LD_INT 0
8988: PPUSH
// labConstructed = true ;
8989: LD_ADDR_EXP 8
8993: PUSH
8994: LD_INT 1
8996: ST_TO_ADDR
// DialogueOn ;
8997: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9001: LD_EXP 62
9005: PPUSH
9006: LD_STRING D5a-Bur-1
9008: PPUSH
9009: CALL_OW 88
// if workshopConstructed then
9013: LD_EXP 9
9017: IFFALSE 9033
// Say ( Platonov , D5a-Pla-1 ) else
9019: LD_EXP 76
9023: PPUSH
9024: LD_STRING D5a-Pla-1
9026: PPUSH
9027: CALL_OW 88
9031: GO 9045
// Say ( Platonov , D5a-Pla-1a ) ;
9033: LD_EXP 76
9037: PPUSH
9038: LD_STRING D5a-Pla-1a
9040: PPUSH
9041: CALL_OW 88
// DialogueOff ;
9045: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
9049: LD_STRING M2b
9051: PPUSH
9052: CALL_OW 337
// end ;
9056: LD_VAR 0 1
9060: RET
// export function Dial_WorkshopConstructed ; begin
9061: LD_INT 0
9063: PPUSH
// workshopConstructed = true ;
9064: LD_ADDR_EXP 9
9068: PUSH
9069: LD_INT 1
9071: ST_TO_ADDR
// DialogueOn ;
9072: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
9076: LD_EXP 62
9080: PPUSH
9081: LD_STRING D5b-Bur-1
9083: PPUSH
9084: CALL_OW 88
// if labConstructed then
9088: LD_EXP 8
9092: IFFALSE 9108
// Say ( Platonov , D5b-Pla-1 ) else
9094: LD_EXP 76
9098: PPUSH
9099: LD_STRING D5b-Pla-1
9101: PPUSH
9102: CALL_OW 88
9106: GO 9120
// Say ( Platonov , D5b-Pla-1a ) ;
9108: LD_EXP 76
9112: PPUSH
9113: LD_STRING D5b-Pla-1a
9115: PPUSH
9116: CALL_OW 88
// DialogueOff ;
9120: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9124: LD_STRING M2c
9126: PPUSH
9127: CALL_OW 337
// end ;
9131: LD_VAR 0 1
9135: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9136: LD_INT 0
9138: PPUSH
// wait ( 0 0$1 ) ;
9139: LD_INT 35
9141: PPUSH
9142: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9155: LD_INT 22
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PPUSH
9179: CALL_OW 69
9183: PPUSH
9184: CALL_OW 141
// DialogueOn ;
9188: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9192: LD_EXP 76
9196: PPUSH
9197: LD_STRING D6-Pla-1
9199: PPUSH
9200: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9204: LD_EXP 62
9208: PPUSH
9209: LD_STRING D6-Bur-1
9211: PPUSH
9212: CALL_OW 88
// DialogueOff ;
9216: CALL_OW 7
// case GetBType ( building ) of b_lab :
9220: LD_VAR 0 1
9224: PPUSH
9225: CALL_OW 266
9229: PUSH
9230: LD_INT 6
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9278
9238: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9239: LD_INT 106
9241: PPUSH
9242: CALL_OW 274
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: LD_INT 106
9252: PPUSH
9253: CALL_OW 274
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 275
9265: PUSH
9266: LD_EXP 54
9270: PLUS
9271: PPUSH
9272: CALL_OW 277
9276: GO 9471
9278: LD_INT 2
9280: DOUBLE
9281: EQUAL
9282: IFTRUE 9286
9284: GO 9326
9286: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9287: LD_INT 106
9289: PPUSH
9290: CALL_OW 274
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: LD_INT 106
9300: PPUSH
9301: CALL_OW 274
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 275
9313: PUSH
9314: LD_EXP 55
9318: PLUS
9319: PPUSH
9320: CALL_OW 277
9324: GO 9471
9326: LD_INT 26
9328: DOUBLE
9329: EQUAL
9330: IFTRUE 9334
9332: GO 9374
9334: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9335: LD_INT 106
9337: PPUSH
9338: CALL_OW 274
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: LD_INT 106
9348: PPUSH
9349: CALL_OW 274
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 275
9361: PUSH
9362: LD_EXP 56
9366: PLUS
9367: PPUSH
9368: CALL_OW 277
9372: GO 9471
9374: LD_INT 4
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9422
9382: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9383: LD_INT 106
9385: PPUSH
9386: CALL_OW 274
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_INT 106
9396: PPUSH
9397: CALL_OW 274
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 275
9409: PUSH
9410: LD_EXP 57
9414: PLUS
9415: PPUSH
9416: CALL_OW 277
9420: GO 9471
9422: LD_INT 31
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9470
9430: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9431: LD_INT 106
9433: PPUSH
9434: CALL_OW 274
9438: PPUSH
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 106
9444: PPUSH
9445: CALL_OW 274
9449: PPUSH
9450: LD_INT 1
9452: PPUSH
9453: CALL_OW 275
9457: PUSH
9458: LD_EXP 58
9462: PLUS
9463: PPUSH
9464: CALL_OW 277
9468: GO 9471
9470: POP
// RemoveUnit ( building ) ;
9471: LD_VAR 0 1
9475: PPUSH
9476: CALL_OW 64
// end ;
9480: LD_VAR 0 2
9484: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9485: LD_EXP 9
9489: PUSH
9490: LD_EXP 8
9494: AND
9495: IFFALSE 9604
9497: GO 9499
9499: DISABLE
// begin DialogueOn ;
9500: CALL_OW 6
// if engineResearched then
9504: LD_EXP 10
9508: IFFALSE 9536
// begin Say ( Burlak , D7b-Bur-1 ) ;
9510: LD_EXP 62
9514: PPUSH
9515: LD_STRING D7b-Bur-1
9517: PPUSH
9518: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9522: LD_EXP 76
9526: PPUSH
9527: LD_STRING D7b-Pla-1
9529: PPUSH
9530: CALL_OW 88
// end else
9534: GO 9560
// begin Say ( Burlak , D7a-Bur-1 ) ;
9536: LD_EXP 62
9540: PPUSH
9541: LD_STRING D7a-Bur-1
9543: PPUSH
9544: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9548: LD_EXP 76
9552: PPUSH
9553: LD_STRING D7a-Pla-1
9555: PPUSH
9556: CALL_OW 88
// end ; DialogueOff ;
9560: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9564: LD_STRING M2
9566: PPUSH
9567: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9571: LD_INT 3
9573: PPUSH
9574: LD_EXP 76
9578: PPUSH
9579: CALL_OW 250
9583: PPUSH
9584: LD_EXP 76
9588: PPUSH
9589: CALL_OW 251
9593: PPUSH
9594: LD_INT 5
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 56
// end ;
9604: END
// export function Dial_NewCrates ( x , y ) ; begin
9605: LD_INT 0
9607: PPUSH
// wait ( 0 0$18 ) ;
9608: LD_INT 630
9610: PPUSH
9611: CALL_OW 67
// if not spawnCrates then
9615: LD_EXP 21
9619: NOT
9620: IFFALSE 9624
// exit ;
9622: GO 9655
// ComMoveXY ( Platonov , x , y ) ;
9624: LD_EXP 76
9628: PPUSH
9629: LD_VAR 0 1
9633: PPUSH
9634: LD_VAR 0 2
9638: PPUSH
9639: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9643: LD_EXP 76
9647: PPUSH
9648: LD_STRING D4-Pla-1
9650: PPUSH
9651: CALL_OW 88
// end ;
9655: LD_VAR 0 3
9659: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9660: LD_INT 0
9662: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9663: LD_ADDR_EXP 13
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 21
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: ST_TO_ADDR
// constructedFirstVehicle = true ;
9701: LD_ADDR_EXP 12
9705: PUSH
9706: LD_INT 1
9708: ST_TO_ADDR
// InGameOn ;
9709: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 87
// wait ( 0 0$3 ) ;
9722: LD_INT 105
9724: PPUSH
9725: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9729: LD_EXP 62
9733: PPUSH
9734: LD_STRING D9-Bur-1
9736: PPUSH
9737: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9741: LD_EXP 76
9745: PPUSH
9746: LD_EXP 13
9750: PPUSH
9751: CALL_OW 250
9755: PPUSH
9756: LD_EXP 13
9760: PPUSH
9761: CALL_OW 251
9765: PPUSH
9766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9770: LD_INT 35
9772: PPUSH
9773: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9777: LD_EXP 76
9781: PPUSH
9782: LD_EXP 13
9786: PPUSH
9787: CALL_OW 296
9791: PUSH
9792: LD_INT 4
9794: LESS
9795: IFFALSE 9770
// ComTurnUnit ( Platonov , firstVeh ) ;
9797: LD_EXP 76
9801: PPUSH
9802: LD_EXP 13
9806: PPUSH
9807: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9811: LD_EXP 76
9815: PPUSH
9816: LD_STRING D9-Pla-1
9818: PPUSH
9819: CALL_OW 88
// InGameOff ;
9823: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9827: LD_STRING M3
9829: PPUSH
9830: CALL_OW 337
// canExitBase = true ;
9834: LD_ADDR_EXP 19
9838: PUSH
9839: LD_INT 1
9841: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9842: LD_EXP 76
9846: PPUSH
9847: LD_INT 112
9849: PPUSH
9850: LD_INT 97
9852: PPUSH
9853: CALL_OW 111
// end ;
9857: LD_VAR 0 2
9861: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9862: LD_EXP 13
9866: PPUSH
9867: LD_INT 9
9869: PPUSH
9870: CALL_OW 308
9874: PUSH
9875: LD_EXP 14
9879: NOT
9880: AND
9881: IFFALSE 10735
9883: GO 9885
9885: DISABLE
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
9890: PPUSH
// begin vehicleForKurin = true ;
9891: LD_ADDR_EXP 14
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: LD_EXP 69
9908: PPUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 72
9923: PUSH
9924: LD_INT 1
9926: ARRAY
9927: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9928: LD_ADDR_VAR 0 3
9932: PUSH
9933: LD_EXP 69
9937: PPUSH
9938: LD_INT 25
9940: PUSH
9941: LD_INT 3
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PUSH
9953: LD_INT 1
9955: ARRAY
9956: ST_TO_ADDR
// InGameOn ;
9957: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9961: LD_EXP 67
9965: PPUSH
9966: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9970: LD_EXP 13
9974: PPUSH
9975: LD_EXP 67
9979: PPUSH
9980: CALL_OW 250
9984: PPUSH
9985: LD_EXP 67
9989: PPUSH
9990: CALL_OW 251
9994: PPUSH
9995: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9999: LD_EXP 67
10003: PPUSH
10004: LD_STRING D10-Kur-1
10006: PPUSH
10007: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10018: LD_EXP 13
10022: PPUSH
10023: LD_EXP 67
10027: PPUSH
10028: CALL_OW 250
10032: PPUSH
10033: LD_EXP 67
10037: PPUSH
10038: CALL_OW 251
10042: PPUSH
10043: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
10047: LD_EXP 13
10051: PPUSH
10052: LD_EXP 67
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 9
10064: LESS
10065: IFFALSE 10011
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
10067: LD_EXP 13
10071: PPUSH
10072: CALL_OW 313
10076: PPUSH
10077: CALL_OW 121
// wait ( 0 0$1 ) ;
10081: LD_INT 35
10083: PPUSH
10084: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10088: LD_EXP 13
10092: PPUSH
10093: CALL_OW 256
10097: PUSH
10098: LD_INT 1000
10100: LESS
10101: IFFALSE 10133
// begin ComExitBuilding ( mech ) ;
10103: LD_VAR 0 3
10107: PPUSH
10108: CALL_OW 122
// wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_EXP 13
10128: PPUSH
10129: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10133: LD_EXP 13
10137: PPUSH
10138: CALL_OW 261
10142: PUSH
10143: LD_INT 90
10145: LESS
10146: IFFALSE 10181
// begin ComExitBuilding ( eng ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 122
// wait ( 0 0$1 ) ;
10157: LD_INT 35
10159: PPUSH
10160: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_INT 71
10171: PPUSH
10172: LD_EXP 13
10176: PPUSH
10177: CALL 4749 0 3
// end ; repeat wait ( 0 0$1 ) ;
10181: LD_INT 35
10183: PPUSH
10184: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10188: LD_EXP 13
10192: PPUSH
10193: CALL_OW 256
10197: PUSH
10198: LD_INT 1000
10200: EQUAL
10201: PUSH
10202: LD_EXP 13
10206: PPUSH
10207: CALL_OW 261
10211: PUSH
10212: LD_INT 90
10214: GREATER
10215: AND
10216: IFFALSE 10181
// if UnitsInside ( firstVeh ) then
10218: LD_EXP 13
10222: PPUSH
10223: CALL_OW 313
10227: IFFALSE 10247
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10229: LD_EXP 13
10233: PPUSH
10234: CALL_OW 313
10238: PUSH
10239: LD_INT 1
10241: ARRAY
10242: PPUSH
10243: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10247: LD_VAR 0 2
10251: PPUSH
10252: LD_INT 71
10254: PPUSH
10255: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10259: LD_EXP 13
10263: PPUSH
10264: LD_INT 6
10266: PPUSH
10267: CALL_OW 235
// if belkovReturn then
10271: LD_EXP 6
10275: IFFALSE 10361
// begin if IsInUnit ( Belkov ) then
10277: LD_EXP 64
10281: PPUSH
10282: CALL_OW 310
10286: IFFALSE 10297
// ComExitBuilding ( Belkov ) ;
10288: LD_EXP 64
10292: PPUSH
10293: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10297: LD_INT 35
10299: PPUSH
10300: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10304: LD_EXP 64
10308: PPUSH
10309: LD_EXP 13
10313: PPUSH
10314: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10318: LD_EXP 64
10322: PPUSH
10323: CALL_OW 310
10327: PUSH
10328: LD_EXP 13
10332: EQUAL
10333: IFFALSE 10297
// Say ( Belkov , D10-Bel-1 ) ;
10335: LD_EXP 64
10339: PPUSH
10340: LD_STRING D10-Bel-1
10342: PPUSH
10343: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10347: LD_EXP 67
10351: PPUSH
10352: LD_STRING D10-Kur-2
10354: PPUSH
10355: CALL_OW 88
// end else
10359: GO 10487
// begin if IsInUnit ( Belkov2 ) then
10361: LD_EXP 68
10365: PPUSH
10366: CALL_OW 310
10370: IFFALSE 10381
// ComExitBuilding ( Belkov2 ) ;
10372: LD_EXP 68
10376: PPUSH
10377: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10388: LD_EXP 68
10392: PPUSH
10393: LD_EXP 13
10397: PPUSH
10398: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10402: LD_EXP 68
10406: PPUSH
10407: CALL_OW 310
10411: PUSH
10412: LD_EXP 13
10416: EQUAL
10417: IFFALSE 10381
// meetBelkovBrother = true ;
10419: LD_ADDR_EXP 4
10423: PUSH
10424: LD_INT 1
10426: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10427: LD_EXP 68
10431: PPUSH
10432: LD_STRING D10-Bel-1
10434: PPUSH
10435: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10439: LD_EXP 62
10443: PPUSH
10444: LD_STRING D10-Bur-1
10446: PPUSH
10447: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10451: LD_EXP 68
10455: PPUSH
10456: LD_STRING D10-Bel-2
10458: PPUSH
10459: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10463: LD_EXP 62
10467: PPUSH
10468: LD_STRING D10-Bur-2
10470: PPUSH
10471: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10475: LD_EXP 67
10479: PPUSH
10480: LD_STRING D10-Kur-2a
10482: PPUSH
10483: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10487: LD_ADDR_EXP 74
10491: PUSH
10492: EMPTY
10493: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10494: LD_ADDR_EXP 75
10498: PUSH
10499: EMPTY
10500: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10501: LD_ADDR_EXP 22
10505: PUSH
10506: LD_INT 1
10508: ST_TO_ADDR
// CreateBelkovTeam ;
10509: CALL 6188 0 0
// ComExitBuilding ( belkovTeam ) ;
10513: LD_EXP 73
10517: PPUSH
10518: CALL_OW 122
// wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10529: LD_ADDR_EXP 72
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_INT 6
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 2
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 69
10562: PUSH
10563: LD_INT 1
10565: ARRAY
10566: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10567: LD_ADDR_EXP 73
10571: PUSH
10572: LD_EXP 73
10576: PUSH
10577: LD_EXP 72
10581: ADD
10582: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10583: LD_EXP 73
10587: PPUSH
10588: LD_INT 147
10590: PPUSH
10591: LD_INT 102
10593: PPUSH
10594: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10598: LD_EXP 73
10602: PPUSH
10603: LD_INT 133
10605: PPUSH
10606: LD_INT 94
10608: PPUSH
10609: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10613: LD_EXP 73
10617: PPUSH
10618: LD_INT 123
10620: PPUSH
10621: LD_INT 74
10623: PPUSH
10624: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10628: LD_EXP 73
10632: PPUSH
10633: LD_INT 111
10635: PPUSH
10636: LD_INT 48
10638: PPUSH
10639: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10643: LD_EXP 73
10647: PPUSH
10648: LD_INT 122
10650: PPUSH
10651: LD_INT 43
10653: PPUSH
10654: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10658: LD_EXP 73
10662: PPUSH
10663: LD_INT 129
10665: PPUSH
10666: LD_INT 32
10668: PPUSH
10669: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10673: LD_EXP 73
10677: PPUSH
10678: LD_INT 132
10680: PPUSH
10681: LD_INT 22
10683: PPUSH
10684: CALL_OW 171
// wait ( 0 0$8 ) ;
10688: LD_INT 280
10690: PPUSH
10691: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10695: LD_EXP 67
10699: PPUSH
10700: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10704: LD_EXP 67
10708: PPUSH
10709: LD_STRING D10-Kur-2b
10711: PPUSH
10712: CALL_OW 88
// InGameOff ;
10716: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10720: LD_STRING M4
10722: PPUSH
10723: CALL_OW 337
// backToBeria1 = true ;
10727: LD_ADDR_EXP 15
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// end ;
10735: PPOPN 3
10737: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10738: LD_INT 9
10740: PPUSH
10741: LD_INT 22
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 70
10769: PUSH
10770: LD_EXP 14
10774: AND
10775: IFFALSE 10792
10777: GO 10779
10779: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10780: LD_EXP 67
10784: PPUSH
10785: LD_STRING D1a-Kur-1a
10787: PPUSH
10788: CALL_OW 88
10792: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10793: LD_EXP 22
10797: IFFALSE 11200
10799: GO 10801
10801: DISABLE
10802: LD_INT 0
10804: PPUSH
10805: PPUSH
// begin enable ;
10806: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10807: LD_INT 10
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: PUSH
10825: LD_INT 0
10827: EQUAL
10828: IFFALSE 10832
// exit ;
10830: GO 11200
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 10
10839: PPUSH
10840: LD_INT 22
10842: PUSH
10843: LD_INT 6
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 70
10854: PUSH
10855: FOR_IN
10856: IFFALSE 11186
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 247
10867: PUSH
10868: LD_INT 1
10870: EQUAL
10871: PUSH
10872: LD_VAR 0 1
10876: PUSH
10877: LD_EXP 64
10881: EQUAL
10882: NOT
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: LD_EXP 68
10893: EQUAL
10894: NOT
10895: AND
10896: PUSH
10897: LD_VAR 0 1
10901: PUSH
10902: LD_EXP 65
10906: EQUAL
10907: NOT
10908: AND
10909: AND
10910: IFFALSE 10951
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10912: LD_ADDR_EXP 23
10916: PUSH
10917: LD_EXP 23
10921: PUSH
10922: LD_INT 1
10924: PLUS
10925: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10926: LD_ADDR_EXP 74
10930: PUSH
10931: LD_EXP 74
10935: PUSH
10936: LD_VAR 0 1
10940: ADD
10941: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL_OW 64
// end ; if unit = Kirilenkova then
10951: LD_VAR 0 1
10955: PUSH
10956: LD_EXP 65
10960: EQUAL
10961: IFFALSE 10984
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10963: LD_EXP 65
10967: PPUSH
10968: LD_STRING 02_TmpKirilenkova
10970: PPUSH
10971: CALL_OW 38
// RemoveUnit ( unit ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 64
// end ; if unit = Belkov2 then
10984: LD_VAR 0 1
10988: PUSH
10989: LD_EXP 68
10993: EQUAL
10994: IFFALSE 11017
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10996: LD_EXP 68
11000: PPUSH
11001: LD_STRING 02_TmpBelkov2
11003: PPUSH
11004: CALL_OW 38
// RemoveUnit ( unit ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
11017: LD_VAR 0 1
11021: PPUSH
11022: CALL_OW 247
11026: PUSH
11027: LD_INT 2
11029: EQUAL
11030: IFFALSE 11184
// begin driver = UnitsInside ( unit ) ;
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 313
11046: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
11047: LD_VAR 0 2
11051: PUSH
11052: LD_INT 1
11054: ARRAY
11055: PUSH
11056: LD_EXP 64
11060: EQUAL
11061: IFFALSE 11086
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
11063: LD_EXP 64
11067: PPUSH
11068: LD_STRING 02_TmpBelkov
11070: PPUSH
11071: CALL_OW 38
// RemoveUnit ( unit ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 64
// end else
11084: GO 11107
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11086: LD_EXP 68
11090: PPUSH
11091: LD_STRING 02_TmpBelkov2
11093: PPUSH
11094: CALL_OW 38
// RemoveUnit ( unit ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11107: LD_ADDR_EXP 75
11111: PUSH
11112: LD_EXP 75
11116: PUSH
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 265
11126: PUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 262
11136: PUSH
11137: LD_VAR 0 1
11141: PPUSH
11142: CALL_OW 263
11146: PUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 264
11156: PUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 261
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: ADD
11174: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11175: LD_VAR 0 1
11179: PPUSH
11180: CALL_OW 64
// end ; end ;
11184: GO 10855
11186: POP
11187: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11188: LD_EXP 74
11192: PPUSH
11193: LD_STRING 02_TmpBelkovTeam
11195: PPUSH
11196: CALL_OW 38
// end ;
11200: PPOPN 2
11202: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11203: LD_INT 8
11205: PPUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 3
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 21
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 71
11234: PUSH
11235: LD_INT 0
11237: EQUAL
11238: PUSH
11239: LD_EXP 15
11243: AND
11244: IFFALSE 11451
11246: GO 11248
11248: DISABLE
11249: LD_INT 0
11251: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11252: LD_ADDR_VAR 0 1
11256: PUSH
11257: LD_EXP 69
11261: PPUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 72
11276: ST_TO_ADDR
// backToBeria1 = false ;
11277: LD_ADDR_EXP 15
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// canExitBase = false ;
11285: LD_ADDR_EXP 19
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11293: LD_EXP 76
11297: PPUSH
11298: LD_STRING D11-Pla-1
11300: PPUSH
11301: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11305: LD_INT 22
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 21
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: PUSH
11334: LD_INT 1
11336: GREATER
11337: IFFALSE 11353
// Say ( Burlak , D11-Bur-1a ) else
11339: LD_EXP 62
11343: PPUSH
11344: LD_STRING D11-Bur-1a
11346: PPUSH
11347: CALL_OW 88
11351: GO 11365
// Say ( Burlak , D11-Bur-1 ) ;
11353: LD_EXP 62
11357: PPUSH
11358: LD_STRING D11-Bur-1
11360: PPUSH
11361: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11365: LD_STRING M5
11367: PPUSH
11368: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 5
11377: PPUSH
11378: CALL_OW 12
11382: PPUSH
11383: LD_INT 26
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 55
// construcMoreVehicles = true ;
11393: LD_ADDR_EXP 17
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// spawnCrates = true ;
11401: LD_ADDR_EXP 21
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 2
11425: PPUSH
11426: LD_INT 159
11428: PPUSH
11429: LD_INT 112
11431: PPUSH
11432: LD_INT 0
11434: PPUSH
11435: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11439: LD_VAR 0 1
11443: PPUSH
11444: LD_INT 71
11446: PPUSH
11447: CALL_OW 180
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11454: LD_EXP 18
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: GREATEREQUAL
11488: IFFALSE 12616
11490: GO 11492
11492: DISABLE
11493: LD_INT 0
11495: PPUSH
11496: PPUSH
// begin canRemoveBelkovUnits = false ;
11497: LD_ADDR_EXP 22
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// spawnCrates = false ;
11505: LD_ADDR_EXP 21
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11513: LD_INT 22
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 2
11525: PUSH
11526: LD_INT 21
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 21
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PPUSH
11560: CALL_OW 141
// InGameOn ;
11564: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11568: LD_EXP 76
11572: PPUSH
11573: CALL_OW 85
// DialogueOn ;
11577: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11581: LD_EXP 62
11585: PPUSH
11586: LD_STRING D12-Bur-1
11588: PPUSH
11589: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11593: LD_EXP 76
11597: PPUSH
11598: LD_STRING D12-Pla-1
11600: PPUSH
11601: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11605: LD_EXP 62
11609: PPUSH
11610: LD_STRING D12-Bur-2
11612: PPUSH
11613: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11617: LD_EXP 76
11621: PPUSH
11622: LD_STRING D12-Pla-2
11624: PPUSH
11625: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11629: LD_EXP 62
11633: PPUSH
11634: LD_STRING D12-Bur-3
11636: PPUSH
11637: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11641: LD_EXP 76
11645: PPUSH
11646: LD_STRING D12-Pla-3
11648: PPUSH
11649: CALL_OW 88
// DialogueOff ;
11653: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11657: LD_INT 6
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 80
// PrepareAmerican ;
11673: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11677: CALL 1132 0 0
// if IsOK ( Belkov ) then
11681: LD_EXP 64
11685: PPUSH
11686: CALL_OW 302
11690: IFFALSE 11704
// tmpBelkov = Belkov else
11692: LD_ADDR_VAR 0 1
11696: PUSH
11697: LD_EXP 64
11701: ST_TO_ADDR
11702: GO 11714
// tmpBelkov = Belkov2 ;
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_EXP 68
11713: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11714: LD_EXP 72
11718: PPUSH
11719: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11723: LD_EXP 80
11727: PPUSH
11728: LD_STRING D13-Sol1-1
11730: PPUSH
11731: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11735: LD_VAR 0 1
11739: PPUSH
11740: LD_STRING D13-Bel-1
11742: PPUSH
11743: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11747: LD_EXP 67
11751: PPUSH
11752: LD_STRING D13-Kur-1
11754: PPUSH
11755: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11759: LD_VAR 0 1
11763: PPUSH
11764: LD_STRING D13-Bel-2
11766: PPUSH
11767: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11771: LD_EXP 73
11775: PPUSH
11776: LD_INT 121
11778: PPUSH
11779: LD_INT 29
11781: PPUSH
11782: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11786: LD_INT 35
11788: PPUSH
11789: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11793: LD_EXP 72
11797: PPUSH
11798: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11802: LD_ADDR_VAR 0 2
11806: PUSH
11807: LD_EXP 73
11811: PPUSH
11812: LD_INT 21
11814: PUSH
11815: LD_INT 1
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 56
11824: PUSH
11825: EMPTY
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 72
11836: PPUSH
11837: LD_EXP 72
11841: PPUSH
11842: CALL_OW 74
11846: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11847: LD_EXP 72
11851: PPUSH
11852: LD_VAR 0 2
11856: PPUSH
11857: CALL_OW 296
11861: PUSH
11862: LD_INT 5
11864: LESS
11865: IFFALSE 11878
// ComStop ( kirovVehicle ) else
11867: LD_EXP 72
11871: PPUSH
11872: CALL_OW 141
11876: GO 11893
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11878: LD_EXP 73
11882: PPUSH
11883: LD_INT 121
11885: PPUSH
11886: LD_INT 29
11888: PPUSH
11889: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11893: LD_EXP 73
11897: PPUSH
11898: LD_EXP 80
11902: PPUSH
11903: CALL_OW 74
11907: PPUSH
11908: LD_EXP 80
11912: PPUSH
11913: CALL_OW 296
11917: PUSH
11918: LD_INT 5
11920: LESS
11921: IFFALSE 11786
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11923: LD_EXP 72
11927: PUSH
11928: LD_EXP 80
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PPUSH
11937: CALL_OW 87
// ComWalk ( trapTeam ) ;
11941: LD_EXP 81
11945: PPUSH
11946: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11950: LD_EXP 81
11954: PPUSH
11955: LD_EXP 72
11959: PPUSH
11960: CALL_OW 179
// ComStop ( belkovTeam ) ;
11964: LD_EXP 73
11968: PPUSH
11969: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11973: LD_EXP 73
11977: PPUSH
11978: LD_EXP 80
11982: PPUSH
11983: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11987: LD_INT 25
11989: PPUSH
11990: LD_INT 22
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PPUSH
12014: CALL_OW 70
12018: PPUSH
12019: LD_INT 111
12021: PPUSH
12022: LD_INT 13
12024: PPUSH
12025: CALL_OW 171
// music_class = music_combat ;
12029: LD_ADDR_OWVAR 72
12033: PUSH
12034: LD_INT 1
12036: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12037: LD_INT 35
12039: PPUSH
12040: CALL_OW 67
// DialogueOn ;
12044: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
12048: LD_EXP 80
12052: PPUSH
12053: LD_STRING D14-Sol1-1
12055: PPUSH
12056: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: LD_STRING D14-Bel-1
12067: PPUSH
12068: CALL_OW 88
// DialogueOff ;
12072: CALL_OW 7
// immortalBelkovTeam = true ;
12076: LD_ADDR_EXP 24
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
12084: LD_INT 6
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12100: LD_EXP 73
12104: PPUSH
12105: LD_INT 107
12107: PPUSH
12108: LD_INT 5
12110: PPUSH
12111: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12115: LD_EXP 72
12119: PPUSH
12120: LD_INT 107
12122: PPUSH
12123: LD_INT 5
12125: PPUSH
12126: CALL_OW 111
// wait ( 0 0$2 ) ;
12130: LD_INT 70
12132: PPUSH
12133: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12137: LD_EXP 73
12141: PPUSH
12142: LD_INT 101
12144: PPUSH
12145: LD_INT 19
12147: PPUSH
12148: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12152: LD_EXP 72
12156: PPUSH
12157: LD_INT 101
12159: PPUSH
12160: LD_INT 19
12162: PPUSH
12163: CALL_OW 111
// wait ( 0 0$2 ) ;
12167: LD_INT 70
12169: PPUSH
12170: CALL_OW 67
// immortalVehLive = 400 ;
12174: LD_ADDR_EXP 25
12178: PUSH
12179: LD_INT 400
12181: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12182: LD_EXP 72
12186: PPUSH
12187: LD_INT 500
12189: PPUSH
12190: CALL_OW 234
// wait ( 0 0$3 ) ;
12194: LD_INT 105
12196: PPUSH
12197: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12201: LD_VAR 0 1
12205: PPUSH
12206: CALL_OW 121
// wait ( 0 0$1 ) ;
12210: LD_INT 35
12212: PPUSH
12213: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12217: LD_EXP 80
12221: PPUSH
12222: LD_EXP 72
12226: PPUSH
12227: CALL_OW 120
// AddComHold ( trapTeam ) ;
12231: LD_EXP 81
12235: PPUSH
12236: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12240: LD_EXP 73
12244: PPUSH
12245: LD_INT 88
12247: PPUSH
12248: LD_INT 18
12250: PPUSH
12251: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12255: LD_INT 35
12257: PPUSH
12258: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12271: LD_VAR 0 1
12275: PPUSH
12276: LD_INT 15
12278: PPUSH
12279: CALL_OW 308
12283: IFFALSE 12255
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12285: LD_ADDR_EXP 88
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PPUSH
12314: CALL_OW 69
12318: PUSH
12319: LD_INT 1
12321: ARRAY
12322: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12323: LD_INT 28
12325: PPUSH
12326: LD_INT 22
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 70
12354: PPUSH
12355: LD_INT 113
12357: PPUSH
12358: LD_INT 29
12360: PPUSH
12361: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12365: LD_EXP 88
12369: PPUSH
12370: LD_INT 118
12372: PPUSH
12373: LD_INT 25
12375: PPUSH
12376: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_STRING D14-Bel-1a
12387: PPUSH
12388: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12392: LD_EXP 67
12396: PPUSH
12397: LD_STRING D14-Kur-1
12399: PPUSH
12400: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_STRING D14-Bel-2
12411: PPUSH
12412: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12416: LD_EXP 67
12420: PPUSH
12421: LD_STRING D14-Kur-2
12423: PPUSH
12424: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12428: LD_EXP 76
12432: PPUSH
12433: CALL_OW 85
// wait ( 0 0$2 ) ;
12437: LD_INT 70
12439: PPUSH
12440: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12444: LD_EXP 62
12448: PPUSH
12449: LD_STRING D14a-Bur-1
12451: PPUSH
12452: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12456: LD_EXP 76
12460: PPUSH
12461: LD_STRING D14a-Pla-1
12463: PPUSH
12464: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12468: LD_EXP 62
12472: PPUSH
12473: LD_STRING D14a-Bur-2
12475: PPUSH
12476: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12480: LD_EXP 76
12484: PPUSH
12485: LD_STRING D14a-Pla-2
12487: PPUSH
12488: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12492: LD_EXP 62
12496: PPUSH
12497: LD_STRING D14a-Bur-3
12499: PPUSH
12500: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12504: LD_EXP 76
12508: PPUSH
12509: LD_STRING D14a-Pla-3
12511: PPUSH
12512: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12516: LD_EXP 62
12520: PPUSH
12521: LD_STRING D14a-Bur-4
12523: PPUSH
12524: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12528: LD_EXP 76
12532: PPUSH
12533: LD_STRING D14a-Pla-4
12535: PPUSH
12536: CALL_OW 88
// InGameOff ;
12540: CALL_OW 9
// immortalBelkovTeam = false ;
12544: LD_ADDR_EXP 24
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// activateAMAI = true ;
12552: LD_ADDR_EXP 27
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// canExitBase = true ;
12560: LD_ADDR_EXP 19
12564: PUSH
12565: LD_INT 1
12567: ST_TO_ADDR
// canExploreMap = true ;
12568: LD_ADDR_EXP 20
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// construcMoreVehicles = false ;
12576: LD_ADDR_EXP 17
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// activateBelkovAI = true ;
12584: LD_ADDR_EXP 28
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12592: LD_STRING M6
12594: PPUSH
12595: CALL_OW 337
// music_class = 0 ;
12599: LD_ADDR_OWVAR 72
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12607: LD_EXP 81
12611: PPUSH
12612: CALL_OW 139
// end ;
12616: PPOPN 2
12618: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12619: LD_EXP 88
12623: PPUSH
12624: LD_INT 118
12626: PPUSH
12627: LD_INT 25
12629: PPUSH
12630: CALL_OW 297
12634: PUSH
12635: LD_INT 6
12637: LESS
12638: IFFALSE 12733
12640: GO 12642
12642: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12643: LD_EXP 80
12647: PPUSH
12648: CALL_OW 121
// uc_side = 1 ;
12652: LD_ADDR_OWVAR 20
12656: PUSH
12657: LD_INT 1
12659: ST_TO_ADDR
// uc_nation = 1 ;
12660: LD_ADDR_OWVAR 21
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12668: LD_INT 0
12670: PPUSH
12671: LD_EXP 59
12675: PPUSH
12676: CALL_OW 383
// amMech = CreateHuman ;
12680: LD_ADDR_EXP 89
12684: PUSH
12685: CALL_OW 44
12689: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12690: LD_EXP 89
12694: PPUSH
12695: LD_INT 27
12697: PPUSH
12698: LD_INT 0
12700: PPUSH
12701: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12705: LD_EXP 89
12709: PPUSH
12710: LD_EXP 88
12714: PPUSH
12715: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12719: LD_EXP 89
12723: PPUSH
12724: LD_EXP 88
12728: PPUSH
12729: CALL_OW 180
// end ;
12733: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12734: LD_EXP 89
12738: PPUSH
12739: CALL_OW 302
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 50
12766: PUSH
12767: EMPTY
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: AND
12780: IFFALSE 13033
12782: GO 12784
12784: DISABLE
12785: LD_INT 0
12787: PPUSH
// begin enable ;
12788: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_INT 22
12796: PUSH
12797: LD_INT 3
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: PPUSH
12841: LD_EXP 89
12845: PPUSH
12846: CALL_OW 74
12850: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12851: LD_VAR 0 1
12855: PPUSH
12856: LD_EXP 89
12860: PPUSH
12861: CALL_OW 296
12865: PUSH
12866: LD_INT 13
12868: LESS
12869: IFFALSE 12922
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12871: LD_EXP 89
12875: PPUSH
12876: LD_INT 22
12878: PUSH
12879: LD_INT 1
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 21
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 50
12898: PUSH
12899: EMPTY
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: CALL_OW 120
12920: GO 13033
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12922: LD_INT 22
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 21
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 50
12944: PUSH
12945: EMPTY
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PPUSH
12953: CALL_OW 69
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 256
12966: PUSH
12967: LD_INT 1000
12969: EQUAL
12970: PUSH
12971: LD_EXP 89
12975: PPUSH
12976: CALL_OW 310
12980: NOT
12981: AND
12982: IFFALSE 13033
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
12984: LD_EXP 89
12988: PPUSH
12989: LD_INT 22
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 21
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 50
13011: PUSH
13012: EMPTY
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PPUSH
13029: CALL_OW 120
// end ; end ;
13033: PPOPN 1
13035: END
// every 0 0$1 trigger immortalBelkovTeam do
13036: LD_EXP 24
13040: IFFALSE 13127
13042: GO 13044
13044: DISABLE
// begin enable ;
13045: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
13046: LD_EXP 73
13050: PPUSH
13051: LD_INT 21
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: PPUSH
13066: LD_INT 1000
13068: PPUSH
13069: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
13073: LD_EXP 73
13077: PPUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: IFFALSE 13127
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13094: LD_EXP 73
13098: PPUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_EXP 25
13122: PPUSH
13123: CALL_OW 234
// end ;
13127: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13128: LD_EXP 20
13132: PUSH
13133: LD_EXP 37
13137: NOT
13138: AND
13139: PUSH
13140: LD_EXP 61
13144: PUSH
13145: LD_INT 0
13147: GREATER
13148: AND
13149: IFFALSE 13169
13151: GO 13153
13153: DISABLE
// begin enable ;
13154: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13155: LD_ADDR_EXP 61
13159: PUSH
13160: LD_EXP 61
13164: PUSH
13165: LD_INT 35
13167: MINUS
13168: ST_TO_ADDR
// end ;
13169: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13170: LD_EXP 20
13174: IFFALSE 13258
13176: GO 13178
13178: DISABLE
13179: LD_INT 0
13181: PPUSH
13182: PPUSH
// begin tmp = trapTeam ;
13183: LD_ADDR_VAR 0 2
13187: PUSH
13188: LD_EXP 81
13192: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_VAR 0 2
13202: PUSH
13203: LD_EXP 80
13207: DIFF
13208: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13209: LD_ADDR_VAR 0 1
13213: PUSH
13214: DOUBLE
13215: LD_INT 1
13217: DEC
13218: ST_TO_ADDR
13219: LD_INT 2
13221: PPUSH
13222: LD_INT 3
13224: PPUSH
13225: CALL_OW 12
13229: PUSH
13230: FOR_TO
13231: IFFALSE 13256
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13233: LD_VAR 0 2
13237: PUSH
13238: LD_VAR 0 1
13242: ARRAY
13243: PPUSH
13244: LD_INT 87
13246: PPUSH
13247: LD_INT 18
13249: PPUSH
13250: CALL_OW 114
13254: GO 13230
13256: POP
13257: POP
// end ;
13258: PPOPN 2
13260: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13261: LD_EXP 61
13265: PUSH
13266: LD_INT 70
13268: LESS
13269: PUSH
13270: LD_EXP 81
13274: AND
13275: IFFALSE 13304
13277: GO 13279
13279: DISABLE
// begin enable ;
13280: ENABLE
// activateBelkovAI = false ;
13281: LD_ADDR_EXP 28
13285: PUSH
13286: LD_INT 0
13288: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13289: LD_EXP 73
13293: PPUSH
13294: LD_INT 120
13296: PPUSH
13297: LD_INT 28
13299: PPUSH
13300: CALL_OW 114
// end ;
13304: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13305: LD_EXP 29
13309: NOT
13310: PUSH
13311: LD_EXP 30
13315: NOT
13316: OR
13317: PUSH
13318: LD_EXP 20
13322: AND
13323: IFFALSE 13785
13325: GO 13327
13327: DISABLE
13328: LD_INT 0
13330: PPUSH
// begin enable ;
13331: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_INT 22
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 21
13349: PUSH
13350: LD_INT 3
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 31
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: PUSH
13377: FOR_IN
13378: IFFALSE 13783
// begin if See ( 3 , bunker ) then
13380: LD_INT 3
13382: PPUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13781
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13394: LD_VAR 0 1
13398: PUSH
13399: LD_EXP 82
13403: IN
13404: PUSH
13405: LD_EXP 29
13409: NOT
13410: AND
13411: PUSH
13412: LD_INT 18
13414: PPUSH
13415: LD_INT 22
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: PPUSH
13428: CALL_OW 70
13432: NOT
13433: AND
13434: IFFALSE 13627
// begin sawLeftBunker = true ;
13436: LD_ADDR_EXP 29
13440: PUSH
13441: LD_INT 1
13443: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 85
// DialogueOn ;
13453: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13457: LD_EXP 62
13461: PPUSH
13462: LD_STRING D15-Bur-1
13464: PPUSH
13465: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13469: LD_EXP 63
13473: PPUSH
13474: CALL_OW 302
13478: PUSH
13479: LD_EXP 70
13483: PPUSH
13484: CALL_OW 302
13488: OR
13489: IFFALSE 13584
// begin if IsOK ( Gnyevko ) then
13491: LD_EXP 63
13495: PPUSH
13496: CALL_OW 302
13500: IFFALSE 13514
// Say ( Gnyevko , D15-Gny-1 ) ;
13502: LD_EXP 63
13506: PPUSH
13507: LD_STRING D15-Gny-1
13509: PPUSH
13510: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13514: LD_EXP 70
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13537
// Say ( Kovalyuk , D15-Kov-1 ) ;
13525: LD_EXP 70
13529: PPUSH
13530: LD_STRING D15-Kov-1
13532: PPUSH
13533: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13537: LD_EXP 62
13541: PPUSH
13542: LD_STRING D15-Bur-2
13544: PPUSH
13545: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13549: LD_EXP 70
13553: PPUSH
13554: CALL_OW 302
13558: IFFALSE 13572
// Say ( Kovalyuk , D15-Kov-2 ) ;
13560: LD_EXP 70
13564: PPUSH
13565: LD_STRING D15-Kov-2
13567: PPUSH
13568: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13572: LD_EXP 62
13576: PPUSH
13577: LD_STRING D15-Bur-3
13579: PPUSH
13580: CALL_OW 88
// end ; DialogueOff ;
13584: CALL_OW 7
// if raportForPlatonov = 2 then
13588: LD_EXP 39
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: IFFALSE 13608
// raportForPlatonov = 1 else
13598: LD_ADDR_EXP 39
13602: PUSH
13603: LD_INT 1
13605: ST_TO_ADDR
13606: GO 13616
// raportForPlatonov = 3 ;
13608: LD_ADDR_EXP 39
13612: PUSH
13613: LD_INT 3
13615: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13616: LD_STRING M7
13618: PPUSH
13619: CALL_OW 337
// exit ;
13623: POP
13624: POP
13625: GO 13785
// end ; if bunker in rightBunkers and not sawRightBunker then
13627: LD_VAR 0 1
13631: PUSH
13632: LD_EXP 83
13636: IN
13637: PUSH
13638: LD_EXP 30
13642: NOT
13643: AND
13644: IFFALSE 13781
// begin sawRightBunker = true ;
13646: LD_ADDR_EXP 30
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 85
// DialogueOn ;
13663: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13667: LD_EXP 70
13671: PPUSH
13672: CALL_OW 302
13676: IFFALSE 13745
// begin if sawLeftBunker then
13678: LD_EXP 29
13682: IFFALSE 13698
// Say ( Kovalyuk , D16-Kov-1a ) else
13684: LD_EXP 70
13688: PPUSH
13689: LD_STRING D16-Kov-1a
13691: PPUSH
13692: CALL_OW 88
13696: GO 13710
// Say ( Kovalyuk , D16-Kov-1 ) ;
13698: LD_EXP 70
13702: PPUSH
13703: LD_STRING D16-Kov-1
13705: PPUSH
13706: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13710: LD_EXP 62
13714: PPUSH
13715: LD_STRING D16-Bur-1
13717: PPUSH
13718: CALL_OW 88
// if IsOK ( Gnyevko ) then
13722: LD_EXP 63
13726: PPUSH
13727: CALL_OW 302
13731: IFFALSE 13745
// Say ( Gnyevko , D16-Gny-1 ) ;
13733: LD_EXP 63
13737: PPUSH
13738: LD_STRING D16-Gny-1
13740: PPUSH
13741: CALL_OW 88
// end ; DialogueOff ;
13745: CALL_OW 7
// if raportForPlatonov = 3 then
13749: LD_EXP 39
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13769
// raportForPlatonov = 1 else
13759: LD_ADDR_EXP 39
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
13767: GO 13777
// raportForPlatonov = 2 ;
13769: LD_ADDR_EXP 39
13773: PUSH
13774: LD_INT 2
13776: ST_TO_ADDR
// exit ;
13777: POP
13778: POP
13779: GO 13785
// end ; end ; end ;
13781: GO 13377
13783: POP
13784: POP
// end ;
13785: PPOPN 1
13787: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13788: LD_EXP 32
13792: NOT
13793: PUSH
13794: LD_EXP 83
13798: AND
13799: PUSH
13800: LD_EXP 20
13804: AND
13805: PUSH
13806: LD_EXP 70
13810: PPUSH
13811: CALL_OW 302
13815: PUSH
13816: LD_EXP 63
13820: PPUSH
13821: CALL_OW 302
13825: OR
13826: AND
13827: IFFALSE 14015
13829: GO 13831
13831: DISABLE
13832: LD_INT 0
13834: PPUSH
// begin enable ;
13835: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 21
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: PUSH
13888: FOR_IN
13889: IFFALSE 14013
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 320
13900: PUSH
13901: LD_EXP 83
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 320
13920: PUSH
13921: LD_EXP 83
13925: PUSH
13926: LD_INT 2
13928: ARRAY
13929: EQUAL
13930: OR
13931: IFFALSE 14011
// begin dialogAttackRightBunkers = true ;
13933: LD_ADDR_EXP 32
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// DialogueOn ;
13941: CALL_OW 6
// if IsOK ( Gnyevko ) then
13945: LD_EXP 63
13949: PPUSH
13950: CALL_OW 302
13954: IFFALSE 13968
// Say ( Gnyevko , D16A-Gny-1 ) ;
13956: LD_EXP 63
13960: PPUSH
13961: LD_STRING D16A-Gny-1
13963: PPUSH
13964: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13968: LD_EXP 70
13972: PPUSH
13973: CALL_OW 302
13977: IFFALSE 13991
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13979: LD_EXP 70
13983: PPUSH
13984: LD_STRING D16A-Kov-1
13986: PPUSH
13987: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13991: LD_EXP 62
13995: PPUSH
13996: LD_STRING D16A-Bur-1
13998: PPUSH
13999: CALL_OW 88
// DialogueOff ;
14003: CALL_OW 7
// exit ;
14007: POP
14008: POP
14009: GO 14015
// end ; end ;
14011: GO 13888
14013: POP
14014: POP
// end ;
14015: PPOPN 1
14017: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
14018: LD_INT 18
14020: PPUSH
14021: LD_INT 22
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: PPUSH
14034: CALL_OW 70
14038: PUSH
14039: LD_EXP 29
14043: NOT
14044: AND
14045: IFFALSE 14428
14047: GO 14049
14049: DISABLE
14050: LD_INT 0
14052: PPUSH
// begin sawLeftBunker = true ;
14053: LD_ADDR_EXP 29
14057: PUSH
14058: LD_INT 1
14060: ST_TO_ADDR
// if playerGetSupport then
14061: LD_EXP 34
14065: IFFALSE 14084
// decsToChoose = [ 1 , 3 ] else
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: ST_TO_ADDR
14082: GO 14103
// decsToChoose = [ 1 , 2 , 3 ] ;
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14103: LD_STRING QAttackBw
14105: PPUSH
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 98
14115: PUSH
14116: LD_INT 1
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14217
14124: POP
// begin DialogueOn ;
14125: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14129: LD_EXP 62
14133: PPUSH
14134: LD_STRING D17-Bur-1
14136: PPUSH
14137: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14141: LD_EXP 76
14145: PPUSH
14146: LD_STRING D17-Pla-1
14148: PPUSH
14149: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14153: LD_EXP 62
14157: PPUSH
14158: LD_STRING D17-Bur-2
14160: PPUSH
14161: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14165: LD_EXP 76
14169: PPUSH
14170: LD_STRING D17-Pla-2
14172: PPUSH
14173: CALL_OW 94
// DialogueOff ;
14177: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14181: LD_EXP 42
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: IN
14196: NOT
14197: IFFALSE 14215
// begin initiative = 1 ;
14199: LD_ADDR_EXP 42
14203: PUSH
14204: LD_INT 1
14206: ST_TO_ADDR
// platonovOpinion = 2 ;
14207: LD_ADDR_EXP 5
14211: PUSH
14212: LD_INT 2
14214: ST_TO_ADDR
// end ; end ; 2 :
14215: GO 14358
14217: LD_INT 2
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14330
14225: POP
// begin DialogueOn ;
14226: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14230: LD_EXP 62
14234: PPUSH
14235: LD_STRING D18-Bur-1
14237: PPUSH
14238: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14242: LD_EXP 76
14246: PPUSH
14247: LD_STRING D18-Pla-1
14249: PPUSH
14250: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14254: LD_EXP 62
14258: PPUSH
14259: LD_STRING D18-Bur-2
14261: PPUSH
14262: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14266: LD_EXP 76
14270: PPUSH
14271: LD_STRING D18-Pla-2
14273: PPUSH
14274: CALL_OW 94
// DialogueOff ;
14278: CALL_OW 7
// playerGetSupport = true ;
14282: LD_ADDR_EXP 34
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// medalForGetSupport = false ;
14290: LD_ADDR_EXP 40
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// PlatonovSendSupport ;
14298: CALL 6644 0 0
// if initiative <> 3 then
14302: LD_EXP 42
14306: PUSH
14307: LD_INT 3
14309: NONEQUAL
14310: IFFALSE 14328
// begin initiative = 1 ;
14312: LD_ADDR_EXP 42
14316: PUSH
14317: LD_INT 1
14319: ST_TO_ADDR
// platonovOpinion = 2 ;
14320: LD_ADDR_EXP 5
14324: PUSH
14325: LD_INT 2
14327: ST_TO_ADDR
// end ; end ; 3 :
14328: GO 14358
14330: LD_INT 3
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14357
14338: POP
// begin initiative = 3 ;
14339: LD_ADDR_EXP 42
14343: PUSH
14344: LD_INT 3
14346: ST_TO_ADDR
// platonovOpinion = 0 ;
14347: LD_ADDR_EXP 5
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// end ; end ;
14355: GO 14358
14357: POP
// if IsOK ( Gnyevko ) then
14358: LD_EXP 63
14362: PPUSH
14363: CALL_OW 302
14367: IFFALSE 14393
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14369: LD_EXP 63
14373: PPUSH
14374: LD_STRING D19-Gny-1
14376: PPUSH
14377: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14381: LD_EXP 62
14385: PPUSH
14386: LD_STRING D19-Bur-1
14388: PPUSH
14389: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14393: LD_EXP 70
14397: PPUSH
14398: CALL_OW 302
14402: IFFALSE 14428
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14404: LD_EXP 70
14408: PPUSH
14409: LD_STRING D19-Kov-1
14411: PPUSH
14412: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14416: LD_EXP 62
14420: PPUSH
14421: LD_STRING D19-Bur-2
14423: PPUSH
14424: CALL_OW 88
// end ; end ;
14428: PPOPN 1
14430: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14431: LD_EXP 31
14435: NOT
14436: PUSH
14437: LD_EXP 82
14441: AND
14442: PUSH
14443: LD_EXP 20
14447: AND
14448: PUSH
14449: LD_INT 18
14451: PPUSH
14452: LD_INT 22
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: PPUSH
14465: CALL_OW 70
14469: PUSH
14470: LD_INT 0
14472: EQUAL
14473: AND
14474: PUSH
14475: LD_EXP 70
14479: PPUSH
14480: CALL_OW 302
14484: PUSH
14485: LD_EXP 63
14489: PPUSH
14490: CALL_OW 302
14494: OR
14495: AND
14496: IFFALSE 14684
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
// begin enable ;
14504: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 2
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 21
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: PUSH
14557: FOR_IN
14558: IFFALSE 14682
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 320
14569: PUSH
14570: LD_EXP 82
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: EQUAL
14579: PUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 320
14589: PUSH
14590: LD_EXP 82
14594: PUSH
14595: LD_INT 2
14597: ARRAY
14598: EQUAL
14599: OR
14600: IFFALSE 14680
// begin dialogAttackLeftBunkers = true ;
14602: LD_ADDR_EXP 31
14606: PUSH
14607: LD_INT 1
14609: ST_TO_ADDR
// DialogueOn ;
14610: CALL_OW 6
// if IsOK ( Gnyevko ) then
14614: LD_EXP 63
14618: PPUSH
14619: CALL_OW 302
14623: IFFALSE 14637
// Say ( Gnyevko , D19A-Gny-1 ) ;
14625: LD_EXP 63
14629: PPUSH
14630: LD_STRING D19A-Gny-1
14632: PPUSH
14633: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14637: LD_EXP 70
14641: PPUSH
14642: CALL_OW 302
14646: IFFALSE 14660
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14648: LD_EXP 70
14652: PPUSH
14653: LD_STRING D19A-Kov-1
14655: PPUSH
14656: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14660: LD_EXP 62
14664: PPUSH
14665: LD_STRING D16A-Bur-1
14667: PPUSH
14668: CALL_OW 88
// DialogueOff ;
14672: CALL_OW 7
// exit ;
14676: POP
14677: POP
14678: GO 14684
// end ; end ;
14680: GO 14557
14682: POP
14683: POP
// end ;
14684: PPOPN 1
14686: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14687: LD_EXP 82
14691: NOT
14692: PUSH
14693: LD_INT 17
14695: PPUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 1
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 30
14718: PUSH
14719: LD_INT 31
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 50
14728: PUSH
14729: EMPTY
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 70
14742: PUSH
14743: LD_INT 0
14745: EQUAL
14746: OR
14747: PUSH
14748: LD_EXP 20
14752: AND
14753: IFFALSE 14804
14755: GO 14757
14757: DISABLE
// begin leftBunkers = [ ] ;
14758: LD_ADDR_EXP 82
14762: PUSH
14763: EMPTY
14764: ST_TO_ADDR
// DialogueOn ;
14765: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14769: LD_EXP 62
14773: PPUSH
14774: LD_STRING D20-Bur-1
14776: PPUSH
14777: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14781: LD_EXP 76
14785: PPUSH
14786: LD_STRING D20-Pla-1
14788: PPUSH
14789: CALL_OW 88
// DialogueOff ;
14793: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14797: LD_STRING M8
14799: PPUSH
14800: CALL_OW 337
// end ;
14804: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14805: LD_EXP 83
14809: NOT
14810: PUSH
14811: LD_INT 16
14813: PPUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 30
14836: PUSH
14837: LD_INT 31
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 50
14846: PUSH
14847: EMPTY
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 70
14860: PUSH
14861: LD_INT 0
14863: EQUAL
14864: OR
14865: PUSH
14866: LD_EXP 20
14870: AND
14871: IFFALSE 14915
14873: GO 14875
14875: DISABLE
// begin rightBunkers = [ ] ;
14876: LD_ADDR_EXP 83
14880: PUSH
14881: EMPTY
14882: ST_TO_ADDR
// DialogueOn ;
14883: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14887: LD_EXP 62
14891: PPUSH
14892: LD_STRING D20a-Bur-1
14894: PPUSH
14895: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14899: LD_EXP 76
14903: PPUSH
14904: LD_STRING D20a-Pla-1
14906: PPUSH
14907: CALL_OW 88
// DialogueOff ;
14911: CALL_OW 7
// end ;
14915: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14916: LD_EXP 35
14920: NOT
14921: PUSH
14922: LD_EXP 73
14926: AND
14927: IFFALSE 15422
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
14936: PPUSH
// begin enable ;
14937: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 3
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 21
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15420
// for trapUnit in trapTeam do
14993: LD_ADDR_VAR 0 2
14997: PUSH
14998: LD_EXP 81
15002: PUSH
15003: FOR_IN
15004: IFFALSE 15416
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
15006: LD_VAR 0 1
15010: PPUSH
15011: LD_VAR 0 2
15015: PPUSH
15016: CALL_OW 296
15020: PUSH
15021: LD_INT 16
15023: LESS
15024: IFFALSE 15414
// begin saveBelkovDecision = true ;
15026: LD_ADDR_EXP 35
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
// if playerGetSupport then
15034: LD_EXP 34
15038: IFFALSE 15057
// decsToChoose = [ 1 , 3 ] else
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: LD_INT 3
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
15055: GO 15076
// decsToChoose = [ 1 , 2 , 3 ] ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
15076: LD_STRING QAttackAm
15078: PPUSH
15079: LD_VAR 0 3
15083: PPUSH
15084: CALL_OW 98
15088: PUSH
15089: LD_INT 1
15091: DOUBLE
15092: EQUAL
15093: IFTRUE 15097
15095: GO 15166
15097: POP
// begin DialogueOn ;
15098: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15102: LD_EXP 62
15106: PPUSH
15107: LD_STRING D21-Bur-1
15109: PPUSH
15110: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15114: LD_EXP 76
15118: PPUSH
15119: LD_STRING D21-Pla-1
15121: PPUSH
15122: CALL_OW 94
// DialogueOff ;
15126: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15130: LD_EXP 42
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: IN
15145: NOT
15146: IFFALSE 15164
// begin initiative = 1 ;
15148: LD_ADDR_EXP 42
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// platonovOpinion = 2 ;
15156: LD_ADDR_EXP 5
15160: PUSH
15161: LD_INT 2
15163: ST_TO_ADDR
// end ; end ; 2 :
15164: GO 15358
15166: LD_INT 2
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15330
15174: POP
// begin DialogueOn ;
15175: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15179: LD_EXP 62
15183: PPUSH
15184: LD_STRING D22-Bur-1
15186: PPUSH
15187: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15191: LD_EXP 34
15195: PUSH
15196: LD_EXP 82
15200: PUSH
15201: LD_INT 0
15203: EQUAL
15204: PUSH
15205: LD_EXP 83
15209: PUSH
15210: LD_INT 0
15212: EQUAL
15213: OR
15214: AND
15215: IFFALSE 15229
// Say ( Platonov , D22-Pla-1b ) ;
15217: LD_EXP 76
15221: PPUSH
15222: LD_STRING D22-Pla-1b
15224: PPUSH
15225: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15229: LD_EXP 34
15233: PUSH
15234: LD_EXP 82
15238: PUSH
15239: LD_EXP 83
15243: OR
15244: AND
15245: IFFALSE 15259
// Say ( Platonov , D22-Pla-1a ) ;
15247: LD_EXP 76
15251: PPUSH
15252: LD_STRING D22-Pla-1a
15254: PPUSH
15255: CALL_OW 88
// if not playerGetSupport then
15259: LD_EXP 34
15263: NOT
15264: IFFALSE 15298
// begin Say ( Platonov , D22-Pla-1 ) ;
15266: LD_EXP 76
15270: PPUSH
15271: LD_STRING D22-Pla-1
15273: PPUSH
15274: CALL_OW 88
// playerGetSupport = true ;
15278: LD_ADDR_EXP 34
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// medalForGetSupport = false ;
15286: LD_ADDR_EXP 40
15290: PUSH
15291: LD_INT 0
15293: ST_TO_ADDR
// PlatonovSendSupport ;
15294: CALL 6644 0 0
// end ; DialogueOff ;
15298: CALL_OW 7
// if initiative <> 3 then
15302: LD_EXP 42
15306: PUSH
15307: LD_INT 3
15309: NONEQUAL
15310: IFFALSE 15328
// begin initiative = 2 ;
15312: LD_ADDR_EXP 42
15316: PUSH
15317: LD_INT 2
15319: ST_TO_ADDR
// platonovOpinion = 1 ;
15320: LD_ADDR_EXP 5
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// end ; end ; 3 :
15328: GO 15358
15330: LD_INT 3
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15357
15338: POP
// begin initiative = 3 ;
15339: LD_ADDR_EXP 42
15343: PUSH
15344: LD_INT 3
15346: ST_TO_ADDR
// platonovOpinion = 0 ;
15347: LD_ADDR_EXP 5
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// end ; end ;
15355: GO 15358
15357: POP
// if IsOK ( Gnyevko ) then
15358: LD_EXP 63
15362: PPUSH
15363: CALL_OW 302
15367: IFFALSE 15393
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15369: LD_EXP 63
15373: PPUSH
15374: LD_STRING D23-Gny-1
15376: PPUSH
15377: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15381: LD_EXP 62
15385: PPUSH
15386: LD_STRING D23-Bur-1
15388: PPUSH
15389: CALL_OW 88
// end ; saveBelkovObjective = true ;
15393: LD_ADDR_EXP 36
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15401: LD_STRING M9
15403: PPUSH
15404: CALL_OW 337
// exit ;
15408: POP
15409: POP
15410: POP
15411: POP
15412: GO 15422
// end ;
15414: GO 15003
15416: POP
15417: POP
15418: GO 14990
15420: POP
15421: POP
// end ;
15422: PPOPN 3
15424: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15425: LD_EXP 20
15429: PUSH
15430: LD_EXP 81
15434: NOT
15435: AND
15436: PUSH
15437: LD_EXP 37
15441: NOT
15442: AND
15443: IFFALSE 15483
15445: GO 15447
15447: DISABLE
// begin belkovSaved = true ;
15448: LD_ADDR_EXP 37
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// activateBelkovAI = false ;
15456: LD_ADDR_EXP 28
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15464: LD_EXP 73
15468: PPUSH
15469: LD_INT 3
15471: PPUSH
15472: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15476: LD_STRING M9a
15478: PPUSH
15479: CALL_OW 337
// end ;
15483: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15484: LD_EXP 35
15488: PUSH
15489: LD_EXP 64
15493: PPUSH
15494: CALL_OW 301
15498: PUSH
15499: LD_EXP 68
15503: PPUSH
15504: CALL_OW 301
15508: PUSH
15509: LD_EXP 64
15513: PPUSH
15514: CALL_OW 255
15518: PUSH
15519: LD_INT 6
15521: EQUAL
15522: PUSH
15523: LD_EXP 68
15527: PPUSH
15528: CALL_OW 255
15532: PUSH
15533: LD_INT 6
15535: EQUAL
15536: OR
15537: AND
15538: OR
15539: AND
15540: IFFALSE 15560
15542: GO 15544
15544: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15545: LD_STRING M9a
15547: PPUSH
15548: CALL_OW 337
// saveBelkovObjective = false ;
15552: LD_ADDR_EXP 36
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// end ;
15560: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15561: LD_EXP 37
15565: PUSH
15566: LD_EXP 62
15570: PPUSH
15571: LD_EXP 64
15575: PPUSH
15576: CALL_OW 296
15580: PUSH
15581: LD_INT 14
15583: LESS
15584: PUSH
15585: LD_EXP 6
15589: AND
15590: PUSH
15591: LD_EXP 62
15595: PPUSH
15596: LD_EXP 68
15600: PPUSH
15601: CALL_OW 296
15605: PUSH
15606: LD_INT 14
15608: LESS
15609: PUSH
15610: LD_EXP 6
15614: NOT
15615: AND
15616: OR
15617: AND
15618: IFFALSE 15914
15620: GO 15622
15622: DISABLE
// begin InGameOn ;
15623: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15627: LD_EXP 64
15631: PPUSH
15632: CALL_OW 302
15636: PUSH
15637: LD_EXP 6
15641: AND
15642: IFFALSE 15738
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15644: LD_EXP 62
15648: PUSH
15649: LD_EXP 64
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15662: LD_EXP 62
15666: PPUSH
15667: LD_EXP 64
15671: PPUSH
15672: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15676: LD_EXP 64
15680: PPUSH
15681: LD_EXP 62
15685: PPUSH
15686: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15690: LD_EXP 64
15694: PPUSH
15695: LD_STRING D24-Bel-1
15697: PPUSH
15698: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15702: LD_EXP 62
15706: PPUSH
15707: LD_STRING D24-Bur-1
15709: PPUSH
15710: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15714: LD_EXP 64
15718: PPUSH
15719: LD_STRING D24-Bel-2
15721: PPUSH
15722: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15726: LD_EXP 62
15730: PPUSH
15731: LD_STRING D24-Bur-2
15733: PPUSH
15734: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15738: LD_EXP 68
15742: PPUSH
15743: CALL_OW 302
15747: PUSH
15748: LD_EXP 6
15752: NOT
15753: AND
15754: IFFALSE 15862
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15756: LD_EXP 62
15760: PUSH
15761: LD_EXP 68
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15774: LD_EXP 62
15778: PPUSH
15779: LD_EXP 68
15783: PPUSH
15784: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15788: LD_EXP 68
15792: PPUSH
15793: LD_EXP 62
15797: PPUSH
15798: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15802: LD_EXP 68
15806: PPUSH
15807: LD_STRING D24-Bel-1
15809: PPUSH
15810: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15814: LD_EXP 62
15818: PPUSH
15819: LD_STRING D24-Bur-1
15821: PPUSH
15822: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15826: LD_EXP 62
15830: PPUSH
15831: LD_STRING D24-Bur-1a
15833: PPUSH
15834: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15838: LD_EXP 68
15842: PPUSH
15843: LD_STRING D24-Bel-2
15845: PPUSH
15846: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15850: LD_EXP 62
15854: PPUSH
15855: LD_STRING D24-Bur-2
15857: PPUSH
15858: CALL_OW 88
// end ; if captureBelkovVehicle then
15862: LD_EXP 38
15866: IFFALSE 15880
// Say ( Burlak , D24-Bur-2a ) ;
15868: LD_EXP 62
15872: PPUSH
15873: LD_STRING D24-Bur-2a
15875: PPUSH
15876: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15880: LD_EXP 76
15884: PPUSH
15885: LD_STRING D24-Pla-2
15887: PPUSH
15888: CALL_OW 94
// if leftBunkers then
15892: LD_EXP 82
15896: IFFALSE 15910
// SayRadio ( Platonov , D24-Pla-2a ) ;
15898: LD_EXP 76
15902: PPUSH
15903: LD_STRING D24-Pla-2a
15905: PPUSH
15906: CALL_OW 94
// InGameOff ;
15910: CALL_OW 9
// end ;
15914: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15915: LD_INT 22
15917: PPUSH
15918: LD_INT 22
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 70
15946: PUSH
15947: LD_EXP 70
15951: PPUSH
15952: CALL_OW 302
15956: PUSH
15957: LD_EXP 63
15961: PPUSH
15962: CALL_OW 302
15966: OR
15967: AND
15968: IFFALSE 16051
15970: GO 15972
15972: DISABLE
// begin DialogueOn ;
15973: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15977: LD_EXP 62
15981: PPUSH
15982: LD_STRING D26-Bur-1
15984: PPUSH
15985: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15989: LD_EXP 70
15993: PPUSH
15994: CALL_OW 302
15998: IFFALSE 16012
// Say ( Kovalyuk , D26-Kov-1 ) ;
16000: LD_EXP 70
16004: PPUSH
16005: LD_STRING D26-Kov-1
16007: PPUSH
16008: CALL_OW 88
// if IsOk ( Gnyevko ) then
16012: LD_EXP 63
16016: PPUSH
16017: CALL_OW 302
16021: IFFALSE 16035
// Say ( Gnyevko , D26-Gny-1 ) ;
16023: LD_EXP 63
16027: PPUSH
16028: LD_STRING D26-Gny-1
16030: PPUSH
16031: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
16035: LD_EXP 62
16039: PPUSH
16040: LD_STRING D26-Bur-2
16042: PPUSH
16043: CALL_OW 88
// DialogueOff ;
16047: CALL_OW 7
// end ;
16051: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
16052: LD_EXP 20
16056: PUSH
16057: LD_EXP 62
16061: PPUSH
16062: LD_INT 8
16064: PPUSH
16065: CALL_OW 308
16069: NOT
16070: PUSH
16071: LD_EXP 62
16075: PPUSH
16076: CALL_OW 310
16080: PPUSH
16081: CALL_OW 310
16085: PPUSH
16086: LD_INT 8
16088: PPUSH
16089: CALL_OW 308
16093: NOT
16094: AND
16095: AND
16096: PUSH
16097: LD_EXP 39
16101: PUSH
16102: LD_INT 1
16104: NEG
16105: EQUAL
16106: AND
16107: IFFALSE 16121
16109: GO 16111
16111: DISABLE
// begin enable ;
16112: ENABLE
// raportForPlatonov = 0 ;
16113: LD_ADDR_EXP 39
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// end ;
16121: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16122: LD_EXP 20
16126: PUSH
16127: LD_EXP 39
16131: PUSH
16132: LD_INT 0
16134: GREATEREQUAL
16135: AND
16136: PUSH
16137: LD_EXP 16
16141: NOT
16142: AND
16143: PUSH
16144: LD_EXP 62
16148: PPUSH
16149: LD_INT 8
16151: PPUSH
16152: CALL_OW 308
16156: PUSH
16157: LD_EXP 62
16161: PPUSH
16162: CALL_OW 310
16166: PPUSH
16167: CALL_OW 310
16171: PPUSH
16172: LD_INT 8
16174: PPUSH
16175: CALL_OW 308
16179: PUSH
16180: LD_EXP 16
16184: NOT
16185: AND
16186: OR
16187: AND
16188: IFFALSE 16479
16190: GO 16192
16192: DISABLE
// begin enable ;
16193: ENABLE
// DialogueOn ;
16194: CALL_OW 6
// case raportForPlatonov of 0 :
16198: LD_EXP 39
16202: PUSH
16203: LD_INT 0
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16238
16211: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16212: LD_EXP 76
16216: PPUSH
16217: LD_STRING D25a-Pla-1
16219: PPUSH
16220: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16224: LD_EXP 62
16228: PPUSH
16229: LD_STRING D25a-Bur-1
16231: PPUSH
16232: CALL_OW 88
// end ; 1 :
16236: GO 16454
16238: LD_INT 1
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16309
16246: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16247: LD_EXP 76
16251: PPUSH
16252: LD_STRING D25-Pla-1
16254: PPUSH
16255: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16259: LD_EXP 62
16263: PPUSH
16264: LD_STRING D25-Bur-1
16266: PPUSH
16267: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16271: LD_EXP 62
16275: PPUSH
16276: LD_STRING D25b-Bur-1
16278: PPUSH
16279: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16283: LD_EXP 76
16287: PPUSH
16288: LD_STRING D25b-Pla-1
16290: PPUSH
16291: CALL_OW 88
// playerGetSupport = true ;
16295: LD_ADDR_EXP 34
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// PlatonovSendSupport ;
16303: CALL 6644 0 0
// end ; 2 :
16307: GO 16454
16309: LD_INT 2
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16363
16317: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16318: LD_EXP 76
16322: PPUSH
16323: LD_STRING D25-Pla-1
16325: PPUSH
16326: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16330: LD_EXP 62
16334: PPUSH
16335: LD_STRING D25-Bur-1a
16337: PPUSH
16338: CALL_OW 88
// if not sawLeftBunker then
16342: LD_EXP 29
16346: NOT
16347: IFFALSE 16361
// Say ( Platonov , D25c-Pla-1 ) ;
16349: LD_EXP 76
16353: PPUSH
16354: LD_STRING D25c-Pla-1
16356: PPUSH
16357: CALL_OW 88
// end ; 3 :
16361: GO 16454
16363: LD_INT 3
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16453
16371: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16372: LD_EXP 76
16376: PPUSH
16377: LD_STRING D25-Pla-1
16379: PPUSH
16380: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16384: LD_EXP 62
16388: PPUSH
16389: LD_STRING D25a-Bur-1b
16391: PPUSH
16392: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16396: LD_EXP 62
16400: PPUSH
16401: LD_STRING D25b-Bur-1
16403: PPUSH
16404: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16408: LD_EXP 76
16412: PPUSH
16413: LD_STRING D25b-Pla-1
16415: PPUSH
16416: CALL_OW 88
// playerGetSupport = true ;
16420: LD_ADDR_EXP 34
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// PlatonovSendSupport ;
16428: CALL 6644 0 0
// if not sawRightBunker then
16432: LD_EXP 30
16436: NOT
16437: IFFALSE 16451
// Say ( Platonov , D25c-Pla-1 ) ;
16439: LD_EXP 76
16443: PPUSH
16444: LD_STRING D25c-Pla-1
16446: PPUSH
16447: CALL_OW 88
// end ; end ;
16451: GO 16454
16453: POP
// raportForPlatonov = - 1 ;
16454: LD_ADDR_EXP 39
16458: PUSH
16459: LD_INT 1
16461: NEG
16462: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16463: LD_EXP 76
16467: PPUSH
16468: LD_STRING D25c-Pla-1a
16470: PPUSH
16471: CALL_OW 88
// DialogueOff ;
16475: CALL_OW 7
// end ;
16479: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16480: LD_INT 19
16482: PPUSH
16483: LD_INT 22
16485: PUSH
16486: LD_INT 3
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: PPUSH
16496: CALL_OW 70
16500: PUSH
16501: LD_INT 0
16503: GREATER
16504: IFFALSE 16524
16506: GO 16508
16508: DISABLE
// begin northMapExplored = true ;
16509: LD_ADDR_EXP 41
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16517: LD_STRING M10
16519: PPUSH
16520: CALL_OW 337
// end ;
16524: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16525: LD_EXP 82
16529: NOT
16530: PUSH
16531: LD_EXP 41
16535: AND
16536: PUSH
16537: LD_EXP 37
16541: PUSH
16542: LD_EXP 36
16546: NOT
16547: OR
16548: AND
16549: IFFALSE 16569
16551: GO 16553
16553: DISABLE
// begin backToBeria2 = true ;
16554: LD_ADDR_EXP 16
16558: PUSH
16559: LD_INT 1
16561: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16562: LD_STRING M10a
16564: PPUSH
16565: CALL_OW 337
// end ;
16569: END
// every 0 0$1 do
16570: GO 16572
16572: DISABLE
// begin enable ;
16573: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16574: LD_EXP 67
16578: PUSH
16579: LD_EXP 76
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PPUSH
16588: LD_INT 1000
16590: PPUSH
16591: CALL_OW 234
// end ; end_of_file
16595: END
// export function CreateNature ; var i , un ; begin
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
16600: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_EXP 45
16615: PUSH
16616: LD_INT 1
16618: ARRAY
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16731
// begin uc_side = 0 ;
16623: LD_ADDR_OWVAR 20
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// uc_nation = nation_nature ;
16631: LD_ADDR_OWVAR 21
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// hc_class = class_apeman ;
16639: LD_ADDR_OWVAR 28
16643: PUSH
16644: LD_INT 12
16646: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16647: LD_ADDR_OWVAR 31
16651: PUSH
16652: LD_EXP 46
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PUSH
16661: LD_EXP 46
16665: PUSH
16666: LD_INT 2
16668: ARRAY
16669: PUSH
16670: LD_EXP 46
16674: PUSH
16675: LD_INT 3
16677: ARRAY
16678: PUSH
16679: LD_EXP 46
16683: PUSH
16684: LD_INT 4
16686: ARRAY
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16694: LD_ADDR_OWVAR 35
16698: PUSH
16699: LD_EXP 47
16703: ST_TO_ADDR
// un = CreateHuman ;
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: CALL_OW 44
16713: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 21
16721: PPUSH
16722: LD_INT 0
16724: PPUSH
16725: CALL_OW 49
// end ;
16729: GO 16620
16731: POP
16732: POP
// for i := 1 to animalsAmount [ 2 ] do
16733: LD_ADDR_VAR 0 2
16737: PUSH
16738: DOUBLE
16739: LD_INT 1
16741: DEC
16742: ST_TO_ADDR
16743: LD_EXP 45
16747: PUSH
16748: LD_INT 2
16750: ARRAY
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16863
// begin uc_side = 0 ;
16755: LD_ADDR_OWVAR 20
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// uc_nation = nation_nature ;
16763: LD_ADDR_OWVAR 21
16767: PUSH
16768: LD_INT 0
16770: ST_TO_ADDR
// hc_class = class_phororhacos ;
16771: LD_ADDR_OWVAR 28
16775: PUSH
16776: LD_INT 18
16778: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16779: LD_ADDR_OWVAR 31
16783: PUSH
16784: LD_EXP 46
16788: PUSH
16789: LD_INT 1
16791: ARRAY
16792: PUSH
16793: LD_EXP 46
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: PUSH
16802: LD_EXP 46
16806: PUSH
16807: LD_INT 3
16809: ARRAY
16810: PUSH
16811: LD_EXP 46
16815: PUSH
16816: LD_INT 4
16818: ARRAY
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16826: LD_ADDR_OWVAR 35
16830: PUSH
16831: LD_EXP 47
16835: ST_TO_ADDR
// un = CreateHuman ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: CALL_OW 44
16845: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16846: LD_VAR 0 3
16850: PPUSH
16851: LD_INT 21
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 49
// end ;
16861: GO 16752
16863: POP
16864: POP
// for i := 1 to animalsAmount [ 3 ] do
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: DOUBLE
16871: LD_INT 1
16873: DEC
16874: ST_TO_ADDR
16875: LD_EXP 45
16879: PUSH
16880: LD_INT 3
16882: ARRAY
16883: PUSH
16884: FOR_TO
16885: IFFALSE 16995
// begin uc_side = 0 ;
16887: LD_ADDR_OWVAR 20
16891: PUSH
16892: LD_INT 0
16894: ST_TO_ADDR
// uc_nation = nation_nature ;
16895: LD_ADDR_OWVAR 21
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// hc_class = class_tiger ;
16903: LD_ADDR_OWVAR 28
16907: PUSH
16908: LD_INT 14
16910: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16911: LD_ADDR_OWVAR 31
16915: PUSH
16916: LD_EXP 46
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: PUSH
16925: LD_EXP 46
16929: PUSH
16930: LD_INT 2
16932: ARRAY
16933: PUSH
16934: LD_EXP 46
16938: PUSH
16939: LD_INT 3
16941: ARRAY
16942: PUSH
16943: LD_EXP 46
16947: PUSH
16948: LD_INT 4
16950: ARRAY
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16958: LD_ADDR_OWVAR 35
16962: PUSH
16963: LD_EXP 47
16967: ST_TO_ADDR
// un = CreateHuman ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: CALL_OW 44
16977: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16978: LD_VAR 0 3
16982: PPUSH
16983: LD_INT 21
16985: PPUSH
16986: LD_INT 0
16988: PPUSH
16989: CALL_OW 49
// end ;
16993: GO 16884
16995: POP
16996: POP
// for i := 1 to animalsAmount [ 4 ] do
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: DOUBLE
17003: LD_INT 1
17005: DEC
17006: ST_TO_ADDR
17007: LD_EXP 45
17011: PUSH
17012: LD_INT 4
17014: ARRAY
17015: PUSH
17016: FOR_TO
17017: IFFALSE 17127
// begin uc_side = 0 ;
17019: LD_ADDR_OWVAR 20
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// uc_nation = nation_nature ;
17027: LD_ADDR_OWVAR 21
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// hc_class = 21 ;
17035: LD_ADDR_OWVAR 28
17039: PUSH
17040: LD_INT 21
17042: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
17043: LD_ADDR_OWVAR 31
17047: PUSH
17048: LD_EXP 46
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PUSH
17057: LD_EXP 46
17061: PUSH
17062: LD_INT 2
17064: ARRAY
17065: PUSH
17066: LD_EXP 46
17070: PUSH
17071: LD_INT 3
17073: ARRAY
17074: PUSH
17075: LD_EXP 46
17079: PUSH
17080: LD_INT 4
17082: ARRAY
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17090: LD_ADDR_OWVAR 35
17094: PUSH
17095: LD_EXP 47
17099: ST_TO_ADDR
// un = CreateHuman ;
17100: LD_ADDR_VAR 0 3
17104: PUSH
17105: CALL_OW 44
17109: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 21
17117: PPUSH
17118: LD_INT 0
17120: PPUSH
17121: CALL_OW 49
// end ;
17125: GO 17016
17127: POP
17128: POP
// end ; end_of_file
17129: LD_VAR 0 1
17133: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17134: LD_EXP 21
17138: IFFALSE 17367
17140: GO 17142
17142: DISABLE
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17150: LD_ADDR_VAR 0 4
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 21
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 25
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17195: LD_INT 700
17197: PPUSH
17198: CALL_OW 67
// carryCratesEngs = 0 ;
17202: LD_ADDR_VAR 0 3
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// for unit in playerEngs do
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_VAR 0 4
17219: PUSH
17220: FOR_IN
17221: IFFALSE 17249
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17223: LD_ADDR_VAR 0 3
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 289
17245: PLUS
17246: ST_TO_ADDR
17247: GO 17220
17249: POP
17250: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17251: LD_INT 106
17253: PPUSH
17254: CALL_OW 274
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: CALL_OW 275
17266: PUSH
17267: LD_INT 50
17269: LESS
17270: PUSH
17271: LD_INT 8
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 287
17281: PUSH
17282: LD_INT 10
17284: MUL
17285: PUSH
17286: LD_INT 106
17288: PPUSH
17289: CALL_OW 274
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 275
17301: PLUS
17302: PUSH
17303: LD_VAR 0 3
17307: PLUS
17308: PUSH
17309: LD_INT 50
17311: LESS
17312: AND
17313: IFFALSE 17325
// spawnNextCrates = true else
17315: LD_ADDR_VAR 0 5
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
17323: GO 17333
// spawnNextCrates = false ;
17325: LD_ADDR_VAR 0 5
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// if spawnNextCrates then
17333: LD_VAR 0 5
17337: IFFALSE 17360
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 5
17344: PPUSH
17345: CALL_OW 12
17349: PPUSH
17350: LD_INT 26
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 55
// until not spawnCrates ;
17360: LD_EXP 21
17364: NOT
17365: IFFALSE 17150
// end ; end_of_file
17367: PPOPN 5
17369: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 266
17379: PUSH
17380: LD_INT 6
17382: EQUAL
17383: PUSH
17384: LD_INT 22
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 30
17396: PUSH
17397: LD_INT 6
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PPUSH
17408: CALL_OW 69
17412: PUSH
17413: LD_INT 1
17415: GREATER
17416: AND
17417: PUSH
17418: LD_EXP 11
17422: NOT
17423: AND
17424: IFFALSE 17435
// Dial_StopConstructAgainSameBuilding ( building ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL 9136 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 266
17444: PUSH
17445: LD_INT 2
17447: EQUAL
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PPUSH
17473: CALL_OW 69
17477: PUSH
17478: LD_INT 1
17480: GREATER
17481: AND
17482: PUSH
17483: LD_EXP 11
17487: NOT
17488: AND
17489: IFFALSE 17500
// Dial_StopConstructAgainSameBuilding ( building ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL 9136 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 255
17509: PUSH
17510: LD_INT 3
17512: EQUAL
17513: PUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 266
17523: PUSH
17524: LD_INT 26
17526: PUSH
17527: LD_INT 4
17529: PUSH
17530: LD_INT 31
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: IN
17538: AND
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_INT 8
17547: PPUSH
17548: CALL_OW 308
17552: AND
17553: IFFALSE 17564
// Dial_StopConstructAgainSameBuilding ( building ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL 9136 0 1
// end ;
17564: PPOPN 2
17566: END
// on BuildingComplete ( building ) do var sold , platSold ;
17567: LD_INT 0
17569: PPUSH
17570: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 255
17580: PUSH
17581: LD_INT 3
17583: EQUAL
17584: PUSH
17585: LD_VAR 0 1
17589: PPUSH
17590: CALL_OW 266
17594: PUSH
17595: LD_INT 6
17597: EQUAL
17598: AND
17599: PUSH
17600: LD_EXP 8
17604: NOT
17605: AND
17606: IFFALSE 17612
// Dial_LabConstructed ;
17608: CALL 8986 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 255
17621: PUSH
17622: LD_INT 3
17624: EQUAL
17625: PUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL_OW 266
17635: PUSH
17636: LD_INT 2
17638: EQUAL
17639: AND
17640: PUSH
17641: LD_EXP 9
17645: NOT
17646: AND
17647: IFFALSE 17653
// Dial_WorkshopConstructed ;
17649: CALL 9061 0 0
// if GetSide ( building ) = 6 then
17653: LD_VAR 0 1
17657: PPUSH
17658: CALL_OW 255
17662: PUSH
17663: LD_INT 6
17665: EQUAL
17666: IFFALSE 17877
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 266
17677: PUSH
17678: LD_INT 31
17680: EQUAL
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_INT 9
17689: PPUSH
17690: CALL_OW 308
17694: AND
17695: IFFALSE 17746
// begin if UnitsInside ( ru2_arm2 ) then
17697: LD_INT 209
17699: PPUSH
17700: CALL_OW 313
17704: IFFALSE 17746
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 209
17713: PPUSH
17714: CALL_OW 313
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17732: LD_VAR 0 2
17736: PPUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 266
17755: PUSH
17756: LD_INT 31
17758: EQUAL
17759: PUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: LD_INT 8
17767: PPUSH
17768: CALL_OW 308
17772: AND
17773: IFFALSE 17809
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_EXP 77
17784: PPUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 74
17794: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 266
17818: PUSH
17819: LD_INT 2
17821: EQUAL
17822: IFFALSE 17877
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17824: LD_EXP 69
17828: PPUSH
17829: LD_INT 25
17831: PUSH
17832: LD_INT 3
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 72
17843: PPUSH
17844: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17848: LD_EXP 69
17852: PPUSH
17853: LD_INT 25
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PPUSH
17863: CALL_OW 72
17867: PPUSH
17868: LD_VAR 0 1
17872: PPUSH
17873: CALL_OW 180
// end ; end ; end ;
17877: PPOPN 3
17879: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17880: LD_VAR 0 1
17884: PUSH
17885: LD_INT 47
17887: EQUAL
17888: PUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: CALL_OW 255
17898: PUSH
17899: LD_INT 3
17901: EQUAL
17902: AND
17903: IFFALSE 17913
// engineResearched = true ;
17905: LD_ADDR_EXP 10
17909: PUSH
17910: LD_INT 1
17912: ST_TO_ADDR
// if tech = tech_Tech1 then
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 48
17920: EQUAL
17921: IFFALSE 17943
// begin wait ( 0 0$5 ) ;
17923: LD_INT 175
17925: PPUSH
17926: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17930: LD_INT 83
17932: PPUSH
17933: LD_INT 1500
17935: PPUSH
17936: LD_INT 0
17938: PPUSH
17939: CALL_OW 486
// end ; end ;
17943: PPOPN 2
17945: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17946: LD_VAR 0 2
17950: PPUSH
17951: CALL_OW 255
17955: PUSH
17956: LD_OWVAR 2
17960: EQUAL
17961: PUSH
17962: LD_VAR 0 2
17966: PPUSH
17967: CALL_OW 302
17971: AND
17972: PUSH
17973: LD_EXP 12
17977: NOT
17978: AND
17979: PUSH
17980: LD_EXP 17
17984: NOT
17985: AND
17986: IFFALSE 17997
// Dial_FirstVehConstructed ( factory ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: CALL 9660 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17997: LD_VAR 0 2
18001: PPUSH
18002: CALL_OW 255
18006: PUSH
18007: LD_OWVAR 2
18011: EQUAL
18012: PUSH
18013: LD_EXP 14
18017: NOT
18018: AND
18019: PUSH
18020: LD_EXP 13
18024: PPUSH
18025: CALL_OW 302
18029: NOT
18030: AND
18031: IFFALSE 18043
// firstVeh = vehicle ;
18033: LD_ADDR_EXP 13
18037: PUSH
18038: LD_VAR 0 1
18042: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
18043: LD_VAR 0 2
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_OWVAR 2
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: CALL_OW 302
18068: AND
18069: PUSH
18070: LD_EXP 17
18074: AND
18075: IFFALSE 18091
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
18077: LD_ADDR_EXP 18
18081: PUSH
18082: LD_EXP 18
18086: PUSH
18087: LD_INT 1
18089: PLUS
18090: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 255
18100: PUSH
18101: LD_OWVAR 2
18105: EQUAL
18106: PUSH
18107: LD_VAR 0 2
18111: PPUSH
18112: CALL_OW 248
18116: PUSH
18117: LD_INT 3
18119: EQUAL
18120: AND
18121: IFFALSE 18137
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18123: LD_ADDR_EXP 44
18127: PUSH
18128: LD_EXP 44
18132: PUSH
18133: LD_INT 1
18135: PLUS
18136: ST_TO_ADDR
// end ;
18137: PPOPN 2
18139: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18140: LD_EXP 19
18144: NOT
18145: PUSH
18146: LD_VAR 0 5
18150: PUSH
18151: LD_INT 1
18153: EQUAL
18154: AND
18155: IFFALSE 18171
// Dial_NewCrates ( x , y ) ;
18157: LD_VAR 0 2
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: CALL 9605 0 2
// end ;
18171: PPOPN 5
18173: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18174: LD_INT 0
18176: PPUSH
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PUSH
18215: FOR_IN
18216: IFFALSE 18409
// if GetTaskList ( i ) > 0 then
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 437
18227: PUSH
18228: LD_INT 0
18230: GREATER
18231: IFFALSE 18407
// for j = 1 to GetTaskList ( i ) do
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: DOUBLE
18239: LD_INT 1
18241: DEC
18242: ST_TO_ADDR
18243: LD_VAR 0 2
18247: PPUSH
18248: CALL_OW 437
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18405
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18256: LD_ADDR_VAR 0 4
18260: PUSH
18261: LD_VAR 0 2
18265: PPUSH
18266: CALL_OW 437
18270: PUSH
18271: LD_VAR 0 3
18275: ARRAY
18276: PUSH
18277: LD_INT 4
18279: ARRAY
18280: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18281: LD_VAR 0 4
18285: PUSH
18286: LD_INT 71
18288: EQUAL
18289: PUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: CALL_OW 255
18299: PUSH
18300: LD_INT 6
18302: EQUAL
18303: PUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: CALL_OW 437
18313: PUSH
18314: LD_VAR 0 3
18318: ARRAY
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PUSH
18324: LD_STRING e
18326: EQUAL
18327: AND
18328: PUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: CALL_OW 247
18338: PUSH
18339: LD_INT 2
18341: EQUAL
18342: AND
18343: OR
18344: IFFALSE 18357
// SetTaskList ( i , [ ] ) ;
18346: LD_VAR 0 2
18350: PPUSH
18351: EMPTY
18352: PPUSH
18353: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18357: LD_VAR 0 4
18361: PUSH
18362: LD_INT 106
18364: EQUAL
18365: PUSH
18366: LD_VAR 0 2
18370: PPUSH
18371: CALL_OW 437
18375: PUSH
18376: LD_VAR 0 3
18380: ARRAY
18381: PUSH
18382: LD_INT 1
18384: ARRAY
18385: PUSH
18386: LD_STRING Y
18388: EQUAL
18389: AND
18390: IFFALSE 18403
// SetTaskList ( i , [ ] ) ;
18392: LD_VAR 0 2
18396: PPUSH
18397: EMPTY
18398: PPUSH
18399: CALL_OW 446
// end ;
18403: GO 18253
18405: POP
18406: POP
18407: GO 18215
18409: POP
18410: POP
// end ;
18411: PPOPN 6
18413: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 255
18423: PUSH
18424: LD_INT 1
18426: EQUAL
18427: PUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 247
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: AND
18442: IFFALSE 18500
// begin if unit in amLeftEngs then
18444: LD_VAR 0 1
18448: PUSH
18449: LD_EXP 86
18453: IN
18454: IFFALSE 18472
// amLeftEngs = amLeftEngs diff unit ;
18456: LD_ADDR_EXP 86
18460: PUSH
18461: LD_EXP 86
18465: PUSH
18466: LD_VAR 0 1
18470: DIFF
18471: ST_TO_ADDR
// if unit in amRightEngs then
18472: LD_VAR 0 1
18476: PUSH
18477: LD_EXP 87
18481: IN
18482: IFFALSE 18500
// amRightEngs = amRightEngs diff unit ;
18484: LD_ADDR_EXP 87
18488: PUSH
18489: LD_EXP 87
18493: PUSH
18494: LD_VAR 0 1
18498: DIFF
18499: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 255
18509: PUSH
18510: LD_INT 6
18512: EQUAL
18513: PUSH
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 247
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: AND
18528: IFFALSE 18558
// if unit in belkovTeam then
18530: LD_VAR 0 1
18534: PUSH
18535: LD_EXP 73
18539: IN
18540: IFFALSE 18558
// belkovTeam = belkovTeam diff unit ;
18542: LD_ADDR_EXP 73
18546: PUSH
18547: LD_EXP 73
18551: PUSH
18552: LD_VAR 0 1
18556: DIFF
18557: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 255
18567: PUSH
18568: LD_INT 3
18570: EQUAL
18571: PUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 247
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: AND
18586: IFFALSE 18602
// lostComradesCounter = lostComradesCounter + 1 ;
18588: LD_ADDR_EXP 43
18592: PUSH
18593: LD_EXP 43
18597: PUSH
18598: LD_INT 1
18600: PLUS
18601: ST_TO_ADDR
// if unit = Burlak then
18602: LD_VAR 0 1
18606: PUSH
18607: LD_EXP 62
18611: EQUAL
18612: IFFALSE 18618
// BurlakIsDead ;
18614: CALL 19929 0 0
// if unit = Beria then
18618: LD_VAR 0 1
18622: PUSH
18623: LD_INT 106
18625: EQUAL
18626: IFFALSE 18632
// BaseDestroyed ;
18628: CALL 19959 0 0
// if unit in platSoldiers then
18632: LD_VAR 0 1
18636: PUSH
18637: LD_EXP 77
18641: IN
18642: IFFALSE 18660
// platSoldiers = platSoldiers diff unit ;
18644: LD_ADDR_EXP 77
18648: PUSH
18649: LD_EXP 77
18653: PUSH
18654: LD_VAR 0 1
18658: DIFF
18659: ST_TO_ADDR
// end ;
18660: PPOPN 1
18662: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 255
18672: PUSH
18673: LD_INT 1
18675: EQUAL
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 247
18686: PUSH
18687: LD_INT 3
18689: EQUAL
18690: AND
18691: IFFALSE 18749
// begin if unit in leftBunkers then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_EXP 82
18702: IN
18703: IFFALSE 18721
// leftBunkers = leftBunkers diff unit ;
18705: LD_ADDR_EXP 82
18709: PUSH
18710: LD_EXP 82
18714: PUSH
18715: LD_VAR 0 1
18719: DIFF
18720: ST_TO_ADDR
// if unit in rightBunkers then
18721: LD_VAR 0 1
18725: PUSH
18726: LD_EXP 83
18730: IN
18731: IFFALSE 18749
// rightBunkers = rightBunkers diff unit ;
18733: LD_ADDR_EXP 83
18737: PUSH
18738: LD_EXP 83
18742: PUSH
18743: LD_VAR 0 1
18747: DIFF
18748: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 255
18758: PUSH
18759: LD_INT 1
18761: EQUAL
18762: PUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 247
18772: PUSH
18773: LD_INT 1
18775: EQUAL
18776: AND
18777: IFFALSE 18807
// if unit in trapTeam then
18779: LD_VAR 0 1
18783: PUSH
18784: LD_EXP 81
18788: IN
18789: IFFALSE 18807
// trapTeam = trapTeam diff unit ;
18791: LD_ADDR_EXP 81
18795: PUSH
18796: LD_EXP 81
18800: PUSH
18801: LD_VAR 0 1
18805: DIFF
18806: ST_TO_ADDR
// end ;
18807: PPOPN 1
18809: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 1
18817: EQUAL
18818: IFFALSE 18828
// captureBelkovVehicle = true ;
18820: LD_ADDR_EXP 38
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// if original_side = 6 then
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 6
18835: EQUAL
18836: IFFALSE 18880
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18838: LD_VAR 0 1
18842: PUSH
18843: LD_VAR 0 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: LD_INT 118
18854: PPUSH
18855: LD_INT 25
18857: PPUSH
18858: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18862: LD_VAR 0 1
18866: PUSH
18867: LD_VAR 0 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 139
// end ; end ;
18880: PPOPN 4
18882: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18883: LD_VAR 0 1
18887: PUSH
18888: LD_INT 3
18890: EQUAL
18891: PUSH
18892: LD_VAR 0 2
18896: PUSH
18897: LD_INT 6
18899: EQUAL
18900: AND
18901: IFFALSE 18907
// AttackComrades ;
18903: CALL 19944 0 0
// end ;
18907: PPOPN 2
18909: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18910: LD_VAR 0 2
18914: PUSH
18915: LD_INT 6
18917: EQUAL
18918: IFFALSE 18932
// SetSide ( building , 3 ) ;
18920: LD_VAR 0 1
18924: PPUSH
18925: LD_INT 3
18927: PPUSH
18928: CALL_OW 235
// end ; end_of_file
18932: PPOPN 3
18934: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18935: LD_EXP 16
18939: PUSH
18940: LD_INT 8
18942: PPUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PPUSH
18967: CALL_OW 71
18971: PUSH
18972: LD_INT 0
18974: EQUAL
18975: AND
18976: IFFALSE 19077
18978: GO 18980
18980: DISABLE
// begin enable ;
18981: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18982: LD_EXP 36
18986: NOT
18987: PUSH
18988: LD_EXP 64
18992: PPUSH
18993: CALL_OW 302
18997: PUSH
18998: LD_EXP 68
19002: PPUSH
19003: CALL_OW 302
19007: OR
19008: AND
19009: IFFALSE 19056
// begin case Query ( QContMission ) of 1 :
19011: LD_STRING QContMission
19013: PPUSH
19014: CALL_OW 97
19018: PUSH
19019: LD_INT 1
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19034
19027: POP
// begin FinishMission ;
19028: CALL 19078 0 0
// end ; 2 :
19032: GO 19054
19034: LD_INT 2
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19053
19042: POP
// begin saveBelkovObjective = true ;
19043: LD_ADDR_EXP 36
19047: PUSH
19048: LD_INT 1
19050: ST_TO_ADDR
// end ; end ;
19051: GO 19054
19053: POP
// end else
19054: GO 19067
// if not belkovSaved then
19056: LD_EXP 37
19060: NOT
19061: IFFALSE 19067
// FinishMission ;
19063: CALL 19078 0 0
// if belkovSaved then
19067: LD_EXP 37
19071: IFFALSE 19077
// FinishMission ;
19073: CALL 19078 0 0
// end ;
19077: END
// function FinishMission ; begin
19078: LD_INT 0
19080: PPUSH
// SetRewards ;
19081: CALL 19102 0 0
// SavePlayerCharacters ;
19085: CALL 19392 0 0
// SaveGlobalVariables ;
19089: CALL 19609 0 0
// YouWin ;
19093: CALL_OW 103
// end ;
19097: LD_VAR 0 1
19101: RET
// function SetRewards ; begin
19102: LD_INT 0
19104: PPUSH
// case initiative of 1 :
19105: LD_EXP 42
19109: PUSH
19110: LD_INT 1
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19131
19118: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19119: LD_STRING Initiative
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
19129: GO 19176
19131: LD_INT 2
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19153
19139: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19140: LD_STRING Initiative
19142: PPUSH
19143: LD_INT 2
19145: NEG
19146: PPUSH
19147: CALL_OW 101
19151: GO 19176
19153: LD_INT 3
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19175
19161: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19162: LD_STRING Initiative
19164: PPUSH
19165: LD_INT 1
19167: NEG
19168: PPUSH
19169: CALL_OW 101
19173: GO 19176
19175: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19176: LD_EXP 37
19180: PUSH
19181: LD_EXP 64
19185: PPUSH
19186: CALL_OW 302
19190: PUSH
19191: LD_EXP 68
19195: PPUSH
19196: CALL_OW 302
19200: OR
19201: AND
19202: IFFALSE 19214
// AddMedal ( Belkov , 1 ) ;
19204: LD_STRING Belkov
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19214: LD_EXP 37
19218: NOT
19219: PUSH
19220: LD_EXP 36
19224: NOT
19225: AND
19226: IFFALSE 19239
// AddMedal ( Belkov , - 1 ) ;
19228: LD_STRING Belkov
19230: PPUSH
19231: LD_INT 1
19233: NEG
19234: PPUSH
19235: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19239: LD_EXP 37
19243: NOT
19244: PUSH
19245: LD_EXP 36
19249: AND
19250: IFFALSE 19263
// AddMedal ( Belkov , - 2 ) ;
19252: LD_STRING Belkov
19254: PPUSH
19255: LD_INT 2
19257: NEG
19258: PPUSH
19259: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19263: LD_EXP 37
19267: PUSH
19268: LD_EXP 6
19272: PUSH
19273: LD_EXP 64
19277: PPUSH
19278: CALL_OW 301
19282: AND
19283: AND
19284: PUSH
19285: LD_EXP 6
19289: NOT
19290: PUSH
19291: LD_EXP 68
19295: PPUSH
19296: CALL_OW 301
19300: AND
19301: OR
19302: IFFALSE 19315
// AddMedal ( Belkov , - 2 ) ;
19304: LD_STRING Belkov
19306: PPUSH
19307: LD_INT 2
19309: NEG
19310: PPUSH
19311: CALL_OW 101
// if lostComradesCounter = 0 then
19315: LD_EXP 43
19319: PUSH
19320: LD_INT 0
19322: EQUAL
19323: IFFALSE 19337
// AddMedal ( NoLosses , 1 ) else
19325: LD_STRING NoLosses
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 101
19335: GO 19347
// AddMedal ( NoLosses , 0 ) ;
19337: LD_STRING NoLosses
19339: PPUSH
19340: LD_INT 0
19342: PPUSH
19343: CALL_OW 101
// GiveMedals ( Main ) ;
19347: LD_STRING Main
19349: PPUSH
19350: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19354: LD_INT 22
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 21
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 69
19382: PPUSH
19383: CALL_OW 43
// end ;
19387: LD_VAR 0 1
19391: RET
// function SavePlayerCharacters ; var othersYour ; begin
19392: LD_INT 0
19394: PPUSH
19395: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19396: LD_EXP 62
19400: PPUSH
19401: LD_STRING Burlak
19403: PPUSH
19404: LD_INT 3
19406: PPUSH
19407: CALL 4357 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19411: LD_EXP 63
19415: PPUSH
19416: LD_STRING Gnyevko
19418: PPUSH
19419: LD_INT 3
19421: PPUSH
19422: CALL 4357 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19426: LD_EXP 70
19430: PPUSH
19431: LD_STRING Kovalyuk
19433: PPUSH
19434: LD_INT 3
19436: PPUSH
19437: CALL 4357 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19441: LD_EXP 64
19445: PPUSH
19446: LD_STRING Belkov
19448: PPUSH
19449: LD_INT 3
19451: PPUSH
19452: CALL 4357 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19456: LD_EXP 68
19460: PPUSH
19461: LD_STRING Belkov2
19463: PPUSH
19464: LD_INT 3
19466: PPUSH
19467: CALL 4357 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19471: LD_EXP 65
19475: PPUSH
19476: LD_STRING Kirilenkova
19478: PPUSH
19479: LD_INT 3
19481: PPUSH
19482: CALL 4357 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19486: LD_ADDR_VAR 0 2
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 21
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 69
19519: PUSH
19520: LD_EXP 62
19524: PUSH
19525: LD_EXP 63
19529: PUSH
19530: LD_EXP 64
19534: PUSH
19535: LD_EXP 68
19539: PUSH
19540: LD_EXP 70
19544: PUSH
19545: LD_EXP 65
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: DIFF
19558: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19559: LD_VAR 0 2
19563: PPUSH
19564: LD_STRING other_survivors
19566: PPUSH
19567: LD_INT 3
19569: PPUSH
19570: CALL 4413 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19574: LD_EXP 77
19578: PPUSH
19579: LD_STRING other_beria
19581: PPUSH
19582: LD_INT 6
19584: PPUSH
19585: CALL 4413 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19589: LD_EXP 69
19593: PPUSH
19594: LD_STRING other_kirov
19596: PPUSH
19597: LD_INT 6
19599: PPUSH
19600: CALL 4413 0 3
// end ;
19604: LD_VAR 0 1
19608: RET
// function SaveGlobalVariables ; var vehicles ; begin
19609: LD_INT 0
19611: PPUSH
19612: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 22
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 50
19640: PUSH
19641: EMPTY
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: ST_TO_ADDR
// if vehicles then
19654: LD_VAR 0 2
19658: IFFALSE 19672
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_STRING 02_Vehicles_1
19667: PPUSH
19668: CALL 5444 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19672: LD_INT 8
19674: PPUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: PPUSH
19688: CALL_OW 70
19692: PPUSH
19693: LD_STRING 02_BeriaBase_2
19695: PPUSH
19696: CALL 5587 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19700: LD_INT 9
19702: PPUSH
19703: LD_INT 22
19705: PUSH
19706: LD_INT 6
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PPUSH
19727: CALL_OW 70
19731: PPUSH
19732: LD_STRING 02_KirovBase_3
19734: PPUSH
19735: CALL 5587 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19739: LD_INT 22
19741: PUSH
19742: LD_INT 3
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 50
19761: PUSH
19762: EMPTY
19763: LIST
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 95
19770: PUSH
19771: LD_INT 8
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: PPUSH
19793: LD_STRING 02_OtherBuildings_4
19795: PPUSH
19796: CALL 5587 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19800: LD_INT 22
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 21
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 50
19822: PUSH
19823: EMPTY
19824: LIST
19825: PUSH
19826: LD_INT 23
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: PPUSH
19847: LD_STRING 02_AmericanBuildings_5
19849: PPUSH
19850: CALL 5587 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19854: LD_EXP 4
19858: PPUSH
19859: LD_STRING 02_MeetBelkovBrother_6
19861: PPUSH
19862: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19866: LD_INT 106
19868: PPUSH
19869: CALL_OW 274
19873: PPUSH
19874: LD_INT 1
19876: PPUSH
19877: CALL_OW 275
19881: PPUSH
19882: LD_STRING 02_BeriaResourceCrates_7
19884: PPUSH
19885: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19889: LD_INT 106
19891: PPUSH
19892: CALL_OW 274
19896: PPUSH
19897: LD_INT 2
19899: PPUSH
19900: CALL_OW 275
19904: PPUSH
19905: LD_STRING 02_BeriaResourceOil_8
19907: PPUSH
19908: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19912: LD_EXP 5
19916: PPUSH
19917: LD_STRING 02_PlatonovOpinion_9
19919: PPUSH
19920: CALL_OW 39
// end ; end_of_file
19924: LD_VAR 0 1
19928: RET
// export function BurlakIsDead ; begin
19929: LD_INT 0
19931: PPUSH
// YouLost ( Burlak ) ;
19932: LD_STRING Burlak
19934: PPUSH
19935: CALL_OW 104
// end ;
19939: LD_VAR 0 1
19943: RET
// export function AttackComrades ; begin
19944: LD_INT 0
19946: PPUSH
// YouLost ( SelfAttack ) ;
19947: LD_STRING SelfAttack
19949: PPUSH
19950: CALL_OW 104
// end ;
19954: LD_VAR 0 1
19958: RET
// export function BaseDestroyed ; begin
19959: LD_INT 0
19961: PPUSH
// YouLost ( Base ) ;
19962: LD_STRING Base
19964: PPUSH
19965: CALL_OW 104
// end ; end_of_file
19969: LD_VAR 0 1
19973: RET
// every 0 0$1 do var engs ;
19974: GO 19976
19976: DISABLE
19977: LD_INT 0
19979: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19980: LD_ADDR_VAR 0 1
19984: PUSH
19985: LD_EXP 69
19989: PPUSH
19990: LD_INT 25
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 72
20004: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 122
// wait ( 0 0$1 ) ;
20014: LD_INT 35
20016: PPUSH
20017: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
20021: LD_VAR 0 1
20025: PPUSH
20026: LD_INT 31
20028: PPUSH
20029: LD_INT 146
20031: PPUSH
20032: LD_INT 107
20034: PPUSH
20035: LD_INT 1
20037: PPUSH
20038: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_INT 31
20049: PPUSH
20050: LD_INT 176
20052: PPUSH
20053: LD_INT 123
20055: PPUSH
20056: LD_INT 5
20058: PPUSH
20059: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
20063: LD_VAR 0 1
20067: PPUSH
20068: LD_INT 31
20070: PPUSH
20071: LD_INT 170
20073: PPUSH
20074: LD_INT 102
20076: PPUSH
20077: LD_INT 4
20079: PPUSH
20080: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
20084: LD_VAR 0 1
20088: PPUSH
20089: LD_INT 31
20091: PPUSH
20092: LD_INT 173
20094: PPUSH
20095: LD_INT 105
20097: PPUSH
20098: LD_INT 4
20100: PPUSH
20101: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20105: LD_VAR 0 1
20109: PPUSH
20110: LD_INT 71
20112: PPUSH
20113: CALL_OW 180
// end ;
20117: PPOPN 1
20119: END
// every 0 0$1 trigger activateAMAI do
20120: LD_EXP 27
20124: IFFALSE 20148
20126: GO 20128
20128: DISABLE
// begin enable ;
20129: ENABLE
// RepairDamageLeftBunkers ;
20130: CALL 20149 0 0
// if Difficulty = 3 then
20134: LD_OWVAR 67
20138: PUSH
20139: LD_INT 3
20141: EQUAL
20142: IFFALSE 20148
// RepairDamageRightBunkers ;
20144: CALL 20357 0 0
// end ;
20148: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20149: LD_INT 0
20151: PPUSH
20152: PPUSH
20153: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20154: LD_EXP 86
20158: NOT
20159: PUSH
20160: LD_INT 17
20162: PPUSH
20163: LD_INT 22
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 21
20175: PUSH
20176: LD_INT 3
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 30
20185: PUSH
20186: LD_INT 31
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 3
20195: PUSH
20196: LD_INT 24
20198: PUSH
20199: LD_INT 1000
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PPUSH
20216: CALL_OW 70
20220: PUSH
20221: LD_INT 0
20223: EQUAL
20224: OR
20225: IFFALSE 20229
// exit ;
20227: GO 20352
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20229: LD_EXP 86
20233: PPUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 60
20239: PUSH
20240: EMPTY
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 72
20251: PPUSH
20252: CALL_OW 122
// for bunker in leftBunkers do
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_EXP 82
20265: PUSH
20266: FOR_IN
20267: IFFALSE 20318
// if GetLives ( bunker ) < 1000 then
20269: LD_VAR 0 3
20273: PPUSH
20274: CALL_OW 256
20278: PUSH
20279: LD_INT 1000
20281: LESS
20282: IFFALSE 20316
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20284: LD_EXP 86
20288: PPUSH
20289: LD_INT 3
20291: PUSH
20292: LD_INT 60
20294: PUSH
20295: EMPTY
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 72
20306: PPUSH
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 190
20316: GO 20266
20318: POP
20319: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20320: LD_EXP 86
20324: PPUSH
20325: LD_INT 3
20327: PUSH
20328: LD_INT 60
20330: PUSH
20331: EMPTY
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 72
20342: PPUSH
20343: LD_EXP 84
20347: PPUSH
20348: CALL_OW 180
// end ;
20352: LD_VAR 0 1
20356: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
20361: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20362: LD_EXP 87
20366: NOT
20367: PUSH
20368: LD_INT 16
20370: PPUSH
20371: LD_INT 22
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 3
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 30
20393: PUSH
20394: LD_INT 31
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 3
20403: PUSH
20404: LD_INT 24
20406: PUSH
20407: LD_INT 1000
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: PPUSH
20424: CALL_OW 70
20428: PUSH
20429: LD_INT 0
20431: EQUAL
20432: OR
20433: IFFALSE 20437
// exit ;
20435: GO 20560
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20437: LD_EXP 87
20441: PPUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 60
20447: PUSH
20448: EMPTY
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 72
20459: PPUSH
20460: CALL_OW 122
// for bunker in rightBunkers do
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: LD_EXP 83
20473: PUSH
20474: FOR_IN
20475: IFFALSE 20526
// if GetLives ( bunker ) < 1000 then
20477: LD_VAR 0 3
20481: PPUSH
20482: CALL_OW 256
20486: PUSH
20487: LD_INT 1000
20489: LESS
20490: IFFALSE 20524
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20492: LD_EXP 87
20496: PPUSH
20497: LD_INT 3
20499: PUSH
20500: LD_INT 60
20502: PUSH
20503: EMPTY
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 72
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: CALL_OW 190
20524: GO 20474
20526: POP
20527: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20528: LD_EXP 87
20532: PPUSH
20533: LD_INT 3
20535: PUSH
20536: LD_INT 60
20538: PUSH
20539: EMPTY
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 72
20550: PPUSH
20551: LD_EXP 85
20555: PPUSH
20556: CALL_OW 180
// end ;
20560: LD_VAR 0 1
20564: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20565: LD_EXP 28
20569: PUSH
20570: LD_EXP 73
20574: AND
20575: IFFALSE 20712
20577: GO 20579
20579: DISABLE
20580: LD_INT 0
20582: PPUSH
20583: PPUSH
20584: PPUSH
// begin enable ;
20585: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_EXP 73
20595: PPUSH
20596: LD_INT 25
20598: PUSH
20599: LD_INT 4
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PPUSH
20606: CALL_OW 72
20610: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: LD_EXP 73
20620: PPUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 24
20626: PUSH
20627: LD_INT 650
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PPUSH
20638: CALL_OW 72
20642: ST_TO_ADDR
// if not damaged and med then
20643: LD_VAR 0 3
20647: NOT
20648: PUSH
20649: LD_VAR 0 2
20653: AND
20654: IFFALSE 20673
// ComMoveXY ( med , 83 , 17 ) else
20656: LD_VAR 0 2
20660: PPUSH
20661: LD_INT 83
20663: PPUSH
20664: LD_INT 17
20666: PPUSH
20667: CALL_OW 111
20671: GO 20712
// if med then
20673: LD_VAR 0 2
20677: IFFALSE 20712
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_INT 83
20686: PPUSH
20687: LD_INT 17
20689: PPUSH
20690: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 1
20706: ARRAY
20707: PPUSH
20708: CALL_OW 128
// end ; end ; end_of_file
20712: PPOPN 3
20714: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20715: LD_INT 22
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 23
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 69
20754: PUSH
20755: LD_INT 2
20757: EQUAL
20758: IFFALSE 20770
20760: GO 20762
20762: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20763: LD_STRING ACH_DEPOT
20765: PPUSH
20766: CALL_OW 543
20770: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20771: LD_EXP 44
20775: PUSH
20776: LD_INT 5
20778: EQUAL
20779: IFFALSE 20791
20781: GO 20783
20783: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20784: LD_STRING ACH_WORKSHOP
20786: PPUSH
20787: CALL_OW 543
20791: END
// every 1 trigger captureBelkovVehicle do
20792: LD_EXP 38
20796: IFFALSE 20808
20798: GO 20800
20800: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20801: LD_STRING ACH_RETAKE
20803: PPUSH
20804: CALL_OW 543
20808: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 100
20816: EQUAL
20817: IFFALSE 21766
// begin if not StreamModeActive then
20819: LD_EXP 90
20823: NOT
20824: IFFALSE 20834
// StreamModeActive := true ;
20826: LD_ADDR_EXP 90
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 0 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 0
20841: EQUAL
20842: IFFALSE 20848
// InitStreamMode ;
20844: CALL 21924 0 0
// if p3 = 1 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 1
20855: EQUAL
20856: IFFALSE 20866
// sRocket := true ;
20858: LD_ADDR_EXP 95
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 2 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 2
20873: EQUAL
20874: IFFALSE 20884
// sSpeed := true ;
20876: LD_ADDR_EXP 94
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 3 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 3
20891: EQUAL
20892: IFFALSE 20902
// sEngine := true ;
20894: LD_ADDR_EXP 96
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 4 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 4
20909: EQUAL
20910: IFFALSE 20920
// sSpec := true ;
20912: LD_ADDR_EXP 93
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 5 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 5
20927: EQUAL
20928: IFFALSE 20938
// sLevel := true ;
20930: LD_ADDR_EXP 97
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 6 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 6
20945: EQUAL
20946: IFFALSE 20956
// sArmoury := true ;
20948: LD_ADDR_EXP 98
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 7 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 7
20963: EQUAL
20964: IFFALSE 20974
// sRadar := true ;
20966: LD_ADDR_EXP 99
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 8 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 8
20981: EQUAL
20982: IFFALSE 20992
// sBunker := true ;
20984: LD_ADDR_EXP 100
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 9 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 9
20999: EQUAL
21000: IFFALSE 21010
// sHack := true ;
21002: LD_ADDR_EXP 101
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 10 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 10
21017: EQUAL
21018: IFFALSE 21028
// sFire := true ;
21020: LD_ADDR_EXP 102
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 11 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 11
21035: EQUAL
21036: IFFALSE 21046
// sRefresh := true ;
21038: LD_ADDR_EXP 103
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 12 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 12
21053: EQUAL
21054: IFFALSE 21064
// sExp := true ;
21056: LD_ADDR_EXP 104
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 13 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 13
21071: EQUAL
21072: IFFALSE 21082
// sDepot := true ;
21074: LD_ADDR_EXP 105
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 14 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 14
21089: EQUAL
21090: IFFALSE 21100
// sFlag := true ;
21092: LD_ADDR_EXP 106
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 15 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 15
21107: EQUAL
21108: IFFALSE 21118
// sKamikadze := true ;
21110: LD_ADDR_EXP 114
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 16 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 16
21125: EQUAL
21126: IFFALSE 21136
// sTroll := true ;
21128: LD_ADDR_EXP 115
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 17 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 17
21143: EQUAL
21144: IFFALSE 21154
// sSlow := true ;
21146: LD_ADDR_EXP 116
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 18 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 18
21161: EQUAL
21162: IFFALSE 21172
// sLack := true ;
21164: LD_ADDR_EXP 117
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 19 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 19
21179: EQUAL
21180: IFFALSE 21190
// sTank := true ;
21182: LD_ADDR_EXP 119
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 20 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 20
21197: EQUAL
21198: IFFALSE 21208
// sRemote := true ;
21200: LD_ADDR_EXP 120
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 21 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 21
21215: EQUAL
21216: IFFALSE 21226
// sPowell := true ;
21218: LD_ADDR_EXP 121
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 22 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 22
21233: EQUAL
21234: IFFALSE 21244
// sTeleport := true ;
21236: LD_ADDR_EXP 124
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 23 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 23
21251: EQUAL
21252: IFFALSE 21262
// sOilTower := true ;
21254: LD_ADDR_EXP 126
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 24 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 24
21269: EQUAL
21270: IFFALSE 21280
// sShovel := true ;
21272: LD_ADDR_EXP 127
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 25 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 25
21287: EQUAL
21288: IFFALSE 21298
// sSheik := true ;
21290: LD_ADDR_EXP 128
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 26 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 26
21305: EQUAL
21306: IFFALSE 21316
// sEarthquake := true ;
21308: LD_ADDR_EXP 130
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 27 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 27
21323: EQUAL
21324: IFFALSE 21334
// sAI := true ;
21326: LD_ADDR_EXP 131
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 28 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 28
21341: EQUAL
21342: IFFALSE 21352
// sCargo := true ;
21344: LD_ADDR_EXP 134
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// if p3 = 29 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 29
21359: EQUAL
21360: IFFALSE 21370
// sDLaser := true ;
21362: LD_ADDR_EXP 135
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// if p3 = 30 then
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 30
21377: EQUAL
21378: IFFALSE 21388
// sExchange := true ;
21380: LD_ADDR_EXP 136
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// if p3 = 31 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 31
21395: EQUAL
21396: IFFALSE 21406
// sFac := true ;
21398: LD_ADDR_EXP 137
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if p3 = 32 then
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 32
21413: EQUAL
21414: IFFALSE 21424
// sPower := true ;
21416: LD_ADDR_EXP 138
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if p3 = 33 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 33
21431: EQUAL
21432: IFFALSE 21442
// sRandom := true ;
21434: LD_ADDR_EXP 139
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// if p3 = 34 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 34
21449: EQUAL
21450: IFFALSE 21460
// sShield := true ;
21452: LD_ADDR_EXP 140
21456: PUSH
21457: LD_INT 1
21459: ST_TO_ADDR
// if p3 = 35 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 35
21467: EQUAL
21468: IFFALSE 21478
// sTime := true ;
21470: LD_ADDR_EXP 141
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// if p3 = 36 then
21478: LD_VAR 0 3
21482: PUSH
21483: LD_INT 36
21485: EQUAL
21486: IFFALSE 21496
// sTools := true ;
21488: LD_ADDR_EXP 142
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// if p3 = 101 then
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 101
21503: EQUAL
21504: IFFALSE 21514
// sSold := true ;
21506: LD_ADDR_EXP 107
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// if p3 = 102 then
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 102
21521: EQUAL
21522: IFFALSE 21532
// sDiff := true ;
21524: LD_ADDR_EXP 108
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if p3 = 103 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 103
21539: EQUAL
21540: IFFALSE 21550
// sFog := true ;
21542: LD_ADDR_EXP 111
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// if p3 = 104 then
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 104
21557: EQUAL
21558: IFFALSE 21568
// sReset := true ;
21560: LD_ADDR_EXP 112
21564: PUSH
21565: LD_INT 1
21567: ST_TO_ADDR
// if p3 = 105 then
21568: LD_VAR 0 3
21572: PUSH
21573: LD_INT 105
21575: EQUAL
21576: IFFALSE 21586
// sSun := true ;
21578: LD_ADDR_EXP 113
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// if p3 = 106 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_INT 106
21593: EQUAL
21594: IFFALSE 21604
// sTiger := true ;
21596: LD_ADDR_EXP 109
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// if p3 = 107 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_INT 107
21611: EQUAL
21612: IFFALSE 21622
// sBomb := true ;
21614: LD_ADDR_EXP 110
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
// if p3 = 108 then
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 108
21629: EQUAL
21630: IFFALSE 21640
// sWound := true ;
21632: LD_ADDR_EXP 118
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if p3 = 109 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 109
21647: EQUAL
21648: IFFALSE 21658
// sBetray := true ;
21650: LD_ADDR_EXP 122
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
// if p3 = 110 then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 110
21665: EQUAL
21666: IFFALSE 21676
// sContamin := true ;
21668: LD_ADDR_EXP 123
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// if p3 = 111 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 111
21683: EQUAL
21684: IFFALSE 21694
// sOil := true ;
21686: LD_ADDR_EXP 125
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// if p3 = 112 then
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 112
21701: EQUAL
21702: IFFALSE 21712
// sStu := true ;
21704: LD_ADDR_EXP 129
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// if p3 = 113 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 113
21719: EQUAL
21720: IFFALSE 21730
// sBazooka := true ;
21722: LD_ADDR_EXP 132
21726: PUSH
21727: LD_INT 1
21729: ST_TO_ADDR
// if p3 = 114 then
21730: LD_VAR 0 3
21734: PUSH
21735: LD_INT 114
21737: EQUAL
21738: IFFALSE 21748
// sMortar := true ;
21740: LD_ADDR_EXP 133
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// if p3 = 115 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_INT 115
21755: EQUAL
21756: IFFALSE 21766
// sRanger := true ;
21758: LD_ADDR_EXP 143
21762: PUSH
21763: LD_INT 1
21765: ST_TO_ADDR
// end ; if p2 = 101 then
21766: LD_VAR 0 2
21770: PUSH
21771: LD_INT 101
21773: EQUAL
21774: IFFALSE 21902
// begin case p3 of 1 :
21776: LD_VAR 0 3
21780: PUSH
21781: LD_INT 1
21783: DOUBLE
21784: EQUAL
21785: IFTRUE 21789
21787: GO 21796
21789: POP
// hHackUnlimitedResources ; 2 :
21790: CALL 32937 0 0
21794: GO 21902
21796: LD_INT 2
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 21811
21804: POP
// hHackSetLevel10 ; 3 :
21805: CALL 33070 0 0
21809: GO 21902
21811: LD_INT 3
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21826
21819: POP
// hHackSetLevel10YourUnits ; 4 :
21820: CALL 33155 0 0
21824: GO 21902
21826: LD_INT 4
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21841
21834: POP
// hHackInvincible ; 5 :
21835: CALL 33603 0 0
21839: GO 21902
21841: LD_INT 5
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21856
21849: POP
// hHackInvisible ; 6 :
21850: CALL 33714 0 0
21854: GO 21902
21856: LD_INT 6
21858: DOUBLE
21859: EQUAL
21860: IFTRUE 21864
21862: GO 21871
21864: POP
// hHackChangeYourSide ; 7 :
21865: CALL 33771 0 0
21869: GO 21902
21871: LD_INT 7
21873: DOUBLE
21874: EQUAL
21875: IFTRUE 21879
21877: GO 21886
21879: POP
// hHackChangeUnitSide ; 8 :
21880: CALL 33813 0 0
21884: GO 21902
21886: LD_INT 8
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 21901
21894: POP
// hHackFog ; end ;
21895: CALL 33914 0 0
21899: GO 21902
21901: POP
// end ; end ;
21902: PPOPN 6
21904: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21905: GO 21907
21907: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21908: LD_STRING initStreamRollete();
21910: PPUSH
21911: CALL_OW 559
// InitStreamMode ;
21915: CALL 21924 0 0
// DefineStreamItems ( ) ;
21919: CALL 22364 0 0
// end ;
21923: END
// function InitStreamMode ; begin
21924: LD_INT 0
21926: PPUSH
// streamModeActive := false ;
21927: LD_ADDR_EXP 90
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// normalCounter := 36 ;
21935: LD_ADDR_EXP 91
21939: PUSH
21940: LD_INT 36
21942: ST_TO_ADDR
// hardcoreCounter := 16 ;
21943: LD_ADDR_EXP 92
21947: PUSH
21948: LD_INT 16
21950: ST_TO_ADDR
// sRocket := false ;
21951: LD_ADDR_EXP 95
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sSpeed := false ;
21959: LD_ADDR_EXP 94
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sEngine := false ;
21967: LD_ADDR_EXP 96
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sSpec := false ;
21975: LD_ADDR_EXP 93
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sLevel := false ;
21983: LD_ADDR_EXP 97
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sArmoury := false ;
21991: LD_ADDR_EXP 98
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// sRadar := false ;
21999: LD_ADDR_EXP 99
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// sBunker := false ;
22007: LD_ADDR_EXP 100
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// sHack := false ;
22015: LD_ADDR_EXP 101
22019: PUSH
22020: LD_INT 0
22022: ST_TO_ADDR
// sFire := false ;
22023: LD_ADDR_EXP 102
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// sRefresh := false ;
22031: LD_ADDR_EXP 103
22035: PUSH
22036: LD_INT 0
22038: ST_TO_ADDR
// sExp := false ;
22039: LD_ADDR_EXP 104
22043: PUSH
22044: LD_INT 0
22046: ST_TO_ADDR
// sDepot := false ;
22047: LD_ADDR_EXP 105
22051: PUSH
22052: LD_INT 0
22054: ST_TO_ADDR
// sFlag := false ;
22055: LD_ADDR_EXP 106
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
// sKamikadze := false ;
22063: LD_ADDR_EXP 114
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// sTroll := false ;
22071: LD_ADDR_EXP 115
22075: PUSH
22076: LD_INT 0
22078: ST_TO_ADDR
// sSlow := false ;
22079: LD_ADDR_EXP 116
22083: PUSH
22084: LD_INT 0
22086: ST_TO_ADDR
// sLack := false ;
22087: LD_ADDR_EXP 117
22091: PUSH
22092: LD_INT 0
22094: ST_TO_ADDR
// sTank := false ;
22095: LD_ADDR_EXP 119
22099: PUSH
22100: LD_INT 0
22102: ST_TO_ADDR
// sRemote := false ;
22103: LD_ADDR_EXP 120
22107: PUSH
22108: LD_INT 0
22110: ST_TO_ADDR
// sPowell := false ;
22111: LD_ADDR_EXP 121
22115: PUSH
22116: LD_INT 0
22118: ST_TO_ADDR
// sTeleport := false ;
22119: LD_ADDR_EXP 124
22123: PUSH
22124: LD_INT 0
22126: ST_TO_ADDR
// sOilTower := false ;
22127: LD_ADDR_EXP 126
22131: PUSH
22132: LD_INT 0
22134: ST_TO_ADDR
// sShovel := false ;
22135: LD_ADDR_EXP 127
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// sSheik := false ;
22143: LD_ADDR_EXP 128
22147: PUSH
22148: LD_INT 0
22150: ST_TO_ADDR
// sEarthquake := false ;
22151: LD_ADDR_EXP 130
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
// sAI := false ;
22159: LD_ADDR_EXP 131
22163: PUSH
22164: LD_INT 0
22166: ST_TO_ADDR
// sCargo := false ;
22167: LD_ADDR_EXP 134
22171: PUSH
22172: LD_INT 0
22174: ST_TO_ADDR
// sDLaser := false ;
22175: LD_ADDR_EXP 135
22179: PUSH
22180: LD_INT 0
22182: ST_TO_ADDR
// sExchange := false ;
22183: LD_ADDR_EXP 136
22187: PUSH
22188: LD_INT 0
22190: ST_TO_ADDR
// sFac := false ;
22191: LD_ADDR_EXP 137
22195: PUSH
22196: LD_INT 0
22198: ST_TO_ADDR
// sPower := false ;
22199: LD_ADDR_EXP 138
22203: PUSH
22204: LD_INT 0
22206: ST_TO_ADDR
// sRandom := false ;
22207: LD_ADDR_EXP 139
22211: PUSH
22212: LD_INT 0
22214: ST_TO_ADDR
// sShield := false ;
22215: LD_ADDR_EXP 140
22219: PUSH
22220: LD_INT 0
22222: ST_TO_ADDR
// sTime := false ;
22223: LD_ADDR_EXP 141
22227: PUSH
22228: LD_INT 0
22230: ST_TO_ADDR
// sTools := false ;
22231: LD_ADDR_EXP 142
22235: PUSH
22236: LD_INT 0
22238: ST_TO_ADDR
// sSold := false ;
22239: LD_ADDR_EXP 107
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// sDiff := false ;
22247: LD_ADDR_EXP 108
22251: PUSH
22252: LD_INT 0
22254: ST_TO_ADDR
// sFog := false ;
22255: LD_ADDR_EXP 111
22259: PUSH
22260: LD_INT 0
22262: ST_TO_ADDR
// sReset := false ;
22263: LD_ADDR_EXP 112
22267: PUSH
22268: LD_INT 0
22270: ST_TO_ADDR
// sSun := false ;
22271: LD_ADDR_EXP 113
22275: PUSH
22276: LD_INT 0
22278: ST_TO_ADDR
// sTiger := false ;
22279: LD_ADDR_EXP 109
22283: PUSH
22284: LD_INT 0
22286: ST_TO_ADDR
// sBomb := false ;
22287: LD_ADDR_EXP 110
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// sWound := false ;
22295: LD_ADDR_EXP 118
22299: PUSH
22300: LD_INT 0
22302: ST_TO_ADDR
// sBetray := false ;
22303: LD_ADDR_EXP 122
22307: PUSH
22308: LD_INT 0
22310: ST_TO_ADDR
// sContamin := false ;
22311: LD_ADDR_EXP 123
22315: PUSH
22316: LD_INT 0
22318: ST_TO_ADDR
// sOil := false ;
22319: LD_ADDR_EXP 125
22323: PUSH
22324: LD_INT 0
22326: ST_TO_ADDR
// sStu := false ;
22327: LD_ADDR_EXP 129
22331: PUSH
22332: LD_INT 0
22334: ST_TO_ADDR
// sBazooka := false ;
22335: LD_ADDR_EXP 132
22339: PUSH
22340: LD_INT 0
22342: ST_TO_ADDR
// sMortar := false ;
22343: LD_ADDR_EXP 133
22347: PUSH
22348: LD_INT 0
22350: ST_TO_ADDR
// sRanger := false ;
22351: LD_ADDR_EXP 143
22355: PUSH
22356: LD_INT 0
22358: ST_TO_ADDR
// end ;
22359: LD_VAR 0 1
22363: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
22369: PPUSH
22370: PPUSH
// result := [ ] ;
22371: LD_ADDR_VAR 0 1
22375: PUSH
22376: EMPTY
22377: ST_TO_ADDR
// if campaign_id = 1 then
22378: LD_OWVAR 69
22382: PUSH
22383: LD_INT 1
22385: EQUAL
22386: IFFALSE 25324
// begin case mission_number of 1 :
22388: LD_OWVAR 70
22392: PUSH
22393: LD_INT 1
22395: DOUBLE
22396: EQUAL
22397: IFTRUE 22401
22399: GO 22465
22401: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
22402: LD_ADDR_VAR 0 1
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 4
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 23
22430: PUSH
22431: LD_INT 26
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 101
22447: PUSH
22448: LD_INT 102
22450: PUSH
22451: LD_INT 106
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: ST_TO_ADDR
22463: GO 25322
22465: LD_INT 2
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22545
22473: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
22474: LD_ADDR_VAR 0 1
22478: PUSH
22479: LD_INT 2
22481: PUSH
22482: LD_INT 4
22484: PUSH
22485: LD_INT 11
22487: PUSH
22488: LD_INT 12
22490: PUSH
22491: LD_INT 15
22493: PUSH
22494: LD_INT 16
22496: PUSH
22497: LD_INT 22
22499: PUSH
22500: LD_INT 23
22502: PUSH
22503: LD_INT 26
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 101
22519: PUSH
22520: LD_INT 102
22522: PUSH
22523: LD_INT 105
22525: PUSH
22526: LD_INT 106
22528: PUSH
22529: LD_INT 108
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 25322
22545: LD_INT 3
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22629
22553: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 5
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: LD_INT 12
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 26
22585: PUSH
22586: LD_INT 36
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 101
22603: PUSH
22604: LD_INT 102
22606: PUSH
22607: LD_INT 105
22609: PUSH
22610: LD_INT 106
22612: PUSH
22613: LD_INT 108
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: ST_TO_ADDR
22627: GO 25322
22629: LD_INT 4
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22721
22637: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22638: LD_ADDR_VAR 0 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 5
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: LD_INT 11
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: LD_INT 15
22663: PUSH
22664: LD_INT 16
22666: PUSH
22667: LD_INT 22
22669: PUSH
22670: LD_INT 23
22672: PUSH
22673: LD_INT 26
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 101
22695: PUSH
22696: LD_INT 102
22698: PUSH
22699: LD_INT 105
22701: PUSH
22702: LD_INT 106
22704: PUSH
22705: LD_INT 108
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: ST_TO_ADDR
22719: GO 25322
22721: LD_INT 5
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22829
22729: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22730: LD_ADDR_VAR 0 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 4
22740: PUSH
22741: LD_INT 5
22743: PUSH
22744: LD_INT 6
22746: PUSH
22747: LD_INT 8
22749: PUSH
22750: LD_INT 11
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 15
22758: PUSH
22759: LD_INT 16
22761: PUSH
22762: LD_INT 22
22764: PUSH
22765: LD_INT 23
22767: PUSH
22768: LD_INT 25
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: LD_INT 36
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 101
22795: PUSH
22796: LD_INT 102
22798: PUSH
22799: LD_INT 105
22801: PUSH
22802: LD_INT 106
22804: PUSH
22805: LD_INT 108
22807: PUSH
22808: LD_INT 109
22810: PUSH
22811: LD_INT 112
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: ST_TO_ADDR
22827: GO 25322
22829: LD_INT 6
22831: DOUBLE
22832: EQUAL
22833: IFTRUE 22837
22835: GO 22957
22837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22838: LD_ADDR_VAR 0 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 4
22848: PUSH
22849: LD_INT 5
22851: PUSH
22852: LD_INT 6
22854: PUSH
22855: LD_INT 8
22857: PUSH
22858: LD_INT 11
22860: PUSH
22861: LD_INT 12
22863: PUSH
22864: LD_INT 15
22866: PUSH
22867: LD_INT 16
22869: PUSH
22870: LD_INT 20
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 26
22887: PUSH
22888: LD_INT 30
22890: PUSH
22891: LD_INT 31
22893: PUSH
22894: LD_INT 32
22896: PUSH
22897: LD_INT 36
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 105
22929: PUSH
22930: LD_INT 106
22932: PUSH
22933: LD_INT 108
22935: PUSH
22936: LD_INT 109
22938: PUSH
22939: LD_INT 112
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 25322
22957: LD_INT 7
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 23065
22965: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 4
22976: PUSH
22977: LD_INT 5
22979: PUSH
22980: LD_INT 7
22982: PUSH
22983: LD_INT 11
22985: PUSH
22986: LD_INT 12
22988: PUSH
22989: LD_INT 15
22991: PUSH
22992: LD_INT 16
22994: PUSH
22995: LD_INT 20
22997: PUSH
22998: LD_INT 21
23000: PUSH
23001: LD_INT 22
23003: PUSH
23004: LD_INT 23
23006: PUSH
23007: LD_INT 25
23009: PUSH
23010: LD_INT 26
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 101
23031: PUSH
23032: LD_INT 102
23034: PUSH
23035: LD_INT 103
23037: PUSH
23038: LD_INT 105
23040: PUSH
23041: LD_INT 106
23043: PUSH
23044: LD_INT 108
23046: PUSH
23047: LD_INT 112
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: ST_TO_ADDR
23063: GO 25322
23065: LD_INT 8
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23073
23071: GO 23201
23073: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23074: LD_ADDR_VAR 0 1
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 4
23084: PUSH
23085: LD_INT 5
23087: PUSH
23088: LD_INT 6
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 8
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 15
23105: PUSH
23106: LD_INT 16
23108: PUSH
23109: LD_INT 20
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_INT 23
23120: PUSH
23121: LD_INT 25
23123: PUSH
23124: LD_INT 26
23126: PUSH
23127: LD_INT 30
23129: PUSH
23130: LD_INT 31
23132: PUSH
23133: LD_INT 32
23135: PUSH
23136: LD_INT 36
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 101
23163: PUSH
23164: LD_INT 102
23166: PUSH
23167: LD_INT 103
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 108
23178: PUSH
23179: LD_INT 109
23181: PUSH
23182: LD_INT 112
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: ST_TO_ADDR
23199: GO 25322
23201: LD_INT 9
23203: DOUBLE
23204: EQUAL
23205: IFTRUE 23209
23207: GO 23345
23209: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 4
23220: PUSH
23221: LD_INT 5
23223: PUSH
23224: LD_INT 6
23226: PUSH
23227: LD_INT 7
23229: PUSH
23230: LD_INT 8
23232: PUSH
23233: LD_INT 11
23235: PUSH
23236: LD_INT 12
23238: PUSH
23239: LD_INT 15
23241: PUSH
23242: LD_INT 16
23244: PUSH
23245: LD_INT 20
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 23
23256: PUSH
23257: LD_INT 25
23259: PUSH
23260: LD_INT 26
23262: PUSH
23263: LD_INT 28
23265: PUSH
23266: LD_INT 30
23268: PUSH
23269: LD_INT 31
23271: PUSH
23272: LD_INT 32
23274: PUSH
23275: LD_INT 36
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 101
23303: PUSH
23304: LD_INT 102
23306: PUSH
23307: LD_INT 103
23309: PUSH
23310: LD_INT 105
23312: PUSH
23313: LD_INT 106
23315: PUSH
23316: LD_INT 108
23318: PUSH
23319: LD_INT 109
23321: PUSH
23322: LD_INT 112
23324: PUSH
23325: LD_INT 114
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
23343: GO 25322
23345: LD_INT 10
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23537
23353: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
23354: LD_ADDR_VAR 0 1
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: LD_INT 4
23364: PUSH
23365: LD_INT 5
23367: PUSH
23368: LD_INT 6
23370: PUSH
23371: LD_INT 7
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 9
23379: PUSH
23380: LD_INT 10
23382: PUSH
23383: LD_INT 11
23385: PUSH
23386: LD_INT 12
23388: PUSH
23389: LD_INT 13
23391: PUSH
23392: LD_INT 14
23394: PUSH
23395: LD_INT 15
23397: PUSH
23398: LD_INT 16
23400: PUSH
23401: LD_INT 17
23403: PUSH
23404: LD_INT 18
23406: PUSH
23407: LD_INT 19
23409: PUSH
23410: LD_INT 20
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: LD_INT 24
23424: PUSH
23425: LD_INT 25
23427: PUSH
23428: LD_INT 26
23430: PUSH
23431: LD_INT 28
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 36
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 114
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: ST_TO_ADDR
23535: GO 25322
23537: LD_INT 11
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23737
23545: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23546: LD_ADDR_VAR 0 1
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: LD_INT 6
23565: PUSH
23566: LD_INT 7
23568: PUSH
23569: LD_INT 8
23571: PUSH
23572: LD_INT 9
23574: PUSH
23575: LD_INT 10
23577: PUSH
23578: LD_INT 11
23580: PUSH
23581: LD_INT 12
23583: PUSH
23584: LD_INT 13
23586: PUSH
23587: LD_INT 14
23589: PUSH
23590: LD_INT 15
23592: PUSH
23593: LD_INT 16
23595: PUSH
23596: LD_INT 17
23598: PUSH
23599: LD_INT 18
23601: PUSH
23602: LD_INT 19
23604: PUSH
23605: LD_INT 20
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_INT 23
23616: PUSH
23617: LD_INT 24
23619: PUSH
23620: LD_INT 25
23622: PUSH
23623: LD_INT 26
23625: PUSH
23626: LD_INT 28
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 31
23634: PUSH
23635: LD_INT 32
23637: PUSH
23638: LD_INT 34
23640: PUSH
23641: LD_INT 36
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 101
23679: PUSH
23680: LD_INT 102
23682: PUSH
23683: LD_INT 103
23685: PUSH
23686: LD_INT 104
23688: PUSH
23689: LD_INT 105
23691: PUSH
23692: LD_INT 106
23694: PUSH
23695: LD_INT 107
23697: PUSH
23698: LD_INT 108
23700: PUSH
23701: LD_INT 109
23703: PUSH
23704: LD_INT 110
23706: PUSH
23707: LD_INT 111
23709: PUSH
23710: LD_INT 112
23712: PUSH
23713: LD_INT 114
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: ST_TO_ADDR
23735: GO 25322
23737: LD_INT 12
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23953
23745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23746: LD_ADDR_VAR 0 1
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: LD_INT 6
23768: PUSH
23769: LD_INT 7
23771: PUSH
23772: LD_INT 8
23774: PUSH
23775: LD_INT 9
23777: PUSH
23778: LD_INT 10
23780: PUSH
23781: LD_INT 11
23783: PUSH
23784: LD_INT 12
23786: PUSH
23787: LD_INT 13
23789: PUSH
23790: LD_INT 14
23792: PUSH
23793: LD_INT 15
23795: PUSH
23796: LD_INT 16
23798: PUSH
23799: LD_INT 17
23801: PUSH
23802: LD_INT 18
23804: PUSH
23805: LD_INT 19
23807: PUSH
23808: LD_INT 20
23810: PUSH
23811: LD_INT 21
23813: PUSH
23814: LD_INT 22
23816: PUSH
23817: LD_INT 23
23819: PUSH
23820: LD_INT 24
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 26
23828: PUSH
23829: LD_INT 27
23831: PUSH
23832: LD_INT 28
23834: PUSH
23835: LD_INT 30
23837: PUSH
23838: LD_INT 31
23840: PUSH
23841: LD_INT 32
23843: PUSH
23844: LD_INT 33
23846: PUSH
23847: LD_INT 34
23849: PUSH
23850: LD_INT 36
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 101
23891: PUSH
23892: LD_INT 102
23894: PUSH
23895: LD_INT 103
23897: PUSH
23898: LD_INT 104
23900: PUSH
23901: LD_INT 105
23903: PUSH
23904: LD_INT 106
23906: PUSH
23907: LD_INT 107
23909: PUSH
23910: LD_INT 108
23912: PUSH
23913: LD_INT 109
23915: PUSH
23916: LD_INT 110
23918: PUSH
23919: LD_INT 111
23921: PUSH
23922: LD_INT 112
23924: PUSH
23925: LD_INT 113
23927: PUSH
23928: LD_INT 114
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 25322
23953: LD_INT 13
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24157
23961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: LD_INT 8
23984: PUSH
23985: LD_INT 9
23987: PUSH
23988: LD_INT 10
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: LD_INT 14
23999: PUSH
24000: LD_INT 15
24002: PUSH
24003: LD_INT 16
24005: PUSH
24006: LD_INT 17
24008: PUSH
24009: LD_INT 18
24011: PUSH
24012: LD_INT 19
24014: PUSH
24015: LD_INT 20
24017: PUSH
24018: LD_INT 21
24020: PUSH
24021: LD_INT 22
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 24
24029: PUSH
24030: LD_INT 25
24032: PUSH
24033: LD_INT 26
24035: PUSH
24036: LD_INT 27
24038: PUSH
24039: LD_INT 28
24041: PUSH
24042: LD_INT 30
24044: PUSH
24045: LD_INT 31
24047: PUSH
24048: LD_INT 32
24050: PUSH
24051: LD_INT 33
24053: PUSH
24054: LD_INT 34
24056: PUSH
24057: LD_INT 36
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 101
24095: PUSH
24096: LD_INT 102
24098: PUSH
24099: LD_INT 103
24101: PUSH
24102: LD_INT 104
24104: PUSH
24105: LD_INT 105
24107: PUSH
24108: LD_INT 106
24110: PUSH
24111: LD_INT 107
24113: PUSH
24114: LD_INT 108
24116: PUSH
24117: LD_INT 109
24119: PUSH
24120: LD_INT 110
24122: PUSH
24123: LD_INT 111
24125: PUSH
24126: LD_INT 112
24128: PUSH
24129: LD_INT 113
24131: PUSH
24132: LD_INT 114
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: ST_TO_ADDR
24155: GO 25322
24157: LD_INT 14
24159: DOUBLE
24160: EQUAL
24161: IFTRUE 24165
24163: GO 24377
24165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24166: LD_ADDR_VAR 0 1
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: LD_INT 4
24182: PUSH
24183: LD_INT 5
24185: PUSH
24186: LD_INT 6
24188: PUSH
24189: LD_INT 7
24191: PUSH
24192: LD_INT 8
24194: PUSH
24195: LD_INT 9
24197: PUSH
24198: LD_INT 10
24200: PUSH
24201: LD_INT 11
24203: PUSH
24204: LD_INT 12
24206: PUSH
24207: LD_INT 13
24209: PUSH
24210: LD_INT 14
24212: PUSH
24213: LD_INT 15
24215: PUSH
24216: LD_INT 16
24218: PUSH
24219: LD_INT 17
24221: PUSH
24222: LD_INT 18
24224: PUSH
24225: LD_INT 19
24227: PUSH
24228: LD_INT 20
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 22
24236: PUSH
24237: LD_INT 23
24239: PUSH
24240: LD_INT 24
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 26
24248: PUSH
24249: LD_INT 27
24251: PUSH
24252: LD_INT 28
24254: PUSH
24255: LD_INT 29
24257: PUSH
24258: LD_INT 30
24260: PUSH
24261: LD_INT 31
24263: PUSH
24264: LD_INT 32
24266: PUSH
24267: LD_INT 33
24269: PUSH
24270: LD_INT 34
24272: PUSH
24273: LD_INT 36
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 101
24315: PUSH
24316: LD_INT 102
24318: PUSH
24319: LD_INT 103
24321: PUSH
24322: LD_INT 104
24324: PUSH
24325: LD_INT 105
24327: PUSH
24328: LD_INT 106
24330: PUSH
24331: LD_INT 107
24333: PUSH
24334: LD_INT 108
24336: PUSH
24337: LD_INT 109
24339: PUSH
24340: LD_INT 110
24342: PUSH
24343: LD_INT 111
24345: PUSH
24346: LD_INT 112
24348: PUSH
24349: LD_INT 113
24351: PUSH
24352: LD_INT 114
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25322
24377: LD_INT 15
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24597
24385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 103
24541: PUSH
24542: LD_INT 104
24544: PUSH
24545: LD_INT 105
24547: PUSH
24548: LD_INT 106
24550: PUSH
24551: LD_INT 107
24553: PUSH
24554: LD_INT 108
24556: PUSH
24557: LD_INT 109
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 111
24565: PUSH
24566: LD_INT 112
24568: PUSH
24569: LD_INT 113
24571: PUSH
24572: LD_INT 114
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: ST_TO_ADDR
24595: GO 25322
24597: LD_INT 16
24599: DOUBLE
24600: EQUAL
24601: IFTRUE 24605
24603: GO 24729
24605: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 4
24616: PUSH
24617: LD_INT 5
24619: PUSH
24620: LD_INT 7
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 15
24631: PUSH
24632: LD_INT 16
24634: PUSH
24635: LD_INT 20
24637: PUSH
24638: LD_INT 21
24640: PUSH
24641: LD_INT 22
24643: PUSH
24644: LD_INT 23
24646: PUSH
24647: LD_INT 25
24649: PUSH
24650: LD_INT 26
24652: PUSH
24653: LD_INT 30
24655: PUSH
24656: LD_INT 31
24658: PUSH
24659: LD_INT 32
24661: PUSH
24662: LD_INT 33
24664: PUSH
24665: LD_INT 34
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 101
24691: PUSH
24692: LD_INT 102
24694: PUSH
24695: LD_INT 103
24697: PUSH
24698: LD_INT 106
24700: PUSH
24701: LD_INT 108
24703: PUSH
24704: LD_INT 112
24706: PUSH
24707: LD_INT 113
24709: PUSH
24710: LD_INT 114
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: ST_TO_ADDR
24727: GO 25322
24729: LD_INT 17
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24737
24735: GO 24949
24737: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24738: LD_ADDR_VAR 0 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: LD_INT 4
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: LD_INT 6
24760: PUSH
24761: LD_INT 7
24763: PUSH
24764: LD_INT 8
24766: PUSH
24767: LD_INT 9
24769: PUSH
24770: LD_INT 10
24772: PUSH
24773: LD_INT 11
24775: PUSH
24776: LD_INT 12
24778: PUSH
24779: LD_INT 13
24781: PUSH
24782: LD_INT 14
24784: PUSH
24785: LD_INT 15
24787: PUSH
24788: LD_INT 16
24790: PUSH
24791: LD_INT 17
24793: PUSH
24794: LD_INT 18
24796: PUSH
24797: LD_INT 19
24799: PUSH
24800: LD_INT 20
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_INT 23
24811: PUSH
24812: LD_INT 24
24814: PUSH
24815: LD_INT 25
24817: PUSH
24818: LD_INT 26
24820: PUSH
24821: LD_INT 27
24823: PUSH
24824: LD_INT 28
24826: PUSH
24827: LD_INT 29
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 31
24835: PUSH
24836: LD_INT 32
24838: PUSH
24839: LD_INT 33
24841: PUSH
24842: LD_INT 34
24844: PUSH
24845: LD_INT 36
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 101
24887: PUSH
24888: LD_INT 102
24890: PUSH
24891: LD_INT 103
24893: PUSH
24894: LD_INT 104
24896: PUSH
24897: LD_INT 105
24899: PUSH
24900: LD_INT 106
24902: PUSH
24903: LD_INT 107
24905: PUSH
24906: LD_INT 108
24908: PUSH
24909: LD_INT 109
24911: PUSH
24912: LD_INT 110
24914: PUSH
24915: LD_INT 111
24917: PUSH
24918: LD_INT 112
24920: PUSH
24921: LD_INT 113
24923: PUSH
24924: LD_INT 114
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: ST_TO_ADDR
24947: GO 25322
24949: LD_INT 18
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 25093
24957: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24958: LD_ADDR_VAR 0 1
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 5
24971: PUSH
24972: LD_INT 7
24974: PUSH
24975: LD_INT 11
24977: PUSH
24978: LD_INT 12
24980: PUSH
24981: LD_INT 15
24983: PUSH
24984: LD_INT 16
24986: PUSH
24987: LD_INT 20
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 22
24995: PUSH
24996: LD_INT 23
24998: PUSH
24999: LD_INT 25
25001: PUSH
25002: LD_INT 26
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: LD_INT 31
25010: PUSH
25011: LD_INT 32
25013: PUSH
25014: LD_INT 33
25016: PUSH
25017: LD_INT 34
25019: PUSH
25020: LD_INT 35
25022: PUSH
25023: LD_INT 36
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 101
25051: PUSH
25052: LD_INT 102
25054: PUSH
25055: LD_INT 103
25057: PUSH
25058: LD_INT 106
25060: PUSH
25061: LD_INT 108
25063: PUSH
25064: LD_INT 112
25066: PUSH
25067: LD_INT 113
25069: PUSH
25070: LD_INT 114
25072: PUSH
25073: LD_INT 115
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: ST_TO_ADDR
25091: GO 25322
25093: LD_INT 19
25095: DOUBLE
25096: EQUAL
25097: IFTRUE 25101
25099: GO 25321
25101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25102: LD_ADDR_VAR 0 1
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: LD_INT 4
25118: PUSH
25119: LD_INT 5
25121: PUSH
25122: LD_INT 6
25124: PUSH
25125: LD_INT 7
25127: PUSH
25128: LD_INT 8
25130: PUSH
25131: LD_INT 9
25133: PUSH
25134: LD_INT 10
25136: PUSH
25137: LD_INT 11
25139: PUSH
25140: LD_INT 12
25142: PUSH
25143: LD_INT 13
25145: PUSH
25146: LD_INT 14
25148: PUSH
25149: LD_INT 15
25151: PUSH
25152: LD_INT 16
25154: PUSH
25155: LD_INT 17
25157: PUSH
25158: LD_INT 18
25160: PUSH
25161: LD_INT 19
25163: PUSH
25164: LD_INT 20
25166: PUSH
25167: LD_INT 21
25169: PUSH
25170: LD_INT 22
25172: PUSH
25173: LD_INT 23
25175: PUSH
25176: LD_INT 24
25178: PUSH
25179: LD_INT 25
25181: PUSH
25182: LD_INT 26
25184: PUSH
25185: LD_INT 27
25187: PUSH
25188: LD_INT 28
25190: PUSH
25191: LD_INT 29
25193: PUSH
25194: LD_INT 30
25196: PUSH
25197: LD_INT 31
25199: PUSH
25200: LD_INT 32
25202: PUSH
25203: LD_INT 33
25205: PUSH
25206: LD_INT 34
25208: PUSH
25209: LD_INT 35
25211: PUSH
25212: LD_INT 36
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 101
25255: PUSH
25256: LD_INT 102
25258: PUSH
25259: LD_INT 103
25261: PUSH
25262: LD_INT 104
25264: PUSH
25265: LD_INT 105
25267: PUSH
25268: LD_INT 106
25270: PUSH
25271: LD_INT 107
25273: PUSH
25274: LD_INT 108
25276: PUSH
25277: LD_INT 109
25279: PUSH
25280: LD_INT 110
25282: PUSH
25283: LD_INT 111
25285: PUSH
25286: LD_INT 112
25288: PUSH
25289: LD_INT 113
25291: PUSH
25292: LD_INT 114
25294: PUSH
25295: LD_INT 115
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: ST_TO_ADDR
25319: GO 25322
25321: POP
// end else
25322: GO 25541
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
25324: LD_ADDR_VAR 0 1
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: LD_INT 5
25343: PUSH
25344: LD_INT 6
25346: PUSH
25347: LD_INT 7
25349: PUSH
25350: LD_INT 8
25352: PUSH
25353: LD_INT 9
25355: PUSH
25356: LD_INT 10
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: LD_INT 12
25364: PUSH
25365: LD_INT 13
25367: PUSH
25368: LD_INT 14
25370: PUSH
25371: LD_INT 15
25373: PUSH
25374: LD_INT 16
25376: PUSH
25377: LD_INT 17
25379: PUSH
25380: LD_INT 18
25382: PUSH
25383: LD_INT 19
25385: PUSH
25386: LD_INT 20
25388: PUSH
25389: LD_INT 21
25391: PUSH
25392: LD_INT 22
25394: PUSH
25395: LD_INT 23
25397: PUSH
25398: LD_INT 24
25400: PUSH
25401: LD_INT 25
25403: PUSH
25404: LD_INT 26
25406: PUSH
25407: LD_INT 27
25409: PUSH
25410: LD_INT 28
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: LD_INT 30
25418: PUSH
25419: LD_INT 31
25421: PUSH
25422: LD_INT 32
25424: PUSH
25425: LD_INT 33
25427: PUSH
25428: LD_INT 34
25430: PUSH
25431: LD_INT 35
25433: PUSH
25434: LD_INT 36
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 101
25477: PUSH
25478: LD_INT 102
25480: PUSH
25481: LD_INT 103
25483: PUSH
25484: LD_INT 104
25486: PUSH
25487: LD_INT 105
25489: PUSH
25490: LD_INT 106
25492: PUSH
25493: LD_INT 107
25495: PUSH
25496: LD_INT 108
25498: PUSH
25499: LD_INT 109
25501: PUSH
25502: LD_INT 110
25504: PUSH
25505: LD_INT 111
25507: PUSH
25508: LD_INT 112
25510: PUSH
25511: LD_INT 113
25513: PUSH
25514: LD_INT 114
25516: PUSH
25517: LD_INT 115
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// if result then
25541: LD_VAR 0 1
25545: IFFALSE 25834
// begin normal :=  ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_STRING 
25554: ST_TO_ADDR
// hardcore :=  ;
25555: LD_ADDR_VAR 0 4
25559: PUSH
25560: LD_STRING 
25562: ST_TO_ADDR
// for i = 1 to normalCounter do
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: DOUBLE
25569: LD_INT 1
25571: DEC
25572: ST_TO_ADDR
25573: LD_EXP 91
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25680
// begin tmp := 0 ;
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_STRING 0
25588: ST_TO_ADDR
// if result [ 1 ] then
25589: LD_VAR 0 1
25593: PUSH
25594: LD_INT 1
25596: ARRAY
25597: IFFALSE 25662
// if result [ 1 ] [ 1 ] = i then
25599: LD_VAR 0 1
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: PUSH
25612: LD_VAR 0 5
25616: EQUAL
25617: IFFALSE 25662
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 1
25631: PPUSH
25632: LD_VAR 0 1
25636: PUSH
25637: LD_INT 1
25639: ARRAY
25640: PPUSH
25641: LD_INT 1
25643: PPUSH
25644: CALL_OW 3
25648: PPUSH
25649: CALL_OW 1
25653: ST_TO_ADDR
// tmp := 1 ;
25654: LD_ADDR_VAR 0 2
25658: PUSH
25659: LD_STRING 1
25661: ST_TO_ADDR
// end ; normal := normal & tmp ;
25662: LD_ADDR_VAR 0 3
25666: PUSH
25667: LD_VAR 0 3
25671: PUSH
25672: LD_VAR 0 2
25676: STR
25677: ST_TO_ADDR
// end ;
25678: GO 25578
25680: POP
25681: POP
// for i = 1 to hardcoreCounter do
25682: LD_ADDR_VAR 0 5
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_EXP 92
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25803
// begin tmp := 0 ;
25700: LD_ADDR_VAR 0 2
25704: PUSH
25705: LD_STRING 0
25707: ST_TO_ADDR
// if result [ 2 ] then
25708: LD_VAR 0 1
25712: PUSH
25713: LD_INT 2
25715: ARRAY
25716: IFFALSE 25785
// if result [ 2 ] [ 1 ] = 100 + i then
25718: LD_VAR 0 1
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: PUSH
25727: LD_INT 1
25729: ARRAY
25730: PUSH
25731: LD_INT 100
25733: PUSH
25734: LD_VAR 0 5
25738: PLUS
25739: EQUAL
25740: IFFALSE 25785
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25742: LD_ADDR_VAR 0 1
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_INT 2
25754: PPUSH
25755: LD_VAR 0 1
25759: PUSH
25760: LD_INT 2
25762: ARRAY
25763: PPUSH
25764: LD_INT 1
25766: PPUSH
25767: CALL_OW 3
25771: PPUSH
25772: CALL_OW 1
25776: ST_TO_ADDR
// tmp := 1 ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_STRING 1
25784: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25785: LD_ADDR_VAR 0 4
25789: PUSH
25790: LD_VAR 0 4
25794: PUSH
25795: LD_VAR 0 2
25799: STR
25800: ST_TO_ADDR
// end ;
25801: GO 25697
25803: POP
25804: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25805: LD_STRING getStreamItemsFromMission("
25807: PUSH
25808: LD_VAR 0 3
25812: STR
25813: PUSH
25814: LD_STRING ","
25816: STR
25817: PUSH
25818: LD_VAR 0 4
25822: STR
25823: PUSH
25824: LD_STRING ")
25826: STR
25827: PPUSH
25828: CALL_OW 559
// end else
25832: GO 25841
// ToLua ( getStreamItemsFromMission("","") ) ;
25834: LD_STRING getStreamItemsFromMission("","")
25836: PPUSH
25837: CALL_OW 559
// end ;
25841: LD_VAR 0 1
25845: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25846: LD_EXP 90
25850: PUSH
25851: LD_EXP 95
25855: AND
25856: IFFALSE 25980
25858: GO 25860
25860: DISABLE
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
// begin enable ;
25865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25866: LD_ADDR_VAR 0 2
25870: PUSH
25871: LD_INT 22
25873: PUSH
25874: LD_OWVAR 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 34
25888: PUSH
25889: LD_INT 7
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 34
25898: PUSH
25899: LD_INT 45
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 34
25908: PUSH
25909: LD_INT 28
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 47
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PPUSH
25937: CALL_OW 69
25941: ST_TO_ADDR
// if not tmp then
25942: LD_VAR 0 2
25946: NOT
25947: IFFALSE 25951
// exit ;
25949: GO 25980
// for i in tmp do
25951: LD_ADDR_VAR 0 1
25955: PUSH
25956: LD_VAR 0 2
25960: PUSH
25961: FOR_IN
25962: IFFALSE 25978
// begin SetLives ( i , 0 ) ;
25964: LD_VAR 0 1
25968: PPUSH
25969: LD_INT 0
25971: PPUSH
25972: CALL_OW 234
// end ;
25976: GO 25961
25978: POP
25979: POP
// end ;
25980: PPOPN 2
25982: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25983: LD_EXP 90
25987: PUSH
25988: LD_EXP 96
25992: AND
25993: IFFALSE 26077
25995: GO 25997
25997: DISABLE
25998: LD_INT 0
26000: PPUSH
26001: PPUSH
// begin enable ;
26002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26003: LD_ADDR_VAR 0 2
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_OWVAR 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 32
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: ST_TO_ADDR
// if not tmp then
26039: LD_VAR 0 2
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26077
// for i in tmp do
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: LD_VAR 0 2
26057: PUSH
26058: FOR_IN
26059: IFFALSE 26075
// begin SetLives ( i , 0 ) ;
26061: LD_VAR 0 1
26065: PPUSH
26066: LD_INT 0
26068: PPUSH
26069: CALL_OW 234
// end ;
26073: GO 26058
26075: POP
26076: POP
// end ;
26077: PPOPN 2
26079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26080: LD_EXP 90
26084: PUSH
26085: LD_EXP 93
26089: AND
26090: IFFALSE 26183
26092: GO 26094
26094: DISABLE
26095: LD_INT 0
26097: PPUSH
// begin enable ;
26098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 25
26121: PUSH
26122: LD_INT 5
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 9
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 8
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PPUSH
26159: CALL_OW 69
26163: PUSH
26164: FOR_IN
26165: IFFALSE 26181
// begin SetClass ( i , 1 ) ;
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_INT 1
26174: PPUSH
26175: CALL_OW 336
// end ;
26179: GO 26164
26181: POP
26182: POP
// end ;
26183: PPOPN 1
26185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26186: LD_EXP 90
26190: PUSH
26191: LD_EXP 94
26195: AND
26196: PUSH
26197: LD_OWVAR 65
26201: PUSH
26202: LD_INT 7
26204: LESS
26205: AND
26206: IFFALSE 26220
26208: GO 26210
26210: DISABLE
// begin enable ;
26211: ENABLE
// game_speed := 7 ;
26212: LD_ADDR_OWVAR 65
26216: PUSH
26217: LD_INT 7
26219: ST_TO_ADDR
// end ;
26220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26221: LD_EXP 90
26225: PUSH
26226: LD_EXP 97
26230: AND
26231: IFFALSE 26433
26233: GO 26235
26235: DISABLE
26236: LD_INT 0
26238: PPUSH
26239: PPUSH
26240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26241: LD_ADDR_VAR 0 3
26245: PUSH
26246: LD_INT 81
26248: PUSH
26249: LD_OWVAR 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 21
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: ST_TO_ADDR
// if not tmp then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26433
// if tmp > 5 then
26286: LD_VAR 0 3
26290: PUSH
26291: LD_INT 5
26293: GREATER
26294: IFFALSE 26306
// k := 5 else
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_INT 5
26303: ST_TO_ADDR
26304: GO 26316
// k := tmp ;
26306: LD_ADDR_VAR 0 2
26310: PUSH
26311: LD_VAR 0 3
26315: ST_TO_ADDR
// for i := 1 to k do
26316: LD_ADDR_VAR 0 1
26320: PUSH
26321: DOUBLE
26322: LD_INT 1
26324: DEC
26325: ST_TO_ADDR
26326: LD_VAR 0 2
26330: PUSH
26331: FOR_TO
26332: IFFALSE 26431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26334: LD_VAR 0 3
26338: PUSH
26339: LD_VAR 0 1
26343: ARRAY
26344: PPUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 4
26352: MOD
26353: PUSH
26354: LD_INT 1
26356: PLUS
26357: PPUSH
26358: CALL_OW 259
26362: PUSH
26363: LD_INT 10
26365: LESS
26366: IFFALSE 26429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26368: LD_VAR 0 3
26372: PUSH
26373: LD_VAR 0 1
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 1
26383: PUSH
26384: LD_INT 4
26386: MOD
26387: PUSH
26388: LD_INT 1
26390: PLUS
26391: PPUSH
26392: LD_VAR 0 3
26396: PUSH
26397: LD_VAR 0 1
26401: ARRAY
26402: PPUSH
26403: LD_VAR 0 1
26407: PUSH
26408: LD_INT 4
26410: MOD
26411: PUSH
26412: LD_INT 1
26414: PLUS
26415: PPUSH
26416: CALL_OW 259
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: PPUSH
26425: CALL_OW 237
26429: GO 26331
26431: POP
26432: POP
// end ;
26433: PPOPN 3
26435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26436: LD_EXP 90
26440: PUSH
26441: LD_EXP 98
26445: AND
26446: IFFALSE 26466
26448: GO 26450
26450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26451: LD_INT 4
26453: PPUSH
26454: LD_OWVAR 2
26458: PPUSH
26459: LD_INT 0
26461: PPUSH
26462: CALL_OW 324
26466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26467: LD_EXP 90
26471: PUSH
26472: LD_EXP 127
26476: AND
26477: IFFALSE 26497
26479: GO 26481
26481: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26482: LD_INT 19
26484: PPUSH
26485: LD_OWVAR 2
26489: PPUSH
26490: LD_INT 0
26492: PPUSH
26493: CALL_OW 324
26497: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26498: LD_EXP 90
26502: PUSH
26503: LD_EXP 99
26507: AND
26508: IFFALSE 26610
26510: GO 26512
26512: DISABLE
26513: LD_INT 0
26515: PPUSH
26516: PPUSH
// begin enable ;
26517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26518: LD_ADDR_VAR 0 2
26522: PUSH
26523: LD_INT 22
26525: PUSH
26526: LD_OWVAR 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 34
26540: PUSH
26541: LD_INT 11
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 34
26550: PUSH
26551: LD_INT 30
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: ST_TO_ADDR
// if not tmp then
26572: LD_VAR 0 2
26576: NOT
26577: IFFALSE 26581
// exit ;
26579: GO 26610
// for i in tmp do
26581: LD_ADDR_VAR 0 1
26585: PUSH
26586: LD_VAR 0 2
26590: PUSH
26591: FOR_IN
26592: IFFALSE 26608
// begin SetLives ( i , 0 ) ;
26594: LD_VAR 0 1
26598: PPUSH
26599: LD_INT 0
26601: PPUSH
26602: CALL_OW 234
// end ;
26606: GO 26591
26608: POP
26609: POP
// end ;
26610: PPOPN 2
26612: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26613: LD_EXP 90
26617: PUSH
26618: LD_EXP 100
26622: AND
26623: IFFALSE 26643
26625: GO 26627
26627: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26628: LD_INT 32
26630: PPUSH
26631: LD_OWVAR 2
26635: PPUSH
26636: LD_INT 0
26638: PPUSH
26639: CALL_OW 324
26643: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26644: LD_EXP 90
26648: PUSH
26649: LD_EXP 101
26653: AND
26654: IFFALSE 26835
26656: GO 26658
26658: DISABLE
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26664: LD_ADDR_VAR 0 2
26668: PUSH
26669: LD_INT 22
26671: PUSH
26672: LD_OWVAR 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 33
26683: PUSH
26684: LD_INT 3
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: ST_TO_ADDR
// if not tmp then
26700: LD_VAR 0 2
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26835
// side := 0 ;
26709: LD_ADDR_VAR 0 3
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// for i := 1 to 8 do
26717: LD_ADDR_VAR 0 1
26721: PUSH
26722: DOUBLE
26723: LD_INT 1
26725: DEC
26726: ST_TO_ADDR
26727: LD_INT 8
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26779
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26733: LD_OWVAR 2
26737: PUSH
26738: LD_VAR 0 1
26742: NONEQUAL
26743: PUSH
26744: LD_OWVAR 2
26748: PPUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 81
26758: PUSH
26759: LD_INT 2
26761: EQUAL
26762: AND
26763: IFFALSE 26777
// begin side := i ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_VAR 0 1
26774: ST_TO_ADDR
// break ;
26775: GO 26779
// end ;
26777: GO 26730
26779: POP
26780: POP
// if not side then
26781: LD_VAR 0 3
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26835
// for i := 1 to tmp do
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: DOUBLE
26796: LD_INT 1
26798: DEC
26799: ST_TO_ADDR
26800: LD_VAR 0 2
26804: PUSH
26805: FOR_TO
26806: IFFALSE 26833
// if Prob ( 60 ) then
26808: LD_INT 60
26810: PPUSH
26811: CALL_OW 13
26815: IFFALSE 26831
// SetSide ( i , side ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: LD_VAR 0 3
26826: PPUSH
26827: CALL_OW 235
26831: GO 26805
26833: POP
26834: POP
// end ;
26835: PPOPN 3
26837: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26838: LD_EXP 90
26842: PUSH
26843: LD_EXP 103
26847: AND
26848: IFFALSE 26967
26850: GO 26852
26852: DISABLE
26853: LD_INT 0
26855: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 22
26863: PUSH
26864: LD_OWVAR 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 21
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: LD_INT 23
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: PPUSH
26905: CALL_OW 69
26909: PUSH
26910: FOR_IN
26911: IFFALSE 26965
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 257
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 4
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: IN
26941: IFFALSE 26963
// SetClass ( un , rand ( 1 , 4 ) ) ;
26943: LD_VAR 0 1
26947: PPUSH
26948: LD_INT 1
26950: PPUSH
26951: LD_INT 4
26953: PPUSH
26954: CALL_OW 12
26958: PPUSH
26959: CALL_OW 336
26963: GO 26910
26965: POP
26966: POP
// end ;
26967: PPOPN 1
26969: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26970: LD_EXP 90
26974: PUSH
26975: LD_EXP 102
26979: AND
26980: IFFALSE 27059
26982: GO 26984
26984: DISABLE
26985: LD_INT 0
26987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26988: LD_ADDR_VAR 0 1
26992: PUSH
26993: LD_INT 22
26995: PUSH
26996: LD_OWVAR 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 21
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 69
27023: ST_TO_ADDR
// if not tmp then
27024: LD_VAR 0 1
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 1
27040: PPUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 12
27050: ARRAY
27051: PPUSH
27052: LD_INT 100
27054: PPUSH
27055: CALL_OW 234
// end ;
27059: PPOPN 1
27061: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27062: LD_EXP 90
27066: PUSH
27067: LD_EXP 104
27071: AND
27072: IFFALSE 27170
27074: GO 27076
27076: DISABLE
27077: LD_INT 0
27079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27080: LD_ADDR_VAR 0 1
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_OWVAR 2
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 21
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PPUSH
27111: CALL_OW 69
27115: ST_TO_ADDR
// if not tmp then
27116: LD_VAR 0 1
27120: NOT
27121: IFFALSE 27125
// exit ;
27123: GO 27170
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 1
27132: PPUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL_OW 12
27142: ARRAY
27143: PPUSH
27144: LD_INT 1
27146: PPUSH
27147: LD_INT 4
27149: PPUSH
27150: CALL_OW 12
27154: PPUSH
27155: LD_INT 3000
27157: PPUSH
27158: LD_INT 9000
27160: PPUSH
27161: CALL_OW 12
27165: PPUSH
27166: CALL_OW 492
// end ;
27170: PPOPN 1
27172: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27173: LD_EXP 90
27177: PUSH
27178: LD_EXP 105
27182: AND
27183: IFFALSE 27203
27185: GO 27187
27187: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27188: LD_INT 1
27190: PPUSH
27191: LD_OWVAR 2
27195: PPUSH
27196: LD_INT 0
27198: PPUSH
27199: CALL_OW 324
27203: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27204: LD_EXP 90
27208: PUSH
27209: LD_EXP 106
27213: AND
27214: IFFALSE 27297
27216: GO 27218
27218: DISABLE
27219: LD_INT 0
27221: PPUSH
27222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 2
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27297
// for i in tmp do
27268: LD_ADDR_VAR 0 1
27272: PUSH
27273: LD_VAR 0 2
27277: PUSH
27278: FOR_IN
27279: IFFALSE 27295
// SetBLevel ( i , 10 ) ;
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_INT 10
27288: PPUSH
27289: CALL_OW 241
27293: GO 27278
27295: POP
27296: POP
// end ;
27297: PPOPN 2
27299: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27300: LD_EXP 90
27304: PUSH
27305: LD_EXP 107
27309: AND
27310: IFFALSE 27421
27312: GO 27314
27314: DISABLE
27315: LD_INT 0
27317: PPUSH
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 25
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PPUSH
27351: CALL_OW 69
27355: ST_TO_ADDR
// if not tmp then
27356: LD_VAR 0 3
27360: NOT
27361: IFFALSE 27365
// exit ;
27363: GO 27421
// un := tmp [ rand ( 1 , tmp ) ] ;
27365: LD_ADDR_VAR 0 2
27369: PUSH
27370: LD_VAR 0 3
27374: PUSH
27375: LD_INT 1
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: CALL_OW 12
27387: ARRAY
27388: ST_TO_ADDR
// if Crawls ( un ) then
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 318
27398: IFFALSE 27409
// ComWalk ( un ) ;
27400: LD_VAR 0 2
27404: PPUSH
27405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_INT 5
27416: PPUSH
27417: CALL_OW 336
// end ;
27421: PPOPN 3
27423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
27424: LD_EXP 90
27428: PUSH
27429: LD_EXP 108
27433: AND
27434: PUSH
27435: LD_OWVAR 67
27439: PUSH
27440: LD_INT 3
27442: LESS
27443: AND
27444: IFFALSE 27463
27446: GO 27448
27448: DISABLE
// Difficulty := Difficulty + 1 ;
27449: LD_ADDR_OWVAR 67
27453: PUSH
27454: LD_OWVAR 67
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: ST_TO_ADDR
27463: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27464: LD_EXP 90
27468: PUSH
27469: LD_EXP 109
27473: AND
27474: IFFALSE 27577
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
// begin for i := 1 to 5 do
27482: LD_ADDR_VAR 0 1
27486: PUSH
27487: DOUBLE
27488: LD_INT 1
27490: DEC
27491: ST_TO_ADDR
27492: LD_INT 5
27494: PUSH
27495: FOR_TO
27496: IFFALSE 27575
// begin uc_nation := nation_nature ;
27498: LD_ADDR_OWVAR 21
27502: PUSH
27503: LD_INT 0
27505: ST_TO_ADDR
// uc_side := 0 ;
27506: LD_ADDR_OWVAR 20
27510: PUSH
27511: LD_INT 0
27513: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27514: LD_ADDR_OWVAR 29
27518: PUSH
27519: LD_INT 12
27521: PUSH
27522: LD_INT 12
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// hc_agressivity := 20 ;
27529: LD_ADDR_OWVAR 35
27533: PUSH
27534: LD_INT 20
27536: ST_TO_ADDR
// hc_class := class_tiger ;
27537: LD_ADDR_OWVAR 28
27541: PUSH
27542: LD_INT 14
27544: ST_TO_ADDR
// hc_gallery :=  ;
27545: LD_ADDR_OWVAR 33
27549: PUSH
27550: LD_STRING 
27552: ST_TO_ADDR
// hc_name :=  ;
27553: LD_ADDR_OWVAR 26
27557: PUSH
27558: LD_STRING 
27560: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27561: CALL_OW 44
27565: PPUSH
27566: LD_INT 0
27568: PPUSH
27569: CALL_OW 51
// end ;
27573: GO 27495
27575: POP
27576: POP
// end ;
27577: PPOPN 1
27579: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27580: LD_EXP 90
27584: PUSH
27585: LD_EXP 110
27589: AND
27590: IFFALSE 27599
27592: GO 27594
27594: DISABLE
// StreamSibBomb ;
27595: CALL 27600 0 0
27599: END
// export function StreamSibBomb ; var i , x , y ; begin
27600: LD_INT 0
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
// result := false ;
27606: LD_ADDR_VAR 0 1
27610: PUSH
27611: LD_INT 0
27613: ST_TO_ADDR
// for i := 1 to 16 do
27614: LD_ADDR_VAR 0 2
27618: PUSH
27619: DOUBLE
27620: LD_INT 1
27622: DEC
27623: ST_TO_ADDR
27624: LD_INT 16
27626: PUSH
27627: FOR_TO
27628: IFFALSE 27827
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_INT 10
27637: PUSH
27638: LD_INT 20
27640: PUSH
27641: LD_INT 30
27643: PUSH
27644: LD_INT 40
27646: PUSH
27647: LD_INT 50
27649: PUSH
27650: LD_INT 60
27652: PUSH
27653: LD_INT 70
27655: PUSH
27656: LD_INT 80
27658: PUSH
27659: LD_INT 90
27661: PUSH
27662: LD_INT 100
27664: PUSH
27665: LD_INT 110
27667: PUSH
27668: LD_INT 120
27670: PUSH
27671: LD_INT 130
27673: PUSH
27674: LD_INT 140
27676: PUSH
27677: LD_INT 150
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PPUSH
27700: LD_INT 15
27702: PPUSH
27703: CALL_OW 12
27707: ARRAY
27708: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27709: LD_ADDR_VAR 0 4
27713: PUSH
27714: LD_INT 10
27716: PUSH
27717: LD_INT 20
27719: PUSH
27720: LD_INT 30
27722: PUSH
27723: LD_INT 40
27725: PUSH
27726: LD_INT 50
27728: PUSH
27729: LD_INT 60
27731: PUSH
27732: LD_INT 70
27734: PUSH
27735: LD_INT 80
27737: PUSH
27738: LD_INT 90
27740: PUSH
27741: LD_INT 100
27743: PUSH
27744: LD_INT 110
27746: PUSH
27747: LD_INT 120
27749: PUSH
27750: LD_INT 130
27752: PUSH
27753: LD_INT 140
27755: PUSH
27756: LD_INT 150
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PPUSH
27779: LD_INT 15
27781: PPUSH
27782: CALL_OW 12
27786: ARRAY
27787: ST_TO_ADDR
// if ValidHex ( x , y ) then
27788: LD_VAR 0 3
27792: PPUSH
27793: LD_VAR 0 4
27797: PPUSH
27798: CALL_OW 488
27802: IFFALSE 27825
// begin result := [ x , y ] ;
27804: LD_ADDR_VAR 0 1
27808: PUSH
27809: LD_VAR 0 3
27813: PUSH
27814: LD_VAR 0 4
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// break ;
27823: GO 27827
// end ; end ;
27825: GO 27627
27827: POP
27828: POP
// if result then
27829: LD_VAR 0 1
27833: IFFALSE 27893
// begin ToLua ( playSibBomb() ) ;
27835: LD_STRING playSibBomb()
27837: PPUSH
27838: CALL_OW 559
// wait ( 0 0$14 ) ;
27842: LD_INT 490
27844: PPUSH
27845: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27849: LD_VAR 0 1
27853: PUSH
27854: LD_INT 1
27856: ARRAY
27857: PPUSH
27858: LD_VAR 0 1
27862: PUSH
27863: LD_INT 2
27865: ARRAY
27866: PPUSH
27867: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27871: LD_VAR 0 1
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PPUSH
27880: LD_VAR 0 1
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: CALL_OW 429
// end ; end ;
27893: LD_VAR 0 1
27897: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27898: LD_EXP 90
27902: PUSH
27903: LD_EXP 112
27907: AND
27908: IFFALSE 27920
27910: GO 27912
27912: DISABLE
// YouLost (  ) ;
27913: LD_STRING 
27915: PPUSH
27916: CALL_OW 104
27920: END
// every 0 0$1 trigger StreamModeActive and sFog do
27921: LD_EXP 90
27925: PUSH
27926: LD_EXP 111
27930: AND
27931: IFFALSE 27945
27933: GO 27935
27935: DISABLE
// FogOff ( your_side ) ;
27936: LD_OWVAR 2
27940: PPUSH
27941: CALL_OW 344
27945: END
// every 0 0$1 trigger StreamModeActive and sSun do
27946: LD_EXP 90
27950: PUSH
27951: LD_EXP 113
27955: AND
27956: IFFALSE 27984
27958: GO 27960
27960: DISABLE
// begin solar_recharge_percent := 0 ;
27961: LD_ADDR_OWVAR 79
27965: PUSH
27966: LD_INT 0
27968: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27969: LD_INT 10500
27971: PPUSH
27972: CALL_OW 67
// solar_recharge_percent := 100 ;
27976: LD_ADDR_OWVAR 79
27980: PUSH
27981: LD_INT 100
27983: ST_TO_ADDR
// end ;
27984: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27985: LD_EXP 90
27989: PUSH
27990: LD_EXP 114
27994: AND
27995: IFFALSE 28234
27997: GO 27999
27999: DISABLE
28000: LD_INT 0
28002: PPUSH
28003: PPUSH
28004: PPUSH
// begin tmp := [ ] ;
28005: LD_ADDR_VAR 0 3
28009: PUSH
28010: EMPTY
28011: ST_TO_ADDR
// for i := 1 to 6 do
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: DOUBLE
28018: LD_INT 1
28020: DEC
28021: ST_TO_ADDR
28022: LD_INT 6
28024: PUSH
28025: FOR_TO
28026: IFFALSE 28131
// begin uc_nation := nation_nature ;
28028: LD_ADDR_OWVAR 21
28032: PUSH
28033: LD_INT 0
28035: ST_TO_ADDR
// uc_side := 0 ;
28036: LD_ADDR_OWVAR 20
28040: PUSH
28041: LD_INT 0
28043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28044: LD_ADDR_OWVAR 29
28048: PUSH
28049: LD_INT 12
28051: PUSH
28052: LD_INT 12
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: ST_TO_ADDR
// hc_agressivity := 20 ;
28059: LD_ADDR_OWVAR 35
28063: PUSH
28064: LD_INT 20
28066: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28067: LD_ADDR_OWVAR 28
28071: PUSH
28072: LD_INT 17
28074: ST_TO_ADDR
// hc_gallery :=  ;
28075: LD_ADDR_OWVAR 33
28079: PUSH
28080: LD_STRING 
28082: ST_TO_ADDR
// hc_name :=  ;
28083: LD_ADDR_OWVAR 26
28087: PUSH
28088: LD_STRING 
28090: ST_TO_ADDR
// un := CreateHuman ;
28091: LD_ADDR_VAR 0 2
28095: PUSH
28096: CALL_OW 44
28100: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28101: LD_VAR 0 2
28105: PPUSH
28106: LD_INT 1
28108: PPUSH
28109: CALL_OW 51
// tmp := tmp ^ un ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 3
28122: PUSH
28123: LD_VAR 0 2
28127: ADD
28128: ST_TO_ADDR
// end ;
28129: GO 28025
28131: POP
28132: POP
// repeat wait ( 0 0$1 ) ;
28133: LD_INT 35
28135: PPUSH
28136: CALL_OW 67
// for un in tmp do
28140: LD_ADDR_VAR 0 2
28144: PUSH
28145: LD_VAR 0 3
28149: PUSH
28150: FOR_IN
28151: IFFALSE 28225
// begin if IsDead ( un ) then
28153: LD_VAR 0 2
28157: PPUSH
28158: CALL_OW 301
28162: IFFALSE 28182
// begin tmp := tmp diff un ;
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_VAR 0 3
28173: PUSH
28174: LD_VAR 0 2
28178: DIFF
28179: ST_TO_ADDR
// continue ;
28180: GO 28150
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28182: LD_VAR 0 2
28186: PPUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 22
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 69
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: CALL_OW 74
28218: PPUSH
28219: CALL_OW 115
// end ;
28223: GO 28150
28225: POP
28226: POP
// until not tmp ;
28227: LD_VAR 0 3
28231: NOT
28232: IFFALSE 28133
// end ;
28234: PPOPN 3
28236: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28237: LD_EXP 90
28241: PUSH
28242: LD_EXP 115
28246: AND
28247: IFFALSE 28301
28249: GO 28251
28251: DISABLE
// begin ToLua ( displayTroll(); ) ;
28252: LD_STRING displayTroll();
28254: PPUSH
28255: CALL_OW 559
// wait ( 3 3$00 ) ;
28259: LD_INT 6300
28261: PPUSH
28262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28266: LD_STRING hideTroll();
28268: PPUSH
28269: CALL_OW 559
// wait ( 1 1$00 ) ;
28273: LD_INT 2100
28275: PPUSH
28276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28280: LD_STRING displayTroll();
28282: PPUSH
28283: CALL_OW 559
// wait ( 1 1$00 ) ;
28287: LD_INT 2100
28289: PPUSH
28290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28294: LD_STRING hideTroll();
28296: PPUSH
28297: CALL_OW 559
// end ;
28301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28302: LD_EXP 90
28306: PUSH
28307: LD_EXP 116
28311: AND
28312: IFFALSE 28375
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin p := 0 ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// repeat game_speed := 1 ;
28328: LD_ADDR_OWVAR 65
28332: PUSH
28333: LD_INT 1
28335: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28336: LD_INT 35
28338: PPUSH
28339: CALL_OW 67
// p := p + 1 ;
28343: LD_ADDR_VAR 0 1
28347: PUSH
28348: LD_VAR 0 1
28352: PUSH
28353: LD_INT 1
28355: PLUS
28356: ST_TO_ADDR
// until p >= 60 ;
28357: LD_VAR 0 1
28361: PUSH
28362: LD_INT 60
28364: GREATEREQUAL
28365: IFFALSE 28328
// game_speed := 4 ;
28367: LD_ADDR_OWVAR 65
28371: PUSH
28372: LD_INT 4
28374: ST_TO_ADDR
// end ;
28375: PPOPN 1
28377: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28378: LD_EXP 90
28382: PUSH
28383: LD_EXP 117
28387: AND
28388: IFFALSE 28534
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28397: LD_ADDR_VAR 0 1
28401: PUSH
28402: LD_INT 22
28404: PUSH
28405: LD_OWVAR 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not depot then
28451: LD_VAR 0 1
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28534
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28460: LD_ADDR_VAR 0 2
28464: PUSH
28465: LD_VAR 0 1
28469: PUSH
28470: LD_INT 1
28472: PPUSH
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL_OW 12
28482: ARRAY
28483: PPUSH
28484: CALL_OW 274
28488: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 2
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_INT 3
28526: PPUSH
28527: LD_INT 0
28529: PPUSH
28530: CALL_OW 277
// end ;
28534: PPOPN 2
28536: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28537: LD_EXP 90
28541: PUSH
28542: LD_EXP 118
28546: AND
28547: IFFALSE 28644
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 22
28562: PUSH
28563: LD_OWVAR 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 21
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 23
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: PPUSH
28604: CALL_OW 69
28608: ST_TO_ADDR
// if not tmp then
28609: LD_VAR 0 1
28613: NOT
28614: IFFALSE 28618
// exit ;
28616: GO 28644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28618: LD_VAR 0 1
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: PPUSH
28637: LD_INT 200
28639: PPUSH
28640: CALL_OW 234
// end ;
28644: PPOPN 1
28646: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28647: LD_EXP 90
28651: PUSH
28652: LD_EXP 119
28656: AND
28657: IFFALSE 28736
28659: GO 28661
28661: DISABLE
28662: LD_INT 0
28664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28665: LD_ADDR_VAR 0 1
28669: PUSH
28670: LD_INT 22
28672: PUSH
28673: LD_OWVAR 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 21
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not tmp then
28701: LD_VAR 0 1
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28710: LD_VAR 0 1
28714: PUSH
28715: LD_INT 1
28717: PPUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 12
28727: ARRAY
28728: PPUSH
28729: LD_INT 60
28731: PPUSH
28732: CALL_OW 234
// end ;
28736: PPOPN 1
28738: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28739: LD_EXP 90
28743: PUSH
28744: LD_EXP 120
28748: AND
28749: IFFALSE 28848
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
// begin enable ;
28758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_INT 22
28766: PUSH
28767: LD_OWVAR 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 61
28778: PUSH
28779: EMPTY
28780: LIST
28781: PUSH
28782: LD_INT 33
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 1
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28848
// for i in tmp do
28811: LD_ADDR_VAR 0 2
28815: PUSH
28816: LD_VAR 0 1
28820: PUSH
28821: FOR_IN
28822: IFFALSE 28846
// if IsControledBy ( i ) then
28824: LD_VAR 0 2
28828: PPUSH
28829: CALL_OW 312
28833: IFFALSE 28844
// ComUnlink ( i ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: CALL_OW 136
28844: GO 28821
28846: POP
28847: POP
// end ;
28848: PPOPN 2
28850: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28851: LD_EXP 90
28855: PUSH
28856: LD_EXP 121
28860: AND
28861: IFFALSE 29001
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
// begin ToLua ( displayPowell(); ) ;
28870: LD_STRING displayPowell();
28872: PPUSH
28873: CALL_OW 559
// uc_side := 0 ;
28877: LD_ADDR_OWVAR 20
28881: PUSH
28882: LD_INT 0
28884: ST_TO_ADDR
// uc_nation := 2 ;
28885: LD_ADDR_OWVAR 21
28889: PUSH
28890: LD_INT 2
28892: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28893: LD_ADDR_OWVAR 37
28897: PUSH
28898: LD_INT 14
28900: ST_TO_ADDR
// vc_engine := engine_siberite ;
28901: LD_ADDR_OWVAR 39
28905: PUSH
28906: LD_INT 3
28908: ST_TO_ADDR
// vc_control := control_apeman ;
28909: LD_ADDR_OWVAR 38
28913: PUSH
28914: LD_INT 5
28916: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28917: LD_ADDR_OWVAR 40
28921: PUSH
28922: LD_INT 29
28924: ST_TO_ADDR
// un := CreateVehicle ;
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: CALL_OW 45
28934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28935: LD_VAR 0 2
28939: PPUSH
28940: LD_INT 1
28942: PPUSH
28943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28947: LD_INT 35
28949: PPUSH
28950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28954: LD_VAR 0 2
28958: PPUSH
28959: LD_INT 22
28961: PUSH
28962: LD_OWVAR 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PPUSH
28971: CALL_OW 69
28975: PPUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: CALL_OW 74
28985: PPUSH
28986: CALL_OW 115
// until IsDead ( un ) ;
28990: LD_VAR 0 2
28994: PPUSH
28995: CALL_OW 301
28999: IFFALSE 28947
// end ;
29001: PPOPN 2
29003: END
// every 0 0$1 trigger StreamModeActive and sStu do
29004: LD_EXP 90
29008: PUSH
29009: LD_EXP 129
29013: AND
29014: IFFALSE 29030
29016: GO 29018
29018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29019: LD_STRING displayStucuk();
29021: PPUSH
29022: CALL_OW 559
// ResetFog ;
29026: CALL_OW 335
// end ;
29030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29031: LD_EXP 90
29035: PUSH
29036: LD_EXP 122
29040: AND
29041: IFFALSE 29182
29043: GO 29045
29045: DISABLE
29046: LD_INT 0
29048: PPUSH
29049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29050: LD_ADDR_VAR 0 2
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 21
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: ST_TO_ADDR
// if not tmp then
29086: LD_VAR 0 2
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29182
// un := tmp [ rand ( 1 , tmp ) ] ;
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: LD_VAR 0 2
29104: PUSH
29105: LD_INT 1
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: CALL_OW 12
29117: ARRAY
29118: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29119: LD_VAR 0 1
29123: PPUSH
29124: LD_INT 0
29126: PPUSH
29127: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_OWVAR 3
29140: PUSH
29141: LD_VAR 0 1
29145: DIFF
29146: PPUSH
29147: LD_VAR 0 1
29151: PPUSH
29152: CALL_OW 74
29156: PPUSH
29157: CALL_OW 115
// wait ( 0 0$20 ) ;
29161: LD_INT 700
29163: PPUSH
29164: CALL_OW 67
// SetSide ( un , your_side ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_OWVAR 2
29177: PPUSH
29178: CALL_OW 235
// end ;
29182: PPOPN 2
29184: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29185: LD_EXP 90
29189: PUSH
29190: LD_EXP 123
29194: AND
29195: IFFALSE 29301
29197: GO 29199
29199: DISABLE
29200: LD_INT 0
29202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29203: LD_ADDR_VAR 0 1
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 30
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PPUSH
29252: CALL_OW 69
29256: ST_TO_ADDR
// if not depot then
29257: LD_VAR 0 1
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29266: LD_VAR 0 1
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 250
29279: PPUSH
29280: LD_VAR 0 1
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 251
29293: PPUSH
29294: LD_INT 70
29296: PPUSH
29297: CALL_OW 495
// end ;
29301: PPOPN 1
29303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29304: LD_EXP 90
29308: PUSH
29309: LD_EXP 124
29313: AND
29314: IFFALSE 29525
29316: GO 29318
29318: DISABLE
29319: LD_INT 0
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29326: LD_ADDR_VAR 0 5
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_OWVAR 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 21
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 69
29361: ST_TO_ADDR
// if not tmp then
29362: LD_VAR 0 5
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29525
// for i in tmp do
29371: LD_ADDR_VAR 0 1
29375: PUSH
29376: LD_VAR 0 5
29380: PUSH
29381: FOR_IN
29382: IFFALSE 29523
// begin d := rand ( 0 , 5 ) ;
29384: LD_ADDR_VAR 0 4
29388: PUSH
29389: LD_INT 0
29391: PPUSH
29392: LD_INT 5
29394: PPUSH
29395: CALL_OW 12
29399: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 250
29414: PPUSH
29415: LD_VAR 0 4
29419: PPUSH
29420: LD_INT 3
29422: PPUSH
29423: LD_INT 12
29425: PPUSH
29426: CALL_OW 12
29430: PPUSH
29431: CALL_OW 272
29435: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 251
29450: PPUSH
29451: LD_VAR 0 4
29455: PPUSH
29456: LD_INT 3
29458: PPUSH
29459: LD_INT 12
29461: PPUSH
29462: CALL_OW 12
29466: PPUSH
29467: CALL_OW 273
29471: ST_TO_ADDR
// if ValidHex ( x , y ) then
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 3
29481: PPUSH
29482: CALL_OW 488
29486: IFFALSE 29521
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29488: LD_VAR 0 1
29492: PPUSH
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: LD_INT 3
29505: PPUSH
29506: LD_INT 6
29508: PPUSH
29509: CALL_OW 12
29513: PPUSH
29514: LD_INT 1
29516: PPUSH
29517: CALL_OW 483
// end ;
29521: GO 29381
29523: POP
29524: POP
// end ;
29525: PPOPN 5
29527: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29528: LD_EXP 90
29532: PUSH
29533: LD_EXP 125
29537: AND
29538: IFFALSE 29632
29540: GO 29542
29542: DISABLE
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 32
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 21
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: PPUSH
29589: CALL_OW 69
29593: ST_TO_ADDR
// if not tmp then
29594: LD_VAR 0 2
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29632
// for i in tmp do
29603: LD_ADDR_VAR 0 1
29607: PUSH
29608: LD_VAR 0 2
29612: PUSH
29613: FOR_IN
29614: IFFALSE 29630
// SetFuel ( i , 0 ) ;
29616: LD_VAR 0 1
29620: PPUSH
29621: LD_INT 0
29623: PPUSH
29624: CALL_OW 240
29628: GO 29613
29630: POP
29631: POP
// end ;
29632: PPOPN 2
29634: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29635: LD_EXP 90
29639: PUSH
29640: LD_EXP 126
29644: AND
29645: IFFALSE 29711
29647: GO 29649
29649: DISABLE
29650: LD_INT 0
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29653: LD_ADDR_VAR 0 1
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: LD_INT 29
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 1
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29711
// DestroyUnit ( tmp [ 1 ] ) ;
29698: LD_VAR 0 1
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: PPUSH
29707: CALL_OW 65
// end ;
29711: PPOPN 1
29713: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29714: LD_EXP 90
29718: PUSH
29719: LD_EXP 128
29723: AND
29724: IFFALSE 29853
29726: GO 29728
29728: DISABLE
29729: LD_INT 0
29731: PPUSH
// begin uc_side := 0 ;
29732: LD_ADDR_OWVAR 20
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
// uc_nation := nation_arabian ;
29740: LD_ADDR_OWVAR 21
29744: PUSH
29745: LD_INT 2
29747: ST_TO_ADDR
// hc_gallery :=  ;
29748: LD_ADDR_OWVAR 33
29752: PUSH
29753: LD_STRING 
29755: ST_TO_ADDR
// hc_name :=  ;
29756: LD_ADDR_OWVAR 26
29760: PUSH
29761: LD_STRING 
29763: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 11
29769: PPUSH
29770: LD_INT 10
29772: PPUSH
29773: CALL_OW 380
// un := CreateHuman ;
29777: LD_ADDR_VAR 0 1
29781: PUSH
29782: CALL_OW 44
29786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_INT 1
29794: PPUSH
29795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29799: LD_INT 35
29801: PPUSH
29802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_INT 22
29813: PUSH
29814: LD_OWVAR 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 69
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL_OW 74
29837: PPUSH
29838: CALL_OW 115
// until IsDead ( un ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 301
29851: IFFALSE 29799
// end ;
29853: PPOPN 1
29855: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29856: LD_EXP 90
29860: PUSH
29861: LD_EXP 130
29865: AND
29866: IFFALSE 29878
29868: GO 29870
29870: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29871: LD_STRING earthquake(getX(game), 0, 32)
29873: PPUSH
29874: CALL_OW 559
29878: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29879: LD_EXP 90
29883: PUSH
29884: LD_EXP 131
29888: AND
29889: IFFALSE 29980
29891: GO 29893
29893: DISABLE
29894: LD_INT 0
29896: PPUSH
// begin enable ;
29897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29898: LD_ADDR_VAR 0 1
29902: PUSH
29903: LD_INT 22
29905: PUSH
29906: LD_OWVAR 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 33
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: ST_TO_ADDR
// if not tmp then
29945: LD_VAR 0 1
29949: NOT
29950: IFFALSE 29954
// exit ;
29952: GO 29980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29954: LD_VAR 0 1
29958: PUSH
29959: LD_INT 1
29961: PPUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 12
29971: ARRAY
29972: PPUSH
29973: LD_INT 1
29975: PPUSH
29976: CALL_OW 234
// end ;
29980: PPOPN 1
29982: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29983: LD_EXP 90
29987: PUSH
29988: LD_EXP 132
29992: AND
29993: IFFALSE 30134
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_OWVAR 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 25
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: ST_TO_ADDR
// if not tmp then
30039: LD_VAR 0 3
30043: NOT
30044: IFFALSE 30048
// exit ;
30046: GO 30134
// un := tmp [ rand ( 1 , tmp ) ] ;
30048: LD_ADDR_VAR 0 2
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_INT 1
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 12
30070: ARRAY
30071: ST_TO_ADDR
// if Crawls ( un ) then
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL_OW 318
30081: IFFALSE 30092
// ComWalk ( un ) ;
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30092: LD_VAR 0 2
30096: PPUSH
30097: LD_INT 9
30099: PPUSH
30100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30104: LD_INT 28
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 2
30114: PPUSH
30115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30119: LD_INT 29
30121: PPUSH
30122: LD_OWVAR 2
30126: PPUSH
30127: LD_INT 2
30129: PPUSH
30130: CALL_OW 322
// end ;
30134: PPOPN 3
30136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30137: LD_EXP 90
30141: PUSH
30142: LD_EXP 133
30146: AND
30147: IFFALSE 30258
30149: GO 30151
30151: DISABLE
30152: LD_INT 0
30154: PPUSH
30155: PPUSH
30156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_OWVAR 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 25
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PPUSH
30188: CALL_OW 69
30192: ST_TO_ADDR
// if not tmp then
30193: LD_VAR 0 3
30197: NOT
30198: IFFALSE 30202
// exit ;
30200: GO 30258
// un := tmp [ rand ( 1 , tmp ) ] ;
30202: LD_ADDR_VAR 0 2
30206: PUSH
30207: LD_VAR 0 3
30211: PUSH
30212: LD_INT 1
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 12
30224: ARRAY
30225: ST_TO_ADDR
// if Crawls ( un ) then
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 318
30235: IFFALSE 30246
// ComWalk ( un ) ;
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_INT 8
30253: PPUSH
30254: CALL_OW 336
// end ;
30258: PPOPN 3
30260: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30261: LD_EXP 90
30265: PUSH
30266: LD_EXP 134
30270: AND
30271: IFFALSE 30415
30273: GO 30275
30275: DISABLE
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30280: LD_ADDR_VAR 0 2
30284: PUSH
30285: LD_INT 22
30287: PUSH
30288: LD_OWVAR 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 21
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 34
30312: PUSH
30313: LD_INT 12
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 34
30322: PUSH
30323: LD_INT 51
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_INT 32
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 69
30355: ST_TO_ADDR
// if not tmp then
30356: LD_VAR 0 2
30360: NOT
30361: IFFALSE 30365
// exit ;
30363: GO 30415
// for i in tmp do
30365: LD_ADDR_VAR 0 1
30369: PUSH
30370: LD_VAR 0 2
30374: PUSH
30375: FOR_IN
30376: IFFALSE 30413
// if GetCargo ( i , mat_artifact ) = 0 then
30378: LD_VAR 0 1
30382: PPUSH
30383: LD_INT 4
30385: PPUSH
30386: CALL_OW 289
30390: PUSH
30391: LD_INT 0
30393: EQUAL
30394: IFFALSE 30411
// SetCargo ( i , mat_siberit , 100 ) ;
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_INT 3
30403: PPUSH
30404: LD_INT 100
30406: PPUSH
30407: CALL_OW 290
30411: GO 30375
30413: POP
30414: POP
// end ;
30415: PPOPN 2
30417: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30418: LD_EXP 90
30422: PUSH
30423: LD_EXP 135
30427: AND
30428: IFFALSE 30611
30430: GO 30432
30432: DISABLE
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_OWVAR 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 69
30458: ST_TO_ADDR
// if not tmp then
30459: LD_VAR 0 2
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 30611
// for i := 1 to 2 do
30468: LD_ADDR_VAR 0 1
30472: PUSH
30473: DOUBLE
30474: LD_INT 1
30476: DEC
30477: ST_TO_ADDR
30478: LD_INT 2
30480: PUSH
30481: FOR_TO
30482: IFFALSE 30609
// begin uc_side := your_side ;
30484: LD_ADDR_OWVAR 20
30488: PUSH
30489: LD_OWVAR 2
30493: ST_TO_ADDR
// uc_nation := nation_american ;
30494: LD_ADDR_OWVAR 21
30498: PUSH
30499: LD_INT 1
30501: ST_TO_ADDR
// vc_chassis := us_morphling ;
30502: LD_ADDR_OWVAR 37
30506: PUSH
30507: LD_INT 5
30509: ST_TO_ADDR
// vc_engine := engine_siberite ;
30510: LD_ADDR_OWVAR 39
30514: PUSH
30515: LD_INT 3
30517: ST_TO_ADDR
// vc_control := control_computer ;
30518: LD_ADDR_OWVAR 38
30522: PUSH
30523: LD_INT 3
30525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30526: LD_ADDR_OWVAR 40
30530: PUSH
30531: LD_INT 10
30533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30534: LD_VAR 0 2
30538: PUSH
30539: LD_INT 1
30541: ARRAY
30542: PPUSH
30543: CALL_OW 310
30547: NOT
30548: IFFALSE 30595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30550: CALL_OW 45
30554: PPUSH
30555: LD_VAR 0 2
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 250
30568: PPUSH
30569: LD_VAR 0 2
30573: PUSH
30574: LD_INT 1
30576: ARRAY
30577: PPUSH
30578: CALL_OW 251
30582: PPUSH
30583: LD_INT 12
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 50
30593: GO 30607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30595: CALL_OW 45
30599: PPUSH
30600: LD_INT 1
30602: PPUSH
30603: CALL_OW 51
// end ;
30607: GO 30481
30609: POP
30610: POP
// end ;
30611: PPOPN 2
30613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30614: LD_EXP 90
30618: PUSH
30619: LD_EXP 136
30623: AND
30624: IFFALSE 30846
30626: GO 30628
30628: DISABLE
30629: LD_INT 0
30631: PPUSH
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30637: LD_ADDR_VAR 0 6
30641: PUSH
30642: LD_INT 22
30644: PUSH
30645: LD_OWVAR 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 21
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: LD_INT 23
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: PPUSH
30686: CALL_OW 69
30690: ST_TO_ADDR
// if not tmp then
30691: LD_VAR 0 6
30695: NOT
30696: IFFALSE 30700
// exit ;
30698: GO 30846
// s1 := rand ( 1 , 4 ) ;
30700: LD_ADDR_VAR 0 2
30704: PUSH
30705: LD_INT 1
30707: PPUSH
30708: LD_INT 4
30710: PPUSH
30711: CALL_OW 12
30715: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_VAR 0 6
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: CALL_OW 259
30739: ST_TO_ADDR
// if s1 = 1 then
30740: LD_VAR 0 2
30744: PUSH
30745: LD_INT 1
30747: EQUAL
30748: IFFALSE 30768
// s2 := rand ( 2 , 4 ) else
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 2
30757: PPUSH
30758: LD_INT 4
30760: PPUSH
30761: CALL_OW 12
30765: ST_TO_ADDR
30766: GO 30776
// s2 := 1 ;
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: LD_INT 1
30775: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30776: LD_ADDR_VAR 0 5
30780: PUSH
30781: LD_VAR 0 6
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: LD_VAR 0 3
30794: PPUSH
30795: CALL_OW 259
30799: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30800: LD_VAR 0 6
30804: PUSH
30805: LD_INT 1
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 5
30818: PPUSH
30819: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30823: LD_VAR 0 6
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: LD_VAR 0 3
30836: PPUSH
30837: LD_VAR 0 4
30841: PPUSH
30842: CALL_OW 237
// end ;
30846: PPOPN 6
30848: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30849: LD_EXP 90
30853: PUSH
30854: LD_EXP 137
30858: AND
30859: IFFALSE 30938
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30867: LD_ADDR_VAR 0 1
30871: PUSH
30872: LD_INT 22
30874: PUSH
30875: LD_OWVAR 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 30
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PPUSH
30898: CALL_OW 69
30902: ST_TO_ADDR
// if not tmp then
30903: LD_VAR 0 1
30907: NOT
30908: IFFALSE 30912
// exit ;
30910: GO 30938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30912: LD_VAR 0 1
30916: PUSH
30917: LD_INT 1
30919: PPUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 12
30929: ARRAY
30930: PPUSH
30931: LD_INT 1
30933: PPUSH
30934: CALL_OW 234
// end ;
30938: PPOPN 1
30940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30941: LD_EXP 90
30945: PUSH
30946: LD_EXP 138
30950: AND
30951: IFFALSE 31063
30953: GO 30955
30955: DISABLE
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30960: LD_ADDR_VAR 0 2
30964: PUSH
30965: LD_INT 22
30967: PUSH
30968: LD_OWVAR 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 30
30982: PUSH
30983: LD_INT 27
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 26
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 30
31002: PUSH
31003: LD_INT 28
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PPUSH
31020: CALL_OW 69
31024: ST_TO_ADDR
// if not tmp then
31025: LD_VAR 0 2
31029: NOT
31030: IFFALSE 31034
// exit ;
31032: GO 31063
// for i in tmp do
31034: LD_ADDR_VAR 0 1
31038: PUSH
31039: LD_VAR 0 2
31043: PUSH
31044: FOR_IN
31045: IFFALSE 31061
// SetLives ( i , 1 ) ;
31047: LD_VAR 0 1
31051: PPUSH
31052: LD_INT 1
31054: PPUSH
31055: CALL_OW 234
31059: GO 31044
31061: POP
31062: POP
// end ;
31063: PPOPN 2
31065: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31066: LD_EXP 90
31070: PUSH
31071: LD_EXP 139
31075: AND
31076: IFFALSE 31350
31078: GO 31080
31080: DISABLE
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
// begin i := rand ( 1 , 7 ) ;
31086: LD_ADDR_VAR 0 1
31090: PUSH
31091: LD_INT 1
31093: PPUSH
31094: LD_INT 7
31096: PPUSH
31097: CALL_OW 12
31101: ST_TO_ADDR
// case i of 1 :
31102: LD_VAR 0 1
31106: PUSH
31107: LD_INT 1
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31125
31115: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31116: LD_STRING earthquake(getX(game), 0, 32)
31118: PPUSH
31119: CALL_OW 559
31123: GO 31350
31125: LD_INT 2
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31147
31133: POP
// begin ToLua ( displayStucuk(); ) ;
31134: LD_STRING displayStucuk();
31136: PPUSH
31137: CALL_OW 559
// ResetFog ;
31141: CALL_OW 335
// end ; 3 :
31145: GO 31350
31147: LD_INT 3
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31259
31155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31156: LD_ADDR_VAR 0 2
31160: PUSH
31161: LD_INT 22
31163: PUSH
31164: LD_OWVAR 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 25
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: ST_TO_ADDR
// if not tmp then
31192: LD_VAR 0 2
31196: NOT
31197: IFFALSE 31201
// exit ;
31199: GO 31350
// un := tmp [ rand ( 1 , tmp ) ] ;
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_VAR 0 2
31210: PUSH
31211: LD_INT 1
31213: PPUSH
31214: LD_VAR 0 2
31218: PPUSH
31219: CALL_OW 12
31223: ARRAY
31224: ST_TO_ADDR
// if Crawls ( un ) then
31225: LD_VAR 0 3
31229: PPUSH
31230: CALL_OW 318
31234: IFFALSE 31245
// ComWalk ( un ) ;
31236: LD_VAR 0 3
31240: PPUSH
31241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31245: LD_VAR 0 3
31249: PPUSH
31250: LD_INT 8
31252: PPUSH
31253: CALL_OW 336
// end ; 4 :
31257: GO 31350
31259: LD_INT 4
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31328
31267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31268: LD_ADDR_VAR 0 2
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_OWVAR 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 30
31287: PUSH
31288: LD_INT 29
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PPUSH
31299: CALL_OW 69
31303: ST_TO_ADDR
// if not tmp then
31304: LD_VAR 0 2
31308: NOT
31309: IFFALSE 31313
// exit ;
31311: GO 31350
// DestroyUnit ( tmp [ 1 ] ) ;
31313: LD_VAR 0 2
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: PPUSH
31322: CALL_OW 65
// end ; 5 .. 7 :
31326: GO 31350
31328: LD_INT 5
31330: DOUBLE
31331: GREATEREQUAL
31332: IFFALSE 31340
31334: LD_INT 7
31336: DOUBLE
31337: LESSEQUAL
31338: IFTRUE 31342
31340: GO 31349
31342: POP
// StreamSibBomb ; end ;
31343: CALL 27600 0 0
31347: GO 31350
31349: POP
// end ;
31350: PPOPN 3
31352: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31353: LD_EXP 90
31357: PUSH
31358: LD_EXP 140
31362: AND
31363: IFFALSE 31519
31365: GO 31367
31367: DISABLE
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_INT 81
31380: PUSH
31381: LD_OWVAR 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 21
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 21
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31519
// p := 0 ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_INT 0
31443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31444: LD_INT 35
31446: PPUSH
31447: CALL_OW 67
// p := p + 1 ;
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 3
31460: PUSH
31461: LD_INT 1
31463: PLUS
31464: ST_TO_ADDR
// for i in tmp do
31465: LD_ADDR_VAR 0 1
31469: PUSH
31470: LD_VAR 0 2
31474: PUSH
31475: FOR_IN
31476: IFFALSE 31507
// if GetLives ( i ) < 1000 then
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 256
31487: PUSH
31488: LD_INT 1000
31490: LESS
31491: IFFALSE 31505
// SetLives ( i , 1000 ) ;
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_INT 1000
31500: PPUSH
31501: CALL_OW 234
31505: GO 31475
31507: POP
31508: POP
// until p > 20 ;
31509: LD_VAR 0 3
31513: PUSH
31514: LD_INT 20
31516: GREATER
31517: IFFALSE 31444
// end ;
31519: PPOPN 3
31521: END
// every 0 0$1 trigger StreamModeActive and sTime do
31522: LD_EXP 90
31526: PUSH
31527: LD_EXP 141
31531: AND
31532: IFFALSE 31567
31534: GO 31536
31536: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31537: LD_INT 28
31539: PPUSH
31540: LD_OWVAR 2
31544: PPUSH
31545: LD_INT 2
31547: PPUSH
31548: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31552: LD_INT 30
31554: PPUSH
31555: LD_OWVAR 2
31559: PPUSH
31560: LD_INT 2
31562: PPUSH
31563: CALL_OW 322
// end ;
31567: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31568: LD_EXP 90
31572: PUSH
31573: LD_EXP 142
31577: AND
31578: IFFALSE 31699
31580: GO 31582
31582: DISABLE
31583: LD_INT 0
31585: PPUSH
31586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31587: LD_ADDR_VAR 0 2
31591: PUSH
31592: LD_INT 22
31594: PUSH
31595: LD_OWVAR 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 21
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 23
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: PPUSH
31636: CALL_OW 69
31640: ST_TO_ADDR
// if not tmp then
31641: LD_VAR 0 2
31645: NOT
31646: IFFALSE 31650
// exit ;
31648: GO 31699
// for i in tmp do
31650: LD_ADDR_VAR 0 1
31654: PUSH
31655: LD_VAR 0 2
31659: PUSH
31660: FOR_IN
31661: IFFALSE 31697
// begin if Crawls ( i ) then
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 318
31672: IFFALSE 31683
// ComWalk ( i ) ;
31674: LD_VAR 0 1
31678: PPUSH
31679: CALL_OW 138
// SetClass ( i , 2 ) ;
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_INT 2
31690: PPUSH
31691: CALL_OW 336
// end ;
31695: GO 31660
31697: POP
31698: POP
// end ;
31699: PPOPN 2
31701: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31702: LD_EXP 90
31706: PUSH
31707: LD_EXP 143
31711: AND
31712: IFFALSE 31993
31714: GO 31716
31716: DISABLE
31717: LD_INT 0
31719: PPUSH
31720: PPUSH
31721: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31722: LD_OWVAR 2
31726: PPUSH
31727: LD_INT 9
31729: PPUSH
31730: LD_INT 1
31732: PPUSH
31733: LD_INT 1
31735: PPUSH
31736: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31740: LD_INT 9
31742: PPUSH
31743: LD_OWVAR 2
31747: PPUSH
31748: CALL_OW 343
// uc_side := 9 ;
31752: LD_ADDR_OWVAR 20
31756: PUSH
31757: LD_INT 9
31759: ST_TO_ADDR
// uc_nation := 2 ;
31760: LD_ADDR_OWVAR 21
31764: PUSH
31765: LD_INT 2
31767: ST_TO_ADDR
// hc_name := Dark Warrior ;
31768: LD_ADDR_OWVAR 26
31772: PUSH
31773: LD_STRING Dark Warrior
31775: ST_TO_ADDR
// hc_gallery :=  ;
31776: LD_ADDR_OWVAR 33
31780: PUSH
31781: LD_STRING 
31783: ST_TO_ADDR
// hc_noskilllimit := true ;
31784: LD_ADDR_OWVAR 76
31788: PUSH
31789: LD_INT 1
31791: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31792: LD_ADDR_OWVAR 31
31796: PUSH
31797: LD_INT 30
31799: PUSH
31800: LD_INT 30
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: LD_INT 30
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// un := CreateHuman ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: CALL_OW 44
31824: ST_TO_ADDR
// hc_noskilllimit := false ;
31825: LD_ADDR_OWVAR 76
31829: PUSH
31830: LD_INT 0
31832: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31833: LD_VAR 0 3
31837: PPUSH
31838: LD_INT 1
31840: PPUSH
31841: CALL_OW 51
// p := 0 ;
31845: LD_ADDR_VAR 0 2
31849: PUSH
31850: LD_INT 0
31852: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31853: LD_INT 35
31855: PPUSH
31856: CALL_OW 67
// p := p + 1 ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: LD_VAR 0 2
31869: PUSH
31870: LD_INT 1
31872: PLUS
31873: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 256
31883: PUSH
31884: LD_INT 1000
31886: LESS
31887: IFFALSE 31901
// SetLives ( un , 1000 ) ;
31889: LD_VAR 0 3
31893: PPUSH
31894: LD_INT 1000
31896: PPUSH
31897: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31901: LD_VAR 0 3
31905: PPUSH
31906: LD_INT 81
31908: PUSH
31909: LD_OWVAR 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 91
31920: PUSH
31921: LD_VAR 0 3
31925: PUSH
31926: LD_INT 30
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PPUSH
31938: CALL_OW 69
31942: PPUSH
31943: LD_VAR 0 3
31947: PPUSH
31948: CALL_OW 74
31952: PPUSH
31953: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31957: LD_VAR 0 2
31961: PUSH
31962: LD_INT 60
31964: GREATER
31965: PUSH
31966: LD_VAR 0 3
31970: PPUSH
31971: CALL_OW 301
31975: OR
31976: IFFALSE 31853
// if un then
31978: LD_VAR 0 3
31982: IFFALSE 31993
// RemoveUnit ( un ) ;
31984: LD_VAR 0 3
31988: PPUSH
31989: CALL_OW 64
// end ;
31993: PPOPN 3
31995: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31996: LD_INT 0
31998: PPUSH
// case cmd of 301 :
31999: LD_VAR 0 1
32003: PUSH
32004: LD_INT 301
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32044
32012: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32013: LD_VAR 0 6
32017: PPUSH
32018: LD_VAR 0 7
32022: PPUSH
32023: LD_VAR 0 8
32027: PPUSH
32028: LD_VAR 0 4
32032: PPUSH
32033: LD_VAR 0 5
32037: PPUSH
32038: CALL 33245 0 5
32042: GO 32165
32044: LD_INT 302
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32089
32052: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32053: LD_VAR 0 6
32057: PPUSH
32058: LD_VAR 0 7
32062: PPUSH
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_VAR 0 9
32072: PPUSH
32073: LD_VAR 0 4
32077: PPUSH
32078: LD_VAR 0 5
32082: PPUSH
32083: CALL 33336 0 6
32087: GO 32165
32089: LD_INT 303
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32134
32097: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32098: LD_VAR 0 6
32102: PPUSH
32103: LD_VAR 0 7
32107: PPUSH
32108: LD_VAR 0 8
32112: PPUSH
32113: LD_VAR 0 9
32117: PPUSH
32118: LD_VAR 0 4
32122: PPUSH
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL 32170 0 6
32132: GO 32165
32134: LD_INT 304
32136: DOUBLE
32137: EQUAL
32138: IFTRUE 32142
32140: GO 32164
32142: POP
// hHackTeleport ( unit , x , y ) ; end ;
32143: LD_VAR 0 2
32147: PPUSH
32148: LD_VAR 0 4
32152: PPUSH
32153: LD_VAR 0 5
32157: PPUSH
32158: CALL 33929 0 3
32162: GO 32165
32164: POP
// end ;
32165: LD_VAR 0 12
32169: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32170: LD_INT 0
32172: PPUSH
32173: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32174: LD_VAR 0 1
32178: PUSH
32179: LD_INT 1
32181: LESS
32182: PUSH
32183: LD_VAR 0 1
32187: PUSH
32188: LD_INT 3
32190: GREATER
32191: OR
32192: PUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 428
32207: OR
32208: IFFALSE 32212
// exit ;
32210: GO 32932
// uc_side := your_side ;
32212: LD_ADDR_OWVAR 20
32216: PUSH
32217: LD_OWVAR 2
32221: ST_TO_ADDR
// uc_nation := nation ;
32222: LD_ADDR_OWVAR 21
32226: PUSH
32227: LD_VAR 0 1
32231: ST_TO_ADDR
// bc_level = 1 ;
32232: LD_ADDR_OWVAR 43
32236: PUSH
32237: LD_INT 1
32239: ST_TO_ADDR
// case btype of 1 :
32240: LD_VAR 0 2
32244: PUSH
32245: LD_INT 1
32247: DOUBLE
32248: EQUAL
32249: IFTRUE 32253
32251: GO 32264
32253: POP
// bc_type := b_depot ; 2 :
32254: LD_ADDR_OWVAR 42
32258: PUSH
32259: LD_INT 0
32261: ST_TO_ADDR
32262: GO 32876
32264: LD_INT 2
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32283
32272: POP
// bc_type := b_warehouse ; 3 :
32273: LD_ADDR_OWVAR 42
32277: PUSH
32278: LD_INT 1
32280: ST_TO_ADDR
32281: GO 32876
32283: LD_INT 3
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32302
32291: POP
// bc_type := b_lab ; 4 .. 9 :
32292: LD_ADDR_OWVAR 42
32296: PUSH
32297: LD_INT 6
32299: ST_TO_ADDR
32300: GO 32876
32302: LD_INT 4
32304: DOUBLE
32305: GREATEREQUAL
32306: IFFALSE 32314
32308: LD_INT 9
32310: DOUBLE
32311: LESSEQUAL
32312: IFTRUE 32316
32314: GO 32368
32316: POP
// begin bc_type := b_lab_half ;
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 7
32324: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32325: LD_ADDR_OWVAR 44
32329: PUSH
32330: LD_INT 10
32332: PUSH
32333: LD_INT 11
32335: PUSH
32336: LD_INT 12
32338: PUSH
32339: LD_INT 15
32341: PUSH
32342: LD_INT 14
32344: PUSH
32345: LD_INT 13
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: PUSH
32356: LD_VAR 0 2
32360: PUSH
32361: LD_INT 3
32363: MINUS
32364: ARRAY
32365: ST_TO_ADDR
// end ; 10 .. 13 :
32366: GO 32876
32368: LD_INT 10
32370: DOUBLE
32371: GREATEREQUAL
32372: IFFALSE 32380
32374: LD_INT 13
32376: DOUBLE
32377: LESSEQUAL
32378: IFTRUE 32382
32380: GO 32459
32382: POP
// begin bc_type := b_lab_full ;
32383: LD_ADDR_OWVAR 42
32387: PUSH
32388: LD_INT 8
32390: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32391: LD_ADDR_OWVAR 44
32395: PUSH
32396: LD_INT 10
32398: PUSH
32399: LD_INT 12
32401: PUSH
32402: LD_INT 14
32404: PUSH
32405: LD_INT 13
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: LD_VAR 0 2
32418: PUSH
32419: LD_INT 9
32421: MINUS
32422: ARRAY
32423: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32424: LD_ADDR_OWVAR 45
32428: PUSH
32429: LD_INT 11
32431: PUSH
32432: LD_INT 15
32434: PUSH
32435: LD_INT 12
32437: PUSH
32438: LD_INT 15
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 9
32454: MINUS
32455: ARRAY
32456: ST_TO_ADDR
// end ; 14 :
32457: GO 32876
32459: LD_INT 14
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32478
32467: POP
// bc_type := b_workshop ; 15 :
32468: LD_ADDR_OWVAR 42
32472: PUSH
32473: LD_INT 2
32475: ST_TO_ADDR
32476: GO 32876
32478: LD_INT 15
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32497
32486: POP
// bc_type := b_factory ; 16 :
32487: LD_ADDR_OWVAR 42
32491: PUSH
32492: LD_INT 3
32494: ST_TO_ADDR
32495: GO 32876
32497: LD_INT 16
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32516
32505: POP
// bc_type := b_ext_gun ; 17 :
32506: LD_ADDR_OWVAR 42
32510: PUSH
32511: LD_INT 17
32513: ST_TO_ADDR
32514: GO 32876
32516: LD_INT 17
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32552
32524: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32525: LD_ADDR_OWVAR 42
32529: PUSH
32530: LD_INT 19
32532: PUSH
32533: LD_INT 23
32535: PUSH
32536: LD_INT 19
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: PUSH
32544: LD_VAR 0 1
32548: ARRAY
32549: ST_TO_ADDR
32550: GO 32876
32552: LD_INT 18
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_ext_radar ; 19 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 20
32568: ST_TO_ADDR
32569: GO 32876
32571: LD_INT 19
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32590
32579: POP
// bc_type := b_ext_radio ; 20 :
32580: LD_ADDR_OWVAR 42
32584: PUSH
32585: LD_INT 22
32587: ST_TO_ADDR
32588: GO 32876
32590: LD_INT 20
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32609
32598: POP
// bc_type := b_ext_siberium ; 21 :
32599: LD_ADDR_OWVAR 42
32603: PUSH
32604: LD_INT 21
32606: ST_TO_ADDR
32607: GO 32876
32609: LD_INT 21
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32628
32617: POP
// bc_type := b_ext_computer ; 22 :
32618: LD_ADDR_OWVAR 42
32622: PUSH
32623: LD_INT 24
32625: ST_TO_ADDR
32626: GO 32876
32628: LD_INT 22
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32647
32636: POP
// bc_type := b_ext_track ; 23 :
32637: LD_ADDR_OWVAR 42
32641: PUSH
32642: LD_INT 16
32644: ST_TO_ADDR
32645: GO 32876
32647: LD_INT 23
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32666
32655: POP
// bc_type := b_ext_laser ; 24 :
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 25
32663: ST_TO_ADDR
32664: GO 32876
32666: LD_INT 24
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32685
32674: POP
// bc_type := b_control_tower ; 25 :
32675: LD_ADDR_OWVAR 42
32679: PUSH
32680: LD_INT 36
32682: ST_TO_ADDR
32683: GO 32876
32685: LD_INT 25
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32704
32693: POP
// bc_type := b_breastwork ; 26 :
32694: LD_ADDR_OWVAR 42
32698: PUSH
32699: LD_INT 31
32701: ST_TO_ADDR
32702: GO 32876
32704: LD_INT 26
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32723
32712: POP
// bc_type := b_bunker ; 27 :
32713: LD_ADDR_OWVAR 42
32717: PUSH
32718: LD_INT 32
32720: ST_TO_ADDR
32721: GO 32876
32723: LD_INT 27
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32742
32731: POP
// bc_type := b_turret ; 28 :
32732: LD_ADDR_OWVAR 42
32736: PUSH
32737: LD_INT 33
32739: ST_TO_ADDR
32740: GO 32876
32742: LD_INT 28
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32761
32750: POP
// bc_type := b_armoury ; 29 :
32751: LD_ADDR_OWVAR 42
32755: PUSH
32756: LD_INT 4
32758: ST_TO_ADDR
32759: GO 32876
32761: LD_INT 29
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32780
32769: POP
// bc_type := b_barracks ; 30 :
32770: LD_ADDR_OWVAR 42
32774: PUSH
32775: LD_INT 5
32777: ST_TO_ADDR
32778: GO 32876
32780: LD_INT 30
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32799
32788: POP
// bc_type := b_solar_power ; 31 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 27
32796: ST_TO_ADDR
32797: GO 32876
32799: LD_INT 31
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32818
32807: POP
// bc_type := b_oil_power ; 32 :
32808: LD_ADDR_OWVAR 42
32812: PUSH
32813: LD_INT 26
32815: ST_TO_ADDR
32816: GO 32876
32818: LD_INT 32
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32837
32826: POP
// bc_type := b_siberite_power ; 33 :
32827: LD_ADDR_OWVAR 42
32831: PUSH
32832: LD_INT 28
32834: ST_TO_ADDR
32835: GO 32876
32837: LD_INT 33
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32856
32845: POP
// bc_type := b_oil_mine ; 34 :
32846: LD_ADDR_OWVAR 42
32850: PUSH
32851: LD_INT 29
32853: ST_TO_ADDR
32854: GO 32876
32856: LD_INT 34
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32875
32864: POP
// bc_type := b_siberite_mine ; end ;
32865: LD_ADDR_OWVAR 42
32869: PUSH
32870: LD_INT 30
32872: ST_TO_ADDR
32873: GO 32876
32875: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32876: LD_ADDR_VAR 0 8
32880: PUSH
32881: LD_VAR 0 5
32885: PPUSH
32886: LD_VAR 0 6
32890: PPUSH
32891: LD_VAR 0 3
32895: PPUSH
32896: CALL_OW 47
32900: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32901: LD_OWVAR 42
32905: PUSH
32906: LD_INT 32
32908: PUSH
32909: LD_INT 33
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: IN
32916: IFFALSE 32932
// PlaceWeaponTurret ( b , weapon ) ;
32918: LD_VAR 0 8
32922: PPUSH
32923: LD_VAR 0 4
32927: PPUSH
32928: CALL_OW 431
// end ;
32932: LD_VAR 0 7
32936: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_INT 22
32950: PUSH
32951: LD_OWVAR 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 30
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 69
32996: ST_TO_ADDR
// if not tmp then
32997: LD_VAR 0 4
33001: NOT
33002: IFFALSE 33006
// exit ;
33004: GO 33065
// for i in tmp do
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: LD_VAR 0 4
33015: PUSH
33016: FOR_IN
33017: IFFALSE 33063
// for j = 1 to 3 do
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: DOUBLE
33025: LD_INT 1
33027: DEC
33028: ST_TO_ADDR
33029: LD_INT 3
33031: PUSH
33032: FOR_TO
33033: IFFALSE 33059
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33035: LD_VAR 0 2
33039: PPUSH
33040: CALL_OW 274
33044: PPUSH
33045: LD_VAR 0 3
33049: PPUSH
33050: LD_INT 99999
33052: PPUSH
33053: CALL_OW 277
33057: GO 33032
33059: POP
33060: POP
33061: GO 33016
33063: POP
33064: POP
// end ;
33065: LD_VAR 0 1
33069: RET
// export function hHackSetLevel10 ; var i , j ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33075: LD_ADDR_VAR 0 2
33079: PUSH
33080: LD_INT 21
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33148
// if IsSelected ( i ) then
33098: LD_VAR 0 2
33102: PPUSH
33103: CALL_OW 306
33107: IFFALSE 33146
// begin for j := 1 to 4 do
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: DOUBLE
33115: LD_INT 1
33117: DEC
33118: ST_TO_ADDR
33119: LD_INT 4
33121: PUSH
33122: FOR_TO
33123: IFFALSE 33144
// SetSkill ( i , j , 10 ) ;
33125: LD_VAR 0 2
33129: PPUSH
33130: LD_VAR 0 3
33134: PPUSH
33135: LD_INT 10
33137: PPUSH
33138: CALL_OW 237
33142: GO 33122
33144: POP
33145: POP
// end ;
33146: GO 33095
33148: POP
33149: POP
// end ;
33150: LD_VAR 0 1
33154: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
33159: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 22
33167: PUSH
33168: LD_OWVAR 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PPUSH
33191: CALL_OW 69
33195: PUSH
33196: FOR_IN
33197: IFFALSE 33238
// begin for j := 1 to 4 do
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: DOUBLE
33205: LD_INT 1
33207: DEC
33208: ST_TO_ADDR
33209: LD_INT 4
33211: PUSH
33212: FOR_TO
33213: IFFALSE 33234
// SetSkill ( i , j , 10 ) ;
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_VAR 0 3
33224: PPUSH
33225: LD_INT 10
33227: PPUSH
33228: CALL_OW 237
33232: GO 33212
33234: POP
33235: POP
// end ;
33236: GO 33196
33238: POP
33239: POP
// end ;
33240: LD_VAR 0 1
33244: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33245: LD_INT 0
33247: PPUSH
// uc_side := your_side ;
33248: LD_ADDR_OWVAR 20
33252: PUSH
33253: LD_OWVAR 2
33257: ST_TO_ADDR
// uc_nation := nation ;
33258: LD_ADDR_OWVAR 21
33262: PUSH
33263: LD_VAR 0 1
33267: ST_TO_ADDR
// InitHc ;
33268: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33272: LD_INT 0
33274: PPUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33289: LD_VAR 0 4
33293: PPUSH
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 428
33303: PUSH
33304: LD_INT 0
33306: EQUAL
33307: IFFALSE 33331
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33309: CALL_OW 44
33313: PPUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: LD_VAR 0 5
33323: PPUSH
33324: LD_INT 1
33326: PPUSH
33327: CALL_OW 48
// end ;
33331: LD_VAR 0 6
33335: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
// uc_side := your_side ;
33340: LD_ADDR_OWVAR 20
33344: PUSH
33345: LD_OWVAR 2
33349: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33350: LD_VAR 0 1
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: IN
33377: IFFALSE 33389
// uc_nation := nation_american else
33379: LD_ADDR_OWVAR 21
33383: PUSH
33384: LD_INT 1
33386: ST_TO_ADDR
33387: GO 33432
// if chassis in [ 11 , 12 , 13 , 14 ] then
33389: LD_VAR 0 1
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: LD_INT 12
33399: PUSH
33400: LD_INT 13
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: IN
33412: IFFALSE 33424
// uc_nation := nation_arabian else
33414: LD_ADDR_OWVAR 21
33418: PUSH
33419: LD_INT 2
33421: ST_TO_ADDR
33422: GO 33432
// uc_nation := nation_russian ;
33424: LD_ADDR_OWVAR 21
33428: PUSH
33429: LD_INT 3
33431: ST_TO_ADDR
// vc_chassis := chassis ;
33432: LD_ADDR_OWVAR 37
33436: PUSH
33437: LD_VAR 0 1
33441: ST_TO_ADDR
// vc_engine := engine ;
33442: LD_ADDR_OWVAR 39
33446: PUSH
33447: LD_VAR 0 2
33451: ST_TO_ADDR
// vc_control := control ;
33452: LD_ADDR_OWVAR 38
33456: PUSH
33457: LD_VAR 0 3
33461: ST_TO_ADDR
// vc_weapon := weapon ;
33462: LD_ADDR_OWVAR 40
33466: PUSH
33467: LD_VAR 0 4
33471: ST_TO_ADDR
// un := CreateVehicle ;
33472: LD_ADDR_VAR 0 8
33476: PUSH
33477: CALL_OW 45
33481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33482: LD_VAR 0 8
33486: PPUSH
33487: LD_INT 0
33489: PPUSH
33490: LD_INT 5
33492: PPUSH
33493: CALL_OW 12
33497: PPUSH
33498: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33502: LD_VAR 0 8
33506: PPUSH
33507: LD_VAR 0 5
33511: PPUSH
33512: LD_VAR 0 6
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: CALL_OW 48
// end ;
33524: LD_VAR 0 7
33528: RET
// export hInvincible ; every 1 do
33529: GO 33531
33531: DISABLE
// hInvincible := [ ] ;
33532: LD_ADDR_EXP 144
33536: PUSH
33537: EMPTY
33538: ST_TO_ADDR
33539: END
// every 10 do var i ;
33540: GO 33542
33542: DISABLE
33543: LD_INT 0
33545: PPUSH
// begin enable ;
33546: ENABLE
// if not hInvincible then
33547: LD_EXP 144
33551: NOT
33552: IFFALSE 33556
// exit ;
33554: GO 33600
// for i in hInvincible do
33556: LD_ADDR_VAR 0 1
33560: PUSH
33561: LD_EXP 144
33565: PUSH
33566: FOR_IN
33567: IFFALSE 33598
// if GetLives ( i ) < 1000 then
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 256
33578: PUSH
33579: LD_INT 1000
33581: LESS
33582: IFFALSE 33596
// SetLives ( i , 1000 ) ;
33584: LD_VAR 0 1
33588: PPUSH
33589: LD_INT 1000
33591: PPUSH
33592: CALL_OW 234
33596: GO 33566
33598: POP
33599: POP
// end ;
33600: PPOPN 1
33602: END
// export function hHackInvincible ; var i ; begin
33603: LD_INT 0
33605: PPUSH
33606: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33607: LD_ADDR_VAR 0 2
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 21
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 21
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: PPUSH
33640: CALL_OW 69
33644: PUSH
33645: FOR_IN
33646: IFFALSE 33707
// if IsSelected ( i ) then
33648: LD_VAR 0 2
33652: PPUSH
33653: CALL_OW 306
33657: IFFALSE 33705
// begin if i in hInvincible then
33659: LD_VAR 0 2
33663: PUSH
33664: LD_EXP 144
33668: IN
33669: IFFALSE 33689
// hInvincible := hInvincible diff i else
33671: LD_ADDR_EXP 144
33675: PUSH
33676: LD_EXP 144
33680: PUSH
33681: LD_VAR 0 2
33685: DIFF
33686: ST_TO_ADDR
33687: GO 33705
// hInvincible := hInvincible union i ;
33689: LD_ADDR_EXP 144
33693: PUSH
33694: LD_EXP 144
33698: PUSH
33699: LD_VAR 0 2
33703: UNION
33704: ST_TO_ADDR
// end ;
33705: GO 33645
33707: POP
33708: POP
// end ;
33709: LD_VAR 0 1
33713: RET
// export function hHackInvisible ; var i , j ; begin
33714: LD_INT 0
33716: PPUSH
33717: PPUSH
33718: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_INT 21
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PPUSH
33734: CALL_OW 69
33738: PUSH
33739: FOR_IN
33740: IFFALSE 33764
// if IsSelected ( i ) then
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 306
33751: IFFALSE 33762
// ComForceInvisible ( i ) ;
33753: LD_VAR 0 2
33757: PPUSH
33758: CALL_OW 496
33762: GO 33739
33764: POP
33765: POP
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackChangeYourSide ; begin
33771: LD_INT 0
33773: PPUSH
// if your_side = 8 then
33774: LD_OWVAR 2
33778: PUSH
33779: LD_INT 8
33781: EQUAL
33782: IFFALSE 33794
// your_side := 0 else
33784: LD_ADDR_OWVAR 2
33788: PUSH
33789: LD_INT 0
33791: ST_TO_ADDR
33792: GO 33808
// your_side := your_side + 1 ;
33794: LD_ADDR_OWVAR 2
33798: PUSH
33799: LD_OWVAR 2
33803: PUSH
33804: LD_INT 1
33806: PLUS
33807: ST_TO_ADDR
// end ;
33808: LD_VAR 0 1
33812: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
33817: PPUSH
// for i in all_units do
33818: LD_ADDR_VAR 0 2
33822: PUSH
33823: LD_OWVAR 3
33827: PUSH
33828: FOR_IN
33829: IFFALSE 33907
// if IsSelected ( i ) then
33831: LD_VAR 0 2
33835: PPUSH
33836: CALL_OW 306
33840: IFFALSE 33905
// begin j := GetSide ( i ) ;
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: CALL_OW 255
33856: ST_TO_ADDR
// if j = 8 then
33857: LD_VAR 0 3
33861: PUSH
33862: LD_INT 8
33864: EQUAL
33865: IFFALSE 33877
// j := 0 else
33867: LD_ADDR_VAR 0 3
33871: PUSH
33872: LD_INT 0
33874: ST_TO_ADDR
33875: GO 33891
// j := j + 1 ;
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_VAR 0 3
33886: PUSH
33887: LD_INT 1
33889: PLUS
33890: ST_TO_ADDR
// SetSide ( i , j ) ;
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: CALL_OW 235
// end ;
33905: GO 33828
33907: POP
33908: POP
// end ;
33909: LD_VAR 0 1
33913: RET
// export function hHackFog ; begin
33914: LD_INT 0
33916: PPUSH
// FogOff ( true ) ;
33917: LD_INT 1
33919: PPUSH
33920: CALL_OW 344
// end ;
33924: LD_VAR 0 1
33928: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33929: LD_INT 0
33931: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_VAR 0 2
33941: PPUSH
33942: LD_VAR 0 3
33946: PPUSH
33947: LD_INT 1
33949: PPUSH
33950: LD_INT 1
33952: PPUSH
33953: CALL_OW 483
// CenterOnXY ( x , y ) ;
33957: LD_VAR 0 2
33961: PPUSH
33962: LD_VAR 0 3
33966: PPUSH
33967: CALL_OW 84
// end ; end_of_file
33971: LD_VAR 0 4
33975: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 264
33991: PUSH
33992: LD_EXP 161
33996: EQUAL
33997: IFFALSE 34069
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33999: LD_INT 68
34001: PPUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: CALL_OW 255
34011: PPUSH
34012: CALL_OW 321
34016: PUSH
34017: LD_INT 2
34019: EQUAL
34020: IFFALSE 34032
// eff := 70 else
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: LD_INT 70
34029: ST_TO_ADDR
34030: GO 34040
// eff := 30 ;
34032: LD_ADDR_VAR 0 4
34036: PUSH
34037: LD_INT 30
34039: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 250
34049: PPUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 251
34059: PPUSH
34060: LD_VAR 0 4
34064: PPUSH
34065: CALL_OW 495
// end ; end ;
34069: LD_VAR 0 2
34073: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34074: LD_INT 0
34076: PPUSH
// end ;
34077: LD_VAR 0 4
34081: RET
// export function SOS_Command ( cmd ) ; begin
34082: LD_INT 0
34084: PPUSH
// end ;
34085: LD_VAR 0 2
34089: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34090: LD_INT 0
34092: PPUSH
// if cmd = 121 then
34093: LD_VAR 0 1
34097: PUSH
34098: LD_INT 121
34100: EQUAL
34101: IFFALSE 34103
// end ;
34103: LD_VAR 0 6
34107: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34108: LD_INT 0
34110: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34111: LD_VAR 0 1
34115: PUSH
34116: LD_INT 250
34118: EQUAL
34119: PUSH
34120: LD_VAR 0 2
34124: PPUSH
34125: CALL_OW 264
34129: PUSH
34130: LD_EXP 164
34134: EQUAL
34135: AND
34136: IFFALSE 34157
// MinerPlaceMine ( unit , x , y ) ;
34138: LD_VAR 0 2
34142: PPUSH
34143: LD_VAR 0 4
34147: PPUSH
34148: LD_VAR 0 5
34152: PPUSH
34153: CALL 36506 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34157: LD_VAR 0 1
34161: PUSH
34162: LD_INT 251
34164: EQUAL
34165: PUSH
34166: LD_VAR 0 2
34170: PPUSH
34171: CALL_OW 264
34175: PUSH
34176: LD_EXP 164
34180: EQUAL
34181: AND
34182: IFFALSE 34203
// MinerDetonateMine ( unit , x , y ) ;
34184: LD_VAR 0 2
34188: PPUSH
34189: LD_VAR 0 4
34193: PPUSH
34194: LD_VAR 0 5
34198: PPUSH
34199: CALL 36783 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34203: LD_VAR 0 1
34207: PUSH
34208: LD_INT 252
34210: EQUAL
34211: PUSH
34212: LD_VAR 0 2
34216: PPUSH
34217: CALL_OW 264
34221: PUSH
34222: LD_EXP 164
34226: EQUAL
34227: AND
34228: IFFALSE 34249
// MinerCreateMinefield ( unit , x , y ) ;
34230: LD_VAR 0 2
34234: PPUSH
34235: LD_VAR 0 4
34239: PPUSH
34240: LD_VAR 0 5
34244: PPUSH
34245: CALL 37200 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34249: LD_VAR 0 1
34253: PUSH
34254: LD_INT 253
34256: EQUAL
34257: PUSH
34258: LD_VAR 0 2
34262: PPUSH
34263: CALL_OW 257
34267: PUSH
34268: LD_INT 5
34270: EQUAL
34271: AND
34272: IFFALSE 34293
// ComBinocular ( unit , x , y ) ;
34274: LD_VAR 0 2
34278: PPUSH
34279: LD_VAR 0 4
34283: PPUSH
34284: LD_VAR 0 5
34288: PPUSH
34289: CALL 37571 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34293: LD_VAR 0 1
34297: PUSH
34298: LD_INT 254
34300: EQUAL
34301: PUSH
34302: LD_VAR 0 2
34306: PPUSH
34307: CALL_OW 264
34311: PUSH
34312: LD_EXP 159
34316: EQUAL
34317: AND
34318: PUSH
34319: LD_VAR 0 3
34323: PPUSH
34324: CALL_OW 263
34328: PUSH
34329: LD_INT 3
34331: EQUAL
34332: AND
34333: IFFALSE 34349
// HackDestroyVehicle ( unit , selectedUnit ) ;
34335: LD_VAR 0 2
34339: PPUSH
34340: LD_VAR 0 3
34344: PPUSH
34345: CALL 35866 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34349: LD_VAR 0 1
34353: PUSH
34354: LD_INT 255
34356: EQUAL
34357: PUSH
34358: LD_VAR 0 2
34362: PPUSH
34363: CALL_OW 264
34367: PUSH
34368: LD_INT 14
34370: PUSH
34371: LD_INT 53
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: IN
34378: AND
34379: PUSH
34380: LD_VAR 0 4
34384: PPUSH
34385: LD_VAR 0 5
34389: PPUSH
34390: CALL_OW 488
34394: AND
34395: IFFALSE 34419
// CutTreeXYR ( unit , x , y , 12 ) ;
34397: LD_VAR 0 2
34401: PPUSH
34402: LD_VAR 0 4
34406: PPUSH
34407: LD_VAR 0 5
34411: PPUSH
34412: LD_INT 12
34414: PPUSH
34415: CALL 34432 0 4
// end ;
34419: LD_VAR 0 6
34423: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
34424: LD_INT 0
34426: PPUSH
// end ;
34427: LD_VAR 0 4
34431: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34432: LD_INT 0
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34443: LD_VAR 0 1
34447: NOT
34448: PUSH
34449: LD_VAR 0 2
34453: PPUSH
34454: LD_VAR 0 3
34458: PPUSH
34459: CALL_OW 488
34463: NOT
34464: OR
34465: PUSH
34466: LD_VAR 0 4
34470: NOT
34471: OR
34472: IFFALSE 34476
// exit ;
34474: GO 34816
// list := [ ] ;
34476: LD_ADDR_VAR 0 13
34480: PUSH
34481: EMPTY
34482: ST_TO_ADDR
// if x - r < 0 then
34483: LD_VAR 0 2
34487: PUSH
34488: LD_VAR 0 4
34492: MINUS
34493: PUSH
34494: LD_INT 0
34496: LESS
34497: IFFALSE 34509
// min_x := 0 else
34499: LD_ADDR_VAR 0 7
34503: PUSH
34504: LD_INT 0
34506: ST_TO_ADDR
34507: GO 34525
// min_x := x - r ;
34509: LD_ADDR_VAR 0 7
34513: PUSH
34514: LD_VAR 0 2
34518: PUSH
34519: LD_VAR 0 4
34523: MINUS
34524: ST_TO_ADDR
// if y - r < 0 then
34525: LD_VAR 0 3
34529: PUSH
34530: LD_VAR 0 4
34534: MINUS
34535: PUSH
34536: LD_INT 0
34538: LESS
34539: IFFALSE 34551
// min_y := 0 else
34541: LD_ADDR_VAR 0 8
34545: PUSH
34546: LD_INT 0
34548: ST_TO_ADDR
34549: GO 34567
// min_y := y - r ;
34551: LD_ADDR_VAR 0 8
34555: PUSH
34556: LD_VAR 0 3
34560: PUSH
34561: LD_VAR 0 4
34565: MINUS
34566: ST_TO_ADDR
// max_x := x + r ;
34567: LD_ADDR_VAR 0 9
34571: PUSH
34572: LD_VAR 0 2
34576: PUSH
34577: LD_VAR 0 4
34581: PLUS
34582: ST_TO_ADDR
// max_y := y + r ;
34583: LD_ADDR_VAR 0 10
34587: PUSH
34588: LD_VAR 0 3
34592: PUSH
34593: LD_VAR 0 4
34597: PLUS
34598: ST_TO_ADDR
// for _x = min_x to max_x do
34599: LD_ADDR_VAR 0 11
34603: PUSH
34604: DOUBLE
34605: LD_VAR 0 7
34609: DEC
34610: ST_TO_ADDR
34611: LD_VAR 0 9
34615: PUSH
34616: FOR_TO
34617: IFFALSE 34734
// for _y = min_y to max_y do
34619: LD_ADDR_VAR 0 12
34623: PUSH
34624: DOUBLE
34625: LD_VAR 0 8
34629: DEC
34630: ST_TO_ADDR
34631: LD_VAR 0 10
34635: PUSH
34636: FOR_TO
34637: IFFALSE 34730
// begin if not ValidHex ( _x , _y ) then
34639: LD_VAR 0 11
34643: PPUSH
34644: LD_VAR 0 12
34648: PPUSH
34649: CALL_OW 488
34653: NOT
34654: IFFALSE 34658
// continue ;
34656: GO 34636
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34658: LD_VAR 0 11
34662: PPUSH
34663: LD_VAR 0 12
34667: PPUSH
34668: CALL_OW 351
34672: PUSH
34673: LD_VAR 0 11
34677: PPUSH
34678: LD_VAR 0 12
34682: PPUSH
34683: CALL_OW 554
34687: AND
34688: IFFALSE 34728
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34690: LD_ADDR_VAR 0 13
34694: PUSH
34695: LD_VAR 0 13
34699: PPUSH
34700: LD_VAR 0 13
34704: PUSH
34705: LD_INT 1
34707: PLUS
34708: PPUSH
34709: LD_VAR 0 11
34713: PUSH
34714: LD_VAR 0 12
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PPUSH
34723: CALL_OW 2
34727: ST_TO_ADDR
// end ;
34728: GO 34636
34730: POP
34731: POP
34732: GO 34616
34734: POP
34735: POP
// if not list then
34736: LD_VAR 0 13
34740: NOT
34741: IFFALSE 34745
// exit ;
34743: GO 34816
// for i in list do
34745: LD_ADDR_VAR 0 6
34749: PUSH
34750: LD_VAR 0 13
34754: PUSH
34755: FOR_IN
34756: IFFALSE 34814
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34758: LD_VAR 0 1
34762: PPUSH
34763: LD_STRING M
34765: PUSH
34766: LD_VAR 0 6
34770: PUSH
34771: LD_INT 1
34773: ARRAY
34774: PUSH
34775: LD_VAR 0 6
34779: PUSH
34780: LD_INT 2
34782: ARRAY
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: PPUSH
34808: CALL_OW 447
34812: GO 34755
34814: POP
34815: POP
// end ;
34816: LD_VAR 0 5
34820: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34821: LD_EXP 147
34825: NOT
34826: IFFALSE 34876
34828: GO 34830
34830: DISABLE
// begin initHack := true ;
34831: LD_ADDR_EXP 147
34835: PUSH
34836: LD_INT 1
34838: ST_TO_ADDR
// hackTanks := [ ] ;
34839: LD_ADDR_EXP 148
34843: PUSH
34844: EMPTY
34845: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34846: LD_ADDR_EXP 149
34850: PUSH
34851: EMPTY
34852: ST_TO_ADDR
// hackLimit := 3 ;
34853: LD_ADDR_EXP 150
34857: PUSH
34858: LD_INT 3
34860: ST_TO_ADDR
// hackDist := 12 ;
34861: LD_ADDR_EXP 151
34865: PUSH
34866: LD_INT 12
34868: ST_TO_ADDR
// hackCounter := [ ] ;
34869: LD_ADDR_EXP 152
34873: PUSH
34874: EMPTY
34875: ST_TO_ADDR
// end ;
34876: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34877: LD_EXP 147
34881: PUSH
34882: LD_INT 34
34884: PUSH
34885: LD_EXP 159
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PPUSH
34894: CALL_OW 69
34898: AND
34899: IFFALSE 35154
34901: GO 34903
34903: DISABLE
34904: LD_INT 0
34906: PPUSH
34907: PPUSH
// begin enable ;
34908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34909: LD_ADDR_VAR 0 1
34913: PUSH
34914: LD_INT 34
34916: PUSH
34917: LD_EXP 159
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PPUSH
34926: CALL_OW 69
34930: PUSH
34931: FOR_IN
34932: IFFALSE 35152
// begin if not i in hackTanks then
34934: LD_VAR 0 1
34938: PUSH
34939: LD_EXP 148
34943: IN
34944: NOT
34945: IFFALSE 35028
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34947: LD_ADDR_EXP 148
34951: PUSH
34952: LD_EXP 148
34956: PPUSH
34957: LD_EXP 148
34961: PUSH
34962: LD_INT 1
34964: PLUS
34965: PPUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 1
34975: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34976: LD_ADDR_EXP 149
34980: PUSH
34981: LD_EXP 149
34985: PPUSH
34986: LD_EXP 149
34990: PUSH
34991: LD_INT 1
34993: PLUS
34994: PPUSH
34995: EMPTY
34996: PPUSH
34997: CALL_OW 1
35001: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35002: LD_ADDR_EXP 152
35006: PUSH
35007: LD_EXP 152
35011: PPUSH
35012: LD_EXP 152
35016: PUSH
35017: LD_INT 1
35019: PLUS
35020: PPUSH
35021: EMPTY
35022: PPUSH
35023: CALL_OW 1
35027: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 302
35037: NOT
35038: IFFALSE 35051
// begin HackUnlinkAll ( i ) ;
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL 35157 0 1
// continue ;
35049: GO 34931
// end ; HackCheckCapturedStatus ( i ) ;
35051: LD_VAR 0 1
35055: PPUSH
35056: CALL 35600 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35060: LD_ADDR_VAR 0 2
35064: PUSH
35065: LD_INT 81
35067: PUSH
35068: LD_VAR 0 1
35072: PPUSH
35073: CALL_OW 255
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 33
35084: PUSH
35085: LD_INT 3
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 91
35094: PUSH
35095: LD_VAR 0 1
35099: PUSH
35100: LD_EXP 151
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 50
35112: PUSH
35113: EMPTY
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: PPUSH
35122: CALL_OW 69
35126: ST_TO_ADDR
// if not tmp then
35127: LD_VAR 0 2
35131: NOT
35132: IFFALSE 35136
// continue ;
35134: GO 34931
// HackLink ( i , tmp ) ;
35136: LD_VAR 0 1
35140: PPUSH
35141: LD_VAR 0 2
35145: PPUSH
35146: CALL 35293 0 2
// end ;
35150: GO 34931
35152: POP
35153: POP
// end ;
35154: PPOPN 2
35156: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35157: LD_INT 0
35159: PPUSH
35160: PPUSH
35161: PPUSH
// if not hack in hackTanks then
35162: LD_VAR 0 1
35166: PUSH
35167: LD_EXP 148
35171: IN
35172: NOT
35173: IFFALSE 35177
// exit ;
35175: GO 35288
// index := GetElementIndex ( hackTanks , hack ) ;
35177: LD_ADDR_VAR 0 4
35181: PUSH
35182: LD_EXP 148
35186: PPUSH
35187: LD_VAR 0 1
35191: PPUSH
35192: CALL 42866 0 2
35196: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35197: LD_EXP 149
35201: PUSH
35202: LD_VAR 0 4
35206: ARRAY
35207: IFFALSE 35288
// begin for i in hackTanksCaptured [ index ] do
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_EXP 149
35218: PUSH
35219: LD_VAR 0 4
35223: ARRAY
35224: PUSH
35225: FOR_IN
35226: IFFALSE 35252
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35228: LD_VAR 0 3
35232: PUSH
35233: LD_INT 1
35235: ARRAY
35236: PPUSH
35237: LD_VAR 0 3
35241: PUSH
35242: LD_INT 2
35244: ARRAY
35245: PPUSH
35246: CALL_OW 235
35250: GO 35225
35252: POP
35253: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35254: LD_ADDR_EXP 149
35258: PUSH
35259: LD_EXP 149
35263: PPUSH
35264: LD_VAR 0 4
35268: PPUSH
35269: EMPTY
35270: PPUSH
35271: CALL_OW 1
35275: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35276: LD_VAR 0 1
35280: PPUSH
35281: LD_INT 0
35283: PPUSH
35284: CALL_OW 505
// end ; end ;
35288: LD_VAR 0 2
35292: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35293: LD_INT 0
35295: PPUSH
35296: PPUSH
35297: PPUSH
// if not hack in hackTanks or not vehicles then
35298: LD_VAR 0 1
35302: PUSH
35303: LD_EXP 148
35307: IN
35308: NOT
35309: PUSH
35310: LD_VAR 0 2
35314: NOT
35315: OR
35316: IFFALSE 35320
// exit ;
35318: GO 35595
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35320: LD_ADDR_VAR 0 2
35324: PUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: LD_VAR 0 2
35334: PPUSH
35335: LD_INT 1
35337: PPUSH
35338: LD_INT 1
35340: PPUSH
35341: CALL 43516 0 4
35345: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35346: LD_ADDR_VAR 0 5
35350: PUSH
35351: LD_EXP 148
35355: PPUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL 42866 0 2
35365: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35366: LD_EXP 149
35370: PUSH
35371: LD_VAR 0 5
35375: ARRAY
35376: PUSH
35377: LD_EXP 150
35381: LESS
35382: IFFALSE 35571
// begin for i := 1 to vehicles do
35384: LD_ADDR_VAR 0 4
35388: PUSH
35389: DOUBLE
35390: LD_INT 1
35392: DEC
35393: ST_TO_ADDR
35394: LD_VAR 0 2
35398: PUSH
35399: FOR_TO
35400: IFFALSE 35569
// begin if hackTanksCaptured [ index ] = hackLimit then
35402: LD_EXP 149
35406: PUSH
35407: LD_VAR 0 5
35411: ARRAY
35412: PUSH
35413: LD_EXP 150
35417: EQUAL
35418: IFFALSE 35422
// break ;
35420: GO 35569
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35422: LD_ADDR_EXP 152
35426: PUSH
35427: LD_EXP 152
35431: PPUSH
35432: LD_VAR 0 5
35436: PPUSH
35437: LD_EXP 152
35441: PUSH
35442: LD_VAR 0 5
35446: ARRAY
35447: PUSH
35448: LD_INT 1
35450: PLUS
35451: PPUSH
35452: CALL_OW 1
35456: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35457: LD_ADDR_EXP 149
35461: PUSH
35462: LD_EXP 149
35466: PPUSH
35467: LD_VAR 0 5
35471: PUSH
35472: LD_EXP 149
35476: PUSH
35477: LD_VAR 0 5
35481: ARRAY
35482: PUSH
35483: LD_INT 1
35485: PLUS
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PPUSH
35491: LD_VAR 0 2
35495: PUSH
35496: LD_VAR 0 4
35500: ARRAY
35501: PUSH
35502: LD_VAR 0 2
35506: PUSH
35507: LD_VAR 0 4
35511: ARRAY
35512: PPUSH
35513: CALL_OW 255
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL 43081 0 3
35526: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35527: LD_VAR 0 2
35531: PUSH
35532: LD_VAR 0 4
35536: ARRAY
35537: PPUSH
35538: LD_VAR 0 1
35542: PPUSH
35543: CALL_OW 255
35547: PPUSH
35548: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35552: LD_VAR 0 2
35556: PUSH
35557: LD_VAR 0 4
35561: ARRAY
35562: PPUSH
35563: CALL_OW 141
// end ;
35567: GO 35399
35569: POP
35570: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35571: LD_VAR 0 1
35575: PPUSH
35576: LD_EXP 149
35580: PUSH
35581: LD_VAR 0 5
35585: ARRAY
35586: PUSH
35587: LD_INT 0
35589: PLUS
35590: PPUSH
35591: CALL_OW 505
// end ;
35595: LD_VAR 0 3
35599: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
// if not hack in hackTanks then
35606: LD_VAR 0 1
35610: PUSH
35611: LD_EXP 148
35615: IN
35616: NOT
35617: IFFALSE 35621
// exit ;
35619: GO 35861
// index := GetElementIndex ( hackTanks , hack ) ;
35621: LD_ADDR_VAR 0 4
35625: PUSH
35626: LD_EXP 148
35630: PPUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL 42866 0 2
35640: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35641: LD_ADDR_VAR 0 3
35645: PUSH
35646: DOUBLE
35647: LD_EXP 149
35651: PUSH
35652: LD_VAR 0 4
35656: ARRAY
35657: INC
35658: ST_TO_ADDR
35659: LD_INT 1
35661: PUSH
35662: FOR_DOWNTO
35663: IFFALSE 35835
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35665: LD_ADDR_VAR 0 5
35669: PUSH
35670: LD_EXP 149
35674: PUSH
35675: LD_VAR 0 4
35679: ARRAY
35680: PUSH
35681: LD_VAR 0 3
35685: ARRAY
35686: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35687: LD_VAR 0 5
35691: PUSH
35692: LD_INT 1
35694: ARRAY
35695: PPUSH
35696: CALL_OW 302
35700: NOT
35701: PUSH
35702: LD_VAR 0 5
35706: PUSH
35707: LD_INT 1
35709: ARRAY
35710: PPUSH
35711: CALL_OW 255
35715: PUSH
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 255
35725: NONEQUAL
35726: OR
35727: IFFALSE 35833
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35729: LD_VAR 0 5
35733: PUSH
35734: LD_INT 1
35736: ARRAY
35737: PPUSH
35738: CALL_OW 305
35742: PUSH
35743: LD_VAR 0 5
35747: PUSH
35748: LD_INT 1
35750: ARRAY
35751: PPUSH
35752: CALL_OW 255
35756: PUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 255
35766: EQUAL
35767: AND
35768: IFFALSE 35792
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35770: LD_VAR 0 5
35774: PUSH
35775: LD_INT 1
35777: ARRAY
35778: PPUSH
35779: LD_VAR 0 5
35783: PUSH
35784: LD_INT 2
35786: ARRAY
35787: PPUSH
35788: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35792: LD_ADDR_EXP 149
35796: PUSH
35797: LD_EXP 149
35801: PPUSH
35802: LD_VAR 0 4
35806: PPUSH
35807: LD_EXP 149
35811: PUSH
35812: LD_VAR 0 4
35816: ARRAY
35817: PPUSH
35818: LD_VAR 0 3
35822: PPUSH
35823: CALL_OW 3
35827: PPUSH
35828: CALL_OW 1
35832: ST_TO_ADDR
// end ; end ;
35833: GO 35662
35835: POP
35836: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35837: LD_VAR 0 1
35841: PPUSH
35842: LD_EXP 149
35846: PUSH
35847: LD_VAR 0 4
35851: ARRAY
35852: PUSH
35853: LD_INT 0
35855: PLUS
35856: PPUSH
35857: CALL_OW 505
// end ;
35861: LD_VAR 0 2
35865: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
// if not hack in hackTanks then
35872: LD_VAR 0 1
35876: PUSH
35877: LD_EXP 148
35881: IN
35882: NOT
35883: IFFALSE 35887
// exit ;
35885: GO 35972
// index := GetElementIndex ( hackTanks , hack ) ;
35887: LD_ADDR_VAR 0 5
35891: PUSH
35892: LD_EXP 148
35896: PPUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL 42866 0 2
35906: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35907: LD_ADDR_VAR 0 4
35911: PUSH
35912: DOUBLE
35913: LD_INT 1
35915: DEC
35916: ST_TO_ADDR
35917: LD_EXP 149
35921: PUSH
35922: LD_VAR 0 5
35926: ARRAY
35927: PUSH
35928: FOR_TO
35929: IFFALSE 35970
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35931: LD_EXP 149
35935: PUSH
35936: LD_VAR 0 5
35940: ARRAY
35941: PUSH
35942: LD_VAR 0 4
35946: ARRAY
35947: PUSH
35948: LD_INT 1
35950: ARRAY
35951: PUSH
35952: LD_VAR 0 2
35956: EQUAL
35957: IFFALSE 35968
// KillUnit ( vehicle ) ;
35959: LD_VAR 0 2
35963: PPUSH
35964: CALL_OW 66
35968: GO 35928
35970: POP
35971: POP
// end ;
35972: LD_VAR 0 3
35976: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35977: LD_EXP 153
35981: NOT
35982: IFFALSE 36017
35984: GO 35986
35986: DISABLE
// begin initMiner := true ;
35987: LD_ADDR_EXP 153
35991: PUSH
35992: LD_INT 1
35994: ST_TO_ADDR
// minersList := [ ] ;
35995: LD_ADDR_EXP 154
35999: PUSH
36000: EMPTY
36001: ST_TO_ADDR
// minerMinesList := [ ] ;
36002: LD_ADDR_EXP 155
36006: PUSH
36007: EMPTY
36008: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36009: LD_ADDR_EXP 156
36013: PUSH
36014: LD_INT 5
36016: ST_TO_ADDR
// end ;
36017: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36018: LD_EXP 153
36022: PUSH
36023: LD_INT 34
36025: PUSH
36026: LD_EXP 164
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PPUSH
36035: CALL_OW 69
36039: AND
36040: IFFALSE 36503
36042: GO 36044
36044: DISABLE
36045: LD_INT 0
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
// begin enable ;
36051: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36052: LD_ADDR_VAR 0 1
36056: PUSH
36057: LD_INT 34
36059: PUSH
36060: LD_EXP 164
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PPUSH
36069: CALL_OW 69
36073: PUSH
36074: FOR_IN
36075: IFFALSE 36147
// begin if not i in minersList then
36077: LD_VAR 0 1
36081: PUSH
36082: LD_EXP 154
36086: IN
36087: NOT
36088: IFFALSE 36145
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36090: LD_ADDR_EXP 154
36094: PUSH
36095: LD_EXP 154
36099: PPUSH
36100: LD_EXP 154
36104: PUSH
36105: LD_INT 1
36107: PLUS
36108: PPUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 1
36118: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36119: LD_ADDR_EXP 155
36123: PUSH
36124: LD_EXP 155
36128: PPUSH
36129: LD_EXP 155
36133: PUSH
36134: LD_INT 1
36136: PLUS
36137: PPUSH
36138: EMPTY
36139: PPUSH
36140: CALL_OW 1
36144: ST_TO_ADDR
// end end ;
36145: GO 36074
36147: POP
36148: POP
// for i := minerMinesList downto 1 do
36149: LD_ADDR_VAR 0 1
36153: PUSH
36154: DOUBLE
36155: LD_EXP 155
36159: INC
36160: ST_TO_ADDR
36161: LD_INT 1
36163: PUSH
36164: FOR_DOWNTO
36165: IFFALSE 36501
// begin if IsLive ( minersList [ i ] ) then
36167: LD_EXP 154
36171: PUSH
36172: LD_VAR 0 1
36176: ARRAY
36177: PPUSH
36178: CALL_OW 300
36182: IFFALSE 36210
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36184: LD_EXP 154
36188: PUSH
36189: LD_VAR 0 1
36193: ARRAY
36194: PPUSH
36195: LD_EXP 155
36199: PUSH
36200: LD_VAR 0 1
36204: ARRAY
36205: PPUSH
36206: CALL_OW 505
// if not minerMinesList [ i ] then
36210: LD_EXP 155
36214: PUSH
36215: LD_VAR 0 1
36219: ARRAY
36220: NOT
36221: IFFALSE 36225
// continue ;
36223: GO 36164
// for j := minerMinesList [ i ] downto 1 do
36225: LD_ADDR_VAR 0 2
36229: PUSH
36230: DOUBLE
36231: LD_EXP 155
36235: PUSH
36236: LD_VAR 0 1
36240: ARRAY
36241: INC
36242: ST_TO_ADDR
36243: LD_INT 1
36245: PUSH
36246: FOR_DOWNTO
36247: IFFALSE 36497
// begin side := GetSide ( minersList [ i ] ) ;
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: LD_EXP 154
36258: PUSH
36259: LD_VAR 0 1
36263: ARRAY
36264: PPUSH
36265: CALL_OW 255
36269: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36270: LD_ADDR_VAR 0 4
36274: PUSH
36275: LD_EXP 155
36279: PUSH
36280: LD_VAR 0 1
36284: ARRAY
36285: PUSH
36286: LD_VAR 0 2
36290: ARRAY
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: PPUSH
36296: LD_EXP 155
36300: PUSH
36301: LD_VAR 0 1
36305: ARRAY
36306: PUSH
36307: LD_VAR 0 2
36311: ARRAY
36312: PUSH
36313: LD_INT 2
36315: ARRAY
36316: PPUSH
36317: CALL_OW 428
36321: ST_TO_ADDR
// if not tmp then
36322: LD_VAR 0 4
36326: NOT
36327: IFFALSE 36331
// continue ;
36329: GO 36246
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36331: LD_VAR 0 4
36335: PUSH
36336: LD_INT 81
36338: PUSH
36339: LD_VAR 0 3
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PPUSH
36348: CALL_OW 69
36352: IN
36353: PUSH
36354: LD_EXP 155
36358: PUSH
36359: LD_VAR 0 1
36363: ARRAY
36364: PUSH
36365: LD_VAR 0 2
36369: ARRAY
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PPUSH
36375: LD_EXP 155
36379: PUSH
36380: LD_VAR 0 1
36384: ARRAY
36385: PUSH
36386: LD_VAR 0 2
36390: ARRAY
36391: PUSH
36392: LD_INT 2
36394: ARRAY
36395: PPUSH
36396: CALL_OW 458
36400: AND
36401: IFFALSE 36495
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36403: LD_EXP 155
36407: PUSH
36408: LD_VAR 0 1
36412: ARRAY
36413: PUSH
36414: LD_VAR 0 2
36418: ARRAY
36419: PUSH
36420: LD_INT 1
36422: ARRAY
36423: PPUSH
36424: LD_EXP 155
36428: PUSH
36429: LD_VAR 0 1
36433: ARRAY
36434: PUSH
36435: LD_VAR 0 2
36439: ARRAY
36440: PUSH
36441: LD_INT 2
36443: ARRAY
36444: PPUSH
36445: LD_VAR 0 3
36449: PPUSH
36450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36454: LD_ADDR_EXP 155
36458: PUSH
36459: LD_EXP 155
36463: PPUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: LD_EXP 155
36473: PUSH
36474: LD_VAR 0 1
36478: ARRAY
36479: PPUSH
36480: LD_VAR 0 2
36484: PPUSH
36485: CALL_OW 3
36489: PPUSH
36490: CALL_OW 1
36494: ST_TO_ADDR
// end ; end ;
36495: GO 36246
36497: POP
36498: POP
// end ;
36499: GO 36164
36501: POP
36502: POP
// end ;
36503: PPOPN 4
36505: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36506: LD_INT 0
36508: PPUSH
36509: PPUSH
// result := false ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_INT 0
36517: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36518: LD_VAR 0 1
36522: PPUSH
36523: CALL_OW 264
36527: PUSH
36528: LD_EXP 164
36532: EQUAL
36533: NOT
36534: IFFALSE 36538
// exit ;
36536: GO 36778
// index := GetElementIndex ( minersList , unit ) ;
36538: LD_ADDR_VAR 0 5
36542: PUSH
36543: LD_EXP 154
36547: PPUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL 42866 0 2
36557: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36558: LD_EXP 155
36562: PUSH
36563: LD_VAR 0 5
36567: ARRAY
36568: PUSH
36569: LD_EXP 156
36573: GREATEREQUAL
36574: IFFALSE 36578
// exit ;
36576: GO 36778
// ComMoveXY ( unit , x , y ) ;
36578: LD_VAR 0 1
36582: PPUSH
36583: LD_VAR 0 2
36587: PPUSH
36588: LD_VAR 0 3
36592: PPUSH
36593: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36597: LD_INT 35
36599: PPUSH
36600: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36604: LD_VAR 0 1
36608: PPUSH
36609: LD_VAR 0 2
36613: PPUSH
36614: LD_VAR 0 3
36618: PPUSH
36619: CALL 73263 0 3
36623: NOT
36624: PUSH
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL_OW 314
36634: AND
36635: IFFALSE 36639
// exit ;
36637: GO 36778
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36639: LD_VAR 0 2
36643: PPUSH
36644: LD_VAR 0 3
36648: PPUSH
36649: CALL_OW 428
36653: PUSH
36654: LD_VAR 0 1
36658: EQUAL
36659: PUSH
36660: LD_VAR 0 1
36664: PPUSH
36665: CALL_OW 314
36669: NOT
36670: AND
36671: IFFALSE 36597
// PlaySoundXY ( x , y , PlantMine ) ;
36673: LD_VAR 0 2
36677: PPUSH
36678: LD_VAR 0 3
36682: PPUSH
36683: LD_STRING PlantMine
36685: PPUSH
36686: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36690: LD_VAR 0 2
36694: PPUSH
36695: LD_VAR 0 3
36699: PPUSH
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 255
36709: PPUSH
36710: LD_INT 0
36712: PPUSH
36713: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36717: LD_ADDR_EXP 155
36721: PUSH
36722: LD_EXP 155
36726: PPUSH
36727: LD_VAR 0 5
36731: PUSH
36732: LD_EXP 155
36736: PUSH
36737: LD_VAR 0 5
36741: ARRAY
36742: PUSH
36743: LD_INT 1
36745: PLUS
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PPUSH
36751: LD_VAR 0 2
36755: PUSH
36756: LD_VAR 0 3
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PPUSH
36765: CALL 43081 0 3
36769: ST_TO_ADDR
// result := true ;
36770: LD_ADDR_VAR 0 4
36774: PUSH
36775: LD_INT 1
36777: ST_TO_ADDR
// end ;
36778: LD_VAR 0 4
36782: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36783: LD_INT 0
36785: PPUSH
36786: PPUSH
36787: PPUSH
// if not unit in minersList then
36788: LD_VAR 0 1
36792: PUSH
36793: LD_EXP 154
36797: IN
36798: NOT
36799: IFFALSE 36803
// exit ;
36801: GO 37195
// index := GetElementIndex ( minersList , unit ) ;
36803: LD_ADDR_VAR 0 6
36807: PUSH
36808: LD_EXP 154
36812: PPUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL 42866 0 2
36822: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36823: LD_ADDR_VAR 0 5
36827: PUSH
36828: DOUBLE
36829: LD_EXP 155
36833: PUSH
36834: LD_VAR 0 6
36838: ARRAY
36839: INC
36840: ST_TO_ADDR
36841: LD_INT 1
36843: PUSH
36844: FOR_DOWNTO
36845: IFFALSE 37006
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36847: LD_EXP 155
36851: PUSH
36852: LD_VAR 0 6
36856: ARRAY
36857: PUSH
36858: LD_VAR 0 5
36862: ARRAY
36863: PUSH
36864: LD_INT 1
36866: ARRAY
36867: PUSH
36868: LD_VAR 0 2
36872: EQUAL
36873: PUSH
36874: LD_EXP 155
36878: PUSH
36879: LD_VAR 0 6
36883: ARRAY
36884: PUSH
36885: LD_VAR 0 5
36889: ARRAY
36890: PUSH
36891: LD_INT 2
36893: ARRAY
36894: PUSH
36895: LD_VAR 0 3
36899: EQUAL
36900: AND
36901: IFFALSE 37004
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36903: LD_EXP 155
36907: PUSH
36908: LD_VAR 0 6
36912: ARRAY
36913: PUSH
36914: LD_VAR 0 5
36918: ARRAY
36919: PUSH
36920: LD_INT 1
36922: ARRAY
36923: PPUSH
36924: LD_EXP 155
36928: PUSH
36929: LD_VAR 0 6
36933: ARRAY
36934: PUSH
36935: LD_VAR 0 5
36939: ARRAY
36940: PUSH
36941: LD_INT 2
36943: ARRAY
36944: PPUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 255
36954: PPUSH
36955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36959: LD_ADDR_EXP 155
36963: PUSH
36964: LD_EXP 155
36968: PPUSH
36969: LD_VAR 0 6
36973: PPUSH
36974: LD_EXP 155
36978: PUSH
36979: LD_VAR 0 6
36983: ARRAY
36984: PPUSH
36985: LD_VAR 0 5
36989: PPUSH
36990: CALL_OW 3
36994: PPUSH
36995: CALL_OW 1
36999: ST_TO_ADDR
// exit ;
37000: POP
37001: POP
37002: GO 37195
// end ; end ;
37004: GO 36844
37006: POP
37007: POP
// for i := minerMinesList [ index ] downto 1 do
37008: LD_ADDR_VAR 0 5
37012: PUSH
37013: DOUBLE
37014: LD_EXP 155
37018: PUSH
37019: LD_VAR 0 6
37023: ARRAY
37024: INC
37025: ST_TO_ADDR
37026: LD_INT 1
37028: PUSH
37029: FOR_DOWNTO
37030: IFFALSE 37193
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37032: LD_EXP 155
37036: PUSH
37037: LD_VAR 0 6
37041: ARRAY
37042: PUSH
37043: LD_VAR 0 5
37047: ARRAY
37048: PUSH
37049: LD_INT 1
37051: ARRAY
37052: PPUSH
37053: LD_EXP 155
37057: PUSH
37058: LD_VAR 0 6
37062: ARRAY
37063: PUSH
37064: LD_VAR 0 5
37068: ARRAY
37069: PUSH
37070: LD_INT 2
37072: ARRAY
37073: PPUSH
37074: LD_VAR 0 2
37078: PPUSH
37079: LD_VAR 0 3
37083: PPUSH
37084: CALL_OW 298
37088: PUSH
37089: LD_INT 6
37091: LESS
37092: IFFALSE 37191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37094: LD_EXP 155
37098: PUSH
37099: LD_VAR 0 6
37103: ARRAY
37104: PUSH
37105: LD_VAR 0 5
37109: ARRAY
37110: PUSH
37111: LD_INT 1
37113: ARRAY
37114: PPUSH
37115: LD_EXP 155
37119: PUSH
37120: LD_VAR 0 6
37124: ARRAY
37125: PUSH
37126: LD_VAR 0 5
37130: ARRAY
37131: PUSH
37132: LD_INT 2
37134: ARRAY
37135: PPUSH
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 255
37145: PPUSH
37146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37150: LD_ADDR_EXP 155
37154: PUSH
37155: LD_EXP 155
37159: PPUSH
37160: LD_VAR 0 6
37164: PPUSH
37165: LD_EXP 155
37169: PUSH
37170: LD_VAR 0 6
37174: ARRAY
37175: PPUSH
37176: LD_VAR 0 5
37180: PPUSH
37181: CALL_OW 3
37185: PPUSH
37186: CALL_OW 1
37190: ST_TO_ADDR
// end ; end ;
37191: GO 37029
37193: POP
37194: POP
// end ;
37195: LD_VAR 0 4
37199: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37200: LD_INT 0
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37211: LD_VAR 0 1
37215: PPUSH
37216: CALL_OW 264
37220: PUSH
37221: LD_EXP 164
37225: EQUAL
37226: NOT
37227: PUSH
37228: LD_VAR 0 1
37232: PUSH
37233: LD_EXP 154
37237: IN
37238: NOT
37239: OR
37240: IFFALSE 37244
// exit ;
37242: GO 37566
// index := GetElementIndex ( minersList , unit ) ;
37244: LD_ADDR_VAR 0 6
37248: PUSH
37249: LD_EXP 154
37253: PPUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: CALL 42866 0 2
37263: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37264: LD_ADDR_VAR 0 8
37268: PUSH
37269: LD_EXP 156
37273: PUSH
37274: LD_EXP 155
37278: PUSH
37279: LD_VAR 0 6
37283: ARRAY
37284: MINUS
37285: ST_TO_ADDR
// if not minesFreeAmount then
37286: LD_VAR 0 8
37290: NOT
37291: IFFALSE 37295
// exit ;
37293: GO 37566
// tmp := [ ] ;
37295: LD_ADDR_VAR 0 7
37299: PUSH
37300: EMPTY
37301: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37302: LD_ADDR_VAR 0 5
37306: PUSH
37307: DOUBLE
37308: LD_INT 1
37310: DEC
37311: ST_TO_ADDR
37312: LD_VAR 0 8
37316: PUSH
37317: FOR_TO
37318: IFFALSE 37513
// begin _d := rand ( 0 , 5 ) ;
37320: LD_ADDR_VAR 0 11
37324: PUSH
37325: LD_INT 0
37327: PPUSH
37328: LD_INT 5
37330: PPUSH
37331: CALL_OW 12
37335: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37336: LD_ADDR_VAR 0 12
37340: PUSH
37341: LD_INT 2
37343: PPUSH
37344: LD_INT 6
37346: PPUSH
37347: CALL_OW 12
37351: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37352: LD_ADDR_VAR 0 9
37356: PUSH
37357: LD_VAR 0 2
37361: PPUSH
37362: LD_VAR 0 11
37366: PPUSH
37367: LD_VAR 0 12
37371: PPUSH
37372: CALL_OW 272
37376: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37377: LD_ADDR_VAR 0 10
37381: PUSH
37382: LD_VAR 0 3
37386: PPUSH
37387: LD_VAR 0 11
37391: PPUSH
37392: LD_VAR 0 12
37396: PPUSH
37397: CALL_OW 273
37401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37402: LD_VAR 0 9
37406: PPUSH
37407: LD_VAR 0 10
37411: PPUSH
37412: CALL_OW 488
37416: PUSH
37417: LD_VAR 0 9
37421: PUSH
37422: LD_VAR 0 10
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_VAR 0 7
37435: IN
37436: NOT
37437: AND
37438: PUSH
37439: LD_VAR 0 9
37443: PPUSH
37444: LD_VAR 0 10
37448: PPUSH
37449: CALL_OW 458
37453: NOT
37454: AND
37455: IFFALSE 37497
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37457: LD_ADDR_VAR 0 7
37461: PUSH
37462: LD_VAR 0 7
37466: PPUSH
37467: LD_VAR 0 7
37471: PUSH
37472: LD_INT 1
37474: PLUS
37475: PPUSH
37476: LD_VAR 0 9
37480: PUSH
37481: LD_VAR 0 10
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PPUSH
37490: CALL_OW 1
37494: ST_TO_ADDR
37495: GO 37511
// i := i - 1 ;
37497: LD_ADDR_VAR 0 5
37501: PUSH
37502: LD_VAR 0 5
37506: PUSH
37507: LD_INT 1
37509: MINUS
37510: ST_TO_ADDR
// end ;
37511: GO 37317
37513: POP
37514: POP
// for i in tmp do
37515: LD_ADDR_VAR 0 5
37519: PUSH
37520: LD_VAR 0 7
37524: PUSH
37525: FOR_IN
37526: IFFALSE 37564
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37528: LD_VAR 0 1
37532: PPUSH
37533: LD_VAR 0 5
37537: PUSH
37538: LD_INT 1
37540: ARRAY
37541: PPUSH
37542: LD_VAR 0 5
37546: PUSH
37547: LD_INT 2
37549: ARRAY
37550: PPUSH
37551: CALL 36506 0 3
37555: NOT
37556: IFFALSE 37562
// exit ;
37558: POP
37559: POP
37560: GO 37566
37562: GO 37525
37564: POP
37565: POP
// end ;
37566: LD_VAR 0 4
37570: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
// if not GetClass ( unit ) = class_sniper then
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 257
37589: PUSH
37590: LD_INT 5
37592: EQUAL
37593: NOT
37594: IFFALSE 37598
// exit ;
37596: GO 37986
// dist := 8 ;
37598: LD_ADDR_VAR 0 5
37602: PUSH
37603: LD_INT 8
37605: ST_TO_ADDR
// viewRange := 12 ;
37606: LD_ADDR_VAR 0 7
37610: PUSH
37611: LD_INT 12
37613: ST_TO_ADDR
// side := GetSide ( unit ) ;
37614: LD_ADDR_VAR 0 6
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 255
37628: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37629: LD_INT 61
37631: PPUSH
37632: LD_VAR 0 6
37636: PPUSH
37637: CALL_OW 321
37641: PUSH
37642: LD_INT 2
37644: EQUAL
37645: IFFALSE 37655
// viewRange := 16 ;
37647: LD_ADDR_VAR 0 7
37651: PUSH
37652: LD_INT 16
37654: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37655: LD_VAR 0 1
37659: PPUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: LD_VAR 0 3
37669: PPUSH
37670: CALL_OW 297
37674: PUSH
37675: LD_VAR 0 5
37679: GREATER
37680: IFFALSE 37759
// begin ComMoveXY ( unit , x , y ) ;
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37701: LD_INT 35
37703: PPUSH
37704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37708: LD_VAR 0 1
37712: PPUSH
37713: LD_VAR 0 2
37717: PPUSH
37718: LD_VAR 0 3
37722: PPUSH
37723: CALL 73263 0 3
37727: NOT
37728: IFFALSE 37732
// exit ;
37730: GO 37986
// until GetDistUnitXY ( unit , x , y ) < dist ;
37732: LD_VAR 0 1
37736: PPUSH
37737: LD_VAR 0 2
37741: PPUSH
37742: LD_VAR 0 3
37746: PPUSH
37747: CALL_OW 297
37751: PUSH
37752: LD_VAR 0 5
37756: LESS
37757: IFFALSE 37701
// end ; ComTurnXY ( unit , x , y ) ;
37759: LD_VAR 0 1
37763: PPUSH
37764: LD_VAR 0 2
37768: PPUSH
37769: LD_VAR 0 3
37773: PPUSH
37774: CALL_OW 118
// wait ( 5 ) ;
37778: LD_INT 5
37780: PPUSH
37781: CALL_OW 67
// _d := GetDir ( unit ) ;
37785: LD_ADDR_VAR 0 10
37789: PUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 254
37799: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37800: LD_ADDR_VAR 0 8
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 250
37814: PPUSH
37815: LD_VAR 0 10
37819: PPUSH
37820: LD_VAR 0 5
37824: PPUSH
37825: CALL_OW 272
37829: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37830: LD_ADDR_VAR 0 9
37834: PUSH
37835: LD_VAR 0 1
37839: PPUSH
37840: CALL_OW 251
37844: PPUSH
37845: LD_VAR 0 10
37849: PPUSH
37850: LD_VAR 0 5
37854: PPUSH
37855: CALL_OW 273
37859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37860: LD_VAR 0 8
37864: PPUSH
37865: LD_VAR 0 9
37869: PPUSH
37870: CALL_OW 488
37874: NOT
37875: IFFALSE 37879
// exit ;
37877: GO 37986
// ComAnimCustom ( unit , 1 ) ;
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_INT 1
37886: PPUSH
37887: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37891: LD_VAR 0 8
37895: PPUSH
37896: LD_VAR 0 9
37900: PPUSH
37901: LD_VAR 0 6
37905: PPUSH
37906: LD_VAR 0 7
37910: PPUSH
37911: CALL_OW 330
// repeat wait ( 1 ) ;
37915: LD_INT 1
37917: PPUSH
37918: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 316
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 314
37941: OR
37942: PUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 302
37952: NOT
37953: OR
37954: PUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 301
37964: OR
37965: IFFALSE 37915
// RemoveSeeing ( _x , _y , side ) ;
37967: LD_VAR 0 8
37971: PPUSH
37972: LD_VAR 0 9
37976: PPUSH
37977: LD_VAR 0 6
37981: PPUSH
37982: CALL_OW 331
// end ; end_of_file
37986: LD_VAR 0 4
37990: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
37991: LD_INT 0
37993: PPUSH
// ar_miner := 81 ;
37994: LD_ADDR_EXP 164
37998: PUSH
37999: LD_INT 81
38001: ST_TO_ADDR
// ar_crane := 88 ;
38002: LD_ADDR_EXP 163
38006: PUSH
38007: LD_INT 88
38009: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
38010: LD_ADDR_EXP 158
38014: PUSH
38015: LD_INT 89
38017: ST_TO_ADDR
// us_hack := 99 ;
38018: LD_ADDR_EXP 159
38022: PUSH
38023: LD_INT 99
38025: ST_TO_ADDR
// us_artillery := 97 ;
38026: LD_ADDR_EXP 160
38030: PUSH
38031: LD_INT 97
38033: ST_TO_ADDR
// ar_bio_bomb := 91 ;
38034: LD_ADDR_EXP 161
38038: PUSH
38039: LD_INT 91
38041: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
38042: LD_ADDR_EXP 162
38046: PUSH
38047: LD_INT 92
38049: ST_TO_ADDR
// ru_radar := 98 ;
38050: LD_ADDR_EXP 157
38054: PUSH
38055: LD_INT 98
38057: ST_TO_ADDR
// tech_Artillery := 80 ;
38058: LD_ADDR_EXP 165
38062: PUSH
38063: LD_INT 80
38065: ST_TO_ADDR
// tech_RadMat := 81 ;
38066: LD_ADDR_EXP 166
38070: PUSH
38071: LD_INT 81
38073: ST_TO_ADDR
// tech_BasicTools := 82 ;
38074: LD_ADDR_EXP 167
38078: PUSH
38079: LD_INT 82
38081: ST_TO_ADDR
// tech_Cargo := 83 ;
38082: LD_ADDR_EXP 168
38086: PUSH
38087: LD_INT 83
38089: ST_TO_ADDR
// tech_Track := 84 ;
38090: LD_ADDR_EXP 169
38094: PUSH
38095: LD_INT 84
38097: ST_TO_ADDR
// tech_Crane := 85 ;
38098: LD_ADDR_EXP 170
38102: PUSH
38103: LD_INT 85
38105: ST_TO_ADDR
// tech_Bulldozer := 86 ;
38106: LD_ADDR_EXP 171
38110: PUSH
38111: LD_INT 86
38113: ST_TO_ADDR
// tech_Hovercraft := 87 ;
38114: LD_ADDR_EXP 172
38118: PUSH
38119: LD_INT 87
38121: ST_TO_ADDR
// end ;
38122: LD_VAR 0 1
38126: RET
// every 1 do
38127: GO 38129
38129: DISABLE
// InitGlobalVariables ; end_of_file
38130: CALL 37991 0 0
38134: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
// if exist_mode then
38139: LD_VAR 0 2
38143: IFFALSE 38168
// unit := CreateCharacter ( prefix & ident ) else
38145: LD_ADDR_VAR 0 5
38149: PUSH
38150: LD_VAR 0 3
38154: PUSH
38155: LD_VAR 0 1
38159: STR
38160: PPUSH
38161: CALL_OW 34
38165: ST_TO_ADDR
38166: GO 38183
// unit := NewCharacter ( ident ) ;
38168: LD_ADDR_VAR 0 5
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 25
38182: ST_TO_ADDR
// result := unit ;
38183: LD_ADDR_VAR 0 4
38187: PUSH
38188: LD_VAR 0 5
38192: ST_TO_ADDR
// end ;
38193: LD_VAR 0 4
38197: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38198: LD_INT 0
38200: PPUSH
38201: PPUSH
// if not side or not nation then
38202: LD_VAR 0 1
38206: NOT
38207: PUSH
38208: LD_VAR 0 2
38212: NOT
38213: OR
38214: IFFALSE 38218
// exit ;
38216: GO 38982
// case nation of nation_american :
38218: LD_VAR 0 2
38222: PUSH
38223: LD_INT 1
38225: DOUBLE
38226: EQUAL
38227: IFTRUE 38231
38229: GO 38445
38231: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38232: LD_ADDR_VAR 0 4
38236: PUSH
38237: LD_INT 35
38239: PUSH
38240: LD_INT 45
38242: PUSH
38243: LD_INT 46
38245: PUSH
38246: LD_INT 47
38248: PUSH
38249: LD_INT 82
38251: PUSH
38252: LD_INT 83
38254: PUSH
38255: LD_INT 84
38257: PUSH
38258: LD_INT 85
38260: PUSH
38261: LD_INT 86
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: LD_INT 6
38272: PUSH
38273: LD_INT 15
38275: PUSH
38276: LD_INT 16
38278: PUSH
38279: LD_INT 7
38281: PUSH
38282: LD_INT 12
38284: PUSH
38285: LD_INT 13
38287: PUSH
38288: LD_INT 10
38290: PUSH
38291: LD_INT 14
38293: PUSH
38294: LD_INT 20
38296: PUSH
38297: LD_INT 21
38299: PUSH
38300: LD_INT 22
38302: PUSH
38303: LD_INT 25
38305: PUSH
38306: LD_INT 32
38308: PUSH
38309: LD_INT 27
38311: PUSH
38312: LD_INT 36
38314: PUSH
38315: LD_INT 69
38317: PUSH
38318: LD_INT 39
38320: PUSH
38321: LD_INT 34
38323: PUSH
38324: LD_INT 40
38326: PUSH
38327: LD_INT 48
38329: PUSH
38330: LD_INT 49
38332: PUSH
38333: LD_INT 50
38335: PUSH
38336: LD_INT 51
38338: PUSH
38339: LD_INT 52
38341: PUSH
38342: LD_INT 53
38344: PUSH
38345: LD_INT 54
38347: PUSH
38348: LD_INT 55
38350: PUSH
38351: LD_INT 56
38353: PUSH
38354: LD_INT 57
38356: PUSH
38357: LD_INT 58
38359: PUSH
38360: LD_INT 59
38362: PUSH
38363: LD_INT 60
38365: PUSH
38366: LD_INT 61
38368: PUSH
38369: LD_INT 62
38371: PUSH
38372: LD_INT 80
38374: PUSH
38375: LD_INT 82
38377: PUSH
38378: LD_INT 83
38380: PUSH
38381: LD_INT 84
38383: PUSH
38384: LD_INT 85
38386: PUSH
38387: LD_INT 86
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
38443: GO 38906
38445: LD_INT 2
38447: DOUBLE
38448: EQUAL
38449: IFTRUE 38453
38451: GO 38675
38453: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
38454: LD_ADDR_VAR 0 4
38458: PUSH
38459: LD_INT 35
38461: PUSH
38462: LD_INT 45
38464: PUSH
38465: LD_INT 46
38467: PUSH
38468: LD_INT 47
38470: PUSH
38471: LD_INT 82
38473: PUSH
38474: LD_INT 83
38476: PUSH
38477: LD_INT 84
38479: PUSH
38480: LD_INT 85
38482: PUSH
38483: LD_INT 87
38485: PUSH
38486: LD_INT 70
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 11
38494: PUSH
38495: LD_INT 3
38497: PUSH
38498: LD_INT 4
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: LD_INT 6
38506: PUSH
38507: LD_INT 15
38509: PUSH
38510: LD_INT 18
38512: PUSH
38513: LD_INT 7
38515: PUSH
38516: LD_INT 17
38518: PUSH
38519: LD_INT 8
38521: PUSH
38522: LD_INT 20
38524: PUSH
38525: LD_INT 21
38527: PUSH
38528: LD_INT 22
38530: PUSH
38531: LD_INT 72
38533: PUSH
38534: LD_INT 26
38536: PUSH
38537: LD_INT 69
38539: PUSH
38540: LD_INT 39
38542: PUSH
38543: LD_INT 40
38545: PUSH
38546: LD_INT 41
38548: PUSH
38549: LD_INT 42
38551: PUSH
38552: LD_INT 43
38554: PUSH
38555: LD_INT 48
38557: PUSH
38558: LD_INT 49
38560: PUSH
38561: LD_INT 50
38563: PUSH
38564: LD_INT 51
38566: PUSH
38567: LD_INT 52
38569: PUSH
38570: LD_INT 53
38572: PUSH
38573: LD_INT 54
38575: PUSH
38576: LD_INT 55
38578: PUSH
38579: LD_INT 56
38581: PUSH
38582: LD_INT 60
38584: PUSH
38585: LD_INT 61
38587: PUSH
38588: LD_INT 62
38590: PUSH
38591: LD_INT 66
38593: PUSH
38594: LD_INT 67
38596: PUSH
38597: LD_INT 68
38599: PUSH
38600: LD_INT 81
38602: PUSH
38603: LD_INT 82
38605: PUSH
38606: LD_INT 83
38608: PUSH
38609: LD_INT 84
38611: PUSH
38612: LD_INT 85
38614: PUSH
38615: LD_INT 87
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: ST_TO_ADDR
38673: GO 38906
38675: LD_INT 3
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 38905
38683: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38684: LD_ADDR_VAR 0 4
38688: PUSH
38689: LD_INT 46
38691: PUSH
38692: LD_INT 47
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 82
38703: PUSH
38704: LD_INT 83
38706: PUSH
38707: LD_INT 84
38709: PUSH
38710: LD_INT 85
38712: PUSH
38713: LD_INT 86
38715: PUSH
38716: LD_INT 11
38718: PUSH
38719: LD_INT 9
38721: PUSH
38722: LD_INT 20
38724: PUSH
38725: LD_INT 19
38727: PUSH
38728: LD_INT 21
38730: PUSH
38731: LD_INT 24
38733: PUSH
38734: LD_INT 22
38736: PUSH
38737: LD_INT 25
38739: PUSH
38740: LD_INT 28
38742: PUSH
38743: LD_INT 29
38745: PUSH
38746: LD_INT 30
38748: PUSH
38749: LD_INT 31
38751: PUSH
38752: LD_INT 37
38754: PUSH
38755: LD_INT 38
38757: PUSH
38758: LD_INT 32
38760: PUSH
38761: LD_INT 27
38763: PUSH
38764: LD_INT 33
38766: PUSH
38767: LD_INT 69
38769: PUSH
38770: LD_INT 39
38772: PUSH
38773: LD_INT 34
38775: PUSH
38776: LD_INT 40
38778: PUSH
38779: LD_INT 71
38781: PUSH
38782: LD_INT 23
38784: PUSH
38785: LD_INT 44
38787: PUSH
38788: LD_INT 48
38790: PUSH
38791: LD_INT 49
38793: PUSH
38794: LD_INT 50
38796: PUSH
38797: LD_INT 51
38799: PUSH
38800: LD_INT 52
38802: PUSH
38803: LD_INT 53
38805: PUSH
38806: LD_INT 54
38808: PUSH
38809: LD_INT 55
38811: PUSH
38812: LD_INT 56
38814: PUSH
38815: LD_INT 57
38817: PUSH
38818: LD_INT 58
38820: PUSH
38821: LD_INT 59
38823: PUSH
38824: LD_INT 63
38826: PUSH
38827: LD_INT 64
38829: PUSH
38830: LD_INT 65
38832: PUSH
38833: LD_INT 82
38835: PUSH
38836: LD_INT 83
38838: PUSH
38839: LD_INT 84
38841: PUSH
38842: LD_INT 85
38844: PUSH
38845: LD_INT 86
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: ST_TO_ADDR
38903: GO 38906
38905: POP
// if state > - 1 and state < 3 then
38906: LD_VAR 0 3
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: GREATER
38915: PUSH
38916: LD_VAR 0 3
38920: PUSH
38921: LD_INT 3
38923: LESS
38924: AND
38925: IFFALSE 38982
// for i in result do
38927: LD_ADDR_VAR 0 5
38931: PUSH
38932: LD_VAR 0 4
38936: PUSH
38937: FOR_IN
38938: IFFALSE 38980
// if GetTech ( i , side ) <> state then
38940: LD_VAR 0 5
38944: PPUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 321
38954: PUSH
38955: LD_VAR 0 3
38959: NONEQUAL
38960: IFFALSE 38978
// result := result diff i ;
38962: LD_ADDR_VAR 0 4
38966: PUSH
38967: LD_VAR 0 4
38971: PUSH
38972: LD_VAR 0 5
38976: DIFF
38977: ST_TO_ADDR
38978: GO 38937
38980: POP
38981: POP
// end ;
38982: LD_VAR 0 4
38986: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38987: LD_INT 0
38989: PPUSH
38990: PPUSH
38991: PPUSH
// result := true ;
38992: LD_ADDR_VAR 0 3
38996: PUSH
38997: LD_INT 1
38999: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39000: LD_ADDR_VAR 0 5
39004: PUSH
39005: LD_VAR 0 2
39009: PPUSH
39010: CALL_OW 480
39014: ST_TO_ADDR
// if not tmp then
39015: LD_VAR 0 5
39019: NOT
39020: IFFALSE 39024
// exit ;
39022: GO 39073
// for i in tmp do
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: LD_VAR 0 5
39033: PUSH
39034: FOR_IN
39035: IFFALSE 39071
// if GetTech ( i , side ) <> state_researched then
39037: LD_VAR 0 4
39041: PPUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 321
39051: PUSH
39052: LD_INT 2
39054: NONEQUAL
39055: IFFALSE 39069
// begin result := false ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_INT 0
39064: ST_TO_ADDR
// exit ;
39065: POP
39066: POP
39067: GO 39073
// end ;
39069: GO 39034
39071: POP
39072: POP
// end ;
39073: LD_VAR 0 3
39077: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39078: LD_INT 0
39080: PPUSH
39081: PPUSH
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
39086: PPUSH
39087: PPUSH
39088: PPUSH
39089: PPUSH
39090: PPUSH
39091: PPUSH
39092: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39093: LD_VAR 0 1
39097: NOT
39098: PUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 257
39108: PUSH
39109: LD_INT 9
39111: NONEQUAL
39112: OR
39113: IFFALSE 39117
// exit ;
39115: GO 39690
// side := GetSide ( unit ) ;
39117: LD_ADDR_VAR 0 9
39121: PUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 255
39131: ST_TO_ADDR
// tech_space := tech_spacanom ;
39132: LD_ADDR_VAR 0 12
39136: PUSH
39137: LD_INT 29
39139: ST_TO_ADDR
// tech_time := tech_taurad ;
39140: LD_ADDR_VAR 0 13
39144: PUSH
39145: LD_INT 28
39147: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39148: LD_ADDR_VAR 0 11
39152: PUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 310
39162: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39163: LD_VAR 0 11
39167: PPUSH
39168: CALL_OW 247
39172: PUSH
39173: LD_INT 2
39175: EQUAL
39176: IFFALSE 39180
// exit ;
39178: GO 39690
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39180: LD_ADDR_VAR 0 8
39184: PUSH
39185: LD_INT 81
39187: PUSH
39188: LD_VAR 0 9
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: PUSH
39200: LD_INT 21
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PPUSH
39218: CALL_OW 69
39222: ST_TO_ADDR
// if not tmp then
39223: LD_VAR 0 8
39227: NOT
39228: IFFALSE 39232
// exit ;
39230: GO 39690
// if in_unit then
39232: LD_VAR 0 11
39236: IFFALSE 39260
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39238: LD_ADDR_VAR 0 10
39242: PUSH
39243: LD_VAR 0 8
39247: PPUSH
39248: LD_VAR 0 11
39252: PPUSH
39253: CALL_OW 74
39257: ST_TO_ADDR
39258: GO 39280
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39260: LD_ADDR_VAR 0 10
39264: PUSH
39265: LD_VAR 0 8
39269: PPUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: CALL_OW 74
39279: ST_TO_ADDR
// if not enemy then
39280: LD_VAR 0 10
39284: NOT
39285: IFFALSE 39289
// exit ;
39287: GO 39690
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39289: LD_VAR 0 11
39293: PUSH
39294: LD_VAR 0 11
39298: PPUSH
39299: LD_VAR 0 10
39303: PPUSH
39304: CALL_OW 296
39308: PUSH
39309: LD_INT 13
39311: GREATER
39312: AND
39313: PUSH
39314: LD_VAR 0 1
39318: PPUSH
39319: LD_VAR 0 10
39323: PPUSH
39324: CALL_OW 296
39328: PUSH
39329: LD_INT 12
39331: GREATER
39332: OR
39333: IFFALSE 39337
// exit ;
39335: GO 39690
// missile := [ 1 ] ;
39337: LD_ADDR_VAR 0 14
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39348: LD_VAR 0 9
39352: PPUSH
39353: LD_VAR 0 12
39357: PPUSH
39358: CALL_OW 325
39362: IFFALSE 39391
// missile := Insert ( missile , missile + 1 , 2 ) ;
39364: LD_ADDR_VAR 0 14
39368: PUSH
39369: LD_VAR 0 14
39373: PPUSH
39374: LD_VAR 0 14
39378: PUSH
39379: LD_INT 1
39381: PLUS
39382: PPUSH
39383: LD_INT 2
39385: PPUSH
39386: CALL_OW 2
39390: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39391: LD_VAR 0 9
39395: PPUSH
39396: LD_VAR 0 13
39400: PPUSH
39401: CALL_OW 325
39405: PUSH
39406: LD_VAR 0 10
39410: PPUSH
39411: CALL_OW 255
39415: PPUSH
39416: LD_VAR 0 13
39420: PPUSH
39421: CALL_OW 325
39425: NOT
39426: AND
39427: IFFALSE 39456
// missile := Insert ( missile , missile + 1 , 3 ) ;
39429: LD_ADDR_VAR 0 14
39433: PUSH
39434: LD_VAR 0 14
39438: PPUSH
39439: LD_VAR 0 14
39443: PUSH
39444: LD_INT 1
39446: PLUS
39447: PPUSH
39448: LD_INT 3
39450: PPUSH
39451: CALL_OW 2
39455: ST_TO_ADDR
// if missile < 2 then
39456: LD_VAR 0 14
39460: PUSH
39461: LD_INT 2
39463: LESS
39464: IFFALSE 39468
// exit ;
39466: GO 39690
// x := GetX ( enemy ) ;
39468: LD_ADDR_VAR 0 4
39472: PUSH
39473: LD_VAR 0 10
39477: PPUSH
39478: CALL_OW 250
39482: ST_TO_ADDR
// y := GetY ( enemy ) ;
39483: LD_ADDR_VAR 0 5
39487: PUSH
39488: LD_VAR 0 10
39492: PPUSH
39493: CALL_OW 251
39497: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39498: LD_ADDR_VAR 0 6
39502: PUSH
39503: LD_VAR 0 4
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PPUSH
39512: LD_INT 1
39514: PPUSH
39515: CALL_OW 12
39519: PLUS
39520: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39521: LD_ADDR_VAR 0 7
39525: PUSH
39526: LD_VAR 0 5
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PPUSH
39535: LD_INT 1
39537: PPUSH
39538: CALL_OW 12
39542: PLUS
39543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39544: LD_VAR 0 6
39548: PPUSH
39549: LD_VAR 0 7
39553: PPUSH
39554: CALL_OW 488
39558: NOT
39559: IFFALSE 39581
// begin _x := x ;
39561: LD_ADDR_VAR 0 6
39565: PUSH
39566: LD_VAR 0 4
39570: ST_TO_ADDR
// _y := y ;
39571: LD_ADDR_VAR 0 7
39575: PUSH
39576: LD_VAR 0 5
39580: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39581: LD_ADDR_VAR 0 3
39585: PUSH
39586: LD_INT 1
39588: PPUSH
39589: LD_VAR 0 14
39593: PPUSH
39594: CALL_OW 12
39598: ST_TO_ADDR
// case i of 1 :
39599: LD_VAR 0 3
39603: PUSH
39604: LD_INT 1
39606: DOUBLE
39607: EQUAL
39608: IFTRUE 39612
39610: GO 39629
39612: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39613: LD_VAR 0 1
39617: PPUSH
39618: LD_VAR 0 10
39622: PPUSH
39623: CALL_OW 115
39627: GO 39690
39629: LD_INT 2
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39637
39635: GO 39659
39637: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39638: LD_VAR 0 1
39642: PPUSH
39643: LD_VAR 0 6
39647: PPUSH
39648: LD_VAR 0 7
39652: PPUSH
39653: CALL_OW 153
39657: GO 39690
39659: LD_INT 3
39661: DOUBLE
39662: EQUAL
39663: IFTRUE 39667
39665: GO 39689
39667: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39668: LD_VAR 0 1
39672: PPUSH
39673: LD_VAR 0 6
39677: PPUSH
39678: LD_VAR 0 7
39682: PPUSH
39683: CALL_OW 154
39687: GO 39690
39689: POP
// end ;
39690: LD_VAR 0 2
39694: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39695: LD_INT 0
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
// if not unit or not building then
39703: LD_VAR 0 1
39707: NOT
39708: PUSH
39709: LD_VAR 0 2
39713: NOT
39714: OR
39715: IFFALSE 39719
// exit ;
39717: GO 39877
// x := GetX ( building ) ;
39719: LD_ADDR_VAR 0 5
39723: PUSH
39724: LD_VAR 0 2
39728: PPUSH
39729: CALL_OW 250
39733: ST_TO_ADDR
// y := GetY ( building ) ;
39734: LD_ADDR_VAR 0 6
39738: PUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: CALL_OW 251
39748: ST_TO_ADDR
// for i = 0 to 5 do
39749: LD_ADDR_VAR 0 4
39753: PUSH
39754: DOUBLE
39755: LD_INT 0
39757: DEC
39758: ST_TO_ADDR
39759: LD_INT 5
39761: PUSH
39762: FOR_TO
39763: IFFALSE 39875
// begin _x := ShiftX ( x , i , 3 ) ;
39765: LD_ADDR_VAR 0 7
39769: PUSH
39770: LD_VAR 0 5
39774: PPUSH
39775: LD_VAR 0 4
39779: PPUSH
39780: LD_INT 3
39782: PPUSH
39783: CALL_OW 272
39787: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39788: LD_ADDR_VAR 0 8
39792: PUSH
39793: LD_VAR 0 6
39797: PPUSH
39798: LD_VAR 0 4
39802: PPUSH
39803: LD_INT 3
39805: PPUSH
39806: CALL_OW 273
39810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39811: LD_VAR 0 7
39815: PPUSH
39816: LD_VAR 0 8
39820: PPUSH
39821: CALL_OW 488
39825: NOT
39826: IFFALSE 39830
// continue ;
39828: GO 39762
// if HexInfo ( _x , _y ) = 0 then
39830: LD_VAR 0 7
39834: PPUSH
39835: LD_VAR 0 8
39839: PPUSH
39840: CALL_OW 428
39844: PUSH
39845: LD_INT 0
39847: EQUAL
39848: IFFALSE 39873
// begin ComMoveXY ( unit , _x , _y ) ;
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_VAR 0 7
39859: PPUSH
39860: LD_VAR 0 8
39864: PPUSH
39865: CALL_OW 111
// exit ;
39869: POP
39870: POP
39871: GO 39877
// end ; end ;
39873: GO 39762
39875: POP
39876: POP
// end ;
39877: LD_VAR 0 3
39881: RET
// export function ScanBase ( side , base_area ) ; begin
39882: LD_INT 0
39884: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_VAR 0 2
39894: PPUSH
39895: LD_INT 81
39897: PUSH
39898: LD_VAR 0 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PPUSH
39907: CALL_OW 70
39911: ST_TO_ADDR
// end ;
39912: LD_VAR 0 3
39916: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39917: LD_INT 0
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
// result := false ;
39923: LD_ADDR_VAR 0 2
39927: PUSH
39928: LD_INT 0
39930: ST_TO_ADDR
// side := GetSide ( unit ) ;
39931: LD_ADDR_VAR 0 3
39935: PUSH
39936: LD_VAR 0 1
39940: PPUSH
39941: CALL_OW 255
39945: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 248
39960: ST_TO_ADDR
// case nat of 1 :
39961: LD_VAR 0 4
39965: PUSH
39966: LD_INT 1
39968: DOUBLE
39969: EQUAL
39970: IFTRUE 39974
39972: GO 39985
39974: POP
// tech := tech_lassight ; 2 :
39975: LD_ADDR_VAR 0 5
39979: PUSH
39980: LD_INT 12
39982: ST_TO_ADDR
39983: GO 40024
39985: LD_INT 2
39987: DOUBLE
39988: EQUAL
39989: IFTRUE 39993
39991: GO 40004
39993: POP
// tech := tech_mortar ; 3 :
39994: LD_ADDR_VAR 0 5
39998: PUSH
39999: LD_INT 41
40001: ST_TO_ADDR
40002: GO 40024
40004: LD_INT 3
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40023
40012: POP
// tech := tech_bazooka ; end ;
40013: LD_ADDR_VAR 0 5
40017: PUSH
40018: LD_INT 44
40020: ST_TO_ADDR
40021: GO 40024
40023: POP
// if Researched ( side , tech ) then
40024: LD_VAR 0 3
40028: PPUSH
40029: LD_VAR 0 5
40033: PPUSH
40034: CALL_OW 325
40038: IFFALSE 40065
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40040: LD_ADDR_VAR 0 2
40044: PUSH
40045: LD_INT 5
40047: PUSH
40048: LD_INT 8
40050: PUSH
40051: LD_INT 9
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: PUSH
40059: LD_VAR 0 4
40063: ARRAY
40064: ST_TO_ADDR
// end ;
40065: LD_VAR 0 2
40069: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40070: LD_INT 0
40072: PPUSH
40073: PPUSH
40074: PPUSH
// if not mines then
40075: LD_VAR 0 2
40079: NOT
40080: IFFALSE 40084
// exit ;
40082: GO 40228
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40084: LD_ADDR_VAR 0 5
40088: PUSH
40089: LD_INT 81
40091: PUSH
40092: LD_VAR 0 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: LD_INT 21
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PPUSH
40122: CALL_OW 69
40126: ST_TO_ADDR
// for i in mines do
40127: LD_ADDR_VAR 0 4
40131: PUSH
40132: LD_VAR 0 2
40136: PUSH
40137: FOR_IN
40138: IFFALSE 40226
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40140: LD_VAR 0 4
40144: PUSH
40145: LD_INT 1
40147: ARRAY
40148: PPUSH
40149: LD_VAR 0 4
40153: PUSH
40154: LD_INT 2
40156: ARRAY
40157: PPUSH
40158: CALL_OW 458
40162: NOT
40163: IFFALSE 40167
// continue ;
40165: GO 40137
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40167: LD_VAR 0 4
40171: PUSH
40172: LD_INT 1
40174: ARRAY
40175: PPUSH
40176: LD_VAR 0 4
40180: PUSH
40181: LD_INT 2
40183: ARRAY
40184: PPUSH
40185: CALL_OW 428
40189: PUSH
40190: LD_VAR 0 5
40194: IN
40195: IFFALSE 40224
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40197: LD_VAR 0 4
40201: PUSH
40202: LD_INT 1
40204: ARRAY
40205: PPUSH
40206: LD_VAR 0 4
40210: PUSH
40211: LD_INT 2
40213: ARRAY
40214: PPUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 456
// end ;
40224: GO 40137
40226: POP
40227: POP
// end ;
40228: LD_VAR 0 3
40232: RET
// export function Count ( array ) ; var i ; begin
40233: LD_INT 0
40235: PPUSH
40236: PPUSH
// result := 0 ;
40237: LD_ADDR_VAR 0 2
40241: PUSH
40242: LD_INT 0
40244: ST_TO_ADDR
// for i in array do
40245: LD_ADDR_VAR 0 3
40249: PUSH
40250: LD_VAR 0 1
40254: PUSH
40255: FOR_IN
40256: IFFALSE 40280
// if i then
40258: LD_VAR 0 3
40262: IFFALSE 40278
// result := result + 1 ;
40264: LD_ADDR_VAR 0 2
40268: PUSH
40269: LD_VAR 0 2
40273: PUSH
40274: LD_INT 1
40276: PLUS
40277: ST_TO_ADDR
40278: GO 40255
40280: POP
40281: POP
// end ;
40282: LD_VAR 0 2
40286: RET
// export function IsEmpty ( building ) ; begin
40287: LD_INT 0
40289: PPUSH
// if not building then
40290: LD_VAR 0 1
40294: NOT
40295: IFFALSE 40299
// exit ;
40297: GO 40342
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40299: LD_ADDR_VAR 0 2
40303: PUSH
40304: LD_VAR 0 1
40308: PUSH
40309: LD_INT 22
40311: PUSH
40312: LD_VAR 0 1
40316: PPUSH
40317: CALL_OW 255
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 58
40328: PUSH
40329: EMPTY
40330: LIST
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PPUSH
40336: CALL_OW 69
40340: IN
40341: ST_TO_ADDR
// end ;
40342: LD_VAR 0 2
40346: RET
// export function IsNotFull ( building ) ; begin
40347: LD_INT 0
40349: PPUSH
// if not building then
40350: LD_VAR 0 1
40354: NOT
40355: IFFALSE 40359
// exit ;
40357: GO 40378
// result := UnitsInside ( building ) < 6 ;
40359: LD_ADDR_VAR 0 2
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 313
40373: PUSH
40374: LD_INT 6
40376: LESS
40377: ST_TO_ADDR
// end ;
40378: LD_VAR 0 2
40382: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40383: LD_INT 0
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
// tmp := [ ] ;
40389: LD_ADDR_VAR 0 3
40393: PUSH
40394: EMPTY
40395: ST_TO_ADDR
// list := [ ] ;
40396: LD_ADDR_VAR 0 5
40400: PUSH
40401: EMPTY
40402: ST_TO_ADDR
// for i = 16 to 25 do
40403: LD_ADDR_VAR 0 4
40407: PUSH
40408: DOUBLE
40409: LD_INT 16
40411: DEC
40412: ST_TO_ADDR
40413: LD_INT 25
40415: PUSH
40416: FOR_TO
40417: IFFALSE 40490
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40419: LD_ADDR_VAR 0 3
40423: PUSH
40424: LD_VAR 0 3
40428: PUSH
40429: LD_INT 22
40431: PUSH
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 255
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 91
40448: PUSH
40449: LD_VAR 0 1
40453: PUSH
40454: LD_INT 6
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 30
40464: PUSH
40465: LD_VAR 0 4
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: PUSH
40479: EMPTY
40480: LIST
40481: PPUSH
40482: CALL_OW 69
40486: ADD
40487: ST_TO_ADDR
40488: GO 40416
40490: POP
40491: POP
// for i = 1 to tmp do
40492: LD_ADDR_VAR 0 4
40496: PUSH
40497: DOUBLE
40498: LD_INT 1
40500: DEC
40501: ST_TO_ADDR
40502: LD_VAR 0 3
40506: PUSH
40507: FOR_TO
40508: IFFALSE 40596
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40510: LD_ADDR_VAR 0 5
40514: PUSH
40515: LD_VAR 0 5
40519: PUSH
40520: LD_VAR 0 3
40524: PUSH
40525: LD_VAR 0 4
40529: ARRAY
40530: PPUSH
40531: CALL_OW 266
40535: PUSH
40536: LD_VAR 0 3
40540: PUSH
40541: LD_VAR 0 4
40545: ARRAY
40546: PPUSH
40547: CALL_OW 250
40551: PUSH
40552: LD_VAR 0 3
40556: PUSH
40557: LD_VAR 0 4
40561: ARRAY
40562: PPUSH
40563: CALL_OW 251
40567: PUSH
40568: LD_VAR 0 3
40572: PUSH
40573: LD_VAR 0 4
40577: ARRAY
40578: PPUSH
40579: CALL_OW 254
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: ADD
40593: ST_TO_ADDR
40594: GO 40507
40596: POP
40597: POP
// result := list ;
40598: LD_ADDR_VAR 0 2
40602: PUSH
40603: LD_VAR 0 5
40607: ST_TO_ADDR
// end ;
40608: LD_VAR 0 2
40612: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40613: LD_INT 0
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
// if not factory then
40622: LD_VAR 0 1
40626: NOT
40627: IFFALSE 40631
// exit ;
40629: GO 41224
// if control = control_apeman then
40631: LD_VAR 0 4
40635: PUSH
40636: LD_INT 5
40638: EQUAL
40639: IFFALSE 40748
// begin tmp := UnitsInside ( factory ) ;
40641: LD_ADDR_VAR 0 8
40645: PUSH
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 313
40655: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40656: LD_VAR 0 8
40660: PPUSH
40661: LD_INT 25
40663: PUSH
40664: LD_INT 12
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PPUSH
40671: CALL_OW 72
40675: NOT
40676: IFFALSE 40686
// control := control_manual ;
40678: LD_ADDR_VAR 0 4
40682: PUSH
40683: LD_INT 1
40685: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40686: LD_ADDR_VAR 0 8
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL 40383 0 1
40700: ST_TO_ADDR
// if tmp then
40701: LD_VAR 0 8
40705: IFFALSE 40748
// begin for i in tmp do
40707: LD_ADDR_VAR 0 7
40711: PUSH
40712: LD_VAR 0 8
40716: PUSH
40717: FOR_IN
40718: IFFALSE 40746
// if i [ 1 ] = b_ext_radio then
40720: LD_VAR 0 7
40724: PUSH
40725: LD_INT 1
40727: ARRAY
40728: PUSH
40729: LD_INT 22
40731: EQUAL
40732: IFFALSE 40744
// begin control := control_remote ;
40734: LD_ADDR_VAR 0 4
40738: PUSH
40739: LD_INT 2
40741: ST_TO_ADDR
// break ;
40742: GO 40746
// end ;
40744: GO 40717
40746: POP
40747: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40748: LD_VAR 0 1
40752: PPUSH
40753: LD_VAR 0 2
40757: PPUSH
40758: LD_VAR 0 3
40762: PPUSH
40763: LD_VAR 0 4
40767: PPUSH
40768: LD_VAR 0 5
40772: PPUSH
40773: CALL_OW 448
40777: IFFALSE 40812
// begin result := [ chassis , engine , control , weapon ] ;
40779: LD_ADDR_VAR 0 6
40783: PUSH
40784: LD_VAR 0 2
40788: PUSH
40789: LD_VAR 0 3
40793: PUSH
40794: LD_VAR 0 4
40798: PUSH
40799: LD_VAR 0 5
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: ST_TO_ADDR
// exit ;
40810: GO 41224
// end ; _chassis := AvailableChassisList ( factory ) ;
40812: LD_ADDR_VAR 0 9
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 475
40826: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40827: LD_ADDR_VAR 0 11
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 476
40841: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40842: LD_ADDR_VAR 0 12
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: CALL_OW 477
40856: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40857: LD_ADDR_VAR 0 10
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 478
40871: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40872: LD_VAR 0 9
40876: NOT
40877: PUSH
40878: LD_VAR 0 11
40882: NOT
40883: OR
40884: PUSH
40885: LD_VAR 0 12
40889: NOT
40890: OR
40891: PUSH
40892: LD_VAR 0 10
40896: NOT
40897: OR
40898: IFFALSE 40933
// begin result := [ chassis , engine , control , weapon ] ;
40900: LD_ADDR_VAR 0 6
40904: PUSH
40905: LD_VAR 0 2
40909: PUSH
40910: LD_VAR 0 3
40914: PUSH
40915: LD_VAR 0 4
40919: PUSH
40920: LD_VAR 0 5
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// exit ;
40931: GO 41224
// end ; if not chassis in _chassis then
40933: LD_VAR 0 2
40937: PUSH
40938: LD_VAR 0 9
40942: IN
40943: NOT
40944: IFFALSE 40970
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40946: LD_ADDR_VAR 0 2
40950: PUSH
40951: LD_VAR 0 9
40955: PUSH
40956: LD_INT 1
40958: PPUSH
40959: LD_VAR 0 9
40963: PPUSH
40964: CALL_OW 12
40968: ARRAY
40969: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40970: LD_VAR 0 2
40974: PPUSH
40975: LD_VAR 0 3
40979: PPUSH
40980: CALL 41229 0 2
40984: NOT
40985: IFFALSE 41044
// repeat engine := _engine [ 1 ] ;
40987: LD_ADDR_VAR 0 3
40991: PUSH
40992: LD_VAR 0 11
40996: PUSH
40997: LD_INT 1
40999: ARRAY
41000: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41001: LD_ADDR_VAR 0 11
41005: PUSH
41006: LD_VAR 0 11
41010: PPUSH
41011: LD_INT 1
41013: PPUSH
41014: CALL_OW 3
41018: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41019: LD_VAR 0 2
41023: PPUSH
41024: LD_VAR 0 3
41028: PPUSH
41029: CALL 41229 0 2
41033: PUSH
41034: LD_VAR 0 11
41038: PUSH
41039: EMPTY
41040: EQUAL
41041: OR
41042: IFFALSE 40987
// if not control in _control then
41044: LD_VAR 0 4
41048: PUSH
41049: LD_VAR 0 12
41053: IN
41054: NOT
41055: IFFALSE 41081
// control := _control [ rand ( 1 , _control ) ] ;
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: LD_VAR 0 12
41066: PUSH
41067: LD_INT 1
41069: PPUSH
41070: LD_VAR 0 12
41074: PPUSH
41075: CALL_OW 12
41079: ARRAY
41080: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41081: LD_VAR 0 2
41085: PPUSH
41086: LD_VAR 0 5
41090: PPUSH
41091: CALL 41449 0 2
41095: NOT
41096: IFFALSE 41155
// repeat weapon := _weapon [ 1 ] ;
41098: LD_ADDR_VAR 0 5
41102: PUSH
41103: LD_VAR 0 10
41107: PUSH
41108: LD_INT 1
41110: ARRAY
41111: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41112: LD_ADDR_VAR 0 10
41116: PUSH
41117: LD_VAR 0 10
41121: PPUSH
41122: LD_INT 1
41124: PPUSH
41125: CALL_OW 3
41129: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41130: LD_VAR 0 2
41134: PPUSH
41135: LD_VAR 0 5
41139: PPUSH
41140: CALL 41449 0 2
41144: PUSH
41145: LD_VAR 0 10
41149: PUSH
41150: EMPTY
41151: EQUAL
41152: OR
41153: IFFALSE 41098
// result := [ ] ;
41155: LD_ADDR_VAR 0 6
41159: PUSH
41160: EMPTY
41161: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41162: LD_VAR 0 1
41166: PPUSH
41167: LD_VAR 0 2
41171: PPUSH
41172: LD_VAR 0 3
41176: PPUSH
41177: LD_VAR 0 4
41181: PPUSH
41182: LD_VAR 0 5
41186: PPUSH
41187: CALL_OW 448
41191: IFFALSE 41224
// result := [ chassis , engine , control , weapon ] ;
41193: LD_ADDR_VAR 0 6
41197: PUSH
41198: LD_VAR 0 2
41202: PUSH
41203: LD_VAR 0 3
41207: PUSH
41208: LD_VAR 0 4
41212: PUSH
41213: LD_VAR 0 5
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// end ;
41224: LD_VAR 0 6
41228: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41229: LD_INT 0
41231: PPUSH
// if not chassis or not engine then
41232: LD_VAR 0 1
41236: NOT
41237: PUSH
41238: LD_VAR 0 2
41242: NOT
41243: OR
41244: IFFALSE 41248
// exit ;
41246: GO 41444
// case engine of engine_solar :
41248: LD_VAR 0 2
41252: PUSH
41253: LD_INT 2
41255: DOUBLE
41256: EQUAL
41257: IFTRUE 41261
41259: GO 41299
41261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41262: LD_ADDR_VAR 0 3
41266: PUSH
41267: LD_INT 11
41269: PUSH
41270: LD_INT 12
41272: PUSH
41273: LD_INT 13
41275: PUSH
41276: LD_INT 14
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: ST_TO_ADDR
41297: GO 41428
41299: LD_INT 1
41301: DOUBLE
41302: EQUAL
41303: IFTRUE 41307
41305: GO 41369
41307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_INT 11
41315: PUSH
41316: LD_INT 12
41318: PUSH
41319: LD_INT 13
41321: PUSH
41322: LD_INT 14
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: LD_INT 4
41336: PUSH
41337: LD_INT 5
41339: PUSH
41340: LD_INT 21
41342: PUSH
41343: LD_INT 23
41345: PUSH
41346: LD_INT 22
41348: PUSH
41349: LD_INT 24
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
41367: GO 41428
41369: LD_INT 3
41371: DOUBLE
41372: EQUAL
41373: IFTRUE 41377
41375: GO 41427
41377: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41378: LD_ADDR_VAR 0 3
41382: PUSH
41383: LD_INT 13
41385: PUSH
41386: LD_INT 14
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 3
41394: PUSH
41395: LD_INT 4
41397: PUSH
41398: LD_INT 5
41400: PUSH
41401: LD_INT 21
41403: PUSH
41404: LD_INT 22
41406: PUSH
41407: LD_INT 23
41409: PUSH
41410: LD_INT 24
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: ST_TO_ADDR
41425: GO 41428
41427: POP
// result := ( chassis in result ) ;
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_VAR 0 1
41437: PUSH
41438: LD_VAR 0 3
41442: IN
41443: ST_TO_ADDR
// end ;
41444: LD_VAR 0 3
41448: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41449: LD_INT 0
41451: PPUSH
// if not chassis or not weapon then
41452: LD_VAR 0 1
41456: NOT
41457: PUSH
41458: LD_VAR 0 2
41462: NOT
41463: OR
41464: IFFALSE 41468
// exit ;
41466: GO 42494
// case weapon of us_machine_gun :
41468: LD_VAR 0 2
41472: PUSH
41473: LD_INT 2
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41481
41479: GO 41511
41481: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41482: LD_ADDR_VAR 0 3
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 4
41498: PUSH
41499: LD_INT 5
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
41509: GO 42478
41511: LD_INT 3
41513: DOUBLE
41514: EQUAL
41515: IFTRUE 41519
41517: GO 41549
41519: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: LD_INT 4
41536: PUSH
41537: LD_INT 5
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: ST_TO_ADDR
41547: GO 42478
41549: LD_INT 11
41551: DOUBLE
41552: EQUAL
41553: IFTRUE 41557
41555: GO 41587
41557: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41558: LD_ADDR_VAR 0 3
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 4
41574: PUSH
41575: LD_INT 5
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
41585: GO 42478
41587: LD_INT 4
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41595
41593: GO 41621
41595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 4
41609: PUSH
41610: LD_INT 5
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
41619: GO 42478
41621: LD_INT 5
41623: DOUBLE
41624: EQUAL
41625: IFTRUE 41629
41627: GO 41655
41629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: LD_INT 4
41643: PUSH
41644: LD_INT 5
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
41653: GO 42478
41655: LD_INT 9
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41663
41661: GO 41689
41663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41664: LD_ADDR_VAR 0 3
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 4
41677: PUSH
41678: LD_INT 5
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
41687: GO 42478
41689: LD_INT 7
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41723
41697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
41721: GO 42478
41723: LD_INT 12
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41757
41731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: LD_INT 4
41745: PUSH
41746: LD_INT 5
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
41755: GO 42478
41757: LD_INT 13
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 41791
41765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: LD_INT 4
41779: PUSH
41780: LD_INT 5
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: ST_TO_ADDR
41789: GO 42478
41791: LD_INT 14
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41799
41797: GO 41817
41799: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: LD_INT 5
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: ST_TO_ADDR
41815: GO 42478
41817: LD_INT 6
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41825
41823: GO 41843
41825: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_INT 4
41833: PUSH
41834: LD_INT 5
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: ST_TO_ADDR
41841: GO 42478
41843: LD_INT 10
41845: DOUBLE
41846: EQUAL
41847: IFTRUE 41851
41849: GO 41869
41851: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_INT 4
41859: PUSH
41860: LD_INT 5
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: ST_TO_ADDR
41867: GO 42478
41869: LD_INT 22
41871: DOUBLE
41872: EQUAL
41873: IFTRUE 41877
41875: GO 41903
41877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: LD_INT 11
41885: PUSH
41886: LD_INT 12
41888: PUSH
41889: LD_INT 13
41891: PUSH
41892: LD_INT 14
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: ST_TO_ADDR
41901: GO 42478
41903: LD_INT 23
41905: DOUBLE
41906: EQUAL
41907: IFTRUE 41911
41909: GO 41937
41911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41912: LD_ADDR_VAR 0 3
41916: PUSH
41917: LD_INT 11
41919: PUSH
41920: LD_INT 12
41922: PUSH
41923: LD_INT 13
41925: PUSH
41926: LD_INT 14
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
41935: GO 42478
41937: LD_INT 24
41939: DOUBLE
41940: EQUAL
41941: IFTRUE 41945
41943: GO 41971
41945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41946: LD_ADDR_VAR 0 3
41950: PUSH
41951: LD_INT 11
41953: PUSH
41954: LD_INT 12
41956: PUSH
41957: LD_INT 13
41959: PUSH
41960: LD_INT 14
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: ST_TO_ADDR
41969: GO 42478
41971: LD_INT 30
41973: DOUBLE
41974: EQUAL
41975: IFTRUE 41979
41977: GO 42005
41979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41980: LD_ADDR_VAR 0 3
41984: PUSH
41985: LD_INT 11
41987: PUSH
41988: LD_INT 12
41990: PUSH
41991: LD_INT 13
41993: PUSH
41994: LD_INT 14
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
42003: GO 42478
42005: LD_INT 25
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42031
42013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_INT 13
42021: PUSH
42022: LD_INT 14
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: ST_TO_ADDR
42029: GO 42478
42031: LD_INT 27
42033: DOUBLE
42034: EQUAL
42035: IFTRUE 42039
42037: GO 42057
42039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42040: LD_ADDR_VAR 0 3
42044: PUSH
42045: LD_INT 13
42047: PUSH
42048: LD_INT 14
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: ST_TO_ADDR
42055: GO 42478
42057: LD_INT 28
42059: DOUBLE
42060: EQUAL
42061: IFTRUE 42065
42063: GO 42083
42065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_INT 13
42073: PUSH
42074: LD_INT 14
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: ST_TO_ADDR
42081: GO 42478
42083: LD_INT 29
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42091
42089: GO 42109
42091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42092: LD_ADDR_VAR 0 3
42096: PUSH
42097: LD_INT 13
42099: PUSH
42100: LD_INT 14
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: ST_TO_ADDR
42107: GO 42478
42109: LD_INT 31
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42117
42115: GO 42135
42117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42118: LD_ADDR_VAR 0 3
42122: PUSH
42123: LD_INT 13
42125: PUSH
42126: LD_INT 14
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: ST_TO_ADDR
42133: GO 42478
42135: LD_INT 26
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42161
42143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_INT 13
42151: PUSH
42152: LD_INT 14
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: ST_TO_ADDR
42159: GO 42478
42161: LD_INT 42
42163: DOUBLE
42164: EQUAL
42165: IFTRUE 42169
42167: GO 42195
42169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42170: LD_ADDR_VAR 0 3
42174: PUSH
42175: LD_INT 21
42177: PUSH
42178: LD_INT 22
42180: PUSH
42181: LD_INT 23
42183: PUSH
42184: LD_INT 24
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
42193: GO 42478
42195: LD_INT 43
42197: DOUBLE
42198: EQUAL
42199: IFTRUE 42203
42201: GO 42229
42203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42204: LD_ADDR_VAR 0 3
42208: PUSH
42209: LD_INT 21
42211: PUSH
42212: LD_INT 22
42214: PUSH
42215: LD_INT 23
42217: PUSH
42218: LD_INT 24
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
42227: GO 42478
42229: LD_INT 44
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42237
42235: GO 42263
42237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42238: LD_ADDR_VAR 0 3
42242: PUSH
42243: LD_INT 21
42245: PUSH
42246: LD_INT 22
42248: PUSH
42249: LD_INT 23
42251: PUSH
42252: LD_INT 24
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
42261: GO 42478
42263: LD_INT 45
42265: DOUBLE
42266: EQUAL
42267: IFTRUE 42271
42269: GO 42297
42271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_INT 21
42279: PUSH
42280: LD_INT 22
42282: PUSH
42283: LD_INT 23
42285: PUSH
42286: LD_INT 24
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
42295: GO 42478
42297: LD_INT 49
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42331
42305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_INT 21
42313: PUSH
42314: LD_INT 22
42316: PUSH
42317: LD_INT 23
42319: PUSH
42320: LD_INT 24
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
42329: GO 42478
42331: LD_INT 51
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42365
42339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_INT 21
42347: PUSH
42348: LD_INT 22
42350: PUSH
42351: LD_INT 23
42353: PUSH
42354: LD_INT 24
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
42363: GO 42478
42365: LD_INT 52
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42399
42373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 21
42381: PUSH
42382: LD_INT 22
42384: PUSH
42385: LD_INT 23
42387: PUSH
42388: LD_INT 24
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42478
42399: LD_INT 53
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42425
42407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 23
42415: PUSH
42416: LD_INT 24
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: ST_TO_ADDR
42423: GO 42478
42425: LD_INT 46
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42451
42433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 23
42441: PUSH
42442: LD_INT 24
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: ST_TO_ADDR
42449: GO 42478
42451: LD_INT 47
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42459
42457: GO 42477
42459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 23
42467: PUSH
42468: LD_INT 24
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: ST_TO_ADDR
42475: GO 42478
42477: POP
// result := ( chassis in result ) ;
42478: LD_ADDR_VAR 0 3
42482: PUSH
42483: LD_VAR 0 1
42487: PUSH
42488: LD_VAR 0 3
42492: IN
42493: ST_TO_ADDR
// end ;
42494: LD_VAR 0 3
42498: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42499: LD_INT 0
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
// result := array ;
42508: LD_ADDR_VAR 0 5
42512: PUSH
42513: LD_VAR 0 1
42517: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42518: LD_VAR 0 1
42522: NOT
42523: PUSH
42524: LD_VAR 0 2
42528: NOT
42529: OR
42530: PUSH
42531: LD_VAR 0 3
42535: NOT
42536: OR
42537: PUSH
42538: LD_VAR 0 2
42542: PUSH
42543: LD_VAR 0 1
42547: GREATER
42548: OR
42549: PUSH
42550: LD_VAR 0 3
42554: PUSH
42555: LD_VAR 0 1
42559: GREATER
42560: OR
42561: IFFALSE 42565
// exit ;
42563: GO 42861
// if direction then
42565: LD_VAR 0 4
42569: IFFALSE 42633
// begin d := 1 ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: LD_INT 1
42578: ST_TO_ADDR
// if i_from > i_to then
42579: LD_VAR 0 2
42583: PUSH
42584: LD_VAR 0 3
42588: GREATER
42589: IFFALSE 42615
// length := ( array - i_from ) + i_to else
42591: LD_ADDR_VAR 0 11
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_VAR 0 2
42605: MINUS
42606: PUSH
42607: LD_VAR 0 3
42611: PLUS
42612: ST_TO_ADDR
42613: GO 42631
// length := i_to - i_from ;
42615: LD_ADDR_VAR 0 11
42619: PUSH
42620: LD_VAR 0 3
42624: PUSH
42625: LD_VAR 0 2
42629: MINUS
42630: ST_TO_ADDR
// end else
42631: GO 42694
// begin d := - 1 ;
42633: LD_ADDR_VAR 0 9
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: ST_TO_ADDR
// if i_from > i_to then
42642: LD_VAR 0 2
42646: PUSH
42647: LD_VAR 0 3
42651: GREATER
42652: IFFALSE 42672
// length := i_from - i_to else
42654: LD_ADDR_VAR 0 11
42658: PUSH
42659: LD_VAR 0 2
42663: PUSH
42664: LD_VAR 0 3
42668: MINUS
42669: ST_TO_ADDR
42670: GO 42694
// length := ( array - i_to ) + i_from ;
42672: LD_ADDR_VAR 0 11
42676: PUSH
42677: LD_VAR 0 1
42681: PUSH
42682: LD_VAR 0 3
42686: MINUS
42687: PUSH
42688: LD_VAR 0 2
42692: PLUS
42693: ST_TO_ADDR
// end ; if not length then
42694: LD_VAR 0 11
42698: NOT
42699: IFFALSE 42703
// exit ;
42701: GO 42861
// tmp := array ;
42703: LD_ADDR_VAR 0 10
42707: PUSH
42708: LD_VAR 0 1
42712: ST_TO_ADDR
// for i = 1 to length do
42713: LD_ADDR_VAR 0 6
42717: PUSH
42718: DOUBLE
42719: LD_INT 1
42721: DEC
42722: ST_TO_ADDR
42723: LD_VAR 0 11
42727: PUSH
42728: FOR_TO
42729: IFFALSE 42849
// begin for j = 1 to array do
42731: LD_ADDR_VAR 0 7
42735: PUSH
42736: DOUBLE
42737: LD_INT 1
42739: DEC
42740: ST_TO_ADDR
42741: LD_VAR 0 1
42745: PUSH
42746: FOR_TO
42747: IFFALSE 42835
// begin k := j + d ;
42749: LD_ADDR_VAR 0 8
42753: PUSH
42754: LD_VAR 0 7
42758: PUSH
42759: LD_VAR 0 9
42763: PLUS
42764: ST_TO_ADDR
// if k > array then
42765: LD_VAR 0 8
42769: PUSH
42770: LD_VAR 0 1
42774: GREATER
42775: IFFALSE 42785
// k := 1 ;
42777: LD_ADDR_VAR 0 8
42781: PUSH
42782: LD_INT 1
42784: ST_TO_ADDR
// if not k then
42785: LD_VAR 0 8
42789: NOT
42790: IFFALSE 42802
// k := array ;
42792: LD_ADDR_VAR 0 8
42796: PUSH
42797: LD_VAR 0 1
42801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42802: LD_ADDR_VAR 0 10
42806: PUSH
42807: LD_VAR 0 10
42811: PPUSH
42812: LD_VAR 0 8
42816: PPUSH
42817: LD_VAR 0 1
42821: PUSH
42822: LD_VAR 0 7
42826: ARRAY
42827: PPUSH
42828: CALL_OW 1
42832: ST_TO_ADDR
// end ;
42833: GO 42746
42835: POP
42836: POP
// array := tmp ;
42837: LD_ADDR_VAR 0 1
42841: PUSH
42842: LD_VAR 0 10
42846: ST_TO_ADDR
// end ;
42847: GO 42728
42849: POP
42850: POP
// result := array ;
42851: LD_ADDR_VAR 0 5
42855: PUSH
42856: LD_VAR 0 1
42860: ST_TO_ADDR
// end ;
42861: LD_VAR 0 5
42865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42866: LD_INT 0
42868: PPUSH
42869: PPUSH
// result := 0 ;
42870: LD_ADDR_VAR 0 3
42874: PUSH
42875: LD_INT 0
42877: ST_TO_ADDR
// if not array or not value in array then
42878: LD_VAR 0 1
42882: NOT
42883: PUSH
42884: LD_VAR 0 2
42888: PUSH
42889: LD_VAR 0 1
42893: IN
42894: NOT
42895: OR
42896: IFFALSE 42900
// exit ;
42898: GO 42954
// for i = 1 to array do
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: DOUBLE
42906: LD_INT 1
42908: DEC
42909: ST_TO_ADDR
42910: LD_VAR 0 1
42914: PUSH
42915: FOR_TO
42916: IFFALSE 42952
// if value = array [ i ] then
42918: LD_VAR 0 2
42922: PUSH
42923: LD_VAR 0 1
42927: PUSH
42928: LD_VAR 0 4
42932: ARRAY
42933: EQUAL
42934: IFFALSE 42950
// begin result := i ;
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_VAR 0 4
42945: ST_TO_ADDR
// exit ;
42946: POP
42947: POP
42948: GO 42954
// end ;
42950: GO 42915
42952: POP
42953: POP
// end ;
42954: LD_VAR 0 3
42958: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42959: LD_INT 0
42961: PPUSH
// vc_chassis := chassis ;
42962: LD_ADDR_OWVAR 37
42966: PUSH
42967: LD_VAR 0 1
42971: ST_TO_ADDR
// vc_engine := engine ;
42972: LD_ADDR_OWVAR 39
42976: PUSH
42977: LD_VAR 0 2
42981: ST_TO_ADDR
// vc_control := control ;
42982: LD_ADDR_OWVAR 38
42986: PUSH
42987: LD_VAR 0 3
42991: ST_TO_ADDR
// vc_weapon := weapon ;
42992: LD_ADDR_OWVAR 40
42996: PUSH
42997: LD_VAR 0 4
43001: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43002: LD_ADDR_OWVAR 41
43006: PUSH
43007: LD_VAR 0 5
43011: ST_TO_ADDR
// end ;
43012: LD_VAR 0 6
43016: RET
// export function WantPlant ( unit ) ; var task ; begin
43017: LD_INT 0
43019: PPUSH
43020: PPUSH
// result := false ;
43021: LD_ADDR_VAR 0 2
43025: PUSH
43026: LD_INT 0
43028: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_VAR 0 1
43038: PPUSH
43039: CALL_OW 437
43043: ST_TO_ADDR
// if task then
43044: LD_VAR 0 3
43048: IFFALSE 43076
// if task [ 1 ] [ 1 ] = p then
43050: LD_VAR 0 3
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: PUSH
43059: LD_INT 1
43061: ARRAY
43062: PUSH
43063: LD_STRING p
43065: EQUAL
43066: IFFALSE 43076
// result := true ;
43068: LD_ADDR_VAR 0 2
43072: PUSH
43073: LD_INT 1
43075: ST_TO_ADDR
// end ;
43076: LD_VAR 0 2
43080: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43081: LD_INT 0
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
// if pos < 1 then
43087: LD_VAR 0 2
43091: PUSH
43092: LD_INT 1
43094: LESS
43095: IFFALSE 43099
// exit ;
43097: GO 43402
// if pos = 1 then
43099: LD_VAR 0 2
43103: PUSH
43104: LD_INT 1
43106: EQUAL
43107: IFFALSE 43140
// result := Replace ( arr , pos [ 1 ] , value ) else
43109: LD_ADDR_VAR 0 4
43113: PUSH
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_VAR 0 2
43123: PUSH
43124: LD_INT 1
43126: ARRAY
43127: PPUSH
43128: LD_VAR 0 3
43132: PPUSH
43133: CALL_OW 1
43137: ST_TO_ADDR
43138: GO 43402
// begin tmp := arr ;
43140: LD_ADDR_VAR 0 6
43144: PUSH
43145: LD_VAR 0 1
43149: ST_TO_ADDR
// s_arr := [ tmp ] ;
43150: LD_ADDR_VAR 0 7
43154: PUSH
43155: LD_VAR 0 6
43159: PUSH
43160: EMPTY
43161: LIST
43162: ST_TO_ADDR
// for i = 1 to pos - 1 do
43163: LD_ADDR_VAR 0 5
43167: PUSH
43168: DOUBLE
43169: LD_INT 1
43171: DEC
43172: ST_TO_ADDR
43173: LD_VAR 0 2
43177: PUSH
43178: LD_INT 1
43180: MINUS
43181: PUSH
43182: FOR_TO
43183: IFFALSE 43228
// begin tmp := tmp [ pos [ i ] ] ;
43185: LD_ADDR_VAR 0 6
43189: PUSH
43190: LD_VAR 0 6
43194: PUSH
43195: LD_VAR 0 2
43199: PUSH
43200: LD_VAR 0 5
43204: ARRAY
43205: ARRAY
43206: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43207: LD_ADDR_VAR 0 7
43211: PUSH
43212: LD_VAR 0 7
43216: PUSH
43217: LD_VAR 0 6
43221: PUSH
43222: EMPTY
43223: LIST
43224: ADD
43225: ST_TO_ADDR
// end ;
43226: GO 43182
43228: POP
43229: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43230: LD_ADDR_VAR 0 6
43234: PUSH
43235: LD_VAR 0 6
43239: PPUSH
43240: LD_VAR 0 2
43244: PUSH
43245: LD_VAR 0 2
43249: ARRAY
43250: PPUSH
43251: LD_VAR 0 3
43255: PPUSH
43256: CALL_OW 1
43260: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43261: LD_ADDR_VAR 0 7
43265: PUSH
43266: LD_VAR 0 7
43270: PPUSH
43271: LD_VAR 0 7
43275: PPUSH
43276: LD_VAR 0 6
43280: PPUSH
43281: CALL_OW 1
43285: ST_TO_ADDR
// for i = s_arr downto 2 do
43286: LD_ADDR_VAR 0 5
43290: PUSH
43291: DOUBLE
43292: LD_VAR 0 7
43296: INC
43297: ST_TO_ADDR
43298: LD_INT 2
43300: PUSH
43301: FOR_DOWNTO
43302: IFFALSE 43386
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43304: LD_ADDR_VAR 0 6
43308: PUSH
43309: LD_VAR 0 7
43313: PUSH
43314: LD_VAR 0 5
43318: PUSH
43319: LD_INT 1
43321: MINUS
43322: ARRAY
43323: PPUSH
43324: LD_VAR 0 2
43328: PUSH
43329: LD_VAR 0 5
43333: PUSH
43334: LD_INT 1
43336: MINUS
43337: ARRAY
43338: PPUSH
43339: LD_VAR 0 7
43343: PUSH
43344: LD_VAR 0 5
43348: ARRAY
43349: PPUSH
43350: CALL_OW 1
43354: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43355: LD_ADDR_VAR 0 7
43359: PUSH
43360: LD_VAR 0 7
43364: PPUSH
43365: LD_VAR 0 5
43369: PUSH
43370: LD_INT 1
43372: MINUS
43373: PPUSH
43374: LD_VAR 0 6
43378: PPUSH
43379: CALL_OW 1
43383: ST_TO_ADDR
// end ;
43384: GO 43301
43386: POP
43387: POP
// result := s_arr [ 1 ] ;
43388: LD_ADDR_VAR 0 4
43392: PUSH
43393: LD_VAR 0 7
43397: PUSH
43398: LD_INT 1
43400: ARRAY
43401: ST_TO_ADDR
// end ; end ;
43402: LD_VAR 0 4
43406: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43407: LD_INT 0
43409: PPUSH
43410: PPUSH
// if not list then
43411: LD_VAR 0 1
43415: NOT
43416: IFFALSE 43420
// exit ;
43418: GO 43511
// i := list [ pos1 ] ;
43420: LD_ADDR_VAR 0 5
43424: PUSH
43425: LD_VAR 0 1
43429: PUSH
43430: LD_VAR 0 2
43434: ARRAY
43435: ST_TO_ADDR
// if not i then
43436: LD_VAR 0 5
43440: NOT
43441: IFFALSE 43445
// exit ;
43443: GO 43511
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43445: LD_ADDR_VAR 0 1
43449: PUSH
43450: LD_VAR 0 1
43454: PPUSH
43455: LD_VAR 0 2
43459: PPUSH
43460: LD_VAR 0 1
43464: PUSH
43465: LD_VAR 0 3
43469: ARRAY
43470: PPUSH
43471: CALL_OW 1
43475: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43476: LD_ADDR_VAR 0 1
43480: PUSH
43481: LD_VAR 0 1
43485: PPUSH
43486: LD_VAR 0 3
43490: PPUSH
43491: LD_VAR 0 5
43495: PPUSH
43496: CALL_OW 1
43500: ST_TO_ADDR
// result := list ;
43501: LD_ADDR_VAR 0 4
43505: PUSH
43506: LD_VAR 0 1
43510: ST_TO_ADDR
// end ;
43511: LD_VAR 0 4
43515: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43516: LD_INT 0
43518: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43519: LD_ADDR_VAR 0 5
43523: PUSH
43524: LD_VAR 0 1
43528: PPUSH
43529: CALL_OW 250
43533: PPUSH
43534: LD_VAR 0 1
43538: PPUSH
43539: CALL_OW 251
43543: PPUSH
43544: LD_VAR 0 2
43548: PPUSH
43549: LD_VAR 0 3
43553: PPUSH
43554: LD_VAR 0 4
43558: PPUSH
43559: CALL 43569 0 5
43563: ST_TO_ADDR
// end ;
43564: LD_VAR 0 5
43568: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43569: LD_INT 0
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// if not list then
43575: LD_VAR 0 3
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 43972
// result := [ ] ;
43584: LD_ADDR_VAR 0 6
43588: PUSH
43589: EMPTY
43590: ST_TO_ADDR
// for i in list do
43591: LD_ADDR_VAR 0 7
43595: PUSH
43596: LD_VAR 0 3
43600: PUSH
43601: FOR_IN
43602: IFFALSE 43804
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43604: LD_ADDR_VAR 0 9
43608: PUSH
43609: LD_VAR 0 7
43613: PPUSH
43614: LD_VAR 0 1
43618: PPUSH
43619: LD_VAR 0 2
43623: PPUSH
43624: CALL_OW 297
43628: ST_TO_ADDR
// if not result then
43629: LD_VAR 0 6
43633: NOT
43634: IFFALSE 43660
// result := [ [ i , tmp ] ] else
43636: LD_ADDR_VAR 0 6
43640: PUSH
43641: LD_VAR 0 7
43645: PUSH
43646: LD_VAR 0 9
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: EMPTY
43656: LIST
43657: ST_TO_ADDR
43658: GO 43802
// begin if result [ result ] [ 2 ] < tmp then
43660: LD_VAR 0 6
43664: PUSH
43665: LD_VAR 0 6
43669: ARRAY
43670: PUSH
43671: LD_INT 2
43673: ARRAY
43674: PUSH
43675: LD_VAR 0 9
43679: LESS
43680: IFFALSE 43722
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43682: LD_ADDR_VAR 0 6
43686: PUSH
43687: LD_VAR 0 6
43691: PPUSH
43692: LD_VAR 0 6
43696: PUSH
43697: LD_INT 1
43699: PLUS
43700: PPUSH
43701: LD_VAR 0 7
43705: PUSH
43706: LD_VAR 0 9
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PPUSH
43715: CALL_OW 2
43719: ST_TO_ADDR
43720: GO 43802
// for j = 1 to result do
43722: LD_ADDR_VAR 0 8
43726: PUSH
43727: DOUBLE
43728: LD_INT 1
43730: DEC
43731: ST_TO_ADDR
43732: LD_VAR 0 6
43736: PUSH
43737: FOR_TO
43738: IFFALSE 43800
// begin if tmp < result [ j ] [ 2 ] then
43740: LD_VAR 0 9
43744: PUSH
43745: LD_VAR 0 6
43749: PUSH
43750: LD_VAR 0 8
43754: ARRAY
43755: PUSH
43756: LD_INT 2
43758: ARRAY
43759: LESS
43760: IFFALSE 43798
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43762: LD_ADDR_VAR 0 6
43766: PUSH
43767: LD_VAR 0 6
43771: PPUSH
43772: LD_VAR 0 8
43776: PPUSH
43777: LD_VAR 0 7
43781: PUSH
43782: LD_VAR 0 9
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PPUSH
43791: CALL_OW 2
43795: ST_TO_ADDR
// break ;
43796: GO 43800
// end ; end ;
43798: GO 43737
43800: POP
43801: POP
// end ; end ;
43802: GO 43601
43804: POP
43805: POP
// if result and not asc then
43806: LD_VAR 0 6
43810: PUSH
43811: LD_VAR 0 4
43815: NOT
43816: AND
43817: IFFALSE 43892
// begin tmp := result ;
43819: LD_ADDR_VAR 0 9
43823: PUSH
43824: LD_VAR 0 6
43828: ST_TO_ADDR
// for i = tmp downto 1 do
43829: LD_ADDR_VAR 0 7
43833: PUSH
43834: DOUBLE
43835: LD_VAR 0 9
43839: INC
43840: ST_TO_ADDR
43841: LD_INT 1
43843: PUSH
43844: FOR_DOWNTO
43845: IFFALSE 43890
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43847: LD_ADDR_VAR 0 6
43851: PUSH
43852: LD_VAR 0 6
43856: PPUSH
43857: LD_VAR 0 9
43861: PUSH
43862: LD_VAR 0 7
43866: MINUS
43867: PUSH
43868: LD_INT 1
43870: PLUS
43871: PPUSH
43872: LD_VAR 0 9
43876: PUSH
43877: LD_VAR 0 7
43881: ARRAY
43882: PPUSH
43883: CALL_OW 1
43887: ST_TO_ADDR
43888: GO 43844
43890: POP
43891: POP
// end ; tmp := [ ] ;
43892: LD_ADDR_VAR 0 9
43896: PUSH
43897: EMPTY
43898: ST_TO_ADDR
// if mode then
43899: LD_VAR 0 5
43903: IFFALSE 43972
// begin for i = 1 to result do
43905: LD_ADDR_VAR 0 7
43909: PUSH
43910: DOUBLE
43911: LD_INT 1
43913: DEC
43914: ST_TO_ADDR
43915: LD_VAR 0 6
43919: PUSH
43920: FOR_TO
43921: IFFALSE 43960
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43923: LD_ADDR_VAR 0 9
43927: PUSH
43928: LD_VAR 0 9
43932: PPUSH
43933: LD_VAR 0 7
43937: PPUSH
43938: LD_VAR 0 6
43942: PUSH
43943: LD_VAR 0 7
43947: ARRAY
43948: PUSH
43949: LD_INT 1
43951: ARRAY
43952: PPUSH
43953: CALL_OW 1
43957: ST_TO_ADDR
43958: GO 43920
43960: POP
43961: POP
// result := tmp ;
43962: LD_ADDR_VAR 0 6
43966: PUSH
43967: LD_VAR 0 9
43971: ST_TO_ADDR
// end ; end ;
43972: LD_VAR 0 6
43976: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43977: LD_INT 0
43979: PPUSH
43980: PPUSH
43981: PPUSH
43982: PPUSH
43983: PPUSH
43984: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43985: LD_ADDR_VAR 0 5
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: ST_TO_ADDR
// if not x or not y then
44007: LD_VAR 0 2
44011: NOT
44012: PUSH
44013: LD_VAR 0 3
44017: NOT
44018: OR
44019: IFFALSE 44023
// exit ;
44021: GO 45669
// if not range then
44023: LD_VAR 0 4
44027: NOT
44028: IFFALSE 44038
// range := 10 ;
44030: LD_ADDR_VAR 0 4
44034: PUSH
44035: LD_INT 10
44037: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44038: LD_ADDR_VAR 0 8
44042: PUSH
44043: LD_INT 81
44045: PUSH
44046: LD_VAR 0 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 92
44057: PUSH
44058: LD_VAR 0 2
44062: PUSH
44063: LD_VAR 0 3
44067: PUSH
44068: LD_VAR 0 4
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: LD_INT 21
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: PPUSH
44101: CALL_OW 69
44105: ST_TO_ADDR
// if not tmp then
44106: LD_VAR 0 8
44110: NOT
44111: IFFALSE 44115
// exit ;
44113: GO 45669
// for i in tmp do
44115: LD_ADDR_VAR 0 6
44119: PUSH
44120: LD_VAR 0 8
44124: PUSH
44125: FOR_IN
44126: IFFALSE 45644
// begin points := [ 0 , 0 , 0 ] ;
44128: LD_ADDR_VAR 0 9
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// bpoints := 1 ;
44147: LD_ADDR_VAR 0 10
44151: PUSH
44152: LD_INT 1
44154: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44155: LD_VAR 0 6
44159: PPUSH
44160: CALL_OW 247
44164: PUSH
44165: LD_INT 1
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44751
44173: POP
// begin if GetClass ( i ) = 1 then
44174: LD_VAR 0 6
44178: PPUSH
44179: CALL_OW 257
44183: PUSH
44184: LD_INT 1
44186: EQUAL
44187: IFFALSE 44208
// points := [ 10 , 5 , 3 ] ;
44189: LD_ADDR_VAR 0 9
44193: PUSH
44194: LD_INT 10
44196: PUSH
44197: LD_INT 5
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44208: LD_VAR 0 6
44212: PPUSH
44213: CALL_OW 257
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 4
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: IN
44232: IFFALSE 44253
// points := [ 3 , 2 , 1 ] ;
44234: LD_ADDR_VAR 0 9
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44253: LD_VAR 0 6
44257: PPUSH
44258: CALL_OW 257
44262: PUSH
44263: LD_INT 5
44265: EQUAL
44266: IFFALSE 44287
// points := [ 130 , 5 , 2 ] ;
44268: LD_ADDR_VAR 0 9
44272: PUSH
44273: LD_INT 130
44275: PUSH
44276: LD_INT 5
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44287: LD_VAR 0 6
44291: PPUSH
44292: CALL_OW 257
44296: PUSH
44297: LD_INT 8
44299: EQUAL
44300: IFFALSE 44321
// points := [ 35 , 35 , 30 ] ;
44302: LD_ADDR_VAR 0 9
44306: PUSH
44307: LD_INT 35
44309: PUSH
44310: LD_INT 35
44312: PUSH
44313: LD_INT 30
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44321: LD_VAR 0 6
44325: PPUSH
44326: CALL_OW 257
44330: PUSH
44331: LD_INT 9
44333: EQUAL
44334: IFFALSE 44355
// points := [ 20 , 55 , 40 ] ;
44336: LD_ADDR_VAR 0 9
44340: PUSH
44341: LD_INT 20
44343: PUSH
44344: LD_INT 55
44346: PUSH
44347: LD_INT 40
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44355: LD_VAR 0 6
44359: PPUSH
44360: CALL_OW 257
44364: PUSH
44365: LD_INT 12
44367: PUSH
44368: LD_INT 16
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: IN
44375: IFFALSE 44396
// points := [ 5 , 3 , 2 ] ;
44377: LD_ADDR_VAR 0 9
44381: PUSH
44382: LD_INT 5
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44396: LD_VAR 0 6
44400: PPUSH
44401: CALL_OW 257
44405: PUSH
44406: LD_INT 17
44408: EQUAL
44409: IFFALSE 44430
// points := [ 100 , 50 , 75 ] ;
44411: LD_ADDR_VAR 0 9
44415: PUSH
44416: LD_INT 100
44418: PUSH
44419: LD_INT 50
44421: PUSH
44422: LD_INT 75
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44430: LD_VAR 0 6
44434: PPUSH
44435: CALL_OW 257
44439: PUSH
44440: LD_INT 15
44442: EQUAL
44443: IFFALSE 44464
// points := [ 10 , 5 , 3 ] ;
44445: LD_ADDR_VAR 0 9
44449: PUSH
44450: LD_INT 10
44452: PUSH
44453: LD_INT 5
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44464: LD_VAR 0 6
44468: PPUSH
44469: CALL_OW 257
44473: PUSH
44474: LD_INT 14
44476: EQUAL
44477: IFFALSE 44498
// points := [ 10 , 0 , 0 ] ;
44479: LD_ADDR_VAR 0 9
44483: PUSH
44484: LD_INT 10
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44498: LD_VAR 0 6
44502: PPUSH
44503: CALL_OW 257
44507: PUSH
44508: LD_INT 11
44510: EQUAL
44511: IFFALSE 44532
// points := [ 30 , 10 , 5 ] ;
44513: LD_ADDR_VAR 0 9
44517: PUSH
44518: LD_INT 30
44520: PUSH
44521: LD_INT 10
44523: PUSH
44524: LD_INT 5
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44532: LD_VAR 0 1
44536: PPUSH
44537: LD_INT 5
44539: PPUSH
44540: CALL_OW 321
44544: PUSH
44545: LD_INT 2
44547: EQUAL
44548: IFFALSE 44565
// bpoints := bpoints * 1.8 ;
44550: LD_ADDR_VAR 0 10
44554: PUSH
44555: LD_VAR 0 10
44559: PUSH
44560: LD_REAL  1.80000000000000E+0000
44563: MUL
44564: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44565: LD_VAR 0 6
44569: PPUSH
44570: CALL_OW 257
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: LD_INT 4
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: IN
44593: PUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: LD_INT 51
44601: PPUSH
44602: CALL_OW 321
44606: PUSH
44607: LD_INT 2
44609: EQUAL
44610: AND
44611: IFFALSE 44628
// bpoints := bpoints * 1.2 ;
44613: LD_ADDR_VAR 0 10
44617: PUSH
44618: LD_VAR 0 10
44622: PUSH
44623: LD_REAL  1.20000000000000E+0000
44626: MUL
44627: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44628: LD_VAR 0 6
44632: PPUSH
44633: CALL_OW 257
44637: PUSH
44638: LD_INT 5
44640: PUSH
44641: LD_INT 7
44643: PUSH
44644: LD_INT 9
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: IN
44652: PUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: LD_INT 52
44660: PPUSH
44661: CALL_OW 321
44665: PUSH
44666: LD_INT 2
44668: EQUAL
44669: AND
44670: IFFALSE 44687
// bpoints := bpoints * 1.5 ;
44672: LD_ADDR_VAR 0 10
44676: PUSH
44677: LD_VAR 0 10
44681: PUSH
44682: LD_REAL  1.50000000000000E+0000
44685: MUL
44686: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44687: LD_VAR 0 1
44691: PPUSH
44692: LD_INT 66
44694: PPUSH
44695: CALL_OW 321
44699: PUSH
44700: LD_INT 2
44702: EQUAL
44703: IFFALSE 44720
// bpoints := bpoints * 1.1 ;
44705: LD_ADDR_VAR 0 10
44709: PUSH
44710: LD_VAR 0 10
44714: PUSH
44715: LD_REAL  1.10000000000000E+0000
44718: MUL
44719: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44720: LD_ADDR_VAR 0 10
44724: PUSH
44725: LD_VAR 0 10
44729: PUSH
44730: LD_VAR 0 6
44734: PPUSH
44735: LD_INT 1
44737: PPUSH
44738: CALL_OW 259
44742: PUSH
44743: LD_REAL  1.15000000000000E+0000
44746: MUL
44747: MUL
44748: ST_TO_ADDR
// end ; unit_vehicle :
44749: GO 45573
44751: LD_INT 2
44753: DOUBLE
44754: EQUAL
44755: IFTRUE 44759
44757: GO 45561
44759: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44760: LD_VAR 0 6
44764: PPUSH
44765: CALL_OW 264
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: LD_INT 42
44775: PUSH
44776: LD_INT 24
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: IN
44784: IFFALSE 44805
// points := [ 25 , 5 , 3 ] ;
44786: LD_ADDR_VAR 0 9
44790: PUSH
44791: LD_INT 25
44793: PUSH
44794: LD_INT 5
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44805: LD_VAR 0 6
44809: PPUSH
44810: CALL_OW 264
44814: PUSH
44815: LD_INT 4
44817: PUSH
44818: LD_INT 43
44820: PUSH
44821: LD_INT 25
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: IN
44829: IFFALSE 44850
// points := [ 40 , 15 , 5 ] ;
44831: LD_ADDR_VAR 0 9
44835: PUSH
44836: LD_INT 40
44838: PUSH
44839: LD_INT 15
44841: PUSH
44842: LD_INT 5
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44850: LD_VAR 0 6
44854: PPUSH
44855: CALL_OW 264
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 23
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: IN
44870: IFFALSE 44891
// points := [ 7 , 25 , 8 ] ;
44872: LD_ADDR_VAR 0 9
44876: PUSH
44877: LD_INT 7
44879: PUSH
44880: LD_INT 25
44882: PUSH
44883: LD_INT 8
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44891: LD_VAR 0 6
44895: PPUSH
44896: CALL_OW 264
44900: PUSH
44901: LD_INT 5
44903: PUSH
44904: LD_INT 27
44906: PUSH
44907: LD_INT 44
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: IN
44915: IFFALSE 44936
// points := [ 14 , 50 , 16 ] ;
44917: LD_ADDR_VAR 0 9
44921: PUSH
44922: LD_INT 14
44924: PUSH
44925: LD_INT 50
44927: PUSH
44928: LD_INT 16
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44936: LD_VAR 0 6
44940: PPUSH
44941: CALL_OW 264
44945: PUSH
44946: LD_INT 6
44948: PUSH
44949: LD_INT 46
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: IN
44956: IFFALSE 44977
// points := [ 32 , 120 , 70 ] ;
44958: LD_ADDR_VAR 0 9
44962: PUSH
44963: LD_INT 32
44965: PUSH
44966: LD_INT 120
44968: PUSH
44969: LD_INT 70
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
44977: LD_VAR 0 6
44981: PPUSH
44982: CALL_OW 264
44986: PUSH
44987: LD_INT 7
44989: PUSH
44990: LD_INT 28
44992: PUSH
44993: LD_INT 45
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: IN
45001: IFFALSE 45022
// points := [ 35 , 20 , 45 ] ;
45003: LD_ADDR_VAR 0 9
45007: PUSH
45008: LD_INT 35
45010: PUSH
45011: LD_INT 20
45013: PUSH
45014: LD_INT 45
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45022: LD_VAR 0 6
45026: PPUSH
45027: CALL_OW 264
45031: PUSH
45032: LD_INT 47
45034: PUSH
45035: EMPTY
45036: LIST
45037: IN
45038: IFFALSE 45059
// points := [ 67 , 45 , 75 ] ;
45040: LD_ADDR_VAR 0 9
45044: PUSH
45045: LD_INT 67
45047: PUSH
45048: LD_INT 45
45050: PUSH
45051: LD_INT 75
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45059: LD_VAR 0 6
45063: PPUSH
45064: CALL_OW 264
45068: PUSH
45069: LD_INT 26
45071: PUSH
45072: EMPTY
45073: LIST
45074: IN
45075: IFFALSE 45096
// points := [ 120 , 30 , 80 ] ;
45077: LD_ADDR_VAR 0 9
45081: PUSH
45082: LD_INT 120
45084: PUSH
45085: LD_INT 30
45087: PUSH
45088: LD_INT 80
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45096: LD_VAR 0 6
45100: PPUSH
45101: CALL_OW 264
45105: PUSH
45106: LD_INT 22
45108: PUSH
45109: EMPTY
45110: LIST
45111: IN
45112: IFFALSE 45133
// points := [ 40 , 1 , 1 ] ;
45114: LD_ADDR_VAR 0 9
45118: PUSH
45119: LD_INT 40
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45133: LD_VAR 0 6
45137: PPUSH
45138: CALL_OW 264
45142: PUSH
45143: LD_INT 29
45145: PUSH
45146: EMPTY
45147: LIST
45148: IN
45149: IFFALSE 45170
// points := [ 70 , 200 , 400 ] ;
45151: LD_ADDR_VAR 0 9
45155: PUSH
45156: LD_INT 70
45158: PUSH
45159: LD_INT 200
45161: PUSH
45162: LD_INT 400
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45170: LD_VAR 0 6
45174: PPUSH
45175: CALL_OW 264
45179: PUSH
45180: LD_INT 14
45182: PUSH
45183: LD_INT 53
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: IN
45190: IFFALSE 45211
// points := [ 40 , 10 , 20 ] ;
45192: LD_ADDR_VAR 0 9
45196: PUSH
45197: LD_INT 40
45199: PUSH
45200: LD_INT 10
45202: PUSH
45203: LD_INT 20
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45211: LD_VAR 0 6
45215: PPUSH
45216: CALL_OW 264
45220: PUSH
45221: LD_INT 9
45223: PUSH
45224: EMPTY
45225: LIST
45226: IN
45227: IFFALSE 45248
// points := [ 5 , 70 , 20 ] ;
45229: LD_ADDR_VAR 0 9
45233: PUSH
45234: LD_INT 5
45236: PUSH
45237: LD_INT 70
45239: PUSH
45240: LD_INT 20
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45248: LD_VAR 0 6
45252: PPUSH
45253: CALL_OW 264
45257: PUSH
45258: LD_INT 10
45260: PUSH
45261: EMPTY
45262: LIST
45263: IN
45264: IFFALSE 45285
// points := [ 35 , 110 , 70 ] ;
45266: LD_ADDR_VAR 0 9
45270: PUSH
45271: LD_INT 35
45273: PUSH
45274: LD_INT 110
45276: PUSH
45277: LD_INT 70
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45285: LD_VAR 0 6
45289: PPUSH
45290: CALL_OW 265
45294: PUSH
45295: LD_INT 25
45297: EQUAL
45298: IFFALSE 45319
// points := [ 80 , 65 , 100 ] ;
45300: LD_ADDR_VAR 0 9
45304: PUSH
45305: LD_INT 80
45307: PUSH
45308: LD_INT 65
45310: PUSH
45311: LD_INT 100
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45319: LD_VAR 0 6
45323: PPUSH
45324: CALL_OW 263
45328: PUSH
45329: LD_INT 1
45331: EQUAL
45332: IFFALSE 45367
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45334: LD_ADDR_VAR 0 10
45338: PUSH
45339: LD_VAR 0 10
45343: PUSH
45344: LD_VAR 0 6
45348: PPUSH
45349: CALL_OW 311
45353: PPUSH
45354: LD_INT 3
45356: PPUSH
45357: CALL_OW 259
45361: PUSH
45362: LD_INT 4
45364: MUL
45365: MUL
45366: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45367: LD_VAR 0 6
45371: PPUSH
45372: CALL_OW 263
45376: PUSH
45377: LD_INT 2
45379: EQUAL
45380: IFFALSE 45431
// begin j := IsControledBy ( i ) ;
45382: LD_ADDR_VAR 0 7
45386: PUSH
45387: LD_VAR 0 6
45391: PPUSH
45392: CALL_OW 312
45396: ST_TO_ADDR
// if j then
45397: LD_VAR 0 7
45401: IFFALSE 45431
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45403: LD_ADDR_VAR 0 10
45407: PUSH
45408: LD_VAR 0 10
45412: PUSH
45413: LD_VAR 0 7
45417: PPUSH
45418: LD_INT 3
45420: PPUSH
45421: CALL_OW 259
45425: PUSH
45426: LD_INT 3
45428: MUL
45429: MUL
45430: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45431: LD_VAR 0 6
45435: PPUSH
45436: CALL_OW 264
45440: PUSH
45441: LD_INT 5
45443: PUSH
45444: LD_INT 6
45446: PUSH
45447: LD_INT 46
45449: PUSH
45450: LD_INT 44
45452: PUSH
45453: LD_INT 47
45455: PUSH
45456: LD_INT 45
45458: PUSH
45459: LD_INT 28
45461: PUSH
45462: LD_INT 7
45464: PUSH
45465: LD_INT 27
45467: PUSH
45468: LD_INT 29
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: IN
45483: PUSH
45484: LD_VAR 0 1
45488: PPUSH
45489: LD_INT 52
45491: PPUSH
45492: CALL_OW 321
45496: PUSH
45497: LD_INT 2
45499: EQUAL
45500: AND
45501: IFFALSE 45518
// bpoints := bpoints * 1.2 ;
45503: LD_ADDR_VAR 0 10
45507: PUSH
45508: LD_VAR 0 10
45512: PUSH
45513: LD_REAL  1.20000000000000E+0000
45516: MUL
45517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45518: LD_VAR 0 6
45522: PPUSH
45523: CALL_OW 264
45527: PUSH
45528: LD_INT 6
45530: PUSH
45531: LD_INT 46
45533: PUSH
45534: LD_INT 47
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: IN
45542: IFFALSE 45559
// bpoints := bpoints * 1.2 ;
45544: LD_ADDR_VAR 0 10
45548: PUSH
45549: LD_VAR 0 10
45553: PUSH
45554: LD_REAL  1.20000000000000E+0000
45557: MUL
45558: ST_TO_ADDR
// end ; unit_building :
45559: GO 45573
45561: LD_INT 3
45563: DOUBLE
45564: EQUAL
45565: IFTRUE 45569
45567: GO 45572
45569: POP
// ; end ;
45570: GO 45573
45572: POP
// for j = 1 to 3 do
45573: LD_ADDR_VAR 0 7
45577: PUSH
45578: DOUBLE
45579: LD_INT 1
45581: DEC
45582: ST_TO_ADDR
45583: LD_INT 3
45585: PUSH
45586: FOR_TO
45587: IFFALSE 45640
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45589: LD_ADDR_VAR 0 5
45593: PUSH
45594: LD_VAR 0 5
45598: PPUSH
45599: LD_VAR 0 7
45603: PPUSH
45604: LD_VAR 0 5
45608: PUSH
45609: LD_VAR 0 7
45613: ARRAY
45614: PUSH
45615: LD_VAR 0 9
45619: PUSH
45620: LD_VAR 0 7
45624: ARRAY
45625: PUSH
45626: LD_VAR 0 10
45630: MUL
45631: PLUS
45632: PPUSH
45633: CALL_OW 1
45637: ST_TO_ADDR
45638: GO 45586
45640: POP
45641: POP
// end ;
45642: GO 44125
45644: POP
45645: POP
// result := Replace ( result , 4 , tmp ) ;
45646: LD_ADDR_VAR 0 5
45650: PUSH
45651: LD_VAR 0 5
45655: PPUSH
45656: LD_INT 4
45658: PPUSH
45659: LD_VAR 0 8
45663: PPUSH
45664: CALL_OW 1
45668: ST_TO_ADDR
// end ;
45669: LD_VAR 0 5
45673: RET
// export function DangerAtRange ( unit , range ) ; begin
45674: LD_INT 0
45676: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_VAR 0 1
45686: PPUSH
45687: CALL_OW 255
45691: PPUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 250
45701: PPUSH
45702: LD_VAR 0 1
45706: PPUSH
45707: CALL_OW 251
45711: PPUSH
45712: LD_VAR 0 2
45716: PPUSH
45717: CALL 43977 0 4
45721: ST_TO_ADDR
// end ;
45722: LD_VAR 0 3
45726: RET
// export function DangerInArea ( side , area ) ; begin
45727: LD_INT 0
45729: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45730: LD_ADDR_VAR 0 3
45734: PUSH
45735: LD_VAR 0 2
45739: PPUSH
45740: LD_INT 81
45742: PUSH
45743: LD_VAR 0 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PPUSH
45752: CALL_OW 70
45756: ST_TO_ADDR
// end ;
45757: LD_VAR 0 3
45761: RET
// export function IsExtension ( b ) ; begin
45762: LD_INT 0
45764: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45765: LD_ADDR_VAR 0 2
45769: PUSH
45770: LD_VAR 0 1
45774: PUSH
45775: LD_INT 23
45777: PUSH
45778: LD_INT 20
45780: PUSH
45781: LD_INT 22
45783: PUSH
45784: LD_INT 17
45786: PUSH
45787: LD_INT 24
45789: PUSH
45790: LD_INT 21
45792: PUSH
45793: LD_INT 19
45795: PUSH
45796: LD_INT 16
45798: PUSH
45799: LD_INT 25
45801: PUSH
45802: LD_INT 18
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: IN
45817: ST_TO_ADDR
// end ;
45818: LD_VAR 0 2
45822: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45823: LD_INT 0
45825: PPUSH
45826: PPUSH
45827: PPUSH
// result := [ ] ;
45828: LD_ADDR_VAR 0 4
45832: PUSH
45833: EMPTY
45834: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45835: LD_ADDR_VAR 0 5
45839: PUSH
45840: LD_VAR 0 2
45844: PPUSH
45845: LD_INT 21
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PPUSH
45855: CALL_OW 70
45859: ST_TO_ADDR
// if not tmp then
45860: LD_VAR 0 5
45864: NOT
45865: IFFALSE 45869
// exit ;
45867: GO 45933
// if checkLink then
45869: LD_VAR 0 3
45873: IFFALSE 45923
// begin for i in tmp do
45875: LD_ADDR_VAR 0 6
45879: PUSH
45880: LD_VAR 0 5
45884: PUSH
45885: FOR_IN
45886: IFFALSE 45921
// if GetBase ( i ) <> base then
45888: LD_VAR 0 6
45892: PPUSH
45893: CALL_OW 274
45897: PUSH
45898: LD_VAR 0 1
45902: NONEQUAL
45903: IFFALSE 45919
// ComLinkToBase ( base , i ) ;
45905: LD_VAR 0 1
45909: PPUSH
45910: LD_VAR 0 6
45914: PPUSH
45915: CALL_OW 169
45919: GO 45885
45921: POP
45922: POP
// end ; result := tmp ;
45923: LD_ADDR_VAR 0 4
45927: PUSH
45928: LD_VAR 0 5
45932: ST_TO_ADDR
// end ;
45933: LD_VAR 0 4
45937: RET
// export function ComComplete ( units , b ) ; var i ; begin
45938: LD_INT 0
45940: PPUSH
45941: PPUSH
// if not units then
45942: LD_VAR 0 1
45946: NOT
45947: IFFALSE 45951
// exit ;
45949: GO 46041
// for i in units do
45951: LD_ADDR_VAR 0 4
45955: PUSH
45956: LD_VAR 0 1
45960: PUSH
45961: FOR_IN
45962: IFFALSE 46039
// if BuildingStatus ( b ) = bs_build then
45964: LD_VAR 0 2
45968: PPUSH
45969: CALL_OW 461
45973: PUSH
45974: LD_INT 1
45976: EQUAL
45977: IFFALSE 46037
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45979: LD_VAR 0 4
45983: PPUSH
45984: LD_STRING h
45986: PUSH
45987: LD_VAR 0 2
45991: PPUSH
45992: CALL_OW 250
45996: PUSH
45997: LD_VAR 0 2
46001: PPUSH
46002: CALL_OW 251
46006: PUSH
46007: LD_VAR 0 2
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: PUSH
46030: EMPTY
46031: LIST
46032: PPUSH
46033: CALL_OW 446
46037: GO 45961
46039: POP
46040: POP
// end ;
46041: LD_VAR 0 3
46045: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46046: LD_INT 0
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
46054: LD_VAR 0 1
46058: NOT
46059: PUSH
46060: LD_VAR 0 1
46064: PPUSH
46065: CALL_OW 263
46069: PUSH
46070: LD_INT 2
46072: EQUAL
46073: NOT
46074: OR
46075: IFFALSE 46079
// exit ;
46077: GO 46395
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46079: LD_ADDR_VAR 0 6
46083: PUSH
46084: LD_INT 22
46086: PUSH
46087: LD_VAR 0 1
46091: PPUSH
46092: CALL_OW 255
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 30
46106: PUSH
46107: LD_INT 36
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 34
46116: PUSH
46117: LD_INT 31
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PPUSH
46133: CALL_OW 69
46137: ST_TO_ADDR
// if not tmp then
46138: LD_VAR 0 6
46142: NOT
46143: IFFALSE 46147
// exit ;
46145: GO 46395
// result := [ ] ;
46147: LD_ADDR_VAR 0 2
46151: PUSH
46152: EMPTY
46153: ST_TO_ADDR
// for i in tmp do
46154: LD_ADDR_VAR 0 3
46158: PUSH
46159: LD_VAR 0 6
46163: PUSH
46164: FOR_IN
46165: IFFALSE 46236
// begin t := UnitsInside ( i ) ;
46167: LD_ADDR_VAR 0 4
46171: PUSH
46172: LD_VAR 0 3
46176: PPUSH
46177: CALL_OW 313
46181: ST_TO_ADDR
// if t then
46182: LD_VAR 0 4
46186: IFFALSE 46234
// for j in t do
46188: LD_ADDR_VAR 0 7
46192: PUSH
46193: LD_VAR 0 4
46197: PUSH
46198: FOR_IN
46199: IFFALSE 46232
// result := Insert ( result , result + 1 , j ) ;
46201: LD_ADDR_VAR 0 2
46205: PUSH
46206: LD_VAR 0 2
46210: PPUSH
46211: LD_VAR 0 2
46215: PUSH
46216: LD_INT 1
46218: PLUS
46219: PPUSH
46220: LD_VAR 0 7
46224: PPUSH
46225: CALL_OW 2
46229: ST_TO_ADDR
46230: GO 46198
46232: POP
46233: POP
// end ;
46234: GO 46164
46236: POP
46237: POP
// if not result then
46238: LD_VAR 0 2
46242: NOT
46243: IFFALSE 46247
// exit ;
46245: GO 46395
// mech := result [ 1 ] ;
46247: LD_ADDR_VAR 0 5
46251: PUSH
46252: LD_VAR 0 2
46256: PUSH
46257: LD_INT 1
46259: ARRAY
46260: ST_TO_ADDR
// if result > 1 then
46261: LD_VAR 0 2
46265: PUSH
46266: LD_INT 1
46268: GREATER
46269: IFFALSE 46381
// for i = 2 to result do
46271: LD_ADDR_VAR 0 3
46275: PUSH
46276: DOUBLE
46277: LD_INT 2
46279: DEC
46280: ST_TO_ADDR
46281: LD_VAR 0 2
46285: PUSH
46286: FOR_TO
46287: IFFALSE 46379
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46289: LD_ADDR_VAR 0 4
46293: PUSH
46294: LD_VAR 0 2
46298: PUSH
46299: LD_VAR 0 3
46303: ARRAY
46304: PPUSH
46305: LD_INT 3
46307: PPUSH
46308: CALL_OW 259
46312: PUSH
46313: LD_VAR 0 2
46317: PUSH
46318: LD_VAR 0 3
46322: ARRAY
46323: PPUSH
46324: CALL_OW 432
46328: MINUS
46329: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46330: LD_VAR 0 4
46334: PUSH
46335: LD_VAR 0 5
46339: PPUSH
46340: LD_INT 3
46342: PPUSH
46343: CALL_OW 259
46347: PUSH
46348: LD_VAR 0 5
46352: PPUSH
46353: CALL_OW 432
46357: MINUS
46358: GREATEREQUAL
46359: IFFALSE 46377
// mech := result [ i ] ;
46361: LD_ADDR_VAR 0 5
46365: PUSH
46366: LD_VAR 0 2
46370: PUSH
46371: LD_VAR 0 3
46375: ARRAY
46376: ST_TO_ADDR
// end ;
46377: GO 46286
46379: POP
46380: POP
// ComLinkTo ( vehicle , mech ) ;
46381: LD_VAR 0 1
46385: PPUSH
46386: LD_VAR 0 5
46390: PPUSH
46391: CALL_OW 135
// end ;
46395: LD_VAR 0 2
46399: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46400: LD_INT 0
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
// result := [ ] ;
46415: LD_ADDR_VAR 0 7
46419: PUSH
46420: EMPTY
46421: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46422: LD_VAR 0 1
46426: PPUSH
46427: CALL_OW 266
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: IN
46442: NOT
46443: IFFALSE 46447
// exit ;
46445: GO 48081
// if name then
46447: LD_VAR 0 3
46451: IFFALSE 46467
// SetBName ( base_dep , name ) ;
46453: LD_VAR 0 1
46457: PPUSH
46458: LD_VAR 0 3
46462: PPUSH
46463: CALL_OW 500
// base := GetBase ( base_dep ) ;
46467: LD_ADDR_VAR 0 15
46471: PUSH
46472: LD_VAR 0 1
46476: PPUSH
46477: CALL_OW 274
46481: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46482: LD_ADDR_VAR 0 16
46486: PUSH
46487: LD_VAR 0 1
46491: PPUSH
46492: CALL_OW 255
46496: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46497: LD_ADDR_VAR 0 17
46501: PUSH
46502: LD_VAR 0 1
46506: PPUSH
46507: CALL_OW 248
46511: ST_TO_ADDR
// if sources then
46512: LD_VAR 0 5
46516: IFFALSE 46563
// for i = 1 to 3 do
46518: LD_ADDR_VAR 0 8
46522: PUSH
46523: DOUBLE
46524: LD_INT 1
46526: DEC
46527: ST_TO_ADDR
46528: LD_INT 3
46530: PUSH
46531: FOR_TO
46532: IFFALSE 46561
// AddResourceType ( base , i , sources [ i ] ) ;
46534: LD_VAR 0 15
46538: PPUSH
46539: LD_VAR 0 8
46543: PPUSH
46544: LD_VAR 0 5
46548: PUSH
46549: LD_VAR 0 8
46553: ARRAY
46554: PPUSH
46555: CALL_OW 276
46559: GO 46531
46561: POP
46562: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46563: LD_ADDR_VAR 0 18
46567: PUSH
46568: LD_VAR 0 15
46572: PPUSH
46573: LD_VAR 0 2
46577: PPUSH
46578: LD_INT 1
46580: PPUSH
46581: CALL 45823 0 3
46585: ST_TO_ADDR
// InitHc ;
46586: CALL_OW 19
// InitUc ;
46590: CALL_OW 18
// uc_side := side ;
46594: LD_ADDR_OWVAR 20
46598: PUSH
46599: LD_VAR 0 16
46603: ST_TO_ADDR
// uc_nation := nation ;
46604: LD_ADDR_OWVAR 21
46608: PUSH
46609: LD_VAR 0 17
46613: ST_TO_ADDR
// if buildings then
46614: LD_VAR 0 18
46618: IFFALSE 47940
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46620: LD_ADDR_VAR 0 19
46624: PUSH
46625: LD_VAR 0 18
46629: PPUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 30
46635: PUSH
46636: LD_INT 29
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 30
46645: PUSH
46646: LD_INT 30
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: PPUSH
46658: CALL_OW 72
46662: ST_TO_ADDR
// if tmp then
46663: LD_VAR 0 19
46667: IFFALSE 46715
// for i in tmp do
46669: LD_ADDR_VAR 0 8
46673: PUSH
46674: LD_VAR 0 19
46678: PUSH
46679: FOR_IN
46680: IFFALSE 46713
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46682: LD_VAR 0 8
46686: PPUSH
46687: CALL_OW 250
46691: PPUSH
46692: LD_VAR 0 8
46696: PPUSH
46697: CALL_OW 251
46701: PPUSH
46702: LD_VAR 0 16
46706: PPUSH
46707: CALL_OW 441
46711: GO 46679
46713: POP
46714: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46715: LD_VAR 0 18
46719: PPUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 30
46725: PUSH
46726: LD_INT 32
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 30
46735: PUSH
46736: LD_INT 33
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: PPUSH
46748: CALL_OW 72
46752: IFFALSE 46840
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46754: LD_ADDR_VAR 0 8
46758: PUSH
46759: LD_VAR 0 18
46763: PPUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 30
46769: PUSH
46770: LD_INT 32
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 30
46779: PUSH
46780: LD_INT 33
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: PPUSH
46792: CALL_OW 72
46796: PUSH
46797: FOR_IN
46798: IFFALSE 46838
// begin if not GetBWeapon ( i ) then
46800: LD_VAR 0 8
46804: PPUSH
46805: CALL_OW 269
46809: NOT
46810: IFFALSE 46836
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46812: LD_VAR 0 8
46816: PPUSH
46817: LD_VAR 0 8
46821: PPUSH
46822: LD_VAR 0 2
46826: PPUSH
46827: CALL 48086 0 2
46831: PPUSH
46832: CALL_OW 431
// end ;
46836: GO 46797
46838: POP
46839: POP
// end ; for i = 1 to personel do
46840: LD_ADDR_VAR 0 8
46844: PUSH
46845: DOUBLE
46846: LD_INT 1
46848: DEC
46849: ST_TO_ADDR
46850: LD_VAR 0 6
46854: PUSH
46855: FOR_TO
46856: IFFALSE 47920
// begin if i > 4 then
46858: LD_VAR 0 8
46862: PUSH
46863: LD_INT 4
46865: GREATER
46866: IFFALSE 46870
// break ;
46868: GO 47920
// case i of 1 :
46870: LD_VAR 0 8
46874: PUSH
46875: LD_INT 1
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 46963
46883: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46884: LD_ADDR_VAR 0 12
46888: PUSH
46889: LD_VAR 0 18
46893: PPUSH
46894: LD_INT 22
46896: PUSH
46897: LD_VAR 0 16
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 58
46908: PUSH
46909: EMPTY
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 30
46917: PUSH
46918: LD_INT 32
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 30
46927: PUSH
46928: LD_INT 4
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 30
46937: PUSH
46938: LD_INT 5
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: PPUSH
46956: CALL_OW 72
46960: ST_TO_ADDR
46961: GO 47185
46963: LD_INT 2
46965: DOUBLE
46966: EQUAL
46967: IFTRUE 46971
46969: GO 47033
46971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46972: LD_ADDR_VAR 0 12
46976: PUSH
46977: LD_VAR 0 18
46981: PPUSH
46982: LD_INT 22
46984: PUSH
46985: LD_VAR 0 16
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 30
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 30
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PPUSH
47026: CALL_OW 72
47030: ST_TO_ADDR
47031: GO 47185
47033: LD_INT 3
47035: DOUBLE
47036: EQUAL
47037: IFTRUE 47041
47039: GO 47103
47041: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47042: LD_ADDR_VAR 0 12
47046: PUSH
47047: LD_VAR 0 18
47051: PPUSH
47052: LD_INT 22
47054: PUSH
47055: LD_VAR 0 16
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 30
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 30
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PPUSH
47096: CALL_OW 72
47100: ST_TO_ADDR
47101: GO 47185
47103: LD_INT 4
47105: DOUBLE
47106: EQUAL
47107: IFTRUE 47111
47109: GO 47184
47111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47112: LD_ADDR_VAR 0 12
47116: PUSH
47117: LD_VAR 0 18
47121: PPUSH
47122: LD_INT 22
47124: PUSH
47125: LD_VAR 0 16
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 30
47139: PUSH
47140: LD_INT 6
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 30
47149: PUSH
47150: LD_INT 7
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 30
47159: PUSH
47160: LD_INT 8
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PPUSH
47177: CALL_OW 72
47181: ST_TO_ADDR
47182: GO 47185
47184: POP
// if i = 1 then
47185: LD_VAR 0 8
47189: PUSH
47190: LD_INT 1
47192: EQUAL
47193: IFFALSE 47304
// begin tmp := [ ] ;
47195: LD_ADDR_VAR 0 19
47199: PUSH
47200: EMPTY
47201: ST_TO_ADDR
// for j in f do
47202: LD_ADDR_VAR 0 9
47206: PUSH
47207: LD_VAR 0 12
47211: PUSH
47212: FOR_IN
47213: IFFALSE 47286
// if GetBType ( j ) = b_bunker then
47215: LD_VAR 0 9
47219: PPUSH
47220: CALL_OW 266
47224: PUSH
47225: LD_INT 32
47227: EQUAL
47228: IFFALSE 47255
// tmp := Insert ( tmp , 1 , j ) else
47230: LD_ADDR_VAR 0 19
47234: PUSH
47235: LD_VAR 0 19
47239: PPUSH
47240: LD_INT 1
47242: PPUSH
47243: LD_VAR 0 9
47247: PPUSH
47248: CALL_OW 2
47252: ST_TO_ADDR
47253: GO 47284
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47255: LD_ADDR_VAR 0 19
47259: PUSH
47260: LD_VAR 0 19
47264: PPUSH
47265: LD_VAR 0 19
47269: PUSH
47270: LD_INT 1
47272: PLUS
47273: PPUSH
47274: LD_VAR 0 9
47278: PPUSH
47279: CALL_OW 2
47283: ST_TO_ADDR
47284: GO 47212
47286: POP
47287: POP
// if tmp then
47288: LD_VAR 0 19
47292: IFFALSE 47304
// f := tmp ;
47294: LD_ADDR_VAR 0 12
47298: PUSH
47299: LD_VAR 0 19
47303: ST_TO_ADDR
// end ; x := personel [ i ] ;
47304: LD_ADDR_VAR 0 13
47308: PUSH
47309: LD_VAR 0 6
47313: PUSH
47314: LD_VAR 0 8
47318: ARRAY
47319: ST_TO_ADDR
// if x = - 1 then
47320: LD_VAR 0 13
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: EQUAL
47329: IFFALSE 47538
// begin for j in f do
47331: LD_ADDR_VAR 0 9
47335: PUSH
47336: LD_VAR 0 12
47340: PUSH
47341: FOR_IN
47342: IFFALSE 47534
// repeat InitHc ;
47344: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47348: LD_VAR 0 9
47352: PPUSH
47353: CALL_OW 266
47357: PUSH
47358: LD_INT 5
47360: EQUAL
47361: IFFALSE 47431
// begin if UnitsInside ( j ) < 3 then
47363: LD_VAR 0 9
47367: PPUSH
47368: CALL_OW 313
47372: PUSH
47373: LD_INT 3
47375: LESS
47376: IFFALSE 47412
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47378: LD_INT 0
47380: PPUSH
47381: LD_INT 5
47383: PUSH
47384: LD_INT 8
47386: PUSH
47387: LD_INT 9
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: PUSH
47395: LD_VAR 0 17
47399: ARRAY
47400: PPUSH
47401: LD_VAR 0 4
47405: PPUSH
47406: CALL_OW 380
47410: GO 47429
// PrepareHuman ( false , i , skill ) ;
47412: LD_INT 0
47414: PPUSH
47415: LD_VAR 0 8
47419: PPUSH
47420: LD_VAR 0 4
47424: PPUSH
47425: CALL_OW 380
// end else
47429: GO 47448
// PrepareHuman ( false , i , skill ) ;
47431: LD_INT 0
47433: PPUSH
47434: LD_VAR 0 8
47438: PPUSH
47439: LD_VAR 0 4
47443: PPUSH
47444: CALL_OW 380
// un := CreateHuman ;
47448: LD_ADDR_VAR 0 14
47452: PUSH
47453: CALL_OW 44
47457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47458: LD_ADDR_VAR 0 7
47462: PUSH
47463: LD_VAR 0 7
47467: PPUSH
47468: LD_INT 1
47470: PPUSH
47471: LD_VAR 0 14
47475: PPUSH
47476: CALL_OW 2
47480: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47481: LD_VAR 0 14
47485: PPUSH
47486: LD_VAR 0 9
47490: PPUSH
47491: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47495: LD_VAR 0 9
47499: PPUSH
47500: CALL_OW 313
47504: PUSH
47505: LD_INT 6
47507: EQUAL
47508: PUSH
47509: LD_VAR 0 9
47513: PPUSH
47514: CALL_OW 266
47518: PUSH
47519: LD_INT 32
47521: PUSH
47522: LD_INT 31
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: IN
47529: OR
47530: IFFALSE 47344
47532: GO 47341
47534: POP
47535: POP
// end else
47536: GO 47918
// for j = 1 to x do
47538: LD_ADDR_VAR 0 9
47542: PUSH
47543: DOUBLE
47544: LD_INT 1
47546: DEC
47547: ST_TO_ADDR
47548: LD_VAR 0 13
47552: PUSH
47553: FOR_TO
47554: IFFALSE 47916
// begin InitHc ;
47556: CALL_OW 19
// if not f then
47560: LD_VAR 0 12
47564: NOT
47565: IFFALSE 47654
// begin PrepareHuman ( false , i , skill ) ;
47567: LD_INT 0
47569: PPUSH
47570: LD_VAR 0 8
47574: PPUSH
47575: LD_VAR 0 4
47579: PPUSH
47580: CALL_OW 380
// un := CreateHuman ;
47584: LD_ADDR_VAR 0 14
47588: PUSH
47589: CALL_OW 44
47593: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47594: LD_ADDR_VAR 0 7
47598: PUSH
47599: LD_VAR 0 7
47603: PPUSH
47604: LD_INT 1
47606: PPUSH
47607: LD_VAR 0 14
47611: PPUSH
47612: CALL_OW 2
47616: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47617: LD_VAR 0 14
47621: PPUSH
47622: LD_VAR 0 1
47626: PPUSH
47627: CALL_OW 250
47631: PPUSH
47632: LD_VAR 0 1
47636: PPUSH
47637: CALL_OW 251
47641: PPUSH
47642: LD_INT 10
47644: PPUSH
47645: LD_INT 0
47647: PPUSH
47648: CALL_OW 50
// continue ;
47652: GO 47553
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47654: LD_VAR 0 12
47658: PUSH
47659: LD_INT 1
47661: ARRAY
47662: PPUSH
47663: CALL_OW 313
47667: PUSH
47668: LD_VAR 0 12
47672: PUSH
47673: LD_INT 1
47675: ARRAY
47676: PPUSH
47677: CALL_OW 266
47681: PUSH
47682: LD_INT 32
47684: PUSH
47685: LD_INT 31
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: IN
47692: AND
47693: PUSH
47694: LD_VAR 0 12
47698: PUSH
47699: LD_INT 1
47701: ARRAY
47702: PPUSH
47703: CALL_OW 313
47707: PUSH
47708: LD_INT 6
47710: EQUAL
47711: OR
47712: IFFALSE 47732
// f := Delete ( f , 1 ) ;
47714: LD_ADDR_VAR 0 12
47718: PUSH
47719: LD_VAR 0 12
47723: PPUSH
47724: LD_INT 1
47726: PPUSH
47727: CALL_OW 3
47731: ST_TO_ADDR
// if not f then
47732: LD_VAR 0 12
47736: NOT
47737: IFFALSE 47755
// begin x := x + 2 ;
47739: LD_ADDR_VAR 0 13
47743: PUSH
47744: LD_VAR 0 13
47748: PUSH
47749: LD_INT 2
47751: PLUS
47752: ST_TO_ADDR
// continue ;
47753: GO 47553
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47755: LD_VAR 0 12
47759: PUSH
47760: LD_INT 1
47762: ARRAY
47763: PPUSH
47764: CALL_OW 266
47768: PUSH
47769: LD_INT 5
47771: EQUAL
47772: IFFALSE 47846
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47774: LD_VAR 0 12
47778: PUSH
47779: LD_INT 1
47781: ARRAY
47782: PPUSH
47783: CALL_OW 313
47787: PUSH
47788: LD_INT 3
47790: LESS
47791: IFFALSE 47827
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47793: LD_INT 0
47795: PPUSH
47796: LD_INT 5
47798: PUSH
47799: LD_INT 8
47801: PUSH
47802: LD_INT 9
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: PUSH
47810: LD_VAR 0 17
47814: ARRAY
47815: PPUSH
47816: LD_VAR 0 4
47820: PPUSH
47821: CALL_OW 380
47825: GO 47844
// PrepareHuman ( false , i , skill ) ;
47827: LD_INT 0
47829: PPUSH
47830: LD_VAR 0 8
47834: PPUSH
47835: LD_VAR 0 4
47839: PPUSH
47840: CALL_OW 380
// end else
47844: GO 47863
// PrepareHuman ( false , i , skill ) ;
47846: LD_INT 0
47848: PPUSH
47849: LD_VAR 0 8
47853: PPUSH
47854: LD_VAR 0 4
47858: PPUSH
47859: CALL_OW 380
// un := CreateHuman ;
47863: LD_ADDR_VAR 0 14
47867: PUSH
47868: CALL_OW 44
47872: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47873: LD_ADDR_VAR 0 7
47877: PUSH
47878: LD_VAR 0 7
47882: PPUSH
47883: LD_INT 1
47885: PPUSH
47886: LD_VAR 0 14
47890: PPUSH
47891: CALL_OW 2
47895: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47896: LD_VAR 0 14
47900: PPUSH
47901: LD_VAR 0 12
47905: PUSH
47906: LD_INT 1
47908: ARRAY
47909: PPUSH
47910: CALL_OW 52
// end ;
47914: GO 47553
47916: POP
47917: POP
// end ;
47918: GO 46855
47920: POP
47921: POP
// result := result ^ buildings ;
47922: LD_ADDR_VAR 0 7
47926: PUSH
47927: LD_VAR 0 7
47931: PUSH
47932: LD_VAR 0 18
47936: ADD
47937: ST_TO_ADDR
// end else
47938: GO 48081
// begin for i = 1 to personel do
47940: LD_ADDR_VAR 0 8
47944: PUSH
47945: DOUBLE
47946: LD_INT 1
47948: DEC
47949: ST_TO_ADDR
47950: LD_VAR 0 6
47954: PUSH
47955: FOR_TO
47956: IFFALSE 48079
// begin if i > 4 then
47958: LD_VAR 0 8
47962: PUSH
47963: LD_INT 4
47965: GREATER
47966: IFFALSE 47970
// break ;
47968: GO 48079
// x := personel [ i ] ;
47970: LD_ADDR_VAR 0 13
47974: PUSH
47975: LD_VAR 0 6
47979: PUSH
47980: LD_VAR 0 8
47984: ARRAY
47985: ST_TO_ADDR
// if x = - 1 then
47986: LD_VAR 0 13
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: EQUAL
47995: IFFALSE 47999
// continue ;
47997: GO 47955
// PrepareHuman ( false , i , skill ) ;
47999: LD_INT 0
48001: PPUSH
48002: LD_VAR 0 8
48006: PPUSH
48007: LD_VAR 0 4
48011: PPUSH
48012: CALL_OW 380
// un := CreateHuman ;
48016: LD_ADDR_VAR 0 14
48020: PUSH
48021: CALL_OW 44
48025: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48026: LD_VAR 0 14
48030: PPUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: CALL_OW 250
48040: PPUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: CALL_OW 251
48050: PPUSH
48051: LD_INT 10
48053: PPUSH
48054: LD_INT 0
48056: PPUSH
48057: CALL_OW 50
// result := result ^ un ;
48061: LD_ADDR_VAR 0 7
48065: PUSH
48066: LD_VAR 0 7
48070: PUSH
48071: LD_VAR 0 14
48075: ADD
48076: ST_TO_ADDR
// end ;
48077: GO 47955
48079: POP
48080: POP
// end ; end ;
48081: LD_VAR 0 7
48085: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48086: LD_INT 0
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
// result := false ;
48104: LD_ADDR_VAR 0 3
48108: PUSH
48109: LD_INT 0
48111: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48112: LD_VAR 0 1
48116: NOT
48117: PUSH
48118: LD_VAR 0 1
48122: PPUSH
48123: CALL_OW 266
48127: PUSH
48128: LD_INT 32
48130: PUSH
48131: LD_INT 33
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: IN
48138: NOT
48139: OR
48140: IFFALSE 48144
// exit ;
48142: GO 49283
// nat := GetNation ( tower ) ;
48144: LD_ADDR_VAR 0 12
48148: PUSH
48149: LD_VAR 0 1
48153: PPUSH
48154: CALL_OW 248
48158: ST_TO_ADDR
// side := GetSide ( tower ) ;
48159: LD_ADDR_VAR 0 16
48163: PUSH
48164: LD_VAR 0 1
48168: PPUSH
48169: CALL_OW 255
48173: ST_TO_ADDR
// x := GetX ( tower ) ;
48174: LD_ADDR_VAR 0 10
48178: PUSH
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 250
48188: ST_TO_ADDR
// y := GetY ( tower ) ;
48189: LD_ADDR_VAR 0 11
48193: PUSH
48194: LD_VAR 0 1
48198: PPUSH
48199: CALL_OW 251
48203: ST_TO_ADDR
// if not x or not y then
48204: LD_VAR 0 10
48208: NOT
48209: PUSH
48210: LD_VAR 0 11
48214: NOT
48215: OR
48216: IFFALSE 48220
// exit ;
48218: GO 49283
// weapon := 0 ;
48220: LD_ADDR_VAR 0 18
48224: PUSH
48225: LD_INT 0
48227: ST_TO_ADDR
// fac_list := [ ] ;
48228: LD_ADDR_VAR 0 17
48232: PUSH
48233: EMPTY
48234: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48235: LD_ADDR_VAR 0 6
48239: PUSH
48240: LD_VAR 0 1
48244: PPUSH
48245: CALL_OW 274
48249: PPUSH
48250: LD_VAR 0 2
48254: PPUSH
48255: LD_INT 0
48257: PPUSH
48258: CALL 45823 0 3
48262: PPUSH
48263: LD_INT 30
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PPUSH
48273: CALL_OW 72
48277: ST_TO_ADDR
// if not factories then
48278: LD_VAR 0 6
48282: NOT
48283: IFFALSE 48287
// exit ;
48285: GO 49283
// for i in factories do
48287: LD_ADDR_VAR 0 8
48291: PUSH
48292: LD_VAR 0 6
48296: PUSH
48297: FOR_IN
48298: IFFALSE 48323
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48300: LD_ADDR_VAR 0 17
48304: PUSH
48305: LD_VAR 0 17
48309: PUSH
48310: LD_VAR 0 8
48314: PPUSH
48315: CALL_OW 478
48319: UNION
48320: ST_TO_ADDR
48321: GO 48297
48323: POP
48324: POP
// if not fac_list then
48325: LD_VAR 0 17
48329: NOT
48330: IFFALSE 48334
// exit ;
48332: GO 49283
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48334: LD_ADDR_VAR 0 5
48338: PUSH
48339: LD_INT 4
48341: PUSH
48342: LD_INT 5
48344: PUSH
48345: LD_INT 9
48347: PUSH
48348: LD_INT 10
48350: PUSH
48351: LD_INT 6
48353: PUSH
48354: LD_INT 7
48356: PUSH
48357: LD_INT 11
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 27
48371: PUSH
48372: LD_INT 28
48374: PUSH
48375: LD_INT 26
48377: PUSH
48378: LD_INT 30
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 43
48389: PUSH
48390: LD_INT 44
48392: PUSH
48393: LD_INT 46
48395: PUSH
48396: LD_INT 45
48398: PUSH
48399: LD_INT 47
48401: PUSH
48402: LD_INT 49
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: PUSH
48418: LD_VAR 0 12
48422: ARRAY
48423: ST_TO_ADDR
// for i in list do
48424: LD_ADDR_VAR 0 8
48428: PUSH
48429: LD_VAR 0 5
48433: PUSH
48434: FOR_IN
48435: IFFALSE 48468
// if not i in fac_list then
48437: LD_VAR 0 8
48441: PUSH
48442: LD_VAR 0 17
48446: IN
48447: NOT
48448: IFFALSE 48466
// list := list diff i ;
48450: LD_ADDR_VAR 0 5
48454: PUSH
48455: LD_VAR 0 5
48459: PUSH
48460: LD_VAR 0 8
48464: DIFF
48465: ST_TO_ADDR
48466: GO 48434
48468: POP
48469: POP
// if not list then
48470: LD_VAR 0 5
48474: NOT
48475: IFFALSE 48479
// exit ;
48477: GO 49283
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48479: LD_VAR 0 12
48483: PUSH
48484: LD_INT 3
48486: EQUAL
48487: PUSH
48488: LD_INT 49
48490: PUSH
48491: LD_VAR 0 5
48495: IN
48496: AND
48497: PUSH
48498: LD_INT 31
48500: PPUSH
48501: LD_VAR 0 16
48505: PPUSH
48506: CALL_OW 321
48510: PUSH
48511: LD_INT 2
48513: EQUAL
48514: AND
48515: IFFALSE 48575
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48517: LD_INT 22
48519: PUSH
48520: LD_VAR 0 16
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 35
48531: PUSH
48532: LD_INT 49
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 91
48541: PUSH
48542: LD_VAR 0 1
48546: PUSH
48547: LD_INT 10
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: PPUSH
48560: CALL_OW 69
48564: NOT
48565: IFFALSE 48575
// weapon := ru_time_lapser ;
48567: LD_ADDR_VAR 0 18
48571: PUSH
48572: LD_INT 49
48574: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48575: LD_VAR 0 12
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: IN
48590: PUSH
48591: LD_INT 11
48593: PUSH
48594: LD_VAR 0 5
48598: IN
48599: PUSH
48600: LD_INT 30
48602: PUSH
48603: LD_VAR 0 5
48607: IN
48608: OR
48609: AND
48610: PUSH
48611: LD_INT 6
48613: PPUSH
48614: LD_VAR 0 16
48618: PPUSH
48619: CALL_OW 321
48623: PUSH
48624: LD_INT 2
48626: EQUAL
48627: AND
48628: IFFALSE 48793
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48630: LD_INT 22
48632: PUSH
48633: LD_VAR 0 16
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 35
48647: PUSH
48648: LD_INT 11
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 35
48657: PUSH
48658: LD_INT 30
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 91
48672: PUSH
48673: LD_VAR 0 1
48677: PUSH
48678: LD_INT 18
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: PPUSH
48691: CALL_OW 69
48695: NOT
48696: PUSH
48697: LD_INT 22
48699: PUSH
48700: LD_VAR 0 16
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 30
48714: PUSH
48715: LD_INT 32
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 30
48724: PUSH
48725: LD_INT 33
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 91
48739: PUSH
48740: LD_VAR 0 1
48744: PUSH
48745: LD_INT 12
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: PUSH
48758: EMPTY
48759: LIST
48760: PPUSH
48761: CALL_OW 69
48765: PUSH
48766: LD_INT 2
48768: GREATER
48769: AND
48770: IFFALSE 48793
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48772: LD_ADDR_VAR 0 18
48776: PUSH
48777: LD_INT 11
48779: PUSH
48780: LD_INT 30
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_VAR 0 12
48791: ARRAY
48792: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48793: LD_VAR 0 18
48797: NOT
48798: PUSH
48799: LD_INT 40
48801: PPUSH
48802: LD_VAR 0 16
48806: PPUSH
48807: CALL_OW 321
48811: PUSH
48812: LD_INT 2
48814: EQUAL
48815: AND
48816: PUSH
48817: LD_INT 7
48819: PUSH
48820: LD_VAR 0 5
48824: IN
48825: PUSH
48826: LD_INT 28
48828: PUSH
48829: LD_VAR 0 5
48833: IN
48834: OR
48835: PUSH
48836: LD_INT 45
48838: PUSH
48839: LD_VAR 0 5
48843: IN
48844: OR
48845: AND
48846: IFFALSE 49100
// begin hex := GetHexInfo ( x , y ) ;
48848: LD_ADDR_VAR 0 4
48852: PUSH
48853: LD_VAR 0 10
48857: PPUSH
48858: LD_VAR 0 11
48862: PPUSH
48863: CALL_OW 546
48867: ST_TO_ADDR
// if hex [ 1 ] then
48868: LD_VAR 0 4
48872: PUSH
48873: LD_INT 1
48875: ARRAY
48876: IFFALSE 48880
// exit ;
48878: GO 49283
// height := hex [ 2 ] ;
48880: LD_ADDR_VAR 0 15
48884: PUSH
48885: LD_VAR 0 4
48889: PUSH
48890: LD_INT 2
48892: ARRAY
48893: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48894: LD_ADDR_VAR 0 14
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: LD_INT 5
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: ST_TO_ADDR
// for i in tmp do
48917: LD_ADDR_VAR 0 8
48921: PUSH
48922: LD_VAR 0 14
48926: PUSH
48927: FOR_IN
48928: IFFALSE 49098
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48930: LD_ADDR_VAR 0 9
48934: PUSH
48935: LD_VAR 0 10
48939: PPUSH
48940: LD_VAR 0 8
48944: PPUSH
48945: LD_INT 5
48947: PPUSH
48948: CALL_OW 272
48952: PUSH
48953: LD_VAR 0 11
48957: PPUSH
48958: LD_VAR 0 8
48962: PPUSH
48963: LD_INT 5
48965: PPUSH
48966: CALL_OW 273
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48975: LD_VAR 0 9
48979: PUSH
48980: LD_INT 1
48982: ARRAY
48983: PPUSH
48984: LD_VAR 0 9
48988: PUSH
48989: LD_INT 2
48991: ARRAY
48992: PPUSH
48993: CALL_OW 488
48997: IFFALSE 49096
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48999: LD_ADDR_VAR 0 4
49003: PUSH
49004: LD_VAR 0 9
49008: PUSH
49009: LD_INT 1
49011: ARRAY
49012: PPUSH
49013: LD_VAR 0 9
49017: PUSH
49018: LD_INT 2
49020: ARRAY
49021: PPUSH
49022: CALL_OW 546
49026: ST_TO_ADDR
// if hex [ 1 ] then
49027: LD_VAR 0 4
49031: PUSH
49032: LD_INT 1
49034: ARRAY
49035: IFFALSE 49039
// continue ;
49037: GO 48927
// h := hex [ 2 ] ;
49039: LD_ADDR_VAR 0 13
49043: PUSH
49044: LD_VAR 0 4
49048: PUSH
49049: LD_INT 2
49051: ARRAY
49052: ST_TO_ADDR
// if h + 7 < height then
49053: LD_VAR 0 13
49057: PUSH
49058: LD_INT 7
49060: PLUS
49061: PUSH
49062: LD_VAR 0 15
49066: LESS
49067: IFFALSE 49096
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49069: LD_ADDR_VAR 0 18
49073: PUSH
49074: LD_INT 7
49076: PUSH
49077: LD_INT 28
49079: PUSH
49080: LD_INT 45
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: PUSH
49088: LD_VAR 0 12
49092: ARRAY
49093: ST_TO_ADDR
// break ;
49094: GO 49098
// end ; end ; end ;
49096: GO 48927
49098: POP
49099: POP
// end ; if not weapon then
49100: LD_VAR 0 18
49104: NOT
49105: IFFALSE 49165
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49107: LD_ADDR_VAR 0 5
49111: PUSH
49112: LD_VAR 0 5
49116: PUSH
49117: LD_INT 11
49119: PUSH
49120: LD_INT 30
49122: PUSH
49123: LD_INT 49
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: DIFF
49131: ST_TO_ADDR
// if not list then
49132: LD_VAR 0 5
49136: NOT
49137: IFFALSE 49141
// exit ;
49139: GO 49283
// weapon := list [ rand ( 1 , list ) ] ;
49141: LD_ADDR_VAR 0 18
49145: PUSH
49146: LD_VAR 0 5
49150: PUSH
49151: LD_INT 1
49153: PPUSH
49154: LD_VAR 0 5
49158: PPUSH
49159: CALL_OW 12
49163: ARRAY
49164: ST_TO_ADDR
// end ; if weapon then
49165: LD_VAR 0 18
49169: IFFALSE 49283
// begin tmp := CostOfWeapon ( weapon ) ;
49171: LD_ADDR_VAR 0 14
49175: PUSH
49176: LD_VAR 0 18
49180: PPUSH
49181: CALL_OW 451
49185: ST_TO_ADDR
// j := GetBase ( tower ) ;
49186: LD_ADDR_VAR 0 9
49190: PUSH
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL_OW 274
49200: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49201: LD_VAR 0 9
49205: PPUSH
49206: LD_INT 1
49208: PPUSH
49209: CALL_OW 275
49213: PUSH
49214: LD_VAR 0 14
49218: PUSH
49219: LD_INT 1
49221: ARRAY
49222: GREATEREQUAL
49223: PUSH
49224: LD_VAR 0 9
49228: PPUSH
49229: LD_INT 2
49231: PPUSH
49232: CALL_OW 275
49236: PUSH
49237: LD_VAR 0 14
49241: PUSH
49242: LD_INT 2
49244: ARRAY
49245: GREATEREQUAL
49246: AND
49247: PUSH
49248: LD_VAR 0 9
49252: PPUSH
49253: LD_INT 3
49255: PPUSH
49256: CALL_OW 275
49260: PUSH
49261: LD_VAR 0 14
49265: PUSH
49266: LD_INT 3
49268: ARRAY
49269: GREATEREQUAL
49270: AND
49271: IFFALSE 49283
// result := weapon ;
49273: LD_ADDR_VAR 0 3
49277: PUSH
49278: LD_VAR 0 18
49282: ST_TO_ADDR
// end ; end ;
49283: LD_VAR 0 3
49287: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49288: LD_INT 0
49290: PPUSH
49291: PPUSH
// result := true ;
49292: LD_ADDR_VAR 0 3
49296: PUSH
49297: LD_INT 1
49299: ST_TO_ADDR
// if array1 = array2 then
49300: LD_VAR 0 1
49304: PUSH
49305: LD_VAR 0 2
49309: EQUAL
49310: IFFALSE 49370
// begin for i = 1 to array1 do
49312: LD_ADDR_VAR 0 4
49316: PUSH
49317: DOUBLE
49318: LD_INT 1
49320: DEC
49321: ST_TO_ADDR
49322: LD_VAR 0 1
49326: PUSH
49327: FOR_TO
49328: IFFALSE 49366
// if array1 [ i ] <> array2 [ i ] then
49330: LD_VAR 0 1
49334: PUSH
49335: LD_VAR 0 4
49339: ARRAY
49340: PUSH
49341: LD_VAR 0 2
49345: PUSH
49346: LD_VAR 0 4
49350: ARRAY
49351: NONEQUAL
49352: IFFALSE 49364
// begin result := false ;
49354: LD_ADDR_VAR 0 3
49358: PUSH
49359: LD_INT 0
49361: ST_TO_ADDR
// break ;
49362: GO 49366
// end ;
49364: GO 49327
49366: POP
49367: POP
// end else
49368: GO 49378
// result := false ;
49370: LD_ADDR_VAR 0 3
49374: PUSH
49375: LD_INT 0
49377: ST_TO_ADDR
// end ;
49378: LD_VAR 0 3
49382: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49383: LD_INT 0
49385: PPUSH
49386: PPUSH
// if not array1 or not array2 then
49387: LD_VAR 0 1
49391: NOT
49392: PUSH
49393: LD_VAR 0 2
49397: NOT
49398: OR
49399: IFFALSE 49403
// exit ;
49401: GO 49467
// result := true ;
49403: LD_ADDR_VAR 0 3
49407: PUSH
49408: LD_INT 1
49410: ST_TO_ADDR
// for i = 1 to array1 do
49411: LD_ADDR_VAR 0 4
49415: PUSH
49416: DOUBLE
49417: LD_INT 1
49419: DEC
49420: ST_TO_ADDR
49421: LD_VAR 0 1
49425: PUSH
49426: FOR_TO
49427: IFFALSE 49465
// if array1 [ i ] <> array2 [ i ] then
49429: LD_VAR 0 1
49433: PUSH
49434: LD_VAR 0 4
49438: ARRAY
49439: PUSH
49440: LD_VAR 0 2
49444: PUSH
49445: LD_VAR 0 4
49449: ARRAY
49450: NONEQUAL
49451: IFFALSE 49463
// begin result := false ;
49453: LD_ADDR_VAR 0 3
49457: PUSH
49458: LD_INT 0
49460: ST_TO_ADDR
// break ;
49461: GO 49465
// end ;
49463: GO 49426
49465: POP
49466: POP
// end ;
49467: LD_VAR 0 3
49471: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49472: LD_INT 0
49474: PPUSH
49475: PPUSH
49476: PPUSH
// pom := GetBase ( fac ) ;
49477: LD_ADDR_VAR 0 5
49481: PUSH
49482: LD_VAR 0 1
49486: PPUSH
49487: CALL_OW 274
49491: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49492: LD_ADDR_VAR 0 4
49496: PUSH
49497: LD_VAR 0 2
49501: PUSH
49502: LD_INT 1
49504: ARRAY
49505: PPUSH
49506: LD_VAR 0 2
49510: PUSH
49511: LD_INT 2
49513: ARRAY
49514: PPUSH
49515: LD_VAR 0 2
49519: PUSH
49520: LD_INT 3
49522: ARRAY
49523: PPUSH
49524: LD_VAR 0 2
49528: PUSH
49529: LD_INT 4
49531: ARRAY
49532: PPUSH
49533: CALL_OW 449
49537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49538: LD_ADDR_VAR 0 3
49542: PUSH
49543: LD_VAR 0 5
49547: PPUSH
49548: LD_INT 1
49550: PPUSH
49551: CALL_OW 275
49555: PUSH
49556: LD_VAR 0 4
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: GREATEREQUAL
49565: PUSH
49566: LD_VAR 0 5
49570: PPUSH
49571: LD_INT 2
49573: PPUSH
49574: CALL_OW 275
49578: PUSH
49579: LD_VAR 0 4
49583: PUSH
49584: LD_INT 2
49586: ARRAY
49587: GREATEREQUAL
49588: AND
49589: PUSH
49590: LD_VAR 0 5
49594: PPUSH
49595: LD_INT 3
49597: PPUSH
49598: CALL_OW 275
49602: PUSH
49603: LD_VAR 0 4
49607: PUSH
49608: LD_INT 3
49610: ARRAY
49611: GREATEREQUAL
49612: AND
49613: ST_TO_ADDR
// end ;
49614: LD_VAR 0 3
49618: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49619: LD_INT 0
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
// pom := GetBase ( building ) ;
49625: LD_ADDR_VAR 0 3
49629: PUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 274
49639: ST_TO_ADDR
// if not pom then
49640: LD_VAR 0 3
49644: NOT
49645: IFFALSE 49649
// exit ;
49647: GO 49819
// btype := GetBType ( building ) ;
49649: LD_ADDR_VAR 0 5
49653: PUSH
49654: LD_VAR 0 1
49658: PPUSH
49659: CALL_OW 266
49663: ST_TO_ADDR
// if btype = b_armoury then
49664: LD_VAR 0 5
49668: PUSH
49669: LD_INT 4
49671: EQUAL
49672: IFFALSE 49682
// btype := b_barracks ;
49674: LD_ADDR_VAR 0 5
49678: PUSH
49679: LD_INT 5
49681: ST_TO_ADDR
// if btype = b_depot then
49682: LD_VAR 0 5
49686: PUSH
49687: LD_INT 0
49689: EQUAL
49690: IFFALSE 49700
// btype := b_warehouse ;
49692: LD_ADDR_VAR 0 5
49696: PUSH
49697: LD_INT 1
49699: ST_TO_ADDR
// if btype = b_workshop then
49700: LD_VAR 0 5
49704: PUSH
49705: LD_INT 2
49707: EQUAL
49708: IFFALSE 49718
// btype := b_factory ;
49710: LD_ADDR_VAR 0 5
49714: PUSH
49715: LD_INT 3
49717: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49718: LD_ADDR_VAR 0 4
49722: PUSH
49723: LD_VAR 0 5
49727: PPUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 248
49737: PPUSH
49738: CALL_OW 450
49742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49743: LD_ADDR_VAR 0 2
49747: PUSH
49748: LD_VAR 0 3
49752: PPUSH
49753: LD_INT 1
49755: PPUSH
49756: CALL_OW 275
49760: PUSH
49761: LD_VAR 0 4
49765: PUSH
49766: LD_INT 1
49768: ARRAY
49769: GREATEREQUAL
49770: PUSH
49771: LD_VAR 0 3
49775: PPUSH
49776: LD_INT 2
49778: PPUSH
49779: CALL_OW 275
49783: PUSH
49784: LD_VAR 0 4
49788: PUSH
49789: LD_INT 2
49791: ARRAY
49792: GREATEREQUAL
49793: AND
49794: PUSH
49795: LD_VAR 0 3
49799: PPUSH
49800: LD_INT 3
49802: PPUSH
49803: CALL_OW 275
49807: PUSH
49808: LD_VAR 0 4
49812: PUSH
49813: LD_INT 3
49815: ARRAY
49816: GREATEREQUAL
49817: AND
49818: ST_TO_ADDR
// end ;
49819: LD_VAR 0 2
49823: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49824: LD_INT 0
49826: PPUSH
49827: PPUSH
49828: PPUSH
// pom := GetBase ( building ) ;
49829: LD_ADDR_VAR 0 4
49833: PUSH
49834: LD_VAR 0 1
49838: PPUSH
49839: CALL_OW 274
49843: ST_TO_ADDR
// if not pom then
49844: LD_VAR 0 4
49848: NOT
49849: IFFALSE 49853
// exit ;
49851: GO 49954
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49853: LD_ADDR_VAR 0 5
49857: PUSH
49858: LD_VAR 0 2
49862: PPUSH
49863: LD_VAR 0 1
49867: PPUSH
49868: CALL_OW 248
49872: PPUSH
49873: CALL_OW 450
49877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49878: LD_ADDR_VAR 0 3
49882: PUSH
49883: LD_VAR 0 4
49887: PPUSH
49888: LD_INT 1
49890: PPUSH
49891: CALL_OW 275
49895: PUSH
49896: LD_VAR 0 5
49900: PUSH
49901: LD_INT 1
49903: ARRAY
49904: GREATEREQUAL
49905: PUSH
49906: LD_VAR 0 4
49910: PPUSH
49911: LD_INT 2
49913: PPUSH
49914: CALL_OW 275
49918: PUSH
49919: LD_VAR 0 5
49923: PUSH
49924: LD_INT 2
49926: ARRAY
49927: GREATEREQUAL
49928: AND
49929: PUSH
49930: LD_VAR 0 4
49934: PPUSH
49935: LD_INT 3
49937: PPUSH
49938: CALL_OW 275
49942: PUSH
49943: LD_VAR 0 5
49947: PUSH
49948: LD_INT 3
49950: ARRAY
49951: GREATEREQUAL
49952: AND
49953: ST_TO_ADDR
// end ;
49954: LD_VAR 0 3
49958: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49959: LD_INT 0
49961: PPUSH
49962: PPUSH
49963: PPUSH
49964: PPUSH
49965: PPUSH
49966: PPUSH
49967: PPUSH
49968: PPUSH
49969: PPUSH
49970: PPUSH
49971: PPUSH
// result := false ;
49972: LD_ADDR_VAR 0 8
49976: PUSH
49977: LD_INT 0
49979: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49980: LD_VAR 0 5
49984: NOT
49985: PUSH
49986: LD_VAR 0 1
49990: NOT
49991: OR
49992: PUSH
49993: LD_VAR 0 2
49997: NOT
49998: OR
49999: PUSH
50000: LD_VAR 0 3
50004: NOT
50005: OR
50006: IFFALSE 50010
// exit ;
50008: GO 50824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50010: LD_ADDR_VAR 0 14
50014: PUSH
50015: LD_VAR 0 1
50019: PPUSH
50020: LD_VAR 0 2
50024: PPUSH
50025: LD_VAR 0 3
50029: PPUSH
50030: LD_VAR 0 4
50034: PPUSH
50035: LD_VAR 0 5
50039: PUSH
50040: LD_INT 1
50042: ARRAY
50043: PPUSH
50044: CALL_OW 248
50048: PPUSH
50049: LD_INT 0
50051: PPUSH
50052: CALL 51661 0 6
50056: ST_TO_ADDR
// if not hexes then
50057: LD_VAR 0 14
50061: NOT
50062: IFFALSE 50066
// exit ;
50064: GO 50824
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50066: LD_ADDR_VAR 0 17
50070: PUSH
50071: LD_VAR 0 5
50075: PPUSH
50076: LD_INT 22
50078: PUSH
50079: LD_VAR 0 13
50083: PPUSH
50084: CALL_OW 255
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 30
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 30
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PPUSH
50125: CALL_OW 72
50129: ST_TO_ADDR
// for i = 1 to hexes do
50130: LD_ADDR_VAR 0 9
50134: PUSH
50135: DOUBLE
50136: LD_INT 1
50138: DEC
50139: ST_TO_ADDR
50140: LD_VAR 0 14
50144: PUSH
50145: FOR_TO
50146: IFFALSE 50822
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50148: LD_ADDR_VAR 0 13
50152: PUSH
50153: LD_VAR 0 14
50157: PUSH
50158: LD_VAR 0 9
50162: ARRAY
50163: PUSH
50164: LD_INT 1
50166: ARRAY
50167: PPUSH
50168: LD_VAR 0 14
50172: PUSH
50173: LD_VAR 0 9
50177: ARRAY
50178: PUSH
50179: LD_INT 2
50181: ARRAY
50182: PPUSH
50183: CALL_OW 428
50187: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50188: LD_VAR 0 14
50192: PUSH
50193: LD_VAR 0 9
50197: ARRAY
50198: PUSH
50199: LD_INT 1
50201: ARRAY
50202: PPUSH
50203: LD_VAR 0 14
50207: PUSH
50208: LD_VAR 0 9
50212: ARRAY
50213: PUSH
50214: LD_INT 2
50216: ARRAY
50217: PPUSH
50218: CALL_OW 351
50222: PUSH
50223: LD_VAR 0 14
50227: PUSH
50228: LD_VAR 0 9
50232: ARRAY
50233: PUSH
50234: LD_INT 1
50236: ARRAY
50237: PPUSH
50238: LD_VAR 0 14
50242: PUSH
50243: LD_VAR 0 9
50247: ARRAY
50248: PUSH
50249: LD_INT 2
50251: ARRAY
50252: PPUSH
50253: CALL_OW 488
50257: NOT
50258: OR
50259: PUSH
50260: LD_VAR 0 13
50264: PPUSH
50265: CALL_OW 247
50269: PUSH
50270: LD_INT 3
50272: EQUAL
50273: OR
50274: IFFALSE 50280
// exit ;
50276: POP
50277: POP
50278: GO 50824
// if not tmp then
50280: LD_VAR 0 13
50284: NOT
50285: IFFALSE 50289
// continue ;
50287: GO 50145
// result := true ;
50289: LD_ADDR_VAR 0 8
50293: PUSH
50294: LD_INT 1
50296: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50297: LD_VAR 0 6
50301: PUSH
50302: LD_VAR 0 13
50306: PPUSH
50307: CALL_OW 247
50311: PUSH
50312: LD_INT 2
50314: EQUAL
50315: AND
50316: PUSH
50317: LD_VAR 0 13
50321: PPUSH
50322: CALL_OW 263
50326: PUSH
50327: LD_INT 1
50329: EQUAL
50330: AND
50331: IFFALSE 50495
// begin if IsDrivenBy ( tmp ) then
50333: LD_VAR 0 13
50337: PPUSH
50338: CALL_OW 311
50342: IFFALSE 50346
// continue ;
50344: GO 50145
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50346: LD_VAR 0 6
50350: PPUSH
50351: LD_INT 3
50353: PUSH
50354: LD_INT 60
50356: PUSH
50357: EMPTY
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: LD_INT 55
50369: PUSH
50370: EMPTY
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PPUSH
50381: CALL_OW 72
50385: IFFALSE 50493
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50387: LD_ADDR_VAR 0 18
50391: PUSH
50392: LD_VAR 0 6
50396: PPUSH
50397: LD_INT 3
50399: PUSH
50400: LD_INT 60
50402: PUSH
50403: EMPTY
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 55
50415: PUSH
50416: EMPTY
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PPUSH
50427: CALL_OW 72
50431: PUSH
50432: LD_INT 1
50434: ARRAY
50435: ST_TO_ADDR
// if IsInUnit ( driver ) then
50436: LD_VAR 0 18
50440: PPUSH
50441: CALL_OW 310
50445: IFFALSE 50456
// ComExit ( driver ) ;
50447: LD_VAR 0 18
50451: PPUSH
50452: CALL 74845 0 1
// AddComEnterUnit ( driver , tmp ) ;
50456: LD_VAR 0 18
50460: PPUSH
50461: LD_VAR 0 13
50465: PPUSH
50466: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50470: LD_VAR 0 18
50474: PPUSH
50475: LD_VAR 0 7
50479: PPUSH
50480: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50484: LD_VAR 0 18
50488: PPUSH
50489: CALL_OW 181
// end ; continue ;
50493: GO 50145
// end ; if not cleaners or not tmp in cleaners then
50495: LD_VAR 0 6
50499: NOT
50500: PUSH
50501: LD_VAR 0 13
50505: PUSH
50506: LD_VAR 0 6
50510: IN
50511: NOT
50512: OR
50513: IFFALSE 50820
// begin if dep then
50515: LD_VAR 0 17
50519: IFFALSE 50655
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50521: LD_ADDR_VAR 0 16
50525: PUSH
50526: LD_VAR 0 17
50530: PUSH
50531: LD_INT 1
50533: ARRAY
50534: PPUSH
50535: CALL_OW 250
50539: PPUSH
50540: LD_VAR 0 17
50544: PUSH
50545: LD_INT 1
50547: ARRAY
50548: PPUSH
50549: CALL_OW 254
50553: PPUSH
50554: LD_INT 5
50556: PPUSH
50557: CALL_OW 272
50561: PUSH
50562: LD_VAR 0 17
50566: PUSH
50567: LD_INT 1
50569: ARRAY
50570: PPUSH
50571: CALL_OW 251
50575: PPUSH
50576: LD_VAR 0 17
50580: PUSH
50581: LD_INT 1
50583: ARRAY
50584: PPUSH
50585: CALL_OW 254
50589: PPUSH
50590: LD_INT 5
50592: PPUSH
50593: CALL_OW 273
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50602: LD_VAR 0 16
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: PPUSH
50611: LD_VAR 0 16
50615: PUSH
50616: LD_INT 2
50618: ARRAY
50619: PPUSH
50620: CALL_OW 488
50624: IFFALSE 50655
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50626: LD_VAR 0 13
50630: PPUSH
50631: LD_VAR 0 16
50635: PUSH
50636: LD_INT 1
50638: ARRAY
50639: PPUSH
50640: LD_VAR 0 16
50644: PUSH
50645: LD_INT 2
50647: ARRAY
50648: PPUSH
50649: CALL_OW 111
// continue ;
50653: GO 50145
// end ; end ; r := GetDir ( tmp ) ;
50655: LD_ADDR_VAR 0 15
50659: PUSH
50660: LD_VAR 0 13
50664: PPUSH
50665: CALL_OW 254
50669: ST_TO_ADDR
// if r = 5 then
50670: LD_VAR 0 15
50674: PUSH
50675: LD_INT 5
50677: EQUAL
50678: IFFALSE 50688
// r := 0 ;
50680: LD_ADDR_VAR 0 15
50684: PUSH
50685: LD_INT 0
50687: ST_TO_ADDR
// for j = r to 5 do
50688: LD_ADDR_VAR 0 10
50692: PUSH
50693: DOUBLE
50694: LD_VAR 0 15
50698: DEC
50699: ST_TO_ADDR
50700: LD_INT 5
50702: PUSH
50703: FOR_TO
50704: IFFALSE 50818
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50706: LD_ADDR_VAR 0 11
50710: PUSH
50711: LD_VAR 0 13
50715: PPUSH
50716: CALL_OW 250
50720: PPUSH
50721: LD_VAR 0 10
50725: PPUSH
50726: LD_INT 2
50728: PPUSH
50729: CALL_OW 272
50733: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50734: LD_ADDR_VAR 0 12
50738: PUSH
50739: LD_VAR 0 13
50743: PPUSH
50744: CALL_OW 251
50748: PPUSH
50749: LD_VAR 0 10
50753: PPUSH
50754: LD_INT 2
50756: PPUSH
50757: CALL_OW 273
50761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50762: LD_VAR 0 11
50766: PPUSH
50767: LD_VAR 0 12
50771: PPUSH
50772: CALL_OW 488
50776: PUSH
50777: LD_VAR 0 11
50781: PPUSH
50782: LD_VAR 0 12
50786: PPUSH
50787: CALL_OW 428
50791: NOT
50792: AND
50793: IFFALSE 50816
// begin ComMoveXY ( tmp , _x , _y ) ;
50795: LD_VAR 0 13
50799: PPUSH
50800: LD_VAR 0 11
50804: PPUSH
50805: LD_VAR 0 12
50809: PPUSH
50810: CALL_OW 111
// break ;
50814: GO 50818
// end ; end ;
50816: GO 50703
50818: POP
50819: POP
// end ; end ;
50820: GO 50145
50822: POP
50823: POP
// end ;
50824: LD_VAR 0 8
50828: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
50829: LD_INT 0
50831: PPUSH
50832: PPUSH
50833: PPUSH
50834: PPUSH
50835: PPUSH
50836: PPUSH
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
// result := false ;
50841: LD_ADDR_VAR 0 6
50845: PUSH
50846: LD_INT 0
50848: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50849: LD_VAR 0 1
50853: NOT
50854: PUSH
50855: LD_VAR 0 1
50859: PPUSH
50860: CALL_OW 266
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: IN
50875: NOT
50876: OR
50877: PUSH
50878: LD_VAR 0 2
50882: NOT
50883: OR
50884: PUSH
50885: LD_VAR 0 5
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: LD_INT 4
50904: PUSH
50905: LD_INT 5
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: IN
50916: NOT
50917: OR
50918: PUSH
50919: LD_VAR 0 3
50923: PPUSH
50924: LD_VAR 0 4
50928: PPUSH
50929: CALL_OW 488
50933: NOT
50934: OR
50935: IFFALSE 50939
// exit ;
50937: GO 51656
// pom := GetBase ( depot ) ;
50939: LD_ADDR_VAR 0 10
50943: PUSH
50944: LD_VAR 0 1
50948: PPUSH
50949: CALL_OW 274
50953: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50954: LD_ADDR_VAR 0 11
50958: PUSH
50959: LD_VAR 0 2
50963: PPUSH
50964: LD_VAR 0 1
50968: PPUSH
50969: CALL_OW 248
50973: PPUSH
50974: CALL_OW 450
50978: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50979: LD_VAR 0 10
50983: PPUSH
50984: LD_INT 1
50986: PPUSH
50987: CALL_OW 275
50991: PUSH
50992: LD_VAR 0 11
50996: PUSH
50997: LD_INT 1
50999: ARRAY
51000: GREATEREQUAL
51001: PUSH
51002: LD_VAR 0 10
51006: PPUSH
51007: LD_INT 2
51009: PPUSH
51010: CALL_OW 275
51014: PUSH
51015: LD_VAR 0 11
51019: PUSH
51020: LD_INT 2
51022: ARRAY
51023: GREATEREQUAL
51024: AND
51025: PUSH
51026: LD_VAR 0 10
51030: PPUSH
51031: LD_INT 3
51033: PPUSH
51034: CALL_OW 275
51038: PUSH
51039: LD_VAR 0 11
51043: PUSH
51044: LD_INT 3
51046: ARRAY
51047: GREATEREQUAL
51048: AND
51049: NOT
51050: IFFALSE 51054
// exit ;
51052: GO 51656
// if GetBType ( depot ) = b_depot then
51054: LD_VAR 0 1
51058: PPUSH
51059: CALL_OW 266
51063: PUSH
51064: LD_INT 0
51066: EQUAL
51067: IFFALSE 51079
// dist := 28 else
51069: LD_ADDR_VAR 0 14
51073: PUSH
51074: LD_INT 28
51076: ST_TO_ADDR
51077: GO 51087
// dist := 36 ;
51079: LD_ADDR_VAR 0 14
51083: PUSH
51084: LD_INT 36
51086: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51087: LD_VAR 0 1
51091: PPUSH
51092: LD_VAR 0 3
51096: PPUSH
51097: LD_VAR 0 4
51101: PPUSH
51102: CALL_OW 297
51106: PUSH
51107: LD_VAR 0 14
51111: GREATER
51112: IFFALSE 51116
// exit ;
51114: GO 51656
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51116: LD_ADDR_VAR 0 12
51120: PUSH
51121: LD_VAR 0 2
51125: PPUSH
51126: LD_VAR 0 3
51130: PPUSH
51131: LD_VAR 0 4
51135: PPUSH
51136: LD_VAR 0 5
51140: PPUSH
51141: LD_VAR 0 1
51145: PPUSH
51146: CALL_OW 248
51150: PPUSH
51151: LD_INT 0
51153: PPUSH
51154: CALL 51661 0 6
51158: ST_TO_ADDR
// if not hexes then
51159: LD_VAR 0 12
51163: NOT
51164: IFFALSE 51168
// exit ;
51166: GO 51656
// hex := GetHexInfo ( x , y ) ;
51168: LD_ADDR_VAR 0 15
51172: PUSH
51173: LD_VAR 0 3
51177: PPUSH
51178: LD_VAR 0 4
51182: PPUSH
51183: CALL_OW 546
51187: ST_TO_ADDR
// if hex [ 1 ] then
51188: LD_VAR 0 15
51192: PUSH
51193: LD_INT 1
51195: ARRAY
51196: IFFALSE 51200
// exit ;
51198: GO 51656
// height := hex [ 2 ] ;
51200: LD_ADDR_VAR 0 13
51204: PUSH
51205: LD_VAR 0 15
51209: PUSH
51210: LD_INT 2
51212: ARRAY
51213: ST_TO_ADDR
// for i = 1 to hexes do
51214: LD_ADDR_VAR 0 7
51218: PUSH
51219: DOUBLE
51220: LD_INT 1
51222: DEC
51223: ST_TO_ADDR
51224: LD_VAR 0 12
51228: PUSH
51229: FOR_TO
51230: IFFALSE 51560
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51232: LD_VAR 0 12
51236: PUSH
51237: LD_VAR 0 7
51241: ARRAY
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: PPUSH
51247: LD_VAR 0 12
51251: PUSH
51252: LD_VAR 0 7
51256: ARRAY
51257: PUSH
51258: LD_INT 2
51260: ARRAY
51261: PPUSH
51262: CALL_OW 488
51266: NOT
51267: PUSH
51268: LD_VAR 0 12
51272: PUSH
51273: LD_VAR 0 7
51277: ARRAY
51278: PUSH
51279: LD_INT 1
51281: ARRAY
51282: PPUSH
51283: LD_VAR 0 12
51287: PUSH
51288: LD_VAR 0 7
51292: ARRAY
51293: PUSH
51294: LD_INT 2
51296: ARRAY
51297: PPUSH
51298: CALL_OW 428
51302: PUSH
51303: LD_INT 0
51305: GREATER
51306: OR
51307: PUSH
51308: LD_VAR 0 12
51312: PUSH
51313: LD_VAR 0 7
51317: ARRAY
51318: PUSH
51319: LD_INT 1
51321: ARRAY
51322: PPUSH
51323: LD_VAR 0 12
51327: PUSH
51328: LD_VAR 0 7
51332: ARRAY
51333: PUSH
51334: LD_INT 2
51336: ARRAY
51337: PPUSH
51338: CALL_OW 351
51342: OR
51343: IFFALSE 51349
// exit ;
51345: POP
51346: POP
51347: GO 51656
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51349: LD_ADDR_VAR 0 8
51353: PUSH
51354: LD_VAR 0 12
51358: PUSH
51359: LD_VAR 0 7
51363: ARRAY
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PPUSH
51369: LD_VAR 0 12
51373: PUSH
51374: LD_VAR 0 7
51378: ARRAY
51379: PUSH
51380: LD_INT 2
51382: ARRAY
51383: PPUSH
51384: CALL_OW 546
51388: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51389: LD_VAR 0 8
51393: PUSH
51394: LD_INT 1
51396: ARRAY
51397: PUSH
51398: LD_VAR 0 8
51402: PUSH
51403: LD_INT 2
51405: ARRAY
51406: PUSH
51407: LD_VAR 0 13
51411: PUSH
51412: LD_INT 2
51414: PLUS
51415: GREATER
51416: OR
51417: PUSH
51418: LD_VAR 0 8
51422: PUSH
51423: LD_INT 2
51425: ARRAY
51426: PUSH
51427: LD_VAR 0 13
51431: PUSH
51432: LD_INT 2
51434: MINUS
51435: LESS
51436: OR
51437: PUSH
51438: LD_VAR 0 8
51442: PUSH
51443: LD_INT 3
51445: ARRAY
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 8
51452: PUSH
51453: LD_INT 9
51455: PUSH
51456: LD_INT 10
51458: PUSH
51459: LD_INT 11
51461: PUSH
51462: LD_INT 12
51464: PUSH
51465: LD_INT 13
51467: PUSH
51468: LD_INT 16
51470: PUSH
51471: LD_INT 17
51473: PUSH
51474: LD_INT 18
51476: PUSH
51477: LD_INT 19
51479: PUSH
51480: LD_INT 20
51482: PUSH
51483: LD_INT 21
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: IN
51501: NOT
51502: OR
51503: PUSH
51504: LD_VAR 0 8
51508: PUSH
51509: LD_INT 5
51511: ARRAY
51512: NOT
51513: OR
51514: PUSH
51515: LD_VAR 0 8
51519: PUSH
51520: LD_INT 6
51522: ARRAY
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 7
51532: PUSH
51533: LD_INT 9
51535: PUSH
51536: LD_INT 10
51538: PUSH
51539: LD_INT 11
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: IN
51550: NOT
51551: OR
51552: IFFALSE 51558
// exit ;
51554: POP
51555: POP
51556: GO 51656
// end ;
51558: GO 51229
51560: POP
51561: POP
// side := GetSide ( depot ) ;
51562: LD_ADDR_VAR 0 9
51566: PUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 255
51576: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51577: LD_VAR 0 9
51581: PPUSH
51582: LD_VAR 0 3
51586: PPUSH
51587: LD_VAR 0 4
51591: PPUSH
51592: LD_INT 20
51594: PPUSH
51595: CALL 43977 0 4
51599: PUSH
51600: LD_INT 4
51602: ARRAY
51603: IFFALSE 51607
// exit ;
51605: GO 51656
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51607: LD_VAR 0 2
51611: PUSH
51612: LD_INT 29
51614: PUSH
51615: LD_INT 30
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: IN
51622: PUSH
51623: LD_VAR 0 3
51627: PPUSH
51628: LD_VAR 0 4
51632: PPUSH
51633: LD_VAR 0 9
51637: PPUSH
51638: CALL_OW 440
51642: NOT
51643: AND
51644: IFFALSE 51648
// exit ;
51646: GO 51656
// result := true ;
51648: LD_ADDR_VAR 0 6
51652: PUSH
51653: LD_INT 1
51655: ST_TO_ADDR
// end ;
51656: LD_VAR 0 6
51660: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51661: LD_INT 0
51663: PPUSH
51664: PPUSH
51665: PPUSH
51666: PPUSH
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
51679: PPUSH
51680: PPUSH
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
51685: PPUSH
51686: PPUSH
51687: PPUSH
51688: PPUSH
51689: PPUSH
51690: PPUSH
51691: PPUSH
51692: PPUSH
51693: PPUSH
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
51703: PPUSH
51704: PPUSH
51705: PPUSH
51706: PPUSH
51707: PPUSH
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
// result = [ ] ;
51721: LD_ADDR_VAR 0 7
51725: PUSH
51726: EMPTY
51727: ST_TO_ADDR
// temp_list = [ ] ;
51728: LD_ADDR_VAR 0 9
51732: PUSH
51733: EMPTY
51734: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51735: LD_VAR 0 4
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 4
51754: PUSH
51755: LD_INT 5
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: IN
51766: NOT
51767: PUSH
51768: LD_VAR 0 1
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: IN
51783: PUSH
51784: LD_VAR 0 5
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: IN
51803: NOT
51804: AND
51805: OR
51806: IFFALSE 51810
// exit ;
51808: GO 70201
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51810: LD_VAR 0 1
51814: PUSH
51815: LD_INT 6
51817: PUSH
51818: LD_INT 7
51820: PUSH
51821: LD_INT 8
51823: PUSH
51824: LD_INT 13
51826: PUSH
51827: LD_INT 12
51829: PUSH
51830: LD_INT 15
51832: PUSH
51833: LD_INT 11
51835: PUSH
51836: LD_INT 14
51838: PUSH
51839: LD_INT 10
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: IN
51853: IFFALSE 51863
// btype = b_lab ;
51855: LD_ADDR_VAR 0 1
51859: PUSH
51860: LD_INT 6
51862: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51863: LD_VAR 0 6
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: IN
51882: NOT
51883: PUSH
51884: LD_VAR 0 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: LD_INT 6
51903: PUSH
51904: LD_INT 36
51906: PUSH
51907: LD_INT 4
51909: PUSH
51910: LD_INT 5
51912: PUSH
51913: LD_INT 31
51915: PUSH
51916: LD_INT 32
51918: PUSH
51919: LD_INT 33
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: IN
51935: NOT
51936: PUSH
51937: LD_VAR 0 6
51941: PUSH
51942: LD_INT 1
51944: EQUAL
51945: AND
51946: OR
51947: PUSH
51948: LD_VAR 0 1
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: IN
51963: NOT
51964: PUSH
51965: LD_VAR 0 6
51969: PUSH
51970: LD_INT 2
51972: EQUAL
51973: AND
51974: OR
51975: IFFALSE 51985
// mode = 0 ;
51977: LD_ADDR_VAR 0 6
51981: PUSH
51982: LD_INT 0
51984: ST_TO_ADDR
// case mode of 0 :
51985: LD_VAR 0 6
51989: PUSH
51990: LD_INT 0
51992: DOUBLE
51993: EQUAL
51994: IFTRUE 51998
51996: GO 63451
51998: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51999: LD_ADDR_VAR 0 11
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52192: LD_ADDR_VAR 0 12
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52388: LD_ADDR_VAR 0 13
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52587: LD_ADDR_VAR 0 14
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52783: LD_ADDR_VAR 0 15
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52976: LD_ADDR_VAR 0 16
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53169: LD_ADDR_VAR 0 17
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53399: LD_ADDR_VAR 0 18
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53629: LD_ADDR_VAR 0 19
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53859: LD_ADDR_VAR 0 20
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54089: LD_ADDR_VAR 0 21
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54319: LD_ADDR_VAR 0 22
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54549: LD_ADDR_VAR 0 23
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54829: LD_ADDR_VAR 0 24
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55105: LD_ADDR_VAR 0 25
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55379: LD_ADDR_VAR 0 26
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 3
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55655: LD_ADDR_VAR 0 27
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 2
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55935: LD_ADDR_VAR 0 28
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56217: LD_ADDR_VAR 0 29
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56496: LD_ADDR_VAR 0 30
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56774: LD_ADDR_VAR 0 31
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57052: LD_ADDR_VAR 0 32
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57330: LD_ADDR_VAR 0 33
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57609: LD_ADDR_VAR 0 34
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57889: LD_ADDR_VAR 0 35
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58001: LD_ADDR_VAR 0 36
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58113: LD_ADDR_VAR 0 37
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58225: LD_ADDR_VAR 0 38
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58337: LD_ADDR_VAR 0 39
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58449: LD_ADDR_VAR 0 40
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58561: LD_ADDR_VAR 0 41
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58911: LD_ADDR_VAR 0 42
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59261: LD_ADDR_VAR 0 43
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59609: LD_ADDR_VAR 0 44
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59959: LD_ADDR_VAR 0 45
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60309: LD_ADDR_VAR 0 46
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 3
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60657: LD_ADDR_VAR 0 47
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60808: LD_ADDR_VAR 0 48
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60955: LD_ADDR_VAR 0 49
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61099: LD_ADDR_VAR 0 50
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61243: LD_ADDR_VAR 0 51
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61390: LD_ADDR_VAR 0 52
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 2
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61541: LD_ADDR_VAR 0 53
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61771: LD_ADDR_VAR 0 54
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: LD_INT 2
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62001: LD_ADDR_VAR 0 55
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 2
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62231: LD_ADDR_VAR 0 56
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62461: LD_ADDR_VAR 0 57
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 2
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62691: LD_ADDR_VAR 0 58
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62921: LD_ADDR_VAR 0 59
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63009: LD_ADDR_VAR 0 60
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63097: LD_ADDR_VAR 0 61
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63185: LD_ADDR_VAR 0 62
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63273: LD_ADDR_VAR 0 63
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63361: LD_ADDR_VAR 0 64
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: ST_TO_ADDR
// end ; 1 :
63449: GO 69346
63451: LD_INT 1
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63459
63457: GO 66082
63459: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63460: LD_ADDR_VAR 0 11
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 3
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: LD_INT 2
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63504: LD_ADDR_VAR 0 12
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 3
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: LIST
63544: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63545: LD_ADDR_VAR 0 13
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: LD_INT 3
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63585: LD_ADDR_VAR 0 14
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: LD_INT 3
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: LIST
63625: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63626: LD_ADDR_VAR 0 15
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63670: LD_ADDR_VAR 0 16
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: LD_INT 3
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 3
63701: NEG
63702: PUSH
63703: LD_INT 3
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63716: LD_ADDR_VAR 0 17
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 3
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: LIST
63759: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63760: LD_ADDR_VAR 0 18
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63801: LD_ADDR_VAR 0 19
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: LD_INT 3
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: LIST
63840: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63841: LD_ADDR_VAR 0 20
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: LD_INT 3
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63882: LD_ADDR_VAR 0 21
63886: PUSH
63887: LD_INT 2
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63926: LD_ADDR_VAR 0 22
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 3
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 3
63957: NEG
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63972: LD_ADDR_VAR 0 23
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 3
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 4
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64016: LD_ADDR_VAR 0 24
64020: PUSH
64021: LD_INT 3
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64057: LD_ADDR_VAR 0 25
64061: PUSH
64062: LD_INT 3
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 4
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: LD_INT 4
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64097: LD_ADDR_VAR 0 26
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: LD_INT 4
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64138: LD_ADDR_VAR 0 27
64142: PUSH
64143: LD_INT 3
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 4
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64182: LD_ADDR_VAR 0 28
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: LD_INT 4
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 4
64213: NEG
64214: PUSH
64215: LD_INT 3
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64228: LD_ADDR_VAR 0 29
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: LD_INT 3
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 4
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 4
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: LD_INT 3
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 5
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 5
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 6
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 6
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 5
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64383: LD_ADDR_VAR 0 30
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 4
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 4
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 4
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 5
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 5
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 5
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 6
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 6
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64526: LD_ADDR_VAR 0 31
64530: PUSH
64531: LD_INT 3
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 4
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: LD_INT 4
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 5
64593: PUSH
64594: LD_INT 4
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 5
64603: PUSH
64604: LD_INT 5
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 4
64613: PUSH
64614: LD_INT 5
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 6
64623: PUSH
64624: LD_INT 5
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 6
64633: PUSH
64634: LD_INT 6
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 5
64643: PUSH
64644: LD_INT 6
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64665: LD_ADDR_VAR 0 32
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: LD_INT 3
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 4
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 4
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 5
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 5
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 4
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 6
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 6
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: LD_INT 5
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64808: LD_ADDR_VAR 0 33
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 3
64826: NEG
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 3
64837: NEG
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: NEG
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 4
64860: NEG
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 4
64871: NEG
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 4
64883: NEG
64884: PUSH
64885: LD_INT 1
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 5
64894: NEG
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 5
64905: NEG
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 5
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 6
64928: NEG
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 6
64939: NEG
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64963: LD_ADDR_VAR 0 34
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: LD_INT 3
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: LD_INT 3
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 3
65006: NEG
65007: PUSH
65008: LD_INT 4
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 4
65018: NEG
65019: PUSH
65020: LD_INT 3
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 4
65030: NEG
65031: PUSH
65032: LD_INT 4
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 4
65042: NEG
65043: PUSH
65044: LD_INT 5
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 5
65054: NEG
65055: PUSH
65056: LD_INT 4
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 5
65066: NEG
65067: PUSH
65068: LD_INT 5
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 5
65078: NEG
65079: PUSH
65080: LD_INT 6
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 6
65090: NEG
65091: PUSH
65092: LD_INT 5
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 6
65102: NEG
65103: PUSH
65104: LD_INT 6
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65126: LD_ADDR_VAR 0 41
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 3
65148: NEG
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: LD_INT 2
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65170: LD_ADDR_VAR 0 42
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 2
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 3
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: LIST
65210: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65211: LD_ADDR_VAR 0 43
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65251: LD_ADDR_VAR 0 44
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65292: LD_ADDR_VAR 0 45
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 2
65310: NEG
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65336: LD_ADDR_VAR 0 46
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: LD_INT 2
65347: NEG
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 2
65355: NEG
65356: PUSH
65357: LD_INT 3
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 3
65367: NEG
65368: PUSH
65369: LD_INT 2
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65382: LD_ADDR_VAR 0 47
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: LD_INT 3
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 3
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65415: LD_ADDR_VAR 0 48
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65446: LD_ADDR_VAR 0 49
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 3
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65475: LD_ADDR_VAR 0 50
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: LD_INT 3
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65504: LD_ADDR_VAR 0 51
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65535: LD_ADDR_VAR 0 52
65539: PUSH
65540: LD_INT 3
65542: NEG
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: LD_INT 2
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65568: LD_ADDR_VAR 0 53
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: LD_INT 2
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65612: LD_ADDR_VAR 0 54
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: LIST
65652: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65653: LD_ADDR_VAR 0 55
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65693: LD_ADDR_VAR 0 56
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65734: LD_ADDR_VAR 0 57
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 3
65763: NEG
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65778: LD_ADDR_VAR 0 58
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: LD_INT 2
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: LD_INT 3
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: LIST
65823: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65824: LD_ADDR_VAR 0 59
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 2
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65868: LD_ADDR_VAR 0 60
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65909: LD_ADDR_VAR 0 61
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: LIST
65948: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65949: LD_ADDR_VAR 0 62
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65990: LD_ADDR_VAR 0 63
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66034: LD_ADDR_VAR 0 64
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: LD_INT 2
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: NEG
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: ST_TO_ADDR
// end ; 2 :
66080: GO 69346
66082: LD_INT 2
66084: DOUBLE
66085: EQUAL
66086: IFTRUE 66090
66088: GO 69345
66090: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66091: LD_ADDR_VAR 0 29
66095: PUSH
66096: LD_INT 4
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 4
66108: PUSH
66109: LD_INT 1
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 5
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 4
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 3
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 5
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: PUSH
66192: LD_INT 3
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 4
66211: PUSH
66212: LD_INT 3
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 4
66221: PUSH
66222: LD_INT 4
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 3
66231: PUSH
66232: LD_INT 4
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: LD_INT 3
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 4
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: LD_INT 4
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 4
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: LD_INT 4
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: LD_INT 5
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: LD_INT 5
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: LD_INT 4
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: LD_INT 5
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: NEG
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 2
66408: NEG
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: NEG
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 4
66430: NEG
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 4
66441: NEG
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 4
66453: NEG
66454: PUSH
66455: LD_INT 2
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 4
66476: NEG
66477: PUSH
66478: LD_INT 4
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 4
66488: NEG
66489: PUSH
66490: LD_INT 5
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: LD_INT 4
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 4
66524: NEG
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 5
66536: NEG
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 5
66548: NEG
66549: PUSH
66550: LD_INT 5
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: LD_INT 5
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 5
66572: NEG
66573: PUSH
66574: LD_INT 3
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66629: LD_ADDR_VAR 0 30
66633: PUSH
66634: LD_INT 4
66636: PUSH
66637: LD_INT 4
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 4
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 5
66656: PUSH
66657: LD_INT 4
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 5
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 4
66676: PUSH
66677: LD_INT 5
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: LD_INT 4
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 5
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: LD_INT 5
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 3
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 4
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 3
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: LD_INT 4
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 4
66819: NEG
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 4
66830: NEG
66831: PUSH
66832: LD_INT 1
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 4
66864: NEG
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 5
66875: NEG
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 5
66886: NEG
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 5
66898: NEG
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 3
66910: NEG
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: NEG
66922: PUSH
66923: LD_INT 3
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 3
66933: NEG
66934: PUSH
66935: LD_INT 4
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 2
66945: NEG
66946: PUSH
66947: LD_INT 3
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 2
66957: NEG
66958: PUSH
66959: LD_INT 2
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: NEG
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 4
66981: NEG
66982: PUSH
66983: LD_INT 3
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 4
66993: NEG
66994: PUSH
66995: LD_INT 4
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: LD_INT 4
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 4
67017: NEG
67018: PUSH
67019: LD_INT 2
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 4
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 5
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 4
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: LD_INT 4
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: LD_INT 5
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 2
67119: NEG
67120: PUSH
67121: LD_INT 5
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67176: LD_ADDR_VAR 0 31
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: LD_INT 3
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 5
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 5
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 2
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: LD_INT 3
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 3
67276: NEG
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 3
67287: NEG
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 2
67299: NEG
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 2
67310: NEG
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 4
67355: NEG
67356: PUSH
67357: LD_INT 2
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 2
67367: NEG
67368: PUSH
67369: LD_INT 2
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 4
67378: NEG
67379: PUSH
67380: LD_INT 4
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: NEG
67391: PUSH
67392: LD_INT 5
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: LD_INT 4
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 3
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 5
67438: NEG
67439: PUSH
67440: LD_INT 4
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 5
67450: NEG
67451: PUSH
67452: LD_INT 5
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 3
67462: NEG
67463: PUSH
67464: LD_INT 5
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 5
67474: NEG
67475: PUSH
67476: LD_INT 3
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: LD_INT 3
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: LD_INT 4
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: LD_INT 3
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: PUSH
67520: LD_INT 2
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 2
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: NEG
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 5
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 5
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 4
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 5
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67726: LD_ADDR_VAR 0 32
67730: PUSH
67731: LD_INT 4
67733: NEG
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 4
67744: NEG
67745: PUSH
67746: LD_INT 1
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 3
67756: NEG
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: LD_INT 1
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 4
67778: NEG
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 5
67789: NEG
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 5
67800: NEG
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 5
67812: NEG
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 3
67835: NEG
67836: PUSH
67837: LD_INT 3
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 3
67847: NEG
67848: PUSH
67849: LD_INT 4
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 2
67859: NEG
67860: PUSH
67861: LD_INT 3
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 3
67883: NEG
67884: PUSH
67885: LD_INT 2
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 4
67895: NEG
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: NEG
67908: PUSH
67909: LD_INT 4
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 2
67919: NEG
67920: PUSH
67921: LD_INT 4
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 4
67931: NEG
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: LD_INT 4
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: LD_INT 5
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: LD_INT 3
67979: NEG
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 3
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: LD_INT 4
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 5
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: LD_INT 5
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 2
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 4
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 4
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 5
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 5
68168: PUSH
68169: LD_INT 5
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 4
68178: PUSH
68179: LD_INT 5
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 5
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 3
68218: PUSH
68219: LD_INT 5
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68273: LD_ADDR_VAR 0 33
68277: PUSH
68278: LD_INT 4
68280: NEG
68281: PUSH
68282: LD_INT 4
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 4
68292: NEG
68293: PUSH
68294: LD_INT 5
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: LD_INT 4
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: NEG
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 4
68328: NEG
68329: PUSH
68330: LD_INT 3
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 5
68340: NEG
68341: PUSH
68342: LD_INT 4
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 5
68352: NEG
68353: PUSH
68354: LD_INT 5
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: LD_INT 5
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 5
68376: NEG
68377: PUSH
68378: LD_INT 3
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: LD_INT 2
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 1
68443: NEG
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: LD_INT 4
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 2
68478: NEG
68479: PUSH
68480: LD_INT 4
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 5
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 5
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 4
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 3
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: PUSH
68563: LD_INT 2
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 5
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: PUSH
68584: LD_INT 3
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: LD_INT 3
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 4
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 3
68623: PUSH
68624: LD_INT 4
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: LD_INT 3
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 4
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: LD_INT 4
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 4
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: LD_INT 5
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 1
68723: NEG
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: LD_INT 5
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 2
68755: NEG
68756: PUSH
68757: LD_INT 3
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68811: LD_ADDR_VAR 0 34
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: LD_INT 5
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 1
68840: PUSH
68841: LD_INT 4
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: LD_INT 3
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 3
68865: NEG
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 1
68873: NEG
68874: PUSH
68875: LD_INT 4
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: LD_INT 5
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: LD_INT 3
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 2
68908: NEG
68909: PUSH
68910: LD_INT 5
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: LD_INT 1
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 4
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 4
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 3
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 2
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 4
69003: PUSH
69004: LD_INT 2
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 4
69013: PUSH
69014: LD_INT 4
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 4
69023: PUSH
69024: LD_INT 3
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 5
69033: PUSH
69034: LD_INT 4
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 5
69043: PUSH
69044: LD_INT 5
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 4
69053: PUSH
69054: LD_INT 5
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: LD_INT 4
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 3
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 5
69083: PUSH
69084: LD_INT 3
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 3
69093: PUSH
69094: LD_INT 5
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: LD_INT 2
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: LD_INT 4
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: LD_INT 2
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: LD_INT 4
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 4
69196: NEG
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 4
69207: NEG
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: NEG
69242: PUSH
69243: LD_INT 1
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 5
69252: NEG
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 5
69263: NEG
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 5
69275: NEG
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 3
69287: NEG
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: ST_TO_ADDR
// end ; end ;
69343: GO 69346
69345: POP
// case btype of b_depot , b_warehouse :
69346: LD_VAR 0 1
69350: PUSH
69351: LD_INT 0
69353: DOUBLE
69354: EQUAL
69355: IFTRUE 69365
69357: LD_INT 1
69359: DOUBLE
69360: EQUAL
69361: IFTRUE 69365
69363: GO 69566
69365: POP
// case nation of nation_american :
69366: LD_VAR 0 5
69370: PUSH
69371: LD_INT 1
69373: DOUBLE
69374: EQUAL
69375: IFTRUE 69379
69377: GO 69435
69379: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69380: LD_ADDR_VAR 0 9
69384: PUSH
69385: LD_VAR 0 11
69389: PUSH
69390: LD_VAR 0 12
69394: PUSH
69395: LD_VAR 0 13
69399: PUSH
69400: LD_VAR 0 14
69404: PUSH
69405: LD_VAR 0 15
69409: PUSH
69410: LD_VAR 0 16
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: PUSH
69423: LD_VAR 0 4
69427: PUSH
69428: LD_INT 1
69430: PLUS
69431: ARRAY
69432: ST_TO_ADDR
69433: GO 69564
69435: LD_INT 2
69437: DOUBLE
69438: EQUAL
69439: IFTRUE 69443
69441: GO 69499
69443: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69444: LD_ADDR_VAR 0 9
69448: PUSH
69449: LD_VAR 0 17
69453: PUSH
69454: LD_VAR 0 18
69458: PUSH
69459: LD_VAR 0 19
69463: PUSH
69464: LD_VAR 0 20
69468: PUSH
69469: LD_VAR 0 21
69473: PUSH
69474: LD_VAR 0 22
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: PUSH
69487: LD_VAR 0 4
69491: PUSH
69492: LD_INT 1
69494: PLUS
69495: ARRAY
69496: ST_TO_ADDR
69497: GO 69564
69499: LD_INT 3
69501: DOUBLE
69502: EQUAL
69503: IFTRUE 69507
69505: GO 69563
69507: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69508: LD_ADDR_VAR 0 9
69512: PUSH
69513: LD_VAR 0 23
69517: PUSH
69518: LD_VAR 0 24
69522: PUSH
69523: LD_VAR 0 25
69527: PUSH
69528: LD_VAR 0 26
69532: PUSH
69533: LD_VAR 0 27
69537: PUSH
69538: LD_VAR 0 28
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: PUSH
69551: LD_VAR 0 4
69555: PUSH
69556: LD_INT 1
69558: PLUS
69559: ARRAY
69560: ST_TO_ADDR
69561: GO 69564
69563: POP
69564: GO 70119
69566: LD_INT 2
69568: DOUBLE
69569: EQUAL
69570: IFTRUE 69580
69572: LD_INT 3
69574: DOUBLE
69575: EQUAL
69576: IFTRUE 69580
69578: GO 69636
69580: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69581: LD_ADDR_VAR 0 9
69585: PUSH
69586: LD_VAR 0 29
69590: PUSH
69591: LD_VAR 0 30
69595: PUSH
69596: LD_VAR 0 31
69600: PUSH
69601: LD_VAR 0 32
69605: PUSH
69606: LD_VAR 0 33
69610: PUSH
69611: LD_VAR 0 34
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: LD_VAR 0 4
69628: PUSH
69629: LD_INT 1
69631: PLUS
69632: ARRAY
69633: ST_TO_ADDR
69634: GO 70119
69636: LD_INT 16
69638: DOUBLE
69639: EQUAL
69640: IFTRUE 69698
69642: LD_INT 17
69644: DOUBLE
69645: EQUAL
69646: IFTRUE 69698
69648: LD_INT 18
69650: DOUBLE
69651: EQUAL
69652: IFTRUE 69698
69654: LD_INT 19
69656: DOUBLE
69657: EQUAL
69658: IFTRUE 69698
69660: LD_INT 22
69662: DOUBLE
69663: EQUAL
69664: IFTRUE 69698
69666: LD_INT 20
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69698
69672: LD_INT 21
69674: DOUBLE
69675: EQUAL
69676: IFTRUE 69698
69678: LD_INT 23
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69698
69684: LD_INT 24
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69698
69690: LD_INT 25
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69698
69696: GO 69754
69698: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69699: LD_ADDR_VAR 0 9
69703: PUSH
69704: LD_VAR 0 35
69708: PUSH
69709: LD_VAR 0 36
69713: PUSH
69714: LD_VAR 0 37
69718: PUSH
69719: LD_VAR 0 38
69723: PUSH
69724: LD_VAR 0 39
69728: PUSH
69729: LD_VAR 0 40
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: PUSH
69742: LD_VAR 0 4
69746: PUSH
69747: LD_INT 1
69749: PLUS
69750: ARRAY
69751: ST_TO_ADDR
69752: GO 70119
69754: LD_INT 6
69756: DOUBLE
69757: EQUAL
69758: IFTRUE 69810
69760: LD_INT 7
69762: DOUBLE
69763: EQUAL
69764: IFTRUE 69810
69766: LD_INT 8
69768: DOUBLE
69769: EQUAL
69770: IFTRUE 69810
69772: LD_INT 13
69774: DOUBLE
69775: EQUAL
69776: IFTRUE 69810
69778: LD_INT 12
69780: DOUBLE
69781: EQUAL
69782: IFTRUE 69810
69784: LD_INT 15
69786: DOUBLE
69787: EQUAL
69788: IFTRUE 69810
69790: LD_INT 11
69792: DOUBLE
69793: EQUAL
69794: IFTRUE 69810
69796: LD_INT 14
69798: DOUBLE
69799: EQUAL
69800: IFTRUE 69810
69802: LD_INT 10
69804: DOUBLE
69805: EQUAL
69806: IFTRUE 69810
69808: GO 69866
69810: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69811: LD_ADDR_VAR 0 9
69815: PUSH
69816: LD_VAR 0 41
69820: PUSH
69821: LD_VAR 0 42
69825: PUSH
69826: LD_VAR 0 43
69830: PUSH
69831: LD_VAR 0 44
69835: PUSH
69836: LD_VAR 0 45
69840: PUSH
69841: LD_VAR 0 46
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: PUSH
69854: LD_VAR 0 4
69858: PUSH
69859: LD_INT 1
69861: PLUS
69862: ARRAY
69863: ST_TO_ADDR
69864: GO 70119
69866: LD_INT 36
69868: DOUBLE
69869: EQUAL
69870: IFTRUE 69874
69872: GO 69930
69874: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69875: LD_ADDR_VAR 0 9
69879: PUSH
69880: LD_VAR 0 47
69884: PUSH
69885: LD_VAR 0 48
69889: PUSH
69890: LD_VAR 0 49
69894: PUSH
69895: LD_VAR 0 50
69899: PUSH
69900: LD_VAR 0 51
69904: PUSH
69905: LD_VAR 0 52
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: PUSH
69918: LD_VAR 0 4
69922: PUSH
69923: LD_INT 1
69925: PLUS
69926: ARRAY
69927: ST_TO_ADDR
69928: GO 70119
69930: LD_INT 4
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69956
69936: LD_INT 5
69938: DOUBLE
69939: EQUAL
69940: IFTRUE 69956
69942: LD_INT 34
69944: DOUBLE
69945: EQUAL
69946: IFTRUE 69956
69948: LD_INT 37
69950: DOUBLE
69951: EQUAL
69952: IFTRUE 69956
69954: GO 70012
69956: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69957: LD_ADDR_VAR 0 9
69961: PUSH
69962: LD_VAR 0 53
69966: PUSH
69967: LD_VAR 0 54
69971: PUSH
69972: LD_VAR 0 55
69976: PUSH
69977: LD_VAR 0 56
69981: PUSH
69982: LD_VAR 0 57
69986: PUSH
69987: LD_VAR 0 58
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: PUSH
70000: LD_VAR 0 4
70004: PUSH
70005: LD_INT 1
70007: PLUS
70008: ARRAY
70009: ST_TO_ADDR
70010: GO 70119
70012: LD_INT 31
70014: DOUBLE
70015: EQUAL
70016: IFTRUE 70062
70018: LD_INT 32
70020: DOUBLE
70021: EQUAL
70022: IFTRUE 70062
70024: LD_INT 33
70026: DOUBLE
70027: EQUAL
70028: IFTRUE 70062
70030: LD_INT 27
70032: DOUBLE
70033: EQUAL
70034: IFTRUE 70062
70036: LD_INT 26
70038: DOUBLE
70039: EQUAL
70040: IFTRUE 70062
70042: LD_INT 28
70044: DOUBLE
70045: EQUAL
70046: IFTRUE 70062
70048: LD_INT 29
70050: DOUBLE
70051: EQUAL
70052: IFTRUE 70062
70054: LD_INT 30
70056: DOUBLE
70057: EQUAL
70058: IFTRUE 70062
70060: GO 70118
70062: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70063: LD_ADDR_VAR 0 9
70067: PUSH
70068: LD_VAR 0 59
70072: PUSH
70073: LD_VAR 0 60
70077: PUSH
70078: LD_VAR 0 61
70082: PUSH
70083: LD_VAR 0 62
70087: PUSH
70088: LD_VAR 0 63
70092: PUSH
70093: LD_VAR 0 64
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: PUSH
70106: LD_VAR 0 4
70110: PUSH
70111: LD_INT 1
70113: PLUS
70114: ARRAY
70115: ST_TO_ADDR
70116: GO 70119
70118: POP
// temp_list2 = [ ] ;
70119: LD_ADDR_VAR 0 10
70123: PUSH
70124: EMPTY
70125: ST_TO_ADDR
// for i in temp_list do
70126: LD_ADDR_VAR 0 8
70130: PUSH
70131: LD_VAR 0 9
70135: PUSH
70136: FOR_IN
70137: IFFALSE 70189
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70139: LD_ADDR_VAR 0 10
70143: PUSH
70144: LD_VAR 0 10
70148: PUSH
70149: LD_VAR 0 8
70153: PUSH
70154: LD_INT 1
70156: ARRAY
70157: PUSH
70158: LD_VAR 0 2
70162: PLUS
70163: PUSH
70164: LD_VAR 0 8
70168: PUSH
70169: LD_INT 2
70171: ARRAY
70172: PUSH
70173: LD_VAR 0 3
70177: PLUS
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: EMPTY
70184: LIST
70185: ADD
70186: ST_TO_ADDR
70187: GO 70136
70189: POP
70190: POP
// result = temp_list2 ;
70191: LD_ADDR_VAR 0 7
70195: PUSH
70196: LD_VAR 0 10
70200: ST_TO_ADDR
// end ;
70201: LD_VAR 0 7
70205: RET
// export function EnemyInRange ( unit , dist ) ; begin
70206: LD_INT 0
70208: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70209: LD_ADDR_VAR 0 3
70213: PUSH
70214: LD_VAR 0 1
70218: PPUSH
70219: CALL_OW 255
70223: PPUSH
70224: LD_VAR 0 1
70228: PPUSH
70229: CALL_OW 250
70233: PPUSH
70234: LD_VAR 0 1
70238: PPUSH
70239: CALL_OW 251
70243: PPUSH
70244: LD_VAR 0 2
70248: PPUSH
70249: CALL 43977 0 4
70253: PUSH
70254: LD_INT 4
70256: ARRAY
70257: ST_TO_ADDR
// end ;
70258: LD_VAR 0 3
70262: RET
// export function PlayerSeeMe ( unit ) ; begin
70263: LD_INT 0
70265: PPUSH
// result := See ( your_side , unit ) ;
70266: LD_ADDR_VAR 0 2
70270: PUSH
70271: LD_OWVAR 2
70275: PPUSH
70276: LD_VAR 0 1
70280: PPUSH
70281: CALL_OW 292
70285: ST_TO_ADDR
// end ;
70286: LD_VAR 0 2
70290: RET
// export function ReverseDir ( unit ) ; begin
70291: LD_INT 0
70293: PPUSH
// if not unit then
70294: LD_VAR 0 1
70298: NOT
70299: IFFALSE 70303
// exit ;
70301: GO 70326
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70303: LD_ADDR_VAR 0 2
70307: PUSH
70308: LD_VAR 0 1
70312: PPUSH
70313: CALL_OW 254
70317: PUSH
70318: LD_INT 3
70320: PLUS
70321: PUSH
70322: LD_INT 6
70324: MOD
70325: ST_TO_ADDR
// end ;
70326: LD_VAR 0 2
70330: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70331: LD_INT 0
70333: PPUSH
70334: PPUSH
70335: PPUSH
70336: PPUSH
70337: PPUSH
// if not hexes then
70338: LD_VAR 0 2
70342: NOT
70343: IFFALSE 70347
// exit ;
70345: GO 70495
// dist := 9999 ;
70347: LD_ADDR_VAR 0 5
70351: PUSH
70352: LD_INT 9999
70354: ST_TO_ADDR
// for i = 1 to hexes do
70355: LD_ADDR_VAR 0 4
70359: PUSH
70360: DOUBLE
70361: LD_INT 1
70363: DEC
70364: ST_TO_ADDR
70365: LD_VAR 0 2
70369: PUSH
70370: FOR_TO
70371: IFFALSE 70483
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70373: LD_VAR 0 1
70377: PPUSH
70378: LD_VAR 0 2
70382: PUSH
70383: LD_VAR 0 4
70387: ARRAY
70388: PUSH
70389: LD_INT 1
70391: ARRAY
70392: PPUSH
70393: LD_VAR 0 2
70397: PUSH
70398: LD_VAR 0 4
70402: ARRAY
70403: PUSH
70404: LD_INT 2
70406: ARRAY
70407: PPUSH
70408: CALL_OW 297
70412: PUSH
70413: LD_VAR 0 5
70417: LESS
70418: IFFALSE 70481
// begin hex := hexes [ i ] ;
70420: LD_ADDR_VAR 0 7
70424: PUSH
70425: LD_VAR 0 2
70429: PUSH
70430: LD_VAR 0 4
70434: ARRAY
70435: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70436: LD_ADDR_VAR 0 5
70440: PUSH
70441: LD_VAR 0 1
70445: PPUSH
70446: LD_VAR 0 2
70450: PUSH
70451: LD_VAR 0 4
70455: ARRAY
70456: PUSH
70457: LD_INT 1
70459: ARRAY
70460: PPUSH
70461: LD_VAR 0 2
70465: PUSH
70466: LD_VAR 0 4
70470: ARRAY
70471: PUSH
70472: LD_INT 2
70474: ARRAY
70475: PPUSH
70476: CALL_OW 297
70480: ST_TO_ADDR
// end ; end ;
70481: GO 70370
70483: POP
70484: POP
// result := hex ;
70485: LD_ADDR_VAR 0 3
70489: PUSH
70490: LD_VAR 0 7
70494: ST_TO_ADDR
// end ;
70495: LD_VAR 0 3
70499: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70500: LD_INT 0
70502: PPUSH
70503: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70504: LD_VAR 0 1
70508: NOT
70509: PUSH
70510: LD_VAR 0 1
70514: PUSH
70515: LD_INT 21
70517: PUSH
70518: LD_INT 2
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 23
70527: PUSH
70528: LD_INT 2
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PPUSH
70539: CALL_OW 69
70543: IN
70544: NOT
70545: OR
70546: IFFALSE 70550
// exit ;
70548: GO 70597
// for i = 1 to 3 do
70550: LD_ADDR_VAR 0 3
70554: PUSH
70555: DOUBLE
70556: LD_INT 1
70558: DEC
70559: ST_TO_ADDR
70560: LD_INT 3
70562: PUSH
70563: FOR_TO
70564: IFFALSE 70595
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70566: LD_VAR 0 1
70570: PPUSH
70571: CALL_OW 250
70575: PPUSH
70576: LD_VAR 0 1
70580: PPUSH
70581: CALL_OW 251
70585: PPUSH
70586: LD_INT 1
70588: PPUSH
70589: CALL_OW 453
70593: GO 70563
70595: POP
70596: POP
// end ;
70597: LD_VAR 0 2
70601: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70602: LD_INT 0
70604: PPUSH
70605: PPUSH
70606: PPUSH
70607: PPUSH
70608: PPUSH
70609: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70610: LD_VAR 0 1
70614: NOT
70615: PUSH
70616: LD_VAR 0 2
70620: NOT
70621: OR
70622: PUSH
70623: LD_VAR 0 1
70627: PPUSH
70628: CALL_OW 314
70632: OR
70633: IFFALSE 70637
// exit ;
70635: GO 71078
// x := GetX ( enemy_unit ) ;
70637: LD_ADDR_VAR 0 7
70641: PUSH
70642: LD_VAR 0 2
70646: PPUSH
70647: CALL_OW 250
70651: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70652: LD_ADDR_VAR 0 8
70656: PUSH
70657: LD_VAR 0 2
70661: PPUSH
70662: CALL_OW 251
70666: ST_TO_ADDR
// if not x or not y then
70667: LD_VAR 0 7
70671: NOT
70672: PUSH
70673: LD_VAR 0 8
70677: NOT
70678: OR
70679: IFFALSE 70683
// exit ;
70681: GO 71078
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70683: LD_ADDR_VAR 0 6
70687: PUSH
70688: LD_VAR 0 7
70692: PPUSH
70693: LD_INT 0
70695: PPUSH
70696: LD_INT 4
70698: PPUSH
70699: CALL_OW 272
70703: PUSH
70704: LD_VAR 0 8
70708: PPUSH
70709: LD_INT 0
70711: PPUSH
70712: LD_INT 4
70714: PPUSH
70715: CALL_OW 273
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_VAR 0 7
70728: PPUSH
70729: LD_INT 1
70731: PPUSH
70732: LD_INT 4
70734: PPUSH
70735: CALL_OW 272
70739: PUSH
70740: LD_VAR 0 8
70744: PPUSH
70745: LD_INT 1
70747: PPUSH
70748: LD_INT 4
70750: PPUSH
70751: CALL_OW 273
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_VAR 0 7
70764: PPUSH
70765: LD_INT 2
70767: PPUSH
70768: LD_INT 4
70770: PPUSH
70771: CALL_OW 272
70775: PUSH
70776: LD_VAR 0 8
70780: PPUSH
70781: LD_INT 2
70783: PPUSH
70784: LD_INT 4
70786: PPUSH
70787: CALL_OW 273
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_VAR 0 7
70800: PPUSH
70801: LD_INT 3
70803: PPUSH
70804: LD_INT 4
70806: PPUSH
70807: CALL_OW 272
70811: PUSH
70812: LD_VAR 0 8
70816: PPUSH
70817: LD_INT 3
70819: PPUSH
70820: LD_INT 4
70822: PPUSH
70823: CALL_OW 273
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_VAR 0 7
70836: PPUSH
70837: LD_INT 4
70839: PPUSH
70840: LD_INT 4
70842: PPUSH
70843: CALL_OW 272
70847: PUSH
70848: LD_VAR 0 8
70852: PPUSH
70853: LD_INT 4
70855: PPUSH
70856: LD_INT 4
70858: PPUSH
70859: CALL_OW 273
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_VAR 0 7
70872: PPUSH
70873: LD_INT 5
70875: PPUSH
70876: LD_INT 4
70878: PPUSH
70879: CALL_OW 272
70883: PUSH
70884: LD_VAR 0 8
70888: PPUSH
70889: LD_INT 5
70891: PPUSH
70892: LD_INT 4
70894: PPUSH
70895: CALL_OW 273
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: ST_TO_ADDR
// for i = tmp downto 1 do
70912: LD_ADDR_VAR 0 4
70916: PUSH
70917: DOUBLE
70918: LD_VAR 0 6
70922: INC
70923: ST_TO_ADDR
70924: LD_INT 1
70926: PUSH
70927: FOR_DOWNTO
70928: IFFALSE 71029
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70930: LD_VAR 0 6
70934: PUSH
70935: LD_VAR 0 4
70939: ARRAY
70940: PUSH
70941: LD_INT 1
70943: ARRAY
70944: PPUSH
70945: LD_VAR 0 6
70949: PUSH
70950: LD_VAR 0 4
70954: ARRAY
70955: PUSH
70956: LD_INT 2
70958: ARRAY
70959: PPUSH
70960: CALL_OW 488
70964: NOT
70965: PUSH
70966: LD_VAR 0 6
70970: PUSH
70971: LD_VAR 0 4
70975: ARRAY
70976: PUSH
70977: LD_INT 1
70979: ARRAY
70980: PPUSH
70981: LD_VAR 0 6
70985: PUSH
70986: LD_VAR 0 4
70990: ARRAY
70991: PUSH
70992: LD_INT 2
70994: ARRAY
70995: PPUSH
70996: CALL_OW 428
71000: PUSH
71001: LD_INT 0
71003: NONEQUAL
71004: OR
71005: IFFALSE 71027
// tmp := Delete ( tmp , i ) ;
71007: LD_ADDR_VAR 0 6
71011: PUSH
71012: LD_VAR 0 6
71016: PPUSH
71017: LD_VAR 0 4
71021: PPUSH
71022: CALL_OW 3
71026: ST_TO_ADDR
71027: GO 70927
71029: POP
71030: POP
// j := GetClosestHex ( unit , tmp ) ;
71031: LD_ADDR_VAR 0 5
71035: PUSH
71036: LD_VAR 0 1
71040: PPUSH
71041: LD_VAR 0 6
71045: PPUSH
71046: CALL 70331 0 2
71050: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71051: LD_VAR 0 1
71055: PPUSH
71056: LD_VAR 0 5
71060: PUSH
71061: LD_INT 1
71063: ARRAY
71064: PPUSH
71065: LD_VAR 0 5
71069: PUSH
71070: LD_INT 2
71072: ARRAY
71073: PPUSH
71074: CALL_OW 111
// end ;
71078: LD_VAR 0 3
71082: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71083: LD_INT 0
71085: PPUSH
71086: PPUSH
71087: PPUSH
// uc_side = 0 ;
71088: LD_ADDR_OWVAR 20
71092: PUSH
71093: LD_INT 0
71095: ST_TO_ADDR
// uc_nation = 0 ;
71096: LD_ADDR_OWVAR 21
71100: PUSH
71101: LD_INT 0
71103: ST_TO_ADDR
// InitHc_All ( ) ;
71104: CALL_OW 584
// InitVc ;
71108: CALL_OW 20
// if mastodonts then
71112: LD_VAR 0 6
71116: IFFALSE 71183
// for i = 1 to mastodonts do
71118: LD_ADDR_VAR 0 11
71122: PUSH
71123: DOUBLE
71124: LD_INT 1
71126: DEC
71127: ST_TO_ADDR
71128: LD_VAR 0 6
71132: PUSH
71133: FOR_TO
71134: IFFALSE 71181
// begin vc_chassis := 31 ;
71136: LD_ADDR_OWVAR 37
71140: PUSH
71141: LD_INT 31
71143: ST_TO_ADDR
// vc_control := control_rider ;
71144: LD_ADDR_OWVAR 38
71148: PUSH
71149: LD_INT 4
71151: ST_TO_ADDR
// animal := CreateVehicle ;
71152: LD_ADDR_VAR 0 12
71156: PUSH
71157: CALL_OW 45
71161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71162: LD_VAR 0 12
71166: PPUSH
71167: LD_VAR 0 8
71171: PPUSH
71172: LD_INT 0
71174: PPUSH
71175: CALL 73371 0 3
// end ;
71179: GO 71133
71181: POP
71182: POP
// if horses then
71183: LD_VAR 0 5
71187: IFFALSE 71254
// for i = 1 to horses do
71189: LD_ADDR_VAR 0 11
71193: PUSH
71194: DOUBLE
71195: LD_INT 1
71197: DEC
71198: ST_TO_ADDR
71199: LD_VAR 0 5
71203: PUSH
71204: FOR_TO
71205: IFFALSE 71252
// begin hc_class := 21 ;
71207: LD_ADDR_OWVAR 28
71211: PUSH
71212: LD_INT 21
71214: ST_TO_ADDR
// hc_gallery :=  ;
71215: LD_ADDR_OWVAR 33
71219: PUSH
71220: LD_STRING 
71222: ST_TO_ADDR
// animal := CreateHuman ;
71223: LD_ADDR_VAR 0 12
71227: PUSH
71228: CALL_OW 44
71232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71233: LD_VAR 0 12
71237: PPUSH
71238: LD_VAR 0 8
71242: PPUSH
71243: LD_INT 0
71245: PPUSH
71246: CALL 73371 0 3
// end ;
71250: GO 71204
71252: POP
71253: POP
// if birds then
71254: LD_VAR 0 1
71258: IFFALSE 71325
// for i = 1 to birds do
71260: LD_ADDR_VAR 0 11
71264: PUSH
71265: DOUBLE
71266: LD_INT 1
71268: DEC
71269: ST_TO_ADDR
71270: LD_VAR 0 1
71274: PUSH
71275: FOR_TO
71276: IFFALSE 71323
// begin hc_class = 18 ;
71278: LD_ADDR_OWVAR 28
71282: PUSH
71283: LD_INT 18
71285: ST_TO_ADDR
// hc_gallery =  ;
71286: LD_ADDR_OWVAR 33
71290: PUSH
71291: LD_STRING 
71293: ST_TO_ADDR
// animal := CreateHuman ;
71294: LD_ADDR_VAR 0 12
71298: PUSH
71299: CALL_OW 44
71303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71304: LD_VAR 0 12
71308: PPUSH
71309: LD_VAR 0 8
71313: PPUSH
71314: LD_INT 0
71316: PPUSH
71317: CALL 73371 0 3
// end ;
71321: GO 71275
71323: POP
71324: POP
// if tigers then
71325: LD_VAR 0 2
71329: IFFALSE 71413
// for i = 1 to tigers do
71331: LD_ADDR_VAR 0 11
71335: PUSH
71336: DOUBLE
71337: LD_INT 1
71339: DEC
71340: ST_TO_ADDR
71341: LD_VAR 0 2
71345: PUSH
71346: FOR_TO
71347: IFFALSE 71411
// begin hc_class = class_tiger ;
71349: LD_ADDR_OWVAR 28
71353: PUSH
71354: LD_INT 14
71356: ST_TO_ADDR
// hc_gallery =  ;
71357: LD_ADDR_OWVAR 33
71361: PUSH
71362: LD_STRING 
71364: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71365: LD_ADDR_OWVAR 35
71369: PUSH
71370: LD_INT 7
71372: NEG
71373: PPUSH
71374: LD_INT 7
71376: PPUSH
71377: CALL_OW 12
71381: ST_TO_ADDR
// animal := CreateHuman ;
71382: LD_ADDR_VAR 0 12
71386: PUSH
71387: CALL_OW 44
71391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71392: LD_VAR 0 12
71396: PPUSH
71397: LD_VAR 0 8
71401: PPUSH
71402: LD_INT 0
71404: PPUSH
71405: CALL 73371 0 3
// end ;
71409: GO 71346
71411: POP
71412: POP
// if apemans then
71413: LD_VAR 0 3
71417: IFFALSE 71540
// for i = 1 to apemans do
71419: LD_ADDR_VAR 0 11
71423: PUSH
71424: DOUBLE
71425: LD_INT 1
71427: DEC
71428: ST_TO_ADDR
71429: LD_VAR 0 3
71433: PUSH
71434: FOR_TO
71435: IFFALSE 71538
// begin hc_class = class_apeman ;
71437: LD_ADDR_OWVAR 28
71441: PUSH
71442: LD_INT 12
71444: ST_TO_ADDR
// hc_gallery =  ;
71445: LD_ADDR_OWVAR 33
71449: PUSH
71450: LD_STRING 
71452: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
71453: LD_ADDR_OWVAR 35
71457: PUSH
71458: LD_INT 5
71460: NEG
71461: PPUSH
71462: LD_INT 5
71464: PPUSH
71465: CALL_OW 12
71469: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71470: LD_ADDR_OWVAR 31
71474: PUSH
71475: LD_INT 1
71477: PPUSH
71478: LD_INT 3
71480: PPUSH
71481: CALL_OW 12
71485: PUSH
71486: LD_INT 1
71488: PPUSH
71489: LD_INT 3
71491: PPUSH
71492: CALL_OW 12
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: ST_TO_ADDR
// animal := CreateHuman ;
71509: LD_ADDR_VAR 0 12
71513: PUSH
71514: CALL_OW 44
71518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71519: LD_VAR 0 12
71523: PPUSH
71524: LD_VAR 0 8
71528: PPUSH
71529: LD_INT 0
71531: PPUSH
71532: CALL 73371 0 3
// end ;
71536: GO 71434
71538: POP
71539: POP
// if enchidnas then
71540: LD_VAR 0 4
71544: IFFALSE 71611
// for i = 1 to enchidnas do
71546: LD_ADDR_VAR 0 11
71550: PUSH
71551: DOUBLE
71552: LD_INT 1
71554: DEC
71555: ST_TO_ADDR
71556: LD_VAR 0 4
71560: PUSH
71561: FOR_TO
71562: IFFALSE 71609
// begin hc_class = 13 ;
71564: LD_ADDR_OWVAR 28
71568: PUSH
71569: LD_INT 13
71571: ST_TO_ADDR
// hc_gallery =  ;
71572: LD_ADDR_OWVAR 33
71576: PUSH
71577: LD_STRING 
71579: ST_TO_ADDR
// animal := CreateHuman ;
71580: LD_ADDR_VAR 0 12
71584: PUSH
71585: CALL_OW 44
71589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71590: LD_VAR 0 12
71594: PPUSH
71595: LD_VAR 0 8
71599: PPUSH
71600: LD_INT 0
71602: PPUSH
71603: CALL 73371 0 3
// end ;
71607: GO 71561
71609: POP
71610: POP
// if fishes then
71611: LD_VAR 0 7
71615: IFFALSE 71682
// for i = 1 to fishes do
71617: LD_ADDR_VAR 0 11
71621: PUSH
71622: DOUBLE
71623: LD_INT 1
71625: DEC
71626: ST_TO_ADDR
71627: LD_VAR 0 7
71631: PUSH
71632: FOR_TO
71633: IFFALSE 71680
// begin hc_class = 20 ;
71635: LD_ADDR_OWVAR 28
71639: PUSH
71640: LD_INT 20
71642: ST_TO_ADDR
// hc_gallery =  ;
71643: LD_ADDR_OWVAR 33
71647: PUSH
71648: LD_STRING 
71650: ST_TO_ADDR
// animal := CreateHuman ;
71651: LD_ADDR_VAR 0 12
71655: PUSH
71656: CALL_OW 44
71660: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71661: LD_VAR 0 12
71665: PPUSH
71666: LD_VAR 0 9
71670: PPUSH
71671: LD_INT 0
71673: PPUSH
71674: CALL 73371 0 3
// end ;
71678: GO 71632
71680: POP
71681: POP
// end ;
71682: LD_VAR 0 10
71686: RET
// export function WantHeal ( sci , unit ) ; begin
71687: LD_INT 0
71689: PPUSH
// if GetTaskList ( sci ) > 0 then
71690: LD_VAR 0 1
71694: PPUSH
71695: CALL_OW 437
71699: PUSH
71700: LD_INT 0
71702: GREATER
71703: IFFALSE 71773
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71705: LD_VAR 0 1
71709: PPUSH
71710: CALL_OW 437
71714: PUSH
71715: LD_INT 1
71717: ARRAY
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PUSH
71723: LD_STRING l
71725: EQUAL
71726: PUSH
71727: LD_VAR 0 1
71731: PPUSH
71732: CALL_OW 437
71736: PUSH
71737: LD_INT 1
71739: ARRAY
71740: PUSH
71741: LD_INT 4
71743: ARRAY
71744: PUSH
71745: LD_VAR 0 2
71749: EQUAL
71750: AND
71751: IFFALSE 71763
// result := true else
71753: LD_ADDR_VAR 0 3
71757: PUSH
71758: LD_INT 1
71760: ST_TO_ADDR
71761: GO 71771
// result := false ;
71763: LD_ADDR_VAR 0 3
71767: PUSH
71768: LD_INT 0
71770: ST_TO_ADDR
// end else
71771: GO 71781
// result := false ;
71773: LD_ADDR_VAR 0 3
71777: PUSH
71778: LD_INT 0
71780: ST_TO_ADDR
// end ;
71781: LD_VAR 0 3
71785: RET
// export function HealTarget ( sci ) ; begin
71786: LD_INT 0
71788: PPUSH
// if not sci then
71789: LD_VAR 0 1
71793: NOT
71794: IFFALSE 71798
// exit ;
71796: GO 71863
// result := 0 ;
71798: LD_ADDR_VAR 0 2
71802: PUSH
71803: LD_INT 0
71805: ST_TO_ADDR
// if GetTaskList ( sci ) then
71806: LD_VAR 0 1
71810: PPUSH
71811: CALL_OW 437
71815: IFFALSE 71863
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71817: LD_VAR 0 1
71821: PPUSH
71822: CALL_OW 437
71826: PUSH
71827: LD_INT 1
71829: ARRAY
71830: PUSH
71831: LD_INT 1
71833: ARRAY
71834: PUSH
71835: LD_STRING l
71837: EQUAL
71838: IFFALSE 71863
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71840: LD_ADDR_VAR 0 2
71844: PUSH
71845: LD_VAR 0 1
71849: PPUSH
71850: CALL_OW 437
71854: PUSH
71855: LD_INT 1
71857: ARRAY
71858: PUSH
71859: LD_INT 4
71861: ARRAY
71862: ST_TO_ADDR
// end ;
71863: LD_VAR 0 2
71867: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71868: LD_INT 0
71870: PPUSH
71871: PPUSH
71872: PPUSH
71873: PPUSH
// if not base_units then
71874: LD_VAR 0 1
71878: NOT
71879: IFFALSE 71883
// exit ;
71881: GO 71970
// result := false ;
71883: LD_ADDR_VAR 0 2
71887: PUSH
71888: LD_INT 0
71890: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71891: LD_ADDR_VAR 0 5
71895: PUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: LD_INT 21
71903: PUSH
71904: LD_INT 3
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PPUSH
71911: CALL_OW 72
71915: ST_TO_ADDR
// if not tmp then
71916: LD_VAR 0 5
71920: NOT
71921: IFFALSE 71925
// exit ;
71923: GO 71970
// for i in tmp do
71925: LD_ADDR_VAR 0 3
71929: PUSH
71930: LD_VAR 0 5
71934: PUSH
71935: FOR_IN
71936: IFFALSE 71968
// begin result := EnemyInRange ( i , 22 ) ;
71938: LD_ADDR_VAR 0 2
71942: PUSH
71943: LD_VAR 0 3
71947: PPUSH
71948: LD_INT 22
71950: PPUSH
71951: CALL 70206 0 2
71955: ST_TO_ADDR
// if result then
71956: LD_VAR 0 2
71960: IFFALSE 71966
// exit ;
71962: POP
71963: POP
71964: GO 71970
// end ;
71966: GO 71935
71968: POP
71969: POP
// end ;
71970: LD_VAR 0 2
71974: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
// if not units then
71979: LD_VAR 0 1
71983: NOT
71984: IFFALSE 71988
// exit ;
71986: GO 72058
// result := [ ] ;
71988: LD_ADDR_VAR 0 3
71992: PUSH
71993: EMPTY
71994: ST_TO_ADDR
// for i in units do
71995: LD_ADDR_VAR 0 4
71999: PUSH
72000: LD_VAR 0 1
72004: PUSH
72005: FOR_IN
72006: IFFALSE 72056
// if GetTag ( i ) = tag then
72008: LD_VAR 0 4
72012: PPUSH
72013: CALL_OW 110
72017: PUSH
72018: LD_VAR 0 2
72022: EQUAL
72023: IFFALSE 72054
// result := Insert ( result , result + 1 , i ) ;
72025: LD_ADDR_VAR 0 3
72029: PUSH
72030: LD_VAR 0 3
72034: PPUSH
72035: LD_VAR 0 3
72039: PUSH
72040: LD_INT 1
72042: PLUS
72043: PPUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: CALL_OW 2
72053: ST_TO_ADDR
72054: GO 72005
72056: POP
72057: POP
// end ;
72058: LD_VAR 0 3
72062: RET
// export function IsDriver ( un ) ; begin
72063: LD_INT 0
72065: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72066: LD_ADDR_VAR 0 2
72070: PUSH
72071: LD_VAR 0 1
72075: PUSH
72076: LD_INT 55
72078: PUSH
72079: EMPTY
72080: LIST
72081: PPUSH
72082: CALL_OW 69
72086: IN
72087: ST_TO_ADDR
// end ;
72088: LD_VAR 0 2
72092: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72093: LD_INT 0
72095: PPUSH
72096: PPUSH
// list := [ ] ;
72097: LD_ADDR_VAR 0 5
72101: PUSH
72102: EMPTY
72103: ST_TO_ADDR
// case d of 0 :
72104: LD_VAR 0 3
72108: PUSH
72109: LD_INT 0
72111: DOUBLE
72112: EQUAL
72113: IFTRUE 72117
72115: GO 72250
72117: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72118: LD_ADDR_VAR 0 5
72122: PUSH
72123: LD_VAR 0 1
72127: PUSH
72128: LD_INT 4
72130: MINUS
72131: PUSH
72132: LD_VAR 0 2
72136: PUSH
72137: LD_INT 4
72139: MINUS
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: PUSH
72149: LD_VAR 0 1
72153: PUSH
72154: LD_INT 3
72156: MINUS
72157: PUSH
72158: LD_VAR 0 2
72162: PUSH
72163: LD_INT 1
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: LIST
72170: PUSH
72171: LD_VAR 0 1
72175: PUSH
72176: LD_INT 4
72178: PLUS
72179: PUSH
72180: LD_VAR 0 2
72184: PUSH
72185: LD_INT 4
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: PUSH
72193: LD_VAR 0 1
72197: PUSH
72198: LD_INT 3
72200: PLUS
72201: PUSH
72202: LD_VAR 0 2
72206: PUSH
72207: LD_INT 3
72209: PLUS
72210: PUSH
72211: LD_INT 5
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: LIST
72218: PUSH
72219: LD_VAR 0 1
72223: PUSH
72224: LD_VAR 0 2
72228: PUSH
72229: LD_INT 4
72231: PLUS
72232: PUSH
72233: LD_INT 0
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: LIST
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: ST_TO_ADDR
// end ; 1 :
72248: GO 72948
72250: LD_INT 1
72252: DOUBLE
72253: EQUAL
72254: IFTRUE 72258
72256: GO 72391
72258: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72259: LD_ADDR_VAR 0 5
72263: PUSH
72264: LD_VAR 0 1
72268: PUSH
72269: LD_VAR 0 2
72273: PUSH
72274: LD_INT 4
72276: MINUS
72277: PUSH
72278: LD_INT 3
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: LIST
72285: PUSH
72286: LD_VAR 0 1
72290: PUSH
72291: LD_INT 3
72293: MINUS
72294: PUSH
72295: LD_VAR 0 2
72299: PUSH
72300: LD_INT 3
72302: MINUS
72303: PUSH
72304: LD_INT 2
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: PUSH
72312: LD_VAR 0 1
72316: PUSH
72317: LD_INT 4
72319: MINUS
72320: PUSH
72321: LD_VAR 0 2
72325: PUSH
72326: LD_INT 1
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: PUSH
72334: LD_VAR 0 1
72338: PUSH
72339: LD_VAR 0 2
72343: PUSH
72344: LD_INT 3
72346: PLUS
72347: PUSH
72348: LD_INT 0
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: LIST
72355: PUSH
72356: LD_VAR 0 1
72360: PUSH
72361: LD_INT 4
72363: PLUS
72364: PUSH
72365: LD_VAR 0 2
72369: PUSH
72370: LD_INT 4
72372: PLUS
72373: PUSH
72374: LD_INT 5
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: LIST
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: ST_TO_ADDR
// end ; 2 :
72389: GO 72948
72391: LD_INT 2
72393: DOUBLE
72394: EQUAL
72395: IFTRUE 72399
72397: GO 72528
72399: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72400: LD_ADDR_VAR 0 5
72404: PUSH
72405: LD_VAR 0 1
72409: PUSH
72410: LD_VAR 0 2
72414: PUSH
72415: LD_INT 3
72417: MINUS
72418: PUSH
72419: LD_INT 3
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: PUSH
72427: LD_VAR 0 1
72431: PUSH
72432: LD_INT 4
72434: PLUS
72435: PUSH
72436: LD_VAR 0 2
72440: PUSH
72441: LD_INT 4
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: PUSH
72449: LD_VAR 0 1
72453: PUSH
72454: LD_VAR 0 2
72458: PUSH
72459: LD_INT 4
72461: PLUS
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: LIST
72470: PUSH
72471: LD_VAR 0 1
72475: PUSH
72476: LD_INT 3
72478: MINUS
72479: PUSH
72480: LD_VAR 0 2
72484: PUSH
72485: LD_INT 1
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: LIST
72492: PUSH
72493: LD_VAR 0 1
72497: PUSH
72498: LD_INT 4
72500: MINUS
72501: PUSH
72502: LD_VAR 0 2
72506: PUSH
72507: LD_INT 4
72509: MINUS
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: ST_TO_ADDR
// end ; 3 :
72526: GO 72948
72528: LD_INT 3
72530: DOUBLE
72531: EQUAL
72532: IFTRUE 72536
72534: GO 72669
72536: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72537: LD_ADDR_VAR 0 5
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: LD_INT 3
72549: PLUS
72550: PUSH
72551: LD_VAR 0 2
72555: PUSH
72556: LD_INT 4
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: LIST
72563: PUSH
72564: LD_VAR 0 1
72568: PUSH
72569: LD_INT 4
72571: PLUS
72572: PUSH
72573: LD_VAR 0 2
72577: PUSH
72578: LD_INT 4
72580: PLUS
72581: PUSH
72582: LD_INT 5
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: PUSH
72590: LD_VAR 0 1
72594: PUSH
72595: LD_INT 4
72597: MINUS
72598: PUSH
72599: LD_VAR 0 2
72603: PUSH
72604: LD_INT 1
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: LIST
72611: PUSH
72612: LD_VAR 0 1
72616: PUSH
72617: LD_VAR 0 2
72621: PUSH
72622: LD_INT 4
72624: MINUS
72625: PUSH
72626: LD_INT 3
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: PUSH
72634: LD_VAR 0 1
72638: PUSH
72639: LD_INT 3
72641: MINUS
72642: PUSH
72643: LD_VAR 0 2
72647: PUSH
72648: LD_INT 3
72650: MINUS
72651: PUSH
72652: LD_INT 2
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: LIST
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: ST_TO_ADDR
// end ; 4 :
72667: GO 72948
72669: LD_INT 4
72671: DOUBLE
72672: EQUAL
72673: IFTRUE 72677
72675: GO 72810
72677: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72678: LD_ADDR_VAR 0 5
72682: PUSH
72683: LD_VAR 0 1
72687: PUSH
72688: LD_VAR 0 2
72692: PUSH
72693: LD_INT 4
72695: PLUS
72696: PUSH
72697: LD_INT 0
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: LIST
72704: PUSH
72705: LD_VAR 0 1
72709: PUSH
72710: LD_INT 3
72712: PLUS
72713: PUSH
72714: LD_VAR 0 2
72718: PUSH
72719: LD_INT 3
72721: PLUS
72722: PUSH
72723: LD_INT 5
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: LIST
72730: PUSH
72731: LD_VAR 0 1
72735: PUSH
72736: LD_INT 4
72738: PLUS
72739: PUSH
72740: LD_VAR 0 2
72744: PUSH
72745: LD_INT 4
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: PUSH
72753: LD_VAR 0 1
72757: PUSH
72758: LD_VAR 0 2
72762: PUSH
72763: LD_INT 3
72765: MINUS
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: LIST
72774: PUSH
72775: LD_VAR 0 1
72779: PUSH
72780: LD_INT 4
72782: MINUS
72783: PUSH
72784: LD_VAR 0 2
72788: PUSH
72789: LD_INT 4
72791: MINUS
72792: PUSH
72793: LD_INT 2
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: LIST
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: ST_TO_ADDR
// end ; 5 :
72808: GO 72948
72810: LD_INT 5
72812: DOUBLE
72813: EQUAL
72814: IFTRUE 72818
72816: GO 72947
72818: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72819: LD_ADDR_VAR 0 5
72823: PUSH
72824: LD_VAR 0 1
72828: PUSH
72829: LD_INT 4
72831: MINUS
72832: PUSH
72833: LD_VAR 0 2
72837: PUSH
72838: LD_INT 1
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: LD_VAR 0 1
72850: PUSH
72851: LD_VAR 0 2
72855: PUSH
72856: LD_INT 4
72858: MINUS
72859: PUSH
72860: LD_INT 3
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: LIST
72867: PUSH
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 4
72875: PLUS
72876: PUSH
72877: LD_VAR 0 2
72881: PUSH
72882: LD_INT 4
72884: PLUS
72885: PUSH
72886: LD_INT 5
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: PUSH
72894: LD_VAR 0 1
72898: PUSH
72899: LD_INT 3
72901: PLUS
72902: PUSH
72903: LD_VAR 0 2
72907: PUSH
72908: LD_INT 4
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: LIST
72915: PUSH
72916: LD_VAR 0 1
72920: PUSH
72921: LD_VAR 0 2
72925: PUSH
72926: LD_INT 3
72928: PLUS
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: LIST
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: ST_TO_ADDR
// end ; end ;
72945: GO 72948
72947: POP
// result := list ;
72948: LD_ADDR_VAR 0 4
72952: PUSH
72953: LD_VAR 0 5
72957: ST_TO_ADDR
// end ;
72958: LD_VAR 0 4
72962: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72963: LD_INT 0
72965: PPUSH
72966: PPUSH
72967: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72968: LD_VAR 0 1
72972: NOT
72973: PUSH
72974: LD_VAR 0 2
72978: PUSH
72979: LD_INT 1
72981: PUSH
72982: LD_INT 2
72984: PUSH
72985: LD_INT 3
72987: PUSH
72988: LD_INT 4
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: IN
72997: NOT
72998: OR
72999: IFFALSE 73003
// exit ;
73001: GO 73095
// tmp := [ ] ;
73003: LD_ADDR_VAR 0 5
73007: PUSH
73008: EMPTY
73009: ST_TO_ADDR
// for i in units do
73010: LD_ADDR_VAR 0 4
73014: PUSH
73015: LD_VAR 0 1
73019: PUSH
73020: FOR_IN
73021: IFFALSE 73064
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73023: LD_ADDR_VAR 0 5
73027: PUSH
73028: LD_VAR 0 5
73032: PPUSH
73033: LD_VAR 0 5
73037: PUSH
73038: LD_INT 1
73040: PLUS
73041: PPUSH
73042: LD_VAR 0 4
73046: PPUSH
73047: LD_VAR 0 2
73051: PPUSH
73052: CALL_OW 259
73056: PPUSH
73057: CALL_OW 2
73061: ST_TO_ADDR
73062: GO 73020
73064: POP
73065: POP
// if not tmp then
73066: LD_VAR 0 5
73070: NOT
73071: IFFALSE 73075
// exit ;
73073: GO 73095
// result := SortListByListDesc ( units , tmp ) ;
73075: LD_ADDR_VAR 0 3
73079: PUSH
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_VAR 0 5
73089: PPUSH
73090: CALL_OW 77
73094: ST_TO_ADDR
// end ;
73095: LD_VAR 0 3
73099: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73100: LD_INT 0
73102: PPUSH
73103: PPUSH
73104: PPUSH
// result := false ;
73105: LD_ADDR_VAR 0 3
73109: PUSH
73110: LD_INT 0
73112: ST_TO_ADDR
// x := GetX ( building ) ;
73113: LD_ADDR_VAR 0 4
73117: PUSH
73118: LD_VAR 0 2
73122: PPUSH
73123: CALL_OW 250
73127: ST_TO_ADDR
// y := GetY ( building ) ;
73128: LD_ADDR_VAR 0 5
73132: PUSH
73133: LD_VAR 0 2
73137: PPUSH
73138: CALL_OW 251
73142: ST_TO_ADDR
// if not building or not x or not y then
73143: LD_VAR 0 2
73147: NOT
73148: PUSH
73149: LD_VAR 0 4
73153: NOT
73154: OR
73155: PUSH
73156: LD_VAR 0 5
73160: NOT
73161: OR
73162: IFFALSE 73166
// exit ;
73164: GO 73258
// if GetTaskList ( unit ) then
73166: LD_VAR 0 1
73170: PPUSH
73171: CALL_OW 437
73175: IFFALSE 73258
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73177: LD_STRING e
73179: PUSH
73180: LD_VAR 0 1
73184: PPUSH
73185: CALL_OW 437
73189: PUSH
73190: LD_INT 1
73192: ARRAY
73193: PUSH
73194: LD_INT 1
73196: ARRAY
73197: EQUAL
73198: PUSH
73199: LD_VAR 0 4
73203: PUSH
73204: LD_VAR 0 1
73208: PPUSH
73209: CALL_OW 437
73213: PUSH
73214: LD_INT 1
73216: ARRAY
73217: PUSH
73218: LD_INT 2
73220: ARRAY
73221: EQUAL
73222: AND
73223: PUSH
73224: LD_VAR 0 5
73228: PUSH
73229: LD_VAR 0 1
73233: PPUSH
73234: CALL_OW 437
73238: PUSH
73239: LD_INT 1
73241: ARRAY
73242: PUSH
73243: LD_INT 3
73245: ARRAY
73246: EQUAL
73247: AND
73248: IFFALSE 73258
// result := true end ;
73250: LD_ADDR_VAR 0 3
73254: PUSH
73255: LD_INT 1
73257: ST_TO_ADDR
// end ;
73258: LD_VAR 0 3
73262: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73263: LD_INT 0
73265: PPUSH
// result := false ;
73266: LD_ADDR_VAR 0 4
73270: PUSH
73271: LD_INT 0
73273: ST_TO_ADDR
// if GetTaskList ( unit ) then
73274: LD_VAR 0 1
73278: PPUSH
73279: CALL_OW 437
73283: IFFALSE 73366
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73285: LD_STRING M
73287: PUSH
73288: LD_VAR 0 1
73292: PPUSH
73293: CALL_OW 437
73297: PUSH
73298: LD_INT 1
73300: ARRAY
73301: PUSH
73302: LD_INT 1
73304: ARRAY
73305: EQUAL
73306: PUSH
73307: LD_VAR 0 2
73311: PUSH
73312: LD_VAR 0 1
73316: PPUSH
73317: CALL_OW 437
73321: PUSH
73322: LD_INT 1
73324: ARRAY
73325: PUSH
73326: LD_INT 2
73328: ARRAY
73329: EQUAL
73330: AND
73331: PUSH
73332: LD_VAR 0 3
73336: PUSH
73337: LD_VAR 0 1
73341: PPUSH
73342: CALL_OW 437
73346: PUSH
73347: LD_INT 1
73349: ARRAY
73350: PUSH
73351: LD_INT 3
73353: ARRAY
73354: EQUAL
73355: AND
73356: IFFALSE 73366
// result := true ;
73358: LD_ADDR_VAR 0 4
73362: PUSH
73363: LD_INT 1
73365: ST_TO_ADDR
// end ; end ;
73366: LD_VAR 0 4
73370: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73371: LD_INT 0
73373: PPUSH
73374: PPUSH
73375: PPUSH
73376: PPUSH
// if not unit or not area then
73377: LD_VAR 0 1
73381: NOT
73382: PUSH
73383: LD_VAR 0 2
73387: NOT
73388: OR
73389: IFFALSE 73393
// exit ;
73391: GO 73557
// tmp := AreaToList ( area , i ) ;
73393: LD_ADDR_VAR 0 6
73397: PUSH
73398: LD_VAR 0 2
73402: PPUSH
73403: LD_VAR 0 5
73407: PPUSH
73408: CALL_OW 517
73412: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73413: LD_ADDR_VAR 0 5
73417: PUSH
73418: DOUBLE
73419: LD_INT 1
73421: DEC
73422: ST_TO_ADDR
73423: LD_VAR 0 6
73427: PUSH
73428: LD_INT 1
73430: ARRAY
73431: PUSH
73432: FOR_TO
73433: IFFALSE 73555
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73435: LD_ADDR_VAR 0 7
73439: PUSH
73440: LD_VAR 0 6
73444: PUSH
73445: LD_INT 1
73447: ARRAY
73448: PUSH
73449: LD_VAR 0 5
73453: ARRAY
73454: PUSH
73455: LD_VAR 0 6
73459: PUSH
73460: LD_INT 2
73462: ARRAY
73463: PUSH
73464: LD_VAR 0 5
73468: ARRAY
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73474: LD_VAR 0 7
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PPUSH
73483: LD_VAR 0 7
73487: PUSH
73488: LD_INT 2
73490: ARRAY
73491: PPUSH
73492: CALL_OW 428
73496: PUSH
73497: LD_INT 0
73499: EQUAL
73500: IFFALSE 73553
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73502: LD_VAR 0 1
73506: PPUSH
73507: LD_VAR 0 7
73511: PUSH
73512: LD_INT 1
73514: ARRAY
73515: PPUSH
73516: LD_VAR 0 7
73520: PUSH
73521: LD_INT 2
73523: ARRAY
73524: PPUSH
73525: LD_VAR 0 3
73529: PPUSH
73530: CALL_OW 48
// result := IsPlaced ( unit ) ;
73534: LD_ADDR_VAR 0 4
73538: PUSH
73539: LD_VAR 0 1
73543: PPUSH
73544: CALL_OW 305
73548: ST_TO_ADDR
// exit ;
73549: POP
73550: POP
73551: GO 73557
// end ; end ;
73553: GO 73432
73555: POP
73556: POP
// end ;
73557: LD_VAR 0 4
73561: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73562: LD_INT 0
73564: PPUSH
73565: PPUSH
73566: PPUSH
// if not side or side > 8 then
73567: LD_VAR 0 1
73571: NOT
73572: PUSH
73573: LD_VAR 0 1
73577: PUSH
73578: LD_INT 8
73580: GREATER
73581: OR
73582: IFFALSE 73586
// exit ;
73584: GO 73773
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73586: LD_ADDR_VAR 0 4
73590: PUSH
73591: LD_INT 22
73593: PUSH
73594: LD_VAR 0 1
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 21
73605: PUSH
73606: LD_INT 3
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PPUSH
73617: CALL_OW 69
73621: ST_TO_ADDR
// if not tmp then
73622: LD_VAR 0 4
73626: NOT
73627: IFFALSE 73631
// exit ;
73629: GO 73773
// enable_addtolog := true ;
73631: LD_ADDR_OWVAR 81
73635: PUSH
73636: LD_INT 1
73638: ST_TO_ADDR
// AddToLog ( [ ) ;
73639: LD_STRING [
73641: PPUSH
73642: CALL_OW 561
// for i in tmp do
73646: LD_ADDR_VAR 0 3
73650: PUSH
73651: LD_VAR 0 4
73655: PUSH
73656: FOR_IN
73657: IFFALSE 73764
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73659: LD_STRING [
73661: PUSH
73662: LD_VAR 0 3
73666: PPUSH
73667: CALL_OW 266
73671: STR
73672: PUSH
73673: LD_STRING , 
73675: STR
73676: PUSH
73677: LD_VAR 0 3
73681: PPUSH
73682: CALL_OW 250
73686: STR
73687: PUSH
73688: LD_STRING , 
73690: STR
73691: PUSH
73692: LD_VAR 0 3
73696: PPUSH
73697: CALL_OW 251
73701: STR
73702: PUSH
73703: LD_STRING , 
73705: STR
73706: PUSH
73707: LD_VAR 0 3
73711: PPUSH
73712: CALL_OW 254
73716: STR
73717: PUSH
73718: LD_STRING , 
73720: STR
73721: PUSH
73722: LD_VAR 0 3
73726: PPUSH
73727: LD_INT 1
73729: PPUSH
73730: CALL_OW 268
73734: STR
73735: PUSH
73736: LD_STRING , 
73738: STR
73739: PUSH
73740: LD_VAR 0 3
73744: PPUSH
73745: LD_INT 2
73747: PPUSH
73748: CALL_OW 268
73752: STR
73753: PUSH
73754: LD_STRING ],
73756: STR
73757: PPUSH
73758: CALL_OW 561
// end ;
73762: GO 73656
73764: POP
73765: POP
// AddToLog ( ]; ) ;
73766: LD_STRING ];
73768: PPUSH
73769: CALL_OW 561
// end ;
73773: LD_VAR 0 2
73777: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73778: LD_INT 0
73780: PPUSH
73781: PPUSH
73782: PPUSH
73783: PPUSH
73784: PPUSH
// if not area or not rate or not max then
73785: LD_VAR 0 1
73789: NOT
73790: PUSH
73791: LD_VAR 0 2
73795: NOT
73796: OR
73797: PUSH
73798: LD_VAR 0 4
73802: NOT
73803: OR
73804: IFFALSE 73808
// exit ;
73806: GO 74000
// while 1 do
73808: LD_INT 1
73810: IFFALSE 74000
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73812: LD_ADDR_VAR 0 9
73816: PUSH
73817: LD_VAR 0 1
73821: PPUSH
73822: LD_INT 1
73824: PPUSH
73825: CALL_OW 287
73829: PUSH
73830: LD_INT 10
73832: MUL
73833: ST_TO_ADDR
// r := rate / 10 ;
73834: LD_ADDR_VAR 0 7
73838: PUSH
73839: LD_VAR 0 2
73843: PUSH
73844: LD_INT 10
73846: DIVREAL
73847: ST_TO_ADDR
// time := 1 1$00 ;
73848: LD_ADDR_VAR 0 8
73852: PUSH
73853: LD_INT 2100
73855: ST_TO_ADDR
// if amount < min then
73856: LD_VAR 0 9
73860: PUSH
73861: LD_VAR 0 3
73865: LESS
73866: IFFALSE 73884
// r := r * 2 else
73868: LD_ADDR_VAR 0 7
73872: PUSH
73873: LD_VAR 0 7
73877: PUSH
73878: LD_INT 2
73880: MUL
73881: ST_TO_ADDR
73882: GO 73910
// if amount > max then
73884: LD_VAR 0 9
73888: PUSH
73889: LD_VAR 0 4
73893: GREATER
73894: IFFALSE 73910
// r := r / 2 ;
73896: LD_ADDR_VAR 0 7
73900: PUSH
73901: LD_VAR 0 7
73905: PUSH
73906: LD_INT 2
73908: DIVREAL
73909: ST_TO_ADDR
// time := time / r ;
73910: LD_ADDR_VAR 0 8
73914: PUSH
73915: LD_VAR 0 8
73919: PUSH
73920: LD_VAR 0 7
73924: DIVREAL
73925: ST_TO_ADDR
// if time < 0 then
73926: LD_VAR 0 8
73930: PUSH
73931: LD_INT 0
73933: LESS
73934: IFFALSE 73951
// time := time * - 1 ;
73936: LD_ADDR_VAR 0 8
73940: PUSH
73941: LD_VAR 0 8
73945: PUSH
73946: LD_INT 1
73948: NEG
73949: MUL
73950: ST_TO_ADDR
// wait ( time ) ;
73951: LD_VAR 0 8
73955: PPUSH
73956: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73960: LD_INT 35
73962: PPUSH
73963: LD_INT 875
73965: PPUSH
73966: CALL_OW 12
73970: PPUSH
73971: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73975: LD_INT 1
73977: PPUSH
73978: LD_INT 5
73980: PPUSH
73981: CALL_OW 12
73985: PPUSH
73986: LD_VAR 0 1
73990: PPUSH
73991: LD_INT 1
73993: PPUSH
73994: CALL_OW 55
// end ;
73998: GO 73808
// end ;
74000: LD_VAR 0 5
74004: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74005: LD_INT 0
74007: PPUSH
74008: PPUSH
74009: PPUSH
74010: PPUSH
74011: PPUSH
74012: PPUSH
74013: PPUSH
74014: PPUSH
// if not turrets or not factories then
74015: LD_VAR 0 1
74019: NOT
74020: PUSH
74021: LD_VAR 0 2
74025: NOT
74026: OR
74027: IFFALSE 74031
// exit ;
74029: GO 74338
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74031: LD_ADDR_VAR 0 10
74035: PUSH
74036: LD_INT 5
74038: PUSH
74039: LD_INT 6
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 2
74048: PUSH
74049: LD_INT 4
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 3
74058: PUSH
74059: LD_INT 5
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 24
74073: PUSH
74074: LD_INT 25
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 23
74083: PUSH
74084: LD_INT 27
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 42
74097: PUSH
74098: LD_INT 43
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 44
74107: PUSH
74108: LD_INT 46
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 45
74117: PUSH
74118: LD_INT 47
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: LIST
74134: ST_TO_ADDR
// result := [ ] ;
74135: LD_ADDR_VAR 0 3
74139: PUSH
74140: EMPTY
74141: ST_TO_ADDR
// for i in turrets do
74142: LD_ADDR_VAR 0 4
74146: PUSH
74147: LD_VAR 0 1
74151: PUSH
74152: FOR_IN
74153: IFFALSE 74336
// begin nat := GetNation ( i ) ;
74155: LD_ADDR_VAR 0 7
74159: PUSH
74160: LD_VAR 0 4
74164: PPUSH
74165: CALL_OW 248
74169: ST_TO_ADDR
// weapon := 0 ;
74170: LD_ADDR_VAR 0 8
74174: PUSH
74175: LD_INT 0
74177: ST_TO_ADDR
// if not nat then
74178: LD_VAR 0 7
74182: NOT
74183: IFFALSE 74187
// continue ;
74185: GO 74152
// for j in list [ nat ] do
74187: LD_ADDR_VAR 0 5
74191: PUSH
74192: LD_VAR 0 10
74196: PUSH
74197: LD_VAR 0 7
74201: ARRAY
74202: PUSH
74203: FOR_IN
74204: IFFALSE 74245
// if GetBWeapon ( i ) = j [ 1 ] then
74206: LD_VAR 0 4
74210: PPUSH
74211: CALL_OW 269
74215: PUSH
74216: LD_VAR 0 5
74220: PUSH
74221: LD_INT 1
74223: ARRAY
74224: EQUAL
74225: IFFALSE 74243
// begin weapon := j [ 2 ] ;
74227: LD_ADDR_VAR 0 8
74231: PUSH
74232: LD_VAR 0 5
74236: PUSH
74237: LD_INT 2
74239: ARRAY
74240: ST_TO_ADDR
// break ;
74241: GO 74245
// end ;
74243: GO 74203
74245: POP
74246: POP
// if not weapon then
74247: LD_VAR 0 8
74251: NOT
74252: IFFALSE 74256
// continue ;
74254: GO 74152
// for k in factories do
74256: LD_ADDR_VAR 0 6
74260: PUSH
74261: LD_VAR 0 2
74265: PUSH
74266: FOR_IN
74267: IFFALSE 74332
// begin weapons := AvailableWeaponList ( k ) ;
74269: LD_ADDR_VAR 0 9
74273: PUSH
74274: LD_VAR 0 6
74278: PPUSH
74279: CALL_OW 478
74283: ST_TO_ADDR
// if not weapons then
74284: LD_VAR 0 9
74288: NOT
74289: IFFALSE 74293
// continue ;
74291: GO 74266
// if weapon in weapons then
74293: LD_VAR 0 8
74297: PUSH
74298: LD_VAR 0 9
74302: IN
74303: IFFALSE 74330
// begin result := [ i , weapon ] ;
74305: LD_ADDR_VAR 0 3
74309: PUSH
74310: LD_VAR 0 4
74314: PUSH
74315: LD_VAR 0 8
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: ST_TO_ADDR
// exit ;
74324: POP
74325: POP
74326: POP
74327: POP
74328: GO 74338
// end ; end ;
74330: GO 74266
74332: POP
74333: POP
// end ;
74334: GO 74152
74336: POP
74337: POP
// end ;
74338: LD_VAR 0 3
74342: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74343: LD_INT 0
74345: PPUSH
// if not side or side > 8 then
74346: LD_VAR 0 3
74350: NOT
74351: PUSH
74352: LD_VAR 0 3
74356: PUSH
74357: LD_INT 8
74359: GREATER
74360: OR
74361: IFFALSE 74365
// exit ;
74363: GO 74424
// if not range then
74365: LD_VAR 0 4
74369: NOT
74370: IFFALSE 74381
// range := - 12 ;
74372: LD_ADDR_VAR 0 4
74376: PUSH
74377: LD_INT 12
74379: NEG
74380: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74381: LD_VAR 0 1
74385: PPUSH
74386: LD_VAR 0 2
74390: PPUSH
74391: LD_VAR 0 3
74395: PPUSH
74396: LD_VAR 0 4
74400: PPUSH
74401: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74405: LD_VAR 0 1
74409: PPUSH
74410: LD_VAR 0 2
74414: PPUSH
74415: LD_VAR 0 3
74419: PPUSH
74420: CALL_OW 331
// end ;
74424: LD_VAR 0 5
74428: RET
// export function Video ( mode ) ; begin
74429: LD_INT 0
74431: PPUSH
// ingame_video = mode ;
74432: LD_ADDR_OWVAR 52
74436: PUSH
74437: LD_VAR 0 1
74441: ST_TO_ADDR
// interface_hidden = mode ;
74442: LD_ADDR_OWVAR 54
74446: PUSH
74447: LD_VAR 0 1
74451: ST_TO_ADDR
// end ;
74452: LD_VAR 0 2
74456: RET
// export function Join ( array , element ) ; begin
74457: LD_INT 0
74459: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74460: LD_ADDR_VAR 0 3
74464: PUSH
74465: LD_VAR 0 1
74469: PPUSH
74470: LD_VAR 0 1
74474: PUSH
74475: LD_INT 1
74477: PLUS
74478: PPUSH
74479: LD_VAR 0 2
74483: PPUSH
74484: CALL_OW 1
74488: ST_TO_ADDR
// end ;
74489: LD_VAR 0 3
74493: RET
// export function JoinUnion ( array , element ) ; begin
74494: LD_INT 0
74496: PPUSH
// result := array union element ;
74497: LD_ADDR_VAR 0 3
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: LD_VAR 0 2
74511: UNION
74512: ST_TO_ADDR
// end ;
74513: LD_VAR 0 3
74517: RET
// export function GetBehemoths ( side ) ; begin
74518: LD_INT 0
74520: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74521: LD_ADDR_VAR 0 2
74525: PUSH
74526: LD_INT 22
74528: PUSH
74529: LD_VAR 0 1
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 31
74540: PUSH
74541: LD_INT 25
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PPUSH
74552: CALL_OW 69
74556: ST_TO_ADDR
// end ;
74557: LD_VAR 0 2
74561: RET
// export function Shuffle ( array ) ; var i , index ; begin
74562: LD_INT 0
74564: PPUSH
74565: PPUSH
74566: PPUSH
// result := [ ] ;
74567: LD_ADDR_VAR 0 2
74571: PUSH
74572: EMPTY
74573: ST_TO_ADDR
// if not array then
74574: LD_VAR 0 1
74578: NOT
74579: IFFALSE 74583
// exit ;
74581: GO 74682
// Randomize ;
74583: CALL_OW 10
// for i = array downto 1 do
74587: LD_ADDR_VAR 0 3
74591: PUSH
74592: DOUBLE
74593: LD_VAR 0 1
74597: INC
74598: ST_TO_ADDR
74599: LD_INT 1
74601: PUSH
74602: FOR_DOWNTO
74603: IFFALSE 74680
// begin index := rand ( 1 , array ) ;
74605: LD_ADDR_VAR 0 4
74609: PUSH
74610: LD_INT 1
74612: PPUSH
74613: LD_VAR 0 1
74617: PPUSH
74618: CALL_OW 12
74622: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74623: LD_ADDR_VAR 0 2
74627: PUSH
74628: LD_VAR 0 2
74632: PPUSH
74633: LD_VAR 0 2
74637: PUSH
74638: LD_INT 1
74640: PLUS
74641: PPUSH
74642: LD_VAR 0 1
74646: PUSH
74647: LD_VAR 0 4
74651: ARRAY
74652: PPUSH
74653: CALL_OW 2
74657: ST_TO_ADDR
// array := Delete ( array , index ) ;
74658: LD_ADDR_VAR 0 1
74662: PUSH
74663: LD_VAR 0 1
74667: PPUSH
74668: LD_VAR 0 4
74672: PPUSH
74673: CALL_OW 3
74677: ST_TO_ADDR
// end ;
74678: GO 74602
74680: POP
74681: POP
// end ;
74682: LD_VAR 0 2
74686: RET
// export function GetBaseMaterials ( base ) ; begin
74687: LD_INT 0
74689: PPUSH
// result := [ 0 , 0 , 0 ] ;
74690: LD_ADDR_VAR 0 2
74694: PUSH
74695: LD_INT 0
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: LD_INT 0
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: ST_TO_ADDR
// if not base then
74709: LD_VAR 0 1
74713: NOT
74714: IFFALSE 74718
// exit ;
74716: GO 74767
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74718: LD_ADDR_VAR 0 2
74722: PUSH
74723: LD_VAR 0 1
74727: PPUSH
74728: LD_INT 1
74730: PPUSH
74731: CALL_OW 275
74735: PUSH
74736: LD_VAR 0 1
74740: PPUSH
74741: LD_INT 2
74743: PPUSH
74744: CALL_OW 275
74748: PUSH
74749: LD_VAR 0 1
74753: PPUSH
74754: LD_INT 3
74756: PPUSH
74757: CALL_OW 275
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: ST_TO_ADDR
// end ;
74767: LD_VAR 0 2
74771: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74772: LD_INT 0
74774: PPUSH
74775: PPUSH
// result := array ;
74776: LD_ADDR_VAR 0 3
74780: PUSH
74781: LD_VAR 0 1
74785: ST_TO_ADDR
// if size > 0 then
74786: LD_VAR 0 2
74790: PUSH
74791: LD_INT 0
74793: GREATER
74794: IFFALSE 74840
// for i := array downto size do
74796: LD_ADDR_VAR 0 4
74800: PUSH
74801: DOUBLE
74802: LD_VAR 0 1
74806: INC
74807: ST_TO_ADDR
74808: LD_VAR 0 2
74812: PUSH
74813: FOR_DOWNTO
74814: IFFALSE 74838
// result := Delete ( result , result ) ;
74816: LD_ADDR_VAR 0 3
74820: PUSH
74821: LD_VAR 0 3
74825: PPUSH
74826: LD_VAR 0 3
74830: PPUSH
74831: CALL_OW 3
74835: ST_TO_ADDR
74836: GO 74813
74838: POP
74839: POP
// end ;
74840: LD_VAR 0 3
74844: RET
// export function ComExit ( unit ) ; var tmp ; begin
74845: LD_INT 0
74847: PPUSH
74848: PPUSH
// if not IsInUnit ( unit ) then
74849: LD_VAR 0 1
74853: PPUSH
74854: CALL_OW 310
74858: NOT
74859: IFFALSE 74863
// exit ;
74861: GO 74923
// tmp := IsInUnit ( unit ) ;
74863: LD_ADDR_VAR 0 3
74867: PUSH
74868: LD_VAR 0 1
74872: PPUSH
74873: CALL_OW 310
74877: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74878: LD_VAR 0 3
74882: PPUSH
74883: CALL_OW 247
74887: PUSH
74888: LD_INT 2
74890: EQUAL
74891: IFFALSE 74904
// ComExitVehicle ( unit ) else
74893: LD_VAR 0 1
74897: PPUSH
74898: CALL_OW 121
74902: GO 74913
// ComExitBuilding ( unit ) ;
74904: LD_VAR 0 1
74908: PPUSH
74909: CALL_OW 122
// result := tmp ;
74913: LD_ADDR_VAR 0 2
74917: PUSH
74918: LD_VAR 0 3
74922: ST_TO_ADDR
// end ;
74923: LD_VAR 0 2
74927: RET
// export function ComExitAll ( units ) ; var i ; begin
74928: LD_INT 0
74930: PPUSH
74931: PPUSH
// if not units then
74932: LD_VAR 0 1
74936: NOT
74937: IFFALSE 74941
// exit ;
74939: GO 74967
// for i in units do
74941: LD_ADDR_VAR 0 3
74945: PUSH
74946: LD_VAR 0 1
74950: PUSH
74951: FOR_IN
74952: IFFALSE 74965
// ComExit ( i ) ;
74954: LD_VAR 0 3
74958: PPUSH
74959: CALL 74845 0 1
74963: GO 74951
74965: POP
74966: POP
// end ;
74967: LD_VAR 0 2
74971: RET
// export function ResetHc ; begin
74972: LD_INT 0
74974: PPUSH
// InitHc ;
74975: CALL_OW 19
// hc_importance := 0 ;
74979: LD_ADDR_OWVAR 32
74983: PUSH
74984: LD_INT 0
74986: ST_TO_ADDR
// end ;
74987: LD_VAR 0 1
74991: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74992: LD_INT 0
74994: PPUSH
74995: PPUSH
74996: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74997: LD_ADDR_VAR 0 6
75001: PUSH
75002: LD_VAR 0 1
75006: PUSH
75007: LD_VAR 0 3
75011: PLUS
75012: PUSH
75013: LD_INT 2
75015: DIV
75016: ST_TO_ADDR
// if _x < 0 then
75017: LD_VAR 0 6
75021: PUSH
75022: LD_INT 0
75024: LESS
75025: IFFALSE 75042
// _x := _x * - 1 ;
75027: LD_ADDR_VAR 0 6
75031: PUSH
75032: LD_VAR 0 6
75036: PUSH
75037: LD_INT 1
75039: NEG
75040: MUL
75041: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75042: LD_ADDR_VAR 0 7
75046: PUSH
75047: LD_VAR 0 2
75051: PUSH
75052: LD_VAR 0 4
75056: PLUS
75057: PUSH
75058: LD_INT 2
75060: DIV
75061: ST_TO_ADDR
// if _y < 0 then
75062: LD_VAR 0 7
75066: PUSH
75067: LD_INT 0
75069: LESS
75070: IFFALSE 75087
// _y := _y * - 1 ;
75072: LD_ADDR_VAR 0 7
75076: PUSH
75077: LD_VAR 0 7
75081: PUSH
75082: LD_INT 1
75084: NEG
75085: MUL
75086: ST_TO_ADDR
// result := [ _x , _y ] ;
75087: LD_ADDR_VAR 0 5
75091: PUSH
75092: LD_VAR 0 6
75096: PUSH
75097: LD_VAR 0 7
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: ST_TO_ADDR
// end ;
75106: LD_VAR 0 5
75110: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75111: LD_INT 0
75113: PPUSH
75114: PPUSH
75115: PPUSH
75116: PPUSH
// task := GetTaskList ( unit ) ;
75117: LD_ADDR_VAR 0 7
75121: PUSH
75122: LD_VAR 0 1
75126: PPUSH
75127: CALL_OW 437
75131: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75132: LD_VAR 0 7
75136: NOT
75137: PUSH
75138: LD_VAR 0 1
75142: PPUSH
75143: LD_VAR 0 2
75147: PPUSH
75148: CALL_OW 308
75152: NOT
75153: AND
75154: IFFALSE 75158
// exit ;
75156: GO 75276
// if IsInArea ( unit , area ) then
75158: LD_VAR 0 1
75162: PPUSH
75163: LD_VAR 0 2
75167: PPUSH
75168: CALL_OW 308
75172: IFFALSE 75190
// begin ComMoveToArea ( unit , goAway ) ;
75174: LD_VAR 0 1
75178: PPUSH
75179: LD_VAR 0 3
75183: PPUSH
75184: CALL_OW 113
// exit ;
75188: GO 75276
// end ; if task [ 1 ] [ 1 ] <> M then
75190: LD_VAR 0 7
75194: PUSH
75195: LD_INT 1
75197: ARRAY
75198: PUSH
75199: LD_INT 1
75201: ARRAY
75202: PUSH
75203: LD_STRING M
75205: NONEQUAL
75206: IFFALSE 75210
// exit ;
75208: GO 75276
// x := task [ 1 ] [ 2 ] ;
75210: LD_ADDR_VAR 0 5
75214: PUSH
75215: LD_VAR 0 7
75219: PUSH
75220: LD_INT 1
75222: ARRAY
75223: PUSH
75224: LD_INT 2
75226: ARRAY
75227: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75228: LD_ADDR_VAR 0 6
75232: PUSH
75233: LD_VAR 0 7
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PUSH
75242: LD_INT 3
75244: ARRAY
75245: ST_TO_ADDR
// if InArea ( x , y , area ) then
75246: LD_VAR 0 5
75250: PPUSH
75251: LD_VAR 0 6
75255: PPUSH
75256: LD_VAR 0 2
75260: PPUSH
75261: CALL_OW 309
75265: IFFALSE 75276
// ComStop ( unit ) ;
75267: LD_VAR 0 1
75271: PPUSH
75272: CALL_OW 141
// end ;
75276: LD_VAR 0 4
75280: RET
// export function Abs ( value ) ; begin
75281: LD_INT 0
75283: PPUSH
// result := value ;
75284: LD_ADDR_VAR 0 2
75288: PUSH
75289: LD_VAR 0 1
75293: ST_TO_ADDR
// if value < 0 then
75294: LD_VAR 0 1
75298: PUSH
75299: LD_INT 0
75301: LESS
75302: IFFALSE 75319
// result := value * - 1 ;
75304: LD_ADDR_VAR 0 2
75308: PUSH
75309: LD_VAR 0 1
75313: PUSH
75314: LD_INT 1
75316: NEG
75317: MUL
75318: ST_TO_ADDR
// end ;
75319: LD_VAR 0 2
75323: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75324: LD_INT 0
75326: PPUSH
75327: PPUSH
75328: PPUSH
75329: PPUSH
75330: PPUSH
75331: PPUSH
75332: PPUSH
75333: PPUSH
// if not unit or not building then
75334: LD_VAR 0 1
75338: NOT
75339: PUSH
75340: LD_VAR 0 2
75344: NOT
75345: OR
75346: IFFALSE 75350
// exit ;
75348: GO 75576
// x := GetX ( building ) ;
75350: LD_ADDR_VAR 0 4
75354: PUSH
75355: LD_VAR 0 2
75359: PPUSH
75360: CALL_OW 250
75364: ST_TO_ADDR
// y := GetY ( building ) ;
75365: LD_ADDR_VAR 0 6
75369: PUSH
75370: LD_VAR 0 2
75374: PPUSH
75375: CALL_OW 251
75379: ST_TO_ADDR
// d := GetDir ( building ) ;
75380: LD_ADDR_VAR 0 8
75384: PUSH
75385: LD_VAR 0 2
75389: PPUSH
75390: CALL_OW 254
75394: ST_TO_ADDR
// r := 4 ;
75395: LD_ADDR_VAR 0 9
75399: PUSH
75400: LD_INT 4
75402: ST_TO_ADDR
// for i := 1 to 5 do
75403: LD_ADDR_VAR 0 10
75407: PUSH
75408: DOUBLE
75409: LD_INT 1
75411: DEC
75412: ST_TO_ADDR
75413: LD_INT 5
75415: PUSH
75416: FOR_TO
75417: IFFALSE 75574
// begin _x := ShiftX ( x , d , r + i ) ;
75419: LD_ADDR_VAR 0 5
75423: PUSH
75424: LD_VAR 0 4
75428: PPUSH
75429: LD_VAR 0 8
75433: PPUSH
75434: LD_VAR 0 9
75438: PUSH
75439: LD_VAR 0 10
75443: PLUS
75444: PPUSH
75445: CALL_OW 272
75449: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75450: LD_ADDR_VAR 0 7
75454: PUSH
75455: LD_VAR 0 6
75459: PPUSH
75460: LD_VAR 0 8
75464: PPUSH
75465: LD_VAR 0 9
75469: PUSH
75470: LD_VAR 0 10
75474: PLUS
75475: PPUSH
75476: CALL_OW 273
75480: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75481: LD_VAR 0 5
75485: PPUSH
75486: LD_VAR 0 7
75490: PPUSH
75491: CALL_OW 488
75495: PUSH
75496: LD_VAR 0 5
75500: PPUSH
75501: LD_VAR 0 7
75505: PPUSH
75506: CALL_OW 428
75510: PPUSH
75511: CALL_OW 247
75515: PUSH
75516: LD_INT 3
75518: PUSH
75519: LD_INT 2
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: IN
75526: NOT
75527: AND
75528: IFFALSE 75572
// begin ComMoveXY ( unit , _x , _y ) ;
75530: LD_VAR 0 1
75534: PPUSH
75535: LD_VAR 0 5
75539: PPUSH
75540: LD_VAR 0 7
75544: PPUSH
75545: CALL_OW 111
// result := [ _x , _y ] ;
75549: LD_ADDR_VAR 0 3
75553: PUSH
75554: LD_VAR 0 5
75558: PUSH
75559: LD_VAR 0 7
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: ST_TO_ADDR
// exit ;
75568: POP
75569: POP
75570: GO 75576
// end ; end ;
75572: GO 75416
75574: POP
75575: POP
// end ;
75576: LD_VAR 0 3
75580: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75581: LD_INT 0
75583: PPUSH
75584: PPUSH
75585: PPUSH
// result := 0 ;
75586: LD_ADDR_VAR 0 3
75590: PUSH
75591: LD_INT 0
75593: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75594: LD_VAR 0 1
75598: PUSH
75599: LD_INT 0
75601: LESS
75602: PUSH
75603: LD_VAR 0 1
75607: PUSH
75608: LD_INT 8
75610: GREATER
75611: OR
75612: PUSH
75613: LD_VAR 0 2
75617: PUSH
75618: LD_INT 0
75620: LESS
75621: OR
75622: PUSH
75623: LD_VAR 0 2
75627: PUSH
75628: LD_INT 8
75630: GREATER
75631: OR
75632: IFFALSE 75636
// exit ;
75634: GO 75711
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75636: LD_ADDR_VAR 0 4
75640: PUSH
75641: LD_INT 22
75643: PUSH
75644: LD_VAR 0 2
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PPUSH
75653: CALL_OW 69
75657: PUSH
75658: FOR_IN
75659: IFFALSE 75709
// begin un := UnitShoot ( i ) ;
75661: LD_ADDR_VAR 0 5
75665: PUSH
75666: LD_VAR 0 4
75670: PPUSH
75671: CALL_OW 504
75675: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75676: LD_VAR 0 5
75680: PPUSH
75681: CALL_OW 255
75685: PUSH
75686: LD_VAR 0 1
75690: EQUAL
75691: IFFALSE 75707
// begin result := un ;
75693: LD_ADDR_VAR 0 3
75697: PUSH
75698: LD_VAR 0 5
75702: ST_TO_ADDR
// exit ;
75703: POP
75704: POP
75705: GO 75711
// end ; end ;
75707: GO 75658
75709: POP
75710: POP
// end ;
75711: LD_VAR 0 3
75715: RET
// export function GetCargoBay ( units ) ; begin
75716: LD_INT 0
75718: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75719: LD_ADDR_VAR 0 2
75723: PUSH
75724: LD_VAR 0 1
75728: PPUSH
75729: LD_INT 2
75731: PUSH
75732: LD_INT 34
75734: PUSH
75735: LD_INT 12
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PUSH
75742: LD_INT 34
75744: PUSH
75745: LD_INT 51
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 34
75754: PUSH
75755: LD_INT 32
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 34
75764: PUSH
75765: LD_EXP 158
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: PPUSH
75781: CALL_OW 72
75785: ST_TO_ADDR
// end ; end_of_file
75786: LD_VAR 0 2
75790: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75791: LD_VAR 0 1
75795: PUSH
75796: LD_INT 200
75798: DOUBLE
75799: GREATEREQUAL
75800: IFFALSE 75808
75802: LD_INT 299
75804: DOUBLE
75805: LESSEQUAL
75806: IFTRUE 75810
75808: GO 75842
75810: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75811: LD_VAR 0 1
75815: PPUSH
75816: LD_VAR 0 2
75820: PPUSH
75821: LD_VAR 0 3
75825: PPUSH
75826: LD_VAR 0 4
75830: PPUSH
75831: LD_VAR 0 5
75835: PPUSH
75836: CALL 34108 0 5
75840: GO 75919
75842: LD_INT 300
75844: DOUBLE
75845: GREATEREQUAL
75846: IFFALSE 75854
75848: LD_INT 399
75850: DOUBLE
75851: LESSEQUAL
75852: IFTRUE 75856
75854: GO 75918
75856: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75857: LD_VAR 0 1
75861: PPUSH
75862: LD_VAR 0 2
75866: PPUSH
75867: LD_VAR 0 3
75871: PPUSH
75872: LD_VAR 0 4
75876: PPUSH
75877: LD_VAR 0 5
75881: PPUSH
75882: LD_VAR 0 6
75886: PPUSH
75887: LD_VAR 0 7
75891: PPUSH
75892: LD_VAR 0 8
75896: PPUSH
75897: LD_VAR 0 9
75901: PPUSH
75902: LD_VAR 0 10
75906: PPUSH
75907: LD_VAR 0 11
75911: PPUSH
75912: CALL 31996 0 11
75916: GO 75919
75918: POP
// end ;
75919: PPOPN 11
75921: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75922: LD_VAR 0 1
75926: PPUSH
75927: LD_VAR 0 2
75931: PPUSH
75932: LD_VAR 0 3
75936: PPUSH
75937: LD_VAR 0 4
75941: PPUSH
75942: LD_VAR 0 5
75946: PPUSH
75947: CALL 34090 0 5
// end ;
75951: PPOPN 5
75953: END
