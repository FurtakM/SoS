// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51543 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 58028 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 58028 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16999 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16999 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16999 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16999 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_belkovTeam ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_belkovTeam
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 55264 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21923 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 55264 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 55264 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21923 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 55264 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 55264 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 55264 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 56566 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54866 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54866 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54866 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 55264 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 55264 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 55264 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 55264 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 55264 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 55264 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8819
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8596: LD_ADDR_VAR 0 1
8600: PUSH
8601: LD_INT 21
8603: PPUSH
8604: LD_INT 22
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: LD_INT 30
8629: PUSH
8630: LD_INT 4
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 70
8661: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8662: LD_EXP 40
8666: PPUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8676: LD_INT 35
8678: PPUSH
8679: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8683: LD_EXP 40
8687: PPUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 296
8697: PUSH
8698: LD_INT 6
8700: LESS
8701: IFFALSE 8676
// InGameOn ;
8703: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8707: LD_EXP 40
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
8721: LD_EXP 40
8725: PPUSH
8726: LD_STRING D6-Pla-1
8728: PPUSH
8729: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8733: LD_EXP 34
8737: PPUSH
8738: LD_STRING D6-Bur-1
8740: PPUSH
8741: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8745: LD_VAR 0 1
8749: PUSH
8750: LD_INT 1
8752: ARRAY
8753: PPUSH
8754: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8758: LD_VAR 0 1
8762: PUSH
8763: LD_INT 1
8765: ARRAY
8766: PPUSH
8767: CALL_OW 266
8771: PUSH
8772: LD_INT 31
8774: EQUAL
8775: IFFALSE 8797
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8777: LD_INT 106
8779: PPUSH
8780: CALL_OW 274
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 10
8790: PPUSH
8791: CALL_OW 276
8795: GO 8815
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8797: LD_INT 106
8799: PPUSH
8800: CALL_OW 274
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: LD_INT 30
8810: PPUSH
8811: CALL_OW 276
// InGameOff ;
8815: CALL_OW 9
// end ;
8819: PPOPN 1
8821: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8822: LD_EXP 4
8826: PUSH
8827: LD_INT 21
8829: PPUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 23
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: PPUSH
8865: CALL_OW 71
8869: AND
8870: IFFALSE 9168
8872: GO 8874
8874: DISABLE
8875: LD_INT 0
8877: PPUSH
8878: PPUSH
// begin enable ;
8879: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8880: LD_ADDR_VAR 0 1
8884: PUSH
8885: LD_INT 21
8887: PPUSH
8888: LD_INT 22
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 71
8927: PUSH
8928: LD_INT 1
8930: ARRAY
8931: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8932: LD_EXP 40
8936: PPUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8953: LD_EXP 40
8957: PPUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 296
8967: PUSH
8968: LD_INT 6
8970: LESS
8971: IFFALSE 8946
// InGameOn ;
8973: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8977: LD_EXP 40
8981: PPUSH
8982: LD_VAR 0 1
8986: PPUSH
8987: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
8991: LD_EXP 40
8995: PPUSH
8996: LD_STRING DPlatAngry
8998: PPUSH
8999: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9003: LD_EXP 34
9007: PPUSH
9008: LD_STRING D6-Bur-1
9010: PPUSH
9011: CALL_OW 88
// RemoveUnit ( tmp ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 64
// InGameOff ;
9024: CALL_OW 9
// amount := 0 ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9036: LD_VAR 0 1
9040: PPUSH
9041: CALL_OW 266
9045: PUSH
9046: LD_INT 31
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9065
9054: POP
// amount := 10 ; b_lab :
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 10
9062: ST_TO_ADDR
9063: GO 9142
9065: LD_INT 6
9067: DOUBLE
9068: EQUAL
9069: IFTRUE 9073
9071: GO 9084
9073: POP
// amount := 20 ; b_armoury :
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: LD_INT 20
9081: ST_TO_ADDR
9082: GO 9142
9084: LD_INT 4
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9103
9092: POP
// amount := 30 ; b_workshop :
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 30
9100: ST_TO_ADDR
9101: GO 9142
9103: LD_INT 2
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9122
9111: POP
// amount := 40 ; b_oil_power :
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: LD_INT 40
9119: ST_TO_ADDR
9120: GO 9142
9122: LD_INT 26
9124: DOUBLE
9125: EQUAL
9126: IFTRUE 9130
9128: GO 9141
9130: POP
// amount := 20 ; end ;
9131: LD_ADDR_VAR 0 2
9135: PUSH
9136: LD_INT 20
9138: ST_TO_ADDR
9139: GO 9142
9141: POP
// if amount then
9142: LD_VAR 0 2
9146: IFFALSE 9168
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9148: LD_INT 106
9150: PPUSH
9151: CALL_OW 274
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: CALL_OW 276
// end ;
9168: PPOPN 2
9170: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9171: LD_INT 22
9173: PUSH
9174: LD_INT 3
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 92
9183: PUSH
9184: LD_INT 112
9186: PUSH
9187: LD_INT 155
9189: PUSH
9190: LD_INT 8
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 2
9210: LESS
9211: PUSH
9212: LD_EXP 34
9216: PPUSH
9217: LD_INT 112
9219: PPUSH
9220: LD_INT 155
9222: PPUSH
9223: CALL_OW 297
9227: PUSH
9228: LD_INT 8
9230: LESS
9231: AND
9232: IFFALSE 9445
9234: GO 9236
9236: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9237: LD_INT 112
9239: PPUSH
9240: LD_INT 155
9242: PPUSH
9243: LD_INT 3
9245: PPUSH
9246: LD_INT 4
9248: NEG
9249: PPUSH
9250: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9254: LD_INT 1
9256: PPUSH
9257: LD_EXP 34
9261: PPUSH
9262: CALL_OW 471
// uc_side := 1 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// uc_nation := 1 ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9282: LD_ADDR_EXP 49
9286: PUSH
9287: LD_STRING Dickens
9289: PPUSH
9290: CALL_OW 25
9294: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9295: LD_EXP 49
9299: PPUSH
9300: LD_INT 112
9302: PPUSH
9303: LD_INT 155
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 48
// wait ( 0 0$2 ) ;
9313: LD_INT 70
9315: PPUSH
9316: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9320: LD_EXP 49
9324: PPUSH
9325: LD_EXP 34
9329: PPUSH
9330: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9334: LD_EXP 49
9338: PPUSH
9339: LD_STRING DUsSpawnSol
9341: PPUSH
9342: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9346: LD_INT 1
9348: PPUSH
9349: LD_EXP 34
9353: PPUSH
9354: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9358: LD_INT 112
9360: PPUSH
9361: LD_INT 155
9363: PPUSH
9364: LD_INT 3
9366: PPUSH
9367: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9371: LD_EXP 49
9375: PPUSH
9376: LD_INT 77
9378: PPUSH
9379: LD_INT 152
9381: PPUSH
9382: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9393: LD_EXP 49
9397: PPUSH
9398: CALL_OW 302
9402: NOT
9403: PUSH
9404: LD_EXP 49
9408: PPUSH
9409: LD_INT 77
9411: PPUSH
9412: LD_INT 152
9414: PPUSH
9415: CALL_OW 307
9419: OR
9420: IFFALSE 9386
// if not IsOk ( Dickens ) then
9422: LD_EXP 49
9426: PPUSH
9427: CALL_OW 302
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 9445
// RemoveUnit ( Dickens ) ;
9436: LD_EXP 49
9440: PPUSH
9441: CALL_OW 64
// end ;
9445: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9446: LD_EXP 34
9450: PPUSH
9451: CALL_OW 256
9455: PUSH
9456: LD_INT 600
9458: LESS
9459: IFFALSE 9476
9461: GO 9463
9463: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DUsSpawnBur
9471: PPUSH
9472: CALL_OW 88
9476: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9477: LD_EXP 12
9481: IFFALSE 10543
9483: GO 9485
9485: DISABLE
9486: LD_INT 0
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// begin hasToBuildTank := false ;
9492: LD_ADDR_EXP 11
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9500: LD_ADDR_EXP 5
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: LD_INT 22
9515: PUSH
9516: LD_INT 3
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 21
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// InGameOn ;
9542: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9546: LD_VAR 0 2
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: CALL_OW 85
// wait ( 0 0$1 ) ;
9559: LD_INT 35
9561: PPUSH
9562: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9566: LD_EXP 34
9570: PPUSH
9571: LD_STRING D9-Bur-1
9573: PPUSH
9574: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9578: LD_EXP 40
9582: PPUSH
9583: LD_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: CALL_OW 112
// p := 0 ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9604: LD_INT 35
9606: PPUSH
9607: CALL_OW 67
// p := p + 1 ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 1
9623: PLUS
9624: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9625: LD_EXP 40
9629: PPUSH
9630: LD_VAR 0 2
9634: PUSH
9635: LD_INT 1
9637: ARRAY
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 8
9646: LESS
9647: PUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 8
9655: GREATER
9656: OR
9657: IFFALSE 9604
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PPUSH
9673: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9677: LD_EXP 40
9681: PPUSH
9682: LD_STRING D9-Pla-1
9684: PPUSH
9685: CALL_OW 88
// ComFree ( Platonov ) ;
9689: LD_EXP 40
9693: PPUSH
9694: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9698: LD_EXP 40
9702: PPUSH
9703: LD_INT 64
9705: PPUSH
9706: LD_INT 98
9708: PPUSH
9709: CALL_OW 171
// InGameOff ;
9713: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9717: LD_STRING M3
9719: PPUSH
9720: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9724: LD_EXP 41
9728: PPUSH
9729: LD_INT 70
9731: PPUSH
9732: LD_INT 108
9734: PPUSH
9735: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9739: LD_EXP 41
9743: PPUSH
9744: CALL_OW 200
// wait ( 1 ) ;
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 67
// ComExit ( Belkov ) ;
9755: LD_EXP 36
9759: PPUSH
9760: CALL 55264 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9764: LD_EXP 36
9768: PPUSH
9769: LD_INT 113
9771: PPUSH
9772: LD_INT 104
9774: PPUSH
9775: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9779: LD_EXP 36
9783: PPUSH
9784: LD_INT 116
9786: PPUSH
9787: LD_INT 108
9789: PPUSH
9790: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9801: LD_INT 22
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 91
9823: PUSH
9824: LD_INT 71
9826: PUSH
9827: LD_INT 8
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 69
9844: IFFALSE 9794
// InGameOn ;
9846: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9850: LD_ADDR_VAR 0 2
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_INT 3
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 21
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 91
9877: PUSH
9878: LD_INT 71
9880: PUSH
9881: LD_INT 8
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// if belkovTeam < 3 then
9899: LD_EXP 45
9903: PUSH
9904: LD_INT 3
9906: LESS
9907: IFFALSE 9992
// begin for i := belkovTeam to 3 do
9909: LD_ADDR_VAR 0 1
9913: PUSH
9914: DOUBLE
9915: LD_EXP 45
9919: DEC
9920: ST_TO_ADDR
9921: LD_INT 3
9923: PUSH
9924: FOR_TO
9925: IFFALSE 9990
// begin un := kirovBaseSquad [ 1 ] ;
9927: LD_ADDR_VAR 0 4
9931: PUSH
9932: LD_EXP 43
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9941: LD_ADDR_EXP 43
9945: PUSH
9946: LD_EXP 43
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL_OW 3
9958: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 45
9973: PUSH
9974: LD_INT 1
9976: PLUS
9977: PPUSH
9978: LD_VAR 0 4
9982: PPUSH
9983: CALL_OW 1
9987: ST_TO_ADDR
// end ;
9988: GO 9924
9990: POP
9991: POP
// end ; if Kirilenkova then
9992: LD_EXP 37
9996: IFFALSE 10020
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9998: LD_ADDR_EXP 45
10002: PUSH
10003: LD_EXP 45
10007: PPUSH
10008: LD_EXP 37
10012: PPUSH
10013: CALL 54866 0 2
10017: ST_TO_ADDR
10018: GO 10059
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
10020: LD_ADDR_EXP 45
10024: PUSH
10025: LD_EXP 45
10029: PPUSH
10030: LD_EXP 43
10034: PPUSH
10035: LD_INT 25
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL_OW 72
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: CALL 54866 0 2
10058: ST_TO_ADDR
// ComExit ( Kurin ) ;
10059: LD_EXP 38
10063: PPUSH
10064: CALL 55264 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10068: LD_EXP 38
10072: PPUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: CALL_OW 179
// wait ( 0 0$1 ) ;
10086: LD_INT 35
10088: PPUSH
10089: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_VAR 0 2
10115: PUSH
10116: LD_INT 1
10118: ARRAY
10119: PPUSH
10120: CALL_OW 311
10124: ST_TO_ADDR
// ComExit ( un ) ;
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL 55264 0 1
// wait ( 0 0$1 ) ;
10134: LD_INT 35
10136: PPUSH
10137: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10141: LD_VAR 0 4
10145: PPUSH
10146: LD_EXP 38
10150: PPUSH
10151: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10155: LD_EXP 36
10159: PPUSH
10160: LD_VAR 0 2
10164: PUSH
10165: LD_INT 1
10167: ARRAY
10168: PPUSH
10169: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10173: LD_INT 10
10175: PPUSH
10176: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10180: LD_EXP 38
10184: PPUSH
10185: LD_STRING D10-Kur-1
10187: PPUSH
10188: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10192: LD_EXP 36
10196: PPUSH
10197: LD_INT 122
10199: PPUSH
10200: LD_INT 112
10202: PPUSH
10203: CALL_OW 176
// wait ( 0 0$2 ) ;
10207: LD_INT 70
10209: PPUSH
10210: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10214: LD_EXP 36
10218: PPUSH
10219: LD_STRING D10-Bel-1
10221: PPUSH
10222: CALL_OW 88
// if belkovBrother then
10226: LD_EXP 32
10230: IFFALSE 10282
// begin Say ( Burlak , D10-Bur-1 ) ;
10232: LD_EXP 34
10236: PPUSH
10237: LD_STRING D10-Bur-1
10239: PPUSH
10240: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10244: LD_EXP 36
10248: PPUSH
10249: LD_STRING D10-Bel-2
10251: PPUSH
10252: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10256: LD_EXP 34
10260: PPUSH
10261: LD_STRING D10-Bur-2
10263: PPUSH
10264: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10268: LD_EXP 38
10272: PPUSH
10273: LD_STRING D10-Kur-2a
10275: PPUSH
10276: CALL_OW 88
// end else
10280: GO 10294
// begin Say ( Kurin , D10-Kur-2 ) end ;
10282: LD_EXP 38
10286: PPUSH
10287: LD_STRING D10-Kur-2
10289: PPUSH
10290: CALL_OW 88
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10301: LD_EXP 38
10305: PPUSH
10306: LD_STRING D10-Kur-2b
10308: PPUSH
10309: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10313: LD_VAR 0 4
10317: PPUSH
10318: LD_INT 66
10320: PPUSH
10321: LD_INT 97
10323: PPUSH
10324: CALL_OW 111
// wait ( 0 0$5 ) ;
10328: LD_INT 175
10330: PPUSH
10331: CALL_OW 67
// InGameOff ;
10335: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10339: LD_EXP 33
10343: PPUSH
10344: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10348: LD_STRING M4
10350: PPUSH
10351: CALL_OW 337
// wait ( 0 0$6 ) ;
10355: LD_INT 210
10357: PPUSH
10358: CALL_OW 67
// kurinDontWannaTalk := true ;
10362: LD_ADDR_EXP 5
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10370: LD_INT 140
10372: PPUSH
10373: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10377: LD_INT 35
10379: PPUSH
10380: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10384: LD_EXP 34
10388: PPUSH
10389: CALL_OW 310
10393: PUSH
10394: LD_EXP 34
10398: PPUSH
10399: LD_INT 106
10401: PPUSH
10402: CALL_OW 296
10406: PUSH
10407: LD_INT 12
10409: LESS
10410: OR
10411: IFFALSE 10377
// DialogueOn ;
10413: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D11-Pla-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10429: LD_EXP 34
10433: PPUSH
10434: LD_STRING D11-Bur-1
10436: PPUSH
10437: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: PUSH
10470: LD_INT 1
10472: GREATER
10473: IFFALSE 10487
// Say ( Burlak , D11-Bur-1a ) ;
10475: LD_EXP 34
10479: PPUSH
10480: LD_STRING D11-Bur-1a
10482: PPUSH
10483: CALL_OW 88
// DialogueOff ;
10487: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10491: LD_ADDR_EXP 8
10495: PUSH
10496: LD_INT 160
10498: PUSH
10499: LD_INT 150
10501: PUSH
10502: LD_INT 140
10504: PUSH
10505: LD_INT 120
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_OWVAR 67
10518: ARRAY
10519: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10520: LD_STRING M5
10522: PPUSH
10523: CALL_OW 337
// kirovHasTank := true ;
10527: LD_ADDR_EXP 6
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// hasToBuildTank := true ;
10535: LD_ADDR_EXP 11
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// end ;
10543: PPOPN 4
10545: END
// every 0 0$2 trigger allianceAttacked do
10546: LD_EXP 13
10550: IFFALSE 10589
10552: GO 10554
10554: DISABLE
// begin DialogueOn ;
10555: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10559: LD_EXP 38
10563: PPUSH
10564: LD_STRING DArestKur
10566: PPUSH
10567: CALL_OW 88
// dwait ( 0 0$1 ) ;
10571: LD_INT 35
10573: PPUSH
10574: CALL_OW 68
// YouLost ( SelfAttack ) ;
10578: LD_STRING SelfAttack
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10590: LD_INT 22
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: GREATEREQUAL
10648: PUSH
10649: LD_EXP 6
10653: AND
10654: IFFALSE 10824
10656: GO 10658
10658: DISABLE
// begin hasToBuildTank := false ;
10659: LD_ADDR_EXP 11
10663: PUSH
10664: LD_INT 0
10666: ST_TO_ADDR
// blockNorth := false ;
10667: LD_ADDR_EXP 7
10671: PUSH
10672: LD_INT 0
10674: ST_TO_ADDR
// InGameOn ;
10675: CALL_OW 8
// wait ( 0 0$2 ) ;
10679: LD_INT 70
10681: PPUSH
10682: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10686: LD_INT 106
10688: PPUSH
10689: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10693: LD_EXP 40
10697: PPUSH
10698: LD_INT 65
10700: PPUSH
10701: LD_INT 97
10703: PPUSH
10704: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10708: LD_EXP 40
10712: PPUSH
10713: LD_EXP 34
10717: PPUSH
10718: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10722: LD_EXP 34
10726: PPUSH
10727: LD_STRING D12-Bur-1
10729: PPUSH
10730: CALL_OW 88
// wait ( 0 0$1 ) ;
10734: LD_INT 35
10736: PPUSH
10737: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10741: LD_EXP 40
10745: PPUSH
10746: LD_STRING D12-Pla-1
10748: PPUSH
10749: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10753: LD_EXP 34
10757: PPUSH
10758: LD_STRING D12-Bur-2
10760: PPUSH
10761: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10765: LD_EXP 40
10769: PPUSH
10770: LD_STRING D12-Pla-2
10772: PPUSH
10773: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10777: LD_EXP 34
10781: PPUSH
10782: LD_STRING D12-Bur-3
10784: PPUSH
10785: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10789: LD_EXP 40
10793: PPUSH
10794: LD_STRING D12-Pla-3
10796: PPUSH
10797: CALL_OW 88
// hasAllTanks := true ;
10801: LD_ADDR_EXP 14
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// InGameOff ;
10809: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10813: LD_STRING M6
10815: PPUSH
10816: CALL_OW 337
// PrepareAmerican ;
10820: CALL 3961 0 0
// end ;
10824: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10825: LD_EXP 17
10829: IFFALSE 12593
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
// begin PrepareAmericanTrap ;
10843: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: LD_EXP 48
10856: PPUSH
10857: LD_INT 26
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 72
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10876: LD_INT 22
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 60
10905: PUSH
10906: EMPTY
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 69
10918: PPUSH
10919: CALL_OW 141
// InGameOn ;
10923: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10927: LD_INT 69
10929: PPUSH
10930: LD_INT 22
10932: PPUSH
10933: CALL_OW 86
// wait ( 0 0$1 ) ;
10937: LD_INT 35
10939: PPUSH
10940: CALL_OW 67
// DialogueOn ;
10944: CALL_OW 6
// game_speed := 4 ;
10948: LD_ADDR_OWVAR 65
10952: PUSH
10953: LD_INT 4
10955: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_STRING D13-Sol1-1
10963: PPUSH
10964: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10968: LD_EXP 36
10972: PPUSH
10973: LD_STRING D13-Bel-1
10975: PPUSH
10976: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10980: LD_EXP 38
10984: PPUSH
10985: LD_STRING D13-Kur-1
10987: PPUSH
10988: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10992: LD_INT 10
10994: PPUSH
10995: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10999: LD_EXP 36
11003: PPUSH
11004: LD_STRING D13-Bel-2
11006: PPUSH
11007: CALL_OW 94
// DialogueOff ;
11011: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11015: LD_EXP 36
11019: PPUSH
11020: LD_INT 76
11022: PPUSH
11023: LD_INT 20
11025: PPUSH
11026: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11030: LD_EXP 45
11034: PPUSH
11035: LD_INT 72
11037: PPUSH
11038: LD_INT 20
11040: PPUSH
11041: CALL_OW 111
// wait ( 0 0$2 ) ;
11045: LD_INT 70
11047: PPUSH
11048: CALL_OW 67
// for i in usTrapForces do
11052: LD_ADDR_VAR 0 1
11056: PUSH
11057: LD_EXP 48
11061: PUSH
11062: FOR_IN
11063: IFFALSE 11096
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11065: LD_VAR 0 1
11069: PPUSH
11070: LD_INT 7
11072: PPUSH
11073: LD_INT 0
11075: PPUSH
11076: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_EXP 36
11089: PPUSH
11090: CALL_OW 119
// end ;
11094: GO 11062
11096: POP
11097: POP
// wait ( 0 0$0.3 ) ;
11098: LD_INT 10
11100: PPUSH
11101: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11105: LD_EXP 48
11109: PPUSH
11110: LD_INT 65
11112: PPUSH
11113: LD_INT 18
11115: PPUSH
11116: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11120: LD_INT 70
11122: PPUSH
11123: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11127: LD_EXP 48
11131: PPUSH
11132: LD_INT 101
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 72
11146: PUSH
11147: LD_INT 3
11149: GREATER
11150: IFFALSE 11120
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11152: LD_INT 65
11154: PPUSH
11155: LD_INT 18
11157: PPUSH
11158: LD_INT 3
11160: PPUSH
11161: LD_INT 26
11163: NEG
11164: PPUSH
11165: CALL_OW 330
// DialogueOn ;
11169: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_STRING D14-Sol1-1
11180: PPUSH
11181: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11185: LD_EXP 36
11189: PPUSH
11190: LD_STRING D14-Bel-1
11192: PPUSH
11193: CALL_OW 88
// DialogueOff ;
11197: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11201: LD_INT 65
11203: PPUSH
11204: LD_INT 18
11206: PPUSH
11207: LD_INT 3
11209: PPUSH
11210: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11214: LD_EXP 45
11218: PPUSH
11219: LD_INT 31
11221: PPUSH
11222: LD_INT 9
11224: PPUSH
11225: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11229: LD_EXP 48
11233: PPUSH
11234: LD_INT 50
11236: PPUSH
11237: LD_INT 16
11239: PPUSH
11240: CALL_OW 174
// wait ( 0 0$2 ) ;
11244: LD_INT 70
11246: PPUSH
11247: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11251: LD_ADDR_VAR 0 6
11255: PUSH
11256: LD_EXP 36
11260: PPUSH
11261: CALL_OW 310
11265: ST_TO_ADDR
// if not belkovTank then
11266: LD_VAR 0 6
11270: NOT
11271: IFFALSE 11311
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11273: LD_ADDR_VAR 0 6
11277: PUSH
11278: LD_INT 22
11280: PUSH
11281: LD_INT 6
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 58
11318: PPUSH
11319: LD_INT 21
11321: PPUSH
11322: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11326: LD_EXP 36
11330: PPUSH
11331: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11335: LD_EXP 36
11339: PPUSH
11340: LD_INT 53
11342: PPUSH
11343: LD_INT 18
11345: PPUSH
11346: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11350: LD_EXP 36
11354: PPUSH
11355: LD_INT 31
11357: PPUSH
11358: LD_INT 9
11360: PPUSH
11361: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11365: LD_INT 35
11367: PPUSH
11368: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_EXP 36
11381: PUSH
11382: LD_EXP 45
11386: UNION
11387: PUSH
11388: LD_VAR 0 6
11392: UNION
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11426
// if GetLives ( i ) < 800 then
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 256
11406: PUSH
11407: LD_INT 800
11409: LESS
11410: IFFALSE 11424
// SetLives ( i , 800 ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 800
11419: PPUSH
11420: CALL_OW 234
11424: GO 11394
11426: POP
11427: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11428: LD_EXP 36
11432: PPUSH
11433: LD_INT 31
11435: PPUSH
11436: LD_INT 9
11438: PPUSH
11439: CALL_OW 297
11443: PUSH
11444: LD_INT 4
11446: LESS
11447: IFFALSE 11365
// for i := 1 to Difficulty do
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: DOUBLE
11455: LD_INT 1
11457: DEC
11458: ST_TO_ADDR
11459: LD_OWVAR 67
11463: PUSH
11464: FOR_TO
11465: IFFALSE 11507
// if i <= belkovTeam then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 45
11476: LESSEQUAL
11477: IFFALSE 11505
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11479: LD_EXP 45
11483: PUSH
11484: LD_VAR 0 1
11488: ARRAY
11489: PPUSH
11490: LD_INT 600
11492: PPUSH
11493: LD_INT 800
11495: PPUSH
11496: CALL_OW 12
11500: PPUSH
11501: CALL_OW 234
11505: GO 11464
11507: POP
11508: POP
// SetLives ( Belkov , 820 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_INT 820
11516: PPUSH
11517: CALL_OW 234
// InGameOff ;
11521: CALL_OW 9
// DialogueOn ;
11525: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11529: LD_EXP 36
11533: PPUSH
11534: LD_STRING D14-Bel-1a
11536: PPUSH
11537: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11541: LD_EXP 38
11545: PPUSH
11546: LD_STRING D14-Kur-1
11548: PPUSH
11549: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11553: LD_EXP 36
11557: PPUSH
11558: LD_STRING D14-Bel-2
11560: PPUSH
11561: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11565: LD_EXP 38
11569: PPUSH
11570: LD_STRING D14-Kur-2
11572: PPUSH
11573: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11577: LD_EXP 34
11581: PPUSH
11582: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11586: LD_EXP 34
11590: PPUSH
11591: LD_STRING D14a-Bur-1
11593: PPUSH
11594: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11598: LD_EXP 40
11602: PPUSH
11603: LD_STRING D14a-Pla-1
11605: PPUSH
11606: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D14a-Bur-2
11617: PPUSH
11618: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11622: LD_EXP 40
11626: PPUSH
11627: LD_STRING D14a-Pla-2
11629: PPUSH
11630: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_STRING D14a-Bur-3
11641: PPUSH
11642: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11646: LD_EXP 40
11650: PPUSH
11651: LD_STRING D14a-Pla-3
11653: PPUSH
11654: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11658: LD_EXP 34
11662: PPUSH
11663: LD_STRING D14a-Bur-4
11665: PPUSH
11666: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11670: LD_EXP 40
11674: PPUSH
11675: LD_STRING D14a-Pla-4
11677: PPUSH
11678: CALL_OW 88
// DialogueOff ;
11682: CALL_OW 7
// belkovTrapped := true ;
11686: LD_ADDR_EXP 18
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11694: LD_EXP 48
11698: PPUSH
11699: LD_INT 68
11701: PPUSH
11702: LD_INT 16
11704: PPUSH
11705: CALL_OW 111
// if belkovTank then
11709: LD_VAR 0 6
11713: IFFALSE 11752
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11715: LD_EXP 48
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PPUSH
11724: LD_VAR 0 6
11728: PPUSH
11729: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11733: LD_EXP 48
11737: PUSH
11738: LD_INT 1
11740: ARRAY
11741: PPUSH
11742: LD_INT 69
11744: PPUSH
11745: LD_INT 20
11747: PPUSH
11748: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11752: LD_EXP 36
11756: PPUSH
11757: LD_INT 40
11759: PPUSH
11760: LD_INT 17
11762: PPUSH
11763: CALL_OW 111
// AddComHold ( Belkov ) ;
11767: LD_EXP 36
11771: PPUSH
11772: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: LD_INT 44
11783: PUSH
11784: LD_INT 18
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 42
11793: PUSH
11794: LD_INT 16
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 40
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 44
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 42
11823: PUSH
11824: LD_INT 20
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 42
11833: PUSH
11834: LD_INT 12
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 42
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: LD_EXP 45
11869: PPUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 1
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 72
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11952
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PUSH
11915: LD_INT 2
11917: ARRAY
11918: PPUSH
11919: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11923: LD_ADDR_VAR 0 3
11927: PUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 3
11940: ST_TO_ADDR
// AddComCrawl ( i ) ;
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 197
// end ;
11950: GO 11885
11952: POP
11953: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11954: LD_EXP 45
11958: PPUSH
11959: LD_INT 25
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 72
11973: IFFALSE 12005
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11975: LD_EXP 45
11979: PPUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 18
12000: PPUSH
12001: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12005: LD_ADDR_VAR 0 7
12009: PUSH
12010: LD_INT 9450
12012: PUSH
12013: LD_INT 8400
12015: PUSH
12016: LD_INT 6650
12018: PUSH
12019: LD_INT 5250
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_OWVAR 67
12032: ARRAY
12033: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12034: LD_INT 35
12036: PPUSH
12037: CALL_OW 67
// timer := timer - 0 0$1 ;
12041: LD_ADDR_VAR 0 7
12045: PUSH
12046: LD_VAR 0 7
12050: PUSH
12051: LD_INT 35
12053: MINUS
12054: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12055: LD_INT 19
12057: PPUSH
12058: LD_INT 22
12060: PUSH
12061: LD_INT 3
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 70
12072: IFFALSE 12082
// timer := 0 0$0 ;
12074: LD_ADDR_VAR 0 7
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// until timer <= 0 ;
12082: LD_VAR 0 7
12086: PUSH
12087: LD_INT 0
12089: LESSEQUAL
12090: IFFALSE 12034
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12092: LD_EXP 48
12096: PPUSH
12097: LD_INT 50
12099: PUSH
12100: EMPTY
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: NOT
12108: IFFALSE 12112
// exit ;
12110: GO 12593
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: LD_EXP 48
12121: PPUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 54
12137: PUSH
12138: EMPTY
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 72
12153: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: LD_EXP 48
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 3
12176: PUSH
12177: LD_INT 54
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 72
12195: ST_TO_ADDR
// for i in sol do
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: LD_VAR 0 4
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12223
// SetTag ( i , 0 ) ;
12209: LD_VAR 0 1
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 109
12221: GO 12206
12223: POP
12224: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12225: LD_VAR 0 5
12229: PPUSH
12230: LD_INT 60
12232: PPUSH
12233: LD_INT 8
12235: PPUSH
12236: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12240: LD_INT 22
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: IFFALSE 12309
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12270: LD_INT 22
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: PPUSH
12299: LD_INT 53
12301: PPUSH
12302: LD_INT 24
12304: PPUSH
12305: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12309: LD_INT 18
12311: PPUSH
12312: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: LD_EXP 48
12325: PPUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 50
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: LD_INT 3
12344: PUSH
12345: LD_INT 54
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12365: LD_VAR 0 4
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL 52435 0 2
12377: PUSH
12378: LD_VAR 0 4
12382: EQUAL
12383: IFFALSE 12422
// begin wait ( 0 0$3 ) ;
12385: LD_INT 105
12387: PPUSH
12388: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12392: LD_VAR 0 4
12396: PPUSH
12397: LD_INT 41
12399: PPUSH
12400: LD_INT 18
12402: PPUSH
12403: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12407: LD_VAR 0 5
12411: PPUSH
12412: LD_INT 60
12414: PPUSH
12415: LD_INT 8
12417: PPUSH
12418: CALL_OW 111
// end ; for i in sol do
12422: LD_ADDR_VAR 0 1
12426: PUSH
12427: LD_VAR 0 4
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12508
// if GetLives ( i ) < 800 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 800
12447: LESS
12448: IFFALSE 12479
// begin SetTag ( i , 1 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12462: LD_VAR 0 1
12466: PPUSH
12467: LD_INT 60
12469: PPUSH
12470: LD_INT 8
12472: PPUSH
12473: CALL_OW 111
// end else
12477: GO 12506
// if GetLives ( i ) = 1000 then
12479: LD_VAR 0 1
12483: PPUSH
12484: CALL_OW 256
12488: PUSH
12489: LD_INT 1000
12491: EQUAL
12492: IFFALSE 12506
// SetTag ( i , 0 ) ;
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL_OW 109
12506: GO 12432
12508: POP
12509: POP
// until belkovDied or not sol ;
12510: LD_EXP 19
12514: PUSH
12515: LD_VAR 0 4
12519: NOT
12520: OR
12521: IFFALSE 12309
// if not sol then
12523: LD_VAR 0 4
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12593
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12532: LD_VAR 0 4
12536: PUSH
12537: LD_VAR 0 5
12541: ADD
12542: PPUSH
12543: LD_INT 56
12545: PPUSH
12546: LD_INT 25
12548: PPUSH
12549: CALL_OW 111
// wait ( 0 0$30 ) ;
12553: LD_INT 1050
12555: PPUSH
12556: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12560: LD_EXP 48
12564: PPUSH
12565: LD_INT 66
12567: PPUSH
12568: LD_INT 96
12570: PPUSH
12571: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_VAR 0 4
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 112
// end ;
12593: PPOPN 7
12595: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12596: LD_EXP 18
12600: PUSH
12601: LD_EXP 19
12605: NOT
12606: AND
12607: PUSH
12608: LD_INT 9
12610: PPUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 70
12625: AND
12626: IFFALSE 12946
12628: GO 12630
12630: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12631: LD_STRING QAttackAm
12633: PPUSH
12634: CALL_OW 97
12638: PUSH
12639: LD_INT 1
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12714
12647: POP
// begin initiative := true ;
12648: LD_ADDR_EXP 31
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// DialogueOn ;
12656: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12660: LD_EXP 34
12664: PPUSH
12665: LD_STRING D17-Bur-1
12667: PPUSH
12668: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12672: LD_EXP 40
12676: PPUSH
12677: LD_STRING D17-Pla-1
12679: PPUSH
12680: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12684: LD_EXP 34
12688: PPUSH
12689: LD_STRING D17-Bur-2
12691: PPUSH
12692: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12696: LD_EXP 40
12700: PPUSH
12701: LD_STRING D17-Pla-2
12703: PPUSH
12704: CALL_OW 94
// DialogueOff ;
12708: CALL_OW 7
// end ; 2 :
12712: GO 12876
12714: LD_INT 2
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12814
12722: POP
// begin initiative := true ;
12723: LD_ADDR_EXP 31
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// DialogueOn ;
12731: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12735: LD_EXP 34
12739: PPUSH
12740: LD_STRING D18-Bur-1
12742: PPUSH
12743: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12747: LD_EXP 40
12751: PPUSH
12752: LD_STRING D18-Pla-1
12754: PPUSH
12755: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12759: LD_EXP 34
12763: PPUSH
12764: LD_STRING D18-Bur-2
12766: PPUSH
12767: CALL_OW 88
// if not reinforcementsGained then
12771: LD_EXP 25
12775: NOT
12776: IFFALSE 12796
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12778: LD_EXP 40
12782: PPUSH
12783: LD_STRING D18-Pla-2
12785: PPUSH
12786: CALL_OW 94
// SendReinforcements ;
12790: CALL 3302 0 0
// end else
12794: GO 12808
// SayRadio ( Platonov , D22-Pla-1b ) ;
12796: LD_EXP 40
12800: PPUSH
12801: LD_STRING D22-Pla-1b
12803: PPUSH
12804: CALL_OW 94
// DialogueOff ;
12808: CALL_OW 7
// end ; 3 :
12812: GO 12876
12814: LD_INT 3
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12875
12822: POP
// begin if IsOk ( Gnyevko ) then
12823: LD_EXP 35
12827: PPUSH
12828: CALL_OW 302
12832: IFFALSE 12848
// Say ( Gnyevko , D19A-Gny-1 ) else
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING D19A-Gny-1
12841: PPUSH
12842: CALL_OW 88
12846: GO 12871
// if IsOk ( Kovalyuk ) then
12848: LD_EXP 39
12852: PPUSH
12853: CALL_OW 302
12857: IFFALSE 12871
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12859: LD_EXP 39
12863: PPUSH
12864: LD_STRING D19A-Kov-1
12866: PPUSH
12867: CALL_OW 88
// exit ;
12871: GO 12946
// end ; end ;
12873: GO 12876
12875: POP
// if IsOk ( Gnyevko ) then
12876: LD_EXP 35
12880: PPUSH
12881: CALL_OW 302
12885: IFFALSE 12911
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12887: LD_EXP 35
12891: PPUSH
12892: LD_STRING D19-Gny-1
12894: PPUSH
12895: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12899: LD_EXP 34
12903: PPUSH
12904: LD_STRING D19-Bur-1
12906: PPUSH
12907: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12911: LD_EXP 39
12915: PPUSH
12916: CALL_OW 302
12920: IFFALSE 12946
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12922: LD_EXP 39
12926: PPUSH
12927: LD_STRING D19-Kov-1
12929: PPUSH
12930: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12934: LD_EXP 34
12938: PPUSH
12939: LD_STRING D19-Bur-2
12941: PPUSH
12942: CALL_OW 88
// end ; end ;
12946: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12947: LD_EXP 18
12951: PUSH
12952: LD_EXP 19
12956: NOT
12957: AND
12958: PUSH
12959: LD_INT 16
12961: PPUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 3
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 70
12976: AND
12977: IFFALSE 13205
12979: GO 12981
12981: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12982: LD_STRING QAttackBw
12984: PPUSH
12985: CALL_OW 97
12989: PUSH
12990: LD_INT 1
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13041
12998: POP
// begin initiative := true ;
12999: LD_ADDR_EXP 31
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// DialogueOn ;
13007: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13011: LD_EXP 34
13015: PPUSH
13016: LD_STRING D21-Bur-1
13018: PPUSH
13019: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13023: LD_EXP 40
13027: PPUSH
13028: LD_STRING D21-Pla-1
13030: PPUSH
13031: CALL_OW 94
// DialogueOff ;
13035: CALL_OW 7
// end ; 2 :
13039: GO 13156
13041: LD_INT 2
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13144
13049: POP
// begin initiative := true ;
13050: LD_ADDR_EXP 31
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// DialogueOn ;
13058: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13062: LD_EXP 34
13066: PPUSH
13067: LD_STRING D22-Bur-1
13069: PPUSH
13070: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13074: LD_EXP 25
13078: NOT
13079: PUSH
13080: LD_EXP 22
13084: AND
13085: IFFALSE 13105
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1
13094: PPUSH
13095: CALL_OW 94
// SendReinforcements ;
13099: CALL 3302 0 0
// end else
13103: GO 13138
// if not westOutpostDestroyed then
13105: LD_EXP 22
13109: NOT
13110: IFFALSE 13126
// SayRadio ( Platonov , D22-Pla-1a ) else
13112: LD_EXP 40
13116: PPUSH
13117: LD_STRING D22-Pla-1a
13119: PPUSH
13120: CALL_OW 94
13124: GO 13138
// SayRadio ( Platonov , D22-Pla-1b ) ;
13126: LD_EXP 40
13130: PPUSH
13131: LD_STRING D22-Pla-1b
13133: PPUSH
13134: CALL_OW 94
// DialogueOff ;
13138: CALL_OW 7
// end ; 3 :
13142: GO 13156
13144: LD_INT 3
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13155
13152: POP
// begin end ; end ;
13153: GO 13156
13155: POP
// ChangeMissionObjectives ( M9 ) ;
13156: LD_STRING M9
13158: PPUSH
13159: CALL_OW 337
// wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// if IsOk ( Gnyevko ) then
13170: LD_EXP 35
13174: PPUSH
13175: CALL_OW 302
13179: IFFALSE 13205
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13181: LD_EXP 35
13185: PPUSH
13186: LD_STRING D23-Gny-1
13188: PPUSH
13189: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13193: LD_EXP 34
13197: PPUSH
13198: LD_STRING D23-Bur-1
13200: PPUSH
13201: CALL_OW 88
// end ; end ;
13205: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13206: LD_EXP 18
13210: PUSH
13211: LD_EXP 19
13215: AND
13216: PUSH
13217: LD_EXP 28
13221: NOT
13222: AND
13223: PUSH
13224: LD_EXP 45
13228: PPUSH
13229: LD_INT 91
13231: PUSH
13232: LD_EXP 34
13236: PUSH
13237: LD_INT 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 72
13249: AND
13250: IFFALSE 13294
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
// begin for i in belkovTeam do
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_EXP 45
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13285
// SetSide ( i , 3 ) ;
13271: LD_VAR 0 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: CALL_OW 235
13283: GO 13268
13285: POP
13286: POP
// ChangeMissionObjectives ( M9a ) ;
13287: LD_STRING M9a
13289: PPUSH
13290: CALL_OW 337
// end ;
13294: PPOPN 1
13296: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13297: LD_EXP 34
13301: PPUSH
13302: LD_EXP 36
13306: PPUSH
13307: CALL_OW 296
13311: PUSH
13312: LD_INT 6
13314: LESS
13315: PUSH
13316: LD_EXP 18
13320: AND
13321: PUSH
13322: LD_EXP 36
13326: PPUSH
13327: CALL_OW 302
13331: AND
13332: PUSH
13333: LD_INT 3
13335: PPUSH
13336: CALL_OW 463
13340: NOT
13341: AND
13342: IFFALSE 13657
13344: GO 13346
13346: DISABLE
13347: LD_INT 0
13349: PPUSH
13350: PPUSH
// begin InGameOn ;
13351: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13355: LD_EXP 34
13359: PPUSH
13360: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13364: LD_EXP 34
13368: PPUSH
13369: LD_INT 37
13371: PPUSH
13372: LD_INT 17
13374: PPUSH
13375: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13379: LD_EXP 34
13383: PPUSH
13384: LD_EXP 36
13388: PPUSH
13389: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13393: LD_EXP 36
13397: PPUSH
13398: LD_EXP 34
13402: PPUSH
13403: CALL_OW 119
// p := 0 ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// p := p + 1 ;
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: LD_VAR 0 2
13431: PUSH
13432: LD_INT 1
13434: PLUS
13435: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13436: LD_EXP 34
13440: PPUSH
13441: LD_EXP 36
13445: PPUSH
13446: CALL_OW 296
13450: PUSH
13451: LD_INT 4
13453: LESS
13454: PUSH
13455: LD_VAR 0 2
13459: PUSH
13460: LD_INT 6
13462: GREATER
13463: OR
13464: IFFALSE 13415
// ComTurnUnit ( Burlak , Belkov ) ;
13466: LD_EXP 34
13470: PPUSH
13471: LD_EXP 36
13475: PPUSH
13476: CALL_OW 119
// DialogueOn ;
13480: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13484: LD_EXP 36
13488: PPUSH
13489: LD_STRING D24-Bel-1
13491: PPUSH
13492: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13496: LD_EXP 34
13500: PPUSH
13501: LD_STRING D24-Bur-1
13503: PPUSH
13504: CALL_OW 88
// if belkovBrother then
13508: LD_EXP 32
13512: IFFALSE 13526
// Say ( Burlak , D24-Bur-1a ) ;
13514: LD_EXP 34
13518: PPUSH
13519: LD_STRING D24-Bur-1a
13521: PPUSH
13522: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13526: LD_EXP 36
13530: PPUSH
13531: LD_STRING D24-Bel-2
13533: PPUSH
13534: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13538: LD_EXP 34
13542: PPUSH
13543: LD_STRING D24-Bur-2
13545: PPUSH
13546: CALL_OW 88
// if vehCaptured then
13550: LD_EXP 16
13554: IFFALSE 13568
// Say ( Burlak , D24-Bur-2a ) ;
13556: LD_EXP 34
13560: PPUSH
13561: LD_STRING D24-Bur-2a
13563: PPUSH
13564: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13568: LD_EXP 40
13572: PPUSH
13573: LD_STRING D24-Pla-2
13575: PPUSH
13576: CALL_OW 94
// if not westOutpostDestroyed then
13580: LD_EXP 22
13584: NOT
13585: IFFALSE 13599
// SayRadio ( Platonov , D24-Pla-2a ) ;
13587: LD_EXP 40
13591: PPUSH
13592: LD_STRING D24-Pla-2a
13594: PPUSH
13595: CALL_OW 94
// DialogueOff ;
13599: CALL_OW 7
// InGameOff ;
13603: CALL_OW 9
// belkovSaved := true ;
13607: LD_ADDR_EXP 28
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_EXP 45
13624: PUSH
13625: LD_EXP 36
13629: UNION
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// SetSide ( i , 3 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 3
13641: PPUSH
13642: CALL_OW 235
13646: GO 13631
13648: POP
13649: POP
// ChangeMissionObjectives ( M9a ) ;
13650: LD_STRING M9a
13652: PPUSH
13653: CALL_OW 337
// end ;
13657: PPOPN 2
13659: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13660: LD_INT 3
13662: PPUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 95
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: CALL 58149 0 2
13696: IFFALSE 13881
13698: GO 13700
13700: DISABLE
// begin DialogueOn ;
13701: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13705: LD_INT 49
13707: PPUSH
13708: LD_INT 57
13710: PPUSH
13711: LD_INT 3
13713: PPUSH
13714: LD_INT 12
13716: NEG
13717: PPUSH
13718: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13722: LD_INT 49
13724: PPUSH
13725: LD_INT 57
13727: PPUSH
13728: LD_INT 3
13730: PPUSH
13731: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13735: LD_INT 49
13737: PPUSH
13738: LD_INT 57
13740: PPUSH
13741: CALL_OW 84
// if not eastOutpostDiscovered then
13745: LD_EXP 21
13749: NOT
13750: IFFALSE 13790
// begin Say ( Burlak , D15-Bur-1 ) ;
13752: LD_EXP 34
13756: PPUSH
13757: LD_STRING D15-Bur-1
13759: PPUSH
13760: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13764: LD_EXP 35
13768: PPUSH
13769: LD_STRING D15-Gny-1
13771: PPUSH
13772: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13776: LD_EXP 39
13780: PPUSH
13781: LD_STRING D15-Kov-1
13783: PPUSH
13784: CALL_OW 88
// end else
13788: GO 13826
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13790: LD_EXP 39
13794: PPUSH
13795: LD_STRING D16-Kov-1
13797: PPUSH
13798: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13802: LD_EXP 34
13806: PPUSH
13807: LD_STRING D16-Bur-1
13809: PPUSH
13810: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13814: LD_EXP 35
13818: PPUSH
13819: LD_STRING D16-Gny-1
13821: PPUSH
13822: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13826: LD_EXP 34
13830: PPUSH
13831: LD_STRING D15-Bur-2
13833: PPUSH
13834: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13838: LD_EXP 39
13842: PPUSH
13843: LD_STRING D15-Kov-2
13845: PPUSH
13846: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13850: LD_EXP 34
13854: PPUSH
13855: LD_STRING D15-Bur-3
13857: PPUSH
13858: CALL_OW 88
// DialogueOff ;
13862: CALL_OW 7
// westOutpostDiscovered := true ;
13866: LD_ADDR_EXP 20
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13874: LD_STRING M7
13876: PPUSH
13877: CALL_OW 337
// end ;
13881: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13882: LD_INT 3
13884: PPUSH
13885: LD_INT 22
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 95
13897: PUSH
13898: LD_INT 15
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL 58149 0 2
13918: IFFALSE 14059
13920: GO 13922
13922: DISABLE
// begin DialogueOn ;
13923: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13927: LD_INT 95
13929: PPUSH
13930: LD_INT 65
13932: PPUSH
13933: LD_INT 3
13935: PPUSH
13936: LD_INT 12
13938: NEG
13939: PPUSH
13940: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13944: LD_INT 95
13946: PPUSH
13947: LD_INT 65
13949: PPUSH
13950: LD_INT 3
13952: PPUSH
13953: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13957: LD_INT 95
13959: PPUSH
13960: LD_INT 65
13962: PPUSH
13963: CALL_OW 84
// if westOutpostDiscovered then
13967: LD_EXP 20
13971: IFFALSE 14011
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13973: LD_EXP 39
13977: PPUSH
13978: LD_STRING D16-Kov-1
13980: PPUSH
13981: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13985: LD_EXP 34
13989: PPUSH
13990: LD_STRING D16-Bur-1
13992: PPUSH
13993: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13997: LD_EXP 35
14001: PPUSH
14002: LD_STRING D16-Gny-1
14004: PPUSH
14005: CALL_OW 88
// end else
14009: GO 14047
// begin Say ( Burlak , D15-Bur-1 ) ;
14011: LD_EXP 34
14015: PPUSH
14016: LD_STRING D15-Bur-1
14018: PPUSH
14019: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14023: LD_EXP 35
14027: PPUSH
14028: LD_STRING D15-Gny-1
14030: PPUSH
14031: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14035: LD_EXP 39
14039: PPUSH
14040: LD_STRING D15-Kov-1
14042: PPUSH
14043: CALL_OW 88
// end ; DialogueOff ;
14047: CALL_OW 7
// eastOutpostDiscovered := true ;
14051: LD_ADDR_EXP 21
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// end ;
14059: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14060: LD_INT 8
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 50
14075: PUSH
14076: EMPTY
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 70
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: PUSH
14092: LD_EXP 20
14096: AND
14097: IFFALSE 14141
14099: GO 14101
14101: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14102: LD_EXP 34
14106: PPUSH
14107: LD_STRING D20-Bur-1
14109: PPUSH
14110: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14114: LD_EXP 40
14118: PPUSH
14119: LD_STRING D20-Pla-1
14121: PPUSH
14122: CALL_OW 94
// westOutpostDestroyed := true ;
14126: LD_ADDR_EXP 22
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14134: LD_STRING M8
14136: PPUSH
14137: CALL_OW 337
// end ;
14141: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14142: LD_INT 15
14144: PPUSH
14145: LD_INT 22
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 50
14157: PUSH
14158: EMPTY
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 70
14169: PUSH
14170: LD_INT 0
14172: EQUAL
14173: PUSH
14174: LD_EXP 21
14178: AND
14179: IFFALSE 14309
14181: GO 14183
14183: DISABLE
14184: LD_INT 0
14186: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14187: LD_EXP 34
14191: PPUSH
14192: LD_STRING D20-Bur-1
14194: PPUSH
14195: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14199: LD_EXP 40
14203: PPUSH
14204: LD_STRING D20-Pla-1
14206: PPUSH
14207: CALL_OW 94
// eastOutpostDestroyed := true ;
14211: LD_ADDR_EXP 23
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// stop_talking := true ;
14226: LD_ADDR_OWVAR 56
14230: PUSH
14231: LD_INT 1
14233: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 22
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 23
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: FOR_IN
14280: IFFALSE 14299
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14282: LD_VAR 0 1
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_INT 1500
14292: PPUSH
14293: CALL_OW 591
14297: GO 14279
14299: POP
14300: POP
// stop_talking := false ;
14301: LD_ADDR_OWVAR 56
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// end ;
14309: PPOPN 1
14311: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14312: LD_INT 19
14314: PPUSH
14315: LD_INT 22
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 70
14343: IFFALSE 14451
14345: GO 14347
14347: DISABLE
// begin DialogueOn ;
14348: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14352: LD_INT 19
14354: PPUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 70
14383: PPUSH
14384: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14388: LD_EXP 34
14392: PPUSH
14393: LD_STRING D26-Bur-1
14395: PPUSH
14396: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14400: LD_EXP 39
14404: PPUSH
14405: LD_STRING D26-Kov-1
14407: PPUSH
14408: CALL_OW 88
// if IsOk ( Gnyevko ) then
14412: LD_EXP 35
14416: PPUSH
14417: CALL_OW 302
14421: IFFALSE 14447
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14423: LD_EXP 35
14427: PPUSH
14428: LD_STRING D26-Gny-1
14430: PPUSH
14431: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14435: LD_EXP 34
14439: PPUSH
14440: LD_STRING D26-Bur-2
14442: PPUSH
14443: CALL_OW 88
// end ; DialogueOff ;
14447: CALL_OW 7
// end ;
14451: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14452: LD_EXP 21
14456: PUSH
14457: LD_EXP 23
14461: NOT
14462: AND
14463: PUSH
14464: LD_INT 17
14466: PPUSH
14467: LD_INT 22
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: LD_INT 24
14482: PUSH
14483: LD_INT 1000
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: PUSH
14503: LD_INT 1
14505: GREATER
14506: AND
14507: IFFALSE 14570
14509: GO 14511
14511: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14512: LD_EXP 35
14516: PPUSH
14517: LD_STRING D16A-Gny-1
14519: PPUSH
14520: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14524: LD_EXP 39
14528: PPUSH
14529: LD_STRING D16A-Kov-1
14531: PPUSH
14532: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14536: LD_EXP 35
14540: PPUSH
14541: CALL_OW 302
14545: PUSH
14546: LD_EXP 39
14550: PPUSH
14551: CALL_OW 302
14555: OR
14556: IFFALSE 14570
// Say ( Burlak , D16A-Bur-1 ) ;
14558: LD_EXP 34
14562: PPUSH
14563: LD_STRING D16A-Bur-1
14565: PPUSH
14566: CALL_OW 88
// end ;
14570: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14571: LD_INT 3
14573: PPUSH
14574: LD_INT 9
14576: PPUSH
14577: CALL_OW 294
14581: IFFALSE 14594
14583: GO 14585
14585: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14586: LD_ADDR_EXP 24
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// end ;
14594: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 10
14600: PPUSH
14601: CALL_OW 294
14605: IFFALSE 14625
14607: GO 14609
14609: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14610: LD_ADDR_EXP 27
14614: PUSH
14615: LD_EXP 27
14619: PPUSH
14620: CALL 56227 0 1
14624: ST_TO_ADDR
14625: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 11
14631: PPUSH
14632: CALL_OW 294
14636: IFFALSE 14656
14638: GO 14640
14640: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14641: LD_ADDR_EXP 27
14645: PUSH
14646: LD_EXP 27
14650: PPUSH
14651: CALL 56227 0 1
14655: ST_TO_ADDR
14656: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14657: LD_INT 3
14659: PPUSH
14660: LD_INT 12
14662: PPUSH
14663: CALL_OW 294
14667: IFFALSE 14687
14669: GO 14671
14671: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14672: LD_ADDR_EXP 27
14676: PUSH
14677: LD_EXP 27
14681: PPUSH
14682: CALL 56227 0 1
14686: ST_TO_ADDR
14687: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14688: LD_INT 3
14690: PPUSH
14691: LD_INT 13
14693: PPUSH
14694: CALL_OW 294
14698: IFFALSE 14718
14700: GO 14702
14702: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14703: LD_ADDR_EXP 27
14707: PUSH
14708: LD_EXP 27
14712: PPUSH
14713: CALL 56227 0 1
14717: ST_TO_ADDR
14718: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14719: LD_INT 3
14721: PPUSH
14722: LD_INT 14
14724: PPUSH
14725: CALL_OW 294
14729: IFFALSE 14749
14731: GO 14733
14733: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14734: LD_ADDR_EXP 27
14738: PUSH
14739: LD_EXP 27
14743: PPUSH
14744: CALL 56227 0 1
14748: ST_TO_ADDR
14749: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14750: LD_EXP 27
14754: PUSH
14755: LD_INT 5
14757: GREATEREQUAL
14758: PUSH
14759: LD_EXP 14
14763: AND
14764: IFFALSE 14784
14766: GO 14768
14768: DISABLE
// begin allMapPointsSpotted := true ;
14769: LD_ADDR_EXP 26
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14777: LD_STRING M10
14779: PPUSH
14780: CALL_OW 337
// end ;
14784: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14785: LD_EXP 26
14789: PUSH
14790: LD_EXP 22
14794: AND
14795: IFFALSE 14807
14797: GO 14799
14799: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14800: LD_STRING M10a
14802: PPUSH
14803: CALL_OW 337
// end ;
14807: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14808: LD_EXP 14
14812: IFFALSE 15445
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
// begin wasOutsideBeria := false ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// wantToTalk := false ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// westOutpostReported := false ;
14840: LD_ADDR_VAR 0 4
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// eastOutpostReported := false ;
14848: LD_ADDR_VAR 0 5
14852: PUSH
14853: LD_INT 0
14855: ST_TO_ADDR
// timer := 0 0$0 ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14864: LD_INT 70
14866: PPUSH
14867: CALL_OW 67
// timer := timer + 0 0$2 ;
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 70
14883: PLUS
14884: ST_TO_ADDR
// if timer >= 0 0$30 then
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 1050
14892: GREATEREQUAL
14893: IFFALSE 14903
// wantToTalk := true ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 9
14920: GREATER
14921: IFFALSE 14931
// wasOutsideBeria := true ;
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14931: LD_VAR 0 2
14935: PUSH
14936: LD_VAR 0 3
14940: AND
14941: PUSH
14942: LD_EXP 34
14946: PPUSH
14947: LD_EXP 40
14951: PPUSH
14952: CALL_OW 296
14956: PUSH
14957: LD_INT 8
14959: LESS
14960: PUSH
14961: LD_EXP 34
14965: PPUSH
14966: CALL_OW 310
14970: PPUSH
14971: LD_EXP 40
14975: PPUSH
14976: CALL_OW 296
14980: PUSH
14981: LD_INT 8
14983: LESS
14984: OR
14985: AND
14986: IFFALSE 15334
// begin timer := 0 0$0 ;
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// wantToTalk := false ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// wasOutsideBeria := false ;
15004: LD_ADDR_VAR 0 3
15008: PUSH
15009: LD_INT 0
15011: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15012: LD_EXP 40
15016: PPUSH
15017: CALL_OW 87
// DialogueOn ;
15021: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15025: LD_EXP 40
15029: PPUSH
15030: LD_STRING D25-Pla-1
15032: PPUSH
15033: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15037: LD_VAR 0 4
15041: NOT
15042: PUSH
15043: LD_VAR 0 5
15047: NOT
15048: AND
15049: PUSH
15050: LD_EXP 20
15054: AND
15055: PUSH
15056: LD_EXP 21
15060: AND
15061: IFFALSE 15141
// begin westOutpostReported := true ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// eastOutpostReported := true ;
15071: LD_ADDR_VAR 0 5
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15079: LD_EXP 34
15083: PPUSH
15084: LD_STRING D25-Bur-1
15086: PPUSH
15087: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15091: LD_EXP 24
15095: PUSH
15096: LD_EXP 22
15100: NOT
15101: AND
15102: IFFALSE 15139
// begin Say ( Burlak , D25b-Bur-1 ) ;
15104: LD_EXP 34
15108: PPUSH
15109: LD_STRING D25b-Bur-1
15111: PPUSH
15112: CALL_OW 88
// if not reinforcementsGained then
15116: LD_EXP 25
15120: NOT
15121: IFFALSE 15139
// begin Say ( Platonov , D25b-Pla-1 ) ;
15123: LD_EXP 40
15127: PPUSH
15128: LD_STRING D25b-Pla-1
15130: PPUSH
15131: CALL_OW 88
// SendReinforcements ( ) ;
15135: CALL 3302 0 0
// end ; end ; end else
15139: GO 15330
// if not westOutpostReported and westOutpostDiscovered then
15141: LD_VAR 0 4
15145: NOT
15146: PUSH
15147: LD_EXP 20
15151: AND
15152: IFFALSE 15224
// begin westOutpostReported := true ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15162: LD_EXP 34
15166: PPUSH
15167: LD_STRING D25a-Bur-1b
15169: PPUSH
15170: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15174: LD_EXP 24
15178: PUSH
15179: LD_EXP 22
15183: NOT
15184: AND
15185: IFFALSE 15222
// begin Say ( Burlak , D25b-Bur-1 ) ;
15187: LD_EXP 34
15191: PPUSH
15192: LD_STRING D25b-Bur-1
15194: PPUSH
15195: CALL_OW 88
// if not reinforcementsGained then
15199: LD_EXP 25
15203: NOT
15204: IFFALSE 15222
// begin Say ( Platonov , D25b-Pla-1 ) ;
15206: LD_EXP 40
15210: PPUSH
15211: LD_STRING D25b-Pla-1
15213: PPUSH
15214: CALL_OW 88
// SendReinforcements ( ) ;
15218: CALL 3302 0 0
// end ; end ; end else
15222: GO 15330
// if not eastOutpostReported and eastOutpostDiscovered then
15224: LD_VAR 0 5
15228: NOT
15229: PUSH
15230: LD_EXP 21
15234: AND
15235: IFFALSE 15259
// begin eastOutpostReported := true ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15245: LD_EXP 34
15249: PPUSH
15250: LD_STRING D25a-Bur-1a
15252: PPUSH
15253: CALL_OW 88
// end else
15257: GO 15330
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15259: LD_EXP 20
15263: NOT
15264: PUSH
15265: LD_EXP 21
15269: NOT
15270: OR
15271: IFFALSE 15299
// begin Say ( Burlak , D25a-Bur-1 ) ;
15273: LD_EXP 34
15277: PPUSH
15278: LD_STRING D25a-Bur-1
15280: PPUSH
15281: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15285: LD_EXP 40
15289: PPUSH
15290: LD_STRING D25c-Pla-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15330
// if not allMapPointsSpotted then
15299: LD_EXP 26
15303: NOT
15304: IFFALSE 15330
// begin Say ( Burlak , D25a-Bur-1 ) ;
15306: LD_EXP 34
15310: PPUSH
15311: LD_STRING D25a-Bur-1
15313: PPUSH
15314: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15318: LD_EXP 40
15322: PPUSH
15323: LD_STRING D25c-Pla-1a
15325: PPUSH
15326: CALL_OW 88
// end ; DialogueOff ;
15330: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15334: LD_EXP 26
15338: PUSH
15339: LD_EXP 22
15343: AND
15344: IFFALSE 14864
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15346: LD_INT 22
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 91
15368: PUSH
15369: LD_EXP 40
15373: PUSH
15374: LD_INT 10
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: IFFALSE 15434
// begin if not belkovDied and not belkovSaved then
15393: LD_EXP 19
15397: NOT
15398: PUSH
15399: LD_EXP 28
15403: NOT
15404: AND
15405: IFFALSE 15428
// begin if Query ( QContMission ) = 1 then
15407: LD_STRING QContMission
15409: PPUSH
15410: CALL_OW 97
15414: PUSH
15415: LD_INT 1
15417: EQUAL
15418: IFFALSE 15426
// begin EndMission ;
15420: CALL 15448 0 0
// exit ;
15424: GO 15445
// end ; end else
15426: GO 15434
// begin EndMission ;
15428: CALL 15448 0 0
// exit ;
15432: GO 15445
// end ; end ; wait ( 0 0$10 ) ;
15434: LD_INT 350
15436: PPUSH
15437: CALL_OW 67
// until false ;
15441: LD_INT 0
15443: IFFALSE 15346
// end ;
15445: PPOPN 5
15447: END
// function EndMission ; var i , tmp ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
// if initiative then
15453: LD_EXP 31
15457: IFFALSE 15471
// AddMedal ( Initiative , 1 ) else
15459: LD_STRING Initiative
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 101
15469: GO 15502
// if not eastOutpostDestroyed then
15471: LD_EXP 23
15475: NOT
15476: IFFALSE 15491
// AddMedal ( Initiative , - 2 ) else
15478: LD_STRING Initiative
15480: PPUSH
15481: LD_INT 2
15483: NEG
15484: PPUSH
15485: CALL_OW 101
15489: GO 15502
// AddMedal ( Initiative , - 1 ) ;
15491: LD_STRING Initiative
15493: PPUSH
15494: LD_INT 1
15496: NEG
15497: PPUSH
15498: CALL_OW 101
// if not belkovDied and belkovSaved then
15502: LD_EXP 19
15506: NOT
15507: PUSH
15508: LD_EXP 28
15512: AND
15513: IFFALSE 15527
// AddMedal ( Belkov , 1 ) else
15515: LD_STRING Belkov
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 101
15525: GO 15622
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15527: LD_EXP 45
15531: PPUSH
15532: LD_INT 22
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: IFFALSE 15560
// AddMedal ( Belkov , 2 ) else
15548: LD_STRING Belkov
15550: PPUSH
15551: LD_INT 2
15553: PPUSH
15554: CALL_OW 101
15558: GO 15622
// if belkovDied then
15560: LD_EXP 19
15564: IFFALSE 15579
// AddMedal ( Belkov , - 1 ) else
15566: LD_STRING Belkov
15568: PPUSH
15569: LD_INT 1
15571: NEG
15572: PPUSH
15573: CALL_OW 101
15577: GO 15622
// if not belkovSaved then
15579: LD_EXP 28
15583: NOT
15584: IFFALSE 15599
// AddMedal ( Belkov , - 2 ) else
15586: LD_STRING Belkov
15588: PPUSH
15589: LD_INT 2
15591: NEG
15592: PPUSH
15593: CALL_OW 101
15597: GO 15622
// if belkovDied and belkovSaved then
15599: LD_EXP 19
15603: PUSH
15604: LD_EXP 28
15608: AND
15609: IFFALSE 15622
// AddMedal ( Belkov , - 3 ) ;
15611: LD_STRING Belkov
15613: PPUSH
15614: LD_INT 3
15616: NEG
15617: PPUSH
15618: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15622: LD_EXP 30
15626: PUSH
15627: LD_INT 0
15629: EQUAL
15630: IFFALSE 15644
// AddMedal ( NoLosses , 1 ) else
15632: LD_STRING NoLosses
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 101
15642: GO 15655
// AddMedal ( NoLosses , - 1 ) ;
15644: LD_STRING NoLosses
15646: PPUSH
15647: LD_INT 1
15649: NEG
15650: PPUSH
15651: CALL_OW 101
// GiveMedals ( Main ) ;
15655: LD_STRING Main
15657: PPUSH
15658: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15662: LD_INT 22
15664: PUSH
15665: LD_INT 3
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 21
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15706: LD_EXP 34
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING Burlak
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if IsLive ( Gnyevko ) then
15724: LD_EXP 35
15728: PPUSH
15729: CALL_OW 300
15733: IFFALSE 15753
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15735: LD_EXP 35
15739: PPUSH
15740: LD_EXP 3
15744: PUSH
15745: LD_STRING Gnyevko
15747: STR
15748: PPUSH
15749: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15753: LD_EXP 39
15757: PPUSH
15758: CALL_OW 300
15762: IFFALSE 15782
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15764: LD_EXP 39
15768: PPUSH
15769: LD_EXP 3
15773: PUSH
15774: LD_STRING Kovalyuk
15776: STR
15777: PPUSH
15778: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15782: LD_EXP 36
15786: PPUSH
15787: CALL_OW 300
15791: PUSH
15792: LD_EXP 28
15796: AND
15797: IFFALSE 15817
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15799: LD_EXP 36
15803: PPUSH
15804: LD_EXP 3
15808: PUSH
15809: LD_STRING Belkov
15811: STR
15812: PPUSH
15813: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15817: LD_EXP 37
15821: PPUSH
15822: CALL_OW 300
15826: IFFALSE 15846
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15828: LD_EXP 37
15832: PPUSH
15833: LD_EXP 3
15837: PUSH
15838: LD_STRING Kirilenkova
15840: STR
15841: PPUSH
15842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 23
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PUSH
15886: LD_EXP 34
15890: PUSH
15891: LD_EXP 35
15895: PUSH
15896: LD_EXP 39
15900: PUSH
15901: LD_EXP 36
15905: PUSH
15906: LD_EXP 37
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: DIFF
15918: PPUSH
15919: LD_EXP 3
15923: PUSH
15924: LD_STRING burlakTeam
15926: STR
15927: PPUSH
15928: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15932: LD_INT 22
15934: PUSH
15935: LD_INT 6
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 23
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 21
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: PUSH
15972: LD_EXP 40
15976: PUSH
15977: LD_EXP 38
15981: PUSH
15982: LD_EXP 36
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_EXP 45
15996: UNION
15997: DIFF
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING kirovTeam
16006: STR
16007: PPUSH
16008: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16012: LD_EXP 23
16016: PPUSH
16017: LD_STRING 02_EasternOutpostDestroyed
16019: PPUSH
16020: CALL_OW 39
// tmp := [ ] ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: EMPTY
16030: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 21
16048: PUSH
16049: LD_INT 3
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 69
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16142
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 266
16087: PUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 267
16097: PUSH
16098: LD_VAR 0 2
16102: PPUSH
16103: CALL_OW 250
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 251
16117: PUSH
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 254
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL 54866 0 2
16139: ST_TO_ADDR
16140: GO 16065
16142: POP
16143: POP
// SaveVariable ( tmp , 02_Beria ) ;
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_STRING 02_Beria
16151: PPUSH
16152: CALL_OW 39
// tmp := [ ] ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 6
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 3
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16274
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_VAR 0 2
16214: PPUSH
16215: CALL_OW 266
16219: PUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 267
16229: PUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 250
16239: PUSH
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 251
16249: PUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 254
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL 54866 0 2
16271: ST_TO_ADDR
16272: GO 16197
16274: POP
16275: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16276: LD_VAR 0 3
16280: PPUSH
16281: LD_STRING 02_Kirov
16283: PPUSH
16284: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16288: LD_INT 22
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: PPUSH
16317: CALL 19185 0 1
16321: PPUSH
16322: LD_STRING 02_VehiclesCount
16324: PPUSH
16325: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16329: LD_INT 22
16331: PUSH
16332: LD_INT 6
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: PPUSH
16358: CALL 19185 0 1
16362: PPUSH
16363: LD_STRING 02_KirovVehiclesCount
16365: PPUSH
16366: CALL_OW 39
// YouWin ;
16370: CALL_OW 103
// end ; end_of_file
16374: LD_VAR 0 1
16378: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16379: LD_INT 420
16381: PPUSH
16382: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL 8000 0 2
// end ;
16400: PPOPN 5
16402: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL 76125 0 1
// if un = Burlak then
16412: LD_VAR 0 1
16416: PUSH
16417: LD_EXP 34
16421: EQUAL
16422: IFFALSE 16431
// YouLost ( Burlak ) ;
16424: LD_STRING Burlak
16426: PPUSH
16427: CALL_OW 104
// if un = Platonov then
16431: LD_VAR 0 1
16435: PUSH
16436: LD_EXP 40
16440: EQUAL
16441: IFFALSE 16450
// YouLost ( Platonov ) ;
16443: LD_STRING Platonov
16445: PPUSH
16446: CALL_OW 104
// if un = Kurin then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 38
16459: EQUAL
16460: IFFALSE 16469
// YouLost ( Kurin ) ;
16462: LD_STRING Kurin
16464: PPUSH
16465: CALL_OW 104
// if un = Belkov then
16469: LD_VAR 0 1
16473: PUSH
16474: LD_EXP 36
16478: EQUAL
16479: IFFALSE 16489
// belkovDied := true ;
16481: LD_ADDR_EXP 19
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if un in belkovTeam then
16489: LD_VAR 0 1
16493: PUSH
16494: LD_EXP 45
16498: IN
16499: IFFALSE 16532
// begin belkovTeam := belkovTeam diff un ;
16501: LD_ADDR_EXP 45
16505: PUSH
16506: LD_EXP 45
16510: PUSH
16511: LD_VAR 0 1
16515: DIFF
16516: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16517: LD_ADDR_EXP 29
16521: PUSH
16522: LD_EXP 29
16526: PPUSH
16527: CALL 56227 0 1
16531: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16532: LD_VAR 0 1
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: IN
16577: IFFALSE 16594
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16579: LD_ADDR_EXP 30
16583: PUSH
16584: LD_EXP 30
16588: PPUSH
16589: CALL 56227 0 1
16593: ST_TO_ADDR
// if un in usWestForces then
16594: LD_VAR 0 1
16598: PUSH
16599: LD_EXP 46
16603: IN
16604: IFFALSE 16622
// usWestForces := usWestForces diff un ;
16606: LD_ADDR_EXP 46
16610: PUSH
16611: LD_EXP 46
16615: PUSH
16616: LD_VAR 0 1
16620: DIFF
16621: ST_TO_ADDR
// if un in usEastForces then
16622: LD_VAR 0 1
16626: PUSH
16627: LD_EXP 47
16631: IN
16632: IFFALSE 16650
// usEastForces := usEastForces diff un ;
16634: LD_ADDR_EXP 47
16638: PUSH
16639: LD_EXP 47
16643: PUSH
16644: LD_VAR 0 1
16648: DIFF
16649: ST_TO_ADDR
// if un = Dickens then
16650: LD_VAR 0 1
16654: PUSH
16655: LD_EXP 49
16659: EQUAL
16660: IFFALSE 16678
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
16662: LD_INT 1
16664: PPUSH
16665: LD_EXP 3
16669: PUSH
16670: LD_STRING DickensKilled
16672: STR
16673: PPUSH
16674: CALL_OW 39
// end ;
16678: PPOPN 1
16680: END
// on BuildingComplete ( b ) do var mech ;
16681: LD_INT 0
16683: PPUSH
// begin if GetSide ( b ) = 3 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 3
16696: EQUAL
16697: IFFALSE 16756
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 6
16711: PUSH
16712: LD_INT 7
16714: PUSH
16715: LD_INT 8
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: IN
16723: IFFALSE 16733
// hasLab := true ;
16725: LD_ADDR_EXP 9
16729: PUSH
16730: LD_INT 1
16732: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 266
16742: PUSH
16743: LD_INT 2
16745: EQUAL
16746: IFFALSE 16756
// hasWorkshop := true ;
16748: LD_ADDR_EXP 10
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 255
16765: PUSH
16766: LD_INT 6
16768: EQUAL
16769: IFFALSE 16843
// begin if GetBType ( b ) = b_workshop then
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL_OW 266
16780: PUSH
16781: LD_INT 2
16783: EQUAL
16784: IFFALSE 16843
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_EXP 43
16795: PPUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 3
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 72
16810: ST_TO_ADDR
// if not mech then
16811: LD_VAR 0 2
16815: NOT
16816: IFFALSE 16820
// exit ;
16818: GO 16843
// ComExit ( mech ) ;
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL 55264 0 1
// AddComEnterUnit ( mech , b ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 180
// end ; end ; end ;
16843: PPOPN 2
16845: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL 76183 0 2
// if GetSide ( vehicle ) = 3 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 3
16872: EQUAL
16873: IFFALSE 16898
// begin hasTank := true ;
16875: LD_ADDR_EXP 12
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16883: LD_ADDR_EXP 15
16887: PUSH
16888: LD_EXP 15
16892: PPUSH
16893: CALL 56227 0 1
16897: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 255
16907: PUSH
16908: LD_INT 6
16910: EQUAL
16911: IFFALSE 16922
// KirovAttack ( vehicle ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL 3608 0 1
// end ;
16922: PPOPN 2
16924: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16925: LD_VAR 0 1
16929: PUSH
16930: LD_EXP 33
16934: EQUAL
16935: IFFALSE 16941
// BelkovAttackScript ;
16937: CALL 1673 0 0
// end ;
16941: PPOPN 1
16943: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16944: LD_INT 0
16946: PPUSH
// begin if side = 1 then
16947: LD_VAR 0 3
16951: PUSH
16952: LD_INT 1
16954: EQUAL
16955: IFFALSE 16965
// vehCaptured := true ;
16957: LD_ADDR_EXP 16
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// end ;
16965: PPOPN 5
16967: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 3
16975: EQUAL
16976: PUSH
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 6
16984: EQUAL
16985: AND
16986: IFFALSE 16996
// allianceAttacked := true ;
16988: LD_ADDR_EXP 13
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// end ; end_of_file
16996: PPOPN 2
16998: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
// if exist_mode then
17003: LD_VAR 0 2
17007: IFFALSE 17053
// begin unit := CreateCharacter ( prefix & ident ) ;
17009: LD_ADDR_VAR 0 5
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 1
17023: STR
17024: PPUSH
17025: CALL_OW 34
17029: ST_TO_ADDR
// if unit then
17030: LD_VAR 0 5
17034: IFFALSE 17051
// DeleteCharacters ( prefix & ident ) ;
17036: LD_VAR 0 3
17040: PUSH
17041: LD_VAR 0 1
17045: STR
17046: PPUSH
17047: CALL_OW 40
// end else
17051: GO 17068
// unit := NewCharacter ( ident ) ;
17053: LD_ADDR_VAR 0 5
17057: PUSH
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 25
17067: ST_TO_ADDR
// result := unit ;
17068: LD_ADDR_VAR 0 4
17072: PUSH
17073: LD_VAR 0 5
17077: ST_TO_ADDR
// end ;
17078: LD_VAR 0 4
17082: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
// if exist_mode then
17087: LD_VAR 0 2
17091: IFFALSE 17116
// unit := CreateCharacter ( prefix & ident ) else
17093: LD_ADDR_VAR 0 5
17097: PUSH
17098: LD_VAR 0 3
17102: PUSH
17103: LD_VAR 0 1
17107: STR
17108: PPUSH
17109: CALL_OW 34
17113: ST_TO_ADDR
17114: GO 17131
// unit := NewCharacter ( ident ) ;
17116: LD_ADDR_VAR 0 5
17120: PUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: CALL_OW 25
17130: ST_TO_ADDR
// result := unit ;
17131: LD_ADDR_VAR 0 4
17135: PUSH
17136: LD_VAR 0 5
17140: ST_TO_ADDR
// end ;
17141: LD_VAR 0 4
17145: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17146: LD_INT 0
17148: PPUSH
17149: PPUSH
// if not side or not nation then
17150: LD_VAR 0 1
17154: NOT
17155: PUSH
17156: LD_VAR 0 2
17160: NOT
17161: OR
17162: IFFALSE 17166
// exit ;
17164: GO 17934
// case nation of nation_american :
17166: LD_VAR 0 2
17170: PUSH
17171: LD_INT 1
17173: DOUBLE
17174: EQUAL
17175: IFTRUE 17179
17177: GO 17393
17179: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17180: LD_ADDR_VAR 0 4
17184: PUSH
17185: LD_INT 35
17187: PUSH
17188: LD_INT 45
17190: PUSH
17191: LD_INT 46
17193: PUSH
17194: LD_INT 47
17196: PUSH
17197: LD_INT 82
17199: PUSH
17200: LD_INT 83
17202: PUSH
17203: LD_INT 84
17205: PUSH
17206: LD_INT 85
17208: PUSH
17209: LD_INT 86
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: LD_INT 6
17220: PUSH
17221: LD_INT 15
17223: PUSH
17224: LD_INT 16
17226: PUSH
17227: LD_INT 7
17229: PUSH
17230: LD_INT 12
17232: PUSH
17233: LD_INT 13
17235: PUSH
17236: LD_INT 10
17238: PUSH
17239: LD_INT 14
17241: PUSH
17242: LD_INT 20
17244: PUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 22
17250: PUSH
17251: LD_INT 25
17253: PUSH
17254: LD_INT 32
17256: PUSH
17257: LD_INT 27
17259: PUSH
17260: LD_INT 36
17262: PUSH
17263: LD_INT 69
17265: PUSH
17266: LD_INT 39
17268: PUSH
17269: LD_INT 34
17271: PUSH
17272: LD_INT 40
17274: PUSH
17275: LD_INT 48
17277: PUSH
17278: LD_INT 49
17280: PUSH
17281: LD_INT 50
17283: PUSH
17284: LD_INT 51
17286: PUSH
17287: LD_INT 52
17289: PUSH
17290: LD_INT 53
17292: PUSH
17293: LD_INT 54
17295: PUSH
17296: LD_INT 55
17298: PUSH
17299: LD_INT 56
17301: PUSH
17302: LD_INT 57
17304: PUSH
17305: LD_INT 58
17307: PUSH
17308: LD_INT 59
17310: PUSH
17311: LD_INT 60
17313: PUSH
17314: LD_INT 61
17316: PUSH
17317: LD_INT 62
17319: PUSH
17320: LD_INT 80
17322: PUSH
17323: LD_INT 82
17325: PUSH
17326: LD_INT 83
17328: PUSH
17329: LD_INT 84
17331: PUSH
17332: LD_INT 85
17334: PUSH
17335: LD_INT 86
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: ST_TO_ADDR
17391: GO 17858
17393: LD_INT 2
17395: DOUBLE
17396: EQUAL
17397: IFTRUE 17401
17399: GO 17627
17401: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17402: LD_ADDR_VAR 0 4
17406: PUSH
17407: LD_INT 35
17409: PUSH
17410: LD_INT 45
17412: PUSH
17413: LD_INT 46
17415: PUSH
17416: LD_INT 47
17418: PUSH
17419: LD_INT 82
17421: PUSH
17422: LD_INT 83
17424: PUSH
17425: LD_INT 84
17427: PUSH
17428: LD_INT 85
17430: PUSH
17431: LD_INT 87
17433: PUSH
17434: LD_INT 70
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: LD_INT 11
17442: PUSH
17443: LD_INT 3
17445: PUSH
17446: LD_INT 4
17448: PUSH
17449: LD_INT 5
17451: PUSH
17452: LD_INT 6
17454: PUSH
17455: LD_INT 15
17457: PUSH
17458: LD_INT 18
17460: PUSH
17461: LD_INT 7
17463: PUSH
17464: LD_INT 17
17466: PUSH
17467: LD_INT 8
17469: PUSH
17470: LD_INT 20
17472: PUSH
17473: LD_INT 21
17475: PUSH
17476: LD_INT 22
17478: PUSH
17479: LD_INT 72
17481: PUSH
17482: LD_INT 26
17484: PUSH
17485: LD_INT 69
17487: PUSH
17488: LD_INT 39
17490: PUSH
17491: LD_INT 40
17493: PUSH
17494: LD_INT 41
17496: PUSH
17497: LD_INT 42
17499: PUSH
17500: LD_INT 43
17502: PUSH
17503: LD_INT 48
17505: PUSH
17506: LD_INT 49
17508: PUSH
17509: LD_INT 50
17511: PUSH
17512: LD_INT 51
17514: PUSH
17515: LD_INT 52
17517: PUSH
17518: LD_INT 53
17520: PUSH
17521: LD_INT 54
17523: PUSH
17524: LD_INT 55
17526: PUSH
17527: LD_INT 56
17529: PUSH
17530: LD_INT 60
17532: PUSH
17533: LD_INT 61
17535: PUSH
17536: LD_INT 62
17538: PUSH
17539: LD_INT 66
17541: PUSH
17542: LD_INT 67
17544: PUSH
17545: LD_INT 68
17547: PUSH
17548: LD_INT 81
17550: PUSH
17551: LD_INT 82
17553: PUSH
17554: LD_INT 83
17556: PUSH
17557: LD_INT 84
17559: PUSH
17560: LD_INT 85
17562: PUSH
17563: LD_INT 87
17565: PUSH
17566: LD_INT 88
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: ST_TO_ADDR
17625: GO 17858
17627: LD_INT 3
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17857
17635: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17636: LD_ADDR_VAR 0 4
17640: PUSH
17641: LD_INT 46
17643: PUSH
17644: LD_INT 47
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: LD_INT 82
17655: PUSH
17656: LD_INT 83
17658: PUSH
17659: LD_INT 84
17661: PUSH
17662: LD_INT 85
17664: PUSH
17665: LD_INT 86
17667: PUSH
17668: LD_INT 11
17670: PUSH
17671: LD_INT 9
17673: PUSH
17674: LD_INT 20
17676: PUSH
17677: LD_INT 19
17679: PUSH
17680: LD_INT 21
17682: PUSH
17683: LD_INT 24
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_INT 25
17691: PUSH
17692: LD_INT 28
17694: PUSH
17695: LD_INT 29
17697: PUSH
17698: LD_INT 30
17700: PUSH
17701: LD_INT 31
17703: PUSH
17704: LD_INT 37
17706: PUSH
17707: LD_INT 38
17709: PUSH
17710: LD_INT 32
17712: PUSH
17713: LD_INT 27
17715: PUSH
17716: LD_INT 33
17718: PUSH
17719: LD_INT 69
17721: PUSH
17722: LD_INT 39
17724: PUSH
17725: LD_INT 34
17727: PUSH
17728: LD_INT 40
17730: PUSH
17731: LD_INT 71
17733: PUSH
17734: LD_INT 23
17736: PUSH
17737: LD_INT 44
17739: PUSH
17740: LD_INT 48
17742: PUSH
17743: LD_INT 49
17745: PUSH
17746: LD_INT 50
17748: PUSH
17749: LD_INT 51
17751: PUSH
17752: LD_INT 52
17754: PUSH
17755: LD_INT 53
17757: PUSH
17758: LD_INT 54
17760: PUSH
17761: LD_INT 55
17763: PUSH
17764: LD_INT 56
17766: PUSH
17767: LD_INT 57
17769: PUSH
17770: LD_INT 58
17772: PUSH
17773: LD_INT 59
17775: PUSH
17776: LD_INT 63
17778: PUSH
17779: LD_INT 64
17781: PUSH
17782: LD_INT 65
17784: PUSH
17785: LD_INT 82
17787: PUSH
17788: LD_INT 83
17790: PUSH
17791: LD_INT 84
17793: PUSH
17794: LD_INT 85
17796: PUSH
17797: LD_INT 86
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: ST_TO_ADDR
17855: GO 17858
17857: POP
// if state > - 1 and state < 3 then
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: GREATER
17867: PUSH
17868: LD_VAR 0 3
17872: PUSH
17873: LD_INT 3
17875: LESS
17876: AND
17877: IFFALSE 17934
// for i in result do
17879: LD_ADDR_VAR 0 5
17883: PUSH
17884: LD_VAR 0 4
17888: PUSH
17889: FOR_IN
17890: IFFALSE 17932
// if GetTech ( i , side ) <> state then
17892: LD_VAR 0 5
17896: PPUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 321
17906: PUSH
17907: LD_VAR 0 3
17911: NONEQUAL
17912: IFFALSE 17930
// result := result diff i ;
17914: LD_ADDR_VAR 0 4
17918: PUSH
17919: LD_VAR 0 4
17923: PUSH
17924: LD_VAR 0 5
17928: DIFF
17929: ST_TO_ADDR
17930: GO 17889
17932: POP
17933: POP
// end ;
17934: LD_VAR 0 4
17938: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17939: LD_INT 0
17941: PPUSH
17942: PPUSH
17943: PPUSH
// result := true ;
17944: LD_ADDR_VAR 0 3
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17952: LD_ADDR_VAR 0 5
17956: PUSH
17957: LD_VAR 0 2
17961: PPUSH
17962: CALL_OW 480
17966: ST_TO_ADDR
// if not tmp then
17967: LD_VAR 0 5
17971: NOT
17972: IFFALSE 17976
// exit ;
17974: GO 18025
// for i in tmp do
17976: LD_ADDR_VAR 0 4
17980: PUSH
17981: LD_VAR 0 5
17985: PUSH
17986: FOR_IN
17987: IFFALSE 18023
// if GetTech ( i , side ) <> state_researched then
17989: LD_VAR 0 4
17993: PPUSH
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 321
18003: PUSH
18004: LD_INT 2
18006: NONEQUAL
18007: IFFALSE 18021
// begin result := false ;
18009: LD_ADDR_VAR 0 3
18013: PUSH
18014: LD_INT 0
18016: ST_TO_ADDR
// exit ;
18017: POP
18018: POP
18019: GO 18025
// end ;
18021: GO 17986
18023: POP
18024: POP
// end ;
18025: LD_VAR 0 3
18029: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
18041: PPUSH
18042: PPUSH
18043: PPUSH
18044: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18045: LD_VAR 0 1
18049: NOT
18050: PUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 257
18060: PUSH
18061: LD_INT 9
18063: NONEQUAL
18064: OR
18065: IFFALSE 18069
// exit ;
18067: GO 18642
// side := GetSide ( unit ) ;
18069: LD_ADDR_VAR 0 9
18073: PUSH
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 255
18083: ST_TO_ADDR
// tech_space := tech_spacanom ;
18084: LD_ADDR_VAR 0 12
18088: PUSH
18089: LD_INT 29
18091: ST_TO_ADDR
// tech_time := tech_taurad ;
18092: LD_ADDR_VAR 0 13
18096: PUSH
18097: LD_INT 28
18099: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18100: LD_ADDR_VAR 0 11
18104: PUSH
18105: LD_VAR 0 1
18109: PPUSH
18110: CALL_OW 310
18114: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18115: LD_VAR 0 11
18119: PPUSH
18120: CALL_OW 247
18124: PUSH
18125: LD_INT 2
18127: EQUAL
18128: IFFALSE 18132
// exit ;
18130: GO 18642
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18132: LD_ADDR_VAR 0 8
18136: PUSH
18137: LD_INT 81
18139: PUSH
18140: LD_VAR 0 9
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 3
18151: PUSH
18152: LD_INT 21
18154: PUSH
18155: LD_INT 3
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PPUSH
18170: CALL_OW 69
18174: ST_TO_ADDR
// if not tmp then
18175: LD_VAR 0 8
18179: NOT
18180: IFFALSE 18184
// exit ;
18182: GO 18642
// if in_unit then
18184: LD_VAR 0 11
18188: IFFALSE 18212
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18190: LD_ADDR_VAR 0 10
18194: PUSH
18195: LD_VAR 0 8
18199: PPUSH
18200: LD_VAR 0 11
18204: PPUSH
18205: CALL_OW 74
18209: ST_TO_ADDR
18210: GO 18232
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18212: LD_ADDR_VAR 0 10
18216: PUSH
18217: LD_VAR 0 8
18221: PPUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 74
18231: ST_TO_ADDR
// if not enemy then
18232: LD_VAR 0 10
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18642
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18241: LD_VAR 0 11
18245: PUSH
18246: LD_VAR 0 11
18250: PPUSH
18251: LD_VAR 0 10
18255: PPUSH
18256: CALL_OW 296
18260: PUSH
18261: LD_INT 13
18263: GREATER
18264: AND
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_VAR 0 10
18275: PPUSH
18276: CALL_OW 296
18280: PUSH
18281: LD_INT 12
18283: GREATER
18284: OR
18285: IFFALSE 18289
// exit ;
18287: GO 18642
// missile := [ 1 ] ;
18289: LD_ADDR_VAR 0 14
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18300: LD_VAR 0 9
18304: PPUSH
18305: LD_VAR 0 12
18309: PPUSH
18310: CALL_OW 325
18314: IFFALSE 18343
// missile := Replace ( missile , missile + 1 , 2 ) ;
18316: LD_ADDR_VAR 0 14
18320: PUSH
18321: LD_VAR 0 14
18325: PPUSH
18326: LD_VAR 0 14
18330: PUSH
18331: LD_INT 1
18333: PLUS
18334: PPUSH
18335: LD_INT 2
18337: PPUSH
18338: CALL_OW 1
18342: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18343: LD_VAR 0 9
18347: PPUSH
18348: LD_VAR 0 13
18352: PPUSH
18353: CALL_OW 325
18357: PUSH
18358: LD_VAR 0 10
18362: PPUSH
18363: CALL_OW 255
18367: PPUSH
18368: LD_VAR 0 13
18372: PPUSH
18373: CALL_OW 325
18377: NOT
18378: AND
18379: IFFALSE 18408
// missile := Replace ( missile , missile + 1 , 3 ) ;
18381: LD_ADDR_VAR 0 14
18385: PUSH
18386: LD_VAR 0 14
18390: PPUSH
18391: LD_VAR 0 14
18395: PUSH
18396: LD_INT 1
18398: PLUS
18399: PPUSH
18400: LD_INT 3
18402: PPUSH
18403: CALL_OW 1
18407: ST_TO_ADDR
// if missile < 2 then
18408: LD_VAR 0 14
18412: PUSH
18413: LD_INT 2
18415: LESS
18416: IFFALSE 18420
// exit ;
18418: GO 18642
// x := GetX ( enemy ) ;
18420: LD_ADDR_VAR 0 4
18424: PUSH
18425: LD_VAR 0 10
18429: PPUSH
18430: CALL_OW 250
18434: ST_TO_ADDR
// y := GetY ( enemy ) ;
18435: LD_ADDR_VAR 0 5
18439: PUSH
18440: LD_VAR 0 10
18444: PPUSH
18445: CALL_OW 251
18449: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18450: LD_ADDR_VAR 0 6
18454: PUSH
18455: LD_VAR 0 4
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 12
18471: PLUS
18472: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18473: LD_ADDR_VAR 0 7
18477: PUSH
18478: LD_VAR 0 5
18482: PUSH
18483: LD_INT 1
18485: NEG
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: CALL_OW 12
18494: PLUS
18495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18496: LD_VAR 0 6
18500: PPUSH
18501: LD_VAR 0 7
18505: PPUSH
18506: CALL_OW 488
18510: NOT
18511: IFFALSE 18533
// begin _x := x ;
18513: LD_ADDR_VAR 0 6
18517: PUSH
18518: LD_VAR 0 4
18522: ST_TO_ADDR
// _y := y ;
18523: LD_ADDR_VAR 0 7
18527: PUSH
18528: LD_VAR 0 5
18532: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 1
18540: PPUSH
18541: LD_VAR 0 14
18545: PPUSH
18546: CALL_OW 12
18550: ST_TO_ADDR
// case i of 1 :
18551: LD_VAR 0 3
18555: PUSH
18556: LD_INT 1
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18581
18564: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18565: LD_VAR 0 1
18569: PPUSH
18570: LD_VAR 0 10
18574: PPUSH
18575: CALL_OW 115
18579: GO 18642
18581: LD_INT 2
18583: DOUBLE
18584: EQUAL
18585: IFTRUE 18589
18587: GO 18611
18589: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18590: LD_VAR 0 1
18594: PPUSH
18595: LD_VAR 0 6
18599: PPUSH
18600: LD_VAR 0 7
18604: PPUSH
18605: CALL_OW 153
18609: GO 18642
18611: LD_INT 3
18613: DOUBLE
18614: EQUAL
18615: IFTRUE 18619
18617: GO 18641
18619: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18620: LD_VAR 0 1
18624: PPUSH
18625: LD_VAR 0 6
18629: PPUSH
18630: LD_VAR 0 7
18634: PPUSH
18635: CALL_OW 154
18639: GO 18642
18641: POP
// end ;
18642: LD_VAR 0 2
18646: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18647: LD_INT 0
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
18654: PPUSH
// if not unit or not building then
18655: LD_VAR 0 1
18659: NOT
18660: PUSH
18661: LD_VAR 0 2
18665: NOT
18666: OR
18667: IFFALSE 18671
// exit ;
18669: GO 18829
// x := GetX ( building ) ;
18671: LD_ADDR_VAR 0 5
18675: PUSH
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 250
18685: ST_TO_ADDR
// y := GetY ( building ) ;
18686: LD_ADDR_VAR 0 6
18690: PUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 251
18700: ST_TO_ADDR
// for i = 0 to 5 do
18701: LD_ADDR_VAR 0 4
18705: PUSH
18706: DOUBLE
18707: LD_INT 0
18709: DEC
18710: ST_TO_ADDR
18711: LD_INT 5
18713: PUSH
18714: FOR_TO
18715: IFFALSE 18827
// begin _x := ShiftX ( x , i , 3 ) ;
18717: LD_ADDR_VAR 0 7
18721: PUSH
18722: LD_VAR 0 5
18726: PPUSH
18727: LD_VAR 0 4
18731: PPUSH
18732: LD_INT 3
18734: PPUSH
18735: CALL_OW 272
18739: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18740: LD_ADDR_VAR 0 8
18744: PUSH
18745: LD_VAR 0 6
18749: PPUSH
18750: LD_VAR 0 4
18754: PPUSH
18755: LD_INT 3
18757: PPUSH
18758: CALL_OW 273
18762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18763: LD_VAR 0 7
18767: PPUSH
18768: LD_VAR 0 8
18772: PPUSH
18773: CALL_OW 488
18777: NOT
18778: IFFALSE 18782
// continue ;
18780: GO 18714
// if HexInfo ( _x , _y ) = 0 then
18782: LD_VAR 0 7
18786: PPUSH
18787: LD_VAR 0 8
18791: PPUSH
18792: CALL_OW 428
18796: PUSH
18797: LD_INT 0
18799: EQUAL
18800: IFFALSE 18825
// begin ComMoveXY ( unit , _x , _y ) ;
18802: LD_VAR 0 1
18806: PPUSH
18807: LD_VAR 0 7
18811: PPUSH
18812: LD_VAR 0 8
18816: PPUSH
18817: CALL_OW 111
// exit ;
18821: POP
18822: POP
18823: GO 18829
// end ; end ;
18825: GO 18714
18827: POP
18828: POP
// end ;
18829: LD_VAR 0 3
18833: RET
// export function ScanBase ( side , base_area ) ; begin
18834: LD_INT 0
18836: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18837: LD_ADDR_VAR 0 3
18841: PUSH
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_INT 81
18849: PUSH
18850: LD_VAR 0 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PPUSH
18859: CALL_OW 70
18863: ST_TO_ADDR
// end ;
18864: LD_VAR 0 3
18868: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18869: LD_INT 0
18871: PPUSH
18872: PPUSH
18873: PPUSH
18874: PPUSH
// result := false ;
18875: LD_ADDR_VAR 0 2
18879: PUSH
18880: LD_INT 0
18882: ST_TO_ADDR
// side := GetSide ( unit ) ;
18883: LD_ADDR_VAR 0 3
18887: PUSH
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL_OW 255
18897: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18898: LD_ADDR_VAR 0 4
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 248
18912: ST_TO_ADDR
// case nat of 1 :
18913: LD_VAR 0 4
18917: PUSH
18918: LD_INT 1
18920: DOUBLE
18921: EQUAL
18922: IFTRUE 18926
18924: GO 18937
18926: POP
// tech := tech_lassight ; 2 :
18927: LD_ADDR_VAR 0 5
18931: PUSH
18932: LD_INT 12
18934: ST_TO_ADDR
18935: GO 18976
18937: LD_INT 2
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 18956
18945: POP
// tech := tech_mortar ; 3 :
18946: LD_ADDR_VAR 0 5
18950: PUSH
18951: LD_INT 41
18953: ST_TO_ADDR
18954: GO 18976
18956: LD_INT 3
18958: DOUBLE
18959: EQUAL
18960: IFTRUE 18964
18962: GO 18975
18964: POP
// tech := tech_bazooka ; end ;
18965: LD_ADDR_VAR 0 5
18969: PUSH
18970: LD_INT 44
18972: ST_TO_ADDR
18973: GO 18976
18975: POP
// if Researched ( side , tech ) then
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_VAR 0 5
18985: PPUSH
18986: CALL_OW 325
18990: IFFALSE 19017
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18992: LD_ADDR_VAR 0 2
18996: PUSH
18997: LD_INT 5
18999: PUSH
19000: LD_INT 8
19002: PUSH
19003: LD_INT 9
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: PUSH
19011: LD_VAR 0 4
19015: ARRAY
19016: ST_TO_ADDR
// end ;
19017: LD_VAR 0 2
19021: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19022: LD_INT 0
19024: PPUSH
19025: PPUSH
19026: PPUSH
// if not mines then
19027: LD_VAR 0 2
19031: NOT
19032: IFFALSE 19036
// exit ;
19034: GO 19180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19036: LD_ADDR_VAR 0 5
19040: PUSH
19041: LD_INT 81
19043: PUSH
19044: LD_VAR 0 1
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 21
19058: PUSH
19059: LD_INT 3
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 69
19078: ST_TO_ADDR
// for i in mines do
19079: LD_ADDR_VAR 0 4
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: FOR_IN
19090: IFFALSE 19178
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19092: LD_VAR 0 4
19096: PUSH
19097: LD_INT 1
19099: ARRAY
19100: PPUSH
19101: LD_VAR 0 4
19105: PUSH
19106: LD_INT 2
19108: ARRAY
19109: PPUSH
19110: CALL_OW 458
19114: NOT
19115: IFFALSE 19119
// continue ;
19117: GO 19089
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19119: LD_VAR 0 4
19123: PUSH
19124: LD_INT 1
19126: ARRAY
19127: PPUSH
19128: LD_VAR 0 4
19132: PUSH
19133: LD_INT 2
19135: ARRAY
19136: PPUSH
19137: CALL_OW 428
19141: PUSH
19142: LD_VAR 0 5
19146: IN
19147: IFFALSE 19176
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19149: LD_VAR 0 4
19153: PUSH
19154: LD_INT 1
19156: ARRAY
19157: PPUSH
19158: LD_VAR 0 4
19162: PUSH
19163: LD_INT 2
19165: ARRAY
19166: PPUSH
19167: LD_VAR 0 1
19171: PPUSH
19172: CALL_OW 456
// end ;
19176: GO 19089
19178: POP
19179: POP
// end ;
19180: LD_VAR 0 3
19184: RET
// export function Count ( array ) ; begin
19185: LD_INT 0
19187: PPUSH
// result := array + 0 ;
19188: LD_ADDR_VAR 0 2
19192: PUSH
19193: LD_VAR 0 1
19197: PUSH
19198: LD_INT 0
19200: PLUS
19201: ST_TO_ADDR
// end ;
19202: LD_VAR 0 2
19206: RET
// export function IsEmpty ( building ) ; begin
19207: LD_INT 0
19209: PPUSH
// if not building then
19210: LD_VAR 0 1
19214: NOT
19215: IFFALSE 19219
// exit ;
19217: GO 19262
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19219: LD_ADDR_VAR 0 2
19223: PUSH
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_VAR 0 1
19236: PPUSH
19237: CALL_OW 255
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 58
19248: PUSH
19249: EMPTY
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PPUSH
19256: CALL_OW 69
19260: IN
19261: ST_TO_ADDR
// end ;
19262: LD_VAR 0 2
19266: RET
// export function IsNotFull ( building ) ; var places ; begin
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
// if not building then
19271: LD_VAR 0 1
19275: NOT
19276: IFFALSE 19280
// exit ;
19278: GO 19308
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: LD_VAR 0 1
19289: PPUSH
19290: LD_INT 3
19292: PUSH
19293: LD_INT 62
19295: PUSH
19296: EMPTY
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PPUSH
19303: CALL_OW 72
19307: ST_TO_ADDR
// end ;
19308: LD_VAR 0 2
19312: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
// tmp := [ ] ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: EMPTY
19325: ST_TO_ADDR
// list := [ ] ;
19326: LD_ADDR_VAR 0 5
19330: PUSH
19331: EMPTY
19332: ST_TO_ADDR
// for i = 16 to 25 do
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: DOUBLE
19339: LD_INT 16
19341: DEC
19342: ST_TO_ADDR
19343: LD_INT 25
19345: PUSH
19346: FOR_TO
19347: IFFALSE 19420
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 22
19361: PUSH
19362: LD_VAR 0 1
19366: PPUSH
19367: CALL_OW 255
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 91
19378: PUSH
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 6
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 30
19394: PUSH
19395: LD_VAR 0 4
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ADD
19417: ST_TO_ADDR
19418: GO 19346
19420: POP
19421: POP
// for i = 1 to tmp do
19422: LD_ADDR_VAR 0 4
19426: PUSH
19427: DOUBLE
19428: LD_INT 1
19430: DEC
19431: ST_TO_ADDR
19432: LD_VAR 0 3
19436: PUSH
19437: FOR_TO
19438: IFFALSE 19526
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19440: LD_ADDR_VAR 0 5
19444: PUSH
19445: LD_VAR 0 5
19449: PUSH
19450: LD_VAR 0 3
19454: PUSH
19455: LD_VAR 0 4
19459: ARRAY
19460: PPUSH
19461: CALL_OW 266
19465: PUSH
19466: LD_VAR 0 3
19470: PUSH
19471: LD_VAR 0 4
19475: ARRAY
19476: PPUSH
19477: CALL_OW 250
19481: PUSH
19482: LD_VAR 0 3
19486: PUSH
19487: LD_VAR 0 4
19491: ARRAY
19492: PPUSH
19493: CALL_OW 251
19497: PUSH
19498: LD_VAR 0 3
19502: PUSH
19503: LD_VAR 0 4
19507: ARRAY
19508: PPUSH
19509: CALL_OW 254
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: PUSH
19520: EMPTY
19521: LIST
19522: ADD
19523: ST_TO_ADDR
19524: GO 19437
19526: POP
19527: POP
// result := list ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_VAR 0 5
19537: ST_TO_ADDR
// end ;
19538: LD_VAR 0 2
19542: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19543: LD_INT 0
19545: PPUSH
19546: PPUSH
19547: PPUSH
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
// if not factory then
19552: LD_VAR 0 1
19556: NOT
19557: IFFALSE 19561
// exit ;
19559: GO 20154
// if control = control_apeman then
19561: LD_VAR 0 4
19565: PUSH
19566: LD_INT 5
19568: EQUAL
19569: IFFALSE 19678
// begin tmp := UnitsInside ( factory ) ;
19571: LD_ADDR_VAR 0 8
19575: PUSH
19576: LD_VAR 0 1
19580: PPUSH
19581: CALL_OW 313
19585: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19586: LD_VAR 0 8
19590: PPUSH
19591: LD_INT 25
19593: PUSH
19594: LD_INT 12
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 72
19605: NOT
19606: IFFALSE 19616
// control := control_manual ;
19608: LD_ADDR_VAR 0 4
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19616: LD_ADDR_VAR 0 8
19620: PUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL 19313 0 1
19630: ST_TO_ADDR
// if tmp then
19631: LD_VAR 0 8
19635: IFFALSE 19678
// begin for i in tmp do
19637: LD_ADDR_VAR 0 7
19641: PUSH
19642: LD_VAR 0 8
19646: PUSH
19647: FOR_IN
19648: IFFALSE 19676
// if i [ 1 ] = b_ext_radio then
19650: LD_VAR 0 7
19654: PUSH
19655: LD_INT 1
19657: ARRAY
19658: PUSH
19659: LD_INT 22
19661: EQUAL
19662: IFFALSE 19674
// begin control := control_remote ;
19664: LD_ADDR_VAR 0 4
19668: PUSH
19669: LD_INT 2
19671: ST_TO_ADDR
// break ;
19672: GO 19676
// end ;
19674: GO 19647
19676: POP
19677: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19678: LD_VAR 0 1
19682: PPUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: LD_VAR 0 3
19692: PPUSH
19693: LD_VAR 0 4
19697: PPUSH
19698: LD_VAR 0 5
19702: PPUSH
19703: CALL_OW 448
19707: IFFALSE 19742
// begin result := [ chassis , engine , control , weapon ] ;
19709: LD_ADDR_VAR 0 6
19713: PUSH
19714: LD_VAR 0 2
19718: PUSH
19719: LD_VAR 0 3
19723: PUSH
19724: LD_VAR 0 4
19728: PUSH
19729: LD_VAR 0 5
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: ST_TO_ADDR
// exit ;
19740: GO 20154
// end ; _chassis := AvailableChassisList ( factory ) ;
19742: LD_ADDR_VAR 0 9
19746: PUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 475
19756: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19757: LD_ADDR_VAR 0 11
19761: PUSH
19762: LD_VAR 0 1
19766: PPUSH
19767: CALL_OW 476
19771: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19772: LD_ADDR_VAR 0 12
19776: PUSH
19777: LD_VAR 0 1
19781: PPUSH
19782: CALL_OW 477
19786: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19787: LD_ADDR_VAR 0 10
19791: PUSH
19792: LD_VAR 0 1
19796: PPUSH
19797: CALL_OW 478
19801: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19802: LD_VAR 0 9
19806: NOT
19807: PUSH
19808: LD_VAR 0 11
19812: NOT
19813: OR
19814: PUSH
19815: LD_VAR 0 12
19819: NOT
19820: OR
19821: PUSH
19822: LD_VAR 0 10
19826: NOT
19827: OR
19828: IFFALSE 19863
// begin result := [ chassis , engine , control , weapon ] ;
19830: LD_ADDR_VAR 0 6
19834: PUSH
19835: LD_VAR 0 2
19839: PUSH
19840: LD_VAR 0 3
19844: PUSH
19845: LD_VAR 0 4
19849: PUSH
19850: LD_VAR 0 5
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: ST_TO_ADDR
// exit ;
19861: GO 20154
// end ; if not chassis in _chassis then
19863: LD_VAR 0 2
19867: PUSH
19868: LD_VAR 0 9
19872: IN
19873: NOT
19874: IFFALSE 19900
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: LD_VAR 0 9
19885: PUSH
19886: LD_INT 1
19888: PPUSH
19889: LD_VAR 0 9
19893: PPUSH
19894: CALL_OW 12
19898: ARRAY
19899: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19900: LD_VAR 0 2
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: CALL 20159 0 2
19914: NOT
19915: IFFALSE 19974
// repeat engine := _engine [ 1 ] ;
19917: LD_ADDR_VAR 0 3
19921: PUSH
19922: LD_VAR 0 11
19926: PUSH
19927: LD_INT 1
19929: ARRAY
19930: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19931: LD_ADDR_VAR 0 11
19935: PUSH
19936: LD_VAR 0 11
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 3
19948: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19949: LD_VAR 0 2
19953: PPUSH
19954: LD_VAR 0 3
19958: PPUSH
19959: CALL 20159 0 2
19963: PUSH
19964: LD_VAR 0 11
19968: PUSH
19969: EMPTY
19970: EQUAL
19971: OR
19972: IFFALSE 19917
// if not control in _control then
19974: LD_VAR 0 4
19978: PUSH
19979: LD_VAR 0 12
19983: IN
19984: NOT
19985: IFFALSE 20011
// control := _control [ rand ( 1 , _control ) ] ;
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: LD_VAR 0 12
19996: PUSH
19997: LD_INT 1
19999: PPUSH
20000: LD_VAR 0 12
20004: PPUSH
20005: CALL_OW 12
20009: ARRAY
20010: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20011: LD_VAR 0 2
20015: PPUSH
20016: LD_VAR 0 5
20020: PPUSH
20021: CALL 20379 0 2
20025: NOT
20026: IFFALSE 20085
// repeat weapon := _weapon [ 1 ] ;
20028: LD_ADDR_VAR 0 5
20032: PUSH
20033: LD_VAR 0 10
20037: PUSH
20038: LD_INT 1
20040: ARRAY
20041: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20042: LD_ADDR_VAR 0 10
20046: PUSH
20047: LD_VAR 0 10
20051: PPUSH
20052: LD_INT 1
20054: PPUSH
20055: CALL_OW 3
20059: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20060: LD_VAR 0 2
20064: PPUSH
20065: LD_VAR 0 5
20069: PPUSH
20070: CALL 20379 0 2
20074: PUSH
20075: LD_VAR 0 10
20079: PUSH
20080: EMPTY
20081: EQUAL
20082: OR
20083: IFFALSE 20028
// result := [ ] ;
20085: LD_ADDR_VAR 0 6
20089: PUSH
20090: EMPTY
20091: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_VAR 0 2
20101: PPUSH
20102: LD_VAR 0 3
20106: PPUSH
20107: LD_VAR 0 4
20111: PPUSH
20112: LD_VAR 0 5
20116: PPUSH
20117: CALL_OW 448
20121: IFFALSE 20154
// result := [ chassis , engine , control , weapon ] ;
20123: LD_ADDR_VAR 0 6
20127: PUSH
20128: LD_VAR 0 2
20132: PUSH
20133: LD_VAR 0 3
20137: PUSH
20138: LD_VAR 0 4
20142: PUSH
20143: LD_VAR 0 5
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: ST_TO_ADDR
// end ;
20154: LD_VAR 0 6
20158: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20159: LD_INT 0
20161: PPUSH
// if not chassis or not engine then
20162: LD_VAR 0 1
20166: NOT
20167: PUSH
20168: LD_VAR 0 2
20172: NOT
20173: OR
20174: IFFALSE 20178
// exit ;
20176: GO 20374
// case engine of engine_solar :
20178: LD_VAR 0 2
20182: PUSH
20183: LD_INT 2
20185: DOUBLE
20186: EQUAL
20187: IFTRUE 20191
20189: GO 20229
20191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20192: LD_ADDR_VAR 0 3
20196: PUSH
20197: LD_INT 11
20199: PUSH
20200: LD_INT 12
20202: PUSH
20203: LD_INT 13
20205: PUSH
20206: LD_INT 14
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: ST_TO_ADDR
20227: GO 20358
20229: LD_INT 1
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20299
20237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: LD_INT 11
20245: PUSH
20246: LD_INT 12
20248: PUSH
20249: LD_INT 13
20251: PUSH
20252: LD_INT 14
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 3
20263: PUSH
20264: LD_INT 4
20266: PUSH
20267: LD_INT 5
20269: PUSH
20270: LD_INT 21
20272: PUSH
20273: LD_INT 23
20275: PUSH
20276: LD_INT 22
20278: PUSH
20279: LD_INT 24
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: ST_TO_ADDR
20297: GO 20358
20299: LD_INT 3
20301: DOUBLE
20302: EQUAL
20303: IFTRUE 20307
20305: GO 20357
20307: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_INT 13
20315: PUSH
20316: LD_INT 14
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: LD_INT 3
20324: PUSH
20325: LD_INT 4
20327: PUSH
20328: LD_INT 5
20330: PUSH
20331: LD_INT 21
20333: PUSH
20334: LD_INT 22
20336: PUSH
20337: LD_INT 23
20339: PUSH
20340: LD_INT 24
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: ST_TO_ADDR
20355: GO 20358
20357: POP
// result := ( chassis in result ) ;
20358: LD_ADDR_VAR 0 3
20362: PUSH
20363: LD_VAR 0 1
20367: PUSH
20368: LD_VAR 0 3
20372: IN
20373: ST_TO_ADDR
// end ;
20374: LD_VAR 0 3
20378: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20379: LD_INT 0
20381: PPUSH
// if not chassis or not weapon then
20382: LD_VAR 0 1
20386: NOT
20387: PUSH
20388: LD_VAR 0 2
20392: NOT
20393: OR
20394: IFFALSE 20398
// exit ;
20396: GO 21458
// case weapon of us_machine_gun :
20398: LD_VAR 0 2
20402: PUSH
20403: LD_INT 2
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20441
20411: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: LD_INT 4
20428: PUSH
20429: LD_INT 5
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: ST_TO_ADDR
20439: GO 21442
20441: LD_INT 3
20443: DOUBLE
20444: EQUAL
20445: IFTRUE 20449
20447: GO 20479
20449: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: LD_INT 3
20463: PUSH
20464: LD_INT 4
20466: PUSH
20467: LD_INT 5
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: ST_TO_ADDR
20477: GO 21442
20479: LD_INT 11
20481: DOUBLE
20482: EQUAL
20483: IFTRUE 20487
20485: GO 20517
20487: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20488: LD_ADDR_VAR 0 3
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 3
20501: PUSH
20502: LD_INT 4
20504: PUSH
20505: LD_INT 5
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: ST_TO_ADDR
20515: GO 21442
20517: LD_INT 4
20519: DOUBLE
20520: EQUAL
20521: IFTRUE 20525
20523: GO 20551
20525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20526: LD_ADDR_VAR 0 3
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: LD_INT 3
20536: PUSH
20537: LD_INT 4
20539: PUSH
20540: LD_INT 5
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: ST_TO_ADDR
20549: GO 21442
20551: LD_INT 5
20553: DOUBLE
20554: EQUAL
20555: IFTRUE 20559
20557: GO 20585
20559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_INT 2
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: LD_INT 4
20573: PUSH
20574: LD_INT 5
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: ST_TO_ADDR
20583: GO 21442
20585: LD_INT 9
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20619
20593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_INT 2
20601: PUSH
20602: LD_INT 3
20604: PUSH
20605: LD_INT 4
20607: PUSH
20608: LD_INT 5
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: ST_TO_ADDR
20617: GO 21442
20619: LD_INT 7
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20653
20627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20628: LD_ADDR_VAR 0 3
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 3
20638: PUSH
20639: LD_INT 4
20641: PUSH
20642: LD_INT 5
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: ST_TO_ADDR
20651: GO 21442
20653: LD_INT 12
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20687
20661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 4
20675: PUSH
20676: LD_INT 5
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: ST_TO_ADDR
20685: GO 21442
20687: LD_INT 13
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20721
20695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20696: LD_ADDR_VAR 0 3
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: LD_INT 4
20709: PUSH
20710: LD_INT 5
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: ST_TO_ADDR
20719: GO 21442
20721: LD_INT 14
20723: DOUBLE
20724: EQUAL
20725: IFTRUE 20729
20727: GO 20747
20729: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20730: LD_ADDR_VAR 0 3
20734: PUSH
20735: LD_INT 4
20737: PUSH
20738: LD_INT 5
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: ST_TO_ADDR
20745: GO 21442
20747: LD_INT 6
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20773
20755: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20756: LD_ADDR_VAR 0 3
20760: PUSH
20761: LD_INT 4
20763: PUSH
20764: LD_INT 5
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: ST_TO_ADDR
20771: GO 21442
20773: LD_INT 10
20775: DOUBLE
20776: EQUAL
20777: IFTRUE 20781
20779: GO 20799
20781: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: LD_INT 4
20789: PUSH
20790: LD_INT 5
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: ST_TO_ADDR
20797: GO 21442
20799: LD_INT 22
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 20833
20807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20808: LD_ADDR_VAR 0 3
20812: PUSH
20813: LD_INT 11
20815: PUSH
20816: LD_INT 12
20818: PUSH
20819: LD_INT 13
20821: PUSH
20822: LD_INT 14
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: ST_TO_ADDR
20831: GO 21442
20833: LD_INT 23
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20841
20839: GO 20867
20841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: LD_INT 11
20849: PUSH
20850: LD_INT 12
20852: PUSH
20853: LD_INT 13
20855: PUSH
20856: LD_INT 14
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: ST_TO_ADDR
20865: GO 21442
20867: LD_INT 24
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 20901
20875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20876: LD_ADDR_VAR 0 3
20880: PUSH
20881: LD_INT 11
20883: PUSH
20884: LD_INT 12
20886: PUSH
20887: LD_INT 13
20889: PUSH
20890: LD_INT 14
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: ST_TO_ADDR
20899: GO 21442
20901: LD_INT 30
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20935
20909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: LD_INT 11
20917: PUSH
20918: LD_INT 12
20920: PUSH
20921: LD_INT 13
20923: PUSH
20924: LD_INT 14
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: ST_TO_ADDR
20933: GO 21442
20935: LD_INT 25
20937: DOUBLE
20938: EQUAL
20939: IFTRUE 20943
20941: GO 20961
20943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20944: LD_ADDR_VAR 0 3
20948: PUSH
20949: LD_INT 13
20951: PUSH
20952: LD_INT 14
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: ST_TO_ADDR
20959: GO 21442
20961: LD_INT 27
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20987
20969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20970: LD_ADDR_VAR 0 3
20974: PUSH
20975: LD_INT 13
20977: PUSH
20978: LD_INT 14
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: ST_TO_ADDR
20985: GO 21442
20987: LD_INT 92
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21021
20995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20996: LD_ADDR_VAR 0 3
21000: PUSH
21001: LD_INT 11
21003: PUSH
21004: LD_INT 12
21006: PUSH
21007: LD_INT 13
21009: PUSH
21010: LD_INT 14
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: ST_TO_ADDR
21019: GO 21442
21021: LD_INT 28
21023: DOUBLE
21024: EQUAL
21025: IFTRUE 21029
21027: GO 21047
21029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21030: LD_ADDR_VAR 0 3
21034: PUSH
21035: LD_INT 13
21037: PUSH
21038: LD_INT 14
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: ST_TO_ADDR
21045: GO 21442
21047: LD_INT 29
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21073
21055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_INT 13
21063: PUSH
21064: LD_INT 14
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: ST_TO_ADDR
21071: GO 21442
21073: LD_INT 31
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21099
21081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21082: LD_ADDR_VAR 0 3
21086: PUSH
21087: LD_INT 13
21089: PUSH
21090: LD_INT 14
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: ST_TO_ADDR
21097: GO 21442
21099: LD_INT 26
21101: DOUBLE
21102: EQUAL
21103: IFTRUE 21107
21105: GO 21125
21107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21108: LD_ADDR_VAR 0 3
21112: PUSH
21113: LD_INT 13
21115: PUSH
21116: LD_INT 14
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: ST_TO_ADDR
21123: GO 21442
21125: LD_INT 42
21127: DOUBLE
21128: EQUAL
21129: IFTRUE 21133
21131: GO 21159
21133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21134: LD_ADDR_VAR 0 3
21138: PUSH
21139: LD_INT 21
21141: PUSH
21142: LD_INT 22
21144: PUSH
21145: LD_INT 23
21147: PUSH
21148: LD_INT 24
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: ST_TO_ADDR
21157: GO 21442
21159: LD_INT 43
21161: DOUBLE
21162: EQUAL
21163: IFTRUE 21167
21165: GO 21193
21167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: LD_INT 21
21175: PUSH
21176: LD_INT 22
21178: PUSH
21179: LD_INT 23
21181: PUSH
21182: LD_INT 24
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: ST_TO_ADDR
21191: GO 21442
21193: LD_INT 44
21195: DOUBLE
21196: EQUAL
21197: IFTRUE 21201
21199: GO 21227
21201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_INT 21
21209: PUSH
21210: LD_INT 22
21212: PUSH
21213: LD_INT 23
21215: PUSH
21216: LD_INT 24
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: ST_TO_ADDR
21225: GO 21442
21227: LD_INT 45
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21261
21235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21236: LD_ADDR_VAR 0 3
21240: PUSH
21241: LD_INT 21
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_INT 23
21249: PUSH
21250: LD_INT 24
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: ST_TO_ADDR
21259: GO 21442
21261: LD_INT 49
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21295
21269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21270: LD_ADDR_VAR 0 3
21274: PUSH
21275: LD_INT 21
21277: PUSH
21278: LD_INT 22
21280: PUSH
21281: LD_INT 23
21283: PUSH
21284: LD_INT 24
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: ST_TO_ADDR
21293: GO 21442
21295: LD_INT 51
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21329
21303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 22
21314: PUSH
21315: LD_INT 23
21317: PUSH
21318: LD_INT 24
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: ST_TO_ADDR
21327: GO 21442
21329: LD_INT 52
21331: DOUBLE
21332: EQUAL
21333: IFTRUE 21337
21335: GO 21363
21337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21338: LD_ADDR_VAR 0 3
21342: PUSH
21343: LD_INT 21
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 24
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: ST_TO_ADDR
21361: GO 21442
21363: LD_INT 53
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21389
21371: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21372: LD_ADDR_VAR 0 3
21376: PUSH
21377: LD_INT 23
21379: PUSH
21380: LD_INT 24
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: ST_TO_ADDR
21387: GO 21442
21389: LD_INT 46
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21415
21397: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21398: LD_ADDR_VAR 0 3
21402: PUSH
21403: LD_INT 23
21405: PUSH
21406: LD_INT 24
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: ST_TO_ADDR
21413: GO 21442
21415: LD_INT 47
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21441
21423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: LD_INT 23
21431: PUSH
21432: LD_INT 24
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: ST_TO_ADDR
21439: GO 21442
21441: POP
// result := ( chassis in result ) ;
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_VAR 0 1
21451: PUSH
21452: LD_VAR 0 3
21456: IN
21457: ST_TO_ADDR
// end ;
21458: LD_VAR 0 3
21462: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21463: LD_INT 0
21465: PPUSH
21466: PPUSH
21467: PPUSH
21468: PPUSH
21469: PPUSH
21470: PPUSH
21471: PPUSH
// result := array ;
21472: LD_ADDR_VAR 0 5
21476: PUSH
21477: LD_VAR 0 1
21481: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21482: LD_VAR 0 1
21486: NOT
21487: PUSH
21488: LD_VAR 0 2
21492: NOT
21493: OR
21494: PUSH
21495: LD_VAR 0 3
21499: NOT
21500: OR
21501: PUSH
21502: LD_VAR 0 2
21506: PUSH
21507: LD_VAR 0 1
21511: GREATER
21512: OR
21513: PUSH
21514: LD_VAR 0 3
21518: PUSH
21519: LD_VAR 0 1
21523: GREATER
21524: OR
21525: IFFALSE 21529
// exit ;
21527: GO 21825
// if direction then
21529: LD_VAR 0 4
21533: IFFALSE 21597
// begin d := 1 ;
21535: LD_ADDR_VAR 0 9
21539: PUSH
21540: LD_INT 1
21542: ST_TO_ADDR
// if i_from > i_to then
21543: LD_VAR 0 2
21547: PUSH
21548: LD_VAR 0 3
21552: GREATER
21553: IFFALSE 21579
// length := ( array - i_from ) + i_to else
21555: LD_ADDR_VAR 0 11
21559: PUSH
21560: LD_VAR 0 1
21564: PUSH
21565: LD_VAR 0 2
21569: MINUS
21570: PUSH
21571: LD_VAR 0 3
21575: PLUS
21576: ST_TO_ADDR
21577: GO 21595
// length := i_to - i_from ;
21579: LD_ADDR_VAR 0 11
21583: PUSH
21584: LD_VAR 0 3
21588: PUSH
21589: LD_VAR 0 2
21593: MINUS
21594: ST_TO_ADDR
// end else
21595: GO 21658
// begin d := - 1 ;
21597: LD_ADDR_VAR 0 9
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: ST_TO_ADDR
// if i_from > i_to then
21606: LD_VAR 0 2
21610: PUSH
21611: LD_VAR 0 3
21615: GREATER
21616: IFFALSE 21636
// length := i_from - i_to else
21618: LD_ADDR_VAR 0 11
21622: PUSH
21623: LD_VAR 0 2
21627: PUSH
21628: LD_VAR 0 3
21632: MINUS
21633: ST_TO_ADDR
21634: GO 21658
// length := ( array - i_to ) + i_from ;
21636: LD_ADDR_VAR 0 11
21640: PUSH
21641: LD_VAR 0 1
21645: PUSH
21646: LD_VAR 0 3
21650: MINUS
21651: PUSH
21652: LD_VAR 0 2
21656: PLUS
21657: ST_TO_ADDR
// end ; if not length then
21658: LD_VAR 0 11
21662: NOT
21663: IFFALSE 21667
// exit ;
21665: GO 21825
// tmp := array ;
21667: LD_ADDR_VAR 0 10
21671: PUSH
21672: LD_VAR 0 1
21676: ST_TO_ADDR
// for i = 1 to length do
21677: LD_ADDR_VAR 0 6
21681: PUSH
21682: DOUBLE
21683: LD_INT 1
21685: DEC
21686: ST_TO_ADDR
21687: LD_VAR 0 11
21691: PUSH
21692: FOR_TO
21693: IFFALSE 21813
// begin for j = 1 to array do
21695: LD_ADDR_VAR 0 7
21699: PUSH
21700: DOUBLE
21701: LD_INT 1
21703: DEC
21704: ST_TO_ADDR
21705: LD_VAR 0 1
21709: PUSH
21710: FOR_TO
21711: IFFALSE 21799
// begin k := j + d ;
21713: LD_ADDR_VAR 0 8
21717: PUSH
21718: LD_VAR 0 7
21722: PUSH
21723: LD_VAR 0 9
21727: PLUS
21728: ST_TO_ADDR
// if k > array then
21729: LD_VAR 0 8
21733: PUSH
21734: LD_VAR 0 1
21738: GREATER
21739: IFFALSE 21749
// k := 1 ;
21741: LD_ADDR_VAR 0 8
21745: PUSH
21746: LD_INT 1
21748: ST_TO_ADDR
// if not k then
21749: LD_VAR 0 8
21753: NOT
21754: IFFALSE 21766
// k := array ;
21756: LD_ADDR_VAR 0 8
21760: PUSH
21761: LD_VAR 0 1
21765: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21766: LD_ADDR_VAR 0 10
21770: PUSH
21771: LD_VAR 0 10
21775: PPUSH
21776: LD_VAR 0 8
21780: PPUSH
21781: LD_VAR 0 1
21785: PUSH
21786: LD_VAR 0 7
21790: ARRAY
21791: PPUSH
21792: CALL_OW 1
21796: ST_TO_ADDR
// end ;
21797: GO 21710
21799: POP
21800: POP
// array := tmp ;
21801: LD_ADDR_VAR 0 1
21805: PUSH
21806: LD_VAR 0 10
21810: ST_TO_ADDR
// end ;
21811: GO 21692
21813: POP
21814: POP
// result := array ;
21815: LD_ADDR_VAR 0 5
21819: PUSH
21820: LD_VAR 0 1
21824: ST_TO_ADDR
// end ;
21825: LD_VAR 0 5
21829: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
// result := 0 ;
21834: LD_ADDR_VAR 0 3
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// if not array or not value in array then
21842: LD_VAR 0 1
21846: NOT
21847: PUSH
21848: LD_VAR 0 2
21852: PUSH
21853: LD_VAR 0 1
21857: IN
21858: NOT
21859: OR
21860: IFFALSE 21864
// exit ;
21862: GO 21918
// for i = 1 to array do
21864: LD_ADDR_VAR 0 4
21868: PUSH
21869: DOUBLE
21870: LD_INT 1
21872: DEC
21873: ST_TO_ADDR
21874: LD_VAR 0 1
21878: PUSH
21879: FOR_TO
21880: IFFALSE 21916
// if value = array [ i ] then
21882: LD_VAR 0 2
21886: PUSH
21887: LD_VAR 0 1
21891: PUSH
21892: LD_VAR 0 4
21896: ARRAY
21897: EQUAL
21898: IFFALSE 21914
// begin result := i ;
21900: LD_ADDR_VAR 0 3
21904: PUSH
21905: LD_VAR 0 4
21909: ST_TO_ADDR
// exit ;
21910: POP
21911: POP
21912: GO 21918
// end ;
21914: GO 21879
21916: POP
21917: POP
// end ;
21918: LD_VAR 0 3
21922: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21923: LD_INT 0
21925: PPUSH
// vc_chassis := chassis ;
21926: LD_ADDR_OWVAR 37
21930: PUSH
21931: LD_VAR 0 1
21935: ST_TO_ADDR
// vc_engine := engine ;
21936: LD_ADDR_OWVAR 39
21940: PUSH
21941: LD_VAR 0 2
21945: ST_TO_ADDR
// vc_control := control ;
21946: LD_ADDR_OWVAR 38
21950: PUSH
21951: LD_VAR 0 3
21955: ST_TO_ADDR
// vc_weapon := weapon ;
21956: LD_ADDR_OWVAR 40
21960: PUSH
21961: LD_VAR 0 4
21965: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21966: LD_ADDR_OWVAR 41
21970: PUSH
21971: LD_VAR 0 5
21975: ST_TO_ADDR
// end ;
21976: LD_VAR 0 6
21980: RET
// export function WantPlant ( unit ) ; var task ; begin
21981: LD_INT 0
21983: PPUSH
21984: PPUSH
// result := false ;
21985: LD_ADDR_VAR 0 2
21989: PUSH
21990: LD_INT 0
21992: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21993: LD_ADDR_VAR 0 3
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 437
22007: ST_TO_ADDR
// if task then
22008: LD_VAR 0 3
22012: IFFALSE 22040
// if task [ 1 ] [ 1 ] = p then
22014: LD_VAR 0 3
22018: PUSH
22019: LD_INT 1
22021: ARRAY
22022: PUSH
22023: LD_INT 1
22025: ARRAY
22026: PUSH
22027: LD_STRING p
22029: EQUAL
22030: IFFALSE 22040
// result := true ;
22032: LD_ADDR_VAR 0 2
22036: PUSH
22037: LD_INT 1
22039: ST_TO_ADDR
// end ;
22040: LD_VAR 0 2
22044: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22045: LD_INT 0
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
// if pos < 1 then
22051: LD_VAR 0 2
22055: PUSH
22056: LD_INT 1
22058: LESS
22059: IFFALSE 22063
// exit ;
22061: GO 22366
// if pos = 1 then
22063: LD_VAR 0 2
22067: PUSH
22068: LD_INT 1
22070: EQUAL
22071: IFFALSE 22104
// result := Replace ( arr , pos [ 1 ] , value ) else
22073: LD_ADDR_VAR 0 4
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: LD_VAR 0 2
22087: PUSH
22088: LD_INT 1
22090: ARRAY
22091: PPUSH
22092: LD_VAR 0 3
22096: PPUSH
22097: CALL_OW 1
22101: ST_TO_ADDR
22102: GO 22366
// begin tmp := arr ;
22104: LD_ADDR_VAR 0 6
22108: PUSH
22109: LD_VAR 0 1
22113: ST_TO_ADDR
// s_arr := [ tmp ] ;
22114: LD_ADDR_VAR 0 7
22118: PUSH
22119: LD_VAR 0 6
22123: PUSH
22124: EMPTY
22125: LIST
22126: ST_TO_ADDR
// for i = 1 to pos - 1 do
22127: LD_ADDR_VAR 0 5
22131: PUSH
22132: DOUBLE
22133: LD_INT 1
22135: DEC
22136: ST_TO_ADDR
22137: LD_VAR 0 2
22141: PUSH
22142: LD_INT 1
22144: MINUS
22145: PUSH
22146: FOR_TO
22147: IFFALSE 22192
// begin tmp := tmp [ pos [ i ] ] ;
22149: LD_ADDR_VAR 0 6
22153: PUSH
22154: LD_VAR 0 6
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: LD_VAR 0 5
22168: ARRAY
22169: ARRAY
22170: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22171: LD_ADDR_VAR 0 7
22175: PUSH
22176: LD_VAR 0 7
22180: PUSH
22181: LD_VAR 0 6
22185: PUSH
22186: EMPTY
22187: LIST
22188: ADD
22189: ST_TO_ADDR
// end ;
22190: GO 22146
22192: POP
22193: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22194: LD_ADDR_VAR 0 6
22198: PUSH
22199: LD_VAR 0 6
22203: PPUSH
22204: LD_VAR 0 2
22208: PUSH
22209: LD_VAR 0 2
22213: ARRAY
22214: PPUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: CALL_OW 1
22224: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22225: LD_ADDR_VAR 0 7
22229: PUSH
22230: LD_VAR 0 7
22234: PPUSH
22235: LD_VAR 0 7
22239: PPUSH
22240: LD_VAR 0 6
22244: PPUSH
22245: CALL_OW 1
22249: ST_TO_ADDR
// for i = s_arr downto 2 do
22250: LD_ADDR_VAR 0 5
22254: PUSH
22255: DOUBLE
22256: LD_VAR 0 7
22260: INC
22261: ST_TO_ADDR
22262: LD_INT 2
22264: PUSH
22265: FOR_DOWNTO
22266: IFFALSE 22350
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_VAR 0 7
22277: PUSH
22278: LD_VAR 0 5
22282: PUSH
22283: LD_INT 1
22285: MINUS
22286: ARRAY
22287: PPUSH
22288: LD_VAR 0 2
22292: PUSH
22293: LD_VAR 0 5
22297: PUSH
22298: LD_INT 1
22300: MINUS
22301: ARRAY
22302: PPUSH
22303: LD_VAR 0 7
22307: PUSH
22308: LD_VAR 0 5
22312: ARRAY
22313: PPUSH
22314: CALL_OW 1
22318: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22319: LD_ADDR_VAR 0 7
22323: PUSH
22324: LD_VAR 0 7
22328: PPUSH
22329: LD_VAR 0 5
22333: PUSH
22334: LD_INT 1
22336: MINUS
22337: PPUSH
22338: LD_VAR 0 6
22342: PPUSH
22343: CALL_OW 1
22347: ST_TO_ADDR
// end ;
22348: GO 22265
22350: POP
22351: POP
// result := s_arr [ 1 ] ;
22352: LD_ADDR_VAR 0 4
22356: PUSH
22357: LD_VAR 0 7
22361: PUSH
22362: LD_INT 1
22364: ARRAY
22365: ST_TO_ADDR
// end ; end ;
22366: LD_VAR 0 4
22370: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22371: LD_INT 0
22373: PPUSH
22374: PPUSH
// if not list then
22375: LD_VAR 0 1
22379: NOT
22380: IFFALSE 22384
// exit ;
22382: GO 22475
// i := list [ pos1 ] ;
22384: LD_ADDR_VAR 0 5
22388: PUSH
22389: LD_VAR 0 1
22393: PUSH
22394: LD_VAR 0 2
22398: ARRAY
22399: ST_TO_ADDR
// if not i then
22400: LD_VAR 0 5
22404: NOT
22405: IFFALSE 22409
// exit ;
22407: GO 22475
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22409: LD_ADDR_VAR 0 1
22413: PUSH
22414: LD_VAR 0 1
22418: PPUSH
22419: LD_VAR 0 2
22423: PPUSH
22424: LD_VAR 0 1
22428: PUSH
22429: LD_VAR 0 3
22433: ARRAY
22434: PPUSH
22435: CALL_OW 1
22439: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22440: LD_ADDR_VAR 0 1
22444: PUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: LD_VAR 0 3
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 1
22464: ST_TO_ADDR
// result := list ;
22465: LD_ADDR_VAR 0 4
22469: PUSH
22470: LD_VAR 0 1
22474: ST_TO_ADDR
// end ;
22475: LD_VAR 0 4
22479: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22480: LD_INT 0
22482: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22483: LD_ADDR_VAR 0 5
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 250
22497: PPUSH
22498: LD_VAR 0 1
22502: PPUSH
22503: CALL_OW 251
22507: PPUSH
22508: LD_VAR 0 2
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_VAR 0 4
22522: PPUSH
22523: CALL 22901 0 5
22527: ST_TO_ADDR
// end ;
22528: LD_VAR 0 5
22532: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
22538: PPUSH
// if not list or not unit then
22539: LD_VAR 0 2
22543: NOT
22544: PUSH
22545: LD_VAR 0 1
22549: NOT
22550: OR
22551: IFFALSE 22555
// exit ;
22553: GO 22896
// result := [ ] ;
22555: LD_ADDR_VAR 0 5
22559: PUSH
22560: EMPTY
22561: ST_TO_ADDR
// for i in list do
22562: LD_ADDR_VAR 0 6
22566: PUSH
22567: LD_VAR 0 2
22571: PUSH
22572: FOR_IN
22573: IFFALSE 22791
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22575: LD_ADDR_VAR 0 8
22579: PUSH
22580: LD_VAR 0 1
22584: PPUSH
22585: LD_VAR 0 6
22589: PUSH
22590: LD_INT 1
22592: ARRAY
22593: PPUSH
22594: LD_VAR 0 6
22598: PUSH
22599: LD_INT 2
22601: ARRAY
22602: PPUSH
22603: CALL_OW 297
22607: ST_TO_ADDR
// if not Count ( result ) then
22608: LD_VAR 0 5
22612: PPUSH
22613: CALL 19185 0 1
22617: NOT
22618: IFFALSE 22651
// begin result := Join ( result , [ i , tmp ] ) ;
22620: LD_ADDR_VAR 0 5
22624: PUSH
22625: LD_VAR 0 5
22629: PPUSH
22630: LD_VAR 0 6
22634: PUSH
22635: LD_VAR 0 8
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PPUSH
22644: CALL 54866 0 2
22648: ST_TO_ADDR
// continue ;
22649: GO 22572
// end ; if result [ result ] [ 2 ] <= tmp then
22651: LD_VAR 0 5
22655: PUSH
22656: LD_VAR 0 5
22660: ARRAY
22661: PUSH
22662: LD_INT 2
22664: ARRAY
22665: PUSH
22666: LD_VAR 0 8
22670: LESSEQUAL
22671: IFFALSE 22704
// result := Join ( result , [ i , tmp ] ) else
22673: LD_ADDR_VAR 0 5
22677: PUSH
22678: LD_VAR 0 5
22682: PPUSH
22683: LD_VAR 0 6
22687: PUSH
22688: LD_VAR 0 8
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL 54866 0 2
22701: ST_TO_ADDR
22702: GO 22789
// begin for j := 1 to Count ( result ) do
22704: LD_ADDR_VAR 0 7
22708: PUSH
22709: DOUBLE
22710: LD_INT 1
22712: DEC
22713: ST_TO_ADDR
22714: LD_VAR 0 5
22718: PPUSH
22719: CALL 19185 0 1
22723: PUSH
22724: FOR_TO
22725: IFFALSE 22787
// begin if tmp < result [ j ] [ 2 ] then
22727: LD_VAR 0 8
22731: PUSH
22732: LD_VAR 0 5
22736: PUSH
22737: LD_VAR 0 7
22741: ARRAY
22742: PUSH
22743: LD_INT 2
22745: ARRAY
22746: LESS
22747: IFFALSE 22785
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22749: LD_ADDR_VAR 0 5
22753: PUSH
22754: LD_VAR 0 5
22758: PPUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_VAR 0 6
22768: PUSH
22769: LD_VAR 0 8
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PPUSH
22778: CALL_OW 2
22782: ST_TO_ADDR
// break ;
22783: GO 22787
// end ; end ;
22785: GO 22724
22787: POP
22788: POP
// end ; end ;
22789: GO 22572
22791: POP
22792: POP
// if result and not asc then
22793: LD_VAR 0 5
22797: PUSH
22798: LD_VAR 0 3
22802: NOT
22803: AND
22804: IFFALSE 22821
// result := ReverseArray ( result ) ;
22806: LD_ADDR_VAR 0 5
22810: PUSH
22811: LD_VAR 0 5
22815: PPUSH
22816: CALL 50061 0 1
22820: ST_TO_ADDR
// tmp := [ ] ;
22821: LD_ADDR_VAR 0 8
22825: PUSH
22826: EMPTY
22827: ST_TO_ADDR
// if mode then
22828: LD_VAR 0 4
22832: IFFALSE 22896
// begin for i := 1 to result do
22834: LD_ADDR_VAR 0 6
22838: PUSH
22839: DOUBLE
22840: LD_INT 1
22842: DEC
22843: ST_TO_ADDR
22844: LD_VAR 0 5
22848: PUSH
22849: FOR_TO
22850: IFFALSE 22884
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22852: LD_ADDR_VAR 0 8
22856: PUSH
22857: LD_VAR 0 8
22861: PPUSH
22862: LD_VAR 0 5
22866: PUSH
22867: LD_VAR 0 6
22871: ARRAY
22872: PUSH
22873: LD_INT 1
22875: ARRAY
22876: PPUSH
22877: CALL 54866 0 2
22881: ST_TO_ADDR
22882: GO 22849
22884: POP
22885: POP
// result := tmp ;
22886: LD_ADDR_VAR 0 5
22890: PUSH
22891: LD_VAR 0 8
22895: ST_TO_ADDR
// end ; end ;
22896: LD_VAR 0 5
22900: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22901: LD_INT 0
22903: PPUSH
22904: PPUSH
22905: PPUSH
22906: PPUSH
// if not list then
22907: LD_VAR 0 3
22911: NOT
22912: IFFALSE 22916
// exit ;
22914: GO 23304
// result := [ ] ;
22916: LD_ADDR_VAR 0 6
22920: PUSH
22921: EMPTY
22922: ST_TO_ADDR
// for i in list do
22923: LD_ADDR_VAR 0 7
22927: PUSH
22928: LD_VAR 0 3
22932: PUSH
22933: FOR_IN
22934: IFFALSE 23136
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22936: LD_ADDR_VAR 0 9
22940: PUSH
22941: LD_VAR 0 7
22945: PPUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: LD_VAR 0 2
22955: PPUSH
22956: CALL_OW 297
22960: ST_TO_ADDR
// if not result then
22961: LD_VAR 0 6
22965: NOT
22966: IFFALSE 22992
// result := [ [ i , tmp ] ] else
22968: LD_ADDR_VAR 0 6
22972: PUSH
22973: LD_VAR 0 7
22977: PUSH
22978: LD_VAR 0 9
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: ST_TO_ADDR
22990: GO 23134
// begin if result [ result ] [ 2 ] <= tmp then
22992: LD_VAR 0 6
22996: PUSH
22997: LD_VAR 0 6
23001: ARRAY
23002: PUSH
23003: LD_INT 2
23005: ARRAY
23006: PUSH
23007: LD_VAR 0 9
23011: LESSEQUAL
23012: IFFALSE 23054
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23014: LD_ADDR_VAR 0 6
23018: PUSH
23019: LD_VAR 0 6
23023: PPUSH
23024: LD_VAR 0 6
23028: PUSH
23029: LD_INT 1
23031: PLUS
23032: PPUSH
23033: LD_VAR 0 7
23037: PUSH
23038: LD_VAR 0 9
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 2
23051: ST_TO_ADDR
23052: GO 23134
// for j := 1 to result do
23054: LD_ADDR_VAR 0 8
23058: PUSH
23059: DOUBLE
23060: LD_INT 1
23062: DEC
23063: ST_TO_ADDR
23064: LD_VAR 0 6
23068: PUSH
23069: FOR_TO
23070: IFFALSE 23132
// begin if tmp < result [ j ] [ 2 ] then
23072: LD_VAR 0 9
23076: PUSH
23077: LD_VAR 0 6
23081: PUSH
23082: LD_VAR 0 8
23086: ARRAY
23087: PUSH
23088: LD_INT 2
23090: ARRAY
23091: LESS
23092: IFFALSE 23130
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23094: LD_ADDR_VAR 0 6
23098: PUSH
23099: LD_VAR 0 6
23103: PPUSH
23104: LD_VAR 0 8
23108: PPUSH
23109: LD_VAR 0 7
23113: PUSH
23114: LD_VAR 0 9
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 2
23127: ST_TO_ADDR
// break ;
23128: GO 23132
// end ; end ;
23130: GO 23069
23132: POP
23133: POP
// end ; end ;
23134: GO 22933
23136: POP
23137: POP
// if result and not asc then
23138: LD_VAR 0 6
23142: PUSH
23143: LD_VAR 0 4
23147: NOT
23148: AND
23149: IFFALSE 23224
// begin tmp := result ;
23151: LD_ADDR_VAR 0 9
23155: PUSH
23156: LD_VAR 0 6
23160: ST_TO_ADDR
// for i = tmp downto 1 do
23161: LD_ADDR_VAR 0 7
23165: PUSH
23166: DOUBLE
23167: LD_VAR 0 9
23171: INC
23172: ST_TO_ADDR
23173: LD_INT 1
23175: PUSH
23176: FOR_DOWNTO
23177: IFFALSE 23222
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23179: LD_ADDR_VAR 0 6
23183: PUSH
23184: LD_VAR 0 6
23188: PPUSH
23189: LD_VAR 0 9
23193: PUSH
23194: LD_VAR 0 7
23198: MINUS
23199: PUSH
23200: LD_INT 1
23202: PLUS
23203: PPUSH
23204: LD_VAR 0 9
23208: PUSH
23209: LD_VAR 0 7
23213: ARRAY
23214: PPUSH
23215: CALL_OW 1
23219: ST_TO_ADDR
23220: GO 23176
23222: POP
23223: POP
// end ; tmp := [ ] ;
23224: LD_ADDR_VAR 0 9
23228: PUSH
23229: EMPTY
23230: ST_TO_ADDR
// if mode then
23231: LD_VAR 0 5
23235: IFFALSE 23304
// begin for i = 1 to result do
23237: LD_ADDR_VAR 0 7
23241: PUSH
23242: DOUBLE
23243: LD_INT 1
23245: DEC
23246: ST_TO_ADDR
23247: LD_VAR 0 6
23251: PUSH
23252: FOR_TO
23253: IFFALSE 23292
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23255: LD_ADDR_VAR 0 9
23259: PUSH
23260: LD_VAR 0 9
23264: PPUSH
23265: LD_VAR 0 7
23269: PPUSH
23270: LD_VAR 0 6
23274: PUSH
23275: LD_VAR 0 7
23279: ARRAY
23280: PUSH
23281: LD_INT 1
23283: ARRAY
23284: PPUSH
23285: CALL_OW 1
23289: ST_TO_ADDR
23290: GO 23252
23292: POP
23293: POP
// result := tmp ;
23294: LD_ADDR_VAR 0 6
23298: PUSH
23299: LD_VAR 0 9
23303: ST_TO_ADDR
// end ; end ;
23304: LD_VAR 0 6
23308: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
23313: PPUSH
23314: PPUSH
23315: PPUSH
23316: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23317: LD_ADDR_VAR 0 5
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// if not x or not y then
23339: LD_VAR 0 2
23343: NOT
23344: PUSH
23345: LD_VAR 0 3
23349: NOT
23350: OR
23351: IFFALSE 23355
// exit ;
23353: GO 25005
// if not range then
23355: LD_VAR 0 4
23359: NOT
23360: IFFALSE 23370
// range := 10 ;
23362: LD_ADDR_VAR 0 4
23366: PUSH
23367: LD_INT 10
23369: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23370: LD_ADDR_VAR 0 8
23374: PUSH
23375: LD_INT 81
23377: PUSH
23378: LD_VAR 0 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 92
23389: PUSH
23390: LD_VAR 0 2
23394: PUSH
23395: LD_VAR 0 3
23399: PUSH
23400: LD_VAR 0 4
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 3
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 3
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 69
23437: ST_TO_ADDR
// if not tmp then
23438: LD_VAR 0 8
23442: NOT
23443: IFFALSE 23447
// exit ;
23445: GO 25005
// for i in tmp do
23447: LD_ADDR_VAR 0 6
23451: PUSH
23452: LD_VAR 0 8
23456: PUSH
23457: FOR_IN
23458: IFFALSE 24980
// begin points := [ 0 , 0 , 0 ] ;
23460: LD_ADDR_VAR 0 9
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: ST_TO_ADDR
// bpoints := 1 ;
23479: LD_ADDR_VAR 0 10
23483: PUSH
23484: LD_INT 1
23486: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23487: LD_VAR 0 6
23491: PPUSH
23492: CALL_OW 247
23496: PUSH
23497: LD_INT 1
23499: DOUBLE
23500: EQUAL
23501: IFTRUE 23505
23503: GO 24083
23505: POP
// begin if GetClass ( i ) = 1 then
23506: LD_VAR 0 6
23510: PPUSH
23511: CALL_OW 257
23515: PUSH
23516: LD_INT 1
23518: EQUAL
23519: IFFALSE 23540
// points := [ 10 , 5 , 3 ] ;
23521: LD_ADDR_VAR 0 9
23525: PUSH
23526: LD_INT 10
23528: PUSH
23529: LD_INT 5
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23540: LD_VAR 0 6
23544: PPUSH
23545: CALL_OW 257
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: LD_INT 4
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: IN
23564: IFFALSE 23585
// points := [ 3 , 2 , 1 ] ;
23566: LD_ADDR_VAR 0 9
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23585: LD_VAR 0 6
23589: PPUSH
23590: CALL_OW 257
23594: PUSH
23595: LD_INT 5
23597: EQUAL
23598: IFFALSE 23619
// points := [ 130 , 5 , 2 ] ;
23600: LD_ADDR_VAR 0 9
23604: PUSH
23605: LD_INT 130
23607: PUSH
23608: LD_INT 5
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23619: LD_VAR 0 6
23623: PPUSH
23624: CALL_OW 257
23628: PUSH
23629: LD_INT 8
23631: EQUAL
23632: IFFALSE 23653
// points := [ 35 , 35 , 30 ] ;
23634: LD_ADDR_VAR 0 9
23638: PUSH
23639: LD_INT 35
23641: PUSH
23642: LD_INT 35
23644: PUSH
23645: LD_INT 30
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23653: LD_VAR 0 6
23657: PPUSH
23658: CALL_OW 257
23662: PUSH
23663: LD_INT 9
23665: EQUAL
23666: IFFALSE 23687
// points := [ 20 , 55 , 40 ] ;
23668: LD_ADDR_VAR 0 9
23672: PUSH
23673: LD_INT 20
23675: PUSH
23676: LD_INT 55
23678: PUSH
23679: LD_INT 40
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23687: LD_VAR 0 6
23691: PPUSH
23692: CALL_OW 257
23696: PUSH
23697: LD_INT 12
23699: PUSH
23700: LD_INT 16
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: IN
23707: IFFALSE 23728
// points := [ 5 , 3 , 2 ] ;
23709: LD_ADDR_VAR 0 9
23713: PUSH
23714: LD_INT 5
23716: PUSH
23717: LD_INT 3
23719: PUSH
23720: LD_INT 2
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23728: LD_VAR 0 6
23732: PPUSH
23733: CALL_OW 257
23737: PUSH
23738: LD_INT 17
23740: EQUAL
23741: IFFALSE 23762
// points := [ 100 , 50 , 75 ] ;
23743: LD_ADDR_VAR 0 9
23747: PUSH
23748: LD_INT 100
23750: PUSH
23751: LD_INT 50
23753: PUSH
23754: LD_INT 75
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23762: LD_VAR 0 6
23766: PPUSH
23767: CALL_OW 257
23771: PUSH
23772: LD_INT 15
23774: EQUAL
23775: IFFALSE 23796
// points := [ 10 , 5 , 3 ] ;
23777: LD_ADDR_VAR 0 9
23781: PUSH
23782: LD_INT 10
23784: PUSH
23785: LD_INT 5
23787: PUSH
23788: LD_INT 3
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23796: LD_VAR 0 6
23800: PPUSH
23801: CALL_OW 257
23805: PUSH
23806: LD_INT 14
23808: EQUAL
23809: IFFALSE 23830
// points := [ 10 , 0 , 0 ] ;
23811: LD_ADDR_VAR 0 9
23815: PUSH
23816: LD_INT 10
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23830: LD_VAR 0 6
23834: PPUSH
23835: CALL_OW 257
23839: PUSH
23840: LD_INT 11
23842: EQUAL
23843: IFFALSE 23864
// points := [ 30 , 10 , 5 ] ;
23845: LD_ADDR_VAR 0 9
23849: PUSH
23850: LD_INT 30
23852: PUSH
23853: LD_INT 10
23855: PUSH
23856: LD_INT 5
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23864: LD_VAR 0 1
23868: PPUSH
23869: LD_INT 5
23871: PPUSH
23872: CALL_OW 321
23876: PUSH
23877: LD_INT 2
23879: EQUAL
23880: IFFALSE 23897
// bpoints := bpoints * 1.8 ;
23882: LD_ADDR_VAR 0 10
23886: PUSH
23887: LD_VAR 0 10
23891: PUSH
23892: LD_REAL  1.80000000000000E+0000
23895: MUL
23896: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23897: LD_VAR 0 6
23901: PPUSH
23902: CALL_OW 257
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: LD_INT 4
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: IN
23925: PUSH
23926: LD_VAR 0 1
23930: PPUSH
23931: LD_INT 51
23933: PPUSH
23934: CALL_OW 321
23938: PUSH
23939: LD_INT 2
23941: EQUAL
23942: AND
23943: IFFALSE 23960
// bpoints := bpoints * 1.2 ;
23945: LD_ADDR_VAR 0 10
23949: PUSH
23950: LD_VAR 0 10
23954: PUSH
23955: LD_REAL  1.20000000000000E+0000
23958: MUL
23959: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23960: LD_VAR 0 6
23964: PPUSH
23965: CALL_OW 257
23969: PUSH
23970: LD_INT 5
23972: PUSH
23973: LD_INT 7
23975: PUSH
23976: LD_INT 9
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: IN
23984: PUSH
23985: LD_VAR 0 1
23989: PPUSH
23990: LD_INT 52
23992: PPUSH
23993: CALL_OW 321
23997: PUSH
23998: LD_INT 2
24000: EQUAL
24001: AND
24002: IFFALSE 24019
// bpoints := bpoints * 1.5 ;
24004: LD_ADDR_VAR 0 10
24008: PUSH
24009: LD_VAR 0 10
24013: PUSH
24014: LD_REAL  1.50000000000000E+0000
24017: MUL
24018: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24019: LD_VAR 0 1
24023: PPUSH
24024: LD_INT 66
24026: PPUSH
24027: CALL_OW 321
24031: PUSH
24032: LD_INT 2
24034: EQUAL
24035: IFFALSE 24052
// bpoints := bpoints * 1.1 ;
24037: LD_ADDR_VAR 0 10
24041: PUSH
24042: LD_VAR 0 10
24046: PUSH
24047: LD_REAL  1.10000000000000E+0000
24050: MUL
24051: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24052: LD_ADDR_VAR 0 10
24056: PUSH
24057: LD_VAR 0 10
24061: PUSH
24062: LD_VAR 0 6
24066: PPUSH
24067: LD_INT 1
24069: PPUSH
24070: CALL_OW 259
24074: PUSH
24075: LD_REAL  1.15000000000000E+0000
24078: MUL
24079: MUL
24080: ST_TO_ADDR
// end ; unit_vehicle :
24081: GO 24909
24083: LD_INT 2
24085: DOUBLE
24086: EQUAL
24087: IFTRUE 24091
24089: GO 24897
24091: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24092: LD_VAR 0 6
24096: PPUSH
24097: CALL_OW 264
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: LD_INT 42
24107: PUSH
24108: LD_INT 24
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: IN
24116: IFFALSE 24137
// points := [ 25 , 5 , 3 ] ;
24118: LD_ADDR_VAR 0 9
24122: PUSH
24123: LD_INT 25
24125: PUSH
24126: LD_INT 5
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24137: LD_VAR 0 6
24141: PPUSH
24142: CALL_OW 264
24146: PUSH
24147: LD_INT 4
24149: PUSH
24150: LD_INT 43
24152: PUSH
24153: LD_INT 25
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: IN
24161: IFFALSE 24182
// points := [ 40 , 15 , 5 ] ;
24163: LD_ADDR_VAR 0 9
24167: PUSH
24168: LD_INT 40
24170: PUSH
24171: LD_INT 15
24173: PUSH
24174: LD_INT 5
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24182: LD_VAR 0 6
24186: PPUSH
24187: CALL_OW 264
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 23
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: IN
24202: IFFALSE 24223
// points := [ 7 , 25 , 8 ] ;
24204: LD_ADDR_VAR 0 9
24208: PUSH
24209: LD_INT 7
24211: PUSH
24212: LD_INT 25
24214: PUSH
24215: LD_INT 8
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24223: LD_VAR 0 6
24227: PPUSH
24228: CALL_OW 264
24232: PUSH
24233: LD_INT 5
24235: PUSH
24236: LD_INT 27
24238: PUSH
24239: LD_INT 44
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: LIST
24246: IN
24247: IFFALSE 24268
// points := [ 14 , 50 , 16 ] ;
24249: LD_ADDR_VAR 0 9
24253: PUSH
24254: LD_INT 14
24256: PUSH
24257: LD_INT 50
24259: PUSH
24260: LD_INT 16
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: LIST
24267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24268: LD_VAR 0 6
24272: PPUSH
24273: CALL_OW 264
24277: PUSH
24278: LD_INT 6
24280: PUSH
24281: LD_INT 46
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: IN
24288: IFFALSE 24309
// points := [ 32 , 120 , 70 ] ;
24290: LD_ADDR_VAR 0 9
24294: PUSH
24295: LD_INT 32
24297: PUSH
24298: LD_INT 120
24300: PUSH
24301: LD_INT 70
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24309: LD_VAR 0 6
24313: PPUSH
24314: CALL_OW 264
24318: PUSH
24319: LD_INT 7
24321: PUSH
24322: LD_INT 28
24324: PUSH
24325: LD_INT 45
24327: PUSH
24328: LD_INT 92
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: IN
24337: IFFALSE 24358
// points := [ 35 , 20 , 45 ] ;
24339: LD_ADDR_VAR 0 9
24343: PUSH
24344: LD_INT 35
24346: PUSH
24347: LD_INT 20
24349: PUSH
24350: LD_INT 45
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24358: LD_VAR 0 6
24362: PPUSH
24363: CALL_OW 264
24367: PUSH
24368: LD_INT 47
24370: PUSH
24371: EMPTY
24372: LIST
24373: IN
24374: IFFALSE 24395
// points := [ 67 , 45 , 75 ] ;
24376: LD_ADDR_VAR 0 9
24380: PUSH
24381: LD_INT 67
24383: PUSH
24384: LD_INT 45
24386: PUSH
24387: LD_INT 75
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24395: LD_VAR 0 6
24399: PPUSH
24400: CALL_OW 264
24404: PUSH
24405: LD_INT 26
24407: PUSH
24408: EMPTY
24409: LIST
24410: IN
24411: IFFALSE 24432
// points := [ 120 , 30 , 80 ] ;
24413: LD_ADDR_VAR 0 9
24417: PUSH
24418: LD_INT 120
24420: PUSH
24421: LD_INT 30
24423: PUSH
24424: LD_INT 80
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24432: LD_VAR 0 6
24436: PPUSH
24437: CALL_OW 264
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: EMPTY
24446: LIST
24447: IN
24448: IFFALSE 24469
// points := [ 40 , 1 , 1 ] ;
24450: LD_ADDR_VAR 0 9
24454: PUSH
24455: LD_INT 40
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24469: LD_VAR 0 6
24473: PPUSH
24474: CALL_OW 264
24478: PUSH
24479: LD_INT 29
24481: PUSH
24482: EMPTY
24483: LIST
24484: IN
24485: IFFALSE 24506
// points := [ 70 , 200 , 400 ] ;
24487: LD_ADDR_VAR 0 9
24491: PUSH
24492: LD_INT 70
24494: PUSH
24495: LD_INT 200
24497: PUSH
24498: LD_INT 400
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24506: LD_VAR 0 6
24510: PPUSH
24511: CALL_OW 264
24515: PUSH
24516: LD_INT 14
24518: PUSH
24519: LD_INT 53
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: IN
24526: IFFALSE 24547
// points := [ 40 , 10 , 20 ] ;
24528: LD_ADDR_VAR 0 9
24532: PUSH
24533: LD_INT 40
24535: PUSH
24536: LD_INT 10
24538: PUSH
24539: LD_INT 20
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24547: LD_VAR 0 6
24551: PPUSH
24552: CALL_OW 264
24556: PUSH
24557: LD_INT 9
24559: PUSH
24560: EMPTY
24561: LIST
24562: IN
24563: IFFALSE 24584
// points := [ 5 , 70 , 20 ] ;
24565: LD_ADDR_VAR 0 9
24569: PUSH
24570: LD_INT 5
24572: PUSH
24573: LD_INT 70
24575: PUSH
24576: LD_INT 20
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: LIST
24583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24584: LD_VAR 0 6
24588: PPUSH
24589: CALL_OW 264
24593: PUSH
24594: LD_INT 10
24596: PUSH
24597: EMPTY
24598: LIST
24599: IN
24600: IFFALSE 24621
// points := [ 35 , 110 , 70 ] ;
24602: LD_ADDR_VAR 0 9
24606: PUSH
24607: LD_INT 35
24609: PUSH
24610: LD_INT 110
24612: PUSH
24613: LD_INT 70
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24621: LD_VAR 0 6
24625: PPUSH
24626: CALL_OW 265
24630: PUSH
24631: LD_INT 25
24633: EQUAL
24634: IFFALSE 24655
// points := [ 80 , 65 , 100 ] ;
24636: LD_ADDR_VAR 0 9
24640: PUSH
24641: LD_INT 80
24643: PUSH
24644: LD_INT 65
24646: PUSH
24647: LD_INT 100
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24655: LD_VAR 0 6
24659: PPUSH
24660: CALL_OW 263
24664: PUSH
24665: LD_INT 1
24667: EQUAL
24668: IFFALSE 24703
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24670: LD_ADDR_VAR 0 10
24674: PUSH
24675: LD_VAR 0 10
24679: PUSH
24680: LD_VAR 0 6
24684: PPUSH
24685: CALL_OW 311
24689: PPUSH
24690: LD_INT 3
24692: PPUSH
24693: CALL_OW 259
24697: PUSH
24698: LD_INT 4
24700: MUL
24701: MUL
24702: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24703: LD_VAR 0 6
24707: PPUSH
24708: CALL_OW 263
24712: PUSH
24713: LD_INT 2
24715: EQUAL
24716: IFFALSE 24767
// begin j := IsControledBy ( i ) ;
24718: LD_ADDR_VAR 0 7
24722: PUSH
24723: LD_VAR 0 6
24727: PPUSH
24728: CALL_OW 312
24732: ST_TO_ADDR
// if j then
24733: LD_VAR 0 7
24737: IFFALSE 24767
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24739: LD_ADDR_VAR 0 10
24743: PUSH
24744: LD_VAR 0 10
24748: PUSH
24749: LD_VAR 0 7
24753: PPUSH
24754: LD_INT 3
24756: PPUSH
24757: CALL_OW 259
24761: PUSH
24762: LD_INT 3
24764: MUL
24765: MUL
24766: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24767: LD_VAR 0 6
24771: PPUSH
24772: CALL_OW 264
24776: PUSH
24777: LD_INT 5
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: LD_INT 46
24785: PUSH
24786: LD_INT 44
24788: PUSH
24789: LD_INT 47
24791: PUSH
24792: LD_INT 45
24794: PUSH
24795: LD_INT 28
24797: PUSH
24798: LD_INT 7
24800: PUSH
24801: LD_INT 27
24803: PUSH
24804: LD_INT 29
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: IN
24819: PUSH
24820: LD_VAR 0 1
24824: PPUSH
24825: LD_INT 52
24827: PPUSH
24828: CALL_OW 321
24832: PUSH
24833: LD_INT 2
24835: EQUAL
24836: AND
24837: IFFALSE 24854
// bpoints := bpoints * 1.2 ;
24839: LD_ADDR_VAR 0 10
24843: PUSH
24844: LD_VAR 0 10
24848: PUSH
24849: LD_REAL  1.20000000000000E+0000
24852: MUL
24853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24854: LD_VAR 0 6
24858: PPUSH
24859: CALL_OW 264
24863: PUSH
24864: LD_INT 6
24866: PUSH
24867: LD_INT 46
24869: PUSH
24870: LD_INT 47
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: IN
24878: IFFALSE 24895
// bpoints := bpoints * 1.2 ;
24880: LD_ADDR_VAR 0 10
24884: PUSH
24885: LD_VAR 0 10
24889: PUSH
24890: LD_REAL  1.20000000000000E+0000
24893: MUL
24894: ST_TO_ADDR
// end ; unit_building :
24895: GO 24909
24897: LD_INT 3
24899: DOUBLE
24900: EQUAL
24901: IFTRUE 24905
24903: GO 24908
24905: POP
// ; end ;
24906: GO 24909
24908: POP
// for j = 1 to 3 do
24909: LD_ADDR_VAR 0 7
24913: PUSH
24914: DOUBLE
24915: LD_INT 1
24917: DEC
24918: ST_TO_ADDR
24919: LD_INT 3
24921: PUSH
24922: FOR_TO
24923: IFFALSE 24976
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24925: LD_ADDR_VAR 0 5
24929: PUSH
24930: LD_VAR 0 5
24934: PPUSH
24935: LD_VAR 0 7
24939: PPUSH
24940: LD_VAR 0 5
24944: PUSH
24945: LD_VAR 0 7
24949: ARRAY
24950: PUSH
24951: LD_VAR 0 9
24955: PUSH
24956: LD_VAR 0 7
24960: ARRAY
24961: PUSH
24962: LD_VAR 0 10
24966: MUL
24967: PLUS
24968: PPUSH
24969: CALL_OW 1
24973: ST_TO_ADDR
24974: GO 24922
24976: POP
24977: POP
// end ;
24978: GO 23457
24980: POP
24981: POP
// result := Replace ( result , 4 , tmp ) ;
24982: LD_ADDR_VAR 0 5
24986: PUSH
24987: LD_VAR 0 5
24991: PPUSH
24992: LD_INT 4
24994: PPUSH
24995: LD_VAR 0 8
24999: PPUSH
25000: CALL_OW 1
25004: ST_TO_ADDR
// end ;
25005: LD_VAR 0 5
25009: RET
// export function DangerAtRange ( unit , range ) ; begin
25010: LD_INT 0
25012: PPUSH
// if not unit then
25013: LD_VAR 0 1
25017: NOT
25018: IFFALSE 25022
// exit ;
25020: GO 25067
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 255
25036: PPUSH
25037: LD_VAR 0 1
25041: PPUSH
25042: CALL_OW 250
25046: PPUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL_OW 251
25056: PPUSH
25057: LD_VAR 0 2
25061: PPUSH
25062: CALL 23309 0 4
25066: ST_TO_ADDR
// end ;
25067: LD_VAR 0 3
25071: RET
// export function DangerInArea ( side , area ) ; begin
25072: LD_INT 0
25074: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25075: LD_ADDR_VAR 0 3
25079: PUSH
25080: LD_VAR 0 2
25084: PPUSH
25085: LD_INT 81
25087: PUSH
25088: LD_VAR 0 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 70
25101: ST_TO_ADDR
// end ;
25102: LD_VAR 0 3
25106: RET
// export function IsExtension ( b ) ; begin
25107: LD_INT 0
25109: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25110: LD_ADDR_VAR 0 2
25114: PUSH
25115: LD_VAR 0 1
25119: PUSH
25120: LD_INT 23
25122: PUSH
25123: LD_INT 20
25125: PUSH
25126: LD_INT 22
25128: PUSH
25129: LD_INT 17
25131: PUSH
25132: LD_INT 24
25134: PUSH
25135: LD_INT 21
25137: PUSH
25138: LD_INT 19
25140: PUSH
25141: LD_INT 16
25143: PUSH
25144: LD_INT 25
25146: PUSH
25147: LD_INT 18
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: IN
25162: ST_TO_ADDR
// end ;
25163: LD_VAR 0 2
25167: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25168: LD_INT 0
25170: PPUSH
25171: PPUSH
25172: PPUSH
// result := [ ] ;
25173: LD_ADDR_VAR 0 4
25177: PUSH
25178: EMPTY
25179: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25180: LD_ADDR_VAR 0 5
25184: PUSH
25185: LD_VAR 0 2
25189: PPUSH
25190: LD_INT 21
25192: PUSH
25193: LD_INT 3
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PPUSH
25200: CALL_OW 70
25204: ST_TO_ADDR
// if not tmp then
25205: LD_VAR 0 5
25209: NOT
25210: IFFALSE 25214
// exit ;
25212: GO 25278
// if checkLink then
25214: LD_VAR 0 3
25218: IFFALSE 25268
// begin for i in tmp do
25220: LD_ADDR_VAR 0 6
25224: PUSH
25225: LD_VAR 0 5
25229: PUSH
25230: FOR_IN
25231: IFFALSE 25266
// if GetBase ( i ) <> base then
25233: LD_VAR 0 6
25237: PPUSH
25238: CALL_OW 274
25242: PUSH
25243: LD_VAR 0 1
25247: NONEQUAL
25248: IFFALSE 25264
// ComLinkToBase ( base , i ) ;
25250: LD_VAR 0 1
25254: PPUSH
25255: LD_VAR 0 6
25259: PPUSH
25260: CALL_OW 169
25264: GO 25230
25266: POP
25267: POP
// end ; result := tmp ;
25268: LD_ADDR_VAR 0 4
25272: PUSH
25273: LD_VAR 0 5
25277: ST_TO_ADDR
// end ;
25278: LD_VAR 0 4
25282: RET
// export function ComComplete ( units , b ) ; var i ; begin
25283: LD_INT 0
25285: PPUSH
25286: PPUSH
// if not units then
25287: LD_VAR 0 1
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25386
// for i in units do
25296: LD_ADDR_VAR 0 4
25300: PUSH
25301: LD_VAR 0 1
25305: PUSH
25306: FOR_IN
25307: IFFALSE 25384
// if BuildingStatus ( b ) = bs_build then
25309: LD_VAR 0 2
25313: PPUSH
25314: CALL_OW 461
25318: PUSH
25319: LD_INT 1
25321: EQUAL
25322: IFFALSE 25382
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25324: LD_VAR 0 4
25328: PPUSH
25329: LD_STRING h
25331: PUSH
25332: LD_VAR 0 2
25336: PPUSH
25337: CALL_OW 250
25341: PUSH
25342: LD_VAR 0 2
25346: PPUSH
25347: CALL_OW 251
25351: PUSH
25352: LD_VAR 0 2
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: PPUSH
25378: CALL_OW 446
25382: GO 25306
25384: POP
25385: POP
// end ;
25386: LD_VAR 0 3
25390: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25391: LD_INT 0
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25399: LD_VAR 0 1
25403: NOT
25404: PUSH
25405: LD_VAR 0 1
25409: PPUSH
25410: CALL_OW 263
25414: PUSH
25415: LD_INT 2
25417: NONEQUAL
25418: OR
25419: IFFALSE 25423
// exit ;
25421: GO 25739
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25423: LD_ADDR_VAR 0 6
25427: PUSH
25428: LD_INT 22
25430: PUSH
25431: LD_VAR 0 1
25435: PPUSH
25436: CALL_OW 255
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 30
25450: PUSH
25451: LD_INT 36
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 34
25460: PUSH
25461: LD_INT 31
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PPUSH
25477: CALL_OW 69
25481: ST_TO_ADDR
// if not tmp then
25482: LD_VAR 0 6
25486: NOT
25487: IFFALSE 25491
// exit ;
25489: GO 25739
// result := [ ] ;
25491: LD_ADDR_VAR 0 2
25495: PUSH
25496: EMPTY
25497: ST_TO_ADDR
// for i in tmp do
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_VAR 0 6
25507: PUSH
25508: FOR_IN
25509: IFFALSE 25580
// begin t := UnitsInside ( i ) ;
25511: LD_ADDR_VAR 0 4
25515: PUSH
25516: LD_VAR 0 3
25520: PPUSH
25521: CALL_OW 313
25525: ST_TO_ADDR
// if t then
25526: LD_VAR 0 4
25530: IFFALSE 25578
// for j in t do
25532: LD_ADDR_VAR 0 7
25536: PUSH
25537: LD_VAR 0 4
25541: PUSH
25542: FOR_IN
25543: IFFALSE 25576
// result := Replace ( result , result + 1 , j ) ;
25545: LD_ADDR_VAR 0 2
25549: PUSH
25550: LD_VAR 0 2
25554: PPUSH
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 1
25562: PLUS
25563: PPUSH
25564: LD_VAR 0 7
25568: PPUSH
25569: CALL_OW 1
25573: ST_TO_ADDR
25574: GO 25542
25576: POP
25577: POP
// end ;
25578: GO 25508
25580: POP
25581: POP
// if not result then
25582: LD_VAR 0 2
25586: NOT
25587: IFFALSE 25591
// exit ;
25589: GO 25739
// mech := result [ 1 ] ;
25591: LD_ADDR_VAR 0 5
25595: PUSH
25596: LD_VAR 0 2
25600: PUSH
25601: LD_INT 1
25603: ARRAY
25604: ST_TO_ADDR
// if result > 1 then
25605: LD_VAR 0 2
25609: PUSH
25610: LD_INT 1
25612: GREATER
25613: IFFALSE 25725
// begin for i = 2 to result do
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: DOUBLE
25621: LD_INT 2
25623: DEC
25624: ST_TO_ADDR
25625: LD_VAR 0 2
25629: PUSH
25630: FOR_TO
25631: IFFALSE 25723
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25633: LD_ADDR_VAR 0 4
25637: PUSH
25638: LD_VAR 0 2
25642: PUSH
25643: LD_VAR 0 3
25647: ARRAY
25648: PPUSH
25649: LD_INT 3
25651: PPUSH
25652: CALL_OW 259
25656: PUSH
25657: LD_VAR 0 2
25661: PUSH
25662: LD_VAR 0 3
25666: ARRAY
25667: PPUSH
25668: CALL_OW 432
25672: MINUS
25673: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25674: LD_VAR 0 4
25678: PUSH
25679: LD_VAR 0 5
25683: PPUSH
25684: LD_INT 3
25686: PPUSH
25687: CALL_OW 259
25691: PUSH
25692: LD_VAR 0 5
25696: PPUSH
25697: CALL_OW 432
25701: MINUS
25702: GREATEREQUAL
25703: IFFALSE 25721
// mech := result [ i ] ;
25705: LD_ADDR_VAR 0 5
25709: PUSH
25710: LD_VAR 0 2
25714: PUSH
25715: LD_VAR 0 3
25719: ARRAY
25720: ST_TO_ADDR
// end ;
25721: GO 25630
25723: POP
25724: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_VAR 0 5
25734: PPUSH
25735: CALL_OW 135
// end ;
25739: LD_VAR 0 2
25743: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25744: LD_INT 0
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
// result := [ ] ;
25759: LD_ADDR_VAR 0 7
25763: PUSH
25764: EMPTY
25765: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 266
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: IN
25786: NOT
25787: IFFALSE 25791
// exit ;
25789: GO 27425
// if name then
25791: LD_VAR 0 3
25795: IFFALSE 25811
// SetBName ( base_dep , name ) ;
25797: LD_VAR 0 1
25801: PPUSH
25802: LD_VAR 0 3
25806: PPUSH
25807: CALL_OW 500
// base := GetBase ( base_dep ) ;
25811: LD_ADDR_VAR 0 15
25815: PUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 274
25825: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25826: LD_ADDR_VAR 0 16
25830: PUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: CALL_OW 255
25840: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25841: LD_ADDR_VAR 0 17
25845: PUSH
25846: LD_VAR 0 1
25850: PPUSH
25851: CALL_OW 248
25855: ST_TO_ADDR
// if sources then
25856: LD_VAR 0 5
25860: IFFALSE 25907
// for i = 1 to 3 do
25862: LD_ADDR_VAR 0 8
25866: PUSH
25867: DOUBLE
25868: LD_INT 1
25870: DEC
25871: ST_TO_ADDR
25872: LD_INT 3
25874: PUSH
25875: FOR_TO
25876: IFFALSE 25905
// AddResourceType ( base , i , sources [ i ] ) ;
25878: LD_VAR 0 15
25882: PPUSH
25883: LD_VAR 0 8
25887: PPUSH
25888: LD_VAR 0 5
25892: PUSH
25893: LD_VAR 0 8
25897: ARRAY
25898: PPUSH
25899: CALL_OW 276
25903: GO 25875
25905: POP
25906: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25907: LD_ADDR_VAR 0 18
25911: PUSH
25912: LD_VAR 0 15
25916: PPUSH
25917: LD_VAR 0 2
25921: PPUSH
25922: LD_INT 1
25924: PPUSH
25925: CALL 25168 0 3
25929: ST_TO_ADDR
// InitHc ;
25930: CALL_OW 19
// InitUc ;
25934: CALL_OW 18
// uc_side := side ;
25938: LD_ADDR_OWVAR 20
25942: PUSH
25943: LD_VAR 0 16
25947: ST_TO_ADDR
// uc_nation := nation ;
25948: LD_ADDR_OWVAR 21
25952: PUSH
25953: LD_VAR 0 17
25957: ST_TO_ADDR
// if buildings then
25958: LD_VAR 0 18
25962: IFFALSE 27284
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25964: LD_ADDR_VAR 0 19
25968: PUSH
25969: LD_VAR 0 18
25973: PPUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 30
25979: PUSH
25980: LD_INT 29
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 30
25989: PUSH
25990: LD_INT 30
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: PPUSH
26002: CALL_OW 72
26006: ST_TO_ADDR
// if tmp then
26007: LD_VAR 0 19
26011: IFFALSE 26059
// for i in tmp do
26013: LD_ADDR_VAR 0 8
26017: PUSH
26018: LD_VAR 0 19
26022: PUSH
26023: FOR_IN
26024: IFFALSE 26057
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26026: LD_VAR 0 8
26030: PPUSH
26031: CALL_OW 250
26035: PPUSH
26036: LD_VAR 0 8
26040: PPUSH
26041: CALL_OW 251
26045: PPUSH
26046: LD_VAR 0 16
26050: PPUSH
26051: CALL_OW 441
26055: GO 26023
26057: POP
26058: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26059: LD_VAR 0 18
26063: PPUSH
26064: LD_INT 2
26066: PUSH
26067: LD_INT 30
26069: PUSH
26070: LD_INT 32
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 30
26079: PUSH
26080: LD_INT 33
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL_OW 72
26096: IFFALSE 26184
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26098: LD_ADDR_VAR 0 8
26102: PUSH
26103: LD_VAR 0 18
26107: PPUSH
26108: LD_INT 2
26110: PUSH
26111: LD_INT 30
26113: PUSH
26114: LD_INT 32
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 30
26123: PUSH
26124: LD_INT 33
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: PPUSH
26136: CALL_OW 72
26140: PUSH
26141: FOR_IN
26142: IFFALSE 26182
// begin if not GetBWeapon ( i ) then
26144: LD_VAR 0 8
26148: PPUSH
26149: CALL_OW 269
26153: NOT
26154: IFFALSE 26180
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26156: LD_VAR 0 8
26160: PPUSH
26161: LD_VAR 0 8
26165: PPUSH
26166: LD_VAR 0 2
26170: PPUSH
26171: CALL 27430 0 2
26175: PPUSH
26176: CALL_OW 431
// end ;
26180: GO 26141
26182: POP
26183: POP
// end ; for i = 1 to personel do
26184: LD_ADDR_VAR 0 8
26188: PUSH
26189: DOUBLE
26190: LD_INT 1
26192: DEC
26193: ST_TO_ADDR
26194: LD_VAR 0 6
26198: PUSH
26199: FOR_TO
26200: IFFALSE 27264
// begin if i > 4 then
26202: LD_VAR 0 8
26206: PUSH
26207: LD_INT 4
26209: GREATER
26210: IFFALSE 26214
// break ;
26212: GO 27264
// case i of 1 :
26214: LD_VAR 0 8
26218: PUSH
26219: LD_INT 1
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26307
26227: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26228: LD_ADDR_VAR 0 12
26232: PUSH
26233: LD_VAR 0 18
26237: PPUSH
26238: LD_INT 22
26240: PUSH
26241: LD_VAR 0 16
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 58
26252: PUSH
26253: EMPTY
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 30
26261: PUSH
26262: LD_INT 32
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 30
26271: PUSH
26272: LD_INT 4
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 30
26281: PUSH
26282: LD_INT 5
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: PPUSH
26300: CALL_OW 72
26304: ST_TO_ADDR
26305: GO 26529
26307: LD_INT 2
26309: DOUBLE
26310: EQUAL
26311: IFTRUE 26315
26313: GO 26377
26315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26316: LD_ADDR_VAR 0 12
26320: PUSH
26321: LD_VAR 0 18
26325: PPUSH
26326: LD_INT 22
26328: PUSH
26329: LD_VAR 0 16
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 30
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 30
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL_OW 72
26374: ST_TO_ADDR
26375: GO 26529
26377: LD_INT 3
26379: DOUBLE
26380: EQUAL
26381: IFTRUE 26385
26383: GO 26447
26385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26386: LD_ADDR_VAR 0 12
26390: PUSH
26391: LD_VAR 0 18
26395: PPUSH
26396: LD_INT 22
26398: PUSH
26399: LD_VAR 0 16
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 30
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 30
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 72
26444: ST_TO_ADDR
26445: GO 26529
26447: LD_INT 4
26449: DOUBLE
26450: EQUAL
26451: IFTRUE 26455
26453: GO 26528
26455: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26456: LD_ADDR_VAR 0 12
26460: PUSH
26461: LD_VAR 0 18
26465: PPUSH
26466: LD_INT 22
26468: PUSH
26469: LD_VAR 0 16
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: LD_INT 30
26483: PUSH
26484: LD_INT 6
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 30
26493: PUSH
26494: LD_INT 7
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 30
26503: PUSH
26504: LD_INT 8
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PPUSH
26521: CALL_OW 72
26525: ST_TO_ADDR
26526: GO 26529
26528: POP
// if i = 1 then
26529: LD_VAR 0 8
26533: PUSH
26534: LD_INT 1
26536: EQUAL
26537: IFFALSE 26648
// begin tmp := [ ] ;
26539: LD_ADDR_VAR 0 19
26543: PUSH
26544: EMPTY
26545: ST_TO_ADDR
// for j in f do
26546: LD_ADDR_VAR 0 9
26550: PUSH
26551: LD_VAR 0 12
26555: PUSH
26556: FOR_IN
26557: IFFALSE 26630
// if GetBType ( j ) = b_bunker then
26559: LD_VAR 0 9
26563: PPUSH
26564: CALL_OW 266
26568: PUSH
26569: LD_INT 32
26571: EQUAL
26572: IFFALSE 26599
// tmp := Insert ( tmp , 1 , j ) else
26574: LD_ADDR_VAR 0 19
26578: PUSH
26579: LD_VAR 0 19
26583: PPUSH
26584: LD_INT 1
26586: PPUSH
26587: LD_VAR 0 9
26591: PPUSH
26592: CALL_OW 2
26596: ST_TO_ADDR
26597: GO 26628
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26599: LD_ADDR_VAR 0 19
26603: PUSH
26604: LD_VAR 0 19
26608: PPUSH
26609: LD_VAR 0 19
26613: PUSH
26614: LD_INT 1
26616: PLUS
26617: PPUSH
26618: LD_VAR 0 9
26622: PPUSH
26623: CALL_OW 2
26627: ST_TO_ADDR
26628: GO 26556
26630: POP
26631: POP
// if tmp then
26632: LD_VAR 0 19
26636: IFFALSE 26648
// f := tmp ;
26638: LD_ADDR_VAR 0 12
26642: PUSH
26643: LD_VAR 0 19
26647: ST_TO_ADDR
// end ; x := personel [ i ] ;
26648: LD_ADDR_VAR 0 13
26652: PUSH
26653: LD_VAR 0 6
26657: PUSH
26658: LD_VAR 0 8
26662: ARRAY
26663: ST_TO_ADDR
// if x = - 1 then
26664: LD_VAR 0 13
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: EQUAL
26673: IFFALSE 26882
// begin for j in f do
26675: LD_ADDR_VAR 0 9
26679: PUSH
26680: LD_VAR 0 12
26684: PUSH
26685: FOR_IN
26686: IFFALSE 26878
// repeat InitHc ;
26688: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26692: LD_VAR 0 9
26696: PPUSH
26697: CALL_OW 266
26701: PUSH
26702: LD_INT 5
26704: EQUAL
26705: IFFALSE 26775
// begin if UnitsInside ( j ) < 3 then
26707: LD_VAR 0 9
26711: PPUSH
26712: CALL_OW 313
26716: PUSH
26717: LD_INT 3
26719: LESS
26720: IFFALSE 26756
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26722: LD_INT 0
26724: PPUSH
26725: LD_INT 5
26727: PUSH
26728: LD_INT 8
26730: PUSH
26731: LD_INT 9
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: PUSH
26739: LD_VAR 0 17
26743: ARRAY
26744: PPUSH
26745: LD_VAR 0 4
26749: PPUSH
26750: CALL_OW 380
26754: GO 26773
// PrepareHuman ( false , i , skill ) ;
26756: LD_INT 0
26758: PPUSH
26759: LD_VAR 0 8
26763: PPUSH
26764: LD_VAR 0 4
26768: PPUSH
26769: CALL_OW 380
// end else
26773: GO 26792
// PrepareHuman ( false , i , skill ) ;
26775: LD_INT 0
26777: PPUSH
26778: LD_VAR 0 8
26782: PPUSH
26783: LD_VAR 0 4
26787: PPUSH
26788: CALL_OW 380
// un := CreateHuman ;
26792: LD_ADDR_VAR 0 14
26796: PUSH
26797: CALL_OW 44
26801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26802: LD_ADDR_VAR 0 7
26806: PUSH
26807: LD_VAR 0 7
26811: PPUSH
26812: LD_INT 1
26814: PPUSH
26815: LD_VAR 0 14
26819: PPUSH
26820: CALL_OW 2
26824: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26825: LD_VAR 0 14
26829: PPUSH
26830: LD_VAR 0 9
26834: PPUSH
26835: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26839: LD_VAR 0 9
26843: PPUSH
26844: CALL_OW 313
26848: PUSH
26849: LD_INT 6
26851: EQUAL
26852: PUSH
26853: LD_VAR 0 9
26857: PPUSH
26858: CALL_OW 266
26862: PUSH
26863: LD_INT 32
26865: PUSH
26866: LD_INT 31
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: IN
26873: OR
26874: IFFALSE 26688
26876: GO 26685
26878: POP
26879: POP
// end else
26880: GO 27262
// for j = 1 to x do
26882: LD_ADDR_VAR 0 9
26886: PUSH
26887: DOUBLE
26888: LD_INT 1
26890: DEC
26891: ST_TO_ADDR
26892: LD_VAR 0 13
26896: PUSH
26897: FOR_TO
26898: IFFALSE 27260
// begin InitHc ;
26900: CALL_OW 19
// if not f then
26904: LD_VAR 0 12
26908: NOT
26909: IFFALSE 26998
// begin PrepareHuman ( false , i , skill ) ;
26911: LD_INT 0
26913: PPUSH
26914: LD_VAR 0 8
26918: PPUSH
26919: LD_VAR 0 4
26923: PPUSH
26924: CALL_OW 380
// un := CreateHuman ;
26928: LD_ADDR_VAR 0 14
26932: PUSH
26933: CALL_OW 44
26937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26938: LD_ADDR_VAR 0 7
26942: PUSH
26943: LD_VAR 0 7
26947: PPUSH
26948: LD_INT 1
26950: PPUSH
26951: LD_VAR 0 14
26955: PPUSH
26956: CALL_OW 2
26960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26961: LD_VAR 0 14
26965: PPUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 250
26975: PPUSH
26976: LD_VAR 0 1
26980: PPUSH
26981: CALL_OW 251
26985: PPUSH
26986: LD_INT 10
26988: PPUSH
26989: LD_INT 0
26991: PPUSH
26992: CALL_OW 50
// continue ;
26996: GO 26897
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26998: LD_VAR 0 12
27002: PUSH
27003: LD_INT 1
27005: ARRAY
27006: PPUSH
27007: CALL_OW 313
27011: PUSH
27012: LD_VAR 0 12
27016: PUSH
27017: LD_INT 1
27019: ARRAY
27020: PPUSH
27021: CALL_OW 266
27025: PUSH
27026: LD_INT 32
27028: PUSH
27029: LD_INT 31
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: IN
27036: AND
27037: PUSH
27038: LD_VAR 0 12
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: PPUSH
27047: CALL_OW 313
27051: PUSH
27052: LD_INT 6
27054: EQUAL
27055: OR
27056: IFFALSE 27076
// f := Delete ( f , 1 ) ;
27058: LD_ADDR_VAR 0 12
27062: PUSH
27063: LD_VAR 0 12
27067: PPUSH
27068: LD_INT 1
27070: PPUSH
27071: CALL_OW 3
27075: ST_TO_ADDR
// if not f then
27076: LD_VAR 0 12
27080: NOT
27081: IFFALSE 27099
// begin x := x + 2 ;
27083: LD_ADDR_VAR 0 13
27087: PUSH
27088: LD_VAR 0 13
27092: PUSH
27093: LD_INT 2
27095: PLUS
27096: ST_TO_ADDR
// continue ;
27097: GO 26897
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27099: LD_VAR 0 12
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PPUSH
27108: CALL_OW 266
27112: PUSH
27113: LD_INT 5
27115: EQUAL
27116: IFFALSE 27190
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27118: LD_VAR 0 12
27122: PUSH
27123: LD_INT 1
27125: ARRAY
27126: PPUSH
27127: CALL_OW 313
27131: PUSH
27132: LD_INT 3
27134: LESS
27135: IFFALSE 27171
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27137: LD_INT 0
27139: PPUSH
27140: LD_INT 5
27142: PUSH
27143: LD_INT 8
27145: PUSH
27146: LD_INT 9
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: LIST
27153: PUSH
27154: LD_VAR 0 17
27158: ARRAY
27159: PPUSH
27160: LD_VAR 0 4
27164: PPUSH
27165: CALL_OW 380
27169: GO 27188
// PrepareHuman ( false , i , skill ) ;
27171: LD_INT 0
27173: PPUSH
27174: LD_VAR 0 8
27178: PPUSH
27179: LD_VAR 0 4
27183: PPUSH
27184: CALL_OW 380
// end else
27188: GO 27207
// PrepareHuman ( false , i , skill ) ;
27190: LD_INT 0
27192: PPUSH
27193: LD_VAR 0 8
27197: PPUSH
27198: LD_VAR 0 4
27202: PPUSH
27203: CALL_OW 380
// un := CreateHuman ;
27207: LD_ADDR_VAR 0 14
27211: PUSH
27212: CALL_OW 44
27216: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27217: LD_ADDR_VAR 0 7
27221: PUSH
27222: LD_VAR 0 7
27226: PPUSH
27227: LD_INT 1
27229: PPUSH
27230: LD_VAR 0 14
27234: PPUSH
27235: CALL_OW 2
27239: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27240: LD_VAR 0 14
27244: PPUSH
27245: LD_VAR 0 12
27249: PUSH
27250: LD_INT 1
27252: ARRAY
27253: PPUSH
27254: CALL_OW 52
// end ;
27258: GO 26897
27260: POP
27261: POP
// end ;
27262: GO 26199
27264: POP
27265: POP
// result := result ^ buildings ;
27266: LD_ADDR_VAR 0 7
27270: PUSH
27271: LD_VAR 0 7
27275: PUSH
27276: LD_VAR 0 18
27280: ADD
27281: ST_TO_ADDR
// end else
27282: GO 27425
// begin for i = 1 to personel do
27284: LD_ADDR_VAR 0 8
27288: PUSH
27289: DOUBLE
27290: LD_INT 1
27292: DEC
27293: ST_TO_ADDR
27294: LD_VAR 0 6
27298: PUSH
27299: FOR_TO
27300: IFFALSE 27423
// begin if i > 4 then
27302: LD_VAR 0 8
27306: PUSH
27307: LD_INT 4
27309: GREATER
27310: IFFALSE 27314
// break ;
27312: GO 27423
// x := personel [ i ] ;
27314: LD_ADDR_VAR 0 13
27318: PUSH
27319: LD_VAR 0 6
27323: PUSH
27324: LD_VAR 0 8
27328: ARRAY
27329: ST_TO_ADDR
// if x = - 1 then
27330: LD_VAR 0 13
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: EQUAL
27339: IFFALSE 27343
// continue ;
27341: GO 27299
// PrepareHuman ( false , i , skill ) ;
27343: LD_INT 0
27345: PPUSH
27346: LD_VAR 0 8
27350: PPUSH
27351: LD_VAR 0 4
27355: PPUSH
27356: CALL_OW 380
// un := CreateHuman ;
27360: LD_ADDR_VAR 0 14
27364: PUSH
27365: CALL_OW 44
27369: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27370: LD_VAR 0 14
27374: PPUSH
27375: LD_VAR 0 1
27379: PPUSH
27380: CALL_OW 250
27384: PPUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 251
27394: PPUSH
27395: LD_INT 10
27397: PPUSH
27398: LD_INT 0
27400: PPUSH
27401: CALL_OW 50
// result := result ^ un ;
27405: LD_ADDR_VAR 0 7
27409: PUSH
27410: LD_VAR 0 7
27414: PUSH
27415: LD_VAR 0 14
27419: ADD
27420: ST_TO_ADDR
// end ;
27421: GO 27299
27423: POP
27424: POP
// end ; end ;
27425: LD_VAR 0 7
27429: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27430: LD_INT 0
27432: PPUSH
27433: PPUSH
27434: PPUSH
27435: PPUSH
27436: PPUSH
27437: PPUSH
27438: PPUSH
27439: PPUSH
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
// result := false ;
27448: LD_ADDR_VAR 0 3
27452: PUSH
27453: LD_INT 0
27455: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27456: LD_VAR 0 1
27460: NOT
27461: PUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 266
27471: PUSH
27472: LD_INT 32
27474: PUSH
27475: LD_INT 33
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: IN
27482: NOT
27483: OR
27484: IFFALSE 27488
// exit ;
27486: GO 28597
// nat := GetNation ( tower ) ;
27488: LD_ADDR_VAR 0 12
27492: PUSH
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 248
27502: ST_TO_ADDR
// side := GetSide ( tower ) ;
27503: LD_ADDR_VAR 0 16
27507: PUSH
27508: LD_VAR 0 1
27512: PPUSH
27513: CALL_OW 255
27517: ST_TO_ADDR
// x := GetX ( tower ) ;
27518: LD_ADDR_VAR 0 10
27522: PUSH
27523: LD_VAR 0 1
27527: PPUSH
27528: CALL_OW 250
27532: ST_TO_ADDR
// y := GetY ( tower ) ;
27533: LD_ADDR_VAR 0 11
27537: PUSH
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 251
27547: ST_TO_ADDR
// if not x or not y then
27548: LD_VAR 0 10
27552: NOT
27553: PUSH
27554: LD_VAR 0 11
27558: NOT
27559: OR
27560: IFFALSE 27564
// exit ;
27562: GO 28597
// weapon := 0 ;
27564: LD_ADDR_VAR 0 18
27568: PUSH
27569: LD_INT 0
27571: ST_TO_ADDR
// fac_list := [ ] ;
27572: LD_ADDR_VAR 0 17
27576: PUSH
27577: EMPTY
27578: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27579: LD_ADDR_VAR 0 6
27583: PUSH
27584: LD_VAR 0 1
27588: PPUSH
27589: CALL_OW 274
27593: PPUSH
27594: LD_VAR 0 2
27598: PPUSH
27599: LD_INT 0
27601: PPUSH
27602: CALL 25168 0 3
27606: PPUSH
27607: LD_INT 30
27609: PUSH
27610: LD_INT 3
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PPUSH
27617: CALL_OW 72
27621: ST_TO_ADDR
// if not factories then
27622: LD_VAR 0 6
27626: NOT
27627: IFFALSE 27631
// exit ;
27629: GO 28597
// for i in factories do
27631: LD_ADDR_VAR 0 8
27635: PUSH
27636: LD_VAR 0 6
27640: PUSH
27641: FOR_IN
27642: IFFALSE 27667
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27644: LD_ADDR_VAR 0 17
27648: PUSH
27649: LD_VAR 0 17
27653: PUSH
27654: LD_VAR 0 8
27658: PPUSH
27659: CALL_OW 478
27663: UNION
27664: ST_TO_ADDR
27665: GO 27641
27667: POP
27668: POP
// if not fac_list then
27669: LD_VAR 0 17
27673: NOT
27674: IFFALSE 27678
// exit ;
27676: GO 28597
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27678: LD_ADDR_VAR 0 5
27682: PUSH
27683: LD_INT 4
27685: PUSH
27686: LD_INT 5
27688: PUSH
27689: LD_INT 9
27691: PUSH
27692: LD_INT 10
27694: PUSH
27695: LD_INT 6
27697: PUSH
27698: LD_INT 7
27700: PUSH
27701: LD_INT 11
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 27
27715: PUSH
27716: LD_INT 28
27718: PUSH
27719: LD_INT 26
27721: PUSH
27722: LD_INT 30
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 43
27733: PUSH
27734: LD_INT 44
27736: PUSH
27737: LD_INT 46
27739: PUSH
27740: LD_INT 45
27742: PUSH
27743: LD_INT 47
27745: PUSH
27746: LD_INT 49
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: PUSH
27762: LD_VAR 0 12
27766: ARRAY
27767: ST_TO_ADDR
// list := list isect fac_list ;
27768: LD_ADDR_VAR 0 5
27772: PUSH
27773: LD_VAR 0 5
27777: PUSH
27778: LD_VAR 0 17
27782: ISECT
27783: ST_TO_ADDR
// if not list then
27784: LD_VAR 0 5
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 28597
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27793: LD_VAR 0 12
27797: PUSH
27798: LD_INT 3
27800: EQUAL
27801: PUSH
27802: LD_INT 49
27804: PUSH
27805: LD_VAR 0 5
27809: IN
27810: AND
27811: PUSH
27812: LD_INT 31
27814: PPUSH
27815: LD_VAR 0 16
27819: PPUSH
27820: CALL_OW 321
27824: PUSH
27825: LD_INT 2
27827: EQUAL
27828: AND
27829: IFFALSE 27889
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27831: LD_INT 22
27833: PUSH
27834: LD_VAR 0 16
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 35
27845: PUSH
27846: LD_INT 49
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 91
27855: PUSH
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 10
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: PPUSH
27874: CALL_OW 69
27878: NOT
27879: IFFALSE 27889
// weapon := ru_time_lapser ;
27881: LD_ADDR_VAR 0 18
27885: PUSH
27886: LD_INT 49
27888: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27889: LD_VAR 0 12
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: IN
27904: PUSH
27905: LD_INT 11
27907: PUSH
27908: LD_VAR 0 5
27912: IN
27913: PUSH
27914: LD_INT 30
27916: PUSH
27917: LD_VAR 0 5
27921: IN
27922: OR
27923: AND
27924: PUSH
27925: LD_INT 6
27927: PPUSH
27928: LD_VAR 0 16
27932: PPUSH
27933: CALL_OW 321
27937: PUSH
27938: LD_INT 2
27940: EQUAL
27941: AND
27942: IFFALSE 28107
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27944: LD_INT 22
27946: PUSH
27947: LD_VAR 0 16
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 2
27958: PUSH
27959: LD_INT 35
27961: PUSH
27962: LD_INT 11
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 35
27971: PUSH
27972: LD_INT 30
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 91
27986: PUSH
27987: LD_VAR 0 1
27991: PUSH
27992: LD_INT 18
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: PPUSH
28005: CALL_OW 69
28009: NOT
28010: PUSH
28011: LD_INT 22
28013: PUSH
28014: LD_VAR 0 16
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 30
28028: PUSH
28029: LD_INT 32
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 30
28038: PUSH
28039: LD_INT 33
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 91
28053: PUSH
28054: LD_VAR 0 1
28058: PUSH
28059: LD_INT 12
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: PUSH
28080: LD_INT 2
28082: GREATER
28083: AND
28084: IFFALSE 28107
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28086: LD_ADDR_VAR 0 18
28090: PUSH
28091: LD_INT 11
28093: PUSH
28094: LD_INT 30
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_VAR 0 12
28105: ARRAY
28106: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28107: LD_VAR 0 18
28111: NOT
28112: PUSH
28113: LD_INT 40
28115: PPUSH
28116: LD_VAR 0 16
28120: PPUSH
28121: CALL_OW 321
28125: PUSH
28126: LD_INT 2
28128: EQUAL
28129: AND
28130: PUSH
28131: LD_INT 7
28133: PUSH
28134: LD_VAR 0 5
28138: IN
28139: PUSH
28140: LD_INT 28
28142: PUSH
28143: LD_VAR 0 5
28147: IN
28148: OR
28149: PUSH
28150: LD_INT 45
28152: PUSH
28153: LD_VAR 0 5
28157: IN
28158: OR
28159: AND
28160: IFFALSE 28414
// begin hex := GetHexInfo ( x , y ) ;
28162: LD_ADDR_VAR 0 4
28166: PUSH
28167: LD_VAR 0 10
28171: PPUSH
28172: LD_VAR 0 11
28176: PPUSH
28177: CALL_OW 546
28181: ST_TO_ADDR
// if hex [ 1 ] then
28182: LD_VAR 0 4
28186: PUSH
28187: LD_INT 1
28189: ARRAY
28190: IFFALSE 28194
// exit ;
28192: GO 28597
// height := hex [ 2 ] ;
28194: LD_ADDR_VAR 0 15
28198: PUSH
28199: LD_VAR 0 4
28203: PUSH
28204: LD_INT 2
28206: ARRAY
28207: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28208: LD_ADDR_VAR 0 14
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 3
28221: PUSH
28222: LD_INT 5
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: ST_TO_ADDR
// for i in tmp do
28231: LD_ADDR_VAR 0 8
28235: PUSH
28236: LD_VAR 0 14
28240: PUSH
28241: FOR_IN
28242: IFFALSE 28412
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28244: LD_ADDR_VAR 0 9
28248: PUSH
28249: LD_VAR 0 10
28253: PPUSH
28254: LD_VAR 0 8
28258: PPUSH
28259: LD_INT 5
28261: PPUSH
28262: CALL_OW 272
28266: PUSH
28267: LD_VAR 0 11
28271: PPUSH
28272: LD_VAR 0 8
28276: PPUSH
28277: LD_INT 5
28279: PPUSH
28280: CALL_OW 273
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28289: LD_VAR 0 9
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PPUSH
28298: LD_VAR 0 9
28302: PUSH
28303: LD_INT 2
28305: ARRAY
28306: PPUSH
28307: CALL_OW 488
28311: IFFALSE 28410
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28313: LD_ADDR_VAR 0 4
28317: PUSH
28318: LD_VAR 0 9
28322: PUSH
28323: LD_INT 1
28325: ARRAY
28326: PPUSH
28327: LD_VAR 0 9
28331: PUSH
28332: LD_INT 2
28334: ARRAY
28335: PPUSH
28336: CALL_OW 546
28340: ST_TO_ADDR
// if hex [ 1 ] then
28341: LD_VAR 0 4
28345: PUSH
28346: LD_INT 1
28348: ARRAY
28349: IFFALSE 28353
// continue ;
28351: GO 28241
// h := hex [ 2 ] ;
28353: LD_ADDR_VAR 0 13
28357: PUSH
28358: LD_VAR 0 4
28362: PUSH
28363: LD_INT 2
28365: ARRAY
28366: ST_TO_ADDR
// if h + 7 < height then
28367: LD_VAR 0 13
28371: PUSH
28372: LD_INT 7
28374: PLUS
28375: PUSH
28376: LD_VAR 0 15
28380: LESS
28381: IFFALSE 28410
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28383: LD_ADDR_VAR 0 18
28387: PUSH
28388: LD_INT 7
28390: PUSH
28391: LD_INT 28
28393: PUSH
28394: LD_INT 45
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: LIST
28401: PUSH
28402: LD_VAR 0 12
28406: ARRAY
28407: ST_TO_ADDR
// break ;
28408: GO 28412
// end ; end ; end ;
28410: GO 28241
28412: POP
28413: POP
// end ; if not weapon then
28414: LD_VAR 0 18
28418: NOT
28419: IFFALSE 28479
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28421: LD_ADDR_VAR 0 5
28425: PUSH
28426: LD_VAR 0 5
28430: PUSH
28431: LD_INT 11
28433: PUSH
28434: LD_INT 30
28436: PUSH
28437: LD_INT 49
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: DIFF
28445: ST_TO_ADDR
// if not list then
28446: LD_VAR 0 5
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28597
// weapon := list [ rand ( 1 , list ) ] ;
28455: LD_ADDR_VAR 0 18
28459: PUSH
28460: LD_VAR 0 5
28464: PUSH
28465: LD_INT 1
28467: PPUSH
28468: LD_VAR 0 5
28472: PPUSH
28473: CALL_OW 12
28477: ARRAY
28478: ST_TO_ADDR
// end ; if weapon then
28479: LD_VAR 0 18
28483: IFFALSE 28597
// begin tmp := CostOfWeapon ( weapon ) ;
28485: LD_ADDR_VAR 0 14
28489: PUSH
28490: LD_VAR 0 18
28494: PPUSH
28495: CALL_OW 451
28499: ST_TO_ADDR
// j := GetBase ( tower ) ;
28500: LD_ADDR_VAR 0 9
28504: PUSH
28505: LD_VAR 0 1
28509: PPUSH
28510: CALL_OW 274
28514: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28515: LD_VAR 0 9
28519: PPUSH
28520: LD_INT 1
28522: PPUSH
28523: CALL_OW 275
28527: PUSH
28528: LD_VAR 0 14
28532: PUSH
28533: LD_INT 1
28535: ARRAY
28536: GREATEREQUAL
28537: PUSH
28538: LD_VAR 0 9
28542: PPUSH
28543: LD_INT 2
28545: PPUSH
28546: CALL_OW 275
28550: PUSH
28551: LD_VAR 0 14
28555: PUSH
28556: LD_INT 2
28558: ARRAY
28559: GREATEREQUAL
28560: AND
28561: PUSH
28562: LD_VAR 0 9
28566: PPUSH
28567: LD_INT 3
28569: PPUSH
28570: CALL_OW 275
28574: PUSH
28575: LD_VAR 0 14
28579: PUSH
28580: LD_INT 3
28582: ARRAY
28583: GREATEREQUAL
28584: AND
28585: IFFALSE 28597
// result := weapon ;
28587: LD_ADDR_VAR 0 3
28591: PUSH
28592: LD_VAR 0 18
28596: ST_TO_ADDR
// end ; end ;
28597: LD_VAR 0 3
28601: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
// result := true ;
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_INT 1
28613: ST_TO_ADDR
// if array1 = array2 then
28614: LD_VAR 0 1
28618: PUSH
28619: LD_VAR 0 2
28623: EQUAL
28624: IFFALSE 28684
// begin for i = 1 to array1 do
28626: LD_ADDR_VAR 0 4
28630: PUSH
28631: DOUBLE
28632: LD_INT 1
28634: DEC
28635: ST_TO_ADDR
28636: LD_VAR 0 1
28640: PUSH
28641: FOR_TO
28642: IFFALSE 28680
// if array1 [ i ] <> array2 [ i ] then
28644: LD_VAR 0 1
28648: PUSH
28649: LD_VAR 0 4
28653: ARRAY
28654: PUSH
28655: LD_VAR 0 2
28659: PUSH
28660: LD_VAR 0 4
28664: ARRAY
28665: NONEQUAL
28666: IFFALSE 28678
// begin result := false ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 0
28675: ST_TO_ADDR
// break ;
28676: GO 28680
// end ;
28678: GO 28641
28680: POP
28681: POP
// end else
28682: GO 28692
// result := false ;
28684: LD_ADDR_VAR 0 3
28688: PUSH
28689: LD_INT 0
28691: ST_TO_ADDR
// end ;
28692: LD_VAR 0 3
28696: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28697: LD_INT 0
28699: PPUSH
28700: PPUSH
// if not array1 or not array2 then
28701: LD_VAR 0 1
28705: NOT
28706: PUSH
28707: LD_VAR 0 2
28711: NOT
28712: OR
28713: IFFALSE 28717
// exit ;
28715: GO 28781
// result := true ;
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 1
28724: ST_TO_ADDR
// for i = 1 to array1 do
28725: LD_ADDR_VAR 0 4
28729: PUSH
28730: DOUBLE
28731: LD_INT 1
28733: DEC
28734: ST_TO_ADDR
28735: LD_VAR 0 1
28739: PUSH
28740: FOR_TO
28741: IFFALSE 28779
// if array1 [ i ] <> array2 [ i ] then
28743: LD_VAR 0 1
28747: PUSH
28748: LD_VAR 0 4
28752: ARRAY
28753: PUSH
28754: LD_VAR 0 2
28758: PUSH
28759: LD_VAR 0 4
28763: ARRAY
28764: NONEQUAL
28765: IFFALSE 28777
// begin result := false ;
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// break ;
28775: GO 28779
// end ;
28777: GO 28740
28779: POP
28780: POP
// end ;
28781: LD_VAR 0 3
28785: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28786: LD_INT 0
28788: PPUSH
28789: PPUSH
28790: PPUSH
// pom := GetBase ( fac ) ;
28791: LD_ADDR_VAR 0 5
28795: PUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL_OW 274
28805: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28806: LD_ADDR_VAR 0 4
28810: PUSH
28811: LD_VAR 0 2
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: PPUSH
28820: LD_VAR 0 2
28824: PUSH
28825: LD_INT 2
28827: ARRAY
28828: PPUSH
28829: LD_VAR 0 2
28833: PUSH
28834: LD_INT 3
28836: ARRAY
28837: PPUSH
28838: LD_VAR 0 2
28842: PUSH
28843: LD_INT 4
28845: ARRAY
28846: PPUSH
28847: CALL_OW 449
28851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28852: LD_ADDR_VAR 0 3
28856: PUSH
28857: LD_VAR 0 5
28861: PPUSH
28862: LD_INT 1
28864: PPUSH
28865: CALL_OW 275
28869: PUSH
28870: LD_VAR 0 4
28874: PUSH
28875: LD_INT 1
28877: ARRAY
28878: GREATEREQUAL
28879: PUSH
28880: LD_VAR 0 5
28884: PPUSH
28885: LD_INT 2
28887: PPUSH
28888: CALL_OW 275
28892: PUSH
28893: LD_VAR 0 4
28897: PUSH
28898: LD_INT 2
28900: ARRAY
28901: GREATEREQUAL
28902: AND
28903: PUSH
28904: LD_VAR 0 5
28908: PPUSH
28909: LD_INT 3
28911: PPUSH
28912: CALL_OW 275
28916: PUSH
28917: LD_VAR 0 4
28921: PUSH
28922: LD_INT 3
28924: ARRAY
28925: GREATEREQUAL
28926: AND
28927: ST_TO_ADDR
// end ;
28928: LD_VAR 0 3
28932: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28933: LD_INT 0
28935: PPUSH
28936: PPUSH
28937: PPUSH
28938: PPUSH
// pom := GetBase ( building ) ;
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 274
28953: ST_TO_ADDR
// if not pom then
28954: LD_VAR 0 3
28958: NOT
28959: IFFALSE 28963
// exit ;
28961: GO 29133
// btype := GetBType ( building ) ;
28963: LD_ADDR_VAR 0 5
28967: PUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 266
28977: ST_TO_ADDR
// if btype = b_armoury then
28978: LD_VAR 0 5
28982: PUSH
28983: LD_INT 4
28985: EQUAL
28986: IFFALSE 28996
// btype := b_barracks ;
28988: LD_ADDR_VAR 0 5
28992: PUSH
28993: LD_INT 5
28995: ST_TO_ADDR
// if btype = b_depot then
28996: LD_VAR 0 5
29000: PUSH
29001: LD_INT 0
29003: EQUAL
29004: IFFALSE 29014
// btype := b_warehouse ;
29006: LD_ADDR_VAR 0 5
29010: PUSH
29011: LD_INT 1
29013: ST_TO_ADDR
// if btype = b_workshop then
29014: LD_VAR 0 5
29018: PUSH
29019: LD_INT 2
29021: EQUAL
29022: IFFALSE 29032
// btype := b_factory ;
29024: LD_ADDR_VAR 0 5
29028: PUSH
29029: LD_INT 3
29031: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29032: LD_ADDR_VAR 0 4
29036: PUSH
29037: LD_VAR 0 5
29041: PPUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 248
29051: PPUSH
29052: CALL_OW 450
29056: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29057: LD_ADDR_VAR 0 2
29061: PUSH
29062: LD_VAR 0 3
29066: PPUSH
29067: LD_INT 1
29069: PPUSH
29070: CALL_OW 275
29074: PUSH
29075: LD_VAR 0 4
29079: PUSH
29080: LD_INT 1
29082: ARRAY
29083: GREATEREQUAL
29084: PUSH
29085: LD_VAR 0 3
29089: PPUSH
29090: LD_INT 2
29092: PPUSH
29093: CALL_OW 275
29097: PUSH
29098: LD_VAR 0 4
29102: PUSH
29103: LD_INT 2
29105: ARRAY
29106: GREATEREQUAL
29107: AND
29108: PUSH
29109: LD_VAR 0 3
29113: PPUSH
29114: LD_INT 3
29116: PPUSH
29117: CALL_OW 275
29121: PUSH
29122: LD_VAR 0 4
29126: PUSH
29127: LD_INT 3
29129: ARRAY
29130: GREATEREQUAL
29131: AND
29132: ST_TO_ADDR
// end ;
29133: LD_VAR 0 2
29137: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29138: LD_INT 0
29140: PPUSH
29141: PPUSH
29142: PPUSH
// pom := GetBase ( building ) ;
29143: LD_ADDR_VAR 0 4
29147: PUSH
29148: LD_VAR 0 1
29152: PPUSH
29153: CALL_OW 274
29157: ST_TO_ADDR
// if not pom then
29158: LD_VAR 0 4
29162: NOT
29163: IFFALSE 29167
// exit ;
29165: GO 29268
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29167: LD_ADDR_VAR 0 5
29171: PUSH
29172: LD_VAR 0 2
29176: PPUSH
29177: LD_VAR 0 1
29181: PPUSH
29182: CALL_OW 248
29186: PPUSH
29187: CALL_OW 450
29191: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_VAR 0 4
29201: PPUSH
29202: LD_INT 1
29204: PPUSH
29205: CALL_OW 275
29209: PUSH
29210: LD_VAR 0 5
29214: PUSH
29215: LD_INT 1
29217: ARRAY
29218: GREATEREQUAL
29219: PUSH
29220: LD_VAR 0 4
29224: PPUSH
29225: LD_INT 2
29227: PPUSH
29228: CALL_OW 275
29232: PUSH
29233: LD_VAR 0 5
29237: PUSH
29238: LD_INT 2
29240: ARRAY
29241: GREATEREQUAL
29242: AND
29243: PUSH
29244: LD_VAR 0 4
29248: PPUSH
29249: LD_INT 3
29251: PPUSH
29252: CALL_OW 275
29256: PUSH
29257: LD_VAR 0 5
29261: PUSH
29262: LD_INT 3
29264: ARRAY
29265: GREATEREQUAL
29266: AND
29267: ST_TO_ADDR
// end ;
29268: LD_VAR 0 3
29272: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29273: LD_INT 0
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
// result := false ;
29286: LD_ADDR_VAR 0 8
29290: PUSH
29291: LD_INT 0
29293: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29294: LD_VAR 0 5
29298: NOT
29299: PUSH
29300: LD_VAR 0 1
29304: NOT
29305: OR
29306: PUSH
29307: LD_VAR 0 2
29311: NOT
29312: OR
29313: PUSH
29314: LD_VAR 0 3
29318: NOT
29319: OR
29320: IFFALSE 29324
// exit ;
29322: GO 30138
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29324: LD_ADDR_VAR 0 14
29328: PUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: LD_VAR 0 2
29338: PPUSH
29339: LD_VAR 0 3
29343: PPUSH
29344: LD_VAR 0 4
29348: PPUSH
29349: LD_VAR 0 5
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PPUSH
29358: CALL_OW 248
29362: PPUSH
29363: LD_INT 0
29365: PPUSH
29366: CALL 31391 0 6
29370: ST_TO_ADDR
// if not hexes then
29371: LD_VAR 0 14
29375: NOT
29376: IFFALSE 29380
// exit ;
29378: GO 30138
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29380: LD_ADDR_VAR 0 17
29384: PUSH
29385: LD_VAR 0 5
29389: PPUSH
29390: LD_INT 22
29392: PUSH
29393: LD_VAR 0 13
29397: PPUSH
29398: CALL_OW 255
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 30
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 30
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 72
29443: ST_TO_ADDR
// for i = 1 to hexes do
29444: LD_ADDR_VAR 0 9
29448: PUSH
29449: DOUBLE
29450: LD_INT 1
29452: DEC
29453: ST_TO_ADDR
29454: LD_VAR 0 14
29458: PUSH
29459: FOR_TO
29460: IFFALSE 30136
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29462: LD_ADDR_VAR 0 13
29466: PUSH
29467: LD_VAR 0 14
29471: PUSH
29472: LD_VAR 0 9
29476: ARRAY
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: PPUSH
29482: LD_VAR 0 14
29486: PUSH
29487: LD_VAR 0 9
29491: ARRAY
29492: PUSH
29493: LD_INT 2
29495: ARRAY
29496: PPUSH
29497: CALL_OW 428
29501: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29502: LD_VAR 0 14
29506: PUSH
29507: LD_VAR 0 9
29511: ARRAY
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: LD_VAR 0 14
29521: PUSH
29522: LD_VAR 0 9
29526: ARRAY
29527: PUSH
29528: LD_INT 2
29530: ARRAY
29531: PPUSH
29532: CALL_OW 351
29536: PUSH
29537: LD_VAR 0 14
29541: PUSH
29542: LD_VAR 0 9
29546: ARRAY
29547: PUSH
29548: LD_INT 1
29550: ARRAY
29551: PPUSH
29552: LD_VAR 0 14
29556: PUSH
29557: LD_VAR 0 9
29561: ARRAY
29562: PUSH
29563: LD_INT 2
29565: ARRAY
29566: PPUSH
29567: CALL_OW 488
29571: NOT
29572: OR
29573: PUSH
29574: LD_VAR 0 13
29578: PPUSH
29579: CALL_OW 247
29583: PUSH
29584: LD_INT 3
29586: EQUAL
29587: OR
29588: IFFALSE 29594
// exit ;
29590: POP
29591: POP
29592: GO 30138
// if not tmp then
29594: LD_VAR 0 13
29598: NOT
29599: IFFALSE 29603
// continue ;
29601: GO 29459
// result := true ;
29603: LD_ADDR_VAR 0 8
29607: PUSH
29608: LD_INT 1
29610: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29611: LD_VAR 0 6
29615: PUSH
29616: LD_VAR 0 13
29620: PPUSH
29621: CALL_OW 247
29625: PUSH
29626: LD_INT 2
29628: EQUAL
29629: AND
29630: PUSH
29631: LD_VAR 0 13
29635: PPUSH
29636: CALL_OW 263
29640: PUSH
29641: LD_INT 1
29643: EQUAL
29644: AND
29645: IFFALSE 29809
// begin if IsDrivenBy ( tmp ) then
29647: LD_VAR 0 13
29651: PPUSH
29652: CALL_OW 311
29656: IFFALSE 29660
// continue ;
29658: GO 29459
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29660: LD_VAR 0 6
29664: PPUSH
29665: LD_INT 3
29667: PUSH
29668: LD_INT 60
29670: PUSH
29671: EMPTY
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: LD_INT 55
29683: PUSH
29684: EMPTY
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PPUSH
29695: CALL_OW 72
29699: IFFALSE 29807
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29701: LD_ADDR_VAR 0 18
29705: PUSH
29706: LD_VAR 0 6
29710: PPUSH
29711: LD_INT 3
29713: PUSH
29714: LD_INT 60
29716: PUSH
29717: EMPTY
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: LD_INT 55
29729: PUSH
29730: EMPTY
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PPUSH
29741: CALL_OW 72
29745: PUSH
29746: LD_INT 1
29748: ARRAY
29749: ST_TO_ADDR
// if IsInUnit ( driver ) then
29750: LD_VAR 0 18
29754: PPUSH
29755: CALL_OW 310
29759: IFFALSE 29770
// ComExit ( driver ) ;
29761: LD_VAR 0 18
29765: PPUSH
29766: CALL 55264 0 1
// AddComEnterUnit ( driver , tmp ) ;
29770: LD_VAR 0 18
29774: PPUSH
29775: LD_VAR 0 13
29779: PPUSH
29780: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29784: LD_VAR 0 18
29788: PPUSH
29789: LD_VAR 0 7
29793: PPUSH
29794: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29798: LD_VAR 0 18
29802: PPUSH
29803: CALL_OW 181
// end ; continue ;
29807: GO 29459
// end ; if not cleaners or not tmp in cleaners then
29809: LD_VAR 0 6
29813: NOT
29814: PUSH
29815: LD_VAR 0 13
29819: PUSH
29820: LD_VAR 0 6
29824: IN
29825: NOT
29826: OR
29827: IFFALSE 30134
// begin if dep then
29829: LD_VAR 0 17
29833: IFFALSE 29969
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29835: LD_ADDR_VAR 0 16
29839: PUSH
29840: LD_VAR 0 17
29844: PUSH
29845: LD_INT 1
29847: ARRAY
29848: PPUSH
29849: CALL_OW 250
29853: PPUSH
29854: LD_VAR 0 17
29858: PUSH
29859: LD_INT 1
29861: ARRAY
29862: PPUSH
29863: CALL_OW 254
29867: PPUSH
29868: LD_INT 5
29870: PPUSH
29871: CALL_OW 272
29875: PUSH
29876: LD_VAR 0 17
29880: PUSH
29881: LD_INT 1
29883: ARRAY
29884: PPUSH
29885: CALL_OW 251
29889: PPUSH
29890: LD_VAR 0 17
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: PPUSH
29899: CALL_OW 254
29903: PPUSH
29904: LD_INT 5
29906: PPUSH
29907: CALL_OW 273
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29916: LD_VAR 0 16
29920: PUSH
29921: LD_INT 1
29923: ARRAY
29924: PPUSH
29925: LD_VAR 0 16
29929: PUSH
29930: LD_INT 2
29932: ARRAY
29933: PPUSH
29934: CALL_OW 488
29938: IFFALSE 29969
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29940: LD_VAR 0 13
29944: PPUSH
29945: LD_VAR 0 16
29949: PUSH
29950: LD_INT 1
29952: ARRAY
29953: PPUSH
29954: LD_VAR 0 16
29958: PUSH
29959: LD_INT 2
29961: ARRAY
29962: PPUSH
29963: CALL_OW 111
// continue ;
29967: GO 29459
// end ; end ; r := GetDir ( tmp ) ;
29969: LD_ADDR_VAR 0 15
29973: PUSH
29974: LD_VAR 0 13
29978: PPUSH
29979: CALL_OW 254
29983: ST_TO_ADDR
// if r = 5 then
29984: LD_VAR 0 15
29988: PUSH
29989: LD_INT 5
29991: EQUAL
29992: IFFALSE 30002
// r := 0 ;
29994: LD_ADDR_VAR 0 15
29998: PUSH
29999: LD_INT 0
30001: ST_TO_ADDR
// for j = r to 5 do
30002: LD_ADDR_VAR 0 10
30006: PUSH
30007: DOUBLE
30008: LD_VAR 0 15
30012: DEC
30013: ST_TO_ADDR
30014: LD_INT 5
30016: PUSH
30017: FOR_TO
30018: IFFALSE 30132
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30020: LD_ADDR_VAR 0 11
30024: PUSH
30025: LD_VAR 0 13
30029: PPUSH
30030: CALL_OW 250
30034: PPUSH
30035: LD_VAR 0 10
30039: PPUSH
30040: LD_INT 2
30042: PPUSH
30043: CALL_OW 272
30047: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30048: LD_ADDR_VAR 0 12
30052: PUSH
30053: LD_VAR 0 13
30057: PPUSH
30058: CALL_OW 251
30062: PPUSH
30063: LD_VAR 0 10
30067: PPUSH
30068: LD_INT 2
30070: PPUSH
30071: CALL_OW 273
30075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30076: LD_VAR 0 11
30080: PPUSH
30081: LD_VAR 0 12
30085: PPUSH
30086: CALL_OW 488
30090: PUSH
30091: LD_VAR 0 11
30095: PPUSH
30096: LD_VAR 0 12
30100: PPUSH
30101: CALL_OW 428
30105: NOT
30106: AND
30107: IFFALSE 30130
// begin ComMoveXY ( tmp , _x , _y ) ;
30109: LD_VAR 0 13
30113: PPUSH
30114: LD_VAR 0 11
30118: PPUSH
30119: LD_VAR 0 12
30123: PPUSH
30124: CALL_OW 111
// break ;
30128: GO 30132
// end ; end ;
30130: GO 30017
30132: POP
30133: POP
// end ; end ;
30134: GO 29459
30136: POP
30137: POP
// end ;
30138: LD_VAR 0 8
30142: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30143: LD_INT 0
30145: PPUSH
// result := true ;
30146: LD_ADDR_VAR 0 3
30150: PUSH
30151: LD_INT 1
30153: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30154: LD_VAR 0 2
30158: PUSH
30159: LD_INT 24
30161: DOUBLE
30162: EQUAL
30163: IFTRUE 30173
30165: LD_INT 33
30167: DOUBLE
30168: EQUAL
30169: IFTRUE 30173
30171: GO 30198
30173: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30174: LD_ADDR_VAR 0 3
30178: PUSH
30179: LD_INT 32
30181: PPUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 321
30191: PUSH
30192: LD_INT 2
30194: EQUAL
30195: ST_TO_ADDR
30196: GO 30514
30198: LD_INT 20
30200: DOUBLE
30201: EQUAL
30202: IFTRUE 30206
30204: GO 30231
30206: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30207: LD_ADDR_VAR 0 3
30211: PUSH
30212: LD_INT 6
30214: PPUSH
30215: LD_VAR 0 1
30219: PPUSH
30220: CALL_OW 321
30224: PUSH
30225: LD_INT 2
30227: EQUAL
30228: ST_TO_ADDR
30229: GO 30514
30231: LD_INT 22
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30245
30237: LD_INT 36
30239: DOUBLE
30240: EQUAL
30241: IFTRUE 30245
30243: GO 30270
30245: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30246: LD_ADDR_VAR 0 3
30250: PUSH
30251: LD_INT 15
30253: PPUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 321
30263: PUSH
30264: LD_INT 2
30266: EQUAL
30267: ST_TO_ADDR
30268: GO 30514
30270: LD_INT 30
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30303
30278: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30279: LD_ADDR_VAR 0 3
30283: PUSH
30284: LD_INT 20
30286: PPUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 321
30296: PUSH
30297: LD_INT 2
30299: EQUAL
30300: ST_TO_ADDR
30301: GO 30514
30303: LD_INT 28
30305: DOUBLE
30306: EQUAL
30307: IFTRUE 30317
30309: LD_INT 21
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30342
30317: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_INT 21
30325: PPUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 321
30335: PUSH
30336: LD_INT 2
30338: EQUAL
30339: ST_TO_ADDR
30340: GO 30514
30342: LD_INT 16
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30375
30350: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 84
30358: PPUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 321
30368: PUSH
30369: LD_INT 2
30371: EQUAL
30372: ST_TO_ADDR
30373: GO 30514
30375: LD_INT 19
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30389
30381: LD_INT 23
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 30414
30389: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: LD_INT 83
30397: PPUSH
30398: LD_VAR 0 1
30402: PPUSH
30403: CALL_OW 321
30407: PUSH
30408: LD_INT 2
30410: EQUAL
30411: ST_TO_ADDR
30412: GO 30514
30414: LD_INT 17
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30447
30422: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 39
30430: PPUSH
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 321
30440: PUSH
30441: LD_INT 2
30443: EQUAL
30444: ST_TO_ADDR
30445: GO 30514
30447: LD_INT 18
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30480
30455: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30456: LD_ADDR_VAR 0 3
30460: PUSH
30461: LD_INT 40
30463: PPUSH
30464: LD_VAR 0 1
30468: PPUSH
30469: CALL_OW 321
30473: PUSH
30474: LD_INT 2
30476: EQUAL
30477: ST_TO_ADDR
30478: GO 30514
30480: LD_INT 27
30482: DOUBLE
30483: EQUAL
30484: IFTRUE 30488
30486: GO 30513
30488: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30489: LD_ADDR_VAR 0 3
30493: PUSH
30494: LD_INT 35
30496: PPUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 321
30506: PUSH
30507: LD_INT 2
30509: EQUAL
30510: ST_TO_ADDR
30511: GO 30514
30513: POP
// end ;
30514: LD_VAR 0 3
30518: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30519: LD_INT 0
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
// result := false ;
30532: LD_ADDR_VAR 0 6
30536: PUSH
30537: LD_INT 0
30539: ST_TO_ADDR
// if btype = b_depot then
30540: LD_VAR 0 2
30544: PUSH
30545: LD_INT 0
30547: EQUAL
30548: IFFALSE 30560
// begin result := true ;
30550: LD_ADDR_VAR 0 6
30554: PUSH
30555: LD_INT 1
30557: ST_TO_ADDR
// exit ;
30558: GO 31386
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30560: LD_VAR 0 1
30564: NOT
30565: PUSH
30566: LD_VAR 0 1
30570: PPUSH
30571: CALL_OW 266
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: IN
30586: NOT
30587: OR
30588: PUSH
30589: LD_VAR 0 2
30593: NOT
30594: OR
30595: PUSH
30596: LD_VAR 0 5
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: IN
30627: NOT
30628: OR
30629: PUSH
30630: LD_VAR 0 3
30634: PPUSH
30635: LD_VAR 0 4
30639: PPUSH
30640: CALL_OW 488
30644: NOT
30645: OR
30646: IFFALSE 30650
// exit ;
30648: GO 31386
// side := GetSide ( depot ) ;
30650: LD_ADDR_VAR 0 9
30654: PUSH
30655: LD_VAR 0 1
30659: PPUSH
30660: CALL_OW 255
30664: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30665: LD_VAR 0 9
30669: PPUSH
30670: LD_VAR 0 2
30674: PPUSH
30675: CALL 30143 0 2
30679: NOT
30680: IFFALSE 30684
// exit ;
30682: GO 31386
// pom := GetBase ( depot ) ;
30684: LD_ADDR_VAR 0 10
30688: PUSH
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL_OW 274
30698: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30699: LD_ADDR_VAR 0 11
30703: PUSH
30704: LD_VAR 0 2
30708: PPUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 248
30718: PPUSH
30719: CALL_OW 450
30723: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30724: LD_VAR 0 10
30728: PPUSH
30729: LD_INT 1
30731: PPUSH
30732: CALL_OW 275
30736: PUSH
30737: LD_VAR 0 11
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: GREATEREQUAL
30746: PUSH
30747: LD_VAR 0 10
30751: PPUSH
30752: LD_INT 2
30754: PPUSH
30755: CALL_OW 275
30759: PUSH
30760: LD_VAR 0 11
30764: PUSH
30765: LD_INT 2
30767: ARRAY
30768: GREATEREQUAL
30769: AND
30770: PUSH
30771: LD_VAR 0 10
30775: PPUSH
30776: LD_INT 3
30778: PPUSH
30779: CALL_OW 275
30783: PUSH
30784: LD_VAR 0 11
30788: PUSH
30789: LD_INT 3
30791: ARRAY
30792: GREATEREQUAL
30793: AND
30794: NOT
30795: IFFALSE 30799
// exit ;
30797: GO 31386
// if GetBType ( depot ) = b_depot then
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 266
30808: PUSH
30809: LD_INT 0
30811: EQUAL
30812: IFFALSE 30824
// dist := 28 else
30814: LD_ADDR_VAR 0 14
30818: PUSH
30819: LD_INT 28
30821: ST_TO_ADDR
30822: GO 30832
// dist := 36 ;
30824: LD_ADDR_VAR 0 14
30828: PUSH
30829: LD_INT 36
30831: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30832: LD_VAR 0 1
30836: PPUSH
30837: LD_VAR 0 3
30841: PPUSH
30842: LD_VAR 0 4
30846: PPUSH
30847: CALL_OW 297
30851: PUSH
30852: LD_VAR 0 14
30856: GREATER
30857: IFFALSE 30861
// exit ;
30859: GO 31386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30861: LD_ADDR_VAR 0 12
30865: PUSH
30866: LD_VAR 0 2
30870: PPUSH
30871: LD_VAR 0 3
30875: PPUSH
30876: LD_VAR 0 4
30880: PPUSH
30881: LD_VAR 0 5
30885: PPUSH
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 248
30895: PPUSH
30896: LD_INT 0
30898: PPUSH
30899: CALL 31391 0 6
30903: ST_TO_ADDR
// if not hexes then
30904: LD_VAR 0 12
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 31386
// hex := GetHexInfo ( x , y ) ;
30913: LD_ADDR_VAR 0 15
30917: PUSH
30918: LD_VAR 0 3
30922: PPUSH
30923: LD_VAR 0 4
30927: PPUSH
30928: CALL_OW 546
30932: ST_TO_ADDR
// if hex [ 1 ] then
30933: LD_VAR 0 15
30937: PUSH
30938: LD_INT 1
30940: ARRAY
30941: IFFALSE 30945
// exit ;
30943: GO 31386
// height := hex [ 2 ] ;
30945: LD_ADDR_VAR 0 13
30949: PUSH
30950: LD_VAR 0 15
30954: PUSH
30955: LD_INT 2
30957: ARRAY
30958: ST_TO_ADDR
// for i = 1 to hexes do
30959: LD_ADDR_VAR 0 7
30963: PUSH
30964: DOUBLE
30965: LD_INT 1
30967: DEC
30968: ST_TO_ADDR
30969: LD_VAR 0 12
30973: PUSH
30974: FOR_TO
30975: IFFALSE 31305
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30977: LD_VAR 0 12
30981: PUSH
30982: LD_VAR 0 7
30986: ARRAY
30987: PUSH
30988: LD_INT 1
30990: ARRAY
30991: PPUSH
30992: LD_VAR 0 12
30996: PUSH
30997: LD_VAR 0 7
31001: ARRAY
31002: PUSH
31003: LD_INT 2
31005: ARRAY
31006: PPUSH
31007: CALL_OW 488
31011: NOT
31012: PUSH
31013: LD_VAR 0 12
31017: PUSH
31018: LD_VAR 0 7
31022: ARRAY
31023: PUSH
31024: LD_INT 1
31026: ARRAY
31027: PPUSH
31028: LD_VAR 0 12
31032: PUSH
31033: LD_VAR 0 7
31037: ARRAY
31038: PUSH
31039: LD_INT 2
31041: ARRAY
31042: PPUSH
31043: CALL_OW 428
31047: PUSH
31048: LD_INT 0
31050: GREATER
31051: OR
31052: PUSH
31053: LD_VAR 0 12
31057: PUSH
31058: LD_VAR 0 7
31062: ARRAY
31063: PUSH
31064: LD_INT 1
31066: ARRAY
31067: PPUSH
31068: LD_VAR 0 12
31072: PUSH
31073: LD_VAR 0 7
31077: ARRAY
31078: PUSH
31079: LD_INT 2
31081: ARRAY
31082: PPUSH
31083: CALL_OW 351
31087: OR
31088: IFFALSE 31094
// exit ;
31090: POP
31091: POP
31092: GO 31386
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31094: LD_ADDR_VAR 0 8
31098: PUSH
31099: LD_VAR 0 12
31103: PUSH
31104: LD_VAR 0 7
31108: ARRAY
31109: PUSH
31110: LD_INT 1
31112: ARRAY
31113: PPUSH
31114: LD_VAR 0 12
31118: PUSH
31119: LD_VAR 0 7
31123: ARRAY
31124: PUSH
31125: LD_INT 2
31127: ARRAY
31128: PPUSH
31129: CALL_OW 546
31133: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31134: LD_VAR 0 8
31138: PUSH
31139: LD_INT 1
31141: ARRAY
31142: PUSH
31143: LD_VAR 0 8
31147: PUSH
31148: LD_INT 2
31150: ARRAY
31151: PUSH
31152: LD_VAR 0 13
31156: PUSH
31157: LD_INT 2
31159: PLUS
31160: GREATER
31161: OR
31162: PUSH
31163: LD_VAR 0 8
31167: PUSH
31168: LD_INT 2
31170: ARRAY
31171: PUSH
31172: LD_VAR 0 13
31176: PUSH
31177: LD_INT 2
31179: MINUS
31180: LESS
31181: OR
31182: PUSH
31183: LD_VAR 0 8
31187: PUSH
31188: LD_INT 3
31190: ARRAY
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 8
31197: PUSH
31198: LD_INT 9
31200: PUSH
31201: LD_INT 10
31203: PUSH
31204: LD_INT 11
31206: PUSH
31207: LD_INT 12
31209: PUSH
31210: LD_INT 13
31212: PUSH
31213: LD_INT 16
31215: PUSH
31216: LD_INT 17
31218: PUSH
31219: LD_INT 18
31221: PUSH
31222: LD_INT 19
31224: PUSH
31225: LD_INT 20
31227: PUSH
31228: LD_INT 21
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: IN
31246: NOT
31247: OR
31248: PUSH
31249: LD_VAR 0 8
31253: PUSH
31254: LD_INT 5
31256: ARRAY
31257: NOT
31258: OR
31259: PUSH
31260: LD_VAR 0 8
31264: PUSH
31265: LD_INT 6
31267: ARRAY
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 7
31277: PUSH
31278: LD_INT 9
31280: PUSH
31281: LD_INT 10
31283: PUSH
31284: LD_INT 11
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: IN
31295: NOT
31296: OR
31297: IFFALSE 31303
// exit ;
31299: POP
31300: POP
31301: GO 31386
// end ;
31303: GO 30974
31305: POP
31306: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31307: LD_VAR 0 9
31311: PPUSH
31312: LD_VAR 0 3
31316: PPUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: LD_INT 20
31324: PPUSH
31325: CALL 23309 0 4
31329: PUSH
31330: LD_INT 4
31332: ARRAY
31333: IFFALSE 31337
// exit ;
31335: GO 31386
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31337: LD_VAR 0 2
31341: PUSH
31342: LD_INT 29
31344: PUSH
31345: LD_INT 30
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: IN
31352: PUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: LD_VAR 0 4
31362: PPUSH
31363: LD_VAR 0 9
31367: PPUSH
31368: CALL_OW 440
31372: NOT
31373: AND
31374: IFFALSE 31378
// exit ;
31376: GO 31386
// result := true ;
31378: LD_ADDR_VAR 0 6
31382: PUSH
31383: LD_INT 1
31385: ST_TO_ADDR
// end ;
31386: LD_VAR 0 6
31390: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31391: LD_INT 0
31393: PPUSH
31394: PPUSH
31395: PPUSH
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
31420: PPUSH
31421: PPUSH
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
// result = [ ] ;
31451: LD_ADDR_VAR 0 7
31455: PUSH
31456: EMPTY
31457: ST_TO_ADDR
// temp_list = [ ] ;
31458: LD_ADDR_VAR 0 9
31462: PUSH
31463: EMPTY
31464: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31465: LD_VAR 0 4
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 4
31484: PUSH
31485: LD_INT 5
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: IN
31496: NOT
31497: PUSH
31498: LD_VAR 0 1
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: IN
31513: PUSH
31514: LD_VAR 0 5
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: IN
31533: NOT
31534: AND
31535: OR
31536: IFFALSE 31540
// exit ;
31538: GO 49931
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31540: LD_VAR 0 1
31544: PUSH
31545: LD_INT 6
31547: PUSH
31548: LD_INT 7
31550: PUSH
31551: LD_INT 8
31553: PUSH
31554: LD_INT 13
31556: PUSH
31557: LD_INT 12
31559: PUSH
31560: LD_INT 15
31562: PUSH
31563: LD_INT 11
31565: PUSH
31566: LD_INT 14
31568: PUSH
31569: LD_INT 10
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: IN
31583: IFFALSE 31593
// btype = b_lab ;
31585: LD_ADDR_VAR 0 1
31589: PUSH
31590: LD_INT 6
31592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31593: LD_VAR 0 6
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: IN
31612: NOT
31613: PUSH
31614: LD_VAR 0 1
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 3
31630: PUSH
31631: LD_INT 6
31633: PUSH
31634: LD_INT 36
31636: PUSH
31637: LD_INT 4
31639: PUSH
31640: LD_INT 5
31642: PUSH
31643: LD_INT 31
31645: PUSH
31646: LD_INT 32
31648: PUSH
31649: LD_INT 33
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: IN
31665: NOT
31666: PUSH
31667: LD_VAR 0 6
31671: PUSH
31672: LD_INT 1
31674: EQUAL
31675: AND
31676: OR
31677: PUSH
31678: LD_VAR 0 1
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: IN
31693: NOT
31694: PUSH
31695: LD_VAR 0 6
31699: PUSH
31700: LD_INT 2
31702: EQUAL
31703: AND
31704: OR
31705: IFFALSE 31715
// mode = 0 ;
31707: LD_ADDR_VAR 0 6
31711: PUSH
31712: LD_INT 0
31714: ST_TO_ADDR
// case mode of 0 :
31715: LD_VAR 0 6
31719: PUSH
31720: LD_INT 0
31722: DOUBLE
31723: EQUAL
31724: IFTRUE 31728
31726: GO 43181
31728: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31729: LD_ADDR_VAR 0 11
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 3
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31922: LD_ADDR_VAR 0 12
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 3
32090: NEG
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32118: LD_ADDR_VAR 0 13
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 1
32199: NEG
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: LD_INT 2
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 3
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32317: LD_ADDR_VAR 0 14
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: LD_INT 3
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: LD_INT 3
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32513: LD_ADDR_VAR 0 15
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32706: LD_ADDR_VAR 0 16
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 3
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32899: LD_ADDR_VAR 0 17
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 1
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: NEG
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 2
33086: NEG
33087: PUSH
33088: LD_INT 1
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33129: LD_ADDR_VAR 0 18
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: LD_INT 2
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33359: LD_ADDR_VAR 0 19
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: NEG
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: LD_INT 2
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: LD_INT 2
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: NEG
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: NEG
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33589: LD_ADDR_VAR 0 20
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: NEG
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33819: LD_ADDR_VAR 0 21
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: NEG
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34049: LD_ADDR_VAR 0 22
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34279: LD_ADDR_VAR 0 23
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 3
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 3
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 2
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34559: LD_ADDR_VAR 0 24
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34835: LD_ADDR_VAR 0 25
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 2
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: NEG
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35109: LD_ADDR_VAR 0 26
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: NEG
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 2
35308: NEG
35309: PUSH
35310: LD_INT 2
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35385: LD_ADDR_VAR 0 27
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: LD_INT 2
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35665: LD_ADDR_VAR 0 28
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: NEG
35865: PUSH
35866: LD_INT 2
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: NEG
35877: PUSH
35878: LD_INT 3
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 3
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 3
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 3
35912: NEG
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35947: LD_ADDR_VAR 0 29
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 2
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 2
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: NEG
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: LD_INT 3
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 3
36191: NEG
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36226: LD_ADDR_VAR 0 30
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 2
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 3
36469: NEG
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36504: LD_ADDR_VAR 0 31
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: NEG
36748: PUSH
36749: LD_INT 2
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36782: LD_ADDR_VAR 0 32
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: LD_INT 2
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 3
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: LD_INT 2
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 3
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 3
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37060: LD_ADDR_VAR 0 33
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 2
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: NEG
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 3
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 3
37304: NEG
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37339: LD_ADDR_VAR 0 34
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 2
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 3
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37619: LD_ADDR_VAR 0 35
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37731: LD_ADDR_VAR 0 36
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37843: LD_ADDR_VAR 0 37
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37955: LD_ADDR_VAR 0 38
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38067: LD_ADDR_VAR 0 39
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38179: LD_ADDR_VAR 0 40
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38291: LD_ADDR_VAR 0 41
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: LD_INT 3
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 3
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 3
38565: NEG
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 3
38576: NEG
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 3
38588: NEG
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 3
38600: NEG
38601: PUSH
38602: LD_INT 3
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38641: LD_ADDR_VAR 0 42
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: LD_INT 3
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 3
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: LD_INT 3
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 3
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 3
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 3
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: NEG
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: LD_INT 3
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38991: LD_ADDR_VAR 0 43
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 3
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 3
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39339: LD_ADDR_VAR 0 44
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: LD_INT 3
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: NEG
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 3
39636: NEG
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: LD_INT 3
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39689: LD_ADDR_VAR 0 45
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 2
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 3
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 3
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 3
39986: NEG
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 3
39998: NEG
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40039: LD_ADDR_VAR 0 46
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 2
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 3
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 3
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 3
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: NEG
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 3
40346: NEG
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40387: LD_ADDR_VAR 0 47
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40538: LD_ADDR_VAR 0 48
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40685: LD_ADDR_VAR 0 49
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40829: LD_ADDR_VAR 0 50
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40973: LD_ADDR_VAR 0 51
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41120: LD_ADDR_VAR 0 52
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 2
41224: NEG
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: NEG
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41271: LD_ADDR_VAR 0 53
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41501: LD_ADDR_VAR 0 54
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41731: LD_ADDR_VAR 0 55
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41961: LD_ADDR_VAR 0 56
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42191: LD_ADDR_VAR 0 57
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42421: LD_ADDR_VAR 0 58
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42651: LD_ADDR_VAR 0 59
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42739: LD_ADDR_VAR 0 60
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42827: LD_ADDR_VAR 0 61
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42915: LD_ADDR_VAR 0 62
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43003: LD_ADDR_VAR 0 63
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43091: LD_ADDR_VAR 0 64
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
// end ; 1 :
43179: GO 49076
43181: LD_INT 1
43183: DOUBLE
43184: EQUAL
43185: IFTRUE 43189
43187: GO 45812
43189: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43190: LD_ADDR_VAR 0 11
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 3
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43234: LD_ADDR_VAR 0 12
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43275: LD_ADDR_VAR 0 13
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43315: LD_ADDR_VAR 0 14
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43356: LD_ADDR_VAR 0 15
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: NEG
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43400: LD_ADDR_VAR 0 16
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43446: LD_ADDR_VAR 0 17
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 3
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 3
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43490: LD_ADDR_VAR 0 18
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43531: LD_ADDR_VAR 0 19
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43571: LD_ADDR_VAR 0 20
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43612: LD_ADDR_VAR 0 21
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43656: LD_ADDR_VAR 0 22
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 3
43687: NEG
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43702: LD_ADDR_VAR 0 23
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 3
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 4
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 3
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43746: LD_ADDR_VAR 0 24
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 4
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43787: LD_ADDR_VAR 0 25
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 4
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43827: LD_ADDR_VAR 0 26
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 4
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 3
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43868: LD_ADDR_VAR 0 27
43872: PUSH
43873: LD_INT 3
43875: NEG
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 4
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43912: LD_ADDR_VAR 0 28
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 3
43931: NEG
43932: PUSH
43933: LD_INT 4
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 4
43943: NEG
43944: PUSH
43945: LD_INT 3
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43958: LD_ADDR_VAR 0 29
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 4
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 4
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 3
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 5
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 5
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 4
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 6
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 6
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 5
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44113: LD_ADDR_VAR 0 30
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 4
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 5
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 5
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 5
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 6
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 6
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44256: LD_ADDR_VAR 0 31
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 4
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 4
44303: PUSH
44304: LD_INT 4
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 3
44313: PUSH
44314: LD_INT 4
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 5
44323: PUSH
44324: LD_INT 4
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 5
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 4
44343: PUSH
44344: LD_INT 5
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 6
44353: PUSH
44354: LD_INT 5
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 6
44363: PUSH
44364: LD_INT 6
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 5
44373: PUSH
44374: LD_INT 6
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44395: LD_ADDR_VAR 0 32
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 4
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 4
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 3
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 5
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 5
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 6
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 6
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: LD_INT 5
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44538: LD_ADDR_VAR 0 33
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 4
44590: NEG
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 4
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 4
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 5
44624: NEG
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 5
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 5
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 6
44658: NEG
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 6
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44693: LD_ADDR_VAR 0 34
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: LD_INT 3
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 4
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 4
44748: NEG
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 4
44760: NEG
44761: PUSH
44762: LD_INT 4
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 4
44772: NEG
44773: PUSH
44774: LD_INT 5
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 5
44784: NEG
44785: PUSH
44786: LD_INT 4
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 5
44796: NEG
44797: PUSH
44798: LD_INT 5
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 5
44808: NEG
44809: PUSH
44810: LD_INT 6
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 6
44820: NEG
44821: PUSH
44822: LD_INT 5
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 6
44832: NEG
44833: PUSH
44834: LD_INT 6
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44856: LD_ADDR_VAR 0 41
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 3
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44900: LD_ADDR_VAR 0 42
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44941: LD_ADDR_VAR 0 43
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44981: LD_ADDR_VAR 0 44
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45022: LD_ADDR_VAR 0 45
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45066: LD_ADDR_VAR 0 46
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45112: LD_ADDR_VAR 0 47
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 3
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45145: LD_ADDR_VAR 0 48
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45176: LD_ADDR_VAR 0 49
45180: PUSH
45181: LD_INT 3
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45205: LD_ADDR_VAR 0 50
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 3
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 3
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45234: LD_ADDR_VAR 0 51
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45265: LD_ADDR_VAR 0 52
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45298: LD_ADDR_VAR 0 53
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 3
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45342: LD_ADDR_VAR 0 54
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45383: LD_ADDR_VAR 0 55
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45423: LD_ADDR_VAR 0 56
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45464: LD_ADDR_VAR 0 57
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 3
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45508: LD_ADDR_VAR 0 58
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 3
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 3
45527: NEG
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45554: LD_ADDR_VAR 0 59
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45598: LD_ADDR_VAR 0 60
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45639: LD_ADDR_VAR 0 61
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45679: LD_ADDR_VAR 0 62
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45720: LD_ADDR_VAR 0 63
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45764: LD_ADDR_VAR 0 64
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: ST_TO_ADDR
// end ; 2 :
45810: GO 49076
45812: LD_INT 2
45814: DOUBLE
45815: EQUAL
45816: IFTRUE 45820
45818: GO 49075
45820: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45821: LD_ADDR_VAR 0 29
45825: PUSH
45826: LD_INT 4
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 4
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 5
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 5
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 4
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 3
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 5
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 4
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: LD_INT 4
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: LD_INT 4
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 4
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 4
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 4
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 4
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 5
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 5
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 4
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 5
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 4
46160: NEG
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 4
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 4
46183: NEG
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 4
46206: NEG
46207: PUSH
46208: LD_INT 4
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 4
46218: NEG
46219: PUSH
46220: LD_INT 5
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: LD_INT 4
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 4
46254: NEG
46255: PUSH
46256: LD_INT 3
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 5
46266: NEG
46267: PUSH
46268: LD_INT 4
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 5
46278: NEG
46279: PUSH
46280: LD_INT 5
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: NEG
46291: PUSH
46292: LD_INT 5
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 5
46302: NEG
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46359: LD_ADDR_VAR 0 30
46363: PUSH
46364: LD_INT 4
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 4
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: LD_INT 4
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 5
46396: PUSH
46397: LD_INT 5
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 4
46406: PUSH
46407: LD_INT 5
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 4
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 5
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 5
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 4
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 4
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 4
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 4
46549: NEG
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 4
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 3
46572: NEG
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 4
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 5
46605: NEG
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 5
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 5
46628: NEG
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: LD_INT 3
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 4
46711: NEG
46712: PUSH
46713: LD_INT 3
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 4
46723: NEG
46724: PUSH
46725: LD_INT 4
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 4
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 4
46747: NEG
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 4
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 5
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 4
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 3
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 3
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 4
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 5
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 3
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 5
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46906: LD_ADDR_VAR 0 31
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 4
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 3
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 4
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 5
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 5
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 4
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 5
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 3
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 3
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 4
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 4
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 4
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 4
47108: NEG
47109: PUSH
47110: LD_INT 4
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 4
47120: NEG
47121: PUSH
47122: LD_INT 5
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: LD_INT 4
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 4
47156: NEG
47157: PUSH
47158: LD_INT 3
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 5
47168: NEG
47169: PUSH
47170: LD_INT 4
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 5
47180: NEG
47181: PUSH
47182: LD_INT 5
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 3
47192: NEG
47193: PUSH
47194: LD_INT 5
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 5
47204: NEG
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 4
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 4
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 4
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 5
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 5
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 4
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 5
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47456: LD_ADDR_VAR 0 32
47460: PUSH
47461: LD_INT 4
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 4
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 3
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 5
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 5
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 5
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 3
47565: NEG
47566: PUSH
47567: LD_INT 3
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: LD_INT 4
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 4
47625: NEG
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 4
47637: NEG
47638: PUSH
47639: LD_INT 4
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 4
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 4
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 4
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 5
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 4
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 4
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 5
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 3
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 5
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 4
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 4
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 4
47868: PUSH
47869: LD_INT 4
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 5
47888: PUSH
47889: LD_INT 4
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 5
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: LD_INT 5
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: LD_INT 4
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 5
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 5
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48003: LD_ADDR_VAR 0 33
48007: PUSH
48008: LD_INT 4
48010: NEG
48011: PUSH
48012: LD_INT 4
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 4
48022: NEG
48023: PUSH
48024: LD_INT 5
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: LD_INT 4
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 4
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 5
48070: NEG
48071: PUSH
48072: LD_INT 4
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 5
48082: NEG
48083: PUSH
48084: LD_INT 5
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: LD_INT 5
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 5
48106: NEG
48107: PUSH
48108: LD_INT 3
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 4
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 4
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 4
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 4
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 5
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 4
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 5
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 4
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 4
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 4
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 4
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 5
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 5
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 4
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 5
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 3
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48541: LD_ADDR_VAR 0 34
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: LD_INT 4
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 5
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 4
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 3
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 5
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 5
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 4
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 4
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 4
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 4
48743: PUSH
48744: LD_INT 4
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 4
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 5
48763: PUSH
48764: LD_INT 4
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 5
48773: PUSH
48774: LD_INT 5
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 4
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: LD_INT 4
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 5
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 3
48823: PUSH
48824: LD_INT 5
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 3
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 4
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 4
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 3
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 4
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 4
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 4
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 3
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 5
48982: NEG
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 5
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 5
49005: NEG
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// end ; end ;
49073: GO 49076
49075: POP
// case btype of b_depot , b_warehouse :
49076: LD_VAR 0 1
49080: PUSH
49081: LD_INT 0
49083: DOUBLE
49084: EQUAL
49085: IFTRUE 49095
49087: LD_INT 1
49089: DOUBLE
49090: EQUAL
49091: IFTRUE 49095
49093: GO 49296
49095: POP
// case nation of nation_american :
49096: LD_VAR 0 5
49100: PUSH
49101: LD_INT 1
49103: DOUBLE
49104: EQUAL
49105: IFTRUE 49109
49107: GO 49165
49109: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49110: LD_ADDR_VAR 0 9
49114: PUSH
49115: LD_VAR 0 11
49119: PUSH
49120: LD_VAR 0 12
49124: PUSH
49125: LD_VAR 0 13
49129: PUSH
49130: LD_VAR 0 14
49134: PUSH
49135: LD_VAR 0 15
49139: PUSH
49140: LD_VAR 0 16
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: PUSH
49153: LD_VAR 0 4
49157: PUSH
49158: LD_INT 1
49160: PLUS
49161: ARRAY
49162: ST_TO_ADDR
49163: GO 49294
49165: LD_INT 2
49167: DOUBLE
49168: EQUAL
49169: IFTRUE 49173
49171: GO 49229
49173: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49174: LD_ADDR_VAR 0 9
49178: PUSH
49179: LD_VAR 0 17
49183: PUSH
49184: LD_VAR 0 18
49188: PUSH
49189: LD_VAR 0 19
49193: PUSH
49194: LD_VAR 0 20
49198: PUSH
49199: LD_VAR 0 21
49203: PUSH
49204: LD_VAR 0 22
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: PUSH
49217: LD_VAR 0 4
49221: PUSH
49222: LD_INT 1
49224: PLUS
49225: ARRAY
49226: ST_TO_ADDR
49227: GO 49294
49229: LD_INT 3
49231: DOUBLE
49232: EQUAL
49233: IFTRUE 49237
49235: GO 49293
49237: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49238: LD_ADDR_VAR 0 9
49242: PUSH
49243: LD_VAR 0 23
49247: PUSH
49248: LD_VAR 0 24
49252: PUSH
49253: LD_VAR 0 25
49257: PUSH
49258: LD_VAR 0 26
49262: PUSH
49263: LD_VAR 0 27
49267: PUSH
49268: LD_VAR 0 28
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: PUSH
49281: LD_VAR 0 4
49285: PUSH
49286: LD_INT 1
49288: PLUS
49289: ARRAY
49290: ST_TO_ADDR
49291: GO 49294
49293: POP
49294: GO 49849
49296: LD_INT 2
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49310
49302: LD_INT 3
49304: DOUBLE
49305: EQUAL
49306: IFTRUE 49310
49308: GO 49366
49310: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49311: LD_ADDR_VAR 0 9
49315: PUSH
49316: LD_VAR 0 29
49320: PUSH
49321: LD_VAR 0 30
49325: PUSH
49326: LD_VAR 0 31
49330: PUSH
49331: LD_VAR 0 32
49335: PUSH
49336: LD_VAR 0 33
49340: PUSH
49341: LD_VAR 0 34
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: PUSH
49354: LD_VAR 0 4
49358: PUSH
49359: LD_INT 1
49361: PLUS
49362: ARRAY
49363: ST_TO_ADDR
49364: GO 49849
49366: LD_INT 16
49368: DOUBLE
49369: EQUAL
49370: IFTRUE 49428
49372: LD_INT 17
49374: DOUBLE
49375: EQUAL
49376: IFTRUE 49428
49378: LD_INT 18
49380: DOUBLE
49381: EQUAL
49382: IFTRUE 49428
49384: LD_INT 19
49386: DOUBLE
49387: EQUAL
49388: IFTRUE 49428
49390: LD_INT 22
49392: DOUBLE
49393: EQUAL
49394: IFTRUE 49428
49396: LD_INT 20
49398: DOUBLE
49399: EQUAL
49400: IFTRUE 49428
49402: LD_INT 21
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49428
49408: LD_INT 23
49410: DOUBLE
49411: EQUAL
49412: IFTRUE 49428
49414: LD_INT 24
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49428
49420: LD_INT 25
49422: DOUBLE
49423: EQUAL
49424: IFTRUE 49428
49426: GO 49484
49428: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49429: LD_ADDR_VAR 0 9
49433: PUSH
49434: LD_VAR 0 35
49438: PUSH
49439: LD_VAR 0 36
49443: PUSH
49444: LD_VAR 0 37
49448: PUSH
49449: LD_VAR 0 38
49453: PUSH
49454: LD_VAR 0 39
49458: PUSH
49459: LD_VAR 0 40
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: PUSH
49472: LD_VAR 0 4
49476: PUSH
49477: LD_INT 1
49479: PLUS
49480: ARRAY
49481: ST_TO_ADDR
49482: GO 49849
49484: LD_INT 6
49486: DOUBLE
49487: EQUAL
49488: IFTRUE 49540
49490: LD_INT 7
49492: DOUBLE
49493: EQUAL
49494: IFTRUE 49540
49496: LD_INT 8
49498: DOUBLE
49499: EQUAL
49500: IFTRUE 49540
49502: LD_INT 13
49504: DOUBLE
49505: EQUAL
49506: IFTRUE 49540
49508: LD_INT 12
49510: DOUBLE
49511: EQUAL
49512: IFTRUE 49540
49514: LD_INT 15
49516: DOUBLE
49517: EQUAL
49518: IFTRUE 49540
49520: LD_INT 11
49522: DOUBLE
49523: EQUAL
49524: IFTRUE 49540
49526: LD_INT 14
49528: DOUBLE
49529: EQUAL
49530: IFTRUE 49540
49532: LD_INT 10
49534: DOUBLE
49535: EQUAL
49536: IFTRUE 49540
49538: GO 49596
49540: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49541: LD_ADDR_VAR 0 9
49545: PUSH
49546: LD_VAR 0 41
49550: PUSH
49551: LD_VAR 0 42
49555: PUSH
49556: LD_VAR 0 43
49560: PUSH
49561: LD_VAR 0 44
49565: PUSH
49566: LD_VAR 0 45
49570: PUSH
49571: LD_VAR 0 46
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: PUSH
49584: LD_VAR 0 4
49588: PUSH
49589: LD_INT 1
49591: PLUS
49592: ARRAY
49593: ST_TO_ADDR
49594: GO 49849
49596: LD_INT 36
49598: DOUBLE
49599: EQUAL
49600: IFTRUE 49604
49602: GO 49660
49604: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49605: LD_ADDR_VAR 0 9
49609: PUSH
49610: LD_VAR 0 47
49614: PUSH
49615: LD_VAR 0 48
49619: PUSH
49620: LD_VAR 0 49
49624: PUSH
49625: LD_VAR 0 50
49629: PUSH
49630: LD_VAR 0 51
49634: PUSH
49635: LD_VAR 0 52
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: PUSH
49648: LD_VAR 0 4
49652: PUSH
49653: LD_INT 1
49655: PLUS
49656: ARRAY
49657: ST_TO_ADDR
49658: GO 49849
49660: LD_INT 4
49662: DOUBLE
49663: EQUAL
49664: IFTRUE 49686
49666: LD_INT 5
49668: DOUBLE
49669: EQUAL
49670: IFTRUE 49686
49672: LD_INT 34
49674: DOUBLE
49675: EQUAL
49676: IFTRUE 49686
49678: LD_INT 37
49680: DOUBLE
49681: EQUAL
49682: IFTRUE 49686
49684: GO 49742
49686: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49687: LD_ADDR_VAR 0 9
49691: PUSH
49692: LD_VAR 0 53
49696: PUSH
49697: LD_VAR 0 54
49701: PUSH
49702: LD_VAR 0 55
49706: PUSH
49707: LD_VAR 0 56
49711: PUSH
49712: LD_VAR 0 57
49716: PUSH
49717: LD_VAR 0 58
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: PUSH
49730: LD_VAR 0 4
49734: PUSH
49735: LD_INT 1
49737: PLUS
49738: ARRAY
49739: ST_TO_ADDR
49740: GO 49849
49742: LD_INT 31
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49792
49748: LD_INT 32
49750: DOUBLE
49751: EQUAL
49752: IFTRUE 49792
49754: LD_INT 33
49756: DOUBLE
49757: EQUAL
49758: IFTRUE 49792
49760: LD_INT 27
49762: DOUBLE
49763: EQUAL
49764: IFTRUE 49792
49766: LD_INT 26
49768: DOUBLE
49769: EQUAL
49770: IFTRUE 49792
49772: LD_INT 28
49774: DOUBLE
49775: EQUAL
49776: IFTRUE 49792
49778: LD_INT 29
49780: DOUBLE
49781: EQUAL
49782: IFTRUE 49792
49784: LD_INT 30
49786: DOUBLE
49787: EQUAL
49788: IFTRUE 49792
49790: GO 49848
49792: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49793: LD_ADDR_VAR 0 9
49797: PUSH
49798: LD_VAR 0 59
49802: PUSH
49803: LD_VAR 0 60
49807: PUSH
49808: LD_VAR 0 61
49812: PUSH
49813: LD_VAR 0 62
49817: PUSH
49818: LD_VAR 0 63
49822: PUSH
49823: LD_VAR 0 64
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: PUSH
49836: LD_VAR 0 4
49840: PUSH
49841: LD_INT 1
49843: PLUS
49844: ARRAY
49845: ST_TO_ADDR
49846: GO 49849
49848: POP
// temp_list2 = [ ] ;
49849: LD_ADDR_VAR 0 10
49853: PUSH
49854: EMPTY
49855: ST_TO_ADDR
// for i in temp_list do
49856: LD_ADDR_VAR 0 8
49860: PUSH
49861: LD_VAR 0 9
49865: PUSH
49866: FOR_IN
49867: IFFALSE 49919
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49869: LD_ADDR_VAR 0 10
49873: PUSH
49874: LD_VAR 0 10
49878: PUSH
49879: LD_VAR 0 8
49883: PUSH
49884: LD_INT 1
49886: ARRAY
49887: PUSH
49888: LD_VAR 0 2
49892: PLUS
49893: PUSH
49894: LD_VAR 0 8
49898: PUSH
49899: LD_INT 2
49901: ARRAY
49902: PUSH
49903: LD_VAR 0 3
49907: PLUS
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: ADD
49916: ST_TO_ADDR
49917: GO 49866
49919: POP
49920: POP
// result = temp_list2 ;
49921: LD_ADDR_VAR 0 7
49925: PUSH
49926: LD_VAR 0 10
49930: ST_TO_ADDR
// end ;
49931: LD_VAR 0 7
49935: RET
// export function EnemyInRange ( unit , dist ) ; begin
49936: LD_INT 0
49938: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49939: LD_ADDR_VAR 0 3
49943: PUSH
49944: LD_VAR 0 1
49948: PPUSH
49949: CALL_OW 255
49953: PPUSH
49954: LD_VAR 0 1
49958: PPUSH
49959: CALL_OW 250
49963: PPUSH
49964: LD_VAR 0 1
49968: PPUSH
49969: CALL_OW 251
49973: PPUSH
49974: LD_VAR 0 2
49978: PPUSH
49979: CALL 23309 0 4
49983: PUSH
49984: LD_INT 4
49986: ARRAY
49987: ST_TO_ADDR
// end ;
49988: LD_VAR 0 3
49992: RET
// export function PlayerSeeMe ( unit ) ; begin
49993: LD_INT 0
49995: PPUSH
// result := See ( your_side , unit ) ;
49996: LD_ADDR_VAR 0 2
50000: PUSH
50001: LD_OWVAR 2
50005: PPUSH
50006: LD_VAR 0 1
50010: PPUSH
50011: CALL_OW 292
50015: ST_TO_ADDR
// end ;
50016: LD_VAR 0 2
50020: RET
// export function ReverseDir ( unit ) ; begin
50021: LD_INT 0
50023: PPUSH
// if not unit then
50024: LD_VAR 0 1
50028: NOT
50029: IFFALSE 50033
// exit ;
50031: GO 50056
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50033: LD_ADDR_VAR 0 2
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 254
50047: PUSH
50048: LD_INT 3
50050: PLUS
50051: PUSH
50052: LD_INT 6
50054: MOD
50055: ST_TO_ADDR
// end ;
50056: LD_VAR 0 2
50060: RET
// export function ReverseArray ( array ) ; var i ; begin
50061: LD_INT 0
50063: PPUSH
50064: PPUSH
// if not array then
50065: LD_VAR 0 1
50069: NOT
50070: IFFALSE 50074
// exit ;
50072: GO 50129
// result := [ ] ;
50074: LD_ADDR_VAR 0 2
50078: PUSH
50079: EMPTY
50080: ST_TO_ADDR
// for i := array downto 1 do
50081: LD_ADDR_VAR 0 3
50085: PUSH
50086: DOUBLE
50087: LD_VAR 0 1
50091: INC
50092: ST_TO_ADDR
50093: LD_INT 1
50095: PUSH
50096: FOR_DOWNTO
50097: IFFALSE 50127
// result := Join ( result , array [ i ] ) ;
50099: LD_ADDR_VAR 0 2
50103: PUSH
50104: LD_VAR 0 2
50108: PPUSH
50109: LD_VAR 0 1
50113: PUSH
50114: LD_VAR 0 3
50118: ARRAY
50119: PPUSH
50120: CALL 54866 0 2
50124: ST_TO_ADDR
50125: GO 50096
50127: POP
50128: POP
// end ;
50129: LD_VAR 0 2
50133: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50134: LD_INT 0
50136: PPUSH
50137: PPUSH
50138: PPUSH
50139: PPUSH
50140: PPUSH
50141: PPUSH
// if not unit or not hexes then
50142: LD_VAR 0 1
50146: NOT
50147: PUSH
50148: LD_VAR 0 2
50152: NOT
50153: OR
50154: IFFALSE 50158
// exit ;
50156: GO 50281
// dist := 9999 ;
50158: LD_ADDR_VAR 0 5
50162: PUSH
50163: LD_INT 9999
50165: ST_TO_ADDR
// for i = 1 to hexes do
50166: LD_ADDR_VAR 0 4
50170: PUSH
50171: DOUBLE
50172: LD_INT 1
50174: DEC
50175: ST_TO_ADDR
50176: LD_VAR 0 2
50180: PUSH
50181: FOR_TO
50182: IFFALSE 50269
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50184: LD_ADDR_VAR 0 6
50188: PUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: LD_VAR 0 2
50198: PUSH
50199: LD_VAR 0 4
50203: ARRAY
50204: PUSH
50205: LD_INT 1
50207: ARRAY
50208: PPUSH
50209: LD_VAR 0 2
50213: PUSH
50214: LD_VAR 0 4
50218: ARRAY
50219: PUSH
50220: LD_INT 2
50222: ARRAY
50223: PPUSH
50224: CALL_OW 297
50228: ST_TO_ADDR
// if tdist < dist then
50229: LD_VAR 0 6
50233: PUSH
50234: LD_VAR 0 5
50238: LESS
50239: IFFALSE 50267
// begin hex := hexes [ i ] ;
50241: LD_ADDR_VAR 0 8
50245: PUSH
50246: LD_VAR 0 2
50250: PUSH
50251: LD_VAR 0 4
50255: ARRAY
50256: ST_TO_ADDR
// dist := tdist ;
50257: LD_ADDR_VAR 0 5
50261: PUSH
50262: LD_VAR 0 6
50266: ST_TO_ADDR
// end ; end ;
50267: GO 50181
50269: POP
50270: POP
// result := hex ;
50271: LD_ADDR_VAR 0 3
50275: PUSH
50276: LD_VAR 0 8
50280: ST_TO_ADDR
// end ;
50281: LD_VAR 0 3
50285: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50286: LD_INT 0
50288: PPUSH
50289: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50290: LD_VAR 0 1
50294: NOT
50295: PUSH
50296: LD_VAR 0 1
50300: PUSH
50301: LD_INT 21
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 23
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PPUSH
50325: CALL_OW 69
50329: IN
50330: NOT
50331: OR
50332: IFFALSE 50336
// exit ;
50334: GO 50383
// for i = 1 to 3 do
50336: LD_ADDR_VAR 0 3
50340: PUSH
50341: DOUBLE
50342: LD_INT 1
50344: DEC
50345: ST_TO_ADDR
50346: LD_INT 3
50348: PUSH
50349: FOR_TO
50350: IFFALSE 50381
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50352: LD_VAR 0 1
50356: PPUSH
50357: CALL_OW 250
50361: PPUSH
50362: LD_VAR 0 1
50366: PPUSH
50367: CALL_OW 251
50371: PPUSH
50372: LD_INT 1
50374: PPUSH
50375: CALL_OW 453
50379: GO 50349
50381: POP
50382: POP
// end ;
50383: LD_VAR 0 2
50387: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50388: LD_INT 0
50390: PPUSH
50391: PPUSH
50392: PPUSH
50393: PPUSH
50394: PPUSH
50395: PPUSH
// if not unit or not enemy_unit then
50396: LD_VAR 0 1
50400: NOT
50401: PUSH
50402: LD_VAR 0 2
50406: NOT
50407: OR
50408: IFFALSE 50412
// exit ;
50410: GO 50879
// if GetLives ( i ) < 250 then
50412: LD_VAR 0 4
50416: PPUSH
50417: CALL_OW 256
50421: PUSH
50422: LD_INT 250
50424: LESS
50425: IFFALSE 50438
// begin ComAutodestruct ( i ) ;
50427: LD_VAR 0 4
50431: PPUSH
50432: CALL 50286 0 1
// exit ;
50436: GO 50879
// end ; x := GetX ( enemy_unit ) ;
50438: LD_ADDR_VAR 0 7
50442: PUSH
50443: LD_VAR 0 2
50447: PPUSH
50448: CALL_OW 250
50452: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50453: LD_ADDR_VAR 0 8
50457: PUSH
50458: LD_VAR 0 2
50462: PPUSH
50463: CALL_OW 251
50467: ST_TO_ADDR
// if not x or not y then
50468: LD_VAR 0 7
50472: NOT
50473: PUSH
50474: LD_VAR 0 8
50478: NOT
50479: OR
50480: IFFALSE 50484
// exit ;
50482: GO 50879
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50484: LD_ADDR_VAR 0 6
50488: PUSH
50489: LD_VAR 0 7
50493: PPUSH
50494: LD_INT 0
50496: PPUSH
50497: LD_INT 4
50499: PPUSH
50500: CALL_OW 272
50504: PUSH
50505: LD_VAR 0 8
50509: PPUSH
50510: LD_INT 0
50512: PPUSH
50513: LD_INT 4
50515: PPUSH
50516: CALL_OW 273
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_VAR 0 7
50529: PPUSH
50530: LD_INT 1
50532: PPUSH
50533: LD_INT 4
50535: PPUSH
50536: CALL_OW 272
50540: PUSH
50541: LD_VAR 0 8
50545: PPUSH
50546: LD_INT 1
50548: PPUSH
50549: LD_INT 4
50551: PPUSH
50552: CALL_OW 273
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_VAR 0 7
50565: PPUSH
50566: LD_INT 2
50568: PPUSH
50569: LD_INT 4
50571: PPUSH
50572: CALL_OW 272
50576: PUSH
50577: LD_VAR 0 8
50581: PPUSH
50582: LD_INT 2
50584: PPUSH
50585: LD_INT 4
50587: PPUSH
50588: CALL_OW 273
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_VAR 0 7
50601: PPUSH
50602: LD_INT 3
50604: PPUSH
50605: LD_INT 4
50607: PPUSH
50608: CALL_OW 272
50612: PUSH
50613: LD_VAR 0 8
50617: PPUSH
50618: LD_INT 3
50620: PPUSH
50621: LD_INT 4
50623: PPUSH
50624: CALL_OW 273
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_VAR 0 7
50637: PPUSH
50638: LD_INT 4
50640: PPUSH
50641: LD_INT 4
50643: PPUSH
50644: CALL_OW 272
50648: PUSH
50649: LD_VAR 0 8
50653: PPUSH
50654: LD_INT 4
50656: PPUSH
50657: LD_INT 4
50659: PPUSH
50660: CALL_OW 273
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_VAR 0 7
50673: PPUSH
50674: LD_INT 5
50676: PPUSH
50677: LD_INT 4
50679: PPUSH
50680: CALL_OW 272
50684: PUSH
50685: LD_VAR 0 8
50689: PPUSH
50690: LD_INT 5
50692: PPUSH
50693: LD_INT 4
50695: PPUSH
50696: CALL_OW 273
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: ST_TO_ADDR
// for i = tmp downto 1 do
50713: LD_ADDR_VAR 0 4
50717: PUSH
50718: DOUBLE
50719: LD_VAR 0 6
50723: INC
50724: ST_TO_ADDR
50725: LD_INT 1
50727: PUSH
50728: FOR_DOWNTO
50729: IFFALSE 50830
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50731: LD_VAR 0 6
50735: PUSH
50736: LD_VAR 0 4
50740: ARRAY
50741: PUSH
50742: LD_INT 1
50744: ARRAY
50745: PPUSH
50746: LD_VAR 0 6
50750: PUSH
50751: LD_VAR 0 4
50755: ARRAY
50756: PUSH
50757: LD_INT 2
50759: ARRAY
50760: PPUSH
50761: CALL_OW 488
50765: NOT
50766: PUSH
50767: LD_VAR 0 6
50771: PUSH
50772: LD_VAR 0 4
50776: ARRAY
50777: PUSH
50778: LD_INT 1
50780: ARRAY
50781: PPUSH
50782: LD_VAR 0 6
50786: PUSH
50787: LD_VAR 0 4
50791: ARRAY
50792: PUSH
50793: LD_INT 2
50795: ARRAY
50796: PPUSH
50797: CALL_OW 428
50801: PUSH
50802: LD_INT 0
50804: NONEQUAL
50805: OR
50806: IFFALSE 50828
// tmp := Delete ( tmp , i ) ;
50808: LD_ADDR_VAR 0 6
50812: PUSH
50813: LD_VAR 0 6
50817: PPUSH
50818: LD_VAR 0 4
50822: PPUSH
50823: CALL_OW 3
50827: ST_TO_ADDR
50828: GO 50728
50830: POP
50831: POP
// j := GetClosestHex ( unit , tmp ) ;
50832: LD_ADDR_VAR 0 5
50836: PUSH
50837: LD_VAR 0 1
50841: PPUSH
50842: LD_VAR 0 6
50846: PPUSH
50847: CALL 50134 0 2
50851: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50852: LD_VAR 0 1
50856: PPUSH
50857: LD_VAR 0 5
50861: PUSH
50862: LD_INT 1
50864: ARRAY
50865: PPUSH
50866: LD_VAR 0 5
50870: PUSH
50871: LD_INT 2
50873: ARRAY
50874: PPUSH
50875: CALL_OW 111
// end ;
50879: LD_VAR 0 3
50883: RET
// export function PrepareApemanSoldier ( ) ; begin
50884: LD_INT 0
50886: PPUSH
// uc_nation := 0 ;
50887: LD_ADDR_OWVAR 21
50891: PUSH
50892: LD_INT 0
50894: ST_TO_ADDR
// hc_sex := sex_male ;
50895: LD_ADDR_OWVAR 27
50899: PUSH
50900: LD_INT 1
50902: ST_TO_ADDR
// hc_name :=  ;
50903: LD_ADDR_OWVAR 26
50907: PUSH
50908: LD_STRING 
50910: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50911: LD_ADDR_OWVAR 28
50915: PUSH
50916: LD_INT 15
50918: ST_TO_ADDR
// hc_gallery :=  ;
50919: LD_ADDR_OWVAR 33
50923: PUSH
50924: LD_STRING 
50926: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50927: LD_ADDR_OWVAR 31
50931: PUSH
50932: LD_INT 0
50934: PPUSH
50935: LD_INT 3
50937: PPUSH
50938: CALL_OW 12
50942: PUSH
50943: LD_INT 0
50945: PPUSH
50946: LD_INT 3
50948: PPUSH
50949: CALL_OW 12
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// end ;
50966: LD_VAR 0 1
50970: RET
// export function PrepareApemanEngineer ( ) ; begin
50971: LD_INT 0
50973: PPUSH
// uc_nation := 0 ;
50974: LD_ADDR_OWVAR 21
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// hc_sex := sex_male ;
50982: LD_ADDR_OWVAR 27
50986: PUSH
50987: LD_INT 1
50989: ST_TO_ADDR
// hc_name :=  ;
50990: LD_ADDR_OWVAR 26
50994: PUSH
50995: LD_STRING 
50997: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50998: LD_ADDR_OWVAR 28
51002: PUSH
51003: LD_INT 16
51005: ST_TO_ADDR
// hc_gallery :=  ;
51006: LD_ADDR_OWVAR 33
51010: PUSH
51011: LD_STRING 
51013: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51014: LD_ADDR_OWVAR 31
51018: PUSH
51019: LD_INT 0
51021: PPUSH
51022: LD_INT 3
51024: PPUSH
51025: CALL_OW 12
51029: PUSH
51030: LD_INT 0
51032: PPUSH
51033: LD_INT 3
51035: PPUSH
51036: CALL_OW 12
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// end ;
51053: LD_VAR 0 1
51057: RET
// export function PrepareApeman ( agressivity ) ; begin
51058: LD_INT 0
51060: PPUSH
// uc_side := 0 ;
51061: LD_ADDR_OWVAR 20
51065: PUSH
51066: LD_INT 0
51068: ST_TO_ADDR
// uc_nation := 0 ;
51069: LD_ADDR_OWVAR 21
51073: PUSH
51074: LD_INT 0
51076: ST_TO_ADDR
// hc_sex := sex_male ;
51077: LD_ADDR_OWVAR 27
51081: PUSH
51082: LD_INT 1
51084: ST_TO_ADDR
// hc_class := class_apeman ;
51085: LD_ADDR_OWVAR 28
51089: PUSH
51090: LD_INT 12
51092: ST_TO_ADDR
// hc_gallery :=  ;
51093: LD_ADDR_OWVAR 33
51097: PUSH
51098: LD_STRING 
51100: ST_TO_ADDR
// hc_name :=  ;
51101: LD_ADDR_OWVAR 26
51105: PUSH
51106: LD_STRING 
51108: ST_TO_ADDR
// if agressivity = 0 then
51109: LD_VAR 0 1
51113: PUSH
51114: LD_INT 0
51116: EQUAL
51117: IFFALSE 51129
// hc_agressivity := 0 else
51119: LD_ADDR_OWVAR 35
51123: PUSH
51124: LD_INT 0
51126: ST_TO_ADDR
51127: GO 51150
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51129: LD_ADDR_OWVAR 35
51133: PUSH
51134: LD_VAR 0 1
51138: NEG
51139: PPUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: CALL_OW 12
51149: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51150: LD_ADDR_OWVAR 31
51154: PUSH
51155: LD_INT 0
51157: PPUSH
51158: LD_INT 3
51160: PPUSH
51161: CALL_OW 12
51165: PUSH
51166: LD_INT 0
51168: PPUSH
51169: LD_INT 3
51171: PPUSH
51172: CALL_OW 12
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// end ;
51189: LD_VAR 0 2
51193: RET
// export function PrepareTiger ( agressivity ) ; begin
51194: LD_INT 0
51196: PPUSH
// uc_side := 0 ;
51197: LD_ADDR_OWVAR 20
51201: PUSH
51202: LD_INT 0
51204: ST_TO_ADDR
// uc_nation := 0 ;
51205: LD_ADDR_OWVAR 21
51209: PUSH
51210: LD_INT 0
51212: ST_TO_ADDR
// hc_class := class_tiger ;
51213: LD_ADDR_OWVAR 28
51217: PUSH
51218: LD_INT 14
51220: ST_TO_ADDR
// hc_gallery :=  ;
51221: LD_ADDR_OWVAR 33
51225: PUSH
51226: LD_STRING 
51228: ST_TO_ADDR
// hc_name :=  ;
51229: LD_ADDR_OWVAR 26
51233: PUSH
51234: LD_STRING 
51236: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51237: LD_ADDR_OWVAR 35
51241: PUSH
51242: LD_VAR 0 1
51246: NEG
51247: PPUSH
51248: LD_VAR 0 1
51252: PPUSH
51253: CALL_OW 12
51257: ST_TO_ADDR
// end ;
51258: LD_VAR 0 2
51262: RET
// export function PrepareEnchidna ( ) ; begin
51263: LD_INT 0
51265: PPUSH
// uc_side := 0 ;
51266: LD_ADDR_OWVAR 20
51270: PUSH
51271: LD_INT 0
51273: ST_TO_ADDR
// uc_nation := 0 ;
51274: LD_ADDR_OWVAR 21
51278: PUSH
51279: LD_INT 0
51281: ST_TO_ADDR
// hc_class := class_baggie ;
51282: LD_ADDR_OWVAR 28
51286: PUSH
51287: LD_INT 13
51289: ST_TO_ADDR
// hc_gallery :=  ;
51290: LD_ADDR_OWVAR 33
51294: PUSH
51295: LD_STRING 
51297: ST_TO_ADDR
// hc_name :=  ;
51298: LD_ADDR_OWVAR 26
51302: PUSH
51303: LD_STRING 
51305: ST_TO_ADDR
// end ;
51306: LD_VAR 0 1
51310: RET
// export function PrepareFrog ( ) ; begin
51311: LD_INT 0
51313: PPUSH
// uc_side := 0 ;
51314: LD_ADDR_OWVAR 20
51318: PUSH
51319: LD_INT 0
51321: ST_TO_ADDR
// uc_nation := 0 ;
51322: LD_ADDR_OWVAR 21
51326: PUSH
51327: LD_INT 0
51329: ST_TO_ADDR
// hc_class := class_frog ;
51330: LD_ADDR_OWVAR 28
51334: PUSH
51335: LD_INT 19
51337: ST_TO_ADDR
// hc_gallery :=  ;
51338: LD_ADDR_OWVAR 33
51342: PUSH
51343: LD_STRING 
51345: ST_TO_ADDR
// hc_name :=  ;
51346: LD_ADDR_OWVAR 26
51350: PUSH
51351: LD_STRING 
51353: ST_TO_ADDR
// end ;
51354: LD_VAR 0 1
51358: RET
// export function PrepareFish ( ) ; begin
51359: LD_INT 0
51361: PPUSH
// uc_side := 0 ;
51362: LD_ADDR_OWVAR 20
51366: PUSH
51367: LD_INT 0
51369: ST_TO_ADDR
// uc_nation := 0 ;
51370: LD_ADDR_OWVAR 21
51374: PUSH
51375: LD_INT 0
51377: ST_TO_ADDR
// hc_class := class_fish ;
51378: LD_ADDR_OWVAR 28
51382: PUSH
51383: LD_INT 20
51385: ST_TO_ADDR
// hc_gallery :=  ;
51386: LD_ADDR_OWVAR 33
51390: PUSH
51391: LD_STRING 
51393: ST_TO_ADDR
// hc_name :=  ;
51394: LD_ADDR_OWVAR 26
51398: PUSH
51399: LD_STRING 
51401: ST_TO_ADDR
// end ;
51402: LD_VAR 0 1
51406: RET
// export function PrepareBird ( ) ; begin
51407: LD_INT 0
51409: PPUSH
// uc_side := 0 ;
51410: LD_ADDR_OWVAR 20
51414: PUSH
51415: LD_INT 0
51417: ST_TO_ADDR
// uc_nation := 0 ;
51418: LD_ADDR_OWVAR 21
51422: PUSH
51423: LD_INT 0
51425: ST_TO_ADDR
// hc_class := class_phororhacos ;
51426: LD_ADDR_OWVAR 28
51430: PUSH
51431: LD_INT 18
51433: ST_TO_ADDR
// hc_gallery :=  ;
51434: LD_ADDR_OWVAR 33
51438: PUSH
51439: LD_STRING 
51441: ST_TO_ADDR
// hc_name :=  ;
51442: LD_ADDR_OWVAR 26
51446: PUSH
51447: LD_STRING 
51449: ST_TO_ADDR
// end ;
51450: LD_VAR 0 1
51454: RET
// export function PrepareHorse ( ) ; begin
51455: LD_INT 0
51457: PPUSH
// uc_side := 0 ;
51458: LD_ADDR_OWVAR 20
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// uc_nation := 0 ;
51466: LD_ADDR_OWVAR 21
51470: PUSH
51471: LD_INT 0
51473: ST_TO_ADDR
// hc_class := class_horse ;
51474: LD_ADDR_OWVAR 28
51478: PUSH
51479: LD_INT 21
51481: ST_TO_ADDR
// hc_gallery :=  ;
51482: LD_ADDR_OWVAR 33
51486: PUSH
51487: LD_STRING 
51489: ST_TO_ADDR
// hc_name :=  ;
51490: LD_ADDR_OWVAR 26
51494: PUSH
51495: LD_STRING 
51497: ST_TO_ADDR
// end ;
51498: LD_VAR 0 1
51502: RET
// export function PrepareMastodont ( ) ; begin
51503: LD_INT 0
51505: PPUSH
// uc_side := 0 ;
51506: LD_ADDR_OWVAR 20
51510: PUSH
51511: LD_INT 0
51513: ST_TO_ADDR
// uc_nation := 0 ;
51514: LD_ADDR_OWVAR 21
51518: PUSH
51519: LD_INT 0
51521: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51522: LD_ADDR_OWVAR 37
51526: PUSH
51527: LD_INT 31
51529: ST_TO_ADDR
// vc_control := control_rider ;
51530: LD_ADDR_OWVAR 38
51534: PUSH
51535: LD_INT 4
51537: ST_TO_ADDR
// end ;
51538: LD_VAR 0 1
51542: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51543: LD_INT 0
51545: PPUSH
51546: PPUSH
51547: PPUSH
// uc_side = 0 ;
51548: LD_ADDR_OWVAR 20
51552: PUSH
51553: LD_INT 0
51555: ST_TO_ADDR
// uc_nation = 0 ;
51556: LD_ADDR_OWVAR 21
51560: PUSH
51561: LD_INT 0
51563: ST_TO_ADDR
// InitHc_All ( ) ;
51564: CALL_OW 584
// InitVc ;
51568: CALL_OW 20
// if mastodonts then
51572: LD_VAR 0 6
51576: IFFALSE 51643
// for i = 1 to mastodonts do
51578: LD_ADDR_VAR 0 11
51582: PUSH
51583: DOUBLE
51584: LD_INT 1
51586: DEC
51587: ST_TO_ADDR
51588: LD_VAR 0 6
51592: PUSH
51593: FOR_TO
51594: IFFALSE 51641
// begin vc_chassis := 31 ;
51596: LD_ADDR_OWVAR 37
51600: PUSH
51601: LD_INT 31
51603: ST_TO_ADDR
// vc_control := control_rider ;
51604: LD_ADDR_OWVAR 38
51608: PUSH
51609: LD_INT 4
51611: ST_TO_ADDR
// animal := CreateVehicle ;
51612: LD_ADDR_VAR 0 12
51616: PUSH
51617: CALL_OW 45
51621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51622: LD_VAR 0 12
51626: PPUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_INT 0
51634: PPUSH
51635: CALL 53771 0 3
// end ;
51639: GO 51593
51641: POP
51642: POP
// if horses then
51643: LD_VAR 0 5
51647: IFFALSE 51714
// for i = 1 to horses do
51649: LD_ADDR_VAR 0 11
51653: PUSH
51654: DOUBLE
51655: LD_INT 1
51657: DEC
51658: ST_TO_ADDR
51659: LD_VAR 0 5
51663: PUSH
51664: FOR_TO
51665: IFFALSE 51712
// begin hc_class := 21 ;
51667: LD_ADDR_OWVAR 28
51671: PUSH
51672: LD_INT 21
51674: ST_TO_ADDR
// hc_gallery :=  ;
51675: LD_ADDR_OWVAR 33
51679: PUSH
51680: LD_STRING 
51682: ST_TO_ADDR
// animal := CreateHuman ;
51683: LD_ADDR_VAR 0 12
51687: PUSH
51688: CALL_OW 44
51692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51693: LD_VAR 0 12
51697: PPUSH
51698: LD_VAR 0 8
51702: PPUSH
51703: LD_INT 0
51705: PPUSH
51706: CALL 53771 0 3
// end ;
51710: GO 51664
51712: POP
51713: POP
// if birds then
51714: LD_VAR 0 1
51718: IFFALSE 51785
// for i = 1 to birds do
51720: LD_ADDR_VAR 0 11
51724: PUSH
51725: DOUBLE
51726: LD_INT 1
51728: DEC
51729: ST_TO_ADDR
51730: LD_VAR 0 1
51734: PUSH
51735: FOR_TO
51736: IFFALSE 51783
// begin hc_class := 18 ;
51738: LD_ADDR_OWVAR 28
51742: PUSH
51743: LD_INT 18
51745: ST_TO_ADDR
// hc_gallery =  ;
51746: LD_ADDR_OWVAR 33
51750: PUSH
51751: LD_STRING 
51753: ST_TO_ADDR
// animal := CreateHuman ;
51754: LD_ADDR_VAR 0 12
51758: PUSH
51759: CALL_OW 44
51763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51764: LD_VAR 0 12
51768: PPUSH
51769: LD_VAR 0 8
51773: PPUSH
51774: LD_INT 0
51776: PPUSH
51777: CALL 53771 0 3
// end ;
51781: GO 51735
51783: POP
51784: POP
// if tigers then
51785: LD_VAR 0 2
51789: IFFALSE 51873
// for i = 1 to tigers do
51791: LD_ADDR_VAR 0 11
51795: PUSH
51796: DOUBLE
51797: LD_INT 1
51799: DEC
51800: ST_TO_ADDR
51801: LD_VAR 0 2
51805: PUSH
51806: FOR_TO
51807: IFFALSE 51871
// begin hc_class = class_tiger ;
51809: LD_ADDR_OWVAR 28
51813: PUSH
51814: LD_INT 14
51816: ST_TO_ADDR
// hc_gallery =  ;
51817: LD_ADDR_OWVAR 33
51821: PUSH
51822: LD_STRING 
51824: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51825: LD_ADDR_OWVAR 35
51829: PUSH
51830: LD_INT 7
51832: NEG
51833: PPUSH
51834: LD_INT 7
51836: PPUSH
51837: CALL_OW 12
51841: ST_TO_ADDR
// animal := CreateHuman ;
51842: LD_ADDR_VAR 0 12
51846: PUSH
51847: CALL_OW 44
51851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51852: LD_VAR 0 12
51856: PPUSH
51857: LD_VAR 0 8
51861: PPUSH
51862: LD_INT 0
51864: PPUSH
51865: CALL 53771 0 3
// end ;
51869: GO 51806
51871: POP
51872: POP
// if apemans then
51873: LD_VAR 0 3
51877: IFFALSE 52000
// for i = 1 to apemans do
51879: LD_ADDR_VAR 0 11
51883: PUSH
51884: DOUBLE
51885: LD_INT 1
51887: DEC
51888: ST_TO_ADDR
51889: LD_VAR 0 3
51893: PUSH
51894: FOR_TO
51895: IFFALSE 51998
// begin hc_class = class_apeman ;
51897: LD_ADDR_OWVAR 28
51901: PUSH
51902: LD_INT 12
51904: ST_TO_ADDR
// hc_gallery =  ;
51905: LD_ADDR_OWVAR 33
51909: PUSH
51910: LD_STRING 
51912: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51913: LD_ADDR_OWVAR 35
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PPUSH
51922: LD_INT 2
51924: PPUSH
51925: CALL_OW 12
51929: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51930: LD_ADDR_OWVAR 31
51934: PUSH
51935: LD_INT 1
51937: PPUSH
51938: LD_INT 3
51940: PPUSH
51941: CALL_OW 12
51945: PUSH
51946: LD_INT 1
51948: PPUSH
51949: LD_INT 3
51951: PPUSH
51952: CALL_OW 12
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: ST_TO_ADDR
// animal := CreateHuman ;
51969: LD_ADDR_VAR 0 12
51973: PUSH
51974: CALL_OW 44
51978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51979: LD_VAR 0 12
51983: PPUSH
51984: LD_VAR 0 8
51988: PPUSH
51989: LD_INT 0
51991: PPUSH
51992: CALL 53771 0 3
// end ;
51996: GO 51894
51998: POP
51999: POP
// if enchidnas then
52000: LD_VAR 0 4
52004: IFFALSE 52071
// for i = 1 to enchidnas do
52006: LD_ADDR_VAR 0 11
52010: PUSH
52011: DOUBLE
52012: LD_INT 1
52014: DEC
52015: ST_TO_ADDR
52016: LD_VAR 0 4
52020: PUSH
52021: FOR_TO
52022: IFFALSE 52069
// begin hc_class = 13 ;
52024: LD_ADDR_OWVAR 28
52028: PUSH
52029: LD_INT 13
52031: ST_TO_ADDR
// hc_gallery =  ;
52032: LD_ADDR_OWVAR 33
52036: PUSH
52037: LD_STRING 
52039: ST_TO_ADDR
// animal := CreateHuman ;
52040: LD_ADDR_VAR 0 12
52044: PUSH
52045: CALL_OW 44
52049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52050: LD_VAR 0 12
52054: PPUSH
52055: LD_VAR 0 8
52059: PPUSH
52060: LD_INT 0
52062: PPUSH
52063: CALL 53771 0 3
// end ;
52067: GO 52021
52069: POP
52070: POP
// if fishes then
52071: LD_VAR 0 7
52075: IFFALSE 52142
// for i = 1 to fishes do
52077: LD_ADDR_VAR 0 11
52081: PUSH
52082: DOUBLE
52083: LD_INT 1
52085: DEC
52086: ST_TO_ADDR
52087: LD_VAR 0 7
52091: PUSH
52092: FOR_TO
52093: IFFALSE 52140
// begin hc_class = 20 ;
52095: LD_ADDR_OWVAR 28
52099: PUSH
52100: LD_INT 20
52102: ST_TO_ADDR
// hc_gallery =  ;
52103: LD_ADDR_OWVAR 33
52107: PUSH
52108: LD_STRING 
52110: ST_TO_ADDR
// animal := CreateHuman ;
52111: LD_ADDR_VAR 0 12
52115: PUSH
52116: CALL_OW 44
52120: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52121: LD_VAR 0 12
52125: PPUSH
52126: LD_VAR 0 9
52130: PPUSH
52131: LD_INT 0
52133: PPUSH
52134: CALL 53771 0 3
// end ;
52138: GO 52092
52140: POP
52141: POP
// end ;
52142: LD_VAR 0 10
52146: RET
// export function WantHeal ( sci , unit ) ; begin
52147: LD_INT 0
52149: PPUSH
// if GetTaskList ( sci ) > 0 then
52150: LD_VAR 0 1
52154: PPUSH
52155: CALL_OW 437
52159: PUSH
52160: LD_INT 0
52162: GREATER
52163: IFFALSE 52233
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52165: LD_VAR 0 1
52169: PPUSH
52170: CALL_OW 437
52174: PUSH
52175: LD_INT 1
52177: ARRAY
52178: PUSH
52179: LD_INT 1
52181: ARRAY
52182: PUSH
52183: LD_STRING l
52185: EQUAL
52186: PUSH
52187: LD_VAR 0 1
52191: PPUSH
52192: CALL_OW 437
52196: PUSH
52197: LD_INT 1
52199: ARRAY
52200: PUSH
52201: LD_INT 4
52203: ARRAY
52204: PUSH
52205: LD_VAR 0 2
52209: EQUAL
52210: AND
52211: IFFALSE 52223
// result := true else
52213: LD_ADDR_VAR 0 3
52217: PUSH
52218: LD_INT 1
52220: ST_TO_ADDR
52221: GO 52231
// result := false ;
52223: LD_ADDR_VAR 0 3
52227: PUSH
52228: LD_INT 0
52230: ST_TO_ADDR
// end else
52231: GO 52241
// result := false ;
52233: LD_ADDR_VAR 0 3
52237: PUSH
52238: LD_INT 0
52240: ST_TO_ADDR
// end ;
52241: LD_VAR 0 3
52245: RET
// export function HealTarget ( sci ) ; begin
52246: LD_INT 0
52248: PPUSH
// if not sci then
52249: LD_VAR 0 1
52253: NOT
52254: IFFALSE 52258
// exit ;
52256: GO 52323
// result := 0 ;
52258: LD_ADDR_VAR 0 2
52262: PUSH
52263: LD_INT 0
52265: ST_TO_ADDR
// if GetTaskList ( sci ) then
52266: LD_VAR 0 1
52270: PPUSH
52271: CALL_OW 437
52275: IFFALSE 52323
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 437
52286: PUSH
52287: LD_INT 1
52289: ARRAY
52290: PUSH
52291: LD_INT 1
52293: ARRAY
52294: PUSH
52295: LD_STRING l
52297: EQUAL
52298: IFFALSE 52323
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52300: LD_ADDR_VAR 0 2
52304: PUSH
52305: LD_VAR 0 1
52309: PPUSH
52310: CALL_OW 437
52314: PUSH
52315: LD_INT 1
52317: ARRAY
52318: PUSH
52319: LD_INT 4
52321: ARRAY
52322: ST_TO_ADDR
// end ;
52323: LD_VAR 0 2
52327: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52328: LD_INT 0
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
// if not base_units then
52334: LD_VAR 0 1
52338: NOT
52339: IFFALSE 52343
// exit ;
52341: GO 52430
// result := false ;
52343: LD_ADDR_VAR 0 2
52347: PUSH
52348: LD_INT 0
52350: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52351: LD_ADDR_VAR 0 5
52355: PUSH
52356: LD_VAR 0 1
52360: PPUSH
52361: LD_INT 21
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PPUSH
52371: CALL_OW 72
52375: ST_TO_ADDR
// if not tmp then
52376: LD_VAR 0 5
52380: NOT
52381: IFFALSE 52385
// exit ;
52383: GO 52430
// for i in tmp do
52385: LD_ADDR_VAR 0 3
52389: PUSH
52390: LD_VAR 0 5
52394: PUSH
52395: FOR_IN
52396: IFFALSE 52428
// begin result := EnemyInRange ( i , 22 ) ;
52398: LD_ADDR_VAR 0 2
52402: PUSH
52403: LD_VAR 0 3
52407: PPUSH
52408: LD_INT 22
52410: PPUSH
52411: CALL 49936 0 2
52415: ST_TO_ADDR
// if result then
52416: LD_VAR 0 2
52420: IFFALSE 52426
// exit ;
52422: POP
52423: POP
52424: GO 52430
// end ;
52426: GO 52395
52428: POP
52429: POP
// end ;
52430: LD_VAR 0 2
52434: RET
// export function FilterByTag ( units , tag ) ; begin
52435: LD_INT 0
52437: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52438: LD_ADDR_VAR 0 3
52442: PUSH
52443: LD_VAR 0 1
52447: PPUSH
52448: LD_INT 120
52450: PUSH
52451: LD_VAR 0 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PPUSH
52460: CALL_OW 72
52464: ST_TO_ADDR
// end ;
52465: LD_VAR 0 3
52469: RET
// export function IsDriver ( un ) ; begin
52470: LD_INT 0
52472: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52473: LD_ADDR_VAR 0 2
52477: PUSH
52478: LD_VAR 0 1
52482: PUSH
52483: LD_INT 55
52485: PUSH
52486: EMPTY
52487: LIST
52488: PPUSH
52489: CALL_OW 69
52493: IN
52494: ST_TO_ADDR
// end ;
52495: LD_VAR 0 2
52499: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52500: LD_INT 0
52502: PPUSH
52503: PPUSH
// list := [ ] ;
52504: LD_ADDR_VAR 0 5
52508: PUSH
52509: EMPTY
52510: ST_TO_ADDR
// case d of 0 :
52511: LD_VAR 0 3
52515: PUSH
52516: LD_INT 0
52518: DOUBLE
52519: EQUAL
52520: IFTRUE 52524
52522: GO 52657
52524: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52525: LD_ADDR_VAR 0 5
52529: PUSH
52530: LD_VAR 0 1
52534: PUSH
52535: LD_INT 4
52537: MINUS
52538: PUSH
52539: LD_VAR 0 2
52543: PUSH
52544: LD_INT 4
52546: MINUS
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: PUSH
52556: LD_VAR 0 1
52560: PUSH
52561: LD_INT 3
52563: MINUS
52564: PUSH
52565: LD_VAR 0 2
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: PUSH
52578: LD_VAR 0 1
52582: PUSH
52583: LD_INT 4
52585: PLUS
52586: PUSH
52587: LD_VAR 0 2
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: PUSH
52600: LD_VAR 0 1
52604: PUSH
52605: LD_INT 3
52607: PLUS
52608: PUSH
52609: LD_VAR 0 2
52613: PUSH
52614: LD_INT 3
52616: PLUS
52617: PUSH
52618: LD_INT 5
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: PUSH
52626: LD_VAR 0 1
52630: PUSH
52631: LD_VAR 0 2
52635: PUSH
52636: LD_INT 4
52638: PLUS
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// end ; 1 :
52655: GO 53355
52657: LD_INT 1
52659: DOUBLE
52660: EQUAL
52661: IFTRUE 52665
52663: GO 52798
52665: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52666: LD_ADDR_VAR 0 5
52670: PUSH
52671: LD_VAR 0 1
52675: PUSH
52676: LD_VAR 0 2
52680: PUSH
52681: LD_INT 4
52683: MINUS
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: PUSH
52693: LD_VAR 0 1
52697: PUSH
52698: LD_INT 3
52700: MINUS
52701: PUSH
52702: LD_VAR 0 2
52706: PUSH
52707: LD_INT 3
52709: MINUS
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: PUSH
52719: LD_VAR 0 1
52723: PUSH
52724: LD_INT 4
52726: MINUS
52727: PUSH
52728: LD_VAR 0 2
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: PUSH
52741: LD_VAR 0 1
52745: PUSH
52746: LD_VAR 0 2
52750: PUSH
52751: LD_INT 3
52753: PLUS
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: LIST
52762: PUSH
52763: LD_VAR 0 1
52767: PUSH
52768: LD_INT 4
52770: PLUS
52771: PUSH
52772: LD_VAR 0 2
52776: PUSH
52777: LD_INT 4
52779: PLUS
52780: PUSH
52781: LD_INT 5
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// end ; 2 :
52796: GO 53355
52798: LD_INT 2
52800: DOUBLE
52801: EQUAL
52802: IFTRUE 52806
52804: GO 52935
52806: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52807: LD_ADDR_VAR 0 5
52811: PUSH
52812: LD_VAR 0 1
52816: PUSH
52817: LD_VAR 0 2
52821: PUSH
52822: LD_INT 3
52824: MINUS
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: LD_VAR 0 1
52838: PUSH
52839: LD_INT 4
52841: PLUS
52842: PUSH
52843: LD_VAR 0 2
52847: PUSH
52848: LD_INT 4
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: PUSH
52856: LD_VAR 0 1
52860: PUSH
52861: LD_VAR 0 2
52865: PUSH
52866: LD_INT 4
52868: PLUS
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: PUSH
52878: LD_VAR 0 1
52882: PUSH
52883: LD_INT 3
52885: MINUS
52886: PUSH
52887: LD_VAR 0 2
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: PUSH
52900: LD_VAR 0 1
52904: PUSH
52905: LD_INT 4
52907: MINUS
52908: PUSH
52909: LD_VAR 0 2
52913: PUSH
52914: LD_INT 4
52916: MINUS
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// end ; 3 :
52933: GO 53355
52935: LD_INT 3
52937: DOUBLE
52938: EQUAL
52939: IFTRUE 52943
52941: GO 53076
52943: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52944: LD_ADDR_VAR 0 5
52948: PUSH
52949: LD_VAR 0 1
52953: PUSH
52954: LD_INT 3
52956: PLUS
52957: PUSH
52958: LD_VAR 0 2
52962: PUSH
52963: LD_INT 4
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: PUSH
52971: LD_VAR 0 1
52975: PUSH
52976: LD_INT 4
52978: PLUS
52979: PUSH
52980: LD_VAR 0 2
52984: PUSH
52985: LD_INT 4
52987: PLUS
52988: PUSH
52989: LD_INT 5
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: PUSH
52997: LD_VAR 0 1
53001: PUSH
53002: LD_INT 4
53004: MINUS
53005: PUSH
53006: LD_VAR 0 2
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: PUSH
53019: LD_VAR 0 1
53023: PUSH
53024: LD_VAR 0 2
53028: PUSH
53029: LD_INT 4
53031: MINUS
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: PUSH
53041: LD_VAR 0 1
53045: PUSH
53046: LD_INT 3
53048: MINUS
53049: PUSH
53050: LD_VAR 0 2
53054: PUSH
53055: LD_INT 3
53057: MINUS
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// end ; 4 :
53074: GO 53355
53076: LD_INT 4
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53084
53082: GO 53217
53084: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53085: LD_ADDR_VAR 0 5
53089: PUSH
53090: LD_VAR 0 1
53094: PUSH
53095: LD_VAR 0 2
53099: PUSH
53100: LD_INT 4
53102: PLUS
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: PUSH
53112: LD_VAR 0 1
53116: PUSH
53117: LD_INT 3
53119: PLUS
53120: PUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_INT 3
53128: PLUS
53129: PUSH
53130: LD_INT 5
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: PUSH
53138: LD_VAR 0 1
53142: PUSH
53143: LD_INT 4
53145: PLUS
53146: PUSH
53147: LD_VAR 0 2
53151: PUSH
53152: LD_INT 4
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: PUSH
53160: LD_VAR 0 1
53164: PUSH
53165: LD_VAR 0 2
53169: PUSH
53170: LD_INT 3
53172: MINUS
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: PUSH
53182: LD_VAR 0 1
53186: PUSH
53187: LD_INT 4
53189: MINUS
53190: PUSH
53191: LD_VAR 0 2
53195: PUSH
53196: LD_INT 4
53198: MINUS
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// end ; 5 :
53215: GO 53355
53217: LD_INT 5
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53225
53223: GO 53354
53225: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53226: LD_ADDR_VAR 0 5
53230: PUSH
53231: LD_VAR 0 1
53235: PUSH
53236: LD_INT 4
53238: MINUS
53239: PUSH
53240: LD_VAR 0 2
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: PUSH
53253: LD_VAR 0 1
53257: PUSH
53258: LD_VAR 0 2
53262: PUSH
53263: LD_INT 4
53265: MINUS
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: PUSH
53275: LD_VAR 0 1
53279: PUSH
53280: LD_INT 4
53282: PLUS
53283: PUSH
53284: LD_VAR 0 2
53288: PUSH
53289: LD_INT 4
53291: PLUS
53292: PUSH
53293: LD_INT 5
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: LIST
53300: PUSH
53301: LD_VAR 0 1
53305: PUSH
53306: LD_INT 3
53308: PLUS
53309: PUSH
53310: LD_VAR 0 2
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: PUSH
53323: LD_VAR 0 1
53327: PUSH
53328: LD_VAR 0 2
53332: PUSH
53333: LD_INT 3
53335: PLUS
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// end ; end ;
53352: GO 53355
53354: POP
// result := list ;
53355: LD_ADDR_VAR 0 4
53359: PUSH
53360: LD_VAR 0 5
53364: ST_TO_ADDR
// end ;
53365: LD_VAR 0 4
53369: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53370: LD_INT 0
53372: PPUSH
53373: PPUSH
53374: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53375: LD_VAR 0 1
53379: NOT
53380: PUSH
53381: LD_VAR 0 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 4
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: IN
53404: NOT
53405: OR
53406: IFFALSE 53410
// exit ;
53408: GO 53493
// tmp := [ ] ;
53410: LD_ADDR_VAR 0 5
53414: PUSH
53415: EMPTY
53416: ST_TO_ADDR
// for i in units do
53417: LD_ADDR_VAR 0 4
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: FOR_IN
53428: IFFALSE 53462
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53430: LD_ADDR_VAR 0 5
53434: PUSH
53435: LD_VAR 0 5
53439: PPUSH
53440: LD_VAR 0 4
53444: PPUSH
53445: LD_VAR 0 2
53449: PPUSH
53450: CALL_OW 259
53454: PPUSH
53455: CALL 54866 0 2
53459: ST_TO_ADDR
53460: GO 53427
53462: POP
53463: POP
// if not tmp then
53464: LD_VAR 0 5
53468: NOT
53469: IFFALSE 53473
// exit ;
53471: GO 53493
// result := SortListByListDesc ( units , tmp ) ;
53473: LD_ADDR_VAR 0 3
53477: PUSH
53478: LD_VAR 0 1
53482: PPUSH
53483: LD_VAR 0 5
53487: PPUSH
53488: CALL_OW 77
53492: ST_TO_ADDR
// end ;
53493: LD_VAR 0 3
53497: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53498: LD_INT 0
53500: PPUSH
53501: PPUSH
53502: PPUSH
// result := false ;
53503: LD_ADDR_VAR 0 3
53507: PUSH
53508: LD_INT 0
53510: ST_TO_ADDR
// if not building then
53511: LD_VAR 0 2
53515: NOT
53516: IFFALSE 53520
// exit ;
53518: GO 53658
// x := GetX ( building ) ;
53520: LD_ADDR_VAR 0 4
53524: PUSH
53525: LD_VAR 0 2
53529: PPUSH
53530: CALL_OW 250
53534: ST_TO_ADDR
// y := GetY ( building ) ;
53535: LD_ADDR_VAR 0 5
53539: PUSH
53540: LD_VAR 0 2
53544: PPUSH
53545: CALL_OW 251
53549: ST_TO_ADDR
// if not x or not y then
53550: LD_VAR 0 4
53554: NOT
53555: PUSH
53556: LD_VAR 0 5
53560: NOT
53561: OR
53562: IFFALSE 53566
// exit ;
53564: GO 53658
// if GetTaskList ( unit ) then
53566: LD_VAR 0 1
53570: PPUSH
53571: CALL_OW 437
53575: IFFALSE 53658
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53577: LD_STRING e
53579: PUSH
53580: LD_VAR 0 1
53584: PPUSH
53585: CALL_OW 437
53589: PUSH
53590: LD_INT 1
53592: ARRAY
53593: PUSH
53594: LD_INT 1
53596: ARRAY
53597: EQUAL
53598: PUSH
53599: LD_VAR 0 4
53603: PUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: CALL_OW 437
53613: PUSH
53614: LD_INT 1
53616: ARRAY
53617: PUSH
53618: LD_INT 2
53620: ARRAY
53621: EQUAL
53622: AND
53623: PUSH
53624: LD_VAR 0 5
53628: PUSH
53629: LD_VAR 0 1
53633: PPUSH
53634: CALL_OW 437
53638: PUSH
53639: LD_INT 1
53641: ARRAY
53642: PUSH
53643: LD_INT 3
53645: ARRAY
53646: EQUAL
53647: AND
53648: IFFALSE 53658
// result := true end ;
53650: LD_ADDR_VAR 0 3
53654: PUSH
53655: LD_INT 1
53657: ST_TO_ADDR
// end ;
53658: LD_VAR 0 3
53662: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53663: LD_INT 0
53665: PPUSH
// result := false ;
53666: LD_ADDR_VAR 0 4
53670: PUSH
53671: LD_INT 0
53673: ST_TO_ADDR
// if GetTaskList ( unit ) then
53674: LD_VAR 0 1
53678: PPUSH
53679: CALL_OW 437
53683: IFFALSE 53766
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53685: LD_STRING M
53687: PUSH
53688: LD_VAR 0 1
53692: PPUSH
53693: CALL_OW 437
53697: PUSH
53698: LD_INT 1
53700: ARRAY
53701: PUSH
53702: LD_INT 1
53704: ARRAY
53705: EQUAL
53706: PUSH
53707: LD_VAR 0 2
53711: PUSH
53712: LD_VAR 0 1
53716: PPUSH
53717: CALL_OW 437
53721: PUSH
53722: LD_INT 1
53724: ARRAY
53725: PUSH
53726: LD_INT 2
53728: ARRAY
53729: EQUAL
53730: AND
53731: PUSH
53732: LD_VAR 0 3
53736: PUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL_OW 437
53746: PUSH
53747: LD_INT 1
53749: ARRAY
53750: PUSH
53751: LD_INT 3
53753: ARRAY
53754: EQUAL
53755: AND
53756: IFFALSE 53766
// result := true ;
53758: LD_ADDR_VAR 0 4
53762: PUSH
53763: LD_INT 1
53765: ST_TO_ADDR
// end ; end ;
53766: LD_VAR 0 4
53770: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53771: LD_INT 0
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
// if not unit or not area then
53777: LD_VAR 0 1
53781: NOT
53782: PUSH
53783: LD_VAR 0 2
53787: NOT
53788: OR
53789: IFFALSE 53793
// exit ;
53791: GO 53969
// tmp := AreaToList ( area , i ) ;
53793: LD_ADDR_VAR 0 6
53797: PUSH
53798: LD_VAR 0 2
53802: PPUSH
53803: LD_VAR 0 5
53807: PPUSH
53808: CALL_OW 517
53812: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53813: LD_ADDR_VAR 0 5
53817: PUSH
53818: DOUBLE
53819: LD_INT 1
53821: DEC
53822: ST_TO_ADDR
53823: LD_VAR 0 6
53827: PUSH
53828: LD_INT 1
53830: ARRAY
53831: PUSH
53832: FOR_TO
53833: IFFALSE 53967
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53835: LD_ADDR_VAR 0 7
53839: PUSH
53840: LD_VAR 0 6
53844: PUSH
53845: LD_INT 1
53847: ARRAY
53848: PUSH
53849: LD_VAR 0 5
53853: ARRAY
53854: PUSH
53855: LD_VAR 0 6
53859: PUSH
53860: LD_INT 2
53862: ARRAY
53863: PUSH
53864: LD_VAR 0 5
53868: ARRAY
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53874: LD_INT 92
53876: PUSH
53877: LD_VAR 0 7
53881: PUSH
53882: LD_INT 1
53884: ARRAY
53885: PUSH
53886: LD_VAR 0 7
53890: PUSH
53891: LD_INT 2
53893: ARRAY
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: PPUSH
53904: CALL_OW 69
53908: PUSH
53909: LD_INT 0
53911: EQUAL
53912: IFFALSE 53965
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53914: LD_VAR 0 1
53918: PPUSH
53919: LD_VAR 0 7
53923: PUSH
53924: LD_INT 1
53926: ARRAY
53927: PPUSH
53928: LD_VAR 0 7
53932: PUSH
53933: LD_INT 2
53935: ARRAY
53936: PPUSH
53937: LD_VAR 0 3
53941: PPUSH
53942: CALL_OW 48
// result := IsPlaced ( unit ) ;
53946: LD_ADDR_VAR 0 4
53950: PUSH
53951: LD_VAR 0 1
53955: PPUSH
53956: CALL_OW 305
53960: ST_TO_ADDR
// exit ;
53961: POP
53962: POP
53963: GO 53969
// end ; end ;
53965: GO 53832
53967: POP
53968: POP
// end ;
53969: LD_VAR 0 4
53973: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53974: LD_INT 0
53976: PPUSH
53977: PPUSH
53978: PPUSH
// if not side or side > 8 then
53979: LD_VAR 0 1
53983: NOT
53984: PUSH
53985: LD_VAR 0 1
53989: PUSH
53990: LD_INT 8
53992: GREATER
53993: OR
53994: IFFALSE 53998
// exit ;
53996: GO 54185
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53998: LD_ADDR_VAR 0 4
54002: PUSH
54003: LD_INT 22
54005: PUSH
54006: LD_VAR 0 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 21
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PPUSH
54029: CALL_OW 69
54033: ST_TO_ADDR
// if not tmp then
54034: LD_VAR 0 4
54038: NOT
54039: IFFALSE 54043
// exit ;
54041: GO 54185
// enable_addtolog := true ;
54043: LD_ADDR_OWVAR 81
54047: PUSH
54048: LD_INT 1
54050: ST_TO_ADDR
// AddToLog ( [ ) ;
54051: LD_STRING [
54053: PPUSH
54054: CALL_OW 561
// for i in tmp do
54058: LD_ADDR_VAR 0 3
54062: PUSH
54063: LD_VAR 0 4
54067: PUSH
54068: FOR_IN
54069: IFFALSE 54176
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54071: LD_STRING [
54073: PUSH
54074: LD_VAR 0 3
54078: PPUSH
54079: CALL_OW 266
54083: STR
54084: PUSH
54085: LD_STRING , 
54087: STR
54088: PUSH
54089: LD_VAR 0 3
54093: PPUSH
54094: CALL_OW 250
54098: STR
54099: PUSH
54100: LD_STRING , 
54102: STR
54103: PUSH
54104: LD_VAR 0 3
54108: PPUSH
54109: CALL_OW 251
54113: STR
54114: PUSH
54115: LD_STRING , 
54117: STR
54118: PUSH
54119: LD_VAR 0 3
54123: PPUSH
54124: CALL_OW 254
54128: STR
54129: PUSH
54130: LD_STRING , 
54132: STR
54133: PUSH
54134: LD_VAR 0 3
54138: PPUSH
54139: LD_INT 1
54141: PPUSH
54142: CALL_OW 268
54146: STR
54147: PUSH
54148: LD_STRING , 
54150: STR
54151: PUSH
54152: LD_VAR 0 3
54156: PPUSH
54157: LD_INT 2
54159: PPUSH
54160: CALL_OW 268
54164: STR
54165: PUSH
54166: LD_STRING ],
54168: STR
54169: PPUSH
54170: CALL_OW 561
// end ;
54174: GO 54068
54176: POP
54177: POP
// AddToLog ( ]; ) ;
54178: LD_STRING ];
54180: PPUSH
54181: CALL_OW 561
// end ;
54185: LD_VAR 0 2
54189: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54190: LD_INT 0
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
// if not area or not rate or not max then
54197: LD_VAR 0 1
54201: NOT
54202: PUSH
54203: LD_VAR 0 2
54207: NOT
54208: OR
54209: PUSH
54210: LD_VAR 0 4
54214: NOT
54215: OR
54216: IFFALSE 54220
// exit ;
54218: GO 54409
// while 1 do
54220: LD_INT 1
54222: IFFALSE 54409
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54224: LD_ADDR_VAR 0 9
54228: PUSH
54229: LD_VAR 0 1
54233: PPUSH
54234: LD_INT 1
54236: PPUSH
54237: CALL_OW 287
54241: PUSH
54242: LD_INT 10
54244: MUL
54245: ST_TO_ADDR
// r := rate / 10 ;
54246: LD_ADDR_VAR 0 7
54250: PUSH
54251: LD_VAR 0 2
54255: PUSH
54256: LD_INT 10
54258: DIVREAL
54259: ST_TO_ADDR
// time := 1 1$00 ;
54260: LD_ADDR_VAR 0 8
54264: PUSH
54265: LD_INT 2100
54267: ST_TO_ADDR
// if amount < min then
54268: LD_VAR 0 9
54272: PUSH
54273: LD_VAR 0 3
54277: LESS
54278: IFFALSE 54296
// r := r * 2 else
54280: LD_ADDR_VAR 0 7
54284: PUSH
54285: LD_VAR 0 7
54289: PUSH
54290: LD_INT 2
54292: MUL
54293: ST_TO_ADDR
54294: GO 54322
// if amount > max then
54296: LD_VAR 0 9
54300: PUSH
54301: LD_VAR 0 4
54305: GREATER
54306: IFFALSE 54322
// r := r / 2 ;
54308: LD_ADDR_VAR 0 7
54312: PUSH
54313: LD_VAR 0 7
54317: PUSH
54318: LD_INT 2
54320: DIVREAL
54321: ST_TO_ADDR
// time := time / r ;
54322: LD_ADDR_VAR 0 8
54326: PUSH
54327: LD_VAR 0 8
54331: PUSH
54332: LD_VAR 0 7
54336: DIVREAL
54337: ST_TO_ADDR
// if time < 0 then
54338: LD_VAR 0 8
54342: PUSH
54343: LD_INT 0
54345: LESS
54346: IFFALSE 54363
// time := time * - 1 ;
54348: LD_ADDR_VAR 0 8
54352: PUSH
54353: LD_VAR 0 8
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: MUL
54362: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54363: LD_VAR 0 8
54367: PUSH
54368: LD_INT 35
54370: PPUSH
54371: LD_INT 875
54373: PPUSH
54374: CALL_OW 12
54378: PLUS
54379: PPUSH
54380: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54384: LD_INT 1
54386: PPUSH
54387: LD_INT 5
54389: PPUSH
54390: CALL_OW 12
54394: PPUSH
54395: LD_VAR 0 1
54399: PPUSH
54400: LD_INT 1
54402: PPUSH
54403: CALL_OW 55
// end ;
54407: GO 54220
// end ;
54409: LD_VAR 0 5
54413: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54414: LD_INT 0
54416: PPUSH
54417: PPUSH
54418: PPUSH
54419: PPUSH
54420: PPUSH
54421: PPUSH
54422: PPUSH
54423: PPUSH
// if not turrets or not factories then
54424: LD_VAR 0 1
54428: NOT
54429: PUSH
54430: LD_VAR 0 2
54434: NOT
54435: OR
54436: IFFALSE 54440
// exit ;
54438: GO 54747
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54440: LD_ADDR_VAR 0 10
54444: PUSH
54445: LD_INT 5
54447: PUSH
54448: LD_INT 6
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 4
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 5
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 24
54482: PUSH
54483: LD_INT 25
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 23
54492: PUSH
54493: LD_INT 27
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 42
54506: PUSH
54507: LD_INT 43
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 44
54516: PUSH
54517: LD_INT 46
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 45
54526: PUSH
54527: LD_INT 47
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// result := [ ] ;
54544: LD_ADDR_VAR 0 3
54548: PUSH
54549: EMPTY
54550: ST_TO_ADDR
// for i in turrets do
54551: LD_ADDR_VAR 0 4
54555: PUSH
54556: LD_VAR 0 1
54560: PUSH
54561: FOR_IN
54562: IFFALSE 54745
// begin nat := GetNation ( i ) ;
54564: LD_ADDR_VAR 0 7
54568: PUSH
54569: LD_VAR 0 4
54573: PPUSH
54574: CALL_OW 248
54578: ST_TO_ADDR
// weapon := 0 ;
54579: LD_ADDR_VAR 0 8
54583: PUSH
54584: LD_INT 0
54586: ST_TO_ADDR
// if not nat then
54587: LD_VAR 0 7
54591: NOT
54592: IFFALSE 54596
// continue ;
54594: GO 54561
// for j in list [ nat ] do
54596: LD_ADDR_VAR 0 5
54600: PUSH
54601: LD_VAR 0 10
54605: PUSH
54606: LD_VAR 0 7
54610: ARRAY
54611: PUSH
54612: FOR_IN
54613: IFFALSE 54654
// if GetBWeapon ( i ) = j [ 1 ] then
54615: LD_VAR 0 4
54619: PPUSH
54620: CALL_OW 269
54624: PUSH
54625: LD_VAR 0 5
54629: PUSH
54630: LD_INT 1
54632: ARRAY
54633: EQUAL
54634: IFFALSE 54652
// begin weapon := j [ 2 ] ;
54636: LD_ADDR_VAR 0 8
54640: PUSH
54641: LD_VAR 0 5
54645: PUSH
54646: LD_INT 2
54648: ARRAY
54649: ST_TO_ADDR
// break ;
54650: GO 54654
// end ;
54652: GO 54612
54654: POP
54655: POP
// if not weapon then
54656: LD_VAR 0 8
54660: NOT
54661: IFFALSE 54665
// continue ;
54663: GO 54561
// for k in factories do
54665: LD_ADDR_VAR 0 6
54669: PUSH
54670: LD_VAR 0 2
54674: PUSH
54675: FOR_IN
54676: IFFALSE 54741
// begin weapons := AvailableWeaponList ( k ) ;
54678: LD_ADDR_VAR 0 9
54682: PUSH
54683: LD_VAR 0 6
54687: PPUSH
54688: CALL_OW 478
54692: ST_TO_ADDR
// if not weapons then
54693: LD_VAR 0 9
54697: NOT
54698: IFFALSE 54702
// continue ;
54700: GO 54675
// if weapon in weapons then
54702: LD_VAR 0 8
54706: PUSH
54707: LD_VAR 0 9
54711: IN
54712: IFFALSE 54739
// begin result := [ i , weapon ] ;
54714: LD_ADDR_VAR 0 3
54718: PUSH
54719: LD_VAR 0 4
54723: PUSH
54724: LD_VAR 0 8
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// exit ;
54733: POP
54734: POP
54735: POP
54736: POP
54737: GO 54747
// end ; end ;
54739: GO 54675
54741: POP
54742: POP
// end ;
54743: GO 54561
54745: POP
54746: POP
// end ;
54747: LD_VAR 0 3
54751: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54752: LD_INT 0
54754: PPUSH
// if not side or side > 8 then
54755: LD_VAR 0 3
54759: NOT
54760: PUSH
54761: LD_VAR 0 3
54765: PUSH
54766: LD_INT 8
54768: GREATER
54769: OR
54770: IFFALSE 54774
// exit ;
54772: GO 54833
// if not range then
54774: LD_VAR 0 4
54778: NOT
54779: IFFALSE 54790
// range := - 12 ;
54781: LD_ADDR_VAR 0 4
54785: PUSH
54786: LD_INT 12
54788: NEG
54789: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54790: LD_VAR 0 1
54794: PPUSH
54795: LD_VAR 0 2
54799: PPUSH
54800: LD_VAR 0 3
54804: PPUSH
54805: LD_VAR 0 4
54809: PPUSH
54810: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54814: LD_VAR 0 1
54818: PPUSH
54819: LD_VAR 0 2
54823: PPUSH
54824: LD_VAR 0 3
54828: PPUSH
54829: CALL_OW 331
// end ;
54833: LD_VAR 0 5
54837: RET
// export function Video ( mode ) ; begin
54838: LD_INT 0
54840: PPUSH
// ingame_video = mode ;
54841: LD_ADDR_OWVAR 52
54845: PUSH
54846: LD_VAR 0 1
54850: ST_TO_ADDR
// interface_hidden = mode ;
54851: LD_ADDR_OWVAR 54
54855: PUSH
54856: LD_VAR 0 1
54860: ST_TO_ADDR
// end ;
54861: LD_VAR 0 2
54865: RET
// export function Join ( array , element ) ; begin
54866: LD_INT 0
54868: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54869: LD_ADDR_VAR 0 3
54873: PUSH
54874: LD_VAR 0 1
54878: PPUSH
54879: LD_VAR 0 1
54883: PUSH
54884: LD_INT 1
54886: PLUS
54887: PPUSH
54888: LD_VAR 0 2
54892: PPUSH
54893: CALL_OW 1
54897: ST_TO_ADDR
// end ;
54898: LD_VAR 0 3
54902: RET
// export function JoinUnion ( array , element ) ; begin
54903: LD_INT 0
54905: PPUSH
// result := array union element ;
54906: LD_ADDR_VAR 0 3
54910: PUSH
54911: LD_VAR 0 1
54915: PUSH
54916: LD_VAR 0 2
54920: UNION
54921: ST_TO_ADDR
// end ;
54922: LD_VAR 0 3
54926: RET
// export function GetBehemoths ( side ) ; begin
54927: LD_INT 0
54929: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54930: LD_ADDR_VAR 0 2
54934: PUSH
54935: LD_INT 22
54937: PUSH
54938: LD_VAR 0 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 31
54949: PUSH
54950: LD_INT 25
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PPUSH
54961: CALL_OW 69
54965: ST_TO_ADDR
// end ;
54966: LD_VAR 0 2
54970: RET
// export function Shuffle ( array ) ; var i , index ; begin
54971: LD_INT 0
54973: PPUSH
54974: PPUSH
54975: PPUSH
// result := [ ] ;
54976: LD_ADDR_VAR 0 2
54980: PUSH
54981: EMPTY
54982: ST_TO_ADDR
// if not array then
54983: LD_VAR 0 1
54987: NOT
54988: IFFALSE 54992
// exit ;
54990: GO 55091
// Randomize ;
54992: CALL_OW 10
// for i = array downto 1 do
54996: LD_ADDR_VAR 0 3
55000: PUSH
55001: DOUBLE
55002: LD_VAR 0 1
55006: INC
55007: ST_TO_ADDR
55008: LD_INT 1
55010: PUSH
55011: FOR_DOWNTO
55012: IFFALSE 55089
// begin index := rand ( 1 , array ) ;
55014: LD_ADDR_VAR 0 4
55018: PUSH
55019: LD_INT 1
55021: PPUSH
55022: LD_VAR 0 1
55026: PPUSH
55027: CALL_OW 12
55031: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55032: LD_ADDR_VAR 0 2
55036: PUSH
55037: LD_VAR 0 2
55041: PPUSH
55042: LD_VAR 0 2
55046: PUSH
55047: LD_INT 1
55049: PLUS
55050: PPUSH
55051: LD_VAR 0 1
55055: PUSH
55056: LD_VAR 0 4
55060: ARRAY
55061: PPUSH
55062: CALL_OW 2
55066: ST_TO_ADDR
// array := Delete ( array , index ) ;
55067: LD_ADDR_VAR 0 1
55071: PUSH
55072: LD_VAR 0 1
55076: PPUSH
55077: LD_VAR 0 4
55081: PPUSH
55082: CALL_OW 3
55086: ST_TO_ADDR
// end ;
55087: GO 55011
55089: POP
55090: POP
// end ;
55091: LD_VAR 0 2
55095: RET
// export function GetBaseMaterials ( base ) ; begin
55096: LD_INT 0
55098: PPUSH
// result := [ 0 , 0 , 0 ] ;
55099: LD_ADDR_VAR 0 2
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// if not base then
55118: LD_VAR 0 1
55122: NOT
55123: IFFALSE 55127
// exit ;
55125: GO 55176
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55127: LD_ADDR_VAR 0 2
55131: PUSH
55132: LD_VAR 0 1
55136: PPUSH
55137: LD_INT 1
55139: PPUSH
55140: CALL_OW 275
55144: PUSH
55145: LD_VAR 0 1
55149: PPUSH
55150: LD_INT 2
55152: PPUSH
55153: CALL_OW 275
55157: PUSH
55158: LD_VAR 0 1
55162: PPUSH
55163: LD_INT 3
55165: PPUSH
55166: CALL_OW 275
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: ST_TO_ADDR
// end ;
55176: LD_VAR 0 2
55180: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55181: LD_INT 0
55183: PPUSH
55184: PPUSH
// result := array ;
55185: LD_ADDR_VAR 0 3
55189: PUSH
55190: LD_VAR 0 1
55194: ST_TO_ADDR
// if size >= result then
55195: LD_VAR 0 2
55199: PUSH
55200: LD_VAR 0 3
55204: GREATEREQUAL
55205: IFFALSE 55209
// exit ;
55207: GO 55259
// if size then
55209: LD_VAR 0 2
55213: IFFALSE 55259
// for i := array downto size do
55215: LD_ADDR_VAR 0 4
55219: PUSH
55220: DOUBLE
55221: LD_VAR 0 1
55225: INC
55226: ST_TO_ADDR
55227: LD_VAR 0 2
55231: PUSH
55232: FOR_DOWNTO
55233: IFFALSE 55257
// result := Delete ( result , result ) ;
55235: LD_ADDR_VAR 0 3
55239: PUSH
55240: LD_VAR 0 3
55244: PPUSH
55245: LD_VAR 0 3
55249: PPUSH
55250: CALL_OW 3
55254: ST_TO_ADDR
55255: GO 55232
55257: POP
55258: POP
// end ;
55259: LD_VAR 0 3
55263: RET
// export function ComExit ( unit ) ; var tmp ; begin
55264: LD_INT 0
55266: PPUSH
55267: PPUSH
// if not IsInUnit ( unit ) then
55268: LD_VAR 0 1
55272: PPUSH
55273: CALL_OW 310
55277: NOT
55278: IFFALSE 55282
// exit ;
55280: GO 55342
// tmp := IsInUnit ( unit ) ;
55282: LD_ADDR_VAR 0 3
55286: PUSH
55287: LD_VAR 0 1
55291: PPUSH
55292: CALL_OW 310
55296: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55297: LD_VAR 0 3
55301: PPUSH
55302: CALL_OW 247
55306: PUSH
55307: LD_INT 2
55309: EQUAL
55310: IFFALSE 55323
// ComExitVehicle ( unit ) else
55312: LD_VAR 0 1
55316: PPUSH
55317: CALL_OW 121
55321: GO 55332
// ComExitBuilding ( unit ) ;
55323: LD_VAR 0 1
55327: PPUSH
55328: CALL_OW 122
// result := tmp ;
55332: LD_ADDR_VAR 0 2
55336: PUSH
55337: LD_VAR 0 3
55341: ST_TO_ADDR
// end ;
55342: LD_VAR 0 2
55346: RET
// export function ComExitAll ( units ) ; var i ; begin
55347: LD_INT 0
55349: PPUSH
55350: PPUSH
// if not units then
55351: LD_VAR 0 1
55355: NOT
55356: IFFALSE 55360
// exit ;
55358: GO 55386
// for i in units do
55360: LD_ADDR_VAR 0 3
55364: PUSH
55365: LD_VAR 0 1
55369: PUSH
55370: FOR_IN
55371: IFFALSE 55384
// ComExit ( i ) ;
55373: LD_VAR 0 3
55377: PPUSH
55378: CALL 55264 0 1
55382: GO 55370
55384: POP
55385: POP
// end ;
55386: LD_VAR 0 2
55390: RET
// export function ResetHc ; begin
55391: LD_INT 0
55393: PPUSH
// InitHc ;
55394: CALL_OW 19
// hc_importance := 0 ;
55398: LD_ADDR_OWVAR 32
55402: PUSH
55403: LD_INT 0
55405: ST_TO_ADDR
// end ;
55406: LD_VAR 0 1
55410: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55411: LD_INT 0
55413: PPUSH
55414: PPUSH
55415: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55416: LD_ADDR_VAR 0 6
55420: PUSH
55421: LD_VAR 0 1
55425: PUSH
55426: LD_VAR 0 3
55430: PLUS
55431: PUSH
55432: LD_INT 2
55434: DIV
55435: ST_TO_ADDR
// if _x < 0 then
55436: LD_VAR 0 6
55440: PUSH
55441: LD_INT 0
55443: LESS
55444: IFFALSE 55461
// _x := _x * - 1 ;
55446: LD_ADDR_VAR 0 6
55450: PUSH
55451: LD_VAR 0 6
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: MUL
55460: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55461: LD_ADDR_VAR 0 7
55465: PUSH
55466: LD_VAR 0 2
55470: PUSH
55471: LD_VAR 0 4
55475: PLUS
55476: PUSH
55477: LD_INT 2
55479: DIV
55480: ST_TO_ADDR
// if _y < 0 then
55481: LD_VAR 0 7
55485: PUSH
55486: LD_INT 0
55488: LESS
55489: IFFALSE 55506
// _y := _y * - 1 ;
55491: LD_ADDR_VAR 0 7
55495: PUSH
55496: LD_VAR 0 7
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: MUL
55505: ST_TO_ADDR
// result := [ _x , _y ] ;
55506: LD_ADDR_VAR 0 5
55510: PUSH
55511: LD_VAR 0 6
55515: PUSH
55516: LD_VAR 0 7
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: ST_TO_ADDR
// end ;
55525: LD_VAR 0 5
55529: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55530: LD_INT 0
55532: PPUSH
55533: PPUSH
55534: PPUSH
55535: PPUSH
// task := GetTaskList ( unit ) ;
55536: LD_ADDR_VAR 0 7
55540: PUSH
55541: LD_VAR 0 1
55545: PPUSH
55546: CALL_OW 437
55550: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55551: LD_VAR 0 7
55555: NOT
55556: PUSH
55557: LD_VAR 0 1
55561: PPUSH
55562: LD_VAR 0 2
55566: PPUSH
55567: CALL_OW 308
55571: NOT
55572: AND
55573: IFFALSE 55577
// exit ;
55575: GO 55695
// if IsInArea ( unit , area ) then
55577: LD_VAR 0 1
55581: PPUSH
55582: LD_VAR 0 2
55586: PPUSH
55587: CALL_OW 308
55591: IFFALSE 55609
// begin ComMoveToArea ( unit , goAway ) ;
55593: LD_VAR 0 1
55597: PPUSH
55598: LD_VAR 0 3
55602: PPUSH
55603: CALL_OW 113
// exit ;
55607: GO 55695
// end ; if task [ 1 ] [ 1 ] <> M then
55609: LD_VAR 0 7
55613: PUSH
55614: LD_INT 1
55616: ARRAY
55617: PUSH
55618: LD_INT 1
55620: ARRAY
55621: PUSH
55622: LD_STRING M
55624: NONEQUAL
55625: IFFALSE 55629
// exit ;
55627: GO 55695
// x := task [ 1 ] [ 2 ] ;
55629: LD_ADDR_VAR 0 5
55633: PUSH
55634: LD_VAR 0 7
55638: PUSH
55639: LD_INT 1
55641: ARRAY
55642: PUSH
55643: LD_INT 2
55645: ARRAY
55646: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55647: LD_ADDR_VAR 0 6
55651: PUSH
55652: LD_VAR 0 7
55656: PUSH
55657: LD_INT 1
55659: ARRAY
55660: PUSH
55661: LD_INT 3
55663: ARRAY
55664: ST_TO_ADDR
// if InArea ( x , y , area ) then
55665: LD_VAR 0 5
55669: PPUSH
55670: LD_VAR 0 6
55674: PPUSH
55675: LD_VAR 0 2
55679: PPUSH
55680: CALL_OW 309
55684: IFFALSE 55695
// ComStop ( unit ) ;
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL_OW 141
// end ;
55695: LD_VAR 0 4
55699: RET
// export function Abs ( value ) ; begin
55700: LD_INT 0
55702: PPUSH
// result := value ;
55703: LD_ADDR_VAR 0 2
55707: PUSH
55708: LD_VAR 0 1
55712: ST_TO_ADDR
// if value < 0 then
55713: LD_VAR 0 1
55717: PUSH
55718: LD_INT 0
55720: LESS
55721: IFFALSE 55738
// result := value * - 1 ;
55723: LD_ADDR_VAR 0 2
55727: PUSH
55728: LD_VAR 0 1
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: MUL
55737: ST_TO_ADDR
// end ;
55738: LD_VAR 0 2
55742: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55743: LD_INT 0
55745: PPUSH
55746: PPUSH
55747: PPUSH
55748: PPUSH
55749: PPUSH
55750: PPUSH
55751: PPUSH
55752: PPUSH
// if not unit or not building then
55753: LD_VAR 0 1
55757: NOT
55758: PUSH
55759: LD_VAR 0 2
55763: NOT
55764: OR
55765: IFFALSE 55769
// exit ;
55767: GO 55995
// x := GetX ( building ) ;
55769: LD_ADDR_VAR 0 4
55773: PUSH
55774: LD_VAR 0 2
55778: PPUSH
55779: CALL_OW 250
55783: ST_TO_ADDR
// y := GetY ( building ) ;
55784: LD_ADDR_VAR 0 6
55788: PUSH
55789: LD_VAR 0 2
55793: PPUSH
55794: CALL_OW 251
55798: ST_TO_ADDR
// d := GetDir ( building ) ;
55799: LD_ADDR_VAR 0 8
55803: PUSH
55804: LD_VAR 0 2
55808: PPUSH
55809: CALL_OW 254
55813: ST_TO_ADDR
// r := 4 ;
55814: LD_ADDR_VAR 0 9
55818: PUSH
55819: LD_INT 4
55821: ST_TO_ADDR
// for i := 1 to 5 do
55822: LD_ADDR_VAR 0 10
55826: PUSH
55827: DOUBLE
55828: LD_INT 1
55830: DEC
55831: ST_TO_ADDR
55832: LD_INT 5
55834: PUSH
55835: FOR_TO
55836: IFFALSE 55993
// begin _x := ShiftX ( x , d , r + i ) ;
55838: LD_ADDR_VAR 0 5
55842: PUSH
55843: LD_VAR 0 4
55847: PPUSH
55848: LD_VAR 0 8
55852: PPUSH
55853: LD_VAR 0 9
55857: PUSH
55858: LD_VAR 0 10
55862: PLUS
55863: PPUSH
55864: CALL_OW 272
55868: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55869: LD_ADDR_VAR 0 7
55873: PUSH
55874: LD_VAR 0 6
55878: PPUSH
55879: LD_VAR 0 8
55883: PPUSH
55884: LD_VAR 0 9
55888: PUSH
55889: LD_VAR 0 10
55893: PLUS
55894: PPUSH
55895: CALL_OW 273
55899: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55900: LD_VAR 0 5
55904: PPUSH
55905: LD_VAR 0 7
55909: PPUSH
55910: CALL_OW 488
55914: PUSH
55915: LD_VAR 0 5
55919: PPUSH
55920: LD_VAR 0 7
55924: PPUSH
55925: CALL_OW 428
55929: PPUSH
55930: CALL_OW 247
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: IN
55945: NOT
55946: AND
55947: IFFALSE 55991
// begin ComMoveXY ( unit , _x , _y ) ;
55949: LD_VAR 0 1
55953: PPUSH
55954: LD_VAR 0 5
55958: PPUSH
55959: LD_VAR 0 7
55963: PPUSH
55964: CALL_OW 111
// result := [ _x , _y ] ;
55968: LD_ADDR_VAR 0 3
55972: PUSH
55973: LD_VAR 0 5
55977: PUSH
55978: LD_VAR 0 7
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: ST_TO_ADDR
// exit ;
55987: POP
55988: POP
55989: GO 55995
// end ; end ;
55991: GO 55835
55993: POP
55994: POP
// end ;
55995: LD_VAR 0 3
55999: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56000: LD_INT 0
56002: PPUSH
56003: PPUSH
56004: PPUSH
// result := 0 ;
56005: LD_ADDR_VAR 0 3
56009: PUSH
56010: LD_INT 0
56012: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56013: LD_VAR 0 1
56017: PUSH
56018: LD_INT 0
56020: LESS
56021: PUSH
56022: LD_VAR 0 1
56026: PUSH
56027: LD_INT 8
56029: GREATER
56030: OR
56031: PUSH
56032: LD_VAR 0 2
56036: PUSH
56037: LD_INT 0
56039: LESS
56040: OR
56041: PUSH
56042: LD_VAR 0 2
56046: PUSH
56047: LD_INT 8
56049: GREATER
56050: OR
56051: IFFALSE 56055
// exit ;
56053: GO 56130
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56055: LD_ADDR_VAR 0 4
56059: PUSH
56060: LD_INT 22
56062: PUSH
56063: LD_VAR 0 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PPUSH
56072: CALL_OW 69
56076: PUSH
56077: FOR_IN
56078: IFFALSE 56128
// begin un := UnitShoot ( i ) ;
56080: LD_ADDR_VAR 0 5
56084: PUSH
56085: LD_VAR 0 4
56089: PPUSH
56090: CALL_OW 504
56094: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56095: LD_VAR 0 5
56099: PPUSH
56100: CALL_OW 255
56104: PUSH
56105: LD_VAR 0 1
56109: EQUAL
56110: IFFALSE 56126
// begin result := un ;
56112: LD_ADDR_VAR 0 3
56116: PUSH
56117: LD_VAR 0 5
56121: ST_TO_ADDR
// exit ;
56122: POP
56123: POP
56124: GO 56130
// end ; end ;
56126: GO 56077
56128: POP
56129: POP
// end ;
56130: LD_VAR 0 3
56134: RET
// export function GetCargoBay ( units ) ; begin
56135: LD_INT 0
56137: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56138: LD_ADDR_VAR 0 2
56142: PUSH
56143: LD_VAR 0 1
56147: PPUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 34
56153: PUSH
56154: LD_INT 12
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 34
56163: PUSH
56164: LD_INT 51
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 34
56173: PUSH
56174: LD_INT 32
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 34
56183: PUSH
56184: LD_INT 89
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: PPUSH
56198: CALL_OW 72
56202: ST_TO_ADDR
// end ;
56203: LD_VAR 0 2
56207: RET
// export function Negate ( value ) ; begin
56208: LD_INT 0
56210: PPUSH
// result := not value ;
56211: LD_ADDR_VAR 0 2
56215: PUSH
56216: LD_VAR 0 1
56220: NOT
56221: ST_TO_ADDR
// end ;
56222: LD_VAR 0 2
56226: RET
// export function Inc ( value ) ; begin
56227: LD_INT 0
56229: PPUSH
// result := value + 1 ;
56230: LD_ADDR_VAR 0 2
56234: PUSH
56235: LD_VAR 0 1
56239: PUSH
56240: LD_INT 1
56242: PLUS
56243: ST_TO_ADDR
// end ;
56244: LD_VAR 0 2
56248: RET
// export function Dec ( value ) ; begin
56249: LD_INT 0
56251: PPUSH
// result := value - 1 ;
56252: LD_ADDR_VAR 0 2
56256: PUSH
56257: LD_VAR 0 1
56261: PUSH
56262: LD_INT 1
56264: MINUS
56265: ST_TO_ADDR
// end ;
56266: LD_VAR 0 2
56270: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56271: LD_INT 0
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
56277: PPUSH
56278: PPUSH
56279: PPUSH
56280: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56281: LD_VAR 0 1
56285: PPUSH
56286: LD_VAR 0 2
56290: PPUSH
56291: CALL_OW 488
56295: NOT
56296: PUSH
56297: LD_VAR 0 3
56301: PPUSH
56302: LD_VAR 0 4
56306: PPUSH
56307: CALL_OW 488
56311: NOT
56312: OR
56313: IFFALSE 56326
// begin result := - 1 ;
56315: LD_ADDR_VAR 0 5
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: ST_TO_ADDR
// exit ;
56324: GO 56561
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56326: LD_ADDR_VAR 0 12
56330: PUSH
56331: LD_VAR 0 1
56335: PPUSH
56336: LD_VAR 0 2
56340: PPUSH
56341: LD_VAR 0 3
56345: PPUSH
56346: LD_VAR 0 4
56350: PPUSH
56351: CALL 55411 0 4
56355: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56356: LD_ADDR_VAR 0 11
56360: PUSH
56361: LD_VAR 0 1
56365: PPUSH
56366: LD_VAR 0 2
56370: PPUSH
56371: LD_VAR 0 12
56375: PUSH
56376: LD_INT 1
56378: ARRAY
56379: PPUSH
56380: LD_VAR 0 12
56384: PUSH
56385: LD_INT 2
56387: ARRAY
56388: PPUSH
56389: CALL_OW 298
56393: ST_TO_ADDR
// distance := 9999 ;
56394: LD_ADDR_VAR 0 10
56398: PUSH
56399: LD_INT 9999
56401: ST_TO_ADDR
// for i := 0 to 5 do
56402: LD_ADDR_VAR 0 6
56406: PUSH
56407: DOUBLE
56408: LD_INT 0
56410: DEC
56411: ST_TO_ADDR
56412: LD_INT 5
56414: PUSH
56415: FOR_TO
56416: IFFALSE 56559
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56418: LD_ADDR_VAR 0 7
56422: PUSH
56423: LD_VAR 0 1
56427: PPUSH
56428: LD_VAR 0 6
56432: PPUSH
56433: LD_VAR 0 11
56437: PPUSH
56438: CALL_OW 272
56442: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56443: LD_ADDR_VAR 0 8
56447: PUSH
56448: LD_VAR 0 2
56452: PPUSH
56453: LD_VAR 0 6
56457: PPUSH
56458: LD_VAR 0 11
56462: PPUSH
56463: CALL_OW 273
56467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56468: LD_VAR 0 7
56472: PPUSH
56473: LD_VAR 0 8
56477: PPUSH
56478: CALL_OW 488
56482: NOT
56483: IFFALSE 56487
// continue ;
56485: GO 56415
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56487: LD_ADDR_VAR 0 9
56491: PUSH
56492: LD_VAR 0 12
56496: PUSH
56497: LD_INT 1
56499: ARRAY
56500: PPUSH
56501: LD_VAR 0 12
56505: PUSH
56506: LD_INT 2
56508: ARRAY
56509: PPUSH
56510: LD_VAR 0 7
56514: PPUSH
56515: LD_VAR 0 8
56519: PPUSH
56520: CALL_OW 298
56524: ST_TO_ADDR
// if tmp < distance then
56525: LD_VAR 0 9
56529: PUSH
56530: LD_VAR 0 10
56534: LESS
56535: IFFALSE 56557
// begin result := i ;
56537: LD_ADDR_VAR 0 5
56541: PUSH
56542: LD_VAR 0 6
56546: ST_TO_ADDR
// distance := tmp ;
56547: LD_ADDR_VAR 0 10
56551: PUSH
56552: LD_VAR 0 9
56556: ST_TO_ADDR
// end ; end ;
56557: GO 56415
56559: POP
56560: POP
// end ;
56561: LD_VAR 0 5
56565: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56566: LD_INT 0
56568: PPUSH
56569: PPUSH
// if not driver or not IsInUnit ( driver ) then
56570: LD_VAR 0 1
56574: NOT
56575: PUSH
56576: LD_VAR 0 1
56580: PPUSH
56581: CALL_OW 310
56585: NOT
56586: OR
56587: IFFALSE 56591
// exit ;
56589: GO 56681
// vehicle := IsInUnit ( driver ) ;
56591: LD_ADDR_VAR 0 3
56595: PUSH
56596: LD_VAR 0 1
56600: PPUSH
56601: CALL_OW 310
56605: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56606: LD_VAR 0 1
56610: PPUSH
56611: LD_STRING \
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: PUSH
56641: LD_STRING E
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_VAR 0 3
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PPUSH
56677: CALL_OW 446
// end ;
56681: LD_VAR 0 2
56685: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56686: LD_INT 0
56688: PPUSH
56689: PPUSH
// if not driver or not IsInUnit ( driver ) then
56690: LD_VAR 0 1
56694: NOT
56695: PUSH
56696: LD_VAR 0 1
56700: PPUSH
56701: CALL_OW 310
56705: NOT
56706: OR
56707: IFFALSE 56711
// exit ;
56709: GO 56801
// vehicle := IsInUnit ( driver ) ;
56711: LD_ADDR_VAR 0 3
56715: PUSH
56716: LD_VAR 0 1
56720: PPUSH
56721: CALL_OW 310
56725: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56726: LD_VAR 0 1
56730: PPUSH
56731: LD_STRING \
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: PUSH
56761: LD_STRING E
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_VAR 0 3
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PPUSH
56797: CALL_OW 447
// end ;
56801: LD_VAR 0 2
56805: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56806: LD_INT 0
56808: PPUSH
56809: PPUSH
56810: PPUSH
// tmp := [ ] ;
56811: LD_ADDR_VAR 0 5
56815: PUSH
56816: EMPTY
56817: ST_TO_ADDR
// for i in units do
56818: LD_ADDR_VAR 0 4
56822: PUSH
56823: LD_VAR 0 1
56827: PUSH
56828: FOR_IN
56829: IFFALSE 56867
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56831: LD_ADDR_VAR 0 5
56835: PUSH
56836: LD_VAR 0 5
56840: PPUSH
56841: LD_VAR 0 5
56845: PUSH
56846: LD_INT 1
56848: PLUS
56849: PPUSH
56850: LD_VAR 0 4
56854: PPUSH
56855: CALL_OW 256
56859: PPUSH
56860: CALL_OW 2
56864: ST_TO_ADDR
56865: GO 56828
56867: POP
56868: POP
// if not tmp then
56869: LD_VAR 0 5
56873: NOT
56874: IFFALSE 56878
// exit ;
56876: GO 56926
// if asc then
56878: LD_VAR 0 2
56882: IFFALSE 56906
// result := SortListByListAsc ( units , tmp ) else
56884: LD_ADDR_VAR 0 3
56888: PUSH
56889: LD_VAR 0 1
56893: PPUSH
56894: LD_VAR 0 5
56898: PPUSH
56899: CALL_OW 76
56903: ST_TO_ADDR
56904: GO 56926
// result := SortListByListDesc ( units , tmp ) ;
56906: LD_ADDR_VAR 0 3
56910: PUSH
56911: LD_VAR 0 1
56915: PPUSH
56916: LD_VAR 0 5
56920: PPUSH
56921: CALL_OW 77
56925: ST_TO_ADDR
// end ;
56926: LD_VAR 0 3
56930: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56931: LD_INT 0
56933: PPUSH
56934: PPUSH
// task := GetTaskList ( mech ) ;
56935: LD_ADDR_VAR 0 4
56939: PUSH
56940: LD_VAR 0 1
56944: PPUSH
56945: CALL_OW 437
56949: ST_TO_ADDR
// if not task then
56950: LD_VAR 0 4
56954: NOT
56955: IFFALSE 56959
// exit ;
56957: GO 57001
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56959: LD_ADDR_VAR 0 3
56963: PUSH
56964: LD_VAR 0 4
56968: PUSH
56969: LD_INT 1
56971: ARRAY
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PUSH
56977: LD_STRING r
56979: EQUAL
56980: PUSH
56981: LD_VAR 0 4
56985: PUSH
56986: LD_INT 1
56988: ARRAY
56989: PUSH
56990: LD_INT 4
56992: ARRAY
56993: PUSH
56994: LD_VAR 0 2
56998: EQUAL
56999: AND
57000: ST_TO_ADDR
// end ;
57001: LD_VAR 0 3
57005: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57006: LD_INT 0
57008: PPUSH
// SetDir ( unit , d ) ;
57009: LD_VAR 0 1
57013: PPUSH
57014: LD_VAR 0 4
57018: PPUSH
57019: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57023: LD_ADDR_VAR 0 6
57027: PUSH
57028: LD_VAR 0 1
57032: PPUSH
57033: LD_VAR 0 2
57037: PPUSH
57038: LD_VAR 0 3
57042: PPUSH
57043: LD_VAR 0 5
57047: PPUSH
57048: CALL_OW 48
57052: ST_TO_ADDR
// end ;
57053: LD_VAR 0 6
57057: RET
// export function ToNaturalNumber ( number ) ; begin
57058: LD_INT 0
57060: PPUSH
// result := number div 1 ;
57061: LD_ADDR_VAR 0 2
57065: PUSH
57066: LD_VAR 0 1
57070: PUSH
57071: LD_INT 1
57073: DIV
57074: ST_TO_ADDR
// if number < 0 then
57075: LD_VAR 0 1
57079: PUSH
57080: LD_INT 0
57082: LESS
57083: IFFALSE 57093
// result := 0 ;
57085: LD_ADDR_VAR 0 2
57089: PUSH
57090: LD_INT 0
57092: ST_TO_ADDR
// end ;
57093: LD_VAR 0 2
57097: RET
// export function SortByClass ( units , class ) ; var un ; begin
57098: LD_INT 0
57100: PPUSH
57101: PPUSH
// if not units or not class then
57102: LD_VAR 0 1
57106: NOT
57107: PUSH
57108: LD_VAR 0 2
57112: NOT
57113: OR
57114: IFFALSE 57118
// exit ;
57116: GO 57213
// result := [ ] ;
57118: LD_ADDR_VAR 0 3
57122: PUSH
57123: EMPTY
57124: ST_TO_ADDR
// for un in units do
57125: LD_ADDR_VAR 0 4
57129: PUSH
57130: LD_VAR 0 1
57134: PUSH
57135: FOR_IN
57136: IFFALSE 57211
// if GetClass ( un ) = class then
57138: LD_VAR 0 4
57142: PPUSH
57143: CALL_OW 257
57147: PUSH
57148: LD_VAR 0 2
57152: EQUAL
57153: IFFALSE 57180
// result := Insert ( result , 1 , un ) else
57155: LD_ADDR_VAR 0 3
57159: PUSH
57160: LD_VAR 0 3
57164: PPUSH
57165: LD_INT 1
57167: PPUSH
57168: LD_VAR 0 4
57172: PPUSH
57173: CALL_OW 2
57177: ST_TO_ADDR
57178: GO 57209
// result := Replace ( result , result + 1 , un ) ;
57180: LD_ADDR_VAR 0 3
57184: PUSH
57185: LD_VAR 0 3
57189: PPUSH
57190: LD_VAR 0 3
57194: PUSH
57195: LD_INT 1
57197: PLUS
57198: PPUSH
57199: LD_VAR 0 4
57203: PPUSH
57204: CALL_OW 1
57208: ST_TO_ADDR
57209: GO 57135
57211: POP
57212: POP
// end ;
57213: LD_VAR 0 3
57217: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57218: LD_INT 0
57220: PPUSH
57221: PPUSH
57222: PPUSH
57223: PPUSH
57224: PPUSH
57225: PPUSH
57226: PPUSH
// result := [ ] ;
57227: LD_ADDR_VAR 0 4
57231: PUSH
57232: EMPTY
57233: ST_TO_ADDR
// if x - r < 0 then
57234: LD_VAR 0 1
57238: PUSH
57239: LD_VAR 0 3
57243: MINUS
57244: PUSH
57245: LD_INT 0
57247: LESS
57248: IFFALSE 57260
// min_x := 0 else
57250: LD_ADDR_VAR 0 8
57254: PUSH
57255: LD_INT 0
57257: ST_TO_ADDR
57258: GO 57276
// min_x := x - r ;
57260: LD_ADDR_VAR 0 8
57264: PUSH
57265: LD_VAR 0 1
57269: PUSH
57270: LD_VAR 0 3
57274: MINUS
57275: ST_TO_ADDR
// if y - r < 0 then
57276: LD_VAR 0 2
57280: PUSH
57281: LD_VAR 0 3
57285: MINUS
57286: PUSH
57287: LD_INT 0
57289: LESS
57290: IFFALSE 57302
// min_y := 0 else
57292: LD_ADDR_VAR 0 7
57296: PUSH
57297: LD_INT 0
57299: ST_TO_ADDR
57300: GO 57318
// min_y := y - r ;
57302: LD_ADDR_VAR 0 7
57306: PUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_VAR 0 3
57316: MINUS
57317: ST_TO_ADDR
// max_x := x + r ;
57318: LD_ADDR_VAR 0 9
57322: PUSH
57323: LD_VAR 0 1
57327: PUSH
57328: LD_VAR 0 3
57332: PLUS
57333: ST_TO_ADDR
// max_y := y + r ;
57334: LD_ADDR_VAR 0 10
57338: PUSH
57339: LD_VAR 0 2
57343: PUSH
57344: LD_VAR 0 3
57348: PLUS
57349: ST_TO_ADDR
// for _x = min_x to max_x do
57350: LD_ADDR_VAR 0 5
57354: PUSH
57355: DOUBLE
57356: LD_VAR 0 8
57360: DEC
57361: ST_TO_ADDR
57362: LD_VAR 0 9
57366: PUSH
57367: FOR_TO
57368: IFFALSE 57469
// for _y = min_y to max_y do
57370: LD_ADDR_VAR 0 6
57374: PUSH
57375: DOUBLE
57376: LD_VAR 0 7
57380: DEC
57381: ST_TO_ADDR
57382: LD_VAR 0 10
57386: PUSH
57387: FOR_TO
57388: IFFALSE 57465
// begin if not ValidHex ( _x , _y ) then
57390: LD_VAR 0 5
57394: PPUSH
57395: LD_VAR 0 6
57399: PPUSH
57400: CALL_OW 488
57404: NOT
57405: IFFALSE 57409
// continue ;
57407: GO 57387
// if GetResourceTypeXY ( _x , _y ) then
57409: LD_VAR 0 5
57413: PPUSH
57414: LD_VAR 0 6
57418: PPUSH
57419: CALL_OW 283
57423: IFFALSE 57463
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57425: LD_ADDR_VAR 0 4
57429: PUSH
57430: LD_VAR 0 4
57434: PPUSH
57435: LD_VAR 0 4
57439: PUSH
57440: LD_INT 1
57442: PLUS
57443: PPUSH
57444: LD_VAR 0 5
57448: PUSH
57449: LD_VAR 0 6
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PPUSH
57458: CALL_OW 1
57462: ST_TO_ADDR
// end ;
57463: GO 57387
57465: POP
57466: POP
57467: GO 57367
57469: POP
57470: POP
// end ;
57471: LD_VAR 0 4
57475: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57476: LD_INT 0
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
// if not units then
57486: LD_VAR 0 1
57490: NOT
57491: IFFALSE 57495
// exit ;
57493: GO 58023
// result := UnitFilter ( units , [ f_ok ] ) ;
57495: LD_ADDR_VAR 0 3
57499: PUSH
57500: LD_VAR 0 1
57504: PPUSH
57505: LD_INT 50
57507: PUSH
57508: EMPTY
57509: LIST
57510: PPUSH
57511: CALL_OW 72
57515: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57516: LD_ADDR_VAR 0 8
57520: PUSH
57521: LD_VAR 0 1
57525: PUSH
57526: LD_INT 1
57528: ARRAY
57529: PPUSH
57530: CALL_OW 255
57534: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57535: LD_ADDR_VAR 0 10
57539: PUSH
57540: LD_INT 29
57542: PUSH
57543: LD_INT 91
57545: PUSH
57546: LD_INT 49
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// if not result then
57554: LD_VAR 0 3
57558: NOT
57559: IFFALSE 57563
// exit ;
57561: GO 58023
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57563: LD_ADDR_VAR 0 5
57567: PUSH
57568: LD_INT 81
57570: PUSH
57571: LD_VAR 0 8
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PPUSH
57580: CALL_OW 69
57584: ST_TO_ADDR
// for i in result do
57585: LD_ADDR_VAR 0 4
57589: PUSH
57590: LD_VAR 0 3
57594: PUSH
57595: FOR_IN
57596: IFFALSE 58021
// begin tag := GetTag ( i ) + 1 ;
57598: LD_ADDR_VAR 0 9
57602: PUSH
57603: LD_VAR 0 4
57607: PPUSH
57608: CALL_OW 110
57612: PUSH
57613: LD_INT 1
57615: PLUS
57616: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57617: LD_ADDR_VAR 0 7
57621: PUSH
57622: LD_VAR 0 4
57626: PPUSH
57627: CALL_OW 250
57631: PPUSH
57632: LD_VAR 0 4
57636: PPUSH
57637: CALL_OW 251
57641: PPUSH
57642: LD_INT 4
57644: PPUSH
57645: CALL 57218 0 3
57649: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57650: LD_VAR 0 4
57654: PPUSH
57655: CALL_OW 247
57659: PUSH
57660: LD_INT 2
57662: EQUAL
57663: PUSH
57664: LD_VAR 0 7
57668: PUSH
57669: LD_INT 2
57671: GREATER
57672: AND
57673: PUSH
57674: LD_VAR 0 4
57678: PPUSH
57679: CALL_OW 264
57683: PUSH
57684: LD_VAR 0 10
57688: IN
57689: NOT
57690: AND
57691: IFFALSE 57730
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57693: LD_VAR 0 4
57697: PPUSH
57698: LD_VAR 0 7
57702: PUSH
57703: LD_INT 1
57705: ARRAY
57706: PUSH
57707: LD_INT 1
57709: ARRAY
57710: PPUSH
57711: LD_VAR 0 7
57715: PUSH
57716: LD_INT 1
57718: ARRAY
57719: PUSH
57720: LD_INT 2
57722: ARRAY
57723: PPUSH
57724: CALL_OW 116
57728: GO 58019
// if path > tag then
57730: LD_VAR 0 2
57734: PUSH
57735: LD_VAR 0 9
57739: GREATER
57740: IFFALSE 57948
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57742: LD_ADDR_VAR 0 6
57746: PUSH
57747: LD_VAR 0 5
57751: PPUSH
57752: LD_INT 91
57754: PUSH
57755: LD_VAR 0 4
57759: PUSH
57760: LD_INT 8
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: PPUSH
57768: CALL_OW 72
57772: ST_TO_ADDR
// if nearEnemy then
57773: LD_VAR 0 6
57777: IFFALSE 57846
// begin if GetWeapon ( i ) = ru_time_lapser then
57779: LD_VAR 0 4
57783: PPUSH
57784: CALL_OW 264
57788: PUSH
57789: LD_INT 49
57791: EQUAL
57792: IFFALSE 57820
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57794: LD_VAR 0 4
57798: PPUSH
57799: LD_VAR 0 6
57803: PPUSH
57804: LD_VAR 0 4
57808: PPUSH
57809: CALL_OW 74
57813: PPUSH
57814: CALL_OW 112
57818: GO 57844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57820: LD_VAR 0 4
57824: PPUSH
57825: LD_VAR 0 6
57829: PPUSH
57830: LD_VAR 0 4
57834: PPUSH
57835: CALL_OW 74
57839: PPUSH
57840: CALL 59094 0 2
// end else
57844: GO 57946
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57846: LD_VAR 0 4
57850: PPUSH
57851: LD_VAR 0 2
57855: PUSH
57856: LD_VAR 0 9
57860: ARRAY
57861: PUSH
57862: LD_INT 1
57864: ARRAY
57865: PPUSH
57866: LD_VAR 0 2
57870: PUSH
57871: LD_VAR 0 9
57875: ARRAY
57876: PUSH
57877: LD_INT 2
57879: ARRAY
57880: PPUSH
57881: CALL_OW 297
57885: PUSH
57886: LD_INT 6
57888: GREATER
57889: IFFALSE 57932
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57891: LD_VAR 0 4
57895: PPUSH
57896: LD_VAR 0 2
57900: PUSH
57901: LD_VAR 0 9
57905: ARRAY
57906: PUSH
57907: LD_INT 1
57909: ARRAY
57910: PPUSH
57911: LD_VAR 0 2
57915: PUSH
57916: LD_VAR 0 9
57920: ARRAY
57921: PUSH
57922: LD_INT 2
57924: ARRAY
57925: PPUSH
57926: CALL_OW 114
57930: GO 57946
// SetTag ( i , tag ) ;
57932: LD_VAR 0 4
57936: PPUSH
57937: LD_VAR 0 9
57941: PPUSH
57942: CALL_OW 109
// end else
57946: GO 58019
// if enemy then
57948: LD_VAR 0 5
57952: IFFALSE 58019
// begin if GetWeapon ( i ) = ru_time_lapser then
57954: LD_VAR 0 4
57958: PPUSH
57959: CALL_OW 264
57963: PUSH
57964: LD_INT 49
57966: EQUAL
57967: IFFALSE 57995
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57969: LD_VAR 0 4
57973: PPUSH
57974: LD_VAR 0 5
57978: PPUSH
57979: LD_VAR 0 4
57983: PPUSH
57984: CALL_OW 74
57988: PPUSH
57989: CALL_OW 112
57993: GO 58019
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57995: LD_VAR 0 4
57999: PPUSH
58000: LD_VAR 0 5
58004: PPUSH
58005: LD_VAR 0 4
58009: PPUSH
58010: CALL_OW 74
58014: PPUSH
58015: CALL 59094 0 2
// end ; end ;
58019: GO 57595
58021: POP
58022: POP
// end ;
58023: LD_VAR 0 3
58027: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58028: LD_INT 0
58030: PPUSH
58031: PPUSH
58032: PPUSH
// if not unit or IsInUnit ( unit ) then
58033: LD_VAR 0 1
58037: NOT
58038: PUSH
58039: LD_VAR 0 1
58043: PPUSH
58044: CALL_OW 310
58048: OR
58049: IFFALSE 58053
// exit ;
58051: GO 58144
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58053: LD_ADDR_VAR 0 4
58057: PUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 250
58067: PPUSH
58068: LD_VAR 0 2
58072: PPUSH
58073: LD_INT 1
58075: PPUSH
58076: CALL_OW 272
58080: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58081: LD_ADDR_VAR 0 5
58085: PUSH
58086: LD_VAR 0 1
58090: PPUSH
58091: CALL_OW 251
58095: PPUSH
58096: LD_VAR 0 2
58100: PPUSH
58101: LD_INT 1
58103: PPUSH
58104: CALL_OW 273
58108: ST_TO_ADDR
// if ValidHex ( x , y ) then
58109: LD_VAR 0 4
58113: PPUSH
58114: LD_VAR 0 5
58118: PPUSH
58119: CALL_OW 488
58123: IFFALSE 58144
// ComTurnXY ( unit , x , y ) ;
58125: LD_VAR 0 1
58129: PPUSH
58130: LD_VAR 0 4
58134: PPUSH
58135: LD_VAR 0 5
58139: PPUSH
58140: CALL_OW 118
// end ;
58144: LD_VAR 0 3
58148: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58149: LD_INT 0
58151: PPUSH
58152: PPUSH
// result := false ;
58153: LD_ADDR_VAR 0 3
58157: PUSH
58158: LD_INT 0
58160: ST_TO_ADDR
// if not units then
58161: LD_VAR 0 2
58165: NOT
58166: IFFALSE 58170
// exit ;
58168: GO 58215
// for i in units do
58170: LD_ADDR_VAR 0 4
58174: PUSH
58175: LD_VAR 0 2
58179: PUSH
58180: FOR_IN
58181: IFFALSE 58213
// if See ( side , i ) then
58183: LD_VAR 0 1
58187: PPUSH
58188: LD_VAR 0 4
58192: PPUSH
58193: CALL_OW 292
58197: IFFALSE 58211
// begin result := true ;
58199: LD_ADDR_VAR 0 3
58203: PUSH
58204: LD_INT 1
58206: ST_TO_ADDR
// exit ;
58207: POP
58208: POP
58209: GO 58215
// end ;
58211: GO 58180
58213: POP
58214: POP
// end ;
58215: LD_VAR 0 3
58219: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58220: LD_INT 0
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
// if not unit or not points then
58226: LD_VAR 0 1
58230: NOT
58231: PUSH
58232: LD_VAR 0 2
58236: NOT
58237: OR
58238: IFFALSE 58242
// exit ;
58240: GO 58332
// dist := 99999 ;
58242: LD_ADDR_VAR 0 5
58246: PUSH
58247: LD_INT 99999
58249: ST_TO_ADDR
// for i in points do
58250: LD_ADDR_VAR 0 4
58254: PUSH
58255: LD_VAR 0 2
58259: PUSH
58260: FOR_IN
58261: IFFALSE 58330
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58263: LD_ADDR_VAR 0 6
58267: PUSH
58268: LD_VAR 0 1
58272: PPUSH
58273: LD_VAR 0 4
58277: PUSH
58278: LD_INT 1
58280: ARRAY
58281: PPUSH
58282: LD_VAR 0 4
58286: PUSH
58287: LD_INT 2
58289: ARRAY
58290: PPUSH
58291: CALL_OW 297
58295: ST_TO_ADDR
// if tmpDist < dist then
58296: LD_VAR 0 6
58300: PUSH
58301: LD_VAR 0 5
58305: LESS
58306: IFFALSE 58328
// begin result := i ;
58308: LD_ADDR_VAR 0 3
58312: PUSH
58313: LD_VAR 0 4
58317: ST_TO_ADDR
// dist := tmpDist ;
58318: LD_ADDR_VAR 0 5
58322: PUSH
58323: LD_VAR 0 6
58327: ST_TO_ADDR
// end ; end ;
58328: GO 58260
58330: POP
58331: POP
// end ;
58332: LD_VAR 0 3
58336: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58337: LD_INT 0
58339: PPUSH
// uc_side := side ;
58340: LD_ADDR_OWVAR 20
58344: PUSH
58345: LD_VAR 0 1
58349: ST_TO_ADDR
// uc_nation := 3 ;
58350: LD_ADDR_OWVAR 21
58354: PUSH
58355: LD_INT 3
58357: ST_TO_ADDR
// vc_chassis := 25 ;
58358: LD_ADDR_OWVAR 37
58362: PUSH
58363: LD_INT 25
58365: ST_TO_ADDR
// vc_engine := engine_siberite ;
58366: LD_ADDR_OWVAR 39
58370: PUSH
58371: LD_INT 3
58373: ST_TO_ADDR
// vc_control := control_computer ;
58374: LD_ADDR_OWVAR 38
58378: PUSH
58379: LD_INT 3
58381: ST_TO_ADDR
// vc_weapon := 59 ;
58382: LD_ADDR_OWVAR 40
58386: PUSH
58387: LD_INT 59
58389: ST_TO_ADDR
// result := CreateVehicle ;
58390: LD_ADDR_VAR 0 5
58394: PUSH
58395: CALL_OW 45
58399: ST_TO_ADDR
// SetDir ( result , d ) ;
58400: LD_VAR 0 5
58404: PPUSH
58405: LD_VAR 0 4
58409: PPUSH
58410: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58414: LD_VAR 0 5
58418: PPUSH
58419: LD_VAR 0 2
58423: PPUSH
58424: LD_VAR 0 3
58428: PPUSH
58429: LD_INT 0
58431: PPUSH
58432: CALL_OW 48
// end ;
58436: LD_VAR 0 5
58440: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58441: LD_INT 0
58443: PPUSH
58444: PPUSH
58445: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58446: LD_ADDR_VAR 0 2
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58469: LD_VAR 0 1
58473: NOT
58474: PUSH
58475: LD_VAR 0 1
58479: PPUSH
58480: CALL_OW 264
58484: PUSH
58485: LD_INT 12
58487: PUSH
58488: LD_INT 51
58490: PUSH
58491: LD_INT 32
58493: PUSH
58494: LD_INT 89
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: IN
58503: NOT
58504: OR
58505: IFFALSE 58509
// exit ;
58507: GO 58607
// for i := 1 to 3 do
58509: LD_ADDR_VAR 0 3
58513: PUSH
58514: DOUBLE
58515: LD_INT 1
58517: DEC
58518: ST_TO_ADDR
58519: LD_INT 3
58521: PUSH
58522: FOR_TO
58523: IFFALSE 58605
// begin tmp := GetCargo ( cargo , i ) ;
58525: LD_ADDR_VAR 0 4
58529: PUSH
58530: LD_VAR 0 1
58534: PPUSH
58535: LD_VAR 0 3
58539: PPUSH
58540: CALL_OW 289
58544: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58545: LD_ADDR_VAR 0 2
58549: PUSH
58550: LD_VAR 0 2
58554: PPUSH
58555: LD_VAR 0 3
58559: PPUSH
58560: LD_VAR 0 4
58564: PPUSH
58565: CALL_OW 1
58569: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58570: LD_ADDR_VAR 0 2
58574: PUSH
58575: LD_VAR 0 2
58579: PPUSH
58580: LD_INT 4
58582: PPUSH
58583: LD_VAR 0 2
58587: PUSH
58588: LD_INT 4
58590: ARRAY
58591: PUSH
58592: LD_VAR 0 4
58596: PLUS
58597: PPUSH
58598: CALL_OW 1
58602: ST_TO_ADDR
// end ;
58603: GO 58522
58605: POP
58606: POP
// end ;
58607: LD_VAR 0 2
58611: RET
// export function Length ( array ) ; begin
58612: LD_INT 0
58614: PPUSH
// result := array + 0 ;
58615: LD_ADDR_VAR 0 2
58619: PUSH
58620: LD_VAR 0 1
58624: PUSH
58625: LD_INT 0
58627: PLUS
58628: ST_TO_ADDR
// end ;
58629: LD_VAR 0 2
58633: RET
// export function PrepareArray ( array ) ; begin
58634: LD_INT 0
58636: PPUSH
// result := array diff 0 ;
58637: LD_ADDR_VAR 0 2
58641: PUSH
58642: LD_VAR 0 1
58646: PUSH
58647: LD_INT 0
58649: DIFF
58650: ST_TO_ADDR
// if not result [ 1 ] then
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 1
58658: ARRAY
58659: NOT
58660: IFFALSE 58680
// result := Delete ( result , 1 ) ;
58662: LD_ADDR_VAR 0 2
58666: PUSH
58667: LD_VAR 0 2
58671: PPUSH
58672: LD_INT 1
58674: PPUSH
58675: CALL_OW 3
58679: ST_TO_ADDR
// end ;
58680: LD_VAR 0 2
58684: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58685: LD_INT 0
58687: PPUSH
58688: PPUSH
58689: PPUSH
58690: PPUSH
// sibRocketRange := 25 ;
58691: LD_ADDR_VAR 0 6
58695: PUSH
58696: LD_INT 25
58698: ST_TO_ADDR
// result := false ;
58699: LD_ADDR_VAR 0 4
58703: PUSH
58704: LD_INT 0
58706: ST_TO_ADDR
// for i := 0 to 5 do
58707: LD_ADDR_VAR 0 5
58711: PUSH
58712: DOUBLE
58713: LD_INT 0
58715: DEC
58716: ST_TO_ADDR
58717: LD_INT 5
58719: PUSH
58720: FOR_TO
58721: IFFALSE 58788
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58723: LD_VAR 0 1
58727: PPUSH
58728: LD_VAR 0 5
58732: PPUSH
58733: LD_VAR 0 6
58737: PPUSH
58738: CALL_OW 272
58742: PPUSH
58743: LD_VAR 0 2
58747: PPUSH
58748: LD_VAR 0 5
58752: PPUSH
58753: LD_VAR 0 6
58757: PPUSH
58758: CALL_OW 273
58762: PPUSH
58763: LD_VAR 0 3
58767: PPUSH
58768: CALL_OW 309
58772: IFFALSE 58786
// begin result := true ;
58774: LD_ADDR_VAR 0 4
58778: PUSH
58779: LD_INT 1
58781: ST_TO_ADDR
// exit ;
58782: POP
58783: POP
58784: GO 58790
// end ;
58786: GO 58720
58788: POP
58789: POP
// end ;
58790: LD_VAR 0 4
58794: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58795: LD_INT 0
58797: PPUSH
58798: PPUSH
58799: PPUSH
// if btype = b_depot then
58800: LD_VAR 0 2
58804: PUSH
58805: LD_INT 0
58807: EQUAL
58808: IFFALSE 58820
// begin result := true ;
58810: LD_ADDR_VAR 0 3
58814: PUSH
58815: LD_INT 1
58817: ST_TO_ADDR
// exit ;
58818: GO 58936
// end ; pom := GetBase ( depot ) ;
58820: LD_ADDR_VAR 0 4
58824: PUSH
58825: LD_VAR 0 1
58829: PPUSH
58830: CALL_OW 274
58834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58835: LD_ADDR_VAR 0 5
58839: PUSH
58840: LD_VAR 0 2
58844: PPUSH
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 248
58854: PPUSH
58855: CALL_OW 450
58859: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58860: LD_ADDR_VAR 0 3
58864: PUSH
58865: LD_VAR 0 4
58869: PPUSH
58870: LD_INT 1
58872: PPUSH
58873: CALL_OW 275
58877: PUSH
58878: LD_VAR 0 5
58882: PUSH
58883: LD_INT 1
58885: ARRAY
58886: GREATEREQUAL
58887: PUSH
58888: LD_VAR 0 4
58892: PPUSH
58893: LD_INT 2
58895: PPUSH
58896: CALL_OW 275
58900: PUSH
58901: LD_VAR 0 5
58905: PUSH
58906: LD_INT 2
58908: ARRAY
58909: GREATEREQUAL
58910: AND
58911: PUSH
58912: LD_VAR 0 4
58916: PPUSH
58917: LD_INT 3
58919: PPUSH
58920: CALL_OW 275
58924: PUSH
58925: LD_VAR 0 5
58929: PUSH
58930: LD_INT 3
58932: ARRAY
58933: GREATEREQUAL
58934: AND
58935: ST_TO_ADDR
// end ;
58936: LD_VAR 0 3
58940: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58941: LD_INT 0
58943: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58944: LD_VAR 0 1
58948: PPUSH
58949: LD_VAR 0 2
58953: PPUSH
58954: LD_INT 0
58956: PPUSH
58957: LD_INT 0
58959: PPUSH
58960: LD_INT 1
58962: PPUSH
58963: LD_INT 0
58965: PPUSH
58966: CALL_OW 587
// end ;
58970: LD_VAR 0 3
58974: RET
// export function CenterOnNow ( unit ) ; begin
58975: LD_INT 0
58977: PPUSH
// result := IsInUnit ( unit ) ;
58978: LD_ADDR_VAR 0 2
58982: PUSH
58983: LD_VAR 0 1
58987: PPUSH
58988: CALL_OW 310
58992: ST_TO_ADDR
// if not result then
58993: LD_VAR 0 2
58997: NOT
58998: IFFALSE 59010
// result := unit ;
59000: LD_ADDR_VAR 0 2
59004: PUSH
59005: LD_VAR 0 1
59009: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59010: LD_VAR 0 1
59014: PPUSH
59015: CALL_OW 87
// end ;
59019: LD_VAR 0 2
59023: RET
// export function ComMoveHex ( unit , hex ) ; begin
59024: LD_INT 0
59026: PPUSH
// if not hex then
59027: LD_VAR 0 2
59031: NOT
59032: IFFALSE 59036
// exit ;
59034: GO 59089
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59036: LD_VAR 0 2
59040: PUSH
59041: LD_INT 1
59043: ARRAY
59044: PPUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_INT 2
59052: ARRAY
59053: PPUSH
59054: CALL_OW 428
59058: IFFALSE 59062
// exit ;
59060: GO 59089
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59062: LD_VAR 0 1
59066: PPUSH
59067: LD_VAR 0 2
59071: PUSH
59072: LD_INT 1
59074: ARRAY
59075: PPUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_INT 2
59083: ARRAY
59084: PPUSH
59085: CALL_OW 111
// end ;
59089: LD_VAR 0 3
59093: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59094: LD_INT 0
59096: PPUSH
59097: PPUSH
59098: PPUSH
// if not unit or not enemy then
59099: LD_VAR 0 1
59103: NOT
59104: PUSH
59105: LD_VAR 0 2
59109: NOT
59110: OR
59111: IFFALSE 59115
// exit ;
59113: GO 59239
// x := GetX ( enemy ) ;
59115: LD_ADDR_VAR 0 4
59119: PUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: CALL_OW 250
59129: ST_TO_ADDR
// y := GetY ( enemy ) ;
59130: LD_ADDR_VAR 0 5
59134: PUSH
59135: LD_VAR 0 2
59139: PPUSH
59140: CALL_OW 251
59144: ST_TO_ADDR
// if ValidHex ( x , y ) then
59145: LD_VAR 0 4
59149: PPUSH
59150: LD_VAR 0 5
59154: PPUSH
59155: CALL_OW 488
59159: IFFALSE 59239
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59161: LD_VAR 0 2
59165: PPUSH
59166: CALL_OW 247
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: IN
59181: PUSH
59182: LD_VAR 0 1
59186: PPUSH
59187: CALL_OW 255
59191: PPUSH
59192: LD_VAR 0 2
59196: PPUSH
59197: CALL_OW 292
59201: OR
59202: IFFALSE 59220
// ComAttackUnit ( unit , enemy ) else
59204: LD_VAR 0 1
59208: PPUSH
59209: LD_VAR 0 2
59213: PPUSH
59214: CALL_OW 115
59218: GO 59239
// ComAgressiveMove ( unit , x , y ) ;
59220: LD_VAR 0 1
59224: PPUSH
59225: LD_VAR 0 4
59229: PPUSH
59230: LD_VAR 0 5
59234: PPUSH
59235: CALL_OW 114
// end ;
59239: LD_VAR 0 3
59243: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59244: LD_INT 0
59246: PPUSH
59247: PPUSH
59248: PPUSH
// list := AreaToList ( area , 0 ) ;
59249: LD_ADDR_VAR 0 5
59253: PUSH
59254: LD_VAR 0 1
59258: PPUSH
59259: LD_INT 0
59261: PPUSH
59262: CALL_OW 517
59266: ST_TO_ADDR
// if not list then
59267: LD_VAR 0 5
59271: NOT
59272: IFFALSE 59276
// exit ;
59274: GO 59406
// if all then
59276: LD_VAR 0 2
59280: IFFALSE 59368
// begin for i := 1 to list [ 1 ] do
59282: LD_ADDR_VAR 0 4
59286: PUSH
59287: DOUBLE
59288: LD_INT 1
59290: DEC
59291: ST_TO_ADDR
59292: LD_VAR 0 5
59296: PUSH
59297: LD_INT 1
59299: ARRAY
59300: PUSH
59301: FOR_TO
59302: IFFALSE 59364
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59304: LD_ADDR_VAR 0 3
59308: PUSH
59309: LD_VAR 0 3
59313: PPUSH
59314: LD_VAR 0 3
59318: PUSH
59319: LD_INT 1
59321: PLUS
59322: PPUSH
59323: LD_VAR 0 5
59327: PUSH
59328: LD_INT 1
59330: ARRAY
59331: PUSH
59332: LD_VAR 0 4
59336: ARRAY
59337: PUSH
59338: LD_VAR 0 5
59342: PUSH
59343: LD_INT 2
59345: ARRAY
59346: PUSH
59347: LD_VAR 0 4
59351: ARRAY
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PPUSH
59357: CALL_OW 1
59361: ST_TO_ADDR
59362: GO 59301
59364: POP
59365: POP
// exit ;
59366: GO 59406
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59368: LD_ADDR_VAR 0 3
59372: PUSH
59373: LD_VAR 0 5
59377: PUSH
59378: LD_INT 1
59380: ARRAY
59381: PUSH
59382: LD_INT 1
59384: ARRAY
59385: PUSH
59386: LD_VAR 0 5
59390: PUSH
59391: LD_INT 2
59393: ARRAY
59394: PUSH
59395: LD_INT 1
59397: ARRAY
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: ST_TO_ADDR
// end ;
59406: LD_VAR 0 3
59410: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59411: LD_INT 0
59413: PPUSH
59414: PPUSH
// list := AreaToList ( area , 0 ) ;
59415: LD_ADDR_VAR 0 4
59419: PUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: LD_INT 0
59427: PPUSH
59428: CALL_OW 517
59432: ST_TO_ADDR
// if not list then
59433: LD_VAR 0 4
59437: NOT
59438: IFFALSE 59442
// exit ;
59440: GO 59483
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59442: LD_ADDR_VAR 0 3
59446: PUSH
59447: LD_VAR 0 4
59451: PUSH
59452: LD_INT 1
59454: ARRAY
59455: PUSH
59456: LD_INT 1
59458: ARRAY
59459: PUSH
59460: LD_VAR 0 4
59464: PUSH
59465: LD_INT 2
59467: ARRAY
59468: PUSH
59469: LD_INT 1
59471: ARRAY
59472: PUSH
59473: LD_VAR 0 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 3
59487: RET
// export function First ( array ) ; begin
59488: LD_INT 0
59490: PPUSH
// if not array then
59491: LD_VAR 0 1
59495: NOT
59496: IFFALSE 59500
// exit ;
59498: GO 59514
// result := array [ 1 ] ;
59500: LD_ADDR_VAR 0 2
59504: PUSH
59505: LD_VAR 0 1
59509: PUSH
59510: LD_INT 1
59512: ARRAY
59513: ST_TO_ADDR
// end ;
59514: LD_VAR 0 2
59518: RET
// export function Last ( array ) ; begin
59519: LD_INT 0
59521: PPUSH
// if not array then
59522: LD_VAR 0 1
59526: NOT
59527: IFFALSE 59531
// exit ;
59529: GO 59547
// result := array [ array ] ;
59531: LD_ADDR_VAR 0 2
59535: PUSH
59536: LD_VAR 0 1
59540: PUSH
59541: LD_VAR 0 1
59545: ARRAY
59546: ST_TO_ADDR
// end ;
59547: LD_VAR 0 2
59551: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59552: LD_INT 0
59554: PPUSH
59555: PPUSH
// result := [ ] ;
59556: LD_ADDR_VAR 0 5
59560: PUSH
59561: EMPTY
59562: ST_TO_ADDR
// if not array then
59563: LD_VAR 0 1
59567: NOT
59568: IFFALSE 59572
// exit ;
59570: GO 59684
// for i := 1 to array do
59572: LD_ADDR_VAR 0 6
59576: PUSH
59577: DOUBLE
59578: LD_INT 1
59580: DEC
59581: ST_TO_ADDR
59582: LD_VAR 0 1
59586: PUSH
59587: FOR_TO
59588: IFFALSE 59682
// if array [ i ] [ index ] = value then
59590: LD_VAR 0 1
59594: PUSH
59595: LD_VAR 0 6
59599: ARRAY
59600: PUSH
59601: LD_VAR 0 2
59605: ARRAY
59606: PUSH
59607: LD_VAR 0 3
59611: EQUAL
59612: IFFALSE 59680
// begin if indexColumn then
59614: LD_VAR 0 4
59618: IFFALSE 59654
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59620: LD_ADDR_VAR 0 5
59624: PUSH
59625: LD_VAR 0 5
59629: PPUSH
59630: LD_VAR 0 1
59634: PUSH
59635: LD_VAR 0 6
59639: ARRAY
59640: PUSH
59641: LD_VAR 0 4
59645: ARRAY
59646: PPUSH
59647: CALL 54866 0 2
59651: ST_TO_ADDR
59652: GO 59680
// result := Join ( result , array [ i ] ) ;
59654: LD_ADDR_VAR 0 5
59658: PUSH
59659: LD_VAR 0 5
59663: PPUSH
59664: LD_VAR 0 1
59668: PUSH
59669: LD_VAR 0 6
59673: ARRAY
59674: PPUSH
59675: CALL 54866 0 2
59679: ST_TO_ADDR
// end ;
59680: GO 59587
59682: POP
59683: POP
// end ;
59684: LD_VAR 0 5
59688: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59689: LD_INT 0
59691: PPUSH
// if not vehicles or not parkingPoint then
59692: LD_VAR 0 1
59696: NOT
59697: PUSH
59698: LD_VAR 0 2
59702: NOT
59703: OR
59704: IFFALSE 59708
// exit ;
59706: GO 59806
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59708: LD_ADDR_VAR 0 1
59712: PUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_INT 50
59720: PUSH
59721: EMPTY
59722: LIST
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: LD_INT 92
59729: PUSH
59730: LD_VAR 0 2
59734: PUSH
59735: LD_INT 1
59737: ARRAY
59738: PUSH
59739: LD_VAR 0 2
59743: PUSH
59744: LD_INT 2
59746: ARRAY
59747: PUSH
59748: LD_INT 8
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PPUSH
59765: CALL_OW 72
59769: ST_TO_ADDR
// if not vehicles then
59770: LD_VAR 0 1
59774: NOT
59775: IFFALSE 59779
// exit ;
59777: GO 59806
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59779: LD_VAR 0 1
59783: PPUSH
59784: LD_VAR 0 2
59788: PUSH
59789: LD_INT 1
59791: ARRAY
59792: PPUSH
59793: LD_VAR 0 2
59797: PUSH
59798: LD_INT 2
59800: ARRAY
59801: PPUSH
59802: CALL_OW 111
// end ;
59806: LD_VAR 0 3
59810: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59811: LD_INT 0
59813: PPUSH
59814: PPUSH
59815: PPUSH
// if not side or not area then
59816: LD_VAR 0 1
59820: NOT
59821: PUSH
59822: LD_VAR 0 2
59826: NOT
59827: OR
59828: IFFALSE 59832
// exit ;
59830: GO 59951
// tmp := AreaToList ( area , 0 ) ;
59832: LD_ADDR_VAR 0 5
59836: PUSH
59837: LD_VAR 0 2
59841: PPUSH
59842: LD_INT 0
59844: PPUSH
59845: CALL_OW 517
59849: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59850: LD_ADDR_VAR 0 4
59854: PUSH
59855: DOUBLE
59856: LD_INT 1
59858: DEC
59859: ST_TO_ADDR
59860: LD_VAR 0 5
59864: PUSH
59865: LD_INT 1
59867: ARRAY
59868: PUSH
59869: FOR_TO
59870: IFFALSE 59949
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59872: LD_VAR 0 5
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: PUSH
59881: LD_VAR 0 4
59885: ARRAY
59886: PPUSH
59887: LD_VAR 0 5
59891: PUSH
59892: LD_INT 2
59894: ARRAY
59895: PUSH
59896: LD_VAR 0 4
59900: ARRAY
59901: PPUSH
59902: CALL_OW 351
59906: IFFALSE 59947
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59908: LD_VAR 0 5
59912: PUSH
59913: LD_INT 1
59915: ARRAY
59916: PUSH
59917: LD_VAR 0 4
59921: ARRAY
59922: PPUSH
59923: LD_VAR 0 5
59927: PUSH
59928: LD_INT 2
59930: ARRAY
59931: PUSH
59932: LD_VAR 0 4
59936: ARRAY
59937: PPUSH
59938: LD_VAR 0 1
59942: PPUSH
59943: CALL_OW 244
// end ;
59947: GO 59869
59949: POP
59950: POP
// end ; end_of_file
59951: LD_VAR 0 3
59955: RET
// export globalGameSaveCounter ; every 0 0$1 do
59956: GO 59958
59958: DISABLE
// begin enable ;
59959: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59960: LD_STRING updateTimer(
59962: PUSH
59963: LD_OWVAR 1
59967: STR
59968: PUSH
59969: LD_STRING );
59971: STR
59972: PPUSH
59973: CALL_OW 559
// end ;
59977: END
// every 0 0$1 do
59978: GO 59980
59980: DISABLE
// begin globalGameSaveCounter := 0 ;
59981: LD_ADDR_EXP 50
59985: PUSH
59986: LD_INT 0
59988: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59989: LD_STRING setGameSaveCounter(0)
59991: PPUSH
59992: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59996: LD_STRING initStreamRollete();
59998: PPUSH
59999: CALL_OW 559
// InitStreamMode ;
60003: CALL 61346 0 0
// DefineStreamItems ( false ) ;
60007: LD_INT 0
60009: PPUSH
60010: CALL 61810 0 1
// end ;
60014: END
// export function SOS_MapStart ( ) ; begin
60015: LD_INT 0
60017: PPUSH
// if streamModeActive then
60018: LD_EXP 51
60022: IFFALSE 60031
// DefineStreamItems ( true ) ;
60024: LD_INT 1
60026: PPUSH
60027: CALL 61810 0 1
// UpdateLuaVariables ( ) ;
60031: CALL 60048 0 0
// UpdateFactoryWaypoints ( ) ;
60035: CALL 74812 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60039: CALL 75064 0 0
// end ;
60043: LD_VAR 0 1
60047: RET
// function UpdateLuaVariables ( ) ; begin
60048: LD_INT 0
60050: PPUSH
// if globalGameSaveCounter then
60051: LD_EXP 50
60055: IFFALSE 60089
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
60057: LD_ADDR_EXP 50
60061: PUSH
60062: LD_EXP 50
60066: PPUSH
60067: CALL 56227 0 1
60071: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60072: LD_STRING setGameSaveCounter(
60074: PUSH
60075: LD_EXP 50
60079: STR
60080: PUSH
60081: LD_STRING )
60083: STR
60084: PPUSH
60085: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60089: LD_STRING setGameDifficulty(
60091: PUSH
60092: LD_OWVAR 67
60096: STR
60097: PUSH
60098: LD_STRING )
60100: STR
60101: PPUSH
60102: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60106: LD_STRING displayDifficulty(
60108: PUSH
60109: LD_OWVAR 67
60113: STR
60114: PUSH
60115: LD_STRING )
60117: STR
60118: PPUSH
60119: CALL_OW 559
// end ;
60123: LD_VAR 0 1
60127: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60128: LD_INT 0
60130: PPUSH
// if p2 = stream_mode then
60131: LD_VAR 0 2
60135: PUSH
60136: LD_INT 100
60138: EQUAL
60139: IFFALSE 61142
// begin if not StreamModeActive then
60141: LD_EXP 51
60145: NOT
60146: IFFALSE 60156
// StreamModeActive := true ;
60148: LD_ADDR_EXP 51
60152: PUSH
60153: LD_INT 1
60155: ST_TO_ADDR
// if p3 = 0 then
60156: LD_VAR 0 3
60160: PUSH
60161: LD_INT 0
60163: EQUAL
60164: IFFALSE 60170
// InitStreamMode ;
60166: CALL 61346 0 0
// if p3 = 1 then
60170: LD_VAR 0 3
60174: PUSH
60175: LD_INT 1
60177: EQUAL
60178: IFFALSE 60188
// sRocket := true ;
60180: LD_ADDR_EXP 56
60184: PUSH
60185: LD_INT 1
60187: ST_TO_ADDR
// if p3 = 2 then
60188: LD_VAR 0 3
60192: PUSH
60193: LD_INT 2
60195: EQUAL
60196: IFFALSE 60206
// sSpeed := true ;
60198: LD_ADDR_EXP 55
60202: PUSH
60203: LD_INT 1
60205: ST_TO_ADDR
// if p3 = 3 then
60206: LD_VAR 0 3
60210: PUSH
60211: LD_INT 3
60213: EQUAL
60214: IFFALSE 60224
// sEngine := true ;
60216: LD_ADDR_EXP 57
60220: PUSH
60221: LD_INT 1
60223: ST_TO_ADDR
// if p3 = 4 then
60224: LD_VAR 0 3
60228: PUSH
60229: LD_INT 4
60231: EQUAL
60232: IFFALSE 60242
// sSpec := true ;
60234: LD_ADDR_EXP 54
60238: PUSH
60239: LD_INT 1
60241: ST_TO_ADDR
// if p3 = 5 then
60242: LD_VAR 0 3
60246: PUSH
60247: LD_INT 5
60249: EQUAL
60250: IFFALSE 60260
// sLevel := true ;
60252: LD_ADDR_EXP 58
60256: PUSH
60257: LD_INT 1
60259: ST_TO_ADDR
// if p3 = 6 then
60260: LD_VAR 0 3
60264: PUSH
60265: LD_INT 6
60267: EQUAL
60268: IFFALSE 60278
// sArmoury := true ;
60270: LD_ADDR_EXP 59
60274: PUSH
60275: LD_INT 1
60277: ST_TO_ADDR
// if p3 = 7 then
60278: LD_VAR 0 3
60282: PUSH
60283: LD_INT 7
60285: EQUAL
60286: IFFALSE 60296
// sRadar := true ;
60288: LD_ADDR_EXP 60
60292: PUSH
60293: LD_INT 1
60295: ST_TO_ADDR
// if p3 = 8 then
60296: LD_VAR 0 3
60300: PUSH
60301: LD_INT 8
60303: EQUAL
60304: IFFALSE 60314
// sBunker := true ;
60306: LD_ADDR_EXP 61
60310: PUSH
60311: LD_INT 1
60313: ST_TO_ADDR
// if p3 = 9 then
60314: LD_VAR 0 3
60318: PUSH
60319: LD_INT 9
60321: EQUAL
60322: IFFALSE 60332
// sHack := true ;
60324: LD_ADDR_EXP 62
60328: PUSH
60329: LD_INT 1
60331: ST_TO_ADDR
// if p3 = 10 then
60332: LD_VAR 0 3
60336: PUSH
60337: LD_INT 10
60339: EQUAL
60340: IFFALSE 60350
// sFire := true ;
60342: LD_ADDR_EXP 63
60346: PUSH
60347: LD_INT 1
60349: ST_TO_ADDR
// if p3 = 11 then
60350: LD_VAR 0 3
60354: PUSH
60355: LD_INT 11
60357: EQUAL
60358: IFFALSE 60368
// sRefresh := true ;
60360: LD_ADDR_EXP 64
60364: PUSH
60365: LD_INT 1
60367: ST_TO_ADDR
// if p3 = 12 then
60368: LD_VAR 0 3
60372: PUSH
60373: LD_INT 12
60375: EQUAL
60376: IFFALSE 60386
// sExp := true ;
60378: LD_ADDR_EXP 65
60382: PUSH
60383: LD_INT 1
60385: ST_TO_ADDR
// if p3 = 13 then
60386: LD_VAR 0 3
60390: PUSH
60391: LD_INT 13
60393: EQUAL
60394: IFFALSE 60404
// sDepot := true ;
60396: LD_ADDR_EXP 66
60400: PUSH
60401: LD_INT 1
60403: ST_TO_ADDR
// if p3 = 14 then
60404: LD_VAR 0 3
60408: PUSH
60409: LD_INT 14
60411: EQUAL
60412: IFFALSE 60422
// sFlag := true ;
60414: LD_ADDR_EXP 67
60418: PUSH
60419: LD_INT 1
60421: ST_TO_ADDR
// if p3 = 15 then
60422: LD_VAR 0 3
60426: PUSH
60427: LD_INT 15
60429: EQUAL
60430: IFFALSE 60440
// sKamikadze := true ;
60432: LD_ADDR_EXP 75
60436: PUSH
60437: LD_INT 1
60439: ST_TO_ADDR
// if p3 = 16 then
60440: LD_VAR 0 3
60444: PUSH
60445: LD_INT 16
60447: EQUAL
60448: IFFALSE 60458
// sTroll := true ;
60450: LD_ADDR_EXP 76
60454: PUSH
60455: LD_INT 1
60457: ST_TO_ADDR
// if p3 = 17 then
60458: LD_VAR 0 3
60462: PUSH
60463: LD_INT 17
60465: EQUAL
60466: IFFALSE 60476
// sSlow := true ;
60468: LD_ADDR_EXP 77
60472: PUSH
60473: LD_INT 1
60475: ST_TO_ADDR
// if p3 = 18 then
60476: LD_VAR 0 3
60480: PUSH
60481: LD_INT 18
60483: EQUAL
60484: IFFALSE 60494
// sLack := true ;
60486: LD_ADDR_EXP 78
60490: PUSH
60491: LD_INT 1
60493: ST_TO_ADDR
// if p3 = 19 then
60494: LD_VAR 0 3
60498: PUSH
60499: LD_INT 19
60501: EQUAL
60502: IFFALSE 60512
// sTank := true ;
60504: LD_ADDR_EXP 80
60508: PUSH
60509: LD_INT 1
60511: ST_TO_ADDR
// if p3 = 20 then
60512: LD_VAR 0 3
60516: PUSH
60517: LD_INT 20
60519: EQUAL
60520: IFFALSE 60530
// sRemote := true ;
60522: LD_ADDR_EXP 81
60526: PUSH
60527: LD_INT 1
60529: ST_TO_ADDR
// if p3 = 21 then
60530: LD_VAR 0 3
60534: PUSH
60535: LD_INT 21
60537: EQUAL
60538: IFFALSE 60548
// sPowell := true ;
60540: LD_ADDR_EXP 82
60544: PUSH
60545: LD_INT 1
60547: ST_TO_ADDR
// if p3 = 22 then
60548: LD_VAR 0 3
60552: PUSH
60553: LD_INT 22
60555: EQUAL
60556: IFFALSE 60566
// sTeleport := true ;
60558: LD_ADDR_EXP 85
60562: PUSH
60563: LD_INT 1
60565: ST_TO_ADDR
// if p3 = 23 then
60566: LD_VAR 0 3
60570: PUSH
60571: LD_INT 23
60573: EQUAL
60574: IFFALSE 60584
// sOilTower := true ;
60576: LD_ADDR_EXP 87
60580: PUSH
60581: LD_INT 1
60583: ST_TO_ADDR
// if p3 = 24 then
60584: LD_VAR 0 3
60588: PUSH
60589: LD_INT 24
60591: EQUAL
60592: IFFALSE 60602
// sShovel := true ;
60594: LD_ADDR_EXP 88
60598: PUSH
60599: LD_INT 1
60601: ST_TO_ADDR
// if p3 = 25 then
60602: LD_VAR 0 3
60606: PUSH
60607: LD_INT 25
60609: EQUAL
60610: IFFALSE 60620
// sSheik := true ;
60612: LD_ADDR_EXP 89
60616: PUSH
60617: LD_INT 1
60619: ST_TO_ADDR
// if p3 = 26 then
60620: LD_VAR 0 3
60624: PUSH
60625: LD_INT 26
60627: EQUAL
60628: IFFALSE 60638
// sEarthquake := true ;
60630: LD_ADDR_EXP 91
60634: PUSH
60635: LD_INT 1
60637: ST_TO_ADDR
// if p3 = 27 then
60638: LD_VAR 0 3
60642: PUSH
60643: LD_INT 27
60645: EQUAL
60646: IFFALSE 60656
// sAI := true ;
60648: LD_ADDR_EXP 92
60652: PUSH
60653: LD_INT 1
60655: ST_TO_ADDR
// if p3 = 28 then
60656: LD_VAR 0 3
60660: PUSH
60661: LD_INT 28
60663: EQUAL
60664: IFFALSE 60674
// sCargo := true ;
60666: LD_ADDR_EXP 95
60670: PUSH
60671: LD_INT 1
60673: ST_TO_ADDR
// if p3 = 29 then
60674: LD_VAR 0 3
60678: PUSH
60679: LD_INT 29
60681: EQUAL
60682: IFFALSE 60692
// sDLaser := true ;
60684: LD_ADDR_EXP 96
60688: PUSH
60689: LD_INT 1
60691: ST_TO_ADDR
// if p3 = 30 then
60692: LD_VAR 0 3
60696: PUSH
60697: LD_INT 30
60699: EQUAL
60700: IFFALSE 60710
// sExchange := true ;
60702: LD_ADDR_EXP 97
60706: PUSH
60707: LD_INT 1
60709: ST_TO_ADDR
// if p3 = 31 then
60710: LD_VAR 0 3
60714: PUSH
60715: LD_INT 31
60717: EQUAL
60718: IFFALSE 60728
// sFac := true ;
60720: LD_ADDR_EXP 98
60724: PUSH
60725: LD_INT 1
60727: ST_TO_ADDR
// if p3 = 32 then
60728: LD_VAR 0 3
60732: PUSH
60733: LD_INT 32
60735: EQUAL
60736: IFFALSE 60746
// sPower := true ;
60738: LD_ADDR_EXP 99
60742: PUSH
60743: LD_INT 1
60745: ST_TO_ADDR
// if p3 = 33 then
60746: LD_VAR 0 3
60750: PUSH
60751: LD_INT 33
60753: EQUAL
60754: IFFALSE 60764
// sRandom := true ;
60756: LD_ADDR_EXP 100
60760: PUSH
60761: LD_INT 1
60763: ST_TO_ADDR
// if p3 = 34 then
60764: LD_VAR 0 3
60768: PUSH
60769: LD_INT 34
60771: EQUAL
60772: IFFALSE 60782
// sShield := true ;
60774: LD_ADDR_EXP 101
60778: PUSH
60779: LD_INT 1
60781: ST_TO_ADDR
// if p3 = 35 then
60782: LD_VAR 0 3
60786: PUSH
60787: LD_INT 35
60789: EQUAL
60790: IFFALSE 60800
// sTime := true ;
60792: LD_ADDR_EXP 102
60796: PUSH
60797: LD_INT 1
60799: ST_TO_ADDR
// if p3 = 36 then
60800: LD_VAR 0 3
60804: PUSH
60805: LD_INT 36
60807: EQUAL
60808: IFFALSE 60818
// sTools := true ;
60810: LD_ADDR_EXP 103
60814: PUSH
60815: LD_INT 1
60817: ST_TO_ADDR
// if p3 = 101 then
60818: LD_VAR 0 3
60822: PUSH
60823: LD_INT 101
60825: EQUAL
60826: IFFALSE 60836
// sSold := true ;
60828: LD_ADDR_EXP 68
60832: PUSH
60833: LD_INT 1
60835: ST_TO_ADDR
// if p3 = 102 then
60836: LD_VAR 0 3
60840: PUSH
60841: LD_INT 102
60843: EQUAL
60844: IFFALSE 60854
// sDiff := true ;
60846: LD_ADDR_EXP 69
60850: PUSH
60851: LD_INT 1
60853: ST_TO_ADDR
// if p3 = 103 then
60854: LD_VAR 0 3
60858: PUSH
60859: LD_INT 103
60861: EQUAL
60862: IFFALSE 60872
// sFog := true ;
60864: LD_ADDR_EXP 72
60868: PUSH
60869: LD_INT 1
60871: ST_TO_ADDR
// if p3 = 104 then
60872: LD_VAR 0 3
60876: PUSH
60877: LD_INT 104
60879: EQUAL
60880: IFFALSE 60890
// sReset := true ;
60882: LD_ADDR_EXP 73
60886: PUSH
60887: LD_INT 1
60889: ST_TO_ADDR
// if p3 = 105 then
60890: LD_VAR 0 3
60894: PUSH
60895: LD_INT 105
60897: EQUAL
60898: IFFALSE 60908
// sSun := true ;
60900: LD_ADDR_EXP 74
60904: PUSH
60905: LD_INT 1
60907: ST_TO_ADDR
// if p3 = 106 then
60908: LD_VAR 0 3
60912: PUSH
60913: LD_INT 106
60915: EQUAL
60916: IFFALSE 60926
// sTiger := true ;
60918: LD_ADDR_EXP 70
60922: PUSH
60923: LD_INT 1
60925: ST_TO_ADDR
// if p3 = 107 then
60926: LD_VAR 0 3
60930: PUSH
60931: LD_INT 107
60933: EQUAL
60934: IFFALSE 60944
// sBomb := true ;
60936: LD_ADDR_EXP 71
60940: PUSH
60941: LD_INT 1
60943: ST_TO_ADDR
// if p3 = 108 then
60944: LD_VAR 0 3
60948: PUSH
60949: LD_INT 108
60951: EQUAL
60952: IFFALSE 60962
// sWound := true ;
60954: LD_ADDR_EXP 79
60958: PUSH
60959: LD_INT 1
60961: ST_TO_ADDR
// if p3 = 109 then
60962: LD_VAR 0 3
60966: PUSH
60967: LD_INT 109
60969: EQUAL
60970: IFFALSE 60980
// sBetray := true ;
60972: LD_ADDR_EXP 83
60976: PUSH
60977: LD_INT 1
60979: ST_TO_ADDR
// if p3 = 110 then
60980: LD_VAR 0 3
60984: PUSH
60985: LD_INT 110
60987: EQUAL
60988: IFFALSE 60998
// sContamin := true ;
60990: LD_ADDR_EXP 84
60994: PUSH
60995: LD_INT 1
60997: ST_TO_ADDR
// if p3 = 111 then
60998: LD_VAR 0 3
61002: PUSH
61003: LD_INT 111
61005: EQUAL
61006: IFFALSE 61016
// sOil := true ;
61008: LD_ADDR_EXP 86
61012: PUSH
61013: LD_INT 1
61015: ST_TO_ADDR
// if p3 = 112 then
61016: LD_VAR 0 3
61020: PUSH
61021: LD_INT 112
61023: EQUAL
61024: IFFALSE 61034
// sStu := true ;
61026: LD_ADDR_EXP 90
61030: PUSH
61031: LD_INT 1
61033: ST_TO_ADDR
// if p3 = 113 then
61034: LD_VAR 0 3
61038: PUSH
61039: LD_INT 113
61041: EQUAL
61042: IFFALSE 61052
// sBazooka := true ;
61044: LD_ADDR_EXP 93
61048: PUSH
61049: LD_INT 1
61051: ST_TO_ADDR
// if p3 = 114 then
61052: LD_VAR 0 3
61056: PUSH
61057: LD_INT 114
61059: EQUAL
61060: IFFALSE 61070
// sMortar := true ;
61062: LD_ADDR_EXP 94
61066: PUSH
61067: LD_INT 1
61069: ST_TO_ADDR
// if p3 = 115 then
61070: LD_VAR 0 3
61074: PUSH
61075: LD_INT 115
61077: EQUAL
61078: IFFALSE 61088
// sRanger := true ;
61080: LD_ADDR_EXP 104
61084: PUSH
61085: LD_INT 1
61087: ST_TO_ADDR
// if p3 = 116 then
61088: LD_VAR 0 3
61092: PUSH
61093: LD_INT 116
61095: EQUAL
61096: IFFALSE 61106
// sComputer := true ;
61098: LD_ADDR_EXP 105
61102: PUSH
61103: LD_INT 1
61105: ST_TO_ADDR
// if p3 = 117 then
61106: LD_VAR 0 3
61110: PUSH
61111: LD_INT 117
61113: EQUAL
61114: IFFALSE 61124
// s30 := true ;
61116: LD_ADDR_EXP 106
61120: PUSH
61121: LD_INT 1
61123: ST_TO_ADDR
// if p3 = 118 then
61124: LD_VAR 0 3
61128: PUSH
61129: LD_INT 118
61131: EQUAL
61132: IFFALSE 61142
// s60 := true ;
61134: LD_ADDR_EXP 107
61138: PUSH
61139: LD_INT 1
61141: ST_TO_ADDR
// end ; if p2 = hack_mode then
61142: LD_VAR 0 2
61146: PUSH
61147: LD_INT 101
61149: EQUAL
61150: IFFALSE 61278
// begin case p3 of 1 :
61152: LD_VAR 0 3
61156: PUSH
61157: LD_INT 1
61159: DOUBLE
61160: EQUAL
61161: IFTRUE 61165
61163: GO 61172
61165: POP
// hHackUnlimitedResources ; 2 :
61166: CALL 73425 0 0
61170: GO 61278
61172: LD_INT 2
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61180
61178: GO 61187
61180: POP
// hHackSetLevel10 ; 3 :
61181: CALL 73558 0 0
61185: GO 61278
61187: LD_INT 3
61189: DOUBLE
61190: EQUAL
61191: IFTRUE 61195
61193: GO 61202
61195: POP
// hHackSetLevel10YourUnits ; 4 :
61196: CALL 73643 0 0
61200: GO 61278
61202: LD_INT 4
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61210
61208: GO 61217
61210: POP
// hHackInvincible ; 5 :
61211: CALL 74091 0 0
61215: GO 61278
61217: LD_INT 5
61219: DOUBLE
61220: EQUAL
61221: IFTRUE 61225
61223: GO 61232
61225: POP
// hHackInvisible ; 6 :
61226: CALL 74202 0 0
61230: GO 61278
61232: LD_INT 6
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61240
61238: GO 61247
61240: POP
// hHackChangeYourSide ; 7 :
61241: CALL 74259 0 0
61245: GO 61278
61247: LD_INT 7
61249: DOUBLE
61250: EQUAL
61251: IFTRUE 61255
61253: GO 61262
61255: POP
// hHackChangeUnitSide ; 8 :
61256: CALL 74301 0 0
61260: GO 61278
61262: LD_INT 8
61264: DOUBLE
61265: EQUAL
61266: IFTRUE 61270
61268: GO 61277
61270: POP
// hHackFog ; end ;
61271: CALL 74402 0 0
61275: GO 61278
61277: POP
// end ; if p2 = game_save_mode then
61278: LD_VAR 0 2
61282: PUSH
61283: LD_INT 102
61285: EQUAL
61286: IFFALSE 61341
// begin if p3 = 1 then
61288: LD_VAR 0 3
61292: PUSH
61293: LD_INT 1
61295: EQUAL
61296: IFFALSE 61308
// globalGameSaveCounter := p4 ;
61298: LD_ADDR_EXP 50
61302: PUSH
61303: LD_VAR 0 4
61307: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
61308: LD_VAR 0 3
61312: PUSH
61313: LD_INT 2
61315: EQUAL
61316: PUSH
61317: LD_EXP 50
61321: AND
61322: IFFALSE 61341
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61324: LD_STRING setGameSaveCounter(
61326: PUSH
61327: LD_EXP 50
61331: STR
61332: PUSH
61333: LD_STRING )
61335: STR
61336: PPUSH
61337: CALL_OW 559
// end ; end ;
61341: LD_VAR 0 7
61345: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
61346: LD_INT 0
61348: PPUSH
// streamModeActive := false ;
61349: LD_ADDR_EXP 51
61353: PUSH
61354: LD_INT 0
61356: ST_TO_ADDR
// normalCounter := 36 ;
61357: LD_ADDR_EXP 52
61361: PUSH
61362: LD_INT 36
61364: ST_TO_ADDR
// hardcoreCounter := 18 ;
61365: LD_ADDR_EXP 53
61369: PUSH
61370: LD_INT 18
61372: ST_TO_ADDR
// sRocket := false ;
61373: LD_ADDR_EXP 56
61377: PUSH
61378: LD_INT 0
61380: ST_TO_ADDR
// sSpeed := false ;
61381: LD_ADDR_EXP 55
61385: PUSH
61386: LD_INT 0
61388: ST_TO_ADDR
// sEngine := false ;
61389: LD_ADDR_EXP 57
61393: PUSH
61394: LD_INT 0
61396: ST_TO_ADDR
// sSpec := false ;
61397: LD_ADDR_EXP 54
61401: PUSH
61402: LD_INT 0
61404: ST_TO_ADDR
// sLevel := false ;
61405: LD_ADDR_EXP 58
61409: PUSH
61410: LD_INT 0
61412: ST_TO_ADDR
// sArmoury := false ;
61413: LD_ADDR_EXP 59
61417: PUSH
61418: LD_INT 0
61420: ST_TO_ADDR
// sRadar := false ;
61421: LD_ADDR_EXP 60
61425: PUSH
61426: LD_INT 0
61428: ST_TO_ADDR
// sBunker := false ;
61429: LD_ADDR_EXP 61
61433: PUSH
61434: LD_INT 0
61436: ST_TO_ADDR
// sHack := false ;
61437: LD_ADDR_EXP 62
61441: PUSH
61442: LD_INT 0
61444: ST_TO_ADDR
// sFire := false ;
61445: LD_ADDR_EXP 63
61449: PUSH
61450: LD_INT 0
61452: ST_TO_ADDR
// sRefresh := false ;
61453: LD_ADDR_EXP 64
61457: PUSH
61458: LD_INT 0
61460: ST_TO_ADDR
// sExp := false ;
61461: LD_ADDR_EXP 65
61465: PUSH
61466: LD_INT 0
61468: ST_TO_ADDR
// sDepot := false ;
61469: LD_ADDR_EXP 66
61473: PUSH
61474: LD_INT 0
61476: ST_TO_ADDR
// sFlag := false ;
61477: LD_ADDR_EXP 67
61481: PUSH
61482: LD_INT 0
61484: ST_TO_ADDR
// sKamikadze := false ;
61485: LD_ADDR_EXP 75
61489: PUSH
61490: LD_INT 0
61492: ST_TO_ADDR
// sTroll := false ;
61493: LD_ADDR_EXP 76
61497: PUSH
61498: LD_INT 0
61500: ST_TO_ADDR
// sSlow := false ;
61501: LD_ADDR_EXP 77
61505: PUSH
61506: LD_INT 0
61508: ST_TO_ADDR
// sLack := false ;
61509: LD_ADDR_EXP 78
61513: PUSH
61514: LD_INT 0
61516: ST_TO_ADDR
// sTank := false ;
61517: LD_ADDR_EXP 80
61521: PUSH
61522: LD_INT 0
61524: ST_TO_ADDR
// sRemote := false ;
61525: LD_ADDR_EXP 81
61529: PUSH
61530: LD_INT 0
61532: ST_TO_ADDR
// sPowell := false ;
61533: LD_ADDR_EXP 82
61537: PUSH
61538: LD_INT 0
61540: ST_TO_ADDR
// sTeleport := false ;
61541: LD_ADDR_EXP 85
61545: PUSH
61546: LD_INT 0
61548: ST_TO_ADDR
// sOilTower := false ;
61549: LD_ADDR_EXP 87
61553: PUSH
61554: LD_INT 0
61556: ST_TO_ADDR
// sShovel := false ;
61557: LD_ADDR_EXP 88
61561: PUSH
61562: LD_INT 0
61564: ST_TO_ADDR
// sSheik := false ;
61565: LD_ADDR_EXP 89
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
// sEarthquake := false ;
61573: LD_ADDR_EXP 91
61577: PUSH
61578: LD_INT 0
61580: ST_TO_ADDR
// sAI := false ;
61581: LD_ADDR_EXP 92
61585: PUSH
61586: LD_INT 0
61588: ST_TO_ADDR
// sCargo := false ;
61589: LD_ADDR_EXP 95
61593: PUSH
61594: LD_INT 0
61596: ST_TO_ADDR
// sDLaser := false ;
61597: LD_ADDR_EXP 96
61601: PUSH
61602: LD_INT 0
61604: ST_TO_ADDR
// sExchange := false ;
61605: LD_ADDR_EXP 97
61609: PUSH
61610: LD_INT 0
61612: ST_TO_ADDR
// sFac := false ;
61613: LD_ADDR_EXP 98
61617: PUSH
61618: LD_INT 0
61620: ST_TO_ADDR
// sPower := false ;
61621: LD_ADDR_EXP 99
61625: PUSH
61626: LD_INT 0
61628: ST_TO_ADDR
// sRandom := false ;
61629: LD_ADDR_EXP 100
61633: PUSH
61634: LD_INT 0
61636: ST_TO_ADDR
// sShield := false ;
61637: LD_ADDR_EXP 101
61641: PUSH
61642: LD_INT 0
61644: ST_TO_ADDR
// sTime := false ;
61645: LD_ADDR_EXP 102
61649: PUSH
61650: LD_INT 0
61652: ST_TO_ADDR
// sTools := false ;
61653: LD_ADDR_EXP 103
61657: PUSH
61658: LD_INT 0
61660: ST_TO_ADDR
// sSold := false ;
61661: LD_ADDR_EXP 68
61665: PUSH
61666: LD_INT 0
61668: ST_TO_ADDR
// sDiff := false ;
61669: LD_ADDR_EXP 69
61673: PUSH
61674: LD_INT 0
61676: ST_TO_ADDR
// sFog := false ;
61677: LD_ADDR_EXP 72
61681: PUSH
61682: LD_INT 0
61684: ST_TO_ADDR
// sReset := false ;
61685: LD_ADDR_EXP 73
61689: PUSH
61690: LD_INT 0
61692: ST_TO_ADDR
// sSun := false ;
61693: LD_ADDR_EXP 74
61697: PUSH
61698: LD_INT 0
61700: ST_TO_ADDR
// sTiger := false ;
61701: LD_ADDR_EXP 70
61705: PUSH
61706: LD_INT 0
61708: ST_TO_ADDR
// sBomb := false ;
61709: LD_ADDR_EXP 71
61713: PUSH
61714: LD_INT 0
61716: ST_TO_ADDR
// sWound := false ;
61717: LD_ADDR_EXP 79
61721: PUSH
61722: LD_INT 0
61724: ST_TO_ADDR
// sBetray := false ;
61725: LD_ADDR_EXP 83
61729: PUSH
61730: LD_INT 0
61732: ST_TO_ADDR
// sContamin := false ;
61733: LD_ADDR_EXP 84
61737: PUSH
61738: LD_INT 0
61740: ST_TO_ADDR
// sOil := false ;
61741: LD_ADDR_EXP 86
61745: PUSH
61746: LD_INT 0
61748: ST_TO_ADDR
// sStu := false ;
61749: LD_ADDR_EXP 90
61753: PUSH
61754: LD_INT 0
61756: ST_TO_ADDR
// sBazooka := false ;
61757: LD_ADDR_EXP 93
61761: PUSH
61762: LD_INT 0
61764: ST_TO_ADDR
// sMortar := false ;
61765: LD_ADDR_EXP 94
61769: PUSH
61770: LD_INT 0
61772: ST_TO_ADDR
// sRanger := false ;
61773: LD_ADDR_EXP 104
61777: PUSH
61778: LD_INT 0
61780: ST_TO_ADDR
// sComputer := false ;
61781: LD_ADDR_EXP 105
61785: PUSH
61786: LD_INT 0
61788: ST_TO_ADDR
// s30 := false ;
61789: LD_ADDR_EXP 106
61793: PUSH
61794: LD_INT 0
61796: ST_TO_ADDR
// s60 := false ;
61797: LD_ADDR_EXP 107
61801: PUSH
61802: LD_INT 0
61804: ST_TO_ADDR
// end ;
61805: LD_VAR 0 1
61809: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61810: LD_INT 0
61812: PPUSH
61813: PPUSH
61814: PPUSH
61815: PPUSH
61816: PPUSH
61817: PPUSH
61818: PPUSH
// result := [ ] ;
61819: LD_ADDR_VAR 0 2
61823: PUSH
61824: EMPTY
61825: ST_TO_ADDR
// if campaign_id = 1 then
61826: LD_OWVAR 69
61830: PUSH
61831: LD_INT 1
61833: EQUAL
61834: IFFALSE 65000
// begin case mission_number of 1 :
61836: LD_OWVAR 70
61840: PUSH
61841: LD_INT 1
61843: DOUBLE
61844: EQUAL
61845: IFTRUE 61849
61847: GO 61925
61849: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61850: LD_ADDR_VAR 0 2
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: LD_INT 11
61863: PUSH
61864: LD_INT 12
61866: PUSH
61867: LD_INT 15
61869: PUSH
61870: LD_INT 16
61872: PUSH
61873: LD_INT 22
61875: PUSH
61876: LD_INT 23
61878: PUSH
61879: LD_INT 26
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 101
61895: PUSH
61896: LD_INT 102
61898: PUSH
61899: LD_INT 106
61901: PUSH
61902: LD_INT 116
61904: PUSH
61905: LD_INT 117
61907: PUSH
61908: LD_INT 118
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: ST_TO_ADDR
61923: GO 64998
61925: LD_INT 2
61927: DOUBLE
61928: EQUAL
61929: IFTRUE 61933
61931: GO 62017
61933: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61934: LD_ADDR_VAR 0 2
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: LD_INT 4
61944: PUSH
61945: LD_INT 11
61947: PUSH
61948: LD_INT 12
61950: PUSH
61951: LD_INT 15
61953: PUSH
61954: LD_INT 16
61956: PUSH
61957: LD_INT 22
61959: PUSH
61960: LD_INT 23
61962: PUSH
61963: LD_INT 26
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 101
61979: PUSH
61980: LD_INT 102
61982: PUSH
61983: LD_INT 105
61985: PUSH
61986: LD_INT 106
61988: PUSH
61989: LD_INT 108
61991: PUSH
61992: LD_INT 116
61994: PUSH
61995: LD_INT 117
61997: PUSH
61998: LD_INT 118
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: ST_TO_ADDR
62015: GO 64998
62017: LD_INT 3
62019: DOUBLE
62020: EQUAL
62021: IFTRUE 62025
62023: GO 62113
62025: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
62026: LD_ADDR_VAR 0 2
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: LD_INT 4
62036: PUSH
62037: LD_INT 5
62039: PUSH
62040: LD_INT 11
62042: PUSH
62043: LD_INT 12
62045: PUSH
62046: LD_INT 15
62048: PUSH
62049: LD_INT 16
62051: PUSH
62052: LD_INT 22
62054: PUSH
62055: LD_INT 26
62057: PUSH
62058: LD_INT 36
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 101
62075: PUSH
62076: LD_INT 102
62078: PUSH
62079: LD_INT 105
62081: PUSH
62082: LD_INT 106
62084: PUSH
62085: LD_INT 108
62087: PUSH
62088: LD_INT 116
62090: PUSH
62091: LD_INT 117
62093: PUSH
62094: LD_INT 118
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: ST_TO_ADDR
62111: GO 64998
62113: LD_INT 4
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62121
62119: GO 62217
62121: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
62122: LD_ADDR_VAR 0 2
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: LD_INT 5
62135: PUSH
62136: LD_INT 8
62138: PUSH
62139: LD_INT 11
62141: PUSH
62142: LD_INT 12
62144: PUSH
62145: LD_INT 15
62147: PUSH
62148: LD_INT 16
62150: PUSH
62151: LD_INT 22
62153: PUSH
62154: LD_INT 23
62156: PUSH
62157: LD_INT 26
62159: PUSH
62160: LD_INT 36
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 101
62179: PUSH
62180: LD_INT 102
62182: PUSH
62183: LD_INT 105
62185: PUSH
62186: LD_INT 106
62188: PUSH
62189: LD_INT 108
62191: PUSH
62192: LD_INT 116
62194: PUSH
62195: LD_INT 117
62197: PUSH
62198: LD_INT 118
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: ST_TO_ADDR
62215: GO 64998
62217: LD_INT 5
62219: DOUBLE
62220: EQUAL
62221: IFTRUE 62225
62223: GO 62337
62225: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62226: LD_ADDR_VAR 0 2
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: LD_INT 5
62239: PUSH
62240: LD_INT 6
62242: PUSH
62243: LD_INT 8
62245: PUSH
62246: LD_INT 11
62248: PUSH
62249: LD_INT 12
62251: PUSH
62252: LD_INT 15
62254: PUSH
62255: LD_INT 16
62257: PUSH
62258: LD_INT 22
62260: PUSH
62261: LD_INT 23
62263: PUSH
62264: LD_INT 25
62266: PUSH
62267: LD_INT 26
62269: PUSH
62270: LD_INT 36
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 101
62291: PUSH
62292: LD_INT 102
62294: PUSH
62295: LD_INT 105
62297: PUSH
62298: LD_INT 106
62300: PUSH
62301: LD_INT 108
62303: PUSH
62304: LD_INT 109
62306: PUSH
62307: LD_INT 112
62309: PUSH
62310: LD_INT 116
62312: PUSH
62313: LD_INT 117
62315: PUSH
62316: LD_INT 118
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: ST_TO_ADDR
62335: GO 64998
62337: LD_INT 6
62339: DOUBLE
62340: EQUAL
62341: IFTRUE 62345
62343: GO 62477
62345: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
62346: LD_ADDR_VAR 0 2
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: LD_INT 6
62362: PUSH
62363: LD_INT 8
62365: PUSH
62366: LD_INT 11
62368: PUSH
62369: LD_INT 12
62371: PUSH
62372: LD_INT 15
62374: PUSH
62375: LD_INT 16
62377: PUSH
62378: LD_INT 20
62380: PUSH
62381: LD_INT 21
62383: PUSH
62384: LD_INT 22
62386: PUSH
62387: LD_INT 23
62389: PUSH
62390: LD_INT 25
62392: PUSH
62393: LD_INT 26
62395: PUSH
62396: LD_INT 30
62398: PUSH
62399: LD_INT 31
62401: PUSH
62402: LD_INT 32
62404: PUSH
62405: LD_INT 36
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 101
62431: PUSH
62432: LD_INT 102
62434: PUSH
62435: LD_INT 105
62437: PUSH
62438: LD_INT 106
62440: PUSH
62441: LD_INT 108
62443: PUSH
62444: LD_INT 109
62446: PUSH
62447: LD_INT 112
62449: PUSH
62450: LD_INT 116
62452: PUSH
62453: LD_INT 117
62455: PUSH
62456: LD_INT 118
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: ST_TO_ADDR
62475: GO 64998
62477: LD_INT 7
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62485
62483: GO 62597
62485: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
62486: LD_ADDR_VAR 0 2
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: LD_INT 7
62502: PUSH
62503: LD_INT 11
62505: PUSH
62506: LD_INT 12
62508: PUSH
62509: LD_INT 15
62511: PUSH
62512: LD_INT 16
62514: PUSH
62515: LD_INT 20
62517: PUSH
62518: LD_INT 21
62520: PUSH
62521: LD_INT 22
62523: PUSH
62524: LD_INT 23
62526: PUSH
62527: LD_INT 25
62529: PUSH
62530: LD_INT 26
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 101
62551: PUSH
62552: LD_INT 102
62554: PUSH
62555: LD_INT 103
62557: PUSH
62558: LD_INT 105
62560: PUSH
62561: LD_INT 106
62563: PUSH
62564: LD_INT 108
62566: PUSH
62567: LD_INT 112
62569: PUSH
62570: LD_INT 116
62572: PUSH
62573: LD_INT 117
62575: PUSH
62576: LD_INT 118
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: ST_TO_ADDR
62595: GO 64998
62597: LD_INT 8
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62605
62603: GO 62745
62605: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
62606: LD_ADDR_VAR 0 2
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: LD_INT 5
62619: PUSH
62620: LD_INT 6
62622: PUSH
62623: LD_INT 7
62625: PUSH
62626: LD_INT 8
62628: PUSH
62629: LD_INT 11
62631: PUSH
62632: LD_INT 12
62634: PUSH
62635: LD_INT 15
62637: PUSH
62638: LD_INT 16
62640: PUSH
62641: LD_INT 20
62643: PUSH
62644: LD_INT 21
62646: PUSH
62647: LD_INT 22
62649: PUSH
62650: LD_INT 23
62652: PUSH
62653: LD_INT 25
62655: PUSH
62656: LD_INT 26
62658: PUSH
62659: LD_INT 30
62661: PUSH
62662: LD_INT 31
62664: PUSH
62665: LD_INT 32
62667: PUSH
62668: LD_INT 36
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 101
62695: PUSH
62696: LD_INT 102
62698: PUSH
62699: LD_INT 103
62701: PUSH
62702: LD_INT 105
62704: PUSH
62705: LD_INT 106
62707: PUSH
62708: LD_INT 108
62710: PUSH
62711: LD_INT 109
62713: PUSH
62714: LD_INT 112
62716: PUSH
62717: LD_INT 116
62719: PUSH
62720: LD_INT 117
62722: PUSH
62723: LD_INT 118
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: ST_TO_ADDR
62743: GO 64998
62745: LD_INT 9
62747: DOUBLE
62748: EQUAL
62749: IFTRUE 62753
62751: GO 62901
62753: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62754: LD_ADDR_VAR 0 2
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: LD_INT 4
62764: PUSH
62765: LD_INT 5
62767: PUSH
62768: LD_INT 6
62770: PUSH
62771: LD_INT 7
62773: PUSH
62774: LD_INT 8
62776: PUSH
62777: LD_INT 11
62779: PUSH
62780: LD_INT 12
62782: PUSH
62783: LD_INT 15
62785: PUSH
62786: LD_INT 16
62788: PUSH
62789: LD_INT 20
62791: PUSH
62792: LD_INT 21
62794: PUSH
62795: LD_INT 22
62797: PUSH
62798: LD_INT 23
62800: PUSH
62801: LD_INT 25
62803: PUSH
62804: LD_INT 26
62806: PUSH
62807: LD_INT 28
62809: PUSH
62810: LD_INT 30
62812: PUSH
62813: LD_INT 31
62815: PUSH
62816: LD_INT 32
62818: PUSH
62819: LD_INT 36
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 101
62847: PUSH
62848: LD_INT 102
62850: PUSH
62851: LD_INT 103
62853: PUSH
62854: LD_INT 105
62856: PUSH
62857: LD_INT 106
62859: PUSH
62860: LD_INT 108
62862: PUSH
62863: LD_INT 109
62865: PUSH
62866: LD_INT 112
62868: PUSH
62869: LD_INT 114
62871: PUSH
62872: LD_INT 116
62874: PUSH
62875: LD_INT 117
62877: PUSH
62878: LD_INT 118
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: ST_TO_ADDR
62899: GO 64998
62901: LD_INT 10
62903: DOUBLE
62904: EQUAL
62905: IFTRUE 62909
62907: GO 63105
62909: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62910: LD_ADDR_VAR 0 2
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: LD_INT 5
62923: PUSH
62924: LD_INT 6
62926: PUSH
62927: LD_INT 7
62929: PUSH
62930: LD_INT 8
62932: PUSH
62933: LD_INT 9
62935: PUSH
62936: LD_INT 10
62938: PUSH
62939: LD_INT 11
62941: PUSH
62942: LD_INT 12
62944: PUSH
62945: LD_INT 13
62947: PUSH
62948: LD_INT 14
62950: PUSH
62951: LD_INT 15
62953: PUSH
62954: LD_INT 16
62956: PUSH
62957: LD_INT 17
62959: PUSH
62960: LD_INT 18
62962: PUSH
62963: LD_INT 19
62965: PUSH
62966: LD_INT 20
62968: PUSH
62969: LD_INT 21
62971: PUSH
62972: LD_INT 22
62974: PUSH
62975: LD_INT 23
62977: PUSH
62978: LD_INT 24
62980: PUSH
62981: LD_INT 25
62983: PUSH
62984: LD_INT 26
62986: PUSH
62987: LD_INT 28
62989: PUSH
62990: LD_INT 30
62992: PUSH
62993: LD_INT 31
62995: PUSH
62996: LD_INT 32
62998: PUSH
62999: LD_INT 36
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 101
63035: PUSH
63036: LD_INT 102
63038: PUSH
63039: LD_INT 103
63041: PUSH
63042: LD_INT 104
63044: PUSH
63045: LD_INT 105
63047: PUSH
63048: LD_INT 106
63050: PUSH
63051: LD_INT 107
63053: PUSH
63054: LD_INT 108
63056: PUSH
63057: LD_INT 109
63059: PUSH
63060: LD_INT 110
63062: PUSH
63063: LD_INT 111
63065: PUSH
63066: LD_INT 112
63068: PUSH
63069: LD_INT 114
63071: PUSH
63072: LD_INT 116
63074: PUSH
63075: LD_INT 117
63077: PUSH
63078: LD_INT 118
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: ST_TO_ADDR
63103: GO 64998
63105: LD_INT 11
63107: DOUBLE
63108: EQUAL
63109: IFTRUE 63113
63111: GO 63317
63113: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
63114: LD_ADDR_VAR 0 2
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: LD_INT 5
63130: PUSH
63131: LD_INT 6
63133: PUSH
63134: LD_INT 7
63136: PUSH
63137: LD_INT 8
63139: PUSH
63140: LD_INT 9
63142: PUSH
63143: LD_INT 10
63145: PUSH
63146: LD_INT 11
63148: PUSH
63149: LD_INT 12
63151: PUSH
63152: LD_INT 13
63154: PUSH
63155: LD_INT 14
63157: PUSH
63158: LD_INT 15
63160: PUSH
63161: LD_INT 16
63163: PUSH
63164: LD_INT 17
63166: PUSH
63167: LD_INT 18
63169: PUSH
63170: LD_INT 19
63172: PUSH
63173: LD_INT 20
63175: PUSH
63176: LD_INT 21
63178: PUSH
63179: LD_INT 22
63181: PUSH
63182: LD_INT 23
63184: PUSH
63185: LD_INT 24
63187: PUSH
63188: LD_INT 25
63190: PUSH
63191: LD_INT 26
63193: PUSH
63194: LD_INT 28
63196: PUSH
63197: LD_INT 30
63199: PUSH
63200: LD_INT 31
63202: PUSH
63203: LD_INT 32
63205: PUSH
63206: LD_INT 34
63208: PUSH
63209: LD_INT 36
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 101
63247: PUSH
63248: LD_INT 102
63250: PUSH
63251: LD_INT 103
63253: PUSH
63254: LD_INT 104
63256: PUSH
63257: LD_INT 105
63259: PUSH
63260: LD_INT 106
63262: PUSH
63263: LD_INT 107
63265: PUSH
63266: LD_INT 108
63268: PUSH
63269: LD_INT 109
63271: PUSH
63272: LD_INT 110
63274: PUSH
63275: LD_INT 111
63277: PUSH
63278: LD_INT 112
63280: PUSH
63281: LD_INT 114
63283: PUSH
63284: LD_INT 116
63286: PUSH
63287: LD_INT 117
63289: PUSH
63290: LD_INT 118
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: ST_TO_ADDR
63315: GO 64998
63317: LD_INT 12
63319: DOUBLE
63320: EQUAL
63321: IFTRUE 63325
63323: GO 63545
63325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
63326: LD_ADDR_VAR 0 2
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: LD_INT 4
63342: PUSH
63343: LD_INT 5
63345: PUSH
63346: LD_INT 6
63348: PUSH
63349: LD_INT 7
63351: PUSH
63352: LD_INT 8
63354: PUSH
63355: LD_INT 9
63357: PUSH
63358: LD_INT 10
63360: PUSH
63361: LD_INT 11
63363: PUSH
63364: LD_INT 12
63366: PUSH
63367: LD_INT 13
63369: PUSH
63370: LD_INT 14
63372: PUSH
63373: LD_INT 15
63375: PUSH
63376: LD_INT 16
63378: PUSH
63379: LD_INT 17
63381: PUSH
63382: LD_INT 18
63384: PUSH
63385: LD_INT 19
63387: PUSH
63388: LD_INT 20
63390: PUSH
63391: LD_INT 21
63393: PUSH
63394: LD_INT 22
63396: PUSH
63397: LD_INT 23
63399: PUSH
63400: LD_INT 24
63402: PUSH
63403: LD_INT 25
63405: PUSH
63406: LD_INT 26
63408: PUSH
63409: LD_INT 27
63411: PUSH
63412: LD_INT 28
63414: PUSH
63415: LD_INT 30
63417: PUSH
63418: LD_INT 31
63420: PUSH
63421: LD_INT 32
63423: PUSH
63424: LD_INT 33
63426: PUSH
63427: LD_INT 34
63429: PUSH
63430: LD_INT 36
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 101
63471: PUSH
63472: LD_INT 102
63474: PUSH
63475: LD_INT 103
63477: PUSH
63478: LD_INT 104
63480: PUSH
63481: LD_INT 105
63483: PUSH
63484: LD_INT 106
63486: PUSH
63487: LD_INT 107
63489: PUSH
63490: LD_INT 108
63492: PUSH
63493: LD_INT 109
63495: PUSH
63496: LD_INT 110
63498: PUSH
63499: LD_INT 111
63501: PUSH
63502: LD_INT 112
63504: PUSH
63505: LD_INT 113
63507: PUSH
63508: LD_INT 114
63510: PUSH
63511: LD_INT 116
63513: PUSH
63514: LD_INT 117
63516: PUSH
63517: LD_INT 118
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: ST_TO_ADDR
63543: GO 64998
63545: LD_INT 13
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63553
63551: GO 63761
63553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
63554: LD_ADDR_VAR 0 2
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: LD_INT 4
63570: PUSH
63571: LD_INT 5
63573: PUSH
63574: LD_INT 8
63576: PUSH
63577: LD_INT 9
63579: PUSH
63580: LD_INT 10
63582: PUSH
63583: LD_INT 11
63585: PUSH
63586: LD_INT 12
63588: PUSH
63589: LD_INT 14
63591: PUSH
63592: LD_INT 15
63594: PUSH
63595: LD_INT 16
63597: PUSH
63598: LD_INT 17
63600: PUSH
63601: LD_INT 18
63603: PUSH
63604: LD_INT 19
63606: PUSH
63607: LD_INT 20
63609: PUSH
63610: LD_INT 21
63612: PUSH
63613: LD_INT 22
63615: PUSH
63616: LD_INT 23
63618: PUSH
63619: LD_INT 24
63621: PUSH
63622: LD_INT 25
63624: PUSH
63625: LD_INT 26
63627: PUSH
63628: LD_INT 27
63630: PUSH
63631: LD_INT 28
63633: PUSH
63634: LD_INT 30
63636: PUSH
63637: LD_INT 31
63639: PUSH
63640: LD_INT 32
63642: PUSH
63643: LD_INT 33
63645: PUSH
63646: LD_INT 34
63648: PUSH
63649: LD_INT 36
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 101
63687: PUSH
63688: LD_INT 102
63690: PUSH
63691: LD_INT 103
63693: PUSH
63694: LD_INT 104
63696: PUSH
63697: LD_INT 105
63699: PUSH
63700: LD_INT 106
63702: PUSH
63703: LD_INT 107
63705: PUSH
63706: LD_INT 108
63708: PUSH
63709: LD_INT 109
63711: PUSH
63712: LD_INT 110
63714: PUSH
63715: LD_INT 111
63717: PUSH
63718: LD_INT 112
63720: PUSH
63721: LD_INT 113
63723: PUSH
63724: LD_INT 114
63726: PUSH
63727: LD_INT 116
63729: PUSH
63730: LD_INT 117
63732: PUSH
63733: LD_INT 118
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: ST_TO_ADDR
63759: GO 64998
63761: LD_INT 14
63763: DOUBLE
63764: EQUAL
63765: IFTRUE 63769
63767: GO 63993
63769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63770: LD_ADDR_VAR 0 2
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: LD_INT 3
63783: PUSH
63784: LD_INT 4
63786: PUSH
63787: LD_INT 5
63789: PUSH
63790: LD_INT 6
63792: PUSH
63793: LD_INT 7
63795: PUSH
63796: LD_INT 8
63798: PUSH
63799: LD_INT 9
63801: PUSH
63802: LD_INT 10
63804: PUSH
63805: LD_INT 11
63807: PUSH
63808: LD_INT 12
63810: PUSH
63811: LD_INT 13
63813: PUSH
63814: LD_INT 14
63816: PUSH
63817: LD_INT 15
63819: PUSH
63820: LD_INT 16
63822: PUSH
63823: LD_INT 17
63825: PUSH
63826: LD_INT 18
63828: PUSH
63829: LD_INT 19
63831: PUSH
63832: LD_INT 20
63834: PUSH
63835: LD_INT 21
63837: PUSH
63838: LD_INT 22
63840: PUSH
63841: LD_INT 23
63843: PUSH
63844: LD_INT 24
63846: PUSH
63847: LD_INT 25
63849: PUSH
63850: LD_INT 26
63852: PUSH
63853: LD_INT 27
63855: PUSH
63856: LD_INT 28
63858: PUSH
63859: LD_INT 29
63861: PUSH
63862: LD_INT 30
63864: PUSH
63865: LD_INT 31
63867: PUSH
63868: LD_INT 32
63870: PUSH
63871: LD_INT 33
63873: PUSH
63874: LD_INT 34
63876: PUSH
63877: LD_INT 36
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 101
63919: PUSH
63920: LD_INT 102
63922: PUSH
63923: LD_INT 103
63925: PUSH
63926: LD_INT 104
63928: PUSH
63929: LD_INT 105
63931: PUSH
63932: LD_INT 106
63934: PUSH
63935: LD_INT 107
63937: PUSH
63938: LD_INT 108
63940: PUSH
63941: LD_INT 109
63943: PUSH
63944: LD_INT 110
63946: PUSH
63947: LD_INT 111
63949: PUSH
63950: LD_INT 112
63952: PUSH
63953: LD_INT 113
63955: PUSH
63956: LD_INT 114
63958: PUSH
63959: LD_INT 116
63961: PUSH
63962: LD_INT 117
63964: PUSH
63965: LD_INT 118
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: ST_TO_ADDR
63991: GO 64998
63993: LD_INT 15
63995: DOUBLE
63996: EQUAL
63997: IFTRUE 64001
63999: GO 64225
64001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64002: LD_ADDR_VAR 0 2
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: LD_INT 3
64015: PUSH
64016: LD_INT 4
64018: PUSH
64019: LD_INT 5
64021: PUSH
64022: LD_INT 6
64024: PUSH
64025: LD_INT 7
64027: PUSH
64028: LD_INT 8
64030: PUSH
64031: LD_INT 9
64033: PUSH
64034: LD_INT 10
64036: PUSH
64037: LD_INT 11
64039: PUSH
64040: LD_INT 12
64042: PUSH
64043: LD_INT 13
64045: PUSH
64046: LD_INT 14
64048: PUSH
64049: LD_INT 15
64051: PUSH
64052: LD_INT 16
64054: PUSH
64055: LD_INT 17
64057: PUSH
64058: LD_INT 18
64060: PUSH
64061: LD_INT 19
64063: PUSH
64064: LD_INT 20
64066: PUSH
64067: LD_INT 21
64069: PUSH
64070: LD_INT 22
64072: PUSH
64073: LD_INT 23
64075: PUSH
64076: LD_INT 24
64078: PUSH
64079: LD_INT 25
64081: PUSH
64082: LD_INT 26
64084: PUSH
64085: LD_INT 27
64087: PUSH
64088: LD_INT 28
64090: PUSH
64091: LD_INT 29
64093: PUSH
64094: LD_INT 30
64096: PUSH
64097: LD_INT 31
64099: PUSH
64100: LD_INT 32
64102: PUSH
64103: LD_INT 33
64105: PUSH
64106: LD_INT 34
64108: PUSH
64109: LD_INT 36
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 101
64151: PUSH
64152: LD_INT 102
64154: PUSH
64155: LD_INT 103
64157: PUSH
64158: LD_INT 104
64160: PUSH
64161: LD_INT 105
64163: PUSH
64164: LD_INT 106
64166: PUSH
64167: LD_INT 107
64169: PUSH
64170: LD_INT 108
64172: PUSH
64173: LD_INT 109
64175: PUSH
64176: LD_INT 110
64178: PUSH
64179: LD_INT 111
64181: PUSH
64182: LD_INT 112
64184: PUSH
64185: LD_INT 113
64187: PUSH
64188: LD_INT 114
64190: PUSH
64191: LD_INT 116
64193: PUSH
64194: LD_INT 117
64196: PUSH
64197: LD_INT 118
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: ST_TO_ADDR
64223: GO 64998
64225: LD_INT 16
64227: DOUBLE
64228: EQUAL
64229: IFTRUE 64233
64231: GO 64369
64233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64234: LD_ADDR_VAR 0 2
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 4
64244: PUSH
64245: LD_INT 5
64247: PUSH
64248: LD_INT 7
64250: PUSH
64251: LD_INT 11
64253: PUSH
64254: LD_INT 12
64256: PUSH
64257: LD_INT 15
64259: PUSH
64260: LD_INT 16
64262: PUSH
64263: LD_INT 20
64265: PUSH
64266: LD_INT 21
64268: PUSH
64269: LD_INT 22
64271: PUSH
64272: LD_INT 23
64274: PUSH
64275: LD_INT 25
64277: PUSH
64278: LD_INT 26
64280: PUSH
64281: LD_INT 30
64283: PUSH
64284: LD_INT 31
64286: PUSH
64287: LD_INT 32
64289: PUSH
64290: LD_INT 33
64292: PUSH
64293: LD_INT 34
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 101
64319: PUSH
64320: LD_INT 102
64322: PUSH
64323: LD_INT 103
64325: PUSH
64326: LD_INT 106
64328: PUSH
64329: LD_INT 108
64331: PUSH
64332: LD_INT 112
64334: PUSH
64335: LD_INT 113
64337: PUSH
64338: LD_INT 114
64340: PUSH
64341: LD_INT 116
64343: PUSH
64344: LD_INT 117
64346: PUSH
64347: LD_INT 118
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: ST_TO_ADDR
64367: GO 64998
64369: LD_INT 17
64371: DOUBLE
64372: EQUAL
64373: IFTRUE 64377
64375: GO 64601
64377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
64378: LD_ADDR_VAR 0 2
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: LD_INT 3
64391: PUSH
64392: LD_INT 4
64394: PUSH
64395: LD_INT 5
64397: PUSH
64398: LD_INT 6
64400: PUSH
64401: LD_INT 7
64403: PUSH
64404: LD_INT 8
64406: PUSH
64407: LD_INT 9
64409: PUSH
64410: LD_INT 10
64412: PUSH
64413: LD_INT 11
64415: PUSH
64416: LD_INT 12
64418: PUSH
64419: LD_INT 13
64421: PUSH
64422: LD_INT 14
64424: PUSH
64425: LD_INT 15
64427: PUSH
64428: LD_INT 16
64430: PUSH
64431: LD_INT 17
64433: PUSH
64434: LD_INT 18
64436: PUSH
64437: LD_INT 19
64439: PUSH
64440: LD_INT 20
64442: PUSH
64443: LD_INT 21
64445: PUSH
64446: LD_INT 22
64448: PUSH
64449: LD_INT 23
64451: PUSH
64452: LD_INT 24
64454: PUSH
64455: LD_INT 25
64457: PUSH
64458: LD_INT 26
64460: PUSH
64461: LD_INT 27
64463: PUSH
64464: LD_INT 28
64466: PUSH
64467: LD_INT 29
64469: PUSH
64470: LD_INT 30
64472: PUSH
64473: LD_INT 31
64475: PUSH
64476: LD_INT 32
64478: PUSH
64479: LD_INT 33
64481: PUSH
64482: LD_INT 34
64484: PUSH
64485: LD_INT 36
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 101
64527: PUSH
64528: LD_INT 102
64530: PUSH
64531: LD_INT 103
64533: PUSH
64534: LD_INT 104
64536: PUSH
64537: LD_INT 105
64539: PUSH
64540: LD_INT 106
64542: PUSH
64543: LD_INT 107
64545: PUSH
64546: LD_INT 108
64548: PUSH
64549: LD_INT 109
64551: PUSH
64552: LD_INT 110
64554: PUSH
64555: LD_INT 111
64557: PUSH
64558: LD_INT 112
64560: PUSH
64561: LD_INT 113
64563: PUSH
64564: LD_INT 114
64566: PUSH
64567: LD_INT 116
64569: PUSH
64570: LD_INT 117
64572: PUSH
64573: LD_INT 118
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: ST_TO_ADDR
64599: GO 64998
64601: LD_INT 18
64603: DOUBLE
64604: EQUAL
64605: IFTRUE 64609
64607: GO 64757
64609: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
64610: LD_ADDR_VAR 0 2
64614: PUSH
64615: LD_INT 2
64617: PUSH
64618: LD_INT 4
64620: PUSH
64621: LD_INT 5
64623: PUSH
64624: LD_INT 7
64626: PUSH
64627: LD_INT 11
64629: PUSH
64630: LD_INT 12
64632: PUSH
64633: LD_INT 15
64635: PUSH
64636: LD_INT 16
64638: PUSH
64639: LD_INT 20
64641: PUSH
64642: LD_INT 21
64644: PUSH
64645: LD_INT 22
64647: PUSH
64648: LD_INT 23
64650: PUSH
64651: LD_INT 25
64653: PUSH
64654: LD_INT 26
64656: PUSH
64657: LD_INT 30
64659: PUSH
64660: LD_INT 31
64662: PUSH
64663: LD_INT 32
64665: PUSH
64666: LD_INT 33
64668: PUSH
64669: LD_INT 34
64671: PUSH
64672: LD_INT 35
64674: PUSH
64675: LD_INT 36
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 101
64703: PUSH
64704: LD_INT 102
64706: PUSH
64707: LD_INT 103
64709: PUSH
64710: LD_INT 106
64712: PUSH
64713: LD_INT 108
64715: PUSH
64716: LD_INT 112
64718: PUSH
64719: LD_INT 113
64721: PUSH
64722: LD_INT 114
64724: PUSH
64725: LD_INT 115
64727: PUSH
64728: LD_INT 116
64730: PUSH
64731: LD_INT 117
64733: PUSH
64734: LD_INT 118
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: ST_TO_ADDR
64755: GO 64998
64757: LD_INT 19
64759: DOUBLE
64760: EQUAL
64761: IFTRUE 64765
64763: GO 64997
64765: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64766: LD_ADDR_VAR 0 2
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 3
64779: PUSH
64780: LD_INT 4
64782: PUSH
64783: LD_INT 5
64785: PUSH
64786: LD_INT 6
64788: PUSH
64789: LD_INT 7
64791: PUSH
64792: LD_INT 8
64794: PUSH
64795: LD_INT 9
64797: PUSH
64798: LD_INT 10
64800: PUSH
64801: LD_INT 11
64803: PUSH
64804: LD_INT 12
64806: PUSH
64807: LD_INT 13
64809: PUSH
64810: LD_INT 14
64812: PUSH
64813: LD_INT 15
64815: PUSH
64816: LD_INT 16
64818: PUSH
64819: LD_INT 17
64821: PUSH
64822: LD_INT 18
64824: PUSH
64825: LD_INT 19
64827: PUSH
64828: LD_INT 20
64830: PUSH
64831: LD_INT 21
64833: PUSH
64834: LD_INT 22
64836: PUSH
64837: LD_INT 23
64839: PUSH
64840: LD_INT 24
64842: PUSH
64843: LD_INT 25
64845: PUSH
64846: LD_INT 26
64848: PUSH
64849: LD_INT 27
64851: PUSH
64852: LD_INT 28
64854: PUSH
64855: LD_INT 29
64857: PUSH
64858: LD_INT 30
64860: PUSH
64861: LD_INT 31
64863: PUSH
64864: LD_INT 32
64866: PUSH
64867: LD_INT 33
64869: PUSH
64870: LD_INT 34
64872: PUSH
64873: LD_INT 35
64875: PUSH
64876: LD_INT 36
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 101
64919: PUSH
64920: LD_INT 102
64922: PUSH
64923: LD_INT 103
64925: PUSH
64926: LD_INT 104
64928: PUSH
64929: LD_INT 105
64931: PUSH
64932: LD_INT 106
64934: PUSH
64935: LD_INT 107
64937: PUSH
64938: LD_INT 108
64940: PUSH
64941: LD_INT 109
64943: PUSH
64944: LD_INT 110
64946: PUSH
64947: LD_INT 111
64949: PUSH
64950: LD_INT 112
64952: PUSH
64953: LD_INT 113
64955: PUSH
64956: LD_INT 114
64958: PUSH
64959: LD_INT 115
64961: PUSH
64962: LD_INT 116
64964: PUSH
64965: LD_INT 117
64967: PUSH
64968: LD_INT 118
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: ST_TO_ADDR
64995: GO 64998
64997: POP
// end else
64998: GO 65229
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65000: LD_ADDR_VAR 0 2
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: LD_INT 3
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: LD_INT 5
65019: PUSH
65020: LD_INT 6
65022: PUSH
65023: LD_INT 7
65025: PUSH
65026: LD_INT 8
65028: PUSH
65029: LD_INT 9
65031: PUSH
65032: LD_INT 10
65034: PUSH
65035: LD_INT 11
65037: PUSH
65038: LD_INT 12
65040: PUSH
65041: LD_INT 13
65043: PUSH
65044: LD_INT 14
65046: PUSH
65047: LD_INT 15
65049: PUSH
65050: LD_INT 16
65052: PUSH
65053: LD_INT 17
65055: PUSH
65056: LD_INT 18
65058: PUSH
65059: LD_INT 19
65061: PUSH
65062: LD_INT 20
65064: PUSH
65065: LD_INT 21
65067: PUSH
65068: LD_INT 22
65070: PUSH
65071: LD_INT 23
65073: PUSH
65074: LD_INT 24
65076: PUSH
65077: LD_INT 25
65079: PUSH
65080: LD_INT 26
65082: PUSH
65083: LD_INT 27
65085: PUSH
65086: LD_INT 28
65088: PUSH
65089: LD_INT 29
65091: PUSH
65092: LD_INT 30
65094: PUSH
65095: LD_INT 31
65097: PUSH
65098: LD_INT 32
65100: PUSH
65101: LD_INT 33
65103: PUSH
65104: LD_INT 34
65106: PUSH
65107: LD_INT 35
65109: PUSH
65110: LD_INT 36
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 101
65153: PUSH
65154: LD_INT 102
65156: PUSH
65157: LD_INT 103
65159: PUSH
65160: LD_INT 104
65162: PUSH
65163: LD_INT 105
65165: PUSH
65166: LD_INT 106
65168: PUSH
65169: LD_INT 107
65171: PUSH
65172: LD_INT 108
65174: PUSH
65175: LD_INT 109
65177: PUSH
65178: LD_INT 110
65180: PUSH
65181: LD_INT 111
65183: PUSH
65184: LD_INT 112
65186: PUSH
65187: LD_INT 113
65189: PUSH
65190: LD_INT 114
65192: PUSH
65193: LD_INT 115
65195: PUSH
65196: LD_INT 116
65198: PUSH
65199: LD_INT 117
65201: PUSH
65202: LD_INT 118
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: ST_TO_ADDR
// if result then
65229: LD_VAR 0 2
65233: IFFALSE 66019
// begin normal :=  ;
65235: LD_ADDR_VAR 0 5
65239: PUSH
65240: LD_STRING 
65242: ST_TO_ADDR
// hardcore :=  ;
65243: LD_ADDR_VAR 0 6
65247: PUSH
65248: LD_STRING 
65250: ST_TO_ADDR
// active :=  ;
65251: LD_ADDR_VAR 0 7
65255: PUSH
65256: LD_STRING 
65258: ST_TO_ADDR
// for i = 1 to normalCounter do
65259: LD_ADDR_VAR 0 8
65263: PUSH
65264: DOUBLE
65265: LD_INT 1
65267: DEC
65268: ST_TO_ADDR
65269: LD_EXP 52
65273: PUSH
65274: FOR_TO
65275: IFFALSE 65376
// begin tmp := 0 ;
65277: LD_ADDR_VAR 0 3
65281: PUSH
65282: LD_STRING 0
65284: ST_TO_ADDR
// if result [ 1 ] then
65285: LD_VAR 0 2
65289: PUSH
65290: LD_INT 1
65292: ARRAY
65293: IFFALSE 65358
// if result [ 1 ] [ 1 ] = i then
65295: LD_VAR 0 2
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_INT 1
65306: ARRAY
65307: PUSH
65308: LD_VAR 0 8
65312: EQUAL
65313: IFFALSE 65358
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
65315: LD_ADDR_VAR 0 2
65319: PUSH
65320: LD_VAR 0 2
65324: PPUSH
65325: LD_INT 1
65327: PPUSH
65328: LD_VAR 0 2
65332: PUSH
65333: LD_INT 1
65335: ARRAY
65336: PPUSH
65337: LD_INT 1
65339: PPUSH
65340: CALL_OW 3
65344: PPUSH
65345: CALL_OW 1
65349: ST_TO_ADDR
// tmp := 1 ;
65350: LD_ADDR_VAR 0 3
65354: PUSH
65355: LD_STRING 1
65357: ST_TO_ADDR
// end ; normal := normal & tmp ;
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: LD_VAR 0 5
65367: PUSH
65368: LD_VAR 0 3
65372: STR
65373: ST_TO_ADDR
// end ;
65374: GO 65274
65376: POP
65377: POP
// for i = 1 to hardcoreCounter do
65378: LD_ADDR_VAR 0 8
65382: PUSH
65383: DOUBLE
65384: LD_INT 1
65386: DEC
65387: ST_TO_ADDR
65388: LD_EXP 53
65392: PUSH
65393: FOR_TO
65394: IFFALSE 65499
// begin tmp := 0 ;
65396: LD_ADDR_VAR 0 3
65400: PUSH
65401: LD_STRING 0
65403: ST_TO_ADDR
// if result [ 2 ] then
65404: LD_VAR 0 2
65408: PUSH
65409: LD_INT 2
65411: ARRAY
65412: IFFALSE 65481
// if result [ 2 ] [ 1 ] = 100 + i then
65414: LD_VAR 0 2
65418: PUSH
65419: LD_INT 2
65421: ARRAY
65422: PUSH
65423: LD_INT 1
65425: ARRAY
65426: PUSH
65427: LD_INT 100
65429: PUSH
65430: LD_VAR 0 8
65434: PLUS
65435: EQUAL
65436: IFFALSE 65481
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
65438: LD_ADDR_VAR 0 2
65442: PUSH
65443: LD_VAR 0 2
65447: PPUSH
65448: LD_INT 2
65450: PPUSH
65451: LD_VAR 0 2
65455: PUSH
65456: LD_INT 2
65458: ARRAY
65459: PPUSH
65460: LD_INT 1
65462: PPUSH
65463: CALL_OW 3
65467: PPUSH
65468: CALL_OW 1
65472: ST_TO_ADDR
// tmp := 1 ;
65473: LD_ADDR_VAR 0 3
65477: PUSH
65478: LD_STRING 1
65480: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
65481: LD_ADDR_VAR 0 6
65485: PUSH
65486: LD_VAR 0 6
65490: PUSH
65491: LD_VAR 0 3
65495: STR
65496: ST_TO_ADDR
// end ;
65497: GO 65393
65499: POP
65500: POP
// if isGameLoad then
65501: LD_VAR 0 1
65505: IFFALSE 65980
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
65507: LD_ADDR_VAR 0 4
65511: PUSH
65512: LD_EXP 56
65516: PUSH
65517: LD_EXP 55
65521: PUSH
65522: LD_EXP 57
65526: PUSH
65527: LD_EXP 54
65531: PUSH
65532: LD_EXP 58
65536: PUSH
65537: LD_EXP 59
65541: PUSH
65542: LD_EXP 60
65546: PUSH
65547: LD_EXP 61
65551: PUSH
65552: LD_EXP 62
65556: PUSH
65557: LD_EXP 63
65561: PUSH
65562: LD_EXP 64
65566: PUSH
65567: LD_EXP 65
65571: PUSH
65572: LD_EXP 66
65576: PUSH
65577: LD_EXP 67
65581: PUSH
65582: LD_EXP 75
65586: PUSH
65587: LD_EXP 76
65591: PUSH
65592: LD_EXP 77
65596: PUSH
65597: LD_EXP 78
65601: PUSH
65602: LD_EXP 80
65606: PUSH
65607: LD_EXP 81
65611: PUSH
65612: LD_EXP 82
65616: PUSH
65617: LD_EXP 85
65621: PUSH
65622: LD_EXP 87
65626: PUSH
65627: LD_EXP 88
65631: PUSH
65632: LD_EXP 89
65636: PUSH
65637: LD_EXP 91
65641: PUSH
65642: LD_EXP 92
65646: PUSH
65647: LD_EXP 95
65651: PUSH
65652: LD_EXP 96
65656: PUSH
65657: LD_EXP 97
65661: PUSH
65662: LD_EXP 98
65666: PUSH
65667: LD_EXP 99
65671: PUSH
65672: LD_EXP 100
65676: PUSH
65677: LD_EXP 101
65681: PUSH
65682: LD_EXP 102
65686: PUSH
65687: LD_EXP 103
65691: PUSH
65692: LD_EXP 68
65696: PUSH
65697: LD_EXP 69
65701: PUSH
65702: LD_EXP 72
65706: PUSH
65707: LD_EXP 73
65711: PUSH
65712: LD_EXP 74
65716: PUSH
65717: LD_EXP 70
65721: PUSH
65722: LD_EXP 71
65726: PUSH
65727: LD_EXP 79
65731: PUSH
65732: LD_EXP 83
65736: PUSH
65737: LD_EXP 84
65741: PUSH
65742: LD_EXP 86
65746: PUSH
65747: LD_EXP 90
65751: PUSH
65752: LD_EXP 93
65756: PUSH
65757: LD_EXP 94
65761: PUSH
65762: LD_EXP 104
65766: PUSH
65767: LD_EXP 105
65771: PUSH
65772: LD_EXP 106
65776: PUSH
65777: LD_EXP 107
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: ST_TO_ADDR
// tmp :=  ;
65838: LD_ADDR_VAR 0 3
65842: PUSH
65843: LD_STRING 
65845: ST_TO_ADDR
// for i = 1 to normalCounter do
65846: LD_ADDR_VAR 0 8
65850: PUSH
65851: DOUBLE
65852: LD_INT 1
65854: DEC
65855: ST_TO_ADDR
65856: LD_EXP 52
65860: PUSH
65861: FOR_TO
65862: IFFALSE 65898
// begin if flags [ i ] then
65864: LD_VAR 0 4
65868: PUSH
65869: LD_VAR 0 8
65873: ARRAY
65874: IFFALSE 65896
// tmp := tmp & i & ; ;
65876: LD_ADDR_VAR 0 3
65880: PUSH
65881: LD_VAR 0 3
65885: PUSH
65886: LD_VAR 0 8
65890: STR
65891: PUSH
65892: LD_STRING ;
65894: STR
65895: ST_TO_ADDR
// end ;
65896: GO 65861
65898: POP
65899: POP
// for i = 1 to hardcoreCounter do
65900: LD_ADDR_VAR 0 8
65904: PUSH
65905: DOUBLE
65906: LD_INT 1
65908: DEC
65909: ST_TO_ADDR
65910: LD_EXP 53
65914: PUSH
65915: FOR_TO
65916: IFFALSE 65962
// begin if flags [ normalCounter + i ] then
65918: LD_VAR 0 4
65922: PUSH
65923: LD_EXP 52
65927: PUSH
65928: LD_VAR 0 8
65932: PLUS
65933: ARRAY
65934: IFFALSE 65960
// tmp := tmp & ( 100 + i ) & ; ;
65936: LD_ADDR_VAR 0 3
65940: PUSH
65941: LD_VAR 0 3
65945: PUSH
65946: LD_INT 100
65948: PUSH
65949: LD_VAR 0 8
65953: PLUS
65954: STR
65955: PUSH
65956: LD_STRING ;
65958: STR
65959: ST_TO_ADDR
// end ;
65960: GO 65915
65962: POP
65963: POP
// if tmp then
65964: LD_VAR 0 3
65968: IFFALSE 65980
// active := tmp ;
65970: LD_ADDR_VAR 0 7
65974: PUSH
65975: LD_VAR 0 3
65979: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65980: LD_STRING getStreamItemsFromMission("
65982: PUSH
65983: LD_VAR 0 5
65987: STR
65988: PUSH
65989: LD_STRING ","
65991: STR
65992: PUSH
65993: LD_VAR 0 6
65997: STR
65998: PUSH
65999: LD_STRING ","
66001: STR
66002: PUSH
66003: LD_VAR 0 7
66007: STR
66008: PUSH
66009: LD_STRING ")
66011: STR
66012: PPUSH
66013: CALL_OW 559
// end else
66017: GO 66026
// ToLua ( getStreamItemsFromMission("","","") ) ;
66019: LD_STRING getStreamItemsFromMission("","","")
66021: PPUSH
66022: CALL_OW 559
// end ;
66026: LD_VAR 0 2
66030: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66031: LD_EXP 51
66035: PUSH
66036: LD_EXP 56
66040: AND
66041: IFFALSE 66165
66043: GO 66045
66045: DISABLE
66046: LD_INT 0
66048: PPUSH
66049: PPUSH
// begin enable ;
66050: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66051: LD_ADDR_VAR 0 2
66055: PUSH
66056: LD_INT 22
66058: PUSH
66059: LD_OWVAR 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: LD_INT 34
66073: PUSH
66074: LD_INT 7
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 34
66083: PUSH
66084: LD_INT 45
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 34
66093: PUSH
66094: LD_INT 28
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 34
66103: PUSH
66104: LD_INT 47
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PPUSH
66122: CALL_OW 69
66126: ST_TO_ADDR
// if not tmp then
66127: LD_VAR 0 2
66131: NOT
66132: IFFALSE 66136
// exit ;
66134: GO 66165
// for i in tmp do
66136: LD_ADDR_VAR 0 1
66140: PUSH
66141: LD_VAR 0 2
66145: PUSH
66146: FOR_IN
66147: IFFALSE 66163
// begin SetLives ( i , 0 ) ;
66149: LD_VAR 0 1
66153: PPUSH
66154: LD_INT 0
66156: PPUSH
66157: CALL_OW 234
// end ;
66161: GO 66146
66163: POP
66164: POP
// end ;
66165: PPOPN 2
66167: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66168: LD_EXP 51
66172: PUSH
66173: LD_EXP 57
66177: AND
66178: IFFALSE 66262
66180: GO 66182
66182: DISABLE
66183: LD_INT 0
66185: PPUSH
66186: PPUSH
// begin enable ;
66187: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66188: LD_ADDR_VAR 0 2
66192: PUSH
66193: LD_INT 22
66195: PUSH
66196: LD_OWVAR 2
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 32
66207: PUSH
66208: LD_INT 3
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PPUSH
66219: CALL_OW 69
66223: ST_TO_ADDR
// if not tmp then
66224: LD_VAR 0 2
66228: NOT
66229: IFFALSE 66233
// exit ;
66231: GO 66262
// for i in tmp do
66233: LD_ADDR_VAR 0 1
66237: PUSH
66238: LD_VAR 0 2
66242: PUSH
66243: FOR_IN
66244: IFFALSE 66260
// begin SetLives ( i , 0 ) ;
66246: LD_VAR 0 1
66250: PPUSH
66251: LD_INT 0
66253: PPUSH
66254: CALL_OW 234
// end ;
66258: GO 66243
66260: POP
66261: POP
// end ;
66262: PPOPN 2
66264: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66265: LD_EXP 51
66269: PUSH
66270: LD_EXP 54
66274: AND
66275: IFFALSE 66368
66277: GO 66279
66279: DISABLE
66280: LD_INT 0
66282: PPUSH
// begin enable ;
66283: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66284: LD_ADDR_VAR 0 1
66288: PUSH
66289: LD_INT 22
66291: PUSH
66292: LD_OWVAR 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: LD_INT 25
66306: PUSH
66307: LD_INT 5
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 25
66316: PUSH
66317: LD_INT 9
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 25
66326: PUSH
66327: LD_INT 8
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PPUSH
66344: CALL_OW 69
66348: PUSH
66349: FOR_IN
66350: IFFALSE 66366
// begin SetClass ( i , 1 ) ;
66352: LD_VAR 0 1
66356: PPUSH
66357: LD_INT 1
66359: PPUSH
66360: CALL_OW 336
// end ;
66364: GO 66349
66366: POP
66367: POP
// end ;
66368: PPOPN 1
66370: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66371: LD_EXP 51
66375: PUSH
66376: LD_EXP 55
66380: AND
66381: PUSH
66382: LD_OWVAR 65
66386: PUSH
66387: LD_INT 7
66389: LESS
66390: AND
66391: IFFALSE 66405
66393: GO 66395
66395: DISABLE
// begin enable ;
66396: ENABLE
// game_speed := 7 ;
66397: LD_ADDR_OWVAR 65
66401: PUSH
66402: LD_INT 7
66404: ST_TO_ADDR
// end ;
66405: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66406: LD_EXP 51
66410: PUSH
66411: LD_EXP 58
66415: AND
66416: IFFALSE 66618
66418: GO 66420
66420: DISABLE
66421: LD_INT 0
66423: PPUSH
66424: PPUSH
66425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66426: LD_ADDR_VAR 0 3
66430: PUSH
66431: LD_INT 81
66433: PUSH
66434: LD_OWVAR 2
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 21
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PPUSH
66457: CALL_OW 69
66461: ST_TO_ADDR
// if not tmp then
66462: LD_VAR 0 3
66466: NOT
66467: IFFALSE 66471
// exit ;
66469: GO 66618
// if tmp > 5 then
66471: LD_VAR 0 3
66475: PUSH
66476: LD_INT 5
66478: GREATER
66479: IFFALSE 66491
// k := 5 else
66481: LD_ADDR_VAR 0 2
66485: PUSH
66486: LD_INT 5
66488: ST_TO_ADDR
66489: GO 66501
// k := tmp ;
66491: LD_ADDR_VAR 0 2
66495: PUSH
66496: LD_VAR 0 3
66500: ST_TO_ADDR
// for i := 1 to k do
66501: LD_ADDR_VAR 0 1
66505: PUSH
66506: DOUBLE
66507: LD_INT 1
66509: DEC
66510: ST_TO_ADDR
66511: LD_VAR 0 2
66515: PUSH
66516: FOR_TO
66517: IFFALSE 66616
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66519: LD_VAR 0 3
66523: PUSH
66524: LD_VAR 0 1
66528: ARRAY
66529: PPUSH
66530: LD_VAR 0 1
66534: PUSH
66535: LD_INT 4
66537: MOD
66538: PUSH
66539: LD_INT 1
66541: PLUS
66542: PPUSH
66543: CALL_OW 259
66547: PUSH
66548: LD_INT 10
66550: LESS
66551: IFFALSE 66614
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66553: LD_VAR 0 3
66557: PUSH
66558: LD_VAR 0 1
66562: ARRAY
66563: PPUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 4
66571: MOD
66572: PUSH
66573: LD_INT 1
66575: PLUS
66576: PPUSH
66577: LD_VAR 0 3
66581: PUSH
66582: LD_VAR 0 1
66586: ARRAY
66587: PPUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_INT 4
66595: MOD
66596: PUSH
66597: LD_INT 1
66599: PLUS
66600: PPUSH
66601: CALL_OW 259
66605: PUSH
66606: LD_INT 1
66608: PLUS
66609: PPUSH
66610: CALL_OW 237
66614: GO 66516
66616: POP
66617: POP
// end ;
66618: PPOPN 3
66620: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66621: LD_EXP 51
66625: PUSH
66626: LD_EXP 59
66630: AND
66631: IFFALSE 66651
66633: GO 66635
66635: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66636: LD_INT 4
66638: PPUSH
66639: LD_OWVAR 2
66643: PPUSH
66644: LD_INT 0
66646: PPUSH
66647: CALL_OW 324
66651: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66652: LD_EXP 51
66656: PUSH
66657: LD_EXP 88
66661: AND
66662: IFFALSE 66682
66664: GO 66666
66666: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66667: LD_INT 19
66669: PPUSH
66670: LD_OWVAR 2
66674: PPUSH
66675: LD_INT 0
66677: PPUSH
66678: CALL_OW 324
66682: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66683: LD_EXP 51
66687: PUSH
66688: LD_EXP 60
66692: AND
66693: IFFALSE 66795
66695: GO 66697
66697: DISABLE
66698: LD_INT 0
66700: PPUSH
66701: PPUSH
// begin enable ;
66702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66703: LD_ADDR_VAR 0 2
66707: PUSH
66708: LD_INT 22
66710: PUSH
66711: LD_OWVAR 2
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 34
66725: PUSH
66726: LD_INT 11
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 34
66735: PUSH
66736: LD_INT 30
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PPUSH
66752: CALL_OW 69
66756: ST_TO_ADDR
// if not tmp then
66757: LD_VAR 0 2
66761: NOT
66762: IFFALSE 66766
// exit ;
66764: GO 66795
// for i in tmp do
66766: LD_ADDR_VAR 0 1
66770: PUSH
66771: LD_VAR 0 2
66775: PUSH
66776: FOR_IN
66777: IFFALSE 66793
// begin SetLives ( i , 0 ) ;
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_INT 0
66786: PPUSH
66787: CALL_OW 234
// end ;
66791: GO 66776
66793: POP
66794: POP
// end ;
66795: PPOPN 2
66797: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66798: LD_EXP 51
66802: PUSH
66803: LD_EXP 61
66807: AND
66808: IFFALSE 66828
66810: GO 66812
66812: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66813: LD_INT 32
66815: PPUSH
66816: LD_OWVAR 2
66820: PPUSH
66821: LD_INT 0
66823: PPUSH
66824: CALL_OW 324
66828: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66829: LD_EXP 51
66833: PUSH
66834: LD_EXP 62
66838: AND
66839: IFFALSE 67020
66841: GO 66843
66843: DISABLE
66844: LD_INT 0
66846: PPUSH
66847: PPUSH
66848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66849: LD_ADDR_VAR 0 2
66853: PUSH
66854: LD_INT 22
66856: PUSH
66857: LD_OWVAR 2
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 33
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PPUSH
66880: CALL_OW 69
66884: ST_TO_ADDR
// if not tmp then
66885: LD_VAR 0 2
66889: NOT
66890: IFFALSE 66894
// exit ;
66892: GO 67020
// side := 0 ;
66894: LD_ADDR_VAR 0 3
66898: PUSH
66899: LD_INT 0
66901: ST_TO_ADDR
// for i := 1 to 8 do
66902: LD_ADDR_VAR 0 1
66906: PUSH
66907: DOUBLE
66908: LD_INT 1
66910: DEC
66911: ST_TO_ADDR
66912: LD_INT 8
66914: PUSH
66915: FOR_TO
66916: IFFALSE 66964
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66918: LD_OWVAR 2
66922: PUSH
66923: LD_VAR 0 1
66927: NONEQUAL
66928: PUSH
66929: LD_OWVAR 2
66933: PPUSH
66934: LD_VAR 0 1
66938: PPUSH
66939: CALL_OW 81
66943: PUSH
66944: LD_INT 2
66946: EQUAL
66947: AND
66948: IFFALSE 66962
// begin side := i ;
66950: LD_ADDR_VAR 0 3
66954: PUSH
66955: LD_VAR 0 1
66959: ST_TO_ADDR
// break ;
66960: GO 66964
// end ;
66962: GO 66915
66964: POP
66965: POP
// if not side then
66966: LD_VAR 0 3
66970: NOT
66971: IFFALSE 66975
// exit ;
66973: GO 67020
// for i := 1 to tmp do
66975: LD_ADDR_VAR 0 1
66979: PUSH
66980: DOUBLE
66981: LD_INT 1
66983: DEC
66984: ST_TO_ADDR
66985: LD_VAR 0 2
66989: PUSH
66990: FOR_TO
66991: IFFALSE 67018
// if Prob ( 60 ) then
66993: LD_INT 60
66995: PPUSH
66996: CALL_OW 13
67000: IFFALSE 67016
// SetSide ( i , side ) ;
67002: LD_VAR 0 1
67006: PPUSH
67007: LD_VAR 0 3
67011: PPUSH
67012: CALL_OW 235
67016: GO 66990
67018: POP
67019: POP
// end ;
67020: PPOPN 3
67022: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67023: LD_EXP 51
67027: PUSH
67028: LD_EXP 64
67032: AND
67033: IFFALSE 67152
67035: GO 67037
67037: DISABLE
67038: LD_INT 0
67040: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67041: LD_ADDR_VAR 0 1
67045: PUSH
67046: LD_INT 22
67048: PUSH
67049: LD_OWVAR 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 21
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: LD_INT 23
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: PPUSH
67090: CALL_OW 69
67094: PUSH
67095: FOR_IN
67096: IFFALSE 67150
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
67098: LD_VAR 0 1
67102: PPUSH
67103: CALL_OW 257
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: LD_INT 3
67116: PUSH
67117: LD_INT 4
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: IN
67126: IFFALSE 67148
// SetClass ( un , rand ( 1 , 4 ) ) ;
67128: LD_VAR 0 1
67132: PPUSH
67133: LD_INT 1
67135: PPUSH
67136: LD_INT 4
67138: PPUSH
67139: CALL_OW 12
67143: PPUSH
67144: CALL_OW 336
67148: GO 67095
67150: POP
67151: POP
// end ;
67152: PPOPN 1
67154: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67155: LD_EXP 51
67159: PUSH
67160: LD_EXP 63
67164: AND
67165: IFFALSE 67244
67167: GO 67169
67169: DISABLE
67170: LD_INT 0
67172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67173: LD_ADDR_VAR 0 1
67177: PUSH
67178: LD_INT 22
67180: PUSH
67181: LD_OWVAR 2
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 21
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PPUSH
67204: CALL_OW 69
67208: ST_TO_ADDR
// if not tmp then
67209: LD_VAR 0 1
67213: NOT
67214: IFFALSE 67218
// exit ;
67216: GO 67244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67218: LD_VAR 0 1
67222: PUSH
67223: LD_INT 1
67225: PPUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: CALL_OW 12
67235: ARRAY
67236: PPUSH
67237: LD_INT 100
67239: PPUSH
67240: CALL_OW 234
// end ;
67244: PPOPN 1
67246: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67247: LD_EXP 51
67251: PUSH
67252: LD_EXP 65
67256: AND
67257: IFFALSE 67355
67259: GO 67261
67261: DISABLE
67262: LD_INT 0
67264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67265: LD_ADDR_VAR 0 1
67269: PUSH
67270: LD_INT 22
67272: PUSH
67273: LD_OWVAR 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 21
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PPUSH
67296: CALL_OW 69
67300: ST_TO_ADDR
// if not tmp then
67301: LD_VAR 0 1
67305: NOT
67306: IFFALSE 67310
// exit ;
67308: GO 67355
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67310: LD_VAR 0 1
67314: PUSH
67315: LD_INT 1
67317: PPUSH
67318: LD_VAR 0 1
67322: PPUSH
67323: CALL_OW 12
67327: ARRAY
67328: PPUSH
67329: LD_INT 1
67331: PPUSH
67332: LD_INT 4
67334: PPUSH
67335: CALL_OW 12
67339: PPUSH
67340: LD_INT 3000
67342: PPUSH
67343: LD_INT 9000
67345: PPUSH
67346: CALL_OW 12
67350: PPUSH
67351: CALL_OW 492
// end ;
67355: PPOPN 1
67357: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67358: LD_EXP 51
67362: PUSH
67363: LD_EXP 66
67367: AND
67368: IFFALSE 67388
67370: GO 67372
67372: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67373: LD_INT 1
67375: PPUSH
67376: LD_OWVAR 2
67380: PPUSH
67381: LD_INT 0
67383: PPUSH
67384: CALL_OW 324
67388: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67389: LD_EXP 51
67393: PUSH
67394: LD_EXP 67
67398: AND
67399: IFFALSE 67482
67401: GO 67403
67403: DISABLE
67404: LD_INT 0
67406: PPUSH
67407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67408: LD_ADDR_VAR 0 2
67412: PUSH
67413: LD_INT 22
67415: PUSH
67416: LD_OWVAR 2
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 21
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PPUSH
67439: CALL_OW 69
67443: ST_TO_ADDR
// if not tmp then
67444: LD_VAR 0 2
67448: NOT
67449: IFFALSE 67453
// exit ;
67451: GO 67482
// for i in tmp do
67453: LD_ADDR_VAR 0 1
67457: PUSH
67458: LD_VAR 0 2
67462: PUSH
67463: FOR_IN
67464: IFFALSE 67480
// SetBLevel ( i , 10 ) ;
67466: LD_VAR 0 1
67470: PPUSH
67471: LD_INT 10
67473: PPUSH
67474: CALL_OW 241
67478: GO 67463
67480: POP
67481: POP
// end ;
67482: PPOPN 2
67484: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67485: LD_EXP 51
67489: PUSH
67490: LD_EXP 68
67494: AND
67495: IFFALSE 67606
67497: GO 67499
67499: DISABLE
67500: LD_INT 0
67502: PPUSH
67503: PPUSH
67504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67505: LD_ADDR_VAR 0 3
67509: PUSH
67510: LD_INT 22
67512: PUSH
67513: LD_OWVAR 2
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 25
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PPUSH
67536: CALL_OW 69
67540: ST_TO_ADDR
// if not tmp then
67541: LD_VAR 0 3
67545: NOT
67546: IFFALSE 67550
// exit ;
67548: GO 67606
// un := tmp [ rand ( 1 , tmp ) ] ;
67550: LD_ADDR_VAR 0 2
67554: PUSH
67555: LD_VAR 0 3
67559: PUSH
67560: LD_INT 1
67562: PPUSH
67563: LD_VAR 0 3
67567: PPUSH
67568: CALL_OW 12
67572: ARRAY
67573: ST_TO_ADDR
// if Crawls ( un ) then
67574: LD_VAR 0 2
67578: PPUSH
67579: CALL_OW 318
67583: IFFALSE 67594
// ComWalk ( un ) ;
67585: LD_VAR 0 2
67589: PPUSH
67590: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67594: LD_VAR 0 2
67598: PPUSH
67599: LD_INT 5
67601: PPUSH
67602: CALL_OW 336
// end ;
67606: PPOPN 3
67608: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
67609: LD_EXP 51
67613: PUSH
67614: LD_EXP 69
67618: AND
67619: PUSH
67620: LD_OWVAR 67
67624: PUSH
67625: LD_INT 4
67627: LESS
67628: AND
67629: IFFALSE 67648
67631: GO 67633
67633: DISABLE
// begin Difficulty := Difficulty + 1 ;
67634: LD_ADDR_OWVAR 67
67638: PUSH
67639: LD_OWVAR 67
67643: PUSH
67644: LD_INT 1
67646: PLUS
67647: ST_TO_ADDR
// end ;
67648: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67649: LD_EXP 51
67653: PUSH
67654: LD_EXP 70
67658: AND
67659: IFFALSE 67762
67661: GO 67663
67663: DISABLE
67664: LD_INT 0
67666: PPUSH
// begin for i := 1 to 5 do
67667: LD_ADDR_VAR 0 1
67671: PUSH
67672: DOUBLE
67673: LD_INT 1
67675: DEC
67676: ST_TO_ADDR
67677: LD_INT 5
67679: PUSH
67680: FOR_TO
67681: IFFALSE 67760
// begin uc_nation := nation_nature ;
67683: LD_ADDR_OWVAR 21
67687: PUSH
67688: LD_INT 0
67690: ST_TO_ADDR
// uc_side := 0 ;
67691: LD_ADDR_OWVAR 20
67695: PUSH
67696: LD_INT 0
67698: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67699: LD_ADDR_OWVAR 29
67703: PUSH
67704: LD_INT 12
67706: PUSH
67707: LD_INT 12
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: ST_TO_ADDR
// hc_agressivity := 20 ;
67714: LD_ADDR_OWVAR 35
67718: PUSH
67719: LD_INT 20
67721: ST_TO_ADDR
// hc_class := class_tiger ;
67722: LD_ADDR_OWVAR 28
67726: PUSH
67727: LD_INT 14
67729: ST_TO_ADDR
// hc_gallery :=  ;
67730: LD_ADDR_OWVAR 33
67734: PUSH
67735: LD_STRING 
67737: ST_TO_ADDR
// hc_name :=  ;
67738: LD_ADDR_OWVAR 26
67742: PUSH
67743: LD_STRING 
67745: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67746: CALL_OW 44
67750: PPUSH
67751: LD_INT 0
67753: PPUSH
67754: CALL_OW 51
// end ;
67758: GO 67680
67760: POP
67761: POP
// end ;
67762: PPOPN 1
67764: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67765: LD_EXP 51
67769: PUSH
67770: LD_EXP 71
67774: AND
67775: IFFALSE 67784
67777: GO 67779
67779: DISABLE
// StreamSibBomb ;
67780: CALL 67785 0 0
67784: END
// export function StreamSibBomb ; var i , x , y ; begin
67785: LD_INT 0
67787: PPUSH
67788: PPUSH
67789: PPUSH
67790: PPUSH
// result := false ;
67791: LD_ADDR_VAR 0 1
67795: PUSH
67796: LD_INT 0
67798: ST_TO_ADDR
// for i := 1 to 16 do
67799: LD_ADDR_VAR 0 2
67803: PUSH
67804: DOUBLE
67805: LD_INT 1
67807: DEC
67808: ST_TO_ADDR
67809: LD_INT 16
67811: PUSH
67812: FOR_TO
67813: IFFALSE 68012
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67815: LD_ADDR_VAR 0 3
67819: PUSH
67820: LD_INT 10
67822: PUSH
67823: LD_INT 20
67825: PUSH
67826: LD_INT 30
67828: PUSH
67829: LD_INT 40
67831: PUSH
67832: LD_INT 50
67834: PUSH
67835: LD_INT 60
67837: PUSH
67838: LD_INT 70
67840: PUSH
67841: LD_INT 80
67843: PUSH
67844: LD_INT 90
67846: PUSH
67847: LD_INT 100
67849: PUSH
67850: LD_INT 110
67852: PUSH
67853: LD_INT 120
67855: PUSH
67856: LD_INT 130
67858: PUSH
67859: LD_INT 140
67861: PUSH
67862: LD_INT 150
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: PPUSH
67885: LD_INT 15
67887: PPUSH
67888: CALL_OW 12
67892: ARRAY
67893: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67894: LD_ADDR_VAR 0 4
67898: PUSH
67899: LD_INT 10
67901: PUSH
67902: LD_INT 20
67904: PUSH
67905: LD_INT 30
67907: PUSH
67908: LD_INT 40
67910: PUSH
67911: LD_INT 50
67913: PUSH
67914: LD_INT 60
67916: PUSH
67917: LD_INT 70
67919: PUSH
67920: LD_INT 80
67922: PUSH
67923: LD_INT 90
67925: PUSH
67926: LD_INT 100
67928: PUSH
67929: LD_INT 110
67931: PUSH
67932: LD_INT 120
67934: PUSH
67935: LD_INT 130
67937: PUSH
67938: LD_INT 140
67940: PUSH
67941: LD_INT 150
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 1
67963: PPUSH
67964: LD_INT 15
67966: PPUSH
67967: CALL_OW 12
67971: ARRAY
67972: ST_TO_ADDR
// if ValidHex ( x , y ) then
67973: LD_VAR 0 3
67977: PPUSH
67978: LD_VAR 0 4
67982: PPUSH
67983: CALL_OW 488
67987: IFFALSE 68010
// begin result := [ x , y ] ;
67989: LD_ADDR_VAR 0 1
67993: PUSH
67994: LD_VAR 0 3
67998: PUSH
67999: LD_VAR 0 4
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: ST_TO_ADDR
// break ;
68008: GO 68012
// end ; end ;
68010: GO 67812
68012: POP
68013: POP
// if result then
68014: LD_VAR 0 1
68018: IFFALSE 68078
// begin ToLua ( playSibBomb() ) ;
68020: LD_STRING playSibBomb()
68022: PPUSH
68023: CALL_OW 559
// wait ( 0 0$14 ) ;
68027: LD_INT 490
68029: PPUSH
68030: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68034: LD_VAR 0 1
68038: PUSH
68039: LD_INT 1
68041: ARRAY
68042: PPUSH
68043: LD_VAR 0 1
68047: PUSH
68048: LD_INT 2
68050: ARRAY
68051: PPUSH
68052: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68056: LD_VAR 0 1
68060: PUSH
68061: LD_INT 1
68063: ARRAY
68064: PPUSH
68065: LD_VAR 0 1
68069: PUSH
68070: LD_INT 2
68072: ARRAY
68073: PPUSH
68074: CALL_OW 429
// end ; end ;
68078: LD_VAR 0 1
68082: RET
// every 0 0$1 trigger StreamModeActive and sReset do
68083: LD_EXP 51
68087: PUSH
68088: LD_EXP 73
68092: AND
68093: IFFALSE 68105
68095: GO 68097
68097: DISABLE
// YouLost (  ) ;
68098: LD_STRING 
68100: PPUSH
68101: CALL_OW 104
68105: END
// every 0 0$1 trigger StreamModeActive and sFog do
68106: LD_EXP 51
68110: PUSH
68111: LD_EXP 72
68115: AND
68116: IFFALSE 68130
68118: GO 68120
68120: DISABLE
// FogOff ( your_side ) ;
68121: LD_OWVAR 2
68125: PPUSH
68126: CALL_OW 344
68130: END
// every 0 0$1 trigger StreamModeActive and sSun do
68131: LD_EXP 51
68135: PUSH
68136: LD_EXP 74
68140: AND
68141: IFFALSE 68169
68143: GO 68145
68145: DISABLE
// begin solar_recharge_percent := 0 ;
68146: LD_ADDR_OWVAR 79
68150: PUSH
68151: LD_INT 0
68153: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68154: LD_INT 10500
68156: PPUSH
68157: CALL_OW 67
// solar_recharge_percent := 100 ;
68161: LD_ADDR_OWVAR 79
68165: PUSH
68166: LD_INT 100
68168: ST_TO_ADDR
// end ;
68169: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68170: LD_EXP 51
68174: PUSH
68175: LD_EXP 75
68179: AND
68180: IFFALSE 68419
68182: GO 68184
68184: DISABLE
68185: LD_INT 0
68187: PPUSH
68188: PPUSH
68189: PPUSH
// begin tmp := [ ] ;
68190: LD_ADDR_VAR 0 3
68194: PUSH
68195: EMPTY
68196: ST_TO_ADDR
// for i := 1 to 6 do
68197: LD_ADDR_VAR 0 1
68201: PUSH
68202: DOUBLE
68203: LD_INT 1
68205: DEC
68206: ST_TO_ADDR
68207: LD_INT 6
68209: PUSH
68210: FOR_TO
68211: IFFALSE 68316
// begin uc_nation := nation_nature ;
68213: LD_ADDR_OWVAR 21
68217: PUSH
68218: LD_INT 0
68220: ST_TO_ADDR
// uc_side := 0 ;
68221: LD_ADDR_OWVAR 20
68225: PUSH
68226: LD_INT 0
68228: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68229: LD_ADDR_OWVAR 29
68233: PUSH
68234: LD_INT 12
68236: PUSH
68237: LD_INT 12
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: ST_TO_ADDR
// hc_agressivity := 20 ;
68244: LD_ADDR_OWVAR 35
68248: PUSH
68249: LD_INT 20
68251: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68252: LD_ADDR_OWVAR 28
68256: PUSH
68257: LD_INT 17
68259: ST_TO_ADDR
// hc_gallery :=  ;
68260: LD_ADDR_OWVAR 33
68264: PUSH
68265: LD_STRING 
68267: ST_TO_ADDR
// hc_name :=  ;
68268: LD_ADDR_OWVAR 26
68272: PUSH
68273: LD_STRING 
68275: ST_TO_ADDR
// un := CreateHuman ;
68276: LD_ADDR_VAR 0 2
68280: PUSH
68281: CALL_OW 44
68285: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68286: LD_VAR 0 2
68290: PPUSH
68291: LD_INT 1
68293: PPUSH
68294: CALL_OW 51
// tmp := tmp ^ un ;
68298: LD_ADDR_VAR 0 3
68302: PUSH
68303: LD_VAR 0 3
68307: PUSH
68308: LD_VAR 0 2
68312: ADD
68313: ST_TO_ADDR
// end ;
68314: GO 68210
68316: POP
68317: POP
// repeat wait ( 0 0$1 ) ;
68318: LD_INT 35
68320: PPUSH
68321: CALL_OW 67
// for un in tmp do
68325: LD_ADDR_VAR 0 2
68329: PUSH
68330: LD_VAR 0 3
68334: PUSH
68335: FOR_IN
68336: IFFALSE 68410
// begin if IsDead ( un ) then
68338: LD_VAR 0 2
68342: PPUSH
68343: CALL_OW 301
68347: IFFALSE 68367
// begin tmp := tmp diff un ;
68349: LD_ADDR_VAR 0 3
68353: PUSH
68354: LD_VAR 0 3
68358: PUSH
68359: LD_VAR 0 2
68363: DIFF
68364: ST_TO_ADDR
// continue ;
68365: GO 68335
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68367: LD_VAR 0 2
68371: PPUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 22
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PPUSH
68389: CALL_OW 69
68393: PPUSH
68394: LD_VAR 0 2
68398: PPUSH
68399: CALL_OW 74
68403: PPUSH
68404: CALL_OW 115
// end ;
68408: GO 68335
68410: POP
68411: POP
// until not tmp ;
68412: LD_VAR 0 3
68416: NOT
68417: IFFALSE 68318
// end ;
68419: PPOPN 3
68421: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68422: LD_EXP 51
68426: PUSH
68427: LD_EXP 76
68431: AND
68432: IFFALSE 68486
68434: GO 68436
68436: DISABLE
// begin ToLua ( displayTroll(); ) ;
68437: LD_STRING displayTroll();
68439: PPUSH
68440: CALL_OW 559
// wait ( 3 3$00 ) ;
68444: LD_INT 6300
68446: PPUSH
68447: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68451: LD_STRING hideTroll();
68453: PPUSH
68454: CALL_OW 559
// wait ( 1 1$00 ) ;
68458: LD_INT 2100
68460: PPUSH
68461: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68465: LD_STRING displayTroll();
68467: PPUSH
68468: CALL_OW 559
// wait ( 1 1$00 ) ;
68472: LD_INT 2100
68474: PPUSH
68475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68479: LD_STRING hideTroll();
68481: PPUSH
68482: CALL_OW 559
// end ;
68486: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68487: LD_EXP 51
68491: PUSH
68492: LD_EXP 77
68496: AND
68497: IFFALSE 68560
68499: GO 68501
68501: DISABLE
68502: LD_INT 0
68504: PPUSH
// begin p := 0 ;
68505: LD_ADDR_VAR 0 1
68509: PUSH
68510: LD_INT 0
68512: ST_TO_ADDR
// repeat game_speed := 1 ;
68513: LD_ADDR_OWVAR 65
68517: PUSH
68518: LD_INT 1
68520: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68521: LD_INT 35
68523: PPUSH
68524: CALL_OW 67
// p := p + 1 ;
68528: LD_ADDR_VAR 0 1
68532: PUSH
68533: LD_VAR 0 1
68537: PUSH
68538: LD_INT 1
68540: PLUS
68541: ST_TO_ADDR
// until p >= 60 ;
68542: LD_VAR 0 1
68546: PUSH
68547: LD_INT 60
68549: GREATEREQUAL
68550: IFFALSE 68513
// game_speed := 4 ;
68552: LD_ADDR_OWVAR 65
68556: PUSH
68557: LD_INT 4
68559: ST_TO_ADDR
// end ;
68560: PPOPN 1
68562: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68563: LD_EXP 51
68567: PUSH
68568: LD_EXP 78
68572: AND
68573: IFFALSE 68719
68575: GO 68577
68577: DISABLE
68578: LD_INT 0
68580: PPUSH
68581: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68582: LD_ADDR_VAR 0 1
68586: PUSH
68587: LD_INT 22
68589: PUSH
68590: LD_OWVAR 2
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: LD_INT 30
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 30
68614: PUSH
68615: LD_INT 1
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: LIST
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PPUSH
68631: CALL_OW 69
68635: ST_TO_ADDR
// if not depot then
68636: LD_VAR 0 1
68640: NOT
68641: IFFALSE 68645
// exit ;
68643: GO 68719
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68645: LD_ADDR_VAR 0 2
68649: PUSH
68650: LD_VAR 0 1
68654: PUSH
68655: LD_INT 1
68657: PPUSH
68658: LD_VAR 0 1
68662: PPUSH
68663: CALL_OW 12
68667: ARRAY
68668: PPUSH
68669: CALL_OW 274
68673: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68674: LD_VAR 0 2
68678: PPUSH
68679: LD_INT 1
68681: PPUSH
68682: LD_INT 0
68684: PPUSH
68685: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68689: LD_VAR 0 2
68693: PPUSH
68694: LD_INT 2
68696: PPUSH
68697: LD_INT 0
68699: PPUSH
68700: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68704: LD_VAR 0 2
68708: PPUSH
68709: LD_INT 3
68711: PPUSH
68712: LD_INT 0
68714: PPUSH
68715: CALL_OW 277
// end ;
68719: PPOPN 2
68721: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68722: LD_EXP 51
68726: PUSH
68727: LD_EXP 79
68731: AND
68732: IFFALSE 68829
68734: GO 68736
68736: DISABLE
68737: LD_INT 0
68739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68740: LD_ADDR_VAR 0 1
68744: PUSH
68745: LD_INT 22
68747: PUSH
68748: LD_OWVAR 2
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 21
68759: PUSH
68760: LD_INT 1
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 23
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: LIST
68788: PPUSH
68789: CALL_OW 69
68793: ST_TO_ADDR
// if not tmp then
68794: LD_VAR 0 1
68798: NOT
68799: IFFALSE 68803
// exit ;
68801: GO 68829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68803: LD_VAR 0 1
68807: PUSH
68808: LD_INT 1
68810: PPUSH
68811: LD_VAR 0 1
68815: PPUSH
68816: CALL_OW 12
68820: ARRAY
68821: PPUSH
68822: LD_INT 200
68824: PPUSH
68825: CALL_OW 234
// end ;
68829: PPOPN 1
68831: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68832: LD_EXP 51
68836: PUSH
68837: LD_EXP 80
68841: AND
68842: IFFALSE 68921
68844: GO 68846
68846: DISABLE
68847: LD_INT 0
68849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68850: LD_ADDR_VAR 0 1
68854: PUSH
68855: LD_INT 22
68857: PUSH
68858: LD_OWVAR 2
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 21
68869: PUSH
68870: LD_INT 2
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PPUSH
68881: CALL_OW 69
68885: ST_TO_ADDR
// if not tmp then
68886: LD_VAR 0 1
68890: NOT
68891: IFFALSE 68895
// exit ;
68893: GO 68921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68895: LD_VAR 0 1
68899: PUSH
68900: LD_INT 1
68902: PPUSH
68903: LD_VAR 0 1
68907: PPUSH
68908: CALL_OW 12
68912: ARRAY
68913: PPUSH
68914: LD_INT 60
68916: PPUSH
68917: CALL_OW 234
// end ;
68921: PPOPN 1
68923: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68924: LD_EXP 51
68928: PUSH
68929: LD_EXP 81
68933: AND
68934: IFFALSE 69033
68936: GO 68938
68938: DISABLE
68939: LD_INT 0
68941: PPUSH
68942: PPUSH
// begin enable ;
68943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68944: LD_ADDR_VAR 0 1
68948: PUSH
68949: LD_INT 22
68951: PUSH
68952: LD_OWVAR 2
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 61
68963: PUSH
68964: EMPTY
68965: LIST
68966: PUSH
68967: LD_INT 33
68969: PUSH
68970: LD_INT 2
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: LIST
68981: PPUSH
68982: CALL_OW 69
68986: ST_TO_ADDR
// if not tmp then
68987: LD_VAR 0 1
68991: NOT
68992: IFFALSE 68996
// exit ;
68994: GO 69033
// for i in tmp do
68996: LD_ADDR_VAR 0 2
69000: PUSH
69001: LD_VAR 0 1
69005: PUSH
69006: FOR_IN
69007: IFFALSE 69031
// if IsControledBy ( i ) then
69009: LD_VAR 0 2
69013: PPUSH
69014: CALL_OW 312
69018: IFFALSE 69029
// ComUnlink ( i ) ;
69020: LD_VAR 0 2
69024: PPUSH
69025: CALL_OW 136
69029: GO 69006
69031: POP
69032: POP
// end ;
69033: PPOPN 2
69035: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69036: LD_EXP 51
69040: PUSH
69041: LD_EXP 82
69045: AND
69046: IFFALSE 69186
69048: GO 69050
69050: DISABLE
69051: LD_INT 0
69053: PPUSH
69054: PPUSH
// begin ToLua ( displayPowell(); ) ;
69055: LD_STRING displayPowell();
69057: PPUSH
69058: CALL_OW 559
// uc_side := 0 ;
69062: LD_ADDR_OWVAR 20
69066: PUSH
69067: LD_INT 0
69069: ST_TO_ADDR
// uc_nation := 2 ;
69070: LD_ADDR_OWVAR 21
69074: PUSH
69075: LD_INT 2
69077: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
69078: LD_ADDR_OWVAR 37
69082: PUSH
69083: LD_INT 14
69085: ST_TO_ADDR
// vc_engine := engine_siberite ;
69086: LD_ADDR_OWVAR 39
69090: PUSH
69091: LD_INT 3
69093: ST_TO_ADDR
// vc_control := control_apeman ;
69094: LD_ADDR_OWVAR 38
69098: PUSH
69099: LD_INT 5
69101: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
69102: LD_ADDR_OWVAR 40
69106: PUSH
69107: LD_INT 29
69109: ST_TO_ADDR
// un := CreateVehicle ;
69110: LD_ADDR_VAR 0 2
69114: PUSH
69115: CALL_OW 45
69119: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69120: LD_VAR 0 2
69124: PPUSH
69125: LD_INT 1
69127: PPUSH
69128: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69132: LD_INT 35
69134: PPUSH
69135: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69139: LD_VAR 0 2
69143: PPUSH
69144: LD_INT 22
69146: PUSH
69147: LD_OWVAR 2
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PPUSH
69156: CALL_OW 69
69160: PPUSH
69161: LD_VAR 0 2
69165: PPUSH
69166: CALL_OW 74
69170: PPUSH
69171: CALL_OW 115
// until IsDead ( un ) ;
69175: LD_VAR 0 2
69179: PPUSH
69180: CALL_OW 301
69184: IFFALSE 69132
// end ;
69186: PPOPN 2
69188: END
// every 0 0$1 trigger StreamModeActive and sStu do
69189: LD_EXP 51
69193: PUSH
69194: LD_EXP 90
69198: AND
69199: IFFALSE 69215
69201: GO 69203
69203: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69204: LD_STRING displayStucuk();
69206: PPUSH
69207: CALL_OW 559
// ResetFog ;
69211: CALL_OW 335
// end ;
69215: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69216: LD_EXP 51
69220: PUSH
69221: LD_EXP 83
69225: AND
69226: IFFALSE 69367
69228: GO 69230
69230: DISABLE
69231: LD_INT 0
69233: PPUSH
69234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_INT 22
69242: PUSH
69243: LD_OWVAR 2
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 21
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PPUSH
69266: CALL_OW 69
69270: ST_TO_ADDR
// if not tmp then
69271: LD_VAR 0 2
69275: NOT
69276: IFFALSE 69280
// exit ;
69278: GO 69367
// un := tmp [ rand ( 1 , tmp ) ] ;
69280: LD_ADDR_VAR 0 1
69284: PUSH
69285: LD_VAR 0 2
69289: PUSH
69290: LD_INT 1
69292: PPUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: CALL_OW 12
69302: ARRAY
69303: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69304: LD_VAR 0 1
69308: PPUSH
69309: LD_INT 0
69311: PPUSH
69312: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69316: LD_VAR 0 1
69320: PPUSH
69321: LD_OWVAR 3
69325: PUSH
69326: LD_VAR 0 1
69330: DIFF
69331: PPUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: CALL_OW 74
69341: PPUSH
69342: CALL_OW 115
// wait ( 0 0$20 ) ;
69346: LD_INT 700
69348: PPUSH
69349: CALL_OW 67
// SetSide ( un , your_side ) ;
69353: LD_VAR 0 1
69357: PPUSH
69358: LD_OWVAR 2
69362: PPUSH
69363: CALL_OW 235
// end ;
69367: PPOPN 2
69369: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69370: LD_EXP 51
69374: PUSH
69375: LD_EXP 84
69379: AND
69380: IFFALSE 69486
69382: GO 69384
69384: DISABLE
69385: LD_INT 0
69387: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69388: LD_ADDR_VAR 0 1
69392: PUSH
69393: LD_INT 22
69395: PUSH
69396: LD_OWVAR 2
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: LD_INT 30
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 30
69420: PUSH
69421: LD_INT 1
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: LIST
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PPUSH
69437: CALL_OW 69
69441: ST_TO_ADDR
// if not depot then
69442: LD_VAR 0 1
69446: NOT
69447: IFFALSE 69451
// exit ;
69449: GO 69486
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69451: LD_VAR 0 1
69455: PUSH
69456: LD_INT 1
69458: ARRAY
69459: PPUSH
69460: CALL_OW 250
69464: PPUSH
69465: LD_VAR 0 1
69469: PUSH
69470: LD_INT 1
69472: ARRAY
69473: PPUSH
69474: CALL_OW 251
69478: PPUSH
69479: LD_INT 70
69481: PPUSH
69482: CALL_OW 495
// end ;
69486: PPOPN 1
69488: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69489: LD_EXP 51
69493: PUSH
69494: LD_EXP 85
69498: AND
69499: IFFALSE 69710
69501: GO 69503
69503: DISABLE
69504: LD_INT 0
69506: PPUSH
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69511: LD_ADDR_VAR 0 5
69515: PUSH
69516: LD_INT 22
69518: PUSH
69519: LD_OWVAR 2
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 21
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PPUSH
69542: CALL_OW 69
69546: ST_TO_ADDR
// if not tmp then
69547: LD_VAR 0 5
69551: NOT
69552: IFFALSE 69556
// exit ;
69554: GO 69710
// for i in tmp do
69556: LD_ADDR_VAR 0 1
69560: PUSH
69561: LD_VAR 0 5
69565: PUSH
69566: FOR_IN
69567: IFFALSE 69708
// begin d := rand ( 0 , 5 ) ;
69569: LD_ADDR_VAR 0 4
69573: PUSH
69574: LD_INT 0
69576: PPUSH
69577: LD_INT 5
69579: PPUSH
69580: CALL_OW 12
69584: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69585: LD_ADDR_VAR 0 2
69589: PUSH
69590: LD_VAR 0 1
69594: PPUSH
69595: CALL_OW 250
69599: PPUSH
69600: LD_VAR 0 4
69604: PPUSH
69605: LD_INT 3
69607: PPUSH
69608: LD_INT 12
69610: PPUSH
69611: CALL_OW 12
69615: PPUSH
69616: CALL_OW 272
69620: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69621: LD_ADDR_VAR 0 3
69625: PUSH
69626: LD_VAR 0 1
69630: PPUSH
69631: CALL_OW 251
69635: PPUSH
69636: LD_VAR 0 4
69640: PPUSH
69641: LD_INT 3
69643: PPUSH
69644: LD_INT 12
69646: PPUSH
69647: CALL_OW 12
69651: PPUSH
69652: CALL_OW 273
69656: ST_TO_ADDR
// if ValidHex ( x , y ) then
69657: LD_VAR 0 2
69661: PPUSH
69662: LD_VAR 0 3
69666: PPUSH
69667: CALL_OW 488
69671: IFFALSE 69706
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69673: LD_VAR 0 1
69677: PPUSH
69678: LD_VAR 0 2
69682: PPUSH
69683: LD_VAR 0 3
69687: PPUSH
69688: LD_INT 3
69690: PPUSH
69691: LD_INT 6
69693: PPUSH
69694: CALL_OW 12
69698: PPUSH
69699: LD_INT 1
69701: PPUSH
69702: CALL_OW 483
// end ;
69706: GO 69566
69708: POP
69709: POP
// end ;
69710: PPOPN 5
69712: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69713: LD_EXP 51
69717: PUSH
69718: LD_EXP 86
69722: AND
69723: IFFALSE 69817
69725: GO 69727
69727: DISABLE
69728: LD_INT 0
69730: PPUSH
69731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69732: LD_ADDR_VAR 0 2
69736: PUSH
69737: LD_INT 22
69739: PUSH
69740: LD_OWVAR 2
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 32
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 21
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: PPUSH
69774: CALL_OW 69
69778: ST_TO_ADDR
// if not tmp then
69779: LD_VAR 0 2
69783: NOT
69784: IFFALSE 69788
// exit ;
69786: GO 69817
// for i in tmp do
69788: LD_ADDR_VAR 0 1
69792: PUSH
69793: LD_VAR 0 2
69797: PUSH
69798: FOR_IN
69799: IFFALSE 69815
// SetFuel ( i , 0 ) ;
69801: LD_VAR 0 1
69805: PPUSH
69806: LD_INT 0
69808: PPUSH
69809: CALL_OW 240
69813: GO 69798
69815: POP
69816: POP
// end ;
69817: PPOPN 2
69819: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69820: LD_EXP 51
69824: PUSH
69825: LD_EXP 87
69829: AND
69830: IFFALSE 69896
69832: GO 69834
69834: DISABLE
69835: LD_INT 0
69837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69838: LD_ADDR_VAR 0 1
69842: PUSH
69843: LD_INT 22
69845: PUSH
69846: LD_OWVAR 2
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 30
69857: PUSH
69858: LD_INT 29
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PPUSH
69869: CALL_OW 69
69873: ST_TO_ADDR
// if not tmp then
69874: LD_VAR 0 1
69878: NOT
69879: IFFALSE 69883
// exit ;
69881: GO 69896
// DestroyUnit ( tmp [ 1 ] ) ;
69883: LD_VAR 0 1
69887: PUSH
69888: LD_INT 1
69890: ARRAY
69891: PPUSH
69892: CALL_OW 65
// end ;
69896: PPOPN 1
69898: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69899: LD_EXP 51
69903: PUSH
69904: LD_EXP 89
69908: AND
69909: IFFALSE 70038
69911: GO 69913
69913: DISABLE
69914: LD_INT 0
69916: PPUSH
// begin uc_side := 0 ;
69917: LD_ADDR_OWVAR 20
69921: PUSH
69922: LD_INT 0
69924: ST_TO_ADDR
// uc_nation := nation_arabian ;
69925: LD_ADDR_OWVAR 21
69929: PUSH
69930: LD_INT 2
69932: ST_TO_ADDR
// hc_gallery :=  ;
69933: LD_ADDR_OWVAR 33
69937: PUSH
69938: LD_STRING 
69940: ST_TO_ADDR
// hc_name :=  ;
69941: LD_ADDR_OWVAR 26
69945: PUSH
69946: LD_STRING 
69948: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69949: LD_INT 1
69951: PPUSH
69952: LD_INT 11
69954: PPUSH
69955: LD_INT 10
69957: PPUSH
69958: CALL_OW 380
// un := CreateHuman ;
69962: LD_ADDR_VAR 0 1
69966: PUSH
69967: CALL_OW 44
69971: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69972: LD_VAR 0 1
69976: PPUSH
69977: LD_INT 1
69979: PPUSH
69980: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69984: LD_INT 35
69986: PPUSH
69987: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69991: LD_VAR 0 1
69995: PPUSH
69996: LD_INT 22
69998: PUSH
69999: LD_OWVAR 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PPUSH
70008: CALL_OW 69
70012: PPUSH
70013: LD_VAR 0 1
70017: PPUSH
70018: CALL_OW 74
70022: PPUSH
70023: CALL_OW 115
// until IsDead ( un ) ;
70027: LD_VAR 0 1
70031: PPUSH
70032: CALL_OW 301
70036: IFFALSE 69984
// end ;
70038: PPOPN 1
70040: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70041: LD_EXP 51
70045: PUSH
70046: LD_EXP 91
70050: AND
70051: IFFALSE 70063
70053: GO 70055
70055: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70056: LD_STRING earthquake(getX(game), 0, 32)
70058: PPUSH
70059: CALL_OW 559
70063: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
70064: LD_EXP 51
70068: PUSH
70069: LD_EXP 92
70073: AND
70074: IFFALSE 70165
70076: GO 70078
70078: DISABLE
70079: LD_INT 0
70081: PPUSH
// begin enable ;
70082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
70083: LD_ADDR_VAR 0 1
70087: PUSH
70088: LD_INT 22
70090: PUSH
70091: LD_OWVAR 2
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 21
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 33
70112: PUSH
70113: LD_INT 3
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: LIST
70124: PPUSH
70125: CALL_OW 69
70129: ST_TO_ADDR
// if not tmp then
70130: LD_VAR 0 1
70134: NOT
70135: IFFALSE 70139
// exit ;
70137: GO 70165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70139: LD_VAR 0 1
70143: PUSH
70144: LD_INT 1
70146: PPUSH
70147: LD_VAR 0 1
70151: PPUSH
70152: CALL_OW 12
70156: ARRAY
70157: PPUSH
70158: LD_INT 1
70160: PPUSH
70161: CALL_OW 234
// end ;
70165: PPOPN 1
70167: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70168: LD_EXP 51
70172: PUSH
70173: LD_EXP 93
70177: AND
70178: IFFALSE 70319
70180: GO 70182
70182: DISABLE
70183: LD_INT 0
70185: PPUSH
70186: PPUSH
70187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70188: LD_ADDR_VAR 0 3
70192: PUSH
70193: LD_INT 22
70195: PUSH
70196: LD_OWVAR 2
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 25
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PPUSH
70219: CALL_OW 69
70223: ST_TO_ADDR
// if not tmp then
70224: LD_VAR 0 3
70228: NOT
70229: IFFALSE 70233
// exit ;
70231: GO 70319
// un := tmp [ rand ( 1 , tmp ) ] ;
70233: LD_ADDR_VAR 0 2
70237: PUSH
70238: LD_VAR 0 3
70242: PUSH
70243: LD_INT 1
70245: PPUSH
70246: LD_VAR 0 3
70250: PPUSH
70251: CALL_OW 12
70255: ARRAY
70256: ST_TO_ADDR
// if Crawls ( un ) then
70257: LD_VAR 0 2
70261: PPUSH
70262: CALL_OW 318
70266: IFFALSE 70277
// ComWalk ( un ) ;
70268: LD_VAR 0 2
70272: PPUSH
70273: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70277: LD_VAR 0 2
70281: PPUSH
70282: LD_INT 9
70284: PPUSH
70285: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70289: LD_INT 28
70291: PPUSH
70292: LD_OWVAR 2
70296: PPUSH
70297: LD_INT 2
70299: PPUSH
70300: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70304: LD_INT 29
70306: PPUSH
70307: LD_OWVAR 2
70311: PPUSH
70312: LD_INT 2
70314: PPUSH
70315: CALL_OW 322
// end ;
70319: PPOPN 3
70321: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70322: LD_EXP 51
70326: PUSH
70327: LD_EXP 94
70331: AND
70332: IFFALSE 70443
70334: GO 70336
70336: DISABLE
70337: LD_INT 0
70339: PPUSH
70340: PPUSH
70341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70342: LD_ADDR_VAR 0 3
70346: PUSH
70347: LD_INT 22
70349: PUSH
70350: LD_OWVAR 2
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 25
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PPUSH
70373: CALL_OW 69
70377: ST_TO_ADDR
// if not tmp then
70378: LD_VAR 0 3
70382: NOT
70383: IFFALSE 70387
// exit ;
70385: GO 70443
// un := tmp [ rand ( 1 , tmp ) ] ;
70387: LD_ADDR_VAR 0 2
70391: PUSH
70392: LD_VAR 0 3
70396: PUSH
70397: LD_INT 1
70399: PPUSH
70400: LD_VAR 0 3
70404: PPUSH
70405: CALL_OW 12
70409: ARRAY
70410: ST_TO_ADDR
// if Crawls ( un ) then
70411: LD_VAR 0 2
70415: PPUSH
70416: CALL_OW 318
70420: IFFALSE 70431
// ComWalk ( un ) ;
70422: LD_VAR 0 2
70426: PPUSH
70427: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70431: LD_VAR 0 2
70435: PPUSH
70436: LD_INT 8
70438: PPUSH
70439: CALL_OW 336
// end ;
70443: PPOPN 3
70445: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70446: LD_EXP 51
70450: PUSH
70451: LD_EXP 95
70455: AND
70456: IFFALSE 70600
70458: GO 70460
70460: DISABLE
70461: LD_INT 0
70463: PPUSH
70464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70465: LD_ADDR_VAR 0 2
70469: PUSH
70470: LD_INT 22
70472: PUSH
70473: LD_OWVAR 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 21
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 2
70494: PUSH
70495: LD_INT 34
70497: PUSH
70498: LD_INT 12
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 34
70507: PUSH
70508: LD_INT 51
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 34
70517: PUSH
70518: LD_INT 32
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: LIST
70535: PPUSH
70536: CALL_OW 69
70540: ST_TO_ADDR
// if not tmp then
70541: LD_VAR 0 2
70545: NOT
70546: IFFALSE 70550
// exit ;
70548: GO 70600
// for i in tmp do
70550: LD_ADDR_VAR 0 1
70554: PUSH
70555: LD_VAR 0 2
70559: PUSH
70560: FOR_IN
70561: IFFALSE 70598
// if GetCargo ( i , mat_artifact ) = 0 then
70563: LD_VAR 0 1
70567: PPUSH
70568: LD_INT 4
70570: PPUSH
70571: CALL_OW 289
70575: PUSH
70576: LD_INT 0
70578: EQUAL
70579: IFFALSE 70596
// SetCargo ( i , mat_siberit , 100 ) ;
70581: LD_VAR 0 1
70585: PPUSH
70586: LD_INT 3
70588: PPUSH
70589: LD_INT 100
70591: PPUSH
70592: CALL_OW 290
70596: GO 70560
70598: POP
70599: POP
// end ;
70600: PPOPN 2
70602: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70603: LD_EXP 51
70607: PUSH
70608: LD_EXP 96
70612: AND
70613: IFFALSE 70796
70615: GO 70617
70617: DISABLE
70618: LD_INT 0
70620: PPUSH
70621: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70622: LD_ADDR_VAR 0 2
70626: PUSH
70627: LD_INT 22
70629: PUSH
70630: LD_OWVAR 2
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PPUSH
70639: CALL_OW 69
70643: ST_TO_ADDR
// if not tmp then
70644: LD_VAR 0 2
70648: NOT
70649: IFFALSE 70653
// exit ;
70651: GO 70796
// for i := 1 to 2 do
70653: LD_ADDR_VAR 0 1
70657: PUSH
70658: DOUBLE
70659: LD_INT 1
70661: DEC
70662: ST_TO_ADDR
70663: LD_INT 2
70665: PUSH
70666: FOR_TO
70667: IFFALSE 70794
// begin uc_side := your_side ;
70669: LD_ADDR_OWVAR 20
70673: PUSH
70674: LD_OWVAR 2
70678: ST_TO_ADDR
// uc_nation := nation_american ;
70679: LD_ADDR_OWVAR 21
70683: PUSH
70684: LD_INT 1
70686: ST_TO_ADDR
// vc_chassis := us_morphling ;
70687: LD_ADDR_OWVAR 37
70691: PUSH
70692: LD_INT 5
70694: ST_TO_ADDR
// vc_engine := engine_siberite ;
70695: LD_ADDR_OWVAR 39
70699: PUSH
70700: LD_INT 3
70702: ST_TO_ADDR
// vc_control := control_computer ;
70703: LD_ADDR_OWVAR 38
70707: PUSH
70708: LD_INT 3
70710: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70711: LD_ADDR_OWVAR 40
70715: PUSH
70716: LD_INT 10
70718: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70719: LD_VAR 0 2
70723: PUSH
70724: LD_INT 1
70726: ARRAY
70727: PPUSH
70728: CALL_OW 310
70732: NOT
70733: IFFALSE 70780
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70735: CALL_OW 45
70739: PPUSH
70740: LD_VAR 0 2
70744: PUSH
70745: LD_INT 1
70747: ARRAY
70748: PPUSH
70749: CALL_OW 250
70753: PPUSH
70754: LD_VAR 0 2
70758: PUSH
70759: LD_INT 1
70761: ARRAY
70762: PPUSH
70763: CALL_OW 251
70767: PPUSH
70768: LD_INT 12
70770: PPUSH
70771: LD_INT 1
70773: PPUSH
70774: CALL_OW 50
70778: GO 70792
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70780: CALL_OW 45
70784: PPUSH
70785: LD_INT 1
70787: PPUSH
70788: CALL_OW 51
// end ;
70792: GO 70666
70794: POP
70795: POP
// end ;
70796: PPOPN 2
70798: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70799: LD_EXP 51
70803: PUSH
70804: LD_EXP 97
70808: AND
70809: IFFALSE 71031
70811: GO 70813
70813: DISABLE
70814: LD_INT 0
70816: PPUSH
70817: PPUSH
70818: PPUSH
70819: PPUSH
70820: PPUSH
70821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70822: LD_ADDR_VAR 0 6
70826: PUSH
70827: LD_INT 22
70829: PUSH
70830: LD_OWVAR 2
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 21
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 3
70851: PUSH
70852: LD_INT 23
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: LIST
70870: PPUSH
70871: CALL_OW 69
70875: ST_TO_ADDR
// if not tmp then
70876: LD_VAR 0 6
70880: NOT
70881: IFFALSE 70885
// exit ;
70883: GO 71031
// s1 := rand ( 1 , 4 ) ;
70885: LD_ADDR_VAR 0 2
70889: PUSH
70890: LD_INT 1
70892: PPUSH
70893: LD_INT 4
70895: PPUSH
70896: CALL_OW 12
70900: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70901: LD_ADDR_VAR 0 4
70905: PUSH
70906: LD_VAR 0 6
70910: PUSH
70911: LD_INT 1
70913: ARRAY
70914: PPUSH
70915: LD_VAR 0 2
70919: PPUSH
70920: CALL_OW 259
70924: ST_TO_ADDR
// if s1 = 1 then
70925: LD_VAR 0 2
70929: PUSH
70930: LD_INT 1
70932: EQUAL
70933: IFFALSE 70953
// s2 := rand ( 2 , 4 ) else
70935: LD_ADDR_VAR 0 3
70939: PUSH
70940: LD_INT 2
70942: PPUSH
70943: LD_INT 4
70945: PPUSH
70946: CALL_OW 12
70950: ST_TO_ADDR
70951: GO 70961
// s2 := 1 ;
70953: LD_ADDR_VAR 0 3
70957: PUSH
70958: LD_INT 1
70960: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70961: LD_ADDR_VAR 0 5
70965: PUSH
70966: LD_VAR 0 6
70970: PUSH
70971: LD_INT 1
70973: ARRAY
70974: PPUSH
70975: LD_VAR 0 3
70979: PPUSH
70980: CALL_OW 259
70984: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70985: LD_VAR 0 6
70989: PUSH
70990: LD_INT 1
70992: ARRAY
70993: PPUSH
70994: LD_VAR 0 2
70998: PPUSH
70999: LD_VAR 0 5
71003: PPUSH
71004: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71008: LD_VAR 0 6
71012: PUSH
71013: LD_INT 1
71015: ARRAY
71016: PPUSH
71017: LD_VAR 0 3
71021: PPUSH
71022: LD_VAR 0 4
71026: PPUSH
71027: CALL_OW 237
// end ;
71031: PPOPN 6
71033: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71034: LD_EXP 51
71038: PUSH
71039: LD_EXP 98
71043: AND
71044: IFFALSE 71123
71046: GO 71048
71048: DISABLE
71049: LD_INT 0
71051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71052: LD_ADDR_VAR 0 1
71056: PUSH
71057: LD_INT 22
71059: PUSH
71060: LD_OWVAR 2
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 30
71071: PUSH
71072: LD_INT 3
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PPUSH
71083: CALL_OW 69
71087: ST_TO_ADDR
// if not tmp then
71088: LD_VAR 0 1
71092: NOT
71093: IFFALSE 71097
// exit ;
71095: GO 71123
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71097: LD_VAR 0 1
71101: PUSH
71102: LD_INT 1
71104: PPUSH
71105: LD_VAR 0 1
71109: PPUSH
71110: CALL_OW 12
71114: ARRAY
71115: PPUSH
71116: LD_INT 1
71118: PPUSH
71119: CALL_OW 234
// end ;
71123: PPOPN 1
71125: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
71126: LD_EXP 51
71130: PUSH
71131: LD_EXP 99
71135: AND
71136: IFFALSE 71248
71138: GO 71140
71140: DISABLE
71141: LD_INT 0
71143: PPUSH
71144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71145: LD_ADDR_VAR 0 2
71149: PUSH
71150: LD_INT 22
71152: PUSH
71153: LD_OWVAR 2
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 2
71164: PUSH
71165: LD_INT 30
71167: PUSH
71168: LD_INT 27
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 30
71177: PUSH
71178: LD_INT 26
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 30
71187: PUSH
71188: LD_INT 28
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PPUSH
71205: CALL_OW 69
71209: ST_TO_ADDR
// if not tmp then
71210: LD_VAR 0 2
71214: NOT
71215: IFFALSE 71219
// exit ;
71217: GO 71248
// for i in tmp do
71219: LD_ADDR_VAR 0 1
71223: PUSH
71224: LD_VAR 0 2
71228: PUSH
71229: FOR_IN
71230: IFFALSE 71246
// SetLives ( i , 1 ) ;
71232: LD_VAR 0 1
71236: PPUSH
71237: LD_INT 1
71239: PPUSH
71240: CALL_OW 234
71244: GO 71229
71246: POP
71247: POP
// end ;
71248: PPOPN 2
71250: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71251: LD_EXP 51
71255: PUSH
71256: LD_EXP 100
71260: AND
71261: IFFALSE 71548
71263: GO 71265
71265: DISABLE
71266: LD_INT 0
71268: PPUSH
71269: PPUSH
71270: PPUSH
// begin i := rand ( 1 , 7 ) ;
71271: LD_ADDR_VAR 0 1
71275: PUSH
71276: LD_INT 1
71278: PPUSH
71279: LD_INT 7
71281: PPUSH
71282: CALL_OW 12
71286: ST_TO_ADDR
// case i of 1 :
71287: LD_VAR 0 1
71291: PUSH
71292: LD_INT 1
71294: DOUBLE
71295: EQUAL
71296: IFTRUE 71300
71298: GO 71310
71300: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71301: LD_STRING earthquake(getX(game), 0, 32)
71303: PPUSH
71304: CALL_OW 559
71308: GO 71548
71310: LD_INT 2
71312: DOUBLE
71313: EQUAL
71314: IFTRUE 71318
71316: GO 71332
71318: POP
// begin ToLua ( displayStucuk(); ) ;
71319: LD_STRING displayStucuk();
71321: PPUSH
71322: CALL_OW 559
// ResetFog ;
71326: CALL_OW 335
// end ; 3 :
71330: GO 71548
71332: LD_INT 3
71334: DOUBLE
71335: EQUAL
71336: IFTRUE 71340
71338: GO 71444
71340: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71341: LD_ADDR_VAR 0 2
71345: PUSH
71346: LD_INT 22
71348: PUSH
71349: LD_OWVAR 2
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 25
71360: PUSH
71361: LD_INT 1
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PPUSH
71372: CALL_OW 69
71376: ST_TO_ADDR
// if not tmp then
71377: LD_VAR 0 2
71381: NOT
71382: IFFALSE 71386
// exit ;
71384: GO 71548
// un := tmp [ rand ( 1 , tmp ) ] ;
71386: LD_ADDR_VAR 0 3
71390: PUSH
71391: LD_VAR 0 2
71395: PUSH
71396: LD_INT 1
71398: PPUSH
71399: LD_VAR 0 2
71403: PPUSH
71404: CALL_OW 12
71408: ARRAY
71409: ST_TO_ADDR
// if Crawls ( un ) then
71410: LD_VAR 0 3
71414: PPUSH
71415: CALL_OW 318
71419: IFFALSE 71430
// ComWalk ( un ) ;
71421: LD_VAR 0 3
71425: PPUSH
71426: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71430: LD_VAR 0 3
71434: PPUSH
71435: LD_INT 8
71437: PPUSH
71438: CALL_OW 336
// end ; 4 :
71442: GO 71548
71444: LD_INT 4
71446: DOUBLE
71447: EQUAL
71448: IFTRUE 71452
71450: GO 71526
71452: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71453: LD_ADDR_VAR 0 2
71457: PUSH
71458: LD_INT 22
71460: PUSH
71461: LD_OWVAR 2
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 30
71472: PUSH
71473: LD_INT 29
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PPUSH
71484: CALL_OW 69
71488: ST_TO_ADDR
// if not tmp then
71489: LD_VAR 0 2
71493: NOT
71494: IFFALSE 71498
// exit ;
71496: GO 71548
// CenterNowOnUnits ( tmp [ 1 ] ) ;
71498: LD_VAR 0 2
71502: PUSH
71503: LD_INT 1
71505: ARRAY
71506: PPUSH
71507: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
71511: LD_VAR 0 2
71515: PUSH
71516: LD_INT 1
71518: ARRAY
71519: PPUSH
71520: CALL_OW 65
// end ; 5 .. 7 :
71524: GO 71548
71526: LD_INT 5
71528: DOUBLE
71529: GREATEREQUAL
71530: IFFALSE 71538
71532: LD_INT 7
71534: DOUBLE
71535: LESSEQUAL
71536: IFTRUE 71540
71538: GO 71547
71540: POP
// StreamSibBomb ; end ;
71541: CALL 67785 0 0
71545: GO 71548
71547: POP
// end ;
71548: PPOPN 3
71550: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71551: LD_EXP 51
71555: PUSH
71556: LD_EXP 101
71560: AND
71561: IFFALSE 71717
71563: GO 71565
71565: DISABLE
71566: LD_INT 0
71568: PPUSH
71569: PPUSH
71570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71571: LD_ADDR_VAR 0 2
71575: PUSH
71576: LD_INT 81
71578: PUSH
71579: LD_OWVAR 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 2
71590: PUSH
71591: LD_INT 21
71593: PUSH
71594: LD_INT 1
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 21
71603: PUSH
71604: LD_INT 2
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PPUSH
71620: CALL_OW 69
71624: ST_TO_ADDR
// if not tmp then
71625: LD_VAR 0 2
71629: NOT
71630: IFFALSE 71634
// exit ;
71632: GO 71717
// p := 0 ;
71634: LD_ADDR_VAR 0 3
71638: PUSH
71639: LD_INT 0
71641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71642: LD_INT 35
71644: PPUSH
71645: CALL_OW 67
// p := p + 1 ;
71649: LD_ADDR_VAR 0 3
71653: PUSH
71654: LD_VAR 0 3
71658: PUSH
71659: LD_INT 1
71661: PLUS
71662: ST_TO_ADDR
// for i in tmp do
71663: LD_ADDR_VAR 0 1
71667: PUSH
71668: LD_VAR 0 2
71672: PUSH
71673: FOR_IN
71674: IFFALSE 71705
// if GetLives ( i ) < 1000 then
71676: LD_VAR 0 1
71680: PPUSH
71681: CALL_OW 256
71685: PUSH
71686: LD_INT 1000
71688: LESS
71689: IFFALSE 71703
// SetLives ( i , 1000 ) ;
71691: LD_VAR 0 1
71695: PPUSH
71696: LD_INT 1000
71698: PPUSH
71699: CALL_OW 234
71703: GO 71673
71705: POP
71706: POP
// until p > 20 ;
71707: LD_VAR 0 3
71711: PUSH
71712: LD_INT 20
71714: GREATER
71715: IFFALSE 71642
// end ;
71717: PPOPN 3
71719: END
// every 0 0$1 trigger StreamModeActive and sTime do
71720: LD_EXP 51
71724: PUSH
71725: LD_EXP 102
71729: AND
71730: IFFALSE 71765
71732: GO 71734
71734: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71735: LD_INT 28
71737: PPUSH
71738: LD_OWVAR 2
71742: PPUSH
71743: LD_INT 2
71745: PPUSH
71746: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71750: LD_INT 30
71752: PPUSH
71753: LD_OWVAR 2
71757: PPUSH
71758: LD_INT 2
71760: PPUSH
71761: CALL_OW 322
// end ;
71765: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71766: LD_EXP 51
71770: PUSH
71771: LD_EXP 103
71775: AND
71776: IFFALSE 71897
71778: GO 71780
71780: DISABLE
71781: LD_INT 0
71783: PPUSH
71784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71785: LD_ADDR_VAR 0 2
71789: PUSH
71790: LD_INT 22
71792: PUSH
71793: LD_OWVAR 2
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 21
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 3
71814: PUSH
71815: LD_INT 23
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: LIST
71833: PPUSH
71834: CALL_OW 69
71838: ST_TO_ADDR
// if not tmp then
71839: LD_VAR 0 2
71843: NOT
71844: IFFALSE 71848
// exit ;
71846: GO 71897
// for i in tmp do
71848: LD_ADDR_VAR 0 1
71852: PUSH
71853: LD_VAR 0 2
71857: PUSH
71858: FOR_IN
71859: IFFALSE 71895
// begin if Crawls ( i ) then
71861: LD_VAR 0 1
71865: PPUSH
71866: CALL_OW 318
71870: IFFALSE 71881
// ComWalk ( i ) ;
71872: LD_VAR 0 1
71876: PPUSH
71877: CALL_OW 138
// SetClass ( i , 2 ) ;
71881: LD_VAR 0 1
71885: PPUSH
71886: LD_INT 2
71888: PPUSH
71889: CALL_OW 336
// end ;
71893: GO 71858
71895: POP
71896: POP
// end ;
71897: PPOPN 2
71899: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71900: LD_EXP 51
71904: PUSH
71905: LD_EXP 104
71909: AND
71910: IFFALSE 72198
71912: GO 71914
71914: DISABLE
71915: LD_INT 0
71917: PPUSH
71918: PPUSH
71919: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71920: LD_OWVAR 2
71924: PPUSH
71925: LD_INT 9
71927: PPUSH
71928: LD_INT 1
71930: PPUSH
71931: LD_INT 1
71933: PPUSH
71934: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71938: LD_INT 9
71940: PPUSH
71941: LD_OWVAR 2
71945: PPUSH
71946: CALL_OW 343
// uc_side := 9 ;
71950: LD_ADDR_OWVAR 20
71954: PUSH
71955: LD_INT 9
71957: ST_TO_ADDR
// uc_nation := 2 ;
71958: LD_ADDR_OWVAR 21
71962: PUSH
71963: LD_INT 2
71965: ST_TO_ADDR
// hc_name := Dark Warrior ;
71966: LD_ADDR_OWVAR 26
71970: PUSH
71971: LD_STRING Dark Warrior
71973: ST_TO_ADDR
// hc_gallery :=  ;
71974: LD_ADDR_OWVAR 33
71978: PUSH
71979: LD_STRING 
71981: ST_TO_ADDR
// hc_noskilllimit := true ;
71982: LD_ADDR_OWVAR 76
71986: PUSH
71987: LD_INT 1
71989: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71990: LD_ADDR_OWVAR 31
71994: PUSH
71995: LD_INT 30
71997: PUSH
71998: LD_INT 30
72000: PUSH
72001: LD_INT 30
72003: PUSH
72004: LD_INT 30
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: ST_TO_ADDR
// un := CreateHuman ;
72013: LD_ADDR_VAR 0 3
72017: PUSH
72018: CALL_OW 44
72022: ST_TO_ADDR
// hc_noskilllimit := false ;
72023: LD_ADDR_OWVAR 76
72027: PUSH
72028: LD_INT 0
72030: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72031: LD_VAR 0 3
72035: PPUSH
72036: LD_INT 1
72038: PPUSH
72039: CALL_OW 51
// ToLua ( playRanger() ) ;
72043: LD_STRING playRanger()
72045: PPUSH
72046: CALL_OW 559
// p := 0 ;
72050: LD_ADDR_VAR 0 2
72054: PUSH
72055: LD_INT 0
72057: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72058: LD_INT 35
72060: PPUSH
72061: CALL_OW 67
// p := p + 1 ;
72065: LD_ADDR_VAR 0 2
72069: PUSH
72070: LD_VAR 0 2
72074: PUSH
72075: LD_INT 1
72077: PLUS
72078: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
72079: LD_VAR 0 3
72083: PPUSH
72084: CALL_OW 256
72088: PUSH
72089: LD_INT 1000
72091: LESS
72092: IFFALSE 72106
// SetLives ( un , 1000 ) ;
72094: LD_VAR 0 3
72098: PPUSH
72099: LD_INT 1000
72101: PPUSH
72102: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
72106: LD_VAR 0 3
72110: PPUSH
72111: LD_INT 81
72113: PUSH
72114: LD_OWVAR 2
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 91
72125: PUSH
72126: LD_VAR 0 3
72130: PUSH
72131: LD_INT 30
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: LIST
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PPUSH
72143: CALL_OW 69
72147: PPUSH
72148: LD_VAR 0 3
72152: PPUSH
72153: CALL_OW 74
72157: PPUSH
72158: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72162: LD_VAR 0 2
72166: PUSH
72167: LD_INT 80
72169: GREATER
72170: PUSH
72171: LD_VAR 0 3
72175: PPUSH
72176: CALL_OW 301
72180: OR
72181: IFFALSE 72058
// if un then
72183: LD_VAR 0 3
72187: IFFALSE 72198
// RemoveUnit ( un ) ;
72189: LD_VAR 0 3
72193: PPUSH
72194: CALL_OW 64
// end ;
72198: PPOPN 3
72200: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72201: LD_EXP 105
72205: IFFALSE 72321
72207: GO 72209
72209: DISABLE
72210: LD_INT 0
72212: PPUSH
72213: PPUSH
72214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72215: LD_ADDR_VAR 0 2
72219: PUSH
72220: LD_INT 81
72222: PUSH
72223: LD_OWVAR 2
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 21
72234: PUSH
72235: LD_INT 1
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PPUSH
72246: CALL_OW 69
72250: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72251: LD_STRING playComputer()
72253: PPUSH
72254: CALL_OW 559
// if not tmp then
72258: LD_VAR 0 2
72262: NOT
72263: IFFALSE 72267
// exit ;
72265: GO 72321
// for i in tmp do
72267: LD_ADDR_VAR 0 1
72271: PUSH
72272: LD_VAR 0 2
72276: PUSH
72277: FOR_IN
72278: IFFALSE 72319
// for j := 1 to 4 do
72280: LD_ADDR_VAR 0 3
72284: PUSH
72285: DOUBLE
72286: LD_INT 1
72288: DEC
72289: ST_TO_ADDR
72290: LD_INT 4
72292: PUSH
72293: FOR_TO
72294: IFFALSE 72315
// SetSkill ( i , j , 10 ) ;
72296: LD_VAR 0 1
72300: PPUSH
72301: LD_VAR 0 3
72305: PPUSH
72306: LD_INT 10
72308: PPUSH
72309: CALL_OW 237
72313: GO 72293
72315: POP
72316: POP
72317: GO 72277
72319: POP
72320: POP
// end ;
72321: PPOPN 3
72323: END
// every 0 0$1 trigger s30 do var i , tmp ;
72324: LD_EXP 106
72328: IFFALSE 72397
72330: GO 72332
72332: DISABLE
72333: LD_INT 0
72335: PPUSH
72336: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72337: LD_ADDR_VAR 0 2
72341: PUSH
72342: LD_INT 22
72344: PUSH
72345: LD_OWVAR 2
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PPUSH
72354: CALL_OW 69
72358: ST_TO_ADDR
// if not tmp then
72359: LD_VAR 0 2
72363: NOT
72364: IFFALSE 72368
// exit ;
72366: GO 72397
// for i in tmp do
72368: LD_ADDR_VAR 0 1
72372: PUSH
72373: LD_VAR 0 2
72377: PUSH
72378: FOR_IN
72379: IFFALSE 72395
// SetLives ( i , 300 ) ;
72381: LD_VAR 0 1
72385: PPUSH
72386: LD_INT 300
72388: PPUSH
72389: CALL_OW 234
72393: GO 72378
72395: POP
72396: POP
// end ;
72397: PPOPN 2
72399: END
// every 0 0$1 trigger s60 do var i , tmp ;
72400: LD_EXP 107
72404: IFFALSE 72473
72406: GO 72408
72408: DISABLE
72409: LD_INT 0
72411: PPUSH
72412: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72413: LD_ADDR_VAR 0 2
72417: PUSH
72418: LD_INT 22
72420: PUSH
72421: LD_OWVAR 2
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PPUSH
72430: CALL_OW 69
72434: ST_TO_ADDR
// if not tmp then
72435: LD_VAR 0 2
72439: NOT
72440: IFFALSE 72444
// exit ;
72442: GO 72473
// for i in tmp do
72444: LD_ADDR_VAR 0 1
72448: PUSH
72449: LD_VAR 0 2
72453: PUSH
72454: FOR_IN
72455: IFFALSE 72471
// SetLives ( i , 600 ) ;
72457: LD_VAR 0 1
72461: PPUSH
72462: LD_INT 600
72464: PPUSH
72465: CALL_OW 234
72469: GO 72454
72471: POP
72472: POP
// end ;
72473: PPOPN 2
72475: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72476: LD_INT 0
72478: PPUSH
// case cmd of 301 :
72479: LD_VAR 0 1
72483: PUSH
72484: LD_INT 301
72486: DOUBLE
72487: EQUAL
72488: IFTRUE 72492
72490: GO 72524
72492: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72493: LD_VAR 0 6
72497: PPUSH
72498: LD_VAR 0 7
72502: PPUSH
72503: LD_VAR 0 8
72507: PPUSH
72508: LD_VAR 0 4
72512: PPUSH
72513: LD_VAR 0 5
72517: PPUSH
72518: CALL 73733 0 5
72522: GO 72645
72524: LD_INT 302
72526: DOUBLE
72527: EQUAL
72528: IFTRUE 72532
72530: GO 72569
72532: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72533: LD_VAR 0 6
72537: PPUSH
72538: LD_VAR 0 7
72542: PPUSH
72543: LD_VAR 0 8
72547: PPUSH
72548: LD_VAR 0 9
72552: PPUSH
72553: LD_VAR 0 4
72557: PPUSH
72558: LD_VAR 0 5
72562: PPUSH
72563: CALL 73824 0 6
72567: GO 72645
72569: LD_INT 303
72571: DOUBLE
72572: EQUAL
72573: IFTRUE 72577
72575: GO 72614
72577: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72578: LD_VAR 0 6
72582: PPUSH
72583: LD_VAR 0 7
72587: PPUSH
72588: LD_VAR 0 8
72592: PPUSH
72593: LD_VAR 0 9
72597: PPUSH
72598: LD_VAR 0 4
72602: PPUSH
72603: LD_VAR 0 5
72607: PPUSH
72608: CALL 72650 0 6
72612: GO 72645
72614: LD_INT 304
72616: DOUBLE
72617: EQUAL
72618: IFTRUE 72622
72620: GO 72644
72622: POP
// hHackTeleport ( unit , x , y ) ; end ;
72623: LD_VAR 0 2
72627: PPUSH
72628: LD_VAR 0 4
72632: PPUSH
72633: LD_VAR 0 5
72637: PPUSH
72638: CALL 74417 0 3
72642: GO 72645
72644: POP
// end ;
72645: LD_VAR 0 12
72649: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72650: LD_INT 0
72652: PPUSH
72653: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72654: LD_VAR 0 1
72658: PUSH
72659: LD_INT 1
72661: LESS
72662: PUSH
72663: LD_VAR 0 1
72667: PUSH
72668: LD_INT 3
72670: GREATER
72671: OR
72672: PUSH
72673: LD_VAR 0 5
72677: PPUSH
72678: LD_VAR 0 6
72682: PPUSH
72683: CALL_OW 428
72687: OR
72688: IFFALSE 72692
// exit ;
72690: GO 73420
// uc_side := your_side ;
72692: LD_ADDR_OWVAR 20
72696: PUSH
72697: LD_OWVAR 2
72701: ST_TO_ADDR
// uc_nation := nation ;
72702: LD_ADDR_OWVAR 21
72706: PUSH
72707: LD_VAR 0 1
72711: ST_TO_ADDR
// bc_level = 1 ;
72712: LD_ADDR_OWVAR 43
72716: PUSH
72717: LD_INT 1
72719: ST_TO_ADDR
// case btype of 1 :
72720: LD_VAR 0 2
72724: PUSH
72725: LD_INT 1
72727: DOUBLE
72728: EQUAL
72729: IFTRUE 72733
72731: GO 72744
72733: POP
// bc_type := b_depot ; 2 :
72734: LD_ADDR_OWVAR 42
72738: PUSH
72739: LD_INT 0
72741: ST_TO_ADDR
72742: GO 73364
72744: LD_INT 2
72746: DOUBLE
72747: EQUAL
72748: IFTRUE 72752
72750: GO 72763
72752: POP
// bc_type := b_warehouse ; 3 :
72753: LD_ADDR_OWVAR 42
72757: PUSH
72758: LD_INT 1
72760: ST_TO_ADDR
72761: GO 73364
72763: LD_INT 3
72765: DOUBLE
72766: EQUAL
72767: IFTRUE 72771
72769: GO 72782
72771: POP
// bc_type := b_lab ; 4 .. 9 :
72772: LD_ADDR_OWVAR 42
72776: PUSH
72777: LD_INT 6
72779: ST_TO_ADDR
72780: GO 73364
72782: LD_INT 4
72784: DOUBLE
72785: GREATEREQUAL
72786: IFFALSE 72794
72788: LD_INT 9
72790: DOUBLE
72791: LESSEQUAL
72792: IFTRUE 72796
72794: GO 72856
72796: POP
// begin bc_type := b_lab_half ;
72797: LD_ADDR_OWVAR 42
72801: PUSH
72802: LD_INT 7
72804: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72805: LD_ADDR_OWVAR 44
72809: PUSH
72810: LD_INT 10
72812: PUSH
72813: LD_INT 11
72815: PUSH
72816: LD_INT 12
72818: PUSH
72819: LD_INT 15
72821: PUSH
72822: LD_INT 14
72824: PUSH
72825: LD_INT 13
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: PUSH
72836: LD_VAR 0 2
72840: PUSH
72841: LD_INT 3
72843: MINUS
72844: ARRAY
72845: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72846: LD_ADDR_OWVAR 45
72850: PUSH
72851: LD_INT 9
72853: ST_TO_ADDR
// end ; 10 .. 13 :
72854: GO 73364
72856: LD_INT 10
72858: DOUBLE
72859: GREATEREQUAL
72860: IFFALSE 72868
72862: LD_INT 13
72864: DOUBLE
72865: LESSEQUAL
72866: IFTRUE 72870
72868: GO 72947
72870: POP
// begin bc_type := b_lab_full ;
72871: LD_ADDR_OWVAR 42
72875: PUSH
72876: LD_INT 8
72878: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72879: LD_ADDR_OWVAR 44
72883: PUSH
72884: LD_INT 10
72886: PUSH
72887: LD_INT 12
72889: PUSH
72890: LD_INT 14
72892: PUSH
72893: LD_INT 13
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: PUSH
72902: LD_VAR 0 2
72906: PUSH
72907: LD_INT 9
72909: MINUS
72910: ARRAY
72911: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72912: LD_ADDR_OWVAR 45
72916: PUSH
72917: LD_INT 11
72919: PUSH
72920: LD_INT 15
72922: PUSH
72923: LD_INT 12
72925: PUSH
72926: LD_INT 15
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: PUSH
72935: LD_VAR 0 2
72939: PUSH
72940: LD_INT 9
72942: MINUS
72943: ARRAY
72944: ST_TO_ADDR
// end ; 14 :
72945: GO 73364
72947: LD_INT 14
72949: DOUBLE
72950: EQUAL
72951: IFTRUE 72955
72953: GO 72966
72955: POP
// bc_type := b_workshop ; 15 :
72956: LD_ADDR_OWVAR 42
72960: PUSH
72961: LD_INT 2
72963: ST_TO_ADDR
72964: GO 73364
72966: LD_INT 15
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 72974
72972: GO 72985
72974: POP
// bc_type := b_factory ; 16 :
72975: LD_ADDR_OWVAR 42
72979: PUSH
72980: LD_INT 3
72982: ST_TO_ADDR
72983: GO 73364
72985: LD_INT 16
72987: DOUBLE
72988: EQUAL
72989: IFTRUE 72993
72991: GO 73004
72993: POP
// bc_type := b_ext_gun ; 17 :
72994: LD_ADDR_OWVAR 42
72998: PUSH
72999: LD_INT 17
73001: ST_TO_ADDR
73002: GO 73364
73004: LD_INT 17
73006: DOUBLE
73007: EQUAL
73008: IFTRUE 73012
73010: GO 73040
73012: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73013: LD_ADDR_OWVAR 42
73017: PUSH
73018: LD_INT 19
73020: PUSH
73021: LD_INT 23
73023: PUSH
73024: LD_INT 19
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: LIST
73031: PUSH
73032: LD_VAR 0 1
73036: ARRAY
73037: ST_TO_ADDR
73038: GO 73364
73040: LD_INT 18
73042: DOUBLE
73043: EQUAL
73044: IFTRUE 73048
73046: GO 73059
73048: POP
// bc_type := b_ext_radar ; 19 :
73049: LD_ADDR_OWVAR 42
73053: PUSH
73054: LD_INT 20
73056: ST_TO_ADDR
73057: GO 73364
73059: LD_INT 19
73061: DOUBLE
73062: EQUAL
73063: IFTRUE 73067
73065: GO 73078
73067: POP
// bc_type := b_ext_radio ; 20 :
73068: LD_ADDR_OWVAR 42
73072: PUSH
73073: LD_INT 22
73075: ST_TO_ADDR
73076: GO 73364
73078: LD_INT 20
73080: DOUBLE
73081: EQUAL
73082: IFTRUE 73086
73084: GO 73097
73086: POP
// bc_type := b_ext_siberium ; 21 :
73087: LD_ADDR_OWVAR 42
73091: PUSH
73092: LD_INT 21
73094: ST_TO_ADDR
73095: GO 73364
73097: LD_INT 21
73099: DOUBLE
73100: EQUAL
73101: IFTRUE 73105
73103: GO 73116
73105: POP
// bc_type := b_ext_computer ; 22 :
73106: LD_ADDR_OWVAR 42
73110: PUSH
73111: LD_INT 24
73113: ST_TO_ADDR
73114: GO 73364
73116: LD_INT 22
73118: DOUBLE
73119: EQUAL
73120: IFTRUE 73124
73122: GO 73135
73124: POP
// bc_type := b_ext_track ; 23 :
73125: LD_ADDR_OWVAR 42
73129: PUSH
73130: LD_INT 16
73132: ST_TO_ADDR
73133: GO 73364
73135: LD_INT 23
73137: DOUBLE
73138: EQUAL
73139: IFTRUE 73143
73141: GO 73154
73143: POP
// bc_type := b_ext_laser ; 24 :
73144: LD_ADDR_OWVAR 42
73148: PUSH
73149: LD_INT 25
73151: ST_TO_ADDR
73152: GO 73364
73154: LD_INT 24
73156: DOUBLE
73157: EQUAL
73158: IFTRUE 73162
73160: GO 73173
73162: POP
// bc_type := b_control_tower ; 25 :
73163: LD_ADDR_OWVAR 42
73167: PUSH
73168: LD_INT 36
73170: ST_TO_ADDR
73171: GO 73364
73173: LD_INT 25
73175: DOUBLE
73176: EQUAL
73177: IFTRUE 73181
73179: GO 73192
73181: POP
// bc_type := b_breastwork ; 26 :
73182: LD_ADDR_OWVAR 42
73186: PUSH
73187: LD_INT 31
73189: ST_TO_ADDR
73190: GO 73364
73192: LD_INT 26
73194: DOUBLE
73195: EQUAL
73196: IFTRUE 73200
73198: GO 73211
73200: POP
// bc_type := b_bunker ; 27 :
73201: LD_ADDR_OWVAR 42
73205: PUSH
73206: LD_INT 32
73208: ST_TO_ADDR
73209: GO 73364
73211: LD_INT 27
73213: DOUBLE
73214: EQUAL
73215: IFTRUE 73219
73217: GO 73230
73219: POP
// bc_type := b_turret ; 28 :
73220: LD_ADDR_OWVAR 42
73224: PUSH
73225: LD_INT 33
73227: ST_TO_ADDR
73228: GO 73364
73230: LD_INT 28
73232: DOUBLE
73233: EQUAL
73234: IFTRUE 73238
73236: GO 73249
73238: POP
// bc_type := b_armoury ; 29 :
73239: LD_ADDR_OWVAR 42
73243: PUSH
73244: LD_INT 4
73246: ST_TO_ADDR
73247: GO 73364
73249: LD_INT 29
73251: DOUBLE
73252: EQUAL
73253: IFTRUE 73257
73255: GO 73268
73257: POP
// bc_type := b_barracks ; 30 :
73258: LD_ADDR_OWVAR 42
73262: PUSH
73263: LD_INT 5
73265: ST_TO_ADDR
73266: GO 73364
73268: LD_INT 30
73270: DOUBLE
73271: EQUAL
73272: IFTRUE 73276
73274: GO 73287
73276: POP
// bc_type := b_solar_power ; 31 :
73277: LD_ADDR_OWVAR 42
73281: PUSH
73282: LD_INT 27
73284: ST_TO_ADDR
73285: GO 73364
73287: LD_INT 31
73289: DOUBLE
73290: EQUAL
73291: IFTRUE 73295
73293: GO 73306
73295: POP
// bc_type := b_oil_power ; 32 :
73296: LD_ADDR_OWVAR 42
73300: PUSH
73301: LD_INT 26
73303: ST_TO_ADDR
73304: GO 73364
73306: LD_INT 32
73308: DOUBLE
73309: EQUAL
73310: IFTRUE 73314
73312: GO 73325
73314: POP
// bc_type := b_siberite_power ; 33 :
73315: LD_ADDR_OWVAR 42
73319: PUSH
73320: LD_INT 28
73322: ST_TO_ADDR
73323: GO 73364
73325: LD_INT 33
73327: DOUBLE
73328: EQUAL
73329: IFTRUE 73333
73331: GO 73344
73333: POP
// bc_type := b_oil_mine ; 34 :
73334: LD_ADDR_OWVAR 42
73338: PUSH
73339: LD_INT 29
73341: ST_TO_ADDR
73342: GO 73364
73344: LD_INT 34
73346: DOUBLE
73347: EQUAL
73348: IFTRUE 73352
73350: GO 73363
73352: POP
// bc_type := b_siberite_mine ; end ;
73353: LD_ADDR_OWVAR 42
73357: PUSH
73358: LD_INT 30
73360: ST_TO_ADDR
73361: GO 73364
73363: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73364: LD_ADDR_VAR 0 8
73368: PUSH
73369: LD_VAR 0 5
73373: PPUSH
73374: LD_VAR 0 6
73378: PPUSH
73379: LD_VAR 0 3
73383: PPUSH
73384: CALL_OW 47
73388: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73389: LD_OWVAR 42
73393: PUSH
73394: LD_INT 32
73396: PUSH
73397: LD_INT 33
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: IN
73404: IFFALSE 73420
// PlaceWeaponTurret ( b , weapon ) ;
73406: LD_VAR 0 8
73410: PPUSH
73411: LD_VAR 0 4
73415: PPUSH
73416: CALL_OW 431
// end ;
73420: LD_VAR 0 7
73424: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73425: LD_INT 0
73427: PPUSH
73428: PPUSH
73429: PPUSH
73430: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73431: LD_ADDR_VAR 0 4
73435: PUSH
73436: LD_INT 22
73438: PUSH
73439: LD_OWVAR 2
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 2
73450: PUSH
73451: LD_INT 30
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 30
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: LIST
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PPUSH
73480: CALL_OW 69
73484: ST_TO_ADDR
// if not tmp then
73485: LD_VAR 0 4
73489: NOT
73490: IFFALSE 73494
// exit ;
73492: GO 73553
// for i in tmp do
73494: LD_ADDR_VAR 0 2
73498: PUSH
73499: LD_VAR 0 4
73503: PUSH
73504: FOR_IN
73505: IFFALSE 73551
// for j = 1 to 3 do
73507: LD_ADDR_VAR 0 3
73511: PUSH
73512: DOUBLE
73513: LD_INT 1
73515: DEC
73516: ST_TO_ADDR
73517: LD_INT 3
73519: PUSH
73520: FOR_TO
73521: IFFALSE 73547
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73523: LD_VAR 0 2
73527: PPUSH
73528: CALL_OW 274
73532: PPUSH
73533: LD_VAR 0 3
73537: PPUSH
73538: LD_INT 99999
73540: PPUSH
73541: CALL_OW 277
73545: GO 73520
73547: POP
73548: POP
73549: GO 73504
73551: POP
73552: POP
// end ;
73553: LD_VAR 0 1
73557: RET
// export function hHackSetLevel10 ; var i , j ; begin
73558: LD_INT 0
73560: PPUSH
73561: PPUSH
73562: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73563: LD_ADDR_VAR 0 2
73567: PUSH
73568: LD_INT 21
73570: PUSH
73571: LD_INT 1
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PPUSH
73578: CALL_OW 69
73582: PUSH
73583: FOR_IN
73584: IFFALSE 73636
// if IsSelected ( i ) then
73586: LD_VAR 0 2
73590: PPUSH
73591: CALL_OW 306
73595: IFFALSE 73634
// begin for j := 1 to 4 do
73597: LD_ADDR_VAR 0 3
73601: PUSH
73602: DOUBLE
73603: LD_INT 1
73605: DEC
73606: ST_TO_ADDR
73607: LD_INT 4
73609: PUSH
73610: FOR_TO
73611: IFFALSE 73632
// SetSkill ( i , j , 10 ) ;
73613: LD_VAR 0 2
73617: PPUSH
73618: LD_VAR 0 3
73622: PPUSH
73623: LD_INT 10
73625: PPUSH
73626: CALL_OW 237
73630: GO 73610
73632: POP
73633: POP
// end ;
73634: GO 73583
73636: POP
73637: POP
// end ;
73638: LD_VAR 0 1
73642: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73643: LD_INT 0
73645: PPUSH
73646: PPUSH
73647: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_INT 22
73655: PUSH
73656: LD_OWVAR 2
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 21
73667: PUSH
73668: LD_INT 1
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: EMPTY
73676: LIST
73677: LIST
73678: PPUSH
73679: CALL_OW 69
73683: PUSH
73684: FOR_IN
73685: IFFALSE 73726
// begin for j := 1 to 4 do
73687: LD_ADDR_VAR 0 3
73691: PUSH
73692: DOUBLE
73693: LD_INT 1
73695: DEC
73696: ST_TO_ADDR
73697: LD_INT 4
73699: PUSH
73700: FOR_TO
73701: IFFALSE 73722
// SetSkill ( i , j , 10 ) ;
73703: LD_VAR 0 2
73707: PPUSH
73708: LD_VAR 0 3
73712: PPUSH
73713: LD_INT 10
73715: PPUSH
73716: CALL_OW 237
73720: GO 73700
73722: POP
73723: POP
// end ;
73724: GO 73684
73726: POP
73727: POP
// end ;
73728: LD_VAR 0 1
73732: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73733: LD_INT 0
73735: PPUSH
// uc_side := your_side ;
73736: LD_ADDR_OWVAR 20
73740: PUSH
73741: LD_OWVAR 2
73745: ST_TO_ADDR
// uc_nation := nation ;
73746: LD_ADDR_OWVAR 21
73750: PUSH
73751: LD_VAR 0 1
73755: ST_TO_ADDR
// InitHc ;
73756: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73760: LD_INT 0
73762: PPUSH
73763: LD_VAR 0 2
73767: PPUSH
73768: LD_VAR 0 3
73772: PPUSH
73773: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73777: LD_VAR 0 4
73781: PPUSH
73782: LD_VAR 0 5
73786: PPUSH
73787: CALL_OW 428
73791: PUSH
73792: LD_INT 0
73794: EQUAL
73795: IFFALSE 73819
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73797: CALL_OW 44
73801: PPUSH
73802: LD_VAR 0 4
73806: PPUSH
73807: LD_VAR 0 5
73811: PPUSH
73812: LD_INT 1
73814: PPUSH
73815: CALL_OW 48
// end ;
73819: LD_VAR 0 6
73823: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73824: LD_INT 0
73826: PPUSH
73827: PPUSH
// uc_side := your_side ;
73828: LD_ADDR_OWVAR 20
73832: PUSH
73833: LD_OWVAR 2
73837: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73838: LD_VAR 0 1
73842: PUSH
73843: LD_INT 1
73845: PUSH
73846: LD_INT 2
73848: PUSH
73849: LD_INT 3
73851: PUSH
73852: LD_INT 4
73854: PUSH
73855: LD_INT 5
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: IN
73865: IFFALSE 73877
// uc_nation := nation_american else
73867: LD_ADDR_OWVAR 21
73871: PUSH
73872: LD_INT 1
73874: ST_TO_ADDR
73875: GO 73920
// if chassis in [ 11 , 12 , 13 , 14 ] then
73877: LD_VAR 0 1
73881: PUSH
73882: LD_INT 11
73884: PUSH
73885: LD_INT 12
73887: PUSH
73888: LD_INT 13
73890: PUSH
73891: LD_INT 14
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: IN
73900: IFFALSE 73912
// uc_nation := nation_arabian else
73902: LD_ADDR_OWVAR 21
73906: PUSH
73907: LD_INT 2
73909: ST_TO_ADDR
73910: GO 73920
// uc_nation := nation_russian ;
73912: LD_ADDR_OWVAR 21
73916: PUSH
73917: LD_INT 3
73919: ST_TO_ADDR
// vc_chassis := chassis ;
73920: LD_ADDR_OWVAR 37
73924: PUSH
73925: LD_VAR 0 1
73929: ST_TO_ADDR
// vc_engine := engine ;
73930: LD_ADDR_OWVAR 39
73934: PUSH
73935: LD_VAR 0 2
73939: ST_TO_ADDR
// vc_control := control ;
73940: LD_ADDR_OWVAR 38
73944: PUSH
73945: LD_VAR 0 3
73949: ST_TO_ADDR
// vc_weapon := weapon ;
73950: LD_ADDR_OWVAR 40
73954: PUSH
73955: LD_VAR 0 4
73959: ST_TO_ADDR
// un := CreateVehicle ;
73960: LD_ADDR_VAR 0 8
73964: PUSH
73965: CALL_OW 45
73969: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73970: LD_VAR 0 8
73974: PPUSH
73975: LD_INT 0
73977: PPUSH
73978: LD_INT 5
73980: PPUSH
73981: CALL_OW 12
73985: PPUSH
73986: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73990: LD_VAR 0 8
73994: PPUSH
73995: LD_VAR 0 5
73999: PPUSH
74000: LD_VAR 0 6
74004: PPUSH
74005: LD_INT 1
74007: PPUSH
74008: CALL_OW 48
// end ;
74012: LD_VAR 0 7
74016: RET
// export hInvincible ; every 1 do
74017: GO 74019
74019: DISABLE
// hInvincible := [ ] ;
74020: LD_ADDR_EXP 108
74024: PUSH
74025: EMPTY
74026: ST_TO_ADDR
74027: END
// every 10 do var i ;
74028: GO 74030
74030: DISABLE
74031: LD_INT 0
74033: PPUSH
// begin enable ;
74034: ENABLE
// if not hInvincible then
74035: LD_EXP 108
74039: NOT
74040: IFFALSE 74044
// exit ;
74042: GO 74088
// for i in hInvincible do
74044: LD_ADDR_VAR 0 1
74048: PUSH
74049: LD_EXP 108
74053: PUSH
74054: FOR_IN
74055: IFFALSE 74086
// if GetLives ( i ) < 1000 then
74057: LD_VAR 0 1
74061: PPUSH
74062: CALL_OW 256
74066: PUSH
74067: LD_INT 1000
74069: LESS
74070: IFFALSE 74084
// SetLives ( i , 1000 ) ;
74072: LD_VAR 0 1
74076: PPUSH
74077: LD_INT 1000
74079: PPUSH
74080: CALL_OW 234
74084: GO 74054
74086: POP
74087: POP
// end ;
74088: PPOPN 1
74090: END
// export function hHackInvincible ; var i ; begin
74091: LD_INT 0
74093: PPUSH
74094: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74095: LD_ADDR_VAR 0 2
74099: PUSH
74100: LD_INT 2
74102: PUSH
74103: LD_INT 21
74105: PUSH
74106: LD_INT 1
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 21
74115: PUSH
74116: LD_INT 2
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: LIST
74127: PPUSH
74128: CALL_OW 69
74132: PUSH
74133: FOR_IN
74134: IFFALSE 74195
// if IsSelected ( i ) then
74136: LD_VAR 0 2
74140: PPUSH
74141: CALL_OW 306
74145: IFFALSE 74193
// begin if i in hInvincible then
74147: LD_VAR 0 2
74151: PUSH
74152: LD_EXP 108
74156: IN
74157: IFFALSE 74177
// hInvincible := hInvincible diff i else
74159: LD_ADDR_EXP 108
74163: PUSH
74164: LD_EXP 108
74168: PUSH
74169: LD_VAR 0 2
74173: DIFF
74174: ST_TO_ADDR
74175: GO 74193
// hInvincible := hInvincible union i ;
74177: LD_ADDR_EXP 108
74181: PUSH
74182: LD_EXP 108
74186: PUSH
74187: LD_VAR 0 2
74191: UNION
74192: ST_TO_ADDR
// end ;
74193: GO 74133
74195: POP
74196: POP
// end ;
74197: LD_VAR 0 1
74201: RET
// export function hHackInvisible ; var i , j ; begin
74202: LD_INT 0
74204: PPUSH
74205: PPUSH
74206: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74207: LD_ADDR_VAR 0 2
74211: PUSH
74212: LD_INT 21
74214: PUSH
74215: LD_INT 1
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PPUSH
74222: CALL_OW 69
74226: PUSH
74227: FOR_IN
74228: IFFALSE 74252
// if IsSelected ( i ) then
74230: LD_VAR 0 2
74234: PPUSH
74235: CALL_OW 306
74239: IFFALSE 74250
// ComForceInvisible ( i ) ;
74241: LD_VAR 0 2
74245: PPUSH
74246: CALL_OW 496
74250: GO 74227
74252: POP
74253: POP
// end ;
74254: LD_VAR 0 1
74258: RET
// export function hHackChangeYourSide ; begin
74259: LD_INT 0
74261: PPUSH
// if your_side = 8 then
74262: LD_OWVAR 2
74266: PUSH
74267: LD_INT 8
74269: EQUAL
74270: IFFALSE 74282
// your_side := 0 else
74272: LD_ADDR_OWVAR 2
74276: PUSH
74277: LD_INT 0
74279: ST_TO_ADDR
74280: GO 74296
// your_side := your_side + 1 ;
74282: LD_ADDR_OWVAR 2
74286: PUSH
74287: LD_OWVAR 2
74291: PUSH
74292: LD_INT 1
74294: PLUS
74295: ST_TO_ADDR
// end ;
74296: LD_VAR 0 1
74300: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74301: LD_INT 0
74303: PPUSH
74304: PPUSH
74305: PPUSH
// for i in all_units do
74306: LD_ADDR_VAR 0 2
74310: PUSH
74311: LD_OWVAR 3
74315: PUSH
74316: FOR_IN
74317: IFFALSE 74395
// if IsSelected ( i ) then
74319: LD_VAR 0 2
74323: PPUSH
74324: CALL_OW 306
74328: IFFALSE 74393
// begin j := GetSide ( i ) ;
74330: LD_ADDR_VAR 0 3
74334: PUSH
74335: LD_VAR 0 2
74339: PPUSH
74340: CALL_OW 255
74344: ST_TO_ADDR
// if j = 8 then
74345: LD_VAR 0 3
74349: PUSH
74350: LD_INT 8
74352: EQUAL
74353: IFFALSE 74365
// j := 0 else
74355: LD_ADDR_VAR 0 3
74359: PUSH
74360: LD_INT 0
74362: ST_TO_ADDR
74363: GO 74379
// j := j + 1 ;
74365: LD_ADDR_VAR 0 3
74369: PUSH
74370: LD_VAR 0 3
74374: PUSH
74375: LD_INT 1
74377: PLUS
74378: ST_TO_ADDR
// SetSide ( i , j ) ;
74379: LD_VAR 0 2
74383: PPUSH
74384: LD_VAR 0 3
74388: PPUSH
74389: CALL_OW 235
// end ;
74393: GO 74316
74395: POP
74396: POP
// end ;
74397: LD_VAR 0 1
74401: RET
// export function hHackFog ; begin
74402: LD_INT 0
74404: PPUSH
// FogOff ( true ) ;
74405: LD_INT 1
74407: PPUSH
74408: CALL_OW 344
// end ;
74412: LD_VAR 0 1
74416: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74417: LD_INT 0
74419: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74420: LD_VAR 0 1
74424: PPUSH
74425: LD_VAR 0 2
74429: PPUSH
74430: LD_VAR 0 3
74434: PPUSH
74435: LD_INT 1
74437: PPUSH
74438: LD_INT 1
74440: PPUSH
74441: CALL_OW 483
// CenterOnXY ( x , y ) ;
74445: LD_VAR 0 2
74449: PPUSH
74450: LD_VAR 0 3
74454: PPUSH
74455: CALL_OW 84
// end ;
74459: LD_VAR 0 4
74463: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
74464: LD_INT 0
74466: PPUSH
74467: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
74468: LD_VAR 0 1
74472: NOT
74473: PUSH
74474: LD_VAR 0 2
74478: PPUSH
74479: LD_VAR 0 3
74483: PPUSH
74484: CALL_OW 488
74488: NOT
74489: OR
74490: PUSH
74491: LD_VAR 0 1
74495: PPUSH
74496: CALL_OW 266
74500: PUSH
74501: LD_INT 3
74503: NONEQUAL
74504: PUSH
74505: LD_VAR 0 1
74509: PPUSH
74510: CALL_OW 247
74514: PUSH
74515: LD_INT 1
74517: EQUAL
74518: NOT
74519: AND
74520: OR
74521: IFFALSE 74525
// exit ;
74523: GO 74807
// if GetType ( factory ) = unit_human then
74525: LD_VAR 0 1
74529: PPUSH
74530: CALL_OW 247
74534: PUSH
74535: LD_INT 1
74537: EQUAL
74538: IFFALSE 74555
// factory := IsInUnit ( factory ) ;
74540: LD_ADDR_VAR 0 1
74544: PUSH
74545: LD_VAR 0 1
74549: PPUSH
74550: CALL_OW 310
74554: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74555: LD_VAR 0 1
74559: PPUSH
74560: CALL_OW 266
74564: PUSH
74565: LD_INT 3
74567: NONEQUAL
74568: IFFALSE 74572
// exit ;
74570: GO 74807
// for i := 1 to Count ( factoryWaypoints ) do
74572: LD_ADDR_VAR 0 5
74576: PUSH
74577: DOUBLE
74578: LD_INT 1
74580: DEC
74581: ST_TO_ADDR
74582: LD_EXP 109
74586: PPUSH
74587: CALL 19185 0 1
74591: PUSH
74592: FOR_TO
74593: IFFALSE 74755
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74595: LD_VAR 0 2
74599: PPUSH
74600: LD_VAR 0 3
74604: PPUSH
74605: CALL_OW 428
74609: PUSH
74610: LD_EXP 109
74614: PUSH
74615: LD_VAR 0 5
74619: ARRAY
74620: PUSH
74621: LD_INT 2
74623: ARRAY
74624: EQUAL
74625: IFFALSE 74657
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74627: LD_ADDR_EXP 109
74631: PUSH
74632: LD_EXP 109
74636: PPUSH
74637: LD_VAR 0 5
74641: PPUSH
74642: CALL_OW 3
74646: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74647: CALL 74812 0 0
// exit ;
74651: POP
74652: POP
74653: GO 74807
// end else
74655: GO 74753
// if factory = factoryWaypoints [ i ] [ 2 ] then
74657: LD_VAR 0 1
74661: PUSH
74662: LD_EXP 109
74666: PUSH
74667: LD_VAR 0 5
74671: ARRAY
74672: PUSH
74673: LD_INT 2
74675: ARRAY
74676: EQUAL
74677: IFFALSE 74753
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74679: LD_ADDR_EXP 109
74683: PUSH
74684: LD_EXP 109
74688: PPUSH
74689: LD_VAR 0 5
74693: PPUSH
74694: CALL_OW 3
74698: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74699: LD_ADDR_EXP 109
74703: PUSH
74704: LD_EXP 109
74708: PPUSH
74709: LD_VAR 0 1
74713: PPUSH
74714: CALL_OW 255
74718: PUSH
74719: LD_VAR 0 1
74723: PUSH
74724: LD_VAR 0 2
74728: PUSH
74729: LD_VAR 0 3
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: PPUSH
74740: CALL 54866 0 2
74744: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74745: CALL 74812 0 0
// exit ;
74749: POP
74750: POP
74751: GO 74807
// end ; end ;
74753: GO 74592
74755: POP
74756: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74757: LD_ADDR_EXP 109
74761: PUSH
74762: LD_EXP 109
74766: PPUSH
74767: LD_VAR 0 1
74771: PPUSH
74772: CALL_OW 255
74776: PUSH
74777: LD_VAR 0 1
74781: PUSH
74782: LD_VAR 0 2
74786: PUSH
74787: LD_VAR 0 3
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: PPUSH
74798: CALL 54866 0 2
74802: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74803: CALL 74812 0 0
// end ;
74807: LD_VAR 0 4
74811: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74812: LD_INT 0
74814: PPUSH
74815: PPUSH
74816: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74817: LD_STRING resetFactoryWaypoint();
74819: PPUSH
74820: CALL_OW 559
// if factoryWaypoints then
74824: LD_EXP 109
74828: IFFALSE 74949
// begin list := factoryWaypoints ;
74830: LD_ADDR_VAR 0 3
74834: PUSH
74835: LD_EXP 109
74839: ST_TO_ADDR
// for i := 1 to list do
74840: LD_ADDR_VAR 0 2
74844: PUSH
74845: DOUBLE
74846: LD_INT 1
74848: DEC
74849: ST_TO_ADDR
74850: LD_VAR 0 3
74854: PUSH
74855: FOR_TO
74856: IFFALSE 74947
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74858: LD_STRING setFactoryWaypointXY(
74860: PUSH
74861: LD_VAR 0 3
74865: PUSH
74866: LD_VAR 0 2
74870: ARRAY
74871: PUSH
74872: LD_INT 1
74874: ARRAY
74875: STR
74876: PUSH
74877: LD_STRING ,
74879: STR
74880: PUSH
74881: LD_VAR 0 3
74885: PUSH
74886: LD_VAR 0 2
74890: ARRAY
74891: PUSH
74892: LD_INT 2
74894: ARRAY
74895: STR
74896: PUSH
74897: LD_STRING ,
74899: STR
74900: PUSH
74901: LD_VAR 0 3
74905: PUSH
74906: LD_VAR 0 2
74910: ARRAY
74911: PUSH
74912: LD_INT 3
74914: ARRAY
74915: STR
74916: PUSH
74917: LD_STRING ,
74919: STR
74920: PUSH
74921: LD_VAR 0 3
74925: PUSH
74926: LD_VAR 0 2
74930: ARRAY
74931: PUSH
74932: LD_INT 4
74934: ARRAY
74935: STR
74936: PUSH
74937: LD_STRING )
74939: STR
74940: PPUSH
74941: CALL_OW 559
74945: GO 74855
74947: POP
74948: POP
// end ; end ;
74949: LD_VAR 0 1
74953: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74954: LD_INT 0
74956: PPUSH
// if HexInfo ( x , y ) = warehouse then
74957: LD_VAR 0 2
74961: PPUSH
74962: LD_VAR 0 3
74966: PPUSH
74967: CALL_OW 428
74971: PUSH
74972: LD_VAR 0 1
74976: EQUAL
74977: IFFALSE 75004
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74979: LD_ADDR_EXP 111
74983: PUSH
74984: LD_EXP 111
74988: PPUSH
74989: LD_VAR 0 1
74993: PPUSH
74994: LD_INT 0
74996: PPUSH
74997: CALL_OW 1
75001: ST_TO_ADDR
75002: GO 75055
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75004: LD_ADDR_EXP 111
75008: PUSH
75009: LD_EXP 111
75013: PPUSH
75014: LD_VAR 0 1
75018: PPUSH
75019: LD_VAR 0 1
75023: PPUSH
75024: CALL_OW 255
75028: PUSH
75029: LD_VAR 0 1
75033: PUSH
75034: LD_VAR 0 2
75038: PUSH
75039: LD_VAR 0 3
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: PPUSH
75050: CALL_OW 1
75054: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75055: CALL 75064 0 0
// end ;
75059: LD_VAR 0 4
75063: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75064: LD_INT 0
75066: PPUSH
75067: PPUSH
75068: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75069: LD_STRING resetWarehouseGatheringPoints();
75071: PPUSH
75072: CALL_OW 559
// if warehouseGatheringPoints then
75076: LD_EXP 111
75080: IFFALSE 75206
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75082: LD_ADDR_VAR 0 3
75086: PUSH
75087: LD_EXP 111
75091: PPUSH
75092: CALL 58634 0 1
75096: ST_TO_ADDR
// for i := 1 to list do
75097: LD_ADDR_VAR 0 2
75101: PUSH
75102: DOUBLE
75103: LD_INT 1
75105: DEC
75106: ST_TO_ADDR
75107: LD_VAR 0 3
75111: PUSH
75112: FOR_TO
75113: IFFALSE 75204
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75115: LD_STRING setWarehouseGatheringPointXY(
75117: PUSH
75118: LD_VAR 0 3
75122: PUSH
75123: LD_VAR 0 2
75127: ARRAY
75128: PUSH
75129: LD_INT 1
75131: ARRAY
75132: STR
75133: PUSH
75134: LD_STRING ,
75136: STR
75137: PUSH
75138: LD_VAR 0 3
75142: PUSH
75143: LD_VAR 0 2
75147: ARRAY
75148: PUSH
75149: LD_INT 2
75151: ARRAY
75152: STR
75153: PUSH
75154: LD_STRING ,
75156: STR
75157: PUSH
75158: LD_VAR 0 3
75162: PUSH
75163: LD_VAR 0 2
75167: ARRAY
75168: PUSH
75169: LD_INT 3
75171: ARRAY
75172: STR
75173: PUSH
75174: LD_STRING ,
75176: STR
75177: PUSH
75178: LD_VAR 0 3
75182: PUSH
75183: LD_VAR 0 2
75187: ARRAY
75188: PUSH
75189: LD_INT 4
75191: ARRAY
75192: STR
75193: PUSH
75194: LD_STRING )
75196: STR
75197: PPUSH
75198: CALL_OW 559
75202: GO 75112
75204: POP
75205: POP
// end ; end ;
75206: LD_VAR 0 1
75210: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
75211: LD_EXP 111
75215: IFFALSE 75900
75217: GO 75219
75219: DISABLE
75220: LD_INT 0
75222: PPUSH
75223: PPUSH
75224: PPUSH
75225: PPUSH
75226: PPUSH
75227: PPUSH
75228: PPUSH
75229: PPUSH
75230: PPUSH
// begin enable ;
75231: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
75232: LD_ADDR_VAR 0 3
75236: PUSH
75237: LD_EXP 111
75241: PPUSH
75242: CALL 58634 0 1
75246: ST_TO_ADDR
// if not list then
75247: LD_VAR 0 3
75251: NOT
75252: IFFALSE 75256
// exit ;
75254: GO 75900
// for i := 1 to list do
75256: LD_ADDR_VAR 0 1
75260: PUSH
75261: DOUBLE
75262: LD_INT 1
75264: DEC
75265: ST_TO_ADDR
75266: LD_VAR 0 3
75270: PUSH
75271: FOR_TO
75272: IFFALSE 75898
// begin depot := list [ i ] [ 2 ] ;
75274: LD_ADDR_VAR 0 8
75278: PUSH
75279: LD_VAR 0 3
75283: PUSH
75284: LD_VAR 0 1
75288: ARRAY
75289: PUSH
75290: LD_INT 2
75292: ARRAY
75293: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
75294: LD_ADDR_VAR 0 5
75298: PUSH
75299: LD_VAR 0 3
75303: PUSH
75304: LD_VAR 0 1
75308: ARRAY
75309: PUSH
75310: LD_INT 1
75312: ARRAY
75313: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
75314: LD_VAR 0 8
75318: PPUSH
75319: CALL_OW 301
75323: PUSH
75324: LD_VAR 0 5
75328: PUSH
75329: LD_VAR 0 8
75333: PPUSH
75334: CALL_OW 255
75338: NONEQUAL
75339: OR
75340: IFFALSE 75369
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
75342: LD_ADDR_EXP 111
75346: PUSH
75347: LD_EXP 111
75351: PPUSH
75352: LD_VAR 0 8
75356: PPUSH
75357: LD_INT 0
75359: PPUSH
75360: CALL_OW 1
75364: ST_TO_ADDR
// exit ;
75365: POP
75366: POP
75367: GO 75900
// end ; x := list [ i ] [ 3 ] ;
75369: LD_ADDR_VAR 0 6
75373: PUSH
75374: LD_VAR 0 3
75378: PUSH
75379: LD_VAR 0 1
75383: ARRAY
75384: PUSH
75385: LD_INT 3
75387: ARRAY
75388: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
75389: LD_ADDR_VAR 0 7
75393: PUSH
75394: LD_VAR 0 3
75398: PUSH
75399: LD_VAR 0 1
75403: ARRAY
75404: PUSH
75405: LD_INT 4
75407: ARRAY
75408: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
75409: LD_ADDR_VAR 0 9
75413: PUSH
75414: LD_VAR 0 6
75418: PPUSH
75419: LD_VAR 0 7
75423: PPUSH
75424: LD_INT 16
75426: PPUSH
75427: CALL 57218 0 3
75431: ST_TO_ADDR
// if not cratesNearbyPoint then
75432: LD_VAR 0 9
75436: NOT
75437: IFFALSE 75443
// exit ;
75439: POP
75440: POP
75441: GO 75900
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
75443: LD_ADDR_VAR 0 4
75447: PUSH
75448: LD_INT 22
75450: PUSH
75451: LD_VAR 0 5
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 3
75462: PUSH
75463: LD_INT 60
75465: PUSH
75466: EMPTY
75467: LIST
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PUSH
75473: LD_INT 91
75475: PUSH
75476: LD_VAR 0 8
75480: PUSH
75481: LD_INT 6
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 2
75491: PUSH
75492: LD_INT 25
75494: PUSH
75495: LD_INT 2
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 25
75504: PUSH
75505: LD_INT 16
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: LIST
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: PPUSH
75523: CALL_OW 69
75527: PUSH
75528: LD_VAR 0 8
75532: PPUSH
75533: CALL_OW 313
75537: PPUSH
75538: LD_INT 3
75540: PUSH
75541: LD_INT 60
75543: PUSH
75544: EMPTY
75545: LIST
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 2
75553: PUSH
75554: LD_INT 25
75556: PUSH
75557: LD_INT 2
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 25
75566: PUSH
75567: LD_INT 16
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: LIST
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PPUSH
75583: CALL_OW 72
75587: UNION
75588: ST_TO_ADDR
// if tmp then
75589: LD_VAR 0 4
75593: IFFALSE 75673
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75595: LD_ADDR_VAR 0 4
75599: PUSH
75600: LD_VAR 0 4
75604: PPUSH
75605: LD_INT 3
75607: PPUSH
75608: CALL 55181 0 2
75612: ST_TO_ADDR
// for j in tmp do
75613: LD_ADDR_VAR 0 2
75617: PUSH
75618: LD_VAR 0 4
75622: PUSH
75623: FOR_IN
75624: IFFALSE 75667
// begin if IsInUnit ( j ) then
75626: LD_VAR 0 2
75630: PPUSH
75631: CALL_OW 310
75635: IFFALSE 75646
// ComExit ( j ) ;
75637: LD_VAR 0 2
75641: PPUSH
75642: CALL 55264 0 1
// AddComCollect ( j , x , y ) ;
75646: LD_VAR 0 2
75650: PPUSH
75651: LD_VAR 0 6
75655: PPUSH
75656: LD_VAR 0 7
75660: PPUSH
75661: CALL_OW 177
// end ;
75665: GO 75623
75667: POP
75668: POP
// exit ;
75669: POP
75670: POP
75671: GO 75900
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75673: LD_ADDR_VAR 0 4
75677: PUSH
75678: LD_INT 22
75680: PUSH
75681: LD_VAR 0 5
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 91
75692: PUSH
75693: LD_VAR 0 8
75697: PUSH
75698: LD_INT 8
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 2
75708: PUSH
75709: LD_INT 34
75711: PUSH
75712: LD_INT 12
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 34
75721: PUSH
75722: LD_INT 51
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 34
75731: PUSH
75732: LD_INT 32
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: LD_INT 34
75741: PUSH
75742: LD_INT 89
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: LIST
75760: PPUSH
75761: CALL_OW 69
75765: ST_TO_ADDR
// if tmp then
75766: LD_VAR 0 4
75770: IFFALSE 75896
// begin for j in tmp do
75772: LD_ADDR_VAR 0 2
75776: PUSH
75777: LD_VAR 0 4
75781: PUSH
75782: FOR_IN
75783: IFFALSE 75894
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75785: LD_VAR 0 2
75789: PPUSH
75790: CALL_OW 262
75794: PUSH
75795: LD_INT 3
75797: EQUAL
75798: PUSH
75799: LD_VAR 0 2
75803: PPUSH
75804: CALL_OW 261
75808: PUSH
75809: LD_INT 20
75811: GREATER
75812: OR
75813: PUSH
75814: LD_VAR 0 2
75818: PPUSH
75819: CALL_OW 314
75823: NOT
75824: AND
75825: PUSH
75826: LD_VAR 0 2
75830: PPUSH
75831: CALL_OW 263
75835: PUSH
75836: LD_INT 1
75838: NONEQUAL
75839: PUSH
75840: LD_VAR 0 2
75844: PPUSH
75845: CALL_OW 311
75849: OR
75850: AND
75851: IFFALSE 75892
// begin ComCollect ( j , x , y ) ;
75853: LD_VAR 0 2
75857: PPUSH
75858: LD_VAR 0 6
75862: PPUSH
75863: LD_VAR 0 7
75867: PPUSH
75868: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75872: LD_VAR 0 2
75876: PPUSH
75877: LD_VAR 0 8
75881: PPUSH
75882: CALL_OW 172
// exit ;
75886: POP
75887: POP
75888: POP
75889: POP
75890: GO 75900
// end ;
75892: GO 75782
75894: POP
75895: POP
// end ; end ;
75896: GO 75271
75898: POP
75899: POP
// end ; end_of_file
75900: PPOPN 9
75902: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75903: LD_VAR 0 1
75907: PPUSH
75908: LD_VAR 0 2
75912: PPUSH
75913: LD_VAR 0 3
75917: PPUSH
75918: LD_VAR 0 4
75922: PPUSH
75923: LD_VAR 0 5
75927: PPUSH
75928: LD_VAR 0 6
75932: PPUSH
75933: CALL 60128 0 6
// end ;
75937: PPOPN 6
75939: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75940: LD_INT 0
75942: PPUSH
// begin if not units then
75943: LD_VAR 0 1
75947: NOT
75948: IFFALSE 75952
// exit ;
75950: GO 75952
// end ;
75952: PPOPN 7
75954: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75955: CALL 60015 0 0
// end ; end_of_file
75959: PPOPN 1
75961: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75962: LD_VAR 0 1
75966: PUSH
75967: LD_INT 200
75969: DOUBLE
75970: GREATEREQUAL
75971: IFFALSE 75979
75973: LD_INT 299
75975: DOUBLE
75976: LESSEQUAL
75977: IFTRUE 75981
75979: GO 76013
75981: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75982: LD_VAR 0 1
75986: PPUSH
75987: LD_VAR 0 2
75991: PPUSH
75992: LD_VAR 0 3
75996: PPUSH
75997: LD_VAR 0 4
76001: PPUSH
76002: LD_VAR 0 5
76006: PPUSH
76007: CALL 76790 0 5
76011: GO 76090
76013: LD_INT 300
76015: DOUBLE
76016: GREATEREQUAL
76017: IFFALSE 76025
76019: LD_INT 399
76021: DOUBLE
76022: LESSEQUAL
76023: IFTRUE 76027
76025: GO 76089
76027: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76028: LD_VAR 0 1
76032: PPUSH
76033: LD_VAR 0 2
76037: PPUSH
76038: LD_VAR 0 3
76042: PPUSH
76043: LD_VAR 0 4
76047: PPUSH
76048: LD_VAR 0 5
76052: PPUSH
76053: LD_VAR 0 6
76057: PPUSH
76058: LD_VAR 0 7
76062: PPUSH
76063: LD_VAR 0 8
76067: PPUSH
76068: LD_VAR 0 9
76072: PPUSH
76073: LD_VAR 0 10
76077: PPUSH
76078: LD_VAR 0 11
76082: PPUSH
76083: CALL 72476 0 11
76087: GO 76090
76089: POP
// end ;
76090: PPOPN 11
76092: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76093: LD_VAR 0 1
76097: PPUSH
76098: LD_VAR 0 2
76102: PPUSH
76103: LD_VAR 0 3
76107: PPUSH
76108: LD_VAR 0 4
76112: PPUSH
76113: LD_VAR 0 5
76117: PPUSH
76118: CALL 76175 0 5
// end ; end_of_file
76122: PPOPN 5
76124: END
// export function SOS_UnitDestroyed ( un ) ; begin
76125: LD_INT 0
76127: PPUSH
// ComRadiation ( un ) ;
76128: LD_VAR 0 1
76132: PPUSH
76133: CALL 77194 0 1
// end ;
76137: LD_VAR 0 2
76141: RET
// export function SOS_UnitKamikazed ( un ) ; begin
76142: LD_INT 0
76144: PPUSH
// ComRadiation ( un ) ;
76145: LD_VAR 0 1
76149: PPUSH
76150: CALL 77194 0 1
// end ;
76154: LD_VAR 0 2
76158: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
76159: LD_INT 0
76161: PPUSH
// end ;
76162: LD_VAR 0 4
76166: RET
// export function SOS_Command ( cmd ) ; begin
76167: LD_INT 0
76169: PPUSH
// end ;
76170: LD_VAR 0 2
76174: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
76175: LD_INT 0
76177: PPUSH
// end ;
76178: LD_VAR 0 6
76182: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
76183: LD_INT 0
76185: PPUSH
76186: PPUSH
76187: PPUSH
76188: PPUSH
// if not vehicle or not factory then
76189: LD_VAR 0 1
76193: NOT
76194: PUSH
76195: LD_VAR 0 2
76199: NOT
76200: OR
76201: IFFALSE 76205
// exit ;
76203: GO 76785
// if not factoryWaypoints then
76205: LD_EXP 109
76209: NOT
76210: IFFALSE 76214
// exit ;
76212: GO 76785
// for i := 1 to Count ( factoryWaypoints ) do
76214: LD_ADDR_VAR 0 4
76218: PUSH
76219: DOUBLE
76220: LD_INT 1
76222: DEC
76223: ST_TO_ADDR
76224: LD_EXP 109
76228: PPUSH
76229: CALL 19185 0 1
76233: PUSH
76234: FOR_TO
76235: IFFALSE 76783
// if factoryWaypoints [ i ] [ 2 ] = factory then
76237: LD_EXP 109
76241: PUSH
76242: LD_VAR 0 4
76246: ARRAY
76247: PUSH
76248: LD_INT 2
76250: ARRAY
76251: PUSH
76252: LD_VAR 0 2
76256: EQUAL
76257: IFFALSE 76781
// begin if GetControl ( vehicle ) = control_manual then
76259: LD_VAR 0 1
76263: PPUSH
76264: CALL_OW 263
76268: PUSH
76269: LD_INT 1
76271: EQUAL
76272: IFFALSE 76634
// begin driver := IsDrivenBy ( vehicle ) ;
76274: LD_ADDR_VAR 0 5
76278: PUSH
76279: LD_VAR 0 1
76283: PPUSH
76284: CALL_OW 311
76288: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
76289: LD_VAR 0 5
76293: PUSH
76294: LD_EXP 110
76298: IN
76299: PUSH
76300: LD_VAR 0 1
76304: PUSH
76305: LD_EXP 110
76309: IN
76310: OR
76311: IFFALSE 76317
// exit ;
76313: POP
76314: POP
76315: GO 76785
// if not HasTask ( driver ) then
76317: LD_VAR 0 5
76321: PPUSH
76322: CALL_OW 314
76326: NOT
76327: IFFALSE 76632
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
76329: LD_ADDR_EXP 110
76333: PUSH
76334: LD_EXP 110
76338: PPUSH
76339: LD_VAR 0 5
76343: PPUSH
76344: CALL 54866 0 2
76348: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
76349: LD_ADDR_EXP 110
76353: PUSH
76354: LD_EXP 110
76358: PPUSH
76359: LD_VAR 0 1
76363: PPUSH
76364: CALL 54866 0 2
76368: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76369: LD_ADDR_VAR 0 6
76373: PUSH
76374: LD_EXP 109
76378: PUSH
76379: LD_VAR 0 4
76383: ARRAY
76384: PUSH
76385: LD_INT 3
76387: ARRAY
76388: PPUSH
76389: LD_EXP 109
76393: PUSH
76394: LD_VAR 0 4
76398: ARRAY
76399: PUSH
76400: LD_INT 4
76402: ARRAY
76403: PPUSH
76404: CALL_OW 428
76408: ST_TO_ADDR
// if hex then
76409: LD_VAR 0 6
76413: IFFALSE 76431
// ComMoveUnit ( driver , hex ) else
76415: LD_VAR 0 5
76419: PPUSH
76420: LD_VAR 0 6
76424: PPUSH
76425: CALL_OW 112
76429: GO 76515
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
76431: LD_VAR 0 1
76435: PPUSH
76436: LD_EXP 109
76440: PUSH
76441: LD_VAR 0 4
76445: ARRAY
76446: PUSH
76447: LD_INT 3
76449: ARRAY
76450: PPUSH
76451: LD_EXP 109
76455: PUSH
76456: LD_VAR 0 4
76460: ARRAY
76461: PUSH
76462: LD_INT 4
76464: ARRAY
76465: PPUSH
76466: CALL_OW 297
76470: PUSH
76471: LD_INT 0
76473: GREATER
76474: IFFALSE 76515
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76476: LD_VAR 0 5
76480: PPUSH
76481: LD_EXP 109
76485: PUSH
76486: LD_VAR 0 4
76490: ARRAY
76491: PUSH
76492: LD_INT 3
76494: ARRAY
76495: PPUSH
76496: LD_EXP 109
76500: PUSH
76501: LD_VAR 0 4
76505: ARRAY
76506: PUSH
76507: LD_INT 4
76509: ARRAY
76510: PPUSH
76511: CALL_OW 111
// AddComExitVehicle ( driver ) ;
76515: LD_VAR 0 5
76519: PPUSH
76520: CALL_OW 181
// if Multiplayer then
76524: LD_OWVAR 4
76528: IFFALSE 76577
// begin repeat wait ( 10 ) ;
76530: LD_INT 10
76532: PPUSH
76533: CALL_OW 67
// until not IsInUnit ( driver ) ;
76537: LD_VAR 0 5
76541: PPUSH
76542: CALL_OW 310
76546: NOT
76547: IFFALSE 76530
// if not HasTask ( driver ) then
76549: LD_VAR 0 5
76553: PPUSH
76554: CALL_OW 314
76558: NOT
76559: IFFALSE 76575
// ComEnterUnit ( driver , factory ) ;
76561: LD_VAR 0 5
76565: PPUSH
76566: LD_VAR 0 2
76570: PPUSH
76571: CALL_OW 120
// end else
76575: GO 76591
// AddComEnterUnit ( driver , factory ) ;
76577: LD_VAR 0 5
76581: PPUSH
76582: LD_VAR 0 2
76586: PPUSH
76587: CALL_OW 180
// wait ( 0 0$1 ) ;
76591: LD_INT 35
76593: PPUSH
76594: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
76598: LD_ADDR_EXP 110
76602: PUSH
76603: LD_EXP 110
76607: PUSH
76608: LD_VAR 0 5
76612: DIFF
76613: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
76614: LD_ADDR_EXP 110
76618: PUSH
76619: LD_EXP 110
76623: PUSH
76624: LD_VAR 0 1
76628: DIFF
76629: ST_TO_ADDR
// break ;
76630: GO 76783
// end ; end else
76632: GO 76781
// if GetControl ( vehicle ) = control_remote then
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 263
76643: PUSH
76644: LD_INT 2
76646: EQUAL
76647: IFFALSE 76733
// begin wait ( 0 0$2 ) ;
76649: LD_INT 70
76651: PPUSH
76652: CALL_OW 67
// repeat wait ( 10 ) ;
76656: LD_INT 10
76658: PPUSH
76659: CALL_OW 67
// Connect ( vehicle ) ;
76663: LD_VAR 0 1
76667: PPUSH
76668: CALL 25391 0 1
// until IsControledBy ( vehicle ) ;
76672: LD_VAR 0 1
76676: PPUSH
76677: CALL_OW 312
76681: IFFALSE 76656
// wait ( 10 ) ;
76683: LD_INT 10
76685: PPUSH
76686: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_EXP 109
76699: PUSH
76700: LD_VAR 0 4
76704: ARRAY
76705: PUSH
76706: LD_INT 3
76708: ARRAY
76709: PPUSH
76710: LD_EXP 109
76714: PUSH
76715: LD_VAR 0 4
76719: ARRAY
76720: PUSH
76721: LD_INT 4
76723: ARRAY
76724: PPUSH
76725: CALL_OW 111
// break ;
76729: GO 76783
// end else
76731: GO 76781
// begin wait ( 0 0$3 ) ;
76733: LD_INT 105
76735: PPUSH
76736: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76740: LD_VAR 0 1
76744: PPUSH
76745: LD_EXP 109
76749: PUSH
76750: LD_VAR 0 4
76754: ARRAY
76755: PUSH
76756: LD_INT 3
76758: ARRAY
76759: PPUSH
76760: LD_EXP 109
76764: PUSH
76765: LD_VAR 0 4
76769: ARRAY
76770: PUSH
76771: LD_INT 4
76773: ARRAY
76774: PPUSH
76775: CALL_OW 111
// break ;
76779: GO 76783
// end ; end ;
76781: GO 76234
76783: POP
76784: POP
// end ;
76785: LD_VAR 0 3
76789: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76790: LD_INT 0
76792: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76793: LD_VAR 0 1
76797: PUSH
76798: LD_INT 250
76800: EQUAL
76801: PUSH
76802: LD_VAR 0 2
76806: PPUSH
76807: CALL_OW 264
76811: PUSH
76812: LD_INT 81
76814: EQUAL
76815: AND
76816: IFFALSE 76837
// MinerPlaceMine ( unit , x , y ) ;
76818: LD_VAR 0 2
76822: PPUSH
76823: LD_VAR 0 4
76827: PPUSH
76828: LD_VAR 0 5
76832: PPUSH
76833: CALL 79929 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76837: LD_VAR 0 1
76841: PUSH
76842: LD_INT 251
76844: EQUAL
76845: PUSH
76846: LD_VAR 0 2
76850: PPUSH
76851: CALL_OW 264
76855: PUSH
76856: LD_INT 81
76858: EQUAL
76859: AND
76860: IFFALSE 76881
// MinerDetonateMine ( unit , x , y ) ;
76862: LD_VAR 0 2
76866: PPUSH
76867: LD_VAR 0 4
76871: PPUSH
76872: LD_VAR 0 5
76876: PPUSH
76877: CALL 80204 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76881: LD_VAR 0 1
76885: PUSH
76886: LD_INT 252
76888: EQUAL
76889: PUSH
76890: LD_VAR 0 2
76894: PPUSH
76895: CALL_OW 264
76899: PUSH
76900: LD_INT 81
76902: EQUAL
76903: AND
76904: IFFALSE 76925
// MinerCreateMinefield ( unit , x , y ) ;
76906: LD_VAR 0 2
76910: PPUSH
76911: LD_VAR 0 4
76915: PPUSH
76916: LD_VAR 0 5
76920: PPUSH
76921: CALL 80621 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76925: LD_VAR 0 1
76929: PUSH
76930: LD_INT 253
76932: EQUAL
76933: PUSH
76934: LD_VAR 0 2
76938: PPUSH
76939: CALL_OW 257
76943: PUSH
76944: LD_INT 5
76946: EQUAL
76947: AND
76948: IFFALSE 76969
// ComBinocular ( unit , x , y ) ;
76950: LD_VAR 0 2
76954: PPUSH
76955: LD_VAR 0 4
76959: PPUSH
76960: LD_VAR 0 5
76964: PPUSH
76965: CALL 80990 0 3
// if selectedUnit then
76969: LD_VAR 0 3
76973: IFFALSE 77029
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76975: LD_VAR 0 1
76979: PUSH
76980: LD_INT 254
76982: EQUAL
76983: PUSH
76984: LD_VAR 0 2
76988: PPUSH
76989: CALL_OW 264
76993: PUSH
76994: LD_INT 99
76996: EQUAL
76997: AND
76998: PUSH
76999: LD_VAR 0 3
77003: PPUSH
77004: CALL_OW 263
77008: PUSH
77009: LD_INT 3
77011: EQUAL
77012: AND
77013: IFFALSE 77029
// HackDestroyVehicle ( unit , selectedUnit ) ;
77015: LD_VAR 0 2
77019: PPUSH
77020: LD_VAR 0 3
77024: PPUSH
77025: CALL 79293 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77029: LD_VAR 0 1
77033: PUSH
77034: LD_INT 255
77036: EQUAL
77037: PUSH
77038: LD_VAR 0 2
77042: PPUSH
77043: CALL_OW 264
77047: PUSH
77048: LD_INT 14
77050: PUSH
77051: LD_INT 53
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: IN
77058: AND
77059: PUSH
77060: LD_VAR 0 4
77064: PPUSH
77065: LD_VAR 0 5
77069: PPUSH
77070: CALL_OW 488
77074: AND
77075: IFFALSE 77099
// CutTreeXYR ( unit , x , y , 12 ) ;
77077: LD_VAR 0 2
77081: PPUSH
77082: LD_VAR 0 4
77086: PPUSH
77087: LD_VAR 0 5
77091: PPUSH
77092: LD_INT 12
77094: PPUSH
77095: CALL 77290 0 4
// if cmd = 256 then
77099: LD_VAR 0 1
77103: PUSH
77104: LD_INT 256
77106: EQUAL
77107: IFFALSE 77128
// SetFactoryWaypoint ( unit , x , y ) ;
77109: LD_VAR 0 2
77113: PPUSH
77114: LD_VAR 0 4
77118: PPUSH
77119: LD_VAR 0 5
77123: PPUSH
77124: CALL 74464 0 3
// if cmd = 257 then
77128: LD_VAR 0 1
77132: PUSH
77133: LD_INT 257
77135: EQUAL
77136: IFFALSE 77157
// SetWarehouseGatheringPoint ( unit , x , y ) ;
77138: LD_VAR 0 2
77142: PPUSH
77143: LD_VAR 0 4
77147: PPUSH
77148: LD_VAR 0 5
77152: PPUSH
77153: CALL 74954 0 3
// if cmd = 258 then
77157: LD_VAR 0 1
77161: PUSH
77162: LD_INT 258
77164: EQUAL
77165: IFFALSE 77189
// BurnTreeXYR ( unit , x , y , 8 ) ;
77167: LD_VAR 0 2
77171: PPUSH
77172: LD_VAR 0 4
77176: PPUSH
77177: LD_VAR 0 5
77181: PPUSH
77182: LD_INT 8
77184: PPUSH
77185: CALL 77684 0 4
// end ;
77189: LD_VAR 0 6
77193: RET
// export function ComRadiation ( un ) ; var eff ; begin
77194: LD_INT 0
77196: PPUSH
77197: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
77198: LD_VAR 0 1
77202: PPUSH
77203: CALL_OW 264
77207: PUSH
77208: LD_INT 91
77210: NONEQUAL
77211: IFFALSE 77215
// exit ;
77213: GO 77285
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77215: LD_INT 68
77217: PPUSH
77218: LD_VAR 0 1
77222: PPUSH
77223: CALL_OW 255
77227: PPUSH
77228: CALL_OW 321
77232: PUSH
77233: LD_INT 2
77235: EQUAL
77236: IFFALSE 77248
// eff := 50 else
77238: LD_ADDR_VAR 0 3
77242: PUSH
77243: LD_INT 50
77245: ST_TO_ADDR
77246: GO 77256
// eff := 25 ;
77248: LD_ADDR_VAR 0 3
77252: PUSH
77253: LD_INT 25
77255: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77256: LD_VAR 0 1
77260: PPUSH
77261: CALL_OW 250
77265: PPUSH
77266: LD_VAR 0 1
77270: PPUSH
77271: CALL_OW 251
77275: PPUSH
77276: LD_VAR 0 3
77280: PPUSH
77281: CALL_OW 495
// end ;
77285: LD_VAR 0 2
77289: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77290: LD_INT 0
77292: PPUSH
77293: PPUSH
77294: PPUSH
77295: PPUSH
77296: PPUSH
77297: PPUSH
77298: PPUSH
77299: PPUSH
77300: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
77301: LD_VAR 0 1
77305: PPUSH
77306: CALL_OW 302
77310: NOT
77311: PUSH
77312: LD_VAR 0 2
77316: PPUSH
77317: LD_VAR 0 3
77321: PPUSH
77322: CALL_OW 488
77326: NOT
77327: OR
77328: PUSH
77329: LD_VAR 0 4
77333: NOT
77334: OR
77335: IFFALSE 77339
// exit ;
77337: GO 77679
// list := [ ] ;
77339: LD_ADDR_VAR 0 13
77343: PUSH
77344: EMPTY
77345: ST_TO_ADDR
// if x - r < 0 then
77346: LD_VAR 0 2
77350: PUSH
77351: LD_VAR 0 4
77355: MINUS
77356: PUSH
77357: LD_INT 0
77359: LESS
77360: IFFALSE 77372
// min_x := 0 else
77362: LD_ADDR_VAR 0 7
77366: PUSH
77367: LD_INT 0
77369: ST_TO_ADDR
77370: GO 77388
// min_x := x - r ;
77372: LD_ADDR_VAR 0 7
77376: PUSH
77377: LD_VAR 0 2
77381: PUSH
77382: LD_VAR 0 4
77386: MINUS
77387: ST_TO_ADDR
// if y - r < 0 then
77388: LD_VAR 0 3
77392: PUSH
77393: LD_VAR 0 4
77397: MINUS
77398: PUSH
77399: LD_INT 0
77401: LESS
77402: IFFALSE 77414
// min_y := 0 else
77404: LD_ADDR_VAR 0 8
77408: PUSH
77409: LD_INT 0
77411: ST_TO_ADDR
77412: GO 77430
// min_y := y - r ;
77414: LD_ADDR_VAR 0 8
77418: PUSH
77419: LD_VAR 0 3
77423: PUSH
77424: LD_VAR 0 4
77428: MINUS
77429: ST_TO_ADDR
// max_x := x + r ;
77430: LD_ADDR_VAR 0 9
77434: PUSH
77435: LD_VAR 0 2
77439: PUSH
77440: LD_VAR 0 4
77444: PLUS
77445: ST_TO_ADDR
// max_y := y + r ;
77446: LD_ADDR_VAR 0 10
77450: PUSH
77451: LD_VAR 0 3
77455: PUSH
77456: LD_VAR 0 4
77460: PLUS
77461: ST_TO_ADDR
// for _x = min_x to max_x do
77462: LD_ADDR_VAR 0 11
77466: PUSH
77467: DOUBLE
77468: LD_VAR 0 7
77472: DEC
77473: ST_TO_ADDR
77474: LD_VAR 0 9
77478: PUSH
77479: FOR_TO
77480: IFFALSE 77597
// for _y = min_y to max_y do
77482: LD_ADDR_VAR 0 12
77486: PUSH
77487: DOUBLE
77488: LD_VAR 0 8
77492: DEC
77493: ST_TO_ADDR
77494: LD_VAR 0 10
77498: PUSH
77499: FOR_TO
77500: IFFALSE 77593
// begin if not ValidHex ( _x , _y ) then
77502: LD_VAR 0 11
77506: PPUSH
77507: LD_VAR 0 12
77511: PPUSH
77512: CALL_OW 488
77516: NOT
77517: IFFALSE 77521
// continue ;
77519: GO 77499
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77521: LD_VAR 0 11
77525: PPUSH
77526: LD_VAR 0 12
77530: PPUSH
77531: CALL_OW 351
77535: PUSH
77536: LD_VAR 0 11
77540: PPUSH
77541: LD_VAR 0 12
77545: PPUSH
77546: CALL_OW 554
77550: AND
77551: IFFALSE 77591
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77553: LD_ADDR_VAR 0 13
77557: PUSH
77558: LD_VAR 0 13
77562: PPUSH
77563: LD_VAR 0 13
77567: PUSH
77568: LD_INT 1
77570: PLUS
77571: PPUSH
77572: LD_VAR 0 11
77576: PUSH
77577: LD_VAR 0 12
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PPUSH
77586: CALL_OW 2
77590: ST_TO_ADDR
// end ;
77591: GO 77499
77593: POP
77594: POP
77595: GO 77479
77597: POP
77598: POP
// if not list then
77599: LD_VAR 0 13
77603: NOT
77604: IFFALSE 77608
// exit ;
77606: GO 77679
// for i in list do
77608: LD_ADDR_VAR 0 6
77612: PUSH
77613: LD_VAR 0 13
77617: PUSH
77618: FOR_IN
77619: IFFALSE 77677
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77621: LD_VAR 0 1
77625: PPUSH
77626: LD_STRING M
77628: PUSH
77629: LD_VAR 0 6
77633: PUSH
77634: LD_INT 1
77636: ARRAY
77637: PUSH
77638: LD_VAR 0 6
77642: PUSH
77643: LD_INT 2
77645: ARRAY
77646: PUSH
77647: LD_INT 0
77649: PUSH
77650: LD_INT 0
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: LD_INT 0
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: LIST
77666: LIST
77667: PUSH
77668: EMPTY
77669: LIST
77670: PPUSH
77671: CALL_OW 447
77675: GO 77618
77677: POP
77678: POP
// end ;
77679: LD_VAR 0 5
77683: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
77684: LD_INT 0
77686: PPUSH
77687: PPUSH
77688: PPUSH
77689: PPUSH
77690: PPUSH
77691: PPUSH
77692: PPUSH
77693: PPUSH
77694: PPUSH
77695: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77696: LD_VAR 0 1
77700: PPUSH
77701: CALL_OW 302
77705: NOT
77706: PUSH
77707: LD_VAR 0 2
77711: PPUSH
77712: LD_VAR 0 3
77716: PPUSH
77717: CALL_OW 488
77721: NOT
77722: OR
77723: PUSH
77724: LD_VAR 0 4
77728: NOT
77729: OR
77730: IFFALSE 77734
// exit ;
77732: GO 78247
// list := [ ] ;
77734: LD_ADDR_VAR 0 13
77738: PUSH
77739: EMPTY
77740: ST_TO_ADDR
// if x - r < 0 then
77741: LD_VAR 0 2
77745: PUSH
77746: LD_VAR 0 4
77750: MINUS
77751: PUSH
77752: LD_INT 0
77754: LESS
77755: IFFALSE 77767
// min_x := 0 else
77757: LD_ADDR_VAR 0 7
77761: PUSH
77762: LD_INT 0
77764: ST_TO_ADDR
77765: GO 77783
// min_x := x - r ;
77767: LD_ADDR_VAR 0 7
77771: PUSH
77772: LD_VAR 0 2
77776: PUSH
77777: LD_VAR 0 4
77781: MINUS
77782: ST_TO_ADDR
// if y - r < 0 then
77783: LD_VAR 0 3
77787: PUSH
77788: LD_VAR 0 4
77792: MINUS
77793: PUSH
77794: LD_INT 0
77796: LESS
77797: IFFALSE 77809
// min_y := 0 else
77799: LD_ADDR_VAR 0 8
77803: PUSH
77804: LD_INT 0
77806: ST_TO_ADDR
77807: GO 77825
// min_y := y - r ;
77809: LD_ADDR_VAR 0 8
77813: PUSH
77814: LD_VAR 0 3
77818: PUSH
77819: LD_VAR 0 4
77823: MINUS
77824: ST_TO_ADDR
// max_x := x + r ;
77825: LD_ADDR_VAR 0 9
77829: PUSH
77830: LD_VAR 0 2
77834: PUSH
77835: LD_VAR 0 4
77839: PLUS
77840: ST_TO_ADDR
// max_y := y + r ;
77841: LD_ADDR_VAR 0 10
77845: PUSH
77846: LD_VAR 0 3
77850: PUSH
77851: LD_VAR 0 4
77855: PLUS
77856: ST_TO_ADDR
// for _x = min_x to max_x do
77857: LD_ADDR_VAR 0 11
77861: PUSH
77862: DOUBLE
77863: LD_VAR 0 7
77867: DEC
77868: ST_TO_ADDR
77869: LD_VAR 0 9
77873: PUSH
77874: FOR_TO
77875: IFFALSE 77992
// for _y = min_y to max_y do
77877: LD_ADDR_VAR 0 12
77881: PUSH
77882: DOUBLE
77883: LD_VAR 0 8
77887: DEC
77888: ST_TO_ADDR
77889: LD_VAR 0 10
77893: PUSH
77894: FOR_TO
77895: IFFALSE 77988
// begin if not ValidHex ( _x , _y ) then
77897: LD_VAR 0 11
77901: PPUSH
77902: LD_VAR 0 12
77906: PPUSH
77907: CALL_OW 488
77911: NOT
77912: IFFALSE 77916
// continue ;
77914: GO 77894
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77916: LD_VAR 0 11
77920: PPUSH
77921: LD_VAR 0 12
77925: PPUSH
77926: CALL_OW 351
77930: PUSH
77931: LD_VAR 0 11
77935: PPUSH
77936: LD_VAR 0 12
77940: PPUSH
77941: CALL_OW 554
77945: AND
77946: IFFALSE 77986
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77948: LD_ADDR_VAR 0 13
77952: PUSH
77953: LD_VAR 0 13
77957: PPUSH
77958: LD_VAR 0 13
77962: PUSH
77963: LD_INT 1
77965: PLUS
77966: PPUSH
77967: LD_VAR 0 11
77971: PUSH
77972: LD_VAR 0 12
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PPUSH
77981: CALL_OW 2
77985: ST_TO_ADDR
// end ;
77986: GO 77894
77988: POP
77989: POP
77990: GO 77874
77992: POP
77993: POP
// if not list then
77994: LD_VAR 0 13
77998: NOT
77999: IFFALSE 78003
// exit ;
78001: GO 78247
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
78003: LD_ADDR_VAR 0 13
78007: PUSH
78008: LD_VAR 0 1
78012: PPUSH
78013: LD_VAR 0 13
78017: PPUSH
78018: LD_INT 1
78020: PPUSH
78021: LD_INT 1
78023: PPUSH
78024: CALL 22533 0 4
78028: ST_TO_ADDR
// ComStop ( flame ) ;
78029: LD_VAR 0 1
78033: PPUSH
78034: CALL_OW 141
// for i in list do
78038: LD_ADDR_VAR 0 6
78042: PUSH
78043: LD_VAR 0 13
78047: PUSH
78048: FOR_IN
78049: IFFALSE 78080
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
78051: LD_VAR 0 1
78055: PPUSH
78056: LD_VAR 0 6
78060: PUSH
78061: LD_INT 1
78063: ARRAY
78064: PPUSH
78065: LD_VAR 0 6
78069: PUSH
78070: LD_INT 2
78072: ARRAY
78073: PPUSH
78074: CALL_OW 176
78078: GO 78048
78080: POP
78081: POP
// repeat wait ( 0 0$1 ) ;
78082: LD_INT 35
78084: PPUSH
78085: CALL_OW 67
// task := GetTaskList ( flame ) ;
78089: LD_ADDR_VAR 0 14
78093: PUSH
78094: LD_VAR 0 1
78098: PPUSH
78099: CALL_OW 437
78103: ST_TO_ADDR
// if not task then
78104: LD_VAR 0 14
78108: NOT
78109: IFFALSE 78113
// exit ;
78111: GO 78247
// if task [ 1 ] [ 1 ] <> | then
78113: LD_VAR 0 14
78117: PUSH
78118: LD_INT 1
78120: ARRAY
78121: PUSH
78122: LD_INT 1
78124: ARRAY
78125: PUSH
78126: LD_STRING |
78128: NONEQUAL
78129: IFFALSE 78133
// exit ;
78131: GO 78247
// _x := task [ 1 ] [ 2 ] ;
78133: LD_ADDR_VAR 0 11
78137: PUSH
78138: LD_VAR 0 14
78142: PUSH
78143: LD_INT 1
78145: ARRAY
78146: PUSH
78147: LD_INT 2
78149: ARRAY
78150: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
78151: LD_ADDR_VAR 0 12
78155: PUSH
78156: LD_VAR 0 14
78160: PUSH
78161: LD_INT 1
78163: ARRAY
78164: PUSH
78165: LD_INT 3
78167: ARRAY
78168: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
78169: LD_VAR 0 11
78173: PPUSH
78174: LD_VAR 0 12
78178: PPUSH
78179: CALL_OW 351
78183: NOT
78184: PUSH
78185: LD_VAR 0 11
78189: PPUSH
78190: LD_VAR 0 12
78194: PPUSH
78195: CALL_OW 554
78199: NOT
78200: OR
78201: IFFALSE 78235
// begin task := Delete ( task , 1 ) ;
78203: LD_ADDR_VAR 0 14
78207: PUSH
78208: LD_VAR 0 14
78212: PPUSH
78213: LD_INT 1
78215: PPUSH
78216: CALL_OW 3
78220: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
78221: LD_VAR 0 1
78225: PPUSH
78226: LD_VAR 0 14
78230: PPUSH
78231: CALL_OW 446
// end ; until not HasTask ( flame ) ;
78235: LD_VAR 0 1
78239: PPUSH
78240: CALL_OW 314
78244: NOT
78245: IFFALSE 78082
// end ;
78247: LD_VAR 0 5
78251: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78252: LD_EXP 113
78256: NOT
78257: IFFALSE 78307
78259: GO 78261
78261: DISABLE
// begin initHack := true ;
78262: LD_ADDR_EXP 113
78266: PUSH
78267: LD_INT 1
78269: ST_TO_ADDR
// hackTanks := [ ] ;
78270: LD_ADDR_EXP 114
78274: PUSH
78275: EMPTY
78276: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78277: LD_ADDR_EXP 115
78281: PUSH
78282: EMPTY
78283: ST_TO_ADDR
// hackLimit := 3 ;
78284: LD_ADDR_EXP 116
78288: PUSH
78289: LD_INT 3
78291: ST_TO_ADDR
// hackDist := 12 ;
78292: LD_ADDR_EXP 117
78296: PUSH
78297: LD_INT 12
78299: ST_TO_ADDR
// hackCounter := [ ] ;
78300: LD_ADDR_EXP 118
78304: PUSH
78305: EMPTY
78306: ST_TO_ADDR
// end ;
78307: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78308: LD_EXP 113
78312: PUSH
78313: LD_INT 34
78315: PUSH
78316: LD_INT 99
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PPUSH
78323: CALL_OW 69
78327: AND
78328: IFFALSE 78581
78330: GO 78332
78332: DISABLE
78333: LD_INT 0
78335: PPUSH
78336: PPUSH
// begin enable ;
78337: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78338: LD_ADDR_VAR 0 1
78342: PUSH
78343: LD_INT 34
78345: PUSH
78346: LD_INT 99
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PPUSH
78353: CALL_OW 69
78357: PUSH
78358: FOR_IN
78359: IFFALSE 78579
// begin if not i in hackTanks then
78361: LD_VAR 0 1
78365: PUSH
78366: LD_EXP 114
78370: IN
78371: NOT
78372: IFFALSE 78455
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78374: LD_ADDR_EXP 114
78378: PUSH
78379: LD_EXP 114
78383: PPUSH
78384: LD_EXP 114
78388: PUSH
78389: LD_INT 1
78391: PLUS
78392: PPUSH
78393: LD_VAR 0 1
78397: PPUSH
78398: CALL_OW 1
78402: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78403: LD_ADDR_EXP 115
78407: PUSH
78408: LD_EXP 115
78412: PPUSH
78413: LD_EXP 115
78417: PUSH
78418: LD_INT 1
78420: PLUS
78421: PPUSH
78422: EMPTY
78423: PPUSH
78424: CALL_OW 1
78428: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78429: LD_ADDR_EXP 118
78433: PUSH
78434: LD_EXP 118
78438: PPUSH
78439: LD_EXP 118
78443: PUSH
78444: LD_INT 1
78446: PLUS
78447: PPUSH
78448: EMPTY
78449: PPUSH
78450: CALL_OW 1
78454: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78455: LD_VAR 0 1
78459: PPUSH
78460: CALL_OW 302
78464: NOT
78465: IFFALSE 78478
// begin HackUnlinkAll ( i ) ;
78467: LD_VAR 0 1
78471: PPUSH
78472: CALL 78584 0 1
// continue ;
78476: GO 78358
// end ; HackCheckCapturedStatus ( i ) ;
78478: LD_VAR 0 1
78482: PPUSH
78483: CALL 79027 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78487: LD_ADDR_VAR 0 2
78491: PUSH
78492: LD_INT 81
78494: PUSH
78495: LD_VAR 0 1
78499: PPUSH
78500: CALL_OW 255
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PUSH
78509: LD_INT 33
78511: PUSH
78512: LD_INT 3
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: PUSH
78519: LD_INT 91
78521: PUSH
78522: LD_VAR 0 1
78526: PUSH
78527: LD_EXP 117
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: LIST
78536: PUSH
78537: LD_INT 50
78539: PUSH
78540: EMPTY
78541: LIST
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: PPUSH
78549: CALL_OW 69
78553: ST_TO_ADDR
// if not tmp then
78554: LD_VAR 0 2
78558: NOT
78559: IFFALSE 78563
// continue ;
78561: GO 78358
// HackLink ( i , tmp ) ;
78563: LD_VAR 0 1
78567: PPUSH
78568: LD_VAR 0 2
78572: PPUSH
78573: CALL 78720 0 2
// end ;
78577: GO 78358
78579: POP
78580: POP
// end ;
78581: PPOPN 2
78583: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78584: LD_INT 0
78586: PPUSH
78587: PPUSH
78588: PPUSH
// if not hack in hackTanks then
78589: LD_VAR 0 1
78593: PUSH
78594: LD_EXP 114
78598: IN
78599: NOT
78600: IFFALSE 78604
// exit ;
78602: GO 78715
// index := GetElementIndex ( hackTanks , hack ) ;
78604: LD_ADDR_VAR 0 4
78608: PUSH
78609: LD_EXP 114
78613: PPUSH
78614: LD_VAR 0 1
78618: PPUSH
78619: CALL 21830 0 2
78623: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78624: LD_EXP 115
78628: PUSH
78629: LD_VAR 0 4
78633: ARRAY
78634: IFFALSE 78715
// begin for i in hackTanksCaptured [ index ] do
78636: LD_ADDR_VAR 0 3
78640: PUSH
78641: LD_EXP 115
78645: PUSH
78646: LD_VAR 0 4
78650: ARRAY
78651: PUSH
78652: FOR_IN
78653: IFFALSE 78679
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78655: LD_VAR 0 3
78659: PUSH
78660: LD_INT 1
78662: ARRAY
78663: PPUSH
78664: LD_VAR 0 3
78668: PUSH
78669: LD_INT 2
78671: ARRAY
78672: PPUSH
78673: CALL_OW 235
78677: GO 78652
78679: POP
78680: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78681: LD_ADDR_EXP 115
78685: PUSH
78686: LD_EXP 115
78690: PPUSH
78691: LD_VAR 0 4
78695: PPUSH
78696: EMPTY
78697: PPUSH
78698: CALL_OW 1
78702: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78703: LD_VAR 0 1
78707: PPUSH
78708: LD_INT 0
78710: PPUSH
78711: CALL_OW 505
// end ; end ;
78715: LD_VAR 0 2
78719: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78720: LD_INT 0
78722: PPUSH
78723: PPUSH
78724: PPUSH
// if not hack in hackTanks or not vehicles then
78725: LD_VAR 0 1
78729: PUSH
78730: LD_EXP 114
78734: IN
78735: NOT
78736: PUSH
78737: LD_VAR 0 2
78741: NOT
78742: OR
78743: IFFALSE 78747
// exit ;
78745: GO 79022
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78747: LD_ADDR_VAR 0 2
78751: PUSH
78752: LD_VAR 0 1
78756: PPUSH
78757: LD_VAR 0 2
78761: PPUSH
78762: LD_INT 1
78764: PPUSH
78765: LD_INT 1
78767: PPUSH
78768: CALL 22480 0 4
78772: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78773: LD_ADDR_VAR 0 5
78777: PUSH
78778: LD_EXP 114
78782: PPUSH
78783: LD_VAR 0 1
78787: PPUSH
78788: CALL 21830 0 2
78792: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78793: LD_EXP 115
78797: PUSH
78798: LD_VAR 0 5
78802: ARRAY
78803: PUSH
78804: LD_EXP 116
78808: LESS
78809: IFFALSE 78998
// begin for i := 1 to vehicles do
78811: LD_ADDR_VAR 0 4
78815: PUSH
78816: DOUBLE
78817: LD_INT 1
78819: DEC
78820: ST_TO_ADDR
78821: LD_VAR 0 2
78825: PUSH
78826: FOR_TO
78827: IFFALSE 78996
// begin if hackTanksCaptured [ index ] = hackLimit then
78829: LD_EXP 115
78833: PUSH
78834: LD_VAR 0 5
78838: ARRAY
78839: PUSH
78840: LD_EXP 116
78844: EQUAL
78845: IFFALSE 78849
// break ;
78847: GO 78996
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78849: LD_ADDR_EXP 118
78853: PUSH
78854: LD_EXP 118
78858: PPUSH
78859: LD_VAR 0 5
78863: PPUSH
78864: LD_EXP 118
78868: PUSH
78869: LD_VAR 0 5
78873: ARRAY
78874: PUSH
78875: LD_INT 1
78877: PLUS
78878: PPUSH
78879: CALL_OW 1
78883: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78884: LD_ADDR_EXP 115
78888: PUSH
78889: LD_EXP 115
78893: PPUSH
78894: LD_VAR 0 5
78898: PUSH
78899: LD_EXP 115
78903: PUSH
78904: LD_VAR 0 5
78908: ARRAY
78909: PUSH
78910: LD_INT 1
78912: PLUS
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: PPUSH
78918: LD_VAR 0 2
78922: PUSH
78923: LD_VAR 0 4
78927: ARRAY
78928: PUSH
78929: LD_VAR 0 2
78933: PUSH
78934: LD_VAR 0 4
78938: ARRAY
78939: PPUSH
78940: CALL_OW 255
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PPUSH
78949: CALL 22045 0 3
78953: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78954: LD_VAR 0 2
78958: PUSH
78959: LD_VAR 0 4
78963: ARRAY
78964: PPUSH
78965: LD_VAR 0 1
78969: PPUSH
78970: CALL_OW 255
78974: PPUSH
78975: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78979: LD_VAR 0 2
78983: PUSH
78984: LD_VAR 0 4
78988: ARRAY
78989: PPUSH
78990: CALL_OW 141
// end ;
78994: GO 78826
78996: POP
78997: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78998: LD_VAR 0 1
79002: PPUSH
79003: LD_EXP 115
79007: PUSH
79008: LD_VAR 0 5
79012: ARRAY
79013: PUSH
79014: LD_INT 0
79016: PLUS
79017: PPUSH
79018: CALL_OW 505
// end ;
79022: LD_VAR 0 3
79026: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79027: LD_INT 0
79029: PPUSH
79030: PPUSH
79031: PPUSH
79032: PPUSH
// if not hack in hackTanks then
79033: LD_VAR 0 1
79037: PUSH
79038: LD_EXP 114
79042: IN
79043: NOT
79044: IFFALSE 79048
// exit ;
79046: GO 79288
// index := GetElementIndex ( hackTanks , hack ) ;
79048: LD_ADDR_VAR 0 4
79052: PUSH
79053: LD_EXP 114
79057: PPUSH
79058: LD_VAR 0 1
79062: PPUSH
79063: CALL 21830 0 2
79067: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79068: LD_ADDR_VAR 0 3
79072: PUSH
79073: DOUBLE
79074: LD_EXP 115
79078: PUSH
79079: LD_VAR 0 4
79083: ARRAY
79084: INC
79085: ST_TO_ADDR
79086: LD_INT 1
79088: PUSH
79089: FOR_DOWNTO
79090: IFFALSE 79262
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79092: LD_ADDR_VAR 0 5
79096: PUSH
79097: LD_EXP 115
79101: PUSH
79102: LD_VAR 0 4
79106: ARRAY
79107: PUSH
79108: LD_VAR 0 3
79112: ARRAY
79113: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79114: LD_VAR 0 5
79118: PUSH
79119: LD_INT 1
79121: ARRAY
79122: PPUSH
79123: CALL_OW 302
79127: NOT
79128: PUSH
79129: LD_VAR 0 5
79133: PUSH
79134: LD_INT 1
79136: ARRAY
79137: PPUSH
79138: CALL_OW 255
79142: PUSH
79143: LD_VAR 0 1
79147: PPUSH
79148: CALL_OW 255
79152: NONEQUAL
79153: OR
79154: IFFALSE 79260
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79156: LD_VAR 0 5
79160: PUSH
79161: LD_INT 1
79163: ARRAY
79164: PPUSH
79165: CALL_OW 305
79169: PUSH
79170: LD_VAR 0 5
79174: PUSH
79175: LD_INT 1
79177: ARRAY
79178: PPUSH
79179: CALL_OW 255
79183: PUSH
79184: LD_VAR 0 1
79188: PPUSH
79189: CALL_OW 255
79193: EQUAL
79194: AND
79195: IFFALSE 79219
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79197: LD_VAR 0 5
79201: PUSH
79202: LD_INT 1
79204: ARRAY
79205: PPUSH
79206: LD_VAR 0 5
79210: PUSH
79211: LD_INT 2
79213: ARRAY
79214: PPUSH
79215: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79219: LD_ADDR_EXP 115
79223: PUSH
79224: LD_EXP 115
79228: PPUSH
79229: LD_VAR 0 4
79233: PPUSH
79234: LD_EXP 115
79238: PUSH
79239: LD_VAR 0 4
79243: ARRAY
79244: PPUSH
79245: LD_VAR 0 3
79249: PPUSH
79250: CALL_OW 3
79254: PPUSH
79255: CALL_OW 1
79259: ST_TO_ADDR
// end ; end ;
79260: GO 79089
79262: POP
79263: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79264: LD_VAR 0 1
79268: PPUSH
79269: LD_EXP 115
79273: PUSH
79274: LD_VAR 0 4
79278: ARRAY
79279: PUSH
79280: LD_INT 0
79282: PLUS
79283: PPUSH
79284: CALL_OW 505
// end ;
79288: LD_VAR 0 2
79292: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79293: LD_INT 0
79295: PPUSH
79296: PPUSH
79297: PPUSH
79298: PPUSH
// if not hack in hackTanks then
79299: LD_VAR 0 1
79303: PUSH
79304: LD_EXP 114
79308: IN
79309: NOT
79310: IFFALSE 79314
// exit ;
79312: GO 79399
// index := GetElementIndex ( hackTanks , hack ) ;
79314: LD_ADDR_VAR 0 5
79318: PUSH
79319: LD_EXP 114
79323: PPUSH
79324: LD_VAR 0 1
79328: PPUSH
79329: CALL 21830 0 2
79333: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79334: LD_ADDR_VAR 0 4
79338: PUSH
79339: DOUBLE
79340: LD_INT 1
79342: DEC
79343: ST_TO_ADDR
79344: LD_EXP 115
79348: PUSH
79349: LD_VAR 0 5
79353: ARRAY
79354: PUSH
79355: FOR_TO
79356: IFFALSE 79397
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79358: LD_EXP 115
79362: PUSH
79363: LD_VAR 0 5
79367: ARRAY
79368: PUSH
79369: LD_VAR 0 4
79373: ARRAY
79374: PUSH
79375: LD_INT 1
79377: ARRAY
79378: PUSH
79379: LD_VAR 0 2
79383: EQUAL
79384: IFFALSE 79395
// KillUnit ( vehicle ) ;
79386: LD_VAR 0 2
79390: PPUSH
79391: CALL_OW 66
79395: GO 79355
79397: POP
79398: POP
// end ;
79399: LD_VAR 0 3
79403: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79404: LD_EXP 119
79408: NOT
79409: IFFALSE 79444
79411: GO 79413
79413: DISABLE
// begin initMiner := true ;
79414: LD_ADDR_EXP 119
79418: PUSH
79419: LD_INT 1
79421: ST_TO_ADDR
// minersList := [ ] ;
79422: LD_ADDR_EXP 120
79426: PUSH
79427: EMPTY
79428: ST_TO_ADDR
// minerMinesList := [ ] ;
79429: LD_ADDR_EXP 121
79433: PUSH
79434: EMPTY
79435: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79436: LD_ADDR_EXP 122
79440: PUSH
79441: LD_INT 5
79443: ST_TO_ADDR
// end ;
79444: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79445: LD_EXP 119
79449: PUSH
79450: LD_INT 34
79452: PUSH
79453: LD_INT 81
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PPUSH
79460: CALL_OW 69
79464: AND
79465: IFFALSE 79926
79467: GO 79469
79469: DISABLE
79470: LD_INT 0
79472: PPUSH
79473: PPUSH
79474: PPUSH
79475: PPUSH
// begin enable ;
79476: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79477: LD_ADDR_VAR 0 1
79481: PUSH
79482: LD_INT 34
79484: PUSH
79485: LD_INT 81
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: PPUSH
79492: CALL_OW 69
79496: PUSH
79497: FOR_IN
79498: IFFALSE 79570
// begin if not i in minersList then
79500: LD_VAR 0 1
79504: PUSH
79505: LD_EXP 120
79509: IN
79510: NOT
79511: IFFALSE 79568
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79513: LD_ADDR_EXP 120
79517: PUSH
79518: LD_EXP 120
79522: PPUSH
79523: LD_EXP 120
79527: PUSH
79528: LD_INT 1
79530: PLUS
79531: PPUSH
79532: LD_VAR 0 1
79536: PPUSH
79537: CALL_OW 1
79541: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79542: LD_ADDR_EXP 121
79546: PUSH
79547: LD_EXP 121
79551: PPUSH
79552: LD_EXP 121
79556: PUSH
79557: LD_INT 1
79559: PLUS
79560: PPUSH
79561: EMPTY
79562: PPUSH
79563: CALL_OW 1
79567: ST_TO_ADDR
// end end ;
79568: GO 79497
79570: POP
79571: POP
// for i := minerMinesList downto 1 do
79572: LD_ADDR_VAR 0 1
79576: PUSH
79577: DOUBLE
79578: LD_EXP 121
79582: INC
79583: ST_TO_ADDR
79584: LD_INT 1
79586: PUSH
79587: FOR_DOWNTO
79588: IFFALSE 79924
// begin if IsLive ( minersList [ i ] ) then
79590: LD_EXP 120
79594: PUSH
79595: LD_VAR 0 1
79599: ARRAY
79600: PPUSH
79601: CALL_OW 300
79605: IFFALSE 79633
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79607: LD_EXP 120
79611: PUSH
79612: LD_VAR 0 1
79616: ARRAY
79617: PPUSH
79618: LD_EXP 121
79622: PUSH
79623: LD_VAR 0 1
79627: ARRAY
79628: PPUSH
79629: CALL_OW 505
// if not minerMinesList [ i ] then
79633: LD_EXP 121
79637: PUSH
79638: LD_VAR 0 1
79642: ARRAY
79643: NOT
79644: IFFALSE 79648
// continue ;
79646: GO 79587
// for j := minerMinesList [ i ] downto 1 do
79648: LD_ADDR_VAR 0 2
79652: PUSH
79653: DOUBLE
79654: LD_EXP 121
79658: PUSH
79659: LD_VAR 0 1
79663: ARRAY
79664: INC
79665: ST_TO_ADDR
79666: LD_INT 1
79668: PUSH
79669: FOR_DOWNTO
79670: IFFALSE 79920
// begin side := GetSide ( minersList [ i ] ) ;
79672: LD_ADDR_VAR 0 3
79676: PUSH
79677: LD_EXP 120
79681: PUSH
79682: LD_VAR 0 1
79686: ARRAY
79687: PPUSH
79688: CALL_OW 255
79692: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79693: LD_ADDR_VAR 0 4
79697: PUSH
79698: LD_EXP 121
79702: PUSH
79703: LD_VAR 0 1
79707: ARRAY
79708: PUSH
79709: LD_VAR 0 2
79713: ARRAY
79714: PUSH
79715: LD_INT 1
79717: ARRAY
79718: PPUSH
79719: LD_EXP 121
79723: PUSH
79724: LD_VAR 0 1
79728: ARRAY
79729: PUSH
79730: LD_VAR 0 2
79734: ARRAY
79735: PUSH
79736: LD_INT 2
79738: ARRAY
79739: PPUSH
79740: CALL_OW 428
79744: ST_TO_ADDR
// if not tmp then
79745: LD_VAR 0 4
79749: NOT
79750: IFFALSE 79754
// continue ;
79752: GO 79669
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79754: LD_VAR 0 4
79758: PUSH
79759: LD_INT 81
79761: PUSH
79762: LD_VAR 0 3
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PPUSH
79771: CALL_OW 69
79775: IN
79776: PUSH
79777: LD_EXP 121
79781: PUSH
79782: LD_VAR 0 1
79786: ARRAY
79787: PUSH
79788: LD_VAR 0 2
79792: ARRAY
79793: PUSH
79794: LD_INT 1
79796: ARRAY
79797: PPUSH
79798: LD_EXP 121
79802: PUSH
79803: LD_VAR 0 1
79807: ARRAY
79808: PUSH
79809: LD_VAR 0 2
79813: ARRAY
79814: PUSH
79815: LD_INT 2
79817: ARRAY
79818: PPUSH
79819: CALL_OW 458
79823: AND
79824: IFFALSE 79918
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79826: LD_EXP 121
79830: PUSH
79831: LD_VAR 0 1
79835: ARRAY
79836: PUSH
79837: LD_VAR 0 2
79841: ARRAY
79842: PUSH
79843: LD_INT 1
79845: ARRAY
79846: PPUSH
79847: LD_EXP 121
79851: PUSH
79852: LD_VAR 0 1
79856: ARRAY
79857: PUSH
79858: LD_VAR 0 2
79862: ARRAY
79863: PUSH
79864: LD_INT 2
79866: ARRAY
79867: PPUSH
79868: LD_VAR 0 3
79872: PPUSH
79873: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79877: LD_ADDR_EXP 121
79881: PUSH
79882: LD_EXP 121
79886: PPUSH
79887: LD_VAR 0 1
79891: PPUSH
79892: LD_EXP 121
79896: PUSH
79897: LD_VAR 0 1
79901: ARRAY
79902: PPUSH
79903: LD_VAR 0 2
79907: PPUSH
79908: CALL_OW 3
79912: PPUSH
79913: CALL_OW 1
79917: ST_TO_ADDR
// end ; end ;
79918: GO 79669
79920: POP
79921: POP
// end ;
79922: GO 79587
79924: POP
79925: POP
// end ;
79926: PPOPN 4
79928: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79929: LD_INT 0
79931: PPUSH
79932: PPUSH
// result := false ;
79933: LD_ADDR_VAR 0 4
79937: PUSH
79938: LD_INT 0
79940: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79941: LD_VAR 0 1
79945: PPUSH
79946: CALL_OW 264
79950: PUSH
79951: LD_INT 81
79953: EQUAL
79954: NOT
79955: IFFALSE 79959
// exit ;
79957: GO 80199
// index := GetElementIndex ( minersList , unit ) ;
79959: LD_ADDR_VAR 0 5
79963: PUSH
79964: LD_EXP 120
79968: PPUSH
79969: LD_VAR 0 1
79973: PPUSH
79974: CALL 21830 0 2
79978: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79979: LD_EXP 121
79983: PUSH
79984: LD_VAR 0 5
79988: ARRAY
79989: PUSH
79990: LD_EXP 122
79994: GREATEREQUAL
79995: IFFALSE 79999
// exit ;
79997: GO 80199
// ComMoveXY ( unit , x , y ) ;
79999: LD_VAR 0 1
80003: PPUSH
80004: LD_VAR 0 2
80008: PPUSH
80009: LD_VAR 0 3
80013: PPUSH
80014: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80018: LD_INT 35
80020: PPUSH
80021: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80025: LD_VAR 0 1
80029: PPUSH
80030: LD_VAR 0 2
80034: PPUSH
80035: LD_VAR 0 3
80039: PPUSH
80040: CALL 53663 0 3
80044: NOT
80045: PUSH
80046: LD_VAR 0 1
80050: PPUSH
80051: CALL_OW 314
80055: AND
80056: IFFALSE 80060
// exit ;
80058: GO 80199
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80060: LD_VAR 0 2
80064: PPUSH
80065: LD_VAR 0 3
80069: PPUSH
80070: CALL_OW 428
80074: PUSH
80075: LD_VAR 0 1
80079: EQUAL
80080: PUSH
80081: LD_VAR 0 1
80085: PPUSH
80086: CALL_OW 314
80090: NOT
80091: AND
80092: IFFALSE 80018
// PlaySoundXY ( x , y , PlantMine ) ;
80094: LD_VAR 0 2
80098: PPUSH
80099: LD_VAR 0 3
80103: PPUSH
80104: LD_STRING PlantMine
80106: PPUSH
80107: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80111: LD_VAR 0 2
80115: PPUSH
80116: LD_VAR 0 3
80120: PPUSH
80121: LD_VAR 0 1
80125: PPUSH
80126: CALL_OW 255
80130: PPUSH
80131: LD_INT 0
80133: PPUSH
80134: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80138: LD_ADDR_EXP 121
80142: PUSH
80143: LD_EXP 121
80147: PPUSH
80148: LD_VAR 0 5
80152: PUSH
80153: LD_EXP 121
80157: PUSH
80158: LD_VAR 0 5
80162: ARRAY
80163: PUSH
80164: LD_INT 1
80166: PLUS
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: PPUSH
80172: LD_VAR 0 2
80176: PUSH
80177: LD_VAR 0 3
80181: PUSH
80182: EMPTY
80183: LIST
80184: LIST
80185: PPUSH
80186: CALL 22045 0 3
80190: ST_TO_ADDR
// result := true ;
80191: LD_ADDR_VAR 0 4
80195: PUSH
80196: LD_INT 1
80198: ST_TO_ADDR
// end ;
80199: LD_VAR 0 4
80203: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80204: LD_INT 0
80206: PPUSH
80207: PPUSH
80208: PPUSH
// if not unit in minersList then
80209: LD_VAR 0 1
80213: PUSH
80214: LD_EXP 120
80218: IN
80219: NOT
80220: IFFALSE 80224
// exit ;
80222: GO 80616
// index := GetElementIndex ( minersList , unit ) ;
80224: LD_ADDR_VAR 0 6
80228: PUSH
80229: LD_EXP 120
80233: PPUSH
80234: LD_VAR 0 1
80238: PPUSH
80239: CALL 21830 0 2
80243: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80244: LD_ADDR_VAR 0 5
80248: PUSH
80249: DOUBLE
80250: LD_EXP 121
80254: PUSH
80255: LD_VAR 0 6
80259: ARRAY
80260: INC
80261: ST_TO_ADDR
80262: LD_INT 1
80264: PUSH
80265: FOR_DOWNTO
80266: IFFALSE 80427
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80268: LD_EXP 121
80272: PUSH
80273: LD_VAR 0 6
80277: ARRAY
80278: PUSH
80279: LD_VAR 0 5
80283: ARRAY
80284: PUSH
80285: LD_INT 1
80287: ARRAY
80288: PUSH
80289: LD_VAR 0 2
80293: EQUAL
80294: PUSH
80295: LD_EXP 121
80299: PUSH
80300: LD_VAR 0 6
80304: ARRAY
80305: PUSH
80306: LD_VAR 0 5
80310: ARRAY
80311: PUSH
80312: LD_INT 2
80314: ARRAY
80315: PUSH
80316: LD_VAR 0 3
80320: EQUAL
80321: AND
80322: IFFALSE 80425
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80324: LD_EXP 121
80328: PUSH
80329: LD_VAR 0 6
80333: ARRAY
80334: PUSH
80335: LD_VAR 0 5
80339: ARRAY
80340: PUSH
80341: LD_INT 1
80343: ARRAY
80344: PPUSH
80345: LD_EXP 121
80349: PUSH
80350: LD_VAR 0 6
80354: ARRAY
80355: PUSH
80356: LD_VAR 0 5
80360: ARRAY
80361: PUSH
80362: LD_INT 2
80364: ARRAY
80365: PPUSH
80366: LD_VAR 0 1
80370: PPUSH
80371: CALL_OW 255
80375: PPUSH
80376: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80380: LD_ADDR_EXP 121
80384: PUSH
80385: LD_EXP 121
80389: PPUSH
80390: LD_VAR 0 6
80394: PPUSH
80395: LD_EXP 121
80399: PUSH
80400: LD_VAR 0 6
80404: ARRAY
80405: PPUSH
80406: LD_VAR 0 5
80410: PPUSH
80411: CALL_OW 3
80415: PPUSH
80416: CALL_OW 1
80420: ST_TO_ADDR
// exit ;
80421: POP
80422: POP
80423: GO 80616
// end ; end ;
80425: GO 80265
80427: POP
80428: POP
// for i := minerMinesList [ index ] downto 1 do
80429: LD_ADDR_VAR 0 5
80433: PUSH
80434: DOUBLE
80435: LD_EXP 121
80439: PUSH
80440: LD_VAR 0 6
80444: ARRAY
80445: INC
80446: ST_TO_ADDR
80447: LD_INT 1
80449: PUSH
80450: FOR_DOWNTO
80451: IFFALSE 80614
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80453: LD_EXP 121
80457: PUSH
80458: LD_VAR 0 6
80462: ARRAY
80463: PUSH
80464: LD_VAR 0 5
80468: ARRAY
80469: PUSH
80470: LD_INT 1
80472: ARRAY
80473: PPUSH
80474: LD_EXP 121
80478: PUSH
80479: LD_VAR 0 6
80483: ARRAY
80484: PUSH
80485: LD_VAR 0 5
80489: ARRAY
80490: PUSH
80491: LD_INT 2
80493: ARRAY
80494: PPUSH
80495: LD_VAR 0 2
80499: PPUSH
80500: LD_VAR 0 3
80504: PPUSH
80505: CALL_OW 298
80509: PUSH
80510: LD_INT 6
80512: LESS
80513: IFFALSE 80612
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80515: LD_EXP 121
80519: PUSH
80520: LD_VAR 0 6
80524: ARRAY
80525: PUSH
80526: LD_VAR 0 5
80530: ARRAY
80531: PUSH
80532: LD_INT 1
80534: ARRAY
80535: PPUSH
80536: LD_EXP 121
80540: PUSH
80541: LD_VAR 0 6
80545: ARRAY
80546: PUSH
80547: LD_VAR 0 5
80551: ARRAY
80552: PUSH
80553: LD_INT 2
80555: ARRAY
80556: PPUSH
80557: LD_VAR 0 1
80561: PPUSH
80562: CALL_OW 255
80566: PPUSH
80567: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80571: LD_ADDR_EXP 121
80575: PUSH
80576: LD_EXP 121
80580: PPUSH
80581: LD_VAR 0 6
80585: PPUSH
80586: LD_EXP 121
80590: PUSH
80591: LD_VAR 0 6
80595: ARRAY
80596: PPUSH
80597: LD_VAR 0 5
80601: PPUSH
80602: CALL_OW 3
80606: PPUSH
80607: CALL_OW 1
80611: ST_TO_ADDR
// end ; end ;
80612: GO 80450
80614: POP
80615: POP
// end ;
80616: LD_VAR 0 4
80620: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80621: LD_INT 0
80623: PPUSH
80624: PPUSH
80625: PPUSH
80626: PPUSH
80627: PPUSH
80628: PPUSH
80629: PPUSH
80630: PPUSH
80631: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80632: LD_VAR 0 1
80636: PPUSH
80637: CALL_OW 264
80641: PUSH
80642: LD_INT 81
80644: EQUAL
80645: NOT
80646: PUSH
80647: LD_VAR 0 1
80651: PUSH
80652: LD_EXP 120
80656: IN
80657: NOT
80658: OR
80659: IFFALSE 80663
// exit ;
80661: GO 80985
// index := GetElementIndex ( minersList , unit ) ;
80663: LD_ADDR_VAR 0 6
80667: PUSH
80668: LD_EXP 120
80672: PPUSH
80673: LD_VAR 0 1
80677: PPUSH
80678: CALL 21830 0 2
80682: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80683: LD_ADDR_VAR 0 8
80687: PUSH
80688: LD_EXP 122
80692: PUSH
80693: LD_EXP 121
80697: PUSH
80698: LD_VAR 0 6
80702: ARRAY
80703: MINUS
80704: ST_TO_ADDR
// if not minesFreeAmount then
80705: LD_VAR 0 8
80709: NOT
80710: IFFALSE 80714
// exit ;
80712: GO 80985
// tmp := [ ] ;
80714: LD_ADDR_VAR 0 7
80718: PUSH
80719: EMPTY
80720: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80721: LD_ADDR_VAR 0 5
80725: PUSH
80726: DOUBLE
80727: LD_INT 1
80729: DEC
80730: ST_TO_ADDR
80731: LD_VAR 0 8
80735: PUSH
80736: FOR_TO
80737: IFFALSE 80932
// begin _d := rand ( 0 , 5 ) ;
80739: LD_ADDR_VAR 0 11
80743: PUSH
80744: LD_INT 0
80746: PPUSH
80747: LD_INT 5
80749: PPUSH
80750: CALL_OW 12
80754: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80755: LD_ADDR_VAR 0 12
80759: PUSH
80760: LD_INT 2
80762: PPUSH
80763: LD_INT 6
80765: PPUSH
80766: CALL_OW 12
80770: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80771: LD_ADDR_VAR 0 9
80775: PUSH
80776: LD_VAR 0 2
80780: PPUSH
80781: LD_VAR 0 11
80785: PPUSH
80786: LD_VAR 0 12
80790: PPUSH
80791: CALL_OW 272
80795: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80796: LD_ADDR_VAR 0 10
80800: PUSH
80801: LD_VAR 0 3
80805: PPUSH
80806: LD_VAR 0 11
80810: PPUSH
80811: LD_VAR 0 12
80815: PPUSH
80816: CALL_OW 273
80820: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80821: LD_VAR 0 9
80825: PPUSH
80826: LD_VAR 0 10
80830: PPUSH
80831: CALL_OW 488
80835: PUSH
80836: LD_VAR 0 9
80840: PUSH
80841: LD_VAR 0 10
80845: PUSH
80846: EMPTY
80847: LIST
80848: LIST
80849: PUSH
80850: LD_VAR 0 7
80854: IN
80855: NOT
80856: AND
80857: PUSH
80858: LD_VAR 0 9
80862: PPUSH
80863: LD_VAR 0 10
80867: PPUSH
80868: CALL_OW 458
80872: NOT
80873: AND
80874: IFFALSE 80916
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80876: LD_ADDR_VAR 0 7
80880: PUSH
80881: LD_VAR 0 7
80885: PPUSH
80886: LD_VAR 0 7
80890: PUSH
80891: LD_INT 1
80893: PLUS
80894: PPUSH
80895: LD_VAR 0 9
80899: PUSH
80900: LD_VAR 0 10
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PPUSH
80909: CALL_OW 1
80913: ST_TO_ADDR
80914: GO 80930
// i := i - 1 ;
80916: LD_ADDR_VAR 0 5
80920: PUSH
80921: LD_VAR 0 5
80925: PUSH
80926: LD_INT 1
80928: MINUS
80929: ST_TO_ADDR
// end ;
80930: GO 80736
80932: POP
80933: POP
// for i in tmp do
80934: LD_ADDR_VAR 0 5
80938: PUSH
80939: LD_VAR 0 7
80943: PUSH
80944: FOR_IN
80945: IFFALSE 80983
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80947: LD_VAR 0 1
80951: PPUSH
80952: LD_VAR 0 5
80956: PUSH
80957: LD_INT 1
80959: ARRAY
80960: PPUSH
80961: LD_VAR 0 5
80965: PUSH
80966: LD_INT 2
80968: ARRAY
80969: PPUSH
80970: CALL 79929 0 3
80974: NOT
80975: IFFALSE 80981
// exit ;
80977: POP
80978: POP
80979: GO 80985
80981: GO 80944
80983: POP
80984: POP
// end ;
80985: LD_VAR 0 4
80989: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80990: LD_INT 0
80992: PPUSH
80993: PPUSH
80994: PPUSH
80995: PPUSH
80996: PPUSH
80997: PPUSH
80998: PPUSH
80999: PPUSH
81000: PPUSH
// if GetClass ( unit ) <> class_sniper then
81001: LD_VAR 0 1
81005: PPUSH
81006: CALL_OW 257
81010: PUSH
81011: LD_INT 5
81013: NONEQUAL
81014: IFFALSE 81018
// exit ;
81016: GO 81484
// dist := 8 ;
81018: LD_ADDR_VAR 0 5
81022: PUSH
81023: LD_INT 8
81025: ST_TO_ADDR
// viewRange := 12 ;
81026: LD_ADDR_VAR 0 8
81030: PUSH
81031: LD_INT 12
81033: ST_TO_ADDR
// side := GetSide ( unit ) ;
81034: LD_ADDR_VAR 0 6
81038: PUSH
81039: LD_VAR 0 1
81043: PPUSH
81044: CALL_OW 255
81048: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81049: LD_INT 61
81051: PPUSH
81052: LD_VAR 0 6
81056: PPUSH
81057: CALL_OW 321
81061: PUSH
81062: LD_INT 2
81064: EQUAL
81065: IFFALSE 81075
// viewRange := 16 ;
81067: LD_ADDR_VAR 0 8
81071: PUSH
81072: LD_INT 16
81074: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81075: LD_VAR 0 1
81079: PPUSH
81080: LD_VAR 0 2
81084: PPUSH
81085: LD_VAR 0 3
81089: PPUSH
81090: CALL_OW 297
81094: PUSH
81095: LD_VAR 0 5
81099: GREATER
81100: IFFALSE 81179
// begin ComMoveXY ( unit , x , y ) ;
81102: LD_VAR 0 1
81106: PPUSH
81107: LD_VAR 0 2
81111: PPUSH
81112: LD_VAR 0 3
81116: PPUSH
81117: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81121: LD_INT 35
81123: PPUSH
81124: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81128: LD_VAR 0 1
81132: PPUSH
81133: LD_VAR 0 2
81137: PPUSH
81138: LD_VAR 0 3
81142: PPUSH
81143: CALL 53663 0 3
81147: NOT
81148: IFFALSE 81152
// exit ;
81150: GO 81484
// until GetDistUnitXY ( unit , x , y ) < dist ;
81152: LD_VAR 0 1
81156: PPUSH
81157: LD_VAR 0 2
81161: PPUSH
81162: LD_VAR 0 3
81166: PPUSH
81167: CALL_OW 297
81171: PUSH
81172: LD_VAR 0 5
81176: LESS
81177: IFFALSE 81121
// end ; ComTurnXY ( unit , x , y ) ;
81179: LD_VAR 0 1
81183: PPUSH
81184: LD_VAR 0 2
81188: PPUSH
81189: LD_VAR 0 3
81193: PPUSH
81194: CALL_OW 118
// repeat if Multiplayer then
81198: LD_OWVAR 4
81202: IFFALSE 81213
// wait ( 35 ) else
81204: LD_INT 35
81206: PPUSH
81207: CALL_OW 67
81211: GO 81220
// wait ( 5 ) ;
81213: LD_INT 5
81215: PPUSH
81216: CALL_OW 67
// _d := GetDir ( unit ) ;
81220: LD_ADDR_VAR 0 11
81224: PUSH
81225: LD_VAR 0 1
81229: PPUSH
81230: CALL_OW 254
81234: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
81235: LD_ADDR_VAR 0 7
81239: PUSH
81240: LD_VAR 0 1
81244: PPUSH
81245: CALL_OW 250
81249: PPUSH
81250: LD_VAR 0 1
81254: PPUSH
81255: CALL_OW 251
81259: PPUSH
81260: LD_VAR 0 2
81264: PPUSH
81265: LD_VAR 0 3
81269: PPUSH
81270: CALL 56271 0 4
81274: ST_TO_ADDR
// until dir = _d ;
81275: LD_VAR 0 7
81279: PUSH
81280: LD_VAR 0 11
81284: EQUAL
81285: IFFALSE 81198
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
81287: LD_ADDR_VAR 0 9
81291: PUSH
81292: LD_VAR 0 1
81296: PPUSH
81297: CALL_OW 250
81301: PPUSH
81302: LD_VAR 0 7
81306: PPUSH
81307: LD_VAR 0 5
81311: PPUSH
81312: CALL_OW 272
81316: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
81317: LD_ADDR_VAR 0 10
81321: PUSH
81322: LD_VAR 0 1
81326: PPUSH
81327: CALL_OW 251
81331: PPUSH
81332: LD_VAR 0 7
81336: PPUSH
81337: LD_VAR 0 5
81341: PPUSH
81342: CALL_OW 273
81346: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81347: LD_VAR 0 9
81351: PPUSH
81352: LD_VAR 0 10
81356: PPUSH
81357: CALL_OW 488
81361: NOT
81362: IFFALSE 81366
// exit ;
81364: GO 81484
// ComAnimCustom ( unit , 1 ) ;
81366: LD_VAR 0 1
81370: PPUSH
81371: LD_INT 1
81373: PPUSH
81374: CALL_OW 592
// p := 0 ;
81378: LD_ADDR_VAR 0 12
81382: PUSH
81383: LD_INT 0
81385: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81386: LD_VAR 0 9
81390: PPUSH
81391: LD_VAR 0 10
81395: PPUSH
81396: LD_VAR 0 6
81400: PPUSH
81401: LD_VAR 0 8
81405: PPUSH
81406: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
81410: LD_INT 35
81412: PPUSH
81413: CALL_OW 67
// p := Inc ( p ) ;
81417: LD_ADDR_VAR 0 12
81421: PUSH
81422: LD_VAR 0 12
81426: PPUSH
81427: CALL 56227 0 1
81431: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
81432: LD_VAR 0 12
81436: PUSH
81437: LD_INT 3
81439: EQUAL
81440: PUSH
81441: LD_VAR 0 1
81445: PPUSH
81446: CALL_OW 302
81450: NOT
81451: OR
81452: PUSH
81453: LD_VAR 0 1
81457: PPUSH
81458: CALL_OW 301
81462: OR
81463: IFFALSE 81410
// RemoveSeeing ( _x , _y , side ) ;
81465: LD_VAR 0 9
81469: PPUSH
81470: LD_VAR 0 10
81474: PPUSH
81475: LD_VAR 0 6
81479: PPUSH
81480: CALL_OW 331
// end ; end_of_file
81484: LD_VAR 0 4
81488: RET
