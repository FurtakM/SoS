// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 365 0 0
// PrepareRussian ;
  24: CALL 1104 0 0
// PrepareNature ;
  28: CALL 15678 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// MissionIntro ;
 356: CALL 6585 0 0
// end ; end_of_file
 360: LD_VAR 0 1
 364: RET
// export function InitMapConfig ; begin
 365: LD_INT 0
 367: PPUSH
// BaseMapConfig ;
 368: CALL 381 0 0
// MissionMapConfig ;
 372: CALL 467 0 0
// end ;
 376: LD_VAR 0 1
 380: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 384: LD_ADDR_EXP 44
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 4
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: LD_INT 0
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 407: LD_ADDR_EXP 45
 411: PUSH
 412: LD_INT 2
 414: PUSH
 415: LD_INT 2
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: LD_INT 2
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: ST_TO_ADDR
// animalsAgression = 0 ;
 430: LD_ADDR_EXP 46
 434: PUSH
 435: LD_INT 0
 437: ST_TO_ADDR
// debugMode = 0 ;
 438: LD_ADDR_EXP 49
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// missionPrefix = 02_ ;
 446: LD_ADDR_EXP 47
 450: PUSH
 451: LD_STRING 02_
 453: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 01_
 461: ST_TO_ADDR
// end ;
 462: LD_VAR 0 1
 466: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 467: LD_INT 0
 469: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 470: LD_ADDR_EXP 51
 474: PUSH
 475: LD_INT 162
 477: PUSH
 478: LD_INT 107
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: LD_INT 162
 487: PUSH
 488: LD_INT 108
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PUSH
 495: LD_INT 163
 497: PUSH
 498: LD_INT 109
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 163
 507: PUSH
 508: LD_INT 110
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PUSH
 515: LD_INT 162
 517: PUSH
 518: LD_INT 109
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: LD_INT 161
 527: PUSH
 528: LD_INT 107
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 161
 537: PUSH
 538: LD_INT 106
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 554: LD_ADDR_EXP 52
 558: PUSH
 559: LD_INT 113
 561: PUSH
 562: LD_INT 96
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 114
 571: PUSH
 572: LD_INT 97
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 114
 581: PUSH
 582: LD_INT 98
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 594: LD_ADDR_EXP 50
 598: PUSH
 599: LD_INT 10
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 2
 607: PUSH
 608: LD_INT 1
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// labCratesRefund = 20 ;
 617: LD_ADDR_EXP 53
 621: PUSH
 622: LD_INT 20
 624: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 40
 632: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 20
 640: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 30
 648: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 10
 656: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 1
 664: PUSH
 665: LD_INT 2
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: ST_TO_ADDR
// trapAmountPeople = [ [ 1 , 2 , 2 , 2 ] , [ 2 , 2 , 2 , 2 ] , [ 2 , 2 , 2 , 2 ] ] [ Difficulty ] ;
 682: LD_ADDR_EXP 59
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 2
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 2
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 2
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_OWVAR 67
 750: ARRAY
 751: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 752: LD_ADDR_EXP 60
 756: PUSH
 757: LD_INT 21000
 759: PUSH
 760: LD_INT 16800
 762: PUSH
 763: LD_INT 12600
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_OWVAR 67
 775: ARRAY
 776: ST_TO_ADDR
// end ;
 777: LD_VAR 0 1
 781: RET
// every 0 0$1 trigger debugMode do var i ;
 782: LD_EXP 49
 786: IFFALSE 1101
 788: GO 790
 790: DISABLE
 791: LD_INT 0
 793: PPUSH
// begin enable ;
 794: ENABLE
// FogOff ( your_side ) ;
 795: LD_OWVAR 2
 799: PPUSH
 800: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 804: LD_ADDR_VAR 0 1
 808: PUSH
 809: LD_INT 22
 811: PUSH
 812: LD_OWVAR 2
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 2
 823: PUSH
 824: LD_INT 21
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 21
 836: PUSH
 837: LD_INT 2
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PPUSH
 853: CALL_OW 69
 857: PUSH
 858: FOR_IN
 859: IFFALSE 875
// SetLives ( i , 1000 ) ;
 861: LD_VAR 0 1
 865: PPUSH
 866: LD_INT 1000
 868: PPUSH
 869: CALL_OW 234
 873: GO 858
 875: POP
 876: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 877: LD_ADDR_VAR 0 1
 881: PUSH
 882: LD_INT 22
 884: PUSH
 885: LD_OWVAR 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 1
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PPUSH
 908: CALL_OW 69
 912: PUSH
 913: FOR_IN
 914: IFFALSE 978
// begin SetSkill ( i , skill_combat , 10 ) ;
 916: LD_VAR 0 1
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_INT 10
 926: PPUSH
 927: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 931: LD_VAR 0 1
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 10
 941: PPUSH
 942: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 946: LD_VAR 0 1
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_INT 10
 956: PPUSH
 957: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 961: LD_VAR 0 1
 965: PPUSH
 966: LD_INT 4
 968: PPUSH
 969: LD_INT 10
 971: PPUSH
 972: CALL_OW 237
// end ;
 976: GO 913
 978: POP
 979: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 980: LD_ADDR_VAR 0 1
 984: PUSH
 985: LD_INT 22
 987: PUSH
 988: LD_OWVAR 2
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: PUSH
 997: LD_INT 2
 999: PUSH
1000: LD_INT 30
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 30
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PPUSH
1029: CALL_OW 69
1033: PUSH
1034: FOR_IN
1035: IFFALSE 1099
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 274
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: LD_INT 9999
1052: PPUSH
1053: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1057: LD_VAR 0 1
1061: PPUSH
1062: CALL_OW 274
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 9999
1072: PPUSH
1073: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1077: LD_VAR 0 1
1081: PPUSH
1082: CALL_OW 274
1086: PPUSH
1087: LD_INT 3
1089: PPUSH
1090: LD_INT 9999
1092: PPUSH
1093: CALL_OW 277
// end ;
1097: GO 1034
1099: POP
1100: POP
// end ; end_of_file
1101: PPOPN 1
1103: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1104: LD_INT 0
1106: PPUSH
// PrepareCharactersFromPreviousMission ;
1107: CALL 1526 0 0
// PrepareKirovBase ;
1111: CALL 1721 0 0
// PrepareBeriaBase ;
1115: CALL 2486 0 0
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// belkovTeam = [ ] ;
1130: LD_ADDR_EXP 72
1134: PUSH
1135: EMPTY
1136: ST_TO_ADDR
// uc_side = 6 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 6
1144: ST_TO_ADDR
// uc_nation = nation_russian ;
1145: LD_ADDR_OWVAR 21
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1153: LD_ADDR_OWVAR 37
1157: PUSH
1158: LD_EXP 74
1162: PUSH
1163: LD_INT 1
1165: ARRAY
1166: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1167: LD_ADDR_OWVAR 39
1171: PUSH
1172: LD_EXP 74
1176: PUSH
1177: LD_INT 2
1179: ARRAY
1180: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1181: LD_ADDR_OWVAR 38
1185: PUSH
1186: LD_EXP 74
1190: PUSH
1191: LD_INT 3
1193: ARRAY
1194: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1195: LD_ADDR_OWVAR 40
1199: PUSH
1200: LD_EXP 74
1204: PUSH
1205: LD_INT 4
1207: ARRAY
1208: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1209: LD_ADDR_OWVAR 41
1213: PUSH
1214: LD_EXP 74
1218: PUSH
1219: LD_INT 5
1221: ARRAY
1222: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1223: LD_ADDR_EXP 71
1227: PUSH
1228: CALL_OW 45
1232: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1233: LD_EXP 71
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1245: LD_EXP 71
1249: PPUSH
1250: LD_INT 11
1252: PPUSH
1253: LD_INT 0
1255: PPUSH
1256: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1260: LD_ADDR_EXP 72
1264: PUSH
1265: LD_EXP 72
1269: PUSH
1270: LD_EXP 71
1274: ADD
1275: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1276: LD_STRING 02_TmpBelkov
1278: PPUSH
1279: CALL_OW 28
1283: IFFALSE 1328
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1285: LD_ADDR_EXP 63
1289: PUSH
1290: LD_STRING 02_TmpBelkov
1292: PPUSH
1293: CALL_OW 34
1297: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1298: LD_EXP 63
1302: PPUSH
1303: LD_EXP 71
1307: PPUSH
1308: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1312: LD_ADDR_EXP 72
1316: PUSH
1317: LD_EXP 72
1321: PUSH
1322: LD_EXP 63
1326: ADD
1327: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1328: LD_STRING 02_TmpBelkov2
1330: PPUSH
1331: CALL_OW 28
1335: IFFALSE 1407
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1337: LD_ADDR_EXP 67
1341: PUSH
1342: LD_STRING 02_TmpBelkov2
1344: PPUSH
1345: CALL_OW 34
1349: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1350: LD_STRING 02_TmpBelkov
1352: PPUSH
1353: CALL_OW 28
1357: NOT
1358: IFFALSE 1376
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1360: LD_EXP 67
1364: PPUSH
1365: LD_EXP 71
1369: PPUSH
1370: CALL_OW 52
1374: GO 1391
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1376: LD_EXP 67
1380: PPUSH
1381: LD_INT 11
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1391: LD_ADDR_EXP 72
1395: PUSH
1396: LD_EXP 72
1400: PUSH
1401: LD_EXP 67
1405: ADD
1406: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1407: LD_STRING 02_TmpKirilenkova
1409: PPUSH
1410: CALL_OW 28
1414: IFFALSE 1460
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1416: LD_ADDR_EXP 64
1420: PUSH
1421: LD_STRING 02_TmpKirilenkova
1423: PPUSH
1424: CALL_OW 34
1428: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1429: LD_EXP 64
1433: PPUSH
1434: LD_INT 11
1436: PPUSH
1437: LD_INT 0
1439: PPUSH
1440: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1444: LD_ADDR_EXP 72
1448: PUSH
1449: LD_EXP 72
1453: PUSH
1454: LD_EXP 64
1458: ADD
1459: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1460: LD_ADDR_VAR 0 3
1464: PUSH
1465: LD_STRING 02_TmpBelkovTeam
1467: PPUSH
1468: CALL_OW 31
1472: ST_TO_ADDR
// for unit in others do
1473: LD_ADDR_VAR 0 2
1477: PUSH
1478: LD_VAR 0 3
1482: PUSH
1483: FOR_IN
1484: IFFALSE 1519
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1486: LD_VAR 0 2
1490: PPUSH
1491: LD_INT 11
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1501: LD_ADDR_EXP 72
1505: PUSH
1506: LD_EXP 72
1510: PUSH
1511: LD_VAR 0 2
1515: ADD
1516: ST_TO_ADDR
// end ;
1517: GO 1483
1519: POP
1520: POP
// end ;
1521: LD_VAR 0 1
1525: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
// uc_side = 3 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 3
1537: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1538: LD_ADDR_EXP 61
1542: PUSH
1543: LD_STRING Burlak
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: CALL 4022 0 2
1553: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1554: LD_ADDR_EXP 62
1558: PUSH
1559: LD_STRING Gnyevko
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: CALL 4022 0 2
1569: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1570: LD_ADDR_EXP 63
1574: PUSH
1575: LD_STRING Belkov
1577: PPUSH
1578: LD_INT 1
1580: PPUSH
1581: CALL 4022 0 2
1585: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1586: LD_ADDR_EXP 64
1590: PUSH
1591: LD_STRING Kirilenkova
1593: PPUSH
1594: LD_INT 1
1596: PPUSH
1597: CALL 4022 0 2
1601: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1602: LD_EXP 61
1606: PPUSH
1607: LD_INT 5
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1617: LD_EXP 62
1621: PPUSH
1622: LD_INT 3
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1632: LD_EXP 63
1636: PPUSH
1637: LD_INT 3
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1647: LD_EXP 64
1651: PPUSH
1652: LD_INT 3
1654: PPUSH
1655: LD_INT 0
1657: PPUSH
1658: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1662: LD_EXP 61
1666: PPUSH
1667: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1671: LD_ADDR_EXP 65
1675: PUSH
1676: LD_STRING 01_other_survivors
1678: PPUSH
1679: CALL_OW 31
1683: ST_TO_ADDR
// for i in other_survivors do
1684: LD_ADDR_VAR 0 2
1688: PUSH
1689: LD_EXP 65
1693: PUSH
1694: FOR_IN
1695: IFFALSE 1714
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1697: LD_VAR 0 2
1701: PPUSH
1702: LD_INT 3
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: CALL_OW 49
1712: GO 1694
1714: POP
1715: POP
// end ;
1716: LD_VAR 0 1
1720: RET
// function PrepareKirovBase ; var i , un ; begin
1721: LD_INT 0
1723: PPUSH
1724: PPUSH
1725: PPUSH
// SetBName ( kirov , kirov ) ;
1726: LD_INT 71
1728: PPUSH
1729: LD_STRING kirov
1731: PPUSH
1732: CALL_OW 500
// uc_side = 6 ;
1736: LD_ADDR_OWVAR 20
1740: PUSH
1741: LD_INT 6
1743: ST_TO_ADDR
// uc_nation = 3 ;
1744: LD_ADDR_OWVAR 21
1748: PUSH
1749: LD_INT 3
1751: ST_TO_ADDR
// hc_gallery =  ;
1752: LD_ADDR_OWVAR 33
1756: PUSH
1757: LD_STRING 
1759: ST_TO_ADDR
// hc_name =  ;
1760: LD_ADDR_OWVAR 26
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1768: LD_ADDR_EXP 66
1772: PUSH
1773: LD_STRING Kurin
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL 4022 0 2
1783: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1784: LD_ADDR_EXP 69
1788: PUSH
1789: LD_STRING Kovalyuk
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 4022 0 2
1799: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1800: LD_ADDR_EXP 67
1804: PUSH
1805: LD_STRING Belkov2
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL 4022 0 2
1815: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1816: LD_EXP 66
1820: PPUSH
1821: LD_INT 4
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1831: LD_EXP 69
1835: PPUSH
1836: LD_INT 161
1838: PPUSH
1839: LD_INT 108
1841: PPUSH
1842: LD_INT 6
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 50
// ComHold ( Kurin ) ;
1852: LD_EXP 66
1856: PPUSH
1857: CALL_OW 140
// otherKirovUnits = [ ] ;
1861: LD_ADDR_EXP 68
1865: PUSH
1866: EMPTY
1867: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_EXP 50
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_EXP 50
1885: PUSH
1886: LD_INT 1
1888: ARRAY
1889: PUSH
1890: LD_EXP 65
1894: PPUSH
1895: LD_INT 25
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PPUSH
1905: CALL_OW 72
1909: MINUS
1910: PPUSH
1911: CALL_OW 1
1915: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: DOUBLE
1922: LD_INT 1
1924: DEC
1925: ST_TO_ADDR
1926: LD_EXP 50
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PUSH
1935: FOR_TO
1936: IFFALSE 2115
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1938: LD_INT 0
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: LD_INT 1
1946: PPUSH
1947: LD_INT 3
1949: PPUSH
1950: CALL_OW 12
1954: PPUSH
1955: CALL_OW 380
// un = CreateHuman ;
1959: LD_ADDR_VAR 0 3
1963: PUSH
1964: CALL_OW 44
1968: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1969: LD_ADDR_EXP 68
1973: PUSH
1974: LD_EXP 68
1978: PUSH
1979: LD_VAR 0 3
1983: ADD
1984: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1985: LD_INT 9
1987: PPUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 6
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 30
2010: PUSH
2011: LD_INT 31
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 58
2020: PUSH
2021: EMPTY
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: PPUSH
2030: CALL_OW 70
2034: IFFALSE 2101
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2036: LD_VAR 0 3
2040: PPUSH
2041: LD_INT 9
2043: PPUSH
2044: LD_INT 22
2046: PUSH
2047: LD_INT 6
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 21
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 30
2066: PUSH
2067: LD_INT 31
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 58
2076: PUSH
2077: EMPTY
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 70
2090: PUSH
2091: LD_INT 1
2093: ARRAY
2094: PPUSH
2095: CALL 5224 0 2
2099: GO 2113
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2101: LD_VAR 0 3
2105: PPUSH
2106: LD_INT 209
2108: PPUSH
2109: CALL_OW 52
// end ;
2113: GO 1935
2115: POP
2116: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2117: LD_INT 0
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: LD_INT 3
2128: PPUSH
2129: CALL_OW 12
2133: PPUSH
2134: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2138: CALL_OW 44
2142: PPUSH
2143: LD_INT 209
2145: PPUSH
2146: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2150: LD_ADDR_VAR 0 2
2154: PUSH
2155: DOUBLE
2156: LD_INT 1
2158: DEC
2159: ST_TO_ADDR
2160: LD_EXP 50
2164: PUSH
2165: LD_INT 2
2167: ARRAY
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2233
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 2
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: LD_INT 3
2183: PPUSH
2184: CALL_OW 12
2188: PPUSH
2189: CALL_OW 380
// un = CreateHuman ;
2193: LD_ADDR_VAR 0 3
2197: PUSH
2198: CALL_OW 44
2202: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2203: LD_ADDR_EXP 68
2207: PUSH
2208: LD_EXP 68
2212: PUSH
2213: LD_VAR 0 3
2217: ADD
2218: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 71
2226: PPUSH
2227: CALL_OW 52
// end ;
2231: GO 2169
2233: POP
2234: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: DOUBLE
2241: LD_INT 1
2243: DEC
2244: ST_TO_ADDR
2245: LD_EXP 50
2249: PUSH
2250: LD_INT 3
2252: ARRAY
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2318
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2257: LD_INT 0
2259: PPUSH
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: LD_INT 3
2268: PPUSH
2269: CALL_OW 12
2273: PPUSH
2274: CALL_OW 380
// un = CreateHuman ;
2278: LD_ADDR_VAR 0 3
2282: PUSH
2283: CALL_OW 44
2287: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2288: LD_ADDR_EXP 68
2292: PUSH
2293: LD_EXP 68
2297: PUSH
2298: LD_VAR 0 3
2302: ADD
2303: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2304: LD_VAR 0 3
2308: PPUSH
2309: LD_INT 71
2311: PPUSH
2312: CALL_OW 52
// end ;
2316: GO 2254
2318: POP
2319: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_EXP 50
2334: PUSH
2335: LD_INT 4
2337: ARRAY
2338: PUSH
2339: FOR_TO
2340: IFFALSE 2403
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2342: LD_INT 0
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: LD_INT 1
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 12
2358: PPUSH
2359: CALL_OW 380
// un = CreateHuman ;
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: CALL_OW 44
2372: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2373: LD_ADDR_EXP 68
2377: PUSH
2378: LD_EXP 68
2382: PUSH
2383: LD_VAR 0 3
2387: ADD
2388: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2389: LD_VAR 0 3
2393: PPUSH
2394: LD_INT 83
2396: PPUSH
2397: CALL_OW 52
// end ;
2401: GO 2339
2403: POP
2404: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2405: LD_INT 6
2407: PPUSH
2408: LD_INT 83
2410: PPUSH
2411: LD_INT 3
2413: PPUSH
2414: CALL 4837 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2418: LD_STRING 01_Gnyevko
2420: PPUSH
2421: CALL_OW 28
2425: NOT
2426: IFFALSE 2469
// begin PrepareMechanic ( sex_male , 3 ) ;
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 3
2433: PPUSH
2434: CALL_OW 383
// randomMech = CreateHuman ;
2438: LD_ADDR_EXP 70
2442: PUSH
2443: CALL_OW 44
2447: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2448: LD_EXP 70
2452: PPUSH
2453: LD_INT 161
2455: PPUSH
2456: LD_INT 108
2458: PPUSH
2459: LD_INT 6
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2469: LD_EXP 67
2473: PPUSH
2474: LD_INT 95
2476: PPUSH
2477: CALL_OW 52
// end ;
2481: LD_VAR 0 1
2485: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2486: LD_INT 0
2488: PPUSH
2489: PPUSH
2490: PPUSH
2491: PPUSH
2492: PPUSH
// SetBName ( beria , beria ) ;
2493: LD_INT 106
2495: PPUSH
2496: LD_STRING beria
2498: PPUSH
2499: CALL_OW 500
// uc_side = 6 ;
2503: LD_ADDR_OWVAR 20
2507: PUSH
2508: LD_INT 6
2510: ST_TO_ADDR
// uc_nation = 3 ;
2511: LD_ADDR_OWVAR 21
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2519: LD_ADDR_EXP 75
2523: PUSH
2524: LD_STRING Platonov
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: CALL 4022 0 2
2534: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2535: LD_EXP 75
2539: PPUSH
2540: LD_INT 112
2542: PPUSH
2543: LD_INT 97
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: CALL_OW 48
// ComHold ( Platonov ) ;
2553: LD_EXP 75
2557: PPUSH
2558: CALL_OW 140
// platSoldiers = [ ] ;
2562: LD_ADDR_EXP 76
2566: PUSH
2567: EMPTY
2568: ST_TO_ADDR
// unitsTemp = [ ] ;
2569: LD_ADDR_VAR 0 4
2573: PUSH
2574: EMPTY
2575: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2576: LD_ADDR_EXP 77
2580: PUSH
2581: LD_STRING Kuklajs
2583: PPUSH
2584: LD_INT 0
2586: PPUSH
2587: CALL 4022 0 2
2591: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2592: LD_ADDR_EXP 76
2596: PUSH
2597: LD_EXP 76
2601: PUSH
2602: LD_EXP 77
2606: ADD
2607: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2608: LD_EXP 77
2612: PPUSH
2613: LD_INT 110
2615: PPUSH
2616: LD_INT 97
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: LD_INT 0
2624: PPUSH
2625: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2629: LD_ADDR_EXP 78
2633: PUSH
2634: LD_STRING Benko
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: CALL 4022 0 2
2644: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2645: LD_ADDR_EXP 76
2649: PUSH
2650: LD_EXP 76
2654: PUSH
2655: LD_EXP 78
2659: ADD
2660: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_EXP 78
2675: ADD
2676: ST_TO_ADDR
// for i := 1 to 2 do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: DOUBLE
2683: LD_INT 1
2685: DEC
2686: ST_TO_ADDR
2687: LD_INT 2
2689: PUSH
2690: FOR_TO
2691: IFFALSE 2758
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2693: LD_INT 0
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 12
2709: PPUSH
2710: CALL_OW 380
// un = CreateHuman ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: CALL_OW 44
2723: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2724: LD_ADDR_EXP 76
2728: PUSH
2729: LD_EXP 76
2733: PUSH
2734: LD_VAR 0 3
2738: ADD
2739: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2740: LD_ADDR_VAR 0 4
2744: PUSH
2745: LD_VAR 0 4
2749: PUSH
2750: LD_VAR 0 3
2754: ADD
2755: ST_TO_ADDR
// end ;
2756: GO 2690
2758: POP
2759: POP
// for i := 1 to unitsTemp do
2760: LD_ADDR_VAR 0 2
2764: PUSH
2765: DOUBLE
2766: LD_INT 1
2768: DEC
2769: ST_TO_ADDR
2770: LD_VAR 0 4
2774: PUSH
2775: FOR_TO
2776: IFFALSE 2864
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2778: LD_ADDR_VAR 0 5
2782: PUSH
2783: LD_INT 8
2785: PPUSH
2786: LD_INT 22
2788: PUSH
2789: LD_INT 6
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 70
2814: PUSH
2815: LD_VAR 0 2
2819: ARRAY
2820: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2821: LD_VAR 0 4
2825: PUSH
2826: LD_VAR 0 2
2830: ARRAY
2831: PPUSH
2832: LD_VAR 0 5
2836: PPUSH
2837: CALL_OW 250
2841: PPUSH
2842: LD_VAR 0 5
2846: PPUSH
2847: CALL_OW 251
2851: PPUSH
2852: LD_INT 2
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 50
// end ;
2862: GO 2775
2864: POP
2865: POP
// end ; end_of_file
2866: LD_VAR 0 1
2870: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2871: LD_INT 0
2873: PPUSH
// PrepareTrap ;
2874: CALL 2887 0 0
// PrepareBunkiers ;
2878: CALL 3477 0 0
// end ;
2882: LD_VAR 0 1
2886: RET
// function PrepareTrap ; var i , un ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
2891: PPUSH
// trapTeam = [ ] ;
2892: LD_ADDR_EXP 80
2896: PUSH
2897: EMPTY
2898: ST_TO_ADDR
// uc_nation = 1 ;
2899: LD_ADDR_OWVAR 21
2903: PUSH
2904: LD_INT 1
2906: ST_TO_ADDR
// uc_side = 1 ;
2907: LD_ADDR_OWVAR 20
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// hc_gallery =  ;
2915: LD_ADDR_OWVAR 33
2919: PUSH
2920: LD_STRING 
2922: ST_TO_ADDR
// hc_name =  ;
2923: LD_ADDR_OWVAR 26
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_importance = 100 ;
2931: LD_ADDR_OWVAR 32
2935: PUSH
2936: LD_INT 100
2938: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2939: LD_INT 1
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: LD_EXP 58
2949: PUSH
2950: LD_INT 1
2952: PLUS
2953: PPUSH
2954: CALL_OW 380
// trapCommander = CreateHuman ;
2958: LD_ADDR_EXP 79
2962: PUSH
2963: CALL_OW 44
2967: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2968: LD_EXP 79
2972: PPUSH
2973: LD_INT 13
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2983: LD_EXP 79
2987: PPUSH
2988: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2992: LD_ADDR_EXP 80
2996: PUSH
2997: LD_EXP 80
3001: PUSH
3002: LD_EXP 79
3006: ADD
3007: ST_TO_ADDR
// hc_importance = 0 ;
3008: LD_ADDR_OWVAR 32
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3016: LD_ADDR_VAR 0 2
3020: PUSH
3021: DOUBLE
3022: LD_INT 1
3024: DEC
3025: ST_TO_ADDR
3026: LD_EXP 59
3030: PUSH
3031: LD_INT 1
3033: ARRAY
3034: PUSH
3035: FOR_TO
3036: IFFALSE 3128
// begin hc_name =  ;
3038: LD_ADDR_OWVAR 26
3042: PUSH
3043: LD_STRING 
3045: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3046: LD_INT 0
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_EXP 58
3056: PPUSH
3057: CALL_OW 380
// un = CreateHuman ;
3061: LD_ADDR_VAR 0 3
3065: PUSH
3066: CALL_OW 44
3070: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3071: LD_VAR 0 3
3075: PPUSH
3076: LD_INT 12
3078: PPUSH
3079: LD_INT 0
3081: PPUSH
3082: CALL_OW 49
// ComCrawl ( un ) ;
3086: LD_VAR 0 3
3090: PPUSH
3091: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3095: LD_VAR 0 3
3099: PPUSH
3100: LD_INT 116
3102: PPUSH
3103: LD_INT 21
3105: PPUSH
3106: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3110: LD_ADDR_EXP 80
3114: PUSH
3115: LD_EXP 80
3119: PUSH
3120: LD_VAR 0 3
3124: ADD
3125: ST_TO_ADDR
// end ;
3126: GO 3035
3128: POP
3129: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3130: LD_ADDR_VAR 0 2
3134: PUSH
3135: DOUBLE
3136: LD_INT 1
3138: DEC
3139: ST_TO_ADDR
3140: LD_EXP 59
3144: PUSH
3145: LD_INT 2
3147: ARRAY
3148: PUSH
3149: FOR_TO
3150: IFFALSE 3242
// begin hc_name =  ;
3152: LD_ADDR_OWVAR 26
3156: PUSH
3157: LD_STRING 
3159: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3160: LD_INT 0
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: LD_EXP 58
3170: PPUSH
3171: CALL_OW 380
// un = CreateHuman ;
3175: LD_ADDR_VAR 0 3
3179: PUSH
3180: CALL_OW 44
3184: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3185: LD_VAR 0 3
3189: PPUSH
3190: LD_INT 14
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// ComCrawl ( un ) ;
3200: LD_VAR 0 3
3204: PPUSH
3205: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3209: LD_VAR 0 3
3213: PPUSH
3214: LD_INT 116
3216: PPUSH
3217: LD_INT 21
3219: PPUSH
3220: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3224: LD_ADDR_EXP 80
3228: PUSH
3229: LD_EXP 80
3233: PUSH
3234: LD_VAR 0 3
3238: ADD
3239: ST_TO_ADDR
// end ;
3240: GO 3149
3242: POP
3243: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3244: LD_ADDR_VAR 0 2
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_EXP 59
3258: PUSH
3259: LD_INT 3
3261: ARRAY
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3356
// begin hc_name =  ;
3266: LD_ADDR_OWVAR 26
3270: PUSH
3271: LD_STRING 
3273: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3274: LD_INT 0
3276: PPUSH
3277: LD_INT 1
3279: PPUSH
3280: LD_EXP 58
3284: PPUSH
3285: CALL_OW 380
// un = CreateHuman ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: CALL_OW 44
3298: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3299: LD_VAR 0 3
3303: PPUSH
3304: LD_INT 23
3306: PPUSH
3307: LD_INT 0
3309: PPUSH
3310: CALL_OW 49
// ComCrawl ( un ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3323: LD_VAR 0 3
3327: PPUSH
3328: LD_INT 109
3330: PPUSH
3331: LD_INT 8
3333: PPUSH
3334: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3338: LD_ADDR_EXP 80
3342: PUSH
3343: LD_EXP 80
3347: PUSH
3348: LD_VAR 0 3
3352: ADD
3353: ST_TO_ADDR
// end ;
3354: GO 3263
3356: POP
3357: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_EXP 59
3372: PUSH
3373: LD_INT 4
3375: ARRAY
3376: PUSH
3377: FOR_TO
3378: IFFALSE 3470
// begin hc_name =  ;
3380: LD_ADDR_OWVAR 26
3384: PUSH
3385: LD_STRING 
3387: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3388: LD_INT 0
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: LD_EXP 58
3398: PPUSH
3399: CALL_OW 380
// un = CreateHuman ;
3403: LD_ADDR_VAR 0 3
3407: PUSH
3408: CALL_OW 44
3412: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3413: LD_VAR 0 3
3417: PPUSH
3418: LD_INT 24
3420: PPUSH
3421: LD_INT 0
3423: PPUSH
3424: CALL_OW 49
// ComCrawl ( un ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3437: LD_VAR 0 3
3441: PPUSH
3442: LD_INT 109
3444: PPUSH
3445: LD_INT 8
3447: PPUSH
3448: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3452: LD_ADDR_EXP 80
3456: PUSH
3457: LD_EXP 80
3461: PUSH
3462: LD_VAR 0 3
3466: ADD
3467: ST_TO_ADDR
// end ;
3468: GO 3377
3470: POP
3471: POP
// end ;
3472: LD_VAR 0 1
3476: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3477: LD_INT 0
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
// uc_side = 1 ;
3483: LD_ADDR_OWVAR 20
3487: PUSH
3488: LD_INT 1
3490: ST_TO_ADDR
// uc_nation = nation_american ;
3491: LD_ADDR_OWVAR 21
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// bc_level = 1 ;
3499: LD_ADDR_OWVAR 43
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// bc_type = b_breastwork ;
3507: LD_ADDR_OWVAR 42
3511: PUSH
3512: LD_INT 31
3514: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3515: LD_ADDR_VAR 0 4
3519: PUSH
3520: LD_INT 104
3522: PPUSH
3523: LD_INT 59
3525: PPUSH
3526: LD_INT 4
3528: PPUSH
3529: CALL_OW 47
3533: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3534: LD_ADDR_EXP 81
3538: PUSH
3539: LD_EXP 81
3543: PUSH
3544: LD_VAR 0 4
3548: ADD
3549: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3550: LD_EXP 58
3554: PPUSH
3555: LD_VAR 0 4
3559: PPUSH
3560: CALL 5078 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3564: LD_ADDR_VAR 0 4
3568: PUSH
3569: LD_INT 101
3571: PPUSH
3572: LD_INT 55
3574: PPUSH
3575: LD_INT 4
3577: PPUSH
3578: CALL_OW 47
3582: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3583: LD_ADDR_EXP 81
3587: PUSH
3588: LD_EXP 81
3592: PUSH
3593: LD_VAR 0 4
3597: ADD
3598: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3599: LD_EXP 58
3603: PPUSH
3604: LD_VAR 0 4
3608: PPUSH
3609: CALL 5078 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_INT 132
3620: PPUSH
3621: LD_INT 62
3623: PPUSH
3624: LD_INT 1
3626: PPUSH
3627: CALL_OW 47
3631: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3632: LD_ADDR_EXP 82
3636: PUSH
3637: LD_EXP 82
3641: PUSH
3642: LD_VAR 0 4
3646: ADD
3647: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3648: LD_EXP 58
3652: PPUSH
3653: LD_VAR 0 4
3657: PPUSH
3658: CALL 5078 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3662: LD_ADDR_VAR 0 4
3666: PUSH
3667: LD_INT 134
3669: PPUSH
3670: LD_INT 66
3672: PPUSH
3673: LD_INT 1
3675: PPUSH
3676: CALL_OW 47
3680: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3681: LD_ADDR_EXP 82
3685: PUSH
3686: LD_EXP 82
3690: PUSH
3691: LD_VAR 0 4
3695: ADD
3696: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3697: LD_EXP 58
3701: PPUSH
3702: LD_VAR 0 4
3706: PPUSH
3707: CALL 5078 0 2
// bc_type = b_depot ;
3711: LD_ADDR_OWVAR 42
3715: PUSH
3716: LD_INT 0
3718: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3719: LD_ADDR_EXP 83
3723: PUSH
3724: LD_INT 92
3726: PPUSH
3727: LD_INT 51
3729: PPUSH
3730: LD_INT 2
3732: PPUSH
3733: CALL_OW 47
3737: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3738: LD_ADDR_EXP 84
3742: PUSH
3743: LD_INT 193
3745: ST_TO_ADDR
// amLeftEngs = [ ] ;
3746: LD_ADDR_EXP 85
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3753: LD_ADDR_VAR 0 2
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_INT 1
3765: PUSH
3766: LD_INT 1
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 2
3774: PPUSH
3775: CALL_OW 12
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3883
// begin uc_nation = 1 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 1
3801: ST_TO_ADDR
// uc_side = 1 ;
3802: LD_ADDR_OWVAR 20
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// hc_gallery =  ;
3810: LD_ADDR_OWVAR 33
3814: PUSH
3815: LD_STRING 
3817: ST_TO_ADDR
// hc_name =  ;
3818: LD_ADDR_OWVAR 26
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3826: LD_INT 0
3828: PPUSH
3829: LD_INT 2
3831: PPUSH
3832: LD_EXP 58
3836: PPUSH
3837: CALL_OW 380
// un = CreateHuman ;
3841: LD_ADDR_VAR 0 3
3845: PUSH
3846: CALL_OW 44
3850: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3851: LD_ADDR_EXP 85
3855: PUSH
3856: LD_EXP 85
3860: PUSH
3861: LD_VAR 0 3
3865: ADD
3866: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3867: LD_VAR 0 3
3871: PPUSH
3872: LD_EXP 83
3876: PPUSH
3877: CALL_OW 52
// end ;
3881: GO 3791
3883: POP
3884: POP
// if Difficulty = 3 then
3885: LD_OWVAR 67
3889: PUSH
3890: LD_INT 3
3892: EQUAL
3893: IFFALSE 4017
// begin amRightEngs = [ ] ;
3895: LD_ADDR_EXP 86
3899: PUSH
3900: EMPTY
3901: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3902: LD_ADDR_VAR 0 2
3906: PUSH
3907: DOUBLE
3908: LD_INT 1
3910: DEC
3911: ST_TO_ADDR
3912: LD_INT 1
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: CALL_OW 12
3922: PUSH
3923: FOR_TO
3924: IFFALSE 4015
// begin uc_nation = 1 ;
3926: LD_ADDR_OWVAR 21
3930: PUSH
3931: LD_INT 1
3933: ST_TO_ADDR
// uc_side = 1 ;
3934: LD_ADDR_OWVAR 20
3938: PUSH
3939: LD_INT 1
3941: ST_TO_ADDR
// hc_gallery =  ;
3942: LD_ADDR_OWVAR 33
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// hc_name =  ;
3950: LD_ADDR_OWVAR 26
3954: PUSH
3955: LD_STRING 
3957: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3958: LD_INT 0
3960: PPUSH
3961: LD_INT 2
3963: PPUSH
3964: LD_EXP 58
3968: PPUSH
3969: CALL_OW 380
// un = CreateHuman ;
3973: LD_ADDR_VAR 0 3
3977: PUSH
3978: CALL_OW 44
3982: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3983: LD_ADDR_EXP 86
3987: PUSH
3988: LD_EXP 86
3992: PUSH
3993: LD_VAR 0 3
3997: ADD
3998: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3999: LD_VAR 0 3
4003: PPUSH
4004: LD_EXP 84
4008: PPUSH
4009: CALL_OW 52
// end ;
4013: GO 3923
4015: POP
4016: POP
// end ; end ; end_of_file
4017: LD_VAR 0 1
4021: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
// if exist_mode then
4026: LD_VAR 0 2
4030: IFFALSE 4055
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_EXP 48
4041: PUSH
4042: LD_VAR 0 1
4046: STR
4047: PPUSH
4048: CALL_OW 34
4052: ST_TO_ADDR
4053: GO 4070
// unit := NewCharacter ( ident ) ;
4055: LD_ADDR_VAR 0 4
4059: PUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 25
4069: ST_TO_ADDR
// result := unit ;
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: LD_VAR 0 4
4079: ST_TO_ADDR
// end ;
4080: LD_VAR 0 3
4084: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4085: LD_INT 0
4087: PPUSH
4088: PPUSH
4089: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: LD_VAR 0 1
4099: PUSH
4100: LD_EXP 61
4104: PUSH
4105: LD_EXP 62
4109: PUSH
4110: LD_EXP 63
4114: PUSH
4115: LD_EXP 64
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: DIFF
4126: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4127: LD_ADDR_VAR 0 7
4131: PUSH
4132: LD_VAR 0 1
4136: PUSH
4137: LD_INT 1
4139: PPUSH
4140: LD_VAR 0 1
4144: PPUSH
4145: CALL_OW 12
4149: ARRAY
4150: ST_TO_ADDR
// if radio then
4151: LD_VAR 0 4
4155: IFFALSE 4204
// begin if GetSex ( speaker ) = sex_male then
4157: LD_VAR 0 7
4161: PPUSH
4162: CALL_OW 258
4166: PUSH
4167: LD_INT 1
4169: EQUAL
4170: IFFALSE 4188
// SayRadio ( speaker , dialogMID ) else
4172: LD_VAR 0 7
4176: PPUSH
4177: LD_VAR 0 2
4181: PPUSH
4182: CALL_OW 94
4186: GO 4202
// SayRadio ( speaker , dialogFID ) ;
4188: LD_VAR 0 7
4192: PPUSH
4193: LD_VAR 0 3
4197: PPUSH
4198: CALL_OW 94
// end else
4202: GO 4249
// begin if GetSex ( speaker ) = sex_male then
4204: LD_VAR 0 7
4208: PPUSH
4209: CALL_OW 258
4213: PUSH
4214: LD_INT 1
4216: EQUAL
4217: IFFALSE 4235
// Say ( speaker , dialogMID ) else
4219: LD_VAR 0 7
4223: PPUSH
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 88
4233: GO 4249
// Say ( speaker , dialogFID ) ;
4235: LD_VAR 0 7
4239: PPUSH
4240: LD_VAR 0 3
4244: PPUSH
4245: CALL_OW 88
// end ; result := speaker ;
4249: LD_ADDR_VAR 0 5
4253: PUSH
4254: LD_VAR 0 7
4258: ST_TO_ADDR
// end ;
4259: LD_VAR 0 5
4263: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4264: LD_INT 0
4266: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4267: LD_VAR 0 1
4271: PPUSH
4272: CALL_OW 255
4276: PUSH
4277: LD_VAR 0 3
4281: EQUAL
4282: PUSH
4283: LD_VAR 0 1
4287: PPUSH
4288: CALL_OW 302
4292: AND
4293: IFFALSE 4315
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_EXP 47
4304: PUSH
4305: LD_VAR 0 2
4309: STR
4310: PPUSH
4311: CALL_OW 38
// end ;
4315: LD_VAR 0 4
4319: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
4324: PPUSH
// resultCharactersToSave = [ ] ;
4325: LD_ADDR_VAR 0 6
4329: PUSH
4330: EMPTY
4331: ST_TO_ADDR
// for unit in characters do
4332: LD_ADDR_VAR 0 5
4336: PUSH
4337: LD_VAR 0 1
4341: PUSH
4342: FOR_IN
4343: IFFALSE 4391
// if GetSide ( unit ) = side and IsOK ( unit ) then
4345: LD_VAR 0 5
4349: PPUSH
4350: CALL_OW 255
4354: PUSH
4355: LD_VAR 0 3
4359: EQUAL
4360: PUSH
4361: LD_VAR 0 5
4365: PPUSH
4366: CALL_OW 302
4370: AND
4371: IFFALSE 4389
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4373: LD_ADDR_VAR 0 6
4377: PUSH
4378: LD_VAR 0 6
4382: PUSH
4383: LD_VAR 0 5
4387: ADD
4388: ST_TO_ADDR
4389: GO 4342
4391: POP
4392: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4393: LD_VAR 0 6
4397: PPUSH
4398: LD_EXP 47
4402: PUSH
4403: LD_VAR 0 2
4407: STR
4408: PPUSH
4409: CALL_OW 38
// end ;
4413: LD_VAR 0 4
4417: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4418: LD_INT 0
4420: PPUSH
4421: PPUSH
4422: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4423: LD_ADDR_VAR 0 3
4427: PUSH
4428: LD_STRING QMoreInfo
4430: PPUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: CALL_OW 98
4440: ST_TO_ADDR
// case dec of 1 :
4441: LD_VAR 0 3
4445: PUSH
4446: LD_INT 1
4448: DOUBLE
4449: EQUAL
4450: IFTRUE 4454
4452: GO 4514
4454: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4455: LD_EXP 61
4459: PPUSH
4460: LD_STRING D2a-Bur-1
4462: PPUSH
4463: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4467: LD_EXP 75
4471: PPUSH
4472: LD_STRING D2a-Pla-1
4474: PPUSH
4475: CALL_OW 88
// q1 = q diff 1 ;
4479: LD_ADDR_VAR 0 4
4483: PUSH
4484: LD_VAR 0 1
4488: PUSH
4489: LD_INT 1
4491: DIFF
4492: ST_TO_ADDR
// if q1 >= 2 then
4493: LD_VAR 0 4
4497: PUSH
4498: LD_INT 2
4500: GREATEREQUAL
4501: IFFALSE 4512
// Question1 ( q1 ) ;
4503: LD_VAR 0 4
4507: PPUSH
4508: CALL 4418 0 1
// end ; 2 :
4512: GO 4651
4514: LD_INT 2
4516: DOUBLE
4517: EQUAL
4518: IFTRUE 4522
4520: GO 4582
4522: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4523: LD_EXP 61
4527: PPUSH
4528: LD_STRING D2b-Bur-1
4530: PPUSH
4531: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4535: LD_EXP 75
4539: PPUSH
4540: LD_STRING D2b-Pla-1
4542: PPUSH
4543: CALL_OW 88
// q1 = q diff 2 ;
4547: LD_ADDR_VAR 0 4
4551: PUSH
4552: LD_VAR 0 1
4556: PUSH
4557: LD_INT 2
4559: DIFF
4560: ST_TO_ADDR
// if q1 >= 2 then
4561: LD_VAR 0 4
4565: PUSH
4566: LD_INT 2
4568: GREATEREQUAL
4569: IFFALSE 4580
// Question1 ( q1 ) ;
4571: LD_VAR 0 4
4575: PPUSH
4576: CALL 4418 0 1
// end ; 3 :
4580: GO 4651
4582: LD_INT 3
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4650
4590: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4591: LD_EXP 61
4595: PPUSH
4596: LD_STRING D2c-Bur-1
4598: PPUSH
4599: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4603: LD_EXP 75
4607: PPUSH
4608: LD_STRING D2c-Pla-1
4610: PPUSH
4611: CALL_OW 88
// q1 = q diff 3 ;
4615: LD_ADDR_VAR 0 4
4619: PUSH
4620: LD_VAR 0 1
4624: PUSH
4625: LD_INT 3
4627: DIFF
4628: ST_TO_ADDR
// if q1 >= 2 then
4629: LD_VAR 0 4
4633: PUSH
4634: LD_INT 2
4636: GREATEREQUAL
4637: IFFALSE 4648
// Question1 ( q1 ) ;
4639: LD_VAR 0 4
4643: PPUSH
4644: CALL 4418 0 1
// end ; end ;
4648: GO 4651
4650: POP
// end ;
4651: LD_VAR 0 2
4655: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4656: LD_INT 0
4658: PPUSH
4659: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 302
4669: NOT
4670: PUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: CALL_OW 302
4680: NOT
4681: OR
4682: PUSH
4683: LD_VAR 0 3
4687: PPUSH
4688: CALL_OW 302
4692: NOT
4693: OR
4694: PUSH
4695: LD_VAR 0 3
4699: PPUSH
4700: CALL_OW 261
4704: PUSH
4705: LD_INT 100
4707: EQUAL
4708: OR
4709: IFFALSE 4713
// exit ;
4711: GO 4832
// AddComTransport ( engineer , depot , mat_oil ) ;
4713: LD_VAR 0 1
4717: PPUSH
4718: LD_VAR 0 2
4722: PPUSH
4723: LD_INT 2
4725: PPUSH
4726: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4730: LD_INT 35
4732: PPUSH
4733: CALL_OW 67
// until Carry ( engineer ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: CALL_OW 281
4746: IFFALSE 4730
// RemoveTasks ( engineer ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4757: LD_VAR 0 1
4761: PPUSH
4762: LD_STRING O
4764: PUSH
4765: LD_INT 0
4767: PUSH
4768: LD_INT 0
4770: PUSH
4771: LD_VAR 0 3
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: LD_INT 0
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: PPUSH
4797: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4801: LD_INT 35
4803: PPUSH
4804: CALL_OW 67
// until not Carry ( engineer ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: CALL_OW 281
4817: NOT
4818: IFFALSE 4801
// SetFuel ( vehicle , 100 ) ;
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_INT 100
4827: PPUSH
4828: CALL_OW 240
// end ;
4832: LD_VAR 0 4
4836: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4844: LD_ADDR_VAR 0 8
4848: PUSH
4849: LD_INT 48
4851: PUSH
4852: LD_INT 49
4854: PUSH
4855: LD_INT 50
4857: PUSH
4858: LD_INT 20
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: LD_INT 51
4866: PUSH
4867: LD_INT 52
4869: PUSH
4870: LD_INT 69
4872: PUSH
4873: LD_INT 39
4875: PUSH
4876: LD_INT 34
4878: PUSH
4879: LD_INT 40
4881: PUSH
4882: LD_INT 53
4884: PUSH
4885: LD_INT 71
4887: PUSH
4888: LD_INT 57
4890: PUSH
4891: LD_INT 58
4893: PUSH
4894: LD_INT 44
4896: PUSH
4897: LD_INT 32
4899: PUSH
4900: LD_INT 27
4902: PUSH
4903: LD_INT 23
4905: PUSH
4906: LD_INT 33
4908: PUSH
4909: LD_INT 59
4911: PUSH
4912: LD_INT 54
4914: PUSH
4915: LD_INT 55
4917: PUSH
4918: LD_INT 56
4920: PUSH
4921: LD_INT 63
4923: PUSH
4924: LD_INT 64
4926: PUSH
4927: LD_INT 65
4929: PUSH
4930: LD_INT 30
4932: PUSH
4933: LD_INT 31
4935: PUSH
4936: LD_INT 21
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 25
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4979: LD_ADDR_VAR 0 5
4983: PUSH
4984: DOUBLE
4985: LD_INT 1
4987: DEC
4988: ST_TO_ADDR
4989: LD_VAR 0 8
4993: PUSH
4994: FOR_TO
4995: IFFALSE 5071
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4997: LD_VAR 0 8
5001: PUSH
5002: LD_VAR 0 5
5006: ARRAY
5007: PPUSH
5008: LD_VAR 0 1
5012: PPUSH
5013: CALL_OW 321
5017: PUSH
5018: LD_INT 1
5020: EQUAL
5021: PUSH
5022: LD_VAR 0 8
5026: PUSH
5027: LD_VAR 0 5
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 3
5037: PPUSH
5038: CALL_OW 482
5042: PUSH
5043: LD_INT 1
5045: EQUAL
5046: AND
5047: IFFALSE 5069
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5049: LD_VAR 0 2
5053: PPUSH
5054: LD_VAR 0 8
5058: PUSH
5059: LD_VAR 0 5
5063: ARRAY
5064: PPUSH
5065: CALL_OW 184
5069: GO 4994
5071: POP
5072: POP
// end ;
5073: LD_VAR 0 4
5077: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5078: LD_INT 0
5080: PPUSH
5081: PPUSH
5082: PPUSH
// uc_side := GetSide ( b ) ;
5083: LD_ADDR_OWVAR 20
5087: PUSH
5088: LD_VAR 0 2
5092: PPUSH
5093: CALL_OW 255
5097: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5098: LD_ADDR_OWVAR 21
5102: PUSH
5103: LD_VAR 0 2
5107: PPUSH
5108: CALL_OW 248
5112: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5113: LD_INT 0
5115: PPUSH
5116: LD_INT 1
5118: PPUSH
5119: LD_VAR 0 1
5123: PPUSH
5124: CALL_OW 380
// un = CreateHuman ;
5128: LD_ADDR_VAR 0 4
5132: PUSH
5133: CALL_OW 44
5137: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5138: LD_ADDR_VAR 0 5
5142: PUSH
5143: LD_VAR 0 2
5147: PPUSH
5148: CALL_OW 254
5152: PUSH
5153: LD_INT 3
5155: MINUS
5156: ST_TO_ADDR
// if dir < 0 then
5157: LD_VAR 0 5
5161: PUSH
5162: LD_INT 0
5164: LESS
5165: IFFALSE 5181
// dir := 6 + dir ;
5167: LD_ADDR_VAR 0 5
5171: PUSH
5172: LD_INT 6
5174: PUSH
5175: LD_VAR 0 5
5179: PLUS
5180: ST_TO_ADDR
// SetDir ( un , dir ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_VAR 0 5
5190: PPUSH
5191: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5195: LD_VAR 0 4
5199: PPUSH
5200: LD_VAR 0 2
5204: PPUSH
5205: CALL_OW 52
// result = un ;
5209: LD_ADDR_VAR 0 3
5213: PUSH
5214: LD_VAR 0 4
5218: ST_TO_ADDR
// end ;
5219: LD_VAR 0 3
5223: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5224: LD_INT 0
5226: PPUSH
5227: PPUSH
// dir := GetDir ( b ) - 3 ;
5228: LD_ADDR_VAR 0 4
5232: PUSH
5233: LD_VAR 0 2
5237: PPUSH
5238: CALL_OW 254
5242: PUSH
5243: LD_INT 3
5245: MINUS
5246: ST_TO_ADDR
// if dir < 0 then
5247: LD_VAR 0 4
5251: PUSH
5252: LD_INT 0
5254: LESS
5255: IFFALSE 5271
// dir := 6 + dir ;
5257: LD_ADDR_VAR 0 4
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_VAR 0 4
5269: PLUS
5270: ST_TO_ADDR
// SetDir ( un , dir ) ;
5271: LD_VAR 0 1
5275: PPUSH
5276: LD_VAR 0 4
5280: PPUSH
5281: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5285: LD_VAR 0 1
5289: PPUSH
5290: LD_VAR 0 2
5294: PPUSH
5295: CALL_OW 52
// result = un ;
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: LD_VAR 0 1
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 3
5313: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
// tmp = [ ] ;
5319: LD_ADDR_VAR 0 5
5323: PUSH
5324: EMPTY
5325: ST_TO_ADDR
// if not vehicles then
5326: LD_VAR 0 1
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5452
// for i in vehicles do
5335: LD_ADDR_VAR 0 4
5339: PUSH
5340: LD_VAR 0 1
5344: PUSH
5345: FOR_IN
5346: IFFALSE 5436
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5348: LD_ADDR_VAR 0 5
5352: PUSH
5353: LD_VAR 0 5
5357: PPUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_VAR 0 4
5365: PPUSH
5366: CALL_OW 265
5370: PUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 262
5380: PUSH
5381: LD_VAR 0 4
5385: PPUSH
5386: CALL_OW 263
5390: PUSH
5391: LD_VAR 0 4
5395: PPUSH
5396: CALL_OW 264
5400: PUSH
5401: LD_VAR 0 4
5405: PPUSH
5406: CALL_OW 261
5410: PUSH
5411: LD_VAR 0 4
5415: PPUSH
5416: CALL_OW 256
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PPUSH
5429: CALL_OW 2
5433: ST_TO_ADDR
5434: GO 5345
5436: POP
5437: POP
// SaveVariable ( tmp , ident ) ;
5438: LD_VAR 0 5
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 39
// end ;
5452: LD_VAR 0 3
5456: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5457: LD_INT 0
5459: PPUSH
5460: PPUSH
5461: PPUSH
// buildingsToSave = [ ] ;
5462: LD_ADDR_VAR 0 5
5466: PUSH
5467: EMPTY
5468: ST_TO_ADDR
// if not buildings then
5469: LD_VAR 0 1
5473: NOT
5474: IFFALSE 5478
// exit ;
5476: GO 6053
// for i in buildings do
5478: LD_ADDR_VAR 0 4
5482: PUSH
5483: LD_VAR 0 1
5487: PUSH
5488: FOR_IN
5489: IFFALSE 6037
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5491: LD_VAR 0 4
5495: PPUSH
5496: CALL_OW 266
5500: PUSH
5501: LD_INT 6
5503: PUSH
5504: LD_INT 7
5506: PUSH
5507: LD_INT 8
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: IN
5515: IFFALSE 5640
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5517: LD_ADDR_VAR 0 5
5521: PUSH
5522: LD_VAR 0 5
5526: PUSH
5527: LD_VAR 0 4
5531: PPUSH
5532: CALL_OW 266
5536: PUSH
5537: LD_VAR 0 4
5541: PPUSH
5542: CALL_OW 250
5546: PUSH
5547: LD_VAR 0 4
5551: PPUSH
5552: CALL_OW 251
5556: PUSH
5557: LD_VAR 0 4
5561: PPUSH
5562: CALL_OW 254
5566: PUSH
5567: LD_VAR 0 4
5571: PPUSH
5572: CALL_OW 267
5576: PUSH
5577: LD_VAR 0 4
5581: PPUSH
5582: CALL_OW 248
5586: PUSH
5587: LD_VAR 0 4
5591: PPUSH
5592: CALL_OW 256
5596: PUSH
5597: LD_VAR 0 4
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: CALL_OW 268
5609: PUSH
5610: LD_VAR 0 4
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 268
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: PUSH
5634: EMPTY
5635: LIST
5636: ADD
5637: ST_TO_ADDR
5638: GO 6035
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5640: LD_VAR 0 4
5644: PPUSH
5645: CALL_OW 266
5649: PUSH
5650: LD_INT 32
5652: PUSH
5653: LD_INT 33
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: IN
5660: IFFALSE 5768
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5662: LD_ADDR_VAR 0 5
5666: PUSH
5667: LD_VAR 0 5
5671: PUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: CALL_OW 266
5681: PUSH
5682: LD_VAR 0 4
5686: PPUSH
5687: CALL_OW 250
5691: PUSH
5692: LD_VAR 0 4
5696: PPUSH
5697: CALL_OW 251
5701: PUSH
5702: LD_VAR 0 4
5706: PPUSH
5707: CALL_OW 254
5711: PUSH
5712: LD_VAR 0 4
5716: PPUSH
5717: CALL_OW 267
5721: PUSH
5722: LD_VAR 0 4
5726: PPUSH
5727: CALL_OW 248
5731: PUSH
5732: LD_VAR 0 4
5736: PPUSH
5737: CALL_OW 256
5741: PUSH
5742: LD_VAR 0 4
5746: PPUSH
5747: CALL_OW 269
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: ADD
5765: ST_TO_ADDR
5766: GO 6035
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 266
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 1
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: IN
5788: IFFALSE 5942
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_VAR 0 5
5799: PUSH
5800: LD_VAR 0 4
5804: PPUSH
5805: CALL_OW 266
5809: PUSH
5810: LD_VAR 0 4
5814: PPUSH
5815: CALL_OW 250
5819: PUSH
5820: LD_VAR 0 4
5824: PPUSH
5825: CALL_OW 251
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: CALL_OW 254
5839: PUSH
5840: LD_VAR 0 4
5844: PPUSH
5845: CALL_OW 267
5849: PUSH
5850: LD_VAR 0 4
5854: PPUSH
5855: CALL_OW 248
5859: PUSH
5860: LD_VAR 0 4
5864: PPUSH
5865: CALL_OW 256
5869: PUSH
5870: LD_VAR 0 4
5874: PPUSH
5875: CALL_OW 274
5879: PPUSH
5880: LD_INT 1
5882: PPUSH
5883: CALL_OW 275
5887: PUSH
5888: LD_VAR 0 4
5892: PPUSH
5893: CALL_OW 274
5897: PPUSH
5898: LD_INT 2
5900: PPUSH
5901: CALL_OW 275
5905: PUSH
5906: LD_VAR 0 4
5910: PPUSH
5911: CALL_OW 274
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: CALL_OW 275
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: ADD
5939: ST_TO_ADDR
5940: GO 6035
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5942: LD_ADDR_VAR 0 5
5946: PUSH
5947: LD_VAR 0 5
5951: PUSH
5952: LD_VAR 0 4
5956: PPUSH
5957: CALL_OW 266
5961: PUSH
5962: LD_VAR 0 4
5966: PPUSH
5967: CALL_OW 250
5971: PUSH
5972: LD_VAR 0 4
5976: PPUSH
5977: CALL_OW 251
5981: PUSH
5982: LD_VAR 0 4
5986: PPUSH
5987: CALL_OW 254
5991: PUSH
5992: LD_VAR 0 4
5996: PPUSH
5997: CALL_OW 267
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: CALL_OW 248
6011: PUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 256
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: ADD
6034: ST_TO_ADDR
// end ;
6035: GO 5488
6037: POP
6038: POP
// SaveVariable ( buildingsToSave , ident ) ;
6039: LD_VAR 0 5
6043: PPUSH
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 39
// end ;
6053: LD_VAR 0 3
6057: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
// belkovTeam = [ ] ;
6065: LD_ADDR_EXP 72
6069: PUSH
6070: EMPTY
6071: ST_TO_ADDR
// if belkovReturn then
6072: LD_EXP 6
6076: IFFALSE 6094
// belkovTeam = belkovTeam ^ Belkov ;
6078: LD_ADDR_EXP 72
6082: PUSH
6083: LD_EXP 72
6087: PUSH
6088: LD_EXP 63
6092: ADD
6093: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6094: LD_ADDR_EXP 72
6098: PUSH
6099: LD_EXP 72
6103: PUSH
6104: LD_EXP 67
6108: ADD
6109: ST_TO_ADDR
// for unit in other_survivors do
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_EXP 65
6119: PUSH
6120: FOR_IN
6121: IFFALSE 6162
// if IsOK ( unit ) and belkovTeam < 5 then
6123: LD_VAR 0 3
6127: PPUSH
6128: CALL_OW 302
6132: PUSH
6133: LD_EXP 72
6137: PUSH
6138: LD_INT 5
6140: LESS
6141: AND
6142: IFFALSE 6160
// belkovTeam = belkovTeam ^ unit ;
6144: LD_ADDR_EXP 72
6148: PUSH
6149: LD_EXP 72
6153: PUSH
6154: LD_VAR 0 3
6158: ADD
6159: ST_TO_ADDR
6160: GO 6120
6162: POP
6163: POP
// if belkovTeam < 5 then
6164: LD_EXP 72
6168: PUSH
6169: LD_INT 5
6171: LESS
6172: IFFALSE 6298
// begin restRandSolds = 5 - belkovTeam ;
6174: LD_ADDR_VAR 0 4
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: LD_EXP 72
6186: MINUS
6187: ST_TO_ADDR
// for i := 1 to restRandSolds do
6188: LD_ADDR_VAR 0 2
6192: PUSH
6193: DOUBLE
6194: LD_INT 1
6196: DEC
6197: ST_TO_ADDR
6198: LD_VAR 0 4
6202: PUSH
6203: FOR_TO
6204: IFFALSE 6296
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: LD_EXP 68
6215: PPUSH
6216: LD_INT 25
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: PPUSH
6229: CALL_OW 72
6233: PUSH
6234: LD_EXP 66
6238: DIFF
6239: PUSH
6240: FOR_IN
6241: IFFALSE 6292
// if not unit in belkovTeam then
6243: LD_VAR 0 3
6247: PUSH
6248: LD_EXP 72
6252: IN
6253: NOT
6254: IFFALSE 6290
// begin belkovTeam = belkovTeam ^ unit ;
6256: LD_ADDR_EXP 72
6260: PUSH
6261: LD_EXP 72
6265: PUSH
6266: LD_VAR 0 3
6270: ADD
6271: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6272: LD_ADDR_EXP 68
6276: PUSH
6277: LD_EXP 68
6281: PUSH
6282: LD_VAR 0 3
6286: DIFF
6287: ST_TO_ADDR
// break ;
6288: GO 6292
// end ;
6290: GO 6240
6292: POP
6293: POP
6294: GO 6203
6296: POP
6297: POP
// end ; tmp = belkovTeam diff Belkov ;
6298: LD_ADDR_VAR 0 5
6302: PUSH
6303: LD_EXP 72
6307: PUSH
6308: LD_EXP 63
6312: DIFF
6313: ST_TO_ADDR
// if tmp < 4 then
6314: LD_VAR 0 5
6318: PUSH
6319: LD_INT 4
6321: LESS
6322: IFFALSE 6406
// begin for i := 1 to 4 - tmp do
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: DOUBLE
6330: LD_INT 1
6332: DEC
6333: ST_TO_ADDR
6334: LD_INT 4
6336: PUSH
6337: LD_VAR 0 5
6341: MINUS
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6404
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6346: LD_INT 0
6348: PPUSH
6349: LD_INT 1
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 12
6359: PPUSH
6360: CALL_OW 381
// unit = CreateHuman ;
6364: LD_ADDR_VAR 0 3
6368: PUSH
6369: CALL_OW 44
6373: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6374: LD_ADDR_EXP 72
6378: PUSH
6379: LD_EXP 72
6383: PUSH
6384: LD_VAR 0 3
6388: ADD
6389: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6390: LD_VAR 0 3
6394: PPUSH
6395: LD_INT 209
6397: PPUSH
6398: CALL_OW 52
// end ;
6402: GO 6343
6404: POP
6405: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6406: LD_STRING 01_Kirilenkova
6408: PPUSH
6409: CALL_OW 28
6413: IFFALSE 6433
// belkovTeam = belkovTeam ^ Kirilenkova else
6415: LD_ADDR_EXP 72
6419: PUSH
6420: LD_EXP 72
6424: PUSH
6425: LD_EXP 64
6429: ADD
6430: ST_TO_ADDR
6431: GO 6509
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6433: LD_ADDR_EXP 72
6437: PUSH
6438: LD_EXP 72
6442: PUSH
6443: LD_EXP 68
6447: PPUSH
6448: LD_INT 25
6450: PUSH
6451: LD_INT 4
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: PPUSH
6461: CALL_OW 72
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: ADD
6470: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6471: LD_ADDR_EXP 68
6475: PUSH
6476: LD_EXP 68
6480: PUSH
6481: LD_EXP 68
6485: PPUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 4
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: EMPTY
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: PUSH
6504: LD_INT 1
6506: ARRAY
6507: DIFF
6508: ST_TO_ADDR
// end ; end ;
6509: LD_VAR 0 1
6513: RET
// export function PlatonovSendSupport ; begin
6514: LD_INT 0
6516: PPUSH
// ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6517: LD_EXP 77
6521: PUSH
6522: LD_EXP 78
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PPUSH
6531: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6535: LD_EXP 77
6539: PUSH
6540: LD_EXP 78
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PPUSH
6549: LD_INT 112
6551: PPUSH
6552: LD_INT 96
6554: PPUSH
6555: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6559: LD_EXP 77
6563: PUSH
6564: LD_EXP 78
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PPUSH
6573: LD_INT 3
6575: PPUSH
6576: CALL_OW 235
// end ; end_of_file
6580: LD_VAR 0 1
6584: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6585: LD_INT 0
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6591: LD_EXP 61
6595: PPUSH
6596: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6600: LD_EXP 61
6604: PPUSH
6605: LD_INT 163
6607: PPUSH
6608: LD_INT 108
6610: PPUSH
6611: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6615: LD_EXP 61
6619: PPUSH
6620: LD_EXP 66
6624: PPUSH
6625: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_INT 3
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 21
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PUSH
6663: LD_EXP 61
6667: DIFF
6668: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6669: LD_ADDR_VAR 0 4
6673: PUSH
6674: DOUBLE
6675: LD_INT 1
6677: DEC
6678: ST_TO_ADDR
6679: LD_EXP 51
6683: PUSH
6684: FOR_TO
6685: IFFALSE 6803
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6687: LD_ADDR_VAR 0 3
6691: PUSH
6692: LD_VAR 0 2
6696: PPUSH
6697: LD_EXP 51
6701: PUSH
6702: LD_VAR 0 4
6706: ARRAY
6707: PUSH
6708: LD_INT 1
6710: ARRAY
6711: PPUSH
6712: LD_EXP 51
6716: PUSH
6717: LD_VAR 0 4
6721: ARRAY
6722: PUSH
6723: LD_INT 2
6725: ARRAY
6726: PPUSH
6727: CALL_OW 73
6731: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_EXP 51
6741: PUSH
6742: LD_VAR 0 4
6746: ARRAY
6747: PUSH
6748: LD_INT 1
6750: ARRAY
6751: PPUSH
6752: LD_EXP 51
6756: PUSH
6757: LD_VAR 0 4
6761: ARRAY
6762: PUSH
6763: LD_INT 2
6765: ARRAY
6766: PPUSH
6767: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
6771: LD_VAR 0 3
6775: PPUSH
6776: LD_EXP 66
6780: PPUSH
6781: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_VAR 0 3
6799: DIFF
6800: ST_TO_ADDR
// end ;
6801: GO 6684
6803: POP
6804: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6805: LD_EXP 61
6809: PPUSH
6810: CALL_OW 87
// wait ( 0 0$1 ) ;
6814: LD_INT 35
6816: PPUSH
6817: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
6821: LD_EXP 61
6825: PPUSH
6826: LD_EXP 66
6830: PPUSH
6831: CALL_OW 296
6835: PUSH
6836: LD_INT 4
6838: LESS
6839: IFFALSE 6805
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6841: LD_EXP 61
6845: PUSH
6846: LD_EXP 66
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
6859: LD_EXP 66
6863: PPUSH
6864: LD_EXP 61
6868: PPUSH
6869: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
6873: LD_EXP 66
6877: PPUSH
6878: LD_STRING D1-Kur-1
6880: PPUSH
6881: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6885: LD_EXP 61
6889: PPUSH
6890: LD_STRING D1-Bur-1
6892: PPUSH
6893: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
6897: LD_EXP 66
6901: PPUSH
6902: LD_STRING D1-Kur-2
6904: PPUSH
6905: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
6909: LD_EXP 61
6913: PPUSH
6914: LD_STRING D1-Bur-2
6916: PPUSH
6917: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6921: LD_EXP 66
6925: PPUSH
6926: LD_STRING D1-Kur-3
6928: PPUSH
6929: CALL_OW 88
// if IsOK ( Gnyevko ) then
6933: LD_EXP 62
6937: PPUSH
6938: CALL_OW 302
6942: IFFALSE 6956
// Say ( Kurin , D1-Kur-3a ) ;
6944: LD_EXP 66
6948: PPUSH
6949: LD_STRING D1-Kur-3a
6951: PPUSH
6952: CALL_OW 88
// InGameOff ;
6956: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
6960: LD_INT 22
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 21
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL_OW 69
6988: PUSH
6989: LD_EXP 61
6993: PUSH
6994: LD_EXP 62
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: DIFF
7003: PPUSH
7004: LD_INT 6
7006: PPUSH
7007: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7011: LD_EXP 69
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7023: LD_INT 9
7025: PPUSH
7026: LD_INT 22
7028: PUSH
7029: LD_INT 6
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 21
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL_OW 70
7054: PUSH
7055: LD_EXP 66
7059: DIFF
7060: PPUSH
7061: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7065: LD_EXP 65
7069: PPUSH
7070: LD_INT 95
7072: PPUSH
7073: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7077: LD_EXP 63
7081: PPUSH
7082: LD_INT 95
7084: PPUSH
7085: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7089: LD_EXP 64
7093: PPUSH
7094: CALL_OW 305
7098: IFFALSE 7112
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7100: LD_EXP 64
7104: PPUSH
7105: LD_INT 83
7107: PPUSH
7108: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7112: LD_STRING 01_Gnyevko
7114: PPUSH
7115: CALL_OW 28
7119: NOT
7120: IFFALSE 7134
// SetSide ( randomMech , 3 ) ;
7122: LD_EXP 70
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7134: LD_STRING M1
7136: PPUSH
7137: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7141: LD_INT 3
7143: PPUSH
7144: LD_INT 6
7146: PPUSH
7147: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7151: LD_INT 3
7153: PPUSH
7154: LD_INT 7
7156: PPUSH
7157: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7161: LD_INT 6
7163: PPUSH
7164: LD_INT 6
7166: PPUSH
7167: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7171: LD_INT 6
7173: PPUSH
7174: LD_INT 7
7176: PPUSH
7177: CALL_OW 334
// SaveForQuickRestart ;
7181: CALL_OW 22
// end ;
7185: LD_VAR 0 1
7189: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7190: LD_EXP 20
7194: NOT
7195: PUSH
7196: LD_INT 20
7198: PPUSH
7199: LD_INT 22
7201: PUSH
7202: LD_INT 3
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: LD_INT 21
7214: PUSH
7215: LD_INT 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 21
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 70
7245: PUSH
7246: LD_INT 0
7248: GREATER
7249: AND
7250: IFFALSE 7624
7252: GO 7254
7254: DISABLE
7255: LD_INT 0
7257: PPUSH
// begin enable ;
7258: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_INT 20
7266: PPUSH
7267: LD_INT 22
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 70
7313: PUSH
7314: FOR_IN
7315: IFFALSE 7601
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7317: LD_VAR 0 1
7321: PPUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: CALL_OW 250
7331: PPUSH
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 251
7341: PUSH
7342: LD_INT 5
7344: PLUS
7345: PPUSH
7346: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7350: LD_EXP 7
7354: NOT
7355: PUSH
7356: LD_EXP 33
7360: NOT
7361: AND
7362: IFFALSE 7425
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7364: LD_VAR 0 1
7368: PUSH
7369: LD_EXP 61
7373: NONEQUAL
7374: PUSH
7375: LD_EXP 69
7379: PPUSH
7380: CALL_OW 302
7384: AND
7385: IFFALSE 7399
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7387: LD_EXP 69
7391: PPUSH
7392: LD_STRING D1b-Kov-1
7394: PPUSH
7395: CALL_OW 88
// if unit = Burlak then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_EXP 61
7408: EQUAL
7409: IFFALSE 7423
// Say ( Burlak , D1b-Bur-1 ) ;
7411: LD_EXP 61
7415: PPUSH
7416: LD_STRING D1b-Bur-1
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7444
// if not dialogLoopBlocker then
7425: LD_EXP 33
7429: NOT
7430: IFFALSE 7444
// Say ( Platonov , D8-Pla-1 ) ;
7432: LD_EXP 75
7436: PPUSH
7437: LD_STRING D8-Pla-1
7439: PPUSH
7440: CALL_OW 88
// if not dialogLoopBlocker then
7444: LD_EXP 33
7448: NOT
7449: IFFALSE 7459
// dialogLoopBlocker = true ;
7451: LD_ADDR_EXP 33
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7459: LD_INT 20
7461: PPUSH
7462: LD_INT 22
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: LD_INT 21
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 21
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 70
7508: PPUSH
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 250
7518: PPUSH
7519: LD_VAR 0 1
7523: PPUSH
7524: CALL_OW 251
7528: PUSH
7529: LD_INT 5
7531: PLUS
7532: PPUSH
7533: CALL_OW 111
// wait ( 0 0$1 ) ;
7537: LD_INT 35
7539: PPUSH
7540: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7544: LD_INT 20
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: LD_INT 3
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: LD_INT 21
7562: PUSH
7563: LD_INT 1
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 21
7572: PUSH
7573: LD_INT 2
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PPUSH
7589: CALL_OW 70
7593: PUSH
7594: LD_INT 0
7596: EQUAL
7597: IFFALSE 7459
// end ;
7599: GO 7314
7601: POP
7602: POP
// if dialogLoopBlocker then
7603: LD_EXP 33
7607: IFFALSE 7624
// begin wait ( 0 0$5 ) ;
7609: LD_INT 175
7611: PPUSH
7612: CALL_OW 67
// dialogLoopBlocker = false ;
7616: LD_ADDR_EXP 33
7620: PUSH
7621: LD_INT 0
7623: ST_TO_ADDR
// end ; end ;
7624: PPOPN 1
7626: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7627: LD_EXP 19
7631: NOT
7632: PUSH
7633: LD_INT 8
7635: PPUSH
7636: LD_INT 22
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 2
7648: PUSH
7649: LD_INT 21
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 21
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 71
7682: PUSH
7683: LD_INT 0
7685: GREATER
7686: AND
7687: IFFALSE 7822
7689: GO 7691
7691: DISABLE
7692: LD_INT 0
7694: PPUSH
// begin enable ;
7695: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_INT 8
7703: PPUSH
7704: LD_INT 22
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 21
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 2
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 71
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7805
// begin ComMoveXY ( unit , 114 , 98 ) ;
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 114
7761: PPUSH
7762: LD_INT 98
7764: PPUSH
7765: CALL_OW 111
// if dialogLoopBlocker then
7769: LD_EXP 33
7773: IFFALSE 7779
// exit ;
7775: POP
7776: POP
7777: GO 7822
// dialogLoopBlocker = true ;
7779: LD_ADDR_EXP 33
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
7787: LD_EXP 75
7791: PPUSH
7792: LD_STRING D8-Pla-1
7794: PPUSH
7795: CALL_OW 88
// exit ;
7799: POP
7800: POP
7801: GO 7822
// end ;
7803: GO 7751
7805: POP
7806: POP
// wait ( 0 0$5 ) ;
7807: LD_INT 175
7809: PPUSH
7810: CALL_OW 67
// dialogLoopBlocker = false ;
7814: LD_ADDR_EXP 33
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// end ;
7822: PPOPN 1
7824: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7825: LD_EXP 7
7829: NOT
7830: PUSH
7831: LD_INT 9
7833: PPUSH
7834: LD_INT 22
7836: PUSH
7837: LD_INT 3
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 21
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 70
7862: PUSH
7863: LD_INT 0
7865: GREATER
7866: AND
7867: IFFALSE 7884
7869: GO 7871
7871: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
7872: LD_EXP 66
7876: PPUSH
7877: LD_STRING D1a-Kur-1
7879: PPUSH
7880: CALL_OW 88
7884: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
7885: LD_EXP 7
7889: NOT
7890: PUSH
7891: LD_EXP 61
7895: PPUSH
7896: CALL_OW 302
7900: AND
7901: PUSH
7902: LD_INT 8
7904: PPUSH
7905: LD_INT 22
7907: PUSH
7908: LD_INT 3
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 21
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PPUSH
7929: CALL_OW 70
7933: PUSH
7934: LD_INT 0
7936: GREATER
7937: AND
7938: IFFALSE 8438
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enable ;
7949: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_INT 3
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 69
7983: PUSH
7984: FOR_IN
7985: IFFALSE 8436
// if See ( 6 , unit ) then
7987: LD_INT 6
7989: PPUSH
7990: LD_VAR 0 2
7994: PPUSH
7995: CALL_OW 292
7999: IFFALSE 8434
// begin meetPlatonov = true ;
8001: LD_ADDR_EXP 7
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// InGameOn ;
8009: CALL_OW 8
// DialogueOn ;
8013: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
8017: LD_ADDR_VAR 0 4
8021: PUSH
8022: LD_EXP 76
8026: PPUSH
8027: LD_INT 26
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 72
8041: PPUSH
8042: LD_STRING D2-RSol1-1
8044: PPUSH
8045: LD_STRING 
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL 4085 0 4
8055: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
8056: LD_EXP 61
8060: PPUSH
8061: LD_STRING D2-Bur-1
8063: PPUSH
8064: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
8068: LD_VAR 0 4
8072: PPUSH
8073: LD_STRING D2-RSol1-2
8075: PPUSH
8076: CALL_OW 88
// DialogueOff ;
8080: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8084: LD_ADDR_VAR 0 3
8088: PUSH
8089: LD_INT 22
8091: PUSH
8092: LD_INT 3
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 1
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 50
8111: PUSH
8112: EMPTY
8113: LIST
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL_OW 69
8124: ST_TO_ADDR
// for i := 1 to yourUnits do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: DOUBLE
8131: LD_INT 1
8133: DEC
8134: ST_TO_ADDR
8135: LD_VAR 0 3
8139: PUSH
8140: FOR_TO
8141: IFFALSE 8210
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8143: LD_VAR 0 3
8147: PUSH
8148: LD_VAR 0 1
8152: ARRAY
8153: PPUSH
8154: LD_EXP 52
8158: PUSH
8159: LD_VAR 0 1
8163: ARRAY
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: LD_EXP 52
8173: PUSH
8174: LD_VAR 0 1
8178: ARRAY
8179: PUSH
8180: LD_INT 2
8182: ARRAY
8183: PPUSH
8184: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8188: LD_VAR 0 3
8192: PUSH
8193: LD_VAR 0 1
8197: ARRAY
8198: PPUSH
8199: LD_EXP 75
8203: PPUSH
8204: CALL_OW 179
// end ;
8208: GO 8140
8210: POP
8211: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8212: LD_EXP 61
8216: PPUSH
8217: CALL_OW 87
// wait ( 0 0$1 ) ;
8221: LD_INT 35
8223: PPUSH
8224: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8228: LD_EXP 61
8232: PPUSH
8233: LD_EXP 75
8237: PPUSH
8238: CALL_OW 296
8242: PUSH
8243: LD_INT 4
8245: LESS
8246: IFFALSE 8212
// ComTurnUnit ( Platonov , Burlak ) ;
8248: LD_EXP 75
8252: PPUSH
8253: LD_EXP 61
8257: PPUSH
8258: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8262: LD_EXP 75
8266: PPUSH
8267: LD_STRING D2-Pla-2
8269: PPUSH
8270: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8274: LD_EXP 61
8278: PPUSH
8279: LD_STRING D2-Bur-2
8281: PPUSH
8282: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8286: LD_EXP 75
8290: PPUSH
8291: LD_STRING D2-Pla-3
8293: PPUSH
8294: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8298: LD_EXP 61
8302: PPUSH
8303: LD_STRING D2-Bur-3
8305: PPUSH
8306: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8310: LD_EXP 75
8314: PPUSH
8315: LD_STRING D2-Pla-4
8317: PPUSH
8318: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8322: LD_EXP 61
8326: PPUSH
8327: LD_STRING D2-Bur-4
8329: PPUSH
8330: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8334: LD_EXP 75
8338: PPUSH
8339: LD_STRING D2-Pla-5
8341: PPUSH
8342: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8346: LD_INT 1
8348: PUSH
8349: LD_INT 2
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: LD_INT 4
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: PPUSH
8364: CALL 4418 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8368: LD_EXP 75
8372: PPUSH
8373: LD_STRING D3-Pla-1
8375: PPUSH
8376: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8380: LD_EXP 61
8384: PPUSH
8385: LD_STRING D3-Bur-1
8387: PPUSH
8388: CALL_OW 88
// InGameOff ;
8392: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8396: LD_STRING M2a
8398: PPUSH
8399: CALL_OW 337
// ComFree ( Platonov ) ;
8403: LD_EXP 75
8407: PPUSH
8408: CALL_OW 139
// SetSide ( beria , 3 ) ;
8412: LD_INT 106
8414: PPUSH
8415: LD_INT 3
8417: PPUSH
8418: CALL_OW 235
// canExitBase = false ;
8422: LD_ADDR_EXP 19
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// exit ;
8430: POP
8431: POP
8432: GO 8438
// end ;
8434: GO 7984
8436: POP
8437: POP
// end ;
8438: PPOPN 4
8440: END
// export function Dial_LabConstructed ; begin
8441: LD_INT 0
8443: PPUSH
// labConstructed = true ;
8444: LD_ADDR_EXP 8
8448: PUSH
8449: LD_INT 1
8451: ST_TO_ADDR
// DialogueOn ;
8452: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8456: LD_EXP 61
8460: PPUSH
8461: LD_STRING D5a-Bur-1
8463: PPUSH
8464: CALL_OW 88
// if workshopConstructed then
8468: LD_EXP 9
8472: IFFALSE 8488
// Say ( Platonov , D5a-Pla-1a ) else
8474: LD_EXP 75
8478: PPUSH
8479: LD_STRING D5a-Pla-1a
8481: PPUSH
8482: CALL_OW 88
8486: GO 8500
// Say ( Platonov , D5a-Pla-1a ) ;
8488: LD_EXP 75
8492: PPUSH
8493: LD_STRING D5a-Pla-1a
8495: PPUSH
8496: CALL_OW 88
// DialogueOff ;
8500: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8504: LD_STRING M2b
8506: PPUSH
8507: CALL_OW 337
// end ;
8511: LD_VAR 0 1
8515: RET
// export function Dial_WorkshopConstructed ; begin
8516: LD_INT 0
8518: PPUSH
// workshopConstructed = true ;
8519: LD_ADDR_EXP 9
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// DialogueOn ;
8527: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8531: LD_EXP 61
8535: PPUSH
8536: LD_STRING D5b-Bur-1
8538: PPUSH
8539: CALL_OW 88
// if labConstructed then
8543: LD_EXP 8
8547: IFFALSE 8563
// Say ( Platonov , D5b-Pla-1 ) else
8549: LD_EXP 75
8553: PPUSH
8554: LD_STRING D5b-Pla-1
8556: PPUSH
8557: CALL_OW 88
8561: GO 8575
// Say ( Platonov , D5b-Pla-1a ) ;
8563: LD_EXP 75
8567: PPUSH
8568: LD_STRING D5b-Pla-1a
8570: PPUSH
8571: CALL_OW 88
// DialogueOff ;
8575: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8579: LD_STRING M2c
8581: PPUSH
8582: CALL_OW 337
// end ;
8586: LD_VAR 0 1
8590: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
8591: LD_INT 0
8593: PPUSH
// wait ( 0 0$1 ) ;
8594: LD_INT 35
8596: PPUSH
8597: CALL_OW 67
// CenterNowOnUnits ( building ) ;
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8610: LD_INT 22
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 21
8622: PUSH
8623: LD_INT 1
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 69
8638: PPUSH
8639: CALL_OW 141
// DialogueOn ;
8643: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
8647: LD_EXP 75
8651: PPUSH
8652: LD_STRING D6-Pla-1
8654: PPUSH
8655: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8659: LD_EXP 61
8663: PPUSH
8664: LD_STRING D6-Bur-1
8666: PPUSH
8667: CALL_OW 88
// DialogueOff ;
8671: CALL_OW 7
// case GetBType ( building ) of b_lab :
8675: LD_VAR 0 1
8679: PPUSH
8680: CALL_OW 266
8684: PUSH
8685: LD_INT 6
8687: DOUBLE
8688: EQUAL
8689: IFTRUE 8693
8691: GO 8733
8693: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
8694: LD_INT 106
8696: PPUSH
8697: CALL_OW 274
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: LD_INT 106
8707: PPUSH
8708: CALL_OW 274
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 275
8720: PUSH
8721: LD_EXP 53
8725: PLUS
8726: PPUSH
8727: CALL_OW 277
8731: GO 8926
8733: LD_INT 2
8735: DOUBLE
8736: EQUAL
8737: IFTRUE 8741
8739: GO 8781
8741: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
8742: LD_INT 106
8744: PPUSH
8745: CALL_OW 274
8749: PPUSH
8750: LD_INT 1
8752: PPUSH
8753: LD_INT 106
8755: PPUSH
8756: CALL_OW 274
8760: PPUSH
8761: LD_INT 1
8763: PPUSH
8764: CALL_OW 275
8768: PUSH
8769: LD_EXP 54
8773: PLUS
8774: PPUSH
8775: CALL_OW 277
8779: GO 8926
8781: LD_INT 26
8783: DOUBLE
8784: EQUAL
8785: IFTRUE 8789
8787: GO 8829
8789: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
8790: LD_INT 106
8792: PPUSH
8793: CALL_OW 274
8797: PPUSH
8798: LD_INT 1
8800: PPUSH
8801: LD_INT 106
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL_OW 275
8816: PUSH
8817: LD_EXP 55
8821: PLUS
8822: PPUSH
8823: CALL_OW 277
8827: GO 8926
8829: LD_INT 4
8831: DOUBLE
8832: EQUAL
8833: IFTRUE 8837
8835: GO 8877
8837: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
8838: LD_INT 106
8840: PPUSH
8841: CALL_OW 274
8845: PPUSH
8846: LD_INT 1
8848: PPUSH
8849: LD_INT 106
8851: PPUSH
8852: CALL_OW 274
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 275
8864: PUSH
8865: LD_EXP 56
8869: PLUS
8870: PPUSH
8871: CALL_OW 277
8875: GO 8926
8877: LD_INT 31
8879: DOUBLE
8880: EQUAL
8881: IFTRUE 8885
8883: GO 8925
8885: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
8886: LD_INT 106
8888: PPUSH
8889: CALL_OW 274
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: LD_INT 106
8899: PPUSH
8900: CALL_OW 274
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: CALL_OW 275
8912: PUSH
8913: LD_EXP 57
8917: PLUS
8918: PPUSH
8919: CALL_OW 277
8923: GO 8926
8925: POP
// RemoveUnit ( building ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 64
// end ;
8935: LD_VAR 0 2
8939: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
8940: LD_EXP 9
8944: PUSH
8945: LD_EXP 8
8949: AND
8950: IFFALSE 9059
8952: GO 8954
8954: DISABLE
// begin DialogueOn ;
8955: CALL_OW 6
// if engineResearched then
8959: LD_EXP 10
8963: IFFALSE 8991
// begin Say ( Burlak , D7b-Bur-1 ) ;
8965: LD_EXP 61
8969: PPUSH
8970: LD_STRING D7b-Bur-1
8972: PPUSH
8973: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8977: LD_EXP 75
8981: PPUSH
8982: LD_STRING D7b-Pla-1
8984: PPUSH
8985: CALL_OW 88
// end else
8989: GO 9015
// begin Say ( Burlak , D7a-Bur-1 ) ;
8991: LD_EXP 61
8995: PPUSH
8996: LD_STRING D7a-Bur-1
8998: PPUSH
8999: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9003: LD_EXP 75
9007: PPUSH
9008: LD_STRING D7a-Pla-1
9010: PPUSH
9011: CALL_OW 88
// end ; DialogueOff ;
9015: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9019: LD_STRING M2
9021: PPUSH
9022: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9026: LD_INT 3
9028: PPUSH
9029: LD_EXP 75
9033: PPUSH
9034: CALL_OW 250
9038: PPUSH
9039: LD_EXP 75
9043: PPUSH
9044: CALL_OW 251
9048: PPUSH
9049: LD_INT 5
9051: PPUSH
9052: LD_INT 1
9054: PPUSH
9055: CALL_OW 56
// end ;
9059: END
// export function Dial_NewCrates ( x , y ) ; begin
9060: LD_INT 0
9062: PPUSH
// wait ( 0 0$18 ) ;
9063: LD_INT 630
9065: PPUSH
9066: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
9070: LD_EXP 75
9074: PPUSH
9075: LD_VAR 0 1
9079: PPUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9089: LD_EXP 75
9093: PPUSH
9094: LD_STRING D4-Pla-1
9096: PPUSH
9097: CALL_OW 88
// end ;
9101: LD_VAR 0 3
9105: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9106: LD_INT 0
9108: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9109: LD_ADDR_EXP 13
9113: PUSH
9114: LD_INT 22
9116: PUSH
9117: LD_INT 3
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 21
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PPUSH
9138: CALL_OW 69
9142: PUSH
9143: LD_INT 1
9145: ARRAY
9146: ST_TO_ADDR
// constructedFirstVehicle = true ;
9147: LD_ADDR_EXP 12
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// InGameOn ;
9155: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9159: LD_VAR 0 1
9163: PPUSH
9164: CALL_OW 87
// wait ( 0 0$3 ) ;
9168: LD_INT 105
9170: PPUSH
9171: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9175: LD_EXP 61
9179: PPUSH
9180: LD_STRING D9-Bur-1
9182: PPUSH
9183: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9187: LD_EXP 75
9191: PPUSH
9192: LD_EXP 13
9196: PPUSH
9197: CALL_OW 250
9201: PPUSH
9202: LD_EXP 13
9206: PPUSH
9207: CALL_OW 251
9211: PPUSH
9212: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9216: LD_INT 35
9218: PPUSH
9219: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9223: LD_EXP 75
9227: PPUSH
9228: LD_EXP 13
9232: PPUSH
9233: CALL_OW 296
9237: PUSH
9238: LD_INT 4
9240: LESS
9241: IFFALSE 9216
// ComTurnUnit ( Platonov , firstVeh ) ;
9243: LD_EXP 75
9247: PPUSH
9248: LD_EXP 13
9252: PPUSH
9253: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9257: LD_EXP 75
9261: PPUSH
9262: LD_STRING D9-Pla-1
9264: PPUSH
9265: CALL_OW 88
// InGameOff ;
9269: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9273: LD_STRING M3
9275: PPUSH
9276: CALL_OW 337
// canExitBase = true ;
9280: LD_ADDR_EXP 19
9284: PUSH
9285: LD_INT 1
9287: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9288: LD_EXP 75
9292: PPUSH
9293: LD_INT 112
9295: PPUSH
9296: LD_INT 97
9298: PPUSH
9299: CALL_OW 111
// end ;
9303: LD_VAR 0 2
9307: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9308: LD_EXP 13
9312: PPUSH
9313: LD_INT 9
9315: PPUSH
9316: CALL_OW 308
9320: PUSH
9321: LD_EXP 14
9325: NOT
9326: AND
9327: IFFALSE 10208
9329: GO 9331
9331: DISABLE
9332: LD_INT 0
9334: PPUSH
9335: PPUSH
9336: PPUSH
// begin vehicleForKurin = true ;
9337: LD_ADDR_EXP 14
9341: PUSH
9342: LD_INT 1
9344: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9345: LD_ADDR_VAR 0 2
9349: PUSH
9350: LD_EXP 68
9354: PPUSH
9355: LD_INT 25
9357: PUSH
9358: LD_INT 2
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 72
9369: PUSH
9370: LD_INT 1
9372: ARRAY
9373: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9374: LD_ADDR_VAR 0 3
9378: PUSH
9379: LD_EXP 68
9383: PPUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: PUSH
9399: LD_INT 1
9401: ARRAY
9402: ST_TO_ADDR
// InGameOn ;
9403: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9407: LD_EXP 66
9411: PPUSH
9412: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9416: LD_EXP 13
9420: PPUSH
9421: LD_EXP 66
9425: PPUSH
9426: CALL_OW 250
9430: PPUSH
9431: LD_EXP 66
9435: PPUSH
9436: CALL_OW 251
9440: PPUSH
9441: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9445: LD_EXP 66
9449: PPUSH
9450: LD_STRING D10-Kur-1
9452: PPUSH
9453: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9457: LD_INT 35
9459: PPUSH
9460: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9464: LD_EXP 13
9468: PPUSH
9469: LD_EXP 66
9473: PPUSH
9474: CALL_OW 250
9478: PPUSH
9479: LD_EXP 66
9483: PPUSH
9484: CALL_OW 251
9488: PPUSH
9489: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9493: LD_EXP 13
9497: PPUSH
9498: LD_EXP 66
9502: PPUSH
9503: CALL_OW 296
9507: PUSH
9508: LD_INT 9
9510: LESS
9511: IFFALSE 9457
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9513: LD_EXP 13
9517: PPUSH
9518: CALL_OW 313
9522: PPUSH
9523: CALL_OW 121
// wait ( 0 0$1 ) ;
9527: LD_INT 35
9529: PPUSH
9530: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
9534: LD_EXP 13
9538: PPUSH
9539: CALL_OW 256
9543: PUSH
9544: LD_INT 1000
9546: LESS
9547: IFFALSE 9579
// begin ComExitBuilding ( mech ) ;
9549: LD_VAR 0 3
9553: PPUSH
9554: CALL_OW 122
// wait ( 0 0$1 ) ;
9558: LD_INT 35
9560: PPUSH
9561: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
9565: LD_VAR 0 3
9569: PPUSH
9570: LD_EXP 13
9574: PPUSH
9575: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
9579: LD_EXP 13
9583: PPUSH
9584: CALL_OW 261
9588: PUSH
9589: LD_INT 90
9591: LESS
9592: IFFALSE 9627
// begin ComExitBuilding ( eng ) ;
9594: LD_VAR 0 2
9598: PPUSH
9599: CALL_OW 122
// wait ( 0 0$1 ) ;
9603: LD_INT 35
9605: PPUSH
9606: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
9610: LD_VAR 0 2
9614: PPUSH
9615: LD_INT 71
9617: PPUSH
9618: LD_EXP 13
9622: PPUSH
9623: CALL 4656 0 3
// end ; repeat wait ( 0 0$1 ) ;
9627: LD_INT 35
9629: PPUSH
9630: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
9634: LD_EXP 13
9638: PPUSH
9639: CALL_OW 256
9643: PUSH
9644: LD_INT 1000
9646: EQUAL
9647: PUSH
9648: LD_EXP 13
9652: PPUSH
9653: CALL_OW 261
9657: PUSH
9658: LD_INT 90
9660: GREATER
9661: AND
9662: IFFALSE 9627
// if UnitsInside ( firstVeh ) then
9664: LD_EXP 13
9668: PPUSH
9669: CALL_OW 313
9673: IFFALSE 9693
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
9675: LD_EXP 13
9679: PPUSH
9680: CALL_OW 313
9684: PUSH
9685: LD_INT 1
9687: ARRAY
9688: PPUSH
9689: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
9693: LD_VAR 0 2
9697: PPUSH
9698: LD_INT 71
9700: PPUSH
9701: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
9705: LD_EXP 13
9709: PPUSH
9710: LD_INT 6
9712: PPUSH
9713: CALL_OW 235
// if belkovReturn then
9717: LD_EXP 6
9721: IFFALSE 9807
// begin if IsInUnit ( Belkov ) then
9723: LD_EXP 63
9727: PPUSH
9728: CALL_OW 310
9732: IFFALSE 9743
// ComExitBuilding ( Belkov ) ;
9734: LD_EXP 63
9738: PPUSH
9739: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9743: LD_INT 35
9745: PPUSH
9746: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
9750: LD_EXP 63
9754: PPUSH
9755: LD_EXP 13
9759: PPUSH
9760: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
9764: LD_EXP 63
9768: PPUSH
9769: CALL_OW 310
9773: PUSH
9774: LD_EXP 13
9778: EQUAL
9779: IFFALSE 9743
// Say ( Belkov , D10-Bel-1 ) ;
9781: LD_EXP 63
9785: PPUSH
9786: LD_STRING D10-Bel-1
9788: PPUSH
9789: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
9793: LD_EXP 66
9797: PPUSH
9798: LD_STRING D10-Kur-2
9800: PPUSH
9801: CALL_OW 88
// end else
9805: GO 9933
// begin if IsInUnit ( Belkov2 ) then
9807: LD_EXP 67
9811: PPUSH
9812: CALL_OW 310
9816: IFFALSE 9827
// ComExitBuilding ( Belkov2 ) ;
9818: LD_EXP 67
9822: PPUSH
9823: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9827: LD_INT 35
9829: PPUSH
9830: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
9834: LD_EXP 67
9838: PPUSH
9839: LD_EXP 13
9843: PPUSH
9844: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
9848: LD_EXP 67
9852: PPUSH
9853: CALL_OW 310
9857: PUSH
9858: LD_EXP 13
9862: EQUAL
9863: IFFALSE 9827
// meetBelkovBrother = true ;
9865: LD_ADDR_EXP 4
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
9873: LD_EXP 67
9877: PPUSH
9878: LD_STRING D10-Bel-1
9880: PPUSH
9881: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
9885: LD_EXP 61
9889: PPUSH
9890: LD_STRING D10-Bur-1
9892: PPUSH
9893: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
9897: LD_EXP 67
9901: PPUSH
9902: LD_STRING D10-Bel-2
9904: PPUSH
9905: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
9909: LD_EXP 61
9913: PPUSH
9914: LD_STRING D10-Bur-2
9916: PPUSH
9917: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
9921: LD_EXP 66
9925: PPUSH
9926: LD_STRING D10-Kur-2a
9928: PPUSH
9929: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
9933: LD_ADDR_EXP 73
9937: PUSH
9938: EMPTY
9939: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
9940: LD_ADDR_EXP 74
9944: PUSH
9945: EMPTY
9946: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
9947: LD_ADDR_EXP 22
9951: PUSH
9952: LD_INT 1
9954: ST_TO_ADDR
// CreateBelkovTeam ;
9955: CALL 6058 0 0
// ComExitBuilding ( belkovTeam ) ;
9959: LD_EXP 72
9963: PPUSH
9964: CALL_OW 122
// wait ( 0 0$1 ) ;
9968: LD_INT 35
9970: PPUSH
9971: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9975: LD_ADDR_EXP 71
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 6
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 21
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: PUSH
10009: LD_INT 1
10011: ARRAY
10012: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10013: LD_ADDR_EXP 72
10017: PUSH
10018: LD_EXP 72
10022: PUSH
10023: LD_EXP 71
10027: ADD
10028: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10029: LD_EXP 72
10033: PPUSH
10034: LD_INT 147
10036: PPUSH
10037: LD_INT 102
10039: PPUSH
10040: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10044: LD_EXP 72
10048: PPUSH
10049: LD_INT 133
10051: PPUSH
10052: LD_INT 94
10054: PPUSH
10055: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10059: LD_EXP 72
10063: PPUSH
10064: LD_INT 123
10066: PPUSH
10067: LD_INT 74
10069: PPUSH
10070: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10074: LD_EXP 72
10078: PPUSH
10079: LD_INT 111
10081: PPUSH
10082: LD_INT 48
10084: PPUSH
10085: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10089: LD_EXP 72
10093: PPUSH
10094: LD_INT 122
10096: PPUSH
10097: LD_INT 43
10099: PPUSH
10100: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10104: LD_EXP 72
10108: PPUSH
10109: LD_INT 129
10111: PPUSH
10112: LD_INT 32
10114: PPUSH
10115: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10119: LD_EXP 72
10123: PPUSH
10124: LD_INT 132
10126: PPUSH
10127: LD_INT 22
10129: PPUSH
10130: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10134: LD_INT 35
10136: PPUSH
10137: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
10141: LD_EXP 71
10145: PPUSH
10146: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
10150: LD_EXP 71
10154: PPUSH
10155: LD_INT 10
10157: PPUSH
10158: CALL_OW 299
10162: PUSH
10163: LD_INT 10
10165: LESS
10166: IFFALSE 10134
// CenterNowOnUnits ( Kurin ) ;
10168: LD_EXP 66
10172: PPUSH
10173: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10177: LD_EXP 66
10181: PPUSH
10182: LD_STRING D10-Kur-2b
10184: PPUSH
10185: CALL_OW 88
// InGameOff ;
10189: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10193: LD_STRING M4
10195: PPUSH
10196: CALL_OW 337
// backToBeria1 = true ;
10200: LD_ADDR_EXP 15
10204: PUSH
10205: LD_INT 1
10207: ST_TO_ADDR
// end ;
10208: PPOPN 3
10210: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10211: LD_INT 9
10213: PPUSH
10214: LD_INT 22
10216: PUSH
10217: LD_INT 3
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 21
10226: PUSH
10227: LD_INT 2
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PPUSH
10238: CALL_OW 70
10242: PUSH
10243: LD_EXP 14
10247: AND
10248: IFFALSE 10265
10250: GO 10252
10252: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10253: LD_EXP 66
10257: PPUSH
10258: LD_STRING D1a-Kur-1a
10260: PPUSH
10261: CALL_OW 88
10265: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10266: LD_EXP 22
10270: IFFALSE 10673
10272: GO 10274
10274: DISABLE
10275: LD_INT 0
10277: PPUSH
10278: PPUSH
// begin enable ;
10279: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10280: LD_INT 10
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 6
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 70
10297: PUSH
10298: LD_INT 0
10300: EQUAL
10301: IFFALSE 10305
// exit ;
10303: GO 10673
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10305: LD_ADDR_VAR 0 1
10309: PUSH
10310: LD_INT 10
10312: PPUSH
10313: LD_INT 22
10315: PUSH
10316: LD_INT 6
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 70
10327: PUSH
10328: FOR_IN
10329: IFFALSE 10659
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 247
10340: PUSH
10341: LD_INT 1
10343: EQUAL
10344: PUSH
10345: LD_VAR 0 1
10349: PUSH
10350: LD_EXP 63
10354: EQUAL
10355: NOT
10356: PUSH
10357: LD_VAR 0 1
10361: PUSH
10362: LD_EXP 67
10366: EQUAL
10367: NOT
10368: AND
10369: PUSH
10370: LD_VAR 0 1
10374: PUSH
10375: LD_EXP 64
10379: EQUAL
10380: NOT
10381: AND
10382: AND
10383: IFFALSE 10424
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10385: LD_ADDR_EXP 23
10389: PUSH
10390: LD_EXP 23
10394: PUSH
10395: LD_INT 1
10397: PLUS
10398: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10399: LD_ADDR_EXP 73
10403: PUSH
10404: LD_EXP 73
10408: PUSH
10409: LD_VAR 0 1
10413: ADD
10414: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 64
// end ; if unit = Kirilenkova then
10424: LD_VAR 0 1
10428: PUSH
10429: LD_EXP 64
10433: EQUAL
10434: IFFALSE 10457
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10436: LD_EXP 64
10440: PPUSH
10441: LD_STRING 02_TmpKirilenkova
10443: PPUSH
10444: CALL_OW 38
// RemoveUnit ( unit ) ;
10448: LD_VAR 0 1
10452: PPUSH
10453: CALL_OW 64
// end ; if unit = Belkov2 then
10457: LD_VAR 0 1
10461: PUSH
10462: LD_EXP 67
10466: EQUAL
10467: IFFALSE 10490
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10469: LD_EXP 67
10473: PPUSH
10474: LD_STRING 02_TmpBelkov2
10476: PPUSH
10477: CALL_OW 38
// RemoveUnit ( unit ) ;
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10490: LD_VAR 0 1
10494: PPUSH
10495: CALL_OW 247
10499: PUSH
10500: LD_INT 2
10502: EQUAL
10503: IFFALSE 10657
// begin driver = UnitsInside ( unit ) ;
10505: LD_ADDR_VAR 0 2
10509: PUSH
10510: LD_VAR 0 1
10514: PPUSH
10515: CALL_OW 313
10519: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10520: LD_VAR 0 2
10524: PUSH
10525: LD_INT 1
10527: ARRAY
10528: PUSH
10529: LD_EXP 63
10533: EQUAL
10534: IFFALSE 10559
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10536: LD_EXP 63
10540: PPUSH
10541: LD_STRING 02_TmpBelkov
10543: PPUSH
10544: CALL_OW 38
// RemoveUnit ( unit ) ;
10548: LD_VAR 0 1
10552: PPUSH
10553: CALL_OW 64
// end else
10557: GO 10580
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10559: LD_EXP 67
10563: PPUSH
10564: LD_STRING 02_TmpBelkov2
10566: PPUSH
10567: CALL_OW 38
// RemoveUnit ( unit ) ;
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
10580: LD_ADDR_EXP 74
10584: PUSH
10585: LD_EXP 74
10589: PUSH
10590: LD_VAR 0 1
10594: PPUSH
10595: CALL_OW 265
10599: PUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 262
10609: PUSH
10610: LD_VAR 0 1
10614: PPUSH
10615: CALL_OW 263
10619: PUSH
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL_OW 264
10629: PUSH
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 261
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: ADD
10647: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10648: LD_VAR 0 1
10652: PPUSH
10653: CALL_OW 64
// end ; end ;
10657: GO 10328
10659: POP
10660: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
10661: LD_EXP 73
10665: PPUSH
10666: LD_STRING 02_TmpBelkovTeam
10668: PPUSH
10669: CALL_OW 38
// end ;
10673: PPOPN 2
10675: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
10676: LD_INT 8
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 21
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 71
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: PUSH
10712: LD_EXP 15
10716: AND
10717: IFFALSE 10903
10719: GO 10721
10721: DISABLE
10722: LD_INT 0
10724: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
10725: LD_ADDR_VAR 0 1
10729: PUSH
10730: LD_EXP 68
10734: PPUSH
10735: LD_INT 25
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 72
10749: ST_TO_ADDR
// backToBeria1 = false ;
10750: LD_ADDR_EXP 15
10754: PUSH
10755: LD_INT 0
10757: ST_TO_ADDR
// canExitBase = false ;
10758: LD_ADDR_EXP 19
10762: PUSH
10763: LD_INT 0
10765: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
10766: LD_EXP 75
10770: PPUSH
10771: LD_STRING D11-Pla-1
10773: PPUSH
10774: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10778: LD_INT 22
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 21
10790: PUSH
10791: LD_INT 1
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: PUSH
10807: LD_INT 1
10809: GREATER
10810: IFFALSE 10826
// Say ( Burlak , D11-Bur-1a ) else
10812: LD_EXP 61
10816: PPUSH
10817: LD_STRING D11-Bur-1a
10819: PPUSH
10820: CALL_OW 88
10824: GO 10838
// Say ( Burlak , D11-Bur-1 ) ;
10826: LD_EXP 61
10830: PPUSH
10831: LD_STRING D11-Bur-1
10833: PPUSH
10834: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
10838: LD_STRING M5
10840: PPUSH
10841: CALL_OW 337
// construcMoreVehicles = true ;
10845: LD_ADDR_EXP 17
10849: PUSH
10850: LD_INT 1
10852: ST_TO_ADDR
// spawnCrates = true ;
10853: LD_ADDR_EXP 21
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_INT 2
10877: PPUSH
10878: LD_INT 159
10880: PPUSH
10881: LD_INT 112
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
10891: LD_VAR 0 1
10895: PPUSH
10896: LD_INT 71
10898: PPUSH
10899: CALL_OW 180
// end ;
10903: PPOPN 1
10905: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
10906: LD_EXP 18
10910: PUSH
10911: LD_INT 22
10913: PUSH
10914: LD_INT 3
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 21
10923: PUSH
10924: LD_INT 1
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 69
10939: GREATEREQUAL
10940: IFFALSE 12026
10942: GO 10944
10944: DISABLE
10945: LD_INT 0
10947: PPUSH
10948: PPUSH
// begin canRemoveBelkovUnits = false ;
10949: LD_ADDR_EXP 22
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// spawnCrates = false ;
10957: LD_ADDR_EXP 21
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
10965: LD_INT 22
10967: PUSH
10968: LD_INT 3
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 2
10977: PUSH
10978: LD_INT 21
10980: PUSH
10981: LD_INT 1
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PPUSH
11007: CALL_OW 69
11011: PPUSH
11012: CALL_OW 141
// InGameOn ;
11016: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11020: LD_EXP 75
11024: PPUSH
11025: CALL_OW 85
// DialogueOn ;
11029: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11033: LD_EXP 61
11037: PPUSH
11038: LD_STRING D12-Bur-1
11040: PPUSH
11041: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11045: LD_EXP 75
11049: PPUSH
11050: LD_STRING D12-Pla-1
11052: PPUSH
11053: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11057: LD_EXP 61
11061: PPUSH
11062: LD_STRING D12-Bur-2
11064: PPUSH
11065: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11069: LD_EXP 75
11073: PPUSH
11074: LD_STRING D12-Pla-2
11076: PPUSH
11077: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11081: LD_EXP 61
11085: PPUSH
11086: LD_STRING D12-Bur-3
11088: PPUSH
11089: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11093: LD_EXP 75
11097: PPUSH
11098: LD_STRING D12-Pla-3
11100: PPUSH
11101: CALL_OW 88
// DialogueOff ;
11105: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11109: LD_INT 6
11111: PPUSH
11112: LD_INT 1
11114: PPUSH
11115: LD_INT 1
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 80
// PrepareAmerican ;
11125: CALL 2871 0 0
// PrepareBelkovReturnTeam ;
11129: CALL 1124 0 0
// if IsOK ( Belkov ) then
11133: LD_EXP 63
11137: PPUSH
11138: CALL_OW 302
11142: IFFALSE 11156
// tmpBelkov = Belkov else
11144: LD_ADDR_VAR 0 1
11148: PUSH
11149: LD_EXP 63
11153: ST_TO_ADDR
11154: GO 11166
// tmpBelkov = Belkov2 ;
11156: LD_ADDR_VAR 0 1
11160: PUSH
11161: LD_EXP 67
11165: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11166: LD_EXP 71
11170: PPUSH
11171: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11175: LD_EXP 79
11179: PPUSH
11180: LD_STRING D13-Sol1-1
11182: PPUSH
11183: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11187: LD_VAR 0 1
11191: PPUSH
11192: LD_STRING D13-Bel-1
11194: PPUSH
11195: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11199: LD_EXP 66
11203: PPUSH
11204: LD_STRING D13-Kur-1
11206: PPUSH
11207: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11211: LD_VAR 0 1
11215: PPUSH
11216: LD_STRING D13-Bel-2
11218: PPUSH
11219: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11223: LD_EXP 72
11227: PPUSH
11228: LD_INT 121
11230: PPUSH
11231: LD_INT 29
11233: PPUSH
11234: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11238: LD_INT 35
11240: PPUSH
11241: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11245: LD_EXP 71
11249: PPUSH
11250: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_EXP 72
11263: PPUSH
11264: LD_INT 21
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 56
11276: PUSH
11277: EMPTY
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PPUSH
11284: CALL_OW 72
11288: PPUSH
11289: LD_EXP 71
11293: PPUSH
11294: CALL_OW 74
11298: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11299: LD_EXP 71
11303: PPUSH
11304: LD_VAR 0 2
11308: PPUSH
11309: CALL_OW 296
11313: PUSH
11314: LD_INT 5
11316: LESS
11317: IFFALSE 11330
// ComStop ( kirovVehicle ) else
11319: LD_EXP 71
11323: PPUSH
11324: CALL_OW 141
11328: GO 11345
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11330: LD_EXP 72
11334: PPUSH
11335: LD_INT 121
11337: PPUSH
11338: LD_INT 29
11340: PPUSH
11341: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11345: LD_EXP 72
11349: PPUSH
11350: LD_EXP 79
11354: PPUSH
11355: CALL_OW 74
11359: PPUSH
11360: LD_EXP 79
11364: PPUSH
11365: CALL_OW 296
11369: PUSH
11370: LD_INT 5
11372: LESS
11373: IFFALSE 11238
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11375: LD_EXP 71
11379: PUSH
11380: LD_EXP 79
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 87
// ComWalk ( trapTeam ) ;
11393: LD_EXP 80
11397: PPUSH
11398: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11402: LD_EXP 80
11406: PPUSH
11407: LD_EXP 71
11411: PPUSH
11412: CALL_OW 179
// ComStop ( belkovTeam ) ;
11416: LD_EXP 72
11420: PPUSH
11421: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11425: LD_EXP 72
11429: PPUSH
11430: LD_EXP 79
11434: PPUSH
11435: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11439: LD_INT 25
11441: PPUSH
11442: LD_INT 22
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 21
11454: PUSH
11455: LD_INT 1
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PPUSH
11466: CALL_OW 70
11470: PPUSH
11471: LD_INT 111
11473: PPUSH
11474: LD_INT 13
11476: PPUSH
11477: CALL_OW 171
// music_class = music_combat ;
11481: LD_ADDR_OWVAR 72
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11489: LD_INT 35
11491: PPUSH
11492: CALL_OW 67
// DialogueOn ;
11496: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11500: LD_EXP 79
11504: PPUSH
11505: LD_STRING D14-Sol1-1
11507: PPUSH
11508: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11512: LD_VAR 0 1
11516: PPUSH
11517: LD_STRING D14-Bel-1
11519: PPUSH
11520: CALL_OW 88
// DialogueOff ;
11524: CALL_OW 7
// immortalBelkovTeam = true ;
11528: LD_ADDR_EXP 24
11532: PUSH
11533: LD_INT 1
11535: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11536: LD_INT 6
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: LD_INT 2
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
11552: LD_EXP 72
11556: PPUSH
11557: LD_INT 107
11559: PPUSH
11560: LD_INT 5
11562: PPUSH
11563: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
11567: LD_EXP 71
11571: PPUSH
11572: LD_INT 107
11574: PPUSH
11575: LD_INT 5
11577: PPUSH
11578: CALL_OW 111
// wait ( 0 0$2 ) ;
11582: LD_INT 70
11584: PPUSH
11585: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
11589: LD_EXP 72
11593: PPUSH
11594: LD_INT 101
11596: PPUSH
11597: LD_INT 19
11599: PPUSH
11600: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
11604: LD_EXP 71
11608: PPUSH
11609: LD_INT 101
11611: PPUSH
11612: LD_INT 19
11614: PPUSH
11615: CALL_OW 111
// wait ( 0 0$2 ) ;
11619: LD_INT 70
11621: PPUSH
11622: CALL_OW 67
// immortalVehLive = 400 ;
11626: LD_ADDR_EXP 25
11630: PUSH
11631: LD_INT 400
11633: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
11634: LD_EXP 71
11638: PPUSH
11639: LD_INT 500
11641: PPUSH
11642: CALL_OW 234
// wait ( 0 0$3 ) ;
11646: LD_INT 105
11648: PPUSH
11649: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
11653: LD_VAR 0 1
11657: PPUSH
11658: CALL_OW 121
// wait ( 0 0$1 ) ;
11662: LD_INT 35
11664: PPUSH
11665: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
11669: LD_EXP 79
11673: PPUSH
11674: LD_EXP 71
11678: PPUSH
11679: CALL_OW 120
// AddComHold ( trapTeam ) ;
11683: LD_EXP 80
11687: PPUSH
11688: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
11692: LD_EXP 72
11696: PPUSH
11697: LD_INT 88
11699: PPUSH
11700: LD_INT 18
11702: PPUSH
11703: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11707: LD_INT 35
11709: PPUSH
11710: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
11723: LD_VAR 0 1
11727: PPUSH
11728: LD_INT 15
11730: PPUSH
11731: CALL_OW 308
11735: IFFALSE 11707
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11737: LD_ADDR_EXP 87
11741: PUSH
11742: LD_INT 22
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PPUSH
11766: CALL_OW 69
11770: PUSH
11771: LD_INT 1
11773: ARRAY
11774: ST_TO_ADDR
// ComMoveXY ( amVeh , 118 , 25 ) ;
11775: LD_EXP 87
11779: PPUSH
11780: LD_INT 118
11782: PPUSH
11783: LD_INT 25
11785: PPUSH
11786: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
11790: LD_VAR 0 1
11794: PPUSH
11795: LD_STRING D14-Bel-1a
11797: PPUSH
11798: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11802: LD_EXP 66
11806: PPUSH
11807: LD_STRING D14-Kur-1
11809: PPUSH
11810: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
11814: LD_VAR 0 1
11818: PPUSH
11819: LD_STRING D14-Bel-2
11821: PPUSH
11822: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11826: LD_EXP 66
11830: PPUSH
11831: LD_STRING D14-Kur-2
11833: PPUSH
11834: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
11838: LD_EXP 75
11842: PPUSH
11843: CALL_OW 85
// wait ( 0 0$2 ) ;
11847: LD_INT 70
11849: PPUSH
11850: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
11854: LD_EXP 61
11858: PPUSH
11859: LD_STRING D14a-Bur-1
11861: PPUSH
11862: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11866: LD_EXP 75
11870: PPUSH
11871: LD_STRING D14a-Pla-1
11873: PPUSH
11874: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11878: LD_EXP 61
11882: PPUSH
11883: LD_STRING D14a-Bur-2
11885: PPUSH
11886: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11890: LD_EXP 75
11894: PPUSH
11895: LD_STRING D14a-Pla-2
11897: PPUSH
11898: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11902: LD_EXP 61
11906: PPUSH
11907: LD_STRING D14a-Bur-3
11909: PPUSH
11910: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11914: LD_EXP 75
11918: PPUSH
11919: LD_STRING D14a-Pla-3
11921: PPUSH
11922: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11926: LD_EXP 61
11930: PPUSH
11931: LD_STRING D14a-Bur-4
11933: PPUSH
11934: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11938: LD_EXP 75
11942: PPUSH
11943: LD_STRING D14a-Pla-4
11945: PPUSH
11946: CALL_OW 88
// InGameOff ;
11950: CALL_OW 9
// immortalBelkovTeam = false ;
11954: LD_ADDR_EXP 24
11958: PUSH
11959: LD_INT 0
11961: ST_TO_ADDR
// activateAMAI = true ;
11962: LD_ADDR_EXP 27
11966: PUSH
11967: LD_INT 1
11969: ST_TO_ADDR
// canExitBase = true ;
11970: LD_ADDR_EXP 19
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// canExploreMap = true ;
11978: LD_ADDR_EXP 20
11982: PUSH
11983: LD_INT 1
11985: ST_TO_ADDR
// construcMoreVehicles = false ;
11986: LD_ADDR_EXP 17
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// activateBelkovAI = true ;
11994: LD_ADDR_EXP 28
11998: PUSH
11999: LD_INT 1
12001: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12002: LD_STRING M6
12004: PPUSH
12005: CALL_OW 337
// music_class = 0 ;
12009: LD_ADDR_OWVAR 72
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12017: LD_EXP 80
12021: PPUSH
12022: CALL_OW 139
// end ;
12026: PPOPN 2
12028: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12029: LD_EXP 87
12033: PPUSH
12034: LD_INT 118
12036: PPUSH
12037: LD_INT 25
12039: PPUSH
12040: CALL_OW 297
12044: PUSH
12045: LD_INT 6
12047: LESS
12048: IFFALSE 12143
12050: GO 12052
12052: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12053: LD_EXP 79
12057: PPUSH
12058: CALL_OW 121
// uc_side = 1 ;
12062: LD_ADDR_OWVAR 20
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// uc_nation = 1 ;
12070: LD_ADDR_OWVAR 21
12074: PUSH
12075: LD_INT 1
12077: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12078: LD_INT 0
12080: PPUSH
12081: LD_EXP 58
12085: PPUSH
12086: CALL_OW 383
// amMech = CreateHuman ;
12090: LD_ADDR_EXP 88
12094: PUSH
12095: CALL_OW 44
12099: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12100: LD_EXP 88
12104: PPUSH
12105: LD_INT 27
12107: PPUSH
12108: LD_INT 0
12110: PPUSH
12111: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12115: LD_EXP 88
12119: PPUSH
12120: LD_EXP 87
12124: PPUSH
12125: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12129: LD_EXP 88
12133: PPUSH
12134: LD_EXP 87
12138: PPUSH
12139: CALL_OW 180
// end ;
12143: END
// every 0 0$1 trigger immortalBelkovTeam do
12144: LD_EXP 24
12148: IFFALSE 12235
12150: GO 12152
12152: DISABLE
// begin enable ;
12153: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
12154: LD_EXP 72
12158: PPUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 72
12173: PPUSH
12174: LD_INT 1000
12176: PPUSH
12177: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
12181: LD_EXP 72
12185: PPUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 72
12200: IFFALSE 12235
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
12202: LD_EXP 72
12206: PPUSH
12207: LD_INT 21
12209: PUSH
12210: LD_INT 2
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 72
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_EXP 25
12230: PPUSH
12231: CALL_OW 234
// end ;
12235: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
12236: LD_EXP 20
12240: PUSH
12241: LD_EXP 37
12245: NOT
12246: AND
12247: PUSH
12248: LD_EXP 60
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
12259: GO 12261
12261: DISABLE
// begin enable ;
12262: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
12263: LD_ADDR_EXP 60
12267: PUSH
12268: LD_EXP 60
12272: PUSH
12273: LD_INT 35
12275: MINUS
12276: ST_TO_ADDR
// end ;
12277: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
12278: LD_EXP 20
12282: IFFALSE 12366
12284: GO 12286
12286: DISABLE
12287: LD_INT 0
12289: PPUSH
12290: PPUSH
// begin tmp = trapTeam ;
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: LD_EXP 80
12300: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
12301: LD_ADDR_VAR 0 2
12305: PUSH
12306: LD_VAR 0 2
12310: PUSH
12311: LD_EXP 79
12315: DIFF
12316: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
12317: LD_ADDR_VAR 0 1
12321: PUSH
12322: DOUBLE
12323: LD_INT 1
12325: DEC
12326: ST_TO_ADDR
12327: LD_INT 2
12329: PPUSH
12330: LD_INT 3
12332: PPUSH
12333: CALL_OW 12
12337: PUSH
12338: FOR_TO
12339: IFFALSE 12364
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
12341: LD_VAR 0 2
12345: PUSH
12346: LD_VAR 0 1
12350: ARRAY
12351: PPUSH
12352: LD_INT 87
12354: PPUSH
12355: LD_INT 18
12357: PPUSH
12358: CALL_OW 114
12362: GO 12338
12364: POP
12365: POP
// end ;
12366: PPOPN 2
12368: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
12369: LD_EXP 60
12373: PUSH
12374: LD_INT 70
12376: LESS
12377: PUSH
12378: LD_EXP 80
12382: AND
12383: IFFALSE 12412
12385: GO 12387
12387: DISABLE
// begin enable ;
12388: ENABLE
// activateBelkovAI = false ;
12389: LD_ADDR_EXP 28
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
12397: LD_EXP 72
12401: PPUSH
12402: LD_INT 120
12404: PPUSH
12405: LD_INT 28
12407: PPUSH
12408: CALL_OW 114
// end ;
12412: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and ( IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) ) and canExploreMap do var bunker ;
12413: LD_EXP 29
12417: NOT
12418: PUSH
12419: LD_EXP 30
12423: NOT
12424: OR
12425: PUSH
12426: LD_EXP 62
12430: PPUSH
12431: CALL_OW 302
12435: PUSH
12436: LD_EXP 69
12440: PPUSH
12441: CALL_OW 302
12445: OR
12446: AND
12447: PUSH
12448: LD_EXP 20
12452: AND
12453: IFFALSE 12893
12455: GO 12457
12457: DISABLE
12458: LD_INT 0
12460: PPUSH
// begin enable ;
12461: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
12462: LD_ADDR_VAR 0 1
12466: PUSH
12467: LD_INT 22
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 3
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 30
12489: PUSH
12490: LD_INT 31
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 69
12506: PUSH
12507: FOR_IN
12508: IFFALSE 12891
// begin if See ( 3 , bunker ) then
12510: LD_INT 3
12512: PPUSH
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 292
12522: IFFALSE 12889
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
12524: LD_VAR 0 1
12528: PUSH
12529: LD_EXP 81
12533: IN
12534: PUSH
12535: LD_EXP 29
12539: NOT
12540: AND
12541: PUSH
12542: LD_INT 18
12544: PPUSH
12545: LD_INT 22
12547: PUSH
12548: LD_INT 3
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: PPUSH
12558: CALL_OW 70
12562: NOT
12563: AND
12564: IFFALSE 12735
// begin sawLeftBunker = true ;
12566: LD_ADDR_EXP 29
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12574: LD_VAR 0 1
12578: PPUSH
12579: CALL_OW 85
// DialogueOn ;
12583: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
12587: LD_EXP 61
12591: PPUSH
12592: LD_STRING D15-Bur-1
12594: PPUSH
12595: CALL_OW 88
// if IsOK ( Gnyevko ) then
12599: LD_EXP 62
12603: PPUSH
12604: CALL_OW 302
12608: IFFALSE 12622
// Say ( Gnyevko , D15-Gny-1 ) ;
12610: LD_EXP 62
12614: PPUSH
12615: LD_STRING D15-Gny-1
12617: PPUSH
12618: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12622: LD_EXP 69
12626: PPUSH
12627: CALL_OW 302
12631: IFFALSE 12645
// Say ( Kovalyuk , D15-Kov-1 ) ;
12633: LD_EXP 69
12637: PPUSH
12638: LD_STRING D15-Kov-1
12640: PPUSH
12641: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
12645: LD_EXP 61
12649: PPUSH
12650: LD_STRING D15-Bur-2
12652: PPUSH
12653: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12657: LD_EXP 69
12661: PPUSH
12662: CALL_OW 302
12666: IFFALSE 12680
// Say ( Kovalyuk , D15-Kov-2 ) ;
12668: LD_EXP 69
12672: PPUSH
12673: LD_STRING D15-Kov-2
12675: PPUSH
12676: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
12680: LD_EXP 61
12684: PPUSH
12685: LD_STRING D15-Bur-3
12687: PPUSH
12688: CALL_OW 88
// DialogueOff ;
12692: CALL_OW 7
// if raportForPlatonov = 2 then
12696: LD_EXP 39
12700: PUSH
12701: LD_INT 2
12703: EQUAL
12704: IFFALSE 12716
// raportForPlatonov = 1 else
12706: LD_ADDR_EXP 39
12710: PUSH
12711: LD_INT 1
12713: ST_TO_ADDR
12714: GO 12724
// raportForPlatonov = 3 ;
12716: LD_ADDR_EXP 39
12720: PUSH
12721: LD_INT 3
12723: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
12724: LD_STRING M7
12726: PPUSH
12727: CALL_OW 337
// exit ;
12731: POP
12732: POP
12733: GO 12893
// end ; if bunker in rightBunkers and not sawRightBunker then
12735: LD_VAR 0 1
12739: PUSH
12740: LD_EXP 82
12744: IN
12745: PUSH
12746: LD_EXP 30
12750: NOT
12751: AND
12752: IFFALSE 12889
// begin sawRightBunker = true ;
12754: LD_ADDR_EXP 30
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12762: LD_VAR 0 1
12766: PPUSH
12767: CALL_OW 85
// DialogueOn ;
12771: CALL_OW 6
// if IsOK ( Kovalyuk ) then
12775: LD_EXP 69
12779: PPUSH
12780: CALL_OW 302
12784: IFFALSE 12818
// begin if sawLeftBunker then
12786: LD_EXP 29
12790: IFFALSE 12806
// Say ( Kovalyuk , D16-Kov-1a ) else
12792: LD_EXP 69
12796: PPUSH
12797: LD_STRING D16-Kov-1a
12799: PPUSH
12800: CALL_OW 88
12804: GO 12818
// Say ( Kovalyuk , D16-Kov-1 ) ;
12806: LD_EXP 69
12810: PPUSH
12811: LD_STRING D16-Kov-1
12813: PPUSH
12814: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
12818: LD_EXP 61
12822: PPUSH
12823: LD_STRING D16-Bur-1
12825: PPUSH
12826: CALL_OW 88
// if IsOK ( Gnyevko ) then
12830: LD_EXP 62
12834: PPUSH
12835: CALL_OW 302
12839: IFFALSE 12853
// Say ( Gnyevko , D16-Gny-1 ) ;
12841: LD_EXP 62
12845: PPUSH
12846: LD_STRING D16-Gny-1
12848: PPUSH
12849: CALL_OW 88
// DialogueOff ;
12853: CALL_OW 7
// if raportForPlatonov = 3 then
12857: LD_EXP 39
12861: PUSH
12862: LD_INT 3
12864: EQUAL
12865: IFFALSE 12877
// raportForPlatonov = 1 else
12867: LD_ADDR_EXP 39
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
12875: GO 12885
// raportForPlatonov = 2 ;
12877: LD_ADDR_EXP 39
12881: PUSH
12882: LD_INT 2
12884: ST_TO_ADDR
// exit ;
12885: POP
12886: POP
12887: GO 12893
// end ; end ; end ;
12889: GO 12507
12891: POP
12892: POP
// end ;
12893: PPOPN 1
12895: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
12896: LD_EXP 32
12900: NOT
12901: PUSH
12902: LD_EXP 82
12906: AND
12907: PUSH
12908: LD_EXP 20
12912: AND
12913: PUSH
12914: LD_EXP 69
12918: PPUSH
12919: CALL_OW 302
12923: PUSH
12924: LD_EXP 62
12928: PPUSH
12929: CALL_OW 302
12933: OR
12934: AND
12935: IFFALSE 13123
12937: GO 12939
12939: DISABLE
12940: LD_INT 0
12942: PPUSH
// begin enable ;
12943: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12944: LD_ADDR_VAR 0 1
12948: PUSH
12949: LD_INT 22
12951: PUSH
12952: LD_INT 3
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 2
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: PUSH
12996: FOR_IN
12997: IFFALSE 13121
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 320
13008: PUSH
13009: LD_EXP 82
13013: PUSH
13014: LD_INT 1
13016: ARRAY
13017: EQUAL
13018: PUSH
13019: LD_VAR 0 1
13023: PPUSH
13024: CALL_OW 320
13028: PUSH
13029: LD_EXP 82
13033: PUSH
13034: LD_INT 2
13036: ARRAY
13037: EQUAL
13038: OR
13039: IFFALSE 13119
// begin dialogAttackRightBunkers = true ;
13041: LD_ADDR_EXP 32
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// DialogueOn ;
13049: CALL_OW 6
// if IsOK ( Gnyevko ) then
13053: LD_EXP 62
13057: PPUSH
13058: CALL_OW 302
13062: IFFALSE 13076
// Say ( Gnyevko , D16A-Gny-1 ) ;
13064: LD_EXP 62
13068: PPUSH
13069: LD_STRING D16A-Gny-1
13071: PPUSH
13072: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13076: LD_EXP 69
13080: PPUSH
13081: CALL_OW 302
13085: IFFALSE 13099
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13087: LD_EXP 69
13091: PPUSH
13092: LD_STRING D16A-Kov-1
13094: PPUSH
13095: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13099: LD_EXP 61
13103: PPUSH
13104: LD_STRING D16A-Bur-1
13106: PPUSH
13107: CALL_OW 88
// DialogueOff ;
13111: CALL_OW 7
// exit ;
13115: POP
13116: POP
13117: GO 13123
// end ; end ;
13119: GO 12996
13121: POP
13122: POP
// end ;
13123: PPOPN 1
13125: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
13126: LD_INT 18
13128: PPUSH
13129: LD_INT 22
13131: PUSH
13132: LD_INT 3
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: PPUSH
13142: CALL_OW 70
13146: PUSH
13147: LD_EXP 29
13151: NOT
13152: AND
13153: IFFALSE 13536
13155: GO 13157
13157: DISABLE
13158: LD_INT 0
13160: PPUSH
// begin sawLeftBunker = true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// if playerGetSupport then
13169: LD_EXP 34
13173: IFFALSE 13192
// decsToChoose = [ 1 , 3 ] else
13175: LD_ADDR_VAR 0 1
13179: PUSH
13180: LD_INT 1
13182: PUSH
13183: LD_INT 3
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: ST_TO_ADDR
13190: GO 13211
// decsToChoose = [ 1 , 2 , 3 ] ;
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: LD_INT 2
13202: PUSH
13203: LD_INT 3
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
13211: LD_STRING QAttackBw
13213: PPUSH
13214: LD_VAR 0 1
13218: PPUSH
13219: CALL_OW 98
13223: PUSH
13224: LD_INT 1
13226: DOUBLE
13227: EQUAL
13228: IFTRUE 13232
13230: GO 13325
13232: POP
// begin DialogueOn ;
13233: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
13237: LD_EXP 61
13241: PPUSH
13242: LD_STRING D17-Bur-1
13244: PPUSH
13245: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
13249: LD_EXP 75
13253: PPUSH
13254: LD_STRING D17-Pla-1
13256: PPUSH
13257: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
13261: LD_EXP 61
13265: PPUSH
13266: LD_STRING D17-Bur-2
13268: PPUSH
13269: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
13273: LD_EXP 75
13277: PPUSH
13278: LD_STRING D17-Pla-2
13280: PPUSH
13281: CALL_OW 94
// DialogueOff ;
13285: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
13289: LD_EXP 42
13293: PUSH
13294: LD_INT 2
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: IN
13304: NOT
13305: IFFALSE 13323
// begin initiative = 1 ;
13307: LD_ADDR_EXP 42
13311: PUSH
13312: LD_INT 1
13314: ST_TO_ADDR
// platonovOpinion = 2 ;
13315: LD_ADDR_EXP 5
13319: PUSH
13320: LD_INT 2
13322: ST_TO_ADDR
// end ; end ; 2 :
13323: GO 13466
13325: LD_INT 2
13327: DOUBLE
13328: EQUAL
13329: IFTRUE 13333
13331: GO 13438
13333: POP
// begin DialogueOn ;
13334: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13338: LD_EXP 61
13342: PPUSH
13343: LD_STRING D18-Bur-1
13345: PPUSH
13346: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13350: LD_EXP 75
13354: PPUSH
13355: LD_STRING D18-Pla-1
13357: PPUSH
13358: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13362: LD_EXP 61
13366: PPUSH
13367: LD_STRING D18-Bur-2
13369: PPUSH
13370: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
13374: LD_EXP 75
13378: PPUSH
13379: LD_STRING D18-Pla-2
13381: PPUSH
13382: CALL_OW 94
// DialogueOff ;
13386: CALL_OW 7
// playerGetSupport = true ;
13390: LD_ADDR_EXP 34
13394: PUSH
13395: LD_INT 1
13397: ST_TO_ADDR
// medalForGetSupport = false ;
13398: LD_ADDR_EXP 40
13402: PUSH
13403: LD_INT 0
13405: ST_TO_ADDR
// PlatonovSendSupport ;
13406: CALL 6514 0 0
// if initiative <> 3 then
13410: LD_EXP 42
13414: PUSH
13415: LD_INT 3
13417: NONEQUAL
13418: IFFALSE 13436
// begin initiative = 1 ;
13420: LD_ADDR_EXP 42
13424: PUSH
13425: LD_INT 1
13427: ST_TO_ADDR
// platonovOpinion = 2 ;
13428: LD_ADDR_EXP 5
13432: PUSH
13433: LD_INT 2
13435: ST_TO_ADDR
// end ; end ; 3 :
13436: GO 13466
13438: LD_INT 3
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13465
13446: POP
// begin initiative = 3 ;
13447: LD_ADDR_EXP 42
13451: PUSH
13452: LD_INT 3
13454: ST_TO_ADDR
// platonovOpinion = 0 ;
13455: LD_ADDR_EXP 5
13459: PUSH
13460: LD_INT 0
13462: ST_TO_ADDR
// end ; end ;
13463: GO 13466
13465: POP
// if IsOK ( Gnyevko ) then
13466: LD_EXP 62
13470: PPUSH
13471: CALL_OW 302
13475: IFFALSE 13501
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13477: LD_EXP 62
13481: PPUSH
13482: LD_STRING D19-Gny-1
13484: PPUSH
13485: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13489: LD_EXP 61
13493: PPUSH
13494: LD_STRING D19-Bur-1
13496: PPUSH
13497: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
13501: LD_EXP 69
13505: PPUSH
13506: CALL_OW 302
13510: IFFALSE 13536
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13512: LD_EXP 69
13516: PPUSH
13517: LD_STRING D19-Kov-1
13519: PPUSH
13520: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13524: LD_EXP 61
13528: PPUSH
13529: LD_STRING D19-Bur-2
13531: PPUSH
13532: CALL_OW 88
// end ; end ;
13536: PPOPN 1
13538: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13539: LD_EXP 31
13543: NOT
13544: PUSH
13545: LD_EXP 81
13549: AND
13550: PUSH
13551: LD_EXP 20
13555: AND
13556: PUSH
13557: LD_INT 18
13559: PPUSH
13560: LD_INT 22
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: PPUSH
13573: CALL_OW 70
13577: PUSH
13578: LD_INT 0
13580: EQUAL
13581: AND
13582: PUSH
13583: LD_EXP 69
13587: PPUSH
13588: CALL_OW 302
13592: PUSH
13593: LD_EXP 62
13597: PPUSH
13598: CALL_OW 302
13602: OR
13603: AND
13604: IFFALSE 13792
13606: GO 13608
13608: DISABLE
13609: LD_INT 0
13611: PPUSH
// begin enable ;
13612: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_INT 3
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: LD_INT 21
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 21
13643: PUSH
13644: LD_INT 2
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PPUSH
13660: CALL_OW 69
13664: PUSH
13665: FOR_IN
13666: IFFALSE 13790
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 320
13677: PUSH
13678: LD_EXP 81
13682: PUSH
13683: LD_INT 1
13685: ARRAY
13686: EQUAL
13687: PUSH
13688: LD_VAR 0 1
13692: PPUSH
13693: CALL_OW 320
13697: PUSH
13698: LD_EXP 81
13702: PUSH
13703: LD_INT 2
13705: ARRAY
13706: EQUAL
13707: OR
13708: IFFALSE 13788
// begin dialogAttackLeftBunkers = true ;
13710: LD_ADDR_EXP 31
13714: PUSH
13715: LD_INT 1
13717: ST_TO_ADDR
// DialogueOn ;
13718: CALL_OW 6
// if IsOK ( Gnyevko ) then
13722: LD_EXP 62
13726: PPUSH
13727: CALL_OW 302
13731: IFFALSE 13745
// Say ( Gnyevko , D19A-Gny-1 ) ;
13733: LD_EXP 62
13737: PPUSH
13738: LD_STRING D19A-Gny-1
13740: PPUSH
13741: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13745: LD_EXP 69
13749: PPUSH
13750: CALL_OW 302
13754: IFFALSE 13768
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13756: LD_EXP 69
13760: PPUSH
13761: LD_STRING D19A-Kov-1
13763: PPUSH
13764: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13768: LD_EXP 61
13772: PPUSH
13773: LD_STRING D16A-Bur-1
13775: PPUSH
13776: CALL_OW 88
// DialogueOff ;
13780: CALL_OW 7
// exit ;
13784: POP
13785: POP
13786: GO 13792
// end ; end ;
13788: GO 13665
13790: POP
13791: POP
// end ;
13792: PPOPN 1
13794: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
13795: LD_EXP 81
13799: NOT
13800: PUSH
13801: LD_INT 17
13803: PPUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 1
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 21
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 31
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 50
13836: PUSH
13837: EMPTY
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 70
13850: PUSH
13851: LD_INT 0
13853: EQUAL
13854: OR
13855: PUSH
13856: LD_EXP 20
13860: AND
13861: IFFALSE 13912
13863: GO 13865
13865: DISABLE
// begin leftBunkers = [ ] ;
13866: LD_ADDR_EXP 81
13870: PUSH
13871: EMPTY
13872: ST_TO_ADDR
// DialogueOn ;
13873: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
13877: LD_EXP 61
13881: PPUSH
13882: LD_STRING D20-Bur-1
13884: PPUSH
13885: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
13889: LD_EXP 75
13893: PPUSH
13894: LD_STRING D20-Pla-1
13896: PPUSH
13897: CALL_OW 88
// DialogueOff ;
13901: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
13905: LD_STRING M8
13907: PPUSH
13908: CALL_OW 337
// end ;
13912: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
13913: LD_EXP 82
13917: NOT
13918: PUSH
13919: LD_INT 16
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_INT 1
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: LD_INT 21
13934: PUSH
13935: LD_INT 3
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 30
13944: PUSH
13945: LD_INT 31
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 50
13954: PUSH
13955: EMPTY
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 70
13968: PUSH
13969: LD_INT 0
13971: EQUAL
13972: OR
13973: PUSH
13974: LD_EXP 20
13978: AND
13979: IFFALSE 14023
13981: GO 13983
13983: DISABLE
// begin rightBunkers = [ ] ;
13984: LD_ADDR_EXP 82
13988: PUSH
13989: EMPTY
13990: ST_TO_ADDR
// DialogueOn ;
13991: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
13995: LD_EXP 61
13999: PPUSH
14000: LD_STRING D20a-Bur-1
14002: PPUSH
14003: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14007: LD_EXP 75
14011: PPUSH
14012: LD_STRING D20a-Pla-1
14014: PPUSH
14015: CALL_OW 88
// DialogueOff ;
14019: CALL_OW 7
// end ;
14023: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14024: LD_EXP 35
14028: NOT
14029: PUSH
14030: LD_EXP 72
14034: AND
14035: IFFALSE 14530
14037: GO 14039
14039: DISABLE
14040: LD_INT 0
14042: PPUSH
14043: PPUSH
14044: PPUSH
// begin enable ;
14045: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 21
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: PUSH
14098: FOR_IN
14099: IFFALSE 14528
// for trapUnit in trapTeam do
14101: LD_ADDR_VAR 0 2
14105: PUSH
14106: LD_EXP 80
14110: PUSH
14111: FOR_IN
14112: IFFALSE 14524
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
14114: LD_VAR 0 1
14118: PPUSH
14119: LD_VAR 0 2
14123: PPUSH
14124: CALL_OW 296
14128: PUSH
14129: LD_INT 16
14131: LESS
14132: IFFALSE 14522
// begin saveBelkovDecision = true ;
14134: LD_ADDR_EXP 35
14138: PUSH
14139: LD_INT 1
14141: ST_TO_ADDR
// if playerGetSupport then
14142: LD_EXP 34
14146: IFFALSE 14165
// decsToChoose = [ 1 , 3 ] else
14148: LD_ADDR_VAR 0 3
14152: PUSH
14153: LD_INT 1
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: ST_TO_ADDR
14163: GO 14184
// decsToChoose = [ 1 , 2 , 3 ] ;
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_INT 1
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
14184: LD_STRING QAttackAm
14186: PPUSH
14187: LD_VAR 0 3
14191: PPUSH
14192: CALL_OW 98
14196: PUSH
14197: LD_INT 1
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14274
14205: POP
// begin DialogueOn ;
14206: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
14210: LD_EXP 61
14214: PPUSH
14215: LD_STRING D21-Bur-1
14217: PPUSH
14218: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
14222: LD_EXP 75
14226: PPUSH
14227: LD_STRING D21-Pla-1
14229: PPUSH
14230: CALL_OW 94
// DialogueOff ;
14234: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14238: LD_EXP 42
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: IN
14253: NOT
14254: IFFALSE 14272
// begin initiative = 1 ;
14256: LD_ADDR_EXP 42
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// platonovOpinion = 2 ;
14264: LD_ADDR_EXP 5
14268: PUSH
14269: LD_INT 2
14271: ST_TO_ADDR
// end ; end ; 2 :
14272: GO 14466
14274: LD_INT 2
14276: DOUBLE
14277: EQUAL
14278: IFTRUE 14282
14280: GO 14438
14282: POP
// begin DialogueOn ;
14283: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
14287: LD_EXP 61
14291: PPUSH
14292: LD_STRING D22-Bur-1
14294: PPUSH
14295: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
14299: LD_EXP 34
14303: PUSH
14304: LD_EXP 81
14308: PUSH
14309: LD_INT 0
14311: EQUAL
14312: PUSH
14313: LD_EXP 82
14317: PUSH
14318: LD_INT 0
14320: EQUAL
14321: OR
14322: AND
14323: IFFALSE 14337
// Say ( Platonov , D22-Pla-1b ) ;
14325: LD_EXP 75
14329: PPUSH
14330: LD_STRING D22-Pla-1b
14332: PPUSH
14333: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
14337: LD_EXP 34
14341: PUSH
14342: LD_EXP 81
14346: PUSH
14347: LD_EXP 82
14351: OR
14352: AND
14353: IFFALSE 14367
// Say ( Platonov , D22-Pla-1a ) ;
14355: LD_EXP 75
14359: PPUSH
14360: LD_STRING D22-Pla-1a
14362: PPUSH
14363: CALL_OW 88
// if not playerGetSupport then
14367: LD_EXP 34
14371: NOT
14372: IFFALSE 14406
// begin Say ( Platonov , D22-Pla-1 ) ;
14374: LD_EXP 75
14378: PPUSH
14379: LD_STRING D22-Pla-1
14381: PPUSH
14382: CALL_OW 88
// playerGetSupport = true ;
14386: LD_ADDR_EXP 34
14390: PUSH
14391: LD_INT 1
14393: ST_TO_ADDR
// medalForGetSupport = false ;
14394: LD_ADDR_EXP 40
14398: PUSH
14399: LD_INT 0
14401: ST_TO_ADDR
// PlatonovSendSupport ;
14402: CALL 6514 0 0
// end ; DialogueOff ;
14406: CALL_OW 7
// if initiative <> 3 then
14410: LD_EXP 42
14414: PUSH
14415: LD_INT 3
14417: NONEQUAL
14418: IFFALSE 14436
// begin initiative = 2 ;
14420: LD_ADDR_EXP 42
14424: PUSH
14425: LD_INT 2
14427: ST_TO_ADDR
// platonovOpinion = 1 ;
14428: LD_ADDR_EXP 5
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// end ; end ; 3 :
14436: GO 14466
14438: LD_INT 3
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14446
14444: GO 14465
14446: POP
// begin initiative = 3 ;
14447: LD_ADDR_EXP 42
14451: PUSH
14452: LD_INT 3
14454: ST_TO_ADDR
// platonovOpinion = 0 ;
14455: LD_ADDR_EXP 5
14459: PUSH
14460: LD_INT 0
14462: ST_TO_ADDR
// end ; end ;
14463: GO 14466
14465: POP
// if IsOK ( Gnyevko ) then
14466: LD_EXP 62
14470: PPUSH
14471: CALL_OW 302
14475: IFFALSE 14501
// begin Say ( Gnyevko , D23-Gny-1 ) ;
14477: LD_EXP 62
14481: PPUSH
14482: LD_STRING D23-Gny-1
14484: PPUSH
14485: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
14489: LD_EXP 61
14493: PPUSH
14494: LD_STRING D23-Bur-1
14496: PPUSH
14497: CALL_OW 88
// end ; saveBelkovObjective = true ;
14501: LD_ADDR_EXP 36
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
14509: LD_STRING M9
14511: PPUSH
14512: CALL_OW 337
// exit ;
14516: POP
14517: POP
14518: POP
14519: POP
14520: GO 14530
// end ;
14522: GO 14111
14524: POP
14525: POP
14526: GO 14098
14528: POP
14529: POP
// end ;
14530: PPOPN 3
14532: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
14533: LD_EXP 20
14537: PUSH
14538: LD_EXP 80
14542: NOT
14543: AND
14544: PUSH
14545: LD_EXP 37
14549: NOT
14550: AND
14551: IFFALSE 14591
14553: GO 14555
14555: DISABLE
// begin belkovSaved = true ;
14556: LD_ADDR_EXP 37
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// activateBelkovAI = false ;
14564: LD_ADDR_EXP 28
14568: PUSH
14569: LD_INT 0
14571: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
14572: LD_EXP 72
14576: PPUSH
14577: LD_INT 3
14579: PPUSH
14580: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
14584: LD_STRING M9a
14586: PPUSH
14587: CALL_OW 337
// end ;
14591: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
14592: LD_EXP 35
14596: PUSH
14597: LD_EXP 63
14601: PPUSH
14602: CALL_OW 301
14606: PUSH
14607: LD_EXP 67
14611: PPUSH
14612: CALL_OW 301
14616: PUSH
14617: LD_EXP 63
14621: PPUSH
14622: CALL_OW 255
14626: PUSH
14627: LD_INT 6
14629: EQUAL
14630: PUSH
14631: LD_EXP 67
14635: PPUSH
14636: CALL_OW 255
14640: PUSH
14641: LD_INT 6
14643: EQUAL
14644: OR
14645: AND
14646: OR
14647: AND
14648: IFFALSE 14668
14650: GO 14652
14652: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
14653: LD_STRING M9a
14655: PPUSH
14656: CALL_OW 337
// saveBelkovObjective = false ;
14660: LD_ADDR_EXP 36
14664: PUSH
14665: LD_INT 0
14667: ST_TO_ADDR
// end ;
14668: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
14669: LD_EXP 37
14673: PUSH
14674: LD_EXP 61
14678: PPUSH
14679: LD_EXP 63
14683: PPUSH
14684: CALL_OW 296
14688: PUSH
14689: LD_INT 14
14691: LESS
14692: PUSH
14693: LD_EXP 6
14697: AND
14698: PUSH
14699: LD_EXP 61
14703: PPUSH
14704: LD_EXP 67
14708: PPUSH
14709: CALL_OW 296
14713: PUSH
14714: LD_INT 14
14716: LESS
14717: PUSH
14718: LD_EXP 6
14722: NOT
14723: AND
14724: OR
14725: AND
14726: IFFALSE 15022
14728: GO 14730
14730: DISABLE
// begin InGameOn ;
14731: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
14735: LD_EXP 63
14739: PPUSH
14740: CALL_OW 302
14744: PUSH
14745: LD_EXP 6
14749: AND
14750: IFFALSE 14846
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
14752: LD_EXP 61
14756: PUSH
14757: LD_EXP 63
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
14770: LD_EXP 61
14774: PPUSH
14775: LD_EXP 63
14779: PPUSH
14780: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
14784: LD_EXP 63
14788: PPUSH
14789: LD_EXP 61
14793: PPUSH
14794: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
14798: LD_EXP 63
14802: PPUSH
14803: LD_STRING D24-Bel-1
14805: PPUSH
14806: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
14810: LD_EXP 61
14814: PPUSH
14815: LD_STRING D24-Bur-1
14817: PPUSH
14818: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
14822: LD_EXP 63
14826: PPUSH
14827: LD_STRING D24-Bel-2
14829: PPUSH
14830: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
14834: LD_EXP 61
14838: PPUSH
14839: LD_STRING D24-Bur-2
14841: PPUSH
14842: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
14846: LD_EXP 67
14850: PPUSH
14851: CALL_OW 302
14855: PUSH
14856: LD_EXP 6
14860: NOT
14861: AND
14862: IFFALSE 14970
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
14864: LD_EXP 61
14868: PUSH
14869: LD_EXP 67
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PPUSH
14878: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
14882: LD_EXP 61
14886: PPUSH
14887: LD_EXP 67
14891: PPUSH
14892: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
14896: LD_EXP 67
14900: PPUSH
14901: LD_EXP 61
14905: PPUSH
14906: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
14910: LD_EXP 67
14914: PPUSH
14915: LD_STRING D24-Bel-1
14917: PPUSH
14918: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
14922: LD_EXP 61
14926: PPUSH
14927: LD_STRING D24-Bur-1
14929: PPUSH
14930: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
14934: LD_EXP 61
14938: PPUSH
14939: LD_STRING D24-Bur-1a
14941: PPUSH
14942: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
14946: LD_EXP 67
14950: PPUSH
14951: LD_STRING D24-Bel-2
14953: PPUSH
14954: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
14958: LD_EXP 61
14962: PPUSH
14963: LD_STRING D24-Bur-2
14965: PPUSH
14966: CALL_OW 88
// end ; if captureBelkovVehicle then
14970: LD_EXP 38
14974: IFFALSE 14988
// Say ( Burlak , D24-Bur-2a ) ;
14976: LD_EXP 61
14980: PPUSH
14981: LD_STRING D24-Bur-2a
14983: PPUSH
14984: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
14988: LD_EXP 75
14992: PPUSH
14993: LD_STRING D24-Pla-2
14995: PPUSH
14996: CALL_OW 94
// if leftBunkers then
15000: LD_EXP 81
15004: IFFALSE 15018
// SayRadio ( Platonov , D24-Pla-2a ) ;
15006: LD_EXP 75
15010: PPUSH
15011: LD_STRING D24-Pla-2a
15013: PPUSH
15014: CALL_OW 94
// InGameOff ;
15018: CALL_OW 9
// end ;
15022: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15023: LD_INT 22
15025: PPUSH
15026: LD_INT 22
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 21
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PPUSH
15050: CALL_OW 70
15054: PUSH
15055: LD_EXP 69
15059: PPUSH
15060: CALL_OW 302
15064: PUSH
15065: LD_EXP 62
15069: PPUSH
15070: CALL_OW 302
15074: OR
15075: AND
15076: IFFALSE 15159
15078: GO 15080
15080: DISABLE
// begin DialogueOn ;
15081: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15085: LD_EXP 61
15089: PPUSH
15090: LD_STRING D26-Bur-1
15092: PPUSH
15093: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15097: LD_EXP 69
15101: PPUSH
15102: CALL_OW 302
15106: IFFALSE 15120
// Say ( Kovalyuk , D26-Kov-1 ) ;
15108: LD_EXP 69
15112: PPUSH
15113: LD_STRING D26-Kov-1
15115: PPUSH
15116: CALL_OW 88
// if IsOk ( Gnyevko ) then
15120: LD_EXP 62
15124: PPUSH
15125: CALL_OW 302
15129: IFFALSE 15143
// Say ( Gnyevko , D26-Gny-1 ) ;
15131: LD_EXP 62
15135: PPUSH
15136: LD_STRING D26-Gny-1
15138: PPUSH
15139: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
15143: LD_EXP 61
15147: PPUSH
15148: LD_STRING D26-Bur-2
15150: PPUSH
15151: CALL_OW 88
// DialogueOff ;
15155: CALL_OW 7
// end ;
15159: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
15160: LD_EXP 20
15164: PUSH
15165: LD_EXP 61
15169: PPUSH
15170: LD_INT 8
15172: PPUSH
15173: CALL_OW 308
15177: NOT
15178: PUSH
15179: LD_EXP 61
15183: PPUSH
15184: CALL_OW 310
15188: PPUSH
15189: CALL_OW 310
15193: PPUSH
15194: LD_INT 8
15196: PPUSH
15197: CALL_OW 308
15201: NOT
15202: AND
15203: AND
15204: PUSH
15205: LD_EXP 39
15209: PUSH
15210: LD_INT 1
15212: NEG
15213: EQUAL
15214: AND
15215: IFFALSE 15229
15217: GO 15219
15219: DISABLE
// begin enable ;
15220: ENABLE
// raportForPlatonov = 0 ;
15221: LD_ADDR_EXP 39
15225: PUSH
15226: LD_INT 0
15228: ST_TO_ADDR
// end ;
15229: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
15230: LD_EXP 20
15234: PUSH
15235: LD_EXP 39
15239: PUSH
15240: LD_INT 0
15242: GREATEREQUAL
15243: AND
15244: PUSH
15245: LD_EXP 16
15249: NOT
15250: AND
15251: PUSH
15252: LD_EXP 61
15256: PPUSH
15257: LD_INT 8
15259: PPUSH
15260: CALL_OW 308
15264: PUSH
15265: LD_EXP 61
15269: PPUSH
15270: CALL_OW 310
15274: PPUSH
15275: CALL_OW 310
15279: PPUSH
15280: LD_INT 8
15282: PPUSH
15283: CALL_OW 308
15287: PUSH
15288: LD_EXP 16
15292: NOT
15293: AND
15294: OR
15295: AND
15296: IFFALSE 15587
15298: GO 15300
15300: DISABLE
// begin enable ;
15301: ENABLE
// DialogueOn ;
15302: CALL_OW 6
// case raportForPlatonov of 0 :
15306: LD_EXP 39
15310: PUSH
15311: LD_INT 0
15313: DOUBLE
15314: EQUAL
15315: IFTRUE 15319
15317: GO 15346
15319: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
15320: LD_EXP 75
15324: PPUSH
15325: LD_STRING D25a-Pla-1
15327: PPUSH
15328: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
15332: LD_EXP 61
15336: PPUSH
15337: LD_STRING D25a-Bur-1
15339: PPUSH
15340: CALL_OW 88
// end ; 1 :
15344: GO 15562
15346: LD_INT 1
15348: DOUBLE
15349: EQUAL
15350: IFTRUE 15354
15352: GO 15417
15354: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15355: LD_EXP 75
15359: PPUSH
15360: LD_STRING D25-Pla-1
15362: PPUSH
15363: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
15367: LD_EXP 61
15371: PPUSH
15372: LD_STRING D25-Bur-1
15374: PPUSH
15375: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
15379: LD_EXP 61
15383: PPUSH
15384: LD_STRING D25b-Bur-1
15386: PPUSH
15387: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
15391: LD_EXP 75
15395: PPUSH
15396: LD_STRING D25b-Pla-1
15398: PPUSH
15399: CALL_OW 88
// playerGetSupport = true ;
15403: LD_ADDR_EXP 34
15407: PUSH
15408: LD_INT 1
15410: ST_TO_ADDR
// PlatonovSendSupport ;
15411: CALL 6514 0 0
// end ; 2 :
15415: GO 15562
15417: LD_INT 2
15419: DOUBLE
15420: EQUAL
15421: IFTRUE 15425
15423: GO 15471
15425: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15426: LD_EXP 75
15430: PPUSH
15431: LD_STRING D25-Pla-1
15433: PPUSH
15434: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
15438: LD_EXP 61
15442: PPUSH
15443: LD_STRING D25-Bur-1a
15445: PPUSH
15446: CALL_OW 88
// if not sawLeftBunker then
15450: LD_EXP 29
15454: NOT
15455: IFFALSE 15469
// Say ( Platonov , D25c-Pla-1 ) ;
15457: LD_EXP 75
15461: PPUSH
15462: LD_STRING D25c-Pla-1
15464: PPUSH
15465: CALL_OW 88
// end ; 3 :
15469: GO 15562
15471: LD_INT 3
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15561
15479: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15480: LD_EXP 75
15484: PPUSH
15485: LD_STRING D25-Pla-1
15487: PPUSH
15488: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
15492: LD_EXP 61
15496: PPUSH
15497: LD_STRING D25a-Bur-1b
15499: PPUSH
15500: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
15504: LD_EXP 61
15508: PPUSH
15509: LD_STRING D25b-Bur-1
15511: PPUSH
15512: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
15516: LD_EXP 75
15520: PPUSH
15521: LD_STRING D25b-Pla-1
15523: PPUSH
15524: CALL_OW 88
// playerGetSupport = true ;
15528: LD_ADDR_EXP 34
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// PlatonovSendSupport ;
15536: CALL 6514 0 0
// if not sawRightBunker then
15540: LD_EXP 30
15544: NOT
15545: IFFALSE 15559
// Say ( Platonov , D25c-Pla-1 ) ;
15547: LD_EXP 75
15551: PPUSH
15552: LD_STRING D25c-Pla-1
15554: PPUSH
15555: CALL_OW 88
// end ; end ;
15559: GO 15562
15561: POP
// raportForPlatonov = - 1 ;
15562: LD_ADDR_EXP 39
15566: PUSH
15567: LD_INT 1
15569: NEG
15570: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
15571: LD_EXP 75
15575: PPUSH
15576: LD_STRING D25c-Pla-1a
15578: PPUSH
15579: CALL_OW 88
// DialogueOff ;
15583: CALL_OW 7
// end ;
15587: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
15588: LD_INT 19
15590: PPUSH
15591: LD_INT 22
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: PPUSH
15604: CALL_OW 70
15608: PUSH
15609: LD_INT 0
15611: GREATER
15612: IFFALSE 15632
15614: GO 15616
15616: DISABLE
// begin northMapExplored = true ;
15617: LD_ADDR_EXP 41
15621: PUSH
15622: LD_INT 1
15624: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15625: LD_STRING M10
15627: PPUSH
15628: CALL_OW 337
// end ;
15632: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
15633: LD_EXP 81
15637: NOT
15638: PUSH
15639: LD_EXP 41
15643: AND
15644: PUSH
15645: LD_EXP 37
15649: PUSH
15650: LD_EXP 36
15654: NOT
15655: OR
15656: AND
15657: IFFALSE 15677
15659: GO 15661
15661: DISABLE
// begin backToBeria2 = true ;
15662: LD_ADDR_EXP 16
15666: PUSH
15667: LD_INT 1
15669: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
15670: LD_STRING M10a
15672: PPUSH
15673: CALL_OW 337
// end ; end_of_file
15677: END
// export function PrepareNature ; var i , un ; begin
15678: LD_INT 0
15680: PPUSH
15681: PPUSH
15682: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: DOUBLE
15689: LD_INT 1
15691: DEC
15692: ST_TO_ADDR
15693: LD_EXP 44
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PUSH
15702: FOR_TO
15703: IFFALSE 15813
// begin uc_side = 0 ;
15705: LD_ADDR_OWVAR 20
15709: PUSH
15710: LD_INT 0
15712: ST_TO_ADDR
// uc_nation = nation_nature ;
15713: LD_ADDR_OWVAR 21
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// hc_class = class_apeman ;
15721: LD_ADDR_OWVAR 28
15725: PUSH
15726: LD_INT 12
15728: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15729: LD_ADDR_OWVAR 31
15733: PUSH
15734: LD_EXP 45
15738: PUSH
15739: LD_INT 1
15741: ARRAY
15742: PUSH
15743: LD_EXP 45
15747: PUSH
15748: LD_INT 2
15750: ARRAY
15751: PUSH
15752: LD_EXP 45
15756: PUSH
15757: LD_INT 3
15759: ARRAY
15760: PUSH
15761: LD_EXP 45
15765: PUSH
15766: LD_INT 4
15768: ARRAY
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15776: LD_ADDR_OWVAR 35
15780: PUSH
15781: LD_EXP 46
15785: ST_TO_ADDR
// un = CreateHuman ;
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: CALL_OW 44
15795: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_INT 21
15803: PPUSH
15804: LD_INT 0
15806: PPUSH
15807: CALL_OW 49
// end ;
15811: GO 15702
15813: POP
15814: POP
// for i := 1 to animalsAmount [ 2 ] do
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: DOUBLE
15821: LD_INT 1
15823: DEC
15824: ST_TO_ADDR
15825: LD_EXP 44
15829: PUSH
15830: LD_INT 2
15832: ARRAY
15833: PUSH
15834: FOR_TO
15835: IFFALSE 15945
// begin uc_side = 0 ;
15837: LD_ADDR_OWVAR 20
15841: PUSH
15842: LD_INT 0
15844: ST_TO_ADDR
// uc_nation = nation_nature ;
15845: LD_ADDR_OWVAR 21
15849: PUSH
15850: LD_INT 0
15852: ST_TO_ADDR
// hc_class = class_phororhacos ;
15853: LD_ADDR_OWVAR 28
15857: PUSH
15858: LD_INT 18
15860: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15861: LD_ADDR_OWVAR 31
15865: PUSH
15866: LD_EXP 45
15870: PUSH
15871: LD_INT 1
15873: ARRAY
15874: PUSH
15875: LD_EXP 45
15879: PUSH
15880: LD_INT 2
15882: ARRAY
15883: PUSH
15884: LD_EXP 45
15888: PUSH
15889: LD_INT 3
15891: ARRAY
15892: PUSH
15893: LD_EXP 45
15897: PUSH
15898: LD_INT 4
15900: ARRAY
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15908: LD_ADDR_OWVAR 35
15912: PUSH
15913: LD_EXP 46
15917: ST_TO_ADDR
// un = CreateHuman ;
15918: LD_ADDR_VAR 0 3
15922: PUSH
15923: CALL_OW 44
15927: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 21
15935: PPUSH
15936: LD_INT 0
15938: PPUSH
15939: CALL_OW 49
// end ;
15943: GO 15834
15945: POP
15946: POP
// for i := 1 to animalsAmount [ 3 ] do
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_EXP 44
15961: PUSH
15962: LD_INT 3
15964: ARRAY
15965: PUSH
15966: FOR_TO
15967: IFFALSE 16077
// begin uc_side = 0 ;
15969: LD_ADDR_OWVAR 20
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// uc_nation = nation_nature ;
15977: LD_ADDR_OWVAR 21
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// hc_class = class_tiger ;
15985: LD_ADDR_OWVAR 28
15989: PUSH
15990: LD_INT 14
15992: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15993: LD_ADDR_OWVAR 31
15997: PUSH
15998: LD_EXP 45
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PUSH
16007: LD_EXP 45
16011: PUSH
16012: LD_INT 2
16014: ARRAY
16015: PUSH
16016: LD_EXP 45
16020: PUSH
16021: LD_INT 3
16023: ARRAY
16024: PUSH
16025: LD_EXP 45
16029: PUSH
16030: LD_INT 4
16032: ARRAY
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16040: LD_ADDR_OWVAR 35
16044: PUSH
16045: LD_EXP 46
16049: ST_TO_ADDR
// un = CreateHuman ;
16050: LD_ADDR_VAR 0 3
16054: PUSH
16055: CALL_OW 44
16059: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 21
16067: PPUSH
16068: LD_INT 0
16070: PPUSH
16071: CALL_OW 49
// end ;
16075: GO 15966
16077: POP
16078: POP
// for i := 1 to animalsAmount [ 4 ] do
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: DOUBLE
16085: LD_INT 1
16087: DEC
16088: ST_TO_ADDR
16089: LD_EXP 44
16093: PUSH
16094: LD_INT 4
16096: ARRAY
16097: PUSH
16098: FOR_TO
16099: IFFALSE 16209
// begin uc_side = 0 ;
16101: LD_ADDR_OWVAR 20
16105: PUSH
16106: LD_INT 0
16108: ST_TO_ADDR
// uc_nation = nation_nature ;
16109: LD_ADDR_OWVAR 21
16113: PUSH
16114: LD_INT 0
16116: ST_TO_ADDR
// hc_class = 21 ;
16117: LD_ADDR_OWVAR 28
16121: PUSH
16122: LD_INT 21
16124: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16125: LD_ADDR_OWVAR 31
16129: PUSH
16130: LD_EXP 45
16134: PUSH
16135: LD_INT 1
16137: ARRAY
16138: PUSH
16139: LD_EXP 45
16143: PUSH
16144: LD_INT 2
16146: ARRAY
16147: PUSH
16148: LD_EXP 45
16152: PUSH
16153: LD_INT 3
16155: ARRAY
16156: PUSH
16157: LD_EXP 45
16161: PUSH
16162: LD_INT 4
16164: ARRAY
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16172: LD_ADDR_OWVAR 35
16176: PUSH
16177: LD_EXP 46
16181: ST_TO_ADDR
// un = CreateHuman ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: CALL_OW 44
16191: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16192: LD_VAR 0 3
16196: PPUSH
16197: LD_INT 21
16199: PPUSH
16200: LD_INT 0
16202: PPUSH
16203: CALL_OW 49
// end ;
16207: GO 16098
16209: POP
16210: POP
// end ; end_of_file
16211: LD_VAR 0 1
16215: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
16216: LD_EXP 21
16220: IFFALSE 16449
16222: GO 16224
16224: DISABLE
16225: LD_INT 0
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
16232: LD_ADDR_VAR 0 4
16236: PUSH
16237: LD_INT 22
16239: PUSH
16240: LD_INT 3
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 21
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 25
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: PPUSH
16272: CALL_OW 69
16276: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16277: LD_INT 1400
16279: PPUSH
16280: CALL_OW 67
// carryCratesEngs = 0 ;
16284: LD_ADDR_VAR 0 3
16288: PUSH
16289: LD_INT 0
16291: ST_TO_ADDR
// for unit in playerEngs do
16292: LD_ADDR_VAR 0 2
16296: PUSH
16297: LD_VAR 0 4
16301: PUSH
16302: FOR_IN
16303: IFFALSE 16331
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_VAR 0 3
16314: PUSH
16315: LD_VAR 0 2
16319: PPUSH
16320: LD_INT 1
16322: PPUSH
16323: CALL_OW 289
16327: PLUS
16328: ST_TO_ADDR
16329: GO 16302
16331: POP
16332: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
16333: LD_INT 106
16335: PPUSH
16336: CALL_OW 274
16340: PPUSH
16341: LD_INT 1
16343: PPUSH
16344: CALL_OW 275
16348: PUSH
16349: LD_INT 50
16351: LESS
16352: PUSH
16353: LD_INT 8
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 287
16363: PUSH
16364: LD_INT 10
16366: MUL
16367: PUSH
16368: LD_INT 106
16370: PPUSH
16371: CALL_OW 274
16375: PPUSH
16376: LD_INT 1
16378: PPUSH
16379: CALL_OW 275
16383: PLUS
16384: PUSH
16385: LD_VAR 0 3
16389: PLUS
16390: PUSH
16391: LD_INT 50
16393: LESS
16394: AND
16395: IFFALSE 16407
// spawnNextCrates = true else
16397: LD_ADDR_VAR 0 5
16401: PUSH
16402: LD_INT 1
16404: ST_TO_ADDR
16405: GO 16415
// spawnNextCrates = false ;
16407: LD_ADDR_VAR 0 5
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// if spawnNextCrates then
16415: LD_VAR 0 5
16419: IFFALSE 16442
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
16421: LD_INT 1
16423: PPUSH
16424: LD_INT 5
16426: PPUSH
16427: CALL_OW 12
16431: PPUSH
16432: LD_INT 26
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 55
// until not spawnCrates ;
16442: LD_EXP 21
16446: NOT
16447: IFFALSE 16232
// end ; end_of_file
16449: PPOPN 5
16451: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 266
16461: PUSH
16462: LD_INT 6
16464: EQUAL
16465: PUSH
16466: LD_INT 22
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 30
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PUSH
16495: LD_INT 1
16497: GREATER
16498: AND
16499: PUSH
16500: LD_EXP 11
16504: NOT
16505: AND
16506: IFFALSE 16517
// Dial_StopConstructAgainSameBuilding ( building ) ;
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL 8591 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 266
16526: PUSH
16527: LD_INT 2
16529: EQUAL
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_INT 3
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 30
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 69
16559: PUSH
16560: LD_INT 1
16562: GREATER
16563: AND
16564: PUSH
16565: LD_EXP 11
16569: NOT
16570: AND
16571: IFFALSE 16582
// Dial_StopConstructAgainSameBuilding ( building ) ;
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL 8591 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 255
16591: PUSH
16592: LD_INT 3
16594: EQUAL
16595: PUSH
16596: LD_VAR 0 1
16600: PPUSH
16601: CALL_OW 266
16605: PUSH
16606: LD_INT 26
16608: PUSH
16609: LD_INT 4
16611: PUSH
16612: LD_INT 31
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: LIST
16619: IN
16620: AND
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: LD_INT 8
16629: PPUSH
16630: CALL_OW 308
16634: AND
16635: IFFALSE 16646
// Dial_StopConstructAgainSameBuilding ( building ) ;
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL 8591 0 1
// end ;
16646: PPOPN 2
16648: END
// on BuildingComplete ( building ) do var sold , platSold ;
16649: LD_INT 0
16651: PPUSH
16652: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 255
16662: PUSH
16663: LD_INT 3
16665: EQUAL
16666: PUSH
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 266
16676: PUSH
16677: LD_INT 6
16679: EQUAL
16680: AND
16681: PUSH
16682: LD_EXP 8
16686: NOT
16687: AND
16688: IFFALSE 16694
// Dial_LabConstructed ;
16690: CALL 8441 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 255
16703: PUSH
16704: LD_INT 3
16706: EQUAL
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 266
16717: PUSH
16718: LD_INT 2
16720: EQUAL
16721: AND
16722: PUSH
16723: LD_EXP 9
16727: NOT
16728: AND
16729: IFFALSE 16735
// Dial_WorkshopConstructed ;
16731: CALL 8516 0 0
// if GetSide ( building ) = 6 then
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 255
16744: PUSH
16745: LD_INT 6
16747: EQUAL
16748: IFFALSE 16959
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 266
16759: PUSH
16760: LD_INT 31
16762: EQUAL
16763: PUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: LD_INT 9
16771: PPUSH
16772: CALL_OW 308
16776: AND
16777: IFFALSE 16828
// begin if UnitsInside ( ru2_arm2 ) then
16779: LD_INT 209
16781: PPUSH
16782: CALL_OW 313
16786: IFFALSE 16828
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
16788: LD_ADDR_VAR 0 2
16792: PUSH
16793: LD_INT 209
16795: PPUSH
16796: CALL_OW 313
16800: PUSH
16801: LD_INT 1
16803: ARRAY
16804: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
16805: LD_VAR 0 2
16809: PPUSH
16810: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
16814: LD_VAR 0 2
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 266
16837: PUSH
16838: LD_INT 31
16840: EQUAL
16841: PUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: LD_INT 8
16849: PPUSH
16850: CALL_OW 308
16854: AND
16855: IFFALSE 16891
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
16857: LD_ADDR_VAR 0 2
16861: PUSH
16862: LD_EXP 76
16866: PPUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 74
16876: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
16877: LD_VAR 0 2
16881: PPUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 266
16900: PUSH
16901: LD_INT 2
16903: EQUAL
16904: IFFALSE 16959
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
16906: LD_EXP 68
16910: PPUSH
16911: LD_INT 25
16913: PUSH
16914: LD_INT 3
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 72
16925: PPUSH
16926: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
16930: LD_EXP 68
16934: PPUSH
16935: LD_INT 25
16937: PUSH
16938: LD_INT 3
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 72
16949: PPUSH
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 180
// end ; end ; end ;
16959: PPOPN 3
16961: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
16962: LD_VAR 0 1
16966: PUSH
16967: LD_INT 47
16969: EQUAL
16970: PUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 255
16980: PUSH
16981: LD_INT 3
16983: EQUAL
16984: AND
16985: IFFALSE 16995
// engineResearched = true ;
16987: LD_ADDR_EXP 10
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// if tech = tech_Tech1 then
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 48
17002: EQUAL
17003: IFFALSE 17025
// begin wait ( 0 0$5 ) ;
17005: LD_INT 175
17007: PPUSH
17008: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17012: LD_INT 83
17014: PPUSH
17015: LD_INT 1500
17017: PPUSH
17018: LD_INT 0
17020: PPUSH
17021: CALL_OW 486
// end ; end ;
17025: PPOPN 2
17027: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17028: LD_VAR 0 2
17032: PPUSH
17033: CALL_OW 255
17037: PUSH
17038: LD_OWVAR 2
17042: EQUAL
17043: PUSH
17044: LD_VAR 0 2
17048: PPUSH
17049: CALL_OW 302
17053: AND
17054: PUSH
17055: LD_EXP 12
17059: NOT
17060: AND
17061: PUSH
17062: LD_EXP 17
17066: NOT
17067: AND
17068: IFFALSE 17079
// Dial_FirstVehConstructed ( factory ) ;
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL 9106 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17079: LD_VAR 0 2
17083: PPUSH
17084: CALL_OW 255
17088: PUSH
17089: LD_OWVAR 2
17093: EQUAL
17094: PUSH
17095: LD_EXP 14
17099: NOT
17100: AND
17101: PUSH
17102: LD_EXP 13
17106: PPUSH
17107: CALL_OW 302
17111: NOT
17112: AND
17113: IFFALSE 17125
// firstVeh = vehicle ;
17115: LD_ADDR_EXP 13
17119: PUSH
17120: LD_VAR 0 1
17124: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
17125: LD_VAR 0 2
17129: PPUSH
17130: CALL_OW 255
17134: PUSH
17135: LD_OWVAR 2
17139: EQUAL
17140: PUSH
17141: LD_VAR 0 2
17145: PPUSH
17146: CALL_OW 302
17150: AND
17151: PUSH
17152: LD_EXP 17
17156: AND
17157: IFFALSE 17173
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
17159: LD_ADDR_EXP 18
17163: PUSH
17164: LD_EXP 18
17168: PUSH
17169: LD_INT 1
17171: PLUS
17172: ST_TO_ADDR
// end ;
17173: PPOPN 2
17175: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
17176: LD_EXP 19
17180: NOT
17181: PUSH
17182: LD_VAR 0 5
17186: PUSH
17187: LD_INT 1
17189: EQUAL
17190: AND
17191: IFFALSE 17207
// Dial_NewCrates ( x , y ) ;
17193: LD_VAR 0 2
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: CALL 9060 0 2
// end ;
17207: PPOPN 5
17209: END
// on Command ( com ) do var i , j , temp , order , destiny ;
17210: LD_INT 0
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 21
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PPUSH
17246: CALL_OW 69
17250: PUSH
17251: FOR_IN
17252: IFFALSE 17445
// if GetTaskList ( i ) > 0 then
17254: LD_VAR 0 2
17258: PPUSH
17259: CALL_OW 437
17263: PUSH
17264: LD_INT 0
17266: GREATER
17267: IFFALSE 17443
// for j = 1 to GetTaskList ( i ) do
17269: LD_ADDR_VAR 0 3
17273: PUSH
17274: DOUBLE
17275: LD_INT 1
17277: DEC
17278: ST_TO_ADDR
17279: LD_VAR 0 2
17283: PPUSH
17284: CALL_OW 437
17288: PUSH
17289: FOR_TO
17290: IFFALSE 17441
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
17292: LD_ADDR_VAR 0 4
17296: PUSH
17297: LD_VAR 0 2
17301: PPUSH
17302: CALL_OW 437
17306: PUSH
17307: LD_VAR 0 3
17311: ARRAY
17312: PUSH
17313: LD_INT 4
17315: ARRAY
17316: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
17317: LD_VAR 0 4
17321: PUSH
17322: LD_INT 71
17324: EQUAL
17325: PUSH
17326: LD_VAR 0 4
17330: PPUSH
17331: CALL_OW 255
17335: PUSH
17336: LD_INT 6
17338: EQUAL
17339: PUSH
17340: LD_VAR 0 2
17344: PPUSH
17345: CALL_OW 437
17349: PUSH
17350: LD_VAR 0 3
17354: ARRAY
17355: PUSH
17356: LD_INT 1
17358: ARRAY
17359: PUSH
17360: LD_STRING e
17362: EQUAL
17363: AND
17364: PUSH
17365: LD_VAR 0 4
17369: PPUSH
17370: CALL_OW 247
17374: PUSH
17375: LD_INT 2
17377: EQUAL
17378: AND
17379: OR
17380: IFFALSE 17393
// SetTaskList ( i , [ ] ) ;
17382: LD_VAR 0 2
17386: PPUSH
17387: EMPTY
17388: PPUSH
17389: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
17393: LD_VAR 0 4
17397: PUSH
17398: LD_INT 106
17400: EQUAL
17401: PUSH
17402: LD_VAR 0 2
17406: PPUSH
17407: CALL_OW 437
17411: PUSH
17412: LD_VAR 0 3
17416: ARRAY
17417: PUSH
17418: LD_INT 1
17420: ARRAY
17421: PUSH
17422: LD_STRING Y
17424: EQUAL
17425: AND
17426: IFFALSE 17439
// SetTaskList ( i , [ ] ) ;
17428: LD_VAR 0 2
17432: PPUSH
17433: EMPTY
17434: PPUSH
17435: CALL_OW 446
// end ;
17439: GO 17289
17441: POP
17442: POP
17443: GO 17251
17445: POP
17446: POP
// end ;
17447: PPOPN 6
17449: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 255
17459: PUSH
17460: LD_INT 1
17462: EQUAL
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 247
17473: PUSH
17474: LD_INT 1
17476: EQUAL
17477: AND
17478: IFFALSE 17536
// begin if unit in amLeftEngs then
17480: LD_VAR 0 1
17484: PUSH
17485: LD_EXP 85
17489: IN
17490: IFFALSE 17508
// amLeftEngs = amLeftEngs diff unit ;
17492: LD_ADDR_EXP 85
17496: PUSH
17497: LD_EXP 85
17501: PUSH
17502: LD_VAR 0 1
17506: DIFF
17507: ST_TO_ADDR
// if unit in amRightEngs then
17508: LD_VAR 0 1
17512: PUSH
17513: LD_EXP 86
17517: IN
17518: IFFALSE 17536
// amRightEngs = amRightEngs diff unit ;
17520: LD_ADDR_EXP 86
17524: PUSH
17525: LD_EXP 86
17529: PUSH
17530: LD_VAR 0 1
17534: DIFF
17535: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
17536: LD_VAR 0 1
17540: PPUSH
17541: CALL_OW 255
17545: PUSH
17546: LD_INT 6
17548: EQUAL
17549: PUSH
17550: LD_VAR 0 1
17554: PPUSH
17555: CALL_OW 247
17559: PUSH
17560: LD_INT 1
17562: EQUAL
17563: AND
17564: IFFALSE 17594
// if unit in belkovTeam then
17566: LD_VAR 0 1
17570: PUSH
17571: LD_EXP 72
17575: IN
17576: IFFALSE 17594
// belkovTeam = belkovTeam diff unit ;
17578: LD_ADDR_EXP 72
17582: PUSH
17583: LD_EXP 72
17587: PUSH
17588: LD_VAR 0 1
17592: DIFF
17593: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 255
17603: PUSH
17604: LD_INT 3
17606: EQUAL
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 247
17617: PUSH
17618: LD_INT 1
17620: EQUAL
17621: AND
17622: IFFALSE 17638
// lostComradesCounter = lostComradesCounter + 1 ;
17624: LD_ADDR_EXP 43
17628: PUSH
17629: LD_EXP 43
17633: PUSH
17634: LD_INT 1
17636: PLUS
17637: ST_TO_ADDR
// if unit = Burlak then
17638: LD_VAR 0 1
17642: PUSH
17643: LD_EXP 61
17647: EQUAL
17648: IFFALSE 17654
// BurlakIsDead ;
17650: CALL 18951 0 0
// if unit in platSoldiers then
17654: LD_VAR 0 1
17658: PUSH
17659: LD_EXP 76
17663: IN
17664: IFFALSE 17682
// platSoldiers = platSoldiers diff unit ;
17666: LD_ADDR_EXP 76
17670: PUSH
17671: LD_EXP 76
17675: PUSH
17676: LD_VAR 0 1
17680: DIFF
17681: ST_TO_ADDR
// end ;
17682: PPOPN 1
17684: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 255
17694: PUSH
17695: LD_INT 1
17697: EQUAL
17698: PUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 247
17708: PUSH
17709: LD_INT 3
17711: EQUAL
17712: AND
17713: IFFALSE 17771
// begin if unit in leftBunkers then
17715: LD_VAR 0 1
17719: PUSH
17720: LD_EXP 81
17724: IN
17725: IFFALSE 17743
// leftBunkers = leftBunkers diff unit ;
17727: LD_ADDR_EXP 81
17731: PUSH
17732: LD_EXP 81
17736: PUSH
17737: LD_VAR 0 1
17741: DIFF
17742: ST_TO_ADDR
// if unit in rightBunkers then
17743: LD_VAR 0 1
17747: PUSH
17748: LD_EXP 82
17752: IN
17753: IFFALSE 17771
// rightBunkers = rightBunkers diff unit ;
17755: LD_ADDR_EXP 82
17759: PUSH
17760: LD_EXP 82
17764: PUSH
17765: LD_VAR 0 1
17769: DIFF
17770: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 255
17780: PUSH
17781: LD_INT 1
17783: EQUAL
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 247
17794: PUSH
17795: LD_INT 1
17797: EQUAL
17798: AND
17799: IFFALSE 17829
// if unit in trapTeam then
17801: LD_VAR 0 1
17805: PUSH
17806: LD_EXP 80
17810: IN
17811: IFFALSE 17829
// trapTeam = trapTeam diff unit ;
17813: LD_ADDR_EXP 80
17817: PUSH
17818: LD_EXP 80
17822: PUSH
17823: LD_VAR 0 1
17827: DIFF
17828: ST_TO_ADDR
// end ;
17829: PPOPN 1
17831: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
17832: LD_VAR 0 3
17836: PUSH
17837: LD_INT 1
17839: EQUAL
17840: IFFALSE 17850
// captureBelkovVehicle = true ;
17842: LD_ADDR_EXP 38
17846: PUSH
17847: LD_INT 1
17849: ST_TO_ADDR
// if original_side = 6 then
17850: LD_VAR 0 3
17854: PUSH
17855: LD_INT 6
17857: EQUAL
17858: IFFALSE 17902
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
17860: LD_VAR 0 1
17864: PUSH
17865: LD_VAR 0 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PPUSH
17874: LD_INT 118
17876: PPUSH
17877: LD_INT 25
17879: PPUSH
17880: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
17884: LD_VAR 0 1
17888: PUSH
17889: LD_VAR 0 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PPUSH
17898: CALL_OW 139
// end ; end ;
17902: PPOPN 4
17904: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
17905: LD_VAR 0 1
17909: PUSH
17910: LD_INT 3
17912: EQUAL
17913: PUSH
17914: LD_VAR 0 2
17918: PUSH
17919: LD_INT 6
17921: EQUAL
17922: AND
17923: IFFALSE 17929
// AttackComrades ;
17925: CALL 18966 0 0
// end ;
17929: PPOPN 2
17931: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
17932: LD_VAR 0 2
17936: PUSH
17937: LD_INT 6
17939: EQUAL
17940: IFFALSE 17954
// SetSide ( building , 3 ) ;
17942: LD_VAR 0 1
17946: PPUSH
17947: LD_INT 3
17949: PPUSH
17950: CALL_OW 235
// end ; end_of_file
17954: PPOPN 3
17956: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
17957: LD_EXP 16
17961: PUSH
17962: LD_INT 8
17964: PPUSH
17965: LD_INT 22
17967: PUSH
17968: LD_INT 3
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 21
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 71
17993: PUSH
17994: LD_INT 0
17996: EQUAL
17997: AND
17998: IFFALSE 18099
18000: GO 18002
18002: DISABLE
// begin enable ;
18003: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18004: LD_EXP 36
18008: NOT
18009: PUSH
18010: LD_EXP 63
18014: PPUSH
18015: CALL_OW 302
18019: PUSH
18020: LD_EXP 67
18024: PPUSH
18025: CALL_OW 302
18029: OR
18030: AND
18031: IFFALSE 18078
// begin case Query ( QContMission ) of 1 :
18033: LD_STRING QContMission
18035: PPUSH
18036: CALL_OW 97
18040: PUSH
18041: LD_INT 1
18043: DOUBLE
18044: EQUAL
18045: IFTRUE 18049
18047: GO 18056
18049: POP
// begin FinishMission ;
18050: CALL 18100 0 0
// end ; 2 :
18054: GO 18076
18056: LD_INT 2
18058: DOUBLE
18059: EQUAL
18060: IFTRUE 18064
18062: GO 18075
18064: POP
// begin saveBelkovObjective = true ;
18065: LD_ADDR_EXP 36
18069: PUSH
18070: LD_INT 1
18072: ST_TO_ADDR
// end ; end ;
18073: GO 18076
18075: POP
// end else
18076: GO 18089
// if not belkovSaved then
18078: LD_EXP 37
18082: NOT
18083: IFFALSE 18089
// FinishMission ;
18085: CALL 18100 0 0
// if belkovSaved then
18089: LD_EXP 37
18093: IFFALSE 18099
// FinishMission ;
18095: CALL 18100 0 0
// end ;
18099: END
// function FinishMission ; begin
18100: LD_INT 0
18102: PPUSH
// SetRewards ;
18103: CALL 18124 0 0
// SavePlayerCharacters ;
18107: CALL 18414 0 0
// SaveGlobalVariables ;
18111: CALL 18631 0 0
// YouWin ;
18115: CALL_OW 103
// end ;
18119: LD_VAR 0 1
18123: RET
// function SetRewards ; begin
18124: LD_INT 0
18126: PPUSH
// case initiative of 1 :
18127: LD_EXP 42
18131: PUSH
18132: LD_INT 1
18134: DOUBLE
18135: EQUAL
18136: IFTRUE 18140
18138: GO 18153
18140: POP
// AddMedal ( Initiative , 1 ) ; 2 :
18141: LD_STRING Initiative
18143: PPUSH
18144: LD_INT 1
18146: PPUSH
18147: CALL_OW 101
18151: GO 18198
18153: LD_INT 2
18155: DOUBLE
18156: EQUAL
18157: IFTRUE 18161
18159: GO 18175
18161: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
18162: LD_STRING Initiative
18164: PPUSH
18165: LD_INT 2
18167: NEG
18168: PPUSH
18169: CALL_OW 101
18173: GO 18198
18175: LD_INT 3
18177: DOUBLE
18178: EQUAL
18179: IFTRUE 18183
18181: GO 18197
18183: POP
// AddMedal ( Initiative , - 1 ) ; end ;
18184: LD_STRING Initiative
18186: PPUSH
18187: LD_INT 1
18189: NEG
18190: PPUSH
18191: CALL_OW 101
18195: GO 18198
18197: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
18198: LD_EXP 37
18202: PUSH
18203: LD_EXP 63
18207: PPUSH
18208: CALL_OW 302
18212: PUSH
18213: LD_EXP 67
18217: PPUSH
18218: CALL_OW 302
18222: OR
18223: AND
18224: IFFALSE 18236
// AddMedal ( Belkov , 1 ) ;
18226: LD_STRING Belkov
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
18236: LD_EXP 37
18240: NOT
18241: PUSH
18242: LD_EXP 36
18246: NOT
18247: AND
18248: IFFALSE 18261
// AddMedal ( Belkov , - 1 ) ;
18250: LD_STRING Belkov
18252: PPUSH
18253: LD_INT 1
18255: NEG
18256: PPUSH
18257: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
18261: LD_EXP 37
18265: NOT
18266: PUSH
18267: LD_EXP 36
18271: AND
18272: IFFALSE 18285
// AddMedal ( Belkov , - 2 ) ;
18274: LD_STRING Belkov
18276: PPUSH
18277: LD_INT 2
18279: NEG
18280: PPUSH
18281: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
18285: LD_EXP 37
18289: PUSH
18290: LD_EXP 6
18294: PUSH
18295: LD_EXP 63
18299: PPUSH
18300: CALL_OW 301
18304: AND
18305: AND
18306: PUSH
18307: LD_EXP 6
18311: NOT
18312: PUSH
18313: LD_EXP 67
18317: PPUSH
18318: CALL_OW 301
18322: AND
18323: OR
18324: IFFALSE 18337
// AddMedal ( Belkov , - 2 ) ;
18326: LD_STRING Belkov
18328: PPUSH
18329: LD_INT 2
18331: NEG
18332: PPUSH
18333: CALL_OW 101
// if lostComradesCounter = 0 then
18337: LD_EXP 43
18341: PUSH
18342: LD_INT 0
18344: EQUAL
18345: IFFALSE 18359
// AddMedal ( NoLosses , 1 ) else
18347: LD_STRING NoLosses
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: CALL_OW 101
18357: GO 18369
// AddMedal ( NoLosses , 0 ) ;
18359: LD_STRING NoLosses
18361: PPUSH
18362: LD_INT 0
18364: PPUSH
18365: CALL_OW 101
// GiveMedals ( Main ) ;
18369: LD_STRING Main
18371: PPUSH
18372: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18376: LD_INT 22
18378: PUSH
18379: LD_INT 3
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 21
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PPUSH
18405: CALL_OW 43
// end ;
18409: LD_VAR 0 1
18413: RET
// function SavePlayerCharacters ; var othersYour ; begin
18414: LD_INT 0
18416: PPUSH
18417: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18418: LD_EXP 61
18422: PPUSH
18423: LD_STRING Burlak
18425: PPUSH
18426: LD_INT 3
18428: PPUSH
18429: CALL 4264 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
18433: LD_EXP 62
18437: PPUSH
18438: LD_STRING Gnyevko
18440: PPUSH
18441: LD_INT 3
18443: PPUSH
18444: CALL 4264 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
18448: LD_EXP 69
18452: PPUSH
18453: LD_STRING Kovalyuk
18455: PPUSH
18456: LD_INT 3
18458: PPUSH
18459: CALL 4264 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
18463: LD_EXP 63
18467: PPUSH
18468: LD_STRING Belkov
18470: PPUSH
18471: LD_INT 3
18473: PPUSH
18474: CALL 4264 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
18478: LD_EXP 67
18482: PPUSH
18483: LD_STRING Belkov2
18485: PPUSH
18486: LD_INT 3
18488: PPUSH
18489: CALL 4264 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
18493: LD_EXP 64
18497: PPUSH
18498: LD_STRING Kirilenkova
18500: PPUSH
18501: LD_INT 3
18503: PPUSH
18504: CALL 4264 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
18508: LD_ADDR_VAR 0 2
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_INT 3
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 21
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL_OW 69
18541: PUSH
18542: LD_EXP 61
18546: PUSH
18547: LD_EXP 62
18551: PUSH
18552: LD_EXP 63
18556: PUSH
18557: LD_EXP 67
18561: PUSH
18562: LD_EXP 69
18566: PUSH
18567: LD_EXP 64
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: DIFF
18580: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
18581: LD_VAR 0 2
18585: PPUSH
18586: LD_STRING other_survivors
18588: PPUSH
18589: LD_INT 3
18591: PPUSH
18592: CALL 4320 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
18596: LD_EXP 76
18600: PPUSH
18601: LD_STRING other_beria
18603: PPUSH
18604: LD_INT 6
18606: PPUSH
18607: CALL 4320 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
18611: LD_EXP 68
18615: PPUSH
18616: LD_STRING other_kirov
18618: PPUSH
18619: LD_INT 6
18621: PPUSH
18622: CALL 4320 0 3
// end ;
18626: LD_VAR 0 1
18630: RET
// function SaveGlobalVariables ; var vehicles ; begin
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_INT 3
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 21
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 50
18662: PUSH
18663: EMPTY
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if vehicles then
18676: LD_VAR 0 2
18680: IFFALSE 18694
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
18682: LD_VAR 0 2
18686: PPUSH
18687: LD_STRING 02_Vehicles_1
18689: PPUSH
18690: CALL 5314 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
18694: LD_INT 8
18696: PPUSH
18697: LD_INT 21
18699: PUSH
18700: LD_INT 3
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: EMPTY
18708: LIST
18709: PPUSH
18710: CALL_OW 70
18714: PPUSH
18715: LD_STRING 02_BeriaBase_2
18717: PPUSH
18718: CALL 5457 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
18722: LD_INT 9
18724: PPUSH
18725: LD_INT 22
18727: PUSH
18728: LD_INT 6
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 21
18737: PUSH
18738: LD_INT 3
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 70
18753: PPUSH
18754: LD_STRING 02_KirovBase_3
18756: PPUSH
18757: CALL 5457 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
18761: LD_INT 22
18763: PUSH
18764: LD_INT 3
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 21
18773: PUSH
18774: LD_INT 3
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 50
18783: PUSH
18784: EMPTY
18785: LIST
18786: PUSH
18787: LD_INT 3
18789: PUSH
18790: LD_INT 95
18792: PUSH
18793: LD_INT 8
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: PPUSH
18815: LD_STRING 02_OtherBuildings_4
18817: PPUSH
18818: CALL 5457 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
18822: LD_INT 22
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 50
18844: PUSH
18845: EMPTY
18846: LIST
18847: PUSH
18848: LD_INT 23
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PPUSH
18864: CALL_OW 69
18868: PPUSH
18869: LD_STRING 02_AmericanBuildings_5
18871: PPUSH
18872: CALL 5457 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
18876: LD_EXP 4
18880: PPUSH
18881: LD_STRING 02_MeetBelkovBrother_6
18883: PPUSH
18884: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
18888: LD_INT 106
18890: PPUSH
18891: CALL_OW 274
18895: PPUSH
18896: LD_INT 1
18898: PPUSH
18899: CALL_OW 275
18903: PPUSH
18904: LD_STRING 02_BeriaResourceCrates_7
18906: PPUSH
18907: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
18911: LD_INT 106
18913: PPUSH
18914: CALL_OW 274
18918: PPUSH
18919: LD_INT 2
18921: PPUSH
18922: CALL_OW 275
18926: PPUSH
18927: LD_STRING 02_BeriaResourceOil_8
18929: PPUSH
18930: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
18934: LD_EXP 5
18938: PPUSH
18939: LD_STRING 02_PlatonovOpinion_9
18941: PPUSH
18942: CALL_OW 39
// end ; end_of_file
18946: LD_VAR 0 1
18950: RET
// export function BurlakIsDead ; begin
18951: LD_INT 0
18953: PPUSH
// YouLost ( Burlak ) ;
18954: LD_STRING Burlak
18956: PPUSH
18957: CALL_OW 104
// end ;
18961: LD_VAR 0 1
18965: RET
// export function AttackComrades ; begin
18966: LD_INT 0
18968: PPUSH
// YouLost ( SelfAttack ) ;
18969: LD_STRING SelfAttack
18971: PPUSH
18972: CALL_OW 104
// end ; end_of_file
18976: LD_VAR 0 1
18980: RET
// every 0 0$1 do var engs ;
18981: GO 18983
18983: DISABLE
18984: LD_INT 0
18986: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
18987: LD_ADDR_VAR 0 1
18991: PUSH
18992: LD_EXP 68
18996: PPUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PPUSH
19007: CALL_OW 72
19011: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
19012: LD_VAR 0 1
19016: PPUSH
19017: CALL_OW 122
// wait ( 0 0$1 ) ;
19021: LD_INT 35
19023: PPUSH
19024: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
19028: LD_VAR 0 1
19032: PPUSH
19033: LD_INT 31
19035: PPUSH
19036: LD_INT 146
19038: PPUSH
19039: LD_INT 107
19041: PPUSH
19042: LD_INT 1
19044: PPUSH
19045: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
19049: LD_VAR 0 1
19053: PPUSH
19054: LD_INT 31
19056: PPUSH
19057: LD_INT 176
19059: PPUSH
19060: LD_INT 123
19062: PPUSH
19063: LD_INT 5
19065: PPUSH
19066: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
19070: LD_VAR 0 1
19074: PPUSH
19075: LD_INT 31
19077: PPUSH
19078: LD_INT 170
19080: PPUSH
19081: LD_INT 102
19083: PPUSH
19084: LD_INT 4
19086: PPUSH
19087: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
19091: LD_VAR 0 1
19095: PPUSH
19096: LD_INT 31
19098: PPUSH
19099: LD_INT 173
19101: PPUSH
19102: LD_INT 105
19104: PPUSH
19105: LD_INT 4
19107: PPUSH
19108: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
19112: LD_VAR 0 1
19116: PPUSH
19117: LD_INT 71
19119: PPUSH
19120: CALL_OW 180
// end ;
19124: PPOPN 1
19126: END
// every 0 0$1 trigger activateAMAI do
19127: LD_EXP 27
19131: IFFALSE 19155
19133: GO 19135
19135: DISABLE
// begin enable ;
19136: ENABLE
// RepairDamageLeftBunkers ;
19137: CALL 19156 0 0
// if Difficulty = 3 then
19141: LD_OWVAR 67
19145: PUSH
19146: LD_INT 3
19148: EQUAL
19149: IFFALSE 19155
// RepairDamageRightBunkers ;
19151: CALL 19364 0 0
// end ;
19155: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
19156: LD_INT 0
19158: PPUSH
19159: PPUSH
19160: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
19161: LD_EXP 85
19165: NOT
19166: PUSH
19167: LD_INT 17
19169: PPUSH
19170: LD_INT 22
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 21
19182: PUSH
19183: LD_INT 3
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 30
19192: PUSH
19193: LD_INT 31
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 3
19202: PUSH
19203: LD_INT 24
19205: PUSH
19206: LD_INT 1000
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 70
19227: PUSH
19228: LD_INT 0
19230: EQUAL
19231: OR
19232: IFFALSE 19236
// exit ;
19234: GO 19359
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
19236: LD_EXP 85
19240: PPUSH
19241: LD_INT 3
19243: PUSH
19244: LD_INT 60
19246: PUSH
19247: EMPTY
19248: LIST
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PPUSH
19254: CALL_OW 72
19258: PPUSH
19259: CALL_OW 122
// for bunker in leftBunkers do
19263: LD_ADDR_VAR 0 3
19267: PUSH
19268: LD_EXP 81
19272: PUSH
19273: FOR_IN
19274: IFFALSE 19325
// if GetLives ( bunker ) < 1000 then
19276: LD_VAR 0 3
19280: PPUSH
19281: CALL_OW 256
19285: PUSH
19286: LD_INT 1000
19288: LESS
19289: IFFALSE 19323
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
19291: LD_EXP 85
19295: PPUSH
19296: LD_INT 3
19298: PUSH
19299: LD_INT 60
19301: PUSH
19302: EMPTY
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 72
19313: PPUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 190
19323: GO 19273
19325: POP
19326: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
19327: LD_EXP 85
19331: PPUSH
19332: LD_INT 3
19334: PUSH
19335: LD_INT 60
19337: PUSH
19338: EMPTY
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 72
19349: PPUSH
19350: LD_EXP 83
19354: PPUSH
19355: CALL_OW 180
// end ;
19359: LD_VAR 0 1
19363: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
19364: LD_INT 0
19366: PPUSH
19367: PPUSH
19368: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
19369: LD_EXP 86
19373: NOT
19374: PUSH
19375: LD_INT 16
19377: PPUSH
19378: LD_INT 22
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 21
19390: PUSH
19391: LD_INT 3
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 30
19400: PUSH
19401: LD_INT 31
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 24
19413: PUSH
19414: LD_INT 1000
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: PPUSH
19431: CALL_OW 70
19435: PUSH
19436: LD_INT 0
19438: EQUAL
19439: OR
19440: IFFALSE 19444
// exit ;
19442: GO 19567
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
19444: LD_EXP 86
19448: PPUSH
19449: LD_INT 3
19451: PUSH
19452: LD_INT 60
19454: PUSH
19455: EMPTY
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PPUSH
19462: CALL_OW 72
19466: PPUSH
19467: CALL_OW 122
// for bunker in rightBunkers do
19471: LD_ADDR_VAR 0 3
19475: PUSH
19476: LD_EXP 82
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19533
// if GetLives ( bunker ) < 1000 then
19484: LD_VAR 0 3
19488: PPUSH
19489: CALL_OW 256
19493: PUSH
19494: LD_INT 1000
19496: LESS
19497: IFFALSE 19531
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
19499: LD_EXP 86
19503: PPUSH
19504: LD_INT 3
19506: PUSH
19507: LD_INT 60
19509: PUSH
19510: EMPTY
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 72
19521: PPUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 190
19531: GO 19481
19533: POP
19534: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
19535: LD_EXP 86
19539: PPUSH
19540: LD_INT 3
19542: PUSH
19543: LD_INT 60
19545: PUSH
19546: EMPTY
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 72
19557: PPUSH
19558: LD_EXP 84
19562: PPUSH
19563: CALL_OW 180
// end ;
19567: LD_VAR 0 1
19571: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
19572: LD_EXP 28
19576: PUSH
19577: LD_EXP 72
19581: AND
19582: IFFALSE 19719
19584: GO 19586
19586: DISABLE
19587: LD_INT 0
19589: PPUSH
19590: PPUSH
19591: PPUSH
// begin enable ;
19592: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_EXP 72
19602: PPUSH
19603: LD_INT 25
19605: PUSH
19606: LD_INT 4
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 72
19617: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: LD_EXP 72
19627: PPUSH
19628: LD_INT 3
19630: PUSH
19631: LD_INT 24
19633: PUSH
19634: LD_INT 650
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL_OW 72
19649: ST_TO_ADDR
// if not damaged and med then
19650: LD_VAR 0 3
19654: NOT
19655: PUSH
19656: LD_VAR 0 2
19660: AND
19661: IFFALSE 19680
// ComMoveXY ( med , 83 , 17 ) else
19663: LD_VAR 0 2
19667: PPUSH
19668: LD_INT 83
19670: PPUSH
19671: LD_INT 17
19673: PPUSH
19674: CALL_OW 111
19678: GO 19719
// if med then
19680: LD_VAR 0 2
19684: IFFALSE 19719
// begin ComMoveXY ( damaged , 83 , 17 ) ;
19686: LD_VAR 0 3
19690: PPUSH
19691: LD_INT 83
19693: PPUSH
19694: LD_INT 17
19696: PPUSH
19697: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
19701: LD_VAR 0 2
19705: PPUSH
19706: LD_VAR 0 3
19710: PUSH
19711: LD_INT 1
19713: ARRAY
19714: PPUSH
19715: CALL_OW 128
// end ; end ;
19719: PPOPN 3
19721: END
