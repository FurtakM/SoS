// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 349 0 0
// PrepareRussian ;
  24: CALL 1064 0 0
// PrepareNature ;
  28: CALL 14343 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// canExitBase = true ;
 203: LD_ADDR_EXP 19
 207: PUSH
 208: LD_INT 1
 210: ST_TO_ADDR
// canExploreMap = false ;
 211: LD_ADDR_EXP 20
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// sawLeftBunker = false ;
 219: LD_ADDR_EXP 27
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawRightBunker = false ;
 227: LD_ADDR_EXP 28
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// dialogLoopBlocker = false ;
 235: LD_ADDR_EXP 31
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 243: LD_ADDR_EXP 29
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 251: LD_ADDR_EXP 30
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// playerGetSupport = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// captureBelkovVehicle = false ;
 267: LD_ADDR_EXP 36
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// saveBelkovObjective = false ;
 275: LD_ADDR_EXP 34
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// medalForGetSupport = true ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 1
 290: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 291: LD_ADDR_EXP 37
 295: PUSH
 296: LD_INT 1
 298: NEG
 299: ST_TO_ADDR
// initiative = 0 ;
 300: LD_ADDR_EXP 40
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// lostComradesCounter = 0 ;
 308: LD_ADDR_EXP 41
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// northMapExplored = false ;
 316: LD_ADDR_EXP 39
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// activateAMAI = false ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// MissionIntro ;
 340: CALL 6008 0 0
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function InitMapConfig ; begin
 349: LD_INT 0
 351: PPUSH
// BaseMapConfig ;
 352: CALL 365 0 0
// MissionMapConfig ;
 356: CALL 451 0 0
// end ;
 360: LD_VAR 0 1
 364: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 365: LD_INT 0
 367: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 368: LD_ADDR_EXP 42
 372: PUSH
 373: LD_INT 2
 375: PUSH
 376: LD_INT 4
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 391: LD_ADDR_EXP 43
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 2
 401: PUSH
 402: LD_INT 2
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: ST_TO_ADDR
// animalsAgression = 0 ;
 414: LD_ADDR_EXP 44
 418: PUSH
 419: LD_INT 0
 421: ST_TO_ADDR
// debugMode = 0 ;
 422: LD_ADDR_EXP 47
 426: PUSH
 427: LD_INT 0
 429: ST_TO_ADDR
// missionPrefix = 02_ ;
 430: LD_ADDR_EXP 45
 434: PUSH
 435: LD_STRING 02_
 437: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 438: LD_ADDR_EXP 46
 442: PUSH
 443: LD_STRING 01_
 445: ST_TO_ADDR
// end ;
 446: LD_VAR 0 1
 450: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 451: LD_INT 0
 453: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 454: LD_ADDR_EXP 49
 458: PUSH
 459: LD_INT 162
 461: PUSH
 462: LD_INT 107
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 162
 471: PUSH
 472: LD_INT 108
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 163
 481: PUSH
 482: LD_INT 109
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 163
 491: PUSH
 492: LD_INT 110
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 162
 501: PUSH
 502: LD_INT 109
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 161
 511: PUSH
 512: LD_INT 107
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 161
 521: PUSH
 522: LD_INT 106
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 538: LD_ADDR_EXP 50
 542: PUSH
 543: LD_INT 113
 545: PUSH
 546: LD_INT 96
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: LD_INT 114
 555: PUSH
 556: LD_INT 97
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 114
 565: PUSH
 566: LD_INT 98
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 578: LD_ADDR_EXP 48
 582: PUSH
 583: LD_INT 10
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: ST_TO_ADDR
// labCratesRefund = 20 ;
 601: LD_ADDR_EXP 51
 605: PUSH
 606: LD_INT 20
 608: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 609: LD_ADDR_EXP 52
 613: PUSH
 614: LD_INT 40
 616: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 617: LD_ADDR_EXP 53
 621: PUSH
 622: LD_INT 20
 624: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 30
 632: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 10
 640: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 1
 648: PUSH
 649: LD_INT 2
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: PUSH
 660: LD_OWVAR 67
 664: ARRAY
 665: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 4 ] ] [ Difficulty ] ;
 666: LD_ADDR_EXP 57
 670: PUSH
 671: LD_INT 2
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 3
 683: PUSH
 684: LD_INT 3
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 4
 693: PUSH
 694: LD_INT 4
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_OWVAR 67
 710: ARRAY
 711: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 712: LD_ADDR_EXP 58
 716: PUSH
 717: LD_INT 21000
 719: PUSH
 720: LD_INT 16800
 722: PUSH
 723: LD_INT 12600
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_OWVAR 67
 735: ARRAY
 736: ST_TO_ADDR
// end ;
 737: LD_VAR 0 1
 741: RET
// every 0 0$1 trigger debugMode do var i ;
 742: LD_EXP 47
 746: IFFALSE 1061
 748: GO 750
 750: DISABLE
 751: LD_INT 0
 753: PPUSH
// begin enable ;
 754: ENABLE
// FogOff ( your_side ) ;
 755: LD_OWVAR 2
 759: PPUSH
 760: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 764: LD_ADDR_VAR 0 1
 768: PUSH
 769: LD_INT 22
 771: PUSH
 772: LD_OWVAR 2
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 21
 796: PUSH
 797: LD_INT 2
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: PUSH
 818: FOR_IN
 819: IFFALSE 835
// SetLives ( i , 1000 ) ;
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 1000
 828: PPUSH
 829: CALL_OW 234
 833: GO 818
 835: POP
 836: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 837: LD_ADDR_VAR 0 1
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_OWVAR 2
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 1
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PPUSH
 868: CALL_OW 69
 872: PUSH
 873: FOR_IN
 874: IFFALSE 938
// begin SetSkill ( i , skill_combat , 10 ) ;
 876: LD_VAR 0 1
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 10
 886: PPUSH
 887: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 891: LD_VAR 0 1
 895: PPUSH
 896: LD_INT 2
 898: PPUSH
 899: LD_INT 10
 901: PPUSH
 902: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 906: LD_VAR 0 1
 910: PPUSH
 911: LD_INT 3
 913: PPUSH
 914: LD_INT 10
 916: PPUSH
 917: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 921: LD_VAR 0 1
 925: PPUSH
 926: LD_INT 4
 928: PPUSH
 929: LD_INT 10
 931: PPUSH
 932: CALL_OW 237
// end ;
 936: GO 873
 938: POP
 939: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 940: LD_ADDR_VAR 0 1
 944: PUSH
 945: LD_INT 22
 947: PUSH
 948: LD_OWVAR 2
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 30
 962: PUSH
 963: LD_INT 0
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 30
 972: PUSH
 973: LD_INT 1
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PPUSH
 989: CALL_OW 69
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1059
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 274
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_INT 9999
1012: PPUSH
1013: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1017: LD_VAR 0 1
1021: PPUSH
1022: CALL_OW 274
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 9999
1032: PPUSH
1033: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 274
1046: PPUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 9999
1052: PPUSH
1053: CALL_OW 277
// end ;
1057: GO 994
1059: POP
1060: POP
// end ; end_of_file
1061: PPOPN 1
1063: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1064: LD_INT 0
1066: PPUSH
// PrepareCharactersFromPreviousMission ;
1067: CALL 1399 0 0
// PrepareKirovBase ;
1071: CALL 1594 0 0
// PrepareBeriaBase ;
1075: CALL 2250 0 0
// end ;
1079: LD_VAR 0 1
1083: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1084: LD_INT 0
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
// belkovTeam = [ ] ;
1090: LD_ADDR_EXP 70
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// uc_side = 6 ;
1097: LD_ADDR_OWVAR 20
1101: PUSH
1102: LD_INT 6
1104: ST_TO_ADDR
// uc_nation = nation_russian ;
1105: LD_ADDR_OWVAR 21
1109: PUSH
1110: LD_INT 3
1112: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1113: LD_ADDR_OWVAR 37
1117: PUSH
1118: LD_EXP 72
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1127: LD_ADDR_OWVAR 39
1131: PUSH
1132: LD_EXP 72
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1141: LD_ADDR_OWVAR 38
1145: PUSH
1146: LD_EXP 72
1150: PUSH
1151: LD_INT 3
1153: ARRAY
1154: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1155: LD_ADDR_OWVAR 40
1159: PUSH
1160: LD_EXP 72
1164: PUSH
1165: LD_INT 4
1167: ARRAY
1168: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1169: LD_ADDR_OWVAR 41
1173: PUSH
1174: LD_EXP 72
1178: PUSH
1179: LD_INT 5
1181: ARRAY
1182: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1183: LD_ADDR_EXP 69
1187: PUSH
1188: CALL_OW 45
1192: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1193: LD_EXP 69
1197: PPUSH
1198: LD_INT 3
1200: PPUSH
1201: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1205: LD_EXP 69
1209: PPUSH
1210: LD_INT 11
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1220: LD_ADDR_EXP 70
1224: PUSH
1225: LD_EXP 70
1229: PUSH
1230: LD_EXP 69
1234: ADD
1235: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1236: LD_STRING 02_TmpBelkov
1238: PPUSH
1239: CALL_OW 28
1243: IFFALSE 1290
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1245: LD_ADDR_EXP 61
1249: PUSH
1250: LD_STRING 02_TmpBelkov
1252: PPUSH
1253: CALL_OW 34
1257: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1258: LD_EXP 61
1262: PPUSH
1263: LD_EXP 69
1267: PPUSH
1268: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1272: LD_ADDR_EXP 70
1276: PUSH
1277: LD_EXP 70
1281: PUSH
1282: LD_EXP 61
1286: ADD
1287: ST_TO_ADDR
// end else
1288: GO 1333
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1290: LD_ADDR_EXP 65
1294: PUSH
1295: LD_STRING 02_TmpBelkov2
1297: PPUSH
1298: CALL_OW 34
1302: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1303: LD_EXP 65
1307: PPUSH
1308: LD_EXP 69
1312: PPUSH
1313: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1317: LD_ADDR_EXP 70
1321: PUSH
1322: LD_EXP 70
1326: PUSH
1327: LD_EXP 65
1331: ADD
1332: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1333: LD_ADDR_VAR 0 3
1337: PUSH
1338: LD_STRING 02_TmpBelkovTeam
1340: PPUSH
1341: CALL_OW 31
1345: ST_TO_ADDR
// for unit in others do
1346: LD_ADDR_VAR 0 2
1350: PUSH
1351: LD_VAR 0 3
1355: PUSH
1356: FOR_IN
1357: IFFALSE 1392
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1359: LD_VAR 0 2
1363: PPUSH
1364: LD_INT 11
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1374: LD_ADDR_EXP 70
1378: PUSH
1379: LD_EXP 70
1383: PUSH
1384: LD_VAR 0 2
1388: ADD
1389: ST_TO_ADDR
// end ;
1390: GO 1356
1392: POP
1393: POP
// end ;
1394: LD_VAR 0 1
1398: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1399: LD_INT 0
1401: PPUSH
1402: PPUSH
// uc_side = 3 ;
1403: LD_ADDR_OWVAR 20
1407: PUSH
1408: LD_INT 3
1410: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1411: LD_ADDR_EXP 59
1415: PUSH
1416: LD_STRING Burlak
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: CALL 3560 0 2
1426: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1427: LD_ADDR_EXP 60
1431: PUSH
1432: LD_STRING Gnyevko
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL 3560 0 2
1442: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1443: LD_ADDR_EXP 61
1447: PUSH
1448: LD_STRING Belkov
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL 3560 0 2
1458: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1459: LD_ADDR_EXP 62
1463: PUSH
1464: LD_STRING Kirilenkova
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 3560 0 2
1474: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1475: LD_EXP 59
1479: PPUSH
1480: LD_INT 5
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1490: LD_EXP 60
1494: PPUSH
1495: LD_INT 3
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1505: LD_EXP 61
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 0
1515: PPUSH
1516: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1520: LD_EXP 62
1524: PPUSH
1525: LD_INT 3
1527: PPUSH
1528: LD_INT 0
1530: PPUSH
1531: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1535: LD_EXP 59
1539: PPUSH
1540: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1544: LD_ADDR_EXP 63
1548: PUSH
1549: LD_STRING 01_other_survivors
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// for i in other_survivors do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 63
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1587
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1570: LD_VAR 0 2
1574: PPUSH
1575: LD_INT 3
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
1585: GO 1567
1587: POP
1588: POP
// end ;
1589: LD_VAR 0 1
1593: RET
// function PrepareKirovBase ; var i , un ; begin
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
1598: PPUSH
// SetBName ( kirov , kirov ) ;
1599: LD_INT 71
1601: PPUSH
1602: LD_STRING kirov
1604: PPUSH
1605: CALL_OW 500
// uc_side = 6 ;
1609: LD_ADDR_OWVAR 20
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// uc_nation = 3 ;
1617: LD_ADDR_OWVAR 21
1621: PUSH
1622: LD_INT 3
1624: ST_TO_ADDR
// hc_gallery =  ;
1625: LD_ADDR_OWVAR 33
1629: PUSH
1630: LD_STRING 
1632: ST_TO_ADDR
// hc_name =  ;
1633: LD_ADDR_OWVAR 26
1637: PUSH
1638: LD_STRING 
1640: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1641: LD_ADDR_EXP 64
1645: PUSH
1646: LD_STRING Kurin
1648: PPUSH
1649: LD_INT 0
1651: PPUSH
1652: CALL 3560 0 2
1656: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1657: LD_ADDR_EXP 67
1661: PUSH
1662: LD_STRING Kovalyuk
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL 3560 0 2
1672: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1673: LD_ADDR_EXP 65
1677: PUSH
1678: LD_STRING Belkov2
1680: PPUSH
1681: LD_INT 0
1683: PPUSH
1684: CALL 3560 0 2
1688: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1689: LD_EXP 64
1693: PPUSH
1694: LD_INT 4
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1704: LD_EXP 67
1708: PPUSH
1709: LD_INT 161
1711: PPUSH
1712: LD_INT 108
1714: PPUSH
1715: LD_INT 6
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 50
// ComHold ( Kurin ) ;
1725: LD_EXP 64
1729: PPUSH
1730: CALL_OW 140
// otherKirovUnits = [ ] ;
1734: LD_ADDR_EXP 66
1738: PUSH
1739: EMPTY
1740: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1741: LD_ADDR_EXP 48
1745: PUSH
1746: LD_EXP 48
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: LD_EXP 48
1758: PUSH
1759: LD_INT 1
1761: ARRAY
1762: PUSH
1763: LD_EXP 63
1767: PPUSH
1768: LD_INT 25
1770: PUSH
1771: LD_INT 1
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 72
1782: MINUS
1783: PPUSH
1784: CALL_OW 1
1788: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1789: LD_ADDR_VAR 0 2
1793: PUSH
1794: DOUBLE
1795: LD_INT 1
1797: DEC
1798: ST_TO_ADDR
1799: LD_EXP 48
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PUSH
1808: FOR_TO
1809: IFFALSE 1872
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1811: LD_INT 0
1813: PPUSH
1814: LD_INT 1
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: CALL_OW 12
1827: PPUSH
1828: CALL_OW 380
// un = CreateHuman ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: CALL_OW 44
1841: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1842: LD_ADDR_EXP 66
1846: PUSH
1847: LD_EXP 66
1851: PUSH
1852: LD_VAR 0 3
1856: ADD
1857: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
1858: LD_VAR 0 3
1862: PPUSH
1863: LD_INT 209
1865: PPUSH
1866: CALL_OW 52
// end ;
1870: GO 1808
1872: POP
1873: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1874: LD_INT 0
1876: PPUSH
1877: LD_INT 1
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_INT 3
1885: PPUSH
1886: CALL_OW 12
1890: PPUSH
1891: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
1895: CALL_OW 44
1899: PPUSH
1900: LD_INT 209
1902: PPUSH
1903: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_EXP 48
1921: PUSH
1922: LD_INT 2
1924: ARRAY
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1990
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 2
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: LD_INT 3
1940: PPUSH
1941: CALL_OW 12
1945: PPUSH
1946: CALL_OW 380
// un = CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1960: LD_ADDR_EXP 66
1964: PUSH
1965: LD_EXP 66
1969: PUSH
1970: LD_VAR 0 3
1974: ADD
1975: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1976: LD_VAR 0 3
1980: PPUSH
1981: LD_INT 71
1983: PPUSH
1984: CALL_OW 52
// end ;
1988: GO 1926
1990: POP
1991: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: DOUBLE
1998: LD_INT 1
2000: DEC
2001: ST_TO_ADDR
2002: LD_EXP 48
2006: PUSH
2007: LD_INT 3
2009: ARRAY
2010: PUSH
2011: FOR_TO
2012: IFFALSE 2075
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2014: LD_INT 0
2016: PPUSH
2017: LD_INT 3
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 3
2025: PPUSH
2026: CALL_OW 12
2030: PPUSH
2031: CALL_OW 380
// un = CreateHuman ;
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: CALL_OW 44
2044: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2045: LD_ADDR_EXP 66
2049: PUSH
2050: LD_EXP 66
2054: PUSH
2055: LD_VAR 0 3
2059: ADD
2060: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2061: LD_VAR 0 3
2065: PPUSH
2066: LD_INT 71
2068: PPUSH
2069: CALL_OW 52
// end ;
2073: GO 2011
2075: POP
2076: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_EXP 48
2091: PUSH
2092: LD_INT 4
2094: ARRAY
2095: PUSH
2096: FOR_TO
2097: IFFALSE 2160
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2099: LD_INT 0
2101: PPUSH
2102: LD_INT 4
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 3
2110: PPUSH
2111: CALL_OW 12
2115: PPUSH
2116: CALL_OW 380
// un = CreateHuman ;
2120: LD_ADDR_VAR 0 3
2124: PUSH
2125: CALL_OW 44
2129: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2130: LD_ADDR_EXP 66
2134: PUSH
2135: LD_EXP 66
2139: PUSH
2140: LD_VAR 0 3
2144: ADD
2145: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2146: LD_VAR 0 3
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 2096
2160: POP
2161: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2162: LD_INT 6
2164: PPUSH
2165: LD_INT 83
2167: PPUSH
2168: LD_INT 3
2170: PPUSH
2171: CALL 4375 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2175: LD_STRING 01_Gnyevko
2177: PPUSH
2178: CALL_OW 28
2182: NOT
2183: IFFALSE 2226
// begin PrepareMechanic ( sex_male , 3 ) ;
2185: LD_INT 1
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL_OW 383
// randomMech = CreateHuman ;
2195: LD_ADDR_EXP 68
2199: PUSH
2200: CALL_OW 44
2204: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2205: LD_EXP 68
2209: PPUSH
2210: LD_INT 161
2212: PPUSH
2213: LD_INT 108
2215: PPUSH
2216: LD_INT 6
2218: PPUSH
2219: LD_INT 0
2221: PPUSH
2222: CALL_OW 50
// end ; if not belkovReturn then
2226: LD_EXP 6
2230: NOT
2231: IFFALSE 2245
// PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2233: LD_EXP 65
2237: PPUSH
2238: LD_INT 95
2240: PPUSH
2241: CALL_OW 52
// end ;
2245: LD_VAR 0 1
2249: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// SetBName ( beria , beria ) ;
2257: LD_INT 106
2259: PPUSH
2260: LD_STRING beria
2262: PPUSH
2263: CALL_OW 500
// uc_side = 6 ;
2267: LD_ADDR_OWVAR 20
2271: PUSH
2272: LD_INT 6
2274: ST_TO_ADDR
// uc_nation = 3 ;
2275: LD_ADDR_OWVAR 21
2279: PUSH
2280: LD_INT 3
2282: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2283: LD_ADDR_EXP 73
2287: PUSH
2288: LD_STRING Platonov
2290: PPUSH
2291: LD_INT 0
2293: PPUSH
2294: CALL 3560 0 2
2298: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2299: LD_EXP 73
2303: PPUSH
2304: LD_INT 112
2306: PPUSH
2307: LD_INT 97
2309: PPUSH
2310: LD_INT 0
2312: PPUSH
2313: CALL_OW 48
// ComHold ( Platonov ) ;
2317: LD_EXP 73
2321: PPUSH
2322: CALL_OW 140
// platSoldiers = [ ] ;
2326: LD_ADDR_EXP 74
2330: PUSH
2331: EMPTY
2332: ST_TO_ADDR
// unitsTemp = [ ] ;
2333: LD_ADDR_VAR 0 4
2337: PUSH
2338: EMPTY
2339: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2340: LD_ADDR_EXP 75
2344: PUSH
2345: LD_STRING Kuklajs
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL 3560 0 2
2355: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2356: LD_ADDR_EXP 74
2360: PUSH
2361: LD_EXP 74
2365: PUSH
2366: LD_EXP 75
2370: ADD
2371: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2372: LD_EXP 75
2376: PPUSH
2377: LD_INT 110
2379: PPUSH
2380: LD_INT 97
2382: PPUSH
2383: LD_INT 6
2385: PPUSH
2386: LD_INT 0
2388: PPUSH
2389: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2393: LD_ADDR_EXP 76
2397: PUSH
2398: LD_STRING Benko
2400: PPUSH
2401: LD_INT 0
2403: PPUSH
2404: CALL 3560 0 2
2408: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2409: LD_ADDR_EXP 74
2413: PUSH
2414: LD_EXP 74
2418: PUSH
2419: LD_EXP 76
2423: ADD
2424: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: LD_VAR 0 4
2434: PUSH
2435: LD_EXP 76
2439: ADD
2440: ST_TO_ADDR
// for i := 1 to 2 do
2441: LD_ADDR_VAR 0 2
2445: PUSH
2446: DOUBLE
2447: LD_INT 1
2449: DEC
2450: ST_TO_ADDR
2451: LD_INT 2
2453: PUSH
2454: FOR_TO
2455: IFFALSE 2522
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2457: LD_INT 0
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 1
2465: PPUSH
2466: LD_INT 3
2468: PPUSH
2469: CALL_OW 12
2473: PPUSH
2474: CALL_OW 380
// un = CreateHuman ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2488: LD_ADDR_EXP 74
2492: PUSH
2493: LD_EXP 74
2497: PUSH
2498: LD_VAR 0 3
2502: ADD
2503: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2504: LD_ADDR_VAR 0 4
2508: PUSH
2509: LD_VAR 0 4
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// end ;
2520: GO 2454
2522: POP
2523: POP
// for i := 1 to unitsTemp do
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: DOUBLE
2530: LD_INT 1
2532: DEC
2533: ST_TO_ADDR
2534: LD_VAR 0 4
2538: PUSH
2539: FOR_TO
2540: IFFALSE 2628
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2542: LD_ADDR_VAR 0 5
2546: PUSH
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 22
2552: PUSH
2553: LD_INT 6
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 31
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 70
2578: PUSH
2579: LD_VAR 0 2
2583: ARRAY
2584: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2585: LD_VAR 0 4
2589: PUSH
2590: LD_VAR 0 2
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 5
2600: PPUSH
2601: CALL_OW 250
2605: PPUSH
2606: LD_VAR 0 5
2610: PPUSH
2611: CALL_OW 251
2615: PPUSH
2616: LD_INT 2
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL_OW 50
// end ;
2626: GO 2539
2628: POP
2629: POP
// end ; end_of_file
2630: LD_VAR 0 1
2634: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2635: LD_INT 0
2637: PPUSH
// PrepareTrap ;
2638: CALL 2651 0 0
// PrepareBunkiers ;
2642: CALL 3015 0 0
// end ;
2646: LD_VAR 0 1
2650: RET
// function PrepareTrap ; var i , un ; begin
2651: LD_INT 0
2653: PPUSH
2654: PPUSH
2655: PPUSH
// trapTeam = [ ] ;
2656: LD_ADDR_EXP 78
2660: PUSH
2661: EMPTY
2662: ST_TO_ADDR
// uc_nation = 1 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// uc_side = 1 ;
2671: LD_ADDR_OWVAR 20
2675: PUSH
2676: LD_INT 1
2678: ST_TO_ADDR
// hc_gallery =  ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING 
2686: ST_TO_ADDR
// hc_name = profile_name ;
2687: LD_ADDR_OWVAR 26
2691: PUSH
2692: LD_OWVAR 78
2696: ST_TO_ADDR
// hc_importance = 100 ;
2697: LD_ADDR_OWVAR 32
2701: PUSH
2702: LD_INT 100
2704: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2705: LD_INT 1
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_EXP 56
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: PPUSH
2720: CALL_OW 380
// trapCommander = CreateHuman ;
2724: LD_ADDR_EXP 77
2728: PUSH
2729: CALL_OW 44
2733: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2734: LD_EXP 77
2738: PPUSH
2739: LD_INT 13
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2749: LD_EXP 77
2753: PPUSH
2754: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2758: LD_ADDR_EXP 78
2762: PUSH
2763: LD_EXP 78
2767: PUSH
2768: LD_EXP 77
2772: ADD
2773: ST_TO_ADDR
// hc_importance = 0 ;
2774: LD_ADDR_OWVAR 32
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2782: LD_ADDR_VAR 0 2
2786: PUSH
2787: DOUBLE
2788: LD_INT 1
2790: DEC
2791: ST_TO_ADDR
2792: LD_EXP 57
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: PUSH
2801: FOR_TO
2802: IFFALSE 2894
// begin hc_name =  ;
2804: LD_ADDR_OWVAR 26
2808: PUSH
2809: LD_STRING 
2811: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2812: LD_INT 0
2814: PPUSH
2815: LD_INT 1
2817: PPUSH
2818: LD_EXP 56
2822: PPUSH
2823: CALL_OW 380
// un = CreateHuman ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
2837: LD_VAR 0 3
2841: PPUSH
2842: LD_INT 12
2844: PPUSH
2845: LD_INT 0
2847: PPUSH
2848: CALL_OW 49
// ComCrawl ( un ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 116
2868: PPUSH
2869: LD_INT 21
2871: PPUSH
2872: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2876: LD_ADDR_EXP 78
2880: PUSH
2881: LD_EXP 78
2885: PUSH
2886: LD_VAR 0 3
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: GO 2801
2894: POP
2895: POP
// for i := 1 to trapAmountPeople [ 2 ] do
2896: LD_ADDR_VAR 0 2
2900: PUSH
2901: DOUBLE
2902: LD_INT 1
2904: DEC
2905: ST_TO_ADDR
2906: LD_EXP 57
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: FOR_TO
2916: IFFALSE 3008
// begin hc_name =  ;
2918: LD_ADDR_OWVAR 26
2922: PUSH
2923: LD_STRING 
2925: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2926: LD_INT 0
2928: PPUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_EXP 56
2936: PPUSH
2937: CALL_OW 380
// un = CreateHuman ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: CALL_OW 44
2950: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 14
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 49
// ComCrawl ( un ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_INT 116
2982: PPUSH
2983: LD_INT 21
2985: PPUSH
2986: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2990: LD_ADDR_EXP 78
2994: PUSH
2995: LD_EXP 78
2999: PUSH
3000: LD_VAR 0 3
3004: ADD
3005: ST_TO_ADDR
// end ;
3006: GO 2915
3008: POP
3009: POP
// end ;
3010: LD_VAR 0 1
3014: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3015: LD_INT 0
3017: PPUSH
3018: PPUSH
3019: PPUSH
3020: PPUSH
// uc_side = 1 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 1
3028: ST_TO_ADDR
// uc_nation = nation_american ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 1
3036: ST_TO_ADDR
// bc_level = 1 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 1
3044: ST_TO_ADDR
// bc_type = b_breastwork ;
3045: LD_ADDR_OWVAR 42
3049: PUSH
3050: LD_INT 31
3052: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3053: LD_ADDR_VAR 0 4
3057: PUSH
3058: LD_INT 104
3060: PPUSH
3061: LD_INT 59
3063: PPUSH
3064: LD_INT 4
3066: PPUSH
3067: CALL_OW 47
3071: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3072: LD_ADDR_EXP 79
3076: PUSH
3077: LD_EXP 79
3081: PUSH
3082: LD_VAR 0 4
3086: ADD
3087: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3088: LD_EXP 56
3092: PPUSH
3093: LD_VAR 0 4
3097: PPUSH
3098: CALL 4616 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3102: LD_ADDR_VAR 0 4
3106: PUSH
3107: LD_INT 101
3109: PPUSH
3110: LD_INT 55
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: CALL_OW 47
3120: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3121: LD_ADDR_EXP 79
3125: PUSH
3126: LD_EXP 79
3130: PUSH
3131: LD_VAR 0 4
3135: ADD
3136: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3137: LD_EXP 56
3141: PPUSH
3142: LD_VAR 0 4
3146: PPUSH
3147: CALL 4616 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3151: LD_ADDR_VAR 0 4
3155: PUSH
3156: LD_INT 132
3158: PPUSH
3159: LD_INT 62
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 47
3169: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3170: LD_ADDR_EXP 80
3174: PUSH
3175: LD_EXP 80
3179: PUSH
3180: LD_VAR 0 4
3184: ADD
3185: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3186: LD_EXP 56
3190: PPUSH
3191: LD_VAR 0 4
3195: PPUSH
3196: CALL 4616 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 134
3207: PPUSH
3208: LD_INT 66
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 47
3218: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3219: LD_ADDR_EXP 80
3223: PUSH
3224: LD_EXP 80
3228: PUSH
3229: LD_VAR 0 4
3233: ADD
3234: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3235: LD_EXP 56
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: CALL 4616 0 2
// bc_type = b_depot ;
3249: LD_ADDR_OWVAR 42
3253: PUSH
3254: LD_INT 0
3256: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3257: LD_ADDR_EXP 81
3261: PUSH
3262: LD_INT 92
3264: PPUSH
3265: LD_INT 51
3267: PPUSH
3268: LD_INT 2
3270: PPUSH
3271: CALL_OW 47
3275: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3276: LD_ADDR_EXP 82
3280: PUSH
3281: LD_INT 193
3283: ST_TO_ADDR
// amLeftEngs = [ ] ;
3284: LD_ADDR_EXP 83
3288: PUSH
3289: EMPTY
3290: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_INT 1
3303: PUSH
3304: LD_INT 1
3306: PUSH
3307: LD_INT 1
3309: PPUSH
3310: LD_INT 2
3312: PPUSH
3313: CALL_OW 12
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: PUSH
3323: LD_OWVAR 67
3327: ARRAY
3328: PUSH
3329: FOR_TO
3330: IFFALSE 3421
// begin uc_nation = 1 ;
3332: LD_ADDR_OWVAR 21
3336: PUSH
3337: LD_INT 1
3339: ST_TO_ADDR
// uc_side = 1 ;
3340: LD_ADDR_OWVAR 20
3344: PUSH
3345: LD_INT 1
3347: ST_TO_ADDR
// hc_gallery =  ;
3348: LD_ADDR_OWVAR 33
3352: PUSH
3353: LD_STRING 
3355: ST_TO_ADDR
// hc_name =  ;
3356: LD_ADDR_OWVAR 26
3360: PUSH
3361: LD_STRING 
3363: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3364: LD_INT 0
3366: PPUSH
3367: LD_INT 2
3369: PPUSH
3370: LD_EXP 56
3374: PPUSH
3375: CALL_OW 380
// un = CreateHuman ;
3379: LD_ADDR_VAR 0 3
3383: PUSH
3384: CALL_OW 44
3388: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3389: LD_ADDR_EXP 83
3393: PUSH
3394: LD_EXP 83
3398: PUSH
3399: LD_VAR 0 3
3403: ADD
3404: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: LD_EXP 81
3414: PPUSH
3415: CALL_OW 52
// end ;
3419: GO 3329
3421: POP
3422: POP
// if Difficulty = 3 then
3423: LD_OWVAR 67
3427: PUSH
3428: LD_INT 3
3430: EQUAL
3431: IFFALSE 3555
// begin amRightEngs = [ ] ;
3433: LD_ADDR_EXP 84
3437: PUSH
3438: EMPTY
3439: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3440: LD_ADDR_VAR 0 2
3444: PUSH
3445: DOUBLE
3446: LD_INT 1
3448: DEC
3449: ST_TO_ADDR
3450: LD_INT 1
3452: PPUSH
3453: LD_INT 2
3455: PPUSH
3456: CALL_OW 12
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3553
// begin uc_nation = 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// uc_side = 1 ;
3472: LD_ADDR_OWVAR 20
3476: PUSH
3477: LD_INT 1
3479: ST_TO_ADDR
// hc_gallery =  ;
3480: LD_ADDR_OWVAR 33
3484: PUSH
3485: LD_STRING 
3487: ST_TO_ADDR
// hc_name =  ;
3488: LD_ADDR_OWVAR 26
3492: PUSH
3493: LD_STRING 
3495: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3496: LD_INT 0
3498: PPUSH
3499: LD_INT 2
3501: PPUSH
3502: LD_EXP 56
3506: PPUSH
3507: CALL_OW 380
// un = CreateHuman ;
3511: LD_ADDR_VAR 0 3
3515: PUSH
3516: CALL_OW 44
3520: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3521: LD_ADDR_EXP 84
3525: PUSH
3526: LD_EXP 84
3530: PUSH
3531: LD_VAR 0 3
3535: ADD
3536: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_EXP 82
3546: PPUSH
3547: CALL_OW 52
// end ;
3551: GO 3461
3553: POP
3554: POP
// end ; end ; end_of_file
3555: LD_VAR 0 1
3559: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
// if exist_mode then
3564: LD_VAR 0 2
3568: IFFALSE 3593
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3570: LD_ADDR_VAR 0 4
3574: PUSH
3575: LD_EXP 46
3579: PUSH
3580: LD_VAR 0 1
3584: STR
3585: PPUSH
3586: CALL_OW 34
3590: ST_TO_ADDR
3591: GO 3608
// unit := NewCharacter ( ident ) ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: LD_VAR 0 1
3602: PPUSH
3603: CALL_OW 25
3607: ST_TO_ADDR
// result := unit ;
3608: LD_ADDR_VAR 0 3
3612: PUSH
3613: LD_VAR 0 4
3617: ST_TO_ADDR
// end ;
3618: LD_VAR 0 3
3622: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
3623: LD_INT 0
3625: PPUSH
3626: PPUSH
3627: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: LD_VAR 0 1
3637: PUSH
3638: LD_EXP 59
3642: PUSH
3643: LD_EXP 60
3647: PUSH
3648: LD_EXP 61
3652: PUSH
3653: LD_EXP 62
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: DIFF
3664: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
3665: LD_ADDR_VAR 0 7
3669: PUSH
3670: LD_VAR 0 1
3674: PUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 12
3687: ARRAY
3688: ST_TO_ADDR
// if radio then
3689: LD_VAR 0 4
3693: IFFALSE 3742
// begin if GetSex ( speaker ) = sex_male then
3695: LD_VAR 0 7
3699: PPUSH
3700: CALL_OW 258
3704: PUSH
3705: LD_INT 1
3707: EQUAL
3708: IFFALSE 3726
// SayRadio ( speaker , dialogMID ) else
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_VAR 0 2
3719: PPUSH
3720: CALL_OW 94
3724: GO 3740
// SayRadio ( speaker , dialogFID ) ;
3726: LD_VAR 0 7
3730: PPUSH
3731: LD_VAR 0 3
3735: PPUSH
3736: CALL_OW 94
// end else
3740: GO 3787
// begin if GetSex ( speaker ) = sex_male then
3742: LD_VAR 0 7
3746: PPUSH
3747: CALL_OW 258
3751: PUSH
3752: LD_INT 1
3754: EQUAL
3755: IFFALSE 3773
// Say ( speaker , dialogMID ) else
3757: LD_VAR 0 7
3761: PPUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 88
3771: GO 3787
// Say ( speaker , dialogFID ) ;
3773: LD_VAR 0 7
3777: PPUSH
3778: LD_VAR 0 3
3782: PPUSH
3783: CALL_OW 88
// end ; result := speaker ;
3787: LD_ADDR_VAR 0 5
3791: PUSH
3792: LD_VAR 0 7
3796: ST_TO_ADDR
// end ;
3797: LD_VAR 0 5
3801: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
3802: LD_INT 0
3804: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
3805: LD_VAR 0 1
3809: PPUSH
3810: CALL_OW 255
3814: PUSH
3815: LD_VAR 0 3
3819: EQUAL
3820: PUSH
3821: LD_VAR 0 1
3825: PPUSH
3826: CALL_OW 302
3830: AND
3831: IFFALSE 3853
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
3833: LD_VAR 0 1
3837: PPUSH
3838: LD_EXP 45
3842: PUSH
3843: LD_VAR 0 2
3847: STR
3848: PPUSH
3849: CALL_OW 38
// end ;
3853: LD_VAR 0 4
3857: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
3858: LD_INT 0
3860: PPUSH
3861: PPUSH
3862: PPUSH
// resultCharactersToSave = [ ] ;
3863: LD_ADDR_VAR 0 6
3867: PUSH
3868: EMPTY
3869: ST_TO_ADDR
// for unit in characters do
3870: LD_ADDR_VAR 0 5
3874: PUSH
3875: LD_VAR 0 1
3879: PUSH
3880: FOR_IN
3881: IFFALSE 3929
// if GetSide ( unit ) = side and IsOK ( unit ) then
3883: LD_VAR 0 5
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: LD_VAR 0 3
3897: EQUAL
3898: PUSH
3899: LD_VAR 0 5
3903: PPUSH
3904: CALL_OW 302
3908: AND
3909: IFFALSE 3927
// resultCharactersToSave = resultCharactersToSave ^ unit ;
3911: LD_ADDR_VAR 0 6
3915: PUSH
3916: LD_VAR 0 6
3920: PUSH
3921: LD_VAR 0 5
3925: ADD
3926: ST_TO_ADDR
3927: GO 3880
3929: POP
3930: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
3931: LD_VAR 0 6
3935: PPUSH
3936: LD_EXP 45
3940: PUSH
3941: LD_VAR 0 2
3945: STR
3946: PPUSH
3947: CALL_OW 38
// end ;
3951: LD_VAR 0 4
3955: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_STRING QMoreInfo
3968: PPUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 98
3978: ST_TO_ADDR
// case dec of 1 :
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 1
3986: DOUBLE
3987: EQUAL
3988: IFTRUE 3992
3990: GO 4052
3992: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
3993: LD_EXP 59
3997: PPUSH
3998: LD_STRING D2a-Bur-1
4000: PPUSH
4001: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4005: LD_EXP 73
4009: PPUSH
4010: LD_STRING D2a-Pla-1
4012: PPUSH
4013: CALL_OW 88
// q1 = q diff 1 ;
4017: LD_ADDR_VAR 0 4
4021: PUSH
4022: LD_VAR 0 1
4026: PUSH
4027: LD_INT 1
4029: DIFF
4030: ST_TO_ADDR
// if q1 >= 2 then
4031: LD_VAR 0 4
4035: PUSH
4036: LD_INT 2
4038: GREATEREQUAL
4039: IFFALSE 4050
// Question1 ( q1 ) ;
4041: LD_VAR 0 4
4045: PPUSH
4046: CALL 3956 0 1
// end ; 2 :
4050: GO 4189
4052: LD_INT 2
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4120
4060: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4061: LD_EXP 59
4065: PPUSH
4066: LD_STRING D2b-Bur-1
4068: PPUSH
4069: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4073: LD_EXP 73
4077: PPUSH
4078: LD_STRING D2b-Pla-1
4080: PPUSH
4081: CALL_OW 88
// q1 = q diff 2 ;
4085: LD_ADDR_VAR 0 4
4089: PUSH
4090: LD_VAR 0 1
4094: PUSH
4095: LD_INT 2
4097: DIFF
4098: ST_TO_ADDR
// if q1 >= 2 then
4099: LD_VAR 0 4
4103: PUSH
4104: LD_INT 2
4106: GREATEREQUAL
4107: IFFALSE 4118
// Question1 ( q1 ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: CALL 3956 0 1
// end ; 3 :
4118: GO 4189
4120: LD_INT 3
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4188
4128: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4129: LD_EXP 59
4133: PPUSH
4134: LD_STRING D2c-Bur-1
4136: PPUSH
4137: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4141: LD_EXP 73
4145: PPUSH
4146: LD_STRING D2c-Pla-1
4148: PPUSH
4149: CALL_OW 88
// q1 = q diff 3 ;
4153: LD_ADDR_VAR 0 4
4157: PUSH
4158: LD_VAR 0 1
4162: PUSH
4163: LD_INT 3
4165: DIFF
4166: ST_TO_ADDR
// if q1 >= 2 then
4167: LD_VAR 0 4
4171: PUSH
4172: LD_INT 2
4174: GREATEREQUAL
4175: IFFALSE 4186
// Question1 ( q1 ) ;
4177: LD_VAR 0 4
4181: PPUSH
4182: CALL 3956 0 1
// end ; end ;
4186: GO 4189
4188: POP
// end ;
4189: LD_VAR 0 2
4193: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4194: LD_INT 0
4196: PPUSH
4197: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4198: LD_VAR 0 1
4202: PPUSH
4203: CALL_OW 302
4207: NOT
4208: PUSH
4209: LD_VAR 0 2
4213: PPUSH
4214: CALL_OW 302
4218: NOT
4219: OR
4220: PUSH
4221: LD_VAR 0 3
4225: PPUSH
4226: CALL_OW 302
4230: NOT
4231: OR
4232: PUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: CALL_OW 261
4242: PUSH
4243: LD_INT 100
4245: EQUAL
4246: OR
4247: IFFALSE 4251
// exit ;
4249: GO 4370
// AddComTransport ( engineer , depot , mat_oil ) ;
4251: LD_VAR 0 1
4255: PPUSH
4256: LD_VAR 0 2
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4268: LD_INT 35
4270: PPUSH
4271: CALL_OW 67
// until Carry ( engineer ) ;
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 281
4284: IFFALSE 4268
// RemoveTasks ( engineer ) ;
4286: LD_VAR 0 1
4290: PPUSH
4291: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_STRING O
4302: PUSH
4303: LD_INT 0
4305: PUSH
4306: LD_INT 0
4308: PUSH
4309: LD_VAR 0 3
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: LD_INT 0
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: PPUSH
4335: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4339: LD_INT 35
4341: PPUSH
4342: CALL_OW 67
// until not Carry ( engineer ) ;
4346: LD_VAR 0 1
4350: PPUSH
4351: CALL_OW 281
4355: NOT
4356: IFFALSE 4339
// SetFuel ( vehicle , 100 ) ;
4358: LD_VAR 0 3
4362: PPUSH
4363: LD_INT 100
4365: PPUSH
4366: CALL_OW 240
// end ;
4370: LD_VAR 0 4
4374: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4375: LD_INT 0
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4382: LD_ADDR_VAR 0 8
4386: PUSH
4387: LD_INT 48
4389: PUSH
4390: LD_INT 49
4392: PUSH
4393: LD_INT 50
4395: PUSH
4396: LD_INT 20
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: LD_INT 51
4404: PUSH
4405: LD_INT 52
4407: PUSH
4408: LD_INT 69
4410: PUSH
4411: LD_INT 39
4413: PUSH
4414: LD_INT 34
4416: PUSH
4417: LD_INT 40
4419: PUSH
4420: LD_INT 53
4422: PUSH
4423: LD_INT 71
4425: PUSH
4426: LD_INT 57
4428: PUSH
4429: LD_INT 58
4431: PUSH
4432: LD_INT 44
4434: PUSH
4435: LD_INT 32
4437: PUSH
4438: LD_INT 27
4440: PUSH
4441: LD_INT 23
4443: PUSH
4444: LD_INT 33
4446: PUSH
4447: LD_INT 59
4449: PUSH
4450: LD_INT 54
4452: PUSH
4453: LD_INT 55
4455: PUSH
4456: LD_INT 56
4458: PUSH
4459: LD_INT 63
4461: PUSH
4462: LD_INT 64
4464: PUSH
4465: LD_INT 65
4467: PUSH
4468: LD_INT 30
4470: PUSH
4471: LD_INT 31
4473: PUSH
4474: LD_INT 21
4476: PUSH
4477: LD_INT 22
4479: PUSH
4480: LD_INT 25
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4517: LD_ADDR_VAR 0 5
4521: PUSH
4522: DOUBLE
4523: LD_INT 1
4525: DEC
4526: ST_TO_ADDR
4527: LD_VAR 0 8
4531: PUSH
4532: FOR_TO
4533: IFFALSE 4609
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4535: LD_VAR 0 8
4539: PUSH
4540: LD_VAR 0 5
4544: ARRAY
4545: PPUSH
4546: LD_VAR 0 1
4550: PPUSH
4551: CALL_OW 321
4555: PUSH
4556: LD_INT 1
4558: EQUAL
4559: PUSH
4560: LD_VAR 0 8
4564: PUSH
4565: LD_VAR 0 5
4569: ARRAY
4570: PPUSH
4571: LD_VAR 0 3
4575: PPUSH
4576: CALL_OW 482
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: AND
4585: IFFALSE 4607
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
4587: LD_VAR 0 2
4591: PPUSH
4592: LD_VAR 0 8
4596: PUSH
4597: LD_VAR 0 5
4601: ARRAY
4602: PPUSH
4603: CALL_OW 184
4607: GO 4532
4609: POP
4610: POP
// end ;
4611: LD_VAR 0 4
4615: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
// uc_side := GetSide ( b ) ;
4621: LD_ADDR_OWVAR 20
4625: PUSH
4626: LD_VAR 0 2
4630: PPUSH
4631: CALL_OW 255
4635: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4636: LD_ADDR_OWVAR 21
4640: PUSH
4641: LD_VAR 0 2
4645: PPUSH
4646: CALL_OW 248
4650: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4651: LD_INT 0
4653: PPUSH
4654: LD_INT 1
4656: PPUSH
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 380
// un = CreateHuman ;
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: CALL_OW 44
4675: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4676: LD_ADDR_VAR 0 5
4680: PUSH
4681: LD_VAR 0 2
4685: PPUSH
4686: CALL_OW 254
4690: PUSH
4691: LD_INT 3
4693: MINUS
4694: ST_TO_ADDR
// if dir < 0 then
4695: LD_VAR 0 5
4699: PUSH
4700: LD_INT 0
4702: LESS
4703: IFFALSE 4719
// dir := 6 + dir ;
4705: LD_ADDR_VAR 0 5
4709: PUSH
4710: LD_INT 6
4712: PUSH
4713: LD_VAR 0 5
4717: PLUS
4718: ST_TO_ADDR
// SetDir ( un , dir ) ;
4719: LD_VAR 0 4
4723: PPUSH
4724: LD_VAR 0 5
4728: PPUSH
4729: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4733: LD_VAR 0 4
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: CALL_OW 52
// result = un ;
4747: LD_ADDR_VAR 0 3
4751: PUSH
4752: LD_VAR 0 4
4756: ST_TO_ADDR
// end ;
4757: LD_VAR 0 3
4761: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
4762: LD_INT 0
4764: PPUSH
4765: PPUSH
4766: PPUSH
// tmp = [ ] ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: EMPTY
4773: ST_TO_ADDR
// if not vehicles then
4774: LD_VAR 0 1
4778: NOT
4779: IFFALSE 4783
// exit ;
4781: GO 4900
// for i in vehicles do
4783: LD_ADDR_VAR 0 4
4787: PUSH
4788: LD_VAR 0 1
4792: PUSH
4793: FOR_IN
4794: IFFALSE 4884
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
4796: LD_ADDR_VAR 0 5
4800: PUSH
4801: LD_VAR 0 5
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 265
4818: PUSH
4819: LD_VAR 0 4
4823: PPUSH
4824: CALL_OW 262
4828: PUSH
4829: LD_VAR 0 4
4833: PPUSH
4834: CALL_OW 263
4838: PUSH
4839: LD_VAR 0 4
4843: PPUSH
4844: CALL_OW 264
4848: PUSH
4849: LD_VAR 0 4
4853: PPUSH
4854: CALL_OW 261
4858: PUSH
4859: LD_VAR 0 4
4863: PPUSH
4864: CALL_OW 256
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 2
4881: ST_TO_ADDR
4882: GO 4793
4884: POP
4885: POP
// SaveVariable ( tmp , ident ) ;
4886: LD_VAR 0 5
4890: PPUSH
4891: LD_VAR 0 2
4895: PPUSH
4896: CALL_OW 39
// end ;
4900: LD_VAR 0 3
4904: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
4905: LD_INT 0
4907: PPUSH
4908: PPUSH
4909: PPUSH
// buildingsToSave = [ ] ;
4910: LD_ADDR_VAR 0 5
4914: PUSH
4915: EMPTY
4916: ST_TO_ADDR
// if not buildings then
4917: LD_VAR 0 1
4921: NOT
4922: IFFALSE 4926
// exit ;
4924: GO 5501
// for i in buildings do
4926: LD_ADDR_VAR 0 4
4930: PUSH
4931: LD_VAR 0 1
4935: PUSH
4936: FOR_IN
4937: IFFALSE 5485
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4939: LD_VAR 0 4
4943: PPUSH
4944: CALL_OW 266
4948: PUSH
4949: LD_INT 6
4951: PUSH
4952: LD_INT 7
4954: PUSH
4955: LD_INT 8
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: IN
4963: IFFALSE 5088
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
4965: LD_ADDR_VAR 0 5
4969: PUSH
4970: LD_VAR 0 5
4974: PUSH
4975: LD_VAR 0 4
4979: PPUSH
4980: CALL_OW 266
4984: PUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: CALL_OW 250
4994: PUSH
4995: LD_VAR 0 4
4999: PPUSH
5000: CALL_OW 251
5004: PUSH
5005: LD_VAR 0 4
5009: PPUSH
5010: CALL_OW 254
5014: PUSH
5015: LD_VAR 0 4
5019: PPUSH
5020: CALL_OW 267
5024: PUSH
5025: LD_VAR 0 4
5029: PPUSH
5030: CALL_OW 248
5034: PUSH
5035: LD_VAR 0 4
5039: PPUSH
5040: CALL_OW 256
5044: PUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 268
5057: PUSH
5058: LD_VAR 0 4
5062: PPUSH
5063: LD_INT 2
5065: PPUSH
5066: CALL_OW 268
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: ADD
5085: ST_TO_ADDR
5086: GO 5483
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5088: LD_VAR 0 4
5092: PPUSH
5093: CALL_OW 266
5097: PUSH
5098: LD_INT 32
5100: PUSH
5101: LD_INT 33
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: IN
5108: IFFALSE 5216
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PUSH
5120: LD_VAR 0 4
5124: PPUSH
5125: CALL_OW 266
5129: PUSH
5130: LD_VAR 0 4
5134: PPUSH
5135: CALL_OW 250
5139: PUSH
5140: LD_VAR 0 4
5144: PPUSH
5145: CALL_OW 251
5149: PUSH
5150: LD_VAR 0 4
5154: PPUSH
5155: CALL_OW 254
5159: PUSH
5160: LD_VAR 0 4
5164: PPUSH
5165: CALL_OW 267
5169: PUSH
5170: LD_VAR 0 4
5174: PPUSH
5175: CALL_OW 248
5179: PUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 256
5189: PUSH
5190: LD_VAR 0 4
5194: PPUSH
5195: CALL_OW 269
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: ADD
5213: ST_TO_ADDR
5214: GO 5483
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5216: LD_VAR 0 4
5220: PPUSH
5221: CALL_OW 266
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: IN
5236: IFFALSE 5390
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_VAR 0 4
5252: PPUSH
5253: CALL_OW 266
5257: PUSH
5258: LD_VAR 0 4
5262: PPUSH
5263: CALL_OW 250
5267: PUSH
5268: LD_VAR 0 4
5272: PPUSH
5273: CALL_OW 251
5277: PUSH
5278: LD_VAR 0 4
5282: PPUSH
5283: CALL_OW 254
5287: PUSH
5288: LD_VAR 0 4
5292: PPUSH
5293: CALL_OW 267
5297: PUSH
5298: LD_VAR 0 4
5302: PPUSH
5303: CALL_OW 248
5307: PUSH
5308: LD_VAR 0 4
5312: PPUSH
5313: CALL_OW 256
5317: PUSH
5318: LD_VAR 0 4
5322: PPUSH
5323: CALL_OW 274
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: CALL_OW 275
5335: PUSH
5336: LD_VAR 0 4
5340: PPUSH
5341: CALL_OW 274
5345: PPUSH
5346: LD_INT 2
5348: PPUSH
5349: CALL_OW 275
5353: PUSH
5354: LD_VAR 0 4
5358: PPUSH
5359: CALL_OW 274
5363: PPUSH
5364: LD_INT 3
5366: PPUSH
5367: CALL_OW 275
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PUSH
5384: EMPTY
5385: LIST
5386: ADD
5387: ST_TO_ADDR
5388: GO 5483
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5390: LD_ADDR_VAR 0 5
5394: PUSH
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 4
5404: PPUSH
5405: CALL_OW 266
5409: PUSH
5410: LD_VAR 0 4
5414: PPUSH
5415: CALL_OW 250
5419: PUSH
5420: LD_VAR 0 4
5424: PPUSH
5425: CALL_OW 251
5429: PUSH
5430: LD_VAR 0 4
5434: PPUSH
5435: CALL_OW 254
5439: PUSH
5440: LD_VAR 0 4
5444: PPUSH
5445: CALL_OW 267
5449: PUSH
5450: LD_VAR 0 4
5454: PPUSH
5455: CALL_OW 248
5459: PUSH
5460: LD_VAR 0 4
5464: PPUSH
5465: CALL_OW 256
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: ADD
5482: ST_TO_ADDR
// end ;
5483: GO 4936
5485: POP
5486: POP
// SaveVariable ( buildingsToSave , ident ) ;
5487: LD_VAR 0 5
5491: PPUSH
5492: LD_VAR 0 2
5496: PPUSH
5497: CALL_OW 39
// end ;
5501: LD_VAR 0 3
5505: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
5510: PPUSH
5511: PPUSH
5512: PPUSH
// belkovTeam = [ ] ;
5513: LD_ADDR_EXP 70
5517: PUSH
5518: EMPTY
5519: ST_TO_ADDR
// if belkovReturn then
5520: LD_EXP 6
5524: IFFALSE 5544
// belkovTeam = belkovTeam ^ Belkov else
5526: LD_ADDR_EXP 70
5530: PUSH
5531: LD_EXP 70
5535: PUSH
5536: LD_EXP 61
5540: ADD
5541: ST_TO_ADDR
5542: GO 5560
// belkovTeam = belkovTeam ^ Belkov2 ;
5544: LD_ADDR_EXP 70
5548: PUSH
5549: LD_EXP 70
5553: PUSH
5554: LD_EXP 65
5558: ADD
5559: ST_TO_ADDR
// for unit in other_survivors do
5560: LD_ADDR_VAR 0 3
5564: PUSH
5565: LD_EXP 63
5569: PUSH
5570: FOR_IN
5571: IFFALSE 5612
// if IsOK ( unit ) and belkovTeam < 5 then
5573: LD_VAR 0 3
5577: PPUSH
5578: CALL_OW 302
5582: PUSH
5583: LD_EXP 70
5587: PUSH
5588: LD_INT 5
5590: LESS
5591: AND
5592: IFFALSE 5610
// belkovTeam = belkovTeam ^ unit ;
5594: LD_ADDR_EXP 70
5598: PUSH
5599: LD_EXP 70
5603: PUSH
5604: LD_VAR 0 3
5608: ADD
5609: ST_TO_ADDR
5610: GO 5570
5612: POP
5613: POP
// if belkovTeam < 5 then
5614: LD_EXP 70
5618: PUSH
5619: LD_INT 5
5621: LESS
5622: IFFALSE 5748
// begin restRandSolds = 5 - belkovTeam ;
5624: LD_ADDR_VAR 0 4
5628: PUSH
5629: LD_INT 5
5631: PUSH
5632: LD_EXP 70
5636: MINUS
5637: ST_TO_ADDR
// for i := 1 to restRandSolds do
5638: LD_ADDR_VAR 0 2
5642: PUSH
5643: DOUBLE
5644: LD_INT 1
5646: DEC
5647: ST_TO_ADDR
5648: LD_VAR 0 4
5652: PUSH
5653: FOR_TO
5654: IFFALSE 5746
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_EXP 66
5665: PPUSH
5666: LD_INT 25
5668: PUSH
5669: LD_INT 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: PPUSH
5679: CALL_OW 72
5683: PUSH
5684: LD_EXP 64
5688: DIFF
5689: PUSH
5690: FOR_IN
5691: IFFALSE 5742
// if not unit in belkovTeam then
5693: LD_VAR 0 3
5697: PUSH
5698: LD_EXP 70
5702: IN
5703: NOT
5704: IFFALSE 5740
// begin belkovTeam = belkovTeam ^ unit ;
5706: LD_ADDR_EXP 70
5710: PUSH
5711: LD_EXP 70
5715: PUSH
5716: LD_VAR 0 3
5720: ADD
5721: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
5722: LD_ADDR_EXP 66
5726: PUSH
5727: LD_EXP 66
5731: PUSH
5732: LD_VAR 0 3
5736: DIFF
5737: ST_TO_ADDR
// break ;
5738: GO 5742
// end ;
5740: GO 5690
5742: POP
5743: POP
5744: GO 5653
5746: POP
5747: POP
// end ; tmp = belkovTeam diff Belkov ;
5748: LD_ADDR_VAR 0 5
5752: PUSH
5753: LD_EXP 70
5757: PUSH
5758: LD_EXP 61
5762: DIFF
5763: ST_TO_ADDR
// if tmp < 4 then
5764: LD_VAR 0 5
5768: PUSH
5769: LD_INT 4
5771: LESS
5772: IFFALSE 5856
// begin for i := 1 to 4 - tmp do
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: DOUBLE
5780: LD_INT 1
5782: DEC
5783: ST_TO_ADDR
5784: LD_INT 4
5786: PUSH
5787: LD_VAR 0 5
5791: MINUS
5792: PUSH
5793: FOR_TO
5794: IFFALSE 5854
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
5796: LD_INT 0
5798: PPUSH
5799: LD_INT 1
5801: PPUSH
5802: LD_INT 2
5804: PPUSH
5805: CALL_OW 12
5809: PPUSH
5810: CALL_OW 381
// unit = CreateHuman ;
5814: LD_ADDR_VAR 0 3
5818: PUSH
5819: CALL_OW 44
5823: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
5824: LD_ADDR_EXP 70
5828: PUSH
5829: LD_EXP 70
5833: PUSH
5834: LD_VAR 0 3
5838: ADD
5839: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
5840: LD_VAR 0 3
5844: PPUSH
5845: LD_INT 209
5847: PPUSH
5848: CALL_OW 52
// end ;
5852: GO 5793
5854: POP
5855: POP
// end ; belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5856: LD_ADDR_EXP 70
5860: PUSH
5861: LD_EXP 70
5865: PUSH
5866: LD_EXP 66
5870: PPUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 4
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: PPUSH
5884: CALL_OW 72
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: ADD
5893: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5894: LD_ADDR_EXP 66
5898: PUSH
5899: LD_EXP 66
5903: PUSH
5904: LD_EXP 66
5908: PPUSH
5909: LD_INT 25
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: PPUSH
5922: CALL_OW 72
5926: PUSH
5927: LD_INT 1
5929: ARRAY
5930: DIFF
5931: ST_TO_ADDR
// end ;
5932: LD_VAR 0 1
5936: RET
// export function PlatonovSendSupport ; begin
5937: LD_INT 0
5939: PPUSH
// ComExitBuilding ( [ Kuklajs , Benko ] ) ;
5940: LD_EXP 75
5944: PUSH
5945: LD_EXP 76
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
5958: LD_EXP 75
5962: PUSH
5963: LD_EXP 76
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: LD_INT 112
5974: PPUSH
5975: LD_INT 96
5977: PPUSH
5978: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
5982: LD_EXP 75
5986: PUSH
5987: LD_EXP 76
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: LD_INT 3
5998: PPUSH
5999: CALL_OW 235
// end ; end_of_file
6003: LD_VAR 0 1
6007: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6014: LD_EXP 59
6018: PPUSH
6019: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6023: LD_EXP 59
6027: PPUSH
6028: LD_INT 163
6030: PPUSH
6031: LD_INT 108
6033: PPUSH
6034: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6038: LD_EXP 59
6042: PPUSH
6043: LD_EXP 64
6047: PPUSH
6048: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 21
6069: PUSH
6070: LD_INT 1
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 69
6085: PUSH
6086: LD_EXP 59
6090: DIFF
6091: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6092: LD_ADDR_VAR 0 4
6096: PUSH
6097: DOUBLE
6098: LD_INT 1
6100: DEC
6101: ST_TO_ADDR
6102: LD_EXP 49
6106: PUSH
6107: FOR_TO
6108: IFFALSE 6226
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_VAR 0 2
6119: PPUSH
6120: LD_EXP 49
6124: PUSH
6125: LD_VAR 0 4
6129: ARRAY
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PPUSH
6135: LD_EXP 49
6139: PUSH
6140: LD_VAR 0 4
6144: ARRAY
6145: PUSH
6146: LD_INT 2
6148: ARRAY
6149: PPUSH
6150: CALL_OW 73
6154: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6155: LD_VAR 0 3
6159: PPUSH
6160: LD_EXP 49
6164: PUSH
6165: LD_VAR 0 4
6169: ARRAY
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PPUSH
6175: LD_EXP 49
6179: PUSH
6180: LD_VAR 0 4
6184: ARRAY
6185: PUSH
6186: LD_INT 2
6188: ARRAY
6189: PPUSH
6190: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_EXP 64
6203: PPUSH
6204: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
6208: LD_ADDR_VAR 0 2
6212: PUSH
6213: LD_VAR 0 2
6217: PUSH
6218: LD_VAR 0 3
6222: DIFF
6223: ST_TO_ADDR
// end ;
6224: GO 6107
6226: POP
6227: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6228: LD_EXP 59
6232: PPUSH
6233: CALL_OW 87
// wait ( 0 0$1 ) ;
6237: LD_INT 35
6239: PPUSH
6240: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
6244: LD_EXP 59
6248: PPUSH
6249: LD_EXP 64
6253: PPUSH
6254: CALL_OW 296
6258: PUSH
6259: LD_INT 4
6261: LESS
6262: IFFALSE 6228
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6264: LD_EXP 59
6268: PUSH
6269: LD_EXP 64
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
6282: LD_EXP 64
6286: PPUSH
6287: LD_EXP 59
6291: PPUSH
6292: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
6296: LD_EXP 64
6300: PPUSH
6301: LD_STRING D1-Kur-1
6303: PPUSH
6304: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6308: LD_EXP 59
6312: PPUSH
6313: LD_STRING D1-Bur-1
6315: PPUSH
6316: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
6320: LD_EXP 64
6324: PPUSH
6325: LD_STRING D1-Kur-2
6327: PPUSH
6328: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
6332: LD_EXP 59
6336: PPUSH
6337: LD_STRING D1-Bur-2
6339: PPUSH
6340: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6344: LD_EXP 64
6348: PPUSH
6349: LD_STRING D1-Kur-3
6351: PPUSH
6352: CALL_OW 88
// if IsOK ( Gnyevko ) then
6356: LD_EXP 60
6360: PPUSH
6361: CALL_OW 302
6365: IFFALSE 6379
// Say ( Kurin , D1-Kur-3a ) ;
6367: LD_EXP 64
6371: PPUSH
6372: LD_STRING D1-Kur-3a
6374: PPUSH
6375: CALL_OW 88
// InGameOff ;
6379: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
6383: LD_INT 22
6385: PUSH
6386: LD_INT 3
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: LD_INT 21
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PPUSH
6407: CALL_OW 69
6411: PUSH
6412: LD_EXP 59
6416: PUSH
6417: LD_EXP 60
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: DIFF
6426: PPUSH
6427: LD_INT 6
6429: PPUSH
6430: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6434: LD_EXP 67
6438: PPUSH
6439: LD_INT 3
6441: PPUSH
6442: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6446: LD_INT 9
6448: PPUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 6
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 1
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 70
6477: PUSH
6478: LD_EXP 64
6482: DIFF
6483: PPUSH
6484: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
6488: LD_EXP 63
6492: PPUSH
6493: LD_INT 95
6495: PPUSH
6496: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
6500: LD_EXP 61
6504: PPUSH
6505: LD_INT 95
6507: PPUSH
6508: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
6512: LD_EXP 62
6516: PPUSH
6517: CALL_OW 305
6521: IFFALSE 6535
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
6523: LD_EXP 62
6527: PPUSH
6528: LD_INT 83
6530: PPUSH
6531: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
6535: LD_STRING 01_Gnyevko
6537: PPUSH
6538: CALL_OW 28
6542: NOT
6543: IFFALSE 6557
// SetSide ( randomMech , 3 ) ;
6545: LD_EXP 68
6549: PPUSH
6550: LD_INT 3
6552: PPUSH
6553: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
6557: LD_STRING M1
6559: PPUSH
6560: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 6
6569: PPUSH
6570: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
6574: LD_INT 3
6576: PPUSH
6577: LD_INT 7
6579: PPUSH
6580: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
6584: LD_INT 6
6586: PPUSH
6587: LD_INT 6
6589: PPUSH
6590: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
6594: LD_INT 6
6596: PPUSH
6597: LD_INT 7
6599: PPUSH
6600: CALL_OW 334
// SaveForQuickRestart ;
6604: CALL_OW 22
// end ;
6608: LD_VAR 0 1
6612: RET
// every 0 0$1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6613: LD_EXP 20
6617: NOT
6618: PUSH
6619: LD_INT 20
6621: PPUSH
6622: LD_INT 22
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 2
6634: PUSH
6635: LD_INT 21
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 21
6647: PUSH
6648: LD_INT 2
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PPUSH
6664: CALL_OW 70
6668: PUSH
6669: LD_INT 0
6671: GREATER
6672: AND
6673: IFFALSE 6894
6675: GO 6677
6677: DISABLE
6678: LD_INT 0
6680: PPUSH
// begin enable ;
6681: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: LD_INT 20
6689: PPUSH
6690: LD_INT 22
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 21
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 21
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 70
6736: PUSH
6737: FOR_IN
6738: IFFALSE 6877
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
6740: LD_VAR 0 1
6744: PPUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: CALL_OW 250
6754: PPUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 251
6764: PUSH
6765: LD_INT 5
6767: PLUS
6768: PPUSH
6769: CALL_OW 111
// if dialogLoopBlocker then
6773: LD_EXP 31
6777: IFFALSE 6783
// exit ;
6779: POP
6780: POP
6781: GO 6894
// dialogLoopBlocker = true ;
6783: LD_ADDR_EXP 31
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if not meetPlatonov then
6791: LD_EXP 7
6795: NOT
6796: IFFALSE 6859
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
6798: LD_VAR 0 1
6802: PUSH
6803: LD_EXP 59
6807: NONEQUAL
6808: PUSH
6809: LD_EXP 67
6813: PPUSH
6814: CALL_OW 302
6818: AND
6819: IFFALSE 6833
// Say ( Kovalyuk , D1b-Kov-1 ) ;
6821: LD_EXP 67
6825: PPUSH
6826: LD_STRING D1b-Kov-1
6828: PPUSH
6829: CALL_OW 88
// if unit = Burlak then
6833: LD_VAR 0 1
6837: PUSH
6838: LD_EXP 59
6842: EQUAL
6843: IFFALSE 6857
// Say ( Burlak , D1b-Bur-1 ) ;
6845: LD_EXP 59
6849: PPUSH
6850: LD_STRING D1b-Bur-1
6852: PPUSH
6853: CALL_OW 88
// end else
6857: GO 6871
// Say ( Platonov , D8-Pla-1 ) ;
6859: LD_EXP 73
6863: PPUSH
6864: LD_STRING D8-Pla-1
6866: PPUSH
6867: CALL_OW 88
// exit ;
6871: POP
6872: POP
6873: GO 6894
// end ;
6875: GO 6737
6877: POP
6878: POP
// wait ( 0 0$5 ) ;
6879: LD_INT 175
6881: PPUSH
6882: CALL_OW 67
// dialogLoopBlocker = false ;
6886: LD_ADDR_EXP 31
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// end ;
6894: PPOPN 1
6896: END
// every 0 0$1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6897: LD_EXP 19
6901: NOT
6902: PUSH
6903: LD_INT 8
6905: PPUSH
6906: LD_INT 22
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: LD_INT 21
6921: PUSH
6922: LD_INT 1
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PPUSH
6948: CALL_OW 71
6952: PUSH
6953: LD_INT 0
6955: GREATER
6956: AND
6957: IFFALSE 7092
6959: GO 6961
6961: DISABLE
6962: LD_INT 0
6964: PPUSH
// begin enable ;
6965: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6966: LD_ADDR_VAR 0 1
6970: PUSH
6971: LD_INT 8
6973: PPUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 21
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 71
7020: PUSH
7021: FOR_IN
7022: IFFALSE 7075
// begin ComMoveXY ( unit , 114 , 98 ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_INT 114
7031: PPUSH
7032: LD_INT 98
7034: PPUSH
7035: CALL_OW 111
// if dialogLoopBlocker then
7039: LD_EXP 31
7043: IFFALSE 7049
// exit ;
7045: POP
7046: POP
7047: GO 7092
// dialogLoopBlocker = true ;
7049: LD_ADDR_EXP 31
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
7057: LD_EXP 73
7061: PPUSH
7062: LD_STRING D8-Pla-1
7064: PPUSH
7065: CALL_OW 88
// exit ;
7069: POP
7070: POP
7071: GO 7092
// end ;
7073: GO 7021
7075: POP
7076: POP
// wait ( 0 0$5 ) ;
7077: LD_INT 175
7079: PPUSH
7080: CALL_OW 67
// dialogLoopBlocker = false ;
7084: LD_ADDR_EXP 31
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// end ;
7092: PPOPN 1
7094: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7095: LD_EXP 7
7099: NOT
7100: PUSH
7101: LD_INT 9
7103: PPUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 3
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 70
7132: PUSH
7133: LD_INT 0
7135: GREATER
7136: AND
7137: IFFALSE 7154
7139: GO 7141
7141: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
7142: LD_EXP 64
7146: PPUSH
7147: LD_STRING D1a-Kur-1
7149: PPUSH
7150: CALL_OW 88
7154: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
7155: LD_EXP 7
7159: NOT
7160: PUSH
7161: LD_EXP 59
7165: PPUSH
7166: CALL_OW 302
7170: AND
7171: PUSH
7172: LD_INT 8
7174: PPUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 21
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 70
7203: PUSH
7204: LD_INT 0
7206: GREATER
7207: AND
7208: IFFALSE 7708
7210: GO 7212
7212: DISABLE
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
// begin enable ;
7219: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: PUSH
7254: FOR_IN
7255: IFFALSE 7706
// if See ( 6 , unit ) then
7257: LD_INT 6
7259: PPUSH
7260: LD_VAR 0 2
7264: PPUSH
7265: CALL_OW 292
7269: IFFALSE 7704
// begin meetPlatonov = true ;
7271: LD_ADDR_EXP 7
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// InGameOn ;
7279: CALL_OW 8
// DialogueOn ;
7283: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
7287: LD_ADDR_VAR 0 4
7291: PUSH
7292: LD_EXP 74
7296: PPUSH
7297: LD_INT 26
7299: PUSH
7300: LD_INT 1
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 72
7311: PPUSH
7312: LD_STRING D2-RSol1-1
7314: PPUSH
7315: LD_STRING 
7317: PPUSH
7318: LD_INT 0
7320: PPUSH
7321: CALL 3623 0 4
7325: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
7326: LD_EXP 59
7330: PPUSH
7331: LD_STRING D2-Bur-1
7333: PPUSH
7334: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
7338: LD_VAR 0 4
7342: PPUSH
7343: LD_STRING D2-RSol1-2
7345: PPUSH
7346: CALL_OW 88
// DialogueOff ;
7350: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
7354: LD_ADDR_VAR 0 3
7358: PUSH
7359: LD_INT 22
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 21
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 50
7381: PUSH
7382: EMPTY
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// for i := 1 to yourUnits do
7395: LD_ADDR_VAR 0 1
7399: PUSH
7400: DOUBLE
7401: LD_INT 1
7403: DEC
7404: ST_TO_ADDR
7405: LD_VAR 0 3
7409: PUSH
7410: FOR_TO
7411: IFFALSE 7480
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
7413: LD_VAR 0 3
7417: PUSH
7418: LD_VAR 0 1
7422: ARRAY
7423: PPUSH
7424: LD_EXP 50
7428: PUSH
7429: LD_VAR 0 1
7433: ARRAY
7434: PUSH
7435: LD_INT 1
7437: ARRAY
7438: PPUSH
7439: LD_EXP 50
7443: PUSH
7444: LD_VAR 0 1
7448: ARRAY
7449: PUSH
7450: LD_INT 2
7452: ARRAY
7453: PPUSH
7454: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
7458: LD_VAR 0 3
7462: PUSH
7463: LD_VAR 0 1
7467: ARRAY
7468: PPUSH
7469: LD_EXP 73
7473: PPUSH
7474: CALL_OW 179
// end ;
7478: GO 7410
7480: POP
7481: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7482: LD_EXP 59
7486: PPUSH
7487: CALL_OW 87
// wait ( 0 0$1 ) ;
7491: LD_INT 35
7493: PPUSH
7494: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
7498: LD_EXP 59
7502: PPUSH
7503: LD_EXP 73
7507: PPUSH
7508: CALL_OW 296
7512: PUSH
7513: LD_INT 4
7515: LESS
7516: IFFALSE 7482
// ComTurnUnit ( Platonov , Burlak ) ;
7518: LD_EXP 73
7522: PPUSH
7523: LD_EXP 59
7527: PPUSH
7528: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7532: LD_EXP 73
7536: PPUSH
7537: LD_STRING D2-Pla-2
7539: PPUSH
7540: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
7544: LD_EXP 59
7548: PPUSH
7549: LD_STRING D2-Bur-2
7551: PPUSH
7552: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
7556: LD_EXP 73
7560: PPUSH
7561: LD_STRING D2-Pla-3
7563: PPUSH
7564: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7568: LD_EXP 59
7572: PPUSH
7573: LD_STRING D2-Bur-3
7575: PPUSH
7576: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7580: LD_EXP 73
7584: PPUSH
7585: LD_STRING D2-Pla-4
7587: PPUSH
7588: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7592: LD_EXP 59
7596: PPUSH
7597: LD_STRING D2-Bur-4
7599: PPUSH
7600: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7604: LD_EXP 73
7608: PPUSH
7609: LD_STRING D2-Pla-5
7611: PPUSH
7612: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
7616: LD_INT 1
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: LD_INT 4
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL 3956 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7638: LD_EXP 73
7642: PPUSH
7643: LD_STRING D3-Pla-1
7645: PPUSH
7646: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7650: LD_EXP 59
7654: PPUSH
7655: LD_STRING D3-Bur-1
7657: PPUSH
7658: CALL_OW 88
// InGameOff ;
7662: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7666: LD_STRING M2a
7668: PPUSH
7669: CALL_OW 337
// ComFree ( Platonov ) ;
7673: LD_EXP 73
7677: PPUSH
7678: CALL_OW 139
// SetSide ( beria , 3 ) ;
7682: LD_INT 106
7684: PPUSH
7685: LD_INT 3
7687: PPUSH
7688: CALL_OW 235
// canExitBase = false ;
7692: LD_ADDR_EXP 19
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// exit ;
7700: POP
7701: POP
7702: GO 7708
// end ;
7704: GO 7254
7706: POP
7707: POP
// end ;
7708: PPOPN 4
7710: END
// export function Dial_LabConstructed ; begin
7711: LD_INT 0
7713: PPUSH
// labConstructed = true ;
7714: LD_ADDR_EXP 8
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// DialogueOn ;
7722: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7726: LD_EXP 59
7730: PPUSH
7731: LD_STRING D5a-Bur-1
7733: PPUSH
7734: CALL_OW 88
// if workshopConstructed then
7738: LD_EXP 9
7742: IFFALSE 7758
// Say ( Platonov , D5a-Pla-1a ) else
7744: LD_EXP 73
7748: PPUSH
7749: LD_STRING D5a-Pla-1a
7751: PPUSH
7752: CALL_OW 88
7756: GO 7770
// Say ( Platonov , D5a-Pla-1a ) ;
7758: LD_EXP 73
7762: PPUSH
7763: LD_STRING D5a-Pla-1a
7765: PPUSH
7766: CALL_OW 88
// DialogueOff ;
7770: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
7774: LD_STRING M2b
7776: PPUSH
7777: CALL_OW 337
// end ;
7781: LD_VAR 0 1
7785: RET
// export function Dial_WorkshopConstructed ; begin
7786: LD_INT 0
7788: PPUSH
// workshopConstructed = true ;
7789: LD_ADDR_EXP 9
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// DialogueOn ;
7797: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
7801: LD_EXP 59
7805: PPUSH
7806: LD_STRING D5b-Bur-1
7808: PPUSH
7809: CALL_OW 88
// if labConstructed then
7813: LD_EXP 8
7817: IFFALSE 7833
// Say ( Platonov , D5b-Pla-1 ) else
7819: LD_EXP 73
7823: PPUSH
7824: LD_STRING D5b-Pla-1
7826: PPUSH
7827: CALL_OW 88
7831: GO 7845
// Say ( Platonov , D5b-Pla-1a ) ;
7833: LD_EXP 73
7837: PPUSH
7838: LD_STRING D5b-Pla-1a
7840: PPUSH
7841: CALL_OW 88
// DialogueOff ;
7845: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
7849: LD_STRING M2c
7851: PPUSH
7852: CALL_OW 337
// end ;
7856: LD_VAR 0 1
7860: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
7861: LD_INT 0
7863: PPUSH
// wait ( 0 0$1 ) ;
7864: LD_INT 35
7866: PPUSH
7867: CALL_OW 67
// CenterNowOnUnits ( building ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 21
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: PPUSH
7909: CALL_OW 141
// DialogueOn ;
7913: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
7917: LD_EXP 73
7921: PPUSH
7922: LD_STRING D6-Pla-1
7924: PPUSH
7925: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
7929: LD_EXP 59
7933: PPUSH
7934: LD_STRING D6-Bur-1
7936: PPUSH
7937: CALL_OW 88
// DialogueOff ;
7941: CALL_OW 7
// case GetBType ( building ) of b_lab :
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 266
7954: PUSH
7955: LD_INT 6
7957: DOUBLE
7958: EQUAL
7959: IFTRUE 7963
7961: GO 8003
7963: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
7964: LD_INT 106
7966: PPUSH
7967: CALL_OW 274
7971: PPUSH
7972: LD_INT 1
7974: PPUSH
7975: LD_INT 106
7977: PPUSH
7978: CALL_OW 274
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 275
7990: PUSH
7991: LD_EXP 51
7995: PLUS
7996: PPUSH
7997: CALL_OW 277
8001: GO 8196
8003: LD_INT 2
8005: DOUBLE
8006: EQUAL
8007: IFTRUE 8011
8009: GO 8051
8011: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
8012: LD_INT 106
8014: PPUSH
8015: CALL_OW 274
8019: PPUSH
8020: LD_INT 1
8022: PPUSH
8023: LD_INT 106
8025: PPUSH
8026: CALL_OW 274
8030: PPUSH
8031: LD_INT 1
8033: PPUSH
8034: CALL_OW 275
8038: PUSH
8039: LD_EXP 52
8043: PLUS
8044: PPUSH
8045: CALL_OW 277
8049: GO 8196
8051: LD_INT 26
8053: DOUBLE
8054: EQUAL
8055: IFTRUE 8059
8057: GO 8099
8059: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
8060: LD_INT 106
8062: PPUSH
8063: CALL_OW 274
8067: PPUSH
8068: LD_INT 1
8070: PPUSH
8071: LD_INT 106
8073: PPUSH
8074: CALL_OW 274
8078: PPUSH
8079: LD_INT 1
8081: PPUSH
8082: CALL_OW 275
8086: PUSH
8087: LD_EXP 53
8091: PLUS
8092: PPUSH
8093: CALL_OW 277
8097: GO 8196
8099: LD_INT 4
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8147
8107: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
8108: LD_INT 106
8110: PPUSH
8111: CALL_OW 274
8115: PPUSH
8116: LD_INT 1
8118: PPUSH
8119: LD_INT 106
8121: PPUSH
8122: CALL_OW 274
8126: PPUSH
8127: LD_INT 1
8129: PPUSH
8130: CALL_OW 275
8134: PUSH
8135: LD_EXP 54
8139: PLUS
8140: PPUSH
8141: CALL_OW 277
8145: GO 8196
8147: LD_INT 31
8149: DOUBLE
8150: EQUAL
8151: IFTRUE 8155
8153: GO 8195
8155: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
8156: LD_INT 106
8158: PPUSH
8159: CALL_OW 274
8163: PPUSH
8164: LD_INT 1
8166: PPUSH
8167: LD_INT 106
8169: PPUSH
8170: CALL_OW 274
8174: PPUSH
8175: LD_INT 1
8177: PPUSH
8178: CALL_OW 275
8182: PUSH
8183: LD_EXP 55
8187: PLUS
8188: PPUSH
8189: CALL_OW 277
8193: GO 8196
8195: POP
// RemoveUnit ( building ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 64
// end ;
8205: LD_VAR 0 2
8209: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
8210: LD_EXP 9
8214: PUSH
8215: LD_EXP 8
8219: AND
8220: IFFALSE 8329
8222: GO 8224
8224: DISABLE
// begin DialogueOn ;
8225: CALL_OW 6
// if engineResearched then
8229: LD_EXP 10
8233: IFFALSE 8261
// begin Say ( Burlak , D7b-Bur-1 ) ;
8235: LD_EXP 59
8239: PPUSH
8240: LD_STRING D7b-Bur-1
8242: PPUSH
8243: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8247: LD_EXP 73
8251: PPUSH
8252: LD_STRING D7b-Pla-1
8254: PPUSH
8255: CALL_OW 88
// end else
8259: GO 8285
// begin Say ( Burlak , D7a-Bur-1 ) ;
8261: LD_EXP 59
8265: PPUSH
8266: LD_STRING D7a-Bur-1
8268: PPUSH
8269: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8273: LD_EXP 73
8277: PPUSH
8278: LD_STRING D7a-Pla-1
8280: PPUSH
8281: CALL_OW 88
// end ; DialogueOff ;
8285: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8289: LD_STRING M2
8291: PPUSH
8292: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
8296: LD_INT 5
8298: PPUSH
8299: LD_EXP 73
8303: PPUSH
8304: CALL_OW 250
8308: PPUSH
8309: LD_EXP 73
8313: PPUSH
8314: CALL_OW 251
8318: PPUSH
8319: LD_INT 5
8321: PPUSH
8322: LD_INT 1
8324: PPUSH
8325: CALL_OW 56
// end ;
8329: END
// export function Dial_NewCrates ( x , y ) ; begin
8330: LD_INT 0
8332: PPUSH
// wait ( 0 0$18 ) ;
8333: LD_INT 630
8335: PPUSH
8336: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
8340: LD_EXP 73
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: LD_VAR 0 2
8354: PPUSH
8355: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
8359: LD_EXP 73
8363: PPUSH
8364: LD_STRING D4-Pla-1
8366: PPUSH
8367: CALL_OW 88
// end ;
8371: LD_VAR 0 3
8375: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
8376: LD_INT 0
8378: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8379: LD_ADDR_EXP 13
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 3
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: LD_INT 21
8396: PUSH
8397: LD_INT 2
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: ST_TO_ADDR
// constructedFirstVehicle = true ;
8417: LD_ADDR_EXP 12
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// InGameOn ;
8425: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: CALL_OW 87
// wait ( 0 0$3 ) ;
8438: LD_INT 105
8440: PPUSH
8441: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
8445: LD_EXP 59
8449: PPUSH
8450: LD_STRING D9-Bur-1
8452: PPUSH
8453: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
8457: LD_EXP 73
8461: PPUSH
8462: LD_EXP 13
8466: PPUSH
8467: CALL_OW 250
8471: PPUSH
8472: LD_EXP 13
8476: PPUSH
8477: CALL_OW 251
8481: PPUSH
8482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8486: LD_INT 35
8488: PPUSH
8489: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
8493: LD_EXP 73
8497: PPUSH
8498: LD_EXP 13
8502: PPUSH
8503: CALL_OW 296
8507: PUSH
8508: LD_INT 4
8510: LESS
8511: IFFALSE 8486
// ComTurnUnit ( Platonov , firstVeh ) ;
8513: LD_EXP 73
8517: PPUSH
8518: LD_EXP 13
8522: PPUSH
8523: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
8527: LD_EXP 73
8531: PPUSH
8532: LD_STRING D9-Pla-1
8534: PPUSH
8535: CALL_OW 88
// InGameOff ;
8539: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
8543: LD_STRING M3
8545: PPUSH
8546: CALL_OW 337
// canExitBase = true ;
8550: LD_ADDR_EXP 19
8554: PUSH
8555: LD_INT 1
8557: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
8558: LD_EXP 73
8562: PPUSH
8563: LD_INT 112
8565: PPUSH
8566: LD_INT 97
8568: PPUSH
8569: CALL_OW 111
// end ;
8573: LD_VAR 0 2
8577: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
8578: LD_EXP 13
8582: PPUSH
8583: LD_INT 9
8585: PPUSH
8586: CALL_OW 308
8590: PUSH
8591: LD_EXP 14
8595: NOT
8596: AND
8597: IFFALSE 9449
8599: GO 8601
8601: DISABLE
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
8606: PPUSH
// begin vehicleForKurin = true ;
8607: LD_ADDR_EXP 14
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: LD_EXP 66
8624: PPUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PPUSH
8635: CALL_OW 72
8639: PUSH
8640: LD_INT 1
8642: ARRAY
8643: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
8644: LD_ADDR_VAR 0 3
8648: PUSH
8649: LD_EXP 66
8653: PPUSH
8654: LD_INT 25
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 72
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: ST_TO_ADDR
// InGameOn ;
8673: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
8677: LD_EXP 64
8681: PPUSH
8682: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
8686: LD_EXP 13
8690: PPUSH
8691: LD_EXP 64
8695: PPUSH
8696: CALL_OW 250
8700: PPUSH
8701: LD_EXP 64
8705: PPUSH
8706: CALL_OW 251
8710: PPUSH
8711: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
8715: LD_EXP 64
8719: PPUSH
8720: LD_STRING D10-Kur-1
8722: PPUSH
8723: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8727: LD_INT 35
8729: PPUSH
8730: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
8734: LD_EXP 13
8738: PPUSH
8739: LD_EXP 64
8743: PPUSH
8744: CALL_OW 250
8748: PPUSH
8749: LD_EXP 64
8753: PPUSH
8754: CALL_OW 251
8758: PPUSH
8759: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
8763: LD_EXP 13
8767: PPUSH
8768: LD_EXP 64
8772: PPUSH
8773: CALL_OW 296
8777: PUSH
8778: LD_INT 9
8780: LESS
8781: IFFALSE 8727
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
8783: LD_EXP 13
8787: PPUSH
8788: CALL_OW 313
8792: PPUSH
8793: CALL_OW 121
// wait ( 0 0$1 ) ;
8797: LD_INT 35
8799: PPUSH
8800: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
8804: LD_EXP 13
8808: PPUSH
8809: CALL_OW 256
8813: PUSH
8814: LD_INT 1000
8816: LESS
8817: IFFALSE 8849
// begin ComExitBuilding ( mech ) ;
8819: LD_VAR 0 3
8823: PPUSH
8824: CALL_OW 122
// wait ( 0 0$1 ) ;
8828: LD_INT 35
8830: PPUSH
8831: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_EXP 13
8844: PPUSH
8845: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
8849: LD_EXP 13
8853: PPUSH
8854: CALL_OW 261
8858: PUSH
8859: LD_INT 90
8861: LESS
8862: IFFALSE 8897
// begin ComExitBuilding ( eng ) ;
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 122
// wait ( 0 0$1 ) ;
8873: LD_INT 35
8875: PPUSH
8876: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 71
8887: PPUSH
8888: LD_EXP 13
8892: PPUSH
8893: CALL 4194 0 3
// end ; repeat wait ( 0 0$1 ) ;
8897: LD_INT 35
8899: PPUSH
8900: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
8904: LD_EXP 13
8908: PPUSH
8909: CALL_OW 256
8913: PUSH
8914: LD_INT 1000
8916: EQUAL
8917: PUSH
8918: LD_EXP 13
8922: PPUSH
8923: CALL_OW 261
8927: PUSH
8928: LD_INT 90
8930: GREATER
8931: AND
8932: IFFALSE 8897
// ComEnterUnit ( eng , kirov ) ;
8934: LD_VAR 0 2
8938: PPUSH
8939: LD_INT 71
8941: PPUSH
8942: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
8946: LD_EXP 13
8950: PPUSH
8951: LD_INT 6
8953: PPUSH
8954: CALL_OW 235
// if belkovReturn then
8958: LD_EXP 6
8962: IFFALSE 9048
// begin if IsInUnit ( Belkov ) then
8964: LD_EXP 61
8968: PPUSH
8969: CALL_OW 310
8973: IFFALSE 8984
// ComExitBuilding ( Belkov ) ;
8975: LD_EXP 61
8979: PPUSH
8980: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8984: LD_INT 35
8986: PPUSH
8987: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
8991: LD_EXP 61
8995: PPUSH
8996: LD_EXP 13
9000: PPUSH
9001: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
9005: LD_EXP 61
9009: PPUSH
9010: CALL_OW 310
9014: PUSH
9015: LD_EXP 13
9019: EQUAL
9020: IFFALSE 8984
// Say ( Belkov , D10-Bel-1 ) ;
9022: LD_EXP 61
9026: PPUSH
9027: LD_STRING D10-Bel-1
9029: PPUSH
9030: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
9034: LD_EXP 64
9038: PPUSH
9039: LD_STRING D10-Kur-2
9041: PPUSH
9042: CALL_OW 88
// end else
9046: GO 9174
// begin if IsInUnit ( Belkov2 ) then
9048: LD_EXP 65
9052: PPUSH
9053: CALL_OW 310
9057: IFFALSE 9068
// ComExitBuilding ( Belkov2 ) ;
9059: LD_EXP 65
9063: PPUSH
9064: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9068: LD_INT 35
9070: PPUSH
9071: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
9075: LD_EXP 65
9079: PPUSH
9080: LD_EXP 13
9084: PPUSH
9085: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
9089: LD_EXP 65
9093: PPUSH
9094: CALL_OW 310
9098: PUSH
9099: LD_EXP 13
9103: EQUAL
9104: IFFALSE 9068
// meetBelkovBrother = true ;
9106: LD_ADDR_EXP 4
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
9114: LD_EXP 65
9118: PPUSH
9119: LD_STRING D10-Bel-1
9121: PPUSH
9122: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
9126: LD_EXP 59
9130: PPUSH
9131: LD_STRING D10-Bur-1
9133: PPUSH
9134: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
9138: LD_EXP 65
9142: PPUSH
9143: LD_STRING D10-Bel-2
9145: PPUSH
9146: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
9150: LD_EXP 59
9154: PPUSH
9155: LD_STRING D10-Bur-2
9157: PPUSH
9158: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
9162: LD_EXP 64
9166: PPUSH
9167: LD_STRING D10-Kur-2a
9169: PPUSH
9170: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
9174: LD_ADDR_EXP 71
9178: PUSH
9179: EMPTY
9180: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
9181: LD_ADDR_EXP 72
9185: PUSH
9186: EMPTY
9187: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
9188: LD_ADDR_EXP 22
9192: PUSH
9193: LD_INT 1
9195: ST_TO_ADDR
// CreateBelkovTeam ;
9196: CALL 5506 0 0
// ComExitBuilding ( belkovTeam ) ;
9200: LD_EXP 70
9204: PPUSH
9205: CALL_OW 122
// wait ( 0 0$1 ) ;
9209: LD_INT 35
9211: PPUSH
9212: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9216: LD_ADDR_EXP 69
9220: PUSH
9221: LD_INT 22
9223: PUSH
9224: LD_INT 6
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 21
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 69
9249: PUSH
9250: LD_INT 1
9252: ARRAY
9253: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
9254: LD_ADDR_EXP 70
9258: PUSH
9259: LD_EXP 70
9263: PUSH
9264: LD_EXP 69
9268: ADD
9269: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
9270: LD_EXP 70
9274: PPUSH
9275: LD_INT 147
9277: PPUSH
9278: LD_INT 102
9280: PPUSH
9281: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
9285: LD_EXP 70
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: LD_INT 94
9295: PPUSH
9296: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
9300: LD_EXP 70
9304: PPUSH
9305: LD_INT 123
9307: PPUSH
9308: LD_INT 74
9310: PPUSH
9311: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
9315: LD_EXP 70
9319: PPUSH
9320: LD_INT 111
9322: PPUSH
9323: LD_INT 48
9325: PPUSH
9326: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
9330: LD_EXP 70
9334: PPUSH
9335: LD_INT 122
9337: PPUSH
9338: LD_INT 43
9340: PPUSH
9341: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
9345: LD_EXP 70
9349: PPUSH
9350: LD_INT 129
9352: PPUSH
9353: LD_INT 32
9355: PPUSH
9356: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
9360: LD_EXP 70
9364: PPUSH
9365: LD_INT 132
9367: PPUSH
9368: LD_INT 22
9370: PPUSH
9371: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9375: LD_INT 35
9377: PPUSH
9378: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9382: LD_EXP 69
9386: PPUSH
9387: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
9391: LD_EXP 69
9395: PPUSH
9396: LD_INT 10
9398: PPUSH
9399: CALL_OW 299
9403: PUSH
9404: LD_INT 10
9406: LESS
9407: IFFALSE 9375
// CenterNowOnUnits ( Kurin ) ;
9409: LD_EXP 64
9413: PPUSH
9414: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
9418: LD_EXP 64
9422: PPUSH
9423: LD_STRING D10-Kur-2b
9425: PPUSH
9426: CALL_OW 88
// InGameOff ;
9430: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
9434: LD_STRING M4
9436: PPUSH
9437: CALL_OW 337
// backToBeria1 = true ;
9441: LD_ADDR_EXP 15
9445: PUSH
9446: LD_INT 1
9448: ST_TO_ADDR
// end ;
9449: PPOPN 3
9451: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
9452: LD_INT 9
9454: PPUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 21
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 70
9483: PUSH
9484: LD_EXP 14
9488: AND
9489: IFFALSE 9506
9491: GO 9493
9493: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
9494: LD_EXP 64
9498: PPUSH
9499: LD_STRING D1a-Kur-1a
9501: PPUSH
9502: CALL_OW 88
9506: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
9507: LD_EXP 22
9511: IFFALSE 9835
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
// begin enable ;
9520: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
9521: LD_INT 10
9523: PPUSH
9524: LD_INT 22
9526: PUSH
9527: LD_INT 6
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 70
9538: PUSH
9539: LD_INT 0
9541: EQUAL
9542: IFFALSE 9546
// exit ;
9544: GO 9835
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
9546: LD_ADDR_VAR 0 1
9550: PUSH
9551: LD_INT 10
9553: PPUSH
9554: LD_INT 22
9556: PUSH
9557: LD_INT 6
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 70
9568: PUSH
9569: FOR_IN
9570: IFFALSE 9821
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 ) then
9572: LD_VAR 0 1
9576: PPUSH
9577: CALL_OW 247
9581: PUSH
9582: LD_INT 1
9584: EQUAL
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: LD_EXP 61
9595: EQUAL
9596: NOT
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: LD_EXP 65
9607: EQUAL
9608: NOT
9609: AND
9610: AND
9611: IFFALSE 9652
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
9613: LD_ADDR_EXP 23
9617: PUSH
9618: LD_EXP 23
9622: PUSH
9623: LD_INT 1
9625: PLUS
9626: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
9627: LD_ADDR_EXP 71
9631: PUSH
9632: LD_EXP 71
9636: PUSH
9637: LD_VAR 0 1
9641: ADD
9642: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9643: LD_VAR 0 1
9647: PPUSH
9648: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
9652: LD_VAR 0 1
9656: PPUSH
9657: CALL_OW 247
9661: PUSH
9662: LD_INT 2
9664: EQUAL
9665: IFFALSE 9819
// begin driver = UnitsInside ( unit ) ;
9667: LD_ADDR_VAR 0 2
9671: PUSH
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 313
9681: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
9682: LD_VAR 0 2
9686: PUSH
9687: LD_INT 1
9689: ARRAY
9690: PUSH
9691: LD_EXP 61
9695: EQUAL
9696: IFFALSE 9721
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
9698: LD_EXP 61
9702: PPUSH
9703: LD_STRING 02_TmpBelkov
9705: PPUSH
9706: CALL_OW 38
// RemoveUnit ( unit ) ;
9710: LD_VAR 0 1
9714: PPUSH
9715: CALL_OW 64
// end else
9719: GO 9742
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
9721: LD_EXP 65
9725: PPUSH
9726: LD_STRING 02_TmpBelkov2
9728: PPUSH
9729: CALL_OW 38
// RemoveUnit ( unit ) ;
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
9742: LD_ADDR_EXP 72
9746: PUSH
9747: LD_EXP 72
9751: PUSH
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 265
9761: PUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 262
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 263
9781: PUSH
9782: LD_VAR 0 1
9786: PPUSH
9787: CALL_OW 264
9791: PUSH
9792: LD_VAR 0 1
9796: PPUSH
9797: CALL_OW 261
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: ADD
9809: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 64
// end ; end ;
9819: GO 9569
9821: POP
9822: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
9823: LD_EXP 71
9827: PPUSH
9828: LD_STRING 02_TmpBelkovTeam
9830: PPUSH
9831: CALL_OW 38
// end ;
9835: PPOPN 2
9837: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
9838: LD_INT 8
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 71
9869: PUSH
9870: LD_INT 0
9872: EQUAL
9873: PUSH
9874: LD_EXP 15
9878: AND
9879: IFFALSE 10065
9881: GO 9883
9883: DISABLE
9884: LD_INT 0
9886: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
9887: LD_ADDR_VAR 0 1
9891: PUSH
9892: LD_EXP 66
9896: PPUSH
9897: LD_INT 25
9899: PUSH
9900: LD_INT 2
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 72
9911: ST_TO_ADDR
// backToBeria1 = false ;
9912: LD_ADDR_EXP 15
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// canExitBase = false ;
9920: LD_ADDR_EXP 19
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
9928: LD_EXP 73
9932: PPUSH
9933: LD_STRING D11-Pla-1
9935: PPUSH
9936: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
9940: LD_INT 22
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: PUSH
9969: LD_INT 1
9971: GREATER
9972: IFFALSE 9988
// Say ( Burlak , D11-Bur-1a ) else
9974: LD_EXP 59
9978: PPUSH
9979: LD_STRING D11-Bur-1a
9981: PPUSH
9982: CALL_OW 88
9986: GO 10000
// Say ( Burlak , D11-Bur-1 ) ;
9988: LD_EXP 59
9992: PPUSH
9993: LD_STRING D11-Bur-1
9995: PPUSH
9996: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
10000: LD_STRING M5
10002: PPUSH
10003: CALL_OW 337
// construcMoreVehicles = true ;
10007: LD_ADDR_EXP 17
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// spawnCrates = true ;
10015: LD_ADDR_EXP 21
10019: PUSH
10020: LD_INT 1
10022: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
10032: LD_VAR 0 1
10036: PPUSH
10037: LD_INT 2
10039: PPUSH
10040: LD_INT 159
10042: PPUSH
10043: LD_INT 112
10045: PPUSH
10046: LD_INT 0
10048: PPUSH
10049: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
10053: LD_VAR 0 1
10057: PPUSH
10058: LD_INT 71
10060: PPUSH
10061: CALL_OW 180
// end ;
10065: PPOPN 1
10067: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
10068: LD_EXP 18
10072: PUSH
10073: LD_INT 22
10075: PUSH
10076: LD_INT 3
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 21
10085: PUSH
10086: LD_INT 1
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PPUSH
10097: CALL_OW 69
10101: GREATEREQUAL
10102: IFFALSE 10966
10104: GO 10106
10106: DISABLE
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
// begin canRemoveBelkovUnits = false ;
10111: LD_ADDR_EXP 22
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// spawnCrates = false ;
10119: LD_ADDR_EXP 21
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
10127: LD_INT 22
10129: PUSH
10130: LD_INT 3
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 21
10142: PUSH
10143: LD_INT 1
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 21
10152: PUSH
10153: LD_INT 2
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PPUSH
10169: CALL_OW 69
10173: PPUSH
10174: CALL_OW 141
// InGameOn ;
10178: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
10182: LD_EXP 73
10186: PPUSH
10187: CALL_OW 85
// DialogueOn ;
10191: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
10195: LD_EXP 59
10199: PPUSH
10200: LD_STRING D12-Bur-1
10202: PPUSH
10203: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
10207: LD_EXP 73
10211: PPUSH
10212: LD_STRING D12-Pla-1
10214: PPUSH
10215: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10219: LD_EXP 59
10223: PPUSH
10224: LD_STRING D12-Bur-2
10226: PPUSH
10227: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10231: LD_EXP 73
10235: PPUSH
10236: LD_STRING D12-Pla-2
10238: PPUSH
10239: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10243: LD_EXP 59
10247: PPUSH
10248: LD_STRING D12-Bur-3
10250: PPUSH
10251: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10255: LD_EXP 73
10259: PPUSH
10260: LD_STRING D12-Pla-3
10262: PPUSH
10263: CALL_OW 88
// DialogueOff ;
10267: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
10271: LD_INT 6
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 80
// PrepareAmerican ;
10287: CALL 2635 0 0
// PrepareBelkovReturnTeam ;
10291: CALL 1084 0 0
// if IsOK ( Belkov ) then
10295: LD_EXP 61
10299: PPUSH
10300: CALL_OW 302
10304: IFFALSE 10318
// tmpBelkov = Belkov else
10306: LD_ADDR_VAR 0 1
10310: PUSH
10311: LD_EXP 61
10315: ST_TO_ADDR
10316: GO 10328
// tmpBelkov = Belkov2 ;
10318: LD_ADDR_VAR 0 1
10322: PUSH
10323: LD_EXP 65
10327: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
10328: LD_EXP 69
10332: PPUSH
10333: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
10337: LD_EXP 77
10341: PPUSH
10342: LD_STRING D13-Sol1-1
10344: PPUSH
10345: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_STRING D13-Bel-1
10356: PPUSH
10357: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10361: LD_EXP 64
10365: PPUSH
10366: LD_STRING D13-Kur-1
10368: PPUSH
10369: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
10373: LD_VAR 0 1
10377: PPUSH
10378: LD_STRING D13-Bel-2
10380: PPUSH
10381: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
10385: LD_EXP 70
10389: PPUSH
10390: LD_INT 121
10392: PPUSH
10393: LD_INT 29
10395: PPUSH
10396: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10400: LD_INT 35
10402: PPUSH
10403: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
10407: LD_EXP 69
10411: PPUSH
10412: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
10416: LD_ADDR_VAR 0 2
10420: PUSH
10421: LD_EXP 70
10425: PPUSH
10426: LD_INT 21
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 56
10438: PUSH
10439: EMPTY
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 72
10450: PPUSH
10451: LD_EXP 69
10455: PPUSH
10456: CALL_OW 74
10460: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
10461: LD_EXP 69
10465: PPUSH
10466: LD_VAR 0 2
10470: PPUSH
10471: CALL_OW 296
10475: PUSH
10476: LD_INT 5
10478: LESS
10479: IFFALSE 10492
// ComStop ( kirovVehicle ) else
10481: LD_EXP 69
10485: PPUSH
10486: CALL_OW 141
10490: GO 10507
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
10492: LD_EXP 70
10496: PPUSH
10497: LD_INT 121
10499: PPUSH
10500: LD_INT 29
10502: PPUSH
10503: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
10507: LD_EXP 70
10511: PPUSH
10512: LD_EXP 77
10516: PPUSH
10517: CALL_OW 74
10521: PPUSH
10522: LD_EXP 77
10526: PPUSH
10527: CALL_OW 296
10531: PUSH
10532: LD_INT 5
10534: LESS
10535: IFFALSE 10400
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
10537: LD_EXP 69
10541: PUSH
10542: LD_EXP 77
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PPUSH
10551: CALL_OW 87
// ComWalk ( trapTeam ) ;
10555: LD_EXP 78
10559: PPUSH
10560: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
10564: LD_EXP 78
10568: PPUSH
10569: LD_EXP 69
10573: PPUSH
10574: CALL_OW 179
// ComStop ( belkovTeam ) ;
10578: LD_EXP 70
10582: PPUSH
10583: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
10587: LD_EXP 70
10591: PPUSH
10592: LD_EXP 77
10596: PPUSH
10597: CALL_OW 179
// music_class = music_combat ;
10601: LD_ADDR_OWVAR 72
10605: PUSH
10606: LD_INT 1
10608: ST_TO_ADDR
// Say ( trapCommander , D14-Sol1-1 ) ;
10609: LD_EXP 77
10613: PPUSH
10614: LD_STRING D14-Sol1-1
10616: PPUSH
10617: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
10621: LD_VAR 0 1
10625: PPUSH
10626: LD_STRING D14-Bel-1
10628: PPUSH
10629: CALL_OW 88
// immortalBelkovTeam = true ;
10633: LD_ADDR_EXP 24
10637: PUSH
10638: LD_INT 1
10640: ST_TO_ADDR
// ComExitVehicle ( tmpBelkov ) ;
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 121
// wait ( 0 0$1 ) ;
10650: LD_INT 35
10652: PPUSH
10653: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
10657: LD_EXP 77
10661: PPUSH
10662: LD_EXP 69
10666: PPUSH
10667: CALL_OW 120
// AddComHold ( trapTeam ) ;
10671: LD_EXP 78
10675: PPUSH
10676: CALL_OW 200
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
10680: LD_INT 6
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: LD_INT 2
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 80
// ComMoveToArea ( belkovTeam , BelkovRetreatArea ) ;
10696: LD_EXP 70
10700: PPUSH
10701: LD_INT 15
10703: PPUSH
10704: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
10708: LD_INT 35
10710: PPUSH
10711: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
10724: LD_VAR 0 1
10728: PPUSH
10729: LD_INT 15
10731: PPUSH
10732: CALL_OW 308
10736: IFFALSE 10708
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_STRING D14-Bel-1a
10745: PPUSH
10746: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
10750: LD_EXP 64
10754: PPUSH
10755: LD_STRING D14-Kur-1
10757: PPUSH
10758: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
10762: LD_VAR 0 1
10766: PPUSH
10767: LD_STRING D14-Bel-2
10769: PPUSH
10770: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
10774: LD_EXP 64
10778: PPUSH
10779: LD_STRING D14-Kur-2
10781: PPUSH
10782: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
10786: LD_EXP 73
10790: PPUSH
10791: CALL_OW 85
// wait ( 0 0$2 ) ;
10795: LD_INT 70
10797: PPUSH
10798: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
10802: LD_EXP 59
10806: PPUSH
10807: LD_STRING D14a-Bur-1
10809: PPUSH
10810: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
10814: LD_EXP 73
10818: PPUSH
10819: LD_STRING D14a-Pla-1
10821: PPUSH
10822: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
10826: LD_EXP 59
10830: PPUSH
10831: LD_STRING D14a-Bur-2
10833: PPUSH
10834: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
10838: LD_EXP 73
10842: PPUSH
10843: LD_STRING D14a-Pla-2
10845: PPUSH
10846: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
10850: LD_EXP 59
10854: PPUSH
10855: LD_STRING D14a-Bur-3
10857: PPUSH
10858: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
10862: LD_EXP 73
10866: PPUSH
10867: LD_STRING D14a-Pla-3
10869: PPUSH
10870: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
10874: LD_EXP 59
10878: PPUSH
10879: LD_STRING D14a-Bur-4
10881: PPUSH
10882: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
10886: LD_EXP 73
10890: PPUSH
10891: LD_STRING D14a-Pla-4
10893: PPUSH
10894: CALL_OW 88
// InGameOff ;
10898: CALL_OW 9
// immortalBelkovTeam = false ;
10902: LD_ADDR_EXP 24
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// activateAMAI = true ;
10910: LD_ADDR_EXP 26
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// canExitBase = true ;
10918: LD_ADDR_EXP 19
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// canExploreMap = true ;
10926: LD_ADDR_EXP 20
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// construcMoreVehicles = false ;
10934: LD_ADDR_EXP 17
10938: PUSH
10939: LD_INT 0
10941: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
10942: LD_STRING M6
10944: PPUSH
10945: CALL_OW 337
// music_class = 0 ;
10949: LD_ADDR_OWVAR 72
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// ComFree ( trapTeam ) ;
10957: LD_EXP 78
10961: PPUSH
10962: CALL_OW 139
// end ;
10966: PPOPN 2
10968: END
// every 0 0$1 trigger immortalBelkovTeam do
10969: LD_EXP 24
10973: IFFALSE 10991
10975: GO 10977
10977: DISABLE
// begin enable ;
10978: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
10979: LD_EXP 70
10983: PPUSH
10984: LD_INT 1000
10986: PPUSH
10987: CALL_OW 234
// end ;
10991: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
10992: LD_EXP 20
10996: PUSH
10997: LD_EXP 35
11001: NOT
11002: AND
11003: PUSH
11004: LD_EXP 58
11008: PUSH
11009: LD_INT 0
11011: GREATER
11012: AND
11013: IFFALSE 11033
11015: GO 11017
11017: DISABLE
// begin enable ;
11018: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
11019: LD_ADDR_EXP 58
11023: PUSH
11024: LD_EXP 58
11028: PUSH
11029: LD_INT 35
11031: MINUS
11032: ST_TO_ADDR
// end ;
11033: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
11034: LD_EXP 20
11038: IFFALSE 11122
11040: GO 11042
11042: DISABLE
11043: LD_INT 0
11045: PPUSH
11046: PPUSH
// begin tmp = trapTeam ;
11047: LD_ADDR_VAR 0 2
11051: PUSH
11052: LD_EXP 78
11056: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
11057: LD_ADDR_VAR 0 2
11061: PUSH
11062: LD_VAR 0 2
11066: PUSH
11067: LD_EXP 77
11071: DIFF
11072: ST_TO_ADDR
// for i := 1 to rand ( 3 , 4 ) do
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: DOUBLE
11079: LD_INT 1
11081: DEC
11082: ST_TO_ADDR
11083: LD_INT 3
11085: PPUSH
11086: LD_INT 4
11088: PPUSH
11089: CALL_OW 12
11093: PUSH
11094: FOR_TO
11095: IFFALSE 11120
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
11097: LD_VAR 0 2
11101: PUSH
11102: LD_VAR 0 1
11106: ARRAY
11107: PPUSH
11108: LD_INT 87
11110: PPUSH
11111: LD_INT 18
11113: PPUSH
11114: CALL_OW 114
11118: GO 11094
11120: POP
11121: POP
// end ;
11122: PPOPN 2
11124: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
11125: LD_EXP 58
11129: PUSH
11130: LD_INT 70
11132: LESS
11133: PUSH
11134: LD_EXP 78
11138: AND
11139: IFFALSE 11160
11141: GO 11143
11143: DISABLE
// begin enable ;
11144: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
11145: LD_EXP 70
11149: PPUSH
11150: LD_INT 120
11152: PPUSH
11153: LD_INT 28
11155: PPUSH
11156: CALL_OW 114
// end ;
11160: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
11161: LD_EXP 27
11165: NOT
11166: PUSH
11167: LD_EXP 28
11171: NOT
11172: OR
11173: IFFALSE 11613
11175: GO 11177
11177: DISABLE
11178: LD_INT 0
11180: PPUSH
// begin enable ;
11181: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
11182: LD_ADDR_VAR 0 1
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 3
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 30
11209: PUSH
11210: LD_INT 31
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: PPUSH
11222: CALL_OW 69
11226: PUSH
11227: FOR_IN
11228: IFFALSE 11611
// begin if See ( 3 , bunker ) then
11230: LD_INT 3
11232: PPUSH
11233: LD_VAR 0 1
11237: PPUSH
11238: CALL_OW 292
11242: IFFALSE 11609
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
11244: LD_VAR 0 1
11248: PUSH
11249: LD_EXP 79
11253: IN
11254: PUSH
11255: LD_EXP 27
11259: NOT
11260: AND
11261: PUSH
11262: LD_INT 18
11264: PPUSH
11265: LD_INT 22
11267: PUSH
11268: LD_INT 3
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: PPUSH
11278: CALL_OW 70
11282: NOT
11283: AND
11284: IFFALSE 11455
// begin sawLeftBunker = true ;
11286: LD_ADDR_EXP 27
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
11294: LD_VAR 0 1
11298: PPUSH
11299: CALL_OW 85
// DialogueOn ;
11303: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
11307: LD_EXP 59
11311: PPUSH
11312: LD_STRING D15-Bur-1
11314: PPUSH
11315: CALL_OW 88
// if IsOK ( Gnyevko ) then
11319: LD_EXP 60
11323: PPUSH
11324: CALL_OW 302
11328: IFFALSE 11342
// Say ( Gnyevko , D15-Gny-1 ) ;
11330: LD_EXP 60
11334: PPUSH
11335: LD_STRING D15-Gny-1
11337: PPUSH
11338: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11342: LD_EXP 67
11346: PPUSH
11347: CALL_OW 302
11351: IFFALSE 11365
// Say ( Kovalyuk , D15-Kov-1 ) ;
11353: LD_EXP 67
11357: PPUSH
11358: LD_STRING D15-Kov-1
11360: PPUSH
11361: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
11365: LD_EXP 59
11369: PPUSH
11370: LD_STRING D15-Bur-2
11372: PPUSH
11373: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11377: LD_EXP 67
11381: PPUSH
11382: CALL_OW 302
11386: IFFALSE 11400
// Say ( Kovalyuk , D15-Kov-2 ) ;
11388: LD_EXP 67
11392: PPUSH
11393: LD_STRING D15-Kov-2
11395: PPUSH
11396: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
11400: LD_EXP 59
11404: PPUSH
11405: LD_STRING D15-Bur-3
11407: PPUSH
11408: CALL_OW 88
// DialogueOff ;
11412: CALL_OW 7
// if raportForPlatonov = 2 then
11416: LD_EXP 37
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: IFFALSE 11436
// raportForPlatonov = 1 else
11426: LD_ADDR_EXP 37
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
11434: GO 11444
// raportForPlatonov = 3 ;
11436: LD_ADDR_EXP 37
11440: PUSH
11441: LD_INT 3
11443: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
11444: LD_STRING M7
11446: PPUSH
11447: CALL_OW 337
// exit ;
11451: POP
11452: POP
11453: GO 11613
// end ; if bunker in rightBunkers and not sawRightBunker then
11455: LD_VAR 0 1
11459: PUSH
11460: LD_EXP 80
11464: IN
11465: PUSH
11466: LD_EXP 28
11470: NOT
11471: AND
11472: IFFALSE 11609
// begin sawRightBunker = true ;
11474: LD_ADDR_EXP 28
11478: PUSH
11479: LD_INT 1
11481: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
11482: LD_VAR 0 1
11486: PPUSH
11487: CALL_OW 85
// DialogueOn ;
11491: CALL_OW 6
// if IsOK ( Kovalyuk ) then
11495: LD_EXP 67
11499: PPUSH
11500: CALL_OW 302
11504: IFFALSE 11538
// begin if sawLeftBunker then
11506: LD_EXP 27
11510: IFFALSE 11526
// Say ( Kovalyuk , D16-Kov-1a ) else
11512: LD_EXP 67
11516: PPUSH
11517: LD_STRING D16-Kov-1a
11519: PPUSH
11520: CALL_OW 88
11524: GO 11538
// Say ( Kovalyuk , D16-Kov-1 ) ;
11526: LD_EXP 67
11530: PPUSH
11531: LD_STRING D16-Kov-1
11533: PPUSH
11534: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
11538: LD_EXP 59
11542: PPUSH
11543: LD_STRING D16-Bur-1
11545: PPUSH
11546: CALL_OW 88
// if IsOK ( Gnyevko ) then
11550: LD_EXP 60
11554: PPUSH
11555: CALL_OW 302
11559: IFFALSE 11573
// Say ( Gnyevko , D16-Gny-1 ) ;
11561: LD_EXP 60
11565: PPUSH
11566: LD_STRING D16-Gny-1
11568: PPUSH
11569: CALL_OW 88
// DialogueOff ;
11573: CALL_OW 7
// if raportForPlatonov = 3 then
11577: LD_EXP 37
11581: PUSH
11582: LD_INT 3
11584: EQUAL
11585: IFFALSE 11597
// raportForPlatonov = 1 else
11587: LD_ADDR_EXP 37
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
11595: GO 11605
// raportForPlatonov = 2 ;
11597: LD_ADDR_EXP 37
11601: PUSH
11602: LD_INT 2
11604: ST_TO_ADDR
// exit ;
11605: POP
11606: POP
11607: GO 11613
// end ; end ; end ;
11609: GO 11227
11611: POP
11612: POP
// end ;
11613: PPOPN 1
11615: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
11616: LD_EXP 30
11620: NOT
11621: PUSH
11622: LD_EXP 80
11626: AND
11627: PUSH
11628: LD_EXP 67
11632: PPUSH
11633: CALL_OW 302
11637: PUSH
11638: LD_EXP 60
11642: PPUSH
11643: CALL_OW 302
11647: OR
11648: AND
11649: IFFALSE 11837
11651: GO 11653
11653: DISABLE
11654: LD_INT 0
11656: PPUSH
// begin enable ;
11657: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11658: LD_ADDR_VAR 0 1
11662: PUSH
11663: LD_INT 22
11665: PUSH
11666: LD_INT 3
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 2
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 69
11709: PUSH
11710: FOR_IN
11711: IFFALSE 11835
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
11713: LD_VAR 0 1
11717: PPUSH
11718: CALL_OW 320
11722: PUSH
11723: LD_EXP 80
11727: PUSH
11728: LD_INT 1
11730: ARRAY
11731: EQUAL
11732: PUSH
11733: LD_VAR 0 1
11737: PPUSH
11738: CALL_OW 320
11742: PUSH
11743: LD_EXP 80
11747: PUSH
11748: LD_INT 2
11750: ARRAY
11751: EQUAL
11752: OR
11753: IFFALSE 11833
// begin dialogAttackRightBunkers = true ;
11755: LD_ADDR_EXP 30
11759: PUSH
11760: LD_INT 1
11762: ST_TO_ADDR
// DialogueOn ;
11763: CALL_OW 6
// if IsOK ( Gnyevko ) then
11767: LD_EXP 60
11771: PPUSH
11772: CALL_OW 302
11776: IFFALSE 11790
// Say ( Gnyevko , D16A-Gny-1 ) ;
11778: LD_EXP 60
11782: PPUSH
11783: LD_STRING D16A-Gny-1
11785: PPUSH
11786: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11790: LD_EXP 67
11794: PPUSH
11795: CALL_OW 302
11799: IFFALSE 11813
// Say ( Kovalyuk , D16A-Kov-1 ) ;
11801: LD_EXP 67
11805: PPUSH
11806: LD_STRING D16A-Kov-1
11808: PPUSH
11809: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
11813: LD_EXP 59
11817: PPUSH
11818: LD_STRING D16A-Bur-1
11820: PPUSH
11821: CALL_OW 88
// DialogueOff ;
11825: CALL_OW 7
// exit ;
11829: POP
11830: POP
11831: GO 11837
// end ; end ;
11833: GO 11710
11835: POP
11836: POP
// end ;
11837: PPOPN 1
11839: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
11840: LD_INT 18
11842: PPUSH
11843: LD_INT 22
11845: PUSH
11846: LD_INT 3
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: PPUSH
11856: CALL_OW 70
11860: PUSH
11861: LD_EXP 27
11865: NOT
11866: AND
11867: IFFALSE 12250
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
// begin sawLeftBunker = true ;
11875: LD_ADDR_EXP 27
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if playerGetSupport then
11883: LD_EXP 32
11887: IFFALSE 11906
// decsToChoose = [ 1 , 3 ] else
11889: LD_ADDR_VAR 0 1
11893: PUSH
11894: LD_INT 1
11896: PUSH
11897: LD_INT 3
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: ST_TO_ADDR
11904: GO 11925
// decsToChoose = [ 1 , 2 , 3 ] ;
11906: LD_ADDR_VAR 0 1
11910: PUSH
11911: LD_INT 1
11913: PUSH
11914: LD_INT 2
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
11925: LD_STRING QAttackBw
11927: PPUSH
11928: LD_VAR 0 1
11932: PPUSH
11933: CALL_OW 98
11937: PUSH
11938: LD_INT 1
11940: DOUBLE
11941: EQUAL
11942: IFTRUE 11946
11944: GO 12039
11946: POP
// begin DialogueOn ;
11947: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
11951: LD_EXP 59
11955: PPUSH
11956: LD_STRING D17-Bur-1
11958: PPUSH
11959: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
11963: LD_EXP 73
11967: PPUSH
11968: LD_STRING D17-Pla-1
11970: PPUSH
11971: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
11975: LD_EXP 59
11979: PPUSH
11980: LD_STRING D17-Bur-2
11982: PPUSH
11983: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
11987: LD_EXP 73
11991: PPUSH
11992: LD_STRING D17-Pla-2
11994: PPUSH
11995: CALL_OW 94
// DialogueOff ;
11999: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
12003: LD_EXP 40
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: LD_INT 3
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: IN
12018: NOT
12019: IFFALSE 12037
// begin initiative = 1 ;
12021: LD_ADDR_EXP 40
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// platonovOpinion = 2 ;
12029: LD_ADDR_EXP 5
12033: PUSH
12034: LD_INT 2
12036: ST_TO_ADDR
// end ; end ; 2 :
12037: GO 12180
12039: LD_INT 2
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12152
12047: POP
// begin DialogueOn ;
12048: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12052: LD_EXP 59
12056: PPUSH
12057: LD_STRING D18-Bur-1
12059: PPUSH
12060: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12064: LD_EXP 73
12068: PPUSH
12069: LD_STRING D18-Pla-1
12071: PPUSH
12072: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12076: LD_EXP 59
12080: PPUSH
12081: LD_STRING D18-Bur-2
12083: PPUSH
12084: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
12088: LD_EXP 73
12092: PPUSH
12093: LD_STRING D18-Pla-2
12095: PPUSH
12096: CALL_OW 94
// DialogueOff ;
12100: CALL_OW 7
// playerGetSupport = true ;
12104: LD_ADDR_EXP 32
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
// medalForGetSupport = false ;
12112: LD_ADDR_EXP 38
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// PlatonovSendSupport ;
12120: CALL 5937 0 0
// if initiative <> 3 then
12124: LD_EXP 40
12128: PUSH
12129: LD_INT 3
12131: NONEQUAL
12132: IFFALSE 12150
// begin initiative = 1 ;
12134: LD_ADDR_EXP 40
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// platonovOpinion = 2 ;
12142: LD_ADDR_EXP 5
12146: PUSH
12147: LD_INT 2
12149: ST_TO_ADDR
// end ; end ; 3 :
12150: GO 12180
12152: LD_INT 3
12154: DOUBLE
12155: EQUAL
12156: IFTRUE 12160
12158: GO 12179
12160: POP
// begin initiative = 3 ;
12161: LD_ADDR_EXP 40
12165: PUSH
12166: LD_INT 3
12168: ST_TO_ADDR
// platonovOpinion = 0 ;
12169: LD_ADDR_EXP 5
12173: PUSH
12174: LD_INT 0
12176: ST_TO_ADDR
// end ; end ;
12177: GO 12180
12179: POP
// if IsOK ( Gnyevko ) then
12180: LD_EXP 60
12184: PPUSH
12185: CALL_OW 302
12189: IFFALSE 12215
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12191: LD_EXP 60
12195: PPUSH
12196: LD_STRING D19-Gny-1
12198: PPUSH
12199: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12203: LD_EXP 59
12207: PPUSH
12208: LD_STRING D19-Bur-1
12210: PPUSH
12211: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
12215: LD_EXP 67
12219: PPUSH
12220: CALL_OW 302
12224: IFFALSE 12250
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12226: LD_EXP 67
12230: PPUSH
12231: LD_STRING D19-Kov-1
12233: PPUSH
12234: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12238: LD_EXP 59
12242: PPUSH
12243: LD_STRING D19-Bur-2
12245: PPUSH
12246: CALL_OW 88
// end ; end ;
12250: PPOPN 1
12252: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
12253: LD_EXP 29
12257: NOT
12258: PUSH
12259: LD_EXP 79
12263: AND
12264: PUSH
12265: LD_INT 18
12267: PPUSH
12268: LD_INT 22
12270: PUSH
12271: LD_INT 3
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: PPUSH
12281: CALL_OW 70
12285: PUSH
12286: LD_INT 0
12288: EQUAL
12289: AND
12290: PUSH
12291: LD_EXP 67
12295: PPUSH
12296: CALL_OW 302
12300: PUSH
12301: LD_EXP 60
12305: PPUSH
12306: CALL_OW 302
12310: OR
12311: AND
12312: IFFALSE 12500
12314: GO 12316
12316: DISABLE
12317: LD_INT 0
12319: PPUSH
// begin enable ;
12320: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 22
12328: PUSH
12329: LD_INT 3
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: LD_INT 21
12341: PUSH
12342: LD_INT 1
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 21
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12498
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 320
12385: PUSH
12386: LD_EXP 79
12390: PUSH
12391: LD_INT 1
12393: ARRAY
12394: EQUAL
12395: PUSH
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 320
12405: PUSH
12406: LD_EXP 79
12410: PUSH
12411: LD_INT 2
12413: ARRAY
12414: EQUAL
12415: OR
12416: IFFALSE 12496
// begin dialogAttackLeftBunkers = true ;
12418: LD_ADDR_EXP 29
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// DialogueOn ;
12426: CALL_OW 6
// if IsOK ( Gnyevko ) then
12430: LD_EXP 60
12434: PPUSH
12435: CALL_OW 302
12439: IFFALSE 12453
// Say ( Gnyevko , D19A-Gny-1 ) ;
12441: LD_EXP 60
12445: PPUSH
12446: LD_STRING D19A-Gny-1
12448: PPUSH
12449: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12453: LD_EXP 67
12457: PPUSH
12458: CALL_OW 302
12462: IFFALSE 12476
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12464: LD_EXP 67
12468: PPUSH
12469: LD_STRING D19A-Kov-1
12471: PPUSH
12472: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
12476: LD_EXP 59
12480: PPUSH
12481: LD_STRING D16A-Bur-1
12483: PPUSH
12484: CALL_OW 88
// DialogueOff ;
12488: CALL_OW 7
// exit ;
12492: POP
12493: POP
12494: GO 12500
// end ; end ;
12496: GO 12373
12498: POP
12499: POP
// end ;
12500: PPOPN 1
12502: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
12503: LD_EXP 79
12507: NOT
12508: PUSH
12509: LD_INT 17
12511: PPUSH
12512: LD_INT 22
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 3
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 30
12534: PUSH
12535: LD_INT 31
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 50
12544: PUSH
12545: EMPTY
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 70
12558: PUSH
12559: LD_INT 0
12561: EQUAL
12562: OR
12563: PUSH
12564: LD_EXP 20
12568: AND
12569: IFFALSE 12620
12571: GO 12573
12573: DISABLE
// begin leftBunkers = [ ] ;
12574: LD_ADDR_EXP 79
12578: PUSH
12579: EMPTY
12580: ST_TO_ADDR
// DialogueOn ;
12581: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
12585: LD_EXP 59
12589: PPUSH
12590: LD_STRING D20-Bur-1
12592: PPUSH
12593: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
12597: LD_EXP 73
12601: PPUSH
12602: LD_STRING D20-Pla-1
12604: PPUSH
12605: CALL_OW 88
// DialogueOff ;
12609: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
12613: LD_STRING M8
12615: PPUSH
12616: CALL_OW 337
// end ;
12620: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
12621: LD_EXP 80
12625: NOT
12626: PUSH
12627: LD_INT 16
12629: PPUSH
12630: LD_INT 22
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 21
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 30
12652: PUSH
12653: LD_INT 31
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 50
12662: PUSH
12663: EMPTY
12664: LIST
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 70
12676: PUSH
12677: LD_INT 0
12679: EQUAL
12680: OR
12681: PUSH
12682: LD_EXP 20
12686: AND
12687: IFFALSE 12731
12689: GO 12691
12691: DISABLE
// begin rightBunkers = [ ] ;
12692: LD_ADDR_EXP 80
12696: PUSH
12697: EMPTY
12698: ST_TO_ADDR
// DialogueOn ;
12699: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
12703: LD_EXP 59
12707: PPUSH
12708: LD_STRING D20a-Bur-1
12710: PPUSH
12711: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
12715: LD_EXP 73
12719: PPUSH
12720: LD_STRING D20a-Pla-1
12722: PPUSH
12723: CALL_OW 88
// DialogueOff ;
12727: CALL_OW 7
// end ;
12731: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
12732: LD_EXP 33
12736: NOT
12737: PUSH
12738: LD_EXP 70
12742: AND
12743: IFFALSE 13238
12745: GO 12747
12747: DISABLE
12748: LD_INT 0
12750: PPUSH
12751: PPUSH
12752: PPUSH
// begin enable ;
12753: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12754: LD_ADDR_VAR 0 1
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 3
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 2
12771: PUSH
12772: LD_INT 21
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: PUSH
12806: FOR_IN
12807: IFFALSE 13236
// for trapUnit in trapTeam do
12809: LD_ADDR_VAR 0 2
12813: PUSH
12814: LD_EXP 78
12818: PUSH
12819: FOR_IN
12820: IFFALSE 13232
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
12822: LD_VAR 0 1
12826: PPUSH
12827: LD_VAR 0 2
12831: PPUSH
12832: CALL_OW 296
12836: PUSH
12837: LD_INT 16
12839: LESS
12840: IFFALSE 13230
// begin saveBelkovDecision = true ;
12842: LD_ADDR_EXP 33
12846: PUSH
12847: LD_INT 1
12849: ST_TO_ADDR
// if playerGetSupport then
12850: LD_EXP 32
12854: IFFALSE 12873
// decsToChoose = [ 1 , 3 ] else
12856: LD_ADDR_VAR 0 3
12860: PUSH
12861: LD_INT 1
12863: PUSH
12864: LD_INT 3
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: ST_TO_ADDR
12871: GO 12892
// decsToChoose = [ 1 , 2 , 3 ] ;
12873: LD_ADDR_VAR 0 3
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: LD_INT 3
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
12892: LD_STRING QAttackAm
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: CALL_OW 98
12904: PUSH
12905: LD_INT 1
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 12982
12913: POP
// begin DialogueOn ;
12914: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12918: LD_EXP 59
12922: PPUSH
12923: LD_STRING D21-Bur-1
12925: PPUSH
12926: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12930: LD_EXP 73
12934: PPUSH
12935: LD_STRING D21-Pla-1
12937: PPUSH
12938: CALL_OW 94
// DialogueOff ;
12942: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
12946: LD_EXP 40
12950: PUSH
12951: LD_INT 2
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: IN
12961: NOT
12962: IFFALSE 12980
// begin initiative = 1 ;
12964: LD_ADDR_EXP 40
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// platonovOpinion = 2 ;
12972: LD_ADDR_EXP 5
12976: PUSH
12977: LD_INT 2
12979: ST_TO_ADDR
// end ; end ; 2 :
12980: GO 13174
12982: LD_INT 2
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 13146
12990: POP
// begin DialogueOn ;
12991: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
12995: LD_EXP 59
12999: PPUSH
13000: LD_STRING D22-Bur-1
13002: PPUSH
13003: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
13007: LD_EXP 32
13011: PUSH
13012: LD_EXP 79
13016: PUSH
13017: LD_INT 0
13019: EQUAL
13020: PUSH
13021: LD_EXP 80
13025: PUSH
13026: LD_INT 0
13028: EQUAL
13029: OR
13030: AND
13031: IFFALSE 13045
// Say ( Platonov , D22-Pla-1b ) ;
13033: LD_EXP 73
13037: PPUSH
13038: LD_STRING D22-Pla-1b
13040: PPUSH
13041: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
13045: LD_EXP 32
13049: PUSH
13050: LD_EXP 79
13054: PUSH
13055: LD_EXP 80
13059: OR
13060: AND
13061: IFFALSE 13075
// Say ( Platonov , D22-Pla-1a ) ;
13063: LD_EXP 73
13067: PPUSH
13068: LD_STRING D22-Pla-1a
13070: PPUSH
13071: CALL_OW 88
// if not playerGetSupport then
13075: LD_EXP 32
13079: NOT
13080: IFFALSE 13114
// begin Say ( Platonov , D22-Pla-1 ) ;
13082: LD_EXP 73
13086: PPUSH
13087: LD_STRING D22-Pla-1
13089: PPUSH
13090: CALL_OW 88
// playerGetSupport = true ;
13094: LD_ADDR_EXP 32
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// medalForGetSupport = false ;
13102: LD_ADDR_EXP 38
13106: PUSH
13107: LD_INT 0
13109: ST_TO_ADDR
// PlatonovSendSupport ;
13110: CALL 5937 0 0
// end ; DialogueOff ;
13114: CALL_OW 7
// if initiative <> 3 then
13118: LD_EXP 40
13122: PUSH
13123: LD_INT 3
13125: NONEQUAL
13126: IFFALSE 13144
// begin initiative = 2 ;
13128: LD_ADDR_EXP 40
13132: PUSH
13133: LD_INT 2
13135: ST_TO_ADDR
// platonovOpinion = 1 ;
13136: LD_ADDR_EXP 5
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// end ; end ; 3 :
13144: GO 13174
13146: LD_INT 3
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13173
13154: POP
// begin initiative = 3 ;
13155: LD_ADDR_EXP 40
13159: PUSH
13160: LD_INT 3
13162: ST_TO_ADDR
// platonovOpinion = 0 ;
13163: LD_ADDR_EXP 5
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// end ; end ;
13171: GO 13174
13173: POP
// if IsOK ( Gnyevko ) then
13174: LD_EXP 60
13178: PPUSH
13179: CALL_OW 302
13183: IFFALSE 13209
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13185: LD_EXP 60
13189: PPUSH
13190: LD_STRING D23-Gny-1
13192: PPUSH
13193: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13197: LD_EXP 59
13201: PPUSH
13202: LD_STRING D23-Bur-1
13204: PPUSH
13205: CALL_OW 88
// end ; saveBelkovObjective = true ;
13209: LD_ADDR_EXP 34
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
13217: LD_STRING M9
13219: PPUSH
13220: CALL_OW 337
// exit ;
13224: POP
13225: POP
13226: POP
13227: POP
13228: GO 13238
// end ;
13230: GO 12819
13232: POP
13233: POP
13234: GO 12806
13236: POP
13237: POP
// end ;
13238: PPOPN 3
13240: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
13241: LD_EXP 20
13245: PUSH
13246: LD_EXP 78
13250: NOT
13251: AND
13252: PUSH
13253: LD_EXP 35
13257: NOT
13258: AND
13259: IFFALSE 13291
13261: GO 13263
13263: DISABLE
// begin belkovSaved = true ;
13264: LD_ADDR_EXP 35
13268: PUSH
13269: LD_INT 1
13271: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
13272: LD_EXP 70
13276: PPUSH
13277: LD_INT 3
13279: PPUSH
13280: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
13284: LD_STRING M9a
13286: PPUSH
13287: CALL_OW 337
// end ;
13291: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
13292: LD_EXP 33
13296: PUSH
13297: LD_EXP 61
13301: PPUSH
13302: CALL_OW 301
13306: PUSH
13307: LD_EXP 65
13311: PPUSH
13312: CALL_OW 301
13316: PUSH
13317: LD_EXP 61
13321: PPUSH
13322: CALL_OW 255
13326: PUSH
13327: LD_INT 6
13329: EQUAL
13330: PUSH
13331: LD_EXP 65
13335: PPUSH
13336: CALL_OW 255
13340: PUSH
13341: LD_INT 6
13343: EQUAL
13344: OR
13345: AND
13346: OR
13347: AND
13348: IFFALSE 13368
13350: GO 13352
13352: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
13353: LD_STRING M9a
13355: PPUSH
13356: CALL_OW 337
// saveBelkovObjective = false ;
13360: LD_ADDR_EXP 34
13364: PUSH
13365: LD_INT 0
13367: ST_TO_ADDR
// end ;
13368: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
13369: LD_EXP 35
13373: PUSH
13374: LD_EXP 59
13378: PPUSH
13379: LD_EXP 61
13383: PPUSH
13384: CALL_OW 296
13388: PUSH
13389: LD_INT 14
13391: LESS
13392: PUSH
13393: LD_EXP 59
13397: PPUSH
13398: LD_EXP 65
13402: PPUSH
13403: CALL_OW 296
13407: PUSH
13408: LD_INT 14
13410: LESS
13411: OR
13412: AND
13413: IFFALSE 13687
13415: GO 13417
13417: DISABLE
// begin InGameOn ;
13418: CALL_OW 8
// if IsOk ( Belkov ) then
13422: LD_EXP 61
13426: PPUSH
13427: CALL_OW 302
13431: IFFALSE 13529
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
13433: LD_EXP 59
13437: PUSH
13438: LD_EXP 61
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
13451: LD_EXP 59
13455: PPUSH
13456: LD_EXP 61
13460: PPUSH
13461: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
13465: LD_EXP 61
13469: PPUSH
13470: LD_EXP 59
13474: PPUSH
13475: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
13479: LD_EXP 61
13483: PPUSH
13484: LD_STRING D24-Bel-1
13486: PPUSH
13487: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13491: LD_EXP 59
13495: PPUSH
13496: LD_STRING D24-Bur-1
13498: PPUSH
13499: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13503: LD_EXP 61
13507: PPUSH
13508: LD_STRING D24-Bel-2
13510: PPUSH
13511: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13515: LD_EXP 59
13519: PPUSH
13520: LD_STRING D24-Bur-2
13522: PPUSH
13523: CALL_OW 88
// end else
13527: GO 13635
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
13529: LD_EXP 59
13533: PUSH
13534: LD_EXP 65
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
13547: LD_EXP 59
13551: PPUSH
13552: LD_EXP 65
13556: PPUSH
13557: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
13561: LD_EXP 65
13565: PPUSH
13566: LD_EXP 59
13570: PPUSH
13571: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
13575: LD_EXP 65
13579: PPUSH
13580: LD_STRING D24-Bel-1
13582: PPUSH
13583: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13587: LD_EXP 59
13591: PPUSH
13592: LD_STRING D24-Bur-1
13594: PPUSH
13595: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
13599: LD_EXP 59
13603: PPUSH
13604: LD_STRING D24-Bur-1a
13606: PPUSH
13607: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
13611: LD_EXP 65
13615: PPUSH
13616: LD_STRING D24-Bel-2
13618: PPUSH
13619: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13623: LD_EXP 59
13627: PPUSH
13628: LD_STRING D24-Bur-2
13630: PPUSH
13631: CALL_OW 88
// end ; if captureBelkovVehicle then
13635: LD_EXP 36
13639: IFFALSE 13653
// Say ( Burlak , D24-Bur-2a ) ;
13641: LD_EXP 59
13645: PPUSH
13646: LD_STRING D24-Bur-2a
13648: PPUSH
13649: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13653: LD_EXP 73
13657: PPUSH
13658: LD_STRING D24-Pla-2
13660: PPUSH
13661: CALL_OW 94
// if leftBunkers then
13665: LD_EXP 79
13669: IFFALSE 13683
// SayRadio ( Platonov , D24-Pla-2a ) ;
13671: LD_EXP 73
13675: PPUSH
13676: LD_STRING D24-Pla-2a
13678: PPUSH
13679: CALL_OW 94
// InGameOff ;
13683: CALL_OW 9
// end ;
13687: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
13688: LD_INT 22
13690: PPUSH
13691: LD_INT 22
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 21
13703: PUSH
13704: LD_INT 2
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PPUSH
13715: CALL_OW 70
13719: PUSH
13720: LD_EXP 67
13724: PPUSH
13725: CALL_OW 302
13729: PUSH
13730: LD_EXP 60
13734: PPUSH
13735: CALL_OW 302
13739: OR
13740: AND
13741: IFFALSE 13824
13743: GO 13745
13745: DISABLE
// begin DialogueOn ;
13746: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
13750: LD_EXP 59
13754: PPUSH
13755: LD_STRING D26-Bur-1
13757: PPUSH
13758: CALL_OW 88
// if IsOk ( Kovalyuk ) then
13762: LD_EXP 67
13766: PPUSH
13767: CALL_OW 302
13771: IFFALSE 13785
// Say ( Kovalyuk , D26-Kov-1 ) ;
13773: LD_EXP 67
13777: PPUSH
13778: LD_STRING D26-Kov-1
13780: PPUSH
13781: CALL_OW 88
// if IsOk ( Gnyevko ) then
13785: LD_EXP 60
13789: PPUSH
13790: CALL_OW 302
13794: IFFALSE 13808
// Say ( Gnyevko , D26-Gny-1 ) ;
13796: LD_EXP 60
13800: PPUSH
13801: LD_STRING D26-Gny-1
13803: PPUSH
13804: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
13808: LD_EXP 59
13812: PPUSH
13813: LD_STRING D26-Bur-2
13815: PPUSH
13816: CALL_OW 88
// DialogueOff ;
13820: CALL_OW 7
// end ;
13824: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
13825: LD_EXP 20
13829: PUSH
13830: LD_EXP 59
13834: PPUSH
13835: LD_INT 8
13837: PPUSH
13838: CALL_OW 308
13842: NOT
13843: PUSH
13844: LD_EXP 59
13848: PPUSH
13849: CALL_OW 310
13853: PPUSH
13854: CALL_OW 310
13858: PPUSH
13859: LD_INT 8
13861: PPUSH
13862: CALL_OW 308
13866: NOT
13867: AND
13868: AND
13869: PUSH
13870: LD_EXP 37
13874: PUSH
13875: LD_INT 1
13877: NEG
13878: EQUAL
13879: AND
13880: IFFALSE 13894
13882: GO 13884
13884: DISABLE
// begin enable ;
13885: ENABLE
// raportForPlatonov = 0 ;
13886: LD_ADDR_EXP 37
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// end ;
13894: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
13895: LD_EXP 20
13899: PUSH
13900: LD_EXP 37
13904: PUSH
13905: LD_INT 0
13907: GREATEREQUAL
13908: AND
13909: PUSH
13910: LD_EXP 16
13914: NOT
13915: AND
13916: PUSH
13917: LD_EXP 59
13921: PPUSH
13922: LD_INT 8
13924: PPUSH
13925: CALL_OW 308
13929: PUSH
13930: LD_EXP 59
13934: PPUSH
13935: CALL_OW 310
13939: PPUSH
13940: CALL_OW 310
13944: PPUSH
13945: LD_INT 8
13947: PPUSH
13948: CALL_OW 308
13952: PUSH
13953: LD_EXP 16
13957: NOT
13958: AND
13959: OR
13960: AND
13961: IFFALSE 14252
13963: GO 13965
13965: DISABLE
// begin enable ;
13966: ENABLE
// DialogueOn ;
13967: CALL_OW 6
// case raportForPlatonov of 0 :
13971: LD_EXP 37
13975: PUSH
13976: LD_INT 0
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 14011
13984: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
13985: LD_EXP 73
13989: PPUSH
13990: LD_STRING D25a-Pla-1
13992: PPUSH
13993: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
13997: LD_EXP 59
14001: PPUSH
14002: LD_STRING D25a-Bur-1
14004: PPUSH
14005: CALL_OW 88
// end ; 1 :
14009: GO 14227
14011: LD_INT 1
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14082
14019: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14020: LD_EXP 73
14024: PPUSH
14025: LD_STRING D25-Pla-1
14027: PPUSH
14028: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
14032: LD_EXP 59
14036: PPUSH
14037: LD_STRING D25-Bur-1
14039: PPUSH
14040: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14044: LD_EXP 59
14048: PPUSH
14049: LD_STRING D25b-Bur-1
14051: PPUSH
14052: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14056: LD_EXP 73
14060: PPUSH
14061: LD_STRING D25b-Pla-1
14063: PPUSH
14064: CALL_OW 88
// playerGetSupport = true ;
14068: LD_ADDR_EXP 32
14072: PUSH
14073: LD_INT 1
14075: ST_TO_ADDR
// PlatonovSendSupport ;
14076: CALL 5937 0 0
// end ; 2 :
14080: GO 14227
14082: LD_INT 2
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14136
14090: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14091: LD_EXP 73
14095: PPUSH
14096: LD_STRING D25-Pla-1
14098: PPUSH
14099: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
14103: LD_EXP 59
14107: PPUSH
14108: LD_STRING D25-Bur-1a
14110: PPUSH
14111: CALL_OW 88
// if not sawLeftBunker then
14115: LD_EXP 27
14119: NOT
14120: IFFALSE 14134
// Say ( Platonov , D25c-Pla-1 ) ;
14122: LD_EXP 73
14126: PPUSH
14127: LD_STRING D25c-Pla-1
14129: PPUSH
14130: CALL_OW 88
// end ; 3 :
14134: GO 14227
14136: LD_INT 3
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14226
14144: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14145: LD_EXP 73
14149: PPUSH
14150: LD_STRING D25-Pla-1
14152: PPUSH
14153: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
14157: LD_EXP 59
14161: PPUSH
14162: LD_STRING D25a-Bur-1b
14164: PPUSH
14165: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14169: LD_EXP 59
14173: PPUSH
14174: LD_STRING D25b-Bur-1
14176: PPUSH
14177: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14181: LD_EXP 73
14185: PPUSH
14186: LD_STRING D25b-Pla-1
14188: PPUSH
14189: CALL_OW 88
// playerGetSupport = true ;
14193: LD_ADDR_EXP 32
14197: PUSH
14198: LD_INT 1
14200: ST_TO_ADDR
// PlatonovSendSupport ;
14201: CALL 5937 0 0
// if not sawRightBunker then
14205: LD_EXP 28
14209: NOT
14210: IFFALSE 14224
// Say ( Platonov , D25c-Pla-1 ) ;
14212: LD_EXP 73
14216: PPUSH
14217: LD_STRING D25c-Pla-1
14219: PPUSH
14220: CALL_OW 88
// end ; end ;
14224: GO 14227
14226: POP
// raportForPlatonov = - 1 ;
14227: LD_ADDR_EXP 37
14231: PUSH
14232: LD_INT 1
14234: NEG
14235: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
14236: LD_EXP 73
14240: PPUSH
14241: LD_STRING D25c-Pla-1a
14243: PPUSH
14244: CALL_OW 88
// DialogueOff ;
14248: CALL_OW 7
// end ;
14252: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
14253: LD_INT 19
14255: PPUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 3
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: PPUSH
14269: CALL_OW 70
14273: PUSH
14274: LD_INT 0
14276: GREATER
14277: IFFALSE 14297
14279: GO 14281
14281: DISABLE
// begin northMapExplored = true ;
14282: LD_ADDR_EXP 39
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14290: LD_STRING M10
14292: PPUSH
14293: CALL_OW 337
// end ;
14297: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
14298: LD_EXP 79
14302: NOT
14303: PUSH
14304: LD_EXP 39
14308: AND
14309: PUSH
14310: LD_EXP 35
14314: PUSH
14315: LD_EXP 34
14319: NOT
14320: OR
14321: AND
14322: IFFALSE 14342
14324: GO 14326
14326: DISABLE
// begin backToBeria2 = true ;
14327: LD_ADDR_EXP 16
14331: PUSH
14332: LD_INT 1
14334: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
14335: LD_STRING M10a
14337: PPUSH
14338: CALL_OW 337
// end ; end_of_file
14342: END
// export function PrepareNature ; var i , un ; begin
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
14347: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: DOUBLE
14354: LD_INT 1
14356: DEC
14357: ST_TO_ADDR
14358: LD_EXP 42
14362: PUSH
14363: LD_INT 1
14365: ARRAY
14366: PUSH
14367: FOR_TO
14368: IFFALSE 14478
// begin uc_side = 0 ;
14370: LD_ADDR_OWVAR 20
14374: PUSH
14375: LD_INT 0
14377: ST_TO_ADDR
// uc_nation = nation_nature ;
14378: LD_ADDR_OWVAR 21
14382: PUSH
14383: LD_INT 0
14385: ST_TO_ADDR
// hc_class = class_apeman ;
14386: LD_ADDR_OWVAR 28
14390: PUSH
14391: LD_INT 12
14393: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14394: LD_ADDR_OWVAR 31
14398: PUSH
14399: LD_EXP 43
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PUSH
14408: LD_EXP 43
14412: PUSH
14413: LD_INT 2
14415: ARRAY
14416: PUSH
14417: LD_EXP 43
14421: PUSH
14422: LD_INT 3
14424: ARRAY
14425: PUSH
14426: LD_EXP 43
14430: PUSH
14431: LD_INT 4
14433: ARRAY
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14441: LD_ADDR_OWVAR 35
14445: PUSH
14446: LD_EXP 44
14450: ST_TO_ADDR
// un = CreateHuman ;
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: CALL_OW 44
14460: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14461: LD_VAR 0 3
14465: PPUSH
14466: LD_INT 21
14468: PPUSH
14469: LD_INT 0
14471: PPUSH
14472: CALL_OW 49
// end ;
14476: GO 14367
14478: POP
14479: POP
// for i := 1 to animalsAmount [ 2 ] do
14480: LD_ADDR_VAR 0 2
14484: PUSH
14485: DOUBLE
14486: LD_INT 1
14488: DEC
14489: ST_TO_ADDR
14490: LD_EXP 42
14494: PUSH
14495: LD_INT 2
14497: ARRAY
14498: PUSH
14499: FOR_TO
14500: IFFALSE 14610
// begin uc_side = 0 ;
14502: LD_ADDR_OWVAR 20
14506: PUSH
14507: LD_INT 0
14509: ST_TO_ADDR
// uc_nation = nation_nature ;
14510: LD_ADDR_OWVAR 21
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
// hc_class = class_phororhacos ;
14518: LD_ADDR_OWVAR 28
14522: PUSH
14523: LD_INT 18
14525: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14526: LD_ADDR_OWVAR 31
14530: PUSH
14531: LD_EXP 43
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: PUSH
14540: LD_EXP 43
14544: PUSH
14545: LD_INT 2
14547: ARRAY
14548: PUSH
14549: LD_EXP 43
14553: PUSH
14554: LD_INT 3
14556: ARRAY
14557: PUSH
14558: LD_EXP 43
14562: PUSH
14563: LD_INT 4
14565: ARRAY
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14573: LD_ADDR_OWVAR 35
14577: PUSH
14578: LD_EXP 44
14582: ST_TO_ADDR
// un = CreateHuman ;
14583: LD_ADDR_VAR 0 3
14587: PUSH
14588: CALL_OW 44
14592: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_INT 21
14600: PPUSH
14601: LD_INT 0
14603: PPUSH
14604: CALL_OW 49
// end ;
14608: GO 14499
14610: POP
14611: POP
// for i := 1 to animalsAmount [ 3 ] do
14612: LD_ADDR_VAR 0 2
14616: PUSH
14617: DOUBLE
14618: LD_INT 1
14620: DEC
14621: ST_TO_ADDR
14622: LD_EXP 42
14626: PUSH
14627: LD_INT 3
14629: ARRAY
14630: PUSH
14631: FOR_TO
14632: IFFALSE 14742
// begin uc_side = 0 ;
14634: LD_ADDR_OWVAR 20
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// uc_nation = nation_nature ;
14642: LD_ADDR_OWVAR 21
14646: PUSH
14647: LD_INT 0
14649: ST_TO_ADDR
// hc_class = class_tiger ;
14650: LD_ADDR_OWVAR 28
14654: PUSH
14655: LD_INT 14
14657: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14658: LD_ADDR_OWVAR 31
14662: PUSH
14663: LD_EXP 43
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PUSH
14672: LD_EXP 43
14676: PUSH
14677: LD_INT 2
14679: ARRAY
14680: PUSH
14681: LD_EXP 43
14685: PUSH
14686: LD_INT 3
14688: ARRAY
14689: PUSH
14690: LD_EXP 43
14694: PUSH
14695: LD_INT 4
14697: ARRAY
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14705: LD_ADDR_OWVAR 35
14709: PUSH
14710: LD_EXP 44
14714: ST_TO_ADDR
// un = CreateHuman ;
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: CALL_OW 44
14724: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14725: LD_VAR 0 3
14729: PPUSH
14730: LD_INT 21
14732: PPUSH
14733: LD_INT 0
14735: PPUSH
14736: CALL_OW 49
// end ;
14740: GO 14631
14742: POP
14743: POP
// for i := 1 to animalsAmount [ 4 ] do
14744: LD_ADDR_VAR 0 2
14748: PUSH
14749: DOUBLE
14750: LD_INT 1
14752: DEC
14753: ST_TO_ADDR
14754: LD_EXP 42
14758: PUSH
14759: LD_INT 4
14761: ARRAY
14762: PUSH
14763: FOR_TO
14764: IFFALSE 14874
// begin uc_side = 0 ;
14766: LD_ADDR_OWVAR 20
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// uc_nation = nation_nature ;
14774: LD_ADDR_OWVAR 21
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// hc_class = 21 ;
14782: LD_ADDR_OWVAR 28
14786: PUSH
14787: LD_INT 21
14789: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14790: LD_ADDR_OWVAR 31
14794: PUSH
14795: LD_EXP 43
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_EXP 43
14808: PUSH
14809: LD_INT 2
14811: ARRAY
14812: PUSH
14813: LD_EXP 43
14817: PUSH
14818: LD_INT 3
14820: ARRAY
14821: PUSH
14822: LD_EXP 43
14826: PUSH
14827: LD_INT 4
14829: ARRAY
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14837: LD_ADDR_OWVAR 35
14841: PUSH
14842: LD_EXP 44
14846: ST_TO_ADDR
// un = CreateHuman ;
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: CALL_OW 44
14856: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_INT 21
14864: PPUSH
14865: LD_INT 0
14867: PPUSH
14868: CALL_OW 49
// end ;
14872: GO 14763
14874: POP
14875: POP
// end ; end_of_file
14876: LD_VAR 0 1
14880: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
14881: LD_EXP 21
14885: IFFALSE 15114
14887: GO 14889
14889: DISABLE
14890: LD_INT 0
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
14896: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_INT 22
14904: PUSH
14905: LD_INT 3
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 21
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 25
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 69
14941: ST_TO_ADDR
// wait ( 0 0$40 ) ;
14942: LD_INT 1400
14944: PPUSH
14945: CALL_OW 67
// carryCratesEngs = 0 ;
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 0
14956: ST_TO_ADDR
// for unit in playerEngs do
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_VAR 0 4
14966: PUSH
14967: FOR_IN
14968: IFFALSE 14996
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
14970: LD_ADDR_VAR 0 3
14974: PUSH
14975: LD_VAR 0 3
14979: PUSH
14980: LD_VAR 0 2
14984: PPUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 289
14992: PLUS
14993: ST_TO_ADDR
14994: GO 14967
14996: POP
14997: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
14998: LD_INT 106
15000: PPUSH
15001: CALL_OW 274
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 275
15013: PUSH
15014: LD_INT 50
15016: LESS
15017: PUSH
15018: LD_INT 8
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 287
15028: PUSH
15029: LD_INT 10
15031: MUL
15032: PUSH
15033: LD_INT 106
15035: PPUSH
15036: CALL_OW 274
15040: PPUSH
15041: LD_INT 1
15043: PPUSH
15044: CALL_OW 275
15048: PLUS
15049: PUSH
15050: LD_VAR 0 3
15054: PLUS
15055: PUSH
15056: LD_INT 50
15058: LESS
15059: AND
15060: IFFALSE 15072
// spawnNextCrates = true else
15062: LD_ADDR_VAR 0 5
15066: PUSH
15067: LD_INT 1
15069: ST_TO_ADDR
15070: GO 15080
// spawnNextCrates = false ;
15072: LD_ADDR_VAR 0 5
15076: PUSH
15077: LD_INT 0
15079: ST_TO_ADDR
// if spawnNextCrates then
15080: LD_VAR 0 5
15084: IFFALSE 15107
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
15086: LD_INT 1
15088: PPUSH
15089: LD_INT 5
15091: PPUSH
15092: CALL_OW 12
15096: PPUSH
15097: LD_INT 8
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 55
// until not spawnCrates ;
15107: LD_EXP 21
15111: NOT
15112: IFFALSE 14897
// end ; end_of_file
15114: PPOPN 5
15116: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 6
15129: EQUAL
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_INT 3
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 30
15143: PUSH
15144: LD_INT 6
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PPUSH
15155: CALL_OW 69
15159: PUSH
15160: LD_INT 1
15162: GREATER
15163: AND
15164: PUSH
15165: LD_EXP 11
15169: NOT
15170: AND
15171: IFFALSE 15182
// Dial_StopConstructAgainSameBuilding ( building ) ;
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL 7861 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
15182: LD_VAR 0 1
15186: PPUSH
15187: CALL_OW 266
15191: PUSH
15192: LD_INT 2
15194: EQUAL
15195: PUSH
15196: LD_INT 22
15198: PUSH
15199: LD_INT 3
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 30
15208: PUSH
15209: LD_INT 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 69
15224: PUSH
15225: LD_INT 1
15227: GREATER
15228: AND
15229: PUSH
15230: LD_EXP 11
15234: NOT
15235: AND
15236: IFFALSE 15247
// Dial_StopConstructAgainSameBuilding ( building ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL 7861 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 255
15256: PUSH
15257: LD_INT 3
15259: EQUAL
15260: PUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 266
15270: PUSH
15271: LD_INT 26
15273: PUSH
15274: LD_INT 4
15276: PUSH
15277: LD_INT 31
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: IN
15285: AND
15286: PUSH
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 8
15294: PPUSH
15295: CALL_OW 308
15299: AND
15300: IFFALSE 15311
// Dial_StopConstructAgainSameBuilding ( building ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL 7861 0 1
// end ;
15311: PPOPN 2
15313: END
// on BuildingComplete ( building ) do var sold , platSold ;
15314: LD_INT 0
15316: PPUSH
15317: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL_OW 255
15327: PUSH
15328: LD_INT 3
15330: EQUAL
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 266
15341: PUSH
15342: LD_INT 6
15344: EQUAL
15345: AND
15346: PUSH
15347: LD_EXP 8
15351: NOT
15352: AND
15353: IFFALSE 15359
// Dial_LabConstructed ;
15355: CALL 7711 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 255
15368: PUSH
15369: LD_INT 3
15371: EQUAL
15372: PUSH
15373: LD_VAR 0 1
15377: PPUSH
15378: CALL_OW 266
15382: PUSH
15383: LD_INT 2
15385: EQUAL
15386: AND
15387: PUSH
15388: LD_EXP 9
15392: NOT
15393: AND
15394: IFFALSE 15400
// Dial_WorkshopConstructed ;
15396: CALL 7786 0 0
// if GetSide ( building ) = 6 then
15400: LD_VAR 0 1
15404: PPUSH
15405: CALL_OW 255
15409: PUSH
15410: LD_INT 6
15412: EQUAL
15413: IFFALSE 15615
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
15415: LD_VAR 0 1
15419: PPUSH
15420: CALL_OW 266
15424: PUSH
15425: LD_INT 31
15427: EQUAL
15428: PUSH
15429: LD_VAR 0 1
15433: PPUSH
15434: LD_INT 9
15436: PPUSH
15437: CALL_OW 308
15441: AND
15442: IFFALSE 15484
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
15444: LD_ADDR_VAR 0 2
15448: PUSH
15449: LD_INT 209
15451: PPUSH
15452: CALL_OW 313
15456: PUSH
15457: LD_INT 1
15459: ARRAY
15460: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
15461: LD_VAR 0 2
15465: PPUSH
15466: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
15470: LD_VAR 0 2
15474: PPUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 266
15493: PUSH
15494: LD_INT 31
15496: EQUAL
15497: PUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: LD_INT 8
15505: PPUSH
15506: CALL_OW 308
15510: AND
15511: IFFALSE 15547
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
15513: LD_ADDR_VAR 0 2
15517: PUSH
15518: LD_EXP 74
15522: PPUSH
15523: LD_VAR 0 1
15527: PPUSH
15528: CALL_OW 74
15532: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 266
15556: PUSH
15557: LD_INT 2
15559: EQUAL
15560: IFFALSE 15615
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
15562: LD_EXP 66
15566: PPUSH
15567: LD_INT 25
15569: PUSH
15570: LD_INT 3
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 72
15581: PPUSH
15582: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
15586: LD_EXP 66
15590: PPUSH
15591: LD_INT 25
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 72
15605: PPUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 180
// end ; end ; end ;
15615: PPOPN 3
15617: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
15618: LD_VAR 0 1
15622: PUSH
15623: LD_INT 47
15625: EQUAL
15626: PUSH
15627: LD_VAR 0 2
15631: PPUSH
15632: CALL_OW 255
15636: PUSH
15637: LD_INT 3
15639: EQUAL
15640: AND
15641: IFFALSE 15651
// engineResearched = true ;
15643: LD_ADDR_EXP 10
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// if tech = tech_Tech1 then
15651: LD_VAR 0 1
15655: PUSH
15656: LD_INT 48
15658: EQUAL
15659: IFFALSE 15681
// begin wait ( 0 0$5 ) ;
15661: LD_INT 175
15663: PPUSH
15664: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
15668: LD_INT 83
15670: PPUSH
15671: LD_INT 1500
15673: PPUSH
15674: LD_INT 0
15676: PPUSH
15677: CALL_OW 486
// end ; end ;
15681: PPOPN 2
15683: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 255
15693: PUSH
15694: LD_OWVAR 2
15698: EQUAL
15699: PUSH
15700: LD_VAR 0 2
15704: PPUSH
15705: CALL_OW 302
15709: AND
15710: PUSH
15711: LD_EXP 12
15715: NOT
15716: AND
15717: PUSH
15718: LD_EXP 17
15722: NOT
15723: AND
15724: IFFALSE 15735
// Dial_FirstVehConstructed ( factory ) ;
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL 8376 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
15735: LD_VAR 0 2
15739: PPUSH
15740: CALL_OW 255
15744: PUSH
15745: LD_OWVAR 2
15749: EQUAL
15750: PUSH
15751: LD_VAR 0 2
15755: PPUSH
15756: CALL_OW 302
15760: AND
15761: PUSH
15762: LD_EXP 17
15766: AND
15767: IFFALSE 15783
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
15769: LD_ADDR_EXP 18
15773: PUSH
15774: LD_EXP 18
15778: PUSH
15779: LD_INT 1
15781: PLUS
15782: ST_TO_ADDR
// end ;
15783: PPOPN 2
15785: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
15786: LD_EXP 19
15790: NOT
15791: PUSH
15792: LD_VAR 0 5
15796: PUSH
15797: LD_INT 1
15799: EQUAL
15800: AND
15801: IFFALSE 15817
// Dial_NewCrates ( x , y ) ;
15803: LD_VAR 0 2
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: CALL 8330 0 2
// end ;
15817: PPOPN 5
15819: END
// on Command ( com ) do var i , j , temp , order , destiny ;
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
15824: PPUSH
15825: PPUSH
15826: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_INT 22
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 69
15860: PUSH
15861: FOR_IN
15862: IFFALSE 16055
// if GetTaskList ( i ) > 0 then
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 437
15873: PUSH
15874: LD_INT 0
15876: GREATER
15877: IFFALSE 16053
// for j = 1 to GetTaskList ( i ) do
15879: LD_ADDR_VAR 0 3
15883: PUSH
15884: DOUBLE
15885: LD_INT 1
15887: DEC
15888: ST_TO_ADDR
15889: LD_VAR 0 2
15893: PPUSH
15894: CALL_OW 437
15898: PUSH
15899: FOR_TO
15900: IFFALSE 16051
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
15902: LD_ADDR_VAR 0 4
15906: PUSH
15907: LD_VAR 0 2
15911: PPUSH
15912: CALL_OW 437
15916: PUSH
15917: LD_VAR 0 3
15921: ARRAY
15922: PUSH
15923: LD_INT 4
15925: ARRAY
15926: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
15927: LD_VAR 0 4
15931: PUSH
15932: LD_INT 71
15934: EQUAL
15935: PUSH
15936: LD_VAR 0 4
15940: PPUSH
15941: CALL_OW 255
15945: PUSH
15946: LD_INT 6
15948: EQUAL
15949: PUSH
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 437
15959: PUSH
15960: LD_VAR 0 3
15964: ARRAY
15965: PUSH
15966: LD_INT 1
15968: ARRAY
15969: PUSH
15970: LD_STRING e
15972: EQUAL
15973: AND
15974: PUSH
15975: LD_VAR 0 4
15979: PPUSH
15980: CALL_OW 247
15984: PUSH
15985: LD_INT 2
15987: EQUAL
15988: AND
15989: OR
15990: IFFALSE 16003
// SetTaskList ( i , [ ] ) ;
15992: LD_VAR 0 2
15996: PPUSH
15997: EMPTY
15998: PPUSH
15999: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
16003: LD_VAR 0 4
16007: PUSH
16008: LD_INT 106
16010: EQUAL
16011: PUSH
16012: LD_VAR 0 2
16016: PPUSH
16017: CALL_OW 437
16021: PUSH
16022: LD_VAR 0 3
16026: ARRAY
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PUSH
16032: LD_STRING Y
16034: EQUAL
16035: AND
16036: IFFALSE 16049
// SetTaskList ( i , [ ] ) ;
16038: LD_VAR 0 2
16042: PPUSH
16043: EMPTY
16044: PPUSH
16045: CALL_OW 446
// end ;
16049: GO 15899
16051: POP
16052: POP
16053: GO 15861
16055: POP
16056: POP
// end ;
16057: PPOPN 6
16059: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 255
16069: PUSH
16070: LD_INT 1
16072: EQUAL
16073: PUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 247
16083: PUSH
16084: LD_INT 1
16086: EQUAL
16087: AND
16088: IFFALSE 16146
// begin if unit in amLeftEngs then
16090: LD_VAR 0 1
16094: PUSH
16095: LD_EXP 83
16099: IN
16100: IFFALSE 16118
// amLeftEngs = amLeftEngs diff unit ;
16102: LD_ADDR_EXP 83
16106: PUSH
16107: LD_EXP 83
16111: PUSH
16112: LD_VAR 0 1
16116: DIFF
16117: ST_TO_ADDR
// if unit in amRightEngs then
16118: LD_VAR 0 1
16122: PUSH
16123: LD_EXP 84
16127: IN
16128: IFFALSE 16146
// amRightEngs = amRightEngs diff unit ;
16130: LD_ADDR_EXP 84
16134: PUSH
16135: LD_EXP 84
16139: PUSH
16140: LD_VAR 0 1
16144: DIFF
16145: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 255
16155: PUSH
16156: LD_INT 6
16158: EQUAL
16159: PUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 247
16169: PUSH
16170: LD_INT 1
16172: EQUAL
16173: AND
16174: IFFALSE 16204
// if unit in belkovTeam then
16176: LD_VAR 0 1
16180: PUSH
16181: LD_EXP 70
16185: IN
16186: IFFALSE 16204
// belkovTeam = belkovTeam diff unit ;
16188: LD_ADDR_EXP 70
16192: PUSH
16193: LD_EXP 70
16197: PUSH
16198: LD_VAR 0 1
16202: DIFF
16203: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL_OW 255
16213: PUSH
16214: LD_INT 3
16216: EQUAL
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 247
16227: PUSH
16228: LD_INT 1
16230: EQUAL
16231: AND
16232: IFFALSE 16248
// lostComradesCounter = lostComradesCounter + 1 ;
16234: LD_ADDR_EXP 41
16238: PUSH
16239: LD_EXP 41
16243: PUSH
16244: LD_INT 1
16246: PLUS
16247: ST_TO_ADDR
// if unit = Burlak then
16248: LD_VAR 0 1
16252: PUSH
16253: LD_EXP 59
16257: EQUAL
16258: IFFALSE 16264
// BurlakIsDead ;
16260: CALL 17499 0 0
// if unit in platSoldiers then
16264: LD_VAR 0 1
16268: PUSH
16269: LD_EXP 74
16273: IN
16274: IFFALSE 16292
// platSoldiers = platSoldiers diff unit ;
16276: LD_ADDR_EXP 74
16280: PUSH
16281: LD_EXP 74
16285: PUSH
16286: LD_VAR 0 1
16290: DIFF
16291: ST_TO_ADDR
// end ;
16292: PPOPN 1
16294: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 255
16304: PUSH
16305: LD_INT 1
16307: EQUAL
16308: PUSH
16309: LD_VAR 0 1
16313: PPUSH
16314: CALL_OW 247
16318: PUSH
16319: LD_INT 3
16321: EQUAL
16322: AND
16323: IFFALSE 16381
// begin if unit in leftBunkers then
16325: LD_VAR 0 1
16329: PUSH
16330: LD_EXP 79
16334: IN
16335: IFFALSE 16353
// leftBunkers = leftBunkers diff unit ;
16337: LD_ADDR_EXP 79
16341: PUSH
16342: LD_EXP 79
16346: PUSH
16347: LD_VAR 0 1
16351: DIFF
16352: ST_TO_ADDR
// if unit in rightBunkers then
16353: LD_VAR 0 1
16357: PUSH
16358: LD_EXP 80
16362: IN
16363: IFFALSE 16381
// rightBunkers = rightBunkers diff unit ;
16365: LD_ADDR_EXP 80
16369: PUSH
16370: LD_EXP 80
16374: PUSH
16375: LD_VAR 0 1
16379: DIFF
16380: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 255
16390: PUSH
16391: LD_INT 1
16393: EQUAL
16394: PUSH
16395: LD_VAR 0 1
16399: PPUSH
16400: CALL_OW 247
16404: PUSH
16405: LD_INT 1
16407: EQUAL
16408: AND
16409: IFFALSE 16439
// if unit in trapTeam then
16411: LD_VAR 0 1
16415: PUSH
16416: LD_EXP 78
16420: IN
16421: IFFALSE 16439
// trapTeam = trapTeam diff unit ;
16423: LD_ADDR_EXP 78
16427: PUSH
16428: LD_EXP 78
16432: PUSH
16433: LD_VAR 0 1
16437: DIFF
16438: ST_TO_ADDR
// end ;
16439: PPOPN 1
16441: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
16442: LD_VAR 0 3
16446: PUSH
16447: LD_INT 1
16449: EQUAL
16450: IFFALSE 16460
// captureBelkovVehicle = true ;
16452: LD_ADDR_EXP 36
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// if original_side = 6 then
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 6
16467: EQUAL
16468: IFFALSE 16488
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
16470: LD_VAR 0 1
16474: PUSH
16475: LD_VAR 0 2
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 139
// end ;
16488: PPOPN 4
16490: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
16491: LD_VAR 0 1
16495: PUSH
16496: LD_INT 3
16498: EQUAL
16499: PUSH
16500: LD_VAR 0 2
16504: PUSH
16505: LD_INT 6
16507: EQUAL
16508: AND
16509: IFFALSE 16515
// AttackComrades ;
16511: CALL 17514 0 0
// end ; end_of_file
16515: PPOPN 2
16517: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16518: LD_EXP 16
16522: PUSH
16523: LD_INT 8
16525: PPUSH
16526: LD_INT 22
16528: PUSH
16529: LD_INT 3
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 21
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PPUSH
16550: CALL_OW 71
16554: PUSH
16555: LD_INT 0
16557: EQUAL
16558: AND
16559: IFFALSE 16660
16561: GO 16563
16563: DISABLE
// begin enable ;
16564: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
16565: LD_EXP 34
16569: NOT
16570: PUSH
16571: LD_EXP 61
16575: PPUSH
16576: CALL_OW 302
16580: PUSH
16581: LD_EXP 65
16585: PPUSH
16586: CALL_OW 302
16590: OR
16591: AND
16592: IFFALSE 16639
// begin case Query ( QContMission ) of 1 :
16594: LD_STRING QContMission
16596: PPUSH
16597: CALL_OW 97
16601: PUSH
16602: LD_INT 1
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16617
16610: POP
// begin FinishMission ;
16611: CALL 16661 0 0
// end ; 2 :
16615: GO 16637
16617: LD_INT 2
16619: DOUBLE
16620: EQUAL
16621: IFTRUE 16625
16623: GO 16636
16625: POP
// begin saveBelkovObjective = true ;
16626: LD_ADDR_EXP 34
16630: PUSH
16631: LD_INT 1
16633: ST_TO_ADDR
// end ; end ;
16634: GO 16637
16636: POP
// end else
16637: GO 16650
// if not belkovSaved then
16639: LD_EXP 35
16643: NOT
16644: IFFALSE 16650
// FinishMission ;
16646: CALL 16661 0 0
// if belkovSaved then
16650: LD_EXP 35
16654: IFFALSE 16660
// FinishMission ;
16656: CALL 16661 0 0
// end ;
16660: END
// function FinishMission ; begin
16661: LD_INT 0
16663: PPUSH
// SetRewards ;
16664: CALL 16685 0 0
// SavePlayerCharacters ;
16668: CALL 16975 0 0
// SaveGlobalVariables ;
16672: CALL 17179 0 0
// YouWin ;
16676: CALL_OW 103
// end ;
16680: LD_VAR 0 1
16684: RET
// function SetRewards ; begin
16685: LD_INT 0
16687: PPUSH
// case initiative of 1 :
16688: LD_EXP 40
16692: PUSH
16693: LD_INT 1
16695: DOUBLE
16696: EQUAL
16697: IFTRUE 16701
16699: GO 16714
16701: POP
// AddMedal ( Initiative , 1 ) ; 2 :
16702: LD_STRING Initiative
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 101
16712: GO 16759
16714: LD_INT 2
16716: DOUBLE
16717: EQUAL
16718: IFTRUE 16722
16720: GO 16736
16722: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
16723: LD_STRING Initiative
16725: PPUSH
16726: LD_INT 2
16728: NEG
16729: PPUSH
16730: CALL_OW 101
16734: GO 16759
16736: LD_INT 3
16738: DOUBLE
16739: EQUAL
16740: IFTRUE 16744
16742: GO 16758
16744: POP
// AddMedal ( Initiative , - 1 ) ; end ;
16745: LD_STRING Initiative
16747: PPUSH
16748: LD_INT 1
16750: NEG
16751: PPUSH
16752: CALL_OW 101
16756: GO 16759
16758: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
16759: LD_EXP 35
16763: PUSH
16764: LD_EXP 61
16768: PPUSH
16769: CALL_OW 302
16773: PUSH
16774: LD_EXP 65
16778: PPUSH
16779: CALL_OW 302
16783: OR
16784: AND
16785: IFFALSE 16797
// AddMedal ( Belkov , 1 ) ;
16787: LD_STRING Belkov
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
16797: LD_EXP 35
16801: NOT
16802: PUSH
16803: LD_EXP 34
16807: NOT
16808: AND
16809: IFFALSE 16822
// AddMedal ( Belkov , - 1 ) ;
16811: LD_STRING Belkov
16813: PPUSH
16814: LD_INT 1
16816: NEG
16817: PPUSH
16818: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
16822: LD_EXP 35
16826: NOT
16827: PUSH
16828: LD_EXP 34
16832: AND
16833: IFFALSE 16846
// AddMedal ( Belkov , - 2 ) ;
16835: LD_STRING Belkov
16837: PPUSH
16838: LD_INT 2
16840: NEG
16841: PPUSH
16842: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
16846: LD_EXP 35
16850: PUSH
16851: LD_EXP 6
16855: PUSH
16856: LD_EXP 61
16860: PPUSH
16861: CALL_OW 301
16865: AND
16866: AND
16867: PUSH
16868: LD_EXP 6
16872: NOT
16873: PUSH
16874: LD_EXP 65
16878: PPUSH
16879: CALL_OW 301
16883: AND
16884: OR
16885: IFFALSE 16898
// AddMedal ( Belkov , - 2 ) ;
16887: LD_STRING Belkov
16889: PPUSH
16890: LD_INT 2
16892: NEG
16893: PPUSH
16894: CALL_OW 101
// if lostComradesCounter = 0 then
16898: LD_EXP 41
16902: PUSH
16903: LD_INT 0
16905: EQUAL
16906: IFFALSE 16920
// AddMedal ( NoLosses , 1 ) else
16908: LD_STRING NoLosses
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: CALL_OW 101
16918: GO 16930
// AddMedal ( NoLosses , 0 ) ;
16920: LD_STRING NoLosses
16922: PPUSH
16923: LD_INT 0
16925: PPUSH
16926: CALL_OW 101
// GiveMedals ( Main ) ;
16930: LD_STRING Main
16932: PPUSH
16933: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
16937: LD_INT 22
16939: PUSH
16940: LD_INT 3
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 21
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: PPUSH
16966: CALL_OW 43
// end ;
16970: LD_VAR 0 1
16974: RET
// function SavePlayerCharacters ; var othersYour ; begin
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16979: LD_EXP 59
16983: PPUSH
16984: LD_STRING Burlak
16986: PPUSH
16987: LD_INT 3
16989: PPUSH
16990: CALL 3802 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
16994: LD_EXP 60
16998: PPUSH
16999: LD_STRING Gnyevko
17001: PPUSH
17002: LD_INT 3
17004: PPUSH
17005: CALL 3802 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
17009: LD_EXP 67
17013: PPUSH
17014: LD_STRING Kovalyuk
17016: PPUSH
17017: LD_INT 3
17019: PPUSH
17020: CALL 3802 0 3
// if belkovReturn then
17024: LD_EXP 6
17028: IFFALSE 17047
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
17030: LD_EXP 61
17034: PPUSH
17035: LD_STRING Belkov
17037: PPUSH
17038: LD_INT 3
17040: PPUSH
17041: CALL 3802 0 3
17045: GO 17062
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
17047: LD_EXP 65
17051: PPUSH
17052: LD_STRING Belkov2
17054: PPUSH
17055: LD_INT 3
17057: PPUSH
17058: CALL 3802 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk ] ;
17062: LD_ADDR_VAR 0 2
17066: PUSH
17067: LD_INT 22
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 21
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: LD_EXP 59
17100: PUSH
17101: LD_EXP 60
17105: PUSH
17106: LD_EXP 61
17110: PUSH
17111: LD_EXP 65
17115: PUSH
17116: LD_EXP 67
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: DIFF
17128: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
17129: LD_VAR 0 2
17133: PPUSH
17134: LD_STRING other_survivors
17136: PPUSH
17137: LD_INT 3
17139: PPUSH
17140: CALL 3858 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
17144: LD_EXP 74
17148: PPUSH
17149: LD_STRING other_beria
17151: PPUSH
17152: LD_INT 6
17154: PPUSH
17155: CALL 3858 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
17159: LD_EXP 66
17163: PPUSH
17164: LD_STRING other_kirov
17166: PPUSH
17167: LD_INT 6
17169: PPUSH
17170: CALL 3858 0 3
// end ;
17174: LD_VAR 0 1
17178: RET
// function SaveGlobalVariables ; var vehicles ; begin
17179: LD_INT 0
17181: PPUSH
17182: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
17183: LD_ADDR_VAR 0 2
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_INT 3
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 21
17200: PUSH
17201: LD_INT 2
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 50
17210: PUSH
17211: EMPTY
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL_OW 69
17223: ST_TO_ADDR
// if vehicles then
17224: LD_VAR 0 2
17228: IFFALSE 17242
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
17230: LD_VAR 0 2
17234: PPUSH
17235: LD_STRING 02_Vehicles_1
17237: PPUSH
17238: CALL 4762 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
17242: LD_INT 8
17244: PPUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: PPUSH
17258: CALL_OW 70
17262: PPUSH
17263: LD_STRING 02_BeriaBase_2
17265: PPUSH
17266: CALL 4905 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
17270: LD_INT 9
17272: PPUSH
17273: LD_INT 22
17275: PUSH
17276: LD_INT 6
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 70
17301: PPUSH
17302: LD_STRING 02_KirovBase_3
17304: PPUSH
17305: CALL 4905 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
17309: LD_INT 22
17311: PUSH
17312: LD_INT 3
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 21
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 50
17331: PUSH
17332: EMPTY
17333: LIST
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 95
17340: PUSH
17341: LD_INT 8
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: PPUSH
17363: LD_STRING 02_OtherBuildings_4
17365: PPUSH
17366: CALL 4905 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
17370: LD_INT 22
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 21
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 50
17392: PUSH
17393: EMPTY
17394: LIST
17395: PUSH
17396: LD_INT 23
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: PPUSH
17412: CALL_OW 69
17416: PPUSH
17417: LD_STRING 02_AmericanBuildings_5
17419: PPUSH
17420: CALL 4905 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
17424: LD_EXP 4
17428: PPUSH
17429: LD_STRING 02_MeetBelkovBrother_6
17431: PPUSH
17432: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
17436: LD_INT 106
17438: PPUSH
17439: CALL_OW 274
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: CALL_OW 275
17451: PPUSH
17452: LD_STRING 02_BeriaResourceCrates_7
17454: PPUSH
17455: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
17459: LD_INT 106
17461: PPUSH
17462: CALL_OW 274
17466: PPUSH
17467: LD_INT 2
17469: PPUSH
17470: CALL_OW 275
17474: PPUSH
17475: LD_STRING 02_BeriaResourceOil_8
17477: PPUSH
17478: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
17482: LD_EXP 5
17486: PPUSH
17487: LD_STRING 02_PlatonovOpinion_9
17489: PPUSH
17490: CALL_OW 39
// end ; end_of_file
17494: LD_VAR 0 1
17498: RET
// export function BurlakIsDead ; begin
17499: LD_INT 0
17501: PPUSH
// YouLost ( Burlak ) ;
17502: LD_STRING Burlak
17504: PPUSH
17505: CALL_OW 104
// end ;
17509: LD_VAR 0 1
17513: RET
// export function AttackComrades ; begin
17514: LD_INT 0
17516: PPUSH
// YouLost ( SelfAttack ) ;
17517: LD_STRING SelfAttack
17519: PPUSH
17520: CALL_OW 104
// end ; end_of_file
17524: LD_VAR 0 1
17528: RET
// every 0 0$1 do var engs ;
17529: GO 17531
17531: DISABLE
17532: LD_INT 0
17534: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
17535: LD_ADDR_VAR 0 1
17539: PUSH
17540: LD_EXP 66
17544: PPUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 2
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PPUSH
17555: CALL_OW 72
17559: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 122
// wait ( 0 0$1 ) ;
17569: LD_INT 35
17571: PPUSH
17572: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 144 , 96 , 1 ) ;
17576: LD_VAR 0 1
17580: PPUSH
17581: LD_INT 31
17583: PPUSH
17584: LD_INT 144
17586: PPUSH
17587: LD_INT 96
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 31
17604: PPUSH
17605: LD_INT 146
17607: PPUSH
17608: LD_INT 107
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 180 , 118 , 5 ) ;
17618: LD_VAR 0 1
17622: PPUSH
17623: LD_INT 31
17625: PPUSH
17626: LD_INT 180
17628: PPUSH
17629: LD_INT 118
17631: PPUSH
17632: LD_INT 5
17634: PPUSH
17635: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_INT 31
17646: PPUSH
17647: LD_INT 176
17649: PPUSH
17650: LD_INT 123
17652: PPUSH
17653: LD_INT 5
17655: PPUSH
17656: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 31
17667: PPUSH
17668: LD_INT 170
17670: PPUSH
17671: LD_INT 102
17673: PPUSH
17674: LD_INT 4
17676: PPUSH
17677: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
17681: LD_VAR 0 1
17685: PPUSH
17686: LD_INT 31
17688: PPUSH
17689: LD_INT 173
17691: PPUSH
17692: LD_INT 105
17694: PPUSH
17695: LD_INT 4
17697: PPUSH
17698: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 71
17709: PPUSH
17710: CALL_OW 180
// end ;
17714: PPOPN 1
17716: END
// every 0 0$1 trigger activateAMAI do
17717: LD_EXP 26
17721: IFFALSE 17745
17723: GO 17725
17725: DISABLE
// begin enable ;
17726: ENABLE
// RepairDamageLeftBunkers ;
17727: CALL 17746 0 0
// if Difficulty = 3 then
17731: LD_OWVAR 67
17735: PUSH
17736: LD_INT 3
17738: EQUAL
17739: IFFALSE 17745
// RepairDamageRightBunkers ;
17741: CALL 17954 0 0
// end ;
17745: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
17746: LD_INT 0
17748: PPUSH
17749: PPUSH
17750: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
17751: LD_EXP 83
17755: NOT
17756: PUSH
17757: LD_INT 17
17759: PPUSH
17760: LD_INT 22
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 21
17772: PUSH
17773: LD_INT 3
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 30
17782: PUSH
17783: LD_INT 31
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 3
17792: PUSH
17793: LD_INT 24
17795: PUSH
17796: LD_INT 1000
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 70
17817: PUSH
17818: LD_INT 0
17820: EQUAL
17821: OR
17822: IFFALSE 17826
// exit ;
17824: GO 17949
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
17826: LD_EXP 83
17830: PPUSH
17831: LD_INT 3
17833: PUSH
17834: LD_INT 60
17836: PUSH
17837: EMPTY
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 72
17848: PPUSH
17849: CALL_OW 122
// for bunker in leftBunkers do
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_EXP 79
17862: PUSH
17863: FOR_IN
17864: IFFALSE 17915
// if GetLives ( bunker ) < 1000 then
17866: LD_VAR 0 3
17870: PPUSH
17871: CALL_OW 256
17875: PUSH
17876: LD_INT 1000
17878: LESS
17879: IFFALSE 17913
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
17881: LD_EXP 83
17885: PPUSH
17886: LD_INT 3
17888: PUSH
17889: LD_INT 60
17891: PUSH
17892: EMPTY
17893: LIST
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 72
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: CALL_OW 190
17913: GO 17863
17915: POP
17916: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
17917: LD_EXP 83
17921: PPUSH
17922: LD_INT 3
17924: PUSH
17925: LD_INT 60
17927: PUSH
17928: EMPTY
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 72
17939: PPUSH
17940: LD_EXP 81
17944: PPUSH
17945: CALL_OW 180
// end ;
17949: LD_VAR 0 1
17953: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
17954: LD_INT 0
17956: PPUSH
17957: PPUSH
17958: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
17959: LD_EXP 84
17963: NOT
17964: PUSH
17965: LD_INT 16
17967: PPUSH
17968: LD_INT 22
17970: PUSH
17971: LD_INT 1
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 21
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 30
17990: PUSH
17991: LD_INT 31
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 24
18003: PUSH
18004: LD_INT 1000
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 70
18025: PUSH
18026: LD_INT 0
18028: EQUAL
18029: OR
18030: IFFALSE 18034
// exit ;
18032: GO 18157
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
18034: LD_EXP 84
18038: PPUSH
18039: LD_INT 3
18041: PUSH
18042: LD_INT 60
18044: PUSH
18045: EMPTY
18046: LIST
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 72
18056: PPUSH
18057: CALL_OW 122
// for bunker in rightBunkers do
18061: LD_ADDR_VAR 0 3
18065: PUSH
18066: LD_EXP 80
18070: PUSH
18071: FOR_IN
18072: IFFALSE 18123
// if GetLives ( bunker ) < 1000 then
18074: LD_VAR 0 3
18078: PPUSH
18079: CALL_OW 256
18083: PUSH
18084: LD_INT 1000
18086: LESS
18087: IFFALSE 18121
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
18089: LD_EXP 84
18093: PPUSH
18094: LD_INT 3
18096: PUSH
18097: LD_INT 60
18099: PUSH
18100: EMPTY
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 72
18111: PPUSH
18112: LD_VAR 0 3
18116: PPUSH
18117: CALL_OW 190
18121: GO 18071
18123: POP
18124: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
18125: LD_EXP 84
18129: PPUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 60
18135: PUSH
18136: EMPTY
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PPUSH
18143: CALL_OW 72
18147: PPUSH
18148: LD_EXP 82
18152: PPUSH
18153: CALL_OW 180
// end ;
18157: LD_VAR 0 1
18161: RET
