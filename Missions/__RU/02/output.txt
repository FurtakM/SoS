// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 50097 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5780 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 56516 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 56516 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16734 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16734 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16734 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16734 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1610
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1451: LD_ADDR_VAR 0 1
1455: PUSH
1456: LD_EXP 43
1460: PPUSH
1461: LD_INT 25
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 72
1475: ST_TO_ADDR
// if not tmp then
1476: LD_VAR 0 1
1480: NOT
1481: IFFALSE 1485
// exit ;
1483: GO 1610
// wait ( 0 0$5 ) ;
1485: LD_INT 175
1487: PPUSH
1488: CALL_OW 67
// ComExit ( tmp ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL 53859 0 1
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1501: LD_VAR 0 1
1505: PPUSH
1506: LD_INT 2
1508: PPUSH
1509: LD_INT 113
1511: PPUSH
1512: LD_INT 113
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1522: LD_INT 83
1524: PPUSH
1525: LD_INT 46
1527: PPUSH
1528: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1532: LD_INT 83
1534: PPUSH
1535: LD_INT 47
1537: PPUSH
1538: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1542: LD_INT 83
1544: PPUSH
1545: LD_INT 48
1547: PPUSH
1548: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1552: LD_VAR 0 1
1556: PPUSH
1557: LD_INT 26
1559: PPUSH
1560: LD_INT 116
1562: PPUSH
1563: LD_INT 98
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1573: LD_INT 35
1575: PPUSH
1576: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1580: LD_VAR 0 1
1584: PPUSH
1585: LD_INT 60
1587: PUSH
1588: EMPTY
1589: LIST
1590: PPUSH
1591: CALL_OW 72
1595: NOT
1596: IFFALSE 1573
// ComEnterUnit ( tmp , kirov ) ;
1598: LD_VAR 0 1
1602: PPUSH
1603: LD_INT 71
1605: PPUSH
1606: CALL_OW 120
// end ;
1610: PPOPN 1
1612: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1613: LD_INT 0
1615: PPUSH
1616: PPUSH
1617: PPUSH
1618: PPUSH
1619: PPUSH
1620: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1621: LD_ADDR_VAR 0 3
1625: PUSH
1626: LD_INT 22
1628: PUSH
1629: LD_INT 6
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 21
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PPUSH
1650: CALL_OW 69
1654: ST_TO_ADDR
// if not belkovTank then
1655: LD_VAR 0 3
1659: NOT
1660: IFFALSE 1753
// begin uc_side := 6 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 6
1669: ST_TO_ADDR
// uc_nation := 3 ;
1670: LD_ADDR_OWVAR 21
1674: PUSH
1675: LD_INT 3
1677: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1678: LD_INT 21
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_INT 42
1689: PPUSH
1690: LD_INT 100
1692: PPUSH
1693: CALL 21598 0 5
// belkovTank := CreateVehicle ;
1697: LD_ADDR_VAR 0 3
1701: PUSH
1702: CALL_OW 45
1706: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1707: LD_VAR 0 3
1711: PPUSH
1712: LD_INT 5
1714: PPUSH
1715: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1719: LD_VAR 0 3
1723: PPUSH
1724: LD_INT 127
1726: PPUSH
1727: LD_INT 118
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1737: LD_EXP 36
1741: PPUSH
1742: LD_VAR 0 3
1746: PPUSH
1747: CALL_OW 120
// end else
1751: GO 1767
// begin belkovTank := belkovTank [ 1 ] ;
1753: LD_ADDR_VAR 0 3
1757: PUSH
1758: LD_VAR 0 3
1762: PUSH
1763: LD_INT 1
1765: ARRAY
1766: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 71
1774: PPUSH
1775: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1791: LD_VAR 0 3
1795: PPUSH
1796: CALL_OW 256
1800: PUSH
1801: LD_INT 1000
1803: LESS
1804: IFFALSE 1917
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: LD_EXP 43
1815: PPUSH
1816: LD_INT 25
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PPUSH
1826: CALL_OW 72
1830: ST_TO_ADDR
// if not mech then
1831: LD_VAR 0 4
1835: NOT
1836: IFFALSE 1852
// SetLives ( belkovTank , 1000 ) else
1838: LD_VAR 0 3
1842: PPUSH
1843: LD_INT 1000
1845: PPUSH
1846: CALL_OW 234
1850: GO 1917
// begin ComExit ( mech ) ;
1852: LD_VAR 0 4
1856: PPUSH
1857: CALL 53859 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1861: LD_VAR 0 4
1865: PPUSH
1866: LD_VAR 0 3
1870: PPUSH
1871: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 22
1882: PUSH
1883: LD_INT 6
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 30
1892: PUSH
1893: LD_INT 2
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PPUSH
1904: CALL_OW 69
1908: PUSH
1909: LD_INT 1
1911: ARRAY
1912: PPUSH
1913: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1917: LD_INT 70
1919: PPUSH
1920: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1924: LD_VAR 0 3
1928: PPUSH
1929: CALL_OW 256
1933: PUSH
1934: LD_INT 1000
1936: EQUAL
1937: IFFALSE 1917
// if mech then
1939: LD_VAR 0 4
1943: IFFALSE 1987
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1945: LD_VAR 0 4
1949: PPUSH
1950: LD_INT 22
1952: PUSH
1953: LD_INT 6
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 30
1962: PUSH
1963: LD_INT 2
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PPUSH
1974: CALL_OW 69
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PPUSH
1983: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
1987: LD_EXP 36
1991: PPUSH
1992: LD_INT 107
1994: PPUSH
1995: LD_INT 104
1997: PPUSH
1998: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2002: LD_EXP 36
2006: PPUSH
2007: LD_INT 95
2009: PPUSH
2010: LD_INT 101
2012: PPUSH
2013: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2017: LD_EXP 36
2021: PPUSH
2022: LD_INT 89
2024: PPUSH
2025: LD_INT 100
2027: PPUSH
2028: CALL_OW 171
// wait ( 0 0$2 ) ;
2032: LD_INT 70
2034: PPUSH
2035: CALL_OW 67
// for i in belkovTeam do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: LD_EXP 45
2048: PUSH
2049: FOR_IN
2050: IFFALSE 2078
// begin ComExit ( i ) ;
2052: LD_VAR 0 2
2056: PPUSH
2057: CALL 53859 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2061: LD_VAR 0 2
2065: PPUSH
2066: LD_INT 89
2068: PPUSH
2069: LD_INT 100
2071: PPUSH
2072: CALL_OW 171
// end ;
2076: GO 2049
2078: POP
2079: POP
// tmp := Belkov union belkovTeam ;
2080: LD_ADDR_VAR 0 5
2084: PUSH
2085: LD_EXP 36
2089: PUSH
2090: LD_EXP 45
2094: UNION
2095: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2096: LD_INT 35
2098: PPUSH
2099: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2103: LD_VAR 0 5
2107: PPUSH
2108: LD_INT 60
2110: PUSH
2111: EMPTY
2112: LIST
2113: PPUSH
2114: CALL_OW 72
2118: NOT
2119: IFFALSE 2096
// ComMoveXY ( tmp , 71 , 65 ) ;
2121: LD_VAR 0 5
2125: PPUSH
2126: LD_INT 71
2128: PPUSH
2129: LD_INT 65
2131: PPUSH
2132: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2136: LD_VAR 0 5
2140: PPUSH
2141: LD_INT 61
2143: PPUSH
2144: LD_INT 37
2146: PPUSH
2147: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2151: LD_VAR 0 5
2155: PPUSH
2156: LD_INT 67
2158: PPUSH
2159: LD_INT 17
2161: PPUSH
2162: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2166: LD_VAR 0 5
2170: PPUSH
2171: LD_INT 70
2173: PPUSH
2174: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2178: LD_EXP 36
2182: PPUSH
2183: LD_INT 63
2185: PPUSH
2186: LD_INT 8
2188: PPUSH
2189: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2193: LD_EXP 36
2197: PPUSH
2198: LD_INT 105
2200: PPUSH
2201: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2205: LD_EXP 36
2209: PPUSH
2210: LD_INT 86
2212: PPUSH
2213: LD_INT 37
2215: PPUSH
2216: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2220: LD_EXP 36
2224: PPUSH
2225: LD_INT 105
2227: PPUSH
2228: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2232: LD_VAR 0 5
2236: PPUSH
2237: LD_INT 88
2239: PPUSH
2240: LD_INT 29
2242: PPUSH
2243: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2247: LD_INT 35
2249: PPUSH
2250: CALL_OW 67
// for i in tmp do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: LD_VAR 0 5
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2296
// if not HasTask ( i ) then
2267: LD_VAR 0 2
2271: PPUSH
2272: CALL_OW 314
2276: NOT
2277: IFFALSE 2294
// AddComMoveXY ( tmp , 88 , 29 ) ;
2279: LD_VAR 0 5
2283: PPUSH
2284: LD_INT 88
2286: PPUSH
2287: LD_INT 29
2289: PPUSH
2290: CALL_OW 171
2294: GO 2264
2296: POP
2297: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2298: LD_VAR 0 5
2302: PPUSH
2303: LD_INT 95
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL_OW 72
2317: IFFALSE 2411
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: LD_VAR 0 5
2328: PPUSH
2329: LD_INT 95
2331: PUSH
2332: LD_INT 6
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PPUSH
2339: CALL_OW 72
2343: PUSH
2344: FOR_IN
2345: IFFALSE 2409
// begin if i = Belkov then
2347: LD_VAR 0 2
2351: PUSH
2352: LD_EXP 36
2356: EQUAL
2357: IFFALSE 2398
// begin belkovTank := IsInUnit ( Belkov ) ;
2359: LD_ADDR_VAR 0 3
2363: PUSH
2364: LD_EXP 36
2368: PPUSH
2369: CALL_OW 310
2373: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2374: LD_ADDR_VAR 0 6
2378: PUSH
2379: LD_VAR 0 3
2383: PPUSH
2384: CALL_OW 261
2388: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2389: LD_VAR 0 3
2393: PPUSH
2394: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2398: LD_VAR 0 2
2402: PPUSH
2403: CALL_OW 64
// end ;
2407: GO 2344
2409: POP
2410: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2411: LD_VAR 0 5
2415: PPUSH
2416: LD_INT 52
2418: PUSH
2419: EMPTY
2420: LIST
2421: PPUSH
2422: CALL_OW 72
2426: NOT
2427: IFFALSE 2247
// wait ( 1 1$20 ) ;
2429: LD_INT 2800
2431: PPUSH
2432: CALL_OW 67
// if fuel < 50 then
2436: LD_VAR 0 6
2440: PUSH
2441: LD_INT 50
2443: LESS
2444: IFFALSE 2454
// fuel := 50 ;
2446: LD_ADDR_VAR 0 6
2450: PUSH
2451: LD_INT 50
2453: ST_TO_ADDR
// uc_side := 6 ;
2454: LD_ADDR_OWVAR 20
2458: PUSH
2459: LD_INT 6
2461: ST_TO_ADDR
// uc_nation := 3 ;
2462: LD_ADDR_OWVAR 21
2466: PUSH
2467: LD_INT 3
2469: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2470: LD_INT 21
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: LD_INT 42
2481: PPUSH
2482: LD_VAR 0 6
2486: PUSH
2487: LD_INT 5
2489: MINUS
2490: PPUSH
2491: CALL 21598 0 5
// belkovTank := CreateVehicle ;
2495: LD_ADDR_VAR 0 3
2499: PUSH
2500: CALL_OW 45
2504: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2505: LD_VAR 0 3
2509: PPUSH
2510: LD_INT 2
2512: PPUSH
2513: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2517: LD_VAR 0 3
2521: PPUSH
2522: LD_INT 60
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2535: LD_EXP 36
2539: PPUSH
2540: LD_VAR 0 3
2544: PPUSH
2545: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2549: LD_EXP 36
2553: PPUSH
2554: LD_INT 72
2556: PPUSH
2557: LD_INT 26
2559: PPUSH
2560: CALL_OW 111
// wait ( 0 0$2 ) ;
2564: LD_INT 70
2566: PPUSH
2567: CALL_OW 67
// for i in belkovTeam do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: LD_EXP 45
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2626
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 60
2591: PPUSH
2592: LD_INT 3
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 65
2609: PPUSH
2610: LD_INT 18
2612: PPUSH
2613: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2617: LD_INT 28
2619: PPUSH
2620: CALL_OW 67
// end ;
2624: GO 2581
2626: POP
2627: POP
// repeat wait ( 0 0$1 ) ;
2628: LD_INT 35
2630: PPUSH
2631: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2635: LD_EXP 14
2639: PUSH
2640: LD_EXP 45
2644: PPUSH
2645: LD_INT 60
2647: PUSH
2648: EMPTY
2649: LIST
2650: PPUSH
2651: CALL_OW 72
2655: NOT
2656: AND
2657: IFFALSE 2628
// americanTrap := true ;
2659: LD_ADDR_EXP 17
2663: PUSH
2664: LD_INT 1
2666: ST_TO_ADDR
// end ;
2667: LD_VAR 0 1
2671: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2672: LD_EXP 4
2676: PUSH
2677: LD_EXP 40
2681: PPUSH
2682: CALL_OW 302
2686: AND
2687: IFFALSE 3007
2689: GO 2691
2691: DISABLE
2692: LD_INT 0
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
// begin enable ;
2698: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2699: LD_EXP 8
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_EXP 40
2712: PPUSH
2713: CALL_OW 314
2717: NOT
2718: AND
2719: IFFALSE 2888
// begin dir := rand ( 0 , 5 ) ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 5
2731: PPUSH
2732: CALL_OW 12
2736: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2737: LD_ADDR_VAR 0 1
2741: PUSH
2742: LD_EXP 40
2746: PPUSH
2747: CALL_OW 250
2751: PPUSH
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 5
2759: PPUSH
2760: CALL_OW 272
2764: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_EXP 40
2774: PPUSH
2775: CALL_OW 251
2779: PPUSH
2780: LD_VAR 0 4
2784: PPUSH
2785: LD_INT 5
2787: PPUSH
2788: CALL_OW 273
2792: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 488
2807: PUSH
2808: LD_INT 106
2810: PPUSH
2811: LD_VAR 0 1
2815: PPUSH
2816: LD_VAR 0 2
2820: PPUSH
2821: CALL_OW 297
2825: PUSH
2826: LD_INT 26
2828: LESS
2829: AND
2830: IFFALSE 2853
// AddComMoveXY ( Platonov , x , y ) else
2832: LD_EXP 40
2836: PPUSH
2837: LD_VAR 0 1
2841: PPUSH
2842: LD_VAR 0 2
2846: PPUSH
2847: CALL_OW 171
2851: GO 2868
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2853: LD_EXP 40
2857: PPUSH
2858: LD_INT 64
2860: PPUSH
2861: LD_INT 96
2863: PPUSH
2864: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2868: LD_EXP 40
2872: PPUSH
2873: LD_INT 105
2875: PPUSH
2876: LD_INT 315
2878: PPUSH
2879: CALL_OW 12
2883: PPUSH
2884: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2888: LD_EXP 8
2892: PUSH
2893: LD_INT 0
2895: LESSEQUAL
2896: IFFALSE 2942
// begin if not IsAt ( Platonov , 64 , 96 ) then
2898: LD_EXP 40
2902: PPUSH
2903: LD_INT 64
2905: PPUSH
2906: LD_INT 96
2908: PPUSH
2909: CALL_OW 307
2913: NOT
2914: IFFALSE 2940
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2916: LD_EXP 40
2920: PPUSH
2921: LD_INT 64
2923: PPUSH
2924: LD_INT 96
2926: PPUSH
2927: CALL_OW 111
// AddComHold ( Platonov ) ;
2931: LD_EXP 40
2935: PPUSH
2936: CALL_OW 200
// end ; end else
2940: GO 3007
// if tick mod 0 0$75 = 0 0$00 then
2942: LD_OWVAR 1
2946: PUSH
2947: LD_INT 2625
2949: MOD
2950: PUSH
2951: LD_INT 0
2953: EQUAL
2954: IFFALSE 3007
// begin amount := rand ( 2 , 5 ) ;
2956: LD_ADDR_VAR 0 3
2960: PUSH
2961: LD_INT 2
2963: PPUSH
2964: LD_INT 5
2966: PPUSH
2967: CALL_OW 12
2971: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
2972: LD_ADDR_EXP 8
2976: PUSH
2977: LD_EXP 8
2981: PUSH
2982: LD_VAR 0 3
2986: PUSH
2987: LD_INT 10
2989: MUL
2990: MINUS
2991: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
2992: LD_VAR 0 3
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: CALL_OW 55
// end ; end ;
3007: PPOPN 4
3009: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3010: LD_INT 106
3012: PPUSH
3013: CALL_OW 274
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: CALL_OW 275
3025: PUSH
3026: LD_INT 30
3028: LESS
3029: IFFALSE 3239
3031: GO 3033
3033: DISABLE
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_EXP 43
3047: PPUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 60
3053: PUSH
3054: EMPTY
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PPUSH
3075: CALL_OW 72
3079: ST_TO_ADDR
// if not eng then
3080: LD_VAR 0 2
3084: NOT
3085: IFFALSE 3089
// exit ;
3087: GO 3239
// ComExit ( eng ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: CALL 53859 0 1
// i := 5 ;
3098: LD_ADDR_VAR 0 1
3102: PUSH
3103: LD_INT 5
3105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3106: LD_INT 35
3108: PPUSH
3109: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 60
3120: PUSH
3121: EMPTY
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: NOT
3129: PUSH
3130: LD_VAR 0 2
3134: AND
3135: IFFALSE 3205
// begin ComTransport ( eng , kirov , mat_oil ) ;
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_INT 71
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3152: LD_VAR 0 2
3156: PPUSH
3157: LD_INT 67
3159: PPUSH
3160: LD_INT 99
3162: PPUSH
3163: CALL_OW 171
// AddComUnload ( eng ) ;
3167: LD_VAR 0 2
3171: PPUSH
3172: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 107
3183: PPUSH
3184: LD_INT 104
3186: PPUSH
3187: CALL_OW 171
// i := i - 1 ;
3191: LD_ADDR_VAR 0 1
3195: PUSH
3196: LD_VAR 0 1
3200: PUSH
3201: LD_INT 1
3203: MINUS
3204: ST_TO_ADDR
// end ; until i = 0 ;
3205: LD_VAR 0 1
3209: PUSH
3210: LD_INT 0
3212: EQUAL
3213: IFFALSE 3106
// AddComMoveUnit ( eng , kirov ) ;
3215: LD_VAR 0 2
3219: PPUSH
3220: LD_INT 71
3222: PPUSH
3223: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: LD_INT 71
3234: PPUSH
3235: CALL_OW 180
// end ;
3239: PPOPN 2
3241: END
// export function SendReinforcements ; var i ; begin
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
// reinforcementsGained := true ;
3246: LD_ADDR_EXP 25
3250: PUSH
3251: LD_INT 1
3253: ST_TO_ADDR
// for i := 1 to 2 do
3254: LD_ADDR_VAR 0 2
3258: PUSH
3259: DOUBLE
3260: LD_INT 1
3262: DEC
3263: ST_TO_ADDR
3264: LD_INT 2
3266: PUSH
3267: FOR_TO
3268: IFFALSE 3350
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3270: LD_EXP 44
3274: PUSH
3275: LD_VAR 0 2
3279: ARRAY
3280: PPUSH
3281: CALL 53859 0 1
3285: IFFALSE 3294
// wait ( 0 0$0.3 ) ;
3287: LD_INT 10
3289: PPUSH
3290: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3294: LD_EXP 44
3298: PUSH
3299: LD_VAR 0 2
3303: ARRAY
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: LD_INT 84
3310: PPUSH
3311: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3315: LD_EXP 44
3319: PUSH
3320: LD_VAR 0 2
3324: ARRAY
3325: PPUSH
3326: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: LD_INT 3
3343: PPUSH
3344: CALL_OW 235
// end ;
3348: GO 3267
3350: POP
3351: POP
// end ;
3352: LD_VAR 0 1
3356: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3357: LD_EXP 21
3361: PUSH
3362: LD_EXP 18
3366: AND
3367: PUSH
3368: LD_EXP 43
3372: PPUSH
3373: LD_INT 25
3375: PUSH
3376: LD_INT 3
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 72
3387: AND
3388: IFFALSE 3545
3390: GO 3392
3392: DISABLE
3393: LD_INT 0
3395: PPUSH
3396: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3397: LD_ADDR_VAR 0 1
3401: PUSH
3402: LD_EXP 43
3406: PPUSH
3407: LD_INT 25
3409: PUSH
3410: LD_INT 3
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 72
3421: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 6
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 30
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// if not fac then
3456: LD_VAR 0 2
3460: NOT
3461: IFFALSE 3465
// exit ;
3463: GO 3545
// fac := fac [ 1 ] ;
3465: LD_ADDR_VAR 0 2
3469: PUSH
3470: LD_VAR 0 2
3474: PUSH
3475: LD_INT 1
3477: ARRAY
3478: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3479: LD_VAR 0 2
3483: PPUSH
3484: CALL_OW 313
3488: PUSH
3489: LD_INT 0
3491: EQUAL
3492: IFFALSE 3524
// begin ComExit ( mech ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL 53859 0 1
// wait ( 3 ) ;
3503: LD_INT 3
3505: PPUSH
3506: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_VAR 0 2
3519: PPUSH
3520: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3524: LD_VAR 0 2
3528: PPUSH
3529: LD_INT 21
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_INT 1
3537: PPUSH
3538: LD_INT 42
3540: PPUSH
3541: CALL_OW 125
// end ;
3545: PPOPN 2
3547: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3548: LD_INT 0
3550: PPUSH
3551: PPUSH
3552: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3553: LD_VAR 0 1
3557: PPUSH
3558: LD_INT 90
3560: PPUSH
3561: LD_INT 100
3563: PPUSH
3564: CALL_OW 111
// wait ( 0 0$10 ) ;
3568: LD_INT 350
3570: PPUSH
3571: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3575: LD_VAR 0 1
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3594: LD_ADDR_VAR 0 4
3598: PUSH
3599: LD_VAR 0 1
3603: PPUSH
3604: CALL_OW 110
3608: ST_TO_ADDR
// if tag = 0 then
3609: LD_VAR 0 4
3613: PUSH
3614: LD_INT 0
3616: EQUAL
3617: IFFALSE 3688
// begin if not HasTask ( vehicle ) then
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 314
3628: NOT
3629: IFFALSE 3646
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3631: LD_VAR 0 1
3635: PPUSH
3636: LD_INT 83
3638: PPUSH
3639: LD_INT 68
3641: PPUSH
3642: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3646: LD_VAR 0 1
3650: PPUSH
3651: CALL_OW 256
3655: PUSH
3656: LD_INT 750
3658: LESS
3659: IFFALSE 3688
// begin SetTag ( vehicle , 1 ) ;
3661: LD_VAR 0 1
3665: PPUSH
3666: LD_INT 1
3668: PPUSH
3669: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3673: LD_VAR 0 1
3677: PPUSH
3678: LD_INT 93
3680: PPUSH
3681: LD_INT 102
3683: PPUSH
3684: CALL_OW 111
// end ; end ; if tag = 1 then
3688: LD_VAR 0 4
3692: PUSH
3693: LD_INT 1
3695: EQUAL
3696: IFFALSE 3786
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3698: LD_VAR 0 1
3702: PPUSH
3703: LD_INT 113
3705: PPUSH
3706: LD_INT 106
3708: PPUSH
3709: CALL_OW 307
3713: NOT
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 314
3724: NOT
3725: AND
3726: IFFALSE 3743
// ComMoveXY ( vehicle , 113 , 106 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 113
3735: PPUSH
3736: LD_INT 106
3738: PPUSH
3739: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3743: LD_VAR 0 1
3747: PPUSH
3748: LD_INT 113
3750: PPUSH
3751: LD_INT 106
3753: PPUSH
3754: CALL_OW 307
3758: IFFALSE 3786
// begin SetTag ( vehicle , 2 ) ;
3760: LD_VAR 0 1
3764: PPUSH
3765: LD_INT 2
3767: PPUSH
3768: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 311
3781: PPUSH
3782: CALL 55163 0 1
// end ; end ; if tag = 2 then
3786: LD_VAR 0 4
3790: PUSH
3791: LD_INT 2
3793: EQUAL
3794: IFFALSE 3858
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3796: LD_VAR 0 1
3800: PPUSH
3801: CALL_OW 256
3805: PUSH
3806: LD_INT 1000
3808: EQUAL
3809: PUSH
3810: LD_VAR 0 1
3814: PPUSH
3815: CALL_OW 311
3819: AND
3820: IFFALSE 3858
// begin ComMoveUnit ( vehicle , kirov ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: LD_INT 71
3829: PPUSH
3830: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3834: LD_VAR 0 1
3838: PPUSH
3839: LD_INT 71
3841: PPUSH
3842: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3846: LD_VAR 0 1
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 301
3867: PUSH
3868: LD_EXP 23
3872: OR
3873: IFFALSE 3587
// if eastOutpostDestroyed then
3875: LD_EXP 23
3879: IFFALSE 3896
// ComMoveXY ( vehicle , 111 , 105 ) ;
3881: LD_VAR 0 1
3885: PPUSH
3886: LD_INT 111
3888: PPUSH
3889: LD_INT 105
3891: PPUSH
3892: CALL_OW 111
// end ; end_of_file
3896: LD_VAR 0 2
3900: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3901: LD_INT 0
3903: PPUSH
3904: PPUSH
3905: PPUSH
3906: PPUSH
// uc_side := 1 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 1
3914: ST_TO_ADDR
// uc_nation := 1 ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 1
3922: ST_TO_ADDR
// usWestForces := [ ] ;
3923: LD_ADDR_EXP 46
3927: PUSH
3928: EMPTY
3929: ST_TO_ADDR
// usEastForces := [ ] ;
3930: LD_ADDR_EXP 47
3934: PUSH
3935: EMPTY
3936: ST_TO_ADDR
// bc_type := b_depot ;
3937: LD_ADDR_OWVAR 42
3941: PUSH
3942: LD_INT 0
3944: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
3945: LD_ADDR_OWVAR 43
3949: PUSH
3950: LD_OWVAR 67
3954: PUSH
3955: LD_INT 1
3957: MINUS
3958: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
3959: LD_INT 48
3961: PPUSH
3962: LD_INT 54
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
3972: LD_ADDR_VAR 0 4
3976: PUSH
3977: LD_INT 55
3979: PUSH
3980: LD_INT 55
3982: PUSH
3983: LD_INT 4
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 59
3993: PUSH
3994: LD_INT 61
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: ST_TO_ADDR
// if Difficulty > 1 then
4009: LD_OWVAR 67
4013: PUSH
4014: LD_INT 1
4016: GREATER
4017: IFFALSE 4053
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4019: LD_ADDR_VAR 0 4
4023: PUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: LD_VAR 0 4
4033: PPUSH
4034: LD_INT 46
4036: PUSH
4037: LD_INT 64
4039: PUSH
4040: LD_INT 0
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 2
4052: ST_TO_ADDR
// if Difficulty > 2 then
4053: LD_OWVAR 67
4057: PUSH
4058: LD_INT 2
4060: GREATER
4061: IFFALSE 4097
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4063: LD_ADDR_VAR 0 4
4067: PUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 4
4077: PPUSH
4078: LD_INT 36
4080: PUSH
4081: LD_INT 48
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 2
4096: ST_TO_ADDR
// bc_type := b_breastwork ;
4097: LD_ADDR_OWVAR 42
4101: PUSH
4102: LD_INT 31
4104: ST_TO_ADDR
// InitHC_All ( ) ;
4105: CALL_OW 584
// for i in tmp do
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: LD_VAR 0 4
4118: PUSH
4119: FOR_IN
4120: IFFALSE 4264
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 1
4129: ARRAY
4130: PPUSH
4131: LD_VAR 0 2
4135: PUSH
4136: LD_INT 2
4138: ARRAY
4139: PPUSH
4140: LD_VAR 0 2
4144: PUSH
4145: LD_INT 3
4147: ARRAY
4148: PPUSH
4149: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4153: LD_INT 0
4155: PPUSH
4156: LD_OWVAR 67
4160: PPUSH
4161: CALL_OW 381
// un := CreateHuman ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: CALL_OW 44
4174: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4175: LD_ADDR_EXP 46
4179: PUSH
4180: LD_EXP 46
4184: PPUSH
4185: LD_EXP 46
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: PPUSH
4194: LD_VAR 0 3
4198: PPUSH
4199: CALL_OW 1
4203: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4204: LD_VAR 0 3
4208: PPUSH
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 3
4216: ARRAY
4217: PUSH
4218: LD_INT 3
4220: PLUS
4221: PUSH
4222: LD_INT 6
4224: MOD
4225: PPUSH
4226: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4230: LD_VAR 0 3
4234: PPUSH
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: PPUSH
4244: LD_VAR 0 2
4248: PUSH
4249: LD_INT 2
4251: ARRAY
4252: PPUSH
4253: CALL_OW 428
4257: PPUSH
4258: CALL_OW 52
// end ;
4262: GO 4119
4264: POP
4265: POP
// for i := 1 to 2 do
4266: LD_ADDR_VAR 0 2
4270: PUSH
4271: DOUBLE
4272: LD_INT 1
4274: DEC
4275: ST_TO_ADDR
4276: LD_INT 2
4278: PUSH
4279: FOR_TO
4280: IFFALSE 4356
// begin PrepareEngineer ( false , Difficulty ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_OWVAR 67
4289: PPUSH
4290: CALL_OW 382
// un := CreateHuman ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4304: LD_ADDR_EXP 46
4308: PUSH
4309: LD_EXP 46
4313: PPUSH
4314: LD_EXP 46
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: PPUSH
4323: LD_VAR 0 3
4327: PPUSH
4328: CALL_OW 1
4332: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_INT 54
4340: PPUSH
4341: LD_INT 58
4343: PPUSH
4344: LD_INT 2
4346: PPUSH
4347: LD_INT 0
4349: PPUSH
4350: CALL_OW 50
// end ;
4354: GO 4279
4356: POP
4357: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4358: LD_ADDR_VAR 0 4
4362: PUSH
4363: LD_INT 87
4365: PUSH
4366: LD_INT 62
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 89
4379: PUSH
4380: LD_INT 67
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// if Difficulty > 2 then
4395: LD_OWVAR 67
4399: PUSH
4400: LD_INT 2
4402: GREATER
4403: IFFALSE 4439
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4405: LD_ADDR_VAR 0 4
4409: PUSH
4410: LD_VAR 0 4
4414: PPUSH
4415: LD_VAR 0 4
4419: PPUSH
4420: LD_INT 88
4422: PUSH
4423: LD_INT 53
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: PPUSH
4434: CALL_OW 2
4438: ST_TO_ADDR
// bc_type := b_breastwork ;
4439: LD_ADDR_OWVAR 42
4443: PUSH
4444: LD_INT 31
4446: ST_TO_ADDR
// for i in tmp do
4447: LD_ADDR_VAR 0 2
4451: PUSH
4452: LD_VAR 0 4
4456: PUSH
4457: FOR_IN
4458: IFFALSE 4602
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4460: LD_VAR 0 2
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: PPUSH
4469: LD_VAR 0 2
4473: PUSH
4474: LD_INT 2
4476: ARRAY
4477: PPUSH
4478: LD_VAR 0 2
4482: PUSH
4483: LD_INT 3
4485: ARRAY
4486: PPUSH
4487: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4491: LD_INT 0
4493: PPUSH
4494: LD_OWVAR 67
4498: PPUSH
4499: CALL_OW 381
// un := CreateHuman ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: CALL_OW 44
4512: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4513: LD_ADDR_EXP 47
4517: PUSH
4518: LD_EXP 47
4522: PPUSH
4523: LD_EXP 47
4527: PUSH
4528: LD_INT 1
4530: PLUS
4531: PPUSH
4532: LD_VAR 0 3
4536: PPUSH
4537: CALL_OW 1
4541: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4542: LD_VAR 0 3
4546: PPUSH
4547: LD_VAR 0 2
4551: PUSH
4552: LD_INT 3
4554: ARRAY
4555: PUSH
4556: LD_INT 3
4558: PLUS
4559: PUSH
4560: LD_INT 6
4562: MOD
4563: PPUSH
4564: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_VAR 0 2
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: PPUSH
4582: LD_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ARRAY
4590: PPUSH
4591: CALL_OW 428
4595: PPUSH
4596: CALL_OW 52
// end ;
4600: GO 4457
4602: POP
4603: POP
// for i := 1 to 2 do
4604: LD_ADDR_VAR 0 2
4608: PUSH
4609: DOUBLE
4610: LD_INT 1
4612: DEC
4613: ST_TO_ADDR
4614: LD_INT 2
4616: PUSH
4617: FOR_TO
4618: IFFALSE 4694
// begin PrepareEngineer ( false , Difficulty ) ;
4620: LD_INT 0
4622: PPUSH
4623: LD_OWVAR 67
4627: PPUSH
4628: CALL_OW 382
// un := CreateHuman ;
4632: LD_ADDR_VAR 0 3
4636: PUSH
4637: CALL_OW 44
4641: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4642: LD_ADDR_EXP 47
4646: PUSH
4647: LD_EXP 47
4651: PPUSH
4652: LD_EXP 47
4656: PUSH
4657: LD_INT 1
4659: PLUS
4660: PPUSH
4661: LD_VAR 0 3
4665: PPUSH
4666: CALL_OW 1
4670: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 95
4678: PPUSH
4679: LD_INT 65
4681: PPUSH
4682: LD_INT 2
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 50
// end ;
4692: GO 4617
4694: POP
4695: POP
// end ;
4696: LD_VAR 0 1
4700: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4701: LD_INT 0
4703: PPUSH
4704: PPUSH
4705: PPUSH
// usTrapForces := [ ] ;
4706: LD_ADDR_EXP 48
4710: PUSH
4711: EMPTY
4712: ST_TO_ADDR
// uc_side := 1 ;
4713: LD_ADDR_OWVAR 20
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// uc_nation := 1 ;
4721: LD_ADDR_OWVAR 21
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// InitHC_All ( ) ;
4729: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4733: LD_INT 1
4735: PPUSH
4736: LD_OWVAR 67
4740: PPUSH
4741: CALL_OW 381
// un := CreateHuman ;
4745: LD_ADDR_VAR 0 3
4749: PUSH
4750: CALL_OW 44
4754: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4755: LD_ADDR_EXP 48
4759: PUSH
4760: LD_EXP 48
4764: PPUSH
4765: LD_VAR 0 3
4769: PPUSH
4770: CALL 53471 0 2
4774: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4775: LD_ADDR_VAR 0 2
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 5
4787: PUSH
4788: LD_INT 6
4790: PUSH
4791: LD_INT 7
4793: PUSH
4794: LD_INT 8
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: LD_OWVAR 67
4807: ARRAY
4808: PUSH
4809: FOR_TO
4810: IFFALSE 4856
// begin PrepareSoldier ( false , Difficulty ) ;
4812: LD_INT 0
4814: PPUSH
4815: LD_OWVAR 67
4819: PPUSH
4820: CALL_OW 381
// un := CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4834: LD_ADDR_EXP 48
4838: PUSH
4839: LD_EXP 48
4843: PPUSH
4844: LD_VAR 0 3
4848: PPUSH
4849: CALL 53471 0 2
4853: ST_TO_ADDR
// end ;
4854: GO 4809
4856: POP
4857: POP
// for i := 1 to 2 do
4858: LD_ADDR_VAR 0 2
4862: PUSH
4863: DOUBLE
4864: LD_INT 1
4866: DEC
4867: ST_TO_ADDR
4868: LD_INT 2
4870: PUSH
4871: FOR_TO
4872: IFFALSE 4918
// begin PrepareScientist ( false , Difficulty ) ;
4874: LD_INT 0
4876: PPUSH
4877: LD_OWVAR 67
4881: PPUSH
4882: CALL_OW 384
// un := CreateHuman ;
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: CALL_OW 44
4895: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4896: LD_ADDR_EXP 48
4900: PUSH
4901: LD_EXP 48
4905: PPUSH
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL 53471 0 2
4915: ST_TO_ADDR
// end ;
4916: GO 4871
4918: POP
4919: POP
// end ;
4920: LD_VAR 0 1
4924: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4925: LD_EXP 46
4929: IFFALSE 5499
4931: GO 4933
4933: DISABLE
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
// begin enable ;
4941: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4942: LD_ADDR_VAR 0 3
4946: PUSH
4947: LD_INT 8
4949: PPUSH
4950: LD_INT 22
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 21
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
4979: LD_ADDR_VAR 0 4
4983: PUSH
4984: LD_EXP 46
4988: PPUSH
4989: LD_INT 25
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PPUSH
4999: CALL_OW 72
5003: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5004: LD_ADDR_VAR 0 5
5008: PUSH
5009: LD_EXP 46
5013: PPUSH
5014: LD_INT 25
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 72
5028: ST_TO_ADDR
// if eng then
5029: LD_VAR 0 4
5033: IFFALSE 5227
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_INT 3
5042: PUSH
5043: LD_INT 24
5045: PUSH
5046: LD_INT 1000
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 72
5061: IFFALSE 5173
// begin for i in eng do
5063: LD_ADDR_VAR 0 1
5067: PUSH
5068: LD_VAR 0 4
5072: PUSH
5073: FOR_IN
5074: IFFALSE 5169
// if IsInUnit ( i ) then
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 310
5085: IFFALSE 5098
// ComExit ( i ) else
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL 53859 0 1
5096: GO 5167
// if IsOk ( i ) and not HasTask ( i ) then
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 302
5107: PUSH
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 314
5117: NOT
5118: AND
5119: IFFALSE 5167
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5121: LD_VAR 0 1
5125: PPUSH
5126: LD_VAR 0 3
5130: PPUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 24
5136: PUSH
5137: LD_INT 1000
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PPUSH
5148: CALL_OW 72
5152: PPUSH
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 74
5162: PPUSH
5163: CALL_OW 130
5167: GO 5073
5169: POP
5170: POP
// end else
5171: GO 5227
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5173: LD_VAR 0 3
5177: PPUSH
5178: LD_INT 30
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PPUSH
5188: CALL_OW 72
5192: IFFALSE 5227
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5194: LD_VAR 0 4
5198: PPUSH
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5227: LD_VAR 0 5
5231: PPUSH
5232: LD_INT 50
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 72
5242: PUSH
5243: LD_INT 18
5245: PPUSH
5246: LD_INT 81
5248: PUSH
5249: LD_INT 1
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PPUSH
5256: CALL_OW 70
5260: PUSH
5261: LD_INT 1
5263: GREATER
5264: AND
5265: PUSH
5266: LD_INT 18
5268: PPUSH
5269: LD_INT 22
5271: PUSH
5272: LD_INT 1
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: CALL_OW 70
5283: NOT
5284: AND
5285: IFFALSE 5339
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5287: LD_ADDR_VAR 0 1
5291: PUSH
5292: LD_VAR 0 5
5296: PPUSH
5297: LD_INT 50
5299: PUSH
5300: EMPTY
5301: LIST
5302: PPUSH
5303: CALL_OW 72
5307: PUSH
5308: FOR_IN
5309: IFFALSE 5337
// begin ComExit ( i ) ;
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL 53859 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_INT 46
5327: PPUSH
5328: LD_INT 62
5330: PPUSH
5331: CALL_OW 174
// end ;
5335: GO 5308
5337: POP
5338: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5339: LD_INT 18
5341: PPUSH
5342: LD_INT 81
5344: PUSH
5345: LD_INT 1
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PPUSH
5352: CALL_OW 70
5356: NOT
5357: PUSH
5358: LD_VAR 0 5
5362: PPUSH
5363: LD_INT 3
5365: PUSH
5366: LD_INT 54
5368: PUSH
5369: EMPTY
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 50
5378: PUSH
5379: EMPTY
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 72
5390: AND
5391: PUSH
5392: LD_VAR 0 3
5396: PPUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 31
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 58
5409: PUSH
5410: EMPTY
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 72
5421: AND
5422: IFFALSE 5499
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5424: LD_VAR 0 5
5428: PPUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 54
5434: PUSH
5435: EMPTY
5436: LIST
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 50
5444: PUSH
5445: EMPTY
5446: LIST
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 72
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 31
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 58
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: PUSH
5491: LD_INT 1
5493: ARRAY
5494: PPUSH
5495: CALL_OW 120
// end ;
5499: PPOPN 5
5501: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5502: LD_EXP 47
5506: IFFALSE 5777
5508: GO 5510
5510: DISABLE
5511: LD_INT 0
5513: PPUSH
5514: PPUSH
5515: PPUSH
// begin enable ;
5516: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5517: LD_ADDR_VAR 0 2
5521: PUSH
5522: LD_INT 15
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 21
5537: PUSH
5538: LD_INT 3
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 70
5553: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5554: LD_ADDR_VAR 0 3
5558: PUSH
5559: LD_EXP 47
5563: PPUSH
5564: LD_INT 25
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PPUSH
5574: CALL_OW 72
5578: ST_TO_ADDR
// if eng then
5579: LD_VAR 0 3
5583: IFFALSE 5777
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5585: LD_VAR 0 2
5589: PPUSH
5590: LD_INT 3
5592: PUSH
5593: LD_INT 24
5595: PUSH
5596: LD_INT 1000
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: IFFALSE 5723
// begin for i in eng do
5613: LD_ADDR_VAR 0 1
5617: PUSH
5618: LD_VAR 0 3
5622: PUSH
5623: FOR_IN
5624: IFFALSE 5719
// if IsInUnit ( i ) then
5626: LD_VAR 0 1
5630: PPUSH
5631: CALL_OW 310
5635: IFFALSE 5648
// ComExit ( i ) else
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL 53859 0 1
5646: GO 5717
// if IsOk ( i ) and not HasTask ( i ) then
5648: LD_VAR 0 1
5652: PPUSH
5653: CALL_OW 302
5657: PUSH
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 314
5667: NOT
5668: AND
5669: IFFALSE 5717
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 2
5680: PPUSH
5681: LD_INT 3
5683: PUSH
5684: LD_INT 24
5686: PUSH
5687: LD_INT 1000
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL_OW 72
5702: PPUSH
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 74
5712: PPUSH
5713: CALL_OW 130
5717: GO 5623
5719: POP
5720: POP
// end else
5721: GO 5777
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_INT 30
5730: PUSH
5731: LD_INT 0
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 72
5742: IFFALSE 5777
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5744: LD_VAR 0 3
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_INT 30
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PPUSH
5764: CALL_OW 72
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: CALL_OW 120
// end ; end_of_file
5777: PPOPN 3
5779: END
// export function Action ; var i , tmp ; begin
5780: LD_INT 0
5782: PPUSH
5783: PPUSH
5784: PPUSH
// InGameOn ;
5785: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5789: LD_INT 112
5791: PPUSH
5792: LD_INT 107
5794: PPUSH
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 12
5800: NEG
5801: PPUSH
5802: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5806: LD_INT 121
5808: PPUSH
5809: LD_INT 113
5811: PPUSH
5812: CALL_OW 86
// tmp := PrepareBurlak ;
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: CALL 1244 0 0
5825: ST_TO_ADDR
// for i in tmp do
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5890
// begin SetDir ( i , 5 ) ;
5839: LD_VAR 0 2
5843: PPUSH
5844: LD_INT 5
5846: PPUSH
5847: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5851: LD_VAR 0 2
5855: PPUSH
5856: LD_INT 3
5858: PPUSH
5859: LD_INT 0
5861: PPUSH
5862: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5866: LD_VAR 0 2
5870: PPUSH
5871: LD_INT 121
5873: PPUSH
5874: LD_INT 111
5876: PPUSH
5877: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5881: LD_INT 28
5883: PPUSH
5884: CALL_OW 67
// end ;
5888: GO 5836
5890: POP
5891: POP
// CenterOnUnits ( Kurin ) ;
5892: LD_EXP 38
5896: PPUSH
5897: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5901: LD_EXP 34
5905: PPUSH
5906: LD_EXP 38
5910: PPUSH
5911: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5922: LD_EXP 34
5926: PPUSH
5927: LD_EXP 38
5931: PPUSH
5932: CALL_OW 296
5936: PUSH
5937: LD_INT 6
5939: LESS
5940: IFFALSE 5915
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5942: LD_EXP 34
5946: PUSH
5947: LD_EXP 35
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: LD_EXP 38
5960: PPUSH
5961: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
5965: LD_ADDR_VAR 0 2
5969: PUSH
5970: LD_VAR 0 3
5974: PUSH
5975: LD_EXP 34
5979: PUSH
5980: LD_EXP 35
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: DIFF
5989: PUSH
5990: FOR_IN
5991: IFFALSE 6057
// if GetClass ( i ) = class_soldier then
5993: LD_VAR 0 2
5997: PPUSH
5998: CALL_OW 257
6002: PUSH
6003: LD_INT 1
6005: EQUAL
6006: IFFALSE 6043
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6008: LD_VAR 0 2
6012: PPUSH
6013: LD_INT 95
6015: PUSH
6016: LD_INT 209
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_VAR 0 2
6027: PUSH
6028: LD_INT 2
6030: MOD
6031: PUSH
6032: LD_INT 1
6034: PLUS
6035: ARRAY
6036: PPUSH
6037: CALL_OW 120
6041: GO 6055
// ComEnterUnit ( i , ru_lab ) ;
6043: LD_VAR 0 2
6047: PPUSH
6048: LD_INT 83
6050: PPUSH
6051: CALL_OW 120
6055: GO 5990
6057: POP
6058: POP
// Say ( Kurin , D1-Kur-1 ) ;
6059: LD_EXP 38
6063: PPUSH
6064: LD_STRING D1-Kur-1
6066: PPUSH
6067: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6071: LD_EXP 34
6075: PPUSH
6076: LD_STRING D1-Bur-1
6078: PPUSH
6079: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6083: LD_INT 10
6085: PPUSH
6086: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6090: LD_EXP 38
6094: PPUSH
6095: LD_STRING D1-Kur-2
6097: PPUSH
6098: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6102: LD_EXP 39
6106: PPUSH
6107: CALL 53859 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6111: LD_EXP 39
6115: PPUSH
6116: LD_INT 115
6118: PPUSH
6119: LD_INT 108
6121: PPUSH
6122: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6126: LD_EXP 39
6130: PPUSH
6131: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6135: LD_EXP 34
6139: PPUSH
6140: LD_STRING D1-Bur-2
6142: PPUSH
6143: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6147: LD_EXP 38
6151: PPUSH
6152: LD_STRING D1-Kur-3
6154: PPUSH
6155: CALL_OW 88
// if Gnyevko then
6159: LD_EXP 35
6163: IFFALSE 6177
// Say ( Kurin , D1-Kur-3a ) ;
6165: LD_EXP 38
6169: PPUSH
6170: LD_STRING D1-Kur-3a
6172: PPUSH
6173: CALL_OW 88
// InGameOff ;
6177: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6181: LD_STRING M1
6183: PPUSH
6184: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6188: LD_INT 112
6190: PPUSH
6191: LD_INT 107
6193: PPUSH
6194: LD_INT 3
6196: PPUSH
6197: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6201: LD_INT 66
6203: PPUSH
6204: LD_INT 99
6206: PPUSH
6207: LD_INT 3
6209: PPUSH
6210: LD_INT 7
6212: NEG
6213: PPUSH
6214: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6218: LD_INT 66
6220: PPUSH
6221: LD_INT 99
6223: PPUSH
6224: LD_INT 3
6226: PPUSH
6227: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6231: LD_EXP 39
6235: PPUSH
6236: LD_INT 3
6238: PPUSH
6239: CALL_OW 235
// if Gnyevko then
6243: LD_EXP 35
6247: IFFALSE 6261
// SetSide ( Gnyevko , 3 ) ;
6249: LD_EXP 35
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 235
// SaveForQuickRestart ;
6261: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6265: LD_EXP 38
6269: PPUSH
6270: LD_INT 71
6272: PPUSH
6273: CALL_OW 120
// wait ( 0 0$2 ) ;
6277: LD_INT 70
6279: PPUSH
6280: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6284: LD_EXP 43
6288: PUSH
6289: LD_INT 2
6291: ARRAY
6292: PPUSH
6293: CALL 53859 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6297: LD_EXP 43
6301: PUSH
6302: LD_INT 2
6304: ARRAY
6305: PPUSH
6306: LD_INT 98
6308: PPUSH
6309: LD_INT 98
6311: PPUSH
6312: CALL_OW 428
6316: PPUSH
6317: CALL_OW 180
// wait ( 0 0$12 ) ;
6321: LD_INT 420
6323: PPUSH
6324: CALL_OW 67
// kurinDontWannaTalk := true ;
6328: LD_ADDR_EXP 5
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// end ;
6336: LD_VAR 0 1
6340: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6341: LD_EXP 5
6345: PUSH
6346: LD_INT 22
6348: PUSH
6349: LD_INT 3
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 91
6358: PUSH
6359: LD_INT 71
6361: PUSH
6362: LD_INT 8
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: AND
6379: IFFALSE 6566
6381: GO 6383
6383: DISABLE
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
// begin enable ;
6388: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_INT 22
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 91
6406: PUSH
6407: LD_INT 71
6409: PUSH
6410: LD_INT 14
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 69
6426: ST_TO_ADDR
// InGameOn ;
6427: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6431: LD_INT 116
6433: PPUSH
6434: LD_INT 107
6436: PPUSH
6437: LD_INT 3
6439: PPUSH
6440: LD_INT 3
6442: PPUSH
6443: CALL_OW 330
// ComExit ( Kurin ) ;
6447: LD_EXP 38
6451: PPUSH
6452: CALL 53859 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6456: LD_EXP 38
6460: PPUSH
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: PPUSH
6470: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6474: LD_EXP 38
6478: PPUSH
6479: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_INT 87
6490: PPUSH
6491: LD_INT 99
6493: PPUSH
6494: CALL_OW 111
// if kirovHasTank then
6498: LD_EXP 6
6502: IFFALSE 6518
// Say ( Kurin , D1a-Kur-1a ) else
6504: LD_EXP 38
6508: PPUSH
6509: LD_STRING D1a-Kur-1a
6511: PPUSH
6512: CALL_OW 88
6516: GO 6530
// Say ( Kurin , D1a-Kur-1 ) ;
6518: LD_EXP 38
6522: PPUSH
6523: LD_STRING D1a-Kur-1
6525: PPUSH
6526: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6530: LD_EXP 38
6534: PPUSH
6535: LD_INT 71
6537: PPUSH
6538: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6542: LD_INT 116
6544: PPUSH
6545: LD_INT 107
6547: PPUSH
6548: LD_INT 3
6550: PPUSH
6551: CALL_OW 331
// wait ( 0 0$3 ) ;
6555: LD_INT 105
6557: PPUSH
6558: CALL_OW 67
// InGameOff ;
6562: CALL_OW 9
// end ;
6566: PPOPN 2
6568: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6569: LD_INT 22
6571: PUSH
6572: LD_INT 3
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 95
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PPUSH
6593: CALL_OW 69
6597: PUSH
6598: LD_EXP 7
6602: AND
6603: IFFALSE 6942
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
6614: PPUSH
// begin enable ;
6615: ENABLE
// blockNorth := false ;
6616: LD_ADDR_EXP 7
6620: PUSH
6621: LD_INT 0
6623: ST_TO_ADDR
// InGameOn ;
6624: CALL_OW 8
// DialogueOn ;
6628: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 95
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6666: LD_EXP 39
6670: PUSH
6671: LD_VAR 0 2
6675: IN
6676: PUSH
6677: LD_EXP 39
6681: PPUSH
6682: CALL_OW 302
6686: AND
6687: IFFALSE 6703
// Say ( Kovalyuk , D1b-Kov-1 ) else
6689: LD_EXP 39
6693: PPUSH
6694: LD_STRING D1b-Kov-1
6696: PPUSH
6697: CALL_OW 88
6701: GO 6738
// if Burlak in tmp and IsOk ( Burlak ) then
6703: LD_EXP 34
6707: PUSH
6708: LD_VAR 0 2
6712: IN
6713: PUSH
6714: LD_EXP 34
6718: PPUSH
6719: CALL_OW 302
6723: AND
6724: IFFALSE 6738
// Say ( Burlak , D1b-Bur-1 ) ;
6726: LD_EXP 34
6730: PPUSH
6731: LD_STRING D1b-Bur-1
6733: PPUSH
6734: CALL_OW 88
// DialogueOff ;
6738: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6742: LD_INT 22
6744: PUSH
6745: LD_INT 3
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: LD_INT 21
6757: PUSH
6758: LD_INT 3
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: PPUSH
6778: CALL_OW 141
// for i in tmp do
6782: LD_ADDR_VAR 0 1
6786: PUSH
6787: LD_VAR 0 2
6791: PUSH
6792: FOR_IN
6793: IFFALSE 6921
// begin d := rand ( 2 , 3 ) ;
6795: LD_ADDR_VAR 0 5
6799: PUSH
6800: LD_INT 2
6802: PPUSH
6803: LD_INT 3
6805: PPUSH
6806: CALL_OW 12
6810: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 250
6825: PPUSH
6826: LD_VAR 0 5
6830: PPUSH
6831: LD_INT 6
6833: PPUSH
6834: CALL_OW 272
6838: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6839: LD_ADDR_VAR 0 4
6843: PUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_VAR 0 5
6858: PPUSH
6859: LD_INT 6
6861: PPUSH
6862: CALL_OW 273
6866: ST_TO_ADDR
// if ValidHex ( x , y ) then
6867: LD_VAR 0 3
6871: PPUSH
6872: LD_VAR 0 4
6876: PPUSH
6877: CALL_OW 488
6881: IFFALSE 6904
// ComMoveXY ( i , x , y ) else
6883: LD_VAR 0 1
6887: PPUSH
6888: LD_VAR 0 3
6892: PPUSH
6893: LD_VAR 0 4
6897: PPUSH
6898: CALL_OW 111
6902: GO 6919
// ComMoveXY ( i , 79 , 85 ) ;
6904: LD_VAR 0 1
6908: PPUSH
6909: LD_INT 79
6911: PPUSH
6912: LD_INT 85
6914: PPUSH
6915: CALL_OW 111
// end ;
6919: GO 6792
6921: POP
6922: POP
// wait ( 0 0$5 ) ;
6923: LD_INT 175
6925: PPUSH
6926: CALL_OW 67
// InGameOff ;
6930: CALL_OW 9
// blockNorth := true ;
6934: LD_ADDR_EXP 7
6938: PUSH
6939: LD_INT 1
6941: ST_TO_ADDR
// end ;
6942: PPOPN 5
6944: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
6945: LD_EXP 44
6949: PPUSH
6950: LD_INT 101
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PPUSH
6960: CALL_OW 72
6964: PUSH
6965: LD_EXP 4
6969: NOT
6970: AND
6971: IFFALSE 7373
6973: GO 6975
6975: DISABLE
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
6983: LD_ADDR_VAR 0 5
6987: PUSH
6988: LD_EXP 44
6992: PPUSH
6993: LD_EXP 34
6997: PPUSH
6998: CALL_OW 74
7002: ST_TO_ADDR
// InGameOn ;
7003: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7007: LD_VAR 0 5
7011: PPUSH
7012: CALL_OW 250
7016: PPUSH
7017: LD_VAR 0 5
7021: PPUSH
7022: CALL_OW 251
7026: PPUSH
7027: LD_INT 3
7029: PPUSH
7030: LD_INT 6
7032: PPUSH
7033: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7037: LD_VAR 0 5
7041: PPUSH
7042: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7046: LD_VAR 0 5
7050: PPUSH
7051: LD_EXP 34
7055: PPUSH
7056: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7060: LD_VAR 0 5
7064: PPUSH
7065: LD_STRING D2-RSol1-1
7067: PPUSH
7068: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 250
7086: PPUSH
7087: LD_VAR 0 5
7091: PPUSH
7092: CALL_OW 254
7096: PPUSH
7097: LD_INT 3
7099: PPUSH
7100: CALL_OW 272
7104: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7105: LD_ADDR_VAR 0 4
7109: PUSH
7110: LD_VAR 0 5
7114: PPUSH
7115: CALL_OW 251
7119: PPUSH
7120: LD_VAR 0 5
7124: PPUSH
7125: CALL_OW 254
7129: PPUSH
7130: LD_INT 3
7132: PPUSH
7133: CALL_OW 273
7137: ST_TO_ADDR
// if ValidHex ( x , y ) then
7138: LD_VAR 0 3
7142: PPUSH
7143: LD_VAR 0 4
7147: PPUSH
7148: CALL_OW 488
7152: IFFALSE 7184
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7154: LD_EXP 35
7158: PUSH
7159: LD_EXP 39
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: LD_VAR 0 3
7172: PPUSH
7173: LD_VAR 0 4
7177: PPUSH
7178: CALL_OW 111
7182: GO 7207
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7184: LD_EXP 35
7188: PUSH
7189: LD_EXP 39
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: LD_VAR 0 5
7202: PPUSH
7203: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7207: LD_EXP 34
7211: PPUSH
7212: LD_VAR 0 5
7216: PPUSH
7217: CALL_OW 112
// p := 0 ;
7221: LD_ADDR_VAR 0 2
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7229: LD_INT 35
7231: PPUSH
7232: CALL_OW 67
// p := p + 1 ;
7236: LD_ADDR_VAR 0 2
7240: PUSH
7241: LD_VAR 0 2
7245: PUSH
7246: LD_INT 1
7248: PLUS
7249: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7250: LD_VAR 0 2
7254: PUSH
7255: LD_INT 10
7257: GREATER
7258: PUSH
7259: LD_EXP 34
7263: PPUSH
7264: LD_VAR 0 5
7268: PPUSH
7269: CALL_OW 296
7273: PUSH
7274: LD_INT 6
7276: LESS
7277: OR
7278: IFFALSE 7229
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7280: LD_EXP 34
7284: PUSH
7285: LD_EXP 35
7289: PUSH
7290: LD_EXP 39
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PPUSH
7300: LD_VAR 0 5
7304: PPUSH
7305: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7309: LD_EXP 34
7313: PPUSH
7314: LD_STRING D2-Bur-1
7316: PPUSH
7317: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7321: LD_VAR 0 5
7325: PPUSH
7326: LD_STRING D2-RSol1-2
7328: PPUSH
7329: CALL_OW 88
// ComHold ( nearestGuard ) ;
7333: LD_VAR 0 5
7337: PPUSH
7338: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7342: LD_VAR 0 5
7346: PPUSH
7347: CALL_OW 250
7351: PPUSH
7352: LD_VAR 0 5
7356: PPUSH
7357: CALL_OW 251
7361: PPUSH
7362: LD_INT 3
7364: PPUSH
7365: CALL_OW 331
// InGameOff ;
7369: CALL_OW 9
// end ;
7373: PPOPN 5
7375: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7376: LD_EXP 34
7380: PPUSH
7381: LD_EXP 40
7385: PPUSH
7386: CALL_OW 296
7390: PUSH
7391: LD_INT 10
7393: LESS
7394: PUSH
7395: LD_INT 3
7397: PPUSH
7398: LD_EXP 40
7402: PPUSH
7403: CALL_OW 292
7407: AND
7408: IFFALSE 7764
7410: GO 7412
7412: DISABLE
7413: LD_INT 0
7415: PPUSH
// begin InGameOn ;
7416: CALL_OW 8
// beriaVisited := true ;
7420: LD_ADDR_EXP 4
7424: PUSH
7425: LD_INT 1
7427: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7428: LD_EXP 34
7432: PPUSH
7433: LD_EXP 40
7437: PPUSH
7438: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7442: LD_EXP 35
7446: PUSH
7447: LD_EXP 39
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: LD_INT 68
7458: PPUSH
7459: LD_INT 99
7461: PPUSH
7462: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7466: LD_EXP 40
7470: PPUSH
7471: LD_EXP 34
7475: PPUSH
7476: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7480: LD_EXP 40
7484: PPUSH
7485: LD_STRING D2-Pla-2
7487: PPUSH
7488: CALL_OW 88
// p := 0 ;
7492: LD_ADDR_VAR 0 1
7496: PUSH
7497: LD_INT 0
7499: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7500: LD_INT 35
7502: PPUSH
7503: CALL_OW 67
// p := p + 1 ;
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_INT 1
7519: PLUS
7520: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7521: LD_EXP 34
7525: PPUSH
7526: LD_EXP 40
7530: PPUSH
7531: CALL_OW 296
7535: PUSH
7536: LD_INT 6
7538: LESS
7539: PUSH
7540: LD_VAR 0 1
7544: PUSH
7545: LD_INT 8
7547: GREATER
7548: OR
7549: IFFALSE 7500
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7551: LD_EXP 34
7555: PUSH
7556: LD_EXP 35
7560: PUSH
7561: LD_EXP 39
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: LD_EXP 40
7575: PPUSH
7576: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7580: LD_EXP 34
7584: PPUSH
7585: LD_STRING D2-Bur-2
7587: PPUSH
7588: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7592: LD_INT 6
7594: PPUSH
7595: LD_INT 3
7597: PPUSH
7598: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7602: LD_EXP 40
7606: PPUSH
7607: LD_STRING D2-Pla-3
7609: PPUSH
7610: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7614: LD_EXP 34
7618: PPUSH
7619: LD_STRING D2-Bur-3
7621: PPUSH
7622: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING D2-Pla-4
7633: PPUSH
7634: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7638: LD_EXP 34
7642: PPUSH
7643: LD_STRING D2-Bur-4
7645: PPUSH
7646: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7650: LD_EXP 40
7654: PPUSH
7655: LD_STRING D2-Pla-5
7657: PPUSH
7658: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7662: LD_INT 1
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL 7767 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7684: LD_EXP 40
7688: PPUSH
7689: LD_STRING D3-Pla-1
7691: PPUSH
7692: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7696: LD_EXP 34
7700: PPUSH
7701: LD_STRING D3-Bur-1
7703: PPUSH
7704: CALL_OW 88
// InGameOff ;
7708: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7712: LD_STRING M2a
7714: PPUSH
7715: CALL_OW 337
// SetSide ( beria , 3 ) ;
7719: LD_INT 106
7721: PPUSH
7722: LD_INT 3
7724: PPUSH
7725: CALL_OW 235
// if not Gnyevko then
7729: LD_EXP 35
7733: NOT
7734: IFFALSE 7755
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7736: LD_INT 106
7738: PPUSH
7739: CALL_OW 313
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 235
// ComFree ( Platonov ) ;
7755: LD_EXP 40
7759: PPUSH
7760: CALL_OW 139
// end ;
7764: PPOPN 1
7766: END
// function AskPlatonov ( questions ) ; var q ; begin
7767: LD_INT 0
7769: PPUSH
7770: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7771: LD_ADDR_VAR 0 3
7775: PUSH
7776: LD_STRING QMoreInfo
7778: PPUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: CALL_OW 98
7788: ST_TO_ADDR
// case q of 1 :
7789: LD_VAR 0 3
7793: PUSH
7794: LD_INT 1
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7829
7802: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7803: LD_EXP 34
7807: PPUSH
7808: LD_STRING D2a-Bur-1
7810: PPUSH
7811: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7815: LD_EXP 40
7819: PPUSH
7820: LD_STRING D2a-Pla-1
7822: PPUSH
7823: CALL_OW 88
// end ; 2 :
7827: GO 7900
7829: LD_INT 2
7831: DOUBLE
7832: EQUAL
7833: IFTRUE 7837
7835: GO 7864
7837: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7838: LD_EXP 34
7842: PPUSH
7843: LD_STRING D2b-Bur-1
7845: PPUSH
7846: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7850: LD_EXP 40
7854: PPUSH
7855: LD_STRING D2b-Pla-1
7857: PPUSH
7858: CALL_OW 88
// end ; 3 :
7862: GO 7900
7864: LD_INT 3
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7899
7872: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7873: LD_EXP 34
7877: PPUSH
7878: LD_STRING D2c-Bur-1
7880: PPUSH
7881: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7885: LD_EXP 40
7889: PPUSH
7890: LD_STRING D2c-Pla-1
7892: PPUSH
7893: CALL_OW 88
// end ; end ;
7897: GO 7900
7899: POP
// if q < 4 and questions > 2 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 4
7907: LESS
7908: PUSH
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 2
7916: GREATER
7917: AND
7918: IFFALSE 7935
// AskPlatonov ( questions diff q ) ;
7920: LD_VAR 0 1
7924: PUSH
7925: LD_VAR 0 3
7929: DIFF
7930: PPUSH
7931: CALL 7767 0 1
// end ;
7935: LD_VAR 0 2
7939: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7940: LD_INT 0
7942: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7943: LD_EXP 40
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7962: LD_INT 35
7964: PPUSH
7965: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
7969: LD_EXP 40
7973: PPUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_VAR 0 2
7983: PPUSH
7984: CALL_OW 297
7988: PUSH
7989: LD_INT 5
7991: LESS
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: CALL_OW 283
8007: PUSH
8008: LD_INT 1
8010: EQUAL
8011: AND
8012: IFFALSE 7962
// ComStop ( Platonov ) ;
8014: LD_EXP 40
8018: PPUSH
8019: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8023: LD_EXP 40
8027: PPUSH
8028: LD_STRING D4-Pla-1
8030: PPUSH
8031: CALL_OW 88
// end ;
8035: LD_VAR 0 3
8039: RET
// every 0 0$2 trigger hasLab do
8040: LD_EXP 9
8044: IFFALSE 8108
8046: GO 8048
8048: DISABLE
// begin DialogueOn ;
8049: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8053: LD_EXP 34
8057: PPUSH
8058: LD_STRING D5a-Bur-1
8060: PPUSH
8061: CALL_OW 88
// if hasWorkshop then
8065: LD_EXP 10
8069: IFFALSE 8085
// Say ( Platonov , D5a-Pla-1 ) else
8071: LD_EXP 40
8075: PPUSH
8076: LD_STRING D5a-Pla-1
8078: PPUSH
8079: CALL_OW 88
8083: GO 8097
// Say ( Platonov , D5a-Pla-1a ) ;
8085: LD_EXP 40
8089: PPUSH
8090: LD_STRING D5a-Pla-1a
8092: PPUSH
8093: CALL_OW 88
// DialogueOff ;
8097: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8101: LD_STRING M2b
8103: PPUSH
8104: CALL_OW 337
// end ;
8108: END
// every 0 0$2 trigger hasWorkshop do
8109: LD_EXP 10
8113: IFFALSE 8177
8115: GO 8117
8117: DISABLE
// begin DialogueOn ;
8118: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8122: LD_EXP 34
8126: PPUSH
8127: LD_STRING D5b-Bur-1
8129: PPUSH
8130: CALL_OW 88
// if hasLab then
8134: LD_EXP 9
8138: IFFALSE 8154
// Say ( Platonov , D5b-Pla-1 ) else
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D5b-Pla-1
8147: PPUSH
8148: CALL_OW 88
8152: GO 8166
// Say ( Platonov , D5b-Pla-1a ) ;
8154: LD_EXP 40
8158: PPUSH
8159: LD_STRING D5b-Pla-1a
8161: PPUSH
8162: CALL_OW 88
// DialogueOff ;
8166: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8170: LD_STRING M2c
8172: PPUSH
8173: CALL_OW 337
// end ;
8177: END
// every 0 0$2 trigger hasLab and hasWorkshop do
8178: LD_EXP 9
8182: PUSH
8183: LD_EXP 10
8187: AND
8188: IFFALSE 8289
8190: GO 8192
8192: DISABLE
// begin wait ( 0 0$2 ) ;
8193: LD_INT 70
8195: PPUSH
8196: CALL_OW 67
// DialogueOn ;
8200: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8204: LD_INT 47
8206: PPUSH
8207: LD_INT 3
8209: PPUSH
8210: CALL_OW 321
8214: PUSH
8215: LD_INT 2
8217: EQUAL
8218: IFFALSE 8246
// begin Say ( Burlak , D7b-Bur-1 ) ;
8220: LD_EXP 34
8224: PPUSH
8225: LD_STRING D7b-Bur-1
8227: PPUSH
8228: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8232: LD_EXP 40
8236: PPUSH
8237: LD_STRING D7b-Pla-1
8239: PPUSH
8240: CALL_OW 88
// end else
8244: GO 8270
// begin Say ( Burlak , D7a-Bur-1 ) ;
8246: LD_EXP 34
8250: PPUSH
8251: LD_STRING D7a-Bur-1
8253: PPUSH
8254: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8258: LD_EXP 40
8262: PPUSH
8263: LD_STRING D7a-Pla-1
8265: PPUSH
8266: CALL_OW 88
// end ; DialogueOff ;
8270: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8274: LD_STRING M2
8276: PPUSH
8277: CALL_OW 337
// hasToBuildTank := true ;
8281: LD_ADDR_EXP 11
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// end ;
8289: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8290: LD_EXP 4
8294: PUSH
8295: LD_EXP 9
8299: NOT
8300: PUSH
8301: LD_EXP 10
8305: NOT
8306: OR
8307: PUSH
8308: LD_EXP 11
8312: OR
8313: AND
8314: PUSH
8315: LD_INT 22
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 3
8327: PUSH
8328: LD_INT 91
8330: PUSH
8331: LD_INT 106
8333: PUSH
8334: LD_INT 32
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PPUSH
8350: CALL_OW 69
8354: AND
8355: IFFALSE 8464
8357: GO 8359
8359: DISABLE
8360: LD_INT 0
8362: PPUSH
// begin enable ;
8363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8364: LD_ADDR_VAR 0 1
8368: PUSH
8369: LD_INT 22
8371: PUSH
8372: LD_INT 3
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: LD_INT 91
8384: PUSH
8385: LD_INT 106
8387: PUSH
8388: LD_INT 32
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: ST_TO_ADDR
// InGameOn ;
8409: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8413: LD_VAR 0 1
8417: PUSH
8418: LD_INT 1
8420: ARRAY
8421: PPUSH
8422: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_INT 66
8433: PPUSH
8434: LD_INT 99
8436: PPUSH
8437: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8441: LD_EXP 40
8445: PPUSH
8446: LD_STRING D8-Pla-1
8448: PPUSH
8449: CALL_OW 88
// wait ( 0 0$3 ) ;
8453: LD_INT 105
8455: PPUSH
8456: CALL_OW 67
// InGameOff ;
8460: CALL_OW 9
// end ;
8464: PPOPN 1
8466: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8467: LD_INT 21
8469: PPUSH
8470: LD_INT 22
8472: PUSH
8473: LD_INT 3
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 23
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 2
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 4
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 30
8505: PUSH
8506: LD_INT 31
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: PUSH
8528: LD_EXP 31
8532: NOT
8533: AND
8534: IFFALSE 8745
8536: GO 8538
8538: DISABLE
8539: LD_INT 0
8541: PPUSH
// begin enable ;
8542: ENABLE
// InGameOn ;
8543: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 21
8554: PPUSH
8555: LD_INT 22
8557: PUSH
8558: LD_INT 3
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 2
8577: PUSH
8578: LD_INT 30
8580: PUSH
8581: LD_INT 4
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 30
8590: PUSH
8591: LD_INT 31
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 70
8612: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8613: LD_EXP 40
8617: PPUSH
8618: LD_VAR 0 1
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: CALL_OW 112
// wait ( 0 0$2 ) ;
8631: LD_INT 70
8633: PPUSH
8634: CALL_OW 67
// ComHold ( Platonov ) ;
8638: LD_EXP 40
8642: PPUSH
8643: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8647: LD_EXP 40
8651: PPUSH
8652: LD_STRING D6-Pla-1
8654: PPUSH
8655: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8659: LD_EXP 34
8663: PPUSH
8664: LD_STRING D6-Bur-1
8666: PPUSH
8667: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8684: LD_VAR 0 1
8688: PUSH
8689: LD_INT 1
8691: ARRAY
8692: PPUSH
8693: CALL_OW 266
8697: PUSH
8698: LD_INT 31
8700: EQUAL
8701: IFFALSE 8723
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8703: LD_INT 106
8705: PPUSH
8706: CALL_OW 274
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 10
8716: PPUSH
8717: CALL_OW 276
8721: GO 8741
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8723: LD_INT 106
8725: PPUSH
8726: CALL_OW 274
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: LD_INT 30
8736: PPUSH
8737: CALL_OW 276
// InGameOff ;
8741: CALL_OW 9
// end ;
8745: PPOPN 1
8747: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8748: LD_EXP 4
8752: PUSH
8753: LD_INT 21
8755: PPUSH
8756: LD_INT 22
8758: PUSH
8759: LD_INT 3
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 23
8768: PUSH
8769: LD_INT 3
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 21
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: PPUSH
8791: CALL_OW 71
8795: AND
8796: IFFALSE 9053
8798: GO 8800
8800: DISABLE
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
// begin enable ;
8805: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8806: LD_ADDR_VAR 0 1
8810: PUSH
8811: LD_INT 21
8813: PPUSH
8814: LD_INT 22
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 23
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 21
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: PPUSH
8849: CALL_OW 71
8853: PUSH
8854: LD_INT 1
8856: ARRAY
8857: ST_TO_ADDR
// InGameOn ;
8858: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8862: LD_EXP 40
8866: PPUSH
8867: LD_VAR 0 1
8871: PPUSH
8872: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8876: LD_EXP 40
8880: PPUSH
8881: LD_STRING DPlatAngry
8883: PPUSH
8884: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8888: LD_EXP 34
8892: PPUSH
8893: LD_STRING D6-Bur-1
8895: PPUSH
8896: CALL_OW 88
// RemoveUnit ( tmp ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 64
// InGameOff ;
8909: CALL_OW 9
// amount := 0 ;
8913: LD_ADDR_VAR 0 2
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 266
8930: PUSH
8931: LD_INT 31
8933: DOUBLE
8934: EQUAL
8935: IFTRUE 8939
8937: GO 8950
8939: POP
// amount := 10 ; b_lab :
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: LD_INT 10
8947: ST_TO_ADDR
8948: GO 9027
8950: LD_INT 6
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 8969
8958: POP
// amount := 20 ; b_armoury :
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 20
8966: ST_TO_ADDR
8967: GO 9027
8969: LD_INT 4
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8988
8977: POP
// amount := 30 ; b_workshop :
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_INT 30
8985: ST_TO_ADDR
8986: GO 9027
8988: LD_INT 2
8990: DOUBLE
8991: EQUAL
8992: IFTRUE 8996
8994: GO 9007
8996: POP
// amount := 40 ; b_oil_power :
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_INT 40
9004: ST_TO_ADDR
9005: GO 9027
9007: LD_INT 26
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9026
9015: POP
// amount := 20 ; end ;
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 20
9023: ST_TO_ADDR
9024: GO 9027
9026: POP
// if amount then
9027: LD_VAR 0 2
9031: IFFALSE 9053
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9033: LD_INT 106
9035: PPUSH
9036: CALL_OW 274
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 276
// end ;
9053: PPOPN 2
9055: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9056: LD_INT 22
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 92
9068: PUSH
9069: LD_INT 112
9071: PUSH
9072: LD_INT 155
9074: PUSH
9075: LD_INT 8
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 2
9095: LESS
9096: PUSH
9097: LD_EXP 34
9101: PPUSH
9102: LD_INT 112
9104: PPUSH
9105: LD_INT 155
9107: PPUSH
9108: CALL_OW 297
9112: PUSH
9113: LD_INT 8
9115: LESS
9116: AND
9117: IFFALSE 9351
9119: GO 9121
9121: DISABLE
9122: LD_INT 0
9124: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9125: LD_INT 112
9127: PPUSH
9128: LD_INT 155
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: LD_INT 4
9136: NEG
9137: PPUSH
9138: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9142: LD_INT 1
9144: PPUSH
9145: LD_EXP 34
9149: PPUSH
9150: CALL_OW 471
// uc_side := 1 ;
9154: LD_ADDR_OWVAR 20
9158: PUSH
9159: LD_INT 1
9161: ST_TO_ADDR
// uc_nation := 1 ;
9162: LD_ADDR_OWVAR 21
9166: PUSH
9167: LD_INT 1
9169: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9170: LD_ADDR_VAR 0 1
9174: PUSH
9175: LD_STRING Dickens
9177: PPUSH
9178: CALL_OW 25
9182: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 112
9190: PPUSH
9191: LD_INT 155
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 48
// wait ( 0 0$2 ) ;
9201: LD_INT 70
9203: PPUSH
9204: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9208: LD_VAR 0 1
9212: PPUSH
9213: LD_EXP 34
9217: PPUSH
9218: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9222: LD_VAR 0 1
9226: PPUSH
9227: LD_STRING DUsSpawnSol
9229: PPUSH
9230: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9234: LD_INT 1
9236: PPUSH
9237: LD_EXP 34
9241: PPUSH
9242: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9246: LD_INT 112
9248: PPUSH
9249: LD_INT 155
9251: PPUSH
9252: LD_INT 3
9254: PPUSH
9255: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9259: LD_VAR 0 1
9263: PPUSH
9264: LD_INT 77
9266: PPUSH
9267: LD_INT 152
9269: PPUSH
9270: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9274: LD_INT 35
9276: PPUSH
9277: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 302
9290: NOT
9291: PUSH
9292: LD_VAR 0 1
9296: PPUSH
9297: LD_INT 77
9299: PPUSH
9300: LD_INT 152
9302: PPUSH
9303: CALL_OW 307
9307: OR
9308: IFFALSE 9274
// if not IsOk ( Dickens ) then
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 302
9319: NOT
9320: IFFALSE 9324
// exit ;
9322: GO 9351
// RemoveUnit ( Dickens ) ;
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_EXP 3
9342: PUSH
9343: LD_STRING Dickens
9345: STR
9346: PPUSH
9347: CALL_OW 38
// end ;
9351: PPOPN 1
9353: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9354: LD_EXP 34
9358: PPUSH
9359: CALL_OW 256
9363: PUSH
9364: LD_INT 600
9366: LESS
9367: IFFALSE 9384
9369: GO 9371
9371: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9372: LD_EXP 34
9376: PPUSH
9377: LD_STRING DUsSpawnBur
9379: PPUSH
9380: CALL_OW 88
9384: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9385: LD_EXP 12
9389: IFFALSE 10355
9391: GO 9393
9393: DISABLE
9394: LD_INT 0
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
// begin hasToBuildTank := false ;
9400: LD_ADDR_EXP 11
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9408: LD_ADDR_EXP 5
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9416: LD_ADDR_VAR 0 2
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PPUSH
9445: CALL_OW 69
9449: ST_TO_ADDR
// InGameOn ;
9450: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9454: LD_VAR 0 2
9458: PUSH
9459: LD_INT 1
9461: ARRAY
9462: PPUSH
9463: CALL_OW 85
// wait ( 0 0$1 ) ;
9467: LD_INT 35
9469: PPUSH
9470: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9474: LD_EXP 34
9478: PPUSH
9479: LD_STRING D9-Bur-1
9481: PPUSH
9482: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9486: LD_EXP 40
9490: PPUSH
9491: LD_VAR 0 2
9495: PUSH
9496: LD_INT 1
9498: ARRAY
9499: PPUSH
9500: CALL_OW 112
// p := 0 ;
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9512: LD_INT 35
9514: PPUSH
9515: CALL_OW 67
// p := p + 1 ;
9519: LD_ADDR_VAR 0 3
9523: PUSH
9524: LD_VAR 0 3
9528: PUSH
9529: LD_INT 1
9531: PLUS
9532: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_INT 1
9545: ARRAY
9546: PPUSH
9547: CALL_OW 296
9551: PUSH
9552: LD_INT 8
9554: LESS
9555: PUSH
9556: LD_VAR 0 3
9560: PUSH
9561: LD_INT 8
9563: GREATER
9564: OR
9565: IFFALSE 9512
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9567: LD_EXP 40
9571: PPUSH
9572: LD_VAR 0 2
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PPUSH
9581: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9585: LD_EXP 40
9589: PPUSH
9590: LD_STRING D9-Pla-1
9592: PPUSH
9593: CALL_OW 88
// ComFree ( Platonov ) ;
9597: LD_EXP 40
9601: PPUSH
9602: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9606: LD_EXP 40
9610: PPUSH
9611: LD_INT 64
9613: PPUSH
9614: LD_INT 98
9616: PPUSH
9617: CALL_OW 171
// InGameOff ;
9621: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9625: LD_STRING M3
9627: PPUSH
9628: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9632: LD_EXP 41
9636: PPUSH
9637: LD_INT 70
9639: PPUSH
9640: LD_INT 108
9642: PPUSH
9643: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9647: LD_EXP 41
9651: PPUSH
9652: CALL_OW 200
// wait ( 1 ) ;
9656: LD_INT 1
9658: PPUSH
9659: CALL_OW 67
// ComExit ( Belkov ) ;
9663: LD_EXP 36
9667: PPUSH
9668: CALL 53859 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9672: LD_EXP 36
9676: PPUSH
9677: LD_INT 113
9679: PPUSH
9680: LD_INT 104
9682: PPUSH
9683: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9687: LD_EXP 36
9691: PPUSH
9692: LD_INT 116
9694: PPUSH
9695: LD_INT 108
9697: PPUSH
9698: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9702: LD_INT 35
9704: PPUSH
9705: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9709: LD_INT 22
9711: PUSH
9712: LD_INT 3
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 21
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 91
9731: PUSH
9732: LD_INT 71
9734: PUSH
9735: LD_INT 8
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: IFFALSE 9702
// InGameOn ;
9754: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_INT 3
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 21
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 91
9785: PUSH
9786: LD_INT 71
9788: PUSH
9789: LD_INT 8
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: PPUSH
9802: CALL_OW 69
9806: ST_TO_ADDR
// if belkovTeam < 3 then
9807: LD_EXP 45
9811: PUSH
9812: LD_INT 3
9814: LESS
9815: IFFALSE 9900
// begin for i := belkovTeam to 3 do
9817: LD_ADDR_VAR 0 1
9821: PUSH
9822: DOUBLE
9823: LD_EXP 45
9827: DEC
9828: ST_TO_ADDR
9829: LD_INT 3
9831: PUSH
9832: FOR_TO
9833: IFFALSE 9898
// begin un := kirovBaseSquad [ 1 ] ;
9835: LD_ADDR_VAR 0 4
9839: PUSH
9840: LD_EXP 43
9844: PUSH
9845: LD_INT 1
9847: ARRAY
9848: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9849: LD_ADDR_EXP 43
9853: PUSH
9854: LD_EXP 43
9858: PPUSH
9859: LD_INT 1
9861: PPUSH
9862: CALL_OW 3
9866: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9867: LD_ADDR_EXP 45
9871: PUSH
9872: LD_EXP 45
9876: PPUSH
9877: LD_EXP 45
9881: PUSH
9882: LD_INT 1
9884: PLUS
9885: PPUSH
9886: LD_VAR 0 4
9890: PPUSH
9891: CALL_OW 1
9895: ST_TO_ADDR
// end ;
9896: GO 9832
9898: POP
9899: POP
// end ; ComExit ( Kurin ) ;
9900: LD_EXP 38
9904: PPUSH
9905: CALL 53859 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
9909: LD_EXP 38
9913: PPUSH
9914: LD_VAR 0 2
9918: PUSH
9919: LD_INT 1
9921: ARRAY
9922: PPUSH
9923: CALL_OW 179
// wait ( 0 0$1 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
9934: LD_VAR 0 2
9938: PUSH
9939: LD_INT 1
9941: ARRAY
9942: PPUSH
9943: CALL_OW 141
// Say ( Kurin , D10-Kur-1 ) ;
9947: LD_EXP 38
9951: PPUSH
9952: LD_STRING D10-Kur-1
9954: PPUSH
9955: CALL_OW 88
// Say ( Belkov , D10-Bel-1 ) ;
9959: LD_EXP 36
9963: PPUSH
9964: LD_STRING D10-Bel-1
9966: PPUSH
9967: CALL_OW 88
// if belkovBrother then
9971: LD_EXP 32
9975: IFFALSE 10027
// begin Say ( Burlak , D10-Bur-1 ) ;
9977: LD_EXP 34
9981: PPUSH
9982: LD_STRING D10-Bur-1
9984: PPUSH
9985: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
9989: LD_EXP 36
9993: PPUSH
9994: LD_STRING D10-Bel-2
9996: PPUSH
9997: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10001: LD_EXP 34
10005: PPUSH
10006: LD_STRING D10-Bur-2
10008: PPUSH
10009: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10013: LD_EXP 38
10017: PPUSH
10018: LD_STRING D10-Kur-2a
10020: PPUSH
10021: CALL_OW 88
// end else
10025: GO 10039
// begin Say ( Kurin , D10-Kur-2 ) end ;
10027: LD_EXP 38
10031: PPUSH
10032: LD_STRING D10-Kur-2
10034: PPUSH
10035: CALL_OW 88
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10039: LD_ADDR_VAR 0 4
10043: PUSH
10044: LD_VAR 0 2
10048: PUSH
10049: LD_INT 1
10051: ARRAY
10052: PPUSH
10053: CALL_OW 311
10057: ST_TO_ADDR
// ComExit ( un ) ;
10058: LD_VAR 0 4
10062: PPUSH
10063: CALL 53859 0 1
// AddComTurnUnit ( un , Kurin ) ;
10067: LD_VAR 0 4
10071: PPUSH
10072: LD_EXP 38
10076: PPUSH
10077: CALL_OW 179
// wait ( 0 0$0.3 ) ;
10081: LD_INT 10
10083: PPUSH
10084: CALL_OW 67
// ComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10088: LD_EXP 36
10092: PPUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 120
// wait ( 0 0$2 ) ;
10106: LD_INT 70
10108: PPUSH
10109: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10113: LD_EXP 38
10117: PPUSH
10118: LD_STRING D10-Kur-2b
10120: PPUSH
10121: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10125: LD_VAR 0 4
10129: PPUSH
10130: LD_INT 66
10132: PPUSH
10133: LD_INT 97
10135: PPUSH
10136: CALL_OW 111
// wait ( 0 0$5 ) ;
10140: LD_INT 175
10142: PPUSH
10143: CALL_OW 67
// InGameOff ;
10147: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10151: LD_EXP 33
10155: PPUSH
10156: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10160: LD_STRING M4
10162: PPUSH
10163: CALL_OW 337
// wait ( 0 0$6 ) ;
10167: LD_INT 210
10169: PPUSH
10170: CALL_OW 67
// kurinDontWannaTalk := true ;
10174: LD_ADDR_EXP 5
10178: PUSH
10179: LD_INT 1
10181: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10182: LD_INT 140
10184: PPUSH
10185: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10189: LD_INT 35
10191: PPUSH
10192: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 310
10205: PUSH
10206: LD_EXP 34
10210: PPUSH
10211: LD_INT 106
10213: PPUSH
10214: CALL_OW 296
10218: PUSH
10219: LD_INT 12
10221: LESS
10222: OR
10223: IFFALSE 10189
// DialogueOn ;
10225: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10229: LD_EXP 40
10233: PPUSH
10234: LD_STRING D11-Pla-1
10236: PPUSH
10237: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10241: LD_EXP 34
10245: PPUSH
10246: LD_STRING D11-Bur-1
10248: PPUSH
10249: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10253: LD_INT 22
10255: PUSH
10256: LD_INT 3
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 1
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: PUSH
10282: LD_INT 1
10284: GREATER
10285: IFFALSE 10299
// Say ( Burlak , D11-Bur-1a ) ;
10287: LD_EXP 34
10291: PPUSH
10292: LD_STRING D11-Bur-1a
10294: PPUSH
10295: CALL_OW 88
// DialogueOff ;
10299: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10303: LD_ADDR_EXP 8
10307: PUSH
10308: LD_INT 160
10310: PUSH
10311: LD_INT 150
10313: PUSH
10314: LD_INT 140
10316: PUSH
10317: LD_INT 120
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_OWVAR 67
10330: ARRAY
10331: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10332: LD_STRING M5
10334: PPUSH
10335: CALL_OW 337
// kirovHasTank := true ;
10339: LD_ADDR_EXP 6
10343: PUSH
10344: LD_INT 1
10346: ST_TO_ADDR
// hasToBuildTank := true ;
10347: LD_ADDR_EXP 11
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ;
10355: PPOPN 4
10357: END
// every 0 0$2 trigger allianceAttacked do
10358: LD_EXP 13
10362: IFFALSE 10401
10364: GO 10366
10366: DISABLE
// begin DialogueOn ;
10367: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10371: LD_EXP 38
10375: PPUSH
10376: LD_STRING DArestKur
10378: PPUSH
10379: CALL_OW 88
// dwait ( 0 0$1 ) ;
10383: LD_INT 35
10385: PPUSH
10386: CALL_OW 68
// YouLost ( SelfAttack ) ;
10390: LD_STRING SelfAttack
10392: PPUSH
10393: CALL_OW 104
// DialogueOff ;
10397: CALL_OW 7
// end ;
10401: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 3
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 69
10459: GREATEREQUAL
10460: PUSH
10461: LD_EXP 6
10465: AND
10466: IFFALSE 10636
10468: GO 10470
10470: DISABLE
// begin hasToBuildTank := false ;
10471: LD_ADDR_EXP 11
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// blockNorth := false ;
10479: LD_ADDR_EXP 7
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// InGameOn ;
10487: CALL_OW 8
// wait ( 0 0$2 ) ;
10491: LD_INT 70
10493: PPUSH
10494: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10498: LD_INT 106
10500: PPUSH
10501: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10505: LD_EXP 40
10509: PPUSH
10510: LD_INT 65
10512: PPUSH
10513: LD_INT 97
10515: PPUSH
10516: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10520: LD_EXP 40
10524: PPUSH
10525: LD_EXP 34
10529: PPUSH
10530: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10534: LD_EXP 34
10538: PPUSH
10539: LD_STRING D12-Bur-1
10541: PPUSH
10542: CALL_OW 88
// wait ( 0 0$1 ) ;
10546: LD_INT 35
10548: PPUSH
10549: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10553: LD_EXP 40
10557: PPUSH
10558: LD_STRING D12-Pla-1
10560: PPUSH
10561: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10565: LD_EXP 34
10569: PPUSH
10570: LD_STRING D12-Bur-2
10572: PPUSH
10573: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10577: LD_EXP 40
10581: PPUSH
10582: LD_STRING D12-Pla-2
10584: PPUSH
10585: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10589: LD_EXP 34
10593: PPUSH
10594: LD_STRING D12-Bur-3
10596: PPUSH
10597: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10601: LD_EXP 40
10605: PPUSH
10606: LD_STRING D12-Pla-3
10608: PPUSH
10609: CALL_OW 88
// hasAllTanks := true ;
10613: LD_ADDR_EXP 14
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// InGameOff ;
10621: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10625: LD_STRING M6
10627: PPUSH
10628: CALL_OW 337
// PrepareAmerican ;
10632: CALL 3901 0 0
// end ;
10636: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10637: LD_EXP 17
10641: IFFALSE 12358
10643: GO 10645
10645: DISABLE
10646: LD_INT 0
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
10653: PPUSH
10654: PPUSH
// begin PrepareAmericanTrap ;
10655: CALL 4701 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10659: LD_ADDR_VAR 0 2
10663: PUSH
10664: LD_EXP 48
10668: PPUSH
10669: LD_INT 26
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 72
10683: PUSH
10684: LD_INT 1
10686: ARRAY
10687: ST_TO_ADDR
// InGameOn ;
10688: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10692: LD_INT 69
10694: PPUSH
10695: LD_INT 22
10697: PPUSH
10698: CALL_OW 86
// wait ( 0 0$1 ) ;
10702: LD_INT 35
10704: PPUSH
10705: CALL_OW 67
// DialogueOn ;
10709: CALL_OW 6
// game_speed := 4 ;
10713: LD_ADDR_OWVAR 65
10717: PUSH
10718: LD_INT 4
10720: ST_TO_ADDR
// SayRadio ( usSol , D13-Sol1-1 ) ;
10721: LD_VAR 0 2
10725: PPUSH
10726: LD_STRING D13-Sol1-1
10728: PPUSH
10729: CALL_OW 94
// SayRadio ( Belkov , D13-Bel-1 ) ;
10733: LD_EXP 36
10737: PPUSH
10738: LD_STRING D13-Bel-1
10740: PPUSH
10741: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10745: LD_EXP 38
10749: PPUSH
10750: LD_STRING D13-Kur-1
10752: PPUSH
10753: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10757: LD_INT 10
10759: PPUSH
10760: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10764: LD_EXP 36
10768: PPUSH
10769: LD_STRING D13-Bel-2
10771: PPUSH
10772: CALL_OW 94
// DialogueOff ;
10776: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10780: LD_EXP 36
10784: PPUSH
10785: LD_INT 76
10787: PPUSH
10788: LD_INT 20
10790: PPUSH
10791: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10795: LD_EXP 45
10799: PPUSH
10800: LD_INT 72
10802: PPUSH
10803: LD_INT 20
10805: PPUSH
10806: CALL_OW 111
// wait ( 0 0$2 ) ;
10810: LD_INT 70
10812: PPUSH
10813: CALL_OW 67
// for i in usTrapForces do
10817: LD_ADDR_VAR 0 1
10821: PUSH
10822: LD_EXP 48
10826: PUSH
10827: FOR_IN
10828: IFFALSE 10861
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
10830: LD_VAR 0 1
10834: PPUSH
10835: LD_INT 7
10837: PPUSH
10838: LD_INT 0
10840: PPUSH
10841: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_EXP 36
10854: PPUSH
10855: CALL_OW 119
// end ;
10859: GO 10827
10861: POP
10862: POP
// wait ( 0 0$0.3 ) ;
10863: LD_INT 10
10865: PPUSH
10866: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
10870: LD_EXP 48
10874: PPUSH
10875: LD_INT 65
10877: PPUSH
10878: LD_INT 18
10880: PPUSH
10881: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
10885: LD_INT 70
10887: PPUSH
10888: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
10892: LD_EXP 48
10896: PPUSH
10897: LD_INT 101
10899: PUSH
10900: LD_INT 3
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PPUSH
10907: CALL_OW 72
10911: PUSH
10912: LD_INT 3
10914: GREATER
10915: IFFALSE 10885
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
10917: LD_INT 65
10919: PPUSH
10920: LD_INT 18
10922: PPUSH
10923: LD_INT 3
10925: PPUSH
10926: LD_INT 26
10928: NEG
10929: PPUSH
10930: CALL_OW 330
// DialogueOn ;
10934: CALL_OW 6
// Say ( usSol , D14-Sol1-1 ) ;
10938: LD_VAR 0 2
10942: PPUSH
10943: LD_STRING D14-Sol1-1
10945: PPUSH
10946: CALL_OW 88
// Say ( Belkov , D14-Bel-1 ) ;
10950: LD_EXP 36
10954: PPUSH
10955: LD_STRING D14-Bel-1
10957: PPUSH
10958: CALL_OW 88
// DialogueOff ;
10962: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
10966: LD_INT 65
10968: PPUSH
10969: LD_INT 18
10971: PPUSH
10972: LD_INT 3
10974: PPUSH
10975: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
10979: LD_EXP 45
10983: PPUSH
10984: LD_INT 31
10986: PPUSH
10987: LD_INT 9
10989: PPUSH
10990: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
10994: LD_EXP 48
10998: PPUSH
10999: LD_INT 50
11001: PPUSH
11002: LD_INT 16
11004: PPUSH
11005: CALL_OW 174
// wait ( 0 0$2 ) ;
11009: LD_INT 70
11011: PPUSH
11012: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11016: LD_ADDR_VAR 0 6
11020: PUSH
11021: LD_EXP 36
11025: PPUSH
11026: CALL_OW 310
11030: ST_TO_ADDR
// if not belkovTank then
11031: LD_VAR 0 6
11035: NOT
11036: IFFALSE 11076
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11038: LD_ADDR_VAR 0 6
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_INT 6
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 21
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: PUSH
11072: LD_INT 1
11074: ARRAY
11075: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11076: LD_EXP 36
11080: PPUSH
11081: LD_INT 58
11083: PPUSH
11084: LD_INT 21
11086: PPUSH
11087: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11091: LD_EXP 36
11095: PPUSH
11096: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11100: LD_EXP 36
11104: PPUSH
11105: LD_INT 53
11107: PPUSH
11108: LD_INT 18
11110: PPUSH
11111: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11115: LD_EXP 36
11119: PPUSH
11120: LD_INT 31
11122: PPUSH
11123: LD_INT 9
11125: PPUSH
11126: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11130: LD_INT 35
11132: PPUSH
11133: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11137: LD_ADDR_VAR 0 1
11141: PUSH
11142: LD_EXP 36
11146: PUSH
11147: LD_EXP 45
11151: UNION
11152: PUSH
11153: LD_VAR 0 6
11157: UNION
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11191
// if GetLives ( i ) < 800 then
11162: LD_VAR 0 1
11166: PPUSH
11167: CALL_OW 256
11171: PUSH
11172: LD_INT 800
11174: LESS
11175: IFFALSE 11189
// SetLives ( i , 800 ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: LD_INT 800
11184: PPUSH
11185: CALL_OW 234
11189: GO 11159
11191: POP
11192: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11193: LD_EXP 36
11197: PPUSH
11198: LD_INT 31
11200: PPUSH
11201: LD_INT 9
11203: PPUSH
11204: CALL_OW 297
11208: PUSH
11209: LD_INT 4
11211: LESS
11212: IFFALSE 11130
// for i := 1 to Difficulty do
11214: LD_ADDR_VAR 0 1
11218: PUSH
11219: DOUBLE
11220: LD_INT 1
11222: DEC
11223: ST_TO_ADDR
11224: LD_OWVAR 67
11228: PUSH
11229: FOR_TO
11230: IFFALSE 11272
// if i <= belkovTeam then
11232: LD_VAR 0 1
11236: PUSH
11237: LD_EXP 45
11241: LESSEQUAL
11242: IFFALSE 11270
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11244: LD_EXP 45
11248: PUSH
11249: LD_VAR 0 1
11253: ARRAY
11254: PPUSH
11255: LD_INT 600
11257: PPUSH
11258: LD_INT 800
11260: PPUSH
11261: CALL_OW 12
11265: PPUSH
11266: CALL_OW 234
11270: GO 11229
11272: POP
11273: POP
// SetLives ( Belkov , 820 ) ;
11274: LD_EXP 36
11278: PPUSH
11279: LD_INT 820
11281: PPUSH
11282: CALL_OW 234
// InGameOff ;
11286: CALL_OW 9
// DialogueOn ;
11290: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11294: LD_EXP 36
11298: PPUSH
11299: LD_STRING D14-Bel-1a
11301: PPUSH
11302: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11306: LD_EXP 38
11310: PPUSH
11311: LD_STRING D14-Kur-1
11313: PPUSH
11314: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11318: LD_EXP 36
11322: PPUSH
11323: LD_STRING D14-Bel-2
11325: PPUSH
11326: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11330: LD_EXP 38
11334: PPUSH
11335: LD_STRING D14-Kur-2
11337: PPUSH
11338: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11342: LD_EXP 34
11346: PPUSH
11347: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11351: LD_EXP 34
11355: PPUSH
11356: LD_STRING D14a-Bur-1
11358: PPUSH
11359: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11363: LD_EXP 40
11367: PPUSH
11368: LD_STRING D14a-Pla-1
11370: PPUSH
11371: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11375: LD_EXP 34
11379: PPUSH
11380: LD_STRING D14a-Bur-2
11382: PPUSH
11383: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11387: LD_EXP 40
11391: PPUSH
11392: LD_STRING D14a-Pla-2
11394: PPUSH
11395: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11399: LD_EXP 34
11403: PPUSH
11404: LD_STRING D14a-Bur-3
11406: PPUSH
11407: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11411: LD_EXP 40
11415: PPUSH
11416: LD_STRING D14a-Pla-3
11418: PPUSH
11419: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11423: LD_EXP 34
11427: PPUSH
11428: LD_STRING D14a-Bur-4
11430: PPUSH
11431: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11435: LD_EXP 40
11439: PPUSH
11440: LD_STRING D14a-Pla-4
11442: PPUSH
11443: CALL_OW 88
// DialogueOff ;
11447: CALL_OW 7
// belkovTrapped := true ;
11451: LD_ADDR_EXP 18
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11459: LD_EXP 48
11463: PPUSH
11464: LD_INT 68
11466: PPUSH
11467: LD_INT 16
11469: PPUSH
11470: CALL_OW 111
// if belkovTank then
11474: LD_VAR 0 6
11478: IFFALSE 11517
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11480: LD_EXP 48
11484: PUSH
11485: LD_INT 1
11487: ARRAY
11488: PPUSH
11489: LD_VAR 0 6
11493: PPUSH
11494: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11498: LD_EXP 48
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_INT 69
11509: PPUSH
11510: LD_INT 20
11512: PPUSH
11513: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11517: LD_EXP 36
11521: PPUSH
11522: LD_INT 40
11524: PPUSH
11525: LD_INT 17
11527: PPUSH
11528: CALL_OW 111
// AddComHold ( Belkov ) ;
11532: LD_EXP 36
11536: PPUSH
11537: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11541: LD_ADDR_VAR 0 3
11545: PUSH
11546: LD_INT 44
11548: PUSH
11549: LD_INT 18
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 42
11558: PUSH
11559: LD_INT 16
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 40
11568: PUSH
11569: LD_INT 15
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 44
11578: PUSH
11579: LD_INT 20
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 42
11588: PUSH
11589: LD_INT 20
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 42
11598: PUSH
11599: LD_INT 12
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 42
11608: PUSH
11609: LD_INT 8
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: LD_EXP 45
11634: PPUSH
11635: LD_INT 25
11637: PUSH
11638: LD_INT 1
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: PUSH
11650: FOR_IN
11651: IFFALSE 11717
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11653: LD_VAR 0 1
11657: PPUSH
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 1
11665: ARRAY
11666: PUSH
11667: LD_INT 1
11669: ARRAY
11670: PPUSH
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PUSH
11680: LD_INT 2
11682: ARRAY
11683: PPUSH
11684: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11688: LD_ADDR_VAR 0 3
11692: PUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 3
11705: ST_TO_ADDR
// AddComCrawl ( i ) ;
11706: LD_VAR 0 1
11710: PPUSH
11711: CALL_OW 197
// end ;
11715: GO 11650
11717: POP
11718: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11719: LD_EXP 45
11723: PPUSH
11724: LD_INT 25
11726: PUSH
11727: LD_INT 4
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 72
11738: IFFALSE 11770
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11740: LD_EXP 45
11744: PPUSH
11745: LD_INT 25
11747: PUSH
11748: LD_INT 4
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 72
11759: PPUSH
11760: LD_INT 38
11762: PPUSH
11763: LD_INT 18
11765: PPUSH
11766: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11770: LD_ADDR_VAR 0 7
11774: PUSH
11775: LD_INT 9450
11777: PUSH
11778: LD_INT 8400
11780: PUSH
11781: LD_INT 6650
11783: PUSH
11784: LD_INT 5250
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_OWVAR 67
11797: ARRAY
11798: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11799: LD_INT 35
11801: PPUSH
11802: CALL_OW 67
// timer := timer - 0 0$1 ;
11806: LD_ADDR_VAR 0 7
11810: PUSH
11811: LD_VAR 0 7
11815: PUSH
11816: LD_INT 35
11818: MINUS
11819: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
11820: LD_INT 19
11822: PPUSH
11823: LD_INT 22
11825: PUSH
11826: LD_INT 3
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 70
11837: IFFALSE 11847
// timer := 0 0$0 ;
11839: LD_ADDR_VAR 0 7
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// until timer <= 0 ;
11847: LD_VAR 0 7
11851: PUSH
11852: LD_INT 0
11854: LESSEQUAL
11855: IFFALSE 11799
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
11857: LD_EXP 48
11861: PPUSH
11862: LD_INT 50
11864: PUSH
11865: EMPTY
11866: LIST
11867: PPUSH
11868: CALL_OW 72
11872: NOT
11873: IFFALSE 11877
// exit ;
11875: GO 12358
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
11877: LD_ADDR_VAR 0 4
11881: PUSH
11882: LD_EXP 48
11886: PPUSH
11887: LD_INT 25
11889: PUSH
11890: LD_INT 1
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 3
11899: PUSH
11900: LD_INT 54
11902: PUSH
11903: EMPTY
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PPUSH
11914: CALL_OW 72
11918: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
11919: LD_ADDR_VAR 0 5
11923: PUSH
11924: LD_EXP 48
11928: PPUSH
11929: LD_INT 25
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 3
11941: PUSH
11942: LD_INT 54
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: ST_TO_ADDR
// for i in sol do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: LD_VAR 0 4
11970: PUSH
11971: FOR_IN
11972: IFFALSE 11988
// SetTag ( i , 0 ) ;
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 0
11981: PPUSH
11982: CALL_OW 109
11986: GO 11971
11988: POP
11989: POP
// ComMoveXY ( sci , 60 , 8 ) ;
11990: LD_VAR 0 5
11994: PPUSH
11995: LD_INT 60
11997: PPUSH
11998: LD_INT 8
12000: PPUSH
12001: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12005: LD_INT 22
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 21
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: IFFALSE 12074
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12035: LD_INT 22
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 21
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 69
12063: PPUSH
12064: LD_INT 53
12066: PPUSH
12067: LD_INT 24
12069: PPUSH
12070: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12074: LD_INT 18
12076: PPUSH
12077: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12081: LD_ADDR_VAR 0 4
12085: PUSH
12086: LD_EXP 48
12090: PPUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 50
12103: PUSH
12104: EMPTY
12105: LIST
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: PPUSH
12125: CALL_OW 72
12129: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12130: LD_VAR 0 4
12134: PPUSH
12135: LD_INT 0
12137: PPUSH
12138: CALL 50989 0 2
12142: PUSH
12143: LD_VAR 0 4
12147: EQUAL
12148: IFFALSE 12187
// begin wait ( 0 0$3 ) ;
12150: LD_INT 105
12152: PPUSH
12153: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12157: LD_VAR 0 4
12161: PPUSH
12162: LD_INT 41
12164: PPUSH
12165: LD_INT 18
12167: PPUSH
12168: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12172: LD_VAR 0 5
12176: PPUSH
12177: LD_INT 60
12179: PPUSH
12180: LD_INT 8
12182: PPUSH
12183: CALL_OW 111
// end ; for i in sol do
12187: LD_ADDR_VAR 0 1
12191: PUSH
12192: LD_VAR 0 4
12196: PUSH
12197: FOR_IN
12198: IFFALSE 12273
// if GetLives ( i ) < 800 then
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 256
12209: PUSH
12210: LD_INT 800
12212: LESS
12213: IFFALSE 12244
// begin SetTag ( i , 1 ) ;
12215: LD_VAR 0 1
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12227: LD_VAR 0 1
12231: PPUSH
12232: LD_INT 60
12234: PPUSH
12235: LD_INT 8
12237: PPUSH
12238: CALL_OW 111
// end else
12242: GO 12271
// if GetLives ( i ) = 1000 then
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 256
12253: PUSH
12254: LD_INT 1000
12256: EQUAL
12257: IFFALSE 12271
// SetTag ( i , 0 ) ;
12259: LD_VAR 0 1
12263: PPUSH
12264: LD_INT 0
12266: PPUSH
12267: CALL_OW 109
12271: GO 12197
12273: POP
12274: POP
// until belkovDied or not sol ;
12275: LD_EXP 19
12279: PUSH
12280: LD_VAR 0 4
12284: NOT
12285: OR
12286: IFFALSE 12074
// if not sol then
12288: LD_VAR 0 4
12292: NOT
12293: IFFALSE 12297
// exit ;
12295: GO 12358
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12297: LD_VAR 0 4
12301: PUSH
12302: LD_VAR 0 5
12306: ADD
12307: PPUSH
12308: LD_INT 56
12310: PPUSH
12311: LD_INT 25
12313: PPUSH
12314: CALL_OW 111
// wait ( 0 0$30 ) ;
12318: LD_INT 1050
12320: PPUSH
12321: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12325: LD_EXP 48
12329: PPUSH
12330: LD_INT 66
12332: PPUSH
12333: LD_INT 96
12335: PPUSH
12336: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12340: LD_VAR 0 5
12344: PPUSH
12345: LD_VAR 0 4
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PPUSH
12354: CALL_OW 112
// end ;
12358: PPOPN 7
12360: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12361: LD_EXP 18
12365: PUSH
12366: LD_EXP 19
12370: NOT
12371: AND
12372: PUSH
12373: LD_INT 9
12375: PPUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 3
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 70
12390: AND
12391: IFFALSE 12711
12393: GO 12395
12395: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12396: LD_STRING QAttackAm
12398: PPUSH
12399: CALL_OW 97
12403: PUSH
12404: LD_INT 1
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12479
12412: POP
// begin initiative := true ;
12413: LD_ADDR_EXP 31
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// DialogueOn ;
12421: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12425: LD_EXP 34
12429: PPUSH
12430: LD_STRING D17-Bur-1
12432: PPUSH
12433: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12437: LD_EXP 40
12441: PPUSH
12442: LD_STRING D17-Pla-1
12444: PPUSH
12445: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12449: LD_EXP 34
12453: PPUSH
12454: LD_STRING D17-Bur-2
12456: PPUSH
12457: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12461: LD_EXP 40
12465: PPUSH
12466: LD_STRING D17-Pla-2
12468: PPUSH
12469: CALL_OW 94
// DialogueOff ;
12473: CALL_OW 7
// end ; 2 :
12477: GO 12641
12479: LD_INT 2
12481: DOUBLE
12482: EQUAL
12483: IFTRUE 12487
12485: GO 12579
12487: POP
// begin initiative := true ;
12488: LD_ADDR_EXP 31
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// DialogueOn ;
12496: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12500: LD_EXP 34
12504: PPUSH
12505: LD_STRING D18-Bur-1
12507: PPUSH
12508: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12512: LD_EXP 40
12516: PPUSH
12517: LD_STRING D18-Pla-1
12519: PPUSH
12520: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12524: LD_EXP 34
12528: PPUSH
12529: LD_STRING D18-Bur-2
12531: PPUSH
12532: CALL_OW 88
// if not reinforcementsGained then
12536: LD_EXP 25
12540: NOT
12541: IFFALSE 12561
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12543: LD_EXP 40
12547: PPUSH
12548: LD_STRING D18-Pla-2
12550: PPUSH
12551: CALL_OW 94
// SendReinforcements ;
12555: CALL 3242 0 0
// end else
12559: GO 12573
// SayRadio ( Platonov , D22-Pla-1b ) ;
12561: LD_EXP 40
12565: PPUSH
12566: LD_STRING D22-Pla-1b
12568: PPUSH
12569: CALL_OW 94
// DialogueOff ;
12573: CALL_OW 7
// end ; 3 :
12577: GO 12641
12579: LD_INT 3
12581: DOUBLE
12582: EQUAL
12583: IFTRUE 12587
12585: GO 12640
12587: POP
// begin if IsOk ( Gnyevko ) then
12588: LD_EXP 35
12592: PPUSH
12593: CALL_OW 302
12597: IFFALSE 12613
// Say ( Gnyevko , D19A-Gny-1 ) else
12599: LD_EXP 35
12603: PPUSH
12604: LD_STRING D19A-Gny-1
12606: PPUSH
12607: CALL_OW 88
12611: GO 12636
// if IsOk ( Kovalyuk ) then
12613: LD_EXP 39
12617: PPUSH
12618: CALL_OW 302
12622: IFFALSE 12636
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12624: LD_EXP 39
12628: PPUSH
12629: LD_STRING D19A-Kov-1
12631: PPUSH
12632: CALL_OW 88
// exit ;
12636: GO 12711
// end ; end ;
12638: GO 12641
12640: POP
// if IsOk ( Gnyevko ) then
12641: LD_EXP 35
12645: PPUSH
12646: CALL_OW 302
12650: IFFALSE 12676
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12652: LD_EXP 35
12656: PPUSH
12657: LD_STRING D19-Gny-1
12659: PPUSH
12660: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12664: LD_EXP 34
12668: PPUSH
12669: LD_STRING D19-Bur-1
12671: PPUSH
12672: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 302
12685: IFFALSE 12711
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12687: LD_EXP 39
12691: PPUSH
12692: LD_STRING D19-Kov-1
12694: PPUSH
12695: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12699: LD_EXP 34
12703: PPUSH
12704: LD_STRING D19-Bur-2
12706: PPUSH
12707: CALL_OW 88
// end ; end ;
12711: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12712: LD_EXP 18
12716: PUSH
12717: LD_EXP 19
12721: NOT
12722: AND
12723: PUSH
12724: LD_INT 16
12726: PPUSH
12727: LD_INT 22
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 70
12741: AND
12742: IFFALSE 12970
12744: GO 12746
12746: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12747: LD_STRING QAttackBw
12749: PPUSH
12750: CALL_OW 97
12754: PUSH
12755: LD_INT 1
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 12806
12763: POP
// begin initiative := true ;
12764: LD_ADDR_EXP 31
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// DialogueOn ;
12772: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12776: LD_EXP 34
12780: PPUSH
12781: LD_STRING D21-Bur-1
12783: PPUSH
12784: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12788: LD_EXP 40
12792: PPUSH
12793: LD_STRING D21-Pla-1
12795: PPUSH
12796: CALL_OW 94
// DialogueOff ;
12800: CALL_OW 7
// end ; 2 :
12804: GO 12921
12806: LD_INT 2
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12909
12814: POP
// begin initiative := true ;
12815: LD_ADDR_EXP 31
12819: PUSH
12820: LD_INT 1
12822: ST_TO_ADDR
// DialogueOn ;
12823: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
12827: LD_EXP 34
12831: PPUSH
12832: LD_STRING D22-Bur-1
12834: PPUSH
12835: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
12839: LD_EXP 25
12843: NOT
12844: PUSH
12845: LD_EXP 22
12849: AND
12850: IFFALSE 12870
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
12852: LD_EXP 40
12856: PPUSH
12857: LD_STRING D22-Pla-1
12859: PPUSH
12860: CALL_OW 94
// SendReinforcements ;
12864: CALL 3242 0 0
// end else
12868: GO 12903
// if not westOutpostDestroyed then
12870: LD_EXP 22
12874: NOT
12875: IFFALSE 12891
// SayRadio ( Platonov , D22-Pla-1a ) else
12877: LD_EXP 40
12881: PPUSH
12882: LD_STRING D22-Pla-1a
12884: PPUSH
12885: CALL_OW 94
12889: GO 12903
// SayRadio ( Platonov , D22-Pla-1b ) ;
12891: LD_EXP 40
12895: PPUSH
12896: LD_STRING D22-Pla-1b
12898: PPUSH
12899: CALL_OW 94
// DialogueOff ;
12903: CALL_OW 7
// end ; 3 :
12907: GO 12921
12909: LD_INT 3
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12920
12917: POP
// begin end ; end ;
12918: GO 12921
12920: POP
// ChangeMissionObjectives ( M9 ) ;
12921: LD_STRING M9
12923: PPUSH
12924: CALL_OW 337
// wait ( 0 0$1 ) ;
12928: LD_INT 35
12930: PPUSH
12931: CALL_OW 67
// if IsOk ( Gnyevko ) then
12935: LD_EXP 35
12939: PPUSH
12940: CALL_OW 302
12944: IFFALSE 12970
// begin Say ( Gnyevko , D23-Gny-1 ) ;
12946: LD_EXP 35
12950: PPUSH
12951: LD_STRING D23-Gny-1
12953: PPUSH
12954: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
12958: LD_EXP 34
12962: PPUSH
12963: LD_STRING D23-Bur-1
12965: PPUSH
12966: CALL_OW 88
// end ; end ;
12970: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
12971: LD_EXP 18
12975: PUSH
12976: LD_EXP 19
12980: AND
12981: PUSH
12982: LD_EXP 28
12986: NOT
12987: AND
12988: PUSH
12989: LD_EXP 45
12993: PPUSH
12994: LD_INT 91
12996: PUSH
12997: LD_EXP 34
13001: PUSH
13002: LD_INT 8
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 72
13014: AND
13015: IFFALSE 13059
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
// begin for i in belkovTeam do
13023: LD_ADDR_VAR 0 1
13027: PUSH
13028: LD_EXP 45
13032: PUSH
13033: FOR_IN
13034: IFFALSE 13050
// SetSide ( i , 3 ) ;
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_INT 3
13043: PPUSH
13044: CALL_OW 235
13048: GO 13033
13050: POP
13051: POP
// ChangeMissionObjectives ( M9a ) ;
13052: LD_STRING M9a
13054: PPUSH
13055: CALL_OW 337
// end ;
13059: PPOPN 1
13061: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13062: LD_EXP 34
13066: PPUSH
13067: LD_EXP 36
13071: PPUSH
13072: CALL_OW 296
13076: PUSH
13077: LD_INT 6
13079: LESS
13080: PUSH
13081: LD_EXP 18
13085: AND
13086: PUSH
13087: LD_EXP 36
13091: PPUSH
13092: CALL_OW 302
13096: AND
13097: PUSH
13098: LD_INT 3
13100: PPUSH
13101: CALL_OW 463
13105: NOT
13106: AND
13107: IFFALSE 13422
13109: GO 13111
13111: DISABLE
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
// begin InGameOn ;
13116: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13120: LD_EXP 34
13124: PPUSH
13125: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13129: LD_EXP 34
13133: PPUSH
13134: LD_INT 37
13136: PPUSH
13137: LD_INT 17
13139: PPUSH
13140: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13144: LD_EXP 34
13148: PPUSH
13149: LD_EXP 36
13153: PPUSH
13154: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13158: LD_EXP 36
13162: PPUSH
13163: LD_EXP 34
13167: PPUSH
13168: CALL_OW 119
// p := 0 ;
13172: LD_ADDR_VAR 0 2
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13180: LD_INT 35
13182: PPUSH
13183: CALL_OW 67
// p := p + 1 ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_VAR 0 2
13196: PUSH
13197: LD_INT 1
13199: PLUS
13200: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13201: LD_EXP 34
13205: PPUSH
13206: LD_EXP 36
13210: PPUSH
13211: CALL_OW 296
13215: PUSH
13216: LD_INT 4
13218: LESS
13219: PUSH
13220: LD_VAR 0 2
13224: PUSH
13225: LD_INT 6
13227: GREATER
13228: OR
13229: IFFALSE 13180
// ComTurnUnit ( Burlak , Belkov ) ;
13231: LD_EXP 34
13235: PPUSH
13236: LD_EXP 36
13240: PPUSH
13241: CALL_OW 119
// DialogueOn ;
13245: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13249: LD_EXP 36
13253: PPUSH
13254: LD_STRING D24-Bel-1
13256: PPUSH
13257: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13261: LD_EXP 34
13265: PPUSH
13266: LD_STRING D24-Bur-1
13268: PPUSH
13269: CALL_OW 88
// if belkovBrother then
13273: LD_EXP 32
13277: IFFALSE 13291
// Say ( Burlak , D24-Bur-1a ) ;
13279: LD_EXP 34
13283: PPUSH
13284: LD_STRING D24-Bur-1a
13286: PPUSH
13287: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13291: LD_EXP 36
13295: PPUSH
13296: LD_STRING D24-Bel-2
13298: PPUSH
13299: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13303: LD_EXP 34
13307: PPUSH
13308: LD_STRING D24-Bur-2
13310: PPUSH
13311: CALL_OW 88
// if vehCaptured then
13315: LD_EXP 16
13319: IFFALSE 13333
// Say ( Burlak , D24-Bur-2a ) ;
13321: LD_EXP 34
13325: PPUSH
13326: LD_STRING D24-Bur-2a
13328: PPUSH
13329: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13333: LD_EXP 40
13337: PPUSH
13338: LD_STRING D24-Pla-2
13340: PPUSH
13341: CALL_OW 94
// if not westOutpostDestroyed then
13345: LD_EXP 22
13349: NOT
13350: IFFALSE 13364
// SayRadio ( Platonov , D24-Pla-2a ) ;
13352: LD_EXP 40
13356: PPUSH
13357: LD_STRING D24-Pla-2a
13359: PPUSH
13360: CALL_OW 94
// DialogueOff ;
13364: CALL_OW 7
// InGameOff ;
13368: CALL_OW 9
// belkovSaved := true ;
13372: LD_ADDR_EXP 28
13376: PUSH
13377: LD_INT 1
13379: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13380: LD_ADDR_VAR 0 1
13384: PUSH
13385: LD_EXP 45
13389: PUSH
13390: LD_EXP 36
13394: UNION
13395: PUSH
13396: FOR_IN
13397: IFFALSE 13413
// SetSide ( i , 3 ) ;
13399: LD_VAR 0 1
13403: PPUSH
13404: LD_INT 3
13406: PPUSH
13407: CALL_OW 235
13411: GO 13396
13413: POP
13414: POP
// ChangeMissionObjectives ( M9a ) ;
13415: LD_STRING M9a
13417: PPUSH
13418: CALL_OW 337
// end ;
13422: PPOPN 2
13424: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13425: LD_INT 3
13427: PPUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 95
13440: PUSH
13441: LD_INT 8
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: PPUSH
13457: CALL 56637 0 2
13461: IFFALSE 13646
13463: GO 13465
13465: DISABLE
// begin DialogueOn ;
13466: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13470: LD_INT 49
13472: PPUSH
13473: LD_INT 57
13475: PPUSH
13476: LD_INT 3
13478: PPUSH
13479: LD_INT 12
13481: NEG
13482: PPUSH
13483: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13487: LD_INT 49
13489: PPUSH
13490: LD_INT 57
13492: PPUSH
13493: LD_INT 3
13495: PPUSH
13496: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13500: LD_INT 49
13502: PPUSH
13503: LD_INT 57
13505: PPUSH
13506: CALL_OW 84
// if not eastOutpostDiscovered then
13510: LD_EXP 21
13514: NOT
13515: IFFALSE 13555
// begin Say ( Burlak , D15-Bur-1 ) ;
13517: LD_EXP 34
13521: PPUSH
13522: LD_STRING D15-Bur-1
13524: PPUSH
13525: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13529: LD_EXP 35
13533: PPUSH
13534: LD_STRING D15-Gny-1
13536: PPUSH
13537: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13541: LD_EXP 39
13545: PPUSH
13546: LD_STRING D15-Kov-1
13548: PPUSH
13549: CALL_OW 88
// end else
13553: GO 13591
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13555: LD_EXP 39
13559: PPUSH
13560: LD_STRING D16-Kov-1
13562: PPUSH
13563: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13567: LD_EXP 34
13571: PPUSH
13572: LD_STRING D16-Bur-1
13574: PPUSH
13575: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13579: LD_EXP 35
13583: PPUSH
13584: LD_STRING D16-Gny-1
13586: PPUSH
13587: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13591: LD_EXP 34
13595: PPUSH
13596: LD_STRING D15-Bur-2
13598: PPUSH
13599: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13603: LD_EXP 39
13607: PPUSH
13608: LD_STRING D15-Kov-2
13610: PPUSH
13611: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13615: LD_EXP 34
13619: PPUSH
13620: LD_STRING D15-Bur-3
13622: PPUSH
13623: CALL_OW 88
// DialogueOff ;
13627: CALL_OW 7
// westOutpostDiscovered := true ;
13631: LD_ADDR_EXP 20
13635: PUSH
13636: LD_INT 1
13638: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13639: LD_STRING M7
13641: PPUSH
13642: CALL_OW 337
// end ;
13646: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13647: LD_INT 3
13649: PPUSH
13650: LD_INT 22
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 95
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PPUSH
13679: CALL 56637 0 2
13683: IFFALSE 13824
13685: GO 13687
13687: DISABLE
// begin DialogueOn ;
13688: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13692: LD_INT 95
13694: PPUSH
13695: LD_INT 65
13697: PPUSH
13698: LD_INT 3
13700: PPUSH
13701: LD_INT 12
13703: NEG
13704: PPUSH
13705: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13709: LD_INT 95
13711: PPUSH
13712: LD_INT 65
13714: PPUSH
13715: LD_INT 3
13717: PPUSH
13718: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13722: LD_INT 95
13724: PPUSH
13725: LD_INT 65
13727: PPUSH
13728: CALL_OW 84
// if westOutpostDiscovered then
13732: LD_EXP 20
13736: IFFALSE 13776
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13738: LD_EXP 39
13742: PPUSH
13743: LD_STRING D16-Kov-1
13745: PPUSH
13746: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13750: LD_EXP 34
13754: PPUSH
13755: LD_STRING D16-Bur-1
13757: PPUSH
13758: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13762: LD_EXP 35
13766: PPUSH
13767: LD_STRING D16-Gny-1
13769: PPUSH
13770: CALL_OW 88
// end else
13774: GO 13812
// begin Say ( Burlak , D15-Bur-1 ) ;
13776: LD_EXP 34
13780: PPUSH
13781: LD_STRING D15-Bur-1
13783: PPUSH
13784: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13788: LD_EXP 35
13792: PPUSH
13793: LD_STRING D15-Gny-1
13795: PPUSH
13796: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13800: LD_EXP 39
13804: PPUSH
13805: LD_STRING D15-Kov-1
13807: PPUSH
13808: CALL_OW 88
// end ; DialogueOff ;
13812: CALL_OW 7
// eastOutpostDiscovered := true ;
13816: LD_ADDR_EXP 21
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// end ;
13824: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
13825: LD_INT 8
13827: PPUSH
13828: LD_INT 22
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 50
13840: PUSH
13841: EMPTY
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 70
13852: PUSH
13853: LD_INT 0
13855: EQUAL
13856: PUSH
13857: LD_EXP 20
13861: AND
13862: IFFALSE 13906
13864: GO 13866
13866: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
13867: LD_EXP 34
13871: PPUSH
13872: LD_STRING D20-Bur-1
13874: PPUSH
13875: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
13879: LD_EXP 40
13883: PPUSH
13884: LD_STRING D20-Pla-1
13886: PPUSH
13887: CALL_OW 94
// westOutpostDestroyed := true ;
13891: LD_ADDR_EXP 22
13895: PUSH
13896: LD_INT 1
13898: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
13899: LD_STRING M8
13901: PPUSH
13902: CALL_OW 337
// end ;
13906: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
13907: LD_INT 15
13909: PPUSH
13910: LD_INT 22
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 50
13922: PUSH
13923: EMPTY
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 70
13934: PUSH
13935: LD_INT 0
13937: EQUAL
13938: PUSH
13939: LD_EXP 21
13943: AND
13944: IFFALSE 14074
13946: GO 13948
13948: DISABLE
13949: LD_INT 0
13951: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
13952: LD_EXP 34
13956: PPUSH
13957: LD_STRING D20-Bur-1
13959: PPUSH
13960: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
13964: LD_EXP 40
13968: PPUSH
13969: LD_STRING D20-Pla-1
13971: PPUSH
13972: CALL_OW 94
// eastOutpostDestroyed := true ;
13976: LD_ADDR_EXP 23
13980: PUSH
13981: LD_INT 1
13983: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13984: LD_INT 35
13986: PPUSH
13987: CALL_OW 67
// stop_talking := true ;
13991: LD_ADDR_OWVAR 56
13995: PUSH
13996: LD_INT 1
13998: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_INT 22
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 23
14016: PUSH
14017: LD_INT 3
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 21
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: PUSH
14044: FOR_IN
14045: IFFALSE 14064
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: LD_INT 1500
14057: PPUSH
14058: CALL_OW 591
14062: GO 14044
14064: POP
14065: POP
// stop_talking := false ;
14066: LD_ADDR_OWVAR 56
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// end ;
14074: PPOPN 1
14076: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14077: LD_INT 19
14079: PPUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 2
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 70
14108: IFFALSE 14216
14110: GO 14112
14112: DISABLE
// begin DialogueOn ;
14113: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14117: LD_INT 19
14119: PPUSH
14120: LD_INT 22
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PPUSH
14144: CALL_OW 70
14148: PPUSH
14149: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14153: LD_EXP 34
14157: PPUSH
14158: LD_STRING D26-Bur-1
14160: PPUSH
14161: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14165: LD_EXP 39
14169: PPUSH
14170: LD_STRING D26-Kov-1
14172: PPUSH
14173: CALL_OW 88
// if IsOk ( Gnyevko ) then
14177: LD_EXP 35
14181: PPUSH
14182: CALL_OW 302
14186: IFFALSE 14212
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14188: LD_EXP 35
14192: PPUSH
14193: LD_STRING D26-Gny-1
14195: PPUSH
14196: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14200: LD_EXP 34
14204: PPUSH
14205: LD_STRING D26-Bur-2
14207: PPUSH
14208: CALL_OW 88
// end ; DialogueOff ;
14212: CALL_OW 7
// end ;
14216: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14217: LD_EXP 21
14221: PUSH
14222: LD_EXP 23
14226: NOT
14227: AND
14228: PUSH
14229: LD_INT 17
14231: PPUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 3
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: LD_INT 24
14247: PUSH
14248: LD_INT 1000
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 70
14267: PUSH
14268: LD_INT 1
14270: GREATER
14271: AND
14272: IFFALSE 14335
14274: GO 14276
14276: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14277: LD_EXP 35
14281: PPUSH
14282: LD_STRING D16A-Gny-1
14284: PPUSH
14285: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14289: LD_EXP 39
14293: PPUSH
14294: LD_STRING D16A-Kov-1
14296: PPUSH
14297: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14301: LD_EXP 35
14305: PPUSH
14306: CALL_OW 302
14310: PUSH
14311: LD_EXP 39
14315: PPUSH
14316: CALL_OW 302
14320: OR
14321: IFFALSE 14335
// Say ( Burlak , D16A-Bur-1 ) ;
14323: LD_EXP 34
14327: PPUSH
14328: LD_STRING D16A-Bur-1
14330: PPUSH
14331: CALL_OW 88
// end ;
14335: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14336: LD_INT 3
14338: PPUSH
14339: LD_INT 9
14341: PPUSH
14342: CALL_OW 294
14346: IFFALSE 14359
14348: GO 14350
14350: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14351: LD_ADDR_EXP 24
14355: PUSH
14356: LD_INT 1
14358: ST_TO_ADDR
// end ;
14359: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14360: LD_INT 3
14362: PPUSH
14363: LD_INT 10
14365: PPUSH
14366: CALL_OW 294
14370: IFFALSE 14390
14372: GO 14374
14374: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14375: LD_ADDR_EXP 27
14379: PUSH
14380: LD_EXP 27
14384: PPUSH
14385: CALL 54824 0 1
14389: ST_TO_ADDR
14390: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14391: LD_INT 3
14393: PPUSH
14394: LD_INT 11
14396: PPUSH
14397: CALL_OW 294
14401: IFFALSE 14421
14403: GO 14405
14405: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14406: LD_ADDR_EXP 27
14410: PUSH
14411: LD_EXP 27
14415: PPUSH
14416: CALL 54824 0 1
14420: ST_TO_ADDR
14421: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14422: LD_INT 3
14424: PPUSH
14425: LD_INT 12
14427: PPUSH
14428: CALL_OW 294
14432: IFFALSE 14452
14434: GO 14436
14436: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14437: LD_ADDR_EXP 27
14441: PUSH
14442: LD_EXP 27
14446: PPUSH
14447: CALL 54824 0 1
14451: ST_TO_ADDR
14452: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14453: LD_INT 3
14455: PPUSH
14456: LD_INT 13
14458: PPUSH
14459: CALL_OW 294
14463: IFFALSE 14483
14465: GO 14467
14467: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14468: LD_ADDR_EXP 27
14472: PUSH
14473: LD_EXP 27
14477: PPUSH
14478: CALL 54824 0 1
14482: ST_TO_ADDR
14483: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14484: LD_INT 3
14486: PPUSH
14487: LD_INT 14
14489: PPUSH
14490: CALL_OW 294
14494: IFFALSE 14514
14496: GO 14498
14498: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14499: LD_ADDR_EXP 27
14503: PUSH
14504: LD_EXP 27
14508: PPUSH
14509: CALL 54824 0 1
14513: ST_TO_ADDR
14514: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14515: LD_EXP 27
14519: PUSH
14520: LD_INT 5
14522: GREATEREQUAL
14523: PUSH
14524: LD_EXP 14
14528: AND
14529: IFFALSE 14549
14531: GO 14533
14533: DISABLE
// begin allMapPointsSpotted := true ;
14534: LD_ADDR_EXP 26
14538: PUSH
14539: LD_INT 1
14541: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14542: LD_STRING M10
14544: PPUSH
14545: CALL_OW 337
// end ;
14549: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14550: LD_EXP 26
14554: PUSH
14555: LD_EXP 22
14559: AND
14560: IFFALSE 14572
14562: GO 14564
14564: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14565: LD_STRING M10a
14567: PPUSH
14568: CALL_OW 337
// end ;
14572: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14573: LD_EXP 14
14577: IFFALSE 15231
14579: GO 14581
14581: DISABLE
14582: LD_INT 0
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// begin wasOutsideBeria := false ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// wantToTalk := false ;
14597: LD_ADDR_VAR 0 2
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// westOutpostReported := false ;
14605: LD_ADDR_VAR 0 4
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// eastOutpostReported := false ;
14613: LD_ADDR_VAR 0 5
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// timer := 0 0$0 ;
14621: LD_ADDR_VAR 0 1
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14629: LD_INT 70
14631: PPUSH
14632: CALL_OW 67
// timer := timer + 0 0$2 ;
14636: LD_ADDR_VAR 0 1
14640: PUSH
14641: LD_VAR 0 1
14645: PUSH
14646: LD_INT 70
14648: PLUS
14649: ST_TO_ADDR
// if timer >= 0 0$30 then
14650: LD_VAR 0 1
14654: PUSH
14655: LD_INT 1050
14657: GREATEREQUAL
14658: IFFALSE 14668
// wantToTalk := true ;
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_INT 1
14667: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 30 ] ] ] ) then
14668: LD_INT 22
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: LD_INT 91
14683: PUSH
14684: LD_INT 106
14686: PUSH
14687: LD_INT 30
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PPUSH
14703: CALL_OW 69
14707: IFFALSE 14717
// wasOutsideBeria := true ;
14709: LD_ADDR_VAR 0 3
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14717: LD_VAR 0 2
14721: PUSH
14722: LD_VAR 0 3
14726: AND
14727: PUSH
14728: LD_EXP 34
14732: PPUSH
14733: LD_EXP 40
14737: PPUSH
14738: CALL_OW 296
14742: PUSH
14743: LD_INT 8
14745: LESS
14746: PUSH
14747: LD_EXP 34
14751: PPUSH
14752: CALL_OW 310
14756: PPUSH
14757: LD_EXP 40
14761: PPUSH
14762: CALL_OW 296
14766: PUSH
14767: LD_INT 8
14769: LESS
14770: OR
14771: AND
14772: IFFALSE 15120
// begin timer := 0 0$0 ;
14774: LD_ADDR_VAR 0 1
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// wantToTalk := false ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// wasOutsideBeria := false ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14798: LD_EXP 40
14802: PPUSH
14803: CALL_OW 87
// DialogueOn ;
14807: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14811: LD_EXP 40
14815: PPUSH
14816: LD_STRING D25-Pla-1
14818: PPUSH
14819: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14823: LD_VAR 0 4
14827: NOT
14828: PUSH
14829: LD_VAR 0 5
14833: NOT
14834: AND
14835: PUSH
14836: LD_EXP 20
14840: AND
14841: PUSH
14842: LD_EXP 21
14846: AND
14847: IFFALSE 14927
// begin westOutpostReported := true ;
14849: LD_ADDR_VAR 0 4
14853: PUSH
14854: LD_INT 1
14856: ST_TO_ADDR
// eastOutpostReported := true ;
14857: LD_ADDR_VAR 0 5
14861: PUSH
14862: LD_INT 1
14864: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
14865: LD_EXP 34
14869: PPUSH
14870: LD_STRING D25-Bur-1
14872: PPUSH
14873: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
14877: LD_EXP 24
14881: PUSH
14882: LD_EXP 22
14886: NOT
14887: AND
14888: IFFALSE 14925
// begin Say ( Burlak , D25b-Bur-1 ) ;
14890: LD_EXP 34
14894: PPUSH
14895: LD_STRING D25b-Bur-1
14897: PPUSH
14898: CALL_OW 88
// if not reinforcementsGained then
14902: LD_EXP 25
14906: NOT
14907: IFFALSE 14925
// begin Say ( Platonov , D25b-Pla-1 ) ;
14909: LD_EXP 40
14913: PPUSH
14914: LD_STRING D25b-Pla-1
14916: PPUSH
14917: CALL_OW 88
// SendReinforcements ( ) ;
14921: CALL 3242 0 0
// end ; end ; end else
14925: GO 15116
// if not westOutpostReported and westOutpostDiscovered then
14927: LD_VAR 0 4
14931: NOT
14932: PUSH
14933: LD_EXP 20
14937: AND
14938: IFFALSE 15010
// begin westOutpostReported := true ;
14940: LD_ADDR_VAR 0 4
14944: PUSH
14945: LD_INT 1
14947: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
14948: LD_EXP 34
14952: PPUSH
14953: LD_STRING D25a-Bur-1b
14955: PPUSH
14956: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
14960: LD_EXP 24
14964: PUSH
14965: LD_EXP 22
14969: NOT
14970: AND
14971: IFFALSE 15008
// begin Say ( Burlak , D25b-Bur-1 ) ;
14973: LD_EXP 34
14977: PPUSH
14978: LD_STRING D25b-Bur-1
14980: PPUSH
14981: CALL_OW 88
// if not reinforcementsGained then
14985: LD_EXP 25
14989: NOT
14990: IFFALSE 15008
// begin Say ( Platonov , D25b-Pla-1 ) ;
14992: LD_EXP 40
14996: PPUSH
14997: LD_STRING D25b-Pla-1
14999: PPUSH
15000: CALL_OW 88
// SendReinforcements ( ) ;
15004: CALL 3242 0 0
// end ; end ; end else
15008: GO 15116
// if not eastOutpostReported and eastOutpostDiscovered then
15010: LD_VAR 0 5
15014: NOT
15015: PUSH
15016: LD_EXP 21
15020: AND
15021: IFFALSE 15045
// begin eastOutpostReported := true ;
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_INT 1
15030: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15031: LD_EXP 34
15035: PPUSH
15036: LD_STRING D25a-Bur-1a
15038: PPUSH
15039: CALL_OW 88
// end else
15043: GO 15116
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15045: LD_EXP 20
15049: NOT
15050: PUSH
15051: LD_EXP 21
15055: NOT
15056: OR
15057: IFFALSE 15085
// begin Say ( Burlak , D25a-Bur-1 ) ;
15059: LD_EXP 34
15063: PPUSH
15064: LD_STRING D25a-Bur-1
15066: PPUSH
15067: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15071: LD_EXP 40
15075: PPUSH
15076: LD_STRING D25c-Pla-1
15078: PPUSH
15079: CALL_OW 88
// end else
15083: GO 15116
// if not allMapPointsSpotted then
15085: LD_EXP 26
15089: NOT
15090: IFFALSE 15116
// begin Say ( Burlak , D25a-Bur-1 ) ;
15092: LD_EXP 34
15096: PPUSH
15097: LD_STRING D25a-Bur-1
15099: PPUSH
15100: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15104: LD_EXP 40
15108: PPUSH
15109: LD_STRING D25c-Pla-1a
15111: PPUSH
15112: CALL_OW 88
// end ; DialogueOff ;
15116: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15120: LD_EXP 26
15124: PUSH
15125: LD_EXP 22
15129: AND
15130: IFFALSE 14629
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15132: LD_INT 22
15134: PUSH
15135: LD_INT 3
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 21
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 91
15154: PUSH
15155: LD_EXP 40
15159: PUSH
15160: LD_INT 10
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: PPUSH
15173: CALL_OW 69
15177: IFFALSE 15220
// begin if not belkovDied and not belkovSaved then
15179: LD_EXP 19
15183: NOT
15184: PUSH
15185: LD_EXP 28
15189: NOT
15190: AND
15191: IFFALSE 15214
// begin if Query ( QContMission ) = 1 then
15193: LD_STRING QContMission
15195: PPUSH
15196: CALL_OW 97
15200: PUSH
15201: LD_INT 1
15203: EQUAL
15204: IFFALSE 15212
// begin EndMission ;
15206: CALL 15234 0 0
// exit ;
15210: GO 15231
// end ; end else
15212: GO 15220
// begin EndMission ;
15214: CALL 15234 0 0
// exit ;
15218: GO 15231
// end ; end ; wait ( 0 0$10 ) ;
15220: LD_INT 350
15222: PPUSH
15223: CALL_OW 67
// until false ;
15227: LD_INT 0
15229: IFFALSE 15132
// end ;
15231: PPOPN 5
15233: END
// function EndMission ; var i , tmp ; begin
15234: LD_INT 0
15236: PPUSH
15237: PPUSH
15238: PPUSH
// if initiative then
15239: LD_EXP 31
15243: IFFALSE 15257
// AddMedal ( Initiative , 1 ) else
15245: LD_STRING Initiative
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 101
15255: GO 15288
// if not eastOutpostDestroyed then
15257: LD_EXP 23
15261: NOT
15262: IFFALSE 15277
// AddMedal ( Initiative , - 2 ) else
15264: LD_STRING Initiative
15266: PPUSH
15267: LD_INT 2
15269: NEG
15270: PPUSH
15271: CALL_OW 101
15275: GO 15288
// AddMedal ( Initiative , - 1 ) ;
15277: LD_STRING Initiative
15279: PPUSH
15280: LD_INT 1
15282: NEG
15283: PPUSH
15284: CALL_OW 101
// if not belkovDied and belkovSaved then
15288: LD_EXP 19
15292: NOT
15293: PUSH
15294: LD_EXP 28
15298: AND
15299: IFFALSE 15313
// AddMedal ( Belkov , 1 ) else
15301: LD_STRING Belkov
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 101
15311: GO 15408
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15313: LD_EXP 45
15317: PPUSH
15318: LD_INT 22
15320: PUSH
15321: LD_INT 3
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 72
15332: IFFALSE 15346
// AddMedal ( Belkov , 2 ) else
15334: LD_STRING Belkov
15336: PPUSH
15337: LD_INT 2
15339: PPUSH
15340: CALL_OW 101
15344: GO 15408
// if belkovDied then
15346: LD_EXP 19
15350: IFFALSE 15365
// AddMedal ( Belkov , - 1 ) else
15352: LD_STRING Belkov
15354: PPUSH
15355: LD_INT 1
15357: NEG
15358: PPUSH
15359: CALL_OW 101
15363: GO 15408
// if not belkovSaved then
15365: LD_EXP 28
15369: NOT
15370: IFFALSE 15385
// AddMedal ( Belkov , - 2 ) else
15372: LD_STRING Belkov
15374: PPUSH
15375: LD_INT 2
15377: NEG
15378: PPUSH
15379: CALL_OW 101
15383: GO 15408
// if belkovDied and belkovSaved then
15385: LD_EXP 19
15389: PUSH
15390: LD_EXP 28
15394: AND
15395: IFFALSE 15408
// AddMedal ( Belkov , - 3 ) ;
15397: LD_STRING Belkov
15399: PPUSH
15400: LD_INT 3
15402: NEG
15403: PPUSH
15404: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15408: LD_EXP 30
15412: PUSH
15413: LD_INT 0
15415: EQUAL
15416: IFFALSE 15430
// AddMedal ( NoLosses , 1 ) else
15418: LD_STRING NoLosses
15420: PPUSH
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 101
15428: GO 15441
// AddMedal ( NoLosses , - 1 ) ;
15430: LD_STRING NoLosses
15432: PPUSH
15433: LD_INT 1
15435: NEG
15436: PPUSH
15437: CALL_OW 101
// GiveMedals ( Main ) ;
15441: LD_STRING Main
15443: PPUSH
15444: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15448: LD_INT 22
15450: PUSH
15451: LD_INT 3
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 23
15460: PUSH
15461: LD_INT 3
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: PPUSH
15488: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15492: LD_EXP 34
15496: PPUSH
15497: LD_EXP 3
15501: PUSH
15502: LD_STRING Burlak
15504: STR
15505: PPUSH
15506: CALL_OW 38
// if IsLive ( Gnyevko ) then
15510: LD_EXP 35
15514: PPUSH
15515: CALL_OW 300
15519: IFFALSE 15539
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15521: LD_EXP 35
15525: PPUSH
15526: LD_EXP 3
15530: PUSH
15531: LD_STRING Gnyevko
15533: STR
15534: PPUSH
15535: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15539: LD_EXP 39
15543: PPUSH
15544: CALL_OW 300
15548: IFFALSE 15568
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15550: LD_EXP 39
15554: PPUSH
15555: LD_EXP 3
15559: PUSH
15560: LD_STRING Kovalyuk
15562: STR
15563: PPUSH
15564: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15568: LD_EXP 36
15572: PPUSH
15573: CALL_OW 300
15577: PUSH
15578: LD_EXP 28
15582: AND
15583: IFFALSE 15603
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15585: LD_EXP 36
15589: PPUSH
15590: LD_EXP 3
15594: PUSH
15595: LD_STRING Belkov
15597: STR
15598: PPUSH
15599: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15603: LD_EXP 37
15607: PPUSH
15608: CALL_OW 300
15612: IFFALSE 15632
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15614: LD_EXP 37
15618: PPUSH
15619: LD_EXP 3
15623: PUSH
15624: LD_STRING Kirilenkova
15626: STR
15627: PPUSH
15628: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15632: LD_INT 22
15634: PUSH
15635: LD_INT 3
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 23
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: PPUSH
15667: CALL_OW 69
15671: PUSH
15672: LD_EXP 34
15676: PUSH
15677: LD_EXP 35
15681: PUSH
15682: LD_EXP 39
15686: PUSH
15687: LD_EXP 36
15691: PUSH
15692: LD_EXP 37
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: DIFF
15704: PPUSH
15705: LD_EXP 3
15709: PUSH
15710: LD_STRING burlakTeam
15712: STR
15713: PPUSH
15714: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15718: LD_INT 22
15720: PUSH
15721: LD_INT 6
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 23
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 21
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_EXP 38
15767: PUSH
15768: LD_EXP 36
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_EXP 45
15782: UNION
15783: DIFF
15784: PPUSH
15785: LD_EXP 3
15789: PUSH
15790: LD_STRING kirovTeam
15792: STR
15793: PPUSH
15794: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15798: LD_EXP 23
15802: PPUSH
15803: LD_STRING 02_EasternOutpostDestroyed
15805: PPUSH
15806: CALL_OW 39
// tmp := [ ] ;
15810: LD_ADDR_VAR 0 3
15814: PUSH
15815: EMPTY
15816: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15817: LD_ADDR_VAR 0 2
15821: PUSH
15822: LD_INT 22
15824: PUSH
15825: LD_INT 3
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PPUSH
15846: CALL_OW 69
15850: PUSH
15851: FOR_IN
15852: IFFALSE 15928
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15854: LD_ADDR_VAR 0 3
15858: PUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 266
15873: PUSH
15874: LD_VAR 0 2
15878: PPUSH
15879: CALL_OW 267
15883: PUSH
15884: LD_VAR 0 2
15888: PPUSH
15889: CALL_OW 250
15893: PUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 251
15903: PUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 254
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL 53471 0 2
15925: ST_TO_ADDR
15926: GO 15851
15928: POP
15929: POP
// SaveVariable ( tmp , 02_Beria ) ;
15930: LD_VAR 0 3
15934: PPUSH
15935: LD_STRING 02_Beria
15937: PPUSH
15938: CALL_OW 39
// tmp := [ ] ;
15942: LD_ADDR_VAR 0 3
15946: PUSH
15947: EMPTY
15948: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: LD_INT 22
15956: PUSH
15957: LD_INT 6
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PPUSH
15978: CALL_OW 69
15982: PUSH
15983: FOR_IN
15984: IFFALSE 16060
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15986: LD_ADDR_VAR 0 3
15990: PUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_VAR 0 2
16000: PPUSH
16001: CALL_OW 266
16005: PUSH
16006: LD_VAR 0 2
16010: PPUSH
16011: CALL_OW 267
16015: PUSH
16016: LD_VAR 0 2
16020: PPUSH
16021: CALL_OW 250
16025: PUSH
16026: LD_VAR 0 2
16030: PPUSH
16031: CALL_OW 251
16035: PUSH
16036: LD_VAR 0 2
16040: PPUSH
16041: CALL_OW 254
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL 53471 0 2
16057: ST_TO_ADDR
16058: GO 15983
16060: POP
16061: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_STRING 02_Kirov
16069: PPUSH
16070: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16074: LD_INT 22
16076: PUSH
16077: LD_INT 3
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 21
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PPUSH
16098: CALL_OW 69
16102: PPUSH
16103: CALL 18836 0 1
16107: PPUSH
16108: LD_STRING 02_VehiclesCount
16110: PPUSH
16111: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16115: LD_INT 22
16117: PUSH
16118: LD_INT 6
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 21
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: PPUSH
16144: CALL 18836 0 1
16148: PPUSH
16149: LD_STRING 02_KirovVehiclesCount
16151: PPUSH
16152: CALL_OW 39
// YouWin ;
16156: CALL_OW 103
// end ; end_of_file
16160: LD_VAR 0 1
16164: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16165: LD_INT 420
16167: PPUSH
16168: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_VAR 0 3
16181: PPUSH
16182: CALL 7940 0 2
// end ;
16186: PPOPN 5
16188: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
16189: LD_VAR 0 1
16193: PUSH
16194: LD_EXP 34
16198: EQUAL
16199: IFFALSE 16208
// YouLost ( Burlak ) ;
16201: LD_STRING Burlak
16203: PPUSH
16204: CALL_OW 104
// if un = Platonov then
16208: LD_VAR 0 1
16212: PUSH
16213: LD_EXP 40
16217: EQUAL
16218: IFFALSE 16227
// YouLost ( Platonov ) ;
16220: LD_STRING Platonov
16222: PPUSH
16223: CALL_OW 104
// if un = Kurin then
16227: LD_VAR 0 1
16231: PUSH
16232: LD_EXP 38
16236: EQUAL
16237: IFFALSE 16246
// YouLost ( Kurin ) ;
16239: LD_STRING Kurin
16241: PPUSH
16242: CALL_OW 104
// if un = Belkov then
16246: LD_VAR 0 1
16250: PUSH
16251: LD_EXP 36
16255: EQUAL
16256: IFFALSE 16266
// belkovDied := true ;
16258: LD_ADDR_EXP 19
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// if un in belkovTeam then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_EXP 45
16275: IN
16276: IFFALSE 16309
// begin belkovTeam := belkovTeam diff un ;
16278: LD_ADDR_EXP 45
16282: PUSH
16283: LD_EXP 45
16287: PUSH
16288: LD_VAR 0 1
16292: DIFF
16293: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16294: LD_ADDR_EXP 29
16298: PUSH
16299: LD_EXP 29
16303: PPUSH
16304: CALL 54824 0 1
16308: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 22
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 21
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 23
16336: PUSH
16337: LD_INT 3
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: PPUSH
16349: CALL_OW 69
16353: IN
16354: IFFALSE 16371
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16356: LD_ADDR_EXP 30
16360: PUSH
16361: LD_EXP 30
16365: PPUSH
16366: CALL 54824 0 1
16370: ST_TO_ADDR
// if un in usWestForces then
16371: LD_VAR 0 1
16375: PUSH
16376: LD_EXP 46
16380: IN
16381: IFFALSE 16399
// usWestForces := usWestForces diff un ;
16383: LD_ADDR_EXP 46
16387: PUSH
16388: LD_EXP 46
16392: PUSH
16393: LD_VAR 0 1
16397: DIFF
16398: ST_TO_ADDR
// if un in usEastForces then
16399: LD_VAR 0 1
16403: PUSH
16404: LD_EXP 47
16408: IN
16409: IFFALSE 16427
// usEastForces := usEastForces diff un ;
16411: LD_ADDR_EXP 47
16415: PUSH
16416: LD_EXP 47
16420: PUSH
16421: LD_VAR 0 1
16425: DIFF
16426: ST_TO_ADDR
// end ;
16427: PPOPN 1
16429: END
// on BuildingComplete ( b ) do var mech ;
16430: LD_INT 0
16432: PPUSH
// begin if GetSide ( b ) = 3 then
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 255
16442: PUSH
16443: LD_INT 3
16445: EQUAL
16446: IFFALSE 16505
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 266
16457: PUSH
16458: LD_INT 6
16460: PUSH
16461: LD_INT 7
16463: PUSH
16464: LD_INT 8
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: LIST
16471: IN
16472: IFFALSE 16482
// hasLab := true ;
16474: LD_ADDR_EXP 9
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 266
16491: PUSH
16492: LD_INT 2
16494: EQUAL
16495: IFFALSE 16505
// hasWorkshop := true ;
16497: LD_ADDR_EXP 10
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 255
16514: PUSH
16515: LD_INT 6
16517: EQUAL
16518: IFFALSE 16592
// begin if GetBType ( b ) = b_workshop then
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 266
16529: PUSH
16530: LD_INT 2
16532: EQUAL
16533: IFFALSE 16592
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16535: LD_ADDR_VAR 0 2
16539: PUSH
16540: LD_EXP 43
16544: PPUSH
16545: LD_INT 25
16547: PUSH
16548: LD_INT 3
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 72
16559: ST_TO_ADDR
// if not mech then
16560: LD_VAR 0 2
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16592
// ComExit ( mech ) ;
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL 53859 0 1
// AddComEnterUnit ( mech , b ) ;
16578: LD_VAR 0 2
16582: PPUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 180
// end ; end ; end ;
16592: PPOPN 2
16594: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 255
16604: PUSH
16605: LD_INT 3
16607: EQUAL
16608: IFFALSE 16633
// begin hasTank := true ;
16610: LD_ADDR_EXP 12
16614: PUSH
16615: LD_INT 1
16617: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16618: LD_ADDR_EXP 15
16622: PUSH
16623: LD_EXP 15
16627: PPUSH
16628: CALL 54824 0 1
16632: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_INT 6
16645: EQUAL
16646: IFFALSE 16657
// KirovAttack ( vehicle ) ;
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL 3548 0 1
// end ;
16657: PPOPN 2
16659: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16660: LD_VAR 0 1
16664: PUSH
16665: LD_EXP 33
16669: EQUAL
16670: IFFALSE 16676
// BelkovAttackScript ;
16672: CALL 1613 0 0
// end ;
16676: PPOPN 1
16678: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16679: LD_INT 0
16681: PPUSH
// begin if side = 1 then
16682: LD_VAR 0 3
16686: PUSH
16687: LD_INT 1
16689: EQUAL
16690: IFFALSE 16700
// vehCaptured := true ;
16692: LD_ADDR_EXP 16
16696: PUSH
16697: LD_INT 1
16699: ST_TO_ADDR
// end ;
16700: PPOPN 5
16702: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16703: LD_VAR 0 1
16707: PUSH
16708: LD_INT 3
16710: EQUAL
16711: PUSH
16712: LD_VAR 0 2
16716: PUSH
16717: LD_INT 6
16719: EQUAL
16720: AND
16721: IFFALSE 16731
// allianceAttacked := true ;
16723: LD_ADDR_EXP 13
16727: PUSH
16728: LD_INT 1
16730: ST_TO_ADDR
// end ; end_of_file
16731: PPOPN 2
16733: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16734: LD_INT 0
16736: PPUSH
16737: PPUSH
// if exist_mode then
16738: LD_VAR 0 2
16742: IFFALSE 16767
// unit := CreateCharacter ( prefix & ident ) else
16744: LD_ADDR_VAR 0 5
16748: PUSH
16749: LD_VAR 0 3
16753: PUSH
16754: LD_VAR 0 1
16758: STR
16759: PPUSH
16760: CALL_OW 34
16764: ST_TO_ADDR
16765: GO 16782
// unit := NewCharacter ( ident ) ;
16767: LD_ADDR_VAR 0 5
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 25
16781: ST_TO_ADDR
// result := unit ;
16782: LD_ADDR_VAR 0 4
16786: PUSH
16787: LD_VAR 0 5
16791: ST_TO_ADDR
// end ;
16792: LD_VAR 0 4
16796: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16797: LD_INT 0
16799: PPUSH
16800: PPUSH
// if not side or not nation then
16801: LD_VAR 0 1
16805: NOT
16806: PUSH
16807: LD_VAR 0 2
16811: NOT
16812: OR
16813: IFFALSE 16817
// exit ;
16815: GO 17585
// case nation of nation_american :
16817: LD_VAR 0 2
16821: PUSH
16822: LD_INT 1
16824: DOUBLE
16825: EQUAL
16826: IFTRUE 16830
16828: GO 17044
16830: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16831: LD_ADDR_VAR 0 4
16835: PUSH
16836: LD_INT 35
16838: PUSH
16839: LD_INT 45
16841: PUSH
16842: LD_INT 46
16844: PUSH
16845: LD_INT 47
16847: PUSH
16848: LD_INT 82
16850: PUSH
16851: LD_INT 83
16853: PUSH
16854: LD_INT 84
16856: PUSH
16857: LD_INT 85
16859: PUSH
16860: LD_INT 86
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: LD_INT 2
16868: PUSH
16869: LD_INT 6
16871: PUSH
16872: LD_INT 15
16874: PUSH
16875: LD_INT 16
16877: PUSH
16878: LD_INT 7
16880: PUSH
16881: LD_INT 12
16883: PUSH
16884: LD_INT 13
16886: PUSH
16887: LD_INT 10
16889: PUSH
16890: LD_INT 14
16892: PUSH
16893: LD_INT 20
16895: PUSH
16896: LD_INT 21
16898: PUSH
16899: LD_INT 22
16901: PUSH
16902: LD_INT 25
16904: PUSH
16905: LD_INT 32
16907: PUSH
16908: LD_INT 27
16910: PUSH
16911: LD_INT 36
16913: PUSH
16914: LD_INT 69
16916: PUSH
16917: LD_INT 39
16919: PUSH
16920: LD_INT 34
16922: PUSH
16923: LD_INT 40
16925: PUSH
16926: LD_INT 48
16928: PUSH
16929: LD_INT 49
16931: PUSH
16932: LD_INT 50
16934: PUSH
16935: LD_INT 51
16937: PUSH
16938: LD_INT 52
16940: PUSH
16941: LD_INT 53
16943: PUSH
16944: LD_INT 54
16946: PUSH
16947: LD_INT 55
16949: PUSH
16950: LD_INT 56
16952: PUSH
16953: LD_INT 57
16955: PUSH
16956: LD_INT 58
16958: PUSH
16959: LD_INT 59
16961: PUSH
16962: LD_INT 60
16964: PUSH
16965: LD_INT 61
16967: PUSH
16968: LD_INT 62
16970: PUSH
16971: LD_INT 80
16973: PUSH
16974: LD_INT 82
16976: PUSH
16977: LD_INT 83
16979: PUSH
16980: LD_INT 84
16982: PUSH
16983: LD_INT 85
16985: PUSH
16986: LD_INT 86
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: ST_TO_ADDR
17042: GO 17509
17044: LD_INT 2
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17278
17052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17053: LD_ADDR_VAR 0 4
17057: PUSH
17058: LD_INT 35
17060: PUSH
17061: LD_INT 45
17063: PUSH
17064: LD_INT 46
17066: PUSH
17067: LD_INT 47
17069: PUSH
17070: LD_INT 82
17072: PUSH
17073: LD_INT 83
17075: PUSH
17076: LD_INT 84
17078: PUSH
17079: LD_INT 85
17081: PUSH
17082: LD_INT 87
17084: PUSH
17085: LD_INT 70
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: LD_INT 11
17093: PUSH
17094: LD_INT 3
17096: PUSH
17097: LD_INT 4
17099: PUSH
17100: LD_INT 5
17102: PUSH
17103: LD_INT 6
17105: PUSH
17106: LD_INT 15
17108: PUSH
17109: LD_INT 18
17111: PUSH
17112: LD_INT 7
17114: PUSH
17115: LD_INT 17
17117: PUSH
17118: LD_INT 8
17120: PUSH
17121: LD_INT 20
17123: PUSH
17124: LD_INT 21
17126: PUSH
17127: LD_INT 22
17129: PUSH
17130: LD_INT 72
17132: PUSH
17133: LD_INT 26
17135: PUSH
17136: LD_INT 69
17138: PUSH
17139: LD_INT 39
17141: PUSH
17142: LD_INT 40
17144: PUSH
17145: LD_INT 41
17147: PUSH
17148: LD_INT 42
17150: PUSH
17151: LD_INT 43
17153: PUSH
17154: LD_INT 48
17156: PUSH
17157: LD_INT 49
17159: PUSH
17160: LD_INT 50
17162: PUSH
17163: LD_INT 51
17165: PUSH
17166: LD_INT 52
17168: PUSH
17169: LD_INT 53
17171: PUSH
17172: LD_INT 54
17174: PUSH
17175: LD_INT 55
17177: PUSH
17178: LD_INT 56
17180: PUSH
17181: LD_INT 60
17183: PUSH
17184: LD_INT 61
17186: PUSH
17187: LD_INT 62
17189: PUSH
17190: LD_INT 66
17192: PUSH
17193: LD_INT 67
17195: PUSH
17196: LD_INT 68
17198: PUSH
17199: LD_INT 81
17201: PUSH
17202: LD_INT 82
17204: PUSH
17205: LD_INT 83
17207: PUSH
17208: LD_INT 84
17210: PUSH
17211: LD_INT 85
17213: PUSH
17214: LD_INT 87
17216: PUSH
17217: LD_INT 88
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: ST_TO_ADDR
17276: GO 17509
17278: LD_INT 3
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17508
17286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17287: LD_ADDR_VAR 0 4
17291: PUSH
17292: LD_INT 46
17294: PUSH
17295: LD_INT 47
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 82
17306: PUSH
17307: LD_INT 83
17309: PUSH
17310: LD_INT 84
17312: PUSH
17313: LD_INT 85
17315: PUSH
17316: LD_INT 86
17318: PUSH
17319: LD_INT 11
17321: PUSH
17322: LD_INT 9
17324: PUSH
17325: LD_INT 20
17327: PUSH
17328: LD_INT 19
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 24
17336: PUSH
17337: LD_INT 22
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 28
17345: PUSH
17346: LD_INT 29
17348: PUSH
17349: LD_INT 30
17351: PUSH
17352: LD_INT 31
17354: PUSH
17355: LD_INT 37
17357: PUSH
17358: LD_INT 38
17360: PUSH
17361: LD_INT 32
17363: PUSH
17364: LD_INT 27
17366: PUSH
17367: LD_INT 33
17369: PUSH
17370: LD_INT 69
17372: PUSH
17373: LD_INT 39
17375: PUSH
17376: LD_INT 34
17378: PUSH
17379: LD_INT 40
17381: PUSH
17382: LD_INT 71
17384: PUSH
17385: LD_INT 23
17387: PUSH
17388: LD_INT 44
17390: PUSH
17391: LD_INT 48
17393: PUSH
17394: LD_INT 49
17396: PUSH
17397: LD_INT 50
17399: PUSH
17400: LD_INT 51
17402: PUSH
17403: LD_INT 52
17405: PUSH
17406: LD_INT 53
17408: PUSH
17409: LD_INT 54
17411: PUSH
17412: LD_INT 55
17414: PUSH
17415: LD_INT 56
17417: PUSH
17418: LD_INT 57
17420: PUSH
17421: LD_INT 58
17423: PUSH
17424: LD_INT 59
17426: PUSH
17427: LD_INT 63
17429: PUSH
17430: LD_INT 64
17432: PUSH
17433: LD_INT 65
17435: PUSH
17436: LD_INT 82
17438: PUSH
17439: LD_INT 83
17441: PUSH
17442: LD_INT 84
17444: PUSH
17445: LD_INT 85
17447: PUSH
17448: LD_INT 86
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: ST_TO_ADDR
17506: GO 17509
17508: POP
// if state > - 1 and state < 3 then
17509: LD_VAR 0 3
17513: PUSH
17514: LD_INT 1
17516: NEG
17517: GREATER
17518: PUSH
17519: LD_VAR 0 3
17523: PUSH
17524: LD_INT 3
17526: LESS
17527: AND
17528: IFFALSE 17585
// for i in result do
17530: LD_ADDR_VAR 0 5
17534: PUSH
17535: LD_VAR 0 4
17539: PUSH
17540: FOR_IN
17541: IFFALSE 17583
// if GetTech ( i , side ) <> state then
17543: LD_VAR 0 5
17547: PPUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL_OW 321
17557: PUSH
17558: LD_VAR 0 3
17562: NONEQUAL
17563: IFFALSE 17581
// result := result diff i ;
17565: LD_ADDR_VAR 0 4
17569: PUSH
17570: LD_VAR 0 4
17574: PUSH
17575: LD_VAR 0 5
17579: DIFF
17580: ST_TO_ADDR
17581: GO 17540
17583: POP
17584: POP
// end ;
17585: LD_VAR 0 4
17589: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17590: LD_INT 0
17592: PPUSH
17593: PPUSH
17594: PPUSH
// result := true ;
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: LD_INT 1
17602: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17603: LD_ADDR_VAR 0 5
17607: PUSH
17608: LD_VAR 0 2
17612: PPUSH
17613: CALL_OW 480
17617: ST_TO_ADDR
// if not tmp then
17618: LD_VAR 0 5
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17676
// for i in tmp do
17627: LD_ADDR_VAR 0 4
17631: PUSH
17632: LD_VAR 0 5
17636: PUSH
17637: FOR_IN
17638: IFFALSE 17674
// if GetTech ( i , side ) <> state_researched then
17640: LD_VAR 0 4
17644: PPUSH
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 321
17654: PUSH
17655: LD_INT 2
17657: NONEQUAL
17658: IFFALSE 17672
// begin result := false ;
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: LD_INT 0
17667: ST_TO_ADDR
// exit ;
17668: POP
17669: POP
17670: GO 17676
// end ;
17672: GO 17637
17674: POP
17675: POP
// end ;
17676: LD_VAR 0 3
17680: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17696: LD_VAR 0 1
17700: NOT
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 257
17711: PUSH
17712: LD_INT 9
17714: NONEQUAL
17715: OR
17716: IFFALSE 17720
// exit ;
17718: GO 18293
// side := GetSide ( unit ) ;
17720: LD_ADDR_VAR 0 9
17724: PUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 255
17734: ST_TO_ADDR
// tech_space := tech_spacanom ;
17735: LD_ADDR_VAR 0 12
17739: PUSH
17740: LD_INT 29
17742: ST_TO_ADDR
// tech_time := tech_taurad ;
17743: LD_ADDR_VAR 0 13
17747: PUSH
17748: LD_INT 28
17750: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17751: LD_ADDR_VAR 0 11
17755: PUSH
17756: LD_VAR 0 1
17760: PPUSH
17761: CALL_OW 310
17765: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17766: LD_VAR 0 11
17770: PPUSH
17771: CALL_OW 247
17775: PUSH
17776: LD_INT 2
17778: EQUAL
17779: IFFALSE 17783
// exit ;
17781: GO 18293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17783: LD_ADDR_VAR 0 8
17787: PUSH
17788: LD_INT 81
17790: PUSH
17791: LD_VAR 0 9
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 3
17802: PUSH
17803: LD_INT 21
17805: PUSH
17806: LD_INT 3
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PPUSH
17821: CALL_OW 69
17825: ST_TO_ADDR
// if not tmp then
17826: LD_VAR 0 8
17830: NOT
17831: IFFALSE 17835
// exit ;
17833: GO 18293
// if in_unit then
17835: LD_VAR 0 11
17839: IFFALSE 17863
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17841: LD_ADDR_VAR 0 10
17845: PUSH
17846: LD_VAR 0 8
17850: PPUSH
17851: LD_VAR 0 11
17855: PPUSH
17856: CALL_OW 74
17860: ST_TO_ADDR
17861: GO 17883
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17863: LD_ADDR_VAR 0 10
17867: PUSH
17868: LD_VAR 0 8
17872: PPUSH
17873: LD_VAR 0 1
17877: PPUSH
17878: CALL_OW 74
17882: ST_TO_ADDR
// if not enemy then
17883: LD_VAR 0 10
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 18293
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17892: LD_VAR 0 11
17896: PUSH
17897: LD_VAR 0 11
17901: PPUSH
17902: LD_VAR 0 10
17906: PPUSH
17907: CALL_OW 296
17911: PUSH
17912: LD_INT 13
17914: GREATER
17915: AND
17916: PUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: LD_VAR 0 10
17926: PPUSH
17927: CALL_OW 296
17931: PUSH
17932: LD_INT 12
17934: GREATER
17935: OR
17936: IFFALSE 17940
// exit ;
17938: GO 18293
// missile := [ 1 ] ;
17940: LD_ADDR_VAR 0 14
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17951: LD_VAR 0 9
17955: PPUSH
17956: LD_VAR 0 12
17960: PPUSH
17961: CALL_OW 325
17965: IFFALSE 17994
// missile := Insert ( missile , missile + 1 , 2 ) ;
17967: LD_ADDR_VAR 0 14
17971: PUSH
17972: LD_VAR 0 14
17976: PPUSH
17977: LD_VAR 0 14
17981: PUSH
17982: LD_INT 1
17984: PLUS
17985: PPUSH
17986: LD_INT 2
17988: PPUSH
17989: CALL_OW 2
17993: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17994: LD_VAR 0 9
17998: PPUSH
17999: LD_VAR 0 13
18003: PPUSH
18004: CALL_OW 325
18008: PUSH
18009: LD_VAR 0 10
18013: PPUSH
18014: CALL_OW 255
18018: PPUSH
18019: LD_VAR 0 13
18023: PPUSH
18024: CALL_OW 325
18028: NOT
18029: AND
18030: IFFALSE 18059
// missile := Insert ( missile , missile + 1 , 3 ) ;
18032: LD_ADDR_VAR 0 14
18036: PUSH
18037: LD_VAR 0 14
18041: PPUSH
18042: LD_VAR 0 14
18046: PUSH
18047: LD_INT 1
18049: PLUS
18050: PPUSH
18051: LD_INT 3
18053: PPUSH
18054: CALL_OW 2
18058: ST_TO_ADDR
// if missile < 2 then
18059: LD_VAR 0 14
18063: PUSH
18064: LD_INT 2
18066: LESS
18067: IFFALSE 18071
// exit ;
18069: GO 18293
// x := GetX ( enemy ) ;
18071: LD_ADDR_VAR 0 4
18075: PUSH
18076: LD_VAR 0 10
18080: PPUSH
18081: CALL_OW 250
18085: ST_TO_ADDR
// y := GetY ( enemy ) ;
18086: LD_ADDR_VAR 0 5
18090: PUSH
18091: LD_VAR 0 10
18095: PPUSH
18096: CALL_OW 251
18100: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18101: LD_ADDR_VAR 0 6
18105: PUSH
18106: LD_VAR 0 4
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: CALL_OW 12
18122: PLUS
18123: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18124: LD_ADDR_VAR 0 7
18128: PUSH
18129: LD_VAR 0 5
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: CALL_OW 12
18145: PLUS
18146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18147: LD_VAR 0 6
18151: PPUSH
18152: LD_VAR 0 7
18156: PPUSH
18157: CALL_OW 488
18161: NOT
18162: IFFALSE 18184
// begin _x := x ;
18164: LD_ADDR_VAR 0 6
18168: PUSH
18169: LD_VAR 0 4
18173: ST_TO_ADDR
// _y := y ;
18174: LD_ADDR_VAR 0 7
18178: PUSH
18179: LD_VAR 0 5
18183: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: PPUSH
18192: LD_VAR 0 14
18196: PPUSH
18197: CALL_OW 12
18201: ST_TO_ADDR
// case i of 1 :
18202: LD_VAR 0 3
18206: PUSH
18207: LD_INT 1
18209: DOUBLE
18210: EQUAL
18211: IFTRUE 18215
18213: GO 18232
18215: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18216: LD_VAR 0 1
18220: PPUSH
18221: LD_VAR 0 10
18225: PPUSH
18226: CALL_OW 115
18230: GO 18293
18232: LD_INT 2
18234: DOUBLE
18235: EQUAL
18236: IFTRUE 18240
18238: GO 18262
18240: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18241: LD_VAR 0 1
18245: PPUSH
18246: LD_VAR 0 6
18250: PPUSH
18251: LD_VAR 0 7
18255: PPUSH
18256: CALL_OW 153
18260: GO 18293
18262: LD_INT 3
18264: DOUBLE
18265: EQUAL
18266: IFTRUE 18270
18268: GO 18292
18270: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_VAR 0 6
18280: PPUSH
18281: LD_VAR 0 7
18285: PPUSH
18286: CALL_OW 154
18290: GO 18293
18292: POP
// end ;
18293: LD_VAR 0 2
18297: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18298: LD_INT 0
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
// if not unit or not building then
18306: LD_VAR 0 1
18310: NOT
18311: PUSH
18312: LD_VAR 0 2
18316: NOT
18317: OR
18318: IFFALSE 18322
// exit ;
18320: GO 18480
// x := GetX ( building ) ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_VAR 0 2
18331: PPUSH
18332: CALL_OW 250
18336: ST_TO_ADDR
// y := GetY ( building ) ;
18337: LD_ADDR_VAR 0 6
18341: PUSH
18342: LD_VAR 0 2
18346: PPUSH
18347: CALL_OW 251
18351: ST_TO_ADDR
// for i = 0 to 5 do
18352: LD_ADDR_VAR 0 4
18356: PUSH
18357: DOUBLE
18358: LD_INT 0
18360: DEC
18361: ST_TO_ADDR
18362: LD_INT 5
18364: PUSH
18365: FOR_TO
18366: IFFALSE 18478
// begin _x := ShiftX ( x , i , 3 ) ;
18368: LD_ADDR_VAR 0 7
18372: PUSH
18373: LD_VAR 0 5
18377: PPUSH
18378: LD_VAR 0 4
18382: PPUSH
18383: LD_INT 3
18385: PPUSH
18386: CALL_OW 272
18390: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18391: LD_ADDR_VAR 0 8
18395: PUSH
18396: LD_VAR 0 6
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: LD_INT 3
18408: PPUSH
18409: CALL_OW 273
18413: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18414: LD_VAR 0 7
18418: PPUSH
18419: LD_VAR 0 8
18423: PPUSH
18424: CALL_OW 488
18428: NOT
18429: IFFALSE 18433
// continue ;
18431: GO 18365
// if HexInfo ( _x , _y ) = 0 then
18433: LD_VAR 0 7
18437: PPUSH
18438: LD_VAR 0 8
18442: PPUSH
18443: CALL_OW 428
18447: PUSH
18448: LD_INT 0
18450: EQUAL
18451: IFFALSE 18476
// begin ComMoveXY ( unit , _x , _y ) ;
18453: LD_VAR 0 1
18457: PPUSH
18458: LD_VAR 0 7
18462: PPUSH
18463: LD_VAR 0 8
18467: PPUSH
18468: CALL_OW 111
// exit ;
18472: POP
18473: POP
18474: GO 18480
// end ; end ;
18476: GO 18365
18478: POP
18479: POP
// end ;
18480: LD_VAR 0 3
18484: RET
// export function ScanBase ( side , base_area ) ; begin
18485: LD_INT 0
18487: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_INT 81
18500: PUSH
18501: LD_VAR 0 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 70
18514: ST_TO_ADDR
// end ;
18515: LD_VAR 0 3
18519: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
// result := false ;
18526: LD_ADDR_VAR 0 2
18530: PUSH
18531: LD_INT 0
18533: ST_TO_ADDR
// side := GetSide ( unit ) ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18549: LD_ADDR_VAR 0 4
18553: PUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 248
18563: ST_TO_ADDR
// case nat of 1 :
18564: LD_VAR 0 4
18568: PUSH
18569: LD_INT 1
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 18588
18577: POP
// tech := tech_lassight ; 2 :
18578: LD_ADDR_VAR 0 5
18582: PUSH
18583: LD_INT 12
18585: ST_TO_ADDR
18586: GO 18627
18588: LD_INT 2
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18607
18596: POP
// tech := tech_mortar ; 3 :
18597: LD_ADDR_VAR 0 5
18601: PUSH
18602: LD_INT 41
18604: ST_TO_ADDR
18605: GO 18627
18607: LD_INT 3
18609: DOUBLE
18610: EQUAL
18611: IFTRUE 18615
18613: GO 18626
18615: POP
// tech := tech_bazooka ; end ;
18616: LD_ADDR_VAR 0 5
18620: PUSH
18621: LD_INT 44
18623: ST_TO_ADDR
18624: GO 18627
18626: POP
// if Researched ( side , tech ) then
18627: LD_VAR 0 3
18631: PPUSH
18632: LD_VAR 0 5
18636: PPUSH
18637: CALL_OW 325
18641: IFFALSE 18668
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18643: LD_ADDR_VAR 0 2
18647: PUSH
18648: LD_INT 5
18650: PUSH
18651: LD_INT 8
18653: PUSH
18654: LD_INT 9
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: LD_VAR 0 4
18666: ARRAY
18667: ST_TO_ADDR
// end ;
18668: LD_VAR 0 2
18672: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18673: LD_INT 0
18675: PPUSH
18676: PPUSH
18677: PPUSH
// if not mines then
18678: LD_VAR 0 2
18682: NOT
18683: IFFALSE 18687
// exit ;
18685: GO 18831
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18687: LD_ADDR_VAR 0 5
18691: PUSH
18692: LD_INT 81
18694: PUSH
18695: LD_VAR 0 1
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: LD_INT 21
18709: PUSH
18710: LD_INT 3
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PPUSH
18725: CALL_OW 69
18729: ST_TO_ADDR
// for i in mines do
18730: LD_ADDR_VAR 0 4
18734: PUSH
18735: LD_VAR 0 2
18739: PUSH
18740: FOR_IN
18741: IFFALSE 18829
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18743: LD_VAR 0 4
18747: PUSH
18748: LD_INT 1
18750: ARRAY
18751: PPUSH
18752: LD_VAR 0 4
18756: PUSH
18757: LD_INT 2
18759: ARRAY
18760: PPUSH
18761: CALL_OW 458
18765: NOT
18766: IFFALSE 18770
// continue ;
18768: GO 18740
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18770: LD_VAR 0 4
18774: PUSH
18775: LD_INT 1
18777: ARRAY
18778: PPUSH
18779: LD_VAR 0 4
18783: PUSH
18784: LD_INT 2
18786: ARRAY
18787: PPUSH
18788: CALL_OW 428
18792: PUSH
18793: LD_VAR 0 5
18797: IN
18798: IFFALSE 18827
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18800: LD_VAR 0 4
18804: PUSH
18805: LD_INT 1
18807: ARRAY
18808: PPUSH
18809: LD_VAR 0 4
18813: PUSH
18814: LD_INT 2
18816: ARRAY
18817: PPUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 456
// end ;
18827: GO 18740
18829: POP
18830: POP
// end ;
18831: LD_VAR 0 3
18835: RET
// export function Count ( array ) ; var i ; begin
18836: LD_INT 0
18838: PPUSH
18839: PPUSH
// result := 0 ;
18840: LD_ADDR_VAR 0 2
18844: PUSH
18845: LD_INT 0
18847: ST_TO_ADDR
// for i in array do
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_VAR 0 1
18857: PUSH
18858: FOR_IN
18859: IFFALSE 18883
// if i then
18861: LD_VAR 0 3
18865: IFFALSE 18881
// result := result + 1 ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_VAR 0 2
18876: PUSH
18877: LD_INT 1
18879: PLUS
18880: ST_TO_ADDR
18881: GO 18858
18883: POP
18884: POP
// end ;
18885: LD_VAR 0 2
18889: RET
// export function IsEmpty ( building ) ; begin
18890: LD_INT 0
18892: PPUSH
// if not building then
18893: LD_VAR 0 1
18897: NOT
18898: IFFALSE 18902
// exit ;
18900: GO 18945
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 22
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 255
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 58
18931: PUSH
18932: EMPTY
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 69
18943: IN
18944: ST_TO_ADDR
// end ;
18945: LD_VAR 0 2
18949: RET
// export function IsNotFull ( building ) ; begin
18950: LD_INT 0
18952: PPUSH
// if not building then
18953: LD_VAR 0 1
18957: NOT
18958: IFFALSE 18962
// exit ;
18960: GO 18981
// result := UnitsInside ( building ) < 6 ;
18962: LD_ADDR_VAR 0 2
18966: PUSH
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 313
18976: PUSH
18977: LD_INT 6
18979: LESS
18980: ST_TO_ADDR
// end ;
18981: LD_VAR 0 2
18985: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18986: LD_INT 0
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
// tmp := [ ] ;
18992: LD_ADDR_VAR 0 3
18996: PUSH
18997: EMPTY
18998: ST_TO_ADDR
// list := [ ] ;
18999: LD_ADDR_VAR 0 5
19003: PUSH
19004: EMPTY
19005: ST_TO_ADDR
// for i = 16 to 25 do
19006: LD_ADDR_VAR 0 4
19010: PUSH
19011: DOUBLE
19012: LD_INT 16
19014: DEC
19015: ST_TO_ADDR
19016: LD_INT 25
19018: PUSH
19019: FOR_TO
19020: IFFALSE 19093
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19022: LD_ADDR_VAR 0 3
19026: PUSH
19027: LD_VAR 0 3
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_VAR 0 1
19039: PPUSH
19040: CALL_OW 255
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 91
19051: PUSH
19052: LD_VAR 0 1
19056: PUSH
19057: LD_INT 6
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 30
19067: PUSH
19068: LD_VAR 0 4
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: ADD
19090: ST_TO_ADDR
19091: GO 19019
19093: POP
19094: POP
// for i = 1 to tmp do
19095: LD_ADDR_VAR 0 4
19099: PUSH
19100: DOUBLE
19101: LD_INT 1
19103: DEC
19104: ST_TO_ADDR
19105: LD_VAR 0 3
19109: PUSH
19110: FOR_TO
19111: IFFALSE 19199
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19113: LD_ADDR_VAR 0 5
19117: PUSH
19118: LD_VAR 0 5
19122: PUSH
19123: LD_VAR 0 3
19127: PUSH
19128: LD_VAR 0 4
19132: ARRAY
19133: PPUSH
19134: CALL_OW 266
19138: PUSH
19139: LD_VAR 0 3
19143: PUSH
19144: LD_VAR 0 4
19148: ARRAY
19149: PPUSH
19150: CALL_OW 250
19154: PUSH
19155: LD_VAR 0 3
19159: PUSH
19160: LD_VAR 0 4
19164: ARRAY
19165: PPUSH
19166: CALL_OW 251
19170: PUSH
19171: LD_VAR 0 3
19175: PUSH
19176: LD_VAR 0 4
19180: ARRAY
19181: PPUSH
19182: CALL_OW 254
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: PUSH
19193: EMPTY
19194: LIST
19195: ADD
19196: ST_TO_ADDR
19197: GO 19110
19199: POP
19200: POP
// result := list ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_VAR 0 5
19210: ST_TO_ADDR
// end ;
19211: LD_VAR 0 2
19215: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
19220: PPUSH
19221: PPUSH
19222: PPUSH
19223: PPUSH
19224: PPUSH
// if not factory then
19225: LD_VAR 0 1
19229: NOT
19230: IFFALSE 19234
// exit ;
19232: GO 19827
// if control = control_apeman then
19234: LD_VAR 0 4
19238: PUSH
19239: LD_INT 5
19241: EQUAL
19242: IFFALSE 19351
// begin tmp := UnitsInside ( factory ) ;
19244: LD_ADDR_VAR 0 8
19248: PUSH
19249: LD_VAR 0 1
19253: PPUSH
19254: CALL_OW 313
19258: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19259: LD_VAR 0 8
19263: PPUSH
19264: LD_INT 25
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 72
19278: NOT
19279: IFFALSE 19289
// control := control_manual ;
19281: LD_ADDR_VAR 0 4
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19289: LD_ADDR_VAR 0 8
19293: PUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL 18986 0 1
19303: ST_TO_ADDR
// if tmp then
19304: LD_VAR 0 8
19308: IFFALSE 19351
// begin for i in tmp do
19310: LD_ADDR_VAR 0 7
19314: PUSH
19315: LD_VAR 0 8
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19349
// if i [ 1 ] = b_ext_radio then
19323: LD_VAR 0 7
19327: PUSH
19328: LD_INT 1
19330: ARRAY
19331: PUSH
19332: LD_INT 22
19334: EQUAL
19335: IFFALSE 19347
// begin control := control_remote ;
19337: LD_ADDR_VAR 0 4
19341: PUSH
19342: LD_INT 2
19344: ST_TO_ADDR
// break ;
19345: GO 19349
// end ;
19347: GO 19320
19349: POP
19350: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_VAR 0 2
19360: PPUSH
19361: LD_VAR 0 3
19365: PPUSH
19366: LD_VAR 0 4
19370: PPUSH
19371: LD_VAR 0 5
19375: PPUSH
19376: CALL_OW 448
19380: IFFALSE 19415
// begin result := [ chassis , engine , control , weapon ] ;
19382: LD_ADDR_VAR 0 6
19386: PUSH
19387: LD_VAR 0 2
19391: PUSH
19392: LD_VAR 0 3
19396: PUSH
19397: LD_VAR 0 4
19401: PUSH
19402: LD_VAR 0 5
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: ST_TO_ADDR
// exit ;
19413: GO 19827
// end ; _chassis := AvailableChassisList ( factory ) ;
19415: LD_ADDR_VAR 0 9
19419: PUSH
19420: LD_VAR 0 1
19424: PPUSH
19425: CALL_OW 475
19429: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19430: LD_ADDR_VAR 0 11
19434: PUSH
19435: LD_VAR 0 1
19439: PPUSH
19440: CALL_OW 476
19444: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19445: LD_ADDR_VAR 0 12
19449: PUSH
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 477
19459: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19460: LD_ADDR_VAR 0 10
19464: PUSH
19465: LD_VAR 0 1
19469: PPUSH
19470: CALL_OW 478
19474: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19475: LD_VAR 0 9
19479: NOT
19480: PUSH
19481: LD_VAR 0 11
19485: NOT
19486: OR
19487: PUSH
19488: LD_VAR 0 12
19492: NOT
19493: OR
19494: PUSH
19495: LD_VAR 0 10
19499: NOT
19500: OR
19501: IFFALSE 19536
// begin result := [ chassis , engine , control , weapon ] ;
19503: LD_ADDR_VAR 0 6
19507: PUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_VAR 0 3
19517: PUSH
19518: LD_VAR 0 4
19522: PUSH
19523: LD_VAR 0 5
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
// exit ;
19534: GO 19827
// end ; if not chassis in _chassis then
19536: LD_VAR 0 2
19540: PUSH
19541: LD_VAR 0 9
19545: IN
19546: NOT
19547: IFFALSE 19573
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19549: LD_ADDR_VAR 0 2
19553: PUSH
19554: LD_VAR 0 9
19558: PUSH
19559: LD_INT 1
19561: PPUSH
19562: LD_VAR 0 9
19566: PPUSH
19567: CALL_OW 12
19571: ARRAY
19572: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19573: LD_VAR 0 2
19577: PPUSH
19578: LD_VAR 0 3
19582: PPUSH
19583: CALL 19832 0 2
19587: NOT
19588: IFFALSE 19647
// repeat engine := _engine [ 1 ] ;
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_VAR 0 11
19599: PUSH
19600: LD_INT 1
19602: ARRAY
19603: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19604: LD_ADDR_VAR 0 11
19608: PUSH
19609: LD_VAR 0 11
19613: PPUSH
19614: LD_INT 1
19616: PPUSH
19617: CALL_OW 3
19621: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19622: LD_VAR 0 2
19626: PPUSH
19627: LD_VAR 0 3
19631: PPUSH
19632: CALL 19832 0 2
19636: PUSH
19637: LD_VAR 0 11
19641: PUSH
19642: EMPTY
19643: EQUAL
19644: OR
19645: IFFALSE 19590
// if not control in _control then
19647: LD_VAR 0 4
19651: PUSH
19652: LD_VAR 0 12
19656: IN
19657: NOT
19658: IFFALSE 19684
// control := _control [ rand ( 1 , _control ) ] ;
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: LD_VAR 0 12
19669: PUSH
19670: LD_INT 1
19672: PPUSH
19673: LD_VAR 0 12
19677: PPUSH
19678: CALL_OW 12
19682: ARRAY
19683: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19684: LD_VAR 0 2
19688: PPUSH
19689: LD_VAR 0 5
19693: PPUSH
19694: CALL 20052 0 2
19698: NOT
19699: IFFALSE 19758
// repeat weapon := _weapon [ 1 ] ;
19701: LD_ADDR_VAR 0 5
19705: PUSH
19706: LD_VAR 0 10
19710: PUSH
19711: LD_INT 1
19713: ARRAY
19714: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19715: LD_ADDR_VAR 0 10
19719: PUSH
19720: LD_VAR 0 10
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL_OW 3
19732: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19733: LD_VAR 0 2
19737: PPUSH
19738: LD_VAR 0 5
19742: PPUSH
19743: CALL 20052 0 2
19747: PUSH
19748: LD_VAR 0 10
19752: PUSH
19753: EMPTY
19754: EQUAL
19755: OR
19756: IFFALSE 19701
// result := [ ] ;
19758: LD_ADDR_VAR 0 6
19762: PUSH
19763: EMPTY
19764: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19765: LD_VAR 0 1
19769: PPUSH
19770: LD_VAR 0 2
19774: PPUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: LD_VAR 0 4
19784: PPUSH
19785: LD_VAR 0 5
19789: PPUSH
19790: CALL_OW 448
19794: IFFALSE 19827
// result := [ chassis , engine , control , weapon ] ;
19796: LD_ADDR_VAR 0 6
19800: PUSH
19801: LD_VAR 0 2
19805: PUSH
19806: LD_VAR 0 3
19810: PUSH
19811: LD_VAR 0 4
19815: PUSH
19816: LD_VAR 0 5
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: ST_TO_ADDR
// end ;
19827: LD_VAR 0 6
19831: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19832: LD_INT 0
19834: PPUSH
// if not chassis or not engine then
19835: LD_VAR 0 1
19839: NOT
19840: PUSH
19841: LD_VAR 0 2
19845: NOT
19846: OR
19847: IFFALSE 19851
// exit ;
19849: GO 20047
// case engine of engine_solar :
19851: LD_VAR 0 2
19855: PUSH
19856: LD_INT 2
19858: DOUBLE
19859: EQUAL
19860: IFTRUE 19864
19862: GO 19902
19864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19865: LD_ADDR_VAR 0 3
19869: PUSH
19870: LD_INT 11
19872: PUSH
19873: LD_INT 12
19875: PUSH
19876: LD_INT 13
19878: PUSH
19879: LD_INT 14
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: LD_INT 3
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: ST_TO_ADDR
19900: GO 20031
19902: LD_INT 1
19904: DOUBLE
19905: EQUAL
19906: IFTRUE 19910
19908: GO 19972
19910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19911: LD_ADDR_VAR 0 3
19915: PUSH
19916: LD_INT 11
19918: PUSH
19919: LD_INT 12
19921: PUSH
19922: LD_INT 13
19924: PUSH
19925: LD_INT 14
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 3
19936: PUSH
19937: LD_INT 4
19939: PUSH
19940: LD_INT 5
19942: PUSH
19943: LD_INT 21
19945: PUSH
19946: LD_INT 23
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_INT 24
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: ST_TO_ADDR
19970: GO 20031
19972: LD_INT 3
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 20030
19980: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19981: LD_ADDR_VAR 0 3
19985: PUSH
19986: LD_INT 13
19988: PUSH
19989: LD_INT 14
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: LD_INT 4
20000: PUSH
20001: LD_INT 5
20003: PUSH
20004: LD_INT 21
20006: PUSH
20007: LD_INT 22
20009: PUSH
20010: LD_INT 23
20012: PUSH
20013: LD_INT 24
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ST_TO_ADDR
20028: GO 20031
20030: POP
// result := ( chassis in result ) ;
20031: LD_ADDR_VAR 0 3
20035: PUSH
20036: LD_VAR 0 1
20040: PUSH
20041: LD_VAR 0 3
20045: IN
20046: ST_TO_ADDR
// end ;
20047: LD_VAR 0 3
20051: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20052: LD_INT 0
20054: PPUSH
// if not chassis or not weapon then
20055: LD_VAR 0 1
20059: NOT
20060: PUSH
20061: LD_VAR 0 2
20065: NOT
20066: OR
20067: IFFALSE 20071
// exit ;
20069: GO 21133
// case weapon of us_machine_gun :
20071: LD_VAR 0 2
20075: PUSH
20076: LD_INT 2
20078: DOUBLE
20079: EQUAL
20080: IFTRUE 20084
20082: GO 20114
20084: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: LD_INT 3
20098: PUSH
20099: LD_INT 4
20101: PUSH
20102: LD_INT 5
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
20112: GO 21117
20114: LD_INT 3
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20152
20122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20123: LD_ADDR_VAR 0 3
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: LD_INT 4
20139: PUSH
20140: LD_INT 5
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: ST_TO_ADDR
20150: GO 21117
20152: LD_INT 11
20154: DOUBLE
20155: EQUAL
20156: IFTRUE 20160
20158: GO 20190
20160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20161: LD_ADDR_VAR 0 3
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 3
20174: PUSH
20175: LD_INT 4
20177: PUSH
20178: LD_INT 5
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: ST_TO_ADDR
20188: GO 21117
20190: LD_INT 4
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20224
20198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: LD_INT 4
20212: PUSH
20213: LD_INT 5
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
20222: GO 21117
20224: LD_INT 5
20226: DOUBLE
20227: EQUAL
20228: IFTRUE 20232
20230: GO 20258
20232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20233: LD_ADDR_VAR 0 3
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: LD_INT 4
20246: PUSH
20247: LD_INT 5
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
20256: GO 21117
20258: LD_INT 9
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20292
20266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: LD_INT 3
20277: PUSH
20278: LD_INT 4
20280: PUSH
20281: LD_INT 5
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: ST_TO_ADDR
20290: GO 21117
20292: LD_INT 7
20294: DOUBLE
20295: EQUAL
20296: IFTRUE 20300
20298: GO 20326
20300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20301: LD_ADDR_VAR 0 3
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 3
20311: PUSH
20312: LD_INT 4
20314: PUSH
20315: LD_INT 5
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: ST_TO_ADDR
20324: GO 21117
20326: LD_INT 12
20328: DOUBLE
20329: EQUAL
20330: IFTRUE 20334
20332: GO 20360
20334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20335: LD_ADDR_VAR 0 3
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: LD_INT 3
20345: PUSH
20346: LD_INT 4
20348: PUSH
20349: LD_INT 5
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: ST_TO_ADDR
20358: GO 21117
20360: LD_INT 13
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20394
20368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20369: LD_ADDR_VAR 0 3
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 3
20379: PUSH
20380: LD_INT 4
20382: PUSH
20383: LD_INT 5
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: ST_TO_ADDR
20392: GO 21117
20394: LD_INT 14
20396: DOUBLE
20397: EQUAL
20398: IFTRUE 20402
20400: GO 20420
20402: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20403: LD_ADDR_VAR 0 3
20407: PUSH
20408: LD_INT 4
20410: PUSH
20411: LD_INT 5
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: ST_TO_ADDR
20418: GO 21117
20420: LD_INT 6
20422: DOUBLE
20423: EQUAL
20424: IFTRUE 20428
20426: GO 20446
20428: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20429: LD_ADDR_VAR 0 3
20433: PUSH
20434: LD_INT 4
20436: PUSH
20437: LD_INT 5
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: ST_TO_ADDR
20444: GO 21117
20446: LD_INT 10
20448: DOUBLE
20449: EQUAL
20450: IFTRUE 20454
20452: GO 20472
20454: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20455: LD_ADDR_VAR 0 3
20459: PUSH
20460: LD_INT 4
20462: PUSH
20463: LD_INT 5
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 21117
20472: LD_INT 22
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20506
20480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_INT 11
20488: PUSH
20489: LD_INT 12
20491: PUSH
20492: LD_INT 13
20494: PUSH
20495: LD_INT 14
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: ST_TO_ADDR
20504: GO 21117
20506: LD_INT 23
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20540
20514: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20515: LD_ADDR_VAR 0 3
20519: PUSH
20520: LD_INT 11
20522: PUSH
20523: LD_INT 12
20525: PUSH
20526: LD_INT 13
20528: PUSH
20529: LD_INT 14
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
20538: GO 21117
20540: LD_INT 24
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20574
20548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20549: LD_ADDR_VAR 0 3
20553: PUSH
20554: LD_INT 11
20556: PUSH
20557: LD_INT 12
20559: PUSH
20560: LD_INT 13
20562: PUSH
20563: LD_INT 14
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: ST_TO_ADDR
20572: GO 21117
20574: LD_INT 30
20576: DOUBLE
20577: EQUAL
20578: IFTRUE 20582
20580: GO 20608
20582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20583: LD_ADDR_VAR 0 3
20587: PUSH
20588: LD_INT 11
20590: PUSH
20591: LD_INT 12
20593: PUSH
20594: LD_INT 13
20596: PUSH
20597: LD_INT 14
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: ST_TO_ADDR
20606: GO 21117
20608: LD_INT 25
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20634
20616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20617: LD_ADDR_VAR 0 3
20621: PUSH
20622: LD_INT 13
20624: PUSH
20625: LD_INT 14
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: ST_TO_ADDR
20632: GO 21117
20634: LD_INT 27
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20660
20642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20643: LD_ADDR_VAR 0 3
20647: PUSH
20648: LD_INT 13
20650: PUSH
20651: LD_INT 14
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: ST_TO_ADDR
20658: GO 21117
20660: LD_EXP 112
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20696
20670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20671: LD_ADDR_VAR 0 3
20675: PUSH
20676: LD_INT 11
20678: PUSH
20679: LD_INT 12
20681: PUSH
20682: LD_INT 13
20684: PUSH
20685: LD_INT 14
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: ST_TO_ADDR
20694: GO 21117
20696: LD_INT 28
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20722
20704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20705: LD_ADDR_VAR 0 3
20709: PUSH
20710: LD_INT 13
20712: PUSH
20713: LD_INT 14
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: ST_TO_ADDR
20720: GO 21117
20722: LD_INT 29
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20748
20730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20731: LD_ADDR_VAR 0 3
20735: PUSH
20736: LD_INT 13
20738: PUSH
20739: LD_INT 14
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: ST_TO_ADDR
20746: GO 21117
20748: LD_INT 31
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20774
20756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20757: LD_ADDR_VAR 0 3
20761: PUSH
20762: LD_INT 13
20764: PUSH
20765: LD_INT 14
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: ST_TO_ADDR
20772: GO 21117
20774: LD_INT 26
20776: DOUBLE
20777: EQUAL
20778: IFTRUE 20782
20780: GO 20800
20782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20783: LD_ADDR_VAR 0 3
20787: PUSH
20788: LD_INT 13
20790: PUSH
20791: LD_INT 14
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: ST_TO_ADDR
20798: GO 21117
20800: LD_INT 42
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 20834
20808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20809: LD_ADDR_VAR 0 3
20813: PUSH
20814: LD_INT 21
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_INT 23
20822: PUSH
20823: LD_INT 24
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: ST_TO_ADDR
20832: GO 21117
20834: LD_INT 43
20836: DOUBLE
20837: EQUAL
20838: IFTRUE 20842
20840: GO 20868
20842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20843: LD_ADDR_VAR 0 3
20847: PUSH
20848: LD_INT 21
20850: PUSH
20851: LD_INT 22
20853: PUSH
20854: LD_INT 23
20856: PUSH
20857: LD_INT 24
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: ST_TO_ADDR
20866: GO 21117
20868: LD_INT 44
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 20902
20876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20877: LD_ADDR_VAR 0 3
20881: PUSH
20882: LD_INT 21
20884: PUSH
20885: LD_INT 22
20887: PUSH
20888: LD_INT 23
20890: PUSH
20891: LD_INT 24
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: ST_TO_ADDR
20900: GO 21117
20902: LD_INT 45
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20936
20910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20911: LD_ADDR_VAR 0 3
20915: PUSH
20916: LD_INT 21
20918: PUSH
20919: LD_INT 22
20921: PUSH
20922: LD_INT 23
20924: PUSH
20925: LD_INT 24
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: ST_TO_ADDR
20934: GO 21117
20936: LD_INT 49
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20970
20944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_INT 21
20952: PUSH
20953: LD_INT 22
20955: PUSH
20956: LD_INT 23
20958: PUSH
20959: LD_INT 24
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: ST_TO_ADDR
20968: GO 21117
20970: LD_INT 51
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 21004
20978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20979: LD_ADDR_VAR 0 3
20983: PUSH
20984: LD_INT 21
20986: PUSH
20987: LD_INT 22
20989: PUSH
20990: LD_INT 23
20992: PUSH
20993: LD_INT 24
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: ST_TO_ADDR
21002: GO 21117
21004: LD_INT 52
21006: DOUBLE
21007: EQUAL
21008: IFTRUE 21012
21010: GO 21038
21012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21013: LD_ADDR_VAR 0 3
21017: PUSH
21018: LD_INT 21
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_INT 23
21026: PUSH
21027: LD_INT 24
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: ST_TO_ADDR
21036: GO 21117
21038: LD_INT 53
21040: DOUBLE
21041: EQUAL
21042: IFTRUE 21046
21044: GO 21064
21046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21047: LD_ADDR_VAR 0 3
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 24
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: ST_TO_ADDR
21062: GO 21117
21064: LD_INT 46
21066: DOUBLE
21067: EQUAL
21068: IFTRUE 21072
21070: GO 21090
21072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 23
21080: PUSH
21081: LD_INT 24
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: ST_TO_ADDR
21088: GO 21117
21090: LD_INT 47
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21116
21098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21099: LD_ADDR_VAR 0 3
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 24
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: ST_TO_ADDR
21114: GO 21117
21116: POP
// result := ( chassis in result ) ;
21117: LD_ADDR_VAR 0 3
21121: PUSH
21122: LD_VAR 0 1
21126: PUSH
21127: LD_VAR 0 3
21131: IN
21132: ST_TO_ADDR
// end ;
21133: LD_VAR 0 3
21137: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21138: LD_INT 0
21140: PPUSH
21141: PPUSH
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
21146: PPUSH
// result := array ;
21147: LD_ADDR_VAR 0 5
21151: PUSH
21152: LD_VAR 0 1
21156: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21157: LD_VAR 0 1
21161: NOT
21162: PUSH
21163: LD_VAR 0 2
21167: NOT
21168: OR
21169: PUSH
21170: LD_VAR 0 3
21174: NOT
21175: OR
21176: PUSH
21177: LD_VAR 0 2
21181: PUSH
21182: LD_VAR 0 1
21186: GREATER
21187: OR
21188: PUSH
21189: LD_VAR 0 3
21193: PUSH
21194: LD_VAR 0 1
21198: GREATER
21199: OR
21200: IFFALSE 21204
// exit ;
21202: GO 21500
// if direction then
21204: LD_VAR 0 4
21208: IFFALSE 21272
// begin d := 1 ;
21210: LD_ADDR_VAR 0 9
21214: PUSH
21215: LD_INT 1
21217: ST_TO_ADDR
// if i_from > i_to then
21218: LD_VAR 0 2
21222: PUSH
21223: LD_VAR 0 3
21227: GREATER
21228: IFFALSE 21254
// length := ( array - i_from ) + i_to else
21230: LD_ADDR_VAR 0 11
21234: PUSH
21235: LD_VAR 0 1
21239: PUSH
21240: LD_VAR 0 2
21244: MINUS
21245: PUSH
21246: LD_VAR 0 3
21250: PLUS
21251: ST_TO_ADDR
21252: GO 21270
// length := i_to - i_from ;
21254: LD_ADDR_VAR 0 11
21258: PUSH
21259: LD_VAR 0 3
21263: PUSH
21264: LD_VAR 0 2
21268: MINUS
21269: ST_TO_ADDR
// end else
21270: GO 21333
// begin d := - 1 ;
21272: LD_ADDR_VAR 0 9
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: ST_TO_ADDR
// if i_from > i_to then
21281: LD_VAR 0 2
21285: PUSH
21286: LD_VAR 0 3
21290: GREATER
21291: IFFALSE 21311
// length := i_from - i_to else
21293: LD_ADDR_VAR 0 11
21297: PUSH
21298: LD_VAR 0 2
21302: PUSH
21303: LD_VAR 0 3
21307: MINUS
21308: ST_TO_ADDR
21309: GO 21333
// length := ( array - i_to ) + i_from ;
21311: LD_ADDR_VAR 0 11
21315: PUSH
21316: LD_VAR 0 1
21320: PUSH
21321: LD_VAR 0 3
21325: MINUS
21326: PUSH
21327: LD_VAR 0 2
21331: PLUS
21332: ST_TO_ADDR
// end ; if not length then
21333: LD_VAR 0 11
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21500
// tmp := array ;
21342: LD_ADDR_VAR 0 10
21346: PUSH
21347: LD_VAR 0 1
21351: ST_TO_ADDR
// for i = 1 to length do
21352: LD_ADDR_VAR 0 6
21356: PUSH
21357: DOUBLE
21358: LD_INT 1
21360: DEC
21361: ST_TO_ADDR
21362: LD_VAR 0 11
21366: PUSH
21367: FOR_TO
21368: IFFALSE 21488
// begin for j = 1 to array do
21370: LD_ADDR_VAR 0 7
21374: PUSH
21375: DOUBLE
21376: LD_INT 1
21378: DEC
21379: ST_TO_ADDR
21380: LD_VAR 0 1
21384: PUSH
21385: FOR_TO
21386: IFFALSE 21474
// begin k := j + d ;
21388: LD_ADDR_VAR 0 8
21392: PUSH
21393: LD_VAR 0 7
21397: PUSH
21398: LD_VAR 0 9
21402: PLUS
21403: ST_TO_ADDR
// if k > array then
21404: LD_VAR 0 8
21408: PUSH
21409: LD_VAR 0 1
21413: GREATER
21414: IFFALSE 21424
// k := 1 ;
21416: LD_ADDR_VAR 0 8
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if not k then
21424: LD_VAR 0 8
21428: NOT
21429: IFFALSE 21441
// k := array ;
21431: LD_ADDR_VAR 0 8
21435: PUSH
21436: LD_VAR 0 1
21440: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21441: LD_ADDR_VAR 0 10
21445: PUSH
21446: LD_VAR 0 10
21450: PPUSH
21451: LD_VAR 0 8
21455: PPUSH
21456: LD_VAR 0 1
21460: PUSH
21461: LD_VAR 0 7
21465: ARRAY
21466: PPUSH
21467: CALL_OW 1
21471: ST_TO_ADDR
// end ;
21472: GO 21385
21474: POP
21475: POP
// array := tmp ;
21476: LD_ADDR_VAR 0 1
21480: PUSH
21481: LD_VAR 0 10
21485: ST_TO_ADDR
// end ;
21486: GO 21367
21488: POP
21489: POP
// result := array ;
21490: LD_ADDR_VAR 0 5
21494: PUSH
21495: LD_VAR 0 1
21499: ST_TO_ADDR
// end ;
21500: LD_VAR 0 5
21504: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21505: LD_INT 0
21507: PPUSH
21508: PPUSH
// result := 0 ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// if not array or not value in array then
21517: LD_VAR 0 1
21521: NOT
21522: PUSH
21523: LD_VAR 0 2
21527: PUSH
21528: LD_VAR 0 1
21532: IN
21533: NOT
21534: OR
21535: IFFALSE 21539
// exit ;
21537: GO 21593
// for i = 1 to array do
21539: LD_ADDR_VAR 0 4
21543: PUSH
21544: DOUBLE
21545: LD_INT 1
21547: DEC
21548: ST_TO_ADDR
21549: LD_VAR 0 1
21553: PUSH
21554: FOR_TO
21555: IFFALSE 21591
// if value = array [ i ] then
21557: LD_VAR 0 2
21561: PUSH
21562: LD_VAR 0 1
21566: PUSH
21567: LD_VAR 0 4
21571: ARRAY
21572: EQUAL
21573: IFFALSE 21589
// begin result := i ;
21575: LD_ADDR_VAR 0 3
21579: PUSH
21580: LD_VAR 0 4
21584: ST_TO_ADDR
// exit ;
21585: POP
21586: POP
21587: GO 21593
// end ;
21589: GO 21554
21591: POP
21592: POP
// end ;
21593: LD_VAR 0 3
21597: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21598: LD_INT 0
21600: PPUSH
// vc_chassis := chassis ;
21601: LD_ADDR_OWVAR 37
21605: PUSH
21606: LD_VAR 0 1
21610: ST_TO_ADDR
// vc_engine := engine ;
21611: LD_ADDR_OWVAR 39
21615: PUSH
21616: LD_VAR 0 2
21620: ST_TO_ADDR
// vc_control := control ;
21621: LD_ADDR_OWVAR 38
21625: PUSH
21626: LD_VAR 0 3
21630: ST_TO_ADDR
// vc_weapon := weapon ;
21631: LD_ADDR_OWVAR 40
21635: PUSH
21636: LD_VAR 0 4
21640: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21641: LD_ADDR_OWVAR 41
21645: PUSH
21646: LD_VAR 0 5
21650: ST_TO_ADDR
// end ;
21651: LD_VAR 0 6
21655: RET
// export function WantPlant ( unit ) ; var task ; begin
21656: LD_INT 0
21658: PPUSH
21659: PPUSH
// result := false ;
21660: LD_ADDR_VAR 0 2
21664: PUSH
21665: LD_INT 0
21667: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21668: LD_ADDR_VAR 0 3
21672: PUSH
21673: LD_VAR 0 1
21677: PPUSH
21678: CALL_OW 437
21682: ST_TO_ADDR
// if task then
21683: LD_VAR 0 3
21687: IFFALSE 21715
// if task [ 1 ] [ 1 ] = p then
21689: LD_VAR 0 3
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: PUSH
21698: LD_INT 1
21700: ARRAY
21701: PUSH
21702: LD_STRING p
21704: EQUAL
21705: IFFALSE 21715
// result := true ;
21707: LD_ADDR_VAR 0 2
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// end ;
21715: LD_VAR 0 2
21719: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21720: LD_INT 0
21722: PPUSH
21723: PPUSH
21724: PPUSH
21725: PPUSH
// if pos < 1 then
21726: LD_VAR 0 2
21730: PUSH
21731: LD_INT 1
21733: LESS
21734: IFFALSE 21738
// exit ;
21736: GO 22041
// if pos = 1 then
21738: LD_VAR 0 2
21742: PUSH
21743: LD_INT 1
21745: EQUAL
21746: IFFALSE 21779
// result := Replace ( arr , pos [ 1 ] , value ) else
21748: LD_ADDR_VAR 0 4
21752: PUSH
21753: LD_VAR 0 1
21757: PPUSH
21758: LD_VAR 0 2
21762: PUSH
21763: LD_INT 1
21765: ARRAY
21766: PPUSH
21767: LD_VAR 0 3
21771: PPUSH
21772: CALL_OW 1
21776: ST_TO_ADDR
21777: GO 22041
// begin tmp := arr ;
21779: LD_ADDR_VAR 0 6
21783: PUSH
21784: LD_VAR 0 1
21788: ST_TO_ADDR
// s_arr := [ tmp ] ;
21789: LD_ADDR_VAR 0 7
21793: PUSH
21794: LD_VAR 0 6
21798: PUSH
21799: EMPTY
21800: LIST
21801: ST_TO_ADDR
// for i = 1 to pos - 1 do
21802: LD_ADDR_VAR 0 5
21806: PUSH
21807: DOUBLE
21808: LD_INT 1
21810: DEC
21811: ST_TO_ADDR
21812: LD_VAR 0 2
21816: PUSH
21817: LD_INT 1
21819: MINUS
21820: PUSH
21821: FOR_TO
21822: IFFALSE 21867
// begin tmp := tmp [ pos [ i ] ] ;
21824: LD_ADDR_VAR 0 6
21828: PUSH
21829: LD_VAR 0 6
21833: PUSH
21834: LD_VAR 0 2
21838: PUSH
21839: LD_VAR 0 5
21843: ARRAY
21844: ARRAY
21845: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21846: LD_ADDR_VAR 0 7
21850: PUSH
21851: LD_VAR 0 7
21855: PUSH
21856: LD_VAR 0 6
21860: PUSH
21861: EMPTY
21862: LIST
21863: ADD
21864: ST_TO_ADDR
// end ;
21865: GO 21821
21867: POP
21868: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21869: LD_ADDR_VAR 0 6
21873: PUSH
21874: LD_VAR 0 6
21878: PPUSH
21879: LD_VAR 0 2
21883: PUSH
21884: LD_VAR 0 2
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: CALL_OW 1
21899: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21900: LD_ADDR_VAR 0 7
21904: PUSH
21905: LD_VAR 0 7
21909: PPUSH
21910: LD_VAR 0 7
21914: PPUSH
21915: LD_VAR 0 6
21919: PPUSH
21920: CALL_OW 1
21924: ST_TO_ADDR
// for i = s_arr downto 2 do
21925: LD_ADDR_VAR 0 5
21929: PUSH
21930: DOUBLE
21931: LD_VAR 0 7
21935: INC
21936: ST_TO_ADDR
21937: LD_INT 2
21939: PUSH
21940: FOR_DOWNTO
21941: IFFALSE 22025
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21943: LD_ADDR_VAR 0 6
21947: PUSH
21948: LD_VAR 0 7
21952: PUSH
21953: LD_VAR 0 5
21957: PUSH
21958: LD_INT 1
21960: MINUS
21961: ARRAY
21962: PPUSH
21963: LD_VAR 0 2
21967: PUSH
21968: LD_VAR 0 5
21972: PUSH
21973: LD_INT 1
21975: MINUS
21976: ARRAY
21977: PPUSH
21978: LD_VAR 0 7
21982: PUSH
21983: LD_VAR 0 5
21987: ARRAY
21988: PPUSH
21989: CALL_OW 1
21993: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21994: LD_ADDR_VAR 0 7
21998: PUSH
21999: LD_VAR 0 7
22003: PPUSH
22004: LD_VAR 0 5
22008: PUSH
22009: LD_INT 1
22011: MINUS
22012: PPUSH
22013: LD_VAR 0 6
22017: PPUSH
22018: CALL_OW 1
22022: ST_TO_ADDR
// end ;
22023: GO 21940
22025: POP
22026: POP
// result := s_arr [ 1 ] ;
22027: LD_ADDR_VAR 0 4
22031: PUSH
22032: LD_VAR 0 7
22036: PUSH
22037: LD_INT 1
22039: ARRAY
22040: ST_TO_ADDR
// end ; end ;
22041: LD_VAR 0 4
22045: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22046: LD_INT 0
22048: PPUSH
22049: PPUSH
// if not list then
22050: LD_VAR 0 1
22054: NOT
22055: IFFALSE 22059
// exit ;
22057: GO 22150
// i := list [ pos1 ] ;
22059: LD_ADDR_VAR 0 5
22063: PUSH
22064: LD_VAR 0 1
22068: PUSH
22069: LD_VAR 0 2
22073: ARRAY
22074: ST_TO_ADDR
// if not i then
22075: LD_VAR 0 5
22079: NOT
22080: IFFALSE 22084
// exit ;
22082: GO 22150
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22084: LD_ADDR_VAR 0 1
22088: PUSH
22089: LD_VAR 0 1
22093: PPUSH
22094: LD_VAR 0 2
22098: PPUSH
22099: LD_VAR 0 1
22103: PUSH
22104: LD_VAR 0 3
22108: ARRAY
22109: PPUSH
22110: CALL_OW 1
22114: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22115: LD_ADDR_VAR 0 1
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: CALL_OW 1
22139: ST_TO_ADDR
// result := list ;
22140: LD_ADDR_VAR 0 4
22144: PUSH
22145: LD_VAR 0 1
22149: ST_TO_ADDR
// end ;
22150: LD_VAR 0 4
22154: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22155: LD_INT 0
22157: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22158: LD_ADDR_VAR 0 5
22162: PUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL_OW 250
22172: PPUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 251
22182: PPUSH
22183: LD_VAR 0 2
22187: PPUSH
22188: LD_VAR 0 3
22192: PPUSH
22193: LD_VAR 0 4
22197: PPUSH
22198: CALL 22208 0 5
22202: ST_TO_ADDR
// end ;
22203: LD_VAR 0 5
22207: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22208: LD_INT 0
22210: PPUSH
22211: PPUSH
22212: PPUSH
22213: PPUSH
// if not list then
22214: LD_VAR 0 3
22218: NOT
22219: IFFALSE 22223
// exit ;
22221: GO 22611
// result := [ ] ;
22223: LD_ADDR_VAR 0 6
22227: PUSH
22228: EMPTY
22229: ST_TO_ADDR
// for i in list do
22230: LD_ADDR_VAR 0 7
22234: PUSH
22235: LD_VAR 0 3
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22443
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22243: LD_ADDR_VAR 0 9
22247: PUSH
22248: LD_VAR 0 7
22252: PPUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_VAR 0 2
22262: PPUSH
22263: CALL_OW 297
22267: ST_TO_ADDR
// if not result then
22268: LD_VAR 0 6
22272: NOT
22273: IFFALSE 22299
// result := [ [ i , tmp ] ] else
22275: LD_ADDR_VAR 0 6
22279: PUSH
22280: LD_VAR 0 7
22284: PUSH
22285: LD_VAR 0 9
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: ST_TO_ADDR
22297: GO 22441
// begin if result [ result ] [ 2 ] < tmp then
22299: LD_VAR 0 6
22303: PUSH
22304: LD_VAR 0 6
22308: ARRAY
22309: PUSH
22310: LD_INT 2
22312: ARRAY
22313: PUSH
22314: LD_VAR 0 9
22318: LESS
22319: IFFALSE 22361
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22321: LD_ADDR_VAR 0 6
22325: PUSH
22326: LD_VAR 0 6
22330: PPUSH
22331: LD_VAR 0 6
22335: PUSH
22336: LD_INT 1
22338: PLUS
22339: PPUSH
22340: LD_VAR 0 7
22344: PUSH
22345: LD_VAR 0 9
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PPUSH
22354: CALL_OW 2
22358: ST_TO_ADDR
22359: GO 22441
// for j = 1 to result do
22361: LD_ADDR_VAR 0 8
22365: PUSH
22366: DOUBLE
22367: LD_INT 1
22369: DEC
22370: ST_TO_ADDR
22371: LD_VAR 0 6
22375: PUSH
22376: FOR_TO
22377: IFFALSE 22439
// begin if tmp < result [ j ] [ 2 ] then
22379: LD_VAR 0 9
22383: PUSH
22384: LD_VAR 0 6
22388: PUSH
22389: LD_VAR 0 8
22393: ARRAY
22394: PUSH
22395: LD_INT 2
22397: ARRAY
22398: LESS
22399: IFFALSE 22437
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22401: LD_ADDR_VAR 0 6
22405: PUSH
22406: LD_VAR 0 6
22410: PPUSH
22411: LD_VAR 0 8
22415: PPUSH
22416: LD_VAR 0 7
22420: PUSH
22421: LD_VAR 0 9
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PPUSH
22430: CALL_OW 2
22434: ST_TO_ADDR
// break ;
22435: GO 22439
// end ; end ;
22437: GO 22376
22439: POP
22440: POP
// end ; end ;
22441: GO 22240
22443: POP
22444: POP
// if result and not asc then
22445: LD_VAR 0 6
22449: PUSH
22450: LD_VAR 0 4
22454: NOT
22455: AND
22456: IFFALSE 22531
// begin tmp := result ;
22458: LD_ADDR_VAR 0 9
22462: PUSH
22463: LD_VAR 0 6
22467: ST_TO_ADDR
// for i = tmp downto 1 do
22468: LD_ADDR_VAR 0 7
22472: PUSH
22473: DOUBLE
22474: LD_VAR 0 9
22478: INC
22479: ST_TO_ADDR
22480: LD_INT 1
22482: PUSH
22483: FOR_DOWNTO
22484: IFFALSE 22529
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22486: LD_ADDR_VAR 0 6
22490: PUSH
22491: LD_VAR 0 6
22495: PPUSH
22496: LD_VAR 0 9
22500: PUSH
22501: LD_VAR 0 7
22505: MINUS
22506: PUSH
22507: LD_INT 1
22509: PLUS
22510: PPUSH
22511: LD_VAR 0 9
22515: PUSH
22516: LD_VAR 0 7
22520: ARRAY
22521: PPUSH
22522: CALL_OW 1
22526: ST_TO_ADDR
22527: GO 22483
22529: POP
22530: POP
// end ; tmp := [ ] ;
22531: LD_ADDR_VAR 0 9
22535: PUSH
22536: EMPTY
22537: ST_TO_ADDR
// if mode then
22538: LD_VAR 0 5
22542: IFFALSE 22611
// begin for i = 1 to result do
22544: LD_ADDR_VAR 0 7
22548: PUSH
22549: DOUBLE
22550: LD_INT 1
22552: DEC
22553: ST_TO_ADDR
22554: LD_VAR 0 6
22558: PUSH
22559: FOR_TO
22560: IFFALSE 22599
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22562: LD_ADDR_VAR 0 9
22566: PUSH
22567: LD_VAR 0 9
22571: PPUSH
22572: LD_VAR 0 7
22576: PPUSH
22577: LD_VAR 0 6
22581: PUSH
22582: LD_VAR 0 7
22586: ARRAY
22587: PUSH
22588: LD_INT 1
22590: ARRAY
22591: PPUSH
22592: CALL_OW 1
22596: ST_TO_ADDR
22597: GO 22559
22599: POP
22600: POP
// result := tmp ;
22601: LD_ADDR_VAR 0 6
22605: PUSH
22606: LD_VAR 0 9
22610: ST_TO_ADDR
// end ; end ;
22611: LD_VAR 0 6
22615: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22616: LD_INT 0
22618: PPUSH
22619: PPUSH
22620: PPUSH
22621: PPUSH
22622: PPUSH
22623: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22624: LD_ADDR_VAR 0 5
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: EMPTY
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: ST_TO_ADDR
// if not x or not y then
22646: LD_VAR 0 2
22650: NOT
22651: PUSH
22652: LD_VAR 0 3
22656: NOT
22657: OR
22658: IFFALSE 22662
// exit ;
22660: GO 24314
// if not range then
22662: LD_VAR 0 4
22666: NOT
22667: IFFALSE 22677
// range := 10 ;
22669: LD_ADDR_VAR 0 4
22673: PUSH
22674: LD_INT 10
22676: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22677: LD_ADDR_VAR 0 8
22681: PUSH
22682: LD_INT 81
22684: PUSH
22685: LD_VAR 0 1
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 92
22696: PUSH
22697: LD_VAR 0 2
22701: PUSH
22702: LD_VAR 0 3
22706: PUSH
22707: LD_VAR 0 4
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 3
22720: PUSH
22721: LD_INT 21
22723: PUSH
22724: LD_INT 3
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: PPUSH
22740: CALL_OW 69
22744: ST_TO_ADDR
// if not tmp then
22745: LD_VAR 0 8
22749: NOT
22750: IFFALSE 22754
// exit ;
22752: GO 24314
// for i in tmp do
22754: LD_ADDR_VAR 0 6
22758: PUSH
22759: LD_VAR 0 8
22763: PUSH
22764: FOR_IN
22765: IFFALSE 24289
// begin points := [ 0 , 0 , 0 ] ;
22767: LD_ADDR_VAR 0 9
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: ST_TO_ADDR
// bpoints := 1 ;
22786: LD_ADDR_VAR 0 10
22790: PUSH
22791: LD_INT 1
22793: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22794: LD_VAR 0 6
22798: PPUSH
22799: CALL_OW 247
22803: PUSH
22804: LD_INT 1
22806: DOUBLE
22807: EQUAL
22808: IFTRUE 22812
22810: GO 23390
22812: POP
// begin if GetClass ( i ) = 1 then
22813: LD_VAR 0 6
22817: PPUSH
22818: CALL_OW 257
22822: PUSH
22823: LD_INT 1
22825: EQUAL
22826: IFFALSE 22847
// points := [ 10 , 5 , 3 ] ;
22828: LD_ADDR_VAR 0 9
22832: PUSH
22833: LD_INT 10
22835: PUSH
22836: LD_INT 5
22838: PUSH
22839: LD_INT 3
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: LIST
22846: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22847: LD_VAR 0 6
22851: PPUSH
22852: CALL_OW 257
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: LD_INT 3
22862: PUSH
22863: LD_INT 4
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: IN
22871: IFFALSE 22892
// points := [ 3 , 2 , 1 ] ;
22873: LD_ADDR_VAR 0 9
22877: PUSH
22878: LD_INT 3
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22892: LD_VAR 0 6
22896: PPUSH
22897: CALL_OW 257
22901: PUSH
22902: LD_INT 5
22904: EQUAL
22905: IFFALSE 22926
// points := [ 130 , 5 , 2 ] ;
22907: LD_ADDR_VAR 0 9
22911: PUSH
22912: LD_INT 130
22914: PUSH
22915: LD_INT 5
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22926: LD_VAR 0 6
22930: PPUSH
22931: CALL_OW 257
22935: PUSH
22936: LD_INT 8
22938: EQUAL
22939: IFFALSE 22960
// points := [ 35 , 35 , 30 ] ;
22941: LD_ADDR_VAR 0 9
22945: PUSH
22946: LD_INT 35
22948: PUSH
22949: LD_INT 35
22951: PUSH
22952: LD_INT 30
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22960: LD_VAR 0 6
22964: PPUSH
22965: CALL_OW 257
22969: PUSH
22970: LD_INT 9
22972: EQUAL
22973: IFFALSE 22994
// points := [ 20 , 55 , 40 ] ;
22975: LD_ADDR_VAR 0 9
22979: PUSH
22980: LD_INT 20
22982: PUSH
22983: LD_INT 55
22985: PUSH
22986: LD_INT 40
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22994: LD_VAR 0 6
22998: PPUSH
22999: CALL_OW 257
23003: PUSH
23004: LD_INT 12
23006: PUSH
23007: LD_INT 16
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: IN
23014: IFFALSE 23035
// points := [ 5 , 3 , 2 ] ;
23016: LD_ADDR_VAR 0 9
23020: PUSH
23021: LD_INT 5
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23035: LD_VAR 0 6
23039: PPUSH
23040: CALL_OW 257
23044: PUSH
23045: LD_INT 17
23047: EQUAL
23048: IFFALSE 23069
// points := [ 100 , 50 , 75 ] ;
23050: LD_ADDR_VAR 0 9
23054: PUSH
23055: LD_INT 100
23057: PUSH
23058: LD_INT 50
23060: PUSH
23061: LD_INT 75
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23069: LD_VAR 0 6
23073: PPUSH
23074: CALL_OW 257
23078: PUSH
23079: LD_INT 15
23081: EQUAL
23082: IFFALSE 23103
// points := [ 10 , 5 , 3 ] ;
23084: LD_ADDR_VAR 0 9
23088: PUSH
23089: LD_INT 10
23091: PUSH
23092: LD_INT 5
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23103: LD_VAR 0 6
23107: PPUSH
23108: CALL_OW 257
23112: PUSH
23113: LD_INT 14
23115: EQUAL
23116: IFFALSE 23137
// points := [ 10 , 0 , 0 ] ;
23118: LD_ADDR_VAR 0 9
23122: PUSH
23123: LD_INT 10
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23137: LD_VAR 0 6
23141: PPUSH
23142: CALL_OW 257
23146: PUSH
23147: LD_INT 11
23149: EQUAL
23150: IFFALSE 23171
// points := [ 30 , 10 , 5 ] ;
23152: LD_ADDR_VAR 0 9
23156: PUSH
23157: LD_INT 30
23159: PUSH
23160: LD_INT 10
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_INT 5
23178: PPUSH
23179: CALL_OW 321
23183: PUSH
23184: LD_INT 2
23186: EQUAL
23187: IFFALSE 23204
// bpoints := bpoints * 1.8 ;
23189: LD_ADDR_VAR 0 10
23193: PUSH
23194: LD_VAR 0 10
23198: PUSH
23199: LD_REAL  1.80000000000000E+0000
23202: MUL
23203: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23204: LD_VAR 0 6
23208: PPUSH
23209: CALL_OW 257
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: LD_INT 4
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: IN
23232: PUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: LD_INT 51
23240: PPUSH
23241: CALL_OW 321
23245: PUSH
23246: LD_INT 2
23248: EQUAL
23249: AND
23250: IFFALSE 23267
// bpoints := bpoints * 1.2 ;
23252: LD_ADDR_VAR 0 10
23256: PUSH
23257: LD_VAR 0 10
23261: PUSH
23262: LD_REAL  1.20000000000000E+0000
23265: MUL
23266: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23267: LD_VAR 0 6
23271: PPUSH
23272: CALL_OW 257
23276: PUSH
23277: LD_INT 5
23279: PUSH
23280: LD_INT 7
23282: PUSH
23283: LD_INT 9
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: IN
23291: PUSH
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_INT 52
23299: PPUSH
23300: CALL_OW 321
23304: PUSH
23305: LD_INT 2
23307: EQUAL
23308: AND
23309: IFFALSE 23326
// bpoints := bpoints * 1.5 ;
23311: LD_ADDR_VAR 0 10
23315: PUSH
23316: LD_VAR 0 10
23320: PUSH
23321: LD_REAL  1.50000000000000E+0000
23324: MUL
23325: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23326: LD_VAR 0 1
23330: PPUSH
23331: LD_INT 66
23333: PPUSH
23334: CALL_OW 321
23338: PUSH
23339: LD_INT 2
23341: EQUAL
23342: IFFALSE 23359
// bpoints := bpoints * 1.1 ;
23344: LD_ADDR_VAR 0 10
23348: PUSH
23349: LD_VAR 0 10
23353: PUSH
23354: LD_REAL  1.10000000000000E+0000
23357: MUL
23358: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23359: LD_ADDR_VAR 0 10
23363: PUSH
23364: LD_VAR 0 10
23368: PUSH
23369: LD_VAR 0 6
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: CALL_OW 259
23381: PUSH
23382: LD_REAL  1.15000000000000E+0000
23385: MUL
23386: MUL
23387: ST_TO_ADDR
// end ; unit_vehicle :
23388: GO 24218
23390: LD_INT 2
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 24206
23398: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23399: LD_VAR 0 6
23403: PPUSH
23404: CALL_OW 264
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: LD_INT 42
23414: PUSH
23415: LD_INT 24
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: IN
23423: IFFALSE 23444
// points := [ 25 , 5 , 3 ] ;
23425: LD_ADDR_VAR 0 9
23429: PUSH
23430: LD_INT 25
23432: PUSH
23433: LD_INT 5
23435: PUSH
23436: LD_INT 3
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: LIST
23443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23444: LD_VAR 0 6
23448: PPUSH
23449: CALL_OW 264
23453: PUSH
23454: LD_INT 4
23456: PUSH
23457: LD_INT 43
23459: PUSH
23460: LD_INT 25
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: IN
23468: IFFALSE 23489
// points := [ 40 , 15 , 5 ] ;
23470: LD_ADDR_VAR 0 9
23474: PUSH
23475: LD_INT 40
23477: PUSH
23478: LD_INT 15
23480: PUSH
23481: LD_INT 5
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23489: LD_VAR 0 6
23493: PPUSH
23494: CALL_OW 264
23498: PUSH
23499: LD_INT 3
23501: PUSH
23502: LD_INT 23
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: IN
23509: IFFALSE 23530
// points := [ 7 , 25 , 8 ] ;
23511: LD_ADDR_VAR 0 9
23515: PUSH
23516: LD_INT 7
23518: PUSH
23519: LD_INT 25
23521: PUSH
23522: LD_INT 8
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23530: LD_VAR 0 6
23534: PPUSH
23535: CALL_OW 264
23539: PUSH
23540: LD_INT 5
23542: PUSH
23543: LD_INT 27
23545: PUSH
23546: LD_INT 44
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: IN
23554: IFFALSE 23575
// points := [ 14 , 50 , 16 ] ;
23556: LD_ADDR_VAR 0 9
23560: PUSH
23561: LD_INT 14
23563: PUSH
23564: LD_INT 50
23566: PUSH
23567: LD_INT 16
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23575: LD_VAR 0 6
23579: PPUSH
23580: CALL_OW 264
23584: PUSH
23585: LD_INT 6
23587: PUSH
23588: LD_INT 46
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: IN
23595: IFFALSE 23616
// points := [ 32 , 120 , 70 ] ;
23597: LD_ADDR_VAR 0 9
23601: PUSH
23602: LD_INT 32
23604: PUSH
23605: LD_INT 120
23607: PUSH
23608: LD_INT 70
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23616: LD_VAR 0 6
23620: PPUSH
23621: CALL_OW 264
23625: PUSH
23626: LD_INT 7
23628: PUSH
23629: LD_INT 28
23631: PUSH
23632: LD_INT 45
23634: PUSH
23635: LD_EXP 112
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: IN
23646: IFFALSE 23667
// points := [ 35 , 20 , 45 ] ;
23648: LD_ADDR_VAR 0 9
23652: PUSH
23653: LD_INT 35
23655: PUSH
23656: LD_INT 20
23658: PUSH
23659: LD_INT 45
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23667: LD_VAR 0 6
23671: PPUSH
23672: CALL_OW 264
23676: PUSH
23677: LD_INT 47
23679: PUSH
23680: EMPTY
23681: LIST
23682: IN
23683: IFFALSE 23704
// points := [ 67 , 45 , 75 ] ;
23685: LD_ADDR_VAR 0 9
23689: PUSH
23690: LD_INT 67
23692: PUSH
23693: LD_INT 45
23695: PUSH
23696: LD_INT 75
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23704: LD_VAR 0 6
23708: PPUSH
23709: CALL_OW 264
23713: PUSH
23714: LD_INT 26
23716: PUSH
23717: EMPTY
23718: LIST
23719: IN
23720: IFFALSE 23741
// points := [ 120 , 30 , 80 ] ;
23722: LD_ADDR_VAR 0 9
23726: PUSH
23727: LD_INT 120
23729: PUSH
23730: LD_INT 30
23732: PUSH
23733: LD_INT 80
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23741: LD_VAR 0 6
23745: PPUSH
23746: CALL_OW 264
23750: PUSH
23751: LD_INT 22
23753: PUSH
23754: EMPTY
23755: LIST
23756: IN
23757: IFFALSE 23778
// points := [ 40 , 1 , 1 ] ;
23759: LD_ADDR_VAR 0 9
23763: PUSH
23764: LD_INT 40
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23778: LD_VAR 0 6
23782: PPUSH
23783: CALL_OW 264
23787: PUSH
23788: LD_INT 29
23790: PUSH
23791: EMPTY
23792: LIST
23793: IN
23794: IFFALSE 23815
// points := [ 70 , 200 , 400 ] ;
23796: LD_ADDR_VAR 0 9
23800: PUSH
23801: LD_INT 70
23803: PUSH
23804: LD_INT 200
23806: PUSH
23807: LD_INT 400
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23815: LD_VAR 0 6
23819: PPUSH
23820: CALL_OW 264
23824: PUSH
23825: LD_INT 14
23827: PUSH
23828: LD_INT 53
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: IN
23835: IFFALSE 23856
// points := [ 40 , 10 , 20 ] ;
23837: LD_ADDR_VAR 0 9
23841: PUSH
23842: LD_INT 40
23844: PUSH
23845: LD_INT 10
23847: PUSH
23848: LD_INT 20
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23856: LD_VAR 0 6
23860: PPUSH
23861: CALL_OW 264
23865: PUSH
23866: LD_INT 9
23868: PUSH
23869: EMPTY
23870: LIST
23871: IN
23872: IFFALSE 23893
// points := [ 5 , 70 , 20 ] ;
23874: LD_ADDR_VAR 0 9
23878: PUSH
23879: LD_INT 5
23881: PUSH
23882: LD_INT 70
23884: PUSH
23885: LD_INT 20
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23893: LD_VAR 0 6
23897: PPUSH
23898: CALL_OW 264
23902: PUSH
23903: LD_INT 10
23905: PUSH
23906: EMPTY
23907: LIST
23908: IN
23909: IFFALSE 23930
// points := [ 35 , 110 , 70 ] ;
23911: LD_ADDR_VAR 0 9
23915: PUSH
23916: LD_INT 35
23918: PUSH
23919: LD_INT 110
23921: PUSH
23922: LD_INT 70
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23930: LD_VAR 0 6
23934: PPUSH
23935: CALL_OW 265
23939: PUSH
23940: LD_INT 25
23942: EQUAL
23943: IFFALSE 23964
// points := [ 80 , 65 , 100 ] ;
23945: LD_ADDR_VAR 0 9
23949: PUSH
23950: LD_INT 80
23952: PUSH
23953: LD_INT 65
23955: PUSH
23956: LD_INT 100
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23964: LD_VAR 0 6
23968: PPUSH
23969: CALL_OW 263
23973: PUSH
23974: LD_INT 1
23976: EQUAL
23977: IFFALSE 24012
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23979: LD_ADDR_VAR 0 10
23983: PUSH
23984: LD_VAR 0 10
23988: PUSH
23989: LD_VAR 0 6
23993: PPUSH
23994: CALL_OW 311
23998: PPUSH
23999: LD_INT 3
24001: PPUSH
24002: CALL_OW 259
24006: PUSH
24007: LD_INT 4
24009: MUL
24010: MUL
24011: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24012: LD_VAR 0 6
24016: PPUSH
24017: CALL_OW 263
24021: PUSH
24022: LD_INT 2
24024: EQUAL
24025: IFFALSE 24076
// begin j := IsControledBy ( i ) ;
24027: LD_ADDR_VAR 0 7
24031: PUSH
24032: LD_VAR 0 6
24036: PPUSH
24037: CALL_OW 312
24041: ST_TO_ADDR
// if j then
24042: LD_VAR 0 7
24046: IFFALSE 24076
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24048: LD_ADDR_VAR 0 10
24052: PUSH
24053: LD_VAR 0 10
24057: PUSH
24058: LD_VAR 0 7
24062: PPUSH
24063: LD_INT 3
24065: PPUSH
24066: CALL_OW 259
24070: PUSH
24071: LD_INT 3
24073: MUL
24074: MUL
24075: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24076: LD_VAR 0 6
24080: PPUSH
24081: CALL_OW 264
24085: PUSH
24086: LD_INT 5
24088: PUSH
24089: LD_INT 6
24091: PUSH
24092: LD_INT 46
24094: PUSH
24095: LD_INT 44
24097: PUSH
24098: LD_INT 47
24100: PUSH
24101: LD_INT 45
24103: PUSH
24104: LD_INT 28
24106: PUSH
24107: LD_INT 7
24109: PUSH
24110: LD_INT 27
24112: PUSH
24113: LD_INT 29
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: IN
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: LD_INT 52
24136: PPUSH
24137: CALL_OW 321
24141: PUSH
24142: LD_INT 2
24144: EQUAL
24145: AND
24146: IFFALSE 24163
// bpoints := bpoints * 1.2 ;
24148: LD_ADDR_VAR 0 10
24152: PUSH
24153: LD_VAR 0 10
24157: PUSH
24158: LD_REAL  1.20000000000000E+0000
24161: MUL
24162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24163: LD_VAR 0 6
24167: PPUSH
24168: CALL_OW 264
24172: PUSH
24173: LD_INT 6
24175: PUSH
24176: LD_INT 46
24178: PUSH
24179: LD_INT 47
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: IN
24187: IFFALSE 24204
// bpoints := bpoints * 1.2 ;
24189: LD_ADDR_VAR 0 10
24193: PUSH
24194: LD_VAR 0 10
24198: PUSH
24199: LD_REAL  1.20000000000000E+0000
24202: MUL
24203: ST_TO_ADDR
// end ; unit_building :
24204: GO 24218
24206: LD_INT 3
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24217
24214: POP
// ; end ;
24215: GO 24218
24217: POP
// for j = 1 to 3 do
24218: LD_ADDR_VAR 0 7
24222: PUSH
24223: DOUBLE
24224: LD_INT 1
24226: DEC
24227: ST_TO_ADDR
24228: LD_INT 3
24230: PUSH
24231: FOR_TO
24232: IFFALSE 24285
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 5
24243: PPUSH
24244: LD_VAR 0 7
24248: PPUSH
24249: LD_VAR 0 5
24253: PUSH
24254: LD_VAR 0 7
24258: ARRAY
24259: PUSH
24260: LD_VAR 0 9
24264: PUSH
24265: LD_VAR 0 7
24269: ARRAY
24270: PUSH
24271: LD_VAR 0 10
24275: MUL
24276: PLUS
24277: PPUSH
24278: CALL_OW 1
24282: ST_TO_ADDR
24283: GO 24231
24285: POP
24286: POP
// end ;
24287: GO 22764
24289: POP
24290: POP
// result := Replace ( result , 4 , tmp ) ;
24291: LD_ADDR_VAR 0 5
24295: PUSH
24296: LD_VAR 0 5
24300: PPUSH
24301: LD_INT 4
24303: PPUSH
24304: LD_VAR 0 8
24308: PPUSH
24309: CALL_OW 1
24313: ST_TO_ADDR
// end ;
24314: LD_VAR 0 5
24318: RET
// export function DangerAtRange ( unit , range ) ; begin
24319: LD_INT 0
24321: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24322: LD_ADDR_VAR 0 3
24326: PUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: CALL_OW 255
24336: PPUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 250
24346: PPUSH
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 251
24356: PPUSH
24357: LD_VAR 0 2
24361: PPUSH
24362: CALL 22616 0 4
24366: ST_TO_ADDR
// end ;
24367: LD_VAR 0 3
24371: RET
// export function DangerInArea ( side , area ) ; begin
24372: LD_INT 0
24374: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24375: LD_ADDR_VAR 0 3
24379: PUSH
24380: LD_VAR 0 2
24384: PPUSH
24385: LD_INT 81
24387: PUSH
24388: LD_VAR 0 1
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PPUSH
24397: CALL_OW 70
24401: ST_TO_ADDR
// end ;
24402: LD_VAR 0 3
24406: RET
// export function IsExtension ( b ) ; begin
24407: LD_INT 0
24409: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_VAR 0 1
24419: PUSH
24420: LD_INT 23
24422: PUSH
24423: LD_INT 20
24425: PUSH
24426: LD_INT 22
24428: PUSH
24429: LD_INT 17
24431: PUSH
24432: LD_INT 24
24434: PUSH
24435: LD_INT 21
24437: PUSH
24438: LD_INT 19
24440: PUSH
24441: LD_INT 16
24443: PUSH
24444: LD_INT 25
24446: PUSH
24447: LD_INT 18
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: IN
24462: ST_TO_ADDR
// end ;
24463: LD_VAR 0 2
24467: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24468: LD_INT 0
24470: PPUSH
24471: PPUSH
24472: PPUSH
// result := [ ] ;
24473: LD_ADDR_VAR 0 4
24477: PUSH
24478: EMPTY
24479: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24480: LD_ADDR_VAR 0 5
24484: PUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_INT 21
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 70
24504: ST_TO_ADDR
// if not tmp then
24505: LD_VAR 0 5
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24578
// if checkLink then
24514: LD_VAR 0 3
24518: IFFALSE 24568
// begin for i in tmp do
24520: LD_ADDR_VAR 0 6
24524: PUSH
24525: LD_VAR 0 5
24529: PUSH
24530: FOR_IN
24531: IFFALSE 24566
// if GetBase ( i ) <> base then
24533: LD_VAR 0 6
24537: PPUSH
24538: CALL_OW 274
24542: PUSH
24543: LD_VAR 0 1
24547: NONEQUAL
24548: IFFALSE 24564
// ComLinkToBase ( base , i ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: LD_VAR 0 6
24559: PPUSH
24560: CALL_OW 169
24564: GO 24530
24566: POP
24567: POP
// end ; result := tmp ;
24568: LD_ADDR_VAR 0 4
24572: PUSH
24573: LD_VAR 0 5
24577: ST_TO_ADDR
// end ;
24578: LD_VAR 0 4
24582: RET
// export function ComComplete ( units , b ) ; var i ; begin
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
// if not units then
24587: LD_VAR 0 1
24591: NOT
24592: IFFALSE 24596
// exit ;
24594: GO 24686
// for i in units do
24596: LD_ADDR_VAR 0 4
24600: PUSH
24601: LD_VAR 0 1
24605: PUSH
24606: FOR_IN
24607: IFFALSE 24684
// if BuildingStatus ( b ) = bs_build then
24609: LD_VAR 0 2
24613: PPUSH
24614: CALL_OW 461
24618: PUSH
24619: LD_INT 1
24621: EQUAL
24622: IFFALSE 24682
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24624: LD_VAR 0 4
24628: PPUSH
24629: LD_STRING h
24631: PUSH
24632: LD_VAR 0 2
24636: PPUSH
24637: CALL_OW 250
24641: PUSH
24642: LD_VAR 0 2
24646: PPUSH
24647: CALL_OW 251
24651: PUSH
24652: LD_VAR 0 2
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: PUSH
24675: EMPTY
24676: LIST
24677: PPUSH
24678: CALL_OW 446
24682: GO 24606
24684: POP
24685: POP
// end ;
24686: LD_VAR 0 3
24690: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24691: LD_INT 0
24693: PPUSH
24694: PPUSH
24695: PPUSH
24696: PPUSH
24697: PPUSH
24698: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24699: LD_VAR 0 1
24703: NOT
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 263
24714: PUSH
24715: LD_INT 2
24717: NONEQUAL
24718: OR
24719: IFFALSE 24723
// exit ;
24721: GO 25039
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24723: LD_ADDR_VAR 0 6
24727: PUSH
24728: LD_INT 22
24730: PUSH
24731: LD_VAR 0 1
24735: PPUSH
24736: CALL_OW 255
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 2
24747: PUSH
24748: LD_INT 30
24750: PUSH
24751: LD_INT 36
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 34
24760: PUSH
24761: LD_INT 31
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 69
24781: ST_TO_ADDR
// if not tmp then
24782: LD_VAR 0 6
24786: NOT
24787: IFFALSE 24791
// exit ;
24789: GO 25039
// result := [ ] ;
24791: LD_ADDR_VAR 0 2
24795: PUSH
24796: EMPTY
24797: ST_TO_ADDR
// for i in tmp do
24798: LD_ADDR_VAR 0 3
24802: PUSH
24803: LD_VAR 0 6
24807: PUSH
24808: FOR_IN
24809: IFFALSE 24880
// begin t := UnitsInside ( i ) ;
24811: LD_ADDR_VAR 0 4
24815: PUSH
24816: LD_VAR 0 3
24820: PPUSH
24821: CALL_OW 313
24825: ST_TO_ADDR
// if t then
24826: LD_VAR 0 4
24830: IFFALSE 24878
// for j in t do
24832: LD_ADDR_VAR 0 7
24836: PUSH
24837: LD_VAR 0 4
24841: PUSH
24842: FOR_IN
24843: IFFALSE 24876
// result := Replace ( result , result + 1 , j ) ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_VAR 0 2
24854: PPUSH
24855: LD_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: PLUS
24863: PPUSH
24864: LD_VAR 0 7
24868: PPUSH
24869: CALL_OW 1
24873: ST_TO_ADDR
24874: GO 24842
24876: POP
24877: POP
// end ;
24878: GO 24808
24880: POP
24881: POP
// if not result then
24882: LD_VAR 0 2
24886: NOT
24887: IFFALSE 24891
// exit ;
24889: GO 25039
// mech := result [ 1 ] ;
24891: LD_ADDR_VAR 0 5
24895: PUSH
24896: LD_VAR 0 2
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: ST_TO_ADDR
// if result > 1 then
24905: LD_VAR 0 2
24909: PUSH
24910: LD_INT 1
24912: GREATER
24913: IFFALSE 25025
// begin for i = 2 to result do
24915: LD_ADDR_VAR 0 3
24919: PUSH
24920: DOUBLE
24921: LD_INT 2
24923: DEC
24924: ST_TO_ADDR
24925: LD_VAR 0 2
24929: PUSH
24930: FOR_TO
24931: IFFALSE 25023
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24933: LD_ADDR_VAR 0 4
24937: PUSH
24938: LD_VAR 0 2
24942: PUSH
24943: LD_VAR 0 3
24947: ARRAY
24948: PPUSH
24949: LD_INT 3
24951: PPUSH
24952: CALL_OW 259
24956: PUSH
24957: LD_VAR 0 2
24961: PUSH
24962: LD_VAR 0 3
24966: ARRAY
24967: PPUSH
24968: CALL_OW 432
24972: MINUS
24973: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24974: LD_VAR 0 4
24978: PUSH
24979: LD_VAR 0 5
24983: PPUSH
24984: LD_INT 3
24986: PPUSH
24987: CALL_OW 259
24991: PUSH
24992: LD_VAR 0 5
24996: PPUSH
24997: CALL_OW 432
25001: MINUS
25002: GREATEREQUAL
25003: IFFALSE 25021
// mech := result [ i ] ;
25005: LD_ADDR_VAR 0 5
25009: PUSH
25010: LD_VAR 0 2
25014: PUSH
25015: LD_VAR 0 3
25019: ARRAY
25020: ST_TO_ADDR
// end ;
25021: GO 24930
25023: POP
25024: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25025: LD_VAR 0 1
25029: PPUSH
25030: LD_VAR 0 5
25034: PPUSH
25035: CALL_OW 135
// end ;
25039: LD_VAR 0 2
25043: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25044: LD_INT 0
25046: PPUSH
25047: PPUSH
25048: PPUSH
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
25055: PPUSH
25056: PPUSH
25057: PPUSH
25058: PPUSH
// result := [ ] ;
25059: LD_ADDR_VAR 0 7
25063: PUSH
25064: EMPTY
25065: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 266
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: IN
25086: NOT
25087: IFFALSE 25091
// exit ;
25089: GO 26725
// if name then
25091: LD_VAR 0 3
25095: IFFALSE 25111
// SetBName ( base_dep , name ) ;
25097: LD_VAR 0 1
25101: PPUSH
25102: LD_VAR 0 3
25106: PPUSH
25107: CALL_OW 500
// base := GetBase ( base_dep ) ;
25111: LD_ADDR_VAR 0 15
25115: PUSH
25116: LD_VAR 0 1
25120: PPUSH
25121: CALL_OW 274
25125: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25126: LD_ADDR_VAR 0 16
25130: PUSH
25131: LD_VAR 0 1
25135: PPUSH
25136: CALL_OW 255
25140: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25141: LD_ADDR_VAR 0 17
25145: PUSH
25146: LD_VAR 0 1
25150: PPUSH
25151: CALL_OW 248
25155: ST_TO_ADDR
// if sources then
25156: LD_VAR 0 5
25160: IFFALSE 25207
// for i = 1 to 3 do
25162: LD_ADDR_VAR 0 8
25166: PUSH
25167: DOUBLE
25168: LD_INT 1
25170: DEC
25171: ST_TO_ADDR
25172: LD_INT 3
25174: PUSH
25175: FOR_TO
25176: IFFALSE 25205
// AddResourceType ( base , i , sources [ i ] ) ;
25178: LD_VAR 0 15
25182: PPUSH
25183: LD_VAR 0 8
25187: PPUSH
25188: LD_VAR 0 5
25192: PUSH
25193: LD_VAR 0 8
25197: ARRAY
25198: PPUSH
25199: CALL_OW 276
25203: GO 25175
25205: POP
25206: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25207: LD_ADDR_VAR 0 18
25211: PUSH
25212: LD_VAR 0 15
25216: PPUSH
25217: LD_VAR 0 2
25221: PPUSH
25222: LD_INT 1
25224: PPUSH
25225: CALL 24468 0 3
25229: ST_TO_ADDR
// InitHc ;
25230: CALL_OW 19
// InitUc ;
25234: CALL_OW 18
// uc_side := side ;
25238: LD_ADDR_OWVAR 20
25242: PUSH
25243: LD_VAR 0 16
25247: ST_TO_ADDR
// uc_nation := nation ;
25248: LD_ADDR_OWVAR 21
25252: PUSH
25253: LD_VAR 0 17
25257: ST_TO_ADDR
// if buildings then
25258: LD_VAR 0 18
25262: IFFALSE 26584
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25264: LD_ADDR_VAR 0 19
25268: PUSH
25269: LD_VAR 0 18
25273: PPUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 29
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 30
25289: PUSH
25290: LD_INT 30
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: PPUSH
25302: CALL_OW 72
25306: ST_TO_ADDR
// if tmp then
25307: LD_VAR 0 19
25311: IFFALSE 25359
// for i in tmp do
25313: LD_ADDR_VAR 0 8
25317: PUSH
25318: LD_VAR 0 19
25322: PUSH
25323: FOR_IN
25324: IFFALSE 25357
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25326: LD_VAR 0 8
25330: PPUSH
25331: CALL_OW 250
25335: PPUSH
25336: LD_VAR 0 8
25340: PPUSH
25341: CALL_OW 251
25345: PPUSH
25346: LD_VAR 0 16
25350: PPUSH
25351: CALL_OW 441
25355: GO 25323
25357: POP
25358: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25359: LD_VAR 0 18
25363: PPUSH
25364: LD_INT 2
25366: PUSH
25367: LD_INT 30
25369: PUSH
25370: LD_INT 32
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 30
25379: PUSH
25380: LD_INT 33
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: PPUSH
25392: CALL_OW 72
25396: IFFALSE 25484
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25398: LD_ADDR_VAR 0 8
25402: PUSH
25403: LD_VAR 0 18
25407: PPUSH
25408: LD_INT 2
25410: PUSH
25411: LD_INT 30
25413: PUSH
25414: LD_INT 32
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 30
25423: PUSH
25424: LD_INT 33
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 72
25440: PUSH
25441: FOR_IN
25442: IFFALSE 25482
// begin if not GetBWeapon ( i ) then
25444: LD_VAR 0 8
25448: PPUSH
25449: CALL_OW 269
25453: NOT
25454: IFFALSE 25480
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25456: LD_VAR 0 8
25460: PPUSH
25461: LD_VAR 0 8
25465: PPUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: CALL 26730 0 2
25475: PPUSH
25476: CALL_OW 431
// end ;
25480: GO 25441
25482: POP
25483: POP
// end ; for i = 1 to personel do
25484: LD_ADDR_VAR 0 8
25488: PUSH
25489: DOUBLE
25490: LD_INT 1
25492: DEC
25493: ST_TO_ADDR
25494: LD_VAR 0 6
25498: PUSH
25499: FOR_TO
25500: IFFALSE 26564
// begin if i > 4 then
25502: LD_VAR 0 8
25506: PUSH
25507: LD_INT 4
25509: GREATER
25510: IFFALSE 25514
// break ;
25512: GO 26564
// case i of 1 :
25514: LD_VAR 0 8
25518: PUSH
25519: LD_INT 1
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25607
25527: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25528: LD_ADDR_VAR 0 12
25532: PUSH
25533: LD_VAR 0 18
25537: PPUSH
25538: LD_INT 22
25540: PUSH
25541: LD_VAR 0 16
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 58
25552: PUSH
25553: EMPTY
25554: LIST
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: LD_INT 30
25561: PUSH
25562: LD_INT 32
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 30
25571: PUSH
25572: LD_INT 4
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 30
25581: PUSH
25582: LD_INT 5
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: PPUSH
25600: CALL_OW 72
25604: ST_TO_ADDR
25605: GO 25829
25607: LD_INT 2
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25677
25615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25616: LD_ADDR_VAR 0 12
25620: PUSH
25621: LD_VAR 0 18
25625: PPUSH
25626: LD_INT 22
25628: PUSH
25629: LD_VAR 0 16
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: LD_INT 30
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 30
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PPUSH
25670: CALL_OW 72
25674: ST_TO_ADDR
25675: GO 25829
25677: LD_INT 3
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25747
25685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25686: LD_ADDR_VAR 0 12
25690: PUSH
25691: LD_VAR 0 18
25695: PPUSH
25696: LD_INT 22
25698: PUSH
25699: LD_VAR 0 16
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 30
25723: PUSH
25724: LD_INT 3
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PPUSH
25740: CALL_OW 72
25744: ST_TO_ADDR
25745: GO 25829
25747: LD_INT 4
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25755
25753: GO 25828
25755: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25756: LD_ADDR_VAR 0 12
25760: PUSH
25761: LD_VAR 0 18
25765: PPUSH
25766: LD_INT 22
25768: PUSH
25769: LD_VAR 0 16
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 30
25783: PUSH
25784: LD_INT 6
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 30
25793: PUSH
25794: LD_INT 7
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 30
25803: PUSH
25804: LD_INT 8
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PPUSH
25821: CALL_OW 72
25825: ST_TO_ADDR
25826: GO 25829
25828: POP
// if i = 1 then
25829: LD_VAR 0 8
25833: PUSH
25834: LD_INT 1
25836: EQUAL
25837: IFFALSE 25948
// begin tmp := [ ] ;
25839: LD_ADDR_VAR 0 19
25843: PUSH
25844: EMPTY
25845: ST_TO_ADDR
// for j in f do
25846: LD_ADDR_VAR 0 9
25850: PUSH
25851: LD_VAR 0 12
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25930
// if GetBType ( j ) = b_bunker then
25859: LD_VAR 0 9
25863: PPUSH
25864: CALL_OW 266
25868: PUSH
25869: LD_INT 32
25871: EQUAL
25872: IFFALSE 25899
// tmp := Insert ( tmp , 1 , j ) else
25874: LD_ADDR_VAR 0 19
25878: PUSH
25879: LD_VAR 0 19
25883: PPUSH
25884: LD_INT 1
25886: PPUSH
25887: LD_VAR 0 9
25891: PPUSH
25892: CALL_OW 2
25896: ST_TO_ADDR
25897: GO 25928
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25899: LD_ADDR_VAR 0 19
25903: PUSH
25904: LD_VAR 0 19
25908: PPUSH
25909: LD_VAR 0 19
25913: PUSH
25914: LD_INT 1
25916: PLUS
25917: PPUSH
25918: LD_VAR 0 9
25922: PPUSH
25923: CALL_OW 2
25927: ST_TO_ADDR
25928: GO 25856
25930: POP
25931: POP
// if tmp then
25932: LD_VAR 0 19
25936: IFFALSE 25948
// f := tmp ;
25938: LD_ADDR_VAR 0 12
25942: PUSH
25943: LD_VAR 0 19
25947: ST_TO_ADDR
// end ; x := personel [ i ] ;
25948: LD_ADDR_VAR 0 13
25952: PUSH
25953: LD_VAR 0 6
25957: PUSH
25958: LD_VAR 0 8
25962: ARRAY
25963: ST_TO_ADDR
// if x = - 1 then
25964: LD_VAR 0 13
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: EQUAL
25973: IFFALSE 26182
// begin for j in f do
25975: LD_ADDR_VAR 0 9
25979: PUSH
25980: LD_VAR 0 12
25984: PUSH
25985: FOR_IN
25986: IFFALSE 26178
// repeat InitHc ;
25988: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25992: LD_VAR 0 9
25996: PPUSH
25997: CALL_OW 266
26001: PUSH
26002: LD_INT 5
26004: EQUAL
26005: IFFALSE 26075
// begin if UnitsInside ( j ) < 3 then
26007: LD_VAR 0 9
26011: PPUSH
26012: CALL_OW 313
26016: PUSH
26017: LD_INT 3
26019: LESS
26020: IFFALSE 26056
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26022: LD_INT 0
26024: PPUSH
26025: LD_INT 5
26027: PUSH
26028: LD_INT 8
26030: PUSH
26031: LD_INT 9
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PUSH
26039: LD_VAR 0 17
26043: ARRAY
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: CALL_OW 380
26054: GO 26073
// PrepareHuman ( false , i , skill ) ;
26056: LD_INT 0
26058: PPUSH
26059: LD_VAR 0 8
26063: PPUSH
26064: LD_VAR 0 4
26068: PPUSH
26069: CALL_OW 380
// end else
26073: GO 26092
// PrepareHuman ( false , i , skill ) ;
26075: LD_INT 0
26077: PPUSH
26078: LD_VAR 0 8
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: CALL_OW 380
// un := CreateHuman ;
26092: LD_ADDR_VAR 0 14
26096: PUSH
26097: CALL_OW 44
26101: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26102: LD_ADDR_VAR 0 7
26106: PUSH
26107: LD_VAR 0 7
26111: PPUSH
26112: LD_INT 1
26114: PPUSH
26115: LD_VAR 0 14
26119: PPUSH
26120: CALL_OW 2
26124: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26125: LD_VAR 0 14
26129: PPUSH
26130: LD_VAR 0 9
26134: PPUSH
26135: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26139: LD_VAR 0 9
26143: PPUSH
26144: CALL_OW 313
26148: PUSH
26149: LD_INT 6
26151: EQUAL
26152: PUSH
26153: LD_VAR 0 9
26157: PPUSH
26158: CALL_OW 266
26162: PUSH
26163: LD_INT 32
26165: PUSH
26166: LD_INT 31
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: IN
26173: OR
26174: IFFALSE 25988
26176: GO 25985
26178: POP
26179: POP
// end else
26180: GO 26562
// for j = 1 to x do
26182: LD_ADDR_VAR 0 9
26186: PUSH
26187: DOUBLE
26188: LD_INT 1
26190: DEC
26191: ST_TO_ADDR
26192: LD_VAR 0 13
26196: PUSH
26197: FOR_TO
26198: IFFALSE 26560
// begin InitHc ;
26200: CALL_OW 19
// if not f then
26204: LD_VAR 0 12
26208: NOT
26209: IFFALSE 26298
// begin PrepareHuman ( false , i , skill ) ;
26211: LD_INT 0
26213: PPUSH
26214: LD_VAR 0 8
26218: PPUSH
26219: LD_VAR 0 4
26223: PPUSH
26224: CALL_OW 380
// un := CreateHuman ;
26228: LD_ADDR_VAR 0 14
26232: PUSH
26233: CALL_OW 44
26237: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26238: LD_ADDR_VAR 0 7
26242: PUSH
26243: LD_VAR 0 7
26247: PPUSH
26248: LD_INT 1
26250: PPUSH
26251: LD_VAR 0 14
26255: PPUSH
26256: CALL_OW 2
26260: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26261: LD_VAR 0 14
26265: PPUSH
26266: LD_VAR 0 1
26270: PPUSH
26271: CALL_OW 250
26275: PPUSH
26276: LD_VAR 0 1
26280: PPUSH
26281: CALL_OW 251
26285: PPUSH
26286: LD_INT 10
26288: PPUSH
26289: LD_INT 0
26291: PPUSH
26292: CALL_OW 50
// continue ;
26296: GO 26197
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26298: LD_VAR 0 12
26302: PUSH
26303: LD_INT 1
26305: ARRAY
26306: PPUSH
26307: CALL_OW 313
26311: PUSH
26312: LD_VAR 0 12
26316: PUSH
26317: LD_INT 1
26319: ARRAY
26320: PPUSH
26321: CALL_OW 266
26325: PUSH
26326: LD_INT 32
26328: PUSH
26329: LD_INT 31
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: IN
26336: AND
26337: PUSH
26338: LD_VAR 0 12
26342: PUSH
26343: LD_INT 1
26345: ARRAY
26346: PPUSH
26347: CALL_OW 313
26351: PUSH
26352: LD_INT 6
26354: EQUAL
26355: OR
26356: IFFALSE 26376
// f := Delete ( f , 1 ) ;
26358: LD_ADDR_VAR 0 12
26362: PUSH
26363: LD_VAR 0 12
26367: PPUSH
26368: LD_INT 1
26370: PPUSH
26371: CALL_OW 3
26375: ST_TO_ADDR
// if not f then
26376: LD_VAR 0 12
26380: NOT
26381: IFFALSE 26399
// begin x := x + 2 ;
26383: LD_ADDR_VAR 0 13
26387: PUSH
26388: LD_VAR 0 13
26392: PUSH
26393: LD_INT 2
26395: PLUS
26396: ST_TO_ADDR
// continue ;
26397: GO 26197
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26399: LD_VAR 0 12
26403: PUSH
26404: LD_INT 1
26406: ARRAY
26407: PPUSH
26408: CALL_OW 266
26412: PUSH
26413: LD_INT 5
26415: EQUAL
26416: IFFALSE 26490
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26418: LD_VAR 0 12
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PPUSH
26427: CALL_OW 313
26431: PUSH
26432: LD_INT 3
26434: LESS
26435: IFFALSE 26471
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26437: LD_INT 0
26439: PPUSH
26440: LD_INT 5
26442: PUSH
26443: LD_INT 8
26445: PUSH
26446: LD_INT 9
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: LD_VAR 0 17
26458: ARRAY
26459: PPUSH
26460: LD_VAR 0 4
26464: PPUSH
26465: CALL_OW 380
26469: GO 26488
// PrepareHuman ( false , i , skill ) ;
26471: LD_INT 0
26473: PPUSH
26474: LD_VAR 0 8
26478: PPUSH
26479: LD_VAR 0 4
26483: PPUSH
26484: CALL_OW 380
// end else
26488: GO 26507
// PrepareHuman ( false , i , skill ) ;
26490: LD_INT 0
26492: PPUSH
26493: LD_VAR 0 8
26497: PPUSH
26498: LD_VAR 0 4
26502: PPUSH
26503: CALL_OW 380
// un := CreateHuman ;
26507: LD_ADDR_VAR 0 14
26511: PUSH
26512: CALL_OW 44
26516: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26517: LD_ADDR_VAR 0 7
26521: PUSH
26522: LD_VAR 0 7
26526: PPUSH
26527: LD_INT 1
26529: PPUSH
26530: LD_VAR 0 14
26534: PPUSH
26535: CALL_OW 2
26539: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26540: LD_VAR 0 14
26544: PPUSH
26545: LD_VAR 0 12
26549: PUSH
26550: LD_INT 1
26552: ARRAY
26553: PPUSH
26554: CALL_OW 52
// end ;
26558: GO 26197
26560: POP
26561: POP
// end ;
26562: GO 25499
26564: POP
26565: POP
// result := result ^ buildings ;
26566: LD_ADDR_VAR 0 7
26570: PUSH
26571: LD_VAR 0 7
26575: PUSH
26576: LD_VAR 0 18
26580: ADD
26581: ST_TO_ADDR
// end else
26582: GO 26725
// begin for i = 1 to personel do
26584: LD_ADDR_VAR 0 8
26588: PUSH
26589: DOUBLE
26590: LD_INT 1
26592: DEC
26593: ST_TO_ADDR
26594: LD_VAR 0 6
26598: PUSH
26599: FOR_TO
26600: IFFALSE 26723
// begin if i > 4 then
26602: LD_VAR 0 8
26606: PUSH
26607: LD_INT 4
26609: GREATER
26610: IFFALSE 26614
// break ;
26612: GO 26723
// x := personel [ i ] ;
26614: LD_ADDR_VAR 0 13
26618: PUSH
26619: LD_VAR 0 6
26623: PUSH
26624: LD_VAR 0 8
26628: ARRAY
26629: ST_TO_ADDR
// if x = - 1 then
26630: LD_VAR 0 13
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: EQUAL
26639: IFFALSE 26643
// continue ;
26641: GO 26599
// PrepareHuman ( false , i , skill ) ;
26643: LD_INT 0
26645: PPUSH
26646: LD_VAR 0 8
26650: PPUSH
26651: LD_VAR 0 4
26655: PPUSH
26656: CALL_OW 380
// un := CreateHuman ;
26660: LD_ADDR_VAR 0 14
26664: PUSH
26665: CALL_OW 44
26669: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26670: LD_VAR 0 14
26674: PPUSH
26675: LD_VAR 0 1
26679: PPUSH
26680: CALL_OW 250
26684: PPUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 251
26694: PPUSH
26695: LD_INT 10
26697: PPUSH
26698: LD_INT 0
26700: PPUSH
26701: CALL_OW 50
// result := result ^ un ;
26705: LD_ADDR_VAR 0 7
26709: PUSH
26710: LD_VAR 0 7
26714: PUSH
26715: LD_VAR 0 14
26719: ADD
26720: ST_TO_ADDR
// end ;
26721: GO 26599
26723: POP
26724: POP
// end ; end ;
26725: LD_VAR 0 7
26729: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
// result := false ;
26748: LD_ADDR_VAR 0 3
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26756: LD_VAR 0 1
26760: NOT
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 266
26771: PUSH
26772: LD_INT 32
26774: PUSH
26775: LD_INT 33
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: IN
26782: NOT
26783: OR
26784: IFFALSE 26788
// exit ;
26786: GO 27897
// nat := GetNation ( tower ) ;
26788: LD_ADDR_VAR 0 12
26792: PUSH
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 248
26802: ST_TO_ADDR
// side := GetSide ( tower ) ;
26803: LD_ADDR_VAR 0 16
26807: PUSH
26808: LD_VAR 0 1
26812: PPUSH
26813: CALL_OW 255
26817: ST_TO_ADDR
// x := GetX ( tower ) ;
26818: LD_ADDR_VAR 0 10
26822: PUSH
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL_OW 250
26832: ST_TO_ADDR
// y := GetY ( tower ) ;
26833: LD_ADDR_VAR 0 11
26837: PUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 251
26847: ST_TO_ADDR
// if not x or not y then
26848: LD_VAR 0 10
26852: NOT
26853: PUSH
26854: LD_VAR 0 11
26858: NOT
26859: OR
26860: IFFALSE 26864
// exit ;
26862: GO 27897
// weapon := 0 ;
26864: LD_ADDR_VAR 0 18
26868: PUSH
26869: LD_INT 0
26871: ST_TO_ADDR
// fac_list := [ ] ;
26872: LD_ADDR_VAR 0 17
26876: PUSH
26877: EMPTY
26878: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26879: LD_ADDR_VAR 0 6
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 274
26893: PPUSH
26894: LD_VAR 0 2
26898: PPUSH
26899: LD_INT 0
26901: PPUSH
26902: CALL 24468 0 3
26906: PPUSH
26907: LD_INT 30
26909: PUSH
26910: LD_INT 3
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PPUSH
26917: CALL_OW 72
26921: ST_TO_ADDR
// if not factories then
26922: LD_VAR 0 6
26926: NOT
26927: IFFALSE 26931
// exit ;
26929: GO 27897
// for i in factories do
26931: LD_ADDR_VAR 0 8
26935: PUSH
26936: LD_VAR 0 6
26940: PUSH
26941: FOR_IN
26942: IFFALSE 26967
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26944: LD_ADDR_VAR 0 17
26948: PUSH
26949: LD_VAR 0 17
26953: PUSH
26954: LD_VAR 0 8
26958: PPUSH
26959: CALL_OW 478
26963: UNION
26964: ST_TO_ADDR
26965: GO 26941
26967: POP
26968: POP
// if not fac_list then
26969: LD_VAR 0 17
26973: NOT
26974: IFFALSE 26978
// exit ;
26976: GO 27897
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26978: LD_ADDR_VAR 0 5
26982: PUSH
26983: LD_INT 4
26985: PUSH
26986: LD_INT 5
26988: PUSH
26989: LD_INT 9
26991: PUSH
26992: LD_INT 10
26994: PUSH
26995: LD_INT 6
26997: PUSH
26998: LD_INT 7
27000: PUSH
27001: LD_INT 11
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 27
27015: PUSH
27016: LD_INT 28
27018: PUSH
27019: LD_INT 26
27021: PUSH
27022: LD_INT 30
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 43
27033: PUSH
27034: LD_INT 44
27036: PUSH
27037: LD_INT 46
27039: PUSH
27040: LD_INT 45
27042: PUSH
27043: LD_INT 47
27045: PUSH
27046: LD_INT 49
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: PUSH
27062: LD_VAR 0 12
27066: ARRAY
27067: ST_TO_ADDR
// list := list isect fac_list ;
27068: LD_ADDR_VAR 0 5
27072: PUSH
27073: LD_VAR 0 5
27077: PUSH
27078: LD_VAR 0 17
27082: ISECT
27083: ST_TO_ADDR
// if not list then
27084: LD_VAR 0 5
27088: NOT
27089: IFFALSE 27093
// exit ;
27091: GO 27897
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27093: LD_VAR 0 12
27097: PUSH
27098: LD_INT 3
27100: EQUAL
27101: PUSH
27102: LD_INT 49
27104: PUSH
27105: LD_VAR 0 5
27109: IN
27110: AND
27111: PUSH
27112: LD_INT 31
27114: PPUSH
27115: LD_VAR 0 16
27119: PPUSH
27120: CALL_OW 321
27124: PUSH
27125: LD_INT 2
27127: EQUAL
27128: AND
27129: IFFALSE 27189
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27131: LD_INT 22
27133: PUSH
27134: LD_VAR 0 16
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 35
27145: PUSH
27146: LD_INT 49
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 91
27155: PUSH
27156: LD_VAR 0 1
27160: PUSH
27161: LD_INT 10
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: LIST
27173: PPUSH
27174: CALL_OW 69
27178: NOT
27179: IFFALSE 27189
// weapon := ru_time_lapser ;
27181: LD_ADDR_VAR 0 18
27185: PUSH
27186: LD_INT 49
27188: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27189: LD_VAR 0 12
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: IN
27204: PUSH
27205: LD_INT 11
27207: PUSH
27208: LD_VAR 0 5
27212: IN
27213: PUSH
27214: LD_INT 30
27216: PUSH
27217: LD_VAR 0 5
27221: IN
27222: OR
27223: AND
27224: PUSH
27225: LD_INT 6
27227: PPUSH
27228: LD_VAR 0 16
27232: PPUSH
27233: CALL_OW 321
27237: PUSH
27238: LD_INT 2
27240: EQUAL
27241: AND
27242: IFFALSE 27407
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27244: LD_INT 22
27246: PUSH
27247: LD_VAR 0 16
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 35
27261: PUSH
27262: LD_INT 11
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 35
27271: PUSH
27272: LD_INT 30
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 91
27286: PUSH
27287: LD_VAR 0 1
27291: PUSH
27292: LD_INT 18
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: LIST
27304: PPUSH
27305: CALL_OW 69
27309: NOT
27310: PUSH
27311: LD_INT 22
27313: PUSH
27314: LD_VAR 0 16
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 2
27325: PUSH
27326: LD_INT 30
27328: PUSH
27329: LD_INT 32
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 30
27338: PUSH
27339: LD_INT 33
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 91
27353: PUSH
27354: LD_VAR 0 1
27358: PUSH
27359: LD_INT 12
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: PUSH
27372: EMPTY
27373: LIST
27374: PPUSH
27375: CALL_OW 69
27379: PUSH
27380: LD_INT 2
27382: GREATER
27383: AND
27384: IFFALSE 27407
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27386: LD_ADDR_VAR 0 18
27390: PUSH
27391: LD_INT 11
27393: PUSH
27394: LD_INT 30
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_VAR 0 12
27405: ARRAY
27406: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27407: LD_VAR 0 18
27411: NOT
27412: PUSH
27413: LD_INT 40
27415: PPUSH
27416: LD_VAR 0 16
27420: PPUSH
27421: CALL_OW 321
27425: PUSH
27426: LD_INT 2
27428: EQUAL
27429: AND
27430: PUSH
27431: LD_INT 7
27433: PUSH
27434: LD_VAR 0 5
27438: IN
27439: PUSH
27440: LD_INT 28
27442: PUSH
27443: LD_VAR 0 5
27447: IN
27448: OR
27449: PUSH
27450: LD_INT 45
27452: PUSH
27453: LD_VAR 0 5
27457: IN
27458: OR
27459: AND
27460: IFFALSE 27714
// begin hex := GetHexInfo ( x , y ) ;
27462: LD_ADDR_VAR 0 4
27466: PUSH
27467: LD_VAR 0 10
27471: PPUSH
27472: LD_VAR 0 11
27476: PPUSH
27477: CALL_OW 546
27481: ST_TO_ADDR
// if hex [ 1 ] then
27482: LD_VAR 0 4
27486: PUSH
27487: LD_INT 1
27489: ARRAY
27490: IFFALSE 27494
// exit ;
27492: GO 27897
// height := hex [ 2 ] ;
27494: LD_ADDR_VAR 0 15
27498: PUSH
27499: LD_VAR 0 4
27503: PUSH
27504: LD_INT 2
27506: ARRAY
27507: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27508: LD_ADDR_VAR 0 14
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 3
27521: PUSH
27522: LD_INT 5
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: ST_TO_ADDR
// for i in tmp do
27531: LD_ADDR_VAR 0 8
27535: PUSH
27536: LD_VAR 0 14
27540: PUSH
27541: FOR_IN
27542: IFFALSE 27712
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27544: LD_ADDR_VAR 0 9
27548: PUSH
27549: LD_VAR 0 10
27553: PPUSH
27554: LD_VAR 0 8
27558: PPUSH
27559: LD_INT 5
27561: PPUSH
27562: CALL_OW 272
27566: PUSH
27567: LD_VAR 0 11
27571: PPUSH
27572: LD_VAR 0 8
27576: PPUSH
27577: LD_INT 5
27579: PPUSH
27580: CALL_OW 273
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27589: LD_VAR 0 9
27593: PUSH
27594: LD_INT 1
27596: ARRAY
27597: PPUSH
27598: LD_VAR 0 9
27602: PUSH
27603: LD_INT 2
27605: ARRAY
27606: PPUSH
27607: CALL_OW 488
27611: IFFALSE 27710
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27613: LD_ADDR_VAR 0 4
27617: PUSH
27618: LD_VAR 0 9
27622: PUSH
27623: LD_INT 1
27625: ARRAY
27626: PPUSH
27627: LD_VAR 0 9
27631: PUSH
27632: LD_INT 2
27634: ARRAY
27635: PPUSH
27636: CALL_OW 546
27640: ST_TO_ADDR
// if hex [ 1 ] then
27641: LD_VAR 0 4
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: IFFALSE 27653
// continue ;
27651: GO 27541
// h := hex [ 2 ] ;
27653: LD_ADDR_VAR 0 13
27657: PUSH
27658: LD_VAR 0 4
27662: PUSH
27663: LD_INT 2
27665: ARRAY
27666: ST_TO_ADDR
// if h + 7 < height then
27667: LD_VAR 0 13
27671: PUSH
27672: LD_INT 7
27674: PLUS
27675: PUSH
27676: LD_VAR 0 15
27680: LESS
27681: IFFALSE 27710
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27683: LD_ADDR_VAR 0 18
27687: PUSH
27688: LD_INT 7
27690: PUSH
27691: LD_INT 28
27693: PUSH
27694: LD_INT 45
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: PUSH
27702: LD_VAR 0 12
27706: ARRAY
27707: ST_TO_ADDR
// break ;
27708: GO 27712
// end ; end ; end ;
27710: GO 27541
27712: POP
27713: POP
// end ; if not weapon then
27714: LD_VAR 0 18
27718: NOT
27719: IFFALSE 27779
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27721: LD_ADDR_VAR 0 5
27725: PUSH
27726: LD_VAR 0 5
27730: PUSH
27731: LD_INT 11
27733: PUSH
27734: LD_INT 30
27736: PUSH
27737: LD_INT 49
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: LIST
27744: DIFF
27745: ST_TO_ADDR
// if not list then
27746: LD_VAR 0 5
27750: NOT
27751: IFFALSE 27755
// exit ;
27753: GO 27897
// weapon := list [ rand ( 1 , list ) ] ;
27755: LD_ADDR_VAR 0 18
27759: PUSH
27760: LD_VAR 0 5
27764: PUSH
27765: LD_INT 1
27767: PPUSH
27768: LD_VAR 0 5
27772: PPUSH
27773: CALL_OW 12
27777: ARRAY
27778: ST_TO_ADDR
// end ; if weapon then
27779: LD_VAR 0 18
27783: IFFALSE 27897
// begin tmp := CostOfWeapon ( weapon ) ;
27785: LD_ADDR_VAR 0 14
27789: PUSH
27790: LD_VAR 0 18
27794: PPUSH
27795: CALL_OW 451
27799: ST_TO_ADDR
// j := GetBase ( tower ) ;
27800: LD_ADDR_VAR 0 9
27804: PUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: CALL_OW 274
27814: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27815: LD_VAR 0 9
27819: PPUSH
27820: LD_INT 1
27822: PPUSH
27823: CALL_OW 275
27827: PUSH
27828: LD_VAR 0 14
27832: PUSH
27833: LD_INT 1
27835: ARRAY
27836: GREATEREQUAL
27837: PUSH
27838: LD_VAR 0 9
27842: PPUSH
27843: LD_INT 2
27845: PPUSH
27846: CALL_OW 275
27850: PUSH
27851: LD_VAR 0 14
27855: PUSH
27856: LD_INT 2
27858: ARRAY
27859: GREATEREQUAL
27860: AND
27861: PUSH
27862: LD_VAR 0 9
27866: PPUSH
27867: LD_INT 3
27869: PPUSH
27870: CALL_OW 275
27874: PUSH
27875: LD_VAR 0 14
27879: PUSH
27880: LD_INT 3
27882: ARRAY
27883: GREATEREQUAL
27884: AND
27885: IFFALSE 27897
// result := weapon ;
27887: LD_ADDR_VAR 0 3
27891: PUSH
27892: LD_VAR 0 18
27896: ST_TO_ADDR
// end ; end ;
27897: LD_VAR 0 3
27901: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27902: LD_INT 0
27904: PPUSH
27905: PPUSH
// result := true ;
27906: LD_ADDR_VAR 0 3
27910: PUSH
27911: LD_INT 1
27913: ST_TO_ADDR
// if array1 = array2 then
27914: LD_VAR 0 1
27918: PUSH
27919: LD_VAR 0 2
27923: EQUAL
27924: IFFALSE 27984
// begin for i = 1 to array1 do
27926: LD_ADDR_VAR 0 4
27930: PUSH
27931: DOUBLE
27932: LD_INT 1
27934: DEC
27935: ST_TO_ADDR
27936: LD_VAR 0 1
27940: PUSH
27941: FOR_TO
27942: IFFALSE 27980
// if array1 [ i ] <> array2 [ i ] then
27944: LD_VAR 0 1
27948: PUSH
27949: LD_VAR 0 4
27953: ARRAY
27954: PUSH
27955: LD_VAR 0 2
27959: PUSH
27960: LD_VAR 0 4
27964: ARRAY
27965: NONEQUAL
27966: IFFALSE 27978
// begin result := false ;
27968: LD_ADDR_VAR 0 3
27972: PUSH
27973: LD_INT 0
27975: ST_TO_ADDR
// break ;
27976: GO 27980
// end ;
27978: GO 27941
27980: POP
27981: POP
// end else
27982: GO 27992
// result := false ;
27984: LD_ADDR_VAR 0 3
27988: PUSH
27989: LD_INT 0
27991: ST_TO_ADDR
// end ;
27992: LD_VAR 0 3
27996: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27997: LD_INT 0
27999: PPUSH
28000: PPUSH
// if not array1 or not array2 then
28001: LD_VAR 0 1
28005: NOT
28006: PUSH
28007: LD_VAR 0 2
28011: NOT
28012: OR
28013: IFFALSE 28017
// exit ;
28015: GO 28081
// result := true ;
28017: LD_ADDR_VAR 0 3
28021: PUSH
28022: LD_INT 1
28024: ST_TO_ADDR
// for i = 1 to array1 do
28025: LD_ADDR_VAR 0 4
28029: PUSH
28030: DOUBLE
28031: LD_INT 1
28033: DEC
28034: ST_TO_ADDR
28035: LD_VAR 0 1
28039: PUSH
28040: FOR_TO
28041: IFFALSE 28079
// if array1 [ i ] <> array2 [ i ] then
28043: LD_VAR 0 1
28047: PUSH
28048: LD_VAR 0 4
28052: ARRAY
28053: PUSH
28054: LD_VAR 0 2
28058: PUSH
28059: LD_VAR 0 4
28063: ARRAY
28064: NONEQUAL
28065: IFFALSE 28077
// begin result := false ;
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: LD_INT 0
28074: ST_TO_ADDR
// break ;
28075: GO 28079
// end ;
28077: GO 28040
28079: POP
28080: POP
// end ;
28081: LD_VAR 0 3
28085: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28086: LD_INT 0
28088: PPUSH
28089: PPUSH
28090: PPUSH
// pom := GetBase ( fac ) ;
28091: LD_ADDR_VAR 0 5
28095: PUSH
28096: LD_VAR 0 1
28100: PPUSH
28101: CALL_OW 274
28105: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28106: LD_ADDR_VAR 0 4
28110: PUSH
28111: LD_VAR 0 2
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: LD_VAR 0 2
28124: PUSH
28125: LD_INT 2
28127: ARRAY
28128: PPUSH
28129: LD_VAR 0 2
28133: PUSH
28134: LD_INT 3
28136: ARRAY
28137: PPUSH
28138: LD_VAR 0 2
28142: PUSH
28143: LD_INT 4
28145: ARRAY
28146: PPUSH
28147: CALL_OW 449
28151: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_VAR 0 5
28161: PPUSH
28162: LD_INT 1
28164: PPUSH
28165: CALL_OW 275
28169: PUSH
28170: LD_VAR 0 4
28174: PUSH
28175: LD_INT 1
28177: ARRAY
28178: GREATEREQUAL
28179: PUSH
28180: LD_VAR 0 5
28184: PPUSH
28185: LD_INT 2
28187: PPUSH
28188: CALL_OW 275
28192: PUSH
28193: LD_VAR 0 4
28197: PUSH
28198: LD_INT 2
28200: ARRAY
28201: GREATEREQUAL
28202: AND
28203: PUSH
28204: LD_VAR 0 5
28208: PPUSH
28209: LD_INT 3
28211: PPUSH
28212: CALL_OW 275
28216: PUSH
28217: LD_VAR 0 4
28221: PUSH
28222: LD_INT 3
28224: ARRAY
28225: GREATEREQUAL
28226: AND
28227: ST_TO_ADDR
// end ;
28228: LD_VAR 0 3
28232: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28233: LD_INT 0
28235: PPUSH
28236: PPUSH
28237: PPUSH
28238: PPUSH
// pom := GetBase ( building ) ;
28239: LD_ADDR_VAR 0 3
28243: PUSH
28244: LD_VAR 0 1
28248: PPUSH
28249: CALL_OW 274
28253: ST_TO_ADDR
// if not pom then
28254: LD_VAR 0 3
28258: NOT
28259: IFFALSE 28263
// exit ;
28261: GO 28433
// btype := GetBType ( building ) ;
28263: LD_ADDR_VAR 0 5
28267: PUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: CALL_OW 266
28277: ST_TO_ADDR
// if btype = b_armoury then
28278: LD_VAR 0 5
28282: PUSH
28283: LD_INT 4
28285: EQUAL
28286: IFFALSE 28296
// btype := b_barracks ;
28288: LD_ADDR_VAR 0 5
28292: PUSH
28293: LD_INT 5
28295: ST_TO_ADDR
// if btype = b_depot then
28296: LD_VAR 0 5
28300: PUSH
28301: LD_INT 0
28303: EQUAL
28304: IFFALSE 28314
// btype := b_warehouse ;
28306: LD_ADDR_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ST_TO_ADDR
// if btype = b_workshop then
28314: LD_VAR 0 5
28318: PUSH
28319: LD_INT 2
28321: EQUAL
28322: IFFALSE 28332
// btype := b_factory ;
28324: LD_ADDR_VAR 0 5
28328: PUSH
28329: LD_INT 3
28331: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28332: LD_ADDR_VAR 0 4
28336: PUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: LD_VAR 0 1
28346: PPUSH
28347: CALL_OW 248
28351: PPUSH
28352: CALL_OW 450
28356: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_VAR 0 3
28366: PPUSH
28367: LD_INT 1
28369: PPUSH
28370: CALL_OW 275
28374: PUSH
28375: LD_VAR 0 4
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: GREATEREQUAL
28384: PUSH
28385: LD_VAR 0 3
28389: PPUSH
28390: LD_INT 2
28392: PPUSH
28393: CALL_OW 275
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_INT 2
28405: ARRAY
28406: GREATEREQUAL
28407: AND
28408: PUSH
28409: LD_VAR 0 3
28413: PPUSH
28414: LD_INT 3
28416: PPUSH
28417: CALL_OW 275
28421: PUSH
28422: LD_VAR 0 4
28426: PUSH
28427: LD_INT 3
28429: ARRAY
28430: GREATEREQUAL
28431: AND
28432: ST_TO_ADDR
// end ;
28433: LD_VAR 0 2
28437: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28438: LD_INT 0
28440: PPUSH
28441: PPUSH
28442: PPUSH
// pom := GetBase ( building ) ;
28443: LD_ADDR_VAR 0 4
28447: PUSH
28448: LD_VAR 0 1
28452: PPUSH
28453: CALL_OW 274
28457: ST_TO_ADDR
// if not pom then
28458: LD_VAR 0 4
28462: NOT
28463: IFFALSE 28467
// exit ;
28465: GO 28568
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28467: LD_ADDR_VAR 0 5
28471: PUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 248
28486: PPUSH
28487: CALL_OW 450
28491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_VAR 0 4
28501: PPUSH
28502: LD_INT 1
28504: PPUSH
28505: CALL_OW 275
28509: PUSH
28510: LD_VAR 0 5
28514: PUSH
28515: LD_INT 1
28517: ARRAY
28518: GREATEREQUAL
28519: PUSH
28520: LD_VAR 0 4
28524: PPUSH
28525: LD_INT 2
28527: PPUSH
28528: CALL_OW 275
28532: PUSH
28533: LD_VAR 0 5
28537: PUSH
28538: LD_INT 2
28540: ARRAY
28541: GREATEREQUAL
28542: AND
28543: PUSH
28544: LD_VAR 0 4
28548: PPUSH
28549: LD_INT 3
28551: PPUSH
28552: CALL_OW 275
28556: PUSH
28557: LD_VAR 0 5
28561: PUSH
28562: LD_INT 3
28564: ARRAY
28565: GREATEREQUAL
28566: AND
28567: ST_TO_ADDR
// end ;
28568: LD_VAR 0 3
28572: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28573: LD_INT 0
28575: PPUSH
28576: PPUSH
28577: PPUSH
28578: PPUSH
28579: PPUSH
28580: PPUSH
28581: PPUSH
28582: PPUSH
28583: PPUSH
28584: PPUSH
28585: PPUSH
// result := false ;
28586: LD_ADDR_VAR 0 8
28590: PUSH
28591: LD_INT 0
28593: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28594: LD_VAR 0 5
28598: NOT
28599: PUSH
28600: LD_VAR 0 1
28604: NOT
28605: OR
28606: PUSH
28607: LD_VAR 0 2
28611: NOT
28612: OR
28613: PUSH
28614: LD_VAR 0 3
28618: NOT
28619: OR
28620: IFFALSE 28624
// exit ;
28622: GO 29438
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28624: LD_ADDR_VAR 0 14
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: LD_VAR 0 2
28638: PPUSH
28639: LD_VAR 0 3
28643: PPUSH
28644: LD_VAR 0 4
28648: PPUSH
28649: LD_VAR 0 5
28653: PUSH
28654: LD_INT 1
28656: ARRAY
28657: PPUSH
28658: CALL_OW 248
28662: PPUSH
28663: LD_INT 0
28665: PPUSH
28666: CALL 30675 0 6
28670: ST_TO_ADDR
// if not hexes then
28671: LD_VAR 0 14
28675: NOT
28676: IFFALSE 28680
// exit ;
28678: GO 29438
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28680: LD_ADDR_VAR 0 17
28684: PUSH
28685: LD_VAR 0 5
28689: PPUSH
28690: LD_INT 22
28692: PUSH
28693: LD_VAR 0 13
28697: PPUSH
28698: CALL_OW 255
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: LD_INT 30
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 30
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PPUSH
28739: CALL_OW 72
28743: ST_TO_ADDR
// for i = 1 to hexes do
28744: LD_ADDR_VAR 0 9
28748: PUSH
28749: DOUBLE
28750: LD_INT 1
28752: DEC
28753: ST_TO_ADDR
28754: LD_VAR 0 14
28758: PUSH
28759: FOR_TO
28760: IFFALSE 29436
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28762: LD_ADDR_VAR 0 13
28766: PUSH
28767: LD_VAR 0 14
28771: PUSH
28772: LD_VAR 0 9
28776: ARRAY
28777: PUSH
28778: LD_INT 1
28780: ARRAY
28781: PPUSH
28782: LD_VAR 0 14
28786: PUSH
28787: LD_VAR 0 9
28791: ARRAY
28792: PUSH
28793: LD_INT 2
28795: ARRAY
28796: PPUSH
28797: CALL_OW 428
28801: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28802: LD_VAR 0 14
28806: PUSH
28807: LD_VAR 0 9
28811: ARRAY
28812: PUSH
28813: LD_INT 1
28815: ARRAY
28816: PPUSH
28817: LD_VAR 0 14
28821: PUSH
28822: LD_VAR 0 9
28826: ARRAY
28827: PUSH
28828: LD_INT 2
28830: ARRAY
28831: PPUSH
28832: CALL_OW 351
28836: PUSH
28837: LD_VAR 0 14
28841: PUSH
28842: LD_VAR 0 9
28846: ARRAY
28847: PUSH
28848: LD_INT 1
28850: ARRAY
28851: PPUSH
28852: LD_VAR 0 14
28856: PUSH
28857: LD_VAR 0 9
28861: ARRAY
28862: PUSH
28863: LD_INT 2
28865: ARRAY
28866: PPUSH
28867: CALL_OW 488
28871: NOT
28872: OR
28873: PUSH
28874: LD_VAR 0 13
28878: PPUSH
28879: CALL_OW 247
28883: PUSH
28884: LD_INT 3
28886: EQUAL
28887: OR
28888: IFFALSE 28894
// exit ;
28890: POP
28891: POP
28892: GO 29438
// if not tmp then
28894: LD_VAR 0 13
28898: NOT
28899: IFFALSE 28903
// continue ;
28901: GO 28759
// result := true ;
28903: LD_ADDR_VAR 0 8
28907: PUSH
28908: LD_INT 1
28910: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28911: LD_VAR 0 6
28915: PUSH
28916: LD_VAR 0 13
28920: PPUSH
28921: CALL_OW 247
28925: PUSH
28926: LD_INT 2
28928: EQUAL
28929: AND
28930: PUSH
28931: LD_VAR 0 13
28935: PPUSH
28936: CALL_OW 263
28940: PUSH
28941: LD_INT 1
28943: EQUAL
28944: AND
28945: IFFALSE 29109
// begin if IsDrivenBy ( tmp ) then
28947: LD_VAR 0 13
28951: PPUSH
28952: CALL_OW 311
28956: IFFALSE 28960
// continue ;
28958: GO 28759
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28960: LD_VAR 0 6
28964: PPUSH
28965: LD_INT 3
28967: PUSH
28968: LD_INT 60
28970: PUSH
28971: EMPTY
28972: LIST
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: LD_INT 55
28983: PUSH
28984: EMPTY
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PPUSH
28995: CALL_OW 72
28999: IFFALSE 29107
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29001: LD_ADDR_VAR 0 18
29005: PUSH
29006: LD_VAR 0 6
29010: PPUSH
29011: LD_INT 3
29013: PUSH
29014: LD_INT 60
29016: PUSH
29017: EMPTY
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 3
29026: PUSH
29027: LD_INT 55
29029: PUSH
29030: EMPTY
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PPUSH
29041: CALL_OW 72
29045: PUSH
29046: LD_INT 1
29048: ARRAY
29049: ST_TO_ADDR
// if IsInUnit ( driver ) then
29050: LD_VAR 0 18
29054: PPUSH
29055: CALL_OW 310
29059: IFFALSE 29070
// ComExit ( driver ) ;
29061: LD_VAR 0 18
29065: PPUSH
29066: CALL 53859 0 1
// AddComEnterUnit ( driver , tmp ) ;
29070: LD_VAR 0 18
29074: PPUSH
29075: LD_VAR 0 13
29079: PPUSH
29080: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29084: LD_VAR 0 18
29088: PPUSH
29089: LD_VAR 0 7
29093: PPUSH
29094: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29098: LD_VAR 0 18
29102: PPUSH
29103: CALL_OW 181
// end ; continue ;
29107: GO 28759
// end ; if not cleaners or not tmp in cleaners then
29109: LD_VAR 0 6
29113: NOT
29114: PUSH
29115: LD_VAR 0 13
29119: PUSH
29120: LD_VAR 0 6
29124: IN
29125: NOT
29126: OR
29127: IFFALSE 29434
// begin if dep then
29129: LD_VAR 0 17
29133: IFFALSE 29269
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29135: LD_ADDR_VAR 0 16
29139: PUSH
29140: LD_VAR 0 17
29144: PUSH
29145: LD_INT 1
29147: ARRAY
29148: PPUSH
29149: CALL_OW 250
29153: PPUSH
29154: LD_VAR 0 17
29158: PUSH
29159: LD_INT 1
29161: ARRAY
29162: PPUSH
29163: CALL_OW 254
29167: PPUSH
29168: LD_INT 5
29170: PPUSH
29171: CALL_OW 272
29175: PUSH
29176: LD_VAR 0 17
29180: PUSH
29181: LD_INT 1
29183: ARRAY
29184: PPUSH
29185: CALL_OW 251
29189: PPUSH
29190: LD_VAR 0 17
29194: PUSH
29195: LD_INT 1
29197: ARRAY
29198: PPUSH
29199: CALL_OW 254
29203: PPUSH
29204: LD_INT 5
29206: PPUSH
29207: CALL_OW 273
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29216: LD_VAR 0 16
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PPUSH
29225: LD_VAR 0 16
29229: PUSH
29230: LD_INT 2
29232: ARRAY
29233: PPUSH
29234: CALL_OW 488
29238: IFFALSE 29269
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29240: LD_VAR 0 13
29244: PPUSH
29245: LD_VAR 0 16
29249: PUSH
29250: LD_INT 1
29252: ARRAY
29253: PPUSH
29254: LD_VAR 0 16
29258: PUSH
29259: LD_INT 2
29261: ARRAY
29262: PPUSH
29263: CALL_OW 111
// continue ;
29267: GO 28759
// end ; end ; r := GetDir ( tmp ) ;
29269: LD_ADDR_VAR 0 15
29273: PUSH
29274: LD_VAR 0 13
29278: PPUSH
29279: CALL_OW 254
29283: ST_TO_ADDR
// if r = 5 then
29284: LD_VAR 0 15
29288: PUSH
29289: LD_INT 5
29291: EQUAL
29292: IFFALSE 29302
// r := 0 ;
29294: LD_ADDR_VAR 0 15
29298: PUSH
29299: LD_INT 0
29301: ST_TO_ADDR
// for j = r to 5 do
29302: LD_ADDR_VAR 0 10
29306: PUSH
29307: DOUBLE
29308: LD_VAR 0 15
29312: DEC
29313: ST_TO_ADDR
29314: LD_INT 5
29316: PUSH
29317: FOR_TO
29318: IFFALSE 29432
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29320: LD_ADDR_VAR 0 11
29324: PUSH
29325: LD_VAR 0 13
29329: PPUSH
29330: CALL_OW 250
29334: PPUSH
29335: LD_VAR 0 10
29339: PPUSH
29340: LD_INT 2
29342: PPUSH
29343: CALL_OW 272
29347: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29348: LD_ADDR_VAR 0 12
29352: PUSH
29353: LD_VAR 0 13
29357: PPUSH
29358: CALL_OW 251
29362: PPUSH
29363: LD_VAR 0 10
29367: PPUSH
29368: LD_INT 2
29370: PPUSH
29371: CALL_OW 273
29375: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29376: LD_VAR 0 11
29380: PPUSH
29381: LD_VAR 0 12
29385: PPUSH
29386: CALL_OW 488
29390: PUSH
29391: LD_VAR 0 11
29395: PPUSH
29396: LD_VAR 0 12
29400: PPUSH
29401: CALL_OW 428
29405: NOT
29406: AND
29407: IFFALSE 29430
// begin ComMoveXY ( tmp , _x , _y ) ;
29409: LD_VAR 0 13
29413: PPUSH
29414: LD_VAR 0 11
29418: PPUSH
29419: LD_VAR 0 12
29423: PPUSH
29424: CALL_OW 111
// break ;
29428: GO 29432
// end ; end ;
29430: GO 29317
29432: POP
29433: POP
// end ; end ;
29434: GO 28759
29436: POP
29437: POP
// end ;
29438: LD_VAR 0 8
29442: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29443: LD_INT 0
29445: PPUSH
// result := true ;
29446: LD_ADDR_VAR 0 3
29450: PUSH
29451: LD_INT 1
29453: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29454: LD_VAR 0 2
29458: PUSH
29459: LD_INT 24
29461: DOUBLE
29462: EQUAL
29463: IFTRUE 29473
29465: LD_INT 33
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29498
29473: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 32
29481: PPUSH
29482: LD_VAR 0 1
29486: PPUSH
29487: CALL_OW 321
29491: PUSH
29492: LD_INT 2
29494: EQUAL
29495: ST_TO_ADDR
29496: GO 29818
29498: LD_INT 20
29500: DOUBLE
29501: EQUAL
29502: IFTRUE 29506
29504: GO 29531
29506: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29507: LD_ADDR_VAR 0 3
29511: PUSH
29512: LD_INT 6
29514: PPUSH
29515: LD_VAR 0 1
29519: PPUSH
29520: CALL_OW 321
29524: PUSH
29525: LD_INT 2
29527: EQUAL
29528: ST_TO_ADDR
29529: GO 29818
29531: LD_INT 22
29533: DOUBLE
29534: EQUAL
29535: IFTRUE 29545
29537: LD_INT 36
29539: DOUBLE
29540: EQUAL
29541: IFTRUE 29545
29543: GO 29570
29545: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: LD_INT 15
29553: PPUSH
29554: LD_VAR 0 1
29558: PPUSH
29559: CALL_OW 321
29563: PUSH
29564: LD_INT 2
29566: EQUAL
29567: ST_TO_ADDR
29568: GO 29818
29570: LD_INT 30
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29603
29578: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: LD_INT 20
29586: PPUSH
29587: LD_VAR 0 1
29591: PPUSH
29592: CALL_OW 321
29596: PUSH
29597: LD_INT 2
29599: EQUAL
29600: ST_TO_ADDR
29601: GO 29818
29603: LD_INT 28
29605: DOUBLE
29606: EQUAL
29607: IFTRUE 29617
29609: LD_INT 21
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29642
29617: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 21
29625: PPUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 321
29635: PUSH
29636: LD_INT 2
29638: EQUAL
29639: ST_TO_ADDR
29640: GO 29818
29642: LD_INT 16
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 29677
29650: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29651: LD_ADDR_VAR 0 3
29655: PUSH
29656: LD_EXP 119
29660: PPUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 321
29670: PUSH
29671: LD_INT 2
29673: EQUAL
29674: ST_TO_ADDR
29675: GO 29818
29677: LD_INT 19
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29691
29683: LD_INT 23
29685: DOUBLE
29686: EQUAL
29687: IFTRUE 29691
29689: GO 29718
29691: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29692: LD_ADDR_VAR 0 3
29696: PUSH
29697: LD_EXP 118
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 321
29711: PUSH
29712: LD_INT 2
29714: EQUAL
29715: ST_TO_ADDR
29716: GO 29818
29718: LD_INT 17
29720: DOUBLE
29721: EQUAL
29722: IFTRUE 29726
29724: GO 29751
29726: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_INT 39
29734: PPUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: ST_TO_ADDR
29749: GO 29818
29751: LD_INT 18
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29759
29757: GO 29784
29759: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29760: LD_ADDR_VAR 0 3
29764: PUSH
29765: LD_INT 40
29767: PPUSH
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL_OW 321
29777: PUSH
29778: LD_INT 2
29780: EQUAL
29781: ST_TO_ADDR
29782: GO 29818
29784: LD_INT 27
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29792
29790: GO 29817
29792: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_INT 35
29800: PPUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 321
29810: PUSH
29811: LD_INT 2
29813: EQUAL
29814: ST_TO_ADDR
29815: GO 29818
29817: POP
// end ;
29818: LD_VAR 0 3
29822: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29823: LD_INT 0
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
// result := false ;
29836: LD_ADDR_VAR 0 6
29840: PUSH
29841: LD_INT 0
29843: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29844: LD_VAR 0 1
29848: NOT
29849: PUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 266
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: IN
29870: NOT
29871: OR
29872: PUSH
29873: LD_VAR 0 2
29877: NOT
29878: OR
29879: PUSH
29880: LD_VAR 0 5
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: LD_INT 4
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: IN
29911: NOT
29912: OR
29913: PUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: LD_VAR 0 4
29923: PPUSH
29924: CALL_OW 488
29928: NOT
29929: OR
29930: IFFALSE 29934
// exit ;
29932: GO 30670
// side := GetSide ( depot ) ;
29934: LD_ADDR_VAR 0 9
29938: PUSH
29939: LD_VAR 0 1
29943: PPUSH
29944: CALL_OW 255
29948: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29949: LD_VAR 0 9
29953: PPUSH
29954: LD_VAR 0 2
29958: PPUSH
29959: CALL 29443 0 2
29963: NOT
29964: IFFALSE 29968
// exit ;
29966: GO 30670
// pom := GetBase ( depot ) ;
29968: LD_ADDR_VAR 0 10
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 274
29982: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29983: LD_ADDR_VAR 0 11
29987: PUSH
29988: LD_VAR 0 2
29992: PPUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 248
30002: PPUSH
30003: CALL_OW 450
30007: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30008: LD_VAR 0 10
30012: PPUSH
30013: LD_INT 1
30015: PPUSH
30016: CALL_OW 275
30020: PUSH
30021: LD_VAR 0 11
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: GREATEREQUAL
30030: PUSH
30031: LD_VAR 0 10
30035: PPUSH
30036: LD_INT 2
30038: PPUSH
30039: CALL_OW 275
30043: PUSH
30044: LD_VAR 0 11
30048: PUSH
30049: LD_INT 2
30051: ARRAY
30052: GREATEREQUAL
30053: AND
30054: PUSH
30055: LD_VAR 0 10
30059: PPUSH
30060: LD_INT 3
30062: PPUSH
30063: CALL_OW 275
30067: PUSH
30068: LD_VAR 0 11
30072: PUSH
30073: LD_INT 3
30075: ARRAY
30076: GREATEREQUAL
30077: AND
30078: NOT
30079: IFFALSE 30083
// exit ;
30081: GO 30670
// if GetBType ( depot ) = b_depot then
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 266
30092: PUSH
30093: LD_INT 0
30095: EQUAL
30096: IFFALSE 30108
// dist := 28 else
30098: LD_ADDR_VAR 0 14
30102: PUSH
30103: LD_INT 28
30105: ST_TO_ADDR
30106: GO 30116
// dist := 36 ;
30108: LD_ADDR_VAR 0 14
30112: PUSH
30113: LD_INT 36
30115: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30116: LD_VAR 0 1
30120: PPUSH
30121: LD_VAR 0 3
30125: PPUSH
30126: LD_VAR 0 4
30130: PPUSH
30131: CALL_OW 297
30135: PUSH
30136: LD_VAR 0 14
30140: GREATER
30141: IFFALSE 30145
// exit ;
30143: GO 30670
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30145: LD_ADDR_VAR 0 12
30149: PUSH
30150: LD_VAR 0 2
30154: PPUSH
30155: LD_VAR 0 3
30159: PPUSH
30160: LD_VAR 0 4
30164: PPUSH
30165: LD_VAR 0 5
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 248
30179: PPUSH
30180: LD_INT 0
30182: PPUSH
30183: CALL 30675 0 6
30187: ST_TO_ADDR
// if not hexes then
30188: LD_VAR 0 12
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30670
// hex := GetHexInfo ( x , y ) ;
30197: LD_ADDR_VAR 0 15
30201: PUSH
30202: LD_VAR 0 3
30206: PPUSH
30207: LD_VAR 0 4
30211: PPUSH
30212: CALL_OW 546
30216: ST_TO_ADDR
// if hex [ 1 ] then
30217: LD_VAR 0 15
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: IFFALSE 30229
// exit ;
30227: GO 30670
// height := hex [ 2 ] ;
30229: LD_ADDR_VAR 0 13
30233: PUSH
30234: LD_VAR 0 15
30238: PUSH
30239: LD_INT 2
30241: ARRAY
30242: ST_TO_ADDR
// for i = 1 to hexes do
30243: LD_ADDR_VAR 0 7
30247: PUSH
30248: DOUBLE
30249: LD_INT 1
30251: DEC
30252: ST_TO_ADDR
30253: LD_VAR 0 12
30257: PUSH
30258: FOR_TO
30259: IFFALSE 30589
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30261: LD_VAR 0 12
30265: PUSH
30266: LD_VAR 0 7
30270: ARRAY
30271: PUSH
30272: LD_INT 1
30274: ARRAY
30275: PPUSH
30276: LD_VAR 0 12
30280: PUSH
30281: LD_VAR 0 7
30285: ARRAY
30286: PUSH
30287: LD_INT 2
30289: ARRAY
30290: PPUSH
30291: CALL_OW 488
30295: NOT
30296: PUSH
30297: LD_VAR 0 12
30301: PUSH
30302: LD_VAR 0 7
30306: ARRAY
30307: PUSH
30308: LD_INT 1
30310: ARRAY
30311: PPUSH
30312: LD_VAR 0 12
30316: PUSH
30317: LD_VAR 0 7
30321: ARRAY
30322: PUSH
30323: LD_INT 2
30325: ARRAY
30326: PPUSH
30327: CALL_OW 428
30331: PUSH
30332: LD_INT 0
30334: GREATER
30335: OR
30336: PUSH
30337: LD_VAR 0 12
30341: PUSH
30342: LD_VAR 0 7
30346: ARRAY
30347: PUSH
30348: LD_INT 1
30350: ARRAY
30351: PPUSH
30352: LD_VAR 0 12
30356: PUSH
30357: LD_VAR 0 7
30361: ARRAY
30362: PUSH
30363: LD_INT 2
30365: ARRAY
30366: PPUSH
30367: CALL_OW 351
30371: OR
30372: IFFALSE 30378
// exit ;
30374: POP
30375: POP
30376: GO 30670
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30378: LD_ADDR_VAR 0 8
30382: PUSH
30383: LD_VAR 0 12
30387: PUSH
30388: LD_VAR 0 7
30392: ARRAY
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: PPUSH
30398: LD_VAR 0 12
30402: PUSH
30403: LD_VAR 0 7
30407: ARRAY
30408: PUSH
30409: LD_INT 2
30411: ARRAY
30412: PPUSH
30413: CALL_OW 546
30417: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30418: LD_VAR 0 8
30422: PUSH
30423: LD_INT 1
30425: ARRAY
30426: PUSH
30427: LD_VAR 0 8
30431: PUSH
30432: LD_INT 2
30434: ARRAY
30435: PUSH
30436: LD_VAR 0 13
30440: PUSH
30441: LD_INT 2
30443: PLUS
30444: GREATER
30445: OR
30446: PUSH
30447: LD_VAR 0 8
30451: PUSH
30452: LD_INT 2
30454: ARRAY
30455: PUSH
30456: LD_VAR 0 13
30460: PUSH
30461: LD_INT 2
30463: MINUS
30464: LESS
30465: OR
30466: PUSH
30467: LD_VAR 0 8
30471: PUSH
30472: LD_INT 3
30474: ARRAY
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 8
30481: PUSH
30482: LD_INT 9
30484: PUSH
30485: LD_INT 10
30487: PUSH
30488: LD_INT 11
30490: PUSH
30491: LD_INT 12
30493: PUSH
30494: LD_INT 13
30496: PUSH
30497: LD_INT 16
30499: PUSH
30500: LD_INT 17
30502: PUSH
30503: LD_INT 18
30505: PUSH
30506: LD_INT 19
30508: PUSH
30509: LD_INT 20
30511: PUSH
30512: LD_INT 21
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: IN
30530: NOT
30531: OR
30532: PUSH
30533: LD_VAR 0 8
30537: PUSH
30538: LD_INT 5
30540: ARRAY
30541: NOT
30542: OR
30543: PUSH
30544: LD_VAR 0 8
30548: PUSH
30549: LD_INT 6
30551: ARRAY
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 7
30561: PUSH
30562: LD_INT 9
30564: PUSH
30565: LD_INT 10
30567: PUSH
30568: LD_INT 11
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: IN
30579: NOT
30580: OR
30581: IFFALSE 30587
// exit ;
30583: POP
30584: POP
30585: GO 30670
// end ;
30587: GO 30258
30589: POP
30590: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30591: LD_VAR 0 9
30595: PPUSH
30596: LD_VAR 0 3
30600: PPUSH
30601: LD_VAR 0 4
30605: PPUSH
30606: LD_INT 20
30608: PPUSH
30609: CALL 22616 0 4
30613: PUSH
30614: LD_INT 4
30616: ARRAY
30617: IFFALSE 30621
// exit ;
30619: GO 30670
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30621: LD_VAR 0 2
30625: PUSH
30626: LD_INT 29
30628: PUSH
30629: LD_INT 30
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: IN
30636: PUSH
30637: LD_VAR 0 3
30641: PPUSH
30642: LD_VAR 0 4
30646: PPUSH
30647: LD_VAR 0 9
30651: PPUSH
30652: CALL_OW 440
30656: NOT
30657: AND
30658: IFFALSE 30662
// exit ;
30660: GO 30670
// result := true ;
30662: LD_ADDR_VAR 0 6
30666: PUSH
30667: LD_INT 1
30669: ST_TO_ADDR
// end ;
30670: LD_VAR 0 6
30674: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30675: LD_INT 0
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
30711: PPUSH
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
// result = [ ] ;
30735: LD_ADDR_VAR 0 7
30739: PUSH
30740: EMPTY
30741: ST_TO_ADDR
// temp_list = [ ] ;
30742: LD_ADDR_VAR 0 9
30746: PUSH
30747: EMPTY
30748: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30749: LD_VAR 0 4
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: LD_INT 3
30765: PUSH
30766: LD_INT 4
30768: PUSH
30769: LD_INT 5
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: IN
30780: NOT
30781: PUSH
30782: LD_VAR 0 1
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: IN
30797: PUSH
30798: LD_VAR 0 5
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: IN
30817: NOT
30818: AND
30819: OR
30820: IFFALSE 30824
// exit ;
30822: GO 49215
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30824: LD_VAR 0 1
30828: PUSH
30829: LD_INT 6
30831: PUSH
30832: LD_INT 7
30834: PUSH
30835: LD_INT 8
30837: PUSH
30838: LD_INT 13
30840: PUSH
30841: LD_INT 12
30843: PUSH
30844: LD_INT 15
30846: PUSH
30847: LD_INT 11
30849: PUSH
30850: LD_INT 14
30852: PUSH
30853: LD_INT 10
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: IN
30867: IFFALSE 30877
// btype = b_lab ;
30869: LD_ADDR_VAR 0 1
30873: PUSH
30874: LD_INT 6
30876: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30877: LD_VAR 0 6
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: LIST
30895: IN
30896: NOT
30897: PUSH
30898: LD_VAR 0 1
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: LD_INT 6
30917: PUSH
30918: LD_INT 36
30920: PUSH
30921: LD_INT 4
30923: PUSH
30924: LD_INT 5
30926: PUSH
30927: LD_INT 31
30929: PUSH
30930: LD_INT 32
30932: PUSH
30933: LD_INT 33
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: IN
30949: NOT
30950: PUSH
30951: LD_VAR 0 6
30955: PUSH
30956: LD_INT 1
30958: EQUAL
30959: AND
30960: OR
30961: PUSH
30962: LD_VAR 0 1
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: IN
30977: NOT
30978: PUSH
30979: LD_VAR 0 6
30983: PUSH
30984: LD_INT 2
30986: EQUAL
30987: AND
30988: OR
30989: IFFALSE 30999
// mode = 0 ;
30991: LD_ADDR_VAR 0 6
30995: PUSH
30996: LD_INT 0
30998: ST_TO_ADDR
// case mode of 0 :
30999: LD_VAR 0 6
31003: PUSH
31004: LD_INT 0
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 42465
31012: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31013: LD_ADDR_VAR 0 11
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31206: LD_ADDR_VAR 0 12
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 3
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31402: LD_ADDR_VAR 0 13
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 3
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 3
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 3
31573: NEG
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31601: LD_ADDR_VAR 0 14
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: LD_INT 1
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: LD_INT 3
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 3
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 2
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31797: LD_ADDR_VAR 0 15
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 3
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31990: LD_ADDR_VAR 0 16
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: LD_INT 3
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32183: LD_ADDR_VAR 0 17
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32413: LD_ADDR_VAR 0 18
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32643: LD_ADDR_VAR 0 19
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 2
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32873: LD_ADDR_VAR 0 20
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 2
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33103: LD_ADDR_VAR 0 21
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33333: LD_ADDR_VAR 0 22
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: NEG
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33563: LD_ADDR_VAR 0 23
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: NEG
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 3
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: LD_INT 3
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33843: LD_ADDR_VAR 0 24
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 2
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34119: LD_ADDR_VAR 0 25
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 2
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 1
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: NEG
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: LD_INT 2
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 3
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34393: LD_ADDR_VAR 0 26
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: NEG
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: NEG
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 3
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34669: LD_ADDR_VAR 0 27
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34949: LD_ADDR_VAR 0 28
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: LD_INT 2
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 3
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35231: LD_ADDR_VAR 0 29
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: LD_INT 2
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: LD_INT 3
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 3
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: NEG
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35510: LD_ADDR_VAR 0 30
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 3
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 2
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 3
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 3
35753: NEG
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35788: LD_ADDR_VAR 0 31
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: NEG
35978: PUSH
35979: LD_INT 3
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 3
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 3
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 3
36031: NEG
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36066: LD_ADDR_VAR 0 32
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 3
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: LD_INT 2
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 3
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 2
36298: NEG
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 3
36309: NEG
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36344: LD_ADDR_VAR 0 33
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: NEG
36535: PUSH
36536: LD_INT 3
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 3
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 3
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 3
36588: NEG
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36623: LD_ADDR_VAR 0 34
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 2
36790: NEG
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36903: LD_ADDR_VAR 0 35
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 2
36994: NEG
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37015: LD_ADDR_VAR 0 36
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37127: LD_ADDR_VAR 0 37
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37239: LD_ADDR_VAR 0 38
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37351: LD_ADDR_VAR 0 39
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37463: LD_ADDR_VAR 0 40
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37575: LD_ADDR_VAR 0 41
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: LD_INT 2
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: NEG
37766: PUSH
37767: LD_INT 3
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 3
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: NEG
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 3
37860: NEG
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 3
37872: NEG
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 3
37884: NEG
37885: PUSH
37886: LD_INT 3
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37925: LD_ADDR_VAR 0 42
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: NEG
38128: PUSH
38129: LD_INT 3
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: LD_INT 3
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38275: LD_ADDR_VAR 0 43
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: NEG
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 3
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38623: LD_ADDR_VAR 0 44
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 3
38897: NEG
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 3
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 3
38920: NEG
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: LD_INT 3
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38973: LD_ADDR_VAR 0 45
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 3
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 3
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: LD_INT 3
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: NEG
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39323: LD_ADDR_VAR 0 46
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 3
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 3
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39671: LD_ADDR_VAR 0 47
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39822: LD_ADDR_VAR 0 48
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39969: LD_ADDR_VAR 0 49
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40113: LD_ADDR_VAR 0 50
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40257: LD_ADDR_VAR 0 51
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40404: LD_ADDR_VAR 0 52
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40555: LD_ADDR_VAR 0 53
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40785: LD_ADDR_VAR 0 54
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41015: LD_ADDR_VAR 0 55
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41245: LD_ADDR_VAR 0 56
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41475: LD_ADDR_VAR 0 57
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41705: LD_ADDR_VAR 0 58
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41935: LD_ADDR_VAR 0 59
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42023: LD_ADDR_VAR 0 60
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42111: LD_ADDR_VAR 0 61
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42199: LD_ADDR_VAR 0 62
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42287: LD_ADDR_VAR 0 63
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42375: LD_ADDR_VAR 0 64
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// end ; 1 :
42463: GO 48360
42465: LD_INT 1
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42473
42471: GO 45096
42473: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42474: LD_ADDR_VAR 0 11
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42518: LD_ADDR_VAR 0 12
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42559: LD_ADDR_VAR 0 13
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42599: LD_ADDR_VAR 0 14
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42640: LD_ADDR_VAR 0 15
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 3
42658: NEG
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42684: LD_ADDR_VAR 0 16
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: NEG
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42730: LD_ADDR_VAR 0 17
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42774: LD_ADDR_VAR 0 18
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42815: LD_ADDR_VAR 0 19
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42855: LD_ADDR_VAR 0 20
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42896: LD_ADDR_VAR 0 21
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 3
42925: NEG
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42940: LD_ADDR_VAR 0 22
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: LD_INT 3
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 3
42959: NEG
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 3
42971: NEG
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42986: LD_ADDR_VAR 0 23
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 4
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43030: LD_ADDR_VAR 0 24
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 4
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43071: LD_ADDR_VAR 0 25
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 4
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: PUSH
43099: LD_INT 4
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43111: LD_ADDR_VAR 0 26
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 4
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 3
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43152: LD_ADDR_VAR 0 27
43156: PUSH
43157: LD_INT 3
43159: NEG
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 4
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43196: LD_ADDR_VAR 0 28
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: LD_INT 3
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 3
43215: NEG
43216: PUSH
43217: LD_INT 4
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 4
43227: NEG
43228: PUSH
43229: LD_INT 3
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43242: LD_ADDR_VAR 0 29
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 4
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 4
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 3
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: LD_INT 5
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 5
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 4
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 6
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 6
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 5
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43397: LD_ADDR_VAR 0 30
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 3
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 4
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 4
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 4
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 5
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 6
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 6
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43540: LD_ADDR_VAR 0 31
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 4
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 4
43587: PUSH
43588: LD_INT 4
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 5
43607: PUSH
43608: LD_INT 4
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 5
43617: PUSH
43618: LD_INT 5
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 4
43627: PUSH
43628: LD_INT 5
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 6
43637: PUSH
43638: LD_INT 5
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 6
43647: PUSH
43648: LD_INT 6
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 5
43657: PUSH
43658: LD_INT 6
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43679: LD_ADDR_VAR 0 32
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 4
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 5
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 5
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 4
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 6
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 6
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43822: LD_ADDR_VAR 0 33
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 4
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 4
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 4
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 5
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 5
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 5
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 6
43942: NEG
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 6
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43977: LD_ADDR_VAR 0 34
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: LD_INT 3
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: NEG
44021: PUSH
44022: LD_INT 4
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 4
44032: NEG
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 4
44044: NEG
44045: PUSH
44046: LD_INT 4
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 4
44056: NEG
44057: PUSH
44058: LD_INT 5
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 5
44068: NEG
44069: PUSH
44070: LD_INT 4
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 5
44080: NEG
44081: PUSH
44082: LD_INT 5
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 5
44092: NEG
44093: PUSH
44094: LD_INT 6
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 6
44104: NEG
44105: PUSH
44106: LD_INT 5
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 6
44116: NEG
44117: PUSH
44118: LD_INT 6
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44140: LD_ADDR_VAR 0 41
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 3
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44184: LD_ADDR_VAR 0 42
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44225: LD_ADDR_VAR 0 43
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44265: LD_ADDR_VAR 0 44
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44306: LD_ADDR_VAR 0 45
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44350: LD_ADDR_VAR 0 46
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 3
44381: NEG
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44396: LD_ADDR_VAR 0 47
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: LD_INT 3
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 3
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44429: LD_ADDR_VAR 0 48
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44460: LD_ADDR_VAR 0 49
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44489: LD_ADDR_VAR 0 50
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 3
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44518: LD_ADDR_VAR 0 51
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44549: LD_ADDR_VAR 0 52
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44582: LD_ADDR_VAR 0 53
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 3
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44626: LD_ADDR_VAR 0 54
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44667: LD_ADDR_VAR 0 55
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44707: LD_ADDR_VAR 0 56
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 3
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44748: LD_ADDR_VAR 0 57
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44792: LD_ADDR_VAR 0 58
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: LD_INT 3
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 3
44811: NEG
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: NEG
44824: PUSH
44825: LD_INT 3
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44838: LD_ADDR_VAR 0 59
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44882: LD_ADDR_VAR 0 60
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44923: LD_ADDR_VAR 0 61
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44963: LD_ADDR_VAR 0 62
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45004: LD_ADDR_VAR 0 63
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45048: LD_ADDR_VAR 0 64
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// end ; 2 :
45094: GO 48360
45096: LD_INT 2
45098: DOUBLE
45099: EQUAL
45100: IFTRUE 45104
45102: GO 48359
45104: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45105: LD_ADDR_VAR 0 29
45109: PUSH
45110: LD_INT 4
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 4
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 5
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 5
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 4
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 5
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 3
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 4
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 4
45235: PUSH
45236: LD_INT 4
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 4
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 4
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 4
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 4
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 5
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 5
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 4
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 5
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 3
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 4
45444: NEG
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 4
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 4
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 4
45502: NEG
45503: PUSH
45504: LD_INT 5
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: NEG
45515: PUSH
45516: LD_INT 4
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: LD_INT 3
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 4
45538: NEG
45539: PUSH
45540: LD_INT 3
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 5
45550: NEG
45551: PUSH
45552: LD_INT 4
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 5
45562: NEG
45563: PUSH
45564: LD_INT 5
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: NEG
45575: PUSH
45576: LD_INT 5
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 5
45586: NEG
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45643: LD_ADDR_VAR 0 30
45647: PUSH
45648: LD_INT 4
45650: PUSH
45651: LD_INT 4
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 4
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 5
45670: PUSH
45671: LD_INT 4
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 5
45680: PUSH
45681: LD_INT 5
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 4
45690: PUSH
45691: LD_INT 5
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 5
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: LD_INT 5
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 3
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 4
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 4
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 4
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 4
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 4
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 3
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 3
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 4
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 5
45889: NEG
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 5
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 5
45912: NEG
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: LD_INT 3
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: NEG
45948: PUSH
45949: LD_INT 4
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 3
45983: NEG
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 4
45995: NEG
45996: PUSH
45997: LD_INT 3
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 4
46007: NEG
46008: PUSH
46009: LD_INT 4
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: LD_INT 4
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 4
46031: NEG
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 4
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 5
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 4
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 3
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 4
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 5
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46190: LD_ADDR_VAR 0 31
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 4
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 4
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 5
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 5
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 4
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 5
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: NEG
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 3
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 4
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 4
46392: NEG
46393: PUSH
46394: LD_INT 4
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 4
46404: NEG
46405: PUSH
46406: LD_INT 5
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: LD_INT 4
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 4
46440: NEG
46441: PUSH
46442: LD_INT 3
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 5
46452: NEG
46453: PUSH
46454: LD_INT 4
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 5
46464: NEG
46465: PUSH
46466: LD_INT 5
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: LD_INT 5
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 5
46488: NEG
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 4
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 3
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 4
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 4
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 4
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 4
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 5
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 5
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 4
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 5
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46740: LD_ADDR_VAR 0 32
46744: PUSH
46745: LD_INT 4
46747: NEG
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 4
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 3
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 4
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 5
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 5
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 5
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: LD_INT 3
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: LD_INT 4
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: LD_INT 3
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: NEG
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 4
46909: NEG
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: LD_INT 4
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 4
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 4
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 4
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 5
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 4
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 3
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 4
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 5
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: LD_INT 5
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 4
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 4
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 4
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: LD_INT 4
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 4
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 5
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 5
47182: PUSH
47183: LD_INT 5
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 4
47192: PUSH
47193: LD_INT 5
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: LD_INT 4
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 5
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: LD_INT 5
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47287: LD_ADDR_VAR 0 33
47291: PUSH
47292: LD_INT 4
47294: NEG
47295: PUSH
47296: LD_INT 4
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: LD_INT 5
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: LD_INT 4
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: LD_INT 3
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: NEG
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 5
47354: NEG
47355: PUSH
47356: LD_INT 4
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 5
47366: NEG
47367: PUSH
47368: LD_INT 5
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: LD_INT 5
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 5
47390: NEG
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 3
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 4
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 4
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: LD_INT 4
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 4
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 5
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 5
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 4
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 4
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 4
47627: PUSH
47628: LD_INT 4
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: LD_INT 4
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 4
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 4
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 3
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 4
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 5
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 5
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 4
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 5
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47825: LD_ADDR_VAR 0 34
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 4
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 5
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 4
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 3
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 4
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 5
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 5
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 3
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 4
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 4
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 4
48027: PUSH
48028: LD_INT 4
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 4
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 5
48047: PUSH
48048: LD_INT 4
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 5
48057: PUSH
48058: LD_INT 5
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 4
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 3
48077: PUSH
48078: LD_INT 4
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 4
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 4
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 3
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 4
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 4
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 4
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 5
48266: NEG
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 5
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 5
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// end ; end ;
48357: GO 48360
48359: POP
// case btype of b_depot , b_warehouse :
48360: LD_VAR 0 1
48364: PUSH
48365: LD_INT 0
48367: DOUBLE
48368: EQUAL
48369: IFTRUE 48379
48371: LD_INT 1
48373: DOUBLE
48374: EQUAL
48375: IFTRUE 48379
48377: GO 48580
48379: POP
// case nation of nation_american :
48380: LD_VAR 0 5
48384: PUSH
48385: LD_INT 1
48387: DOUBLE
48388: EQUAL
48389: IFTRUE 48393
48391: GO 48449
48393: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48394: LD_ADDR_VAR 0 9
48398: PUSH
48399: LD_VAR 0 11
48403: PUSH
48404: LD_VAR 0 12
48408: PUSH
48409: LD_VAR 0 13
48413: PUSH
48414: LD_VAR 0 14
48418: PUSH
48419: LD_VAR 0 15
48423: PUSH
48424: LD_VAR 0 16
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 1
48444: PLUS
48445: ARRAY
48446: ST_TO_ADDR
48447: GO 48578
48449: LD_INT 2
48451: DOUBLE
48452: EQUAL
48453: IFTRUE 48457
48455: GO 48513
48457: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48458: LD_ADDR_VAR 0 9
48462: PUSH
48463: LD_VAR 0 17
48467: PUSH
48468: LD_VAR 0 18
48472: PUSH
48473: LD_VAR 0 19
48477: PUSH
48478: LD_VAR 0 20
48482: PUSH
48483: LD_VAR 0 21
48487: PUSH
48488: LD_VAR 0 22
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: PUSH
48501: LD_VAR 0 4
48505: PUSH
48506: LD_INT 1
48508: PLUS
48509: ARRAY
48510: ST_TO_ADDR
48511: GO 48578
48513: LD_INT 3
48515: DOUBLE
48516: EQUAL
48517: IFTRUE 48521
48519: GO 48577
48521: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48522: LD_ADDR_VAR 0 9
48526: PUSH
48527: LD_VAR 0 23
48531: PUSH
48532: LD_VAR 0 24
48536: PUSH
48537: LD_VAR 0 25
48541: PUSH
48542: LD_VAR 0 26
48546: PUSH
48547: LD_VAR 0 27
48551: PUSH
48552: LD_VAR 0 28
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: PUSH
48565: LD_VAR 0 4
48569: PUSH
48570: LD_INT 1
48572: PLUS
48573: ARRAY
48574: ST_TO_ADDR
48575: GO 48578
48577: POP
48578: GO 49133
48580: LD_INT 2
48582: DOUBLE
48583: EQUAL
48584: IFTRUE 48594
48586: LD_INT 3
48588: DOUBLE
48589: EQUAL
48590: IFTRUE 48594
48592: GO 48650
48594: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48595: LD_ADDR_VAR 0 9
48599: PUSH
48600: LD_VAR 0 29
48604: PUSH
48605: LD_VAR 0 30
48609: PUSH
48610: LD_VAR 0 31
48614: PUSH
48615: LD_VAR 0 32
48619: PUSH
48620: LD_VAR 0 33
48624: PUSH
48625: LD_VAR 0 34
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: PUSH
48638: LD_VAR 0 4
48642: PUSH
48643: LD_INT 1
48645: PLUS
48646: ARRAY
48647: ST_TO_ADDR
48648: GO 49133
48650: LD_INT 16
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48712
48656: LD_INT 17
48658: DOUBLE
48659: EQUAL
48660: IFTRUE 48712
48662: LD_INT 18
48664: DOUBLE
48665: EQUAL
48666: IFTRUE 48712
48668: LD_INT 19
48670: DOUBLE
48671: EQUAL
48672: IFTRUE 48712
48674: LD_INT 22
48676: DOUBLE
48677: EQUAL
48678: IFTRUE 48712
48680: LD_INT 20
48682: DOUBLE
48683: EQUAL
48684: IFTRUE 48712
48686: LD_INT 21
48688: DOUBLE
48689: EQUAL
48690: IFTRUE 48712
48692: LD_INT 23
48694: DOUBLE
48695: EQUAL
48696: IFTRUE 48712
48698: LD_INT 24
48700: DOUBLE
48701: EQUAL
48702: IFTRUE 48712
48704: LD_INT 25
48706: DOUBLE
48707: EQUAL
48708: IFTRUE 48712
48710: GO 48768
48712: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48713: LD_ADDR_VAR 0 9
48717: PUSH
48718: LD_VAR 0 35
48722: PUSH
48723: LD_VAR 0 36
48727: PUSH
48728: LD_VAR 0 37
48732: PUSH
48733: LD_VAR 0 38
48737: PUSH
48738: LD_VAR 0 39
48742: PUSH
48743: LD_VAR 0 40
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: PUSH
48756: LD_VAR 0 4
48760: PUSH
48761: LD_INT 1
48763: PLUS
48764: ARRAY
48765: ST_TO_ADDR
48766: GO 49133
48768: LD_INT 6
48770: DOUBLE
48771: EQUAL
48772: IFTRUE 48824
48774: LD_INT 7
48776: DOUBLE
48777: EQUAL
48778: IFTRUE 48824
48780: LD_INT 8
48782: DOUBLE
48783: EQUAL
48784: IFTRUE 48824
48786: LD_INT 13
48788: DOUBLE
48789: EQUAL
48790: IFTRUE 48824
48792: LD_INT 12
48794: DOUBLE
48795: EQUAL
48796: IFTRUE 48824
48798: LD_INT 15
48800: DOUBLE
48801: EQUAL
48802: IFTRUE 48824
48804: LD_INT 11
48806: DOUBLE
48807: EQUAL
48808: IFTRUE 48824
48810: LD_INT 14
48812: DOUBLE
48813: EQUAL
48814: IFTRUE 48824
48816: LD_INT 10
48818: DOUBLE
48819: EQUAL
48820: IFTRUE 48824
48822: GO 48880
48824: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48825: LD_ADDR_VAR 0 9
48829: PUSH
48830: LD_VAR 0 41
48834: PUSH
48835: LD_VAR 0 42
48839: PUSH
48840: LD_VAR 0 43
48844: PUSH
48845: LD_VAR 0 44
48849: PUSH
48850: LD_VAR 0 45
48854: PUSH
48855: LD_VAR 0 46
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: PUSH
48868: LD_VAR 0 4
48872: PUSH
48873: LD_INT 1
48875: PLUS
48876: ARRAY
48877: ST_TO_ADDR
48878: GO 49133
48880: LD_INT 36
48882: DOUBLE
48883: EQUAL
48884: IFTRUE 48888
48886: GO 48944
48888: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48889: LD_ADDR_VAR 0 9
48893: PUSH
48894: LD_VAR 0 47
48898: PUSH
48899: LD_VAR 0 48
48903: PUSH
48904: LD_VAR 0 49
48908: PUSH
48909: LD_VAR 0 50
48913: PUSH
48914: LD_VAR 0 51
48918: PUSH
48919: LD_VAR 0 52
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: PUSH
48932: LD_VAR 0 4
48936: PUSH
48937: LD_INT 1
48939: PLUS
48940: ARRAY
48941: ST_TO_ADDR
48942: GO 49133
48944: LD_INT 4
48946: DOUBLE
48947: EQUAL
48948: IFTRUE 48970
48950: LD_INT 5
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48970
48956: LD_INT 34
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48970
48962: LD_INT 37
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 48970
48968: GO 49026
48970: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48971: LD_ADDR_VAR 0 9
48975: PUSH
48976: LD_VAR 0 53
48980: PUSH
48981: LD_VAR 0 54
48985: PUSH
48986: LD_VAR 0 55
48990: PUSH
48991: LD_VAR 0 56
48995: PUSH
48996: LD_VAR 0 57
49000: PUSH
49001: LD_VAR 0 58
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: PUSH
49014: LD_VAR 0 4
49018: PUSH
49019: LD_INT 1
49021: PLUS
49022: ARRAY
49023: ST_TO_ADDR
49024: GO 49133
49026: LD_INT 31
49028: DOUBLE
49029: EQUAL
49030: IFTRUE 49076
49032: LD_INT 32
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49076
49038: LD_INT 33
49040: DOUBLE
49041: EQUAL
49042: IFTRUE 49076
49044: LD_INT 27
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49076
49050: LD_INT 26
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49076
49056: LD_INT 28
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49076
49062: LD_INT 29
49064: DOUBLE
49065: EQUAL
49066: IFTRUE 49076
49068: LD_INT 30
49070: DOUBLE
49071: EQUAL
49072: IFTRUE 49076
49074: GO 49132
49076: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49077: LD_ADDR_VAR 0 9
49081: PUSH
49082: LD_VAR 0 59
49086: PUSH
49087: LD_VAR 0 60
49091: PUSH
49092: LD_VAR 0 61
49096: PUSH
49097: LD_VAR 0 62
49101: PUSH
49102: LD_VAR 0 63
49106: PUSH
49107: LD_VAR 0 64
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: PUSH
49120: LD_VAR 0 4
49124: PUSH
49125: LD_INT 1
49127: PLUS
49128: ARRAY
49129: ST_TO_ADDR
49130: GO 49133
49132: POP
// temp_list2 = [ ] ;
49133: LD_ADDR_VAR 0 10
49137: PUSH
49138: EMPTY
49139: ST_TO_ADDR
// for i in temp_list do
49140: LD_ADDR_VAR 0 8
49144: PUSH
49145: LD_VAR 0 9
49149: PUSH
49150: FOR_IN
49151: IFFALSE 49203
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49153: LD_ADDR_VAR 0 10
49157: PUSH
49158: LD_VAR 0 10
49162: PUSH
49163: LD_VAR 0 8
49167: PUSH
49168: LD_INT 1
49170: ARRAY
49171: PUSH
49172: LD_VAR 0 2
49176: PLUS
49177: PUSH
49178: LD_VAR 0 8
49182: PUSH
49183: LD_INT 2
49185: ARRAY
49186: PUSH
49187: LD_VAR 0 3
49191: PLUS
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: ADD
49200: ST_TO_ADDR
49201: GO 49150
49203: POP
49204: POP
// result = temp_list2 ;
49205: LD_ADDR_VAR 0 7
49209: PUSH
49210: LD_VAR 0 10
49214: ST_TO_ADDR
// end ;
49215: LD_VAR 0 7
49219: RET
// export function EnemyInRange ( unit , dist ) ; begin
49220: LD_INT 0
49222: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49223: LD_ADDR_VAR 0 3
49227: PUSH
49228: LD_VAR 0 1
49232: PPUSH
49233: CALL_OW 255
49237: PPUSH
49238: LD_VAR 0 1
49242: PPUSH
49243: CALL_OW 250
49247: PPUSH
49248: LD_VAR 0 1
49252: PPUSH
49253: CALL_OW 251
49257: PPUSH
49258: LD_VAR 0 2
49262: PPUSH
49263: CALL 22616 0 4
49267: PUSH
49268: LD_INT 4
49270: ARRAY
49271: ST_TO_ADDR
// end ;
49272: LD_VAR 0 3
49276: RET
// export function PlayerSeeMe ( unit ) ; begin
49277: LD_INT 0
49279: PPUSH
// result := See ( your_side , unit ) ;
49280: LD_ADDR_VAR 0 2
49284: PUSH
49285: LD_OWVAR 2
49289: PPUSH
49290: LD_VAR 0 1
49294: PPUSH
49295: CALL_OW 292
49299: ST_TO_ADDR
// end ;
49300: LD_VAR 0 2
49304: RET
// export function ReverseDir ( unit ) ; begin
49305: LD_INT 0
49307: PPUSH
// if not unit then
49308: LD_VAR 0 1
49312: NOT
49313: IFFALSE 49317
// exit ;
49315: GO 49340
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49317: LD_ADDR_VAR 0 2
49321: PUSH
49322: LD_VAR 0 1
49326: PPUSH
49327: CALL_OW 254
49331: PUSH
49332: LD_INT 3
49334: PLUS
49335: PUSH
49336: LD_INT 6
49338: MOD
49339: ST_TO_ADDR
// end ;
49340: LD_VAR 0 2
49344: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49345: LD_INT 0
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
// if not hexes then
49352: LD_VAR 0 2
49356: NOT
49357: IFFALSE 49361
// exit ;
49359: GO 49509
// dist := 9999 ;
49361: LD_ADDR_VAR 0 5
49365: PUSH
49366: LD_INT 9999
49368: ST_TO_ADDR
// for i = 1 to hexes do
49369: LD_ADDR_VAR 0 4
49373: PUSH
49374: DOUBLE
49375: LD_INT 1
49377: DEC
49378: ST_TO_ADDR
49379: LD_VAR 0 2
49383: PUSH
49384: FOR_TO
49385: IFFALSE 49497
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49387: LD_VAR 0 1
49391: PPUSH
49392: LD_VAR 0 2
49396: PUSH
49397: LD_VAR 0 4
49401: ARRAY
49402: PUSH
49403: LD_INT 1
49405: ARRAY
49406: PPUSH
49407: LD_VAR 0 2
49411: PUSH
49412: LD_VAR 0 4
49416: ARRAY
49417: PUSH
49418: LD_INT 2
49420: ARRAY
49421: PPUSH
49422: CALL_OW 297
49426: PUSH
49427: LD_VAR 0 5
49431: LESS
49432: IFFALSE 49495
// begin hex := hexes [ i ] ;
49434: LD_ADDR_VAR 0 7
49438: PUSH
49439: LD_VAR 0 2
49443: PUSH
49444: LD_VAR 0 4
49448: ARRAY
49449: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49450: LD_ADDR_VAR 0 5
49454: PUSH
49455: LD_VAR 0 1
49459: PPUSH
49460: LD_VAR 0 2
49464: PUSH
49465: LD_VAR 0 4
49469: ARRAY
49470: PUSH
49471: LD_INT 1
49473: ARRAY
49474: PPUSH
49475: LD_VAR 0 2
49479: PUSH
49480: LD_VAR 0 4
49484: ARRAY
49485: PUSH
49486: LD_INT 2
49488: ARRAY
49489: PPUSH
49490: CALL_OW 297
49494: ST_TO_ADDR
// end ; end ;
49495: GO 49384
49497: POP
49498: POP
// result := hex ;
49499: LD_ADDR_VAR 0 3
49503: PUSH
49504: LD_VAR 0 7
49508: ST_TO_ADDR
// end ;
49509: LD_VAR 0 3
49513: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49514: LD_INT 0
49516: PPUSH
49517: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49518: LD_VAR 0 1
49522: NOT
49523: PUSH
49524: LD_VAR 0 1
49528: PUSH
49529: LD_INT 21
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 23
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PPUSH
49553: CALL_OW 69
49557: IN
49558: NOT
49559: OR
49560: IFFALSE 49564
// exit ;
49562: GO 49611
// for i = 1 to 3 do
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: DOUBLE
49570: LD_INT 1
49572: DEC
49573: ST_TO_ADDR
49574: LD_INT 3
49576: PUSH
49577: FOR_TO
49578: IFFALSE 49609
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49580: LD_VAR 0 1
49584: PPUSH
49585: CALL_OW 250
49589: PPUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: CALL_OW 251
49599: PPUSH
49600: LD_INT 1
49602: PPUSH
49603: CALL_OW 453
49607: GO 49577
49609: POP
49610: POP
// end ;
49611: LD_VAR 0 2
49615: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49616: LD_INT 0
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49624: LD_VAR 0 1
49628: NOT
49629: PUSH
49630: LD_VAR 0 2
49634: NOT
49635: OR
49636: PUSH
49637: LD_VAR 0 1
49641: PPUSH
49642: CALL_OW 314
49646: OR
49647: IFFALSE 49651
// exit ;
49649: GO 50092
// x := GetX ( enemy_unit ) ;
49651: LD_ADDR_VAR 0 7
49655: PUSH
49656: LD_VAR 0 2
49660: PPUSH
49661: CALL_OW 250
49665: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49666: LD_ADDR_VAR 0 8
49670: PUSH
49671: LD_VAR 0 2
49675: PPUSH
49676: CALL_OW 251
49680: ST_TO_ADDR
// if not x or not y then
49681: LD_VAR 0 7
49685: NOT
49686: PUSH
49687: LD_VAR 0 8
49691: NOT
49692: OR
49693: IFFALSE 49697
// exit ;
49695: GO 50092
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49697: LD_ADDR_VAR 0 6
49701: PUSH
49702: LD_VAR 0 7
49706: PPUSH
49707: LD_INT 0
49709: PPUSH
49710: LD_INT 4
49712: PPUSH
49713: CALL_OW 272
49717: PUSH
49718: LD_VAR 0 8
49722: PPUSH
49723: LD_INT 0
49725: PPUSH
49726: LD_INT 4
49728: PPUSH
49729: CALL_OW 273
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_VAR 0 7
49742: PPUSH
49743: LD_INT 1
49745: PPUSH
49746: LD_INT 4
49748: PPUSH
49749: CALL_OW 272
49753: PUSH
49754: LD_VAR 0 8
49758: PPUSH
49759: LD_INT 1
49761: PPUSH
49762: LD_INT 4
49764: PPUSH
49765: CALL_OW 273
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_VAR 0 7
49778: PPUSH
49779: LD_INT 2
49781: PPUSH
49782: LD_INT 4
49784: PPUSH
49785: CALL_OW 272
49789: PUSH
49790: LD_VAR 0 8
49794: PPUSH
49795: LD_INT 2
49797: PPUSH
49798: LD_INT 4
49800: PPUSH
49801: CALL_OW 273
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_VAR 0 7
49814: PPUSH
49815: LD_INT 3
49817: PPUSH
49818: LD_INT 4
49820: PPUSH
49821: CALL_OW 272
49825: PUSH
49826: LD_VAR 0 8
49830: PPUSH
49831: LD_INT 3
49833: PPUSH
49834: LD_INT 4
49836: PPUSH
49837: CALL_OW 273
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_VAR 0 7
49850: PPUSH
49851: LD_INT 4
49853: PPUSH
49854: LD_INT 4
49856: PPUSH
49857: CALL_OW 272
49861: PUSH
49862: LD_VAR 0 8
49866: PPUSH
49867: LD_INT 4
49869: PPUSH
49870: LD_INT 4
49872: PPUSH
49873: CALL_OW 273
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_VAR 0 7
49886: PPUSH
49887: LD_INT 5
49889: PPUSH
49890: LD_INT 4
49892: PPUSH
49893: CALL_OW 272
49897: PUSH
49898: LD_VAR 0 8
49902: PPUSH
49903: LD_INT 5
49905: PPUSH
49906: LD_INT 4
49908: PPUSH
49909: CALL_OW 273
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// for i = tmp downto 1 do
49926: LD_ADDR_VAR 0 4
49930: PUSH
49931: DOUBLE
49932: LD_VAR 0 6
49936: INC
49937: ST_TO_ADDR
49938: LD_INT 1
49940: PUSH
49941: FOR_DOWNTO
49942: IFFALSE 50043
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49944: LD_VAR 0 6
49948: PUSH
49949: LD_VAR 0 4
49953: ARRAY
49954: PUSH
49955: LD_INT 1
49957: ARRAY
49958: PPUSH
49959: LD_VAR 0 6
49963: PUSH
49964: LD_VAR 0 4
49968: ARRAY
49969: PUSH
49970: LD_INT 2
49972: ARRAY
49973: PPUSH
49974: CALL_OW 488
49978: NOT
49979: PUSH
49980: LD_VAR 0 6
49984: PUSH
49985: LD_VAR 0 4
49989: ARRAY
49990: PUSH
49991: LD_INT 1
49993: ARRAY
49994: PPUSH
49995: LD_VAR 0 6
49999: PUSH
50000: LD_VAR 0 4
50004: ARRAY
50005: PUSH
50006: LD_INT 2
50008: ARRAY
50009: PPUSH
50010: CALL_OW 428
50014: PUSH
50015: LD_INT 0
50017: NONEQUAL
50018: OR
50019: IFFALSE 50041
// tmp := Delete ( tmp , i ) ;
50021: LD_ADDR_VAR 0 6
50025: PUSH
50026: LD_VAR 0 6
50030: PPUSH
50031: LD_VAR 0 4
50035: PPUSH
50036: CALL_OW 3
50040: ST_TO_ADDR
50041: GO 49941
50043: POP
50044: POP
// j := GetClosestHex ( unit , tmp ) ;
50045: LD_ADDR_VAR 0 5
50049: PUSH
50050: LD_VAR 0 1
50054: PPUSH
50055: LD_VAR 0 6
50059: PPUSH
50060: CALL 49345 0 2
50064: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50065: LD_VAR 0 1
50069: PPUSH
50070: LD_VAR 0 5
50074: PUSH
50075: LD_INT 1
50077: ARRAY
50078: PPUSH
50079: LD_VAR 0 5
50083: PUSH
50084: LD_INT 2
50086: ARRAY
50087: PPUSH
50088: CALL_OW 111
// end ;
50092: LD_VAR 0 3
50096: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50097: LD_INT 0
50099: PPUSH
50100: PPUSH
50101: PPUSH
// uc_side = 0 ;
50102: LD_ADDR_OWVAR 20
50106: PUSH
50107: LD_INT 0
50109: ST_TO_ADDR
// uc_nation = 0 ;
50110: LD_ADDR_OWVAR 21
50114: PUSH
50115: LD_INT 0
50117: ST_TO_ADDR
// InitHc_All ( ) ;
50118: CALL_OW 584
// InitVc ;
50122: CALL_OW 20
// if mastodonts then
50126: LD_VAR 0 6
50130: IFFALSE 50197
// for i = 1 to mastodonts do
50132: LD_ADDR_VAR 0 11
50136: PUSH
50137: DOUBLE
50138: LD_INT 1
50140: DEC
50141: ST_TO_ADDR
50142: LD_VAR 0 6
50146: PUSH
50147: FOR_TO
50148: IFFALSE 50195
// begin vc_chassis := 31 ;
50150: LD_ADDR_OWVAR 37
50154: PUSH
50155: LD_INT 31
50157: ST_TO_ADDR
// vc_control := control_rider ;
50158: LD_ADDR_OWVAR 38
50162: PUSH
50163: LD_INT 4
50165: ST_TO_ADDR
// animal := CreateVehicle ;
50166: LD_ADDR_VAR 0 12
50170: PUSH
50171: CALL_OW 45
50175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50176: LD_VAR 0 12
50180: PPUSH
50181: LD_VAR 0 8
50185: PPUSH
50186: LD_INT 0
50188: PPUSH
50189: CALL 52385 0 3
// end ;
50193: GO 50147
50195: POP
50196: POP
// if horses then
50197: LD_VAR 0 5
50201: IFFALSE 50268
// for i = 1 to horses do
50203: LD_ADDR_VAR 0 11
50207: PUSH
50208: DOUBLE
50209: LD_INT 1
50211: DEC
50212: ST_TO_ADDR
50213: LD_VAR 0 5
50217: PUSH
50218: FOR_TO
50219: IFFALSE 50266
// begin hc_class := 21 ;
50221: LD_ADDR_OWVAR 28
50225: PUSH
50226: LD_INT 21
50228: ST_TO_ADDR
// hc_gallery :=  ;
50229: LD_ADDR_OWVAR 33
50233: PUSH
50234: LD_STRING 
50236: ST_TO_ADDR
// animal := CreateHuman ;
50237: LD_ADDR_VAR 0 12
50241: PUSH
50242: CALL_OW 44
50246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50247: LD_VAR 0 12
50251: PPUSH
50252: LD_VAR 0 8
50256: PPUSH
50257: LD_INT 0
50259: PPUSH
50260: CALL 52385 0 3
// end ;
50264: GO 50218
50266: POP
50267: POP
// if birds then
50268: LD_VAR 0 1
50272: IFFALSE 50339
// for i = 1 to birds do
50274: LD_ADDR_VAR 0 11
50278: PUSH
50279: DOUBLE
50280: LD_INT 1
50282: DEC
50283: ST_TO_ADDR
50284: LD_VAR 0 1
50288: PUSH
50289: FOR_TO
50290: IFFALSE 50337
// begin hc_class = 18 ;
50292: LD_ADDR_OWVAR 28
50296: PUSH
50297: LD_INT 18
50299: ST_TO_ADDR
// hc_gallery =  ;
50300: LD_ADDR_OWVAR 33
50304: PUSH
50305: LD_STRING 
50307: ST_TO_ADDR
// animal := CreateHuman ;
50308: LD_ADDR_VAR 0 12
50312: PUSH
50313: CALL_OW 44
50317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50318: LD_VAR 0 12
50322: PPUSH
50323: LD_VAR 0 8
50327: PPUSH
50328: LD_INT 0
50330: PPUSH
50331: CALL 52385 0 3
// end ;
50335: GO 50289
50337: POP
50338: POP
// if tigers then
50339: LD_VAR 0 2
50343: IFFALSE 50427
// for i = 1 to tigers do
50345: LD_ADDR_VAR 0 11
50349: PUSH
50350: DOUBLE
50351: LD_INT 1
50353: DEC
50354: ST_TO_ADDR
50355: LD_VAR 0 2
50359: PUSH
50360: FOR_TO
50361: IFFALSE 50425
// begin hc_class = class_tiger ;
50363: LD_ADDR_OWVAR 28
50367: PUSH
50368: LD_INT 14
50370: ST_TO_ADDR
// hc_gallery =  ;
50371: LD_ADDR_OWVAR 33
50375: PUSH
50376: LD_STRING 
50378: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50379: LD_ADDR_OWVAR 35
50383: PUSH
50384: LD_INT 7
50386: NEG
50387: PPUSH
50388: LD_INT 7
50390: PPUSH
50391: CALL_OW 12
50395: ST_TO_ADDR
// animal := CreateHuman ;
50396: LD_ADDR_VAR 0 12
50400: PUSH
50401: CALL_OW 44
50405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50406: LD_VAR 0 12
50410: PPUSH
50411: LD_VAR 0 8
50415: PPUSH
50416: LD_INT 0
50418: PPUSH
50419: CALL 52385 0 3
// end ;
50423: GO 50360
50425: POP
50426: POP
// if apemans then
50427: LD_VAR 0 3
50431: IFFALSE 50554
// for i = 1 to apemans do
50433: LD_ADDR_VAR 0 11
50437: PUSH
50438: DOUBLE
50439: LD_INT 1
50441: DEC
50442: ST_TO_ADDR
50443: LD_VAR 0 3
50447: PUSH
50448: FOR_TO
50449: IFFALSE 50552
// begin hc_class = class_apeman ;
50451: LD_ADDR_OWVAR 28
50455: PUSH
50456: LD_INT 12
50458: ST_TO_ADDR
// hc_gallery =  ;
50459: LD_ADDR_OWVAR 33
50463: PUSH
50464: LD_STRING 
50466: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50467: LD_ADDR_OWVAR 35
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PPUSH
50476: LD_INT 2
50478: PPUSH
50479: CALL_OW 12
50483: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50484: LD_ADDR_OWVAR 31
50488: PUSH
50489: LD_INT 1
50491: PPUSH
50492: LD_INT 3
50494: PPUSH
50495: CALL_OW 12
50499: PUSH
50500: LD_INT 1
50502: PPUSH
50503: LD_INT 3
50505: PPUSH
50506: CALL_OW 12
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// animal := CreateHuman ;
50523: LD_ADDR_VAR 0 12
50527: PUSH
50528: CALL_OW 44
50532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50533: LD_VAR 0 12
50537: PPUSH
50538: LD_VAR 0 8
50542: PPUSH
50543: LD_INT 0
50545: PPUSH
50546: CALL 52385 0 3
// end ;
50550: GO 50448
50552: POP
50553: POP
// if enchidnas then
50554: LD_VAR 0 4
50558: IFFALSE 50625
// for i = 1 to enchidnas do
50560: LD_ADDR_VAR 0 11
50564: PUSH
50565: DOUBLE
50566: LD_INT 1
50568: DEC
50569: ST_TO_ADDR
50570: LD_VAR 0 4
50574: PUSH
50575: FOR_TO
50576: IFFALSE 50623
// begin hc_class = 13 ;
50578: LD_ADDR_OWVAR 28
50582: PUSH
50583: LD_INT 13
50585: ST_TO_ADDR
// hc_gallery =  ;
50586: LD_ADDR_OWVAR 33
50590: PUSH
50591: LD_STRING 
50593: ST_TO_ADDR
// animal := CreateHuman ;
50594: LD_ADDR_VAR 0 12
50598: PUSH
50599: CALL_OW 44
50603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50604: LD_VAR 0 12
50608: PPUSH
50609: LD_VAR 0 8
50613: PPUSH
50614: LD_INT 0
50616: PPUSH
50617: CALL 52385 0 3
// end ;
50621: GO 50575
50623: POP
50624: POP
// if fishes then
50625: LD_VAR 0 7
50629: IFFALSE 50696
// for i = 1 to fishes do
50631: LD_ADDR_VAR 0 11
50635: PUSH
50636: DOUBLE
50637: LD_INT 1
50639: DEC
50640: ST_TO_ADDR
50641: LD_VAR 0 7
50645: PUSH
50646: FOR_TO
50647: IFFALSE 50694
// begin hc_class = 20 ;
50649: LD_ADDR_OWVAR 28
50653: PUSH
50654: LD_INT 20
50656: ST_TO_ADDR
// hc_gallery =  ;
50657: LD_ADDR_OWVAR 33
50661: PUSH
50662: LD_STRING 
50664: ST_TO_ADDR
// animal := CreateHuman ;
50665: LD_ADDR_VAR 0 12
50669: PUSH
50670: CALL_OW 44
50674: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50675: LD_VAR 0 12
50679: PPUSH
50680: LD_VAR 0 9
50684: PPUSH
50685: LD_INT 0
50687: PPUSH
50688: CALL 52385 0 3
// end ;
50692: GO 50646
50694: POP
50695: POP
// end ;
50696: LD_VAR 0 10
50700: RET
// export function WantHeal ( sci , unit ) ; begin
50701: LD_INT 0
50703: PPUSH
// if GetTaskList ( sci ) > 0 then
50704: LD_VAR 0 1
50708: PPUSH
50709: CALL_OW 437
50713: PUSH
50714: LD_INT 0
50716: GREATER
50717: IFFALSE 50787
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50719: LD_VAR 0 1
50723: PPUSH
50724: CALL_OW 437
50728: PUSH
50729: LD_INT 1
50731: ARRAY
50732: PUSH
50733: LD_INT 1
50735: ARRAY
50736: PUSH
50737: LD_STRING l
50739: EQUAL
50740: PUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: CALL_OW 437
50750: PUSH
50751: LD_INT 1
50753: ARRAY
50754: PUSH
50755: LD_INT 4
50757: ARRAY
50758: PUSH
50759: LD_VAR 0 2
50763: EQUAL
50764: AND
50765: IFFALSE 50777
// result := true else
50767: LD_ADDR_VAR 0 3
50771: PUSH
50772: LD_INT 1
50774: ST_TO_ADDR
50775: GO 50785
// result := false ;
50777: LD_ADDR_VAR 0 3
50781: PUSH
50782: LD_INT 0
50784: ST_TO_ADDR
// end else
50785: GO 50795
// result := false ;
50787: LD_ADDR_VAR 0 3
50791: PUSH
50792: LD_INT 0
50794: ST_TO_ADDR
// end ;
50795: LD_VAR 0 3
50799: RET
// export function HealTarget ( sci ) ; begin
50800: LD_INT 0
50802: PPUSH
// if not sci then
50803: LD_VAR 0 1
50807: NOT
50808: IFFALSE 50812
// exit ;
50810: GO 50877
// result := 0 ;
50812: LD_ADDR_VAR 0 2
50816: PUSH
50817: LD_INT 0
50819: ST_TO_ADDR
// if GetTaskList ( sci ) then
50820: LD_VAR 0 1
50824: PPUSH
50825: CALL_OW 437
50829: IFFALSE 50877
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50831: LD_VAR 0 1
50835: PPUSH
50836: CALL_OW 437
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: PUSH
50845: LD_INT 1
50847: ARRAY
50848: PUSH
50849: LD_STRING l
50851: EQUAL
50852: IFFALSE 50877
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50854: LD_ADDR_VAR 0 2
50858: PUSH
50859: LD_VAR 0 1
50863: PPUSH
50864: CALL_OW 437
50868: PUSH
50869: LD_INT 1
50871: ARRAY
50872: PUSH
50873: LD_INT 4
50875: ARRAY
50876: ST_TO_ADDR
// end ;
50877: LD_VAR 0 2
50881: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50882: LD_INT 0
50884: PPUSH
50885: PPUSH
50886: PPUSH
50887: PPUSH
// if not base_units then
50888: LD_VAR 0 1
50892: NOT
50893: IFFALSE 50897
// exit ;
50895: GO 50984
// result := false ;
50897: LD_ADDR_VAR 0 2
50901: PUSH
50902: LD_INT 0
50904: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50905: LD_ADDR_VAR 0 5
50909: PUSH
50910: LD_VAR 0 1
50914: PPUSH
50915: LD_INT 21
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PPUSH
50925: CALL_OW 72
50929: ST_TO_ADDR
// if not tmp then
50930: LD_VAR 0 5
50934: NOT
50935: IFFALSE 50939
// exit ;
50937: GO 50984
// for i in tmp do
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_VAR 0 5
50948: PUSH
50949: FOR_IN
50950: IFFALSE 50982
// begin result := EnemyInRange ( i , 22 ) ;
50952: LD_ADDR_VAR 0 2
50956: PUSH
50957: LD_VAR 0 3
50961: PPUSH
50962: LD_INT 22
50964: PPUSH
50965: CALL 49220 0 2
50969: ST_TO_ADDR
// if result then
50970: LD_VAR 0 2
50974: IFFALSE 50980
// exit ;
50976: POP
50977: POP
50978: GO 50984
// end ;
50980: GO 50949
50982: POP
50983: POP
// end ;
50984: LD_VAR 0 2
50988: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50989: LD_INT 0
50991: PPUSH
50992: PPUSH
// if not units then
50993: LD_VAR 0 1
50997: NOT
50998: IFFALSE 51002
// exit ;
51000: GO 51072
// result := [ ] ;
51002: LD_ADDR_VAR 0 3
51006: PUSH
51007: EMPTY
51008: ST_TO_ADDR
// for i in units do
51009: LD_ADDR_VAR 0 4
51013: PUSH
51014: LD_VAR 0 1
51018: PUSH
51019: FOR_IN
51020: IFFALSE 51070
// if GetTag ( i ) = tag then
51022: LD_VAR 0 4
51026: PPUSH
51027: CALL_OW 110
51031: PUSH
51032: LD_VAR 0 2
51036: EQUAL
51037: IFFALSE 51068
// result := Replace ( result , result + 1 , i ) ;
51039: LD_ADDR_VAR 0 3
51043: PUSH
51044: LD_VAR 0 3
51048: PPUSH
51049: LD_VAR 0 3
51053: PUSH
51054: LD_INT 1
51056: PLUS
51057: PPUSH
51058: LD_VAR 0 4
51062: PPUSH
51063: CALL_OW 1
51067: ST_TO_ADDR
51068: GO 51019
51070: POP
51071: POP
// end ;
51072: LD_VAR 0 3
51076: RET
// export function IsDriver ( un ) ; begin
51077: LD_INT 0
51079: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51080: LD_ADDR_VAR 0 2
51084: PUSH
51085: LD_VAR 0 1
51089: PUSH
51090: LD_INT 55
51092: PUSH
51093: EMPTY
51094: LIST
51095: PPUSH
51096: CALL_OW 69
51100: IN
51101: ST_TO_ADDR
// end ;
51102: LD_VAR 0 2
51106: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51107: LD_INT 0
51109: PPUSH
51110: PPUSH
// list := [ ] ;
51111: LD_ADDR_VAR 0 5
51115: PUSH
51116: EMPTY
51117: ST_TO_ADDR
// case d of 0 :
51118: LD_VAR 0 3
51122: PUSH
51123: LD_INT 0
51125: DOUBLE
51126: EQUAL
51127: IFTRUE 51131
51129: GO 51264
51131: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51132: LD_ADDR_VAR 0 5
51136: PUSH
51137: LD_VAR 0 1
51141: PUSH
51142: LD_INT 4
51144: MINUS
51145: PUSH
51146: LD_VAR 0 2
51150: PUSH
51151: LD_INT 4
51153: MINUS
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: PUSH
51163: LD_VAR 0 1
51167: PUSH
51168: LD_INT 3
51170: MINUS
51171: PUSH
51172: LD_VAR 0 2
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: PUSH
51185: LD_VAR 0 1
51189: PUSH
51190: LD_INT 4
51192: PLUS
51193: PUSH
51194: LD_VAR 0 2
51198: PUSH
51199: LD_INT 4
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: PUSH
51207: LD_VAR 0 1
51211: PUSH
51212: LD_INT 3
51214: PLUS
51215: PUSH
51216: LD_VAR 0 2
51220: PUSH
51221: LD_INT 3
51223: PLUS
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: PUSH
51233: LD_VAR 0 1
51237: PUSH
51238: LD_VAR 0 2
51242: PUSH
51243: LD_INT 4
51245: PLUS
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: ST_TO_ADDR
// end ; 1 :
51262: GO 51962
51264: LD_INT 1
51266: DOUBLE
51267: EQUAL
51268: IFTRUE 51272
51270: GO 51405
51272: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51273: LD_ADDR_VAR 0 5
51277: PUSH
51278: LD_VAR 0 1
51282: PUSH
51283: LD_VAR 0 2
51287: PUSH
51288: LD_INT 4
51290: MINUS
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: LD_VAR 0 1
51304: PUSH
51305: LD_INT 3
51307: MINUS
51308: PUSH
51309: LD_VAR 0 2
51313: PUSH
51314: LD_INT 3
51316: MINUS
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: PUSH
51326: LD_VAR 0 1
51330: PUSH
51331: LD_INT 4
51333: MINUS
51334: PUSH
51335: LD_VAR 0 2
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: PUSH
51348: LD_VAR 0 1
51352: PUSH
51353: LD_VAR 0 2
51357: PUSH
51358: LD_INT 3
51360: PLUS
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: LIST
51369: PUSH
51370: LD_VAR 0 1
51374: PUSH
51375: LD_INT 4
51377: PLUS
51378: PUSH
51379: LD_VAR 0 2
51383: PUSH
51384: LD_INT 4
51386: PLUS
51387: PUSH
51388: LD_INT 5
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// end ; 2 :
51403: GO 51962
51405: LD_INT 2
51407: DOUBLE
51408: EQUAL
51409: IFTRUE 51413
51411: GO 51542
51413: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51414: LD_ADDR_VAR 0 5
51418: PUSH
51419: LD_VAR 0 1
51423: PUSH
51424: LD_VAR 0 2
51428: PUSH
51429: LD_INT 3
51431: MINUS
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: PUSH
51441: LD_VAR 0 1
51445: PUSH
51446: LD_INT 4
51448: PLUS
51449: PUSH
51450: LD_VAR 0 2
51454: PUSH
51455: LD_INT 4
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: PUSH
51463: LD_VAR 0 1
51467: PUSH
51468: LD_VAR 0 2
51472: PUSH
51473: LD_INT 4
51475: PLUS
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: PUSH
51485: LD_VAR 0 1
51489: PUSH
51490: LD_INT 3
51492: MINUS
51493: PUSH
51494: LD_VAR 0 2
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: LIST
51506: PUSH
51507: LD_VAR 0 1
51511: PUSH
51512: LD_INT 4
51514: MINUS
51515: PUSH
51516: LD_VAR 0 2
51520: PUSH
51521: LD_INT 4
51523: MINUS
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// end ; 3 :
51540: GO 51962
51542: LD_INT 3
51544: DOUBLE
51545: EQUAL
51546: IFTRUE 51550
51548: GO 51683
51550: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51551: LD_ADDR_VAR 0 5
51555: PUSH
51556: LD_VAR 0 1
51560: PUSH
51561: LD_INT 3
51563: PLUS
51564: PUSH
51565: LD_VAR 0 2
51569: PUSH
51570: LD_INT 4
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: LD_VAR 0 1
51582: PUSH
51583: LD_INT 4
51585: PLUS
51586: PUSH
51587: LD_VAR 0 2
51591: PUSH
51592: LD_INT 4
51594: PLUS
51595: PUSH
51596: LD_INT 5
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: PUSH
51604: LD_VAR 0 1
51608: PUSH
51609: LD_INT 4
51611: MINUS
51612: PUSH
51613: LD_VAR 0 2
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: PUSH
51626: LD_VAR 0 1
51630: PUSH
51631: LD_VAR 0 2
51635: PUSH
51636: LD_INT 4
51638: MINUS
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: PUSH
51648: LD_VAR 0 1
51652: PUSH
51653: LD_INT 3
51655: MINUS
51656: PUSH
51657: LD_VAR 0 2
51661: PUSH
51662: LD_INT 3
51664: MINUS
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// end ; 4 :
51681: GO 51962
51683: LD_INT 4
51685: DOUBLE
51686: EQUAL
51687: IFTRUE 51691
51689: GO 51824
51691: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51692: LD_ADDR_VAR 0 5
51696: PUSH
51697: LD_VAR 0 1
51701: PUSH
51702: LD_VAR 0 2
51706: PUSH
51707: LD_INT 4
51709: PLUS
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 1
51723: PUSH
51724: LD_INT 3
51726: PLUS
51727: PUSH
51728: LD_VAR 0 2
51732: PUSH
51733: LD_INT 3
51735: PLUS
51736: PUSH
51737: LD_INT 5
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: PUSH
51745: LD_VAR 0 1
51749: PUSH
51750: LD_INT 4
51752: PLUS
51753: PUSH
51754: LD_VAR 0 2
51758: PUSH
51759: LD_INT 4
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: PUSH
51767: LD_VAR 0 1
51771: PUSH
51772: LD_VAR 0 2
51776: PUSH
51777: LD_INT 3
51779: MINUS
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: PUSH
51789: LD_VAR 0 1
51793: PUSH
51794: LD_INT 4
51796: MINUS
51797: PUSH
51798: LD_VAR 0 2
51802: PUSH
51803: LD_INT 4
51805: MINUS
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// end ; 5 :
51822: GO 51962
51824: LD_INT 5
51826: DOUBLE
51827: EQUAL
51828: IFTRUE 51832
51830: GO 51961
51832: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51833: LD_ADDR_VAR 0 5
51837: PUSH
51838: LD_VAR 0 1
51842: PUSH
51843: LD_INT 4
51845: MINUS
51846: PUSH
51847: LD_VAR 0 2
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: PUSH
51860: LD_VAR 0 1
51864: PUSH
51865: LD_VAR 0 2
51869: PUSH
51870: LD_INT 4
51872: MINUS
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: PUSH
51882: LD_VAR 0 1
51886: PUSH
51887: LD_INT 4
51889: PLUS
51890: PUSH
51891: LD_VAR 0 2
51895: PUSH
51896: LD_INT 4
51898: PLUS
51899: PUSH
51900: LD_INT 5
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: LD_VAR 0 1
51912: PUSH
51913: LD_INT 3
51915: PLUS
51916: PUSH
51917: LD_VAR 0 2
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: PUSH
51930: LD_VAR 0 1
51934: PUSH
51935: LD_VAR 0 2
51939: PUSH
51940: LD_INT 3
51942: PLUS
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: ST_TO_ADDR
// end ; end ;
51959: GO 51962
51961: POP
// result := list ;
51962: LD_ADDR_VAR 0 4
51966: PUSH
51967: LD_VAR 0 5
51971: ST_TO_ADDR
// end ;
51972: LD_VAR 0 4
51976: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51977: LD_INT 0
51979: PPUSH
51980: PPUSH
51981: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51982: LD_VAR 0 1
51986: NOT
51987: PUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: LD_INT 4
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: IN
52011: NOT
52012: OR
52013: IFFALSE 52017
// exit ;
52015: GO 52109
// tmp := [ ] ;
52017: LD_ADDR_VAR 0 5
52021: PUSH
52022: EMPTY
52023: ST_TO_ADDR
// for i in units do
52024: LD_ADDR_VAR 0 4
52028: PUSH
52029: LD_VAR 0 1
52033: PUSH
52034: FOR_IN
52035: IFFALSE 52078
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52037: LD_ADDR_VAR 0 5
52041: PUSH
52042: LD_VAR 0 5
52046: PPUSH
52047: LD_VAR 0 5
52051: PUSH
52052: LD_INT 1
52054: PLUS
52055: PPUSH
52056: LD_VAR 0 4
52060: PPUSH
52061: LD_VAR 0 2
52065: PPUSH
52066: CALL_OW 259
52070: PPUSH
52071: CALL_OW 2
52075: ST_TO_ADDR
52076: GO 52034
52078: POP
52079: POP
// if not tmp then
52080: LD_VAR 0 5
52084: NOT
52085: IFFALSE 52089
// exit ;
52087: GO 52109
// result := SortListByListDesc ( units , tmp ) ;
52089: LD_ADDR_VAR 0 3
52093: PUSH
52094: LD_VAR 0 1
52098: PPUSH
52099: LD_VAR 0 5
52103: PPUSH
52104: CALL_OW 77
52108: ST_TO_ADDR
// end ;
52109: LD_VAR 0 3
52113: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52114: LD_INT 0
52116: PPUSH
52117: PPUSH
52118: PPUSH
// result := false ;
52119: LD_ADDR_VAR 0 3
52123: PUSH
52124: LD_INT 0
52126: ST_TO_ADDR
// x := GetX ( building ) ;
52127: LD_ADDR_VAR 0 4
52131: PUSH
52132: LD_VAR 0 2
52136: PPUSH
52137: CALL_OW 250
52141: ST_TO_ADDR
// y := GetY ( building ) ;
52142: LD_ADDR_VAR 0 5
52146: PUSH
52147: LD_VAR 0 2
52151: PPUSH
52152: CALL_OW 251
52156: ST_TO_ADDR
// if not building or not x or not y then
52157: LD_VAR 0 2
52161: NOT
52162: PUSH
52163: LD_VAR 0 4
52167: NOT
52168: OR
52169: PUSH
52170: LD_VAR 0 5
52174: NOT
52175: OR
52176: IFFALSE 52180
// exit ;
52178: GO 52272
// if GetTaskList ( unit ) then
52180: LD_VAR 0 1
52184: PPUSH
52185: CALL_OW 437
52189: IFFALSE 52272
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52191: LD_STRING e
52193: PUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: CALL_OW 437
52203: PUSH
52204: LD_INT 1
52206: ARRAY
52207: PUSH
52208: LD_INT 1
52210: ARRAY
52211: EQUAL
52212: PUSH
52213: LD_VAR 0 4
52217: PUSH
52218: LD_VAR 0 1
52222: PPUSH
52223: CALL_OW 437
52227: PUSH
52228: LD_INT 1
52230: ARRAY
52231: PUSH
52232: LD_INT 2
52234: ARRAY
52235: EQUAL
52236: AND
52237: PUSH
52238: LD_VAR 0 5
52242: PUSH
52243: LD_VAR 0 1
52247: PPUSH
52248: CALL_OW 437
52252: PUSH
52253: LD_INT 1
52255: ARRAY
52256: PUSH
52257: LD_INT 3
52259: ARRAY
52260: EQUAL
52261: AND
52262: IFFALSE 52272
// result := true end ;
52264: LD_ADDR_VAR 0 3
52268: PUSH
52269: LD_INT 1
52271: ST_TO_ADDR
// end ;
52272: LD_VAR 0 3
52276: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52277: LD_INT 0
52279: PPUSH
// result := false ;
52280: LD_ADDR_VAR 0 4
52284: PUSH
52285: LD_INT 0
52287: ST_TO_ADDR
// if GetTaskList ( unit ) then
52288: LD_VAR 0 1
52292: PPUSH
52293: CALL_OW 437
52297: IFFALSE 52380
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52299: LD_STRING M
52301: PUSH
52302: LD_VAR 0 1
52306: PPUSH
52307: CALL_OW 437
52311: PUSH
52312: LD_INT 1
52314: ARRAY
52315: PUSH
52316: LD_INT 1
52318: ARRAY
52319: EQUAL
52320: PUSH
52321: LD_VAR 0 2
52325: PUSH
52326: LD_VAR 0 1
52330: PPUSH
52331: CALL_OW 437
52335: PUSH
52336: LD_INT 1
52338: ARRAY
52339: PUSH
52340: LD_INT 2
52342: ARRAY
52343: EQUAL
52344: AND
52345: PUSH
52346: LD_VAR 0 3
52350: PUSH
52351: LD_VAR 0 1
52355: PPUSH
52356: CALL_OW 437
52360: PUSH
52361: LD_INT 1
52363: ARRAY
52364: PUSH
52365: LD_INT 3
52367: ARRAY
52368: EQUAL
52369: AND
52370: IFFALSE 52380
// result := true ;
52372: LD_ADDR_VAR 0 4
52376: PUSH
52377: LD_INT 1
52379: ST_TO_ADDR
// end ; end ;
52380: LD_VAR 0 4
52384: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52385: LD_INT 0
52387: PPUSH
52388: PPUSH
52389: PPUSH
52390: PPUSH
// if not unit or not area then
52391: LD_VAR 0 1
52395: NOT
52396: PUSH
52397: LD_VAR 0 2
52401: NOT
52402: OR
52403: IFFALSE 52407
// exit ;
52405: GO 52571
// tmp := AreaToList ( area , i ) ;
52407: LD_ADDR_VAR 0 6
52411: PUSH
52412: LD_VAR 0 2
52416: PPUSH
52417: LD_VAR 0 5
52421: PPUSH
52422: CALL_OW 517
52426: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52427: LD_ADDR_VAR 0 5
52431: PUSH
52432: DOUBLE
52433: LD_INT 1
52435: DEC
52436: ST_TO_ADDR
52437: LD_VAR 0 6
52441: PUSH
52442: LD_INT 1
52444: ARRAY
52445: PUSH
52446: FOR_TO
52447: IFFALSE 52569
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52449: LD_ADDR_VAR 0 7
52453: PUSH
52454: LD_VAR 0 6
52458: PUSH
52459: LD_INT 1
52461: ARRAY
52462: PUSH
52463: LD_VAR 0 5
52467: ARRAY
52468: PUSH
52469: LD_VAR 0 6
52473: PUSH
52474: LD_INT 2
52476: ARRAY
52477: PUSH
52478: LD_VAR 0 5
52482: ARRAY
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52488: LD_VAR 0 7
52492: PUSH
52493: LD_INT 1
52495: ARRAY
52496: PPUSH
52497: LD_VAR 0 7
52501: PUSH
52502: LD_INT 2
52504: ARRAY
52505: PPUSH
52506: CALL_OW 428
52510: PUSH
52511: LD_INT 0
52513: EQUAL
52514: IFFALSE 52567
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52516: LD_VAR 0 1
52520: PPUSH
52521: LD_VAR 0 7
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: PPUSH
52530: LD_VAR 0 7
52534: PUSH
52535: LD_INT 2
52537: ARRAY
52538: PPUSH
52539: LD_VAR 0 3
52543: PPUSH
52544: CALL_OW 48
// result := IsPlaced ( unit ) ;
52548: LD_ADDR_VAR 0 4
52552: PUSH
52553: LD_VAR 0 1
52557: PPUSH
52558: CALL_OW 305
52562: ST_TO_ADDR
// exit ;
52563: POP
52564: POP
52565: GO 52571
// end ; end ;
52567: GO 52446
52569: POP
52570: POP
// end ;
52571: LD_VAR 0 4
52575: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52576: LD_INT 0
52578: PPUSH
52579: PPUSH
52580: PPUSH
// if not side or side > 8 then
52581: LD_VAR 0 1
52585: NOT
52586: PUSH
52587: LD_VAR 0 1
52591: PUSH
52592: LD_INT 8
52594: GREATER
52595: OR
52596: IFFALSE 52600
// exit ;
52598: GO 52787
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52600: LD_ADDR_VAR 0 4
52604: PUSH
52605: LD_INT 22
52607: PUSH
52608: LD_VAR 0 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 21
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PPUSH
52631: CALL_OW 69
52635: ST_TO_ADDR
// if not tmp then
52636: LD_VAR 0 4
52640: NOT
52641: IFFALSE 52645
// exit ;
52643: GO 52787
// enable_addtolog := true ;
52645: LD_ADDR_OWVAR 81
52649: PUSH
52650: LD_INT 1
52652: ST_TO_ADDR
// AddToLog ( [ ) ;
52653: LD_STRING [
52655: PPUSH
52656: CALL_OW 561
// for i in tmp do
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_VAR 0 4
52669: PUSH
52670: FOR_IN
52671: IFFALSE 52778
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52673: LD_STRING [
52675: PUSH
52676: LD_VAR 0 3
52680: PPUSH
52681: CALL_OW 266
52685: STR
52686: PUSH
52687: LD_STRING , 
52689: STR
52690: PUSH
52691: LD_VAR 0 3
52695: PPUSH
52696: CALL_OW 250
52700: STR
52701: PUSH
52702: LD_STRING , 
52704: STR
52705: PUSH
52706: LD_VAR 0 3
52710: PPUSH
52711: CALL_OW 251
52715: STR
52716: PUSH
52717: LD_STRING , 
52719: STR
52720: PUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: CALL_OW 254
52730: STR
52731: PUSH
52732: LD_STRING , 
52734: STR
52735: PUSH
52736: LD_VAR 0 3
52740: PPUSH
52741: LD_INT 1
52743: PPUSH
52744: CALL_OW 268
52748: STR
52749: PUSH
52750: LD_STRING , 
52752: STR
52753: PUSH
52754: LD_VAR 0 3
52758: PPUSH
52759: LD_INT 2
52761: PPUSH
52762: CALL_OW 268
52766: STR
52767: PUSH
52768: LD_STRING ],
52770: STR
52771: PPUSH
52772: CALL_OW 561
// end ;
52776: GO 52670
52778: POP
52779: POP
// AddToLog ( ]; ) ;
52780: LD_STRING ];
52782: PPUSH
52783: CALL_OW 561
// end ;
52787: LD_VAR 0 2
52791: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52792: LD_INT 0
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
// if not area or not rate or not max then
52799: LD_VAR 0 1
52803: NOT
52804: PUSH
52805: LD_VAR 0 2
52809: NOT
52810: OR
52811: PUSH
52812: LD_VAR 0 4
52816: NOT
52817: OR
52818: IFFALSE 52822
// exit ;
52820: GO 53014
// while 1 do
52822: LD_INT 1
52824: IFFALSE 53014
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52826: LD_ADDR_VAR 0 9
52830: PUSH
52831: LD_VAR 0 1
52835: PPUSH
52836: LD_INT 1
52838: PPUSH
52839: CALL_OW 287
52843: PUSH
52844: LD_INT 10
52846: MUL
52847: ST_TO_ADDR
// r := rate / 10 ;
52848: LD_ADDR_VAR 0 7
52852: PUSH
52853: LD_VAR 0 2
52857: PUSH
52858: LD_INT 10
52860: DIVREAL
52861: ST_TO_ADDR
// time := 1 1$00 ;
52862: LD_ADDR_VAR 0 8
52866: PUSH
52867: LD_INT 2100
52869: ST_TO_ADDR
// if amount < min then
52870: LD_VAR 0 9
52874: PUSH
52875: LD_VAR 0 3
52879: LESS
52880: IFFALSE 52898
// r := r * 2 else
52882: LD_ADDR_VAR 0 7
52886: PUSH
52887: LD_VAR 0 7
52891: PUSH
52892: LD_INT 2
52894: MUL
52895: ST_TO_ADDR
52896: GO 52924
// if amount > max then
52898: LD_VAR 0 9
52902: PUSH
52903: LD_VAR 0 4
52907: GREATER
52908: IFFALSE 52924
// r := r / 2 ;
52910: LD_ADDR_VAR 0 7
52914: PUSH
52915: LD_VAR 0 7
52919: PUSH
52920: LD_INT 2
52922: DIVREAL
52923: ST_TO_ADDR
// time := time / r ;
52924: LD_ADDR_VAR 0 8
52928: PUSH
52929: LD_VAR 0 8
52933: PUSH
52934: LD_VAR 0 7
52938: DIVREAL
52939: ST_TO_ADDR
// if time < 0 then
52940: LD_VAR 0 8
52944: PUSH
52945: LD_INT 0
52947: LESS
52948: IFFALSE 52965
// time := time * - 1 ;
52950: LD_ADDR_VAR 0 8
52954: PUSH
52955: LD_VAR 0 8
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: MUL
52964: ST_TO_ADDR
// wait ( time ) ;
52965: LD_VAR 0 8
52969: PPUSH
52970: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52974: LD_INT 35
52976: PPUSH
52977: LD_INT 875
52979: PPUSH
52980: CALL_OW 12
52984: PPUSH
52985: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52989: LD_INT 1
52991: PPUSH
52992: LD_INT 5
52994: PPUSH
52995: CALL_OW 12
52999: PPUSH
53000: LD_VAR 0 1
53004: PPUSH
53005: LD_INT 1
53007: PPUSH
53008: CALL_OW 55
// end ;
53012: GO 52822
// end ;
53014: LD_VAR 0 5
53018: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53019: LD_INT 0
53021: PPUSH
53022: PPUSH
53023: PPUSH
53024: PPUSH
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
// if not turrets or not factories then
53029: LD_VAR 0 1
53033: NOT
53034: PUSH
53035: LD_VAR 0 2
53039: NOT
53040: OR
53041: IFFALSE 53045
// exit ;
53043: GO 53352
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53045: LD_ADDR_VAR 0 10
53049: PUSH
53050: LD_INT 5
53052: PUSH
53053: LD_INT 6
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 4
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 5
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 24
53087: PUSH
53088: LD_INT 25
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 23
53097: PUSH
53098: LD_INT 27
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 42
53111: PUSH
53112: LD_INT 43
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 44
53121: PUSH
53122: LD_INT 46
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 45
53131: PUSH
53132: LD_INT 47
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// result := [ ] ;
53149: LD_ADDR_VAR 0 3
53153: PUSH
53154: EMPTY
53155: ST_TO_ADDR
// for i in turrets do
53156: LD_ADDR_VAR 0 4
53160: PUSH
53161: LD_VAR 0 1
53165: PUSH
53166: FOR_IN
53167: IFFALSE 53350
// begin nat := GetNation ( i ) ;
53169: LD_ADDR_VAR 0 7
53173: PUSH
53174: LD_VAR 0 4
53178: PPUSH
53179: CALL_OW 248
53183: ST_TO_ADDR
// weapon := 0 ;
53184: LD_ADDR_VAR 0 8
53188: PUSH
53189: LD_INT 0
53191: ST_TO_ADDR
// if not nat then
53192: LD_VAR 0 7
53196: NOT
53197: IFFALSE 53201
// continue ;
53199: GO 53166
// for j in list [ nat ] do
53201: LD_ADDR_VAR 0 5
53205: PUSH
53206: LD_VAR 0 10
53210: PUSH
53211: LD_VAR 0 7
53215: ARRAY
53216: PUSH
53217: FOR_IN
53218: IFFALSE 53259
// if GetBWeapon ( i ) = j [ 1 ] then
53220: LD_VAR 0 4
53224: PPUSH
53225: CALL_OW 269
53229: PUSH
53230: LD_VAR 0 5
53234: PUSH
53235: LD_INT 1
53237: ARRAY
53238: EQUAL
53239: IFFALSE 53257
// begin weapon := j [ 2 ] ;
53241: LD_ADDR_VAR 0 8
53245: PUSH
53246: LD_VAR 0 5
53250: PUSH
53251: LD_INT 2
53253: ARRAY
53254: ST_TO_ADDR
// break ;
53255: GO 53259
// end ;
53257: GO 53217
53259: POP
53260: POP
// if not weapon then
53261: LD_VAR 0 8
53265: NOT
53266: IFFALSE 53270
// continue ;
53268: GO 53166
// for k in factories do
53270: LD_ADDR_VAR 0 6
53274: PUSH
53275: LD_VAR 0 2
53279: PUSH
53280: FOR_IN
53281: IFFALSE 53346
// begin weapons := AvailableWeaponList ( k ) ;
53283: LD_ADDR_VAR 0 9
53287: PUSH
53288: LD_VAR 0 6
53292: PPUSH
53293: CALL_OW 478
53297: ST_TO_ADDR
// if not weapons then
53298: LD_VAR 0 9
53302: NOT
53303: IFFALSE 53307
// continue ;
53305: GO 53280
// if weapon in weapons then
53307: LD_VAR 0 8
53311: PUSH
53312: LD_VAR 0 9
53316: IN
53317: IFFALSE 53344
// begin result := [ i , weapon ] ;
53319: LD_ADDR_VAR 0 3
53323: PUSH
53324: LD_VAR 0 4
53328: PUSH
53329: LD_VAR 0 8
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// exit ;
53338: POP
53339: POP
53340: POP
53341: POP
53342: GO 53352
// end ; end ;
53344: GO 53280
53346: POP
53347: POP
// end ;
53348: GO 53166
53350: POP
53351: POP
// end ;
53352: LD_VAR 0 3
53356: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53357: LD_INT 0
53359: PPUSH
// if not side or side > 8 then
53360: LD_VAR 0 3
53364: NOT
53365: PUSH
53366: LD_VAR 0 3
53370: PUSH
53371: LD_INT 8
53373: GREATER
53374: OR
53375: IFFALSE 53379
// exit ;
53377: GO 53438
// if not range then
53379: LD_VAR 0 4
53383: NOT
53384: IFFALSE 53395
// range := - 12 ;
53386: LD_ADDR_VAR 0 4
53390: PUSH
53391: LD_INT 12
53393: NEG
53394: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53395: LD_VAR 0 1
53399: PPUSH
53400: LD_VAR 0 2
53404: PPUSH
53405: LD_VAR 0 3
53409: PPUSH
53410: LD_VAR 0 4
53414: PPUSH
53415: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53419: LD_VAR 0 1
53423: PPUSH
53424: LD_VAR 0 2
53428: PPUSH
53429: LD_VAR 0 3
53433: PPUSH
53434: CALL_OW 331
// end ;
53438: LD_VAR 0 5
53442: RET
// export function Video ( mode ) ; begin
53443: LD_INT 0
53445: PPUSH
// ingame_video = mode ;
53446: LD_ADDR_OWVAR 52
53450: PUSH
53451: LD_VAR 0 1
53455: ST_TO_ADDR
// interface_hidden = mode ;
53456: LD_ADDR_OWVAR 54
53460: PUSH
53461: LD_VAR 0 1
53465: ST_TO_ADDR
// end ;
53466: LD_VAR 0 2
53470: RET
// export function Join ( array , element ) ; begin
53471: LD_INT 0
53473: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53474: LD_ADDR_VAR 0 3
53478: PUSH
53479: LD_VAR 0 1
53483: PPUSH
53484: LD_VAR 0 1
53488: PUSH
53489: LD_INT 1
53491: PLUS
53492: PPUSH
53493: LD_VAR 0 2
53497: PPUSH
53498: CALL_OW 1
53502: ST_TO_ADDR
// end ;
53503: LD_VAR 0 3
53507: RET
// export function JoinUnion ( array , element ) ; begin
53508: LD_INT 0
53510: PPUSH
// result := array union element ;
53511: LD_ADDR_VAR 0 3
53515: PUSH
53516: LD_VAR 0 1
53520: PUSH
53521: LD_VAR 0 2
53525: UNION
53526: ST_TO_ADDR
// end ;
53527: LD_VAR 0 3
53531: RET
// export function GetBehemoths ( side ) ; begin
53532: LD_INT 0
53534: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53535: LD_ADDR_VAR 0 2
53539: PUSH
53540: LD_INT 22
53542: PUSH
53543: LD_VAR 0 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 31
53554: PUSH
53555: LD_INT 25
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PPUSH
53566: CALL_OW 69
53570: ST_TO_ADDR
// end ;
53571: LD_VAR 0 2
53575: RET
// export function Shuffle ( array ) ; var i , index ; begin
53576: LD_INT 0
53578: PPUSH
53579: PPUSH
53580: PPUSH
// result := [ ] ;
53581: LD_ADDR_VAR 0 2
53585: PUSH
53586: EMPTY
53587: ST_TO_ADDR
// if not array then
53588: LD_VAR 0 1
53592: NOT
53593: IFFALSE 53597
// exit ;
53595: GO 53696
// Randomize ;
53597: CALL_OW 10
// for i = array downto 1 do
53601: LD_ADDR_VAR 0 3
53605: PUSH
53606: DOUBLE
53607: LD_VAR 0 1
53611: INC
53612: ST_TO_ADDR
53613: LD_INT 1
53615: PUSH
53616: FOR_DOWNTO
53617: IFFALSE 53694
// begin index := rand ( 1 , array ) ;
53619: LD_ADDR_VAR 0 4
53623: PUSH
53624: LD_INT 1
53626: PPUSH
53627: LD_VAR 0 1
53631: PPUSH
53632: CALL_OW 12
53636: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53637: LD_ADDR_VAR 0 2
53641: PUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: LD_VAR 0 2
53651: PUSH
53652: LD_INT 1
53654: PLUS
53655: PPUSH
53656: LD_VAR 0 1
53660: PUSH
53661: LD_VAR 0 4
53665: ARRAY
53666: PPUSH
53667: CALL_OW 2
53671: ST_TO_ADDR
// array := Delete ( array , index ) ;
53672: LD_ADDR_VAR 0 1
53676: PUSH
53677: LD_VAR 0 1
53681: PPUSH
53682: LD_VAR 0 4
53686: PPUSH
53687: CALL_OW 3
53691: ST_TO_ADDR
// end ;
53692: GO 53616
53694: POP
53695: POP
// end ;
53696: LD_VAR 0 2
53700: RET
// export function GetBaseMaterials ( base ) ; begin
53701: LD_INT 0
53703: PPUSH
// result := [ 0 , 0 , 0 ] ;
53704: LD_ADDR_VAR 0 2
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// if not base then
53723: LD_VAR 0 1
53727: NOT
53728: IFFALSE 53732
// exit ;
53730: GO 53781
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53732: LD_ADDR_VAR 0 2
53736: PUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: LD_INT 1
53744: PPUSH
53745: CALL_OW 275
53749: PUSH
53750: LD_VAR 0 1
53754: PPUSH
53755: LD_INT 2
53757: PPUSH
53758: CALL_OW 275
53762: PUSH
53763: LD_VAR 0 1
53767: PPUSH
53768: LD_INT 3
53770: PPUSH
53771: CALL_OW 275
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// end ;
53781: LD_VAR 0 2
53785: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53786: LD_INT 0
53788: PPUSH
53789: PPUSH
// result := array ;
53790: LD_ADDR_VAR 0 3
53794: PUSH
53795: LD_VAR 0 1
53799: ST_TO_ADDR
// if size > 0 then
53800: LD_VAR 0 2
53804: PUSH
53805: LD_INT 0
53807: GREATER
53808: IFFALSE 53854
// for i := array downto size do
53810: LD_ADDR_VAR 0 4
53814: PUSH
53815: DOUBLE
53816: LD_VAR 0 1
53820: INC
53821: ST_TO_ADDR
53822: LD_VAR 0 2
53826: PUSH
53827: FOR_DOWNTO
53828: IFFALSE 53852
// result := Delete ( result , result ) ;
53830: LD_ADDR_VAR 0 3
53834: PUSH
53835: LD_VAR 0 3
53839: PPUSH
53840: LD_VAR 0 3
53844: PPUSH
53845: CALL_OW 3
53849: ST_TO_ADDR
53850: GO 53827
53852: POP
53853: POP
// end ;
53854: LD_VAR 0 3
53858: RET
// export function ComExit ( unit ) ; var tmp ; begin
53859: LD_INT 0
53861: PPUSH
53862: PPUSH
// if not IsInUnit ( unit ) then
53863: LD_VAR 0 1
53867: PPUSH
53868: CALL_OW 310
53872: NOT
53873: IFFALSE 53877
// exit ;
53875: GO 53937
// tmp := IsInUnit ( unit ) ;
53877: LD_ADDR_VAR 0 3
53881: PUSH
53882: LD_VAR 0 1
53886: PPUSH
53887: CALL_OW 310
53891: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53892: LD_VAR 0 3
53896: PPUSH
53897: CALL_OW 247
53901: PUSH
53902: LD_INT 2
53904: EQUAL
53905: IFFALSE 53918
// ComExitVehicle ( unit ) else
53907: LD_VAR 0 1
53911: PPUSH
53912: CALL_OW 121
53916: GO 53927
// ComExitBuilding ( unit ) ;
53918: LD_VAR 0 1
53922: PPUSH
53923: CALL_OW 122
// result := tmp ;
53927: LD_ADDR_VAR 0 2
53931: PUSH
53932: LD_VAR 0 3
53936: ST_TO_ADDR
// end ;
53937: LD_VAR 0 2
53941: RET
// export function ComExitAll ( units ) ; var i ; begin
53942: LD_INT 0
53944: PPUSH
53945: PPUSH
// if not units then
53946: LD_VAR 0 1
53950: NOT
53951: IFFALSE 53955
// exit ;
53953: GO 53981
// for i in units do
53955: LD_ADDR_VAR 0 3
53959: PUSH
53960: LD_VAR 0 1
53964: PUSH
53965: FOR_IN
53966: IFFALSE 53979
// ComExit ( i ) ;
53968: LD_VAR 0 3
53972: PPUSH
53973: CALL 53859 0 1
53977: GO 53965
53979: POP
53980: POP
// end ;
53981: LD_VAR 0 2
53985: RET
// export function ResetHc ; begin
53986: LD_INT 0
53988: PPUSH
// InitHc ;
53989: CALL_OW 19
// hc_importance := 0 ;
53993: LD_ADDR_OWVAR 32
53997: PUSH
53998: LD_INT 0
54000: ST_TO_ADDR
// end ;
54001: LD_VAR 0 1
54005: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54006: LD_INT 0
54008: PPUSH
54009: PPUSH
54010: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54011: LD_ADDR_VAR 0 6
54015: PUSH
54016: LD_VAR 0 1
54020: PUSH
54021: LD_VAR 0 3
54025: PLUS
54026: PUSH
54027: LD_INT 2
54029: DIV
54030: ST_TO_ADDR
// if _x < 0 then
54031: LD_VAR 0 6
54035: PUSH
54036: LD_INT 0
54038: LESS
54039: IFFALSE 54056
// _x := _x * - 1 ;
54041: LD_ADDR_VAR 0 6
54045: PUSH
54046: LD_VAR 0 6
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: MUL
54055: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54056: LD_ADDR_VAR 0 7
54060: PUSH
54061: LD_VAR 0 2
54065: PUSH
54066: LD_VAR 0 4
54070: PLUS
54071: PUSH
54072: LD_INT 2
54074: DIV
54075: ST_TO_ADDR
// if _y < 0 then
54076: LD_VAR 0 7
54080: PUSH
54081: LD_INT 0
54083: LESS
54084: IFFALSE 54101
// _y := _y * - 1 ;
54086: LD_ADDR_VAR 0 7
54090: PUSH
54091: LD_VAR 0 7
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: MUL
54100: ST_TO_ADDR
// result := [ _x , _y ] ;
54101: LD_ADDR_VAR 0 5
54105: PUSH
54106: LD_VAR 0 6
54110: PUSH
54111: LD_VAR 0 7
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// end ;
54120: LD_VAR 0 5
54124: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54125: LD_INT 0
54127: PPUSH
54128: PPUSH
54129: PPUSH
54130: PPUSH
// task := GetTaskList ( unit ) ;
54131: LD_ADDR_VAR 0 7
54135: PUSH
54136: LD_VAR 0 1
54140: PPUSH
54141: CALL_OW 437
54145: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54146: LD_VAR 0 7
54150: NOT
54151: PUSH
54152: LD_VAR 0 1
54156: PPUSH
54157: LD_VAR 0 2
54161: PPUSH
54162: CALL_OW 308
54166: NOT
54167: AND
54168: IFFALSE 54172
// exit ;
54170: GO 54290
// if IsInArea ( unit , area ) then
54172: LD_VAR 0 1
54176: PPUSH
54177: LD_VAR 0 2
54181: PPUSH
54182: CALL_OW 308
54186: IFFALSE 54204
// begin ComMoveToArea ( unit , goAway ) ;
54188: LD_VAR 0 1
54192: PPUSH
54193: LD_VAR 0 3
54197: PPUSH
54198: CALL_OW 113
// exit ;
54202: GO 54290
// end ; if task [ 1 ] [ 1 ] <> M then
54204: LD_VAR 0 7
54208: PUSH
54209: LD_INT 1
54211: ARRAY
54212: PUSH
54213: LD_INT 1
54215: ARRAY
54216: PUSH
54217: LD_STRING M
54219: NONEQUAL
54220: IFFALSE 54224
// exit ;
54222: GO 54290
// x := task [ 1 ] [ 2 ] ;
54224: LD_ADDR_VAR 0 5
54228: PUSH
54229: LD_VAR 0 7
54233: PUSH
54234: LD_INT 1
54236: ARRAY
54237: PUSH
54238: LD_INT 2
54240: ARRAY
54241: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54242: LD_ADDR_VAR 0 6
54246: PUSH
54247: LD_VAR 0 7
54251: PUSH
54252: LD_INT 1
54254: ARRAY
54255: PUSH
54256: LD_INT 3
54258: ARRAY
54259: ST_TO_ADDR
// if InArea ( x , y , area ) then
54260: LD_VAR 0 5
54264: PPUSH
54265: LD_VAR 0 6
54269: PPUSH
54270: LD_VAR 0 2
54274: PPUSH
54275: CALL_OW 309
54279: IFFALSE 54290
// ComStop ( unit ) ;
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 141
// end ;
54290: LD_VAR 0 4
54294: RET
// export function Abs ( value ) ; begin
54295: LD_INT 0
54297: PPUSH
// result := value ;
54298: LD_ADDR_VAR 0 2
54302: PUSH
54303: LD_VAR 0 1
54307: ST_TO_ADDR
// if value < 0 then
54308: LD_VAR 0 1
54312: PUSH
54313: LD_INT 0
54315: LESS
54316: IFFALSE 54333
// result := value * - 1 ;
54318: LD_ADDR_VAR 0 2
54322: PUSH
54323: LD_VAR 0 1
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: MUL
54332: ST_TO_ADDR
// end ;
54333: LD_VAR 0 2
54337: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54338: LD_INT 0
54340: PPUSH
54341: PPUSH
54342: PPUSH
54343: PPUSH
54344: PPUSH
54345: PPUSH
54346: PPUSH
54347: PPUSH
// if not unit or not building then
54348: LD_VAR 0 1
54352: NOT
54353: PUSH
54354: LD_VAR 0 2
54358: NOT
54359: OR
54360: IFFALSE 54364
// exit ;
54362: GO 54590
// x := GetX ( building ) ;
54364: LD_ADDR_VAR 0 4
54368: PUSH
54369: LD_VAR 0 2
54373: PPUSH
54374: CALL_OW 250
54378: ST_TO_ADDR
// y := GetY ( building ) ;
54379: LD_ADDR_VAR 0 6
54383: PUSH
54384: LD_VAR 0 2
54388: PPUSH
54389: CALL_OW 251
54393: ST_TO_ADDR
// d := GetDir ( building ) ;
54394: LD_ADDR_VAR 0 8
54398: PUSH
54399: LD_VAR 0 2
54403: PPUSH
54404: CALL_OW 254
54408: ST_TO_ADDR
// r := 4 ;
54409: LD_ADDR_VAR 0 9
54413: PUSH
54414: LD_INT 4
54416: ST_TO_ADDR
// for i := 1 to 5 do
54417: LD_ADDR_VAR 0 10
54421: PUSH
54422: DOUBLE
54423: LD_INT 1
54425: DEC
54426: ST_TO_ADDR
54427: LD_INT 5
54429: PUSH
54430: FOR_TO
54431: IFFALSE 54588
// begin _x := ShiftX ( x , d , r + i ) ;
54433: LD_ADDR_VAR 0 5
54437: PUSH
54438: LD_VAR 0 4
54442: PPUSH
54443: LD_VAR 0 8
54447: PPUSH
54448: LD_VAR 0 9
54452: PUSH
54453: LD_VAR 0 10
54457: PLUS
54458: PPUSH
54459: CALL_OW 272
54463: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54464: LD_ADDR_VAR 0 7
54468: PUSH
54469: LD_VAR 0 6
54473: PPUSH
54474: LD_VAR 0 8
54478: PPUSH
54479: LD_VAR 0 9
54483: PUSH
54484: LD_VAR 0 10
54488: PLUS
54489: PPUSH
54490: CALL_OW 273
54494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54495: LD_VAR 0 5
54499: PPUSH
54500: LD_VAR 0 7
54504: PPUSH
54505: CALL_OW 488
54509: PUSH
54510: LD_VAR 0 5
54514: PPUSH
54515: LD_VAR 0 7
54519: PPUSH
54520: CALL_OW 428
54524: PPUSH
54525: CALL_OW 247
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: IN
54540: NOT
54541: AND
54542: IFFALSE 54586
// begin ComMoveXY ( unit , _x , _y ) ;
54544: LD_VAR 0 1
54548: PPUSH
54549: LD_VAR 0 5
54553: PPUSH
54554: LD_VAR 0 7
54558: PPUSH
54559: CALL_OW 111
// result := [ _x , _y ] ;
54563: LD_ADDR_VAR 0 3
54567: PUSH
54568: LD_VAR 0 5
54572: PUSH
54573: LD_VAR 0 7
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: ST_TO_ADDR
// exit ;
54582: POP
54583: POP
54584: GO 54590
// end ; end ;
54586: GO 54430
54588: POP
54589: POP
// end ;
54590: LD_VAR 0 3
54594: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54595: LD_INT 0
54597: PPUSH
54598: PPUSH
54599: PPUSH
// result := 0 ;
54600: LD_ADDR_VAR 0 3
54604: PUSH
54605: LD_INT 0
54607: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54608: LD_VAR 0 1
54612: PUSH
54613: LD_INT 0
54615: LESS
54616: PUSH
54617: LD_VAR 0 1
54621: PUSH
54622: LD_INT 8
54624: GREATER
54625: OR
54626: PUSH
54627: LD_VAR 0 2
54631: PUSH
54632: LD_INT 0
54634: LESS
54635: OR
54636: PUSH
54637: LD_VAR 0 2
54641: PUSH
54642: LD_INT 8
54644: GREATER
54645: OR
54646: IFFALSE 54650
// exit ;
54648: GO 54725
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54650: LD_ADDR_VAR 0 4
54654: PUSH
54655: LD_INT 22
54657: PUSH
54658: LD_VAR 0 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PPUSH
54667: CALL_OW 69
54671: PUSH
54672: FOR_IN
54673: IFFALSE 54723
// begin un := UnitShoot ( i ) ;
54675: LD_ADDR_VAR 0 5
54679: PUSH
54680: LD_VAR 0 4
54684: PPUSH
54685: CALL_OW 504
54689: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54690: LD_VAR 0 5
54694: PPUSH
54695: CALL_OW 255
54699: PUSH
54700: LD_VAR 0 1
54704: EQUAL
54705: IFFALSE 54721
// begin result := un ;
54707: LD_ADDR_VAR 0 3
54711: PUSH
54712: LD_VAR 0 5
54716: ST_TO_ADDR
// exit ;
54717: POP
54718: POP
54719: GO 54725
// end ; end ;
54721: GO 54672
54723: POP
54724: POP
// end ;
54725: LD_VAR 0 3
54729: RET
// export function GetCargoBay ( units ) ; begin
54730: LD_INT 0
54732: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54733: LD_ADDR_VAR 0 2
54737: PUSH
54738: LD_VAR 0 1
54742: PPUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 34
54748: PUSH
54749: LD_INT 12
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 34
54758: PUSH
54759: LD_INT 51
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 34
54768: PUSH
54769: LD_INT 32
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 34
54778: PUSH
54779: LD_EXP 108
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: PPUSH
54795: CALL_OW 72
54799: ST_TO_ADDR
// end ;
54800: LD_VAR 0 2
54804: RET
// export function Negate ( value ) ; begin
54805: LD_INT 0
54807: PPUSH
// result := not value ;
54808: LD_ADDR_VAR 0 2
54812: PUSH
54813: LD_VAR 0 1
54817: NOT
54818: ST_TO_ADDR
// end ;
54819: LD_VAR 0 2
54823: RET
// export function Inc ( value ) ; begin
54824: LD_INT 0
54826: PPUSH
// result := value + 1 ;
54827: LD_ADDR_VAR 0 2
54831: PUSH
54832: LD_VAR 0 1
54836: PUSH
54837: LD_INT 1
54839: PLUS
54840: ST_TO_ADDR
// end ;
54841: LD_VAR 0 2
54845: RET
// export function Dec ( value ) ; begin
54846: LD_INT 0
54848: PPUSH
// result := value - 1 ;
54849: LD_ADDR_VAR 0 2
54853: PUSH
54854: LD_VAR 0 1
54858: PUSH
54859: LD_INT 1
54861: MINUS
54862: ST_TO_ADDR
// end ;
54863: LD_VAR 0 2
54867: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54868: LD_INT 0
54870: PPUSH
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
54875: PPUSH
54876: PPUSH
54877: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54878: LD_VAR 0 1
54882: PPUSH
54883: LD_VAR 0 2
54887: PPUSH
54888: CALL_OW 488
54892: NOT
54893: PUSH
54894: LD_VAR 0 3
54898: PPUSH
54899: LD_VAR 0 4
54903: PPUSH
54904: CALL_OW 488
54908: NOT
54909: OR
54910: IFFALSE 54923
// begin result := - 1 ;
54912: LD_ADDR_VAR 0 5
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: ST_TO_ADDR
// exit ;
54921: GO 55158
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54923: LD_ADDR_VAR 0 12
54927: PUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: LD_VAR 0 2
54937: PPUSH
54938: LD_VAR 0 3
54942: PPUSH
54943: LD_VAR 0 4
54947: PPUSH
54948: CALL 54006 0 4
54952: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54953: LD_ADDR_VAR 0 11
54957: PUSH
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_VAR 0 2
54967: PPUSH
54968: LD_VAR 0 12
54972: PUSH
54973: LD_INT 1
54975: ARRAY
54976: PPUSH
54977: LD_VAR 0 12
54981: PUSH
54982: LD_INT 2
54984: ARRAY
54985: PPUSH
54986: CALL_OW 298
54990: ST_TO_ADDR
// distance := 9999 ;
54991: LD_ADDR_VAR 0 10
54995: PUSH
54996: LD_INT 9999
54998: ST_TO_ADDR
// for i := 0 to 5 do
54999: LD_ADDR_VAR 0 6
55003: PUSH
55004: DOUBLE
55005: LD_INT 0
55007: DEC
55008: ST_TO_ADDR
55009: LD_INT 5
55011: PUSH
55012: FOR_TO
55013: IFFALSE 55156
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55015: LD_ADDR_VAR 0 7
55019: PUSH
55020: LD_VAR 0 1
55024: PPUSH
55025: LD_VAR 0 6
55029: PPUSH
55030: LD_VAR 0 11
55034: PPUSH
55035: CALL_OW 272
55039: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55040: LD_ADDR_VAR 0 8
55044: PUSH
55045: LD_VAR 0 2
55049: PPUSH
55050: LD_VAR 0 6
55054: PPUSH
55055: LD_VAR 0 11
55059: PPUSH
55060: CALL_OW 273
55064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55065: LD_VAR 0 7
55069: PPUSH
55070: LD_VAR 0 8
55074: PPUSH
55075: CALL_OW 488
55079: NOT
55080: IFFALSE 55084
// continue ;
55082: GO 55012
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55084: LD_ADDR_VAR 0 9
55088: PUSH
55089: LD_VAR 0 12
55093: PUSH
55094: LD_INT 1
55096: ARRAY
55097: PPUSH
55098: LD_VAR 0 12
55102: PUSH
55103: LD_INT 2
55105: ARRAY
55106: PPUSH
55107: LD_VAR 0 7
55111: PPUSH
55112: LD_VAR 0 8
55116: PPUSH
55117: CALL_OW 298
55121: ST_TO_ADDR
// if tmp < distance then
55122: LD_VAR 0 9
55126: PUSH
55127: LD_VAR 0 10
55131: LESS
55132: IFFALSE 55154
// begin result := i ;
55134: LD_ADDR_VAR 0 5
55138: PUSH
55139: LD_VAR 0 6
55143: ST_TO_ADDR
// distance := tmp ;
55144: LD_ADDR_VAR 0 10
55148: PUSH
55149: LD_VAR 0 9
55153: ST_TO_ADDR
// end ; end ;
55154: GO 55012
55156: POP
55157: POP
// end ;
55158: LD_VAR 0 5
55162: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55163: LD_INT 0
55165: PPUSH
55166: PPUSH
// if not driver or not IsInUnit ( driver ) then
55167: LD_VAR 0 1
55171: NOT
55172: PUSH
55173: LD_VAR 0 1
55177: PPUSH
55178: CALL_OW 310
55182: NOT
55183: OR
55184: IFFALSE 55188
// exit ;
55186: GO 55278
// vehicle := IsInUnit ( driver ) ;
55188: LD_ADDR_VAR 0 3
55192: PUSH
55193: LD_VAR 0 1
55197: PPUSH
55198: CALL_OW 310
55202: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55203: LD_VAR 0 1
55207: PPUSH
55208: LD_STRING \
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: PUSH
55238: LD_STRING E
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_VAR 0 3
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PPUSH
55274: CALL_OW 446
// end ;
55278: LD_VAR 0 2
55282: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55283: LD_INT 0
55285: PPUSH
55286: PPUSH
// if not driver or not IsInUnit ( driver ) then
55287: LD_VAR 0 1
55291: NOT
55292: PUSH
55293: LD_VAR 0 1
55297: PPUSH
55298: CALL_OW 310
55302: NOT
55303: OR
55304: IFFALSE 55308
// exit ;
55306: GO 55398
// vehicle := IsInUnit ( driver ) ;
55308: LD_ADDR_VAR 0 3
55312: PUSH
55313: LD_VAR 0 1
55317: PPUSH
55318: CALL_OW 310
55322: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55323: LD_VAR 0 1
55327: PPUSH
55328: LD_STRING \
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: PUSH
55358: LD_STRING E
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_VAR 0 3
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PPUSH
55394: CALL_OW 447
// end ;
55398: LD_VAR 0 2
55402: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
55407: PPUSH
// tmp := [ ] ;
55408: LD_ADDR_VAR 0 5
55412: PUSH
55413: EMPTY
55414: ST_TO_ADDR
// for i in units do
55415: LD_ADDR_VAR 0 4
55419: PUSH
55420: LD_VAR 0 1
55424: PUSH
55425: FOR_IN
55426: IFFALSE 55464
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55428: LD_ADDR_VAR 0 5
55432: PUSH
55433: LD_VAR 0 5
55437: PPUSH
55438: LD_VAR 0 5
55442: PUSH
55443: LD_INT 1
55445: PLUS
55446: PPUSH
55447: LD_VAR 0 4
55451: PPUSH
55452: CALL_OW 256
55456: PPUSH
55457: CALL_OW 2
55461: ST_TO_ADDR
55462: GO 55425
55464: POP
55465: POP
// if not tmp then
55466: LD_VAR 0 5
55470: NOT
55471: IFFALSE 55475
// exit ;
55473: GO 55523
// if asc then
55475: LD_VAR 0 2
55479: IFFALSE 55503
// result := SortListByListAsc ( units , tmp ) else
55481: LD_ADDR_VAR 0 3
55485: PUSH
55486: LD_VAR 0 1
55490: PPUSH
55491: LD_VAR 0 5
55495: PPUSH
55496: CALL_OW 76
55500: ST_TO_ADDR
55501: GO 55523
// result := SortListByListDesc ( units , tmp ) ;
55503: LD_ADDR_VAR 0 3
55507: PUSH
55508: LD_VAR 0 1
55512: PPUSH
55513: LD_VAR 0 5
55517: PPUSH
55518: CALL_OW 77
55522: ST_TO_ADDR
// end ;
55523: LD_VAR 0 3
55527: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55528: LD_INT 0
55530: PPUSH
55531: PPUSH
// task := GetTaskList ( mech ) ;
55532: LD_ADDR_VAR 0 4
55536: PUSH
55537: LD_VAR 0 1
55541: PPUSH
55542: CALL_OW 437
55546: ST_TO_ADDR
// if not task then
55547: LD_VAR 0 4
55551: NOT
55552: IFFALSE 55556
// exit ;
55554: GO 55598
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55556: LD_ADDR_VAR 0 3
55560: PUSH
55561: LD_VAR 0 4
55565: PUSH
55566: LD_INT 1
55568: ARRAY
55569: PUSH
55570: LD_INT 1
55572: ARRAY
55573: PUSH
55574: LD_STRING r
55576: EQUAL
55577: PUSH
55578: LD_VAR 0 4
55582: PUSH
55583: LD_INT 1
55585: ARRAY
55586: PUSH
55587: LD_INT 4
55589: ARRAY
55590: PUSH
55591: LD_VAR 0 2
55595: EQUAL
55596: AND
55597: ST_TO_ADDR
// end ;
55598: LD_VAR 0 3
55602: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55603: LD_INT 0
55605: PPUSH
// SetDir ( unit , d ) ;
55606: LD_VAR 0 1
55610: PPUSH
55611: LD_VAR 0 4
55615: PPUSH
55616: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55620: LD_VAR 0 1
55624: PPUSH
55625: LD_VAR 0 2
55629: PPUSH
55630: LD_VAR 0 3
55634: PPUSH
55635: LD_VAR 0 5
55639: PPUSH
55640: CALL_OW 48
// end ;
55644: LD_VAR 0 6
55648: RET
// export function ToNaturalNumber ( number ) ; begin
55649: LD_INT 0
55651: PPUSH
// result := number div 1 ;
55652: LD_ADDR_VAR 0 2
55656: PUSH
55657: LD_VAR 0 1
55661: PUSH
55662: LD_INT 1
55664: DIV
55665: ST_TO_ADDR
// if number < 0 then
55666: LD_VAR 0 1
55670: PUSH
55671: LD_INT 0
55673: LESS
55674: IFFALSE 55684
// result := 0 ;
55676: LD_ADDR_VAR 0 2
55680: PUSH
55681: LD_INT 0
55683: ST_TO_ADDR
// end ;
55684: LD_VAR 0 2
55688: RET
// export function SortByClass ( units , class ) ; var un ; begin
55689: LD_INT 0
55691: PPUSH
55692: PPUSH
// if not units or not class then
55693: LD_VAR 0 1
55697: NOT
55698: PUSH
55699: LD_VAR 0 2
55703: NOT
55704: OR
55705: IFFALSE 55709
// exit ;
55707: GO 55804
// result := [ ] ;
55709: LD_ADDR_VAR 0 3
55713: PUSH
55714: EMPTY
55715: ST_TO_ADDR
// for un in units do
55716: LD_ADDR_VAR 0 4
55720: PUSH
55721: LD_VAR 0 1
55725: PUSH
55726: FOR_IN
55727: IFFALSE 55802
// if GetClass ( un ) = class then
55729: LD_VAR 0 4
55733: PPUSH
55734: CALL_OW 257
55738: PUSH
55739: LD_VAR 0 2
55743: EQUAL
55744: IFFALSE 55771
// result := Insert ( result , 1 , un ) else
55746: LD_ADDR_VAR 0 3
55750: PUSH
55751: LD_VAR 0 3
55755: PPUSH
55756: LD_INT 1
55758: PPUSH
55759: LD_VAR 0 4
55763: PPUSH
55764: CALL_OW 2
55768: ST_TO_ADDR
55769: GO 55800
// result := Replace ( result , result + 1 , un ) ;
55771: LD_ADDR_VAR 0 3
55775: PUSH
55776: LD_VAR 0 3
55780: PPUSH
55781: LD_VAR 0 3
55785: PUSH
55786: LD_INT 1
55788: PLUS
55789: PPUSH
55790: LD_VAR 0 4
55794: PPUSH
55795: CALL_OW 1
55799: ST_TO_ADDR
55800: GO 55726
55802: POP
55803: POP
// end ;
55804: LD_VAR 0 3
55808: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55809: LD_INT 0
55811: PPUSH
55812: PPUSH
55813: PPUSH
55814: PPUSH
55815: PPUSH
55816: PPUSH
55817: PPUSH
// result := [ ] ;
55818: LD_ADDR_VAR 0 4
55822: PUSH
55823: EMPTY
55824: ST_TO_ADDR
// if x - r < 0 then
55825: LD_VAR 0 1
55829: PUSH
55830: LD_VAR 0 3
55834: MINUS
55835: PUSH
55836: LD_INT 0
55838: LESS
55839: IFFALSE 55851
// min_x := 0 else
55841: LD_ADDR_VAR 0 8
55845: PUSH
55846: LD_INT 0
55848: ST_TO_ADDR
55849: GO 55867
// min_x := x - r ;
55851: LD_ADDR_VAR 0 8
55855: PUSH
55856: LD_VAR 0 1
55860: PUSH
55861: LD_VAR 0 3
55865: MINUS
55866: ST_TO_ADDR
// if y - r < 0 then
55867: LD_VAR 0 2
55871: PUSH
55872: LD_VAR 0 3
55876: MINUS
55877: PUSH
55878: LD_INT 0
55880: LESS
55881: IFFALSE 55893
// min_y := 0 else
55883: LD_ADDR_VAR 0 7
55887: PUSH
55888: LD_INT 0
55890: ST_TO_ADDR
55891: GO 55909
// min_y := y - r ;
55893: LD_ADDR_VAR 0 7
55897: PUSH
55898: LD_VAR 0 2
55902: PUSH
55903: LD_VAR 0 3
55907: MINUS
55908: ST_TO_ADDR
// max_x := x + r ;
55909: LD_ADDR_VAR 0 9
55913: PUSH
55914: LD_VAR 0 1
55918: PUSH
55919: LD_VAR 0 3
55923: PLUS
55924: ST_TO_ADDR
// max_y := y + r ;
55925: LD_ADDR_VAR 0 10
55929: PUSH
55930: LD_VAR 0 2
55934: PUSH
55935: LD_VAR 0 3
55939: PLUS
55940: ST_TO_ADDR
// for _x = min_x to max_x do
55941: LD_ADDR_VAR 0 5
55945: PUSH
55946: DOUBLE
55947: LD_VAR 0 8
55951: DEC
55952: ST_TO_ADDR
55953: LD_VAR 0 9
55957: PUSH
55958: FOR_TO
55959: IFFALSE 56060
// for _y = min_y to max_y do
55961: LD_ADDR_VAR 0 6
55965: PUSH
55966: DOUBLE
55967: LD_VAR 0 7
55971: DEC
55972: ST_TO_ADDR
55973: LD_VAR 0 10
55977: PUSH
55978: FOR_TO
55979: IFFALSE 56056
// begin if not ValidHex ( _x , _y ) then
55981: LD_VAR 0 5
55985: PPUSH
55986: LD_VAR 0 6
55990: PPUSH
55991: CALL_OW 488
55995: NOT
55996: IFFALSE 56000
// continue ;
55998: GO 55978
// if GetResourceTypeXY ( _x , _y ) then
56000: LD_VAR 0 5
56004: PPUSH
56005: LD_VAR 0 6
56009: PPUSH
56010: CALL_OW 283
56014: IFFALSE 56054
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56016: LD_ADDR_VAR 0 4
56020: PUSH
56021: LD_VAR 0 4
56025: PPUSH
56026: LD_VAR 0 4
56030: PUSH
56031: LD_INT 1
56033: PLUS
56034: PPUSH
56035: LD_VAR 0 5
56039: PUSH
56040: LD_VAR 0 6
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PPUSH
56049: CALL_OW 1
56053: ST_TO_ADDR
// end ;
56054: GO 55978
56056: POP
56057: POP
56058: GO 55958
56060: POP
56061: POP
// end ;
56062: LD_VAR 0 4
56066: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56067: LD_INT 0
56069: PPUSH
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
// if not units then
56077: LD_VAR 0 1
56081: NOT
56082: IFFALSE 56086
// exit ;
56084: GO 56511
// result := UnitFilter ( units , [ f_ok ] ) ;
56086: LD_ADDR_VAR 0 3
56090: PUSH
56091: LD_VAR 0 1
56095: PPUSH
56096: LD_INT 50
56098: PUSH
56099: EMPTY
56100: LIST
56101: PPUSH
56102: CALL_OW 72
56106: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56107: LD_ADDR_VAR 0 8
56111: PUSH
56112: LD_VAR 0 1
56116: PUSH
56117: LD_INT 1
56119: ARRAY
56120: PPUSH
56121: CALL_OW 255
56125: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
56126: LD_ADDR_VAR 0 10
56130: PUSH
56131: LD_INT 29
56133: PUSH
56134: LD_EXP 111
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// if not result then
56143: LD_VAR 0 3
56147: NOT
56148: IFFALSE 56152
// exit ;
56150: GO 56511
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56152: LD_ADDR_VAR 0 5
56156: PUSH
56157: LD_INT 81
56159: PUSH
56160: LD_VAR 0 8
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PPUSH
56169: CALL_OW 69
56173: ST_TO_ADDR
// for i in result do
56174: LD_ADDR_VAR 0 4
56178: PUSH
56179: LD_VAR 0 3
56183: PUSH
56184: FOR_IN
56185: IFFALSE 56509
// begin tag := GetTag ( i ) + 1 ;
56187: LD_ADDR_VAR 0 9
56191: PUSH
56192: LD_VAR 0 4
56196: PPUSH
56197: CALL_OW 110
56201: PUSH
56202: LD_INT 1
56204: PLUS
56205: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56206: LD_ADDR_VAR 0 7
56210: PUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: CALL_OW 250
56220: PPUSH
56221: LD_VAR 0 4
56225: PPUSH
56226: CALL_OW 251
56230: PPUSH
56231: LD_INT 6
56233: PPUSH
56234: CALL 55809 0 3
56238: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56239: LD_VAR 0 7
56243: PUSH
56244: LD_VAR 0 4
56248: PPUSH
56249: CALL_OW 264
56253: PUSH
56254: LD_VAR 0 10
56258: IN
56259: NOT
56260: AND
56261: IFFALSE 56300
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56263: LD_VAR 0 4
56267: PPUSH
56268: LD_VAR 0 7
56272: PUSH
56273: LD_INT 1
56275: ARRAY
56276: PUSH
56277: LD_INT 1
56279: ARRAY
56280: PPUSH
56281: LD_VAR 0 7
56285: PUSH
56286: LD_INT 1
56288: ARRAY
56289: PUSH
56290: LD_INT 2
56292: ARRAY
56293: PPUSH
56294: CALL_OW 116
56298: GO 56507
// if path > tag then
56300: LD_VAR 0 2
56304: PUSH
56305: LD_VAR 0 9
56309: GREATER
56310: IFFALSE 56477
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
56312: LD_ADDR_VAR 0 6
56316: PUSH
56317: LD_VAR 0 5
56321: PPUSH
56322: LD_INT 91
56324: PUSH
56325: LD_VAR 0 4
56329: PUSH
56330: LD_INT 12
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: PPUSH
56338: CALL_OW 72
56342: ST_TO_ADDR
// if nearEnemy then
56343: LD_VAR 0 6
56347: IFFALSE 56375
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56349: LD_VAR 0 4
56353: PPUSH
56354: LD_VAR 0 6
56358: PPUSH
56359: LD_VAR 0 4
56363: PPUSH
56364: CALL_OW 74
56368: PPUSH
56369: CALL_OW 115
56373: GO 56475
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56375: LD_VAR 0 4
56379: PPUSH
56380: LD_VAR 0 2
56384: PUSH
56385: LD_VAR 0 9
56389: ARRAY
56390: PUSH
56391: LD_INT 1
56393: ARRAY
56394: PPUSH
56395: LD_VAR 0 2
56399: PUSH
56400: LD_VAR 0 9
56404: ARRAY
56405: PUSH
56406: LD_INT 2
56408: ARRAY
56409: PPUSH
56410: CALL_OW 297
56414: PUSH
56415: LD_INT 6
56417: GREATER
56418: IFFALSE 56461
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56420: LD_VAR 0 4
56424: PPUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_VAR 0 9
56434: ARRAY
56435: PUSH
56436: LD_INT 1
56438: ARRAY
56439: PPUSH
56440: LD_VAR 0 2
56444: PUSH
56445: LD_VAR 0 9
56449: ARRAY
56450: PUSH
56451: LD_INT 2
56453: ARRAY
56454: PPUSH
56455: CALL_OW 114
56459: GO 56475
// SetTag ( i , tag ) ;
56461: LD_VAR 0 4
56465: PPUSH
56466: LD_VAR 0 9
56470: PPUSH
56471: CALL_OW 109
// end else
56475: GO 56507
// if enemy then
56477: LD_VAR 0 5
56481: IFFALSE 56507
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56483: LD_VAR 0 4
56487: PPUSH
56488: LD_VAR 0 5
56492: PPUSH
56493: LD_VAR 0 4
56497: PPUSH
56498: CALL_OW 74
56502: PPUSH
56503: CALL_OW 115
// end ;
56507: GO 56184
56509: POP
56510: POP
// end ;
56511: LD_VAR 0 3
56515: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56516: LD_INT 0
56518: PPUSH
56519: PPUSH
56520: PPUSH
// if not unit or IsInUnit ( unit ) then
56521: LD_VAR 0 1
56525: NOT
56526: PUSH
56527: LD_VAR 0 1
56531: PPUSH
56532: CALL_OW 310
56536: OR
56537: IFFALSE 56541
// exit ;
56539: GO 56632
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56541: LD_ADDR_VAR 0 4
56545: PUSH
56546: LD_VAR 0 1
56550: PPUSH
56551: CALL_OW 250
56555: PPUSH
56556: LD_VAR 0 2
56560: PPUSH
56561: LD_INT 1
56563: PPUSH
56564: CALL_OW 272
56568: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56569: LD_ADDR_VAR 0 5
56573: PUSH
56574: LD_VAR 0 1
56578: PPUSH
56579: CALL_OW 251
56583: PPUSH
56584: LD_VAR 0 2
56588: PPUSH
56589: LD_INT 1
56591: PPUSH
56592: CALL_OW 273
56596: ST_TO_ADDR
// if ValidHex ( x , y ) then
56597: LD_VAR 0 4
56601: PPUSH
56602: LD_VAR 0 5
56606: PPUSH
56607: CALL_OW 488
56611: IFFALSE 56632
// ComTurnXY ( unit , x , y ) ;
56613: LD_VAR 0 1
56617: PPUSH
56618: LD_VAR 0 4
56622: PPUSH
56623: LD_VAR 0 5
56627: PPUSH
56628: CALL_OW 118
// end ;
56632: LD_VAR 0 3
56636: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56637: LD_INT 0
56639: PPUSH
56640: PPUSH
// result := false ;
56641: LD_ADDR_VAR 0 3
56645: PUSH
56646: LD_INT 0
56648: ST_TO_ADDR
// if not units then
56649: LD_VAR 0 2
56653: NOT
56654: IFFALSE 56658
// exit ;
56656: GO 56703
// for i in units do
56658: LD_ADDR_VAR 0 4
56662: PUSH
56663: LD_VAR 0 2
56667: PUSH
56668: FOR_IN
56669: IFFALSE 56701
// if See ( side , i ) then
56671: LD_VAR 0 1
56675: PPUSH
56676: LD_VAR 0 4
56680: PPUSH
56681: CALL_OW 292
56685: IFFALSE 56699
// begin result := true ;
56687: LD_ADDR_VAR 0 3
56691: PUSH
56692: LD_INT 1
56694: ST_TO_ADDR
// exit ;
56695: POP
56696: POP
56697: GO 56703
// end ;
56699: GO 56668
56701: POP
56702: POP
// end ;
56703: LD_VAR 0 3
56707: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56708: LD_INT 0
56710: PPUSH
56711: PPUSH
56712: PPUSH
56713: PPUSH
// if not unit or not points then
56714: LD_VAR 0 1
56718: NOT
56719: PUSH
56720: LD_VAR 0 2
56724: NOT
56725: OR
56726: IFFALSE 56730
// exit ;
56728: GO 56820
// dist := 99999 ;
56730: LD_ADDR_VAR 0 5
56734: PUSH
56735: LD_INT 99999
56737: ST_TO_ADDR
// for i in points do
56738: LD_ADDR_VAR 0 4
56742: PUSH
56743: LD_VAR 0 2
56747: PUSH
56748: FOR_IN
56749: IFFALSE 56818
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56751: LD_ADDR_VAR 0 6
56755: PUSH
56756: LD_VAR 0 1
56760: PPUSH
56761: LD_VAR 0 4
56765: PUSH
56766: LD_INT 1
56768: ARRAY
56769: PPUSH
56770: LD_VAR 0 4
56774: PUSH
56775: LD_INT 2
56777: ARRAY
56778: PPUSH
56779: CALL_OW 297
56783: ST_TO_ADDR
// if tmpDist < dist then
56784: LD_VAR 0 6
56788: PUSH
56789: LD_VAR 0 5
56793: LESS
56794: IFFALSE 56816
// begin result := i ;
56796: LD_ADDR_VAR 0 3
56800: PUSH
56801: LD_VAR 0 4
56805: ST_TO_ADDR
// dist := tmpDist ;
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_VAR 0 6
56815: ST_TO_ADDR
// end ; end ;
56816: GO 56748
56818: POP
56819: POP
// end ; end_of_file
56820: LD_VAR 0 3
56824: RET
// every 0 0$1 do
56825: GO 56827
56827: DISABLE
// begin enable ;
56828: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
56829: LD_STRING updateTimer(
56831: PUSH
56832: LD_OWVAR 1
56836: STR
56837: PUSH
56838: LD_STRING );
56840: STR
56841: PPUSH
56842: CALL_OW 559
// end ;
56846: END
// on MapStart ( p ) do begin if streamModeActive then
56847: LD_EXP 49
56851: IFFALSE 56860
// DefineStreamItems ( true ) ;
56853: LD_INT 1
56855: PPUSH
56856: CALL 58508 0 1
// UpdateFactoryWaypoints ( ) ;
56860: CALL 72460 0 0
// end ;
56864: PPOPN 1
56866: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56867: LD_INT 0
56869: PPUSH
// if p2 = 100 then
56870: LD_VAR 0 2
56874: PUSH
56875: LD_INT 100
56877: EQUAL
56878: IFFALSE 57881
// begin if not StreamModeActive then
56880: LD_EXP 49
56884: NOT
56885: IFFALSE 56895
// StreamModeActive := true ;
56887: LD_ADDR_EXP 49
56891: PUSH
56892: LD_INT 1
56894: ST_TO_ADDR
// if p3 = 0 then
56895: LD_VAR 0 3
56899: PUSH
56900: LD_INT 0
56902: EQUAL
56903: IFFALSE 56909
// InitStreamMode ;
56905: CALL 58044 0 0
// if p3 = 1 then
56909: LD_VAR 0 3
56913: PUSH
56914: LD_INT 1
56916: EQUAL
56917: IFFALSE 56927
// sRocket := true ;
56919: LD_ADDR_EXP 54
56923: PUSH
56924: LD_INT 1
56926: ST_TO_ADDR
// if p3 = 2 then
56927: LD_VAR 0 3
56931: PUSH
56932: LD_INT 2
56934: EQUAL
56935: IFFALSE 56945
// sSpeed := true ;
56937: LD_ADDR_EXP 53
56941: PUSH
56942: LD_INT 1
56944: ST_TO_ADDR
// if p3 = 3 then
56945: LD_VAR 0 3
56949: PUSH
56950: LD_INT 3
56952: EQUAL
56953: IFFALSE 56963
// sEngine := true ;
56955: LD_ADDR_EXP 55
56959: PUSH
56960: LD_INT 1
56962: ST_TO_ADDR
// if p3 = 4 then
56963: LD_VAR 0 3
56967: PUSH
56968: LD_INT 4
56970: EQUAL
56971: IFFALSE 56981
// sSpec := true ;
56973: LD_ADDR_EXP 52
56977: PUSH
56978: LD_INT 1
56980: ST_TO_ADDR
// if p3 = 5 then
56981: LD_VAR 0 3
56985: PUSH
56986: LD_INT 5
56988: EQUAL
56989: IFFALSE 56999
// sLevel := true ;
56991: LD_ADDR_EXP 56
56995: PUSH
56996: LD_INT 1
56998: ST_TO_ADDR
// if p3 = 6 then
56999: LD_VAR 0 3
57003: PUSH
57004: LD_INT 6
57006: EQUAL
57007: IFFALSE 57017
// sArmoury := true ;
57009: LD_ADDR_EXP 57
57013: PUSH
57014: LD_INT 1
57016: ST_TO_ADDR
// if p3 = 7 then
57017: LD_VAR 0 3
57021: PUSH
57022: LD_INT 7
57024: EQUAL
57025: IFFALSE 57035
// sRadar := true ;
57027: LD_ADDR_EXP 58
57031: PUSH
57032: LD_INT 1
57034: ST_TO_ADDR
// if p3 = 8 then
57035: LD_VAR 0 3
57039: PUSH
57040: LD_INT 8
57042: EQUAL
57043: IFFALSE 57053
// sBunker := true ;
57045: LD_ADDR_EXP 59
57049: PUSH
57050: LD_INT 1
57052: ST_TO_ADDR
// if p3 = 9 then
57053: LD_VAR 0 3
57057: PUSH
57058: LD_INT 9
57060: EQUAL
57061: IFFALSE 57071
// sHack := true ;
57063: LD_ADDR_EXP 60
57067: PUSH
57068: LD_INT 1
57070: ST_TO_ADDR
// if p3 = 10 then
57071: LD_VAR 0 3
57075: PUSH
57076: LD_INT 10
57078: EQUAL
57079: IFFALSE 57089
// sFire := true ;
57081: LD_ADDR_EXP 61
57085: PUSH
57086: LD_INT 1
57088: ST_TO_ADDR
// if p3 = 11 then
57089: LD_VAR 0 3
57093: PUSH
57094: LD_INT 11
57096: EQUAL
57097: IFFALSE 57107
// sRefresh := true ;
57099: LD_ADDR_EXP 62
57103: PUSH
57104: LD_INT 1
57106: ST_TO_ADDR
// if p3 = 12 then
57107: LD_VAR 0 3
57111: PUSH
57112: LD_INT 12
57114: EQUAL
57115: IFFALSE 57125
// sExp := true ;
57117: LD_ADDR_EXP 63
57121: PUSH
57122: LD_INT 1
57124: ST_TO_ADDR
// if p3 = 13 then
57125: LD_VAR 0 3
57129: PUSH
57130: LD_INT 13
57132: EQUAL
57133: IFFALSE 57143
// sDepot := true ;
57135: LD_ADDR_EXP 64
57139: PUSH
57140: LD_INT 1
57142: ST_TO_ADDR
// if p3 = 14 then
57143: LD_VAR 0 3
57147: PUSH
57148: LD_INT 14
57150: EQUAL
57151: IFFALSE 57161
// sFlag := true ;
57153: LD_ADDR_EXP 65
57157: PUSH
57158: LD_INT 1
57160: ST_TO_ADDR
// if p3 = 15 then
57161: LD_VAR 0 3
57165: PUSH
57166: LD_INT 15
57168: EQUAL
57169: IFFALSE 57179
// sKamikadze := true ;
57171: LD_ADDR_EXP 73
57175: PUSH
57176: LD_INT 1
57178: ST_TO_ADDR
// if p3 = 16 then
57179: LD_VAR 0 3
57183: PUSH
57184: LD_INT 16
57186: EQUAL
57187: IFFALSE 57197
// sTroll := true ;
57189: LD_ADDR_EXP 74
57193: PUSH
57194: LD_INT 1
57196: ST_TO_ADDR
// if p3 = 17 then
57197: LD_VAR 0 3
57201: PUSH
57202: LD_INT 17
57204: EQUAL
57205: IFFALSE 57215
// sSlow := true ;
57207: LD_ADDR_EXP 75
57211: PUSH
57212: LD_INT 1
57214: ST_TO_ADDR
// if p3 = 18 then
57215: LD_VAR 0 3
57219: PUSH
57220: LD_INT 18
57222: EQUAL
57223: IFFALSE 57233
// sLack := true ;
57225: LD_ADDR_EXP 76
57229: PUSH
57230: LD_INT 1
57232: ST_TO_ADDR
// if p3 = 19 then
57233: LD_VAR 0 3
57237: PUSH
57238: LD_INT 19
57240: EQUAL
57241: IFFALSE 57251
// sTank := true ;
57243: LD_ADDR_EXP 78
57247: PUSH
57248: LD_INT 1
57250: ST_TO_ADDR
// if p3 = 20 then
57251: LD_VAR 0 3
57255: PUSH
57256: LD_INT 20
57258: EQUAL
57259: IFFALSE 57269
// sRemote := true ;
57261: LD_ADDR_EXP 79
57265: PUSH
57266: LD_INT 1
57268: ST_TO_ADDR
// if p3 = 21 then
57269: LD_VAR 0 3
57273: PUSH
57274: LD_INT 21
57276: EQUAL
57277: IFFALSE 57287
// sPowell := true ;
57279: LD_ADDR_EXP 80
57283: PUSH
57284: LD_INT 1
57286: ST_TO_ADDR
// if p3 = 22 then
57287: LD_VAR 0 3
57291: PUSH
57292: LD_INT 22
57294: EQUAL
57295: IFFALSE 57305
// sTeleport := true ;
57297: LD_ADDR_EXP 83
57301: PUSH
57302: LD_INT 1
57304: ST_TO_ADDR
// if p3 = 23 then
57305: LD_VAR 0 3
57309: PUSH
57310: LD_INT 23
57312: EQUAL
57313: IFFALSE 57323
// sOilTower := true ;
57315: LD_ADDR_EXP 85
57319: PUSH
57320: LD_INT 1
57322: ST_TO_ADDR
// if p3 = 24 then
57323: LD_VAR 0 3
57327: PUSH
57328: LD_INT 24
57330: EQUAL
57331: IFFALSE 57341
// sShovel := true ;
57333: LD_ADDR_EXP 86
57337: PUSH
57338: LD_INT 1
57340: ST_TO_ADDR
// if p3 = 25 then
57341: LD_VAR 0 3
57345: PUSH
57346: LD_INT 25
57348: EQUAL
57349: IFFALSE 57359
// sSheik := true ;
57351: LD_ADDR_EXP 87
57355: PUSH
57356: LD_INT 1
57358: ST_TO_ADDR
// if p3 = 26 then
57359: LD_VAR 0 3
57363: PUSH
57364: LD_INT 26
57366: EQUAL
57367: IFFALSE 57377
// sEarthquake := true ;
57369: LD_ADDR_EXP 89
57373: PUSH
57374: LD_INT 1
57376: ST_TO_ADDR
// if p3 = 27 then
57377: LD_VAR 0 3
57381: PUSH
57382: LD_INT 27
57384: EQUAL
57385: IFFALSE 57395
// sAI := true ;
57387: LD_ADDR_EXP 90
57391: PUSH
57392: LD_INT 1
57394: ST_TO_ADDR
// if p3 = 28 then
57395: LD_VAR 0 3
57399: PUSH
57400: LD_INT 28
57402: EQUAL
57403: IFFALSE 57413
// sCargo := true ;
57405: LD_ADDR_EXP 93
57409: PUSH
57410: LD_INT 1
57412: ST_TO_ADDR
// if p3 = 29 then
57413: LD_VAR 0 3
57417: PUSH
57418: LD_INT 29
57420: EQUAL
57421: IFFALSE 57431
// sDLaser := true ;
57423: LD_ADDR_EXP 94
57427: PUSH
57428: LD_INT 1
57430: ST_TO_ADDR
// if p3 = 30 then
57431: LD_VAR 0 3
57435: PUSH
57436: LD_INT 30
57438: EQUAL
57439: IFFALSE 57449
// sExchange := true ;
57441: LD_ADDR_EXP 95
57445: PUSH
57446: LD_INT 1
57448: ST_TO_ADDR
// if p3 = 31 then
57449: LD_VAR 0 3
57453: PUSH
57454: LD_INT 31
57456: EQUAL
57457: IFFALSE 57467
// sFac := true ;
57459: LD_ADDR_EXP 96
57463: PUSH
57464: LD_INT 1
57466: ST_TO_ADDR
// if p3 = 32 then
57467: LD_VAR 0 3
57471: PUSH
57472: LD_INT 32
57474: EQUAL
57475: IFFALSE 57485
// sPower := true ;
57477: LD_ADDR_EXP 97
57481: PUSH
57482: LD_INT 1
57484: ST_TO_ADDR
// if p3 = 33 then
57485: LD_VAR 0 3
57489: PUSH
57490: LD_INT 33
57492: EQUAL
57493: IFFALSE 57503
// sRandom := true ;
57495: LD_ADDR_EXP 98
57499: PUSH
57500: LD_INT 1
57502: ST_TO_ADDR
// if p3 = 34 then
57503: LD_VAR 0 3
57507: PUSH
57508: LD_INT 34
57510: EQUAL
57511: IFFALSE 57521
// sShield := true ;
57513: LD_ADDR_EXP 99
57517: PUSH
57518: LD_INT 1
57520: ST_TO_ADDR
// if p3 = 35 then
57521: LD_VAR 0 3
57525: PUSH
57526: LD_INT 35
57528: EQUAL
57529: IFFALSE 57539
// sTime := true ;
57531: LD_ADDR_EXP 100
57535: PUSH
57536: LD_INT 1
57538: ST_TO_ADDR
// if p3 = 36 then
57539: LD_VAR 0 3
57543: PUSH
57544: LD_INT 36
57546: EQUAL
57547: IFFALSE 57557
// sTools := true ;
57549: LD_ADDR_EXP 101
57553: PUSH
57554: LD_INT 1
57556: ST_TO_ADDR
// if p3 = 101 then
57557: LD_VAR 0 3
57561: PUSH
57562: LD_INT 101
57564: EQUAL
57565: IFFALSE 57575
// sSold := true ;
57567: LD_ADDR_EXP 66
57571: PUSH
57572: LD_INT 1
57574: ST_TO_ADDR
// if p3 = 102 then
57575: LD_VAR 0 3
57579: PUSH
57580: LD_INT 102
57582: EQUAL
57583: IFFALSE 57593
// sDiff := true ;
57585: LD_ADDR_EXP 67
57589: PUSH
57590: LD_INT 1
57592: ST_TO_ADDR
// if p3 = 103 then
57593: LD_VAR 0 3
57597: PUSH
57598: LD_INT 103
57600: EQUAL
57601: IFFALSE 57611
// sFog := true ;
57603: LD_ADDR_EXP 70
57607: PUSH
57608: LD_INT 1
57610: ST_TO_ADDR
// if p3 = 104 then
57611: LD_VAR 0 3
57615: PUSH
57616: LD_INT 104
57618: EQUAL
57619: IFFALSE 57629
// sReset := true ;
57621: LD_ADDR_EXP 71
57625: PUSH
57626: LD_INT 1
57628: ST_TO_ADDR
// if p3 = 105 then
57629: LD_VAR 0 3
57633: PUSH
57634: LD_INT 105
57636: EQUAL
57637: IFFALSE 57647
// sSun := true ;
57639: LD_ADDR_EXP 72
57643: PUSH
57644: LD_INT 1
57646: ST_TO_ADDR
// if p3 = 106 then
57647: LD_VAR 0 3
57651: PUSH
57652: LD_INT 106
57654: EQUAL
57655: IFFALSE 57665
// sTiger := true ;
57657: LD_ADDR_EXP 68
57661: PUSH
57662: LD_INT 1
57664: ST_TO_ADDR
// if p3 = 107 then
57665: LD_VAR 0 3
57669: PUSH
57670: LD_INT 107
57672: EQUAL
57673: IFFALSE 57683
// sBomb := true ;
57675: LD_ADDR_EXP 69
57679: PUSH
57680: LD_INT 1
57682: ST_TO_ADDR
// if p3 = 108 then
57683: LD_VAR 0 3
57687: PUSH
57688: LD_INT 108
57690: EQUAL
57691: IFFALSE 57701
// sWound := true ;
57693: LD_ADDR_EXP 77
57697: PUSH
57698: LD_INT 1
57700: ST_TO_ADDR
// if p3 = 109 then
57701: LD_VAR 0 3
57705: PUSH
57706: LD_INT 109
57708: EQUAL
57709: IFFALSE 57719
// sBetray := true ;
57711: LD_ADDR_EXP 81
57715: PUSH
57716: LD_INT 1
57718: ST_TO_ADDR
// if p3 = 110 then
57719: LD_VAR 0 3
57723: PUSH
57724: LD_INT 110
57726: EQUAL
57727: IFFALSE 57737
// sContamin := true ;
57729: LD_ADDR_EXP 82
57733: PUSH
57734: LD_INT 1
57736: ST_TO_ADDR
// if p3 = 111 then
57737: LD_VAR 0 3
57741: PUSH
57742: LD_INT 111
57744: EQUAL
57745: IFFALSE 57755
// sOil := true ;
57747: LD_ADDR_EXP 84
57751: PUSH
57752: LD_INT 1
57754: ST_TO_ADDR
// if p3 = 112 then
57755: LD_VAR 0 3
57759: PUSH
57760: LD_INT 112
57762: EQUAL
57763: IFFALSE 57773
// sStu := true ;
57765: LD_ADDR_EXP 88
57769: PUSH
57770: LD_INT 1
57772: ST_TO_ADDR
// if p3 = 113 then
57773: LD_VAR 0 3
57777: PUSH
57778: LD_INT 113
57780: EQUAL
57781: IFFALSE 57791
// sBazooka := true ;
57783: LD_ADDR_EXP 91
57787: PUSH
57788: LD_INT 1
57790: ST_TO_ADDR
// if p3 = 114 then
57791: LD_VAR 0 3
57795: PUSH
57796: LD_INT 114
57798: EQUAL
57799: IFFALSE 57809
// sMortar := true ;
57801: LD_ADDR_EXP 92
57805: PUSH
57806: LD_INT 1
57808: ST_TO_ADDR
// if p3 = 115 then
57809: LD_VAR 0 3
57813: PUSH
57814: LD_INT 115
57816: EQUAL
57817: IFFALSE 57827
// sRanger := true ;
57819: LD_ADDR_EXP 102
57823: PUSH
57824: LD_INT 1
57826: ST_TO_ADDR
// if p3 = 116 then
57827: LD_VAR 0 3
57831: PUSH
57832: LD_INT 116
57834: EQUAL
57835: IFFALSE 57845
// sComputer := true ;
57837: LD_ADDR_EXP 103
57841: PUSH
57842: LD_INT 1
57844: ST_TO_ADDR
// if p3 = 117 then
57845: LD_VAR 0 3
57849: PUSH
57850: LD_INT 117
57852: EQUAL
57853: IFFALSE 57863
// s30 := true ;
57855: LD_ADDR_EXP 104
57859: PUSH
57860: LD_INT 1
57862: ST_TO_ADDR
// if p3 = 118 then
57863: LD_VAR 0 3
57867: PUSH
57868: LD_INT 118
57870: EQUAL
57871: IFFALSE 57881
// s60 := true ;
57873: LD_ADDR_EXP 105
57877: PUSH
57878: LD_INT 1
57880: ST_TO_ADDR
// end ; if p2 = 101 then
57881: LD_VAR 0 2
57885: PUSH
57886: LD_INT 101
57888: EQUAL
57889: IFFALSE 58017
// begin case p3 of 1 :
57891: LD_VAR 0 3
57895: PUSH
57896: LD_INT 1
57898: DOUBLE
57899: EQUAL
57900: IFTRUE 57904
57902: GO 57911
57904: POP
// hHackUnlimitedResources ; 2 :
57905: CALL 70115 0 0
57909: GO 58017
57911: LD_INT 2
57913: DOUBLE
57914: EQUAL
57915: IFTRUE 57919
57917: GO 57926
57919: POP
// hHackSetLevel10 ; 3 :
57920: CALL 70248 0 0
57924: GO 58017
57926: LD_INT 3
57928: DOUBLE
57929: EQUAL
57930: IFTRUE 57934
57932: GO 57941
57934: POP
// hHackSetLevel10YourUnits ; 4 :
57935: CALL 70333 0 0
57939: GO 58017
57941: LD_INT 4
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57949
57947: GO 57956
57949: POP
// hHackInvincible ; 5 :
57950: CALL 70781 0 0
57954: GO 58017
57956: LD_INT 5
57958: DOUBLE
57959: EQUAL
57960: IFTRUE 57964
57962: GO 57971
57964: POP
// hHackInvisible ; 6 :
57965: CALL 70892 0 0
57969: GO 58017
57971: LD_INT 6
57973: DOUBLE
57974: EQUAL
57975: IFTRUE 57979
57977: GO 57986
57979: POP
// hHackChangeYourSide ; 7 :
57980: CALL 70949 0 0
57984: GO 58017
57986: LD_INT 7
57988: DOUBLE
57989: EQUAL
57990: IFTRUE 57994
57992: GO 58001
57994: POP
// hHackChangeUnitSide ; 8 :
57995: CALL 70991 0 0
57999: GO 58017
58001: LD_INT 8
58003: DOUBLE
58004: EQUAL
58005: IFTRUE 58009
58007: GO 58016
58009: POP
// hHackFog ; end ;
58010: CALL 71092 0 0
58014: GO 58017
58016: POP
// end ; end ;
58017: LD_VAR 0 7
58021: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
58022: GO 58024
58024: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
58025: LD_STRING initStreamRollete();
58027: PPUSH
58028: CALL_OW 559
// InitStreamMode ;
58032: CALL 58044 0 0
// DefineStreamItems ( false ) ;
58036: LD_INT 0
58038: PPUSH
58039: CALL 58508 0 1
// end ;
58043: END
// function InitStreamMode ; begin
58044: LD_INT 0
58046: PPUSH
// streamModeActive := false ;
58047: LD_ADDR_EXP 49
58051: PUSH
58052: LD_INT 0
58054: ST_TO_ADDR
// normalCounter := 36 ;
58055: LD_ADDR_EXP 50
58059: PUSH
58060: LD_INT 36
58062: ST_TO_ADDR
// hardcoreCounter := 18 ;
58063: LD_ADDR_EXP 51
58067: PUSH
58068: LD_INT 18
58070: ST_TO_ADDR
// sRocket := false ;
58071: LD_ADDR_EXP 54
58075: PUSH
58076: LD_INT 0
58078: ST_TO_ADDR
// sSpeed := false ;
58079: LD_ADDR_EXP 53
58083: PUSH
58084: LD_INT 0
58086: ST_TO_ADDR
// sEngine := false ;
58087: LD_ADDR_EXP 55
58091: PUSH
58092: LD_INT 0
58094: ST_TO_ADDR
// sSpec := false ;
58095: LD_ADDR_EXP 52
58099: PUSH
58100: LD_INT 0
58102: ST_TO_ADDR
// sLevel := false ;
58103: LD_ADDR_EXP 56
58107: PUSH
58108: LD_INT 0
58110: ST_TO_ADDR
// sArmoury := false ;
58111: LD_ADDR_EXP 57
58115: PUSH
58116: LD_INT 0
58118: ST_TO_ADDR
// sRadar := false ;
58119: LD_ADDR_EXP 58
58123: PUSH
58124: LD_INT 0
58126: ST_TO_ADDR
// sBunker := false ;
58127: LD_ADDR_EXP 59
58131: PUSH
58132: LD_INT 0
58134: ST_TO_ADDR
// sHack := false ;
58135: LD_ADDR_EXP 60
58139: PUSH
58140: LD_INT 0
58142: ST_TO_ADDR
// sFire := false ;
58143: LD_ADDR_EXP 61
58147: PUSH
58148: LD_INT 0
58150: ST_TO_ADDR
// sRefresh := false ;
58151: LD_ADDR_EXP 62
58155: PUSH
58156: LD_INT 0
58158: ST_TO_ADDR
// sExp := false ;
58159: LD_ADDR_EXP 63
58163: PUSH
58164: LD_INT 0
58166: ST_TO_ADDR
// sDepot := false ;
58167: LD_ADDR_EXP 64
58171: PUSH
58172: LD_INT 0
58174: ST_TO_ADDR
// sFlag := false ;
58175: LD_ADDR_EXP 65
58179: PUSH
58180: LD_INT 0
58182: ST_TO_ADDR
// sKamikadze := false ;
58183: LD_ADDR_EXP 73
58187: PUSH
58188: LD_INT 0
58190: ST_TO_ADDR
// sTroll := false ;
58191: LD_ADDR_EXP 74
58195: PUSH
58196: LD_INT 0
58198: ST_TO_ADDR
// sSlow := false ;
58199: LD_ADDR_EXP 75
58203: PUSH
58204: LD_INT 0
58206: ST_TO_ADDR
// sLack := false ;
58207: LD_ADDR_EXP 76
58211: PUSH
58212: LD_INT 0
58214: ST_TO_ADDR
// sTank := false ;
58215: LD_ADDR_EXP 78
58219: PUSH
58220: LD_INT 0
58222: ST_TO_ADDR
// sRemote := false ;
58223: LD_ADDR_EXP 79
58227: PUSH
58228: LD_INT 0
58230: ST_TO_ADDR
// sPowell := false ;
58231: LD_ADDR_EXP 80
58235: PUSH
58236: LD_INT 0
58238: ST_TO_ADDR
// sTeleport := false ;
58239: LD_ADDR_EXP 83
58243: PUSH
58244: LD_INT 0
58246: ST_TO_ADDR
// sOilTower := false ;
58247: LD_ADDR_EXP 85
58251: PUSH
58252: LD_INT 0
58254: ST_TO_ADDR
// sShovel := false ;
58255: LD_ADDR_EXP 86
58259: PUSH
58260: LD_INT 0
58262: ST_TO_ADDR
// sSheik := false ;
58263: LD_ADDR_EXP 87
58267: PUSH
58268: LD_INT 0
58270: ST_TO_ADDR
// sEarthquake := false ;
58271: LD_ADDR_EXP 89
58275: PUSH
58276: LD_INT 0
58278: ST_TO_ADDR
// sAI := false ;
58279: LD_ADDR_EXP 90
58283: PUSH
58284: LD_INT 0
58286: ST_TO_ADDR
// sCargo := false ;
58287: LD_ADDR_EXP 93
58291: PUSH
58292: LD_INT 0
58294: ST_TO_ADDR
// sDLaser := false ;
58295: LD_ADDR_EXP 94
58299: PUSH
58300: LD_INT 0
58302: ST_TO_ADDR
// sExchange := false ;
58303: LD_ADDR_EXP 95
58307: PUSH
58308: LD_INT 0
58310: ST_TO_ADDR
// sFac := false ;
58311: LD_ADDR_EXP 96
58315: PUSH
58316: LD_INT 0
58318: ST_TO_ADDR
// sPower := false ;
58319: LD_ADDR_EXP 97
58323: PUSH
58324: LD_INT 0
58326: ST_TO_ADDR
// sRandom := false ;
58327: LD_ADDR_EXP 98
58331: PUSH
58332: LD_INT 0
58334: ST_TO_ADDR
// sShield := false ;
58335: LD_ADDR_EXP 99
58339: PUSH
58340: LD_INT 0
58342: ST_TO_ADDR
// sTime := false ;
58343: LD_ADDR_EXP 100
58347: PUSH
58348: LD_INT 0
58350: ST_TO_ADDR
// sTools := false ;
58351: LD_ADDR_EXP 101
58355: PUSH
58356: LD_INT 0
58358: ST_TO_ADDR
// sSold := false ;
58359: LD_ADDR_EXP 66
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// sDiff := false ;
58367: LD_ADDR_EXP 67
58371: PUSH
58372: LD_INT 0
58374: ST_TO_ADDR
// sFog := false ;
58375: LD_ADDR_EXP 70
58379: PUSH
58380: LD_INT 0
58382: ST_TO_ADDR
// sReset := false ;
58383: LD_ADDR_EXP 71
58387: PUSH
58388: LD_INT 0
58390: ST_TO_ADDR
// sSun := false ;
58391: LD_ADDR_EXP 72
58395: PUSH
58396: LD_INT 0
58398: ST_TO_ADDR
// sTiger := false ;
58399: LD_ADDR_EXP 68
58403: PUSH
58404: LD_INT 0
58406: ST_TO_ADDR
// sBomb := false ;
58407: LD_ADDR_EXP 69
58411: PUSH
58412: LD_INT 0
58414: ST_TO_ADDR
// sWound := false ;
58415: LD_ADDR_EXP 77
58419: PUSH
58420: LD_INT 0
58422: ST_TO_ADDR
// sBetray := false ;
58423: LD_ADDR_EXP 81
58427: PUSH
58428: LD_INT 0
58430: ST_TO_ADDR
// sContamin := false ;
58431: LD_ADDR_EXP 82
58435: PUSH
58436: LD_INT 0
58438: ST_TO_ADDR
// sOil := false ;
58439: LD_ADDR_EXP 84
58443: PUSH
58444: LD_INT 0
58446: ST_TO_ADDR
// sStu := false ;
58447: LD_ADDR_EXP 88
58451: PUSH
58452: LD_INT 0
58454: ST_TO_ADDR
// sBazooka := false ;
58455: LD_ADDR_EXP 91
58459: PUSH
58460: LD_INT 0
58462: ST_TO_ADDR
// sMortar := false ;
58463: LD_ADDR_EXP 92
58467: PUSH
58468: LD_INT 0
58470: ST_TO_ADDR
// sRanger := false ;
58471: LD_ADDR_EXP 102
58475: PUSH
58476: LD_INT 0
58478: ST_TO_ADDR
// sComputer := false ;
58479: LD_ADDR_EXP 103
58483: PUSH
58484: LD_INT 0
58486: ST_TO_ADDR
// s30 := false ;
58487: LD_ADDR_EXP 104
58491: PUSH
58492: LD_INT 0
58494: ST_TO_ADDR
// s60 := false ;
58495: LD_ADDR_EXP 105
58499: PUSH
58500: LD_INT 0
58502: ST_TO_ADDR
// end ;
58503: LD_VAR 0 1
58507: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58508: LD_INT 0
58510: PPUSH
58511: PPUSH
58512: PPUSH
58513: PPUSH
58514: PPUSH
58515: PPUSH
58516: PPUSH
// result := [ ] ;
58517: LD_ADDR_VAR 0 2
58521: PUSH
58522: EMPTY
58523: ST_TO_ADDR
// if campaign_id = 1 then
58524: LD_OWVAR 69
58528: PUSH
58529: LD_INT 1
58531: EQUAL
58532: IFFALSE 61698
// begin case mission_number of 1 :
58534: LD_OWVAR 70
58538: PUSH
58539: LD_INT 1
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58547
58545: GO 58623
58547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
58548: LD_ADDR_VAR 0 2
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: LD_INT 11
58561: PUSH
58562: LD_INT 12
58564: PUSH
58565: LD_INT 15
58567: PUSH
58568: LD_INT 16
58570: PUSH
58571: LD_INT 22
58573: PUSH
58574: LD_INT 23
58576: PUSH
58577: LD_INT 26
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 101
58593: PUSH
58594: LD_INT 102
58596: PUSH
58597: LD_INT 106
58599: PUSH
58600: LD_INT 116
58602: PUSH
58603: LD_INT 117
58605: PUSH
58606: LD_INT 118
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: ST_TO_ADDR
58621: GO 61696
58623: LD_INT 2
58625: DOUBLE
58626: EQUAL
58627: IFTRUE 58631
58629: GO 58715
58631: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58632: LD_ADDR_VAR 0 2
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 4
58642: PUSH
58643: LD_INT 11
58645: PUSH
58646: LD_INT 12
58648: PUSH
58649: LD_INT 15
58651: PUSH
58652: LD_INT 16
58654: PUSH
58655: LD_INT 22
58657: PUSH
58658: LD_INT 23
58660: PUSH
58661: LD_INT 26
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 101
58677: PUSH
58678: LD_INT 102
58680: PUSH
58681: LD_INT 105
58683: PUSH
58684: LD_INT 106
58686: PUSH
58687: LD_INT 108
58689: PUSH
58690: LD_INT 116
58692: PUSH
58693: LD_INT 117
58695: PUSH
58696: LD_INT 118
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: ST_TO_ADDR
58713: GO 61696
58715: LD_INT 3
58717: DOUBLE
58718: EQUAL
58719: IFTRUE 58723
58721: GO 58811
58723: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58724: LD_ADDR_VAR 0 2
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 4
58734: PUSH
58735: LD_INT 5
58737: PUSH
58738: LD_INT 11
58740: PUSH
58741: LD_INT 12
58743: PUSH
58744: LD_INT 15
58746: PUSH
58747: LD_INT 16
58749: PUSH
58750: LD_INT 22
58752: PUSH
58753: LD_INT 26
58755: PUSH
58756: LD_INT 36
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 101
58773: PUSH
58774: LD_INT 102
58776: PUSH
58777: LD_INT 105
58779: PUSH
58780: LD_INT 106
58782: PUSH
58783: LD_INT 108
58785: PUSH
58786: LD_INT 116
58788: PUSH
58789: LD_INT 117
58791: PUSH
58792: LD_INT 118
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: ST_TO_ADDR
58809: GO 61696
58811: LD_INT 4
58813: DOUBLE
58814: EQUAL
58815: IFTRUE 58819
58817: GO 58915
58819: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
58820: LD_ADDR_VAR 0 2
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: LD_INT 5
58833: PUSH
58834: LD_INT 8
58836: PUSH
58837: LD_INT 11
58839: PUSH
58840: LD_INT 12
58842: PUSH
58843: LD_INT 15
58845: PUSH
58846: LD_INT 16
58848: PUSH
58849: LD_INT 22
58851: PUSH
58852: LD_INT 23
58854: PUSH
58855: LD_INT 26
58857: PUSH
58858: LD_INT 36
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 101
58877: PUSH
58878: LD_INT 102
58880: PUSH
58881: LD_INT 105
58883: PUSH
58884: LD_INT 106
58886: PUSH
58887: LD_INT 108
58889: PUSH
58890: LD_INT 116
58892: PUSH
58893: LD_INT 117
58895: PUSH
58896: LD_INT 118
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: ST_TO_ADDR
58913: GO 61696
58915: LD_INT 5
58917: DOUBLE
58918: EQUAL
58919: IFTRUE 58923
58921: GO 59035
58923: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
58924: LD_ADDR_VAR 0 2
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: LD_INT 5
58937: PUSH
58938: LD_INT 6
58940: PUSH
58941: LD_INT 8
58943: PUSH
58944: LD_INT 11
58946: PUSH
58947: LD_INT 12
58949: PUSH
58950: LD_INT 15
58952: PUSH
58953: LD_INT 16
58955: PUSH
58956: LD_INT 22
58958: PUSH
58959: LD_INT 23
58961: PUSH
58962: LD_INT 25
58964: PUSH
58965: LD_INT 26
58967: PUSH
58968: LD_INT 36
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 101
58989: PUSH
58990: LD_INT 102
58992: PUSH
58993: LD_INT 105
58995: PUSH
58996: LD_INT 106
58998: PUSH
58999: LD_INT 108
59001: PUSH
59002: LD_INT 109
59004: PUSH
59005: LD_INT 112
59007: PUSH
59008: LD_INT 116
59010: PUSH
59011: LD_INT 117
59013: PUSH
59014: LD_INT 118
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: ST_TO_ADDR
59033: GO 61696
59035: LD_INT 6
59037: DOUBLE
59038: EQUAL
59039: IFTRUE 59043
59041: GO 59175
59043: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59044: LD_ADDR_VAR 0 2
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 4
59054: PUSH
59055: LD_INT 5
59057: PUSH
59058: LD_INT 6
59060: PUSH
59061: LD_INT 8
59063: PUSH
59064: LD_INT 11
59066: PUSH
59067: LD_INT 12
59069: PUSH
59070: LD_INT 15
59072: PUSH
59073: LD_INT 16
59075: PUSH
59076: LD_INT 20
59078: PUSH
59079: LD_INT 21
59081: PUSH
59082: LD_INT 22
59084: PUSH
59085: LD_INT 23
59087: PUSH
59088: LD_INT 25
59090: PUSH
59091: LD_INT 26
59093: PUSH
59094: LD_INT 30
59096: PUSH
59097: LD_INT 31
59099: PUSH
59100: LD_INT 32
59102: PUSH
59103: LD_INT 36
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 101
59129: PUSH
59130: LD_INT 102
59132: PUSH
59133: LD_INT 105
59135: PUSH
59136: LD_INT 106
59138: PUSH
59139: LD_INT 108
59141: PUSH
59142: LD_INT 109
59144: PUSH
59145: LD_INT 112
59147: PUSH
59148: LD_INT 116
59150: PUSH
59151: LD_INT 117
59153: PUSH
59154: LD_INT 118
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: ST_TO_ADDR
59173: GO 61696
59175: LD_INT 7
59177: DOUBLE
59178: EQUAL
59179: IFTRUE 59183
59181: GO 59295
59183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59184: LD_ADDR_VAR 0 2
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 4
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: LD_INT 7
59200: PUSH
59201: LD_INT 11
59203: PUSH
59204: LD_INT 12
59206: PUSH
59207: LD_INT 15
59209: PUSH
59210: LD_INT 16
59212: PUSH
59213: LD_INT 20
59215: PUSH
59216: LD_INT 21
59218: PUSH
59219: LD_INT 22
59221: PUSH
59222: LD_INT 23
59224: PUSH
59225: LD_INT 25
59227: PUSH
59228: LD_INT 26
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 101
59249: PUSH
59250: LD_INT 102
59252: PUSH
59253: LD_INT 103
59255: PUSH
59256: LD_INT 105
59258: PUSH
59259: LD_INT 106
59261: PUSH
59262: LD_INT 108
59264: PUSH
59265: LD_INT 112
59267: PUSH
59268: LD_INT 116
59270: PUSH
59271: LD_INT 117
59273: PUSH
59274: LD_INT 118
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: ST_TO_ADDR
59293: GO 61696
59295: LD_INT 8
59297: DOUBLE
59298: EQUAL
59299: IFTRUE 59303
59301: GO 59443
59303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59304: LD_ADDR_VAR 0 2
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: LD_INT 5
59317: PUSH
59318: LD_INT 6
59320: PUSH
59321: LD_INT 7
59323: PUSH
59324: LD_INT 8
59326: PUSH
59327: LD_INT 11
59329: PUSH
59330: LD_INT 12
59332: PUSH
59333: LD_INT 15
59335: PUSH
59336: LD_INT 16
59338: PUSH
59339: LD_INT 20
59341: PUSH
59342: LD_INT 21
59344: PUSH
59345: LD_INT 22
59347: PUSH
59348: LD_INT 23
59350: PUSH
59351: LD_INT 25
59353: PUSH
59354: LD_INT 26
59356: PUSH
59357: LD_INT 30
59359: PUSH
59360: LD_INT 31
59362: PUSH
59363: LD_INT 32
59365: PUSH
59366: LD_INT 36
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 101
59393: PUSH
59394: LD_INT 102
59396: PUSH
59397: LD_INT 103
59399: PUSH
59400: LD_INT 105
59402: PUSH
59403: LD_INT 106
59405: PUSH
59406: LD_INT 108
59408: PUSH
59409: LD_INT 109
59411: PUSH
59412: LD_INT 112
59414: PUSH
59415: LD_INT 116
59417: PUSH
59418: LD_INT 117
59420: PUSH
59421: LD_INT 118
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: ST_TO_ADDR
59441: GO 61696
59443: LD_INT 9
59445: DOUBLE
59446: EQUAL
59447: IFTRUE 59451
59449: GO 59599
59451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59452: LD_ADDR_VAR 0 2
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 4
59462: PUSH
59463: LD_INT 5
59465: PUSH
59466: LD_INT 6
59468: PUSH
59469: LD_INT 7
59471: PUSH
59472: LD_INT 8
59474: PUSH
59475: LD_INT 11
59477: PUSH
59478: LD_INT 12
59480: PUSH
59481: LD_INT 15
59483: PUSH
59484: LD_INT 16
59486: PUSH
59487: LD_INT 20
59489: PUSH
59490: LD_INT 21
59492: PUSH
59493: LD_INT 22
59495: PUSH
59496: LD_INT 23
59498: PUSH
59499: LD_INT 25
59501: PUSH
59502: LD_INT 26
59504: PUSH
59505: LD_INT 28
59507: PUSH
59508: LD_INT 30
59510: PUSH
59511: LD_INT 31
59513: PUSH
59514: LD_INT 32
59516: PUSH
59517: LD_INT 36
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 101
59545: PUSH
59546: LD_INT 102
59548: PUSH
59549: LD_INT 103
59551: PUSH
59552: LD_INT 105
59554: PUSH
59555: LD_INT 106
59557: PUSH
59558: LD_INT 108
59560: PUSH
59561: LD_INT 109
59563: PUSH
59564: LD_INT 112
59566: PUSH
59567: LD_INT 114
59569: PUSH
59570: LD_INT 116
59572: PUSH
59573: LD_INT 117
59575: PUSH
59576: LD_INT 118
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: ST_TO_ADDR
59597: GO 61696
59599: LD_INT 10
59601: DOUBLE
59602: EQUAL
59603: IFTRUE 59607
59605: GO 59803
59607: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59608: LD_ADDR_VAR 0 2
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: LD_INT 5
59621: PUSH
59622: LD_INT 6
59624: PUSH
59625: LD_INT 7
59627: PUSH
59628: LD_INT 8
59630: PUSH
59631: LD_INT 9
59633: PUSH
59634: LD_INT 10
59636: PUSH
59637: LD_INT 11
59639: PUSH
59640: LD_INT 12
59642: PUSH
59643: LD_INT 13
59645: PUSH
59646: LD_INT 14
59648: PUSH
59649: LD_INT 15
59651: PUSH
59652: LD_INT 16
59654: PUSH
59655: LD_INT 17
59657: PUSH
59658: LD_INT 18
59660: PUSH
59661: LD_INT 19
59663: PUSH
59664: LD_INT 20
59666: PUSH
59667: LD_INT 21
59669: PUSH
59670: LD_INT 22
59672: PUSH
59673: LD_INT 23
59675: PUSH
59676: LD_INT 24
59678: PUSH
59679: LD_INT 25
59681: PUSH
59682: LD_INT 26
59684: PUSH
59685: LD_INT 28
59687: PUSH
59688: LD_INT 30
59690: PUSH
59691: LD_INT 31
59693: PUSH
59694: LD_INT 32
59696: PUSH
59697: LD_INT 36
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 101
59733: PUSH
59734: LD_INT 102
59736: PUSH
59737: LD_INT 103
59739: PUSH
59740: LD_INT 104
59742: PUSH
59743: LD_INT 105
59745: PUSH
59746: LD_INT 106
59748: PUSH
59749: LD_INT 107
59751: PUSH
59752: LD_INT 108
59754: PUSH
59755: LD_INT 109
59757: PUSH
59758: LD_INT 110
59760: PUSH
59761: LD_INT 111
59763: PUSH
59764: LD_INT 112
59766: PUSH
59767: LD_INT 114
59769: PUSH
59770: LD_INT 116
59772: PUSH
59773: LD_INT 117
59775: PUSH
59776: LD_INT 118
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: ST_TO_ADDR
59801: GO 61696
59803: LD_INT 11
59805: DOUBLE
59806: EQUAL
59807: IFTRUE 59811
59809: GO 60015
59811: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
59812: LD_ADDR_VAR 0 2
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: LD_INT 5
59828: PUSH
59829: LD_INT 6
59831: PUSH
59832: LD_INT 7
59834: PUSH
59835: LD_INT 8
59837: PUSH
59838: LD_INT 9
59840: PUSH
59841: LD_INT 10
59843: PUSH
59844: LD_INT 11
59846: PUSH
59847: LD_INT 12
59849: PUSH
59850: LD_INT 13
59852: PUSH
59853: LD_INT 14
59855: PUSH
59856: LD_INT 15
59858: PUSH
59859: LD_INT 16
59861: PUSH
59862: LD_INT 17
59864: PUSH
59865: LD_INT 18
59867: PUSH
59868: LD_INT 19
59870: PUSH
59871: LD_INT 20
59873: PUSH
59874: LD_INT 21
59876: PUSH
59877: LD_INT 22
59879: PUSH
59880: LD_INT 23
59882: PUSH
59883: LD_INT 24
59885: PUSH
59886: LD_INT 25
59888: PUSH
59889: LD_INT 26
59891: PUSH
59892: LD_INT 28
59894: PUSH
59895: LD_INT 30
59897: PUSH
59898: LD_INT 31
59900: PUSH
59901: LD_INT 32
59903: PUSH
59904: LD_INT 34
59906: PUSH
59907: LD_INT 36
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 101
59945: PUSH
59946: LD_INT 102
59948: PUSH
59949: LD_INT 103
59951: PUSH
59952: LD_INT 104
59954: PUSH
59955: LD_INT 105
59957: PUSH
59958: LD_INT 106
59960: PUSH
59961: LD_INT 107
59963: PUSH
59964: LD_INT 108
59966: PUSH
59967: LD_INT 109
59969: PUSH
59970: LD_INT 110
59972: PUSH
59973: LD_INT 111
59975: PUSH
59976: LD_INT 112
59978: PUSH
59979: LD_INT 114
59981: PUSH
59982: LD_INT 116
59984: PUSH
59985: LD_INT 117
59987: PUSH
59988: LD_INT 118
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: ST_TO_ADDR
60013: GO 61696
60015: LD_INT 12
60017: DOUBLE
60018: EQUAL
60019: IFTRUE 60023
60021: GO 60243
60023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60024: LD_ADDR_VAR 0 2
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 4
60040: PUSH
60041: LD_INT 5
60043: PUSH
60044: LD_INT 6
60046: PUSH
60047: LD_INT 7
60049: PUSH
60050: LD_INT 8
60052: PUSH
60053: LD_INT 9
60055: PUSH
60056: LD_INT 10
60058: PUSH
60059: LD_INT 11
60061: PUSH
60062: LD_INT 12
60064: PUSH
60065: LD_INT 13
60067: PUSH
60068: LD_INT 14
60070: PUSH
60071: LD_INT 15
60073: PUSH
60074: LD_INT 16
60076: PUSH
60077: LD_INT 17
60079: PUSH
60080: LD_INT 18
60082: PUSH
60083: LD_INT 19
60085: PUSH
60086: LD_INT 20
60088: PUSH
60089: LD_INT 21
60091: PUSH
60092: LD_INT 22
60094: PUSH
60095: LD_INT 23
60097: PUSH
60098: LD_INT 24
60100: PUSH
60101: LD_INT 25
60103: PUSH
60104: LD_INT 26
60106: PUSH
60107: LD_INT 27
60109: PUSH
60110: LD_INT 28
60112: PUSH
60113: LD_INT 30
60115: PUSH
60116: LD_INT 31
60118: PUSH
60119: LD_INT 32
60121: PUSH
60122: LD_INT 33
60124: PUSH
60125: LD_INT 34
60127: PUSH
60128: LD_INT 36
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 101
60169: PUSH
60170: LD_INT 102
60172: PUSH
60173: LD_INT 103
60175: PUSH
60176: LD_INT 104
60178: PUSH
60179: LD_INT 105
60181: PUSH
60182: LD_INT 106
60184: PUSH
60185: LD_INT 107
60187: PUSH
60188: LD_INT 108
60190: PUSH
60191: LD_INT 109
60193: PUSH
60194: LD_INT 110
60196: PUSH
60197: LD_INT 111
60199: PUSH
60200: LD_INT 112
60202: PUSH
60203: LD_INT 113
60205: PUSH
60206: LD_INT 114
60208: PUSH
60209: LD_INT 116
60211: PUSH
60212: LD_INT 117
60214: PUSH
60215: LD_INT 118
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: ST_TO_ADDR
60241: GO 61696
60243: LD_INT 13
60245: DOUBLE
60246: EQUAL
60247: IFTRUE 60251
60249: GO 60459
60251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60252: LD_ADDR_VAR 0 2
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: LD_INT 8
60274: PUSH
60275: LD_INT 9
60277: PUSH
60278: LD_INT 10
60280: PUSH
60281: LD_INT 11
60283: PUSH
60284: LD_INT 12
60286: PUSH
60287: LD_INT 14
60289: PUSH
60290: LD_INT 15
60292: PUSH
60293: LD_INT 16
60295: PUSH
60296: LD_INT 17
60298: PUSH
60299: LD_INT 18
60301: PUSH
60302: LD_INT 19
60304: PUSH
60305: LD_INT 20
60307: PUSH
60308: LD_INT 21
60310: PUSH
60311: LD_INT 22
60313: PUSH
60314: LD_INT 23
60316: PUSH
60317: LD_INT 24
60319: PUSH
60320: LD_INT 25
60322: PUSH
60323: LD_INT 26
60325: PUSH
60326: LD_INT 27
60328: PUSH
60329: LD_INT 28
60331: PUSH
60332: LD_INT 30
60334: PUSH
60335: LD_INT 31
60337: PUSH
60338: LD_INT 32
60340: PUSH
60341: LD_INT 33
60343: PUSH
60344: LD_INT 34
60346: PUSH
60347: LD_INT 36
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 101
60385: PUSH
60386: LD_INT 102
60388: PUSH
60389: LD_INT 103
60391: PUSH
60392: LD_INT 104
60394: PUSH
60395: LD_INT 105
60397: PUSH
60398: LD_INT 106
60400: PUSH
60401: LD_INT 107
60403: PUSH
60404: LD_INT 108
60406: PUSH
60407: LD_INT 109
60409: PUSH
60410: LD_INT 110
60412: PUSH
60413: LD_INT 111
60415: PUSH
60416: LD_INT 112
60418: PUSH
60419: LD_INT 113
60421: PUSH
60422: LD_INT 114
60424: PUSH
60425: LD_INT 116
60427: PUSH
60428: LD_INT 117
60430: PUSH
60431: LD_INT 118
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: ST_TO_ADDR
60457: GO 61696
60459: LD_INT 14
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60467
60465: GO 60691
60467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60468: LD_ADDR_VAR 0 2
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: LD_INT 4
60484: PUSH
60485: LD_INT 5
60487: PUSH
60488: LD_INT 6
60490: PUSH
60491: LD_INT 7
60493: PUSH
60494: LD_INT 8
60496: PUSH
60497: LD_INT 9
60499: PUSH
60500: LD_INT 10
60502: PUSH
60503: LD_INT 11
60505: PUSH
60506: LD_INT 12
60508: PUSH
60509: LD_INT 13
60511: PUSH
60512: LD_INT 14
60514: PUSH
60515: LD_INT 15
60517: PUSH
60518: LD_INT 16
60520: PUSH
60521: LD_INT 17
60523: PUSH
60524: LD_INT 18
60526: PUSH
60527: LD_INT 19
60529: PUSH
60530: LD_INT 20
60532: PUSH
60533: LD_INT 21
60535: PUSH
60536: LD_INT 22
60538: PUSH
60539: LD_INT 23
60541: PUSH
60542: LD_INT 24
60544: PUSH
60545: LD_INT 25
60547: PUSH
60548: LD_INT 26
60550: PUSH
60551: LD_INT 27
60553: PUSH
60554: LD_INT 28
60556: PUSH
60557: LD_INT 29
60559: PUSH
60560: LD_INT 30
60562: PUSH
60563: LD_INT 31
60565: PUSH
60566: LD_INT 32
60568: PUSH
60569: LD_INT 33
60571: PUSH
60572: LD_INT 34
60574: PUSH
60575: LD_INT 36
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 101
60617: PUSH
60618: LD_INT 102
60620: PUSH
60621: LD_INT 103
60623: PUSH
60624: LD_INT 104
60626: PUSH
60627: LD_INT 105
60629: PUSH
60630: LD_INT 106
60632: PUSH
60633: LD_INT 107
60635: PUSH
60636: LD_INT 108
60638: PUSH
60639: LD_INT 109
60641: PUSH
60642: LD_INT 110
60644: PUSH
60645: LD_INT 111
60647: PUSH
60648: LD_INT 112
60650: PUSH
60651: LD_INT 113
60653: PUSH
60654: LD_INT 114
60656: PUSH
60657: LD_INT 116
60659: PUSH
60660: LD_INT 117
60662: PUSH
60663: LD_INT 118
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: ST_TO_ADDR
60689: GO 61696
60691: LD_INT 15
60693: DOUBLE
60694: EQUAL
60695: IFTRUE 60699
60697: GO 60923
60699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60700: LD_ADDR_VAR 0 2
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 4
60716: PUSH
60717: LD_INT 5
60719: PUSH
60720: LD_INT 6
60722: PUSH
60723: LD_INT 7
60725: PUSH
60726: LD_INT 8
60728: PUSH
60729: LD_INT 9
60731: PUSH
60732: LD_INT 10
60734: PUSH
60735: LD_INT 11
60737: PUSH
60738: LD_INT 12
60740: PUSH
60741: LD_INT 13
60743: PUSH
60744: LD_INT 14
60746: PUSH
60747: LD_INT 15
60749: PUSH
60750: LD_INT 16
60752: PUSH
60753: LD_INT 17
60755: PUSH
60756: LD_INT 18
60758: PUSH
60759: LD_INT 19
60761: PUSH
60762: LD_INT 20
60764: PUSH
60765: LD_INT 21
60767: PUSH
60768: LD_INT 22
60770: PUSH
60771: LD_INT 23
60773: PUSH
60774: LD_INT 24
60776: PUSH
60777: LD_INT 25
60779: PUSH
60780: LD_INT 26
60782: PUSH
60783: LD_INT 27
60785: PUSH
60786: LD_INT 28
60788: PUSH
60789: LD_INT 29
60791: PUSH
60792: LD_INT 30
60794: PUSH
60795: LD_INT 31
60797: PUSH
60798: LD_INT 32
60800: PUSH
60801: LD_INT 33
60803: PUSH
60804: LD_INT 34
60806: PUSH
60807: LD_INT 36
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 101
60849: PUSH
60850: LD_INT 102
60852: PUSH
60853: LD_INT 103
60855: PUSH
60856: LD_INT 104
60858: PUSH
60859: LD_INT 105
60861: PUSH
60862: LD_INT 106
60864: PUSH
60865: LD_INT 107
60867: PUSH
60868: LD_INT 108
60870: PUSH
60871: LD_INT 109
60873: PUSH
60874: LD_INT 110
60876: PUSH
60877: LD_INT 111
60879: PUSH
60880: LD_INT 112
60882: PUSH
60883: LD_INT 113
60885: PUSH
60886: LD_INT 114
60888: PUSH
60889: LD_INT 116
60891: PUSH
60892: LD_INT 117
60894: PUSH
60895: LD_INT 118
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: ST_TO_ADDR
60921: GO 61696
60923: LD_INT 16
60925: DOUBLE
60926: EQUAL
60927: IFTRUE 60931
60929: GO 61067
60931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
60932: LD_ADDR_VAR 0 2
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: LD_INT 4
60942: PUSH
60943: LD_INT 5
60945: PUSH
60946: LD_INT 7
60948: PUSH
60949: LD_INT 11
60951: PUSH
60952: LD_INT 12
60954: PUSH
60955: LD_INT 15
60957: PUSH
60958: LD_INT 16
60960: PUSH
60961: LD_INT 20
60963: PUSH
60964: LD_INT 21
60966: PUSH
60967: LD_INT 22
60969: PUSH
60970: LD_INT 23
60972: PUSH
60973: LD_INT 25
60975: PUSH
60976: LD_INT 26
60978: PUSH
60979: LD_INT 30
60981: PUSH
60982: LD_INT 31
60984: PUSH
60985: LD_INT 32
60987: PUSH
60988: LD_INT 33
60990: PUSH
60991: LD_INT 34
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 101
61017: PUSH
61018: LD_INT 102
61020: PUSH
61021: LD_INT 103
61023: PUSH
61024: LD_INT 106
61026: PUSH
61027: LD_INT 108
61029: PUSH
61030: LD_INT 112
61032: PUSH
61033: LD_INT 113
61035: PUSH
61036: LD_INT 114
61038: PUSH
61039: LD_INT 116
61041: PUSH
61042: LD_INT 117
61044: PUSH
61045: LD_INT 118
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: ST_TO_ADDR
61065: GO 61696
61067: LD_INT 17
61069: DOUBLE
61070: EQUAL
61071: IFTRUE 61075
61073: GO 61299
61075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61076: LD_ADDR_VAR 0 2
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: LD_INT 4
61092: PUSH
61093: LD_INT 5
61095: PUSH
61096: LD_INT 6
61098: PUSH
61099: LD_INT 7
61101: PUSH
61102: LD_INT 8
61104: PUSH
61105: LD_INT 9
61107: PUSH
61108: LD_INT 10
61110: PUSH
61111: LD_INT 11
61113: PUSH
61114: LD_INT 12
61116: PUSH
61117: LD_INT 13
61119: PUSH
61120: LD_INT 14
61122: PUSH
61123: LD_INT 15
61125: PUSH
61126: LD_INT 16
61128: PUSH
61129: LD_INT 17
61131: PUSH
61132: LD_INT 18
61134: PUSH
61135: LD_INT 19
61137: PUSH
61138: LD_INT 20
61140: PUSH
61141: LD_INT 21
61143: PUSH
61144: LD_INT 22
61146: PUSH
61147: LD_INT 23
61149: PUSH
61150: LD_INT 24
61152: PUSH
61153: LD_INT 25
61155: PUSH
61156: LD_INT 26
61158: PUSH
61159: LD_INT 27
61161: PUSH
61162: LD_INT 28
61164: PUSH
61165: LD_INT 29
61167: PUSH
61168: LD_INT 30
61170: PUSH
61171: LD_INT 31
61173: PUSH
61174: LD_INT 32
61176: PUSH
61177: LD_INT 33
61179: PUSH
61180: LD_INT 34
61182: PUSH
61183: LD_INT 36
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 101
61225: PUSH
61226: LD_INT 102
61228: PUSH
61229: LD_INT 103
61231: PUSH
61232: LD_INT 104
61234: PUSH
61235: LD_INT 105
61237: PUSH
61238: LD_INT 106
61240: PUSH
61241: LD_INT 107
61243: PUSH
61244: LD_INT 108
61246: PUSH
61247: LD_INT 109
61249: PUSH
61250: LD_INT 110
61252: PUSH
61253: LD_INT 111
61255: PUSH
61256: LD_INT 112
61258: PUSH
61259: LD_INT 113
61261: PUSH
61262: LD_INT 114
61264: PUSH
61265: LD_INT 116
61267: PUSH
61268: LD_INT 117
61270: PUSH
61271: LD_INT 118
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: ST_TO_ADDR
61297: GO 61696
61299: LD_INT 18
61301: DOUBLE
61302: EQUAL
61303: IFTRUE 61307
61305: GO 61455
61307: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61308: LD_ADDR_VAR 0 2
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 4
61318: PUSH
61319: LD_INT 5
61321: PUSH
61322: LD_INT 7
61324: PUSH
61325: LD_INT 11
61327: PUSH
61328: LD_INT 12
61330: PUSH
61331: LD_INT 15
61333: PUSH
61334: LD_INT 16
61336: PUSH
61337: LD_INT 20
61339: PUSH
61340: LD_INT 21
61342: PUSH
61343: LD_INT 22
61345: PUSH
61346: LD_INT 23
61348: PUSH
61349: LD_INT 25
61351: PUSH
61352: LD_INT 26
61354: PUSH
61355: LD_INT 30
61357: PUSH
61358: LD_INT 31
61360: PUSH
61361: LD_INT 32
61363: PUSH
61364: LD_INT 33
61366: PUSH
61367: LD_INT 34
61369: PUSH
61370: LD_INT 35
61372: PUSH
61373: LD_INT 36
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 101
61401: PUSH
61402: LD_INT 102
61404: PUSH
61405: LD_INT 103
61407: PUSH
61408: LD_INT 106
61410: PUSH
61411: LD_INT 108
61413: PUSH
61414: LD_INT 112
61416: PUSH
61417: LD_INT 113
61419: PUSH
61420: LD_INT 114
61422: PUSH
61423: LD_INT 115
61425: PUSH
61426: LD_INT 116
61428: PUSH
61429: LD_INT 117
61431: PUSH
61432: LD_INT 118
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: ST_TO_ADDR
61453: GO 61696
61455: LD_INT 19
61457: DOUBLE
61458: EQUAL
61459: IFTRUE 61463
61461: GO 61695
61463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61464: LD_ADDR_VAR 0 2
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: LD_INT 4
61480: PUSH
61481: LD_INT 5
61483: PUSH
61484: LD_INT 6
61486: PUSH
61487: LD_INT 7
61489: PUSH
61490: LD_INT 8
61492: PUSH
61493: LD_INT 9
61495: PUSH
61496: LD_INT 10
61498: PUSH
61499: LD_INT 11
61501: PUSH
61502: LD_INT 12
61504: PUSH
61505: LD_INT 13
61507: PUSH
61508: LD_INT 14
61510: PUSH
61511: LD_INT 15
61513: PUSH
61514: LD_INT 16
61516: PUSH
61517: LD_INT 17
61519: PUSH
61520: LD_INT 18
61522: PUSH
61523: LD_INT 19
61525: PUSH
61526: LD_INT 20
61528: PUSH
61529: LD_INT 21
61531: PUSH
61532: LD_INT 22
61534: PUSH
61535: LD_INT 23
61537: PUSH
61538: LD_INT 24
61540: PUSH
61541: LD_INT 25
61543: PUSH
61544: LD_INT 26
61546: PUSH
61547: LD_INT 27
61549: PUSH
61550: LD_INT 28
61552: PUSH
61553: LD_INT 29
61555: PUSH
61556: LD_INT 30
61558: PUSH
61559: LD_INT 31
61561: PUSH
61562: LD_INT 32
61564: PUSH
61565: LD_INT 33
61567: PUSH
61568: LD_INT 34
61570: PUSH
61571: LD_INT 35
61573: PUSH
61574: LD_INT 36
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 101
61617: PUSH
61618: LD_INT 102
61620: PUSH
61621: LD_INT 103
61623: PUSH
61624: LD_INT 104
61626: PUSH
61627: LD_INT 105
61629: PUSH
61630: LD_INT 106
61632: PUSH
61633: LD_INT 107
61635: PUSH
61636: LD_INT 108
61638: PUSH
61639: LD_INT 109
61641: PUSH
61642: LD_INT 110
61644: PUSH
61645: LD_INT 111
61647: PUSH
61648: LD_INT 112
61650: PUSH
61651: LD_INT 113
61653: PUSH
61654: LD_INT 114
61656: PUSH
61657: LD_INT 115
61659: PUSH
61660: LD_INT 116
61662: PUSH
61663: LD_INT 117
61665: PUSH
61666: LD_INT 118
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: ST_TO_ADDR
61693: GO 61696
61695: POP
// end else
61696: GO 61927
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61698: LD_ADDR_VAR 0 2
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: LD_INT 4
61714: PUSH
61715: LD_INT 5
61717: PUSH
61718: LD_INT 6
61720: PUSH
61721: LD_INT 7
61723: PUSH
61724: LD_INT 8
61726: PUSH
61727: LD_INT 9
61729: PUSH
61730: LD_INT 10
61732: PUSH
61733: LD_INT 11
61735: PUSH
61736: LD_INT 12
61738: PUSH
61739: LD_INT 13
61741: PUSH
61742: LD_INT 14
61744: PUSH
61745: LD_INT 15
61747: PUSH
61748: LD_INT 16
61750: PUSH
61751: LD_INT 17
61753: PUSH
61754: LD_INT 18
61756: PUSH
61757: LD_INT 19
61759: PUSH
61760: LD_INT 20
61762: PUSH
61763: LD_INT 21
61765: PUSH
61766: LD_INT 22
61768: PUSH
61769: LD_INT 23
61771: PUSH
61772: LD_INT 24
61774: PUSH
61775: LD_INT 25
61777: PUSH
61778: LD_INT 26
61780: PUSH
61781: LD_INT 27
61783: PUSH
61784: LD_INT 28
61786: PUSH
61787: LD_INT 29
61789: PUSH
61790: LD_INT 30
61792: PUSH
61793: LD_INT 31
61795: PUSH
61796: LD_INT 32
61798: PUSH
61799: LD_INT 33
61801: PUSH
61802: LD_INT 34
61804: PUSH
61805: LD_INT 35
61807: PUSH
61808: LD_INT 36
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 101
61851: PUSH
61852: LD_INT 102
61854: PUSH
61855: LD_INT 103
61857: PUSH
61858: LD_INT 104
61860: PUSH
61861: LD_INT 105
61863: PUSH
61864: LD_INT 106
61866: PUSH
61867: LD_INT 107
61869: PUSH
61870: LD_INT 108
61872: PUSH
61873: LD_INT 109
61875: PUSH
61876: LD_INT 110
61878: PUSH
61879: LD_INT 111
61881: PUSH
61882: LD_INT 112
61884: PUSH
61885: LD_INT 113
61887: PUSH
61888: LD_INT 114
61890: PUSH
61891: LD_INT 115
61893: PUSH
61894: LD_INT 116
61896: PUSH
61897: LD_INT 117
61899: PUSH
61900: LD_INT 118
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// if result then
61927: LD_VAR 0 2
61931: IFFALSE 62717
// begin normal :=  ;
61933: LD_ADDR_VAR 0 5
61937: PUSH
61938: LD_STRING 
61940: ST_TO_ADDR
// hardcore :=  ;
61941: LD_ADDR_VAR 0 6
61945: PUSH
61946: LD_STRING 
61948: ST_TO_ADDR
// active :=  ;
61949: LD_ADDR_VAR 0 7
61953: PUSH
61954: LD_STRING 
61956: ST_TO_ADDR
// for i = 1 to normalCounter do
61957: LD_ADDR_VAR 0 8
61961: PUSH
61962: DOUBLE
61963: LD_INT 1
61965: DEC
61966: ST_TO_ADDR
61967: LD_EXP 50
61971: PUSH
61972: FOR_TO
61973: IFFALSE 62074
// begin tmp := 0 ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_STRING 0
61982: ST_TO_ADDR
// if result [ 1 ] then
61983: LD_VAR 0 2
61987: PUSH
61988: LD_INT 1
61990: ARRAY
61991: IFFALSE 62056
// if result [ 1 ] [ 1 ] = i then
61993: LD_VAR 0 2
61997: PUSH
61998: LD_INT 1
62000: ARRAY
62001: PUSH
62002: LD_INT 1
62004: ARRAY
62005: PUSH
62006: LD_VAR 0 8
62010: EQUAL
62011: IFFALSE 62056
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62013: LD_ADDR_VAR 0 2
62017: PUSH
62018: LD_VAR 0 2
62022: PPUSH
62023: LD_INT 1
62025: PPUSH
62026: LD_VAR 0 2
62030: PUSH
62031: LD_INT 1
62033: ARRAY
62034: PPUSH
62035: LD_INT 1
62037: PPUSH
62038: CALL_OW 3
62042: PPUSH
62043: CALL_OW 1
62047: ST_TO_ADDR
// tmp := 1 ;
62048: LD_ADDR_VAR 0 3
62052: PUSH
62053: LD_STRING 1
62055: ST_TO_ADDR
// end ; normal := normal & tmp ;
62056: LD_ADDR_VAR 0 5
62060: PUSH
62061: LD_VAR 0 5
62065: PUSH
62066: LD_VAR 0 3
62070: STR
62071: ST_TO_ADDR
// end ;
62072: GO 61972
62074: POP
62075: POP
// for i = 1 to hardcoreCounter do
62076: LD_ADDR_VAR 0 8
62080: PUSH
62081: DOUBLE
62082: LD_INT 1
62084: DEC
62085: ST_TO_ADDR
62086: LD_EXP 51
62090: PUSH
62091: FOR_TO
62092: IFFALSE 62197
// begin tmp := 0 ;
62094: LD_ADDR_VAR 0 3
62098: PUSH
62099: LD_STRING 0
62101: ST_TO_ADDR
// if result [ 2 ] then
62102: LD_VAR 0 2
62106: PUSH
62107: LD_INT 2
62109: ARRAY
62110: IFFALSE 62179
// if result [ 2 ] [ 1 ] = 100 + i then
62112: LD_VAR 0 2
62116: PUSH
62117: LD_INT 2
62119: ARRAY
62120: PUSH
62121: LD_INT 1
62123: ARRAY
62124: PUSH
62125: LD_INT 100
62127: PUSH
62128: LD_VAR 0 8
62132: PLUS
62133: EQUAL
62134: IFFALSE 62179
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62136: LD_ADDR_VAR 0 2
62140: PUSH
62141: LD_VAR 0 2
62145: PPUSH
62146: LD_INT 2
62148: PPUSH
62149: LD_VAR 0 2
62153: PUSH
62154: LD_INT 2
62156: ARRAY
62157: PPUSH
62158: LD_INT 1
62160: PPUSH
62161: CALL_OW 3
62165: PPUSH
62166: CALL_OW 1
62170: ST_TO_ADDR
// tmp := 1 ;
62171: LD_ADDR_VAR 0 3
62175: PUSH
62176: LD_STRING 1
62178: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62179: LD_ADDR_VAR 0 6
62183: PUSH
62184: LD_VAR 0 6
62188: PUSH
62189: LD_VAR 0 3
62193: STR
62194: ST_TO_ADDR
// end ;
62195: GO 62091
62197: POP
62198: POP
// if isGameLoad then
62199: LD_VAR 0 1
62203: IFFALSE 62678
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62205: LD_ADDR_VAR 0 4
62209: PUSH
62210: LD_EXP 54
62214: PUSH
62215: LD_EXP 53
62219: PUSH
62220: LD_EXP 55
62224: PUSH
62225: LD_EXP 52
62229: PUSH
62230: LD_EXP 56
62234: PUSH
62235: LD_EXP 57
62239: PUSH
62240: LD_EXP 58
62244: PUSH
62245: LD_EXP 59
62249: PUSH
62250: LD_EXP 60
62254: PUSH
62255: LD_EXP 61
62259: PUSH
62260: LD_EXP 62
62264: PUSH
62265: LD_EXP 63
62269: PUSH
62270: LD_EXP 64
62274: PUSH
62275: LD_EXP 65
62279: PUSH
62280: LD_EXP 73
62284: PUSH
62285: LD_EXP 74
62289: PUSH
62290: LD_EXP 75
62294: PUSH
62295: LD_EXP 76
62299: PUSH
62300: LD_EXP 78
62304: PUSH
62305: LD_EXP 79
62309: PUSH
62310: LD_EXP 80
62314: PUSH
62315: LD_EXP 83
62319: PUSH
62320: LD_EXP 85
62324: PUSH
62325: LD_EXP 86
62329: PUSH
62330: LD_EXP 87
62334: PUSH
62335: LD_EXP 89
62339: PUSH
62340: LD_EXP 90
62344: PUSH
62345: LD_EXP 93
62349: PUSH
62350: LD_EXP 94
62354: PUSH
62355: LD_EXP 95
62359: PUSH
62360: LD_EXP 96
62364: PUSH
62365: LD_EXP 97
62369: PUSH
62370: LD_EXP 98
62374: PUSH
62375: LD_EXP 99
62379: PUSH
62380: LD_EXP 100
62384: PUSH
62385: LD_EXP 101
62389: PUSH
62390: LD_EXP 66
62394: PUSH
62395: LD_EXP 67
62399: PUSH
62400: LD_EXP 70
62404: PUSH
62405: LD_EXP 71
62409: PUSH
62410: LD_EXP 72
62414: PUSH
62415: LD_EXP 68
62419: PUSH
62420: LD_EXP 69
62424: PUSH
62425: LD_EXP 77
62429: PUSH
62430: LD_EXP 81
62434: PUSH
62435: LD_EXP 82
62439: PUSH
62440: LD_EXP 84
62444: PUSH
62445: LD_EXP 88
62449: PUSH
62450: LD_EXP 91
62454: PUSH
62455: LD_EXP 92
62459: PUSH
62460: LD_EXP 102
62464: PUSH
62465: LD_EXP 103
62469: PUSH
62470: LD_EXP 104
62474: PUSH
62475: LD_EXP 105
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// tmp :=  ;
62536: LD_ADDR_VAR 0 3
62540: PUSH
62541: LD_STRING 
62543: ST_TO_ADDR
// for i = 1 to normalCounter do
62544: LD_ADDR_VAR 0 8
62548: PUSH
62549: DOUBLE
62550: LD_INT 1
62552: DEC
62553: ST_TO_ADDR
62554: LD_EXP 50
62558: PUSH
62559: FOR_TO
62560: IFFALSE 62596
// begin if flags [ i ] then
62562: LD_VAR 0 4
62566: PUSH
62567: LD_VAR 0 8
62571: ARRAY
62572: IFFALSE 62594
// tmp := tmp & i & ; ;
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: LD_VAR 0 3
62583: PUSH
62584: LD_VAR 0 8
62588: STR
62589: PUSH
62590: LD_STRING ;
62592: STR
62593: ST_TO_ADDR
// end ;
62594: GO 62559
62596: POP
62597: POP
// for i = 1 to hardcoreCounter do
62598: LD_ADDR_VAR 0 8
62602: PUSH
62603: DOUBLE
62604: LD_INT 1
62606: DEC
62607: ST_TO_ADDR
62608: LD_EXP 51
62612: PUSH
62613: FOR_TO
62614: IFFALSE 62660
// begin if flags [ normalCounter + i ] then
62616: LD_VAR 0 4
62620: PUSH
62621: LD_EXP 50
62625: PUSH
62626: LD_VAR 0 8
62630: PLUS
62631: ARRAY
62632: IFFALSE 62658
// tmp := tmp & ( 100 + i ) & ; ;
62634: LD_ADDR_VAR 0 3
62638: PUSH
62639: LD_VAR 0 3
62643: PUSH
62644: LD_INT 100
62646: PUSH
62647: LD_VAR 0 8
62651: PLUS
62652: STR
62653: PUSH
62654: LD_STRING ;
62656: STR
62657: ST_TO_ADDR
// end ;
62658: GO 62613
62660: POP
62661: POP
// if tmp then
62662: LD_VAR 0 3
62666: IFFALSE 62678
// active := tmp ;
62668: LD_ADDR_VAR 0 7
62672: PUSH
62673: LD_VAR 0 3
62677: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
62678: LD_STRING getStreamItemsFromMission("
62680: PUSH
62681: LD_VAR 0 5
62685: STR
62686: PUSH
62687: LD_STRING ","
62689: STR
62690: PUSH
62691: LD_VAR 0 6
62695: STR
62696: PUSH
62697: LD_STRING ","
62699: STR
62700: PUSH
62701: LD_VAR 0 7
62705: STR
62706: PUSH
62707: LD_STRING ")
62709: STR
62710: PPUSH
62711: CALL_OW 559
// end else
62715: GO 62724
// ToLua ( getStreamItemsFromMission("","","") ) ;
62717: LD_STRING getStreamItemsFromMission("","","")
62719: PPUSH
62720: CALL_OW 559
// end ;
62724: LD_VAR 0 2
62728: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62729: LD_EXP 49
62733: PUSH
62734: LD_EXP 54
62738: AND
62739: IFFALSE 62863
62741: GO 62743
62743: DISABLE
62744: LD_INT 0
62746: PPUSH
62747: PPUSH
// begin enable ;
62748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
62749: LD_ADDR_VAR 0 2
62753: PUSH
62754: LD_INT 22
62756: PUSH
62757: LD_OWVAR 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 34
62771: PUSH
62772: LD_INT 7
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 34
62781: PUSH
62782: LD_INT 45
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 34
62791: PUSH
62792: LD_INT 28
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 34
62801: PUSH
62802: LD_INT 47
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PPUSH
62820: CALL_OW 69
62824: ST_TO_ADDR
// if not tmp then
62825: LD_VAR 0 2
62829: NOT
62830: IFFALSE 62834
// exit ;
62832: GO 62863
// for i in tmp do
62834: LD_ADDR_VAR 0 1
62838: PUSH
62839: LD_VAR 0 2
62843: PUSH
62844: FOR_IN
62845: IFFALSE 62861
// begin SetLives ( i , 0 ) ;
62847: LD_VAR 0 1
62851: PPUSH
62852: LD_INT 0
62854: PPUSH
62855: CALL_OW 234
// end ;
62859: GO 62844
62861: POP
62862: POP
// end ;
62863: PPOPN 2
62865: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
62866: LD_EXP 49
62870: PUSH
62871: LD_EXP 55
62875: AND
62876: IFFALSE 62960
62878: GO 62880
62880: DISABLE
62881: LD_INT 0
62883: PPUSH
62884: PPUSH
// begin enable ;
62885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
62886: LD_ADDR_VAR 0 2
62890: PUSH
62891: LD_INT 22
62893: PUSH
62894: LD_OWVAR 2
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 32
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PPUSH
62917: CALL_OW 69
62921: ST_TO_ADDR
// if not tmp then
62922: LD_VAR 0 2
62926: NOT
62927: IFFALSE 62931
// exit ;
62929: GO 62960
// for i in tmp do
62931: LD_ADDR_VAR 0 1
62935: PUSH
62936: LD_VAR 0 2
62940: PUSH
62941: FOR_IN
62942: IFFALSE 62958
// begin SetLives ( i , 0 ) ;
62944: LD_VAR 0 1
62948: PPUSH
62949: LD_INT 0
62951: PPUSH
62952: CALL_OW 234
// end ;
62956: GO 62941
62958: POP
62959: POP
// end ;
62960: PPOPN 2
62962: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
62963: LD_EXP 49
62967: PUSH
62968: LD_EXP 52
62972: AND
62973: IFFALSE 63066
62975: GO 62977
62977: DISABLE
62978: LD_INT 0
62980: PPUSH
// begin enable ;
62981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
62982: LD_ADDR_VAR 0 1
62986: PUSH
62987: LD_INT 22
62989: PUSH
62990: LD_OWVAR 2
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: LD_INT 25
63004: PUSH
63005: LD_INT 5
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 25
63014: PUSH
63015: LD_INT 9
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 25
63024: PUSH
63025: LD_INT 8
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PPUSH
63042: CALL_OW 69
63046: PUSH
63047: FOR_IN
63048: IFFALSE 63064
// begin SetClass ( i , 1 ) ;
63050: LD_VAR 0 1
63054: PPUSH
63055: LD_INT 1
63057: PPUSH
63058: CALL_OW 336
// end ;
63062: GO 63047
63064: POP
63065: POP
// end ;
63066: PPOPN 1
63068: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63069: LD_EXP 49
63073: PUSH
63074: LD_EXP 53
63078: AND
63079: PUSH
63080: LD_OWVAR 65
63084: PUSH
63085: LD_INT 7
63087: LESS
63088: AND
63089: IFFALSE 63103
63091: GO 63093
63093: DISABLE
// begin enable ;
63094: ENABLE
// game_speed := 7 ;
63095: LD_ADDR_OWVAR 65
63099: PUSH
63100: LD_INT 7
63102: ST_TO_ADDR
// end ;
63103: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63104: LD_EXP 49
63108: PUSH
63109: LD_EXP 56
63113: AND
63114: IFFALSE 63316
63116: GO 63118
63118: DISABLE
63119: LD_INT 0
63121: PPUSH
63122: PPUSH
63123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63124: LD_ADDR_VAR 0 3
63128: PUSH
63129: LD_INT 81
63131: PUSH
63132: LD_OWVAR 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 21
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PPUSH
63155: CALL_OW 69
63159: ST_TO_ADDR
// if not tmp then
63160: LD_VAR 0 3
63164: NOT
63165: IFFALSE 63169
// exit ;
63167: GO 63316
// if tmp > 5 then
63169: LD_VAR 0 3
63173: PUSH
63174: LD_INT 5
63176: GREATER
63177: IFFALSE 63189
// k := 5 else
63179: LD_ADDR_VAR 0 2
63183: PUSH
63184: LD_INT 5
63186: ST_TO_ADDR
63187: GO 63199
// k := tmp ;
63189: LD_ADDR_VAR 0 2
63193: PUSH
63194: LD_VAR 0 3
63198: ST_TO_ADDR
// for i := 1 to k do
63199: LD_ADDR_VAR 0 1
63203: PUSH
63204: DOUBLE
63205: LD_INT 1
63207: DEC
63208: ST_TO_ADDR
63209: LD_VAR 0 2
63213: PUSH
63214: FOR_TO
63215: IFFALSE 63314
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63217: LD_VAR 0 3
63221: PUSH
63222: LD_VAR 0 1
63226: ARRAY
63227: PPUSH
63228: LD_VAR 0 1
63232: PUSH
63233: LD_INT 4
63235: MOD
63236: PUSH
63237: LD_INT 1
63239: PLUS
63240: PPUSH
63241: CALL_OW 259
63245: PUSH
63246: LD_INT 10
63248: LESS
63249: IFFALSE 63312
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63251: LD_VAR 0 3
63255: PUSH
63256: LD_VAR 0 1
63260: ARRAY
63261: PPUSH
63262: LD_VAR 0 1
63266: PUSH
63267: LD_INT 4
63269: MOD
63270: PUSH
63271: LD_INT 1
63273: PLUS
63274: PPUSH
63275: LD_VAR 0 3
63279: PUSH
63280: LD_VAR 0 1
63284: ARRAY
63285: PPUSH
63286: LD_VAR 0 1
63290: PUSH
63291: LD_INT 4
63293: MOD
63294: PUSH
63295: LD_INT 1
63297: PLUS
63298: PPUSH
63299: CALL_OW 259
63303: PUSH
63304: LD_INT 1
63306: PLUS
63307: PPUSH
63308: CALL_OW 237
63312: GO 63214
63314: POP
63315: POP
// end ;
63316: PPOPN 3
63318: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63319: LD_EXP 49
63323: PUSH
63324: LD_EXP 57
63328: AND
63329: IFFALSE 63349
63331: GO 63333
63333: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63334: LD_INT 4
63336: PPUSH
63337: LD_OWVAR 2
63341: PPUSH
63342: LD_INT 0
63344: PPUSH
63345: CALL_OW 324
63349: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63350: LD_EXP 49
63354: PUSH
63355: LD_EXP 86
63359: AND
63360: IFFALSE 63380
63362: GO 63364
63364: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63365: LD_INT 19
63367: PPUSH
63368: LD_OWVAR 2
63372: PPUSH
63373: LD_INT 0
63375: PPUSH
63376: CALL_OW 324
63380: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63381: LD_EXP 49
63385: PUSH
63386: LD_EXP 58
63390: AND
63391: IFFALSE 63493
63393: GO 63395
63395: DISABLE
63396: LD_INT 0
63398: PPUSH
63399: PPUSH
// begin enable ;
63400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63401: LD_ADDR_VAR 0 2
63405: PUSH
63406: LD_INT 22
63408: PUSH
63409: LD_OWVAR 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: LD_INT 34
63423: PUSH
63424: LD_INT 11
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 34
63433: PUSH
63434: LD_INT 30
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PPUSH
63450: CALL_OW 69
63454: ST_TO_ADDR
// if not tmp then
63455: LD_VAR 0 2
63459: NOT
63460: IFFALSE 63464
// exit ;
63462: GO 63493
// for i in tmp do
63464: LD_ADDR_VAR 0 1
63468: PUSH
63469: LD_VAR 0 2
63473: PUSH
63474: FOR_IN
63475: IFFALSE 63491
// begin SetLives ( i , 0 ) ;
63477: LD_VAR 0 1
63481: PPUSH
63482: LD_INT 0
63484: PPUSH
63485: CALL_OW 234
// end ;
63489: GO 63474
63491: POP
63492: POP
// end ;
63493: PPOPN 2
63495: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63496: LD_EXP 49
63500: PUSH
63501: LD_EXP 59
63505: AND
63506: IFFALSE 63526
63508: GO 63510
63510: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63511: LD_INT 32
63513: PPUSH
63514: LD_OWVAR 2
63518: PPUSH
63519: LD_INT 0
63521: PPUSH
63522: CALL_OW 324
63526: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
63527: LD_EXP 49
63531: PUSH
63532: LD_EXP 60
63536: AND
63537: IFFALSE 63718
63539: GO 63541
63541: DISABLE
63542: LD_INT 0
63544: PPUSH
63545: PPUSH
63546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
63547: LD_ADDR_VAR 0 2
63551: PUSH
63552: LD_INT 22
63554: PUSH
63555: LD_OWVAR 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 33
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PPUSH
63578: CALL_OW 69
63582: ST_TO_ADDR
// if not tmp then
63583: LD_VAR 0 2
63587: NOT
63588: IFFALSE 63592
// exit ;
63590: GO 63718
// side := 0 ;
63592: LD_ADDR_VAR 0 3
63596: PUSH
63597: LD_INT 0
63599: ST_TO_ADDR
// for i := 1 to 8 do
63600: LD_ADDR_VAR 0 1
63604: PUSH
63605: DOUBLE
63606: LD_INT 1
63608: DEC
63609: ST_TO_ADDR
63610: LD_INT 8
63612: PUSH
63613: FOR_TO
63614: IFFALSE 63662
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63616: LD_OWVAR 2
63620: PUSH
63621: LD_VAR 0 1
63625: NONEQUAL
63626: PUSH
63627: LD_OWVAR 2
63631: PPUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 81
63641: PUSH
63642: LD_INT 2
63644: EQUAL
63645: AND
63646: IFFALSE 63660
// begin side := i ;
63648: LD_ADDR_VAR 0 3
63652: PUSH
63653: LD_VAR 0 1
63657: ST_TO_ADDR
// break ;
63658: GO 63662
// end ;
63660: GO 63613
63662: POP
63663: POP
// if not side then
63664: LD_VAR 0 3
63668: NOT
63669: IFFALSE 63673
// exit ;
63671: GO 63718
// for i := 1 to tmp do
63673: LD_ADDR_VAR 0 1
63677: PUSH
63678: DOUBLE
63679: LD_INT 1
63681: DEC
63682: ST_TO_ADDR
63683: LD_VAR 0 2
63687: PUSH
63688: FOR_TO
63689: IFFALSE 63716
// if Prob ( 60 ) then
63691: LD_INT 60
63693: PPUSH
63694: CALL_OW 13
63698: IFFALSE 63714
// SetSide ( i , side ) ;
63700: LD_VAR 0 1
63704: PPUSH
63705: LD_VAR 0 3
63709: PPUSH
63710: CALL_OW 235
63714: GO 63688
63716: POP
63717: POP
// end ;
63718: PPOPN 3
63720: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63721: LD_EXP 49
63725: PUSH
63726: LD_EXP 62
63730: AND
63731: IFFALSE 63850
63733: GO 63735
63735: DISABLE
63736: LD_INT 0
63738: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63739: LD_ADDR_VAR 0 1
63743: PUSH
63744: LD_INT 22
63746: PUSH
63747: LD_OWVAR 2
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 21
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: PUSH
63769: LD_INT 23
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: PPUSH
63788: CALL_OW 69
63792: PUSH
63793: FOR_IN
63794: IFFALSE 63848
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
63796: LD_VAR 0 1
63800: PPUSH
63801: CALL_OW 257
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: IN
63824: IFFALSE 63846
// SetClass ( un , rand ( 1 , 4 ) ) ;
63826: LD_VAR 0 1
63830: PPUSH
63831: LD_INT 1
63833: PPUSH
63834: LD_INT 4
63836: PPUSH
63837: CALL_OW 12
63841: PPUSH
63842: CALL_OW 336
63846: GO 63793
63848: POP
63849: POP
// end ;
63850: PPOPN 1
63852: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
63853: LD_EXP 49
63857: PUSH
63858: LD_EXP 61
63862: AND
63863: IFFALSE 63942
63865: GO 63867
63867: DISABLE
63868: LD_INT 0
63870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63871: LD_ADDR_VAR 0 1
63875: PUSH
63876: LD_INT 22
63878: PUSH
63879: LD_OWVAR 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 21
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PPUSH
63902: CALL_OW 69
63906: ST_TO_ADDR
// if not tmp then
63907: LD_VAR 0 1
63911: NOT
63912: IFFALSE 63916
// exit ;
63914: GO 63942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
63916: LD_VAR 0 1
63920: PUSH
63921: LD_INT 1
63923: PPUSH
63924: LD_VAR 0 1
63928: PPUSH
63929: CALL_OW 12
63933: ARRAY
63934: PPUSH
63935: LD_INT 100
63937: PPUSH
63938: CALL_OW 234
// end ;
63942: PPOPN 1
63944: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
63945: LD_EXP 49
63949: PUSH
63950: LD_EXP 63
63954: AND
63955: IFFALSE 64053
63957: GO 63959
63959: DISABLE
63960: LD_INT 0
63962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63963: LD_ADDR_VAR 0 1
63967: PUSH
63968: LD_INT 22
63970: PUSH
63971: LD_OWVAR 2
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 21
63982: PUSH
63983: LD_INT 1
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PPUSH
63994: CALL_OW 69
63998: ST_TO_ADDR
// if not tmp then
63999: LD_VAR 0 1
64003: NOT
64004: IFFALSE 64008
// exit ;
64006: GO 64053
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64008: LD_VAR 0 1
64012: PUSH
64013: LD_INT 1
64015: PPUSH
64016: LD_VAR 0 1
64020: PPUSH
64021: CALL_OW 12
64025: ARRAY
64026: PPUSH
64027: LD_INT 1
64029: PPUSH
64030: LD_INT 4
64032: PPUSH
64033: CALL_OW 12
64037: PPUSH
64038: LD_INT 3000
64040: PPUSH
64041: LD_INT 9000
64043: PPUSH
64044: CALL_OW 12
64048: PPUSH
64049: CALL_OW 492
// end ;
64053: PPOPN 1
64055: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64056: LD_EXP 49
64060: PUSH
64061: LD_EXP 64
64065: AND
64066: IFFALSE 64086
64068: GO 64070
64070: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64071: LD_INT 1
64073: PPUSH
64074: LD_OWVAR 2
64078: PPUSH
64079: LD_INT 0
64081: PPUSH
64082: CALL_OW 324
64086: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64087: LD_EXP 49
64091: PUSH
64092: LD_EXP 65
64096: AND
64097: IFFALSE 64180
64099: GO 64101
64101: DISABLE
64102: LD_INT 0
64104: PPUSH
64105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64106: LD_ADDR_VAR 0 2
64110: PUSH
64111: LD_INT 22
64113: PUSH
64114: LD_OWVAR 2
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 21
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PPUSH
64137: CALL_OW 69
64141: ST_TO_ADDR
// if not tmp then
64142: LD_VAR 0 2
64146: NOT
64147: IFFALSE 64151
// exit ;
64149: GO 64180
// for i in tmp do
64151: LD_ADDR_VAR 0 1
64155: PUSH
64156: LD_VAR 0 2
64160: PUSH
64161: FOR_IN
64162: IFFALSE 64178
// SetBLevel ( i , 10 ) ;
64164: LD_VAR 0 1
64168: PPUSH
64169: LD_INT 10
64171: PPUSH
64172: CALL_OW 241
64176: GO 64161
64178: POP
64179: POP
// end ;
64180: PPOPN 2
64182: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64183: LD_EXP 49
64187: PUSH
64188: LD_EXP 66
64192: AND
64193: IFFALSE 64304
64195: GO 64197
64197: DISABLE
64198: LD_INT 0
64200: PPUSH
64201: PPUSH
64202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64203: LD_ADDR_VAR 0 3
64207: PUSH
64208: LD_INT 22
64210: PUSH
64211: LD_OWVAR 2
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 25
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PPUSH
64234: CALL_OW 69
64238: ST_TO_ADDR
// if not tmp then
64239: LD_VAR 0 3
64243: NOT
64244: IFFALSE 64248
// exit ;
64246: GO 64304
// un := tmp [ rand ( 1 , tmp ) ] ;
64248: LD_ADDR_VAR 0 2
64252: PUSH
64253: LD_VAR 0 3
64257: PUSH
64258: LD_INT 1
64260: PPUSH
64261: LD_VAR 0 3
64265: PPUSH
64266: CALL_OW 12
64270: ARRAY
64271: ST_TO_ADDR
// if Crawls ( un ) then
64272: LD_VAR 0 2
64276: PPUSH
64277: CALL_OW 318
64281: IFFALSE 64292
// ComWalk ( un ) ;
64283: LD_VAR 0 2
64287: PPUSH
64288: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64292: LD_VAR 0 2
64296: PPUSH
64297: LD_INT 5
64299: PPUSH
64300: CALL_OW 336
// end ;
64304: PPOPN 3
64306: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64307: LD_EXP 49
64311: PUSH
64312: LD_EXP 67
64316: AND
64317: PUSH
64318: LD_OWVAR 67
64322: PUSH
64323: LD_INT 4
64325: LESS
64326: AND
64327: IFFALSE 64346
64329: GO 64331
64331: DISABLE
// begin Difficulty := Difficulty + 1 ;
64332: LD_ADDR_OWVAR 67
64336: PUSH
64337: LD_OWVAR 67
64341: PUSH
64342: LD_INT 1
64344: PLUS
64345: ST_TO_ADDR
// end ;
64346: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64347: LD_EXP 49
64351: PUSH
64352: LD_EXP 68
64356: AND
64357: IFFALSE 64460
64359: GO 64361
64361: DISABLE
64362: LD_INT 0
64364: PPUSH
// begin for i := 1 to 5 do
64365: LD_ADDR_VAR 0 1
64369: PUSH
64370: DOUBLE
64371: LD_INT 1
64373: DEC
64374: ST_TO_ADDR
64375: LD_INT 5
64377: PUSH
64378: FOR_TO
64379: IFFALSE 64458
// begin uc_nation := nation_nature ;
64381: LD_ADDR_OWVAR 21
64385: PUSH
64386: LD_INT 0
64388: ST_TO_ADDR
// uc_side := 0 ;
64389: LD_ADDR_OWVAR 20
64393: PUSH
64394: LD_INT 0
64396: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64397: LD_ADDR_OWVAR 29
64401: PUSH
64402: LD_INT 12
64404: PUSH
64405: LD_INT 12
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: ST_TO_ADDR
// hc_agressivity := 20 ;
64412: LD_ADDR_OWVAR 35
64416: PUSH
64417: LD_INT 20
64419: ST_TO_ADDR
// hc_class := class_tiger ;
64420: LD_ADDR_OWVAR 28
64424: PUSH
64425: LD_INT 14
64427: ST_TO_ADDR
// hc_gallery :=  ;
64428: LD_ADDR_OWVAR 33
64432: PUSH
64433: LD_STRING 
64435: ST_TO_ADDR
// hc_name :=  ;
64436: LD_ADDR_OWVAR 26
64440: PUSH
64441: LD_STRING 
64443: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64444: CALL_OW 44
64448: PPUSH
64449: LD_INT 0
64451: PPUSH
64452: CALL_OW 51
// end ;
64456: GO 64378
64458: POP
64459: POP
// end ;
64460: PPOPN 1
64462: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64463: LD_EXP 49
64467: PUSH
64468: LD_EXP 69
64472: AND
64473: IFFALSE 64482
64475: GO 64477
64477: DISABLE
// StreamSibBomb ;
64478: CALL 64483 0 0
64482: END
// export function StreamSibBomb ; var i , x , y ; begin
64483: LD_INT 0
64485: PPUSH
64486: PPUSH
64487: PPUSH
64488: PPUSH
// result := false ;
64489: LD_ADDR_VAR 0 1
64493: PUSH
64494: LD_INT 0
64496: ST_TO_ADDR
// for i := 1 to 16 do
64497: LD_ADDR_VAR 0 2
64501: PUSH
64502: DOUBLE
64503: LD_INT 1
64505: DEC
64506: ST_TO_ADDR
64507: LD_INT 16
64509: PUSH
64510: FOR_TO
64511: IFFALSE 64710
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64513: LD_ADDR_VAR 0 3
64517: PUSH
64518: LD_INT 10
64520: PUSH
64521: LD_INT 20
64523: PUSH
64524: LD_INT 30
64526: PUSH
64527: LD_INT 40
64529: PUSH
64530: LD_INT 50
64532: PUSH
64533: LD_INT 60
64535: PUSH
64536: LD_INT 70
64538: PUSH
64539: LD_INT 80
64541: PUSH
64542: LD_INT 90
64544: PUSH
64545: LD_INT 100
64547: PUSH
64548: LD_INT 110
64550: PUSH
64551: LD_INT 120
64553: PUSH
64554: LD_INT 130
64556: PUSH
64557: LD_INT 140
64559: PUSH
64560: LD_INT 150
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PPUSH
64583: LD_INT 15
64585: PPUSH
64586: CALL_OW 12
64590: ARRAY
64591: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64592: LD_ADDR_VAR 0 4
64596: PUSH
64597: LD_INT 10
64599: PUSH
64600: LD_INT 20
64602: PUSH
64603: LD_INT 30
64605: PUSH
64606: LD_INT 40
64608: PUSH
64609: LD_INT 50
64611: PUSH
64612: LD_INT 60
64614: PUSH
64615: LD_INT 70
64617: PUSH
64618: LD_INT 80
64620: PUSH
64621: LD_INT 90
64623: PUSH
64624: LD_INT 100
64626: PUSH
64627: LD_INT 110
64629: PUSH
64630: LD_INT 120
64632: PUSH
64633: LD_INT 130
64635: PUSH
64636: LD_INT 140
64638: PUSH
64639: LD_INT 150
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: PPUSH
64662: LD_INT 15
64664: PPUSH
64665: CALL_OW 12
64669: ARRAY
64670: ST_TO_ADDR
// if ValidHex ( x , y ) then
64671: LD_VAR 0 3
64675: PPUSH
64676: LD_VAR 0 4
64680: PPUSH
64681: CALL_OW 488
64685: IFFALSE 64708
// begin result := [ x , y ] ;
64687: LD_ADDR_VAR 0 1
64691: PUSH
64692: LD_VAR 0 3
64696: PUSH
64697: LD_VAR 0 4
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: ST_TO_ADDR
// break ;
64706: GO 64710
// end ; end ;
64708: GO 64510
64710: POP
64711: POP
// if result then
64712: LD_VAR 0 1
64716: IFFALSE 64776
// begin ToLua ( playSibBomb() ) ;
64718: LD_STRING playSibBomb()
64720: PPUSH
64721: CALL_OW 559
// wait ( 0 0$14 ) ;
64725: LD_INT 490
64727: PPUSH
64728: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64732: LD_VAR 0 1
64736: PUSH
64737: LD_INT 1
64739: ARRAY
64740: PPUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 2
64748: ARRAY
64749: PPUSH
64750: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
64754: LD_VAR 0 1
64758: PUSH
64759: LD_INT 1
64761: ARRAY
64762: PPUSH
64763: LD_VAR 0 1
64767: PUSH
64768: LD_INT 2
64770: ARRAY
64771: PPUSH
64772: CALL_OW 429
// end ; end ;
64776: LD_VAR 0 1
64780: RET
// every 0 0$1 trigger StreamModeActive and sReset do
64781: LD_EXP 49
64785: PUSH
64786: LD_EXP 71
64790: AND
64791: IFFALSE 64803
64793: GO 64795
64795: DISABLE
// YouLost (  ) ;
64796: LD_STRING 
64798: PPUSH
64799: CALL_OW 104
64803: END
// every 0 0$1 trigger StreamModeActive and sFog do
64804: LD_EXP 49
64808: PUSH
64809: LD_EXP 70
64813: AND
64814: IFFALSE 64828
64816: GO 64818
64818: DISABLE
// FogOff ( your_side ) ;
64819: LD_OWVAR 2
64823: PPUSH
64824: CALL_OW 344
64828: END
// every 0 0$1 trigger StreamModeActive and sSun do
64829: LD_EXP 49
64833: PUSH
64834: LD_EXP 72
64838: AND
64839: IFFALSE 64867
64841: GO 64843
64843: DISABLE
// begin solar_recharge_percent := 0 ;
64844: LD_ADDR_OWVAR 79
64848: PUSH
64849: LD_INT 0
64851: ST_TO_ADDR
// wait ( 5 5$00 ) ;
64852: LD_INT 10500
64854: PPUSH
64855: CALL_OW 67
// solar_recharge_percent := 100 ;
64859: LD_ADDR_OWVAR 79
64863: PUSH
64864: LD_INT 100
64866: ST_TO_ADDR
// end ;
64867: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
64868: LD_EXP 49
64872: PUSH
64873: LD_EXP 73
64877: AND
64878: IFFALSE 65117
64880: GO 64882
64882: DISABLE
64883: LD_INT 0
64885: PPUSH
64886: PPUSH
64887: PPUSH
// begin tmp := [ ] ;
64888: LD_ADDR_VAR 0 3
64892: PUSH
64893: EMPTY
64894: ST_TO_ADDR
// for i := 1 to 6 do
64895: LD_ADDR_VAR 0 1
64899: PUSH
64900: DOUBLE
64901: LD_INT 1
64903: DEC
64904: ST_TO_ADDR
64905: LD_INT 6
64907: PUSH
64908: FOR_TO
64909: IFFALSE 65014
// begin uc_nation := nation_nature ;
64911: LD_ADDR_OWVAR 21
64915: PUSH
64916: LD_INT 0
64918: ST_TO_ADDR
// uc_side := 0 ;
64919: LD_ADDR_OWVAR 20
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64927: LD_ADDR_OWVAR 29
64931: PUSH
64932: LD_INT 12
64934: PUSH
64935: LD_INT 12
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// hc_agressivity := 20 ;
64942: LD_ADDR_OWVAR 35
64946: PUSH
64947: LD_INT 20
64949: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
64950: LD_ADDR_OWVAR 28
64954: PUSH
64955: LD_INT 17
64957: ST_TO_ADDR
// hc_gallery :=  ;
64958: LD_ADDR_OWVAR 33
64962: PUSH
64963: LD_STRING 
64965: ST_TO_ADDR
// hc_name :=  ;
64966: LD_ADDR_OWVAR 26
64970: PUSH
64971: LD_STRING 
64973: ST_TO_ADDR
// un := CreateHuman ;
64974: LD_ADDR_VAR 0 2
64978: PUSH
64979: CALL_OW 44
64983: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
64984: LD_VAR 0 2
64988: PPUSH
64989: LD_INT 1
64991: PPUSH
64992: CALL_OW 51
// tmp := tmp ^ un ;
64996: LD_ADDR_VAR 0 3
65000: PUSH
65001: LD_VAR 0 3
65005: PUSH
65006: LD_VAR 0 2
65010: ADD
65011: ST_TO_ADDR
// end ;
65012: GO 64908
65014: POP
65015: POP
// repeat wait ( 0 0$1 ) ;
65016: LD_INT 35
65018: PPUSH
65019: CALL_OW 67
// for un in tmp do
65023: LD_ADDR_VAR 0 2
65027: PUSH
65028: LD_VAR 0 3
65032: PUSH
65033: FOR_IN
65034: IFFALSE 65108
// begin if IsDead ( un ) then
65036: LD_VAR 0 2
65040: PPUSH
65041: CALL_OW 301
65045: IFFALSE 65065
// begin tmp := tmp diff un ;
65047: LD_ADDR_VAR 0 3
65051: PUSH
65052: LD_VAR 0 3
65056: PUSH
65057: LD_VAR 0 2
65061: DIFF
65062: ST_TO_ADDR
// continue ;
65063: GO 65033
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65065: LD_VAR 0 2
65069: PPUSH
65070: LD_INT 3
65072: PUSH
65073: LD_INT 22
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PPUSH
65087: CALL_OW 69
65091: PPUSH
65092: LD_VAR 0 2
65096: PPUSH
65097: CALL_OW 74
65101: PPUSH
65102: CALL_OW 115
// end ;
65106: GO 65033
65108: POP
65109: POP
// until not tmp ;
65110: LD_VAR 0 3
65114: NOT
65115: IFFALSE 65016
// end ;
65117: PPOPN 3
65119: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65120: LD_EXP 49
65124: PUSH
65125: LD_EXP 74
65129: AND
65130: IFFALSE 65184
65132: GO 65134
65134: DISABLE
// begin ToLua ( displayTroll(); ) ;
65135: LD_STRING displayTroll();
65137: PPUSH
65138: CALL_OW 559
// wait ( 3 3$00 ) ;
65142: LD_INT 6300
65144: PPUSH
65145: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65149: LD_STRING hideTroll();
65151: PPUSH
65152: CALL_OW 559
// wait ( 1 1$00 ) ;
65156: LD_INT 2100
65158: PPUSH
65159: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65163: LD_STRING displayTroll();
65165: PPUSH
65166: CALL_OW 559
// wait ( 1 1$00 ) ;
65170: LD_INT 2100
65172: PPUSH
65173: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65177: LD_STRING hideTroll();
65179: PPUSH
65180: CALL_OW 559
// end ;
65184: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65185: LD_EXP 49
65189: PUSH
65190: LD_EXP 75
65194: AND
65195: IFFALSE 65258
65197: GO 65199
65199: DISABLE
65200: LD_INT 0
65202: PPUSH
// begin p := 0 ;
65203: LD_ADDR_VAR 0 1
65207: PUSH
65208: LD_INT 0
65210: ST_TO_ADDR
// repeat game_speed := 1 ;
65211: LD_ADDR_OWVAR 65
65215: PUSH
65216: LD_INT 1
65218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65219: LD_INT 35
65221: PPUSH
65222: CALL_OW 67
// p := p + 1 ;
65226: LD_ADDR_VAR 0 1
65230: PUSH
65231: LD_VAR 0 1
65235: PUSH
65236: LD_INT 1
65238: PLUS
65239: ST_TO_ADDR
// until p >= 60 ;
65240: LD_VAR 0 1
65244: PUSH
65245: LD_INT 60
65247: GREATEREQUAL
65248: IFFALSE 65211
// game_speed := 4 ;
65250: LD_ADDR_OWVAR 65
65254: PUSH
65255: LD_INT 4
65257: ST_TO_ADDR
// end ;
65258: PPOPN 1
65260: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65261: LD_EXP 49
65265: PUSH
65266: LD_EXP 76
65270: AND
65271: IFFALSE 65417
65273: GO 65275
65275: DISABLE
65276: LD_INT 0
65278: PPUSH
65279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65280: LD_ADDR_VAR 0 1
65284: PUSH
65285: LD_INT 22
65287: PUSH
65288: LD_OWVAR 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 2
65299: PUSH
65300: LD_INT 30
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 30
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PPUSH
65329: CALL_OW 69
65333: ST_TO_ADDR
// if not depot then
65334: LD_VAR 0 1
65338: NOT
65339: IFFALSE 65343
// exit ;
65341: GO 65417
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65343: LD_ADDR_VAR 0 2
65347: PUSH
65348: LD_VAR 0 1
65352: PUSH
65353: LD_INT 1
65355: PPUSH
65356: LD_VAR 0 1
65360: PPUSH
65361: CALL_OW 12
65365: ARRAY
65366: PPUSH
65367: CALL_OW 274
65371: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65372: LD_VAR 0 2
65376: PPUSH
65377: LD_INT 1
65379: PPUSH
65380: LD_INT 0
65382: PPUSH
65383: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65387: LD_VAR 0 2
65391: PPUSH
65392: LD_INT 2
65394: PPUSH
65395: LD_INT 0
65397: PPUSH
65398: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65402: LD_VAR 0 2
65406: PPUSH
65407: LD_INT 3
65409: PPUSH
65410: LD_INT 0
65412: PPUSH
65413: CALL_OW 277
// end ;
65417: PPOPN 2
65419: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65420: LD_EXP 49
65424: PUSH
65425: LD_EXP 77
65429: AND
65430: IFFALSE 65527
65432: GO 65434
65434: DISABLE
65435: LD_INT 0
65437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65438: LD_ADDR_VAR 0 1
65442: PUSH
65443: LD_INT 22
65445: PUSH
65446: LD_OWVAR 2
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 21
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: LD_INT 23
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: LIST
65486: PPUSH
65487: CALL_OW 69
65491: ST_TO_ADDR
// if not tmp then
65492: LD_VAR 0 1
65496: NOT
65497: IFFALSE 65501
// exit ;
65499: GO 65527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65501: LD_VAR 0 1
65505: PUSH
65506: LD_INT 1
65508: PPUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: CALL_OW 12
65518: ARRAY
65519: PPUSH
65520: LD_INT 200
65522: PPUSH
65523: CALL_OW 234
// end ;
65527: PPOPN 1
65529: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
65530: LD_EXP 49
65534: PUSH
65535: LD_EXP 78
65539: AND
65540: IFFALSE 65619
65542: GO 65544
65544: DISABLE
65545: LD_INT 0
65547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
65548: LD_ADDR_VAR 0 1
65552: PUSH
65553: LD_INT 22
65555: PUSH
65556: LD_OWVAR 2
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 21
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PPUSH
65579: CALL_OW 69
65583: ST_TO_ADDR
// if not tmp then
65584: LD_VAR 0 1
65588: NOT
65589: IFFALSE 65593
// exit ;
65591: GO 65619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 1
65600: PPUSH
65601: LD_VAR 0 1
65605: PPUSH
65606: CALL_OW 12
65610: ARRAY
65611: PPUSH
65612: LD_INT 60
65614: PPUSH
65615: CALL_OW 234
// end ;
65619: PPOPN 1
65621: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65622: LD_EXP 49
65626: PUSH
65627: LD_EXP 79
65631: AND
65632: IFFALSE 65731
65634: GO 65636
65636: DISABLE
65637: LD_INT 0
65639: PPUSH
65640: PPUSH
// begin enable ;
65641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65642: LD_ADDR_VAR 0 1
65646: PUSH
65647: LD_INT 22
65649: PUSH
65650: LD_OWVAR 2
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 61
65661: PUSH
65662: EMPTY
65663: LIST
65664: PUSH
65665: LD_INT 33
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: PPUSH
65680: CALL_OW 69
65684: ST_TO_ADDR
// if not tmp then
65685: LD_VAR 0 1
65689: NOT
65690: IFFALSE 65694
// exit ;
65692: GO 65731
// for i in tmp do
65694: LD_ADDR_VAR 0 2
65698: PUSH
65699: LD_VAR 0 1
65703: PUSH
65704: FOR_IN
65705: IFFALSE 65729
// if IsControledBy ( i ) then
65707: LD_VAR 0 2
65711: PPUSH
65712: CALL_OW 312
65716: IFFALSE 65727
// ComUnlink ( i ) ;
65718: LD_VAR 0 2
65722: PPUSH
65723: CALL_OW 136
65727: GO 65704
65729: POP
65730: POP
// end ;
65731: PPOPN 2
65733: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65734: LD_EXP 49
65738: PUSH
65739: LD_EXP 80
65743: AND
65744: IFFALSE 65884
65746: GO 65748
65748: DISABLE
65749: LD_INT 0
65751: PPUSH
65752: PPUSH
// begin ToLua ( displayPowell(); ) ;
65753: LD_STRING displayPowell();
65755: PPUSH
65756: CALL_OW 559
// uc_side := 0 ;
65760: LD_ADDR_OWVAR 20
65764: PUSH
65765: LD_INT 0
65767: ST_TO_ADDR
// uc_nation := 2 ;
65768: LD_ADDR_OWVAR 21
65772: PUSH
65773: LD_INT 2
65775: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
65776: LD_ADDR_OWVAR 37
65780: PUSH
65781: LD_INT 14
65783: ST_TO_ADDR
// vc_engine := engine_siberite ;
65784: LD_ADDR_OWVAR 39
65788: PUSH
65789: LD_INT 3
65791: ST_TO_ADDR
// vc_control := control_apeman ;
65792: LD_ADDR_OWVAR 38
65796: PUSH
65797: LD_INT 5
65799: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
65800: LD_ADDR_OWVAR 40
65804: PUSH
65805: LD_INT 29
65807: ST_TO_ADDR
// un := CreateVehicle ;
65808: LD_ADDR_VAR 0 2
65812: PUSH
65813: CALL_OW 45
65817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65818: LD_VAR 0 2
65822: PPUSH
65823: LD_INT 1
65825: PPUSH
65826: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65830: LD_INT 35
65832: PPUSH
65833: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65837: LD_VAR 0 2
65841: PPUSH
65842: LD_INT 22
65844: PUSH
65845: LD_OWVAR 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PPUSH
65854: CALL_OW 69
65858: PPUSH
65859: LD_VAR 0 2
65863: PPUSH
65864: CALL_OW 74
65868: PPUSH
65869: CALL_OW 115
// until IsDead ( un ) ;
65873: LD_VAR 0 2
65877: PPUSH
65878: CALL_OW 301
65882: IFFALSE 65830
// end ;
65884: PPOPN 2
65886: END
// every 0 0$1 trigger StreamModeActive and sStu do
65887: LD_EXP 49
65891: PUSH
65892: LD_EXP 88
65896: AND
65897: IFFALSE 65913
65899: GO 65901
65901: DISABLE
// begin ToLua ( displayStucuk(); ) ;
65902: LD_STRING displayStucuk();
65904: PPUSH
65905: CALL_OW 559
// ResetFog ;
65909: CALL_OW 335
// end ;
65913: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
65914: LD_EXP 49
65918: PUSH
65919: LD_EXP 81
65923: AND
65924: IFFALSE 66065
65926: GO 65928
65928: DISABLE
65929: LD_INT 0
65931: PPUSH
65932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65933: LD_ADDR_VAR 0 2
65937: PUSH
65938: LD_INT 22
65940: PUSH
65941: LD_OWVAR 2
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 21
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PPUSH
65964: CALL_OW 69
65968: ST_TO_ADDR
// if not tmp then
65969: LD_VAR 0 2
65973: NOT
65974: IFFALSE 65978
// exit ;
65976: GO 66065
// un := tmp [ rand ( 1 , tmp ) ] ;
65978: LD_ADDR_VAR 0 1
65982: PUSH
65983: LD_VAR 0 2
65987: PUSH
65988: LD_INT 1
65990: PPUSH
65991: LD_VAR 0 2
65995: PPUSH
65996: CALL_OW 12
66000: ARRAY
66001: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66002: LD_VAR 0 1
66006: PPUSH
66007: LD_INT 0
66009: PPUSH
66010: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66014: LD_VAR 0 1
66018: PPUSH
66019: LD_OWVAR 3
66023: PUSH
66024: LD_VAR 0 1
66028: DIFF
66029: PPUSH
66030: LD_VAR 0 1
66034: PPUSH
66035: CALL_OW 74
66039: PPUSH
66040: CALL_OW 115
// wait ( 0 0$20 ) ;
66044: LD_INT 700
66046: PPUSH
66047: CALL_OW 67
// SetSide ( un , your_side ) ;
66051: LD_VAR 0 1
66055: PPUSH
66056: LD_OWVAR 2
66060: PPUSH
66061: CALL_OW 235
// end ;
66065: PPOPN 2
66067: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66068: LD_EXP 49
66072: PUSH
66073: LD_EXP 82
66077: AND
66078: IFFALSE 66184
66080: GO 66082
66082: DISABLE
66083: LD_INT 0
66085: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66086: LD_ADDR_VAR 0 1
66090: PUSH
66091: LD_INT 22
66093: PUSH
66094: LD_OWVAR 2
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: LD_INT 30
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 30
66118: PUSH
66119: LD_INT 1
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PPUSH
66135: CALL_OW 69
66139: ST_TO_ADDR
// if not depot then
66140: LD_VAR 0 1
66144: NOT
66145: IFFALSE 66149
// exit ;
66147: GO 66184
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66149: LD_VAR 0 1
66153: PUSH
66154: LD_INT 1
66156: ARRAY
66157: PPUSH
66158: CALL_OW 250
66162: PPUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 1
66170: ARRAY
66171: PPUSH
66172: CALL_OW 251
66176: PPUSH
66177: LD_INT 70
66179: PPUSH
66180: CALL_OW 495
// end ;
66184: PPOPN 1
66186: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66187: LD_EXP 49
66191: PUSH
66192: LD_EXP 83
66196: AND
66197: IFFALSE 66408
66199: GO 66201
66201: DISABLE
66202: LD_INT 0
66204: PPUSH
66205: PPUSH
66206: PPUSH
66207: PPUSH
66208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66209: LD_ADDR_VAR 0 5
66213: PUSH
66214: LD_INT 22
66216: PUSH
66217: LD_OWVAR 2
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 21
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PPUSH
66240: CALL_OW 69
66244: ST_TO_ADDR
// if not tmp then
66245: LD_VAR 0 5
66249: NOT
66250: IFFALSE 66254
// exit ;
66252: GO 66408
// for i in tmp do
66254: LD_ADDR_VAR 0 1
66258: PUSH
66259: LD_VAR 0 5
66263: PUSH
66264: FOR_IN
66265: IFFALSE 66406
// begin d := rand ( 0 , 5 ) ;
66267: LD_ADDR_VAR 0 4
66271: PUSH
66272: LD_INT 0
66274: PPUSH
66275: LD_INT 5
66277: PPUSH
66278: CALL_OW 12
66282: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66283: LD_ADDR_VAR 0 2
66287: PUSH
66288: LD_VAR 0 1
66292: PPUSH
66293: CALL_OW 250
66297: PPUSH
66298: LD_VAR 0 4
66302: PPUSH
66303: LD_INT 3
66305: PPUSH
66306: LD_INT 12
66308: PPUSH
66309: CALL_OW 12
66313: PPUSH
66314: CALL_OW 272
66318: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66319: LD_ADDR_VAR 0 3
66323: PUSH
66324: LD_VAR 0 1
66328: PPUSH
66329: CALL_OW 251
66333: PPUSH
66334: LD_VAR 0 4
66338: PPUSH
66339: LD_INT 3
66341: PPUSH
66342: LD_INT 12
66344: PPUSH
66345: CALL_OW 12
66349: PPUSH
66350: CALL_OW 273
66354: ST_TO_ADDR
// if ValidHex ( x , y ) then
66355: LD_VAR 0 2
66359: PPUSH
66360: LD_VAR 0 3
66364: PPUSH
66365: CALL_OW 488
66369: IFFALSE 66404
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66371: LD_VAR 0 1
66375: PPUSH
66376: LD_VAR 0 2
66380: PPUSH
66381: LD_VAR 0 3
66385: PPUSH
66386: LD_INT 3
66388: PPUSH
66389: LD_INT 6
66391: PPUSH
66392: CALL_OW 12
66396: PPUSH
66397: LD_INT 1
66399: PPUSH
66400: CALL_OW 483
// end ;
66404: GO 66264
66406: POP
66407: POP
// end ;
66408: PPOPN 5
66410: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66411: LD_EXP 49
66415: PUSH
66416: LD_EXP 84
66420: AND
66421: IFFALSE 66515
66423: GO 66425
66425: DISABLE
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66430: LD_ADDR_VAR 0 2
66434: PUSH
66435: LD_INT 22
66437: PUSH
66438: LD_OWVAR 2
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 32
66449: PUSH
66450: LD_INT 1
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 21
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: PPUSH
66472: CALL_OW 69
66476: ST_TO_ADDR
// if not tmp then
66477: LD_VAR 0 2
66481: NOT
66482: IFFALSE 66486
// exit ;
66484: GO 66515
// for i in tmp do
66486: LD_ADDR_VAR 0 1
66490: PUSH
66491: LD_VAR 0 2
66495: PUSH
66496: FOR_IN
66497: IFFALSE 66513
// SetFuel ( i , 0 ) ;
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_INT 0
66506: PPUSH
66507: CALL_OW 240
66511: GO 66496
66513: POP
66514: POP
// end ;
66515: PPOPN 2
66517: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66518: LD_EXP 49
66522: PUSH
66523: LD_EXP 85
66527: AND
66528: IFFALSE 66594
66530: GO 66532
66532: DISABLE
66533: LD_INT 0
66535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66536: LD_ADDR_VAR 0 1
66540: PUSH
66541: LD_INT 22
66543: PUSH
66544: LD_OWVAR 2
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 30
66555: PUSH
66556: LD_INT 29
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PPUSH
66567: CALL_OW 69
66571: ST_TO_ADDR
// if not tmp then
66572: LD_VAR 0 1
66576: NOT
66577: IFFALSE 66581
// exit ;
66579: GO 66594
// DestroyUnit ( tmp [ 1 ] ) ;
66581: LD_VAR 0 1
66585: PUSH
66586: LD_INT 1
66588: ARRAY
66589: PPUSH
66590: CALL_OW 65
// end ;
66594: PPOPN 1
66596: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66597: LD_EXP 49
66601: PUSH
66602: LD_EXP 87
66606: AND
66607: IFFALSE 66736
66609: GO 66611
66611: DISABLE
66612: LD_INT 0
66614: PPUSH
// begin uc_side := 0 ;
66615: LD_ADDR_OWVAR 20
66619: PUSH
66620: LD_INT 0
66622: ST_TO_ADDR
// uc_nation := nation_arabian ;
66623: LD_ADDR_OWVAR 21
66627: PUSH
66628: LD_INT 2
66630: ST_TO_ADDR
// hc_gallery :=  ;
66631: LD_ADDR_OWVAR 33
66635: PUSH
66636: LD_STRING 
66638: ST_TO_ADDR
// hc_name :=  ;
66639: LD_ADDR_OWVAR 26
66643: PUSH
66644: LD_STRING 
66646: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66647: LD_INT 1
66649: PPUSH
66650: LD_INT 11
66652: PPUSH
66653: LD_INT 10
66655: PPUSH
66656: CALL_OW 380
// un := CreateHuman ;
66660: LD_ADDR_VAR 0 1
66664: PUSH
66665: CALL_OW 44
66669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66670: LD_VAR 0 1
66674: PPUSH
66675: LD_INT 1
66677: PPUSH
66678: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66682: LD_INT 35
66684: PPUSH
66685: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66689: LD_VAR 0 1
66693: PPUSH
66694: LD_INT 22
66696: PUSH
66697: LD_OWVAR 2
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PPUSH
66706: CALL_OW 69
66710: PPUSH
66711: LD_VAR 0 1
66715: PPUSH
66716: CALL_OW 74
66720: PPUSH
66721: CALL_OW 115
// until IsDead ( un ) ;
66725: LD_VAR 0 1
66729: PPUSH
66730: CALL_OW 301
66734: IFFALSE 66682
// end ;
66736: PPOPN 1
66738: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66739: LD_EXP 49
66743: PUSH
66744: LD_EXP 89
66748: AND
66749: IFFALSE 66761
66751: GO 66753
66753: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
66754: LD_STRING earthquake(getX(game), 0, 32)
66756: PPUSH
66757: CALL_OW 559
66761: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
66762: LD_EXP 49
66766: PUSH
66767: LD_EXP 90
66771: AND
66772: IFFALSE 66863
66774: GO 66776
66776: DISABLE
66777: LD_INT 0
66779: PPUSH
// begin enable ;
66780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
66781: LD_ADDR_VAR 0 1
66785: PUSH
66786: LD_INT 22
66788: PUSH
66789: LD_OWVAR 2
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 21
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 33
66810: PUSH
66811: LD_INT 3
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: PPUSH
66823: CALL_OW 69
66827: ST_TO_ADDR
// if not tmp then
66828: LD_VAR 0 1
66832: NOT
66833: IFFALSE 66837
// exit ;
66835: GO 66863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66837: LD_VAR 0 1
66841: PUSH
66842: LD_INT 1
66844: PPUSH
66845: LD_VAR 0 1
66849: PPUSH
66850: CALL_OW 12
66854: ARRAY
66855: PPUSH
66856: LD_INT 1
66858: PPUSH
66859: CALL_OW 234
// end ;
66863: PPOPN 1
66865: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
66866: LD_EXP 49
66870: PUSH
66871: LD_EXP 91
66875: AND
66876: IFFALSE 67017
66878: GO 66880
66880: DISABLE
66881: LD_INT 0
66883: PPUSH
66884: PPUSH
66885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66886: LD_ADDR_VAR 0 3
66890: PUSH
66891: LD_INT 22
66893: PUSH
66894: LD_OWVAR 2
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 25
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PPUSH
66917: CALL_OW 69
66921: ST_TO_ADDR
// if not tmp then
66922: LD_VAR 0 3
66926: NOT
66927: IFFALSE 66931
// exit ;
66929: GO 67017
// un := tmp [ rand ( 1 , tmp ) ] ;
66931: LD_ADDR_VAR 0 2
66935: PUSH
66936: LD_VAR 0 3
66940: PUSH
66941: LD_INT 1
66943: PPUSH
66944: LD_VAR 0 3
66948: PPUSH
66949: CALL_OW 12
66953: ARRAY
66954: ST_TO_ADDR
// if Crawls ( un ) then
66955: LD_VAR 0 2
66959: PPUSH
66960: CALL_OW 318
66964: IFFALSE 66975
// ComWalk ( un ) ;
66966: LD_VAR 0 2
66970: PPUSH
66971: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
66975: LD_VAR 0 2
66979: PPUSH
66980: LD_INT 9
66982: PPUSH
66983: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
66987: LD_INT 28
66989: PPUSH
66990: LD_OWVAR 2
66994: PPUSH
66995: LD_INT 2
66997: PPUSH
66998: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67002: LD_INT 29
67004: PPUSH
67005: LD_OWVAR 2
67009: PPUSH
67010: LD_INT 2
67012: PPUSH
67013: CALL_OW 322
// end ;
67017: PPOPN 3
67019: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67020: LD_EXP 49
67024: PUSH
67025: LD_EXP 92
67029: AND
67030: IFFALSE 67141
67032: GO 67034
67034: DISABLE
67035: LD_INT 0
67037: PPUSH
67038: PPUSH
67039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67040: LD_ADDR_VAR 0 3
67044: PUSH
67045: LD_INT 22
67047: PUSH
67048: LD_OWVAR 2
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 25
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PPUSH
67071: CALL_OW 69
67075: ST_TO_ADDR
// if not tmp then
67076: LD_VAR 0 3
67080: NOT
67081: IFFALSE 67085
// exit ;
67083: GO 67141
// un := tmp [ rand ( 1 , tmp ) ] ;
67085: LD_ADDR_VAR 0 2
67089: PUSH
67090: LD_VAR 0 3
67094: PUSH
67095: LD_INT 1
67097: PPUSH
67098: LD_VAR 0 3
67102: PPUSH
67103: CALL_OW 12
67107: ARRAY
67108: ST_TO_ADDR
// if Crawls ( un ) then
67109: LD_VAR 0 2
67113: PPUSH
67114: CALL_OW 318
67118: IFFALSE 67129
// ComWalk ( un ) ;
67120: LD_VAR 0 2
67124: PPUSH
67125: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67129: LD_VAR 0 2
67133: PPUSH
67134: LD_INT 8
67136: PPUSH
67137: CALL_OW 336
// end ;
67141: PPOPN 3
67143: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67144: LD_EXP 49
67148: PUSH
67149: LD_EXP 93
67153: AND
67154: IFFALSE 67298
67156: GO 67158
67158: DISABLE
67159: LD_INT 0
67161: PPUSH
67162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67163: LD_ADDR_VAR 0 2
67167: PUSH
67168: LD_INT 22
67170: PUSH
67171: LD_OWVAR 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 21
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 34
67195: PUSH
67196: LD_INT 12
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 34
67205: PUSH
67206: LD_INT 51
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 34
67215: PUSH
67216: LD_INT 32
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: PPUSH
67234: CALL_OW 69
67238: ST_TO_ADDR
// if not tmp then
67239: LD_VAR 0 2
67243: NOT
67244: IFFALSE 67248
// exit ;
67246: GO 67298
// for i in tmp do
67248: LD_ADDR_VAR 0 1
67252: PUSH
67253: LD_VAR 0 2
67257: PUSH
67258: FOR_IN
67259: IFFALSE 67296
// if GetCargo ( i , mat_artifact ) = 0 then
67261: LD_VAR 0 1
67265: PPUSH
67266: LD_INT 4
67268: PPUSH
67269: CALL_OW 289
67273: PUSH
67274: LD_INT 0
67276: EQUAL
67277: IFFALSE 67294
// SetCargo ( i , mat_siberit , 100 ) ;
67279: LD_VAR 0 1
67283: PPUSH
67284: LD_INT 3
67286: PPUSH
67287: LD_INT 100
67289: PPUSH
67290: CALL_OW 290
67294: GO 67258
67296: POP
67297: POP
// end ;
67298: PPOPN 2
67300: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67301: LD_EXP 49
67305: PUSH
67306: LD_EXP 94
67310: AND
67311: IFFALSE 67494
67313: GO 67315
67315: DISABLE
67316: LD_INT 0
67318: PPUSH
67319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67320: LD_ADDR_VAR 0 2
67324: PUSH
67325: LD_INT 22
67327: PUSH
67328: LD_OWVAR 2
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PPUSH
67337: CALL_OW 69
67341: ST_TO_ADDR
// if not tmp then
67342: LD_VAR 0 2
67346: NOT
67347: IFFALSE 67351
// exit ;
67349: GO 67494
// for i := 1 to 2 do
67351: LD_ADDR_VAR 0 1
67355: PUSH
67356: DOUBLE
67357: LD_INT 1
67359: DEC
67360: ST_TO_ADDR
67361: LD_INT 2
67363: PUSH
67364: FOR_TO
67365: IFFALSE 67492
// begin uc_side := your_side ;
67367: LD_ADDR_OWVAR 20
67371: PUSH
67372: LD_OWVAR 2
67376: ST_TO_ADDR
// uc_nation := nation_american ;
67377: LD_ADDR_OWVAR 21
67381: PUSH
67382: LD_INT 1
67384: ST_TO_ADDR
// vc_chassis := us_morphling ;
67385: LD_ADDR_OWVAR 37
67389: PUSH
67390: LD_INT 5
67392: ST_TO_ADDR
// vc_engine := engine_siberite ;
67393: LD_ADDR_OWVAR 39
67397: PUSH
67398: LD_INT 3
67400: ST_TO_ADDR
// vc_control := control_computer ;
67401: LD_ADDR_OWVAR 38
67405: PUSH
67406: LD_INT 3
67408: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67409: LD_ADDR_OWVAR 40
67413: PUSH
67414: LD_INT 10
67416: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67417: LD_VAR 0 2
67421: PUSH
67422: LD_INT 1
67424: ARRAY
67425: PPUSH
67426: CALL_OW 310
67430: NOT
67431: IFFALSE 67478
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67433: CALL_OW 45
67437: PPUSH
67438: LD_VAR 0 2
67442: PUSH
67443: LD_INT 1
67445: ARRAY
67446: PPUSH
67447: CALL_OW 250
67451: PPUSH
67452: LD_VAR 0 2
67456: PUSH
67457: LD_INT 1
67459: ARRAY
67460: PPUSH
67461: CALL_OW 251
67465: PPUSH
67466: LD_INT 12
67468: PPUSH
67469: LD_INT 1
67471: PPUSH
67472: CALL_OW 50
67476: GO 67490
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67478: CALL_OW 45
67482: PPUSH
67483: LD_INT 1
67485: PPUSH
67486: CALL_OW 51
// end ;
67490: GO 67364
67492: POP
67493: POP
// end ;
67494: PPOPN 2
67496: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67497: LD_EXP 49
67501: PUSH
67502: LD_EXP 95
67506: AND
67507: IFFALSE 67729
67509: GO 67511
67511: DISABLE
67512: LD_INT 0
67514: PPUSH
67515: PPUSH
67516: PPUSH
67517: PPUSH
67518: PPUSH
67519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67520: LD_ADDR_VAR 0 6
67524: PUSH
67525: LD_INT 22
67527: PUSH
67528: LD_OWVAR 2
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 21
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 3
67549: PUSH
67550: LD_INT 23
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: PPUSH
67569: CALL_OW 69
67573: ST_TO_ADDR
// if not tmp then
67574: LD_VAR 0 6
67578: NOT
67579: IFFALSE 67583
// exit ;
67581: GO 67729
// s1 := rand ( 1 , 4 ) ;
67583: LD_ADDR_VAR 0 2
67587: PUSH
67588: LD_INT 1
67590: PPUSH
67591: LD_INT 4
67593: PPUSH
67594: CALL_OW 12
67598: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67599: LD_ADDR_VAR 0 4
67603: PUSH
67604: LD_VAR 0 6
67608: PUSH
67609: LD_INT 1
67611: ARRAY
67612: PPUSH
67613: LD_VAR 0 2
67617: PPUSH
67618: CALL_OW 259
67622: ST_TO_ADDR
// if s1 = 1 then
67623: LD_VAR 0 2
67627: PUSH
67628: LD_INT 1
67630: EQUAL
67631: IFFALSE 67651
// s2 := rand ( 2 , 4 ) else
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: LD_INT 2
67640: PPUSH
67641: LD_INT 4
67643: PPUSH
67644: CALL_OW 12
67648: ST_TO_ADDR
67649: GO 67659
// s2 := 1 ;
67651: LD_ADDR_VAR 0 3
67655: PUSH
67656: LD_INT 1
67658: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67659: LD_ADDR_VAR 0 5
67663: PUSH
67664: LD_VAR 0 6
67668: PUSH
67669: LD_INT 1
67671: ARRAY
67672: PPUSH
67673: LD_VAR 0 3
67677: PPUSH
67678: CALL_OW 259
67682: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67683: LD_VAR 0 6
67687: PUSH
67688: LD_INT 1
67690: ARRAY
67691: PPUSH
67692: LD_VAR 0 2
67696: PPUSH
67697: LD_VAR 0 5
67701: PPUSH
67702: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67706: LD_VAR 0 6
67710: PUSH
67711: LD_INT 1
67713: ARRAY
67714: PPUSH
67715: LD_VAR 0 3
67719: PPUSH
67720: LD_VAR 0 4
67724: PPUSH
67725: CALL_OW 237
// end ;
67729: PPOPN 6
67731: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67732: LD_EXP 49
67736: PUSH
67737: LD_EXP 96
67741: AND
67742: IFFALSE 67821
67744: GO 67746
67746: DISABLE
67747: LD_INT 0
67749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
67750: LD_ADDR_VAR 0 1
67754: PUSH
67755: LD_INT 22
67757: PUSH
67758: LD_OWVAR 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 30
67769: PUSH
67770: LD_INT 3
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PPUSH
67781: CALL_OW 69
67785: ST_TO_ADDR
// if not tmp then
67786: LD_VAR 0 1
67790: NOT
67791: IFFALSE 67795
// exit ;
67793: GO 67821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67795: LD_VAR 0 1
67799: PUSH
67800: LD_INT 1
67802: PPUSH
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 12
67812: ARRAY
67813: PPUSH
67814: LD_INT 1
67816: PPUSH
67817: CALL_OW 234
// end ;
67821: PPOPN 1
67823: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
67824: LD_EXP 49
67828: PUSH
67829: LD_EXP 97
67833: AND
67834: IFFALSE 67946
67836: GO 67838
67838: DISABLE
67839: LD_INT 0
67841: PPUSH
67842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
67843: LD_ADDR_VAR 0 2
67847: PUSH
67848: LD_INT 22
67850: PUSH
67851: LD_OWVAR 2
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: LD_INT 30
67865: PUSH
67866: LD_INT 27
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 30
67875: PUSH
67876: LD_INT 26
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 30
67885: PUSH
67886: LD_INT 28
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PPUSH
67903: CALL_OW 69
67907: ST_TO_ADDR
// if not tmp then
67908: LD_VAR 0 2
67912: NOT
67913: IFFALSE 67917
// exit ;
67915: GO 67946
// for i in tmp do
67917: LD_ADDR_VAR 0 1
67921: PUSH
67922: LD_VAR 0 2
67926: PUSH
67927: FOR_IN
67928: IFFALSE 67944
// SetLives ( i , 1 ) ;
67930: LD_VAR 0 1
67934: PPUSH
67935: LD_INT 1
67937: PPUSH
67938: CALL_OW 234
67942: GO 67927
67944: POP
67945: POP
// end ;
67946: PPOPN 2
67948: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
67949: LD_EXP 49
67953: PUSH
67954: LD_EXP 98
67958: AND
67959: IFFALSE 68246
67961: GO 67963
67963: DISABLE
67964: LD_INT 0
67966: PPUSH
67967: PPUSH
67968: PPUSH
// begin i := rand ( 1 , 7 ) ;
67969: LD_ADDR_VAR 0 1
67973: PUSH
67974: LD_INT 1
67976: PPUSH
67977: LD_INT 7
67979: PPUSH
67980: CALL_OW 12
67984: ST_TO_ADDR
// case i of 1 :
67985: LD_VAR 0 1
67989: PUSH
67990: LD_INT 1
67992: DOUBLE
67993: EQUAL
67994: IFTRUE 67998
67996: GO 68008
67998: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
67999: LD_STRING earthquake(getX(game), 0, 32)
68001: PPUSH
68002: CALL_OW 559
68006: GO 68246
68008: LD_INT 2
68010: DOUBLE
68011: EQUAL
68012: IFTRUE 68016
68014: GO 68030
68016: POP
// begin ToLua ( displayStucuk(); ) ;
68017: LD_STRING displayStucuk();
68019: PPUSH
68020: CALL_OW 559
// ResetFog ;
68024: CALL_OW 335
// end ; 3 :
68028: GO 68246
68030: LD_INT 3
68032: DOUBLE
68033: EQUAL
68034: IFTRUE 68038
68036: GO 68142
68038: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_INT 22
68046: PUSH
68047: LD_OWVAR 2
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 25
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PPUSH
68070: CALL_OW 69
68074: ST_TO_ADDR
// if not tmp then
68075: LD_VAR 0 2
68079: NOT
68080: IFFALSE 68084
// exit ;
68082: GO 68246
// un := tmp [ rand ( 1 , tmp ) ] ;
68084: LD_ADDR_VAR 0 3
68088: PUSH
68089: LD_VAR 0 2
68093: PUSH
68094: LD_INT 1
68096: PPUSH
68097: LD_VAR 0 2
68101: PPUSH
68102: CALL_OW 12
68106: ARRAY
68107: ST_TO_ADDR
// if Crawls ( un ) then
68108: LD_VAR 0 3
68112: PPUSH
68113: CALL_OW 318
68117: IFFALSE 68128
// ComWalk ( un ) ;
68119: LD_VAR 0 3
68123: PPUSH
68124: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68128: LD_VAR 0 3
68132: PPUSH
68133: LD_INT 8
68135: PPUSH
68136: CALL_OW 336
// end ; 4 :
68140: GO 68246
68142: LD_INT 4
68144: DOUBLE
68145: EQUAL
68146: IFTRUE 68150
68148: GO 68224
68150: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68151: LD_ADDR_VAR 0 2
68155: PUSH
68156: LD_INT 22
68158: PUSH
68159: LD_OWVAR 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 30
68170: PUSH
68171: LD_INT 29
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PPUSH
68182: CALL_OW 69
68186: ST_TO_ADDR
// if not tmp then
68187: LD_VAR 0 2
68191: NOT
68192: IFFALSE 68196
// exit ;
68194: GO 68246
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68196: LD_VAR 0 2
68200: PUSH
68201: LD_INT 1
68203: ARRAY
68204: PPUSH
68205: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68209: LD_VAR 0 2
68213: PUSH
68214: LD_INT 1
68216: ARRAY
68217: PPUSH
68218: CALL_OW 65
// end ; 5 .. 7 :
68222: GO 68246
68224: LD_INT 5
68226: DOUBLE
68227: GREATEREQUAL
68228: IFFALSE 68236
68230: LD_INT 7
68232: DOUBLE
68233: LESSEQUAL
68234: IFTRUE 68238
68236: GO 68245
68238: POP
// StreamSibBomb ; end ;
68239: CALL 64483 0 0
68243: GO 68246
68245: POP
// end ;
68246: PPOPN 3
68248: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68249: LD_EXP 49
68253: PUSH
68254: LD_EXP 99
68258: AND
68259: IFFALSE 68415
68261: GO 68263
68263: DISABLE
68264: LD_INT 0
68266: PPUSH
68267: PPUSH
68268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: LD_INT 81
68276: PUSH
68277: LD_OWVAR 2
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: LD_INT 21
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 21
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: LIST
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PPUSH
68318: CALL_OW 69
68322: ST_TO_ADDR
// if not tmp then
68323: LD_VAR 0 2
68327: NOT
68328: IFFALSE 68332
// exit ;
68330: GO 68415
// p := 0 ;
68332: LD_ADDR_VAR 0 3
68336: PUSH
68337: LD_INT 0
68339: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68340: LD_INT 35
68342: PPUSH
68343: CALL_OW 67
// p := p + 1 ;
68347: LD_ADDR_VAR 0 3
68351: PUSH
68352: LD_VAR 0 3
68356: PUSH
68357: LD_INT 1
68359: PLUS
68360: ST_TO_ADDR
// for i in tmp do
68361: LD_ADDR_VAR 0 1
68365: PUSH
68366: LD_VAR 0 2
68370: PUSH
68371: FOR_IN
68372: IFFALSE 68403
// if GetLives ( i ) < 1000 then
68374: LD_VAR 0 1
68378: PPUSH
68379: CALL_OW 256
68383: PUSH
68384: LD_INT 1000
68386: LESS
68387: IFFALSE 68401
// SetLives ( i , 1000 ) ;
68389: LD_VAR 0 1
68393: PPUSH
68394: LD_INT 1000
68396: PPUSH
68397: CALL_OW 234
68401: GO 68371
68403: POP
68404: POP
// until p > 20 ;
68405: LD_VAR 0 3
68409: PUSH
68410: LD_INT 20
68412: GREATER
68413: IFFALSE 68340
// end ;
68415: PPOPN 3
68417: END
// every 0 0$1 trigger StreamModeActive and sTime do
68418: LD_EXP 49
68422: PUSH
68423: LD_EXP 100
68427: AND
68428: IFFALSE 68463
68430: GO 68432
68432: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68433: LD_INT 28
68435: PPUSH
68436: LD_OWVAR 2
68440: PPUSH
68441: LD_INT 2
68443: PPUSH
68444: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68448: LD_INT 30
68450: PPUSH
68451: LD_OWVAR 2
68455: PPUSH
68456: LD_INT 2
68458: PPUSH
68459: CALL_OW 322
// end ;
68463: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68464: LD_EXP 49
68468: PUSH
68469: LD_EXP 101
68473: AND
68474: IFFALSE 68595
68476: GO 68478
68478: DISABLE
68479: LD_INT 0
68481: PPUSH
68482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68483: LD_ADDR_VAR 0 2
68487: PUSH
68488: LD_INT 22
68490: PUSH
68491: LD_OWVAR 2
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 21
68502: PUSH
68503: LD_INT 1
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: PUSH
68513: LD_INT 23
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: LIST
68531: PPUSH
68532: CALL_OW 69
68536: ST_TO_ADDR
// if not tmp then
68537: LD_VAR 0 2
68541: NOT
68542: IFFALSE 68546
// exit ;
68544: GO 68595
// for i in tmp do
68546: LD_ADDR_VAR 0 1
68550: PUSH
68551: LD_VAR 0 2
68555: PUSH
68556: FOR_IN
68557: IFFALSE 68593
// begin if Crawls ( i ) then
68559: LD_VAR 0 1
68563: PPUSH
68564: CALL_OW 318
68568: IFFALSE 68579
// ComWalk ( i ) ;
68570: LD_VAR 0 1
68574: PPUSH
68575: CALL_OW 138
// SetClass ( i , 2 ) ;
68579: LD_VAR 0 1
68583: PPUSH
68584: LD_INT 2
68586: PPUSH
68587: CALL_OW 336
// end ;
68591: GO 68556
68593: POP
68594: POP
// end ;
68595: PPOPN 2
68597: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68598: LD_EXP 49
68602: PUSH
68603: LD_EXP 102
68607: AND
68608: IFFALSE 68896
68610: GO 68612
68612: DISABLE
68613: LD_INT 0
68615: PPUSH
68616: PPUSH
68617: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68618: LD_OWVAR 2
68622: PPUSH
68623: LD_INT 9
68625: PPUSH
68626: LD_INT 1
68628: PPUSH
68629: LD_INT 1
68631: PPUSH
68632: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68636: LD_INT 9
68638: PPUSH
68639: LD_OWVAR 2
68643: PPUSH
68644: CALL_OW 343
// uc_side := 9 ;
68648: LD_ADDR_OWVAR 20
68652: PUSH
68653: LD_INT 9
68655: ST_TO_ADDR
// uc_nation := 2 ;
68656: LD_ADDR_OWVAR 21
68660: PUSH
68661: LD_INT 2
68663: ST_TO_ADDR
// hc_name := Dark Warrior ;
68664: LD_ADDR_OWVAR 26
68668: PUSH
68669: LD_STRING Dark Warrior
68671: ST_TO_ADDR
// hc_gallery :=  ;
68672: LD_ADDR_OWVAR 33
68676: PUSH
68677: LD_STRING 
68679: ST_TO_ADDR
// hc_noskilllimit := true ;
68680: LD_ADDR_OWVAR 76
68684: PUSH
68685: LD_INT 1
68687: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68688: LD_ADDR_OWVAR 31
68692: PUSH
68693: LD_INT 30
68695: PUSH
68696: LD_INT 30
68698: PUSH
68699: LD_INT 30
68701: PUSH
68702: LD_INT 30
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: ST_TO_ADDR
// un := CreateHuman ;
68711: LD_ADDR_VAR 0 3
68715: PUSH
68716: CALL_OW 44
68720: ST_TO_ADDR
// hc_noskilllimit := false ;
68721: LD_ADDR_OWVAR 76
68725: PUSH
68726: LD_INT 0
68728: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68729: LD_VAR 0 3
68733: PPUSH
68734: LD_INT 1
68736: PPUSH
68737: CALL_OW 51
// ToLua ( playRanger() ) ;
68741: LD_STRING playRanger()
68743: PPUSH
68744: CALL_OW 559
// p := 0 ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: LD_INT 0
68755: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68756: LD_INT 35
68758: PPUSH
68759: CALL_OW 67
// p := p + 1 ;
68763: LD_ADDR_VAR 0 2
68767: PUSH
68768: LD_VAR 0 2
68772: PUSH
68773: LD_INT 1
68775: PLUS
68776: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
68777: LD_VAR 0 3
68781: PPUSH
68782: CALL_OW 256
68786: PUSH
68787: LD_INT 1000
68789: LESS
68790: IFFALSE 68804
// SetLives ( un , 1000 ) ;
68792: LD_VAR 0 3
68796: PPUSH
68797: LD_INT 1000
68799: PPUSH
68800: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
68804: LD_VAR 0 3
68808: PPUSH
68809: LD_INT 81
68811: PUSH
68812: LD_OWVAR 2
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 91
68823: PUSH
68824: LD_VAR 0 3
68828: PUSH
68829: LD_INT 30
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PPUSH
68841: CALL_OW 69
68845: PPUSH
68846: LD_VAR 0 3
68850: PPUSH
68851: CALL_OW 74
68855: PPUSH
68856: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
68860: LD_VAR 0 2
68864: PUSH
68865: LD_INT 80
68867: GREATER
68868: PUSH
68869: LD_VAR 0 3
68873: PPUSH
68874: CALL_OW 301
68878: OR
68879: IFFALSE 68756
// if un then
68881: LD_VAR 0 3
68885: IFFALSE 68896
// RemoveUnit ( un ) ;
68887: LD_VAR 0 3
68891: PPUSH
68892: CALL_OW 64
// end ;
68896: PPOPN 3
68898: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
68899: LD_EXP 103
68903: IFFALSE 69019
68905: GO 68907
68907: DISABLE
68908: LD_INT 0
68910: PPUSH
68911: PPUSH
68912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68913: LD_ADDR_VAR 0 2
68917: PUSH
68918: LD_INT 81
68920: PUSH
68921: LD_OWVAR 2
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 21
68932: PUSH
68933: LD_INT 1
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PPUSH
68944: CALL_OW 69
68948: ST_TO_ADDR
// ToLua ( playComputer() ) ;
68949: LD_STRING playComputer()
68951: PPUSH
68952: CALL_OW 559
// if not tmp then
68956: LD_VAR 0 2
68960: NOT
68961: IFFALSE 68965
// exit ;
68963: GO 69019
// for i in tmp do
68965: LD_ADDR_VAR 0 1
68969: PUSH
68970: LD_VAR 0 2
68974: PUSH
68975: FOR_IN
68976: IFFALSE 69017
// for j := 1 to 4 do
68978: LD_ADDR_VAR 0 3
68982: PUSH
68983: DOUBLE
68984: LD_INT 1
68986: DEC
68987: ST_TO_ADDR
68988: LD_INT 4
68990: PUSH
68991: FOR_TO
68992: IFFALSE 69013
// SetSkill ( i , j , 10 ) ;
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: LD_INT 10
69006: PPUSH
69007: CALL_OW 237
69011: GO 68991
69013: POP
69014: POP
69015: GO 68975
69017: POP
69018: POP
// end ;
69019: PPOPN 3
69021: END
// every 0 0$1 trigger s30 do var i , tmp ;
69022: LD_EXP 104
69026: IFFALSE 69095
69028: GO 69030
69030: DISABLE
69031: LD_INT 0
69033: PPUSH
69034: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69035: LD_ADDR_VAR 0 2
69039: PUSH
69040: LD_INT 22
69042: PUSH
69043: LD_OWVAR 2
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PPUSH
69052: CALL_OW 69
69056: ST_TO_ADDR
// if not tmp then
69057: LD_VAR 0 2
69061: NOT
69062: IFFALSE 69066
// exit ;
69064: GO 69095
// for i in tmp do
69066: LD_ADDR_VAR 0 1
69070: PUSH
69071: LD_VAR 0 2
69075: PUSH
69076: FOR_IN
69077: IFFALSE 69093
// SetLives ( i , 300 ) ;
69079: LD_VAR 0 1
69083: PPUSH
69084: LD_INT 300
69086: PPUSH
69087: CALL_OW 234
69091: GO 69076
69093: POP
69094: POP
// end ;
69095: PPOPN 2
69097: END
// every 0 0$1 trigger s60 do var i , tmp ;
69098: LD_EXP 105
69102: IFFALSE 69171
69104: GO 69106
69106: DISABLE
69107: LD_INT 0
69109: PPUSH
69110: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69111: LD_ADDR_VAR 0 2
69115: PUSH
69116: LD_INT 22
69118: PUSH
69119: LD_OWVAR 2
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PPUSH
69128: CALL_OW 69
69132: ST_TO_ADDR
// if not tmp then
69133: LD_VAR 0 2
69137: NOT
69138: IFFALSE 69142
// exit ;
69140: GO 69171
// for i in tmp do
69142: LD_ADDR_VAR 0 1
69146: PUSH
69147: LD_VAR 0 2
69151: PUSH
69152: FOR_IN
69153: IFFALSE 69169
// SetLives ( i , 600 ) ;
69155: LD_VAR 0 1
69159: PPUSH
69160: LD_INT 600
69162: PPUSH
69163: CALL_OW 234
69167: GO 69152
69169: POP
69170: POP
// end ;
69171: PPOPN 2
69173: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69174: LD_INT 0
69176: PPUSH
// case cmd of 301 :
69177: LD_VAR 0 1
69181: PUSH
69182: LD_INT 301
69184: DOUBLE
69185: EQUAL
69186: IFTRUE 69190
69188: GO 69222
69190: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69191: LD_VAR 0 6
69195: PPUSH
69196: LD_VAR 0 7
69200: PPUSH
69201: LD_VAR 0 8
69205: PPUSH
69206: LD_VAR 0 4
69210: PPUSH
69211: LD_VAR 0 5
69215: PPUSH
69216: CALL 70423 0 5
69220: GO 69343
69222: LD_INT 302
69224: DOUBLE
69225: EQUAL
69226: IFTRUE 69230
69228: GO 69267
69230: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69231: LD_VAR 0 6
69235: PPUSH
69236: LD_VAR 0 7
69240: PPUSH
69241: LD_VAR 0 8
69245: PPUSH
69246: LD_VAR 0 9
69250: PPUSH
69251: LD_VAR 0 4
69255: PPUSH
69256: LD_VAR 0 5
69260: PPUSH
69261: CALL 70514 0 6
69265: GO 69343
69267: LD_INT 303
69269: DOUBLE
69270: EQUAL
69271: IFTRUE 69275
69273: GO 69312
69275: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69276: LD_VAR 0 6
69280: PPUSH
69281: LD_VAR 0 7
69285: PPUSH
69286: LD_VAR 0 8
69290: PPUSH
69291: LD_VAR 0 9
69295: PPUSH
69296: LD_VAR 0 4
69300: PPUSH
69301: LD_VAR 0 5
69305: PPUSH
69306: CALL 69348 0 6
69310: GO 69343
69312: LD_INT 304
69314: DOUBLE
69315: EQUAL
69316: IFTRUE 69320
69318: GO 69342
69320: POP
// hHackTeleport ( unit , x , y ) ; end ;
69321: LD_VAR 0 2
69325: PPUSH
69326: LD_VAR 0 4
69330: PPUSH
69331: LD_VAR 0 5
69335: PPUSH
69336: CALL 71107 0 3
69340: GO 69343
69342: POP
// end ;
69343: LD_VAR 0 12
69347: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69348: LD_INT 0
69350: PPUSH
69351: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69352: LD_VAR 0 1
69356: PUSH
69357: LD_INT 1
69359: LESS
69360: PUSH
69361: LD_VAR 0 1
69365: PUSH
69366: LD_INT 3
69368: GREATER
69369: OR
69370: PUSH
69371: LD_VAR 0 5
69375: PPUSH
69376: LD_VAR 0 6
69380: PPUSH
69381: CALL_OW 428
69385: OR
69386: IFFALSE 69390
// exit ;
69388: GO 70110
// uc_side := your_side ;
69390: LD_ADDR_OWVAR 20
69394: PUSH
69395: LD_OWVAR 2
69399: ST_TO_ADDR
// uc_nation := nation ;
69400: LD_ADDR_OWVAR 21
69404: PUSH
69405: LD_VAR 0 1
69409: ST_TO_ADDR
// bc_level = 1 ;
69410: LD_ADDR_OWVAR 43
69414: PUSH
69415: LD_INT 1
69417: ST_TO_ADDR
// case btype of 1 :
69418: LD_VAR 0 2
69422: PUSH
69423: LD_INT 1
69425: DOUBLE
69426: EQUAL
69427: IFTRUE 69431
69429: GO 69442
69431: POP
// bc_type := b_depot ; 2 :
69432: LD_ADDR_OWVAR 42
69436: PUSH
69437: LD_INT 0
69439: ST_TO_ADDR
69440: GO 70054
69442: LD_INT 2
69444: DOUBLE
69445: EQUAL
69446: IFTRUE 69450
69448: GO 69461
69450: POP
// bc_type := b_warehouse ; 3 :
69451: LD_ADDR_OWVAR 42
69455: PUSH
69456: LD_INT 1
69458: ST_TO_ADDR
69459: GO 70054
69461: LD_INT 3
69463: DOUBLE
69464: EQUAL
69465: IFTRUE 69469
69467: GO 69480
69469: POP
// bc_type := b_lab ; 4 .. 9 :
69470: LD_ADDR_OWVAR 42
69474: PUSH
69475: LD_INT 6
69477: ST_TO_ADDR
69478: GO 70054
69480: LD_INT 4
69482: DOUBLE
69483: GREATEREQUAL
69484: IFFALSE 69492
69486: LD_INT 9
69488: DOUBLE
69489: LESSEQUAL
69490: IFTRUE 69494
69492: GO 69546
69494: POP
// begin bc_type := b_lab_half ;
69495: LD_ADDR_OWVAR 42
69499: PUSH
69500: LD_INT 7
69502: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69503: LD_ADDR_OWVAR 44
69507: PUSH
69508: LD_INT 10
69510: PUSH
69511: LD_INT 11
69513: PUSH
69514: LD_INT 12
69516: PUSH
69517: LD_INT 15
69519: PUSH
69520: LD_INT 14
69522: PUSH
69523: LD_INT 13
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: PUSH
69534: LD_VAR 0 2
69538: PUSH
69539: LD_INT 3
69541: MINUS
69542: ARRAY
69543: ST_TO_ADDR
// end ; 10 .. 13 :
69544: GO 70054
69546: LD_INT 10
69548: DOUBLE
69549: GREATEREQUAL
69550: IFFALSE 69558
69552: LD_INT 13
69554: DOUBLE
69555: LESSEQUAL
69556: IFTRUE 69560
69558: GO 69637
69560: POP
// begin bc_type := b_lab_full ;
69561: LD_ADDR_OWVAR 42
69565: PUSH
69566: LD_INT 8
69568: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69569: LD_ADDR_OWVAR 44
69573: PUSH
69574: LD_INT 10
69576: PUSH
69577: LD_INT 12
69579: PUSH
69580: LD_INT 14
69582: PUSH
69583: LD_INT 13
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: PUSH
69592: LD_VAR 0 2
69596: PUSH
69597: LD_INT 9
69599: MINUS
69600: ARRAY
69601: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69602: LD_ADDR_OWVAR 45
69606: PUSH
69607: LD_INT 11
69609: PUSH
69610: LD_INT 15
69612: PUSH
69613: LD_INT 12
69615: PUSH
69616: LD_INT 15
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: PUSH
69625: LD_VAR 0 2
69629: PUSH
69630: LD_INT 9
69632: MINUS
69633: ARRAY
69634: ST_TO_ADDR
// end ; 14 :
69635: GO 70054
69637: LD_INT 14
69639: DOUBLE
69640: EQUAL
69641: IFTRUE 69645
69643: GO 69656
69645: POP
// bc_type := b_workshop ; 15 :
69646: LD_ADDR_OWVAR 42
69650: PUSH
69651: LD_INT 2
69653: ST_TO_ADDR
69654: GO 70054
69656: LD_INT 15
69658: DOUBLE
69659: EQUAL
69660: IFTRUE 69664
69662: GO 69675
69664: POP
// bc_type := b_factory ; 16 :
69665: LD_ADDR_OWVAR 42
69669: PUSH
69670: LD_INT 3
69672: ST_TO_ADDR
69673: GO 70054
69675: LD_INT 16
69677: DOUBLE
69678: EQUAL
69679: IFTRUE 69683
69681: GO 69694
69683: POP
// bc_type := b_ext_gun ; 17 :
69684: LD_ADDR_OWVAR 42
69688: PUSH
69689: LD_INT 17
69691: ST_TO_ADDR
69692: GO 70054
69694: LD_INT 17
69696: DOUBLE
69697: EQUAL
69698: IFTRUE 69702
69700: GO 69730
69702: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69703: LD_ADDR_OWVAR 42
69707: PUSH
69708: LD_INT 19
69710: PUSH
69711: LD_INT 23
69713: PUSH
69714: LD_INT 19
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: PUSH
69722: LD_VAR 0 1
69726: ARRAY
69727: ST_TO_ADDR
69728: GO 70054
69730: LD_INT 18
69732: DOUBLE
69733: EQUAL
69734: IFTRUE 69738
69736: GO 69749
69738: POP
// bc_type := b_ext_radar ; 19 :
69739: LD_ADDR_OWVAR 42
69743: PUSH
69744: LD_INT 20
69746: ST_TO_ADDR
69747: GO 70054
69749: LD_INT 19
69751: DOUBLE
69752: EQUAL
69753: IFTRUE 69757
69755: GO 69768
69757: POP
// bc_type := b_ext_radio ; 20 :
69758: LD_ADDR_OWVAR 42
69762: PUSH
69763: LD_INT 22
69765: ST_TO_ADDR
69766: GO 70054
69768: LD_INT 20
69770: DOUBLE
69771: EQUAL
69772: IFTRUE 69776
69774: GO 69787
69776: POP
// bc_type := b_ext_siberium ; 21 :
69777: LD_ADDR_OWVAR 42
69781: PUSH
69782: LD_INT 21
69784: ST_TO_ADDR
69785: GO 70054
69787: LD_INT 21
69789: DOUBLE
69790: EQUAL
69791: IFTRUE 69795
69793: GO 69806
69795: POP
// bc_type := b_ext_computer ; 22 :
69796: LD_ADDR_OWVAR 42
69800: PUSH
69801: LD_INT 24
69803: ST_TO_ADDR
69804: GO 70054
69806: LD_INT 22
69808: DOUBLE
69809: EQUAL
69810: IFTRUE 69814
69812: GO 69825
69814: POP
// bc_type := b_ext_track ; 23 :
69815: LD_ADDR_OWVAR 42
69819: PUSH
69820: LD_INT 16
69822: ST_TO_ADDR
69823: GO 70054
69825: LD_INT 23
69827: DOUBLE
69828: EQUAL
69829: IFTRUE 69833
69831: GO 69844
69833: POP
// bc_type := b_ext_laser ; 24 :
69834: LD_ADDR_OWVAR 42
69838: PUSH
69839: LD_INT 25
69841: ST_TO_ADDR
69842: GO 70054
69844: LD_INT 24
69846: DOUBLE
69847: EQUAL
69848: IFTRUE 69852
69850: GO 69863
69852: POP
// bc_type := b_control_tower ; 25 :
69853: LD_ADDR_OWVAR 42
69857: PUSH
69858: LD_INT 36
69860: ST_TO_ADDR
69861: GO 70054
69863: LD_INT 25
69865: DOUBLE
69866: EQUAL
69867: IFTRUE 69871
69869: GO 69882
69871: POP
// bc_type := b_breastwork ; 26 :
69872: LD_ADDR_OWVAR 42
69876: PUSH
69877: LD_INT 31
69879: ST_TO_ADDR
69880: GO 70054
69882: LD_INT 26
69884: DOUBLE
69885: EQUAL
69886: IFTRUE 69890
69888: GO 69901
69890: POP
// bc_type := b_bunker ; 27 :
69891: LD_ADDR_OWVAR 42
69895: PUSH
69896: LD_INT 32
69898: ST_TO_ADDR
69899: GO 70054
69901: LD_INT 27
69903: DOUBLE
69904: EQUAL
69905: IFTRUE 69909
69907: GO 69920
69909: POP
// bc_type := b_turret ; 28 :
69910: LD_ADDR_OWVAR 42
69914: PUSH
69915: LD_INT 33
69917: ST_TO_ADDR
69918: GO 70054
69920: LD_INT 28
69922: DOUBLE
69923: EQUAL
69924: IFTRUE 69928
69926: GO 69939
69928: POP
// bc_type := b_armoury ; 29 :
69929: LD_ADDR_OWVAR 42
69933: PUSH
69934: LD_INT 4
69936: ST_TO_ADDR
69937: GO 70054
69939: LD_INT 29
69941: DOUBLE
69942: EQUAL
69943: IFTRUE 69947
69945: GO 69958
69947: POP
// bc_type := b_barracks ; 30 :
69948: LD_ADDR_OWVAR 42
69952: PUSH
69953: LD_INT 5
69955: ST_TO_ADDR
69956: GO 70054
69958: LD_INT 30
69960: DOUBLE
69961: EQUAL
69962: IFTRUE 69966
69964: GO 69977
69966: POP
// bc_type := b_solar_power ; 31 :
69967: LD_ADDR_OWVAR 42
69971: PUSH
69972: LD_INT 27
69974: ST_TO_ADDR
69975: GO 70054
69977: LD_INT 31
69979: DOUBLE
69980: EQUAL
69981: IFTRUE 69985
69983: GO 69996
69985: POP
// bc_type := b_oil_power ; 32 :
69986: LD_ADDR_OWVAR 42
69990: PUSH
69991: LD_INT 26
69993: ST_TO_ADDR
69994: GO 70054
69996: LD_INT 32
69998: DOUBLE
69999: EQUAL
70000: IFTRUE 70004
70002: GO 70015
70004: POP
// bc_type := b_siberite_power ; 33 :
70005: LD_ADDR_OWVAR 42
70009: PUSH
70010: LD_INT 28
70012: ST_TO_ADDR
70013: GO 70054
70015: LD_INT 33
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70023
70021: GO 70034
70023: POP
// bc_type := b_oil_mine ; 34 :
70024: LD_ADDR_OWVAR 42
70028: PUSH
70029: LD_INT 29
70031: ST_TO_ADDR
70032: GO 70054
70034: LD_INT 34
70036: DOUBLE
70037: EQUAL
70038: IFTRUE 70042
70040: GO 70053
70042: POP
// bc_type := b_siberite_mine ; end ;
70043: LD_ADDR_OWVAR 42
70047: PUSH
70048: LD_INT 30
70050: ST_TO_ADDR
70051: GO 70054
70053: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70054: LD_ADDR_VAR 0 8
70058: PUSH
70059: LD_VAR 0 5
70063: PPUSH
70064: LD_VAR 0 6
70068: PPUSH
70069: LD_VAR 0 3
70073: PPUSH
70074: CALL_OW 47
70078: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70079: LD_OWVAR 42
70083: PUSH
70084: LD_INT 32
70086: PUSH
70087: LD_INT 33
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: IN
70094: IFFALSE 70110
// PlaceWeaponTurret ( b , weapon ) ;
70096: LD_VAR 0 8
70100: PPUSH
70101: LD_VAR 0 4
70105: PPUSH
70106: CALL_OW 431
// end ;
70110: LD_VAR 0 7
70114: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70115: LD_INT 0
70117: PPUSH
70118: PPUSH
70119: PPUSH
70120: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70121: LD_ADDR_VAR 0 4
70125: PUSH
70126: LD_INT 22
70128: PUSH
70129: LD_OWVAR 2
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 2
70140: PUSH
70141: LD_INT 30
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 30
70153: PUSH
70154: LD_INT 1
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PPUSH
70170: CALL_OW 69
70174: ST_TO_ADDR
// if not tmp then
70175: LD_VAR 0 4
70179: NOT
70180: IFFALSE 70184
// exit ;
70182: GO 70243
// for i in tmp do
70184: LD_ADDR_VAR 0 2
70188: PUSH
70189: LD_VAR 0 4
70193: PUSH
70194: FOR_IN
70195: IFFALSE 70241
// for j = 1 to 3 do
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: DOUBLE
70203: LD_INT 1
70205: DEC
70206: ST_TO_ADDR
70207: LD_INT 3
70209: PUSH
70210: FOR_TO
70211: IFFALSE 70237
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70213: LD_VAR 0 2
70217: PPUSH
70218: CALL_OW 274
70222: PPUSH
70223: LD_VAR 0 3
70227: PPUSH
70228: LD_INT 99999
70230: PPUSH
70231: CALL_OW 277
70235: GO 70210
70237: POP
70238: POP
70239: GO 70194
70241: POP
70242: POP
// end ;
70243: LD_VAR 0 1
70247: RET
// export function hHackSetLevel10 ; var i , j ; begin
70248: LD_INT 0
70250: PPUSH
70251: PPUSH
70252: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70253: LD_ADDR_VAR 0 2
70257: PUSH
70258: LD_INT 21
70260: PUSH
70261: LD_INT 1
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PPUSH
70268: CALL_OW 69
70272: PUSH
70273: FOR_IN
70274: IFFALSE 70326
// if IsSelected ( i ) then
70276: LD_VAR 0 2
70280: PPUSH
70281: CALL_OW 306
70285: IFFALSE 70324
// begin for j := 1 to 4 do
70287: LD_ADDR_VAR 0 3
70291: PUSH
70292: DOUBLE
70293: LD_INT 1
70295: DEC
70296: ST_TO_ADDR
70297: LD_INT 4
70299: PUSH
70300: FOR_TO
70301: IFFALSE 70322
// SetSkill ( i , j , 10 ) ;
70303: LD_VAR 0 2
70307: PPUSH
70308: LD_VAR 0 3
70312: PPUSH
70313: LD_INT 10
70315: PPUSH
70316: CALL_OW 237
70320: GO 70300
70322: POP
70323: POP
// end ;
70324: GO 70273
70326: POP
70327: POP
// end ;
70328: LD_VAR 0 1
70332: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70333: LD_INT 0
70335: PPUSH
70336: PPUSH
70337: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70338: LD_ADDR_VAR 0 2
70342: PUSH
70343: LD_INT 22
70345: PUSH
70346: LD_OWVAR 2
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 21
70357: PUSH
70358: LD_INT 1
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PPUSH
70369: CALL_OW 69
70373: PUSH
70374: FOR_IN
70375: IFFALSE 70416
// begin for j := 1 to 4 do
70377: LD_ADDR_VAR 0 3
70381: PUSH
70382: DOUBLE
70383: LD_INT 1
70385: DEC
70386: ST_TO_ADDR
70387: LD_INT 4
70389: PUSH
70390: FOR_TO
70391: IFFALSE 70412
// SetSkill ( i , j , 10 ) ;
70393: LD_VAR 0 2
70397: PPUSH
70398: LD_VAR 0 3
70402: PPUSH
70403: LD_INT 10
70405: PPUSH
70406: CALL_OW 237
70410: GO 70390
70412: POP
70413: POP
// end ;
70414: GO 70374
70416: POP
70417: POP
// end ;
70418: LD_VAR 0 1
70422: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70423: LD_INT 0
70425: PPUSH
// uc_side := your_side ;
70426: LD_ADDR_OWVAR 20
70430: PUSH
70431: LD_OWVAR 2
70435: ST_TO_ADDR
// uc_nation := nation ;
70436: LD_ADDR_OWVAR 21
70440: PUSH
70441: LD_VAR 0 1
70445: ST_TO_ADDR
// InitHc ;
70446: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70450: LD_INT 0
70452: PPUSH
70453: LD_VAR 0 2
70457: PPUSH
70458: LD_VAR 0 3
70462: PPUSH
70463: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70467: LD_VAR 0 4
70471: PPUSH
70472: LD_VAR 0 5
70476: PPUSH
70477: CALL_OW 428
70481: PUSH
70482: LD_INT 0
70484: EQUAL
70485: IFFALSE 70509
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70487: CALL_OW 44
70491: PPUSH
70492: LD_VAR 0 4
70496: PPUSH
70497: LD_VAR 0 5
70501: PPUSH
70502: LD_INT 1
70504: PPUSH
70505: CALL_OW 48
// end ;
70509: LD_VAR 0 6
70513: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70514: LD_INT 0
70516: PPUSH
70517: PPUSH
// uc_side := your_side ;
70518: LD_ADDR_OWVAR 20
70522: PUSH
70523: LD_OWVAR 2
70527: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70528: LD_VAR 0 1
70532: PUSH
70533: LD_INT 1
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: LD_INT 3
70541: PUSH
70542: LD_INT 4
70544: PUSH
70545: LD_INT 5
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: IN
70555: IFFALSE 70567
// uc_nation := nation_american else
70557: LD_ADDR_OWVAR 21
70561: PUSH
70562: LD_INT 1
70564: ST_TO_ADDR
70565: GO 70610
// if chassis in [ 11 , 12 , 13 , 14 ] then
70567: LD_VAR 0 1
70571: PUSH
70572: LD_INT 11
70574: PUSH
70575: LD_INT 12
70577: PUSH
70578: LD_INT 13
70580: PUSH
70581: LD_INT 14
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: IN
70590: IFFALSE 70602
// uc_nation := nation_arabian else
70592: LD_ADDR_OWVAR 21
70596: PUSH
70597: LD_INT 2
70599: ST_TO_ADDR
70600: GO 70610
// uc_nation := nation_russian ;
70602: LD_ADDR_OWVAR 21
70606: PUSH
70607: LD_INT 3
70609: ST_TO_ADDR
// vc_chassis := chassis ;
70610: LD_ADDR_OWVAR 37
70614: PUSH
70615: LD_VAR 0 1
70619: ST_TO_ADDR
// vc_engine := engine ;
70620: LD_ADDR_OWVAR 39
70624: PUSH
70625: LD_VAR 0 2
70629: ST_TO_ADDR
// vc_control := control ;
70630: LD_ADDR_OWVAR 38
70634: PUSH
70635: LD_VAR 0 3
70639: ST_TO_ADDR
// vc_weapon := weapon ;
70640: LD_ADDR_OWVAR 40
70644: PUSH
70645: LD_VAR 0 4
70649: ST_TO_ADDR
// un := CreateVehicle ;
70650: LD_ADDR_VAR 0 8
70654: PUSH
70655: CALL_OW 45
70659: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70660: LD_VAR 0 8
70664: PPUSH
70665: LD_INT 0
70667: PPUSH
70668: LD_INT 5
70670: PPUSH
70671: CALL_OW 12
70675: PPUSH
70676: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70680: LD_VAR 0 8
70684: PPUSH
70685: LD_VAR 0 5
70689: PPUSH
70690: LD_VAR 0 6
70694: PPUSH
70695: LD_INT 1
70697: PPUSH
70698: CALL_OW 48
// end ;
70702: LD_VAR 0 7
70706: RET
// export hInvincible ; every 1 do
70707: GO 70709
70709: DISABLE
// hInvincible := [ ] ;
70710: LD_ADDR_EXP 106
70714: PUSH
70715: EMPTY
70716: ST_TO_ADDR
70717: END
// every 10 do var i ;
70718: GO 70720
70720: DISABLE
70721: LD_INT 0
70723: PPUSH
// begin enable ;
70724: ENABLE
// if not hInvincible then
70725: LD_EXP 106
70729: NOT
70730: IFFALSE 70734
// exit ;
70732: GO 70778
// for i in hInvincible do
70734: LD_ADDR_VAR 0 1
70738: PUSH
70739: LD_EXP 106
70743: PUSH
70744: FOR_IN
70745: IFFALSE 70776
// if GetLives ( i ) < 1000 then
70747: LD_VAR 0 1
70751: PPUSH
70752: CALL_OW 256
70756: PUSH
70757: LD_INT 1000
70759: LESS
70760: IFFALSE 70774
// SetLives ( i , 1000 ) ;
70762: LD_VAR 0 1
70766: PPUSH
70767: LD_INT 1000
70769: PPUSH
70770: CALL_OW 234
70774: GO 70744
70776: POP
70777: POP
// end ;
70778: PPOPN 1
70780: END
// export function hHackInvincible ; var i ; begin
70781: LD_INT 0
70783: PPUSH
70784: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
70785: LD_ADDR_VAR 0 2
70789: PUSH
70790: LD_INT 2
70792: PUSH
70793: LD_INT 21
70795: PUSH
70796: LD_INT 1
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 21
70805: PUSH
70806: LD_INT 2
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: LIST
70817: PPUSH
70818: CALL_OW 69
70822: PUSH
70823: FOR_IN
70824: IFFALSE 70885
// if IsSelected ( i ) then
70826: LD_VAR 0 2
70830: PPUSH
70831: CALL_OW 306
70835: IFFALSE 70883
// begin if i in hInvincible then
70837: LD_VAR 0 2
70841: PUSH
70842: LD_EXP 106
70846: IN
70847: IFFALSE 70867
// hInvincible := hInvincible diff i else
70849: LD_ADDR_EXP 106
70853: PUSH
70854: LD_EXP 106
70858: PUSH
70859: LD_VAR 0 2
70863: DIFF
70864: ST_TO_ADDR
70865: GO 70883
// hInvincible := hInvincible union i ;
70867: LD_ADDR_EXP 106
70871: PUSH
70872: LD_EXP 106
70876: PUSH
70877: LD_VAR 0 2
70881: UNION
70882: ST_TO_ADDR
// end ;
70883: GO 70823
70885: POP
70886: POP
// end ;
70887: LD_VAR 0 1
70891: RET
// export function hHackInvisible ; var i , j ; begin
70892: LD_INT 0
70894: PPUSH
70895: PPUSH
70896: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70897: LD_ADDR_VAR 0 2
70901: PUSH
70902: LD_INT 21
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PPUSH
70912: CALL_OW 69
70916: PUSH
70917: FOR_IN
70918: IFFALSE 70942
// if IsSelected ( i ) then
70920: LD_VAR 0 2
70924: PPUSH
70925: CALL_OW 306
70929: IFFALSE 70940
// ComForceInvisible ( i ) ;
70931: LD_VAR 0 2
70935: PPUSH
70936: CALL_OW 496
70940: GO 70917
70942: POP
70943: POP
// end ;
70944: LD_VAR 0 1
70948: RET
// export function hHackChangeYourSide ; begin
70949: LD_INT 0
70951: PPUSH
// if your_side = 8 then
70952: LD_OWVAR 2
70956: PUSH
70957: LD_INT 8
70959: EQUAL
70960: IFFALSE 70972
// your_side := 0 else
70962: LD_ADDR_OWVAR 2
70966: PUSH
70967: LD_INT 0
70969: ST_TO_ADDR
70970: GO 70986
// your_side := your_side + 1 ;
70972: LD_ADDR_OWVAR 2
70976: PUSH
70977: LD_OWVAR 2
70981: PUSH
70982: LD_INT 1
70984: PLUS
70985: ST_TO_ADDR
// end ;
70986: LD_VAR 0 1
70990: RET
// export function hHackChangeUnitSide ; var i , j ; begin
70991: LD_INT 0
70993: PPUSH
70994: PPUSH
70995: PPUSH
// for i in all_units do
70996: LD_ADDR_VAR 0 2
71000: PUSH
71001: LD_OWVAR 3
71005: PUSH
71006: FOR_IN
71007: IFFALSE 71085
// if IsSelected ( i ) then
71009: LD_VAR 0 2
71013: PPUSH
71014: CALL_OW 306
71018: IFFALSE 71083
// begin j := GetSide ( i ) ;
71020: LD_ADDR_VAR 0 3
71024: PUSH
71025: LD_VAR 0 2
71029: PPUSH
71030: CALL_OW 255
71034: ST_TO_ADDR
// if j = 8 then
71035: LD_VAR 0 3
71039: PUSH
71040: LD_INT 8
71042: EQUAL
71043: IFFALSE 71055
// j := 0 else
71045: LD_ADDR_VAR 0 3
71049: PUSH
71050: LD_INT 0
71052: ST_TO_ADDR
71053: GO 71069
// j := j + 1 ;
71055: LD_ADDR_VAR 0 3
71059: PUSH
71060: LD_VAR 0 3
71064: PUSH
71065: LD_INT 1
71067: PLUS
71068: ST_TO_ADDR
// SetSide ( i , j ) ;
71069: LD_VAR 0 2
71073: PPUSH
71074: LD_VAR 0 3
71078: PPUSH
71079: CALL_OW 235
// end ;
71083: GO 71006
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 1
71091: RET
// export function hHackFog ; begin
71092: LD_INT 0
71094: PPUSH
// FogOff ( true ) ;
71095: LD_INT 1
71097: PPUSH
71098: CALL_OW 344
// end ;
71102: LD_VAR 0 1
71106: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71107: LD_INT 0
71109: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71110: LD_VAR 0 1
71114: PPUSH
71115: LD_VAR 0 2
71119: PPUSH
71120: LD_VAR 0 3
71124: PPUSH
71125: LD_INT 1
71127: PPUSH
71128: LD_INT 1
71130: PPUSH
71131: CALL_OW 483
// CenterOnXY ( x , y ) ;
71135: LD_VAR 0 2
71139: PPUSH
71140: LD_VAR 0 3
71144: PPUSH
71145: CALL_OW 84
// end ; end_of_file
71149: LD_VAR 0 4
71153: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
71154: LD_INT 0
71156: PPUSH
// ar_miner := 81 ;
71157: LD_ADDR_EXP 114
71161: PUSH
71162: LD_INT 81
71164: ST_TO_ADDR
// ar_crane := 88 ;
71165: LD_ADDR_EXP 113
71169: PUSH
71170: LD_INT 88
71172: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71173: LD_ADDR_EXP 108
71177: PUSH
71178: LD_INT 89
71180: ST_TO_ADDR
// us_hack := 99 ;
71181: LD_ADDR_EXP 109
71185: PUSH
71186: LD_INT 99
71188: ST_TO_ADDR
// us_artillery := 97 ;
71189: LD_ADDR_EXP 110
71193: PUSH
71194: LD_INT 97
71196: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71197: LD_ADDR_EXP 111
71201: PUSH
71202: LD_INT 91
71204: ST_TO_ADDR
// ar_mortar := 92 ;
71205: LD_ADDR_EXP 112
71209: PUSH
71210: LD_INT 92
71212: ST_TO_ADDR
// ru_radar := 98 ;
71213: LD_ADDR_EXP 107
71217: PUSH
71218: LD_INT 98
71220: ST_TO_ADDR
// tech_Artillery := 80 ;
71221: LD_ADDR_EXP 115
71225: PUSH
71226: LD_INT 80
71228: ST_TO_ADDR
// tech_RadMat := 81 ;
71229: LD_ADDR_EXP 116
71233: PUSH
71234: LD_INT 81
71236: ST_TO_ADDR
// tech_BasicTools := 82 ;
71237: LD_ADDR_EXP 117
71241: PUSH
71242: LD_INT 82
71244: ST_TO_ADDR
// tech_Cargo := 83 ;
71245: LD_ADDR_EXP 118
71249: PUSH
71250: LD_INT 83
71252: ST_TO_ADDR
// tech_Track := 84 ;
71253: LD_ADDR_EXP 119
71257: PUSH
71258: LD_INT 84
71260: ST_TO_ADDR
// tech_Crane := 85 ;
71261: LD_ADDR_EXP 120
71265: PUSH
71266: LD_INT 85
71268: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71269: LD_ADDR_EXP 121
71273: PUSH
71274: LD_INT 86
71276: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71277: LD_ADDR_EXP 122
71281: PUSH
71282: LD_INT 87
71284: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71285: LD_ADDR_EXP 123
71289: PUSH
71290: LD_INT 88
71292: ST_TO_ADDR
// class_mastodont := 31 ;
71293: LD_ADDR_EXP 124
71297: PUSH
71298: LD_INT 31
71300: ST_TO_ADDR
// class_horse := 21 ;
71301: LD_ADDR_EXP 125
71305: PUSH
71306: LD_INT 21
71308: ST_TO_ADDR
// end ;
71309: LD_VAR 0 1
71313: RET
// every 1 do
71314: GO 71316
71316: DISABLE
// InitGlobalVariables ; end_of_file
71317: CALL 71154 0 0
71321: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71322: LD_VAR 0 1
71326: PPUSH
71327: LD_VAR 0 2
71331: PPUSH
71332: LD_VAR 0 3
71336: PPUSH
71337: LD_VAR 0 4
71341: PPUSH
71342: LD_VAR 0 5
71346: PPUSH
71347: LD_VAR 0 6
71351: PPUSH
71352: CALL 56867 0 6
// end ; end_of_file
71356: PPOPN 6
71358: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71359: LD_VAR 0 1
71363: PUSH
71364: LD_INT 200
71366: DOUBLE
71367: GREATEREQUAL
71368: IFFALSE 71376
71370: LD_INT 299
71372: DOUBLE
71373: LESSEQUAL
71374: IFTRUE 71378
71376: GO 71410
71378: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71379: LD_VAR 0 1
71383: PPUSH
71384: LD_VAR 0 2
71388: PPUSH
71389: LD_VAR 0 3
71393: PPUSH
71394: LD_VAR 0 4
71398: PPUSH
71399: LD_VAR 0 5
71403: PPUSH
71404: CALL 71900 0 5
71408: GO 71487
71410: LD_INT 300
71412: DOUBLE
71413: GREATEREQUAL
71414: IFFALSE 71422
71416: LD_INT 399
71418: DOUBLE
71419: LESSEQUAL
71420: IFTRUE 71424
71422: GO 71486
71424: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71425: LD_VAR 0 1
71429: PPUSH
71430: LD_VAR 0 2
71434: PPUSH
71435: LD_VAR 0 3
71439: PPUSH
71440: LD_VAR 0 4
71444: PPUSH
71445: LD_VAR 0 5
71449: PPUSH
71450: LD_VAR 0 6
71454: PPUSH
71455: LD_VAR 0 7
71459: PPUSH
71460: LD_VAR 0 8
71464: PPUSH
71465: LD_VAR 0 9
71469: PPUSH
71470: LD_VAR 0 10
71474: PPUSH
71475: LD_VAR 0 11
71479: PPUSH
71480: CALL 69174 0 11
71484: GO 71487
71486: POP
// end ;
71487: PPOPN 11
71489: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71490: LD_VAR 0 1
71494: PPUSH
71495: LD_VAR 0 2
71499: PPUSH
71500: LD_VAR 0 3
71504: PPUSH
71505: LD_VAR 0 4
71509: PPUSH
71510: LD_VAR 0 5
71514: PPUSH
71515: CALL 71636 0 5
// end ; end_of_file
71519: PPOPN 5
71521: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
71522: LD_INT 0
71524: PPUSH
71525: PPUSH
71526: PPUSH
71527: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 264
71537: PUSH
71538: LD_EXP 111
71542: EQUAL
71543: IFFALSE 71615
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71545: LD_INT 68
71547: PPUSH
71548: LD_VAR 0 1
71552: PPUSH
71553: CALL_OW 255
71557: PPUSH
71558: CALL_OW 321
71562: PUSH
71563: LD_INT 2
71565: EQUAL
71566: IFFALSE 71578
// eff := 70 else
71568: LD_ADDR_VAR 0 4
71572: PUSH
71573: LD_INT 70
71575: ST_TO_ADDR
71576: GO 71586
// eff := 30 ;
71578: LD_ADDR_VAR 0 4
71582: PUSH
71583: LD_INT 30
71585: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71586: LD_VAR 0 1
71590: PPUSH
71591: CALL_OW 250
71595: PPUSH
71596: LD_VAR 0 1
71600: PPUSH
71601: CALL_OW 251
71605: PPUSH
71606: LD_VAR 0 4
71610: PPUSH
71611: CALL_OW 495
// end ; end ;
71615: LD_VAR 0 2
71619: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
71620: LD_INT 0
71622: PPUSH
// end ;
71623: LD_VAR 0 4
71627: RET
// export function SOS_Command ( cmd ) ; begin
71628: LD_INT 0
71630: PPUSH
// end ;
71631: LD_VAR 0 2
71635: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
71636: LD_INT 0
71638: PPUSH
// end ;
71639: LD_VAR 0 6
71643: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
71644: LD_INT 0
71646: PPUSH
71647: PPUSH
// if not vehicle or not factory then
71648: LD_VAR 0 1
71652: NOT
71653: PUSH
71654: LD_VAR 0 2
71658: NOT
71659: OR
71660: IFFALSE 71664
// exit ;
71662: GO 71895
// if factoryWaypoints >= factory then
71664: LD_EXP 126
71668: PUSH
71669: LD_VAR 0 2
71673: GREATEREQUAL
71674: IFFALSE 71895
// if factoryWaypoints [ factory ] then
71676: LD_EXP 126
71680: PUSH
71681: LD_VAR 0 2
71685: ARRAY
71686: IFFALSE 71895
// begin if GetControl ( vehicle ) = control_manual then
71688: LD_VAR 0 1
71692: PPUSH
71693: CALL_OW 263
71697: PUSH
71698: LD_INT 1
71700: EQUAL
71701: IFFALSE 71782
// begin driver := IsDrivenBy ( vehicle ) ;
71703: LD_ADDR_VAR 0 4
71707: PUSH
71708: LD_VAR 0 1
71712: PPUSH
71713: CALL_OW 311
71717: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
71718: LD_VAR 0 4
71722: PPUSH
71723: LD_EXP 126
71727: PUSH
71728: LD_VAR 0 2
71732: ARRAY
71733: PUSH
71734: LD_INT 1
71736: ARRAY
71737: PPUSH
71738: LD_EXP 126
71742: PUSH
71743: LD_VAR 0 2
71747: ARRAY
71748: PUSH
71749: LD_INT 2
71751: ARRAY
71752: PPUSH
71753: CALL_OW 171
// AddComExitVehicle ( driver ) ;
71757: LD_VAR 0 4
71761: PPUSH
71762: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
71766: LD_VAR 0 4
71770: PPUSH
71771: LD_VAR 0 2
71775: PPUSH
71776: CALL_OW 180
// end else
71780: GO 71895
// if GetControl ( vehicle ) = control_remote then
71782: LD_VAR 0 1
71786: PPUSH
71787: CALL_OW 263
71791: PUSH
71792: LD_INT 2
71794: EQUAL
71795: IFFALSE 71856
// begin wait ( 0 0$2 ) ;
71797: LD_INT 70
71799: PPUSH
71800: CALL_OW 67
// if Connect ( vehicle ) then
71804: LD_VAR 0 1
71808: PPUSH
71809: CALL 24691 0 1
71813: IFFALSE 71854
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
71815: LD_VAR 0 1
71819: PPUSH
71820: LD_EXP 126
71824: PUSH
71825: LD_VAR 0 2
71829: ARRAY
71830: PUSH
71831: LD_INT 1
71833: ARRAY
71834: PPUSH
71835: LD_EXP 126
71839: PUSH
71840: LD_VAR 0 2
71844: ARRAY
71845: PUSH
71846: LD_INT 2
71848: ARRAY
71849: PPUSH
71850: CALL_OW 171
// end else
71854: GO 71895
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
71856: LD_VAR 0 1
71860: PPUSH
71861: LD_EXP 126
71865: PUSH
71866: LD_VAR 0 2
71870: ARRAY
71871: PUSH
71872: LD_INT 1
71874: ARRAY
71875: PPUSH
71876: LD_EXP 126
71880: PUSH
71881: LD_VAR 0 2
71885: ARRAY
71886: PUSH
71887: LD_INT 2
71889: ARRAY
71890: PPUSH
71891: CALL_OW 171
// end ; end ;
71895: LD_VAR 0 3
71899: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
71900: LD_INT 0
71902: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
71903: LD_VAR 0 1
71907: PUSH
71908: LD_INT 250
71910: EQUAL
71911: PUSH
71912: LD_VAR 0 2
71916: PPUSH
71917: CALL_OW 264
71921: PUSH
71922: LD_EXP 114
71926: EQUAL
71927: AND
71928: IFFALSE 71949
// MinerPlaceMine ( unit , x , y ) ;
71930: LD_VAR 0 2
71934: PPUSH
71935: LD_VAR 0 4
71939: PPUSH
71940: LD_VAR 0 5
71944: PPUSH
71945: CALL 74677 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
71949: LD_VAR 0 1
71953: PUSH
71954: LD_INT 251
71956: EQUAL
71957: PUSH
71958: LD_VAR 0 2
71962: PPUSH
71963: CALL_OW 264
71967: PUSH
71968: LD_EXP 114
71972: EQUAL
71973: AND
71974: IFFALSE 71995
// MinerDetonateMine ( unit , x , y ) ;
71976: LD_VAR 0 2
71980: PPUSH
71981: LD_VAR 0 4
71985: PPUSH
71986: LD_VAR 0 5
71990: PPUSH
71991: CALL 74954 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
71995: LD_VAR 0 1
71999: PUSH
72000: LD_INT 252
72002: EQUAL
72003: PUSH
72004: LD_VAR 0 2
72008: PPUSH
72009: CALL_OW 264
72013: PUSH
72014: LD_EXP 114
72018: EQUAL
72019: AND
72020: IFFALSE 72041
// MinerCreateMinefield ( unit , x , y ) ;
72022: LD_VAR 0 2
72026: PPUSH
72027: LD_VAR 0 4
72031: PPUSH
72032: LD_VAR 0 5
72036: PPUSH
72037: CALL 75371 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
72041: LD_VAR 0 1
72045: PUSH
72046: LD_INT 253
72048: EQUAL
72049: PUSH
72050: LD_VAR 0 2
72054: PPUSH
72055: CALL_OW 257
72059: PUSH
72060: LD_INT 5
72062: EQUAL
72063: AND
72064: IFFALSE 72085
// ComBinocular ( unit , x , y ) ;
72066: LD_VAR 0 2
72070: PPUSH
72071: LD_VAR 0 4
72075: PPUSH
72076: LD_VAR 0 5
72080: PPUSH
72081: CALL 75742 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72085: LD_VAR 0 1
72089: PUSH
72090: LD_INT 254
72092: EQUAL
72093: PUSH
72094: LD_VAR 0 2
72098: PPUSH
72099: CALL_OW 264
72103: PUSH
72104: LD_EXP 109
72108: EQUAL
72109: AND
72110: PUSH
72111: LD_VAR 0 3
72115: PPUSH
72116: CALL_OW 263
72120: PUSH
72121: LD_INT 3
72123: EQUAL
72124: AND
72125: IFFALSE 72141
// HackDestroyVehicle ( unit , selectedUnit ) ;
72127: LD_VAR 0 2
72131: PPUSH
72132: LD_VAR 0 3
72136: PPUSH
72137: CALL 74037 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72141: LD_VAR 0 1
72145: PUSH
72146: LD_INT 255
72148: EQUAL
72149: PUSH
72150: LD_VAR 0 2
72154: PPUSH
72155: CALL_OW 264
72159: PUSH
72160: LD_INT 14
72162: PUSH
72163: LD_INT 53
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: IN
72170: AND
72171: PUSH
72172: LD_VAR 0 4
72176: PPUSH
72177: LD_VAR 0 5
72181: PPUSH
72182: CALL_OW 488
72186: AND
72187: IFFALSE 72211
// CutTreeXYR ( unit , x , y , 12 ) ;
72189: LD_VAR 0 2
72193: PPUSH
72194: LD_VAR 0 4
72198: PPUSH
72199: LD_VAR 0 5
72203: PPUSH
72204: LD_INT 12
72206: PPUSH
72207: CALL 72603 0 4
// if cmd = 256 then
72211: LD_VAR 0 1
72215: PUSH
72216: LD_INT 256
72218: EQUAL
72219: IFFALSE 72240
// SetFactoryWaypoint ( unit , x , y ) ;
72221: LD_VAR 0 2
72225: PPUSH
72226: LD_VAR 0 4
72230: PPUSH
72231: LD_VAR 0 5
72235: PPUSH
72236: CALL 72245 0 3
// end ;
72240: LD_VAR 0 6
72244: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72245: LD_INT 0
72247: PPUSH
72248: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72249: LD_VAR 0 1
72253: NOT
72254: PUSH
72255: LD_VAR 0 2
72259: PPUSH
72260: LD_VAR 0 3
72264: PPUSH
72265: CALL_OW 488
72269: NOT
72270: OR
72271: PUSH
72272: LD_VAR 0 1
72276: PPUSH
72277: CALL_OW 266
72281: PUSH
72282: LD_INT 3
72284: NONEQUAL
72285: PUSH
72286: LD_VAR 0 1
72290: PPUSH
72291: CALL_OW 247
72295: PUSH
72296: LD_INT 1
72298: EQUAL
72299: NOT
72300: AND
72301: OR
72302: IFFALSE 72306
// exit ;
72304: GO 72455
// if GetType ( factory ) = unit_human then
72306: LD_VAR 0 1
72310: PPUSH
72311: CALL_OW 247
72315: PUSH
72316: LD_INT 1
72318: EQUAL
72319: IFFALSE 72336
// factory := IsInUnit ( factory ) ;
72321: LD_ADDR_VAR 0 1
72325: PUSH
72326: LD_VAR 0 1
72330: PPUSH
72331: CALL_OW 310
72335: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72336: LD_VAR 0 1
72340: PPUSH
72341: CALL_OW 266
72345: PUSH
72346: LD_INT 3
72348: NONEQUAL
72349: IFFALSE 72353
// exit ;
72351: GO 72455
// if HexInfo ( x , y ) = factory then
72353: LD_VAR 0 2
72357: PPUSH
72358: LD_VAR 0 3
72362: PPUSH
72363: CALL_OW 428
72367: PUSH
72368: LD_VAR 0 1
72372: EQUAL
72373: IFFALSE 72400
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72375: LD_ADDR_EXP 126
72379: PUSH
72380: LD_EXP 126
72384: PPUSH
72385: LD_VAR 0 1
72389: PPUSH
72390: LD_INT 0
72392: PPUSH
72393: CALL_OW 1
72397: ST_TO_ADDR
72398: GO 72451
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72400: LD_ADDR_EXP 126
72404: PUSH
72405: LD_EXP 126
72409: PPUSH
72410: LD_VAR 0 1
72414: PPUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: CALL_OW 255
72424: PUSH
72425: LD_VAR 0 1
72429: PUSH
72430: LD_VAR 0 2
72434: PUSH
72435: LD_VAR 0 3
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: PPUSH
72446: CALL_OW 1
72450: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72451: CALL 72460 0 0
// end ;
72455: LD_VAR 0 4
72459: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
72460: LD_INT 0
72462: PPUSH
72463: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72464: LD_STRING resetFactoryWaypoint();
72466: PPUSH
72467: CALL_OW 559
// if factoryWaypoints then
72471: LD_EXP 126
72475: IFFALSE 72598
// begin for i := 1 to factoryWaypoints do
72477: LD_ADDR_VAR 0 2
72481: PUSH
72482: DOUBLE
72483: LD_INT 1
72485: DEC
72486: ST_TO_ADDR
72487: LD_EXP 126
72491: PUSH
72492: FOR_TO
72493: IFFALSE 72596
// if factoryWaypoints [ i ] then
72495: LD_EXP 126
72499: PUSH
72500: LD_VAR 0 2
72504: ARRAY
72505: IFFALSE 72594
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
72507: LD_STRING setFactoryWaypointXY(
72509: PUSH
72510: LD_EXP 126
72514: PUSH
72515: LD_VAR 0 2
72519: ARRAY
72520: PUSH
72521: LD_INT 1
72523: ARRAY
72524: STR
72525: PUSH
72526: LD_STRING ,
72528: STR
72529: PUSH
72530: LD_EXP 126
72534: PUSH
72535: LD_VAR 0 2
72539: ARRAY
72540: PUSH
72541: LD_INT 2
72543: ARRAY
72544: STR
72545: PUSH
72546: LD_STRING ,
72548: STR
72549: PUSH
72550: LD_EXP 126
72554: PUSH
72555: LD_VAR 0 2
72559: ARRAY
72560: PUSH
72561: LD_INT 3
72563: ARRAY
72564: STR
72565: PUSH
72566: LD_STRING ,
72568: STR
72569: PUSH
72570: LD_EXP 126
72574: PUSH
72575: LD_VAR 0 2
72579: ARRAY
72580: PUSH
72581: LD_INT 4
72583: ARRAY
72584: STR
72585: PUSH
72586: LD_STRING )
72588: STR
72589: PPUSH
72590: CALL_OW 559
72594: GO 72492
72596: POP
72597: POP
// end ; end ;
72598: LD_VAR 0 1
72602: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
72603: LD_INT 0
72605: PPUSH
72606: PPUSH
72607: PPUSH
72608: PPUSH
72609: PPUSH
72610: PPUSH
72611: PPUSH
72612: PPUSH
72613: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
72614: LD_VAR 0 1
72618: NOT
72619: PUSH
72620: LD_VAR 0 2
72624: PPUSH
72625: LD_VAR 0 3
72629: PPUSH
72630: CALL_OW 488
72634: NOT
72635: OR
72636: PUSH
72637: LD_VAR 0 4
72641: NOT
72642: OR
72643: IFFALSE 72647
// exit ;
72645: GO 72987
// list := [ ] ;
72647: LD_ADDR_VAR 0 13
72651: PUSH
72652: EMPTY
72653: ST_TO_ADDR
// if x - r < 0 then
72654: LD_VAR 0 2
72658: PUSH
72659: LD_VAR 0 4
72663: MINUS
72664: PUSH
72665: LD_INT 0
72667: LESS
72668: IFFALSE 72680
// min_x := 0 else
72670: LD_ADDR_VAR 0 7
72674: PUSH
72675: LD_INT 0
72677: ST_TO_ADDR
72678: GO 72696
// min_x := x - r ;
72680: LD_ADDR_VAR 0 7
72684: PUSH
72685: LD_VAR 0 2
72689: PUSH
72690: LD_VAR 0 4
72694: MINUS
72695: ST_TO_ADDR
// if y - r < 0 then
72696: LD_VAR 0 3
72700: PUSH
72701: LD_VAR 0 4
72705: MINUS
72706: PUSH
72707: LD_INT 0
72709: LESS
72710: IFFALSE 72722
// min_y := 0 else
72712: LD_ADDR_VAR 0 8
72716: PUSH
72717: LD_INT 0
72719: ST_TO_ADDR
72720: GO 72738
// min_y := y - r ;
72722: LD_ADDR_VAR 0 8
72726: PUSH
72727: LD_VAR 0 3
72731: PUSH
72732: LD_VAR 0 4
72736: MINUS
72737: ST_TO_ADDR
// max_x := x + r ;
72738: LD_ADDR_VAR 0 9
72742: PUSH
72743: LD_VAR 0 2
72747: PUSH
72748: LD_VAR 0 4
72752: PLUS
72753: ST_TO_ADDR
// max_y := y + r ;
72754: LD_ADDR_VAR 0 10
72758: PUSH
72759: LD_VAR 0 3
72763: PUSH
72764: LD_VAR 0 4
72768: PLUS
72769: ST_TO_ADDR
// for _x = min_x to max_x do
72770: LD_ADDR_VAR 0 11
72774: PUSH
72775: DOUBLE
72776: LD_VAR 0 7
72780: DEC
72781: ST_TO_ADDR
72782: LD_VAR 0 9
72786: PUSH
72787: FOR_TO
72788: IFFALSE 72905
// for _y = min_y to max_y do
72790: LD_ADDR_VAR 0 12
72794: PUSH
72795: DOUBLE
72796: LD_VAR 0 8
72800: DEC
72801: ST_TO_ADDR
72802: LD_VAR 0 10
72806: PUSH
72807: FOR_TO
72808: IFFALSE 72901
// begin if not ValidHex ( _x , _y ) then
72810: LD_VAR 0 11
72814: PPUSH
72815: LD_VAR 0 12
72819: PPUSH
72820: CALL_OW 488
72824: NOT
72825: IFFALSE 72829
// continue ;
72827: GO 72807
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72829: LD_VAR 0 11
72833: PPUSH
72834: LD_VAR 0 12
72838: PPUSH
72839: CALL_OW 351
72843: PUSH
72844: LD_VAR 0 11
72848: PPUSH
72849: LD_VAR 0 12
72853: PPUSH
72854: CALL_OW 554
72858: AND
72859: IFFALSE 72899
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72861: LD_ADDR_VAR 0 13
72865: PUSH
72866: LD_VAR 0 13
72870: PPUSH
72871: LD_VAR 0 13
72875: PUSH
72876: LD_INT 1
72878: PLUS
72879: PPUSH
72880: LD_VAR 0 11
72884: PUSH
72885: LD_VAR 0 12
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PPUSH
72894: CALL_OW 2
72898: ST_TO_ADDR
// end ;
72899: GO 72807
72901: POP
72902: POP
72903: GO 72787
72905: POP
72906: POP
// if not list then
72907: LD_VAR 0 13
72911: NOT
72912: IFFALSE 72916
// exit ;
72914: GO 72987
// for i in list do
72916: LD_ADDR_VAR 0 6
72920: PUSH
72921: LD_VAR 0 13
72925: PUSH
72926: FOR_IN
72927: IFFALSE 72985
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
72929: LD_VAR 0 1
72933: PPUSH
72934: LD_STRING M
72936: PUSH
72937: LD_VAR 0 6
72941: PUSH
72942: LD_INT 1
72944: ARRAY
72945: PUSH
72946: LD_VAR 0 6
72950: PUSH
72951: LD_INT 2
72953: ARRAY
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: LD_INT 0
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: PUSH
72976: EMPTY
72977: LIST
72978: PPUSH
72979: CALL_OW 447
72983: GO 72926
72985: POP
72986: POP
// end ;
72987: LD_VAR 0 5
72991: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72992: LD_EXP 127
72996: NOT
72997: IFFALSE 73047
72999: GO 73001
73001: DISABLE
// begin initHack := true ;
73002: LD_ADDR_EXP 127
73006: PUSH
73007: LD_INT 1
73009: ST_TO_ADDR
// hackTanks := [ ] ;
73010: LD_ADDR_EXP 128
73014: PUSH
73015: EMPTY
73016: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
73017: LD_ADDR_EXP 129
73021: PUSH
73022: EMPTY
73023: ST_TO_ADDR
// hackLimit := 3 ;
73024: LD_ADDR_EXP 130
73028: PUSH
73029: LD_INT 3
73031: ST_TO_ADDR
// hackDist := 12 ;
73032: LD_ADDR_EXP 131
73036: PUSH
73037: LD_INT 12
73039: ST_TO_ADDR
// hackCounter := [ ] ;
73040: LD_ADDR_EXP 132
73044: PUSH
73045: EMPTY
73046: ST_TO_ADDR
// end ;
73047: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
73048: LD_EXP 127
73052: PUSH
73053: LD_INT 34
73055: PUSH
73056: LD_EXP 109
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PPUSH
73065: CALL_OW 69
73069: AND
73070: IFFALSE 73325
73072: GO 73074
73074: DISABLE
73075: LD_INT 0
73077: PPUSH
73078: PPUSH
// begin enable ;
73079: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
73080: LD_ADDR_VAR 0 1
73084: PUSH
73085: LD_INT 34
73087: PUSH
73088: LD_EXP 109
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PPUSH
73097: CALL_OW 69
73101: PUSH
73102: FOR_IN
73103: IFFALSE 73323
// begin if not i in hackTanks then
73105: LD_VAR 0 1
73109: PUSH
73110: LD_EXP 128
73114: IN
73115: NOT
73116: IFFALSE 73199
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
73118: LD_ADDR_EXP 128
73122: PUSH
73123: LD_EXP 128
73127: PPUSH
73128: LD_EXP 128
73132: PUSH
73133: LD_INT 1
73135: PLUS
73136: PPUSH
73137: LD_VAR 0 1
73141: PPUSH
73142: CALL_OW 1
73146: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
73147: LD_ADDR_EXP 129
73151: PUSH
73152: LD_EXP 129
73156: PPUSH
73157: LD_EXP 129
73161: PUSH
73162: LD_INT 1
73164: PLUS
73165: PPUSH
73166: EMPTY
73167: PPUSH
73168: CALL_OW 1
73172: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
73173: LD_ADDR_EXP 132
73177: PUSH
73178: LD_EXP 132
73182: PPUSH
73183: LD_EXP 132
73187: PUSH
73188: LD_INT 1
73190: PLUS
73191: PPUSH
73192: EMPTY
73193: PPUSH
73194: CALL_OW 1
73198: ST_TO_ADDR
// end ; if not IsOk ( i ) then
73199: LD_VAR 0 1
73203: PPUSH
73204: CALL_OW 302
73208: NOT
73209: IFFALSE 73222
// begin HackUnlinkAll ( i ) ;
73211: LD_VAR 0 1
73215: PPUSH
73216: CALL 73328 0 1
// continue ;
73220: GO 73102
// end ; HackCheckCapturedStatus ( i ) ;
73222: LD_VAR 0 1
73226: PPUSH
73227: CALL 73771 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
73231: LD_ADDR_VAR 0 2
73235: PUSH
73236: LD_INT 81
73238: PUSH
73239: LD_VAR 0 1
73243: PPUSH
73244: CALL_OW 255
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 33
73255: PUSH
73256: LD_INT 3
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 91
73265: PUSH
73266: LD_VAR 0 1
73270: PUSH
73271: LD_EXP 131
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 50
73283: PUSH
73284: EMPTY
73285: LIST
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: PPUSH
73293: CALL_OW 69
73297: ST_TO_ADDR
// if not tmp then
73298: LD_VAR 0 2
73302: NOT
73303: IFFALSE 73307
// continue ;
73305: GO 73102
// HackLink ( i , tmp ) ;
73307: LD_VAR 0 1
73311: PPUSH
73312: LD_VAR 0 2
73316: PPUSH
73317: CALL 73464 0 2
// end ;
73321: GO 73102
73323: POP
73324: POP
// end ;
73325: PPOPN 2
73327: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
73328: LD_INT 0
73330: PPUSH
73331: PPUSH
73332: PPUSH
// if not hack in hackTanks then
73333: LD_VAR 0 1
73337: PUSH
73338: LD_EXP 128
73342: IN
73343: NOT
73344: IFFALSE 73348
// exit ;
73346: GO 73459
// index := GetElementIndex ( hackTanks , hack ) ;
73348: LD_ADDR_VAR 0 4
73352: PUSH
73353: LD_EXP 128
73357: PPUSH
73358: LD_VAR 0 1
73362: PPUSH
73363: CALL 21505 0 2
73367: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
73368: LD_EXP 129
73372: PUSH
73373: LD_VAR 0 4
73377: ARRAY
73378: IFFALSE 73459
// begin for i in hackTanksCaptured [ index ] do
73380: LD_ADDR_VAR 0 3
73384: PUSH
73385: LD_EXP 129
73389: PUSH
73390: LD_VAR 0 4
73394: ARRAY
73395: PUSH
73396: FOR_IN
73397: IFFALSE 73423
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
73399: LD_VAR 0 3
73403: PUSH
73404: LD_INT 1
73406: ARRAY
73407: PPUSH
73408: LD_VAR 0 3
73412: PUSH
73413: LD_INT 2
73415: ARRAY
73416: PPUSH
73417: CALL_OW 235
73421: GO 73396
73423: POP
73424: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
73425: LD_ADDR_EXP 129
73429: PUSH
73430: LD_EXP 129
73434: PPUSH
73435: LD_VAR 0 4
73439: PPUSH
73440: EMPTY
73441: PPUSH
73442: CALL_OW 1
73446: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
73447: LD_VAR 0 1
73451: PPUSH
73452: LD_INT 0
73454: PPUSH
73455: CALL_OW 505
// end ; end ;
73459: LD_VAR 0 2
73463: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
73464: LD_INT 0
73466: PPUSH
73467: PPUSH
73468: PPUSH
// if not hack in hackTanks or not vehicles then
73469: LD_VAR 0 1
73473: PUSH
73474: LD_EXP 128
73478: IN
73479: NOT
73480: PUSH
73481: LD_VAR 0 2
73485: NOT
73486: OR
73487: IFFALSE 73491
// exit ;
73489: GO 73766
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
73491: LD_ADDR_VAR 0 2
73495: PUSH
73496: LD_VAR 0 1
73500: PPUSH
73501: LD_VAR 0 2
73505: PPUSH
73506: LD_INT 1
73508: PPUSH
73509: LD_INT 1
73511: PPUSH
73512: CALL 22155 0 4
73516: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
73517: LD_ADDR_VAR 0 5
73521: PUSH
73522: LD_EXP 128
73526: PPUSH
73527: LD_VAR 0 1
73531: PPUSH
73532: CALL 21505 0 2
73536: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
73537: LD_EXP 129
73541: PUSH
73542: LD_VAR 0 5
73546: ARRAY
73547: PUSH
73548: LD_EXP 130
73552: LESS
73553: IFFALSE 73742
// begin for i := 1 to vehicles do
73555: LD_ADDR_VAR 0 4
73559: PUSH
73560: DOUBLE
73561: LD_INT 1
73563: DEC
73564: ST_TO_ADDR
73565: LD_VAR 0 2
73569: PUSH
73570: FOR_TO
73571: IFFALSE 73740
// begin if hackTanksCaptured [ index ] = hackLimit then
73573: LD_EXP 129
73577: PUSH
73578: LD_VAR 0 5
73582: ARRAY
73583: PUSH
73584: LD_EXP 130
73588: EQUAL
73589: IFFALSE 73593
// break ;
73591: GO 73740
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
73593: LD_ADDR_EXP 132
73597: PUSH
73598: LD_EXP 132
73602: PPUSH
73603: LD_VAR 0 5
73607: PPUSH
73608: LD_EXP 132
73612: PUSH
73613: LD_VAR 0 5
73617: ARRAY
73618: PUSH
73619: LD_INT 1
73621: PLUS
73622: PPUSH
73623: CALL_OW 1
73627: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
73628: LD_ADDR_EXP 129
73632: PUSH
73633: LD_EXP 129
73637: PPUSH
73638: LD_VAR 0 5
73642: PUSH
73643: LD_EXP 129
73647: PUSH
73648: LD_VAR 0 5
73652: ARRAY
73653: PUSH
73654: LD_INT 1
73656: PLUS
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PPUSH
73662: LD_VAR 0 2
73666: PUSH
73667: LD_VAR 0 4
73671: ARRAY
73672: PUSH
73673: LD_VAR 0 2
73677: PUSH
73678: LD_VAR 0 4
73682: ARRAY
73683: PPUSH
73684: CALL_OW 255
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PPUSH
73693: CALL 21720 0 3
73697: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73698: LD_VAR 0 2
73702: PUSH
73703: LD_VAR 0 4
73707: ARRAY
73708: PPUSH
73709: LD_VAR 0 1
73713: PPUSH
73714: CALL_OW 255
73718: PPUSH
73719: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73723: LD_VAR 0 2
73727: PUSH
73728: LD_VAR 0 4
73732: ARRAY
73733: PPUSH
73734: CALL_OW 141
// end ;
73738: GO 73570
73740: POP
73741: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73742: LD_VAR 0 1
73746: PPUSH
73747: LD_EXP 129
73751: PUSH
73752: LD_VAR 0 5
73756: ARRAY
73757: PUSH
73758: LD_INT 0
73760: PLUS
73761: PPUSH
73762: CALL_OW 505
// end ;
73766: LD_VAR 0 3
73770: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73771: LD_INT 0
73773: PPUSH
73774: PPUSH
73775: PPUSH
73776: PPUSH
// if not hack in hackTanks then
73777: LD_VAR 0 1
73781: PUSH
73782: LD_EXP 128
73786: IN
73787: NOT
73788: IFFALSE 73792
// exit ;
73790: GO 74032
// index := GetElementIndex ( hackTanks , hack ) ;
73792: LD_ADDR_VAR 0 4
73796: PUSH
73797: LD_EXP 128
73801: PPUSH
73802: LD_VAR 0 1
73806: PPUSH
73807: CALL 21505 0 2
73811: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73812: LD_ADDR_VAR 0 3
73816: PUSH
73817: DOUBLE
73818: LD_EXP 129
73822: PUSH
73823: LD_VAR 0 4
73827: ARRAY
73828: INC
73829: ST_TO_ADDR
73830: LD_INT 1
73832: PUSH
73833: FOR_DOWNTO
73834: IFFALSE 74006
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73836: LD_ADDR_VAR 0 5
73840: PUSH
73841: LD_EXP 129
73845: PUSH
73846: LD_VAR 0 4
73850: ARRAY
73851: PUSH
73852: LD_VAR 0 3
73856: ARRAY
73857: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73858: LD_VAR 0 5
73862: PUSH
73863: LD_INT 1
73865: ARRAY
73866: PPUSH
73867: CALL_OW 302
73871: NOT
73872: PUSH
73873: LD_VAR 0 5
73877: PUSH
73878: LD_INT 1
73880: ARRAY
73881: PPUSH
73882: CALL_OW 255
73886: PUSH
73887: LD_VAR 0 1
73891: PPUSH
73892: CALL_OW 255
73896: NONEQUAL
73897: OR
73898: IFFALSE 74004
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73900: LD_VAR 0 5
73904: PUSH
73905: LD_INT 1
73907: ARRAY
73908: PPUSH
73909: CALL_OW 305
73913: PUSH
73914: LD_VAR 0 5
73918: PUSH
73919: LD_INT 1
73921: ARRAY
73922: PPUSH
73923: CALL_OW 255
73927: PUSH
73928: LD_VAR 0 1
73932: PPUSH
73933: CALL_OW 255
73937: EQUAL
73938: AND
73939: IFFALSE 73963
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73941: LD_VAR 0 5
73945: PUSH
73946: LD_INT 1
73948: ARRAY
73949: PPUSH
73950: LD_VAR 0 5
73954: PUSH
73955: LD_INT 2
73957: ARRAY
73958: PPUSH
73959: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73963: LD_ADDR_EXP 129
73967: PUSH
73968: LD_EXP 129
73972: PPUSH
73973: LD_VAR 0 4
73977: PPUSH
73978: LD_EXP 129
73982: PUSH
73983: LD_VAR 0 4
73987: ARRAY
73988: PPUSH
73989: LD_VAR 0 3
73993: PPUSH
73994: CALL_OW 3
73998: PPUSH
73999: CALL_OW 1
74003: ST_TO_ADDR
// end ; end ;
74004: GO 73833
74006: POP
74007: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74008: LD_VAR 0 1
74012: PPUSH
74013: LD_EXP 129
74017: PUSH
74018: LD_VAR 0 4
74022: ARRAY
74023: PUSH
74024: LD_INT 0
74026: PLUS
74027: PPUSH
74028: CALL_OW 505
// end ;
74032: LD_VAR 0 2
74036: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
74037: LD_INT 0
74039: PPUSH
74040: PPUSH
74041: PPUSH
74042: PPUSH
// if not hack in hackTanks then
74043: LD_VAR 0 1
74047: PUSH
74048: LD_EXP 128
74052: IN
74053: NOT
74054: IFFALSE 74058
// exit ;
74056: GO 74143
// index := GetElementIndex ( hackTanks , hack ) ;
74058: LD_ADDR_VAR 0 5
74062: PUSH
74063: LD_EXP 128
74067: PPUSH
74068: LD_VAR 0 1
74072: PPUSH
74073: CALL 21505 0 2
74077: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
74078: LD_ADDR_VAR 0 4
74082: PUSH
74083: DOUBLE
74084: LD_INT 1
74086: DEC
74087: ST_TO_ADDR
74088: LD_EXP 129
74092: PUSH
74093: LD_VAR 0 5
74097: ARRAY
74098: PUSH
74099: FOR_TO
74100: IFFALSE 74141
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
74102: LD_EXP 129
74106: PUSH
74107: LD_VAR 0 5
74111: ARRAY
74112: PUSH
74113: LD_VAR 0 4
74117: ARRAY
74118: PUSH
74119: LD_INT 1
74121: ARRAY
74122: PUSH
74123: LD_VAR 0 2
74127: EQUAL
74128: IFFALSE 74139
// KillUnit ( vehicle ) ;
74130: LD_VAR 0 2
74134: PPUSH
74135: CALL_OW 66
74139: GO 74099
74141: POP
74142: POP
// end ;
74143: LD_VAR 0 3
74147: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
74148: LD_EXP 133
74152: NOT
74153: IFFALSE 74188
74155: GO 74157
74157: DISABLE
// begin initMiner := true ;
74158: LD_ADDR_EXP 133
74162: PUSH
74163: LD_INT 1
74165: ST_TO_ADDR
// minersList := [ ] ;
74166: LD_ADDR_EXP 134
74170: PUSH
74171: EMPTY
74172: ST_TO_ADDR
// minerMinesList := [ ] ;
74173: LD_ADDR_EXP 135
74177: PUSH
74178: EMPTY
74179: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
74180: LD_ADDR_EXP 136
74184: PUSH
74185: LD_INT 5
74187: ST_TO_ADDR
// end ;
74188: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
74189: LD_EXP 133
74193: PUSH
74194: LD_INT 34
74196: PUSH
74197: LD_EXP 114
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PPUSH
74206: CALL_OW 69
74210: AND
74211: IFFALSE 74674
74213: GO 74215
74215: DISABLE
74216: LD_INT 0
74218: PPUSH
74219: PPUSH
74220: PPUSH
74221: PPUSH
// begin enable ;
74222: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
74223: LD_ADDR_VAR 0 1
74227: PUSH
74228: LD_INT 34
74230: PUSH
74231: LD_EXP 114
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PPUSH
74240: CALL_OW 69
74244: PUSH
74245: FOR_IN
74246: IFFALSE 74318
// begin if not i in minersList then
74248: LD_VAR 0 1
74252: PUSH
74253: LD_EXP 134
74257: IN
74258: NOT
74259: IFFALSE 74316
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
74261: LD_ADDR_EXP 134
74265: PUSH
74266: LD_EXP 134
74270: PPUSH
74271: LD_EXP 134
74275: PUSH
74276: LD_INT 1
74278: PLUS
74279: PPUSH
74280: LD_VAR 0 1
74284: PPUSH
74285: CALL_OW 1
74289: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
74290: LD_ADDR_EXP 135
74294: PUSH
74295: LD_EXP 135
74299: PPUSH
74300: LD_EXP 135
74304: PUSH
74305: LD_INT 1
74307: PLUS
74308: PPUSH
74309: EMPTY
74310: PPUSH
74311: CALL_OW 1
74315: ST_TO_ADDR
// end end ;
74316: GO 74245
74318: POP
74319: POP
// for i := minerMinesList downto 1 do
74320: LD_ADDR_VAR 0 1
74324: PUSH
74325: DOUBLE
74326: LD_EXP 135
74330: INC
74331: ST_TO_ADDR
74332: LD_INT 1
74334: PUSH
74335: FOR_DOWNTO
74336: IFFALSE 74672
// begin if IsLive ( minersList [ i ] ) then
74338: LD_EXP 134
74342: PUSH
74343: LD_VAR 0 1
74347: ARRAY
74348: PPUSH
74349: CALL_OW 300
74353: IFFALSE 74381
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
74355: LD_EXP 134
74359: PUSH
74360: LD_VAR 0 1
74364: ARRAY
74365: PPUSH
74366: LD_EXP 135
74370: PUSH
74371: LD_VAR 0 1
74375: ARRAY
74376: PPUSH
74377: CALL_OW 505
// if not minerMinesList [ i ] then
74381: LD_EXP 135
74385: PUSH
74386: LD_VAR 0 1
74390: ARRAY
74391: NOT
74392: IFFALSE 74396
// continue ;
74394: GO 74335
// for j := minerMinesList [ i ] downto 1 do
74396: LD_ADDR_VAR 0 2
74400: PUSH
74401: DOUBLE
74402: LD_EXP 135
74406: PUSH
74407: LD_VAR 0 1
74411: ARRAY
74412: INC
74413: ST_TO_ADDR
74414: LD_INT 1
74416: PUSH
74417: FOR_DOWNTO
74418: IFFALSE 74668
// begin side := GetSide ( minersList [ i ] ) ;
74420: LD_ADDR_VAR 0 3
74424: PUSH
74425: LD_EXP 134
74429: PUSH
74430: LD_VAR 0 1
74434: ARRAY
74435: PPUSH
74436: CALL_OW 255
74440: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74441: LD_ADDR_VAR 0 4
74445: PUSH
74446: LD_EXP 135
74450: PUSH
74451: LD_VAR 0 1
74455: ARRAY
74456: PUSH
74457: LD_VAR 0 2
74461: ARRAY
74462: PUSH
74463: LD_INT 1
74465: ARRAY
74466: PPUSH
74467: LD_EXP 135
74471: PUSH
74472: LD_VAR 0 1
74476: ARRAY
74477: PUSH
74478: LD_VAR 0 2
74482: ARRAY
74483: PUSH
74484: LD_INT 2
74486: ARRAY
74487: PPUSH
74488: CALL_OW 428
74492: ST_TO_ADDR
// if not tmp then
74493: LD_VAR 0 4
74497: NOT
74498: IFFALSE 74502
// continue ;
74500: GO 74417
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
74502: LD_VAR 0 4
74506: PUSH
74507: LD_INT 81
74509: PUSH
74510: LD_VAR 0 3
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PPUSH
74519: CALL_OW 69
74523: IN
74524: PUSH
74525: LD_EXP 135
74529: PUSH
74530: LD_VAR 0 1
74534: ARRAY
74535: PUSH
74536: LD_VAR 0 2
74540: ARRAY
74541: PUSH
74542: LD_INT 1
74544: ARRAY
74545: PPUSH
74546: LD_EXP 135
74550: PUSH
74551: LD_VAR 0 1
74555: ARRAY
74556: PUSH
74557: LD_VAR 0 2
74561: ARRAY
74562: PUSH
74563: LD_INT 2
74565: ARRAY
74566: PPUSH
74567: CALL_OW 458
74571: AND
74572: IFFALSE 74666
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74574: LD_EXP 135
74578: PUSH
74579: LD_VAR 0 1
74583: ARRAY
74584: PUSH
74585: LD_VAR 0 2
74589: ARRAY
74590: PUSH
74591: LD_INT 1
74593: ARRAY
74594: PPUSH
74595: LD_EXP 135
74599: PUSH
74600: LD_VAR 0 1
74604: ARRAY
74605: PUSH
74606: LD_VAR 0 2
74610: ARRAY
74611: PUSH
74612: LD_INT 2
74614: ARRAY
74615: PPUSH
74616: LD_VAR 0 3
74620: PPUSH
74621: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74625: LD_ADDR_EXP 135
74629: PUSH
74630: LD_EXP 135
74634: PPUSH
74635: LD_VAR 0 1
74639: PPUSH
74640: LD_EXP 135
74644: PUSH
74645: LD_VAR 0 1
74649: ARRAY
74650: PPUSH
74651: LD_VAR 0 2
74655: PPUSH
74656: CALL_OW 3
74660: PPUSH
74661: CALL_OW 1
74665: ST_TO_ADDR
// end ; end ;
74666: GO 74417
74668: POP
74669: POP
// end ;
74670: GO 74335
74672: POP
74673: POP
// end ;
74674: PPOPN 4
74676: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
74677: LD_INT 0
74679: PPUSH
74680: PPUSH
// result := false ;
74681: LD_ADDR_VAR 0 4
74685: PUSH
74686: LD_INT 0
74688: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74689: LD_VAR 0 1
74693: PPUSH
74694: CALL_OW 264
74698: PUSH
74699: LD_EXP 114
74703: EQUAL
74704: NOT
74705: IFFALSE 74709
// exit ;
74707: GO 74949
// index := GetElementIndex ( minersList , unit ) ;
74709: LD_ADDR_VAR 0 5
74713: PUSH
74714: LD_EXP 134
74718: PPUSH
74719: LD_VAR 0 1
74723: PPUSH
74724: CALL 21505 0 2
74728: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74729: LD_EXP 135
74733: PUSH
74734: LD_VAR 0 5
74738: ARRAY
74739: PUSH
74740: LD_EXP 136
74744: GREATEREQUAL
74745: IFFALSE 74749
// exit ;
74747: GO 74949
// ComMoveXY ( unit , x , y ) ;
74749: LD_VAR 0 1
74753: PPUSH
74754: LD_VAR 0 2
74758: PPUSH
74759: LD_VAR 0 3
74763: PPUSH
74764: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74768: LD_INT 35
74770: PPUSH
74771: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74775: LD_VAR 0 1
74779: PPUSH
74780: LD_VAR 0 2
74784: PPUSH
74785: LD_VAR 0 3
74789: PPUSH
74790: CALL 52277 0 3
74794: NOT
74795: PUSH
74796: LD_VAR 0 1
74800: PPUSH
74801: CALL_OW 314
74805: AND
74806: IFFALSE 74810
// exit ;
74808: GO 74949
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74810: LD_VAR 0 2
74814: PPUSH
74815: LD_VAR 0 3
74819: PPUSH
74820: CALL_OW 428
74824: PUSH
74825: LD_VAR 0 1
74829: EQUAL
74830: PUSH
74831: LD_VAR 0 1
74835: PPUSH
74836: CALL_OW 314
74840: NOT
74841: AND
74842: IFFALSE 74768
// PlaySoundXY ( x , y , PlantMine ) ;
74844: LD_VAR 0 2
74848: PPUSH
74849: LD_VAR 0 3
74853: PPUSH
74854: LD_STRING PlantMine
74856: PPUSH
74857: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
74861: LD_VAR 0 2
74865: PPUSH
74866: LD_VAR 0 3
74870: PPUSH
74871: LD_VAR 0 1
74875: PPUSH
74876: CALL_OW 255
74880: PPUSH
74881: LD_INT 0
74883: PPUSH
74884: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74888: LD_ADDR_EXP 135
74892: PUSH
74893: LD_EXP 135
74897: PPUSH
74898: LD_VAR 0 5
74902: PUSH
74903: LD_EXP 135
74907: PUSH
74908: LD_VAR 0 5
74912: ARRAY
74913: PUSH
74914: LD_INT 1
74916: PLUS
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PPUSH
74922: LD_VAR 0 2
74926: PUSH
74927: LD_VAR 0 3
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PPUSH
74936: CALL 21720 0 3
74940: ST_TO_ADDR
// result := true ;
74941: LD_ADDR_VAR 0 4
74945: PUSH
74946: LD_INT 1
74948: ST_TO_ADDR
// end ;
74949: LD_VAR 0 4
74953: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74954: LD_INT 0
74956: PPUSH
74957: PPUSH
74958: PPUSH
// if not unit in minersList then
74959: LD_VAR 0 1
74963: PUSH
74964: LD_EXP 134
74968: IN
74969: NOT
74970: IFFALSE 74974
// exit ;
74972: GO 75366
// index := GetElementIndex ( minersList , unit ) ;
74974: LD_ADDR_VAR 0 6
74978: PUSH
74979: LD_EXP 134
74983: PPUSH
74984: LD_VAR 0 1
74988: PPUSH
74989: CALL 21505 0 2
74993: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74994: LD_ADDR_VAR 0 5
74998: PUSH
74999: DOUBLE
75000: LD_EXP 135
75004: PUSH
75005: LD_VAR 0 6
75009: ARRAY
75010: INC
75011: ST_TO_ADDR
75012: LD_INT 1
75014: PUSH
75015: FOR_DOWNTO
75016: IFFALSE 75177
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
75018: LD_EXP 135
75022: PUSH
75023: LD_VAR 0 6
75027: ARRAY
75028: PUSH
75029: LD_VAR 0 5
75033: ARRAY
75034: PUSH
75035: LD_INT 1
75037: ARRAY
75038: PUSH
75039: LD_VAR 0 2
75043: EQUAL
75044: PUSH
75045: LD_EXP 135
75049: PUSH
75050: LD_VAR 0 6
75054: ARRAY
75055: PUSH
75056: LD_VAR 0 5
75060: ARRAY
75061: PUSH
75062: LD_INT 2
75064: ARRAY
75065: PUSH
75066: LD_VAR 0 3
75070: EQUAL
75071: AND
75072: IFFALSE 75175
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75074: LD_EXP 135
75078: PUSH
75079: LD_VAR 0 6
75083: ARRAY
75084: PUSH
75085: LD_VAR 0 5
75089: ARRAY
75090: PUSH
75091: LD_INT 1
75093: ARRAY
75094: PPUSH
75095: LD_EXP 135
75099: PUSH
75100: LD_VAR 0 6
75104: ARRAY
75105: PUSH
75106: LD_VAR 0 5
75110: ARRAY
75111: PUSH
75112: LD_INT 2
75114: ARRAY
75115: PPUSH
75116: LD_VAR 0 1
75120: PPUSH
75121: CALL_OW 255
75125: PPUSH
75126: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75130: LD_ADDR_EXP 135
75134: PUSH
75135: LD_EXP 135
75139: PPUSH
75140: LD_VAR 0 6
75144: PPUSH
75145: LD_EXP 135
75149: PUSH
75150: LD_VAR 0 6
75154: ARRAY
75155: PPUSH
75156: LD_VAR 0 5
75160: PPUSH
75161: CALL_OW 3
75165: PPUSH
75166: CALL_OW 1
75170: ST_TO_ADDR
// exit ;
75171: POP
75172: POP
75173: GO 75366
// end ; end ;
75175: GO 75015
75177: POP
75178: POP
// for i := minerMinesList [ index ] downto 1 do
75179: LD_ADDR_VAR 0 5
75183: PUSH
75184: DOUBLE
75185: LD_EXP 135
75189: PUSH
75190: LD_VAR 0 6
75194: ARRAY
75195: INC
75196: ST_TO_ADDR
75197: LD_INT 1
75199: PUSH
75200: FOR_DOWNTO
75201: IFFALSE 75364
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
75203: LD_EXP 135
75207: PUSH
75208: LD_VAR 0 6
75212: ARRAY
75213: PUSH
75214: LD_VAR 0 5
75218: ARRAY
75219: PUSH
75220: LD_INT 1
75222: ARRAY
75223: PPUSH
75224: LD_EXP 135
75228: PUSH
75229: LD_VAR 0 6
75233: ARRAY
75234: PUSH
75235: LD_VAR 0 5
75239: ARRAY
75240: PUSH
75241: LD_INT 2
75243: ARRAY
75244: PPUSH
75245: LD_VAR 0 2
75249: PPUSH
75250: LD_VAR 0 3
75254: PPUSH
75255: CALL_OW 298
75259: PUSH
75260: LD_INT 6
75262: LESS
75263: IFFALSE 75362
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75265: LD_EXP 135
75269: PUSH
75270: LD_VAR 0 6
75274: ARRAY
75275: PUSH
75276: LD_VAR 0 5
75280: ARRAY
75281: PUSH
75282: LD_INT 1
75284: ARRAY
75285: PPUSH
75286: LD_EXP 135
75290: PUSH
75291: LD_VAR 0 6
75295: ARRAY
75296: PUSH
75297: LD_VAR 0 5
75301: ARRAY
75302: PUSH
75303: LD_INT 2
75305: ARRAY
75306: PPUSH
75307: LD_VAR 0 1
75311: PPUSH
75312: CALL_OW 255
75316: PPUSH
75317: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75321: LD_ADDR_EXP 135
75325: PUSH
75326: LD_EXP 135
75330: PPUSH
75331: LD_VAR 0 6
75335: PPUSH
75336: LD_EXP 135
75340: PUSH
75341: LD_VAR 0 6
75345: ARRAY
75346: PPUSH
75347: LD_VAR 0 5
75351: PPUSH
75352: CALL_OW 3
75356: PPUSH
75357: CALL_OW 1
75361: ST_TO_ADDR
// end ; end ;
75362: GO 75200
75364: POP
75365: POP
// end ;
75366: LD_VAR 0 4
75370: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
75371: LD_INT 0
75373: PPUSH
75374: PPUSH
75375: PPUSH
75376: PPUSH
75377: PPUSH
75378: PPUSH
75379: PPUSH
75380: PPUSH
75381: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
75382: LD_VAR 0 1
75386: PPUSH
75387: CALL_OW 264
75391: PUSH
75392: LD_EXP 114
75396: EQUAL
75397: NOT
75398: PUSH
75399: LD_VAR 0 1
75403: PUSH
75404: LD_EXP 134
75408: IN
75409: NOT
75410: OR
75411: IFFALSE 75415
// exit ;
75413: GO 75737
// index := GetElementIndex ( minersList , unit ) ;
75415: LD_ADDR_VAR 0 6
75419: PUSH
75420: LD_EXP 134
75424: PPUSH
75425: LD_VAR 0 1
75429: PPUSH
75430: CALL 21505 0 2
75434: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
75435: LD_ADDR_VAR 0 8
75439: PUSH
75440: LD_EXP 136
75444: PUSH
75445: LD_EXP 135
75449: PUSH
75450: LD_VAR 0 6
75454: ARRAY
75455: MINUS
75456: ST_TO_ADDR
// if not minesFreeAmount then
75457: LD_VAR 0 8
75461: NOT
75462: IFFALSE 75466
// exit ;
75464: GO 75737
// tmp := [ ] ;
75466: LD_ADDR_VAR 0 7
75470: PUSH
75471: EMPTY
75472: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
75473: LD_ADDR_VAR 0 5
75477: PUSH
75478: DOUBLE
75479: LD_INT 1
75481: DEC
75482: ST_TO_ADDR
75483: LD_VAR 0 8
75487: PUSH
75488: FOR_TO
75489: IFFALSE 75684
// begin _d := rand ( 0 , 5 ) ;
75491: LD_ADDR_VAR 0 11
75495: PUSH
75496: LD_INT 0
75498: PPUSH
75499: LD_INT 5
75501: PPUSH
75502: CALL_OW 12
75506: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
75507: LD_ADDR_VAR 0 12
75511: PUSH
75512: LD_INT 2
75514: PPUSH
75515: LD_INT 6
75517: PPUSH
75518: CALL_OW 12
75522: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
75523: LD_ADDR_VAR 0 9
75527: PUSH
75528: LD_VAR 0 2
75532: PPUSH
75533: LD_VAR 0 11
75537: PPUSH
75538: LD_VAR 0 12
75542: PPUSH
75543: CALL_OW 272
75547: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
75548: LD_ADDR_VAR 0 10
75552: PUSH
75553: LD_VAR 0 3
75557: PPUSH
75558: LD_VAR 0 11
75562: PPUSH
75563: LD_VAR 0 12
75567: PPUSH
75568: CALL_OW 273
75572: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
75573: LD_VAR 0 9
75577: PPUSH
75578: LD_VAR 0 10
75582: PPUSH
75583: CALL_OW 488
75587: PUSH
75588: LD_VAR 0 9
75592: PUSH
75593: LD_VAR 0 10
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_VAR 0 7
75606: IN
75607: NOT
75608: AND
75609: PUSH
75610: LD_VAR 0 9
75614: PPUSH
75615: LD_VAR 0 10
75619: PPUSH
75620: CALL_OW 458
75624: NOT
75625: AND
75626: IFFALSE 75668
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75628: LD_ADDR_VAR 0 7
75632: PUSH
75633: LD_VAR 0 7
75637: PPUSH
75638: LD_VAR 0 7
75642: PUSH
75643: LD_INT 1
75645: PLUS
75646: PPUSH
75647: LD_VAR 0 9
75651: PUSH
75652: LD_VAR 0 10
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PPUSH
75661: CALL_OW 1
75665: ST_TO_ADDR
75666: GO 75682
// i := i - 1 ;
75668: LD_ADDR_VAR 0 5
75672: PUSH
75673: LD_VAR 0 5
75677: PUSH
75678: LD_INT 1
75680: MINUS
75681: ST_TO_ADDR
// end ;
75682: GO 75488
75684: POP
75685: POP
// for i in tmp do
75686: LD_ADDR_VAR 0 5
75690: PUSH
75691: LD_VAR 0 7
75695: PUSH
75696: FOR_IN
75697: IFFALSE 75735
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75699: LD_VAR 0 1
75703: PPUSH
75704: LD_VAR 0 5
75708: PUSH
75709: LD_INT 1
75711: ARRAY
75712: PPUSH
75713: LD_VAR 0 5
75717: PUSH
75718: LD_INT 2
75720: ARRAY
75721: PPUSH
75722: CALL 74677 0 3
75726: NOT
75727: IFFALSE 75733
// exit ;
75729: POP
75730: POP
75731: GO 75737
75733: GO 75696
75735: POP
75736: POP
// end ;
75737: LD_VAR 0 4
75741: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
75742: LD_INT 0
75744: PPUSH
75745: PPUSH
75746: PPUSH
75747: PPUSH
75748: PPUSH
75749: PPUSH
75750: PPUSH
// if not GetClass ( unit ) = class_sniper then
75751: LD_VAR 0 1
75755: PPUSH
75756: CALL_OW 257
75760: PUSH
75761: LD_INT 5
75763: EQUAL
75764: NOT
75765: IFFALSE 75769
// exit ;
75767: GO 76157
// dist := 8 ;
75769: LD_ADDR_VAR 0 5
75773: PUSH
75774: LD_INT 8
75776: ST_TO_ADDR
// viewRange := 12 ;
75777: LD_ADDR_VAR 0 7
75781: PUSH
75782: LD_INT 12
75784: ST_TO_ADDR
// side := GetSide ( unit ) ;
75785: LD_ADDR_VAR 0 6
75789: PUSH
75790: LD_VAR 0 1
75794: PPUSH
75795: CALL_OW 255
75799: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75800: LD_INT 61
75802: PPUSH
75803: LD_VAR 0 6
75807: PPUSH
75808: CALL_OW 321
75812: PUSH
75813: LD_INT 2
75815: EQUAL
75816: IFFALSE 75826
// viewRange := 16 ;
75818: LD_ADDR_VAR 0 7
75822: PUSH
75823: LD_INT 16
75825: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75826: LD_VAR 0 1
75830: PPUSH
75831: LD_VAR 0 2
75835: PPUSH
75836: LD_VAR 0 3
75840: PPUSH
75841: CALL_OW 297
75845: PUSH
75846: LD_VAR 0 5
75850: GREATER
75851: IFFALSE 75930
// begin ComMoveXY ( unit , x , y ) ;
75853: LD_VAR 0 1
75857: PPUSH
75858: LD_VAR 0 2
75862: PPUSH
75863: LD_VAR 0 3
75867: PPUSH
75868: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75872: LD_INT 35
75874: PPUSH
75875: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75879: LD_VAR 0 1
75883: PPUSH
75884: LD_VAR 0 2
75888: PPUSH
75889: LD_VAR 0 3
75893: PPUSH
75894: CALL 52277 0 3
75898: NOT
75899: IFFALSE 75903
// exit ;
75901: GO 76157
// until GetDistUnitXY ( unit , x , y ) < dist ;
75903: LD_VAR 0 1
75907: PPUSH
75908: LD_VAR 0 2
75912: PPUSH
75913: LD_VAR 0 3
75917: PPUSH
75918: CALL_OW 297
75922: PUSH
75923: LD_VAR 0 5
75927: LESS
75928: IFFALSE 75872
// end ; ComTurnXY ( unit , x , y ) ;
75930: LD_VAR 0 1
75934: PPUSH
75935: LD_VAR 0 2
75939: PPUSH
75940: LD_VAR 0 3
75944: PPUSH
75945: CALL_OW 118
// wait ( 5 ) ;
75949: LD_INT 5
75951: PPUSH
75952: CALL_OW 67
// _d := GetDir ( unit ) ;
75956: LD_ADDR_VAR 0 10
75960: PUSH
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 254
75970: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
75971: LD_ADDR_VAR 0 8
75975: PUSH
75976: LD_VAR 0 1
75980: PPUSH
75981: CALL_OW 250
75985: PPUSH
75986: LD_VAR 0 10
75990: PPUSH
75991: LD_VAR 0 5
75995: PPUSH
75996: CALL_OW 272
76000: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
76001: LD_ADDR_VAR 0 9
76005: PUSH
76006: LD_VAR 0 1
76010: PPUSH
76011: CALL_OW 251
76015: PPUSH
76016: LD_VAR 0 10
76020: PPUSH
76021: LD_VAR 0 5
76025: PPUSH
76026: CALL_OW 273
76030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76031: LD_VAR 0 8
76035: PPUSH
76036: LD_VAR 0 9
76040: PPUSH
76041: CALL_OW 488
76045: NOT
76046: IFFALSE 76050
// exit ;
76048: GO 76157
// ComAnimCustom ( unit , 1 ) ;
76050: LD_VAR 0 1
76054: PPUSH
76055: LD_INT 1
76057: PPUSH
76058: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
76062: LD_VAR 0 8
76066: PPUSH
76067: LD_VAR 0 9
76071: PPUSH
76072: LD_VAR 0 6
76076: PPUSH
76077: LD_VAR 0 7
76081: PPUSH
76082: CALL_OW 330
// repeat wait ( 1 ) ;
76086: LD_INT 1
76088: PPUSH
76089: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
76093: LD_VAR 0 1
76097: PPUSH
76098: CALL_OW 316
76102: PUSH
76103: LD_VAR 0 1
76107: PPUSH
76108: CALL_OW 314
76112: OR
76113: PUSH
76114: LD_VAR 0 1
76118: PPUSH
76119: CALL_OW 302
76123: NOT
76124: OR
76125: PUSH
76126: LD_VAR 0 1
76130: PPUSH
76131: CALL_OW 301
76135: OR
76136: IFFALSE 76086
// RemoveSeeing ( _x , _y , side ) ;
76138: LD_VAR 0 8
76142: PPUSH
76143: LD_VAR 0 9
76147: PPUSH
76148: LD_VAR 0 6
76152: PPUSH
76153: CALL_OW 331
// end ; end_of_file
76157: LD_VAR 0 4
76161: RET
