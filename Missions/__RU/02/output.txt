// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// CreateNature ;
  28: CALL 16596 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6956 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4115 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4115 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4115 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4115 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4115 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4115 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4115 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5354 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4967 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4115 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4115 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4115 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareBunkiers ;
2882: CALL 3485 0 0
// PrepareTrap ;
2886: CALL 2895 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker , animal ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
3491: PPUSH
// for animal in FilterUnitsInArea ( LeftHillArea , [ [ f_side , 0 ] ] ) do
3492: LD_ADDR_VAR 0 5
3496: PUSH
3497: LD_INT 17
3499: PPUSH
3500: LD_INT 22
3502: PUSH
3503: LD_INT 0
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3532
// RemoveUnit ( animal ) ;
3521: LD_VAR 0 5
3525: PPUSH
3526: CALL_OW 64
3530: GO 3518
3532: POP
3533: POP
// uc_side = 1 ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// uc_nation = nation_american ;
3542: LD_ADDR_OWVAR 21
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// bc_level = 1 ;
3550: LD_ADDR_OWVAR 43
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// bc_type = b_breastwork ;
3558: LD_ADDR_OWVAR 42
3562: PUSH
3563: LD_INT 31
3565: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_INT 104
3573: PPUSH
3574: LD_INT 59
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: CALL_OW 47
3584: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3585: LD_ADDR_EXP 82
3589: PUSH
3590: LD_EXP 82
3594: PUSH
3595: LD_VAR 0 4
3599: ADD
3600: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3601: LD_EXP 59
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL 5208 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 101
3622: PPUSH
3623: LD_INT 55
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: CALL_OW 47
3633: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3634: LD_ADDR_EXP 82
3638: PUSH
3639: LD_EXP 82
3643: PUSH
3644: LD_VAR 0 4
3648: ADD
3649: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3650: LD_EXP 59
3654: PPUSH
3655: LD_VAR 0 4
3659: PPUSH
3660: CALL 5208 0 2
// for animal in FilterUnitsInArea ( RightHillArea , [ [ f_side , 0 ] ] ) do
3664: LD_ADDR_VAR 0 5
3668: PUSH
3669: LD_INT 16
3671: PPUSH
3672: LD_INT 22
3674: PUSH
3675: LD_INT 0
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: PPUSH
3685: CALL_OW 70
3689: PUSH
3690: FOR_IN
3691: IFFALSE 3704
// RemoveUnit ( animal ) ;
3693: LD_VAR 0 5
3697: PPUSH
3698: CALL_OW 64
3702: GO 3690
3704: POP
3705: POP
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3706: LD_ADDR_VAR 0 4
3710: PUSH
3711: LD_INT 132
3713: PPUSH
3714: LD_INT 62
3716: PPUSH
3717: LD_INT 1
3719: PPUSH
3720: CALL_OW 47
3724: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3725: LD_ADDR_EXP 83
3729: PUSH
3730: LD_EXP 83
3734: PUSH
3735: LD_VAR 0 4
3739: ADD
3740: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3741: LD_EXP 59
3745: PPUSH
3746: LD_VAR 0 4
3750: PPUSH
3751: CALL 5208 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3755: LD_ADDR_VAR 0 4
3759: PUSH
3760: LD_INT 134
3762: PPUSH
3763: LD_INT 66
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 47
3773: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3774: LD_ADDR_EXP 83
3778: PUSH
3779: LD_EXP 83
3783: PUSH
3784: LD_VAR 0 4
3788: ADD
3789: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3790: LD_EXP 59
3794: PPUSH
3795: LD_VAR 0 4
3799: PPUSH
3800: CALL 5208 0 2
// bc_type = b_depot ;
3804: LD_ADDR_OWVAR 42
3808: PUSH
3809: LD_INT 0
3811: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3812: LD_ADDR_EXP 84
3816: PUSH
3817: LD_INT 92
3819: PPUSH
3820: LD_INT 51
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 47
3830: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3831: LD_ADDR_EXP 85
3835: PUSH
3836: LD_INT 193
3838: ST_TO_ADDR
// amLeftEngs = [ ] ;
3839: LD_ADDR_EXP 86
3843: PUSH
3844: EMPTY
3845: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3846: LD_ADDR_VAR 0 2
3850: PUSH
3851: DOUBLE
3852: LD_INT 1
3854: DEC
3855: ST_TO_ADDR
3856: LD_INT 1
3858: PUSH
3859: LD_INT 1
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 12
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: LD_OWVAR 67
3882: ARRAY
3883: PUSH
3884: FOR_TO
3885: IFFALSE 3976
// begin uc_nation = 1 ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// uc_side = 1 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// hc_gallery =  ;
3903: LD_ADDR_OWVAR 33
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// hc_name =  ;
3911: LD_ADDR_OWVAR 26
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3919: LD_INT 0
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_EXP 59
3929: PPUSH
3930: CALL_OW 380
// un = CreateHuman ;
3934: LD_ADDR_VAR 0 3
3938: PUSH
3939: CALL_OW 44
3943: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3944: LD_ADDR_EXP 86
3948: PUSH
3949: LD_EXP 86
3953: PUSH
3954: LD_VAR 0 3
3958: ADD
3959: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3960: LD_VAR 0 3
3964: PPUSH
3965: LD_EXP 84
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3884
3976: POP
3977: POP
// if Difficulty = 3 then
3978: LD_OWVAR 67
3982: PUSH
3983: LD_INT 3
3985: EQUAL
3986: IFFALSE 4110
// begin amRightEngs = [ ] ;
3988: LD_ADDR_EXP 87
3992: PUSH
3993: EMPTY
3994: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 1
4007: PPUSH
4008: LD_INT 2
4010: PPUSH
4011: CALL_OW 12
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4108
// begin uc_nation = 1 ;
4019: LD_ADDR_OWVAR 21
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// uc_side = 1 ;
4027: LD_ADDR_OWVAR 20
4031: PUSH
4032: LD_INT 1
4034: ST_TO_ADDR
// hc_gallery =  ;
4035: LD_ADDR_OWVAR 33
4039: PUSH
4040: LD_STRING 
4042: ST_TO_ADDR
// hc_name =  ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING 
4050: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
4051: LD_INT 0
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: LD_EXP 59
4061: PPUSH
4062: CALL_OW 380
// un = CreateHuman ;
4066: LD_ADDR_VAR 0 3
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
4076: LD_ADDR_EXP 87
4080: PUSH
4081: LD_EXP 87
4085: PUSH
4086: LD_VAR 0 3
4090: ADD
4091: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_EXP 85
4101: PPUSH
4102: CALL_OW 52
// end ;
4106: GO 4016
4108: POP
4109: POP
// end ; end ; end_of_file
4110: LD_VAR 0 1
4114: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4115: LD_INT 0
4117: PPUSH
4118: PPUSH
// if exist_mode then
4119: LD_VAR 0 2
4123: IFFALSE 4148
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4125: LD_ADDR_VAR 0 4
4129: PUSH
4130: LD_EXP 49
4134: PUSH
4135: LD_VAR 0 1
4139: STR
4140: PPUSH
4141: CALL_OW 34
4145: ST_TO_ADDR
4146: GO 4163
// unit := NewCharacter ( ident ) ;
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_VAR 0 1
4157: PPUSH
4158: CALL_OW 25
4162: ST_TO_ADDR
// result := unit ;
4163: LD_ADDR_VAR 0 3
4167: PUSH
4168: LD_VAR 0 4
4172: ST_TO_ADDR
// end ;
4173: LD_VAR 0 3
4177: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4178: LD_INT 0
4180: PPUSH
4181: PPUSH
4182: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4183: LD_ADDR_VAR 0 1
4187: PUSH
4188: LD_VAR 0 1
4192: PUSH
4193: LD_EXP 62
4197: PUSH
4198: LD_EXP 63
4202: PUSH
4203: LD_EXP 64
4207: PUSH
4208: LD_EXP 65
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: DIFF
4219: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: PPUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 12
4242: ARRAY
4243: ST_TO_ADDR
// if radio then
4244: LD_VAR 0 4
4248: IFFALSE 4297
// begin if GetSex ( speaker ) = sex_male then
4250: LD_VAR 0 7
4254: PPUSH
4255: CALL_OW 258
4259: PUSH
4260: LD_INT 1
4262: EQUAL
4263: IFFALSE 4281
// SayRadio ( speaker , dialogMID ) else
4265: LD_VAR 0 7
4269: PPUSH
4270: LD_VAR 0 2
4274: PPUSH
4275: CALL_OW 94
4279: GO 4295
// SayRadio ( speaker , dialogFID ) ;
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_VAR 0 3
4290: PPUSH
4291: CALL_OW 94
// end else
4295: GO 4342
// begin if GetSex ( speaker ) = sex_male then
4297: LD_VAR 0 7
4301: PPUSH
4302: CALL_OW 258
4306: PUSH
4307: LD_INT 1
4309: EQUAL
4310: IFFALSE 4328
// Say ( speaker , dialogMID ) else
4312: LD_VAR 0 7
4316: PPUSH
4317: LD_VAR 0 2
4321: PPUSH
4322: CALL_OW 88
4326: GO 4342
// Say ( speaker , dialogFID ) ;
4328: LD_VAR 0 7
4332: PPUSH
4333: LD_VAR 0 3
4337: PPUSH
4338: CALL_OW 88
// end ; result := speaker ;
4342: LD_ADDR_VAR 0 5
4346: PUSH
4347: LD_VAR 0 7
4351: ST_TO_ADDR
// end ;
4352: LD_VAR 0 5
4356: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4357: LD_INT 0
4359: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 255
4369: PUSH
4370: LD_VAR 0 3
4374: EQUAL
4375: PUSH
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 302
4385: AND
4386: IFFALSE 4408
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4388: LD_VAR 0 1
4392: PPUSH
4393: LD_EXP 48
4397: PUSH
4398: LD_VAR 0 2
4402: STR
4403: PPUSH
4404: CALL_OW 38
// end ;
4408: LD_VAR 0 4
4412: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4413: LD_INT 0
4415: PPUSH
4416: PPUSH
4417: PPUSH
// resultCharactersToSave = [ ] ;
4418: LD_ADDR_VAR 0 6
4422: PUSH
4423: EMPTY
4424: ST_TO_ADDR
// for unit in characters do
4425: LD_ADDR_VAR 0 5
4429: PUSH
4430: LD_VAR 0 1
4434: PUSH
4435: FOR_IN
4436: IFFALSE 4484
// if GetSide ( unit ) = side and IsOK ( unit ) then
4438: LD_VAR 0 5
4442: PPUSH
4443: CALL_OW 255
4447: PUSH
4448: LD_VAR 0 3
4452: EQUAL
4453: PUSH
4454: LD_VAR 0 5
4458: PPUSH
4459: CALL_OW 302
4463: AND
4464: IFFALSE 4482
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 6
4475: PUSH
4476: LD_VAR 0 5
4480: ADD
4481: ST_TO_ADDR
4482: GO 4435
4484: POP
4485: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4486: LD_VAR 0 6
4490: PPUSH
4491: LD_EXP 48
4495: PUSH
4496: LD_VAR 0 2
4500: STR
4501: PPUSH
4502: CALL_OW 38
// end ;
4506: LD_VAR 0 4
4510: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_STRING QMoreInfo
4523: PPUSH
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 98
4533: ST_TO_ADDR
// case dec of 1 :
4534: LD_VAR 0 3
4538: PUSH
4539: LD_INT 1
4541: DOUBLE
4542: EQUAL
4543: IFTRUE 4547
4545: GO 4607
4547: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4548: LD_EXP 62
4552: PPUSH
4553: LD_STRING D2a-Bur-1
4555: PPUSH
4556: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4560: LD_EXP 76
4564: PPUSH
4565: LD_STRING D2a-Pla-1
4567: PPUSH
4568: CALL_OW 88
// q1 = q diff 1 ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_VAR 0 1
4581: PUSH
4582: LD_INT 1
4584: DIFF
4585: ST_TO_ADDR
// if q1 >= 2 then
4586: LD_VAR 0 4
4590: PUSH
4591: LD_INT 2
4593: GREATEREQUAL
4594: IFFALSE 4605
// Question1 ( q1 ) ;
4596: LD_VAR 0 4
4600: PPUSH
4601: CALL 4511 0 1
// end ; 2 :
4605: GO 4744
4607: LD_INT 2
4609: DOUBLE
4610: EQUAL
4611: IFTRUE 4615
4613: GO 4675
4615: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4616: LD_EXP 62
4620: PPUSH
4621: LD_STRING D2b-Bur-1
4623: PPUSH
4624: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4628: LD_EXP 76
4632: PPUSH
4633: LD_STRING D2b-Pla-1
4635: PPUSH
4636: CALL_OW 88
// q1 = q diff 2 ;
4640: LD_ADDR_VAR 0 4
4644: PUSH
4645: LD_VAR 0 1
4649: PUSH
4650: LD_INT 2
4652: DIFF
4653: ST_TO_ADDR
// if q1 >= 2 then
4654: LD_VAR 0 4
4658: PUSH
4659: LD_INT 2
4661: GREATEREQUAL
4662: IFFALSE 4673
// Question1 ( q1 ) ;
4664: LD_VAR 0 4
4668: PPUSH
4669: CALL 4511 0 1
// end ; 3 :
4673: GO 4744
4675: LD_INT 3
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4743
4683: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4684: LD_EXP 62
4688: PPUSH
4689: LD_STRING D2c-Bur-1
4691: PPUSH
4692: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4696: LD_EXP 76
4700: PPUSH
4701: LD_STRING D2c-Pla-1
4703: PPUSH
4704: CALL_OW 88
// q1 = q diff 3 ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 1
4717: PUSH
4718: LD_INT 3
4720: DIFF
4721: ST_TO_ADDR
// if q1 >= 2 then
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 2
4729: GREATEREQUAL
4730: IFFALSE 4741
// Question1 ( q1 ) ;
4732: LD_VAR 0 4
4736: PPUSH
4737: CALL 4511 0 1
// end ; end ;
4741: GO 4744
4743: POP
// end ;
4744: LD_VAR 0 2
4748: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL_OW 302
4762: NOT
4763: PUSH
4764: LD_VAR 0 2
4768: PPUSH
4769: CALL_OW 302
4773: NOT
4774: OR
4775: PUSH
4776: LD_VAR 0 3
4780: PPUSH
4781: CALL_OW 302
4785: NOT
4786: OR
4787: PUSH
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL_OW 261
4797: PUSH
4798: LD_INT 100
4800: EQUAL
4801: OR
4802: PUSH
4803: LD_VAR 0 2
4807: PPUSH
4808: CALL_OW 266
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: IN
4823: NOT
4824: OR
4825: IFFALSE 4829
// exit ;
4827: GO 4962
// AddComTransport ( engineer , depot , mat_oil ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: LD_INT 2
4841: PPUSH
4842: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4846: LD_INT 35
4848: PPUSH
4849: CALL_OW 67
// until Carry ( engineer ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: CALL_OW 281
4862: IFFALSE 4846
// RemoveTasks ( engineer ) ;
4864: LD_VAR 0 1
4868: PPUSH
4869: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_STRING O
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 0
4894: PUSH
4895: LD_INT 0
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: PPUSH
4913: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// until not Carry ( engineer ) ;
4924: LD_VAR 0 1
4928: PPUSH
4929: CALL_OW 281
4933: NOT
4934: IFFALSE 4917
// SetFuel ( vehicle , 100 ) ;
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 100
4943: PPUSH
4944: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4948: LD_VAR 0 1
4952: PPUSH
4953: LD_VAR 0 2
4957: PPUSH
4958: CALL_OW 180
// end ;
4962: LD_VAR 0 4
4966: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4967: LD_INT 0
4969: PPUSH
4970: PPUSH
4971: PPUSH
4972: PPUSH
4973: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4974: LD_ADDR_VAR 0 8
4978: PUSH
4979: LD_INT 48
4981: PUSH
4982: LD_INT 49
4984: PUSH
4985: LD_INT 50
4987: PUSH
4988: LD_INT 20
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 51
4996: PUSH
4997: LD_INT 52
4999: PUSH
5000: LD_INT 69
5002: PUSH
5003: LD_INT 39
5005: PUSH
5006: LD_INT 34
5008: PUSH
5009: LD_INT 40
5011: PUSH
5012: LD_INT 53
5014: PUSH
5015: LD_INT 71
5017: PUSH
5018: LD_INT 57
5020: PUSH
5021: LD_INT 58
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 32
5029: PUSH
5030: LD_INT 27
5032: PUSH
5033: LD_INT 23
5035: PUSH
5036: LD_INT 33
5038: PUSH
5039: LD_INT 59
5041: PUSH
5042: LD_INT 54
5044: PUSH
5045: LD_INT 55
5047: PUSH
5048: LD_INT 56
5050: PUSH
5051: LD_INT 63
5053: PUSH
5054: LD_INT 64
5056: PUSH
5057: LD_INT 65
5059: PUSH
5060: LD_INT 30
5062: PUSH
5063: LD_INT 31
5065: PUSH
5066: LD_INT 21
5068: PUSH
5069: LD_INT 22
5071: PUSH
5072: LD_INT 25
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5109: LD_ADDR_VAR 0 5
5113: PUSH
5114: DOUBLE
5115: LD_INT 1
5117: DEC
5118: ST_TO_ADDR
5119: LD_VAR 0 8
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5201
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5127: LD_VAR 0 8
5131: PUSH
5132: LD_VAR 0 5
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 1
5142: PPUSH
5143: CALL_OW 321
5147: PUSH
5148: LD_INT 1
5150: EQUAL
5151: PUSH
5152: LD_VAR 0 8
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: LD_VAR 0 3
5167: PPUSH
5168: CALL_OW 482
5172: PUSH
5173: LD_INT 1
5175: EQUAL
5176: AND
5177: IFFALSE 5199
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5179: LD_VAR 0 2
5183: PPUSH
5184: LD_VAR 0 8
5188: PUSH
5189: LD_VAR 0 5
5193: ARRAY
5194: PPUSH
5195: CALL_OW 184
5199: GO 5124
5201: POP
5202: POP
// end ;
5203: LD_VAR 0 4
5207: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
5212: PPUSH
// uc_side := GetSide ( b ) ;
5213: LD_ADDR_OWVAR 20
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: CALL_OW 255
5227: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5228: LD_ADDR_OWVAR 21
5232: PUSH
5233: LD_VAR 0 2
5237: PPUSH
5238: CALL_OW 248
5242: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 1
5248: PPUSH
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 380
// un = CreateHuman ;
5258: LD_ADDR_VAR 0 4
5262: PUSH
5263: CALL_OW 44
5267: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 254
5282: PUSH
5283: LD_INT 3
5285: MINUS
5286: ST_TO_ADDR
// if dir < 0 then
5287: LD_VAR 0 5
5291: PUSH
5292: LD_INT 0
5294: LESS
5295: IFFALSE 5311
// dir := 6 + dir ;
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_VAR 0 5
5309: PLUS
5310: ST_TO_ADDR
// SetDir ( un , dir ) ;
5311: LD_VAR 0 4
5315: PPUSH
5316: LD_VAR 0 5
5320: PPUSH
5321: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5325: LD_VAR 0 4
5329: PPUSH
5330: LD_VAR 0 2
5334: PPUSH
5335: CALL_OW 52
// result = un ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 4
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 3
5353: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5354: LD_INT 0
5356: PPUSH
5357: PPUSH
// dir := GetDir ( b ) - 3 ;
5358: LD_ADDR_VAR 0 4
5362: PUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 254
5372: PUSH
5373: LD_INT 3
5375: MINUS
5376: ST_TO_ADDR
// if dir < 0 then
5377: LD_VAR 0 4
5381: PUSH
5382: LD_INT 0
5384: LESS
5385: IFFALSE 5401
// dir := 6 + dir ;
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: LD_INT 6
5394: PUSH
5395: LD_VAR 0 4
5399: PLUS
5400: ST_TO_ADDR
// SetDir ( un , dir ) ;
5401: LD_VAR 0 1
5405: PPUSH
5406: LD_VAR 0 4
5410: PPUSH
5411: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5415: LD_VAR 0 1
5419: PPUSH
5420: LD_VAR 0 2
5424: PPUSH
5425: CALL_OW 52
// result = un ;
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_VAR 0 1
5438: ST_TO_ADDR
// end ;
5439: LD_VAR 0 3
5443: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5444: LD_INT 0
5446: PPUSH
5447: PPUSH
5448: PPUSH
// tmp = [ ] ;
5449: LD_ADDR_VAR 0 5
5453: PUSH
5454: EMPTY
5455: ST_TO_ADDR
// if not vehicles then
5456: LD_VAR 0 1
5460: NOT
5461: IFFALSE 5465
// exit ;
5463: GO 5582
// for i in vehicles do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PUSH
5475: FOR_IN
5476: IFFALSE 5566
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_VAR 0 5
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_VAR 0 4
5495: PPUSH
5496: CALL_OW 265
5500: PUSH
5501: LD_VAR 0 4
5505: PPUSH
5506: CALL_OW 262
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: CALL_OW 263
5520: PUSH
5521: LD_VAR 0 4
5525: PPUSH
5526: CALL_OW 264
5530: PUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 261
5540: PUSH
5541: LD_VAR 0 4
5545: PPUSH
5546: CALL_OW 256
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 2
5563: ST_TO_ADDR
5564: GO 5475
5566: POP
5567: POP
// SaveVariable ( tmp , ident ) ;
5568: LD_VAR 0 5
5572: PPUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 39
// end ;
5582: LD_VAR 0 3
5586: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5587: LD_INT 0
5589: PPUSH
5590: PPUSH
5591: PPUSH
// buildingsToSave = [ ] ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: EMPTY
5598: ST_TO_ADDR
// if not buildings then
5599: LD_VAR 0 1
5603: NOT
5604: IFFALSE 5608
// exit ;
5606: GO 6183
// for i in buildings do
5608: LD_ADDR_VAR 0 4
5612: PUSH
5613: LD_VAR 0 1
5617: PUSH
5618: FOR_IN
5619: IFFALSE 6167
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5621: LD_VAR 0 4
5625: PPUSH
5626: CALL_OW 266
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: LD_INT 7
5636: PUSH
5637: LD_INT 8
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: IN
5645: IFFALSE 5770
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5647: LD_ADDR_VAR 0 5
5651: PUSH
5652: LD_VAR 0 5
5656: PUSH
5657: LD_VAR 0 4
5661: PPUSH
5662: CALL_OW 266
5666: PUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 250
5676: PUSH
5677: LD_VAR 0 4
5681: PPUSH
5682: CALL_OW 251
5686: PUSH
5687: LD_VAR 0 4
5691: PPUSH
5692: CALL_OW 254
5696: PUSH
5697: LD_VAR 0 4
5701: PPUSH
5702: CALL_OW 267
5706: PUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: CALL_OW 248
5716: PUSH
5717: LD_VAR 0 4
5721: PPUSH
5722: CALL_OW 256
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 1
5734: PPUSH
5735: CALL_OW 268
5739: PUSH
5740: LD_VAR 0 4
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: CALL_OW 268
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: EMPTY
5765: LIST
5766: ADD
5767: ST_TO_ADDR
5768: GO 6165
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5770: LD_VAR 0 4
5774: PPUSH
5775: CALL_OW 266
5779: PUSH
5780: LD_INT 32
5782: PUSH
5783: LD_INT 33
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: IN
5790: IFFALSE 5898
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5792: LD_ADDR_VAR 0 5
5796: PUSH
5797: LD_VAR 0 5
5801: PUSH
5802: LD_VAR 0 4
5806: PPUSH
5807: CALL_OW 266
5811: PUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 250
5821: PUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 251
5831: PUSH
5832: LD_VAR 0 4
5836: PPUSH
5837: CALL_OW 254
5841: PUSH
5842: LD_VAR 0 4
5846: PPUSH
5847: CALL_OW 267
5851: PUSH
5852: LD_VAR 0 4
5856: PPUSH
5857: CALL_OW 248
5861: PUSH
5862: LD_VAR 0 4
5866: PPUSH
5867: CALL_OW 256
5871: PUSH
5872: LD_VAR 0 4
5876: PPUSH
5877: CALL_OW 269
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: ADD
5895: ST_TO_ADDR
5896: GO 6165
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5898: LD_VAR 0 4
5902: PPUSH
5903: CALL_OW 266
5907: PUSH
5908: LD_INT 0
5910: PUSH
5911: LD_INT 1
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: IN
5918: IFFALSE 6072
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5920: LD_ADDR_VAR 0 5
5924: PUSH
5925: LD_VAR 0 5
5929: PUSH
5930: LD_VAR 0 4
5934: PPUSH
5935: CALL_OW 266
5939: PUSH
5940: LD_VAR 0 4
5944: PPUSH
5945: CALL_OW 250
5949: PUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: CALL_OW 251
5959: PUSH
5960: LD_VAR 0 4
5964: PPUSH
5965: CALL_OW 254
5969: PUSH
5970: LD_VAR 0 4
5974: PPUSH
5975: CALL_OW 267
5979: PUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 248
5989: PUSH
5990: LD_VAR 0 4
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_VAR 0 4
6004: PPUSH
6005: CALL_OW 274
6009: PPUSH
6010: LD_INT 1
6012: PPUSH
6013: CALL_OW 275
6017: PUSH
6018: LD_VAR 0 4
6022: PPUSH
6023: CALL_OW 274
6027: PPUSH
6028: LD_INT 2
6030: PPUSH
6031: CALL_OW 275
6035: PUSH
6036: LD_VAR 0 4
6040: PPUSH
6041: CALL_OW 274
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: CALL_OW 275
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: ADD
6069: ST_TO_ADDR
6070: GO 6165
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: LD_VAR 0 5
6081: PUSH
6082: LD_VAR 0 4
6086: PPUSH
6087: CALL_OW 266
6091: PUSH
6092: LD_VAR 0 4
6096: PPUSH
6097: CALL_OW 250
6101: PUSH
6102: LD_VAR 0 4
6106: PPUSH
6107: CALL_OW 251
6111: PUSH
6112: LD_VAR 0 4
6116: PPUSH
6117: CALL_OW 254
6121: PUSH
6122: LD_VAR 0 4
6126: PPUSH
6127: CALL_OW 267
6131: PUSH
6132: LD_VAR 0 4
6136: PPUSH
6137: CALL_OW 248
6141: PUSH
6142: LD_VAR 0 4
6146: PPUSH
6147: CALL_OW 256
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: ADD
6164: ST_TO_ADDR
// end ;
6165: GO 5618
6167: POP
6168: POP
// SaveVariable ( buildingsToSave , ident ) ;
6169: LD_VAR 0 5
6173: PPUSH
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 39
// end ;
6183: LD_VAR 0 3
6187: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6188: LD_INT 0
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
// belkovTeam = [ ] ;
6195: LD_ADDR_EXP 73
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// if belkovReturn then
6202: LD_EXP 6
6206: IFFALSE 6224
// belkovTeam = belkovTeam ^ Belkov ;
6208: LD_ADDR_EXP 73
6212: PUSH
6213: LD_EXP 73
6217: PUSH
6218: LD_EXP 64
6222: ADD
6223: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6224: LD_ADDR_EXP 73
6228: PUSH
6229: LD_EXP 73
6233: PUSH
6234: LD_EXP 68
6238: ADD
6239: ST_TO_ADDR
// for unit in other_survivors do
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: LD_EXP 66
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6292
// if IsOK ( unit ) and belkovTeam < 5 then
6253: LD_VAR 0 3
6257: PPUSH
6258: CALL_OW 302
6262: PUSH
6263: LD_EXP 73
6267: PUSH
6268: LD_INT 5
6270: LESS
6271: AND
6272: IFFALSE 6290
// belkovTeam = belkovTeam ^ unit ;
6274: LD_ADDR_EXP 73
6278: PUSH
6279: LD_EXP 73
6283: PUSH
6284: LD_VAR 0 3
6288: ADD
6289: ST_TO_ADDR
6290: GO 6250
6292: POP
6293: POP
// if belkovTeam < 5 then
6294: LD_EXP 73
6298: PUSH
6299: LD_INT 5
6301: LESS
6302: IFFALSE 6428
// begin restRandSolds = 5 - belkovTeam ;
6304: LD_ADDR_VAR 0 4
6308: PUSH
6309: LD_INT 5
6311: PUSH
6312: LD_EXP 73
6316: MINUS
6317: ST_TO_ADDR
// for i := 1 to restRandSolds do
6318: LD_ADDR_VAR 0 2
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6426
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_EXP 69
6345: PPUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: PPUSH
6359: CALL_OW 72
6363: PUSH
6364: LD_EXP 67
6368: DIFF
6369: PUSH
6370: FOR_IN
6371: IFFALSE 6422
// if not unit in belkovTeam then
6373: LD_VAR 0 3
6377: PUSH
6378: LD_EXP 73
6382: IN
6383: NOT
6384: IFFALSE 6420
// begin belkovTeam = belkovTeam ^ unit ;
6386: LD_ADDR_EXP 73
6390: PUSH
6391: LD_EXP 73
6395: PUSH
6396: LD_VAR 0 3
6400: ADD
6401: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6402: LD_ADDR_EXP 69
6406: PUSH
6407: LD_EXP 69
6411: PUSH
6412: LD_VAR 0 3
6416: DIFF
6417: ST_TO_ADDR
// break ;
6418: GO 6422
// end ;
6420: GO 6370
6422: POP
6423: POP
6424: GO 6333
6426: POP
6427: POP
// end ; tmp = belkovTeam diff Belkov ;
6428: LD_ADDR_VAR 0 5
6432: PUSH
6433: LD_EXP 73
6437: PUSH
6438: LD_EXP 64
6442: DIFF
6443: ST_TO_ADDR
// if tmp < 4 then
6444: LD_VAR 0 5
6448: PUSH
6449: LD_INT 4
6451: LESS
6452: IFFALSE 6536
// begin for i := 1 to 4 - tmp do
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: DOUBLE
6460: LD_INT 1
6462: DEC
6463: ST_TO_ADDR
6464: LD_INT 4
6466: PUSH
6467: LD_VAR 0 5
6471: MINUS
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6534
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6476: LD_INT 0
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 2
6484: PPUSH
6485: CALL_OW 12
6489: PPUSH
6490: CALL_OW 381
// unit = CreateHuman ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: CALL_OW 44
6503: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6504: LD_ADDR_EXP 73
6508: PUSH
6509: LD_EXP 73
6513: PUSH
6514: LD_VAR 0 3
6518: ADD
6519: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6520: LD_VAR 0 3
6524: PPUSH
6525: LD_INT 209
6527: PPUSH
6528: CALL_OW 52
// end ;
6532: GO 6473
6534: POP
6535: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6536: LD_STRING 01_Kirilenkova
6538: PPUSH
6539: CALL_OW 28
6543: IFFALSE 6563
// belkovTeam = belkovTeam ^ Kirilenkova else
6545: LD_ADDR_EXP 73
6549: PUSH
6550: LD_EXP 73
6554: PUSH
6555: LD_EXP 65
6559: ADD
6560: ST_TO_ADDR
6561: GO 6639
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6563: LD_ADDR_EXP 73
6567: PUSH
6568: LD_EXP 73
6572: PUSH
6573: LD_EXP 69
6577: PPUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: PPUSH
6591: CALL_OW 72
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: ADD
6600: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6601: LD_ADDR_EXP 69
6605: PUSH
6606: LD_EXP 69
6610: PUSH
6611: LD_EXP 69
6615: PPUSH
6616: LD_INT 25
6618: PUSH
6619: LD_INT 4
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: PPUSH
6629: CALL_OW 72
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: DIFF
6638: ST_TO_ADDR
// end ; end ;
6639: LD_VAR 0 1
6643: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6648: LD_EXP 78
6652: NOT
6653: PUSH
6654: LD_EXP 78
6658: PPUSH
6659: CALL_OW 302
6663: NOT
6664: OR
6665: IFFALSE 6768
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_EXP 77
6676: PPUSH
6677: LD_INT 50
6679: PUSH
6680: EMPTY
6681: LIST
6682: PPUSH
6683: CALL_OW 72
6687: PUSH
6688: LD_EXP 79
6692: DIFF
6693: ST_TO_ADDR
// if soldsOK then
6694: LD_VAR 0 2
6698: IFFALSE 6768
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6700: LD_VAR 0 2
6704: PUSH
6705: LD_INT 1
6707: ARRAY
6708: PPUSH
6709: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6713: LD_VAR 0 2
6717: PUSH
6718: LD_INT 1
6720: ARRAY
6721: PPUSH
6722: LD_INT 112
6724: PPUSH
6725: LD_INT 96
6727: PPUSH
6728: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6732: LD_VAR 0 2
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: PPUSH
6741: LD_INT 3
6743: PPUSH
6744: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6748: LD_ADDR_EXP 77
6752: PUSH
6753: LD_EXP 77
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 1
6765: ARRAY
6766: DIFF
6767: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6768: LD_EXP 79
6772: NOT
6773: PUSH
6774: LD_EXP 79
6778: PPUSH
6779: CALL_OW 302
6783: NOT
6784: OR
6785: IFFALSE 6888
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 77
6796: PPUSH
6797: LD_INT 50
6799: PUSH
6800: EMPTY
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_EXP 78
6812: DIFF
6813: ST_TO_ADDR
// if soldsOK then
6814: LD_VAR 0 2
6818: IFFALSE 6888
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 1
6827: ARRAY
6828: PPUSH
6829: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: PPUSH
6842: LD_INT 112
6844: PPUSH
6845: LD_INT 96
6847: PPUSH
6848: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 1
6859: ARRAY
6860: PPUSH
6861: LD_INT 3
6863: PPUSH
6864: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6868: LD_ADDR_EXP 77
6872: PUSH
6873: LD_EXP 77
6877: PUSH
6878: LD_VAR 0 2
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: DIFF
6887: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6888: LD_EXP 78
6892: PUSH
6893: LD_EXP 79
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6906: LD_EXP 78
6910: PUSH
6911: LD_EXP 79
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: LD_INT 112
6922: PPUSH
6923: LD_INT 96
6925: PPUSH
6926: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6930: LD_EXP 78
6934: PUSH
6935: LD_EXP 79
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: LD_INT 3
6946: PPUSH
6947: CALL_OW 235
// end ; end_of_file
6951: LD_VAR 0 1
6955: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6962: LD_EXP 62
6966: PPUSH
6967: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6971: LD_EXP 62
6975: PPUSH
6976: LD_INT 163
6978: PPUSH
6979: LD_INT 108
6981: PPUSH
6982: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6986: LD_EXP 62
6990: PPUSH
6991: LD_EXP 67
6995: PPUSH
6996: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 21
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: PUSH
7034: LD_EXP 62
7038: DIFF
7039: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_EXP 52
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7174
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_EXP 52
7072: PUSH
7073: LD_VAR 0 4
7077: ARRAY
7078: PUSH
7079: LD_INT 1
7081: ARRAY
7082: PPUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_VAR 0 4
7092: ARRAY
7093: PUSH
7094: LD_INT 2
7096: ARRAY
7097: PPUSH
7098: CALL_OW 73
7102: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_EXP 52
7112: PUSH
7113: LD_VAR 0 4
7117: ARRAY
7118: PUSH
7119: LD_INT 1
7121: ARRAY
7122: PPUSH
7123: LD_EXP 52
7127: PUSH
7128: LD_VAR 0 4
7132: ARRAY
7133: PUSH
7134: LD_INT 2
7136: ARRAY
7137: PPUSH
7138: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7142: LD_VAR 0 3
7146: PPUSH
7147: LD_EXP 67
7151: PPUSH
7152: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_VAR 0 2
7165: PUSH
7166: LD_VAR 0 3
7170: DIFF
7171: ST_TO_ADDR
// end ;
7172: GO 7055
7174: POP
7175: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7176: LD_EXP 62
7180: PPUSH
7181: CALL_OW 87
// wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7192: LD_EXP 62
7196: PPUSH
7197: LD_EXP 67
7201: PPUSH
7202: CALL_OW 296
7206: PUSH
7207: LD_INT 4
7209: LESS
7210: IFFALSE 7176
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7212: LD_EXP 62
7216: PUSH
7217: LD_EXP 67
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PPUSH
7226: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7230: LD_EXP 67
7234: PPUSH
7235: LD_EXP 62
7239: PPUSH
7240: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7244: LD_EXP 67
7248: PPUSH
7249: LD_STRING D1-Kur-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7256: LD_EXP 62
7260: PPUSH
7261: LD_STRING D1-Bur-1
7263: PPUSH
7264: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7268: LD_EXP 67
7272: PPUSH
7273: LD_STRING D1-Kur-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7280: LD_EXP 62
7284: PPUSH
7285: LD_STRING D1-Bur-2
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7292: LD_EXP 67
7296: PPUSH
7297: LD_STRING D1-Kur-3
7299: PPUSH
7300: CALL_OW 88
// if IsOK ( Gnyevko ) then
7304: LD_EXP 63
7308: PPUSH
7309: CALL_OW 302
7313: IFFALSE 7327
// Say ( Kurin , D1-Kur-3a ) ;
7315: LD_EXP 67
7319: PPUSH
7320: LD_STRING D1-Kur-3a
7322: PPUSH
7323: CALL_OW 88
// InGameOff ;
7327: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7331: LD_INT 22
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 69
7359: PUSH
7360: LD_EXP 62
7364: PUSH
7365: LD_EXP 63
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: DIFF
7374: PPUSH
7375: LD_INT 6
7377: PPUSH
7378: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7382: LD_EXP 70
7386: PPUSH
7387: LD_INT 3
7389: PPUSH
7390: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7394: LD_INT 9
7396: PPUSH
7397: LD_INT 22
7399: PUSH
7400: LD_INT 6
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 1
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PPUSH
7421: CALL_OW 70
7425: PUSH
7426: LD_EXP 67
7430: DIFF
7431: PPUSH
7432: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7436: LD_EXP 66
7440: PPUSH
7441: LD_INT 95
7443: PPUSH
7444: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7448: LD_EXP 64
7452: PPUSH
7453: LD_INT 95
7455: PPUSH
7456: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7460: LD_EXP 65
7464: PPUSH
7465: CALL_OW 305
7469: IFFALSE 7483
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7471: LD_EXP 65
7475: PPUSH
7476: LD_INT 83
7478: PPUSH
7479: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7483: LD_STRING 01_Gnyevko
7485: PPUSH
7486: CALL_OW 28
7490: NOT
7491: IFFALSE 7505
// SetSide ( randomMech , 3 ) ;
7493: LD_EXP 71
7497: PPUSH
7498: LD_INT 3
7500: PPUSH
7501: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7505: LD_STRING M1
7507: PPUSH
7508: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7512: LD_INT 3
7514: PPUSH
7515: LD_INT 6
7517: PPUSH
7518: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7522: LD_INT 3
7524: PPUSH
7525: LD_INT 7
7527: PPUSH
7528: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7532: LD_INT 6
7534: PPUSH
7535: LD_INT 6
7537: PPUSH
7538: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7542: LD_INT 6
7544: PPUSH
7545: LD_INT 7
7547: PPUSH
7548: CALL_OW 334
// SaveForQuickRestart ;
7552: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7556: LD_EXP 66
7560: PPUSH
7561: LD_INT 95
7563: PPUSH
7564: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7568: LD_EXP 64
7572: PPUSH
7573: LD_INT 95
7575: PPUSH
7576: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7580: LD_EXP 65
7584: PPUSH
7585: CALL_OW 305
7589: IFFALSE 7603
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7591: LD_EXP 65
7595: PPUSH
7596: LD_INT 83
7598: PPUSH
7599: CALL_OW 120
// end ;
7603: LD_VAR 0 1
7607: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7608: LD_EXP 20
7612: NOT
7613: PUSH
7614: LD_INT 20
7616: PPUSH
7617: LD_INT 22
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 1
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PPUSH
7659: CALL_OW 70
7663: PUSH
7664: LD_INT 0
7666: GREATER
7667: AND
7668: IFFALSE 8042
7670: GO 7672
7672: DISABLE
7673: LD_INT 0
7675: PPUSH
// begin enable ;
7676: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7677: LD_ADDR_VAR 0 1
7681: PUSH
7682: LD_INT 20
7684: PPUSH
7685: LD_INT 22
7687: PUSH
7688: LD_INT 3
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 21
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 21
7710: PUSH
7711: LD_INT 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PPUSH
7727: CALL_OW 70
7731: PUSH
7732: FOR_IN
7733: IFFALSE 8019
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 250
7749: PPUSH
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 251
7759: PUSH
7760: LD_INT 5
7762: PLUS
7763: PPUSH
7764: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7768: LD_EXP 7
7772: NOT
7773: PUSH
7774: LD_EXP 33
7778: NOT
7779: AND
7780: IFFALSE 7843
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7782: LD_VAR 0 1
7786: PUSH
7787: LD_EXP 62
7791: NONEQUAL
7792: PUSH
7793: LD_EXP 70
7797: PPUSH
7798: CALL_OW 302
7802: AND
7803: IFFALSE 7817
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7805: LD_EXP 70
7809: PPUSH
7810: LD_STRING D1b-Kov-1
7812: PPUSH
7813: CALL_OW 88
// if unit = Burlak then
7817: LD_VAR 0 1
7821: PUSH
7822: LD_EXP 62
7826: EQUAL
7827: IFFALSE 7841
// Say ( Burlak , D1b-Bur-1 ) ;
7829: LD_EXP 62
7833: PPUSH
7834: LD_STRING D1b-Bur-1
7836: PPUSH
7837: CALL_OW 88
// end else
7841: GO 7862
// if not dialogLoopBlocker then
7843: LD_EXP 33
7847: NOT
7848: IFFALSE 7862
// Say ( Platonov , D8-Pla-1 ) ;
7850: LD_EXP 76
7854: PPUSH
7855: LD_STRING D8-Pla-1
7857: PPUSH
7858: CALL_OW 88
// if not dialogLoopBlocker then
7862: LD_EXP 33
7866: NOT
7867: IFFALSE 7877
// dialogLoopBlocker = true ;
7869: LD_ADDR_EXP 33
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7877: LD_INT 20
7879: PPUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 70
7926: PPUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 250
7936: PPUSH
7937: LD_VAR 0 1
7941: PPUSH
7942: CALL_OW 251
7946: PUSH
7947: LD_INT 5
7949: PLUS
7950: PPUSH
7951: CALL_OW 111
// wait ( 0 0$1 ) ;
7955: LD_INT 35
7957: PPUSH
7958: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7962: LD_INT 20
7964: PPUSH
7965: LD_INT 22
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 2
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PPUSH
8007: CALL_OW 70
8011: PUSH
8012: LD_INT 0
8014: EQUAL
8015: IFFALSE 7877
// end ;
8017: GO 7732
8019: POP
8020: POP
// if dialogLoopBlocker then
8021: LD_EXP 33
8025: IFFALSE 8042
// begin wait ( 0 0$5 ) ;
8027: LD_INT 175
8029: PPUSH
8030: CALL_OW 67
// dialogLoopBlocker = false ;
8034: LD_ADDR_EXP 33
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// end ; end ;
8042: PPOPN 1
8044: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
8045: LD_EXP 19
8049: NOT
8050: PUSH
8051: LD_INT 8
8053: PPUSH
8054: LD_INT 22
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 1
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 21
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 71
8100: PUSH
8101: LD_INT 0
8103: GREATER
8104: AND
8105: IFFALSE 8240
8107: GO 8109
8109: DISABLE
8110: LD_INT 0
8112: PPUSH
// begin enable ;
8113: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8114: LD_ADDR_VAR 0 1
8118: PUSH
8119: LD_INT 8
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 3
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 2
8134: PUSH
8135: LD_INT 21
8137: PUSH
8138: LD_INT 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 21
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 71
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8223
// begin ComMoveXY ( unit , 114 , 98 ) ;
8172: LD_VAR 0 1
8176: PPUSH
8177: LD_INT 114
8179: PPUSH
8180: LD_INT 98
8182: PPUSH
8183: CALL_OW 111
// if dialogLoopBlocker then
8187: LD_EXP 33
8191: IFFALSE 8197
// exit ;
8193: POP
8194: POP
8195: GO 8240
// dialogLoopBlocker = true ;
8197: LD_ADDR_EXP 33
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8205: LD_EXP 76
8209: PPUSH
8210: LD_STRING D8-Pla-1
8212: PPUSH
8213: CALL_OW 88
// exit ;
8217: POP
8218: POP
8219: GO 8240
// end ;
8221: GO 8169
8223: POP
8224: POP
// wait ( 0 0$5 ) ;
8225: LD_INT 175
8227: PPUSH
8228: CALL_OW 67
// dialogLoopBlocker = false ;
8232: LD_ADDR_EXP 33
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// end ;
8240: PPOPN 1
8242: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8243: LD_EXP 7
8247: NOT
8248: PUSH
8249: LD_INT 9
8251: PPUSH
8252: LD_INT 22
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 70
8280: PUSH
8281: LD_INT 0
8283: GREATER
8284: AND
8285: IFFALSE 8302
8287: GO 8289
8289: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8290: LD_EXP 67
8294: PPUSH
8295: LD_STRING D1a-Kur-1
8297: PPUSH
8298: CALL_OW 88
8302: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8303: LD_EXP 7
8307: NOT
8308: PUSH
8309: LD_EXP 62
8313: PPUSH
8314: CALL_OW 302
8318: AND
8319: PUSH
8320: LD_INT 29
8322: PPUSH
8323: LD_INT 22
8325: PUSH
8326: LD_INT 3
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 21
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 70
8351: PUSH
8352: LD_INT 0
8354: GREATER
8355: AND
8356: IFFALSE 8983
8358: GO 8360
8360: DISABLE
8361: LD_INT 0
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
8367: PPUSH
// begin enable ;
8368: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_INT 22
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: PUSH
8403: FOR_IN
8404: IFFALSE 8981
// if See ( 6 , unit ) then
8406: LD_INT 6
8408: PPUSH
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 292
8418: IFFALSE 8979
// begin meetPlatonov = true ;
8420: LD_ADDR_EXP 7
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// InGameOn ;
8428: CALL_OW 8
// DialogueOn ;
8432: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_EXP 77
8445: PPUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 4
8470: PUSH
8471: LD_INT 8
8473: PPUSH
8474: LD_INT 22
8476: PUSH
8477: LD_INT 6
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 21
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 30
8496: PUSH
8497: LD_INT 31
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 3
8506: PUSH
8507: LD_INT 58
8509: PUSH
8510: EMPTY
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: ADD
8528: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8529: LD_ADDR_VAR 0 5
8533: PUSH
8534: LD_VAR 0 4
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: CALL_OW 74
8548: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8549: LD_VAR 0 5
8553: PPUSH
8554: CALL_OW 247
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: IFFALSE 8583
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8564: LD_ADDR_VAR 0 5
8568: PUSH
8569: LD_VAR 0 5
8573: PPUSH
8574: CALL_OW 313
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8583: LD_VAR 0 5
8587: PPUSH
8588: LD_STRING D2-RSol1-1
8590: PPUSH
8591: LD_STRING 
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL 4178 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8601: LD_EXP 62
8605: PPUSH
8606: LD_STRING D2-Bur-1
8608: PPUSH
8609: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_STRING D2-RSol1-2
8620: PPUSH
8621: CALL_OW 88
// DialogueOff ;
8625: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 21
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 50
8656: PUSH
8657: EMPTY
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: PPUSH
8665: CALL_OW 69
8669: ST_TO_ADDR
// for i := 1 to yourUnits do
8670: LD_ADDR_VAR 0 1
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 3
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8755
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8688: LD_VAR 0 3
8692: PUSH
8693: LD_VAR 0 1
8697: ARRAY
8698: PPUSH
8699: LD_EXP 53
8703: PUSH
8704: LD_VAR 0 1
8708: ARRAY
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: LD_EXP 53
8718: PUSH
8719: LD_VAR 0 1
8723: ARRAY
8724: PUSH
8725: LD_INT 2
8727: ARRAY
8728: PPUSH
8729: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8733: LD_VAR 0 3
8737: PUSH
8738: LD_VAR 0 1
8742: ARRAY
8743: PPUSH
8744: LD_EXP 76
8748: PPUSH
8749: CALL_OW 179
// end ;
8753: GO 8685
8755: POP
8756: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8757: LD_EXP 62
8761: PPUSH
8762: CALL_OW 87
// wait ( 0 0$1 ) ;
8766: LD_INT 35
8768: PPUSH
8769: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8773: LD_EXP 62
8777: PPUSH
8778: LD_EXP 76
8782: PPUSH
8783: CALL_OW 296
8787: PUSH
8788: LD_INT 4
8790: LESS
8791: IFFALSE 8757
// ComTurnUnit ( Platonov , Burlak ) ;
8793: LD_EXP 76
8797: PPUSH
8798: LD_EXP 62
8802: PPUSH
8803: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8807: LD_EXP 76
8811: PPUSH
8812: LD_STRING D2-Pla-2
8814: PPUSH
8815: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8819: LD_EXP 62
8823: PPUSH
8824: LD_STRING D2-Bur-2
8826: PPUSH
8827: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8831: LD_EXP 76
8835: PPUSH
8836: LD_STRING D2-Pla-3
8838: PPUSH
8839: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8843: LD_EXP 62
8847: PPUSH
8848: LD_STRING D2-Bur-3
8850: PPUSH
8851: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8855: LD_EXP 76
8859: PPUSH
8860: LD_STRING D2-Pla-4
8862: PPUSH
8863: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8867: LD_EXP 62
8871: PPUSH
8872: LD_STRING D2-Bur-4
8874: PPUSH
8875: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8879: LD_EXP 76
8883: PPUSH
8884: LD_STRING D2-Pla-5
8886: PPUSH
8887: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8891: LD_INT 1
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: LD_INT 3
8899: PUSH
8900: LD_INT 4
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL 4511 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8913: LD_EXP 76
8917: PPUSH
8918: LD_STRING D3-Pla-1
8920: PPUSH
8921: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8925: LD_EXP 62
8929: PPUSH
8930: LD_STRING D3-Bur-1
8932: PPUSH
8933: CALL_OW 88
// InGameOff ;
8937: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8941: LD_STRING M2a
8943: PPUSH
8944: CALL_OW 337
// ComFree ( Platonov ) ;
8948: LD_EXP 76
8952: PPUSH
8953: CALL_OW 139
// SetSide ( beria , 3 ) ;
8957: LD_INT 106
8959: PPUSH
8960: LD_INT 3
8962: PPUSH
8963: CALL_OW 235
// canExitBase = false ;
8967: LD_ADDR_EXP 19
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// exit ;
8975: POP
8976: POP
8977: GO 8983
// end ;
8979: GO 8403
8981: POP
8982: POP
// end ;
8983: PPOPN 5
8985: END
// export function Dial_LabConstructed ; begin
8986: LD_INT 0
8988: PPUSH
// labConstructed = true ;
8989: LD_ADDR_EXP 8
8993: PUSH
8994: LD_INT 1
8996: ST_TO_ADDR
// DialogueOn ;
8997: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9001: LD_EXP 62
9005: PPUSH
9006: LD_STRING D5a-Bur-1
9008: PPUSH
9009: CALL_OW 88
// if workshopConstructed then
9013: LD_EXP 9
9017: IFFALSE 9033
// Say ( Platonov , D5a-Pla-1 ) else
9019: LD_EXP 76
9023: PPUSH
9024: LD_STRING D5a-Pla-1
9026: PPUSH
9027: CALL_OW 88
9031: GO 9045
// Say ( Platonov , D5a-Pla-1a ) ;
9033: LD_EXP 76
9037: PPUSH
9038: LD_STRING D5a-Pla-1a
9040: PPUSH
9041: CALL_OW 88
// DialogueOff ;
9045: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
9049: LD_STRING M2b
9051: PPUSH
9052: CALL_OW 337
// end ;
9056: LD_VAR 0 1
9060: RET
// export function Dial_WorkshopConstructed ; begin
9061: LD_INT 0
9063: PPUSH
// workshopConstructed = true ;
9064: LD_ADDR_EXP 9
9068: PUSH
9069: LD_INT 1
9071: ST_TO_ADDR
// DialogueOn ;
9072: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
9076: LD_EXP 62
9080: PPUSH
9081: LD_STRING D5b-Bur-1
9083: PPUSH
9084: CALL_OW 88
// if labConstructed then
9088: LD_EXP 8
9092: IFFALSE 9108
// Say ( Platonov , D5b-Pla-1 ) else
9094: LD_EXP 76
9098: PPUSH
9099: LD_STRING D5b-Pla-1
9101: PPUSH
9102: CALL_OW 88
9106: GO 9120
// Say ( Platonov , D5b-Pla-1a ) ;
9108: LD_EXP 76
9112: PPUSH
9113: LD_STRING D5b-Pla-1a
9115: PPUSH
9116: CALL_OW 88
// DialogueOff ;
9120: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9124: LD_STRING M2c
9126: PPUSH
9127: CALL_OW 337
// end ;
9131: LD_VAR 0 1
9135: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9136: LD_INT 0
9138: PPUSH
// wait ( 0 0$1 ) ;
9139: LD_INT 35
9141: PPUSH
9142: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9155: LD_INT 22
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PPUSH
9179: CALL_OW 69
9183: PPUSH
9184: CALL_OW 141
// DialogueOn ;
9188: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9192: LD_EXP 76
9196: PPUSH
9197: LD_STRING D6-Pla-1
9199: PPUSH
9200: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9204: LD_EXP 62
9208: PPUSH
9209: LD_STRING D6-Bur-1
9211: PPUSH
9212: CALL_OW 88
// DialogueOff ;
9216: CALL_OW 7
// case GetBType ( building ) of b_lab :
9220: LD_VAR 0 1
9224: PPUSH
9225: CALL_OW 266
9229: PUSH
9230: LD_INT 6
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9278
9238: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9239: LD_INT 106
9241: PPUSH
9242: CALL_OW 274
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: LD_INT 106
9252: PPUSH
9253: CALL_OW 274
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 275
9265: PUSH
9266: LD_EXP 54
9270: PLUS
9271: PPUSH
9272: CALL_OW 277
9276: GO 9471
9278: LD_INT 2
9280: DOUBLE
9281: EQUAL
9282: IFTRUE 9286
9284: GO 9326
9286: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9287: LD_INT 106
9289: PPUSH
9290: CALL_OW 274
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: LD_INT 106
9300: PPUSH
9301: CALL_OW 274
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 275
9313: PUSH
9314: LD_EXP 55
9318: PLUS
9319: PPUSH
9320: CALL_OW 277
9324: GO 9471
9326: LD_INT 26
9328: DOUBLE
9329: EQUAL
9330: IFTRUE 9334
9332: GO 9374
9334: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9335: LD_INT 106
9337: PPUSH
9338: CALL_OW 274
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: LD_INT 106
9348: PPUSH
9349: CALL_OW 274
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 275
9361: PUSH
9362: LD_EXP 56
9366: PLUS
9367: PPUSH
9368: CALL_OW 277
9372: GO 9471
9374: LD_INT 4
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9422
9382: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9383: LD_INT 106
9385: PPUSH
9386: CALL_OW 274
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_INT 106
9396: PPUSH
9397: CALL_OW 274
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 275
9409: PUSH
9410: LD_EXP 57
9414: PLUS
9415: PPUSH
9416: CALL_OW 277
9420: GO 9471
9422: LD_INT 31
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9470
9430: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9431: LD_INT 106
9433: PPUSH
9434: CALL_OW 274
9438: PPUSH
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 106
9444: PPUSH
9445: CALL_OW 274
9449: PPUSH
9450: LD_INT 1
9452: PPUSH
9453: CALL_OW 275
9457: PUSH
9458: LD_EXP 58
9462: PLUS
9463: PPUSH
9464: CALL_OW 277
9468: GO 9471
9470: POP
// RemoveUnit ( building ) ;
9471: LD_VAR 0 1
9475: PPUSH
9476: CALL_OW 64
// end ;
9480: LD_VAR 0 2
9484: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9485: LD_EXP 9
9489: PUSH
9490: LD_EXP 8
9494: AND
9495: IFFALSE 9604
9497: GO 9499
9499: DISABLE
// begin DialogueOn ;
9500: CALL_OW 6
// if engineResearched then
9504: LD_EXP 10
9508: IFFALSE 9536
// begin Say ( Burlak , D7b-Bur-1 ) ;
9510: LD_EXP 62
9514: PPUSH
9515: LD_STRING D7b-Bur-1
9517: PPUSH
9518: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9522: LD_EXP 76
9526: PPUSH
9527: LD_STRING D7b-Pla-1
9529: PPUSH
9530: CALL_OW 88
// end else
9534: GO 9560
// begin Say ( Burlak , D7a-Bur-1 ) ;
9536: LD_EXP 62
9540: PPUSH
9541: LD_STRING D7a-Bur-1
9543: PPUSH
9544: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9548: LD_EXP 76
9552: PPUSH
9553: LD_STRING D7a-Pla-1
9555: PPUSH
9556: CALL_OW 88
// end ; DialogueOff ;
9560: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9564: LD_STRING M2
9566: PPUSH
9567: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9571: LD_INT 3
9573: PPUSH
9574: LD_EXP 76
9578: PPUSH
9579: CALL_OW 250
9583: PPUSH
9584: LD_EXP 76
9588: PPUSH
9589: CALL_OW 251
9593: PPUSH
9594: LD_INT 5
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 56
// end ;
9604: END
// export function Dial_NewCrates ( x , y ) ; begin
9605: LD_INT 0
9607: PPUSH
// wait ( 0 0$18 ) ;
9608: LD_INT 630
9610: PPUSH
9611: CALL_OW 67
// if not spawnCrates then
9615: LD_EXP 21
9619: NOT
9620: IFFALSE 9624
// exit ;
9622: GO 9655
// ComMoveXY ( Platonov , x , y ) ;
9624: LD_EXP 76
9628: PPUSH
9629: LD_VAR 0 1
9633: PPUSH
9634: LD_VAR 0 2
9638: PPUSH
9639: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9643: LD_EXP 76
9647: PPUSH
9648: LD_STRING D4-Pla-1
9650: PPUSH
9651: CALL_OW 88
// end ;
9655: LD_VAR 0 3
9659: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9660: LD_INT 0
9662: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9663: LD_ADDR_EXP 13
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 21
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: ST_TO_ADDR
// constructedFirstVehicle = true ;
9701: LD_ADDR_EXP 12
9705: PUSH
9706: LD_INT 1
9708: ST_TO_ADDR
// InGameOn ;
9709: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 87
// wait ( 0 0$3 ) ;
9722: LD_INT 105
9724: PPUSH
9725: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9729: LD_EXP 62
9733: PPUSH
9734: LD_STRING D9-Bur-1
9736: PPUSH
9737: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9741: LD_EXP 76
9745: PPUSH
9746: LD_EXP 13
9750: PPUSH
9751: CALL_OW 250
9755: PPUSH
9756: LD_EXP 13
9760: PPUSH
9761: CALL_OW 251
9765: PPUSH
9766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9770: LD_INT 35
9772: PPUSH
9773: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9777: LD_EXP 76
9781: PPUSH
9782: LD_EXP 13
9786: PPUSH
9787: CALL_OW 296
9791: PUSH
9792: LD_INT 4
9794: LESS
9795: IFFALSE 9770
// ComTurnUnit ( Platonov , firstVeh ) ;
9797: LD_EXP 76
9801: PPUSH
9802: LD_EXP 13
9806: PPUSH
9807: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9811: LD_EXP 76
9815: PPUSH
9816: LD_STRING D9-Pla-1
9818: PPUSH
9819: CALL_OW 88
// InGameOff ;
9823: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9827: LD_STRING M3
9829: PPUSH
9830: CALL_OW 337
// canExitBase = true ;
9834: LD_ADDR_EXP 19
9838: PUSH
9839: LD_INT 1
9841: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9842: LD_EXP 76
9846: PPUSH
9847: LD_INT 112
9849: PPUSH
9850: LD_INT 97
9852: PPUSH
9853: CALL_OW 111
// end ;
9857: LD_VAR 0 2
9861: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9862: LD_EXP 13
9866: PPUSH
9867: LD_INT 9
9869: PPUSH
9870: CALL_OW 308
9874: PUSH
9875: LD_EXP 14
9879: NOT
9880: AND
9881: IFFALSE 10735
9883: GO 9885
9885: DISABLE
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
9890: PPUSH
// begin vehicleForKurin = true ;
9891: LD_ADDR_EXP 14
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: LD_EXP 69
9908: PPUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 72
9923: PUSH
9924: LD_INT 1
9926: ARRAY
9927: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9928: LD_ADDR_VAR 0 3
9932: PUSH
9933: LD_EXP 69
9937: PPUSH
9938: LD_INT 25
9940: PUSH
9941: LD_INT 3
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PUSH
9953: LD_INT 1
9955: ARRAY
9956: ST_TO_ADDR
// InGameOn ;
9957: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9961: LD_EXP 67
9965: PPUSH
9966: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9970: LD_EXP 13
9974: PPUSH
9975: LD_EXP 67
9979: PPUSH
9980: CALL_OW 250
9984: PPUSH
9985: LD_EXP 67
9989: PPUSH
9990: CALL_OW 251
9994: PPUSH
9995: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9999: LD_EXP 67
10003: PPUSH
10004: LD_STRING D10-Kur-1
10006: PPUSH
10007: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10018: LD_EXP 13
10022: PPUSH
10023: LD_EXP 67
10027: PPUSH
10028: CALL_OW 250
10032: PPUSH
10033: LD_EXP 67
10037: PPUSH
10038: CALL_OW 251
10042: PPUSH
10043: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
10047: LD_EXP 13
10051: PPUSH
10052: LD_EXP 67
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 9
10064: LESS
10065: IFFALSE 10011
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
10067: LD_EXP 13
10071: PPUSH
10072: CALL_OW 313
10076: PPUSH
10077: CALL_OW 121
// wait ( 0 0$1 ) ;
10081: LD_INT 35
10083: PPUSH
10084: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10088: LD_EXP 13
10092: PPUSH
10093: CALL_OW 256
10097: PUSH
10098: LD_INT 1000
10100: LESS
10101: IFFALSE 10133
// begin ComExitBuilding ( mech ) ;
10103: LD_VAR 0 3
10107: PPUSH
10108: CALL_OW 122
// wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_EXP 13
10128: PPUSH
10129: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10133: LD_EXP 13
10137: PPUSH
10138: CALL_OW 261
10142: PUSH
10143: LD_INT 90
10145: LESS
10146: IFFALSE 10181
// begin ComExitBuilding ( eng ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 122
// wait ( 0 0$1 ) ;
10157: LD_INT 35
10159: PPUSH
10160: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_INT 71
10171: PPUSH
10172: LD_EXP 13
10176: PPUSH
10177: CALL 4749 0 3
// end ; repeat wait ( 0 0$1 ) ;
10181: LD_INT 35
10183: PPUSH
10184: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10188: LD_EXP 13
10192: PPUSH
10193: CALL_OW 256
10197: PUSH
10198: LD_INT 1000
10200: EQUAL
10201: PUSH
10202: LD_EXP 13
10206: PPUSH
10207: CALL_OW 261
10211: PUSH
10212: LD_INT 90
10214: GREATER
10215: AND
10216: IFFALSE 10181
// if UnitsInside ( firstVeh ) then
10218: LD_EXP 13
10222: PPUSH
10223: CALL_OW 313
10227: IFFALSE 10247
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10229: LD_EXP 13
10233: PPUSH
10234: CALL_OW 313
10238: PUSH
10239: LD_INT 1
10241: ARRAY
10242: PPUSH
10243: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10247: LD_VAR 0 2
10251: PPUSH
10252: LD_INT 71
10254: PPUSH
10255: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10259: LD_EXP 13
10263: PPUSH
10264: LD_INT 6
10266: PPUSH
10267: CALL_OW 235
// if belkovReturn then
10271: LD_EXP 6
10275: IFFALSE 10361
// begin if IsInUnit ( Belkov ) then
10277: LD_EXP 64
10281: PPUSH
10282: CALL_OW 310
10286: IFFALSE 10297
// ComExitBuilding ( Belkov ) ;
10288: LD_EXP 64
10292: PPUSH
10293: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10297: LD_INT 35
10299: PPUSH
10300: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10304: LD_EXP 64
10308: PPUSH
10309: LD_EXP 13
10313: PPUSH
10314: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10318: LD_EXP 64
10322: PPUSH
10323: CALL_OW 310
10327: PUSH
10328: LD_EXP 13
10332: EQUAL
10333: IFFALSE 10297
// Say ( Belkov , D10-Bel-1 ) ;
10335: LD_EXP 64
10339: PPUSH
10340: LD_STRING D10-Bel-1
10342: PPUSH
10343: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10347: LD_EXP 67
10351: PPUSH
10352: LD_STRING D10-Kur-2
10354: PPUSH
10355: CALL_OW 88
// end else
10359: GO 10487
// begin if IsInUnit ( Belkov2 ) then
10361: LD_EXP 68
10365: PPUSH
10366: CALL_OW 310
10370: IFFALSE 10381
// ComExitBuilding ( Belkov2 ) ;
10372: LD_EXP 68
10376: PPUSH
10377: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10388: LD_EXP 68
10392: PPUSH
10393: LD_EXP 13
10397: PPUSH
10398: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10402: LD_EXP 68
10406: PPUSH
10407: CALL_OW 310
10411: PUSH
10412: LD_EXP 13
10416: EQUAL
10417: IFFALSE 10381
// meetBelkovBrother = true ;
10419: LD_ADDR_EXP 4
10423: PUSH
10424: LD_INT 1
10426: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10427: LD_EXP 68
10431: PPUSH
10432: LD_STRING D10-Bel-1
10434: PPUSH
10435: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10439: LD_EXP 62
10443: PPUSH
10444: LD_STRING D10-Bur-1
10446: PPUSH
10447: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10451: LD_EXP 68
10455: PPUSH
10456: LD_STRING D10-Bel-2
10458: PPUSH
10459: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10463: LD_EXP 62
10467: PPUSH
10468: LD_STRING D10-Bur-2
10470: PPUSH
10471: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10475: LD_EXP 67
10479: PPUSH
10480: LD_STRING D10-Kur-2a
10482: PPUSH
10483: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10487: LD_ADDR_EXP 74
10491: PUSH
10492: EMPTY
10493: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10494: LD_ADDR_EXP 75
10498: PUSH
10499: EMPTY
10500: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10501: LD_ADDR_EXP 22
10505: PUSH
10506: LD_INT 1
10508: ST_TO_ADDR
// CreateBelkovTeam ;
10509: CALL 6188 0 0
// ComExitBuilding ( belkovTeam ) ;
10513: LD_EXP 73
10517: PPUSH
10518: CALL_OW 122
// wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10529: LD_ADDR_EXP 72
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_INT 6
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 2
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 69
10562: PUSH
10563: LD_INT 1
10565: ARRAY
10566: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10567: LD_ADDR_EXP 73
10571: PUSH
10572: LD_EXP 73
10576: PUSH
10577: LD_EXP 72
10581: ADD
10582: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10583: LD_EXP 73
10587: PPUSH
10588: LD_INT 147
10590: PPUSH
10591: LD_INT 102
10593: PPUSH
10594: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10598: LD_EXP 73
10602: PPUSH
10603: LD_INT 133
10605: PPUSH
10606: LD_INT 94
10608: PPUSH
10609: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10613: LD_EXP 73
10617: PPUSH
10618: LD_INT 123
10620: PPUSH
10621: LD_INT 74
10623: PPUSH
10624: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10628: LD_EXP 73
10632: PPUSH
10633: LD_INT 111
10635: PPUSH
10636: LD_INT 48
10638: PPUSH
10639: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10643: LD_EXP 73
10647: PPUSH
10648: LD_INT 122
10650: PPUSH
10651: LD_INT 43
10653: PPUSH
10654: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10658: LD_EXP 73
10662: PPUSH
10663: LD_INT 129
10665: PPUSH
10666: LD_INT 32
10668: PPUSH
10669: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10673: LD_EXP 73
10677: PPUSH
10678: LD_INT 132
10680: PPUSH
10681: LD_INT 22
10683: PPUSH
10684: CALL_OW 171
// wait ( 0 0$8 ) ;
10688: LD_INT 280
10690: PPUSH
10691: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10695: LD_EXP 67
10699: PPUSH
10700: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10704: LD_EXP 67
10708: PPUSH
10709: LD_STRING D10-Kur-2b
10711: PPUSH
10712: CALL_OW 88
// InGameOff ;
10716: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10720: LD_STRING M4
10722: PPUSH
10723: CALL_OW 337
// backToBeria1 = true ;
10727: LD_ADDR_EXP 15
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// end ;
10735: PPOPN 3
10737: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10738: LD_INT 9
10740: PPUSH
10741: LD_INT 22
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 70
10769: PUSH
10770: LD_EXP 14
10774: AND
10775: IFFALSE 10792
10777: GO 10779
10779: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10780: LD_EXP 67
10784: PPUSH
10785: LD_STRING D1a-Kur-1a
10787: PPUSH
10788: CALL_OW 88
10792: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10793: LD_EXP 22
10797: IFFALSE 11200
10799: GO 10801
10801: DISABLE
10802: LD_INT 0
10804: PPUSH
10805: PPUSH
// begin enable ;
10806: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10807: LD_INT 10
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: PUSH
10825: LD_INT 0
10827: EQUAL
10828: IFFALSE 10832
// exit ;
10830: GO 11200
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 10
10839: PPUSH
10840: LD_INT 22
10842: PUSH
10843: LD_INT 6
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 70
10854: PUSH
10855: FOR_IN
10856: IFFALSE 11186
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 247
10867: PUSH
10868: LD_INT 1
10870: EQUAL
10871: PUSH
10872: LD_VAR 0 1
10876: PUSH
10877: LD_EXP 64
10881: EQUAL
10882: NOT
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: LD_EXP 68
10893: EQUAL
10894: NOT
10895: AND
10896: PUSH
10897: LD_VAR 0 1
10901: PUSH
10902: LD_EXP 65
10906: EQUAL
10907: NOT
10908: AND
10909: AND
10910: IFFALSE 10951
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10912: LD_ADDR_EXP 23
10916: PUSH
10917: LD_EXP 23
10921: PUSH
10922: LD_INT 1
10924: PLUS
10925: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10926: LD_ADDR_EXP 74
10930: PUSH
10931: LD_EXP 74
10935: PUSH
10936: LD_VAR 0 1
10940: ADD
10941: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL_OW 64
// end ; if unit = Kirilenkova then
10951: LD_VAR 0 1
10955: PUSH
10956: LD_EXP 65
10960: EQUAL
10961: IFFALSE 10984
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10963: LD_EXP 65
10967: PPUSH
10968: LD_STRING 02_TmpKirilenkova
10970: PPUSH
10971: CALL_OW 38
// RemoveUnit ( unit ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 64
// end ; if unit = Belkov2 then
10984: LD_VAR 0 1
10988: PUSH
10989: LD_EXP 68
10993: EQUAL
10994: IFFALSE 11017
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10996: LD_EXP 68
11000: PPUSH
11001: LD_STRING 02_TmpBelkov2
11003: PPUSH
11004: CALL_OW 38
// RemoveUnit ( unit ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
11017: LD_VAR 0 1
11021: PPUSH
11022: CALL_OW 247
11026: PUSH
11027: LD_INT 2
11029: EQUAL
11030: IFFALSE 11184
// begin driver = UnitsInside ( unit ) ;
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 313
11046: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
11047: LD_VAR 0 2
11051: PUSH
11052: LD_INT 1
11054: ARRAY
11055: PUSH
11056: LD_EXP 64
11060: EQUAL
11061: IFFALSE 11086
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
11063: LD_EXP 64
11067: PPUSH
11068: LD_STRING 02_TmpBelkov
11070: PPUSH
11071: CALL_OW 38
// RemoveUnit ( unit ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 64
// end else
11084: GO 11107
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11086: LD_EXP 68
11090: PPUSH
11091: LD_STRING 02_TmpBelkov2
11093: PPUSH
11094: CALL_OW 38
// RemoveUnit ( unit ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11107: LD_ADDR_EXP 75
11111: PUSH
11112: LD_EXP 75
11116: PUSH
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 265
11126: PUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 262
11136: PUSH
11137: LD_VAR 0 1
11141: PPUSH
11142: CALL_OW 263
11146: PUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 264
11156: PUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 261
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: ADD
11174: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11175: LD_VAR 0 1
11179: PPUSH
11180: CALL_OW 64
// end ; end ;
11184: GO 10855
11186: POP
11187: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11188: LD_EXP 74
11192: PPUSH
11193: LD_STRING 02_TmpBelkovTeam
11195: PPUSH
11196: CALL_OW 38
// end ;
11200: PPOPN 2
11202: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11203: LD_INT 8
11205: PPUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 3
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 21
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 71
11234: PUSH
11235: LD_INT 0
11237: EQUAL
11238: PUSH
11239: LD_EXP 15
11243: AND
11244: IFFALSE 11451
11246: GO 11248
11248: DISABLE
11249: LD_INT 0
11251: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11252: LD_ADDR_VAR 0 1
11256: PUSH
11257: LD_EXP 69
11261: PPUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 72
11276: ST_TO_ADDR
// backToBeria1 = false ;
11277: LD_ADDR_EXP 15
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// canExitBase = false ;
11285: LD_ADDR_EXP 19
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11293: LD_EXP 76
11297: PPUSH
11298: LD_STRING D11-Pla-1
11300: PPUSH
11301: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11305: LD_INT 22
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 21
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: PUSH
11334: LD_INT 1
11336: GREATER
11337: IFFALSE 11353
// Say ( Burlak , D11-Bur-1a ) else
11339: LD_EXP 62
11343: PPUSH
11344: LD_STRING D11-Bur-1a
11346: PPUSH
11347: CALL_OW 88
11351: GO 11365
// Say ( Burlak , D11-Bur-1 ) ;
11353: LD_EXP 62
11357: PPUSH
11358: LD_STRING D11-Bur-1
11360: PPUSH
11361: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11365: LD_STRING M5
11367: PPUSH
11368: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 5
11377: PPUSH
11378: CALL_OW 12
11382: PPUSH
11383: LD_INT 26
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 55
// construcMoreVehicles = true ;
11393: LD_ADDR_EXP 17
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// spawnCrates = true ;
11401: LD_ADDR_EXP 21
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 2
11425: PPUSH
11426: LD_INT 159
11428: PPUSH
11429: LD_INT 112
11431: PPUSH
11432: LD_INT 0
11434: PPUSH
11435: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11439: LD_VAR 0 1
11443: PPUSH
11444: LD_INT 71
11446: PPUSH
11447: CALL_OW 180
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11454: LD_EXP 18
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: GREATEREQUAL
11488: IFFALSE 12616
11490: GO 11492
11492: DISABLE
11493: LD_INT 0
11495: PPUSH
11496: PPUSH
// begin canRemoveBelkovUnits = false ;
11497: LD_ADDR_EXP 22
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// spawnCrates = false ;
11505: LD_ADDR_EXP 21
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11513: LD_INT 22
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 2
11525: PUSH
11526: LD_INT 21
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 21
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PPUSH
11560: CALL_OW 141
// InGameOn ;
11564: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11568: LD_EXP 76
11572: PPUSH
11573: CALL_OW 85
// DialogueOn ;
11577: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11581: LD_EXP 62
11585: PPUSH
11586: LD_STRING D12-Bur-1
11588: PPUSH
11589: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11593: LD_EXP 76
11597: PPUSH
11598: LD_STRING D12-Pla-1
11600: PPUSH
11601: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11605: LD_EXP 62
11609: PPUSH
11610: LD_STRING D12-Bur-2
11612: PPUSH
11613: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11617: LD_EXP 76
11621: PPUSH
11622: LD_STRING D12-Pla-2
11624: PPUSH
11625: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11629: LD_EXP 62
11633: PPUSH
11634: LD_STRING D12-Bur-3
11636: PPUSH
11637: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11641: LD_EXP 76
11645: PPUSH
11646: LD_STRING D12-Pla-3
11648: PPUSH
11649: CALL_OW 88
// DialogueOff ;
11653: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11657: LD_INT 6
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 80
// PrepareAmerican ;
11673: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11677: CALL 1132 0 0
// if IsOK ( Belkov ) then
11681: LD_EXP 64
11685: PPUSH
11686: CALL_OW 302
11690: IFFALSE 11704
// tmpBelkov = Belkov else
11692: LD_ADDR_VAR 0 1
11696: PUSH
11697: LD_EXP 64
11701: ST_TO_ADDR
11702: GO 11714
// tmpBelkov = Belkov2 ;
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_EXP 68
11713: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11714: LD_EXP 72
11718: PPUSH
11719: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11723: LD_EXP 80
11727: PPUSH
11728: LD_STRING D13-Sol1-1
11730: PPUSH
11731: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11735: LD_VAR 0 1
11739: PPUSH
11740: LD_STRING D13-Bel-1
11742: PPUSH
11743: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11747: LD_EXP 67
11751: PPUSH
11752: LD_STRING D13-Kur-1
11754: PPUSH
11755: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11759: LD_VAR 0 1
11763: PPUSH
11764: LD_STRING D13-Bel-2
11766: PPUSH
11767: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11771: LD_EXP 73
11775: PPUSH
11776: LD_INT 121
11778: PPUSH
11779: LD_INT 29
11781: PPUSH
11782: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11786: LD_INT 35
11788: PPUSH
11789: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11793: LD_EXP 72
11797: PPUSH
11798: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11802: LD_ADDR_VAR 0 2
11806: PUSH
11807: LD_EXP 73
11811: PPUSH
11812: LD_INT 21
11814: PUSH
11815: LD_INT 1
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 56
11824: PUSH
11825: EMPTY
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 72
11836: PPUSH
11837: LD_EXP 72
11841: PPUSH
11842: CALL_OW 74
11846: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11847: LD_EXP 72
11851: PPUSH
11852: LD_VAR 0 2
11856: PPUSH
11857: CALL_OW 296
11861: PUSH
11862: LD_INT 5
11864: LESS
11865: IFFALSE 11878
// ComStop ( kirovVehicle ) else
11867: LD_EXP 72
11871: PPUSH
11872: CALL_OW 141
11876: GO 11893
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11878: LD_EXP 73
11882: PPUSH
11883: LD_INT 121
11885: PPUSH
11886: LD_INT 29
11888: PPUSH
11889: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11893: LD_EXP 73
11897: PPUSH
11898: LD_EXP 80
11902: PPUSH
11903: CALL_OW 74
11907: PPUSH
11908: LD_EXP 80
11912: PPUSH
11913: CALL_OW 296
11917: PUSH
11918: LD_INT 5
11920: LESS
11921: IFFALSE 11786
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11923: LD_EXP 72
11927: PUSH
11928: LD_EXP 80
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PPUSH
11937: CALL_OW 87
// ComWalk ( trapTeam ) ;
11941: LD_EXP 81
11945: PPUSH
11946: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11950: LD_EXP 81
11954: PPUSH
11955: LD_EXP 72
11959: PPUSH
11960: CALL_OW 179
// ComStop ( belkovTeam ) ;
11964: LD_EXP 73
11968: PPUSH
11969: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11973: LD_EXP 73
11977: PPUSH
11978: LD_EXP 80
11982: PPUSH
11983: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11987: LD_INT 25
11989: PPUSH
11990: LD_INT 22
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PPUSH
12014: CALL_OW 70
12018: PPUSH
12019: LD_INT 111
12021: PPUSH
12022: LD_INT 13
12024: PPUSH
12025: CALL_OW 171
// music_class = music_combat ;
12029: LD_ADDR_OWVAR 72
12033: PUSH
12034: LD_INT 1
12036: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12037: LD_INT 35
12039: PPUSH
12040: CALL_OW 67
// DialogueOn ;
12044: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
12048: LD_EXP 80
12052: PPUSH
12053: LD_STRING D14-Sol1-1
12055: PPUSH
12056: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: LD_STRING D14-Bel-1
12067: PPUSH
12068: CALL_OW 88
// DialogueOff ;
12072: CALL_OW 7
// immortalBelkovTeam = true ;
12076: LD_ADDR_EXP 24
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
12084: LD_INT 6
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12100: LD_EXP 73
12104: PPUSH
12105: LD_INT 107
12107: PPUSH
12108: LD_INT 5
12110: PPUSH
12111: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12115: LD_EXP 72
12119: PPUSH
12120: LD_INT 107
12122: PPUSH
12123: LD_INT 5
12125: PPUSH
12126: CALL_OW 111
// wait ( 0 0$2 ) ;
12130: LD_INT 70
12132: PPUSH
12133: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12137: LD_EXP 73
12141: PPUSH
12142: LD_INT 101
12144: PPUSH
12145: LD_INT 19
12147: PPUSH
12148: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12152: LD_EXP 72
12156: PPUSH
12157: LD_INT 101
12159: PPUSH
12160: LD_INT 19
12162: PPUSH
12163: CALL_OW 111
// wait ( 0 0$2 ) ;
12167: LD_INT 70
12169: PPUSH
12170: CALL_OW 67
// immortalVehLive = 400 ;
12174: LD_ADDR_EXP 25
12178: PUSH
12179: LD_INT 400
12181: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12182: LD_EXP 72
12186: PPUSH
12187: LD_INT 500
12189: PPUSH
12190: CALL_OW 234
// wait ( 0 0$3 ) ;
12194: LD_INT 105
12196: PPUSH
12197: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12201: LD_VAR 0 1
12205: PPUSH
12206: CALL_OW 121
// wait ( 0 0$1 ) ;
12210: LD_INT 35
12212: PPUSH
12213: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12217: LD_EXP 80
12221: PPUSH
12222: LD_EXP 72
12226: PPUSH
12227: CALL_OW 120
// AddComHold ( trapTeam ) ;
12231: LD_EXP 81
12235: PPUSH
12236: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12240: LD_EXP 73
12244: PPUSH
12245: LD_INT 88
12247: PPUSH
12248: LD_INT 18
12250: PPUSH
12251: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12255: LD_INT 35
12257: PPUSH
12258: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12271: LD_VAR 0 1
12275: PPUSH
12276: LD_INT 15
12278: PPUSH
12279: CALL_OW 308
12283: IFFALSE 12255
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12285: LD_ADDR_EXP 88
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PPUSH
12314: CALL_OW 69
12318: PUSH
12319: LD_INT 1
12321: ARRAY
12322: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12323: LD_INT 28
12325: PPUSH
12326: LD_INT 22
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 70
12354: PPUSH
12355: LD_INT 113
12357: PPUSH
12358: LD_INT 29
12360: PPUSH
12361: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12365: LD_EXP 88
12369: PPUSH
12370: LD_INT 118
12372: PPUSH
12373: LD_INT 25
12375: PPUSH
12376: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_STRING D14-Bel-1a
12387: PPUSH
12388: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12392: LD_EXP 67
12396: PPUSH
12397: LD_STRING D14-Kur-1
12399: PPUSH
12400: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_STRING D14-Bel-2
12411: PPUSH
12412: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12416: LD_EXP 67
12420: PPUSH
12421: LD_STRING D14-Kur-2
12423: PPUSH
12424: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12428: LD_EXP 76
12432: PPUSH
12433: CALL_OW 85
// wait ( 0 0$2 ) ;
12437: LD_INT 70
12439: PPUSH
12440: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12444: LD_EXP 62
12448: PPUSH
12449: LD_STRING D14a-Bur-1
12451: PPUSH
12452: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12456: LD_EXP 76
12460: PPUSH
12461: LD_STRING D14a-Pla-1
12463: PPUSH
12464: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12468: LD_EXP 62
12472: PPUSH
12473: LD_STRING D14a-Bur-2
12475: PPUSH
12476: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12480: LD_EXP 76
12484: PPUSH
12485: LD_STRING D14a-Pla-2
12487: PPUSH
12488: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12492: LD_EXP 62
12496: PPUSH
12497: LD_STRING D14a-Bur-3
12499: PPUSH
12500: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12504: LD_EXP 76
12508: PPUSH
12509: LD_STRING D14a-Pla-3
12511: PPUSH
12512: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12516: LD_EXP 62
12520: PPUSH
12521: LD_STRING D14a-Bur-4
12523: PPUSH
12524: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12528: LD_EXP 76
12532: PPUSH
12533: LD_STRING D14a-Pla-4
12535: PPUSH
12536: CALL_OW 88
// InGameOff ;
12540: CALL_OW 9
// immortalBelkovTeam = false ;
12544: LD_ADDR_EXP 24
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// activateAMAI = true ;
12552: LD_ADDR_EXP 27
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// canExitBase = true ;
12560: LD_ADDR_EXP 19
12564: PUSH
12565: LD_INT 1
12567: ST_TO_ADDR
// canExploreMap = true ;
12568: LD_ADDR_EXP 20
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// construcMoreVehicles = false ;
12576: LD_ADDR_EXP 17
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// activateBelkovAI = true ;
12584: LD_ADDR_EXP 28
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12592: LD_STRING M6
12594: PPUSH
12595: CALL_OW 337
// music_class = 0 ;
12599: LD_ADDR_OWVAR 72
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12607: LD_EXP 81
12611: PPUSH
12612: CALL_OW 139
// end ;
12616: PPOPN 2
12618: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12619: LD_EXP 88
12623: PPUSH
12624: LD_INT 118
12626: PPUSH
12627: LD_INT 25
12629: PPUSH
12630: CALL_OW 297
12634: PUSH
12635: LD_INT 6
12637: LESS
12638: IFFALSE 12733
12640: GO 12642
12642: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12643: LD_EXP 80
12647: PPUSH
12648: CALL_OW 121
// uc_side = 1 ;
12652: LD_ADDR_OWVAR 20
12656: PUSH
12657: LD_INT 1
12659: ST_TO_ADDR
// uc_nation = 1 ;
12660: LD_ADDR_OWVAR 21
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12668: LD_INT 0
12670: PPUSH
12671: LD_EXP 59
12675: PPUSH
12676: CALL_OW 383
// amMech = CreateHuman ;
12680: LD_ADDR_EXP 89
12684: PUSH
12685: CALL_OW 44
12689: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12690: LD_EXP 89
12694: PPUSH
12695: LD_INT 27
12697: PPUSH
12698: LD_INT 0
12700: PPUSH
12701: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12705: LD_EXP 89
12709: PPUSH
12710: LD_EXP 88
12714: PPUSH
12715: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12719: LD_EXP 89
12723: PPUSH
12724: LD_EXP 88
12728: PPUSH
12729: CALL_OW 180
// end ;
12733: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12734: LD_EXP 89
12738: PPUSH
12739: CALL_OW 302
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 50
12766: PUSH
12767: EMPTY
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: AND
12780: IFFALSE 13033
12782: GO 12784
12784: DISABLE
12785: LD_INT 0
12787: PPUSH
// begin enable ;
12788: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_INT 22
12796: PUSH
12797: LD_INT 3
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: PPUSH
12841: LD_EXP 89
12845: PPUSH
12846: CALL_OW 74
12850: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12851: LD_VAR 0 1
12855: PPUSH
12856: LD_EXP 89
12860: PPUSH
12861: CALL_OW 296
12865: PUSH
12866: LD_INT 13
12868: LESS
12869: IFFALSE 12922
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12871: LD_EXP 89
12875: PPUSH
12876: LD_INT 22
12878: PUSH
12879: LD_INT 1
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 21
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 50
12898: PUSH
12899: EMPTY
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: CALL_OW 120
12920: GO 13033
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12922: LD_INT 22
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 21
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 50
12944: PUSH
12945: EMPTY
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PPUSH
12953: CALL_OW 69
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 256
12966: PUSH
12967: LD_INT 1000
12969: EQUAL
12970: PUSH
12971: LD_EXP 89
12975: PPUSH
12976: CALL_OW 310
12980: NOT
12981: AND
12982: IFFALSE 13033
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
12984: LD_EXP 89
12988: PPUSH
12989: LD_INT 22
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 21
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 50
13011: PUSH
13012: EMPTY
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PPUSH
13029: CALL_OW 120
// end ; end ;
13033: PPOPN 1
13035: END
// every 0 0$1 trigger immortalBelkovTeam do
13036: LD_EXP 24
13040: IFFALSE 13127
13042: GO 13044
13044: DISABLE
// begin enable ;
13045: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
13046: LD_EXP 73
13050: PPUSH
13051: LD_INT 21
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: PPUSH
13066: LD_INT 1000
13068: PPUSH
13069: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
13073: LD_EXP 73
13077: PPUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: IFFALSE 13127
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13094: LD_EXP 73
13098: PPUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_EXP 25
13122: PPUSH
13123: CALL_OW 234
// end ;
13127: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13128: LD_EXP 20
13132: PUSH
13133: LD_EXP 37
13137: NOT
13138: AND
13139: PUSH
13140: LD_EXP 61
13144: PUSH
13145: LD_INT 0
13147: GREATER
13148: AND
13149: IFFALSE 13169
13151: GO 13153
13153: DISABLE
// begin enable ;
13154: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13155: LD_ADDR_EXP 61
13159: PUSH
13160: LD_EXP 61
13164: PUSH
13165: LD_INT 35
13167: MINUS
13168: ST_TO_ADDR
// end ;
13169: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13170: LD_EXP 20
13174: IFFALSE 13258
13176: GO 13178
13178: DISABLE
13179: LD_INT 0
13181: PPUSH
13182: PPUSH
// begin tmp = trapTeam ;
13183: LD_ADDR_VAR 0 2
13187: PUSH
13188: LD_EXP 81
13192: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_VAR 0 2
13202: PUSH
13203: LD_EXP 80
13207: DIFF
13208: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13209: LD_ADDR_VAR 0 1
13213: PUSH
13214: DOUBLE
13215: LD_INT 1
13217: DEC
13218: ST_TO_ADDR
13219: LD_INT 2
13221: PPUSH
13222: LD_INT 3
13224: PPUSH
13225: CALL_OW 12
13229: PUSH
13230: FOR_TO
13231: IFFALSE 13256
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13233: LD_VAR 0 2
13237: PUSH
13238: LD_VAR 0 1
13242: ARRAY
13243: PPUSH
13244: LD_INT 87
13246: PPUSH
13247: LD_INT 18
13249: PPUSH
13250: CALL_OW 114
13254: GO 13230
13256: POP
13257: POP
// end ;
13258: PPOPN 2
13260: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13261: LD_EXP 61
13265: PUSH
13266: LD_INT 70
13268: LESS
13269: PUSH
13270: LD_EXP 81
13274: AND
13275: IFFALSE 13304
13277: GO 13279
13279: DISABLE
// begin enable ;
13280: ENABLE
// activateBelkovAI = false ;
13281: LD_ADDR_EXP 28
13285: PUSH
13286: LD_INT 0
13288: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13289: LD_EXP 73
13293: PPUSH
13294: LD_INT 120
13296: PPUSH
13297: LD_INT 28
13299: PPUSH
13300: CALL_OW 114
// end ;
13304: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13305: LD_EXP 29
13309: NOT
13310: PUSH
13311: LD_EXP 30
13315: NOT
13316: OR
13317: PUSH
13318: LD_EXP 20
13322: AND
13323: IFFALSE 13785
13325: GO 13327
13327: DISABLE
13328: LD_INT 0
13330: PPUSH
// begin enable ;
13331: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_INT 22
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 21
13349: PUSH
13350: LD_INT 3
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 31
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: PUSH
13377: FOR_IN
13378: IFFALSE 13783
// begin if See ( 3 , bunker ) then
13380: LD_INT 3
13382: PPUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13781
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13394: LD_VAR 0 1
13398: PUSH
13399: LD_EXP 82
13403: IN
13404: PUSH
13405: LD_EXP 29
13409: NOT
13410: AND
13411: PUSH
13412: LD_INT 18
13414: PPUSH
13415: LD_INT 22
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: PPUSH
13428: CALL_OW 70
13432: NOT
13433: AND
13434: IFFALSE 13627
// begin sawLeftBunker = true ;
13436: LD_ADDR_EXP 29
13440: PUSH
13441: LD_INT 1
13443: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 85
// DialogueOn ;
13453: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13457: LD_EXP 62
13461: PPUSH
13462: LD_STRING D15-Bur-1
13464: PPUSH
13465: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13469: LD_EXP 63
13473: PPUSH
13474: CALL_OW 302
13478: PUSH
13479: LD_EXP 70
13483: PPUSH
13484: CALL_OW 302
13488: OR
13489: IFFALSE 13584
// begin if IsOK ( Gnyevko ) then
13491: LD_EXP 63
13495: PPUSH
13496: CALL_OW 302
13500: IFFALSE 13514
// Say ( Gnyevko , D15-Gny-1 ) ;
13502: LD_EXP 63
13506: PPUSH
13507: LD_STRING D15-Gny-1
13509: PPUSH
13510: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13514: LD_EXP 70
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13537
// Say ( Kovalyuk , D15-Kov-1 ) ;
13525: LD_EXP 70
13529: PPUSH
13530: LD_STRING D15-Kov-1
13532: PPUSH
13533: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13537: LD_EXP 62
13541: PPUSH
13542: LD_STRING D15-Bur-2
13544: PPUSH
13545: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13549: LD_EXP 70
13553: PPUSH
13554: CALL_OW 302
13558: IFFALSE 13572
// Say ( Kovalyuk , D15-Kov-2 ) ;
13560: LD_EXP 70
13564: PPUSH
13565: LD_STRING D15-Kov-2
13567: PPUSH
13568: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13572: LD_EXP 62
13576: PPUSH
13577: LD_STRING D15-Bur-3
13579: PPUSH
13580: CALL_OW 88
// end ; DialogueOff ;
13584: CALL_OW 7
// if raportForPlatonov = 2 then
13588: LD_EXP 39
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: IFFALSE 13608
// raportForPlatonov = 1 else
13598: LD_ADDR_EXP 39
13602: PUSH
13603: LD_INT 1
13605: ST_TO_ADDR
13606: GO 13616
// raportForPlatonov = 3 ;
13608: LD_ADDR_EXP 39
13612: PUSH
13613: LD_INT 3
13615: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13616: LD_STRING M7
13618: PPUSH
13619: CALL_OW 337
// exit ;
13623: POP
13624: POP
13625: GO 13785
// end ; if bunker in rightBunkers and not sawRightBunker then
13627: LD_VAR 0 1
13631: PUSH
13632: LD_EXP 83
13636: IN
13637: PUSH
13638: LD_EXP 30
13642: NOT
13643: AND
13644: IFFALSE 13781
// begin sawRightBunker = true ;
13646: LD_ADDR_EXP 30
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 85
// DialogueOn ;
13663: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13667: LD_EXP 70
13671: PPUSH
13672: CALL_OW 302
13676: IFFALSE 13745
// begin if sawLeftBunker then
13678: LD_EXP 29
13682: IFFALSE 13698
// Say ( Kovalyuk , D16-Kov-1a ) else
13684: LD_EXP 70
13688: PPUSH
13689: LD_STRING D16-Kov-1a
13691: PPUSH
13692: CALL_OW 88
13696: GO 13710
// Say ( Kovalyuk , D16-Kov-1 ) ;
13698: LD_EXP 70
13702: PPUSH
13703: LD_STRING D16-Kov-1
13705: PPUSH
13706: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13710: LD_EXP 62
13714: PPUSH
13715: LD_STRING D16-Bur-1
13717: PPUSH
13718: CALL_OW 88
// if IsOK ( Gnyevko ) then
13722: LD_EXP 63
13726: PPUSH
13727: CALL_OW 302
13731: IFFALSE 13745
// Say ( Gnyevko , D16-Gny-1 ) ;
13733: LD_EXP 63
13737: PPUSH
13738: LD_STRING D16-Gny-1
13740: PPUSH
13741: CALL_OW 88
// end ; DialogueOff ;
13745: CALL_OW 7
// if raportForPlatonov = 3 then
13749: LD_EXP 39
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13769
// raportForPlatonov = 1 else
13759: LD_ADDR_EXP 39
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
13767: GO 13777
// raportForPlatonov = 2 ;
13769: LD_ADDR_EXP 39
13773: PUSH
13774: LD_INT 2
13776: ST_TO_ADDR
// exit ;
13777: POP
13778: POP
13779: GO 13785
// end ; end ; end ;
13781: GO 13377
13783: POP
13784: POP
// end ;
13785: PPOPN 1
13787: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13788: LD_EXP 32
13792: NOT
13793: PUSH
13794: LD_EXP 83
13798: AND
13799: PUSH
13800: LD_EXP 20
13804: AND
13805: PUSH
13806: LD_EXP 70
13810: PPUSH
13811: CALL_OW 302
13815: PUSH
13816: LD_EXP 63
13820: PPUSH
13821: CALL_OW 302
13825: OR
13826: AND
13827: IFFALSE 14015
13829: GO 13831
13831: DISABLE
13832: LD_INT 0
13834: PPUSH
// begin enable ;
13835: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 21
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: PUSH
13888: FOR_IN
13889: IFFALSE 14013
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 320
13900: PUSH
13901: LD_EXP 83
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 320
13920: PUSH
13921: LD_EXP 83
13925: PUSH
13926: LD_INT 2
13928: ARRAY
13929: EQUAL
13930: OR
13931: IFFALSE 14011
// begin dialogAttackRightBunkers = true ;
13933: LD_ADDR_EXP 32
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// DialogueOn ;
13941: CALL_OW 6
// if IsOK ( Gnyevko ) then
13945: LD_EXP 63
13949: PPUSH
13950: CALL_OW 302
13954: IFFALSE 13968
// Say ( Gnyevko , D16A-Gny-1 ) ;
13956: LD_EXP 63
13960: PPUSH
13961: LD_STRING D16A-Gny-1
13963: PPUSH
13964: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13968: LD_EXP 70
13972: PPUSH
13973: CALL_OW 302
13977: IFFALSE 13991
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13979: LD_EXP 70
13983: PPUSH
13984: LD_STRING D16A-Kov-1
13986: PPUSH
13987: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13991: LD_EXP 62
13995: PPUSH
13996: LD_STRING D16A-Bur-1
13998: PPUSH
13999: CALL_OW 88
// DialogueOff ;
14003: CALL_OW 7
// exit ;
14007: POP
14008: POP
14009: GO 14015
// end ; end ;
14011: GO 13888
14013: POP
14014: POP
// end ;
14015: PPOPN 1
14017: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
14018: LD_INT 18
14020: PPUSH
14021: LD_INT 22
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: PPUSH
14034: CALL_OW 70
14038: PUSH
14039: LD_EXP 29
14043: NOT
14044: AND
14045: IFFALSE 14428
14047: GO 14049
14049: DISABLE
14050: LD_INT 0
14052: PPUSH
// begin sawLeftBunker = true ;
14053: LD_ADDR_EXP 29
14057: PUSH
14058: LD_INT 1
14060: ST_TO_ADDR
// if playerGetSupport then
14061: LD_EXP 34
14065: IFFALSE 14084
// decsToChoose = [ 1 , 3 ] else
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: ST_TO_ADDR
14082: GO 14103
// decsToChoose = [ 1 , 2 , 3 ] ;
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14103: LD_STRING QAttackBw
14105: PPUSH
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 98
14115: PUSH
14116: LD_INT 1
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14217
14124: POP
// begin DialogueOn ;
14125: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14129: LD_EXP 62
14133: PPUSH
14134: LD_STRING D17-Bur-1
14136: PPUSH
14137: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14141: LD_EXP 76
14145: PPUSH
14146: LD_STRING D17-Pla-1
14148: PPUSH
14149: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14153: LD_EXP 62
14157: PPUSH
14158: LD_STRING D17-Bur-2
14160: PPUSH
14161: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14165: LD_EXP 76
14169: PPUSH
14170: LD_STRING D17-Pla-2
14172: PPUSH
14173: CALL_OW 94
// DialogueOff ;
14177: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14181: LD_EXP 42
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: IN
14196: NOT
14197: IFFALSE 14215
// begin initiative = 1 ;
14199: LD_ADDR_EXP 42
14203: PUSH
14204: LD_INT 1
14206: ST_TO_ADDR
// platonovOpinion = 2 ;
14207: LD_ADDR_EXP 5
14211: PUSH
14212: LD_INT 2
14214: ST_TO_ADDR
// end ; end ; 2 :
14215: GO 14358
14217: LD_INT 2
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14330
14225: POP
// begin DialogueOn ;
14226: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14230: LD_EXP 62
14234: PPUSH
14235: LD_STRING D18-Bur-1
14237: PPUSH
14238: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14242: LD_EXP 76
14246: PPUSH
14247: LD_STRING D18-Pla-1
14249: PPUSH
14250: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14254: LD_EXP 62
14258: PPUSH
14259: LD_STRING D18-Bur-2
14261: PPUSH
14262: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14266: LD_EXP 76
14270: PPUSH
14271: LD_STRING D18-Pla-2
14273: PPUSH
14274: CALL_OW 94
// DialogueOff ;
14278: CALL_OW 7
// playerGetSupport = true ;
14282: LD_ADDR_EXP 34
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// medalForGetSupport = false ;
14290: LD_ADDR_EXP 40
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// PlatonovSendSupport ;
14298: CALL 6644 0 0
// if initiative <> 3 then
14302: LD_EXP 42
14306: PUSH
14307: LD_INT 3
14309: NONEQUAL
14310: IFFALSE 14328
// begin initiative = 1 ;
14312: LD_ADDR_EXP 42
14316: PUSH
14317: LD_INT 1
14319: ST_TO_ADDR
// platonovOpinion = 2 ;
14320: LD_ADDR_EXP 5
14324: PUSH
14325: LD_INT 2
14327: ST_TO_ADDR
// end ; end ; 3 :
14328: GO 14358
14330: LD_INT 3
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14357
14338: POP
// begin initiative = 3 ;
14339: LD_ADDR_EXP 42
14343: PUSH
14344: LD_INT 3
14346: ST_TO_ADDR
// platonovOpinion = 0 ;
14347: LD_ADDR_EXP 5
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// end ; end ;
14355: GO 14358
14357: POP
// if IsOK ( Gnyevko ) then
14358: LD_EXP 63
14362: PPUSH
14363: CALL_OW 302
14367: IFFALSE 14393
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14369: LD_EXP 63
14373: PPUSH
14374: LD_STRING D19-Gny-1
14376: PPUSH
14377: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14381: LD_EXP 62
14385: PPUSH
14386: LD_STRING D19-Bur-1
14388: PPUSH
14389: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14393: LD_EXP 70
14397: PPUSH
14398: CALL_OW 302
14402: IFFALSE 14428
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14404: LD_EXP 70
14408: PPUSH
14409: LD_STRING D19-Kov-1
14411: PPUSH
14412: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14416: LD_EXP 62
14420: PPUSH
14421: LD_STRING D19-Bur-2
14423: PPUSH
14424: CALL_OW 88
// end ; end ;
14428: PPOPN 1
14430: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14431: LD_EXP 31
14435: NOT
14436: PUSH
14437: LD_EXP 82
14441: AND
14442: PUSH
14443: LD_EXP 20
14447: AND
14448: PUSH
14449: LD_INT 18
14451: PPUSH
14452: LD_INT 22
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: PPUSH
14465: CALL_OW 70
14469: PUSH
14470: LD_INT 0
14472: EQUAL
14473: AND
14474: PUSH
14475: LD_EXP 70
14479: PPUSH
14480: CALL_OW 302
14484: PUSH
14485: LD_EXP 63
14489: PPUSH
14490: CALL_OW 302
14494: OR
14495: AND
14496: IFFALSE 14684
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
// begin enable ;
14504: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 2
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 21
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: PUSH
14557: FOR_IN
14558: IFFALSE 14682
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 320
14569: PUSH
14570: LD_EXP 82
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: EQUAL
14579: PUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 320
14589: PUSH
14590: LD_EXP 82
14594: PUSH
14595: LD_INT 2
14597: ARRAY
14598: EQUAL
14599: OR
14600: IFFALSE 14680
// begin dialogAttackLeftBunkers = true ;
14602: LD_ADDR_EXP 31
14606: PUSH
14607: LD_INT 1
14609: ST_TO_ADDR
// DialogueOn ;
14610: CALL_OW 6
// if IsOK ( Gnyevko ) then
14614: LD_EXP 63
14618: PPUSH
14619: CALL_OW 302
14623: IFFALSE 14637
// Say ( Gnyevko , D19A-Gny-1 ) ;
14625: LD_EXP 63
14629: PPUSH
14630: LD_STRING D19A-Gny-1
14632: PPUSH
14633: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14637: LD_EXP 70
14641: PPUSH
14642: CALL_OW 302
14646: IFFALSE 14660
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14648: LD_EXP 70
14652: PPUSH
14653: LD_STRING D19A-Kov-1
14655: PPUSH
14656: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14660: LD_EXP 62
14664: PPUSH
14665: LD_STRING D16A-Bur-1
14667: PPUSH
14668: CALL_OW 88
// DialogueOff ;
14672: CALL_OW 7
// exit ;
14676: POP
14677: POP
14678: GO 14684
// end ; end ;
14680: GO 14557
14682: POP
14683: POP
// end ;
14684: PPOPN 1
14686: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14687: LD_EXP 82
14691: NOT
14692: PUSH
14693: LD_INT 17
14695: PPUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 1
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 30
14718: PUSH
14719: LD_INT 31
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 50
14728: PUSH
14729: EMPTY
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 70
14742: PUSH
14743: LD_INT 0
14745: EQUAL
14746: OR
14747: PUSH
14748: LD_EXP 20
14752: AND
14753: IFFALSE 14804
14755: GO 14757
14757: DISABLE
// begin leftBunkers = [ ] ;
14758: LD_ADDR_EXP 82
14762: PUSH
14763: EMPTY
14764: ST_TO_ADDR
// DialogueOn ;
14765: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14769: LD_EXP 62
14773: PPUSH
14774: LD_STRING D20-Bur-1
14776: PPUSH
14777: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14781: LD_EXP 76
14785: PPUSH
14786: LD_STRING D20-Pla-1
14788: PPUSH
14789: CALL_OW 88
// DialogueOff ;
14793: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14797: LD_STRING M8
14799: PPUSH
14800: CALL_OW 337
// end ;
14804: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14805: LD_EXP 83
14809: NOT
14810: PUSH
14811: LD_INT 16
14813: PPUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 30
14836: PUSH
14837: LD_INT 31
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 50
14846: PUSH
14847: EMPTY
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 70
14860: PUSH
14861: LD_INT 0
14863: EQUAL
14864: OR
14865: PUSH
14866: LD_EXP 20
14870: AND
14871: IFFALSE 14915
14873: GO 14875
14875: DISABLE
// begin rightBunkers = [ ] ;
14876: LD_ADDR_EXP 83
14880: PUSH
14881: EMPTY
14882: ST_TO_ADDR
// DialogueOn ;
14883: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14887: LD_EXP 62
14891: PPUSH
14892: LD_STRING D20a-Bur-1
14894: PPUSH
14895: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14899: LD_EXP 76
14903: PPUSH
14904: LD_STRING D20a-Pla-1
14906: PPUSH
14907: CALL_OW 88
// DialogueOff ;
14911: CALL_OW 7
// end ;
14915: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14916: LD_EXP 35
14920: NOT
14921: PUSH
14922: LD_EXP 73
14926: AND
14927: IFFALSE 15422
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
14936: PPUSH
// begin enable ;
14937: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 3
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 21
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15420
// for trapUnit in trapTeam do
14993: LD_ADDR_VAR 0 2
14997: PUSH
14998: LD_EXP 81
15002: PUSH
15003: FOR_IN
15004: IFFALSE 15416
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
15006: LD_VAR 0 1
15010: PPUSH
15011: LD_VAR 0 2
15015: PPUSH
15016: CALL_OW 296
15020: PUSH
15021: LD_INT 16
15023: LESS
15024: IFFALSE 15414
// begin saveBelkovDecision = true ;
15026: LD_ADDR_EXP 35
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
// if playerGetSupport then
15034: LD_EXP 34
15038: IFFALSE 15057
// decsToChoose = [ 1 , 3 ] else
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: LD_INT 3
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
15055: GO 15076
// decsToChoose = [ 1 , 2 , 3 ] ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
15076: LD_STRING QAttackAm
15078: PPUSH
15079: LD_VAR 0 3
15083: PPUSH
15084: CALL_OW 98
15088: PUSH
15089: LD_INT 1
15091: DOUBLE
15092: EQUAL
15093: IFTRUE 15097
15095: GO 15166
15097: POP
// begin DialogueOn ;
15098: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15102: LD_EXP 62
15106: PPUSH
15107: LD_STRING D21-Bur-1
15109: PPUSH
15110: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15114: LD_EXP 76
15118: PPUSH
15119: LD_STRING D21-Pla-1
15121: PPUSH
15122: CALL_OW 94
// DialogueOff ;
15126: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15130: LD_EXP 42
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: IN
15145: NOT
15146: IFFALSE 15164
// begin initiative = 1 ;
15148: LD_ADDR_EXP 42
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// platonovOpinion = 2 ;
15156: LD_ADDR_EXP 5
15160: PUSH
15161: LD_INT 2
15163: ST_TO_ADDR
// end ; end ; 2 :
15164: GO 15358
15166: LD_INT 2
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15330
15174: POP
// begin DialogueOn ;
15175: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15179: LD_EXP 62
15183: PPUSH
15184: LD_STRING D22-Bur-1
15186: PPUSH
15187: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15191: LD_EXP 34
15195: PUSH
15196: LD_EXP 82
15200: PUSH
15201: LD_INT 0
15203: EQUAL
15204: PUSH
15205: LD_EXP 83
15209: PUSH
15210: LD_INT 0
15212: EQUAL
15213: OR
15214: AND
15215: IFFALSE 15229
// Say ( Platonov , D22-Pla-1b ) ;
15217: LD_EXP 76
15221: PPUSH
15222: LD_STRING D22-Pla-1b
15224: PPUSH
15225: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15229: LD_EXP 34
15233: PUSH
15234: LD_EXP 82
15238: PUSH
15239: LD_EXP 83
15243: OR
15244: AND
15245: IFFALSE 15259
// Say ( Platonov , D22-Pla-1a ) ;
15247: LD_EXP 76
15251: PPUSH
15252: LD_STRING D22-Pla-1a
15254: PPUSH
15255: CALL_OW 88
// if not playerGetSupport then
15259: LD_EXP 34
15263: NOT
15264: IFFALSE 15298
// begin Say ( Platonov , D22-Pla-1 ) ;
15266: LD_EXP 76
15270: PPUSH
15271: LD_STRING D22-Pla-1
15273: PPUSH
15274: CALL_OW 88
// playerGetSupport = true ;
15278: LD_ADDR_EXP 34
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// medalForGetSupport = false ;
15286: LD_ADDR_EXP 40
15290: PUSH
15291: LD_INT 0
15293: ST_TO_ADDR
// PlatonovSendSupport ;
15294: CALL 6644 0 0
// end ; DialogueOff ;
15298: CALL_OW 7
// if initiative <> 3 then
15302: LD_EXP 42
15306: PUSH
15307: LD_INT 3
15309: NONEQUAL
15310: IFFALSE 15328
// begin initiative = 2 ;
15312: LD_ADDR_EXP 42
15316: PUSH
15317: LD_INT 2
15319: ST_TO_ADDR
// platonovOpinion = 1 ;
15320: LD_ADDR_EXP 5
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// end ; end ; 3 :
15328: GO 15358
15330: LD_INT 3
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15357
15338: POP
// begin initiative = 3 ;
15339: LD_ADDR_EXP 42
15343: PUSH
15344: LD_INT 3
15346: ST_TO_ADDR
// platonovOpinion = 0 ;
15347: LD_ADDR_EXP 5
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// end ; end ;
15355: GO 15358
15357: POP
// if IsOK ( Gnyevko ) then
15358: LD_EXP 63
15362: PPUSH
15363: CALL_OW 302
15367: IFFALSE 15393
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15369: LD_EXP 63
15373: PPUSH
15374: LD_STRING D23-Gny-1
15376: PPUSH
15377: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15381: LD_EXP 62
15385: PPUSH
15386: LD_STRING D23-Bur-1
15388: PPUSH
15389: CALL_OW 88
// end ; saveBelkovObjective = true ;
15393: LD_ADDR_EXP 36
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15401: LD_STRING M9
15403: PPUSH
15404: CALL_OW 337
// exit ;
15408: POP
15409: POP
15410: POP
15411: POP
15412: GO 15422
// end ;
15414: GO 15003
15416: POP
15417: POP
15418: GO 14990
15420: POP
15421: POP
// end ;
15422: PPOPN 3
15424: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15425: LD_EXP 20
15429: PUSH
15430: LD_EXP 81
15434: NOT
15435: AND
15436: PUSH
15437: LD_EXP 37
15441: NOT
15442: AND
15443: IFFALSE 15483
15445: GO 15447
15447: DISABLE
// begin belkovSaved = true ;
15448: LD_ADDR_EXP 37
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// activateBelkovAI = false ;
15456: LD_ADDR_EXP 28
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15464: LD_EXP 73
15468: PPUSH
15469: LD_INT 3
15471: PPUSH
15472: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15476: LD_STRING M9a
15478: PPUSH
15479: CALL_OW 337
// end ;
15483: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15484: LD_EXP 35
15488: PUSH
15489: LD_EXP 64
15493: PPUSH
15494: CALL_OW 301
15498: PUSH
15499: LD_EXP 68
15503: PPUSH
15504: CALL_OW 301
15508: PUSH
15509: LD_EXP 64
15513: PPUSH
15514: CALL_OW 255
15518: PUSH
15519: LD_INT 6
15521: EQUAL
15522: PUSH
15523: LD_EXP 68
15527: PPUSH
15528: CALL_OW 255
15532: PUSH
15533: LD_INT 6
15535: EQUAL
15536: OR
15537: AND
15538: OR
15539: AND
15540: IFFALSE 15560
15542: GO 15544
15544: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15545: LD_STRING M9a
15547: PPUSH
15548: CALL_OW 337
// saveBelkovObjective = false ;
15552: LD_ADDR_EXP 36
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// end ;
15560: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15561: LD_EXP 37
15565: PUSH
15566: LD_EXP 62
15570: PPUSH
15571: LD_EXP 64
15575: PPUSH
15576: CALL_OW 296
15580: PUSH
15581: LD_INT 14
15583: LESS
15584: PUSH
15585: LD_EXP 6
15589: AND
15590: PUSH
15591: LD_EXP 62
15595: PPUSH
15596: LD_EXP 68
15600: PPUSH
15601: CALL_OW 296
15605: PUSH
15606: LD_INT 14
15608: LESS
15609: PUSH
15610: LD_EXP 6
15614: NOT
15615: AND
15616: OR
15617: AND
15618: IFFALSE 15914
15620: GO 15622
15622: DISABLE
// begin InGameOn ;
15623: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15627: LD_EXP 64
15631: PPUSH
15632: CALL_OW 302
15636: PUSH
15637: LD_EXP 6
15641: AND
15642: IFFALSE 15738
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15644: LD_EXP 62
15648: PUSH
15649: LD_EXP 64
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15662: LD_EXP 62
15666: PPUSH
15667: LD_EXP 64
15671: PPUSH
15672: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15676: LD_EXP 64
15680: PPUSH
15681: LD_EXP 62
15685: PPUSH
15686: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15690: LD_EXP 64
15694: PPUSH
15695: LD_STRING D24-Bel-1
15697: PPUSH
15698: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15702: LD_EXP 62
15706: PPUSH
15707: LD_STRING D24-Bur-1
15709: PPUSH
15710: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15714: LD_EXP 64
15718: PPUSH
15719: LD_STRING D24-Bel-2
15721: PPUSH
15722: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15726: LD_EXP 62
15730: PPUSH
15731: LD_STRING D24-Bur-2
15733: PPUSH
15734: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15738: LD_EXP 68
15742: PPUSH
15743: CALL_OW 302
15747: PUSH
15748: LD_EXP 6
15752: NOT
15753: AND
15754: IFFALSE 15862
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15756: LD_EXP 62
15760: PUSH
15761: LD_EXP 68
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15774: LD_EXP 62
15778: PPUSH
15779: LD_EXP 68
15783: PPUSH
15784: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15788: LD_EXP 68
15792: PPUSH
15793: LD_EXP 62
15797: PPUSH
15798: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15802: LD_EXP 68
15806: PPUSH
15807: LD_STRING D24-Bel-1
15809: PPUSH
15810: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15814: LD_EXP 62
15818: PPUSH
15819: LD_STRING D24-Bur-1
15821: PPUSH
15822: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15826: LD_EXP 62
15830: PPUSH
15831: LD_STRING D24-Bur-1a
15833: PPUSH
15834: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15838: LD_EXP 68
15842: PPUSH
15843: LD_STRING D24-Bel-2
15845: PPUSH
15846: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15850: LD_EXP 62
15854: PPUSH
15855: LD_STRING D24-Bur-2
15857: PPUSH
15858: CALL_OW 88
// end ; if captureBelkovVehicle then
15862: LD_EXP 38
15866: IFFALSE 15880
// Say ( Burlak , D24-Bur-2a ) ;
15868: LD_EXP 62
15872: PPUSH
15873: LD_STRING D24-Bur-2a
15875: PPUSH
15876: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15880: LD_EXP 76
15884: PPUSH
15885: LD_STRING D24-Pla-2
15887: PPUSH
15888: CALL_OW 94
// if leftBunkers then
15892: LD_EXP 82
15896: IFFALSE 15910
// SayRadio ( Platonov , D24-Pla-2a ) ;
15898: LD_EXP 76
15902: PPUSH
15903: LD_STRING D24-Pla-2a
15905: PPUSH
15906: CALL_OW 94
// InGameOff ;
15910: CALL_OW 9
// end ;
15914: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15915: LD_INT 22
15917: PPUSH
15918: LD_INT 22
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 70
15946: PUSH
15947: LD_EXP 70
15951: PPUSH
15952: CALL_OW 302
15956: PUSH
15957: LD_EXP 63
15961: PPUSH
15962: CALL_OW 302
15966: OR
15967: AND
15968: IFFALSE 16051
15970: GO 15972
15972: DISABLE
// begin DialogueOn ;
15973: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15977: LD_EXP 62
15981: PPUSH
15982: LD_STRING D26-Bur-1
15984: PPUSH
15985: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15989: LD_EXP 70
15993: PPUSH
15994: CALL_OW 302
15998: IFFALSE 16012
// Say ( Kovalyuk , D26-Kov-1 ) ;
16000: LD_EXP 70
16004: PPUSH
16005: LD_STRING D26-Kov-1
16007: PPUSH
16008: CALL_OW 88
// if IsOk ( Gnyevko ) then
16012: LD_EXP 63
16016: PPUSH
16017: CALL_OW 302
16021: IFFALSE 16035
// Say ( Gnyevko , D26-Gny-1 ) ;
16023: LD_EXP 63
16027: PPUSH
16028: LD_STRING D26-Gny-1
16030: PPUSH
16031: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
16035: LD_EXP 62
16039: PPUSH
16040: LD_STRING D26-Bur-2
16042: PPUSH
16043: CALL_OW 88
// DialogueOff ;
16047: CALL_OW 7
// end ;
16051: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
16052: LD_EXP 20
16056: PUSH
16057: LD_EXP 62
16061: PPUSH
16062: LD_INT 8
16064: PPUSH
16065: CALL_OW 308
16069: NOT
16070: PUSH
16071: LD_EXP 62
16075: PPUSH
16076: CALL_OW 310
16080: PPUSH
16081: CALL_OW 310
16085: PPUSH
16086: LD_INT 8
16088: PPUSH
16089: CALL_OW 308
16093: NOT
16094: AND
16095: AND
16096: PUSH
16097: LD_EXP 39
16101: PUSH
16102: LD_INT 1
16104: NEG
16105: EQUAL
16106: AND
16107: IFFALSE 16121
16109: GO 16111
16111: DISABLE
// begin enable ;
16112: ENABLE
// raportForPlatonov = 0 ;
16113: LD_ADDR_EXP 39
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// end ;
16121: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16122: LD_EXP 20
16126: PUSH
16127: LD_EXP 39
16131: PUSH
16132: LD_INT 0
16134: GREATEREQUAL
16135: AND
16136: PUSH
16137: LD_EXP 16
16141: NOT
16142: AND
16143: PUSH
16144: LD_EXP 62
16148: PPUSH
16149: LD_INT 8
16151: PPUSH
16152: CALL_OW 308
16156: PUSH
16157: LD_EXP 62
16161: PPUSH
16162: CALL_OW 310
16166: PPUSH
16167: CALL_OW 310
16171: PPUSH
16172: LD_INT 8
16174: PPUSH
16175: CALL_OW 308
16179: PUSH
16180: LD_EXP 16
16184: NOT
16185: AND
16186: OR
16187: AND
16188: IFFALSE 16479
16190: GO 16192
16192: DISABLE
// begin enable ;
16193: ENABLE
// DialogueOn ;
16194: CALL_OW 6
// case raportForPlatonov of 0 :
16198: LD_EXP 39
16202: PUSH
16203: LD_INT 0
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16238
16211: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16212: LD_EXP 76
16216: PPUSH
16217: LD_STRING D25a-Pla-1
16219: PPUSH
16220: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16224: LD_EXP 62
16228: PPUSH
16229: LD_STRING D25a-Bur-1
16231: PPUSH
16232: CALL_OW 88
// end ; 1 :
16236: GO 16454
16238: LD_INT 1
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16309
16246: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16247: LD_EXP 76
16251: PPUSH
16252: LD_STRING D25-Pla-1
16254: PPUSH
16255: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16259: LD_EXP 62
16263: PPUSH
16264: LD_STRING D25-Bur-1
16266: PPUSH
16267: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16271: LD_EXP 62
16275: PPUSH
16276: LD_STRING D25b-Bur-1
16278: PPUSH
16279: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16283: LD_EXP 76
16287: PPUSH
16288: LD_STRING D25b-Pla-1
16290: PPUSH
16291: CALL_OW 88
// playerGetSupport = true ;
16295: LD_ADDR_EXP 34
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// PlatonovSendSupport ;
16303: CALL 6644 0 0
// end ; 2 :
16307: GO 16454
16309: LD_INT 2
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16363
16317: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16318: LD_EXP 76
16322: PPUSH
16323: LD_STRING D25-Pla-1
16325: PPUSH
16326: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16330: LD_EXP 62
16334: PPUSH
16335: LD_STRING D25-Bur-1a
16337: PPUSH
16338: CALL_OW 88
// if not sawLeftBunker then
16342: LD_EXP 29
16346: NOT
16347: IFFALSE 16361
// Say ( Platonov , D25c-Pla-1 ) ;
16349: LD_EXP 76
16353: PPUSH
16354: LD_STRING D25c-Pla-1
16356: PPUSH
16357: CALL_OW 88
// end ; 3 :
16361: GO 16454
16363: LD_INT 3
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16453
16371: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16372: LD_EXP 76
16376: PPUSH
16377: LD_STRING D25-Pla-1
16379: PPUSH
16380: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16384: LD_EXP 62
16388: PPUSH
16389: LD_STRING D25a-Bur-1b
16391: PPUSH
16392: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16396: LD_EXP 62
16400: PPUSH
16401: LD_STRING D25b-Bur-1
16403: PPUSH
16404: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16408: LD_EXP 76
16412: PPUSH
16413: LD_STRING D25b-Pla-1
16415: PPUSH
16416: CALL_OW 88
// playerGetSupport = true ;
16420: LD_ADDR_EXP 34
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// PlatonovSendSupport ;
16428: CALL 6644 0 0
// if not sawRightBunker then
16432: LD_EXP 30
16436: NOT
16437: IFFALSE 16451
// Say ( Platonov , D25c-Pla-1 ) ;
16439: LD_EXP 76
16443: PPUSH
16444: LD_STRING D25c-Pla-1
16446: PPUSH
16447: CALL_OW 88
// end ; end ;
16451: GO 16454
16453: POP
// raportForPlatonov = - 1 ;
16454: LD_ADDR_EXP 39
16458: PUSH
16459: LD_INT 1
16461: NEG
16462: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16463: LD_EXP 76
16467: PPUSH
16468: LD_STRING D25c-Pla-1a
16470: PPUSH
16471: CALL_OW 88
// DialogueOff ;
16475: CALL_OW 7
// end ;
16479: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16480: LD_INT 19
16482: PPUSH
16483: LD_INT 22
16485: PUSH
16486: LD_INT 3
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: PPUSH
16496: CALL_OW 70
16500: PUSH
16501: LD_INT 0
16503: GREATER
16504: IFFALSE 16524
16506: GO 16508
16508: DISABLE
// begin northMapExplored = true ;
16509: LD_ADDR_EXP 41
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16517: LD_STRING M10
16519: PPUSH
16520: CALL_OW 337
// end ;
16524: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16525: LD_EXP 82
16529: NOT
16530: PUSH
16531: LD_EXP 41
16535: AND
16536: PUSH
16537: LD_EXP 37
16541: PUSH
16542: LD_EXP 36
16546: NOT
16547: OR
16548: AND
16549: IFFALSE 16569
16551: GO 16553
16553: DISABLE
// begin backToBeria2 = true ;
16554: LD_ADDR_EXP 16
16558: PUSH
16559: LD_INT 1
16561: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16562: LD_STRING M10a
16564: PPUSH
16565: CALL_OW 337
// end ;
16569: END
// every 0 0$1 do
16570: GO 16572
16572: DISABLE
// begin enable ;
16573: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16574: LD_EXP 67
16578: PUSH
16579: LD_EXP 76
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PPUSH
16588: LD_INT 1000
16590: PPUSH
16591: CALL_OW 234
// end ; end_of_file
16595: END
// export function CreateNature ; var i , un ; begin
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
16600: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_EXP 45
16615: PUSH
16616: LD_INT 1
16618: ARRAY
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16731
// begin uc_side = 0 ;
16623: LD_ADDR_OWVAR 20
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// uc_nation = nation_nature ;
16631: LD_ADDR_OWVAR 21
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// hc_class = class_apeman ;
16639: LD_ADDR_OWVAR 28
16643: PUSH
16644: LD_INT 12
16646: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16647: LD_ADDR_OWVAR 31
16651: PUSH
16652: LD_EXP 46
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PUSH
16661: LD_EXP 46
16665: PUSH
16666: LD_INT 2
16668: ARRAY
16669: PUSH
16670: LD_EXP 46
16674: PUSH
16675: LD_INT 3
16677: ARRAY
16678: PUSH
16679: LD_EXP 46
16683: PUSH
16684: LD_INT 4
16686: ARRAY
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16694: LD_ADDR_OWVAR 35
16698: PUSH
16699: LD_EXP 47
16703: ST_TO_ADDR
// un = CreateHuman ;
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: CALL_OW 44
16713: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 21
16721: PPUSH
16722: LD_INT 0
16724: PPUSH
16725: CALL_OW 49
// end ;
16729: GO 16620
16731: POP
16732: POP
// for i := 1 to animalsAmount [ 2 ] do
16733: LD_ADDR_VAR 0 2
16737: PUSH
16738: DOUBLE
16739: LD_INT 1
16741: DEC
16742: ST_TO_ADDR
16743: LD_EXP 45
16747: PUSH
16748: LD_INT 2
16750: ARRAY
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16863
// begin uc_side = 0 ;
16755: LD_ADDR_OWVAR 20
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// uc_nation = nation_nature ;
16763: LD_ADDR_OWVAR 21
16767: PUSH
16768: LD_INT 0
16770: ST_TO_ADDR
// hc_class = class_phororhacos ;
16771: LD_ADDR_OWVAR 28
16775: PUSH
16776: LD_INT 18
16778: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16779: LD_ADDR_OWVAR 31
16783: PUSH
16784: LD_EXP 46
16788: PUSH
16789: LD_INT 1
16791: ARRAY
16792: PUSH
16793: LD_EXP 46
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: PUSH
16802: LD_EXP 46
16806: PUSH
16807: LD_INT 3
16809: ARRAY
16810: PUSH
16811: LD_EXP 46
16815: PUSH
16816: LD_INT 4
16818: ARRAY
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16826: LD_ADDR_OWVAR 35
16830: PUSH
16831: LD_EXP 47
16835: ST_TO_ADDR
// un = CreateHuman ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: CALL_OW 44
16845: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16846: LD_VAR 0 3
16850: PPUSH
16851: LD_INT 21
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 49
// end ;
16861: GO 16752
16863: POP
16864: POP
// for i := 1 to animalsAmount [ 3 ] do
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: DOUBLE
16871: LD_INT 1
16873: DEC
16874: ST_TO_ADDR
16875: LD_EXP 45
16879: PUSH
16880: LD_INT 3
16882: ARRAY
16883: PUSH
16884: FOR_TO
16885: IFFALSE 16995
// begin uc_side = 0 ;
16887: LD_ADDR_OWVAR 20
16891: PUSH
16892: LD_INT 0
16894: ST_TO_ADDR
// uc_nation = nation_nature ;
16895: LD_ADDR_OWVAR 21
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// hc_class = class_tiger ;
16903: LD_ADDR_OWVAR 28
16907: PUSH
16908: LD_INT 14
16910: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16911: LD_ADDR_OWVAR 31
16915: PUSH
16916: LD_EXP 46
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: PUSH
16925: LD_EXP 46
16929: PUSH
16930: LD_INT 2
16932: ARRAY
16933: PUSH
16934: LD_EXP 46
16938: PUSH
16939: LD_INT 3
16941: ARRAY
16942: PUSH
16943: LD_EXP 46
16947: PUSH
16948: LD_INT 4
16950: ARRAY
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16958: LD_ADDR_OWVAR 35
16962: PUSH
16963: LD_EXP 47
16967: ST_TO_ADDR
// un = CreateHuman ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: CALL_OW 44
16977: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16978: LD_VAR 0 3
16982: PPUSH
16983: LD_INT 21
16985: PPUSH
16986: LD_INT 0
16988: PPUSH
16989: CALL_OW 49
// end ;
16993: GO 16884
16995: POP
16996: POP
// for i := 1 to animalsAmount [ 4 ] do
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: DOUBLE
17003: LD_INT 1
17005: DEC
17006: ST_TO_ADDR
17007: LD_EXP 45
17011: PUSH
17012: LD_INT 4
17014: ARRAY
17015: PUSH
17016: FOR_TO
17017: IFFALSE 17127
// begin uc_side = 0 ;
17019: LD_ADDR_OWVAR 20
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// uc_nation = nation_nature ;
17027: LD_ADDR_OWVAR 21
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// hc_class = 21 ;
17035: LD_ADDR_OWVAR 28
17039: PUSH
17040: LD_INT 21
17042: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
17043: LD_ADDR_OWVAR 31
17047: PUSH
17048: LD_EXP 46
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PUSH
17057: LD_EXP 46
17061: PUSH
17062: LD_INT 2
17064: ARRAY
17065: PUSH
17066: LD_EXP 46
17070: PUSH
17071: LD_INT 3
17073: ARRAY
17074: PUSH
17075: LD_EXP 46
17079: PUSH
17080: LD_INT 4
17082: ARRAY
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17090: LD_ADDR_OWVAR 35
17094: PUSH
17095: LD_EXP 47
17099: ST_TO_ADDR
// un = CreateHuman ;
17100: LD_ADDR_VAR 0 3
17104: PUSH
17105: CALL_OW 44
17109: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 21
17117: PPUSH
17118: LD_INT 0
17120: PPUSH
17121: CALL_OW 49
// end ;
17125: GO 17016
17127: POP
17128: POP
// end ; end_of_file
17129: LD_VAR 0 1
17133: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17134: LD_EXP 21
17138: IFFALSE 17367
17140: GO 17142
17142: DISABLE
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17150: LD_ADDR_VAR 0 4
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 21
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 25
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17195: LD_INT 700
17197: PPUSH
17198: CALL_OW 67
// carryCratesEngs = 0 ;
17202: LD_ADDR_VAR 0 3
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// for unit in playerEngs do
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_VAR 0 4
17219: PUSH
17220: FOR_IN
17221: IFFALSE 17249
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17223: LD_ADDR_VAR 0 3
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 289
17245: PLUS
17246: ST_TO_ADDR
17247: GO 17220
17249: POP
17250: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17251: LD_INT 106
17253: PPUSH
17254: CALL_OW 274
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: CALL_OW 275
17266: PUSH
17267: LD_INT 50
17269: LESS
17270: PUSH
17271: LD_INT 8
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 287
17281: PUSH
17282: LD_INT 10
17284: MUL
17285: PUSH
17286: LD_INT 106
17288: PPUSH
17289: CALL_OW 274
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 275
17301: PLUS
17302: PUSH
17303: LD_VAR 0 3
17307: PLUS
17308: PUSH
17309: LD_INT 50
17311: LESS
17312: AND
17313: IFFALSE 17325
// spawnNextCrates = true else
17315: LD_ADDR_VAR 0 5
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
17323: GO 17333
// spawnNextCrates = false ;
17325: LD_ADDR_VAR 0 5
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// if spawnNextCrates then
17333: LD_VAR 0 5
17337: IFFALSE 17360
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 5
17344: PPUSH
17345: CALL_OW 12
17349: PPUSH
17350: LD_INT 26
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 55
// until not spawnCrates ;
17360: LD_EXP 21
17364: NOT
17365: IFFALSE 17150
// end ; end_of_file
17367: PPOPN 5
17369: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 266
17379: PUSH
17380: LD_INT 6
17382: EQUAL
17383: PUSH
17384: LD_INT 22
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 30
17396: PUSH
17397: LD_INT 6
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PPUSH
17408: CALL_OW 69
17412: PUSH
17413: LD_INT 1
17415: GREATER
17416: AND
17417: PUSH
17418: LD_EXP 11
17422: NOT
17423: AND
17424: IFFALSE 17435
// Dial_StopConstructAgainSameBuilding ( building ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL 9136 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 266
17444: PUSH
17445: LD_INT 2
17447: EQUAL
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PPUSH
17473: CALL_OW 69
17477: PUSH
17478: LD_INT 1
17480: GREATER
17481: AND
17482: PUSH
17483: LD_EXP 11
17487: NOT
17488: AND
17489: IFFALSE 17500
// Dial_StopConstructAgainSameBuilding ( building ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL 9136 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 255
17509: PUSH
17510: LD_INT 3
17512: EQUAL
17513: PUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 266
17523: PUSH
17524: LD_INT 26
17526: PUSH
17527: LD_INT 4
17529: PUSH
17530: LD_INT 31
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: IN
17538: AND
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_INT 8
17547: PPUSH
17548: CALL_OW 308
17552: AND
17553: IFFALSE 17564
// Dial_StopConstructAgainSameBuilding ( building ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL 9136 0 1
// end ;
17564: PPOPN 2
17566: END
// on BuildingComplete ( building ) do var sold , platSold ;
17567: LD_INT 0
17569: PPUSH
17570: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 255
17580: PUSH
17581: LD_INT 3
17583: EQUAL
17584: PUSH
17585: LD_VAR 0 1
17589: PPUSH
17590: CALL_OW 266
17594: PUSH
17595: LD_INT 6
17597: EQUAL
17598: AND
17599: PUSH
17600: LD_EXP 8
17604: NOT
17605: AND
17606: IFFALSE 17612
// Dial_LabConstructed ;
17608: CALL 8986 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 255
17621: PUSH
17622: LD_INT 3
17624: EQUAL
17625: PUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL_OW 266
17635: PUSH
17636: LD_INT 2
17638: EQUAL
17639: AND
17640: PUSH
17641: LD_EXP 9
17645: NOT
17646: AND
17647: IFFALSE 17653
// Dial_WorkshopConstructed ;
17649: CALL 9061 0 0
// if GetSide ( building ) = 6 then
17653: LD_VAR 0 1
17657: PPUSH
17658: CALL_OW 255
17662: PUSH
17663: LD_INT 6
17665: EQUAL
17666: IFFALSE 17877
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 266
17677: PUSH
17678: LD_INT 31
17680: EQUAL
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_INT 9
17689: PPUSH
17690: CALL_OW 308
17694: AND
17695: IFFALSE 17746
// begin if UnitsInside ( ru2_arm2 ) then
17697: LD_INT 209
17699: PPUSH
17700: CALL_OW 313
17704: IFFALSE 17746
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 209
17713: PPUSH
17714: CALL_OW 313
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17732: LD_VAR 0 2
17736: PPUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 266
17755: PUSH
17756: LD_INT 31
17758: EQUAL
17759: PUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: LD_INT 8
17767: PPUSH
17768: CALL_OW 308
17772: AND
17773: IFFALSE 17809
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_EXP 77
17784: PPUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 74
17794: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 266
17818: PUSH
17819: LD_INT 2
17821: EQUAL
17822: IFFALSE 17877
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17824: LD_EXP 69
17828: PPUSH
17829: LD_INT 25
17831: PUSH
17832: LD_INT 3
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 72
17843: PPUSH
17844: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17848: LD_EXP 69
17852: PPUSH
17853: LD_INT 25
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PPUSH
17863: CALL_OW 72
17867: PPUSH
17868: LD_VAR 0 1
17872: PPUSH
17873: CALL_OW 180
// end ; end ; end ;
17877: PPOPN 3
17879: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17880: LD_VAR 0 1
17884: PUSH
17885: LD_INT 47
17887: EQUAL
17888: PUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: CALL_OW 255
17898: PUSH
17899: LD_INT 3
17901: EQUAL
17902: AND
17903: IFFALSE 17913
// engineResearched = true ;
17905: LD_ADDR_EXP 10
17909: PUSH
17910: LD_INT 1
17912: ST_TO_ADDR
// if tech = tech_Tech1 then
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 48
17920: EQUAL
17921: IFFALSE 17943
// begin wait ( 0 0$5 ) ;
17923: LD_INT 175
17925: PPUSH
17926: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17930: LD_INT 83
17932: PPUSH
17933: LD_INT 1500
17935: PPUSH
17936: LD_INT 0
17938: PPUSH
17939: CALL_OW 486
// end ; end ;
17943: PPOPN 2
17945: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17946: LD_VAR 0 2
17950: PPUSH
17951: CALL_OW 255
17955: PUSH
17956: LD_OWVAR 2
17960: EQUAL
17961: PUSH
17962: LD_VAR 0 2
17966: PPUSH
17967: CALL_OW 302
17971: AND
17972: PUSH
17973: LD_EXP 12
17977: NOT
17978: AND
17979: PUSH
17980: LD_EXP 17
17984: NOT
17985: AND
17986: IFFALSE 17997
// Dial_FirstVehConstructed ( factory ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: CALL 9660 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17997: LD_VAR 0 2
18001: PPUSH
18002: CALL_OW 255
18006: PUSH
18007: LD_OWVAR 2
18011: EQUAL
18012: PUSH
18013: LD_EXP 14
18017: NOT
18018: AND
18019: PUSH
18020: LD_EXP 13
18024: PPUSH
18025: CALL_OW 302
18029: NOT
18030: AND
18031: IFFALSE 18043
// firstVeh = vehicle ;
18033: LD_ADDR_EXP 13
18037: PUSH
18038: LD_VAR 0 1
18042: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
18043: LD_VAR 0 2
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_OWVAR 2
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: CALL_OW 302
18068: AND
18069: PUSH
18070: LD_EXP 17
18074: AND
18075: IFFALSE 18091
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
18077: LD_ADDR_EXP 18
18081: PUSH
18082: LD_EXP 18
18086: PUSH
18087: LD_INT 1
18089: PLUS
18090: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 255
18100: PUSH
18101: LD_OWVAR 2
18105: EQUAL
18106: PUSH
18107: LD_VAR 0 2
18111: PPUSH
18112: CALL_OW 248
18116: PUSH
18117: LD_INT 3
18119: EQUAL
18120: AND
18121: IFFALSE 18137
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18123: LD_ADDR_EXP 44
18127: PUSH
18128: LD_EXP 44
18132: PUSH
18133: LD_INT 1
18135: PLUS
18136: ST_TO_ADDR
// end ;
18137: PPOPN 2
18139: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18140: LD_EXP 19
18144: NOT
18145: PUSH
18146: LD_VAR 0 5
18150: PUSH
18151: LD_INT 1
18153: EQUAL
18154: AND
18155: IFFALSE 18171
// Dial_NewCrates ( x , y ) ;
18157: LD_VAR 0 2
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: CALL 9605 0 2
// end ;
18171: PPOPN 5
18173: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18174: LD_INT 0
18176: PPUSH
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PUSH
18215: FOR_IN
18216: IFFALSE 18409
// if GetTaskList ( i ) > 0 then
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 437
18227: PUSH
18228: LD_INT 0
18230: GREATER
18231: IFFALSE 18407
// for j = 1 to GetTaskList ( i ) do
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: DOUBLE
18239: LD_INT 1
18241: DEC
18242: ST_TO_ADDR
18243: LD_VAR 0 2
18247: PPUSH
18248: CALL_OW 437
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18405
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18256: LD_ADDR_VAR 0 4
18260: PUSH
18261: LD_VAR 0 2
18265: PPUSH
18266: CALL_OW 437
18270: PUSH
18271: LD_VAR 0 3
18275: ARRAY
18276: PUSH
18277: LD_INT 4
18279: ARRAY
18280: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18281: LD_VAR 0 4
18285: PUSH
18286: LD_INT 71
18288: EQUAL
18289: PUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: CALL_OW 255
18299: PUSH
18300: LD_INT 6
18302: EQUAL
18303: PUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: CALL_OW 437
18313: PUSH
18314: LD_VAR 0 3
18318: ARRAY
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PUSH
18324: LD_STRING e
18326: EQUAL
18327: AND
18328: PUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: CALL_OW 247
18338: PUSH
18339: LD_INT 2
18341: EQUAL
18342: AND
18343: OR
18344: IFFALSE 18357
// SetTaskList ( i , [ ] ) ;
18346: LD_VAR 0 2
18350: PPUSH
18351: EMPTY
18352: PPUSH
18353: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18357: LD_VAR 0 4
18361: PUSH
18362: LD_INT 106
18364: EQUAL
18365: PUSH
18366: LD_VAR 0 2
18370: PPUSH
18371: CALL_OW 437
18375: PUSH
18376: LD_VAR 0 3
18380: ARRAY
18381: PUSH
18382: LD_INT 1
18384: ARRAY
18385: PUSH
18386: LD_STRING Y
18388: EQUAL
18389: AND
18390: IFFALSE 18403
// SetTaskList ( i , [ ] ) ;
18392: LD_VAR 0 2
18396: PPUSH
18397: EMPTY
18398: PPUSH
18399: CALL_OW 446
// end ;
18403: GO 18253
18405: POP
18406: POP
18407: GO 18215
18409: POP
18410: POP
// end ;
18411: PPOPN 6
18413: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 255
18423: PUSH
18424: LD_INT 1
18426: EQUAL
18427: PUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 247
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: AND
18442: IFFALSE 18500
// begin if unit in amLeftEngs then
18444: LD_VAR 0 1
18448: PUSH
18449: LD_EXP 86
18453: IN
18454: IFFALSE 18472
// amLeftEngs = amLeftEngs diff unit ;
18456: LD_ADDR_EXP 86
18460: PUSH
18461: LD_EXP 86
18465: PUSH
18466: LD_VAR 0 1
18470: DIFF
18471: ST_TO_ADDR
// if unit in amRightEngs then
18472: LD_VAR 0 1
18476: PUSH
18477: LD_EXP 87
18481: IN
18482: IFFALSE 18500
// amRightEngs = amRightEngs diff unit ;
18484: LD_ADDR_EXP 87
18488: PUSH
18489: LD_EXP 87
18493: PUSH
18494: LD_VAR 0 1
18498: DIFF
18499: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 255
18509: PUSH
18510: LD_INT 6
18512: EQUAL
18513: PUSH
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 247
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: AND
18528: IFFALSE 18558
// if unit in belkovTeam then
18530: LD_VAR 0 1
18534: PUSH
18535: LD_EXP 73
18539: IN
18540: IFFALSE 18558
// belkovTeam = belkovTeam diff unit ;
18542: LD_ADDR_EXP 73
18546: PUSH
18547: LD_EXP 73
18551: PUSH
18552: LD_VAR 0 1
18556: DIFF
18557: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 255
18567: PUSH
18568: LD_INT 3
18570: EQUAL
18571: PUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 247
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: AND
18586: IFFALSE 18602
// lostComradesCounter = lostComradesCounter + 1 ;
18588: LD_ADDR_EXP 43
18592: PUSH
18593: LD_EXP 43
18597: PUSH
18598: LD_INT 1
18600: PLUS
18601: ST_TO_ADDR
// if unit = Burlak then
18602: LD_VAR 0 1
18606: PUSH
18607: LD_EXP 62
18611: EQUAL
18612: IFFALSE 18618
// BurlakIsDead ;
18614: CALL 19929 0 0
// if unit = Beria then
18618: LD_VAR 0 1
18622: PUSH
18623: LD_INT 106
18625: EQUAL
18626: IFFALSE 18632
// BaseDestroyed ;
18628: CALL 19959 0 0
// if unit in platSoldiers then
18632: LD_VAR 0 1
18636: PUSH
18637: LD_EXP 77
18641: IN
18642: IFFALSE 18660
// platSoldiers = platSoldiers diff unit ;
18644: LD_ADDR_EXP 77
18648: PUSH
18649: LD_EXP 77
18653: PUSH
18654: LD_VAR 0 1
18658: DIFF
18659: ST_TO_ADDR
// end ;
18660: PPOPN 1
18662: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 255
18672: PUSH
18673: LD_INT 1
18675: EQUAL
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 247
18686: PUSH
18687: LD_INT 3
18689: EQUAL
18690: AND
18691: IFFALSE 18749
// begin if unit in leftBunkers then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_EXP 82
18702: IN
18703: IFFALSE 18721
// leftBunkers = leftBunkers diff unit ;
18705: LD_ADDR_EXP 82
18709: PUSH
18710: LD_EXP 82
18714: PUSH
18715: LD_VAR 0 1
18719: DIFF
18720: ST_TO_ADDR
// if unit in rightBunkers then
18721: LD_VAR 0 1
18725: PUSH
18726: LD_EXP 83
18730: IN
18731: IFFALSE 18749
// rightBunkers = rightBunkers diff unit ;
18733: LD_ADDR_EXP 83
18737: PUSH
18738: LD_EXP 83
18742: PUSH
18743: LD_VAR 0 1
18747: DIFF
18748: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 255
18758: PUSH
18759: LD_INT 1
18761: EQUAL
18762: PUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 247
18772: PUSH
18773: LD_INT 1
18775: EQUAL
18776: AND
18777: IFFALSE 18807
// if unit in trapTeam then
18779: LD_VAR 0 1
18783: PUSH
18784: LD_EXP 81
18788: IN
18789: IFFALSE 18807
// trapTeam = trapTeam diff unit ;
18791: LD_ADDR_EXP 81
18795: PUSH
18796: LD_EXP 81
18800: PUSH
18801: LD_VAR 0 1
18805: DIFF
18806: ST_TO_ADDR
// end ;
18807: PPOPN 1
18809: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 1
18817: EQUAL
18818: IFFALSE 18828
// captureBelkovVehicle = true ;
18820: LD_ADDR_EXP 38
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// if original_side = 6 then
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 6
18835: EQUAL
18836: IFFALSE 18880
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18838: LD_VAR 0 1
18842: PUSH
18843: LD_VAR 0 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: LD_INT 118
18854: PPUSH
18855: LD_INT 25
18857: PPUSH
18858: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18862: LD_VAR 0 1
18866: PUSH
18867: LD_VAR 0 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 139
// end ; end ;
18880: PPOPN 4
18882: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18883: LD_VAR 0 1
18887: PUSH
18888: LD_INT 3
18890: EQUAL
18891: PUSH
18892: LD_VAR 0 2
18896: PUSH
18897: LD_INT 6
18899: EQUAL
18900: AND
18901: IFFALSE 18907
// AttackComrades ;
18903: CALL 19944 0 0
// end ;
18907: PPOPN 2
18909: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18910: LD_VAR 0 2
18914: PUSH
18915: LD_INT 6
18917: EQUAL
18918: IFFALSE 18932
// SetSide ( building , 3 ) ;
18920: LD_VAR 0 1
18924: PPUSH
18925: LD_INT 3
18927: PPUSH
18928: CALL_OW 235
// end ; end_of_file
18932: PPOPN 3
18934: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18935: LD_EXP 16
18939: PUSH
18940: LD_INT 8
18942: PPUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PPUSH
18967: CALL_OW 71
18971: PUSH
18972: LD_INT 0
18974: EQUAL
18975: AND
18976: IFFALSE 19077
18978: GO 18980
18980: DISABLE
// begin enable ;
18981: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18982: LD_EXP 36
18986: NOT
18987: PUSH
18988: LD_EXP 64
18992: PPUSH
18993: CALL_OW 302
18997: PUSH
18998: LD_EXP 68
19002: PPUSH
19003: CALL_OW 302
19007: OR
19008: AND
19009: IFFALSE 19056
// begin case Query ( QContMission ) of 1 :
19011: LD_STRING QContMission
19013: PPUSH
19014: CALL_OW 97
19018: PUSH
19019: LD_INT 1
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19034
19027: POP
// begin FinishMission ;
19028: CALL 19078 0 0
// end ; 2 :
19032: GO 19054
19034: LD_INT 2
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19053
19042: POP
// begin saveBelkovObjective = true ;
19043: LD_ADDR_EXP 36
19047: PUSH
19048: LD_INT 1
19050: ST_TO_ADDR
// end ; end ;
19051: GO 19054
19053: POP
// end else
19054: GO 19067
// if not belkovSaved then
19056: LD_EXP 37
19060: NOT
19061: IFFALSE 19067
// FinishMission ;
19063: CALL 19078 0 0
// if belkovSaved then
19067: LD_EXP 37
19071: IFFALSE 19077
// FinishMission ;
19073: CALL 19078 0 0
// end ;
19077: END
// function FinishMission ; begin
19078: LD_INT 0
19080: PPUSH
// SetRewards ;
19081: CALL 19102 0 0
// SavePlayerCharacters ;
19085: CALL 19392 0 0
// SaveGlobalVariables ;
19089: CALL 19609 0 0
// YouWin ;
19093: CALL_OW 103
// end ;
19097: LD_VAR 0 1
19101: RET
// function SetRewards ; begin
19102: LD_INT 0
19104: PPUSH
// case initiative of 1 :
19105: LD_EXP 42
19109: PUSH
19110: LD_INT 1
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19131
19118: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19119: LD_STRING Initiative
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
19129: GO 19176
19131: LD_INT 2
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19153
19139: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19140: LD_STRING Initiative
19142: PPUSH
19143: LD_INT 2
19145: NEG
19146: PPUSH
19147: CALL_OW 101
19151: GO 19176
19153: LD_INT 3
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19175
19161: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19162: LD_STRING Initiative
19164: PPUSH
19165: LD_INT 1
19167: NEG
19168: PPUSH
19169: CALL_OW 101
19173: GO 19176
19175: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19176: LD_EXP 37
19180: PUSH
19181: LD_EXP 64
19185: PPUSH
19186: CALL_OW 302
19190: PUSH
19191: LD_EXP 68
19195: PPUSH
19196: CALL_OW 302
19200: OR
19201: AND
19202: IFFALSE 19214
// AddMedal ( Belkov , 1 ) ;
19204: LD_STRING Belkov
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19214: LD_EXP 37
19218: NOT
19219: PUSH
19220: LD_EXP 36
19224: NOT
19225: AND
19226: IFFALSE 19239
// AddMedal ( Belkov , - 1 ) ;
19228: LD_STRING Belkov
19230: PPUSH
19231: LD_INT 1
19233: NEG
19234: PPUSH
19235: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19239: LD_EXP 37
19243: NOT
19244: PUSH
19245: LD_EXP 36
19249: AND
19250: IFFALSE 19263
// AddMedal ( Belkov , - 2 ) ;
19252: LD_STRING Belkov
19254: PPUSH
19255: LD_INT 2
19257: NEG
19258: PPUSH
19259: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19263: LD_EXP 37
19267: PUSH
19268: LD_EXP 6
19272: PUSH
19273: LD_EXP 64
19277: PPUSH
19278: CALL_OW 301
19282: AND
19283: AND
19284: PUSH
19285: LD_EXP 6
19289: NOT
19290: PUSH
19291: LD_EXP 68
19295: PPUSH
19296: CALL_OW 301
19300: AND
19301: OR
19302: IFFALSE 19315
// AddMedal ( Belkov , - 2 ) ;
19304: LD_STRING Belkov
19306: PPUSH
19307: LD_INT 2
19309: NEG
19310: PPUSH
19311: CALL_OW 101
// if lostComradesCounter = 0 then
19315: LD_EXP 43
19319: PUSH
19320: LD_INT 0
19322: EQUAL
19323: IFFALSE 19337
// AddMedal ( NoLosses , 1 ) else
19325: LD_STRING NoLosses
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 101
19335: GO 19347
// AddMedal ( NoLosses , 0 ) ;
19337: LD_STRING NoLosses
19339: PPUSH
19340: LD_INT 0
19342: PPUSH
19343: CALL_OW 101
// GiveMedals ( Main ) ;
19347: LD_STRING Main
19349: PPUSH
19350: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19354: LD_INT 22
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 21
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 69
19382: PPUSH
19383: CALL_OW 43
// end ;
19387: LD_VAR 0 1
19391: RET
// function SavePlayerCharacters ; var othersYour ; begin
19392: LD_INT 0
19394: PPUSH
19395: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19396: LD_EXP 62
19400: PPUSH
19401: LD_STRING Burlak
19403: PPUSH
19404: LD_INT 3
19406: PPUSH
19407: CALL 4357 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19411: LD_EXP 63
19415: PPUSH
19416: LD_STRING Gnyevko
19418: PPUSH
19419: LD_INT 3
19421: PPUSH
19422: CALL 4357 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19426: LD_EXP 70
19430: PPUSH
19431: LD_STRING Kovalyuk
19433: PPUSH
19434: LD_INT 3
19436: PPUSH
19437: CALL 4357 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19441: LD_EXP 64
19445: PPUSH
19446: LD_STRING Belkov
19448: PPUSH
19449: LD_INT 3
19451: PPUSH
19452: CALL 4357 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19456: LD_EXP 68
19460: PPUSH
19461: LD_STRING Belkov2
19463: PPUSH
19464: LD_INT 3
19466: PPUSH
19467: CALL 4357 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19471: LD_EXP 65
19475: PPUSH
19476: LD_STRING Kirilenkova
19478: PPUSH
19479: LD_INT 3
19481: PPUSH
19482: CALL 4357 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19486: LD_ADDR_VAR 0 2
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 21
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 69
19519: PUSH
19520: LD_EXP 62
19524: PUSH
19525: LD_EXP 63
19529: PUSH
19530: LD_EXP 64
19534: PUSH
19535: LD_EXP 68
19539: PUSH
19540: LD_EXP 70
19544: PUSH
19545: LD_EXP 65
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: DIFF
19558: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19559: LD_VAR 0 2
19563: PPUSH
19564: LD_STRING other_survivors
19566: PPUSH
19567: LD_INT 3
19569: PPUSH
19570: CALL 4413 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19574: LD_EXP 77
19578: PPUSH
19579: LD_STRING other_beria
19581: PPUSH
19582: LD_INT 6
19584: PPUSH
19585: CALL 4413 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19589: LD_EXP 69
19593: PPUSH
19594: LD_STRING other_kirov
19596: PPUSH
19597: LD_INT 6
19599: PPUSH
19600: CALL 4413 0 3
// end ;
19604: LD_VAR 0 1
19608: RET
// function SaveGlobalVariables ; var vehicles ; begin
19609: LD_INT 0
19611: PPUSH
19612: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 22
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 50
19640: PUSH
19641: EMPTY
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: ST_TO_ADDR
// if vehicles then
19654: LD_VAR 0 2
19658: IFFALSE 19672
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_STRING 02_Vehicles_1
19667: PPUSH
19668: CALL 5444 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19672: LD_INT 8
19674: PPUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: PPUSH
19688: CALL_OW 70
19692: PPUSH
19693: LD_STRING 02_BeriaBase_2
19695: PPUSH
19696: CALL 5587 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19700: LD_INT 9
19702: PPUSH
19703: LD_INT 22
19705: PUSH
19706: LD_INT 6
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PPUSH
19727: CALL_OW 70
19731: PPUSH
19732: LD_STRING 02_KirovBase_3
19734: PPUSH
19735: CALL 5587 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19739: LD_INT 22
19741: PUSH
19742: LD_INT 3
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 50
19761: PUSH
19762: EMPTY
19763: LIST
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 95
19770: PUSH
19771: LD_INT 8
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: PPUSH
19793: LD_STRING 02_OtherBuildings_4
19795: PPUSH
19796: CALL 5587 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19800: LD_INT 22
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 21
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 50
19822: PUSH
19823: EMPTY
19824: LIST
19825: PUSH
19826: LD_INT 23
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: PPUSH
19847: LD_STRING 02_AmericanBuildings_5
19849: PPUSH
19850: CALL 5587 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19854: LD_EXP 4
19858: PPUSH
19859: LD_STRING 02_MeetBelkovBrother_6
19861: PPUSH
19862: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19866: LD_INT 106
19868: PPUSH
19869: CALL_OW 274
19873: PPUSH
19874: LD_INT 1
19876: PPUSH
19877: CALL_OW 275
19881: PPUSH
19882: LD_STRING 02_BeriaResourceCrates_7
19884: PPUSH
19885: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19889: LD_INT 106
19891: PPUSH
19892: CALL_OW 274
19896: PPUSH
19897: LD_INT 2
19899: PPUSH
19900: CALL_OW 275
19904: PPUSH
19905: LD_STRING 02_BeriaResourceOil_8
19907: PPUSH
19908: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19912: LD_EXP 5
19916: PPUSH
19917: LD_STRING 02_PlatonovOpinion_9
19919: PPUSH
19920: CALL_OW 39
// end ; end_of_file
19924: LD_VAR 0 1
19928: RET
// export function BurlakIsDead ; begin
19929: LD_INT 0
19931: PPUSH
// YouLost ( Burlak ) ;
19932: LD_STRING Burlak
19934: PPUSH
19935: CALL_OW 104
// end ;
19939: LD_VAR 0 1
19943: RET
// export function AttackComrades ; begin
19944: LD_INT 0
19946: PPUSH
// YouLost ( SelfAttack ) ;
19947: LD_STRING SelfAttack
19949: PPUSH
19950: CALL_OW 104
// end ;
19954: LD_VAR 0 1
19958: RET
// export function BaseDestroyed ; begin
19959: LD_INT 0
19961: PPUSH
// YouLost ( Base ) ;
19962: LD_STRING Base
19964: PPUSH
19965: CALL_OW 104
// end ; end_of_file
19969: LD_VAR 0 1
19973: RET
// every 0 0$1 do var engs ;
19974: GO 19976
19976: DISABLE
19977: LD_INT 0
19979: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19980: LD_ADDR_VAR 0 1
19984: PUSH
19985: LD_EXP 69
19989: PPUSH
19990: LD_INT 25
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 72
20004: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 122
// wait ( 0 0$1 ) ;
20014: LD_INT 35
20016: PPUSH
20017: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
20021: LD_VAR 0 1
20025: PPUSH
20026: LD_INT 31
20028: PPUSH
20029: LD_INT 146
20031: PPUSH
20032: LD_INT 107
20034: PPUSH
20035: LD_INT 1
20037: PPUSH
20038: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_INT 31
20049: PPUSH
20050: LD_INT 176
20052: PPUSH
20053: LD_INT 123
20055: PPUSH
20056: LD_INT 5
20058: PPUSH
20059: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
20063: LD_VAR 0 1
20067: PPUSH
20068: LD_INT 31
20070: PPUSH
20071: LD_INT 170
20073: PPUSH
20074: LD_INT 102
20076: PPUSH
20077: LD_INT 4
20079: PPUSH
20080: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
20084: LD_VAR 0 1
20088: PPUSH
20089: LD_INT 31
20091: PPUSH
20092: LD_INT 173
20094: PPUSH
20095: LD_INT 105
20097: PPUSH
20098: LD_INT 4
20100: PPUSH
20101: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20105: LD_VAR 0 1
20109: PPUSH
20110: LD_INT 71
20112: PPUSH
20113: CALL_OW 180
// end ;
20117: PPOPN 1
20119: END
// every 0 0$1 trigger activateAMAI do
20120: LD_EXP 27
20124: IFFALSE 20148
20126: GO 20128
20128: DISABLE
// begin enable ;
20129: ENABLE
// RepairDamageLeftBunkers ;
20130: CALL 20149 0 0
// if Difficulty = 3 then
20134: LD_OWVAR 67
20138: PUSH
20139: LD_INT 3
20141: EQUAL
20142: IFFALSE 20148
// RepairDamageRightBunkers ;
20144: CALL 20357 0 0
// end ;
20148: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20149: LD_INT 0
20151: PPUSH
20152: PPUSH
20153: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20154: LD_EXP 86
20158: NOT
20159: PUSH
20160: LD_INT 17
20162: PPUSH
20163: LD_INT 22
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 21
20175: PUSH
20176: LD_INT 3
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 30
20185: PUSH
20186: LD_INT 31
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 3
20195: PUSH
20196: LD_INT 24
20198: PUSH
20199: LD_INT 1000
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PPUSH
20216: CALL_OW 70
20220: PUSH
20221: LD_INT 0
20223: EQUAL
20224: OR
20225: IFFALSE 20229
// exit ;
20227: GO 20352
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20229: LD_EXP 86
20233: PPUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 60
20239: PUSH
20240: EMPTY
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 72
20251: PPUSH
20252: CALL_OW 122
// for bunker in leftBunkers do
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_EXP 82
20265: PUSH
20266: FOR_IN
20267: IFFALSE 20318
// if GetLives ( bunker ) < 1000 then
20269: LD_VAR 0 3
20273: PPUSH
20274: CALL_OW 256
20278: PUSH
20279: LD_INT 1000
20281: LESS
20282: IFFALSE 20316
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20284: LD_EXP 86
20288: PPUSH
20289: LD_INT 3
20291: PUSH
20292: LD_INT 60
20294: PUSH
20295: EMPTY
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 72
20306: PPUSH
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 190
20316: GO 20266
20318: POP
20319: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20320: LD_EXP 86
20324: PPUSH
20325: LD_INT 3
20327: PUSH
20328: LD_INT 60
20330: PUSH
20331: EMPTY
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 72
20342: PPUSH
20343: LD_EXP 84
20347: PPUSH
20348: CALL_OW 180
// end ;
20352: LD_VAR 0 1
20356: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
20361: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20362: LD_EXP 87
20366: NOT
20367: PUSH
20368: LD_INT 16
20370: PPUSH
20371: LD_INT 22
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 3
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 30
20393: PUSH
20394: LD_INT 31
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 3
20403: PUSH
20404: LD_INT 24
20406: PUSH
20407: LD_INT 1000
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: PPUSH
20424: CALL_OW 70
20428: PUSH
20429: LD_INT 0
20431: EQUAL
20432: OR
20433: IFFALSE 20437
// exit ;
20435: GO 20560
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20437: LD_EXP 87
20441: PPUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 60
20447: PUSH
20448: EMPTY
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 72
20459: PPUSH
20460: CALL_OW 122
// for bunker in rightBunkers do
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: LD_EXP 83
20473: PUSH
20474: FOR_IN
20475: IFFALSE 20526
// if GetLives ( bunker ) < 1000 then
20477: LD_VAR 0 3
20481: PPUSH
20482: CALL_OW 256
20486: PUSH
20487: LD_INT 1000
20489: LESS
20490: IFFALSE 20524
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20492: LD_EXP 87
20496: PPUSH
20497: LD_INT 3
20499: PUSH
20500: LD_INT 60
20502: PUSH
20503: EMPTY
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 72
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: CALL_OW 190
20524: GO 20474
20526: POP
20527: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20528: LD_EXP 87
20532: PPUSH
20533: LD_INT 3
20535: PUSH
20536: LD_INT 60
20538: PUSH
20539: EMPTY
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 72
20550: PPUSH
20551: LD_EXP 85
20555: PPUSH
20556: CALL_OW 180
// end ;
20560: LD_VAR 0 1
20564: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20565: LD_EXP 28
20569: PUSH
20570: LD_EXP 73
20574: AND
20575: IFFALSE 20712
20577: GO 20579
20579: DISABLE
20580: LD_INT 0
20582: PPUSH
20583: PPUSH
20584: PPUSH
// begin enable ;
20585: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_EXP 73
20595: PPUSH
20596: LD_INT 25
20598: PUSH
20599: LD_INT 4
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PPUSH
20606: CALL_OW 72
20610: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: LD_EXP 73
20620: PPUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 24
20626: PUSH
20627: LD_INT 650
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PPUSH
20638: CALL_OW 72
20642: ST_TO_ADDR
// if not damaged and med then
20643: LD_VAR 0 3
20647: NOT
20648: PUSH
20649: LD_VAR 0 2
20653: AND
20654: IFFALSE 20673
// ComMoveXY ( med , 83 , 17 ) else
20656: LD_VAR 0 2
20660: PPUSH
20661: LD_INT 83
20663: PPUSH
20664: LD_INT 17
20666: PPUSH
20667: CALL_OW 111
20671: GO 20712
// if med then
20673: LD_VAR 0 2
20677: IFFALSE 20712
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_INT 83
20686: PPUSH
20687: LD_INT 17
20689: PPUSH
20690: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 1
20706: ARRAY
20707: PPUSH
20708: CALL_OW 128
// end ; end ; end_of_file
20712: PPOPN 3
20714: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20715: LD_INT 22
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 23
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 69
20754: PUSH
20755: LD_INT 2
20757: EQUAL
20758: IFFALSE 20770
20760: GO 20762
20762: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20763: LD_STRING ACH_DEPOT
20765: PPUSH
20766: CALL_OW 543
20770: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20771: LD_EXP 44
20775: PUSH
20776: LD_INT 5
20778: EQUAL
20779: IFFALSE 20791
20781: GO 20783
20783: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20784: LD_STRING ACH_WORKSHOP
20786: PPUSH
20787: CALL_OW 543
20791: END
// every 1 trigger captureBelkovVehicle do
20792: LD_EXP 38
20796: IFFALSE 20808
20798: GO 20800
20800: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20801: LD_STRING ACH_RETAKE
20803: PPUSH
20804: CALL_OW 543
20808: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 100
20816: EQUAL
20817: IFFALSE 21766
// begin if not StreamModeActive then
20819: LD_EXP 90
20823: NOT
20824: IFFALSE 20834
// StreamModeActive := true ;
20826: LD_ADDR_EXP 90
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 0 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 0
20841: EQUAL
20842: IFFALSE 20848
// InitStreamMode ;
20844: CALL 21924 0 0
// if p3 = 1 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 1
20855: EQUAL
20856: IFFALSE 20866
// sRocket := true ;
20858: LD_ADDR_EXP 95
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 2 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 2
20873: EQUAL
20874: IFFALSE 20884
// sSpeed := true ;
20876: LD_ADDR_EXP 94
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 3 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 3
20891: EQUAL
20892: IFFALSE 20902
// sEngine := true ;
20894: LD_ADDR_EXP 96
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 4 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 4
20909: EQUAL
20910: IFFALSE 20920
// sSpec := true ;
20912: LD_ADDR_EXP 93
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 5 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 5
20927: EQUAL
20928: IFFALSE 20938
// sLevel := true ;
20930: LD_ADDR_EXP 97
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 6 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 6
20945: EQUAL
20946: IFFALSE 20956
// sArmoury := true ;
20948: LD_ADDR_EXP 98
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 7 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 7
20963: EQUAL
20964: IFFALSE 20974
// sRadar := true ;
20966: LD_ADDR_EXP 99
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 8 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 8
20981: EQUAL
20982: IFFALSE 20992
// sBunker := true ;
20984: LD_ADDR_EXP 100
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 9 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 9
20999: EQUAL
21000: IFFALSE 21010
// sHack := true ;
21002: LD_ADDR_EXP 101
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 10 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 10
21017: EQUAL
21018: IFFALSE 21028
// sFire := true ;
21020: LD_ADDR_EXP 102
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 11 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 11
21035: EQUAL
21036: IFFALSE 21046
// sRefresh := true ;
21038: LD_ADDR_EXP 103
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 12 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 12
21053: EQUAL
21054: IFFALSE 21064
// sExp := true ;
21056: LD_ADDR_EXP 104
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 13 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 13
21071: EQUAL
21072: IFFALSE 21082
// sDepot := true ;
21074: LD_ADDR_EXP 105
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 14 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 14
21089: EQUAL
21090: IFFALSE 21100
// sFlag := true ;
21092: LD_ADDR_EXP 106
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 15 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 15
21107: EQUAL
21108: IFFALSE 21118
// sKamikadze := true ;
21110: LD_ADDR_EXP 114
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 16 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 16
21125: EQUAL
21126: IFFALSE 21136
// sTroll := true ;
21128: LD_ADDR_EXP 115
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 17 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 17
21143: EQUAL
21144: IFFALSE 21154
// sSlow := true ;
21146: LD_ADDR_EXP 116
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 18 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 18
21161: EQUAL
21162: IFFALSE 21172
// sLack := true ;
21164: LD_ADDR_EXP 117
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 19 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 19
21179: EQUAL
21180: IFFALSE 21190
// sTank := true ;
21182: LD_ADDR_EXP 119
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 20 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 20
21197: EQUAL
21198: IFFALSE 21208
// sRemote := true ;
21200: LD_ADDR_EXP 120
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 21 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 21
21215: EQUAL
21216: IFFALSE 21226
// sPowell := true ;
21218: LD_ADDR_EXP 121
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 22 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 22
21233: EQUAL
21234: IFFALSE 21244
// sTeleport := true ;
21236: LD_ADDR_EXP 124
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 23 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 23
21251: EQUAL
21252: IFFALSE 21262
// sOilTower := true ;
21254: LD_ADDR_EXP 126
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 24 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 24
21269: EQUAL
21270: IFFALSE 21280
// sShovel := true ;
21272: LD_ADDR_EXP 127
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 25 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 25
21287: EQUAL
21288: IFFALSE 21298
// sSheik := true ;
21290: LD_ADDR_EXP 128
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 26 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 26
21305: EQUAL
21306: IFFALSE 21316
// sEarthquake := true ;
21308: LD_ADDR_EXP 130
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 27 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 27
21323: EQUAL
21324: IFFALSE 21334
// sAI := true ;
21326: LD_ADDR_EXP 131
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 28 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 28
21341: EQUAL
21342: IFFALSE 21352
// sCargo := true ;
21344: LD_ADDR_EXP 134
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// if p3 = 29 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 29
21359: EQUAL
21360: IFFALSE 21370
// sDLaser := true ;
21362: LD_ADDR_EXP 135
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// if p3 = 30 then
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 30
21377: EQUAL
21378: IFFALSE 21388
// sExchange := true ;
21380: LD_ADDR_EXP 136
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// if p3 = 31 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 31
21395: EQUAL
21396: IFFALSE 21406
// sFac := true ;
21398: LD_ADDR_EXP 137
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if p3 = 32 then
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 32
21413: EQUAL
21414: IFFALSE 21424
// sPower := true ;
21416: LD_ADDR_EXP 138
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if p3 = 33 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 33
21431: EQUAL
21432: IFFALSE 21442
// sRandom := true ;
21434: LD_ADDR_EXP 139
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// if p3 = 34 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 34
21449: EQUAL
21450: IFFALSE 21460
// sShield := true ;
21452: LD_ADDR_EXP 140
21456: PUSH
21457: LD_INT 1
21459: ST_TO_ADDR
// if p3 = 35 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 35
21467: EQUAL
21468: IFFALSE 21478
// sTime := true ;
21470: LD_ADDR_EXP 141
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// if p3 = 36 then
21478: LD_VAR 0 3
21482: PUSH
21483: LD_INT 36
21485: EQUAL
21486: IFFALSE 21496
// sTools := true ;
21488: LD_ADDR_EXP 142
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// if p3 = 101 then
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 101
21503: EQUAL
21504: IFFALSE 21514
// sSold := true ;
21506: LD_ADDR_EXP 107
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// if p3 = 102 then
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 102
21521: EQUAL
21522: IFFALSE 21532
// sDiff := true ;
21524: LD_ADDR_EXP 108
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if p3 = 103 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 103
21539: EQUAL
21540: IFFALSE 21550
// sFog := true ;
21542: LD_ADDR_EXP 111
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// if p3 = 104 then
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 104
21557: EQUAL
21558: IFFALSE 21568
// sReset := true ;
21560: LD_ADDR_EXP 112
21564: PUSH
21565: LD_INT 1
21567: ST_TO_ADDR
// if p3 = 105 then
21568: LD_VAR 0 3
21572: PUSH
21573: LD_INT 105
21575: EQUAL
21576: IFFALSE 21586
// sSun := true ;
21578: LD_ADDR_EXP 113
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// if p3 = 106 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_INT 106
21593: EQUAL
21594: IFFALSE 21604
// sTiger := true ;
21596: LD_ADDR_EXP 109
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// if p3 = 107 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_INT 107
21611: EQUAL
21612: IFFALSE 21622
// sBomb := true ;
21614: LD_ADDR_EXP 110
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
// if p3 = 108 then
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 108
21629: EQUAL
21630: IFFALSE 21640
// sWound := true ;
21632: LD_ADDR_EXP 118
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if p3 = 109 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 109
21647: EQUAL
21648: IFFALSE 21658
// sBetray := true ;
21650: LD_ADDR_EXP 122
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
// if p3 = 110 then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 110
21665: EQUAL
21666: IFFALSE 21676
// sContamin := true ;
21668: LD_ADDR_EXP 123
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// if p3 = 111 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 111
21683: EQUAL
21684: IFFALSE 21694
// sOil := true ;
21686: LD_ADDR_EXP 125
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// if p3 = 112 then
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 112
21701: EQUAL
21702: IFFALSE 21712
// sStu := true ;
21704: LD_ADDR_EXP 129
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// if p3 = 113 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 113
21719: EQUAL
21720: IFFALSE 21730
// sBazooka := true ;
21722: LD_ADDR_EXP 132
21726: PUSH
21727: LD_INT 1
21729: ST_TO_ADDR
// if p3 = 114 then
21730: LD_VAR 0 3
21734: PUSH
21735: LD_INT 114
21737: EQUAL
21738: IFFALSE 21748
// sMortar := true ;
21740: LD_ADDR_EXP 133
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// if p3 = 115 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_INT 115
21755: EQUAL
21756: IFFALSE 21766
// sRanger := true ;
21758: LD_ADDR_EXP 143
21762: PUSH
21763: LD_INT 1
21765: ST_TO_ADDR
// end ; if p2 = 101 then
21766: LD_VAR 0 2
21770: PUSH
21771: LD_INT 101
21773: EQUAL
21774: IFFALSE 21902
// begin case p3 of 1 :
21776: LD_VAR 0 3
21780: PUSH
21781: LD_INT 1
21783: DOUBLE
21784: EQUAL
21785: IFTRUE 21789
21787: GO 21796
21789: POP
// hHackUnlimitedResources ; 2 :
21790: CALL 32937 0 0
21794: GO 21902
21796: LD_INT 2
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 21811
21804: POP
// hHackSetLevel10 ; 3 :
21805: CALL 33070 0 0
21809: GO 21902
21811: LD_INT 3
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21826
21819: POP
// hHackSetLevel10YourUnits ; 4 :
21820: CALL 33155 0 0
21824: GO 21902
21826: LD_INT 4
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21841
21834: POP
// hHackInvincible ; 5 :
21835: CALL 33603 0 0
21839: GO 21902
21841: LD_INT 5
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21856
21849: POP
// hHackInvisible ; 6 :
21850: CALL 33714 0 0
21854: GO 21902
21856: LD_INT 6
21858: DOUBLE
21859: EQUAL
21860: IFTRUE 21864
21862: GO 21871
21864: POP
// hHackChangeYourSide ; 7 :
21865: CALL 33771 0 0
21869: GO 21902
21871: LD_INT 7
21873: DOUBLE
21874: EQUAL
21875: IFTRUE 21879
21877: GO 21886
21879: POP
// hHackChangeUnitSide ; 8 :
21880: CALL 33813 0 0
21884: GO 21902
21886: LD_INT 8
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 21901
21894: POP
// hHackFog ; end ;
21895: CALL 33914 0 0
21899: GO 21902
21901: POP
// end ; end ;
21902: PPOPN 6
21904: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21905: GO 21907
21907: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21908: LD_STRING initStreamRollete();
21910: PPUSH
21911: CALL_OW 559
// InitStreamMode ;
21915: CALL 21924 0 0
// DefineStreamItems ( ) ;
21919: CALL 22364 0 0
// end ;
21923: END
// function InitStreamMode ; begin
21924: LD_INT 0
21926: PPUSH
// streamModeActive := false ;
21927: LD_ADDR_EXP 90
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// normalCounter := 36 ;
21935: LD_ADDR_EXP 91
21939: PUSH
21940: LD_INT 36
21942: ST_TO_ADDR
// hardcoreCounter := 16 ;
21943: LD_ADDR_EXP 92
21947: PUSH
21948: LD_INT 16
21950: ST_TO_ADDR
// sRocket := false ;
21951: LD_ADDR_EXP 95
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sSpeed := false ;
21959: LD_ADDR_EXP 94
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sEngine := false ;
21967: LD_ADDR_EXP 96
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sSpec := false ;
21975: LD_ADDR_EXP 93
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sLevel := false ;
21983: LD_ADDR_EXP 97
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sArmoury := false ;
21991: LD_ADDR_EXP 98
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// sRadar := false ;
21999: LD_ADDR_EXP 99
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// sBunker := false ;
22007: LD_ADDR_EXP 100
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// sHack := false ;
22015: LD_ADDR_EXP 101
22019: PUSH
22020: LD_INT 0
22022: ST_TO_ADDR
// sFire := false ;
22023: LD_ADDR_EXP 102
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// sRefresh := false ;
22031: LD_ADDR_EXP 103
22035: PUSH
22036: LD_INT 0
22038: ST_TO_ADDR
// sExp := false ;
22039: LD_ADDR_EXP 104
22043: PUSH
22044: LD_INT 0
22046: ST_TO_ADDR
// sDepot := false ;
22047: LD_ADDR_EXP 105
22051: PUSH
22052: LD_INT 0
22054: ST_TO_ADDR
// sFlag := false ;
22055: LD_ADDR_EXP 106
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
// sKamikadze := false ;
22063: LD_ADDR_EXP 114
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// sTroll := false ;
22071: LD_ADDR_EXP 115
22075: PUSH
22076: LD_INT 0
22078: ST_TO_ADDR
// sSlow := false ;
22079: LD_ADDR_EXP 116
22083: PUSH
22084: LD_INT 0
22086: ST_TO_ADDR
// sLack := false ;
22087: LD_ADDR_EXP 117
22091: PUSH
22092: LD_INT 0
22094: ST_TO_ADDR
// sTank := false ;
22095: LD_ADDR_EXP 119
22099: PUSH
22100: LD_INT 0
22102: ST_TO_ADDR
// sRemote := false ;
22103: LD_ADDR_EXP 120
22107: PUSH
22108: LD_INT 0
22110: ST_TO_ADDR
// sPowell := false ;
22111: LD_ADDR_EXP 121
22115: PUSH
22116: LD_INT 0
22118: ST_TO_ADDR
// sTeleport := false ;
22119: LD_ADDR_EXP 124
22123: PUSH
22124: LD_INT 0
22126: ST_TO_ADDR
// sOilTower := false ;
22127: LD_ADDR_EXP 126
22131: PUSH
22132: LD_INT 0
22134: ST_TO_ADDR
// sShovel := false ;
22135: LD_ADDR_EXP 127
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// sSheik := false ;
22143: LD_ADDR_EXP 128
22147: PUSH
22148: LD_INT 0
22150: ST_TO_ADDR
// sEarthquake := false ;
22151: LD_ADDR_EXP 130
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
// sAI := false ;
22159: LD_ADDR_EXP 131
22163: PUSH
22164: LD_INT 0
22166: ST_TO_ADDR
// sCargo := false ;
22167: LD_ADDR_EXP 134
22171: PUSH
22172: LD_INT 0
22174: ST_TO_ADDR
// sDLaser := false ;
22175: LD_ADDR_EXP 135
22179: PUSH
22180: LD_INT 0
22182: ST_TO_ADDR
// sExchange := false ;
22183: LD_ADDR_EXP 136
22187: PUSH
22188: LD_INT 0
22190: ST_TO_ADDR
// sFac := false ;
22191: LD_ADDR_EXP 137
22195: PUSH
22196: LD_INT 0
22198: ST_TO_ADDR
// sPower := false ;
22199: LD_ADDR_EXP 138
22203: PUSH
22204: LD_INT 0
22206: ST_TO_ADDR
// sRandom := false ;
22207: LD_ADDR_EXP 139
22211: PUSH
22212: LD_INT 0
22214: ST_TO_ADDR
// sShield := false ;
22215: LD_ADDR_EXP 140
22219: PUSH
22220: LD_INT 0
22222: ST_TO_ADDR
// sTime := false ;
22223: LD_ADDR_EXP 141
22227: PUSH
22228: LD_INT 0
22230: ST_TO_ADDR
// sTools := false ;
22231: LD_ADDR_EXP 142
22235: PUSH
22236: LD_INT 0
22238: ST_TO_ADDR
// sSold := false ;
22239: LD_ADDR_EXP 107
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// sDiff := false ;
22247: LD_ADDR_EXP 108
22251: PUSH
22252: LD_INT 0
22254: ST_TO_ADDR
// sFog := false ;
22255: LD_ADDR_EXP 111
22259: PUSH
22260: LD_INT 0
22262: ST_TO_ADDR
// sReset := false ;
22263: LD_ADDR_EXP 112
22267: PUSH
22268: LD_INT 0
22270: ST_TO_ADDR
// sSun := false ;
22271: LD_ADDR_EXP 113
22275: PUSH
22276: LD_INT 0
22278: ST_TO_ADDR
// sTiger := false ;
22279: LD_ADDR_EXP 109
22283: PUSH
22284: LD_INT 0
22286: ST_TO_ADDR
// sBomb := false ;
22287: LD_ADDR_EXP 110
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// sWound := false ;
22295: LD_ADDR_EXP 118
22299: PUSH
22300: LD_INT 0
22302: ST_TO_ADDR
// sBetray := false ;
22303: LD_ADDR_EXP 122
22307: PUSH
22308: LD_INT 0
22310: ST_TO_ADDR
// sContamin := false ;
22311: LD_ADDR_EXP 123
22315: PUSH
22316: LD_INT 0
22318: ST_TO_ADDR
// sOil := false ;
22319: LD_ADDR_EXP 125
22323: PUSH
22324: LD_INT 0
22326: ST_TO_ADDR
// sStu := false ;
22327: LD_ADDR_EXP 129
22331: PUSH
22332: LD_INT 0
22334: ST_TO_ADDR
// sBazooka := false ;
22335: LD_ADDR_EXP 132
22339: PUSH
22340: LD_INT 0
22342: ST_TO_ADDR
// sMortar := false ;
22343: LD_ADDR_EXP 133
22347: PUSH
22348: LD_INT 0
22350: ST_TO_ADDR
// sRanger := false ;
22351: LD_ADDR_EXP 143
22355: PUSH
22356: LD_INT 0
22358: ST_TO_ADDR
// end ;
22359: LD_VAR 0 1
22363: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
22369: PPUSH
22370: PPUSH
// result := [ ] ;
22371: LD_ADDR_VAR 0 1
22375: PUSH
22376: EMPTY
22377: ST_TO_ADDR
// if campaign_id = 1 then
22378: LD_OWVAR 69
22382: PUSH
22383: LD_INT 1
22385: EQUAL
22386: IFFALSE 25324
// begin case mission_number of 1 :
22388: LD_OWVAR 70
22392: PUSH
22393: LD_INT 1
22395: DOUBLE
22396: EQUAL
22397: IFTRUE 22401
22399: GO 22465
22401: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
22402: LD_ADDR_VAR 0 1
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 4
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 23
22430: PUSH
22431: LD_INT 26
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 101
22447: PUSH
22448: LD_INT 102
22450: PUSH
22451: LD_INT 106
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: ST_TO_ADDR
22463: GO 25322
22465: LD_INT 2
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22545
22473: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
22474: LD_ADDR_VAR 0 1
22478: PUSH
22479: LD_INT 2
22481: PUSH
22482: LD_INT 4
22484: PUSH
22485: LD_INT 11
22487: PUSH
22488: LD_INT 12
22490: PUSH
22491: LD_INT 15
22493: PUSH
22494: LD_INT 16
22496: PUSH
22497: LD_INT 22
22499: PUSH
22500: LD_INT 23
22502: PUSH
22503: LD_INT 26
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 101
22519: PUSH
22520: LD_INT 102
22522: PUSH
22523: LD_INT 105
22525: PUSH
22526: LD_INT 106
22528: PUSH
22529: LD_INT 108
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 25322
22545: LD_INT 3
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22629
22553: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 5
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: LD_INT 12
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 26
22585: PUSH
22586: LD_INT 36
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 101
22603: PUSH
22604: LD_INT 102
22606: PUSH
22607: LD_INT 105
22609: PUSH
22610: LD_INT 106
22612: PUSH
22613: LD_INT 108
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: ST_TO_ADDR
22627: GO 25322
22629: LD_INT 4
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22721
22637: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22638: LD_ADDR_VAR 0 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 5
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: LD_INT 11
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: LD_INT 15
22663: PUSH
22664: LD_INT 16
22666: PUSH
22667: LD_INT 22
22669: PUSH
22670: LD_INT 23
22672: PUSH
22673: LD_INT 26
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 101
22695: PUSH
22696: LD_INT 102
22698: PUSH
22699: LD_INT 105
22701: PUSH
22702: LD_INT 106
22704: PUSH
22705: LD_INT 108
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: ST_TO_ADDR
22719: GO 25322
22721: LD_INT 5
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22829
22729: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22730: LD_ADDR_VAR 0 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 4
22740: PUSH
22741: LD_INT 5
22743: PUSH
22744: LD_INT 6
22746: PUSH
22747: LD_INT 8
22749: PUSH
22750: LD_INT 11
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 15
22758: PUSH
22759: LD_INT 16
22761: PUSH
22762: LD_INT 22
22764: PUSH
22765: LD_INT 23
22767: PUSH
22768: LD_INT 25
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: LD_INT 36
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 101
22795: PUSH
22796: LD_INT 102
22798: PUSH
22799: LD_INT 105
22801: PUSH
22802: LD_INT 106
22804: PUSH
22805: LD_INT 108
22807: PUSH
22808: LD_INT 109
22810: PUSH
22811: LD_INT 112
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: ST_TO_ADDR
22827: GO 25322
22829: LD_INT 6
22831: DOUBLE
22832: EQUAL
22833: IFTRUE 22837
22835: GO 22957
22837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22838: LD_ADDR_VAR 0 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 4
22848: PUSH
22849: LD_INT 5
22851: PUSH
22852: LD_INT 6
22854: PUSH
22855: LD_INT 8
22857: PUSH
22858: LD_INT 11
22860: PUSH
22861: LD_INT 12
22863: PUSH
22864: LD_INT 15
22866: PUSH
22867: LD_INT 16
22869: PUSH
22870: LD_INT 20
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 26
22887: PUSH
22888: LD_INT 30
22890: PUSH
22891: LD_INT 31
22893: PUSH
22894: LD_INT 32
22896: PUSH
22897: LD_INT 36
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 105
22929: PUSH
22930: LD_INT 106
22932: PUSH
22933: LD_INT 108
22935: PUSH
22936: LD_INT 109
22938: PUSH
22939: LD_INT 112
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 25322
22957: LD_INT 7
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 23065
22965: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 4
22976: PUSH
22977: LD_INT 5
22979: PUSH
22980: LD_INT 7
22982: PUSH
22983: LD_INT 11
22985: PUSH
22986: LD_INT 12
22988: PUSH
22989: LD_INT 15
22991: PUSH
22992: LD_INT 16
22994: PUSH
22995: LD_INT 20
22997: PUSH
22998: LD_INT 21
23000: PUSH
23001: LD_INT 22
23003: PUSH
23004: LD_INT 23
23006: PUSH
23007: LD_INT 25
23009: PUSH
23010: LD_INT 26
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 101
23031: PUSH
23032: LD_INT 102
23034: PUSH
23035: LD_INT 103
23037: PUSH
23038: LD_INT 105
23040: PUSH
23041: LD_INT 106
23043: PUSH
23044: LD_INT 108
23046: PUSH
23047: LD_INT 112
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: ST_TO_ADDR
23063: GO 25322
23065: LD_INT 8
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23073
23071: GO 23201
23073: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23074: LD_ADDR_VAR 0 1
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 4
23084: PUSH
23085: LD_INT 5
23087: PUSH
23088: LD_INT 6
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 8
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 15
23105: PUSH
23106: LD_INT 16
23108: PUSH
23109: LD_INT 20
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_INT 23
23120: PUSH
23121: LD_INT 25
23123: PUSH
23124: LD_INT 26
23126: PUSH
23127: LD_INT 30
23129: PUSH
23130: LD_INT 31
23132: PUSH
23133: LD_INT 32
23135: PUSH
23136: LD_INT 36
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 101
23163: PUSH
23164: LD_INT 102
23166: PUSH
23167: LD_INT 103
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 108
23178: PUSH
23179: LD_INT 109
23181: PUSH
23182: LD_INT 112
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: ST_TO_ADDR
23199: GO 25322
23201: LD_INT 9
23203: DOUBLE
23204: EQUAL
23205: IFTRUE 23209
23207: GO 23345
23209: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 4
23220: PUSH
23221: LD_INT 5
23223: PUSH
23224: LD_INT 6
23226: PUSH
23227: LD_INT 7
23229: PUSH
23230: LD_INT 8
23232: PUSH
23233: LD_INT 11
23235: PUSH
23236: LD_INT 12
23238: PUSH
23239: LD_INT 15
23241: PUSH
23242: LD_INT 16
23244: PUSH
23245: LD_INT 20
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 23
23256: PUSH
23257: LD_INT 25
23259: PUSH
23260: LD_INT 26
23262: PUSH
23263: LD_INT 28
23265: PUSH
23266: LD_INT 30
23268: PUSH
23269: LD_INT 31
23271: PUSH
23272: LD_INT 32
23274: PUSH
23275: LD_INT 36
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 101
23303: PUSH
23304: LD_INT 102
23306: PUSH
23307: LD_INT 103
23309: PUSH
23310: LD_INT 105
23312: PUSH
23313: LD_INT 106
23315: PUSH
23316: LD_INT 108
23318: PUSH
23319: LD_INT 109
23321: PUSH
23322: LD_INT 112
23324: PUSH
23325: LD_INT 114
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
23343: GO 25322
23345: LD_INT 10
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23537
23353: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
23354: LD_ADDR_VAR 0 1
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: LD_INT 4
23364: PUSH
23365: LD_INT 5
23367: PUSH
23368: LD_INT 6
23370: PUSH
23371: LD_INT 7
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 9
23379: PUSH
23380: LD_INT 10
23382: PUSH
23383: LD_INT 11
23385: PUSH
23386: LD_INT 12
23388: PUSH
23389: LD_INT 13
23391: PUSH
23392: LD_INT 14
23394: PUSH
23395: LD_INT 15
23397: PUSH
23398: LD_INT 16
23400: PUSH
23401: LD_INT 17
23403: PUSH
23404: LD_INT 18
23406: PUSH
23407: LD_INT 19
23409: PUSH
23410: LD_INT 20
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: LD_INT 24
23424: PUSH
23425: LD_INT 25
23427: PUSH
23428: LD_INT 26
23430: PUSH
23431: LD_INT 28
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 36
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 114
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: ST_TO_ADDR
23535: GO 25322
23537: LD_INT 11
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23737
23545: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23546: LD_ADDR_VAR 0 1
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: LD_INT 6
23565: PUSH
23566: LD_INT 7
23568: PUSH
23569: LD_INT 8
23571: PUSH
23572: LD_INT 9
23574: PUSH
23575: LD_INT 10
23577: PUSH
23578: LD_INT 11
23580: PUSH
23581: LD_INT 12
23583: PUSH
23584: LD_INT 13
23586: PUSH
23587: LD_INT 14
23589: PUSH
23590: LD_INT 15
23592: PUSH
23593: LD_INT 16
23595: PUSH
23596: LD_INT 17
23598: PUSH
23599: LD_INT 18
23601: PUSH
23602: LD_INT 19
23604: PUSH
23605: LD_INT 20
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_INT 23
23616: PUSH
23617: LD_INT 24
23619: PUSH
23620: LD_INT 25
23622: PUSH
23623: LD_INT 26
23625: PUSH
23626: LD_INT 28
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 31
23634: PUSH
23635: LD_INT 32
23637: PUSH
23638: LD_INT 34
23640: PUSH
23641: LD_INT 36
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 101
23679: PUSH
23680: LD_INT 102
23682: PUSH
23683: LD_INT 103
23685: PUSH
23686: LD_INT 104
23688: PUSH
23689: LD_INT 105
23691: PUSH
23692: LD_INT 106
23694: PUSH
23695: LD_INT 107
23697: PUSH
23698: LD_INT 108
23700: PUSH
23701: LD_INT 109
23703: PUSH
23704: LD_INT 110
23706: PUSH
23707: LD_INT 111
23709: PUSH
23710: LD_INT 112
23712: PUSH
23713: LD_INT 114
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: ST_TO_ADDR
23735: GO 25322
23737: LD_INT 12
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23953
23745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23746: LD_ADDR_VAR 0 1
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: LD_INT 6
23768: PUSH
23769: LD_INT 7
23771: PUSH
23772: LD_INT 8
23774: PUSH
23775: LD_INT 9
23777: PUSH
23778: LD_INT 10
23780: PUSH
23781: LD_INT 11
23783: PUSH
23784: LD_INT 12
23786: PUSH
23787: LD_INT 13
23789: PUSH
23790: LD_INT 14
23792: PUSH
23793: LD_INT 15
23795: PUSH
23796: LD_INT 16
23798: PUSH
23799: LD_INT 17
23801: PUSH
23802: LD_INT 18
23804: PUSH
23805: LD_INT 19
23807: PUSH
23808: LD_INT 20
23810: PUSH
23811: LD_INT 21
23813: PUSH
23814: LD_INT 22
23816: PUSH
23817: LD_INT 23
23819: PUSH
23820: LD_INT 24
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 26
23828: PUSH
23829: LD_INT 27
23831: PUSH
23832: LD_INT 28
23834: PUSH
23835: LD_INT 30
23837: PUSH
23838: LD_INT 31
23840: PUSH
23841: LD_INT 32
23843: PUSH
23844: LD_INT 33
23846: PUSH
23847: LD_INT 34
23849: PUSH
23850: LD_INT 36
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 101
23891: PUSH
23892: LD_INT 102
23894: PUSH
23895: LD_INT 103
23897: PUSH
23898: LD_INT 104
23900: PUSH
23901: LD_INT 105
23903: PUSH
23904: LD_INT 106
23906: PUSH
23907: LD_INT 107
23909: PUSH
23910: LD_INT 108
23912: PUSH
23913: LD_INT 109
23915: PUSH
23916: LD_INT 110
23918: PUSH
23919: LD_INT 111
23921: PUSH
23922: LD_INT 112
23924: PUSH
23925: LD_INT 113
23927: PUSH
23928: LD_INT 114
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 25322
23953: LD_INT 13
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24157
23961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: LD_INT 8
23984: PUSH
23985: LD_INT 9
23987: PUSH
23988: LD_INT 10
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: LD_INT 14
23999: PUSH
24000: LD_INT 15
24002: PUSH
24003: LD_INT 16
24005: PUSH
24006: LD_INT 17
24008: PUSH
24009: LD_INT 18
24011: PUSH
24012: LD_INT 19
24014: PUSH
24015: LD_INT 20
24017: PUSH
24018: LD_INT 21
24020: PUSH
24021: LD_INT 22
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 24
24029: PUSH
24030: LD_INT 25
24032: PUSH
24033: LD_INT 26
24035: PUSH
24036: LD_INT 27
24038: PUSH
24039: LD_INT 28
24041: PUSH
24042: LD_INT 30
24044: PUSH
24045: LD_INT 31
24047: PUSH
24048: LD_INT 32
24050: PUSH
24051: LD_INT 33
24053: PUSH
24054: LD_INT 34
24056: PUSH
24057: LD_INT 36
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 101
24095: PUSH
24096: LD_INT 102
24098: PUSH
24099: LD_INT 103
24101: PUSH
24102: LD_INT 104
24104: PUSH
24105: LD_INT 105
24107: PUSH
24108: LD_INT 106
24110: PUSH
24111: LD_INT 107
24113: PUSH
24114: LD_INT 108
24116: PUSH
24117: LD_INT 109
24119: PUSH
24120: LD_INT 110
24122: PUSH
24123: LD_INT 111
24125: PUSH
24126: LD_INT 112
24128: PUSH
24129: LD_INT 113
24131: PUSH
24132: LD_INT 114
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: ST_TO_ADDR
24155: GO 25322
24157: LD_INT 14
24159: DOUBLE
24160: EQUAL
24161: IFTRUE 24165
24163: GO 24377
24165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24166: LD_ADDR_VAR 0 1
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: LD_INT 4
24182: PUSH
24183: LD_INT 5
24185: PUSH
24186: LD_INT 6
24188: PUSH
24189: LD_INT 7
24191: PUSH
24192: LD_INT 8
24194: PUSH
24195: LD_INT 9
24197: PUSH
24198: LD_INT 10
24200: PUSH
24201: LD_INT 11
24203: PUSH
24204: LD_INT 12
24206: PUSH
24207: LD_INT 13
24209: PUSH
24210: LD_INT 14
24212: PUSH
24213: LD_INT 15
24215: PUSH
24216: LD_INT 16
24218: PUSH
24219: LD_INT 17
24221: PUSH
24222: LD_INT 18
24224: PUSH
24225: LD_INT 19
24227: PUSH
24228: LD_INT 20
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 22
24236: PUSH
24237: LD_INT 23
24239: PUSH
24240: LD_INT 24
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 26
24248: PUSH
24249: LD_INT 27
24251: PUSH
24252: LD_INT 28
24254: PUSH
24255: LD_INT 29
24257: PUSH
24258: LD_INT 30
24260: PUSH
24261: LD_INT 31
24263: PUSH
24264: LD_INT 32
24266: PUSH
24267: LD_INT 33
24269: PUSH
24270: LD_INT 34
24272: PUSH
24273: LD_INT 36
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 101
24315: PUSH
24316: LD_INT 102
24318: PUSH
24319: LD_INT 103
24321: PUSH
24322: LD_INT 104
24324: PUSH
24325: LD_INT 105
24327: PUSH
24328: LD_INT 106
24330: PUSH
24331: LD_INT 107
24333: PUSH
24334: LD_INT 108
24336: PUSH
24337: LD_INT 109
24339: PUSH
24340: LD_INT 110
24342: PUSH
24343: LD_INT 111
24345: PUSH
24346: LD_INT 112
24348: PUSH
24349: LD_INT 113
24351: PUSH
24352: LD_INT 114
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25322
24377: LD_INT 15
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24597
24385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 103
24541: PUSH
24542: LD_INT 104
24544: PUSH
24545: LD_INT 105
24547: PUSH
24548: LD_INT 106
24550: PUSH
24551: LD_INT 107
24553: PUSH
24554: LD_INT 108
24556: PUSH
24557: LD_INT 109
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 111
24565: PUSH
24566: LD_INT 112
24568: PUSH
24569: LD_INT 113
24571: PUSH
24572: LD_INT 114
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: ST_TO_ADDR
24595: GO 25322
24597: LD_INT 16
24599: DOUBLE
24600: EQUAL
24601: IFTRUE 24605
24603: GO 24729
24605: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 4
24616: PUSH
24617: LD_INT 5
24619: PUSH
24620: LD_INT 7
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 15
24631: PUSH
24632: LD_INT 16
24634: PUSH
24635: LD_INT 20
24637: PUSH
24638: LD_INT 21
24640: PUSH
24641: LD_INT 22
24643: PUSH
24644: LD_INT 23
24646: PUSH
24647: LD_INT 25
24649: PUSH
24650: LD_INT 26
24652: PUSH
24653: LD_INT 30
24655: PUSH
24656: LD_INT 31
24658: PUSH
24659: LD_INT 32
24661: PUSH
24662: LD_INT 33
24664: PUSH
24665: LD_INT 34
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 101
24691: PUSH
24692: LD_INT 102
24694: PUSH
24695: LD_INT 103
24697: PUSH
24698: LD_INT 106
24700: PUSH
24701: LD_INT 108
24703: PUSH
24704: LD_INT 112
24706: PUSH
24707: LD_INT 113
24709: PUSH
24710: LD_INT 114
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: ST_TO_ADDR
24727: GO 25322
24729: LD_INT 17
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24737
24735: GO 24949
24737: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24738: LD_ADDR_VAR 0 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: LD_INT 4
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: LD_INT 6
24760: PUSH
24761: LD_INT 7
24763: PUSH
24764: LD_INT 8
24766: PUSH
24767: LD_INT 9
24769: PUSH
24770: LD_INT 10
24772: PUSH
24773: LD_INT 11
24775: PUSH
24776: LD_INT 12
24778: PUSH
24779: LD_INT 13
24781: PUSH
24782: LD_INT 14
24784: PUSH
24785: LD_INT 15
24787: PUSH
24788: LD_INT 16
24790: PUSH
24791: LD_INT 17
24793: PUSH
24794: LD_INT 18
24796: PUSH
24797: LD_INT 19
24799: PUSH
24800: LD_INT 20
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_INT 23
24811: PUSH
24812: LD_INT 24
24814: PUSH
24815: LD_INT 25
24817: PUSH
24818: LD_INT 26
24820: PUSH
24821: LD_INT 27
24823: PUSH
24824: LD_INT 28
24826: PUSH
24827: LD_INT 29
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 31
24835: PUSH
24836: LD_INT 32
24838: PUSH
24839: LD_INT 33
24841: PUSH
24842: LD_INT 34
24844: PUSH
24845: LD_INT 36
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 101
24887: PUSH
24888: LD_INT 102
24890: PUSH
24891: LD_INT 103
24893: PUSH
24894: LD_INT 104
24896: PUSH
24897: LD_INT 105
24899: PUSH
24900: LD_INT 106
24902: PUSH
24903: LD_INT 107
24905: PUSH
24906: LD_INT 108
24908: PUSH
24909: LD_INT 109
24911: PUSH
24912: LD_INT 110
24914: PUSH
24915: LD_INT 111
24917: PUSH
24918: LD_INT 112
24920: PUSH
24921: LD_INT 113
24923: PUSH
24924: LD_INT 114
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: ST_TO_ADDR
24947: GO 25322
24949: LD_INT 18
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 25093
24957: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24958: LD_ADDR_VAR 0 1
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 5
24971: PUSH
24972: LD_INT 7
24974: PUSH
24975: LD_INT 11
24977: PUSH
24978: LD_INT 12
24980: PUSH
24981: LD_INT 15
24983: PUSH
24984: LD_INT 16
24986: PUSH
24987: LD_INT 20
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 22
24995: PUSH
24996: LD_INT 23
24998: PUSH
24999: LD_INT 25
25001: PUSH
25002: LD_INT 26
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: LD_INT 31
25010: PUSH
25011: LD_INT 32
25013: PUSH
25014: LD_INT 33
25016: PUSH
25017: LD_INT 34
25019: PUSH
25020: LD_INT 35
25022: PUSH
25023: LD_INT 36
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 101
25051: PUSH
25052: LD_INT 102
25054: PUSH
25055: LD_INT 103
25057: PUSH
25058: LD_INT 106
25060: PUSH
25061: LD_INT 108
25063: PUSH
25064: LD_INT 112
25066: PUSH
25067: LD_INT 113
25069: PUSH
25070: LD_INT 114
25072: PUSH
25073: LD_INT 115
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: ST_TO_ADDR
25091: GO 25322
25093: LD_INT 19
25095: DOUBLE
25096: EQUAL
25097: IFTRUE 25101
25099: GO 25321
25101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25102: LD_ADDR_VAR 0 1
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: LD_INT 4
25118: PUSH
25119: LD_INT 5
25121: PUSH
25122: LD_INT 6
25124: PUSH
25125: LD_INT 7
25127: PUSH
25128: LD_INT 8
25130: PUSH
25131: LD_INT 9
25133: PUSH
25134: LD_INT 10
25136: PUSH
25137: LD_INT 11
25139: PUSH
25140: LD_INT 12
25142: PUSH
25143: LD_INT 13
25145: PUSH
25146: LD_INT 14
25148: PUSH
25149: LD_INT 15
25151: PUSH
25152: LD_INT 16
25154: PUSH
25155: LD_INT 17
25157: PUSH
25158: LD_INT 18
25160: PUSH
25161: LD_INT 19
25163: PUSH
25164: LD_INT 20
25166: PUSH
25167: LD_INT 21
25169: PUSH
25170: LD_INT 22
25172: PUSH
25173: LD_INT 23
25175: PUSH
25176: LD_INT 24
25178: PUSH
25179: LD_INT 25
25181: PUSH
25182: LD_INT 26
25184: PUSH
25185: LD_INT 27
25187: PUSH
25188: LD_INT 28
25190: PUSH
25191: LD_INT 29
25193: PUSH
25194: LD_INT 30
25196: PUSH
25197: LD_INT 31
25199: PUSH
25200: LD_INT 32
25202: PUSH
25203: LD_INT 33
25205: PUSH
25206: LD_INT 34
25208: PUSH
25209: LD_INT 35
25211: PUSH
25212: LD_INT 36
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 101
25255: PUSH
25256: LD_INT 102
25258: PUSH
25259: LD_INT 103
25261: PUSH
25262: LD_INT 104
25264: PUSH
25265: LD_INT 105
25267: PUSH
25268: LD_INT 106
25270: PUSH
25271: LD_INT 107
25273: PUSH
25274: LD_INT 108
25276: PUSH
25277: LD_INT 109
25279: PUSH
25280: LD_INT 110
25282: PUSH
25283: LD_INT 111
25285: PUSH
25286: LD_INT 112
25288: PUSH
25289: LD_INT 113
25291: PUSH
25292: LD_INT 114
25294: PUSH
25295: LD_INT 115
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: ST_TO_ADDR
25319: GO 25322
25321: POP
// end else
25322: GO 25541
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
25324: LD_ADDR_VAR 0 1
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: LD_INT 5
25343: PUSH
25344: LD_INT 6
25346: PUSH
25347: LD_INT 7
25349: PUSH
25350: LD_INT 8
25352: PUSH
25353: LD_INT 9
25355: PUSH
25356: LD_INT 10
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: LD_INT 12
25364: PUSH
25365: LD_INT 13
25367: PUSH
25368: LD_INT 14
25370: PUSH
25371: LD_INT 15
25373: PUSH
25374: LD_INT 16
25376: PUSH
25377: LD_INT 17
25379: PUSH
25380: LD_INT 18
25382: PUSH
25383: LD_INT 19
25385: PUSH
25386: LD_INT 20
25388: PUSH
25389: LD_INT 21
25391: PUSH
25392: LD_INT 22
25394: PUSH
25395: LD_INT 23
25397: PUSH
25398: LD_INT 24
25400: PUSH
25401: LD_INT 25
25403: PUSH
25404: LD_INT 26
25406: PUSH
25407: LD_INT 27
25409: PUSH
25410: LD_INT 28
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: LD_INT 30
25418: PUSH
25419: LD_INT 31
25421: PUSH
25422: LD_INT 32
25424: PUSH
25425: LD_INT 33
25427: PUSH
25428: LD_INT 34
25430: PUSH
25431: LD_INT 35
25433: PUSH
25434: LD_INT 36
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 101
25477: PUSH
25478: LD_INT 102
25480: PUSH
25481: LD_INT 103
25483: PUSH
25484: LD_INT 104
25486: PUSH
25487: LD_INT 105
25489: PUSH
25490: LD_INT 106
25492: PUSH
25493: LD_INT 107
25495: PUSH
25496: LD_INT 108
25498: PUSH
25499: LD_INT 109
25501: PUSH
25502: LD_INT 110
25504: PUSH
25505: LD_INT 111
25507: PUSH
25508: LD_INT 112
25510: PUSH
25511: LD_INT 113
25513: PUSH
25514: LD_INT 114
25516: PUSH
25517: LD_INT 115
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// if result then
25541: LD_VAR 0 1
25545: IFFALSE 25834
// begin normal :=  ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_STRING 
25554: ST_TO_ADDR
// hardcore :=  ;
25555: LD_ADDR_VAR 0 4
25559: PUSH
25560: LD_STRING 
25562: ST_TO_ADDR
// for i = 1 to normalCounter do
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: DOUBLE
25569: LD_INT 1
25571: DEC
25572: ST_TO_ADDR
25573: LD_EXP 91
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25680
// begin tmp := 0 ;
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_STRING 0
25588: ST_TO_ADDR
// if result [ 1 ] then
25589: LD_VAR 0 1
25593: PUSH
25594: LD_INT 1
25596: ARRAY
25597: IFFALSE 25662
// if result [ 1 ] [ 1 ] = i then
25599: LD_VAR 0 1
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: PUSH
25612: LD_VAR 0 5
25616: EQUAL
25617: IFFALSE 25662
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 1
25631: PPUSH
25632: LD_VAR 0 1
25636: PUSH
25637: LD_INT 1
25639: ARRAY
25640: PPUSH
25641: LD_INT 1
25643: PPUSH
25644: CALL_OW 3
25648: PPUSH
25649: CALL_OW 1
25653: ST_TO_ADDR
// tmp := 1 ;
25654: LD_ADDR_VAR 0 2
25658: PUSH
25659: LD_STRING 1
25661: ST_TO_ADDR
// end ; normal := normal & tmp ;
25662: LD_ADDR_VAR 0 3
25666: PUSH
25667: LD_VAR 0 3
25671: PUSH
25672: LD_VAR 0 2
25676: STR
25677: ST_TO_ADDR
// end ;
25678: GO 25578
25680: POP
25681: POP
// for i = 1 to hardcoreCounter do
25682: LD_ADDR_VAR 0 5
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_EXP 92
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25803
// begin tmp := 0 ;
25700: LD_ADDR_VAR 0 2
25704: PUSH
25705: LD_STRING 0
25707: ST_TO_ADDR
// if result [ 2 ] then
25708: LD_VAR 0 1
25712: PUSH
25713: LD_INT 2
25715: ARRAY
25716: IFFALSE 25785
// if result [ 2 ] [ 1 ] = 100 + i then
25718: LD_VAR 0 1
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: PUSH
25727: LD_INT 1
25729: ARRAY
25730: PUSH
25731: LD_INT 100
25733: PUSH
25734: LD_VAR 0 5
25738: PLUS
25739: EQUAL
25740: IFFALSE 25785
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25742: LD_ADDR_VAR 0 1
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_INT 2
25754: PPUSH
25755: LD_VAR 0 1
25759: PUSH
25760: LD_INT 2
25762: ARRAY
25763: PPUSH
25764: LD_INT 1
25766: PPUSH
25767: CALL_OW 3
25771: PPUSH
25772: CALL_OW 1
25776: ST_TO_ADDR
// tmp := 1 ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_STRING 1
25784: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25785: LD_ADDR_VAR 0 4
25789: PUSH
25790: LD_VAR 0 4
25794: PUSH
25795: LD_VAR 0 2
25799: STR
25800: ST_TO_ADDR
// end ;
25801: GO 25697
25803: POP
25804: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25805: LD_STRING getStreamItemsFromMission("
25807: PUSH
25808: LD_VAR 0 3
25812: STR
25813: PUSH
25814: LD_STRING ","
25816: STR
25817: PUSH
25818: LD_VAR 0 4
25822: STR
25823: PUSH
25824: LD_STRING ")
25826: STR
25827: PPUSH
25828: CALL_OW 559
// end else
25832: GO 25841
// ToLua ( getStreamItemsFromMission("","") ) ;
25834: LD_STRING getStreamItemsFromMission("","")
25836: PPUSH
25837: CALL_OW 559
// end ;
25841: LD_VAR 0 1
25845: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25846: LD_EXP 90
25850: PUSH
25851: LD_EXP 95
25855: AND
25856: IFFALSE 25980
25858: GO 25860
25860: DISABLE
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
// begin enable ;
25865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25866: LD_ADDR_VAR 0 2
25870: PUSH
25871: LD_INT 22
25873: PUSH
25874: LD_OWVAR 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 34
25888: PUSH
25889: LD_INT 7
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 34
25898: PUSH
25899: LD_INT 45
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 34
25908: PUSH
25909: LD_INT 28
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 47
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PPUSH
25937: CALL_OW 69
25941: ST_TO_ADDR
// if not tmp then
25942: LD_VAR 0 2
25946: NOT
25947: IFFALSE 25951
// exit ;
25949: GO 25980
// for i in tmp do
25951: LD_ADDR_VAR 0 1
25955: PUSH
25956: LD_VAR 0 2
25960: PUSH
25961: FOR_IN
25962: IFFALSE 25978
// begin SetLives ( i , 0 ) ;
25964: LD_VAR 0 1
25968: PPUSH
25969: LD_INT 0
25971: PPUSH
25972: CALL_OW 234
// end ;
25976: GO 25961
25978: POP
25979: POP
// end ;
25980: PPOPN 2
25982: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25983: LD_EXP 90
25987: PUSH
25988: LD_EXP 96
25992: AND
25993: IFFALSE 26077
25995: GO 25997
25997: DISABLE
25998: LD_INT 0
26000: PPUSH
26001: PPUSH
// begin enable ;
26002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26003: LD_ADDR_VAR 0 2
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_OWVAR 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 32
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: ST_TO_ADDR
// if not tmp then
26039: LD_VAR 0 2
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26077
// for i in tmp do
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: LD_VAR 0 2
26057: PUSH
26058: FOR_IN
26059: IFFALSE 26075
// begin SetLives ( i , 0 ) ;
26061: LD_VAR 0 1
26065: PPUSH
26066: LD_INT 0
26068: PPUSH
26069: CALL_OW 234
// end ;
26073: GO 26058
26075: POP
26076: POP
// end ;
26077: PPOPN 2
26079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26080: LD_EXP 90
26084: PUSH
26085: LD_EXP 93
26089: AND
26090: IFFALSE 26183
26092: GO 26094
26094: DISABLE
26095: LD_INT 0
26097: PPUSH
// begin enable ;
26098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 25
26121: PUSH
26122: LD_INT 5
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 9
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 8
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PPUSH
26159: CALL_OW 69
26163: PUSH
26164: FOR_IN
26165: IFFALSE 26181
// begin SetClass ( i , 1 ) ;
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_INT 1
26174: PPUSH
26175: CALL_OW 336
// end ;
26179: GO 26164
26181: POP
26182: POP
// end ;
26183: PPOPN 1
26185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26186: LD_EXP 90
26190: PUSH
26191: LD_EXP 94
26195: AND
26196: PUSH
26197: LD_OWVAR 65
26201: PUSH
26202: LD_INT 7
26204: LESS
26205: AND
26206: IFFALSE 26220
26208: GO 26210
26210: DISABLE
// begin enable ;
26211: ENABLE
// game_speed := 7 ;
26212: LD_ADDR_OWVAR 65
26216: PUSH
26217: LD_INT 7
26219: ST_TO_ADDR
// end ;
26220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26221: LD_EXP 90
26225: PUSH
26226: LD_EXP 97
26230: AND
26231: IFFALSE 26433
26233: GO 26235
26235: DISABLE
26236: LD_INT 0
26238: PPUSH
26239: PPUSH
26240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26241: LD_ADDR_VAR 0 3
26245: PUSH
26246: LD_INT 81
26248: PUSH
26249: LD_OWVAR 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 21
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: ST_TO_ADDR
// if not tmp then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26433
// if tmp > 5 then
26286: LD_VAR 0 3
26290: PUSH
26291: LD_INT 5
26293: GREATER
26294: IFFALSE 26306
// k := 5 else
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_INT 5
26303: ST_TO_ADDR
26304: GO 26316
// k := tmp ;
26306: LD_ADDR_VAR 0 2
26310: PUSH
26311: LD_VAR 0 3
26315: ST_TO_ADDR
// for i := 1 to k do
26316: LD_ADDR_VAR 0 1
26320: PUSH
26321: DOUBLE
26322: LD_INT 1
26324: DEC
26325: ST_TO_ADDR
26326: LD_VAR 0 2
26330: PUSH
26331: FOR_TO
26332: IFFALSE 26431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26334: LD_VAR 0 3
26338: PUSH
26339: LD_VAR 0 1
26343: ARRAY
26344: PPUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 4
26352: MOD
26353: PUSH
26354: LD_INT 1
26356: PLUS
26357: PPUSH
26358: CALL_OW 259
26362: PUSH
26363: LD_INT 10
26365: LESS
26366: IFFALSE 26429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26368: LD_VAR 0 3
26372: PUSH
26373: LD_VAR 0 1
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 1
26383: PUSH
26384: LD_INT 4
26386: MOD
26387: PUSH
26388: LD_INT 1
26390: PLUS
26391: PPUSH
26392: LD_VAR 0 3
26396: PUSH
26397: LD_VAR 0 1
26401: ARRAY
26402: PPUSH
26403: LD_VAR 0 1
26407: PUSH
26408: LD_INT 4
26410: MOD
26411: PUSH
26412: LD_INT 1
26414: PLUS
26415: PPUSH
26416: CALL_OW 259
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: PPUSH
26425: CALL_OW 237
26429: GO 26331
26431: POP
26432: POP
// end ;
26433: PPOPN 3
26435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26436: LD_EXP 90
26440: PUSH
26441: LD_EXP 98
26445: AND
26446: IFFALSE 26466
26448: GO 26450
26450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26451: LD_INT 4
26453: PPUSH
26454: LD_OWVAR 2
26458: PPUSH
26459: LD_INT 0
26461: PPUSH
26462: CALL_OW 324
26466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26467: LD_EXP 90
26471: PUSH
26472: LD_EXP 127
26476: AND
26477: IFFALSE 26497
26479: GO 26481
26481: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26482: LD_INT 19
26484: PPUSH
26485: LD_OWVAR 2
26489: PPUSH
26490: LD_INT 0
26492: PPUSH
26493: CALL_OW 324
26497: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26498: LD_EXP 90
26502: PUSH
26503: LD_EXP 99
26507: AND
26508: IFFALSE 26610
26510: GO 26512
26512: DISABLE
26513: LD_INT 0
26515: PPUSH
26516: PPUSH
// begin enable ;
26517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26518: LD_ADDR_VAR 0 2
26522: PUSH
26523: LD_INT 22
26525: PUSH
26526: LD_OWVAR 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 34
26540: PUSH
26541: LD_INT 11
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 34
26550: PUSH
26551: LD_INT 30
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: ST_TO_ADDR
// if not tmp then
26572: LD_VAR 0 2
26576: NOT
26577: IFFALSE 26581
// exit ;
26579: GO 26610
// for i in tmp do
26581: LD_ADDR_VAR 0 1
26585: PUSH
26586: LD_VAR 0 2
26590: PUSH
26591: FOR_IN
26592: IFFALSE 26608
// begin SetLives ( i , 0 ) ;
26594: LD_VAR 0 1
26598: PPUSH
26599: LD_INT 0
26601: PPUSH
26602: CALL_OW 234
// end ;
26606: GO 26591
26608: POP
26609: POP
// end ;
26610: PPOPN 2
26612: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26613: LD_EXP 90
26617: PUSH
26618: LD_EXP 100
26622: AND
26623: IFFALSE 26643
26625: GO 26627
26627: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26628: LD_INT 32
26630: PPUSH
26631: LD_OWVAR 2
26635: PPUSH
26636: LD_INT 0
26638: PPUSH
26639: CALL_OW 324
26643: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26644: LD_EXP 90
26648: PUSH
26649: LD_EXP 101
26653: AND
26654: IFFALSE 26835
26656: GO 26658
26658: DISABLE
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26664: LD_ADDR_VAR 0 2
26668: PUSH
26669: LD_INT 22
26671: PUSH
26672: LD_OWVAR 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 33
26683: PUSH
26684: LD_INT 3
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: ST_TO_ADDR
// if not tmp then
26700: LD_VAR 0 2
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26835
// side := 0 ;
26709: LD_ADDR_VAR 0 3
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// for i := 1 to 8 do
26717: LD_ADDR_VAR 0 1
26721: PUSH
26722: DOUBLE
26723: LD_INT 1
26725: DEC
26726: ST_TO_ADDR
26727: LD_INT 8
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26779
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26733: LD_OWVAR 2
26737: PUSH
26738: LD_VAR 0 1
26742: NONEQUAL
26743: PUSH
26744: LD_OWVAR 2
26748: PPUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 81
26758: PUSH
26759: LD_INT 2
26761: EQUAL
26762: AND
26763: IFFALSE 26777
// begin side := i ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_VAR 0 1
26774: ST_TO_ADDR
// break ;
26775: GO 26779
// end ;
26777: GO 26730
26779: POP
26780: POP
// if not side then
26781: LD_VAR 0 3
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26835
// for i := 1 to tmp do
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: DOUBLE
26796: LD_INT 1
26798: DEC
26799: ST_TO_ADDR
26800: LD_VAR 0 2
26804: PUSH
26805: FOR_TO
26806: IFFALSE 26833
// if Prob ( 60 ) then
26808: LD_INT 60
26810: PPUSH
26811: CALL_OW 13
26815: IFFALSE 26831
// SetSide ( i , side ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: LD_VAR 0 3
26826: PPUSH
26827: CALL_OW 235
26831: GO 26805
26833: POP
26834: POP
// end ;
26835: PPOPN 3
26837: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26838: LD_EXP 90
26842: PUSH
26843: LD_EXP 103
26847: AND
26848: IFFALSE 26967
26850: GO 26852
26852: DISABLE
26853: LD_INT 0
26855: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 22
26863: PUSH
26864: LD_OWVAR 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 21
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: LD_INT 23
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: PPUSH
26905: CALL_OW 69
26909: PUSH
26910: FOR_IN
26911: IFFALSE 26965
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 257
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 4
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: IN
26941: IFFALSE 26963
// SetClass ( un , rand ( 1 , 4 ) ) ;
26943: LD_VAR 0 1
26947: PPUSH
26948: LD_INT 1
26950: PPUSH
26951: LD_INT 4
26953: PPUSH
26954: CALL_OW 12
26958: PPUSH
26959: CALL_OW 336
26963: GO 26910
26965: POP
26966: POP
// end ;
26967: PPOPN 1
26969: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26970: LD_EXP 90
26974: PUSH
26975: LD_EXP 102
26979: AND
26980: IFFALSE 27059
26982: GO 26984
26984: DISABLE
26985: LD_INT 0
26987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26988: LD_ADDR_VAR 0 1
26992: PUSH
26993: LD_INT 22
26995: PUSH
26996: LD_OWVAR 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 21
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 69
27023: ST_TO_ADDR
// if not tmp then
27024: LD_VAR 0 1
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 1
27040: PPUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 12
27050: ARRAY
27051: PPUSH
27052: LD_INT 100
27054: PPUSH
27055: CALL_OW 234
// end ;
27059: PPOPN 1
27061: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27062: LD_EXP 90
27066: PUSH
27067: LD_EXP 104
27071: AND
27072: IFFALSE 27170
27074: GO 27076
27076: DISABLE
27077: LD_INT 0
27079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27080: LD_ADDR_VAR 0 1
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_OWVAR 2
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 21
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PPUSH
27111: CALL_OW 69
27115: ST_TO_ADDR
// if not tmp then
27116: LD_VAR 0 1
27120: NOT
27121: IFFALSE 27125
// exit ;
27123: GO 27170
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 1
27132: PPUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL_OW 12
27142: ARRAY
27143: PPUSH
27144: LD_INT 1
27146: PPUSH
27147: LD_INT 4
27149: PPUSH
27150: CALL_OW 12
27154: PPUSH
27155: LD_INT 3000
27157: PPUSH
27158: LD_INT 9000
27160: PPUSH
27161: CALL_OW 12
27165: PPUSH
27166: CALL_OW 492
// end ;
27170: PPOPN 1
27172: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27173: LD_EXP 90
27177: PUSH
27178: LD_EXP 105
27182: AND
27183: IFFALSE 27203
27185: GO 27187
27187: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27188: LD_INT 1
27190: PPUSH
27191: LD_OWVAR 2
27195: PPUSH
27196: LD_INT 0
27198: PPUSH
27199: CALL_OW 324
27203: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27204: LD_EXP 90
27208: PUSH
27209: LD_EXP 106
27213: AND
27214: IFFALSE 27297
27216: GO 27218
27218: DISABLE
27219: LD_INT 0
27221: PPUSH
27222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 2
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27297
// for i in tmp do
27268: LD_ADDR_VAR 0 1
27272: PUSH
27273: LD_VAR 0 2
27277: PUSH
27278: FOR_IN
27279: IFFALSE 27295
// SetBLevel ( i , 10 ) ;
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_INT 10
27288: PPUSH
27289: CALL_OW 241
27293: GO 27278
27295: POP
27296: POP
// end ;
27297: PPOPN 2
27299: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27300: LD_EXP 90
27304: PUSH
27305: LD_EXP 107
27309: AND
27310: IFFALSE 27421
27312: GO 27314
27314: DISABLE
27315: LD_INT 0
27317: PPUSH
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 25
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PPUSH
27351: CALL_OW 69
27355: ST_TO_ADDR
// if not tmp then
27356: LD_VAR 0 3
27360: NOT
27361: IFFALSE 27365
// exit ;
27363: GO 27421
// un := tmp [ rand ( 1 , tmp ) ] ;
27365: LD_ADDR_VAR 0 2
27369: PUSH
27370: LD_VAR 0 3
27374: PUSH
27375: LD_INT 1
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: CALL_OW 12
27387: ARRAY
27388: ST_TO_ADDR
// if Crawls ( un ) then
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 318
27398: IFFALSE 27409
// ComWalk ( un ) ;
27400: LD_VAR 0 2
27404: PPUSH
27405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_INT 5
27416: PPUSH
27417: CALL_OW 336
// end ;
27421: PPOPN 3
27423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
27424: LD_EXP 90
27428: PUSH
27429: LD_EXP 108
27433: AND
27434: PUSH
27435: LD_OWVAR 67
27439: PUSH
27440: LD_INT 3
27442: LESS
27443: AND
27444: IFFALSE 27463
27446: GO 27448
27448: DISABLE
// Difficulty := Difficulty + 1 ;
27449: LD_ADDR_OWVAR 67
27453: PUSH
27454: LD_OWVAR 67
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: ST_TO_ADDR
27463: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27464: LD_EXP 90
27468: PUSH
27469: LD_EXP 109
27473: AND
27474: IFFALSE 27577
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
// begin for i := 1 to 5 do
27482: LD_ADDR_VAR 0 1
27486: PUSH
27487: DOUBLE
27488: LD_INT 1
27490: DEC
27491: ST_TO_ADDR
27492: LD_INT 5
27494: PUSH
27495: FOR_TO
27496: IFFALSE 27575
// begin uc_nation := nation_nature ;
27498: LD_ADDR_OWVAR 21
27502: PUSH
27503: LD_INT 0
27505: ST_TO_ADDR
// uc_side := 0 ;
27506: LD_ADDR_OWVAR 20
27510: PUSH
27511: LD_INT 0
27513: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27514: LD_ADDR_OWVAR 29
27518: PUSH
27519: LD_INT 12
27521: PUSH
27522: LD_INT 12
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// hc_agressivity := 20 ;
27529: LD_ADDR_OWVAR 35
27533: PUSH
27534: LD_INT 20
27536: ST_TO_ADDR
// hc_class := class_tiger ;
27537: LD_ADDR_OWVAR 28
27541: PUSH
27542: LD_INT 14
27544: ST_TO_ADDR
// hc_gallery :=  ;
27545: LD_ADDR_OWVAR 33
27549: PUSH
27550: LD_STRING 
27552: ST_TO_ADDR
// hc_name :=  ;
27553: LD_ADDR_OWVAR 26
27557: PUSH
27558: LD_STRING 
27560: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27561: CALL_OW 44
27565: PPUSH
27566: LD_INT 0
27568: PPUSH
27569: CALL_OW 51
// end ;
27573: GO 27495
27575: POP
27576: POP
// end ;
27577: PPOPN 1
27579: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27580: LD_EXP 90
27584: PUSH
27585: LD_EXP 110
27589: AND
27590: IFFALSE 27599
27592: GO 27594
27594: DISABLE
// StreamSibBomb ;
27595: CALL 27600 0 0
27599: END
// export function StreamSibBomb ; var i , x , y ; begin
27600: LD_INT 0
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
// result := false ;
27606: LD_ADDR_VAR 0 1
27610: PUSH
27611: LD_INT 0
27613: ST_TO_ADDR
// for i := 1 to 16 do
27614: LD_ADDR_VAR 0 2
27618: PUSH
27619: DOUBLE
27620: LD_INT 1
27622: DEC
27623: ST_TO_ADDR
27624: LD_INT 16
27626: PUSH
27627: FOR_TO
27628: IFFALSE 27827
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_INT 10
27637: PUSH
27638: LD_INT 20
27640: PUSH
27641: LD_INT 30
27643: PUSH
27644: LD_INT 40
27646: PUSH
27647: LD_INT 50
27649: PUSH
27650: LD_INT 60
27652: PUSH
27653: LD_INT 70
27655: PUSH
27656: LD_INT 80
27658: PUSH
27659: LD_INT 90
27661: PUSH
27662: LD_INT 100
27664: PUSH
27665: LD_INT 110
27667: PUSH
27668: LD_INT 120
27670: PUSH
27671: LD_INT 130
27673: PUSH
27674: LD_INT 140
27676: PUSH
27677: LD_INT 150
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PPUSH
27700: LD_INT 15
27702: PPUSH
27703: CALL_OW 12
27707: ARRAY
27708: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27709: LD_ADDR_VAR 0 4
27713: PUSH
27714: LD_INT 10
27716: PUSH
27717: LD_INT 20
27719: PUSH
27720: LD_INT 30
27722: PUSH
27723: LD_INT 40
27725: PUSH
27726: LD_INT 50
27728: PUSH
27729: LD_INT 60
27731: PUSH
27732: LD_INT 70
27734: PUSH
27735: LD_INT 80
27737: PUSH
27738: LD_INT 90
27740: PUSH
27741: LD_INT 100
27743: PUSH
27744: LD_INT 110
27746: PUSH
27747: LD_INT 120
27749: PUSH
27750: LD_INT 130
27752: PUSH
27753: LD_INT 140
27755: PUSH
27756: LD_INT 150
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PPUSH
27779: LD_INT 15
27781: PPUSH
27782: CALL_OW 12
27786: ARRAY
27787: ST_TO_ADDR
// if ValidHex ( x , y ) then
27788: LD_VAR 0 3
27792: PPUSH
27793: LD_VAR 0 4
27797: PPUSH
27798: CALL_OW 488
27802: IFFALSE 27825
// begin result := [ x , y ] ;
27804: LD_ADDR_VAR 0 1
27808: PUSH
27809: LD_VAR 0 3
27813: PUSH
27814: LD_VAR 0 4
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// break ;
27823: GO 27827
// end ; end ;
27825: GO 27627
27827: POP
27828: POP
// if result then
27829: LD_VAR 0 1
27833: IFFALSE 27893
// begin ToLua ( playSibBomb() ) ;
27835: LD_STRING playSibBomb()
27837: PPUSH
27838: CALL_OW 559
// wait ( 0 0$14 ) ;
27842: LD_INT 490
27844: PPUSH
27845: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27849: LD_VAR 0 1
27853: PUSH
27854: LD_INT 1
27856: ARRAY
27857: PPUSH
27858: LD_VAR 0 1
27862: PUSH
27863: LD_INT 2
27865: ARRAY
27866: PPUSH
27867: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27871: LD_VAR 0 1
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PPUSH
27880: LD_VAR 0 1
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: CALL_OW 429
// end ; end ;
27893: LD_VAR 0 1
27897: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27898: LD_EXP 90
27902: PUSH
27903: LD_EXP 112
27907: AND
27908: IFFALSE 27920
27910: GO 27912
27912: DISABLE
// YouLost (  ) ;
27913: LD_STRING 
27915: PPUSH
27916: CALL_OW 104
27920: END
// every 0 0$1 trigger StreamModeActive and sFog do
27921: LD_EXP 90
27925: PUSH
27926: LD_EXP 111
27930: AND
27931: IFFALSE 27945
27933: GO 27935
27935: DISABLE
// FogOff ( your_side ) ;
27936: LD_OWVAR 2
27940: PPUSH
27941: CALL_OW 344
27945: END
// every 0 0$1 trigger StreamModeActive and sSun do
27946: LD_EXP 90
27950: PUSH
27951: LD_EXP 113
27955: AND
27956: IFFALSE 27984
27958: GO 27960
27960: DISABLE
// begin solar_recharge_percent := 0 ;
27961: LD_ADDR_OWVAR 79
27965: PUSH
27966: LD_INT 0
27968: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27969: LD_INT 10500
27971: PPUSH
27972: CALL_OW 67
// solar_recharge_percent := 100 ;
27976: LD_ADDR_OWVAR 79
27980: PUSH
27981: LD_INT 100
27983: ST_TO_ADDR
// end ;
27984: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27985: LD_EXP 90
27989: PUSH
27990: LD_EXP 114
27994: AND
27995: IFFALSE 28234
27997: GO 27999
27999: DISABLE
28000: LD_INT 0
28002: PPUSH
28003: PPUSH
28004: PPUSH
// begin tmp := [ ] ;
28005: LD_ADDR_VAR 0 3
28009: PUSH
28010: EMPTY
28011: ST_TO_ADDR
// for i := 1 to 6 do
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: DOUBLE
28018: LD_INT 1
28020: DEC
28021: ST_TO_ADDR
28022: LD_INT 6
28024: PUSH
28025: FOR_TO
28026: IFFALSE 28131
// begin uc_nation := nation_nature ;
28028: LD_ADDR_OWVAR 21
28032: PUSH
28033: LD_INT 0
28035: ST_TO_ADDR
// uc_side := 0 ;
28036: LD_ADDR_OWVAR 20
28040: PUSH
28041: LD_INT 0
28043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28044: LD_ADDR_OWVAR 29
28048: PUSH
28049: LD_INT 12
28051: PUSH
28052: LD_INT 12
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: ST_TO_ADDR
// hc_agressivity := 20 ;
28059: LD_ADDR_OWVAR 35
28063: PUSH
28064: LD_INT 20
28066: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28067: LD_ADDR_OWVAR 28
28071: PUSH
28072: LD_INT 17
28074: ST_TO_ADDR
// hc_gallery :=  ;
28075: LD_ADDR_OWVAR 33
28079: PUSH
28080: LD_STRING 
28082: ST_TO_ADDR
// hc_name :=  ;
28083: LD_ADDR_OWVAR 26
28087: PUSH
28088: LD_STRING 
28090: ST_TO_ADDR
// un := CreateHuman ;
28091: LD_ADDR_VAR 0 2
28095: PUSH
28096: CALL_OW 44
28100: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28101: LD_VAR 0 2
28105: PPUSH
28106: LD_INT 1
28108: PPUSH
28109: CALL_OW 51
// tmp := tmp ^ un ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 3
28122: PUSH
28123: LD_VAR 0 2
28127: ADD
28128: ST_TO_ADDR
// end ;
28129: GO 28025
28131: POP
28132: POP
// repeat wait ( 0 0$1 ) ;
28133: LD_INT 35
28135: PPUSH
28136: CALL_OW 67
// for un in tmp do
28140: LD_ADDR_VAR 0 2
28144: PUSH
28145: LD_VAR 0 3
28149: PUSH
28150: FOR_IN
28151: IFFALSE 28225
// begin if IsDead ( un ) then
28153: LD_VAR 0 2
28157: PPUSH
28158: CALL_OW 301
28162: IFFALSE 28182
// begin tmp := tmp diff un ;
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_VAR 0 3
28173: PUSH
28174: LD_VAR 0 2
28178: DIFF
28179: ST_TO_ADDR
// continue ;
28180: GO 28150
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28182: LD_VAR 0 2
28186: PPUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 22
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 69
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: CALL_OW 74
28218: PPUSH
28219: CALL_OW 115
// end ;
28223: GO 28150
28225: POP
28226: POP
// until not tmp ;
28227: LD_VAR 0 3
28231: NOT
28232: IFFALSE 28133
// end ;
28234: PPOPN 3
28236: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28237: LD_EXP 90
28241: PUSH
28242: LD_EXP 115
28246: AND
28247: IFFALSE 28301
28249: GO 28251
28251: DISABLE
// begin ToLua ( displayTroll(); ) ;
28252: LD_STRING displayTroll();
28254: PPUSH
28255: CALL_OW 559
// wait ( 3 3$00 ) ;
28259: LD_INT 6300
28261: PPUSH
28262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28266: LD_STRING hideTroll();
28268: PPUSH
28269: CALL_OW 559
// wait ( 1 1$00 ) ;
28273: LD_INT 2100
28275: PPUSH
28276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28280: LD_STRING displayTroll();
28282: PPUSH
28283: CALL_OW 559
// wait ( 1 1$00 ) ;
28287: LD_INT 2100
28289: PPUSH
28290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28294: LD_STRING hideTroll();
28296: PPUSH
28297: CALL_OW 559
// end ;
28301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28302: LD_EXP 90
28306: PUSH
28307: LD_EXP 116
28311: AND
28312: IFFALSE 28375
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin p := 0 ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// repeat game_speed := 1 ;
28328: LD_ADDR_OWVAR 65
28332: PUSH
28333: LD_INT 1
28335: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28336: LD_INT 35
28338: PPUSH
28339: CALL_OW 67
// p := p + 1 ;
28343: LD_ADDR_VAR 0 1
28347: PUSH
28348: LD_VAR 0 1
28352: PUSH
28353: LD_INT 1
28355: PLUS
28356: ST_TO_ADDR
// until p >= 60 ;
28357: LD_VAR 0 1
28361: PUSH
28362: LD_INT 60
28364: GREATEREQUAL
28365: IFFALSE 28328
// game_speed := 4 ;
28367: LD_ADDR_OWVAR 65
28371: PUSH
28372: LD_INT 4
28374: ST_TO_ADDR
// end ;
28375: PPOPN 1
28377: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28378: LD_EXP 90
28382: PUSH
28383: LD_EXP 117
28387: AND
28388: IFFALSE 28534
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28397: LD_ADDR_VAR 0 1
28401: PUSH
28402: LD_INT 22
28404: PUSH
28405: LD_OWVAR 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not depot then
28451: LD_VAR 0 1
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28534
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28460: LD_ADDR_VAR 0 2
28464: PUSH
28465: LD_VAR 0 1
28469: PUSH
28470: LD_INT 1
28472: PPUSH
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL_OW 12
28482: ARRAY
28483: PPUSH
28484: CALL_OW 274
28488: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 2
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_INT 3
28526: PPUSH
28527: LD_INT 0
28529: PPUSH
28530: CALL_OW 277
// end ;
28534: PPOPN 2
28536: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28537: LD_EXP 90
28541: PUSH
28542: LD_EXP 118
28546: AND
28547: IFFALSE 28644
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 22
28562: PUSH
28563: LD_OWVAR 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 21
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 23
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: PPUSH
28604: CALL_OW 69
28608: ST_TO_ADDR
// if not tmp then
28609: LD_VAR 0 1
28613: NOT
28614: IFFALSE 28618
// exit ;
28616: GO 28644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28618: LD_VAR 0 1
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: PPUSH
28637: LD_INT 200
28639: PPUSH
28640: CALL_OW 234
// end ;
28644: PPOPN 1
28646: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28647: LD_EXP 90
28651: PUSH
28652: LD_EXP 119
28656: AND
28657: IFFALSE 28736
28659: GO 28661
28661: DISABLE
28662: LD_INT 0
28664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28665: LD_ADDR_VAR 0 1
28669: PUSH
28670: LD_INT 22
28672: PUSH
28673: LD_OWVAR 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 21
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not tmp then
28701: LD_VAR 0 1
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28710: LD_VAR 0 1
28714: PUSH
28715: LD_INT 1
28717: PPUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 12
28727: ARRAY
28728: PPUSH
28729: LD_INT 60
28731: PPUSH
28732: CALL_OW 234
// end ;
28736: PPOPN 1
28738: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28739: LD_EXP 90
28743: PUSH
28744: LD_EXP 120
28748: AND
28749: IFFALSE 28848
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
// begin enable ;
28758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_INT 22
28766: PUSH
28767: LD_OWVAR 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 61
28778: PUSH
28779: EMPTY
28780: LIST
28781: PUSH
28782: LD_INT 33
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 1
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28848
// for i in tmp do
28811: LD_ADDR_VAR 0 2
28815: PUSH
28816: LD_VAR 0 1
28820: PUSH
28821: FOR_IN
28822: IFFALSE 28846
// if IsControledBy ( i ) then
28824: LD_VAR 0 2
28828: PPUSH
28829: CALL_OW 312
28833: IFFALSE 28844
// ComUnlink ( i ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: CALL_OW 136
28844: GO 28821
28846: POP
28847: POP
// end ;
28848: PPOPN 2
28850: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28851: LD_EXP 90
28855: PUSH
28856: LD_EXP 121
28860: AND
28861: IFFALSE 29001
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
// begin ToLua ( displayPowell(); ) ;
28870: LD_STRING displayPowell();
28872: PPUSH
28873: CALL_OW 559
// uc_side := 0 ;
28877: LD_ADDR_OWVAR 20
28881: PUSH
28882: LD_INT 0
28884: ST_TO_ADDR
// uc_nation := 2 ;
28885: LD_ADDR_OWVAR 21
28889: PUSH
28890: LD_INT 2
28892: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28893: LD_ADDR_OWVAR 37
28897: PUSH
28898: LD_INT 14
28900: ST_TO_ADDR
// vc_engine := engine_siberite ;
28901: LD_ADDR_OWVAR 39
28905: PUSH
28906: LD_INT 3
28908: ST_TO_ADDR
// vc_control := control_apeman ;
28909: LD_ADDR_OWVAR 38
28913: PUSH
28914: LD_INT 5
28916: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28917: LD_ADDR_OWVAR 40
28921: PUSH
28922: LD_INT 29
28924: ST_TO_ADDR
// un := CreateVehicle ;
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: CALL_OW 45
28934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28935: LD_VAR 0 2
28939: PPUSH
28940: LD_INT 1
28942: PPUSH
28943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28947: LD_INT 35
28949: PPUSH
28950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28954: LD_VAR 0 2
28958: PPUSH
28959: LD_INT 22
28961: PUSH
28962: LD_OWVAR 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PPUSH
28971: CALL_OW 69
28975: PPUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: CALL_OW 74
28985: PPUSH
28986: CALL_OW 115
// until IsDead ( un ) ;
28990: LD_VAR 0 2
28994: PPUSH
28995: CALL_OW 301
28999: IFFALSE 28947
// end ;
29001: PPOPN 2
29003: END
// every 0 0$1 trigger StreamModeActive and sStu do
29004: LD_EXP 90
29008: PUSH
29009: LD_EXP 129
29013: AND
29014: IFFALSE 29030
29016: GO 29018
29018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29019: LD_STRING displayStucuk();
29021: PPUSH
29022: CALL_OW 559
// ResetFog ;
29026: CALL_OW 335
// end ;
29030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29031: LD_EXP 90
29035: PUSH
29036: LD_EXP 122
29040: AND
29041: IFFALSE 29182
29043: GO 29045
29045: DISABLE
29046: LD_INT 0
29048: PPUSH
29049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29050: LD_ADDR_VAR 0 2
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 21
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: ST_TO_ADDR
// if not tmp then
29086: LD_VAR 0 2
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29182
// un := tmp [ rand ( 1 , tmp ) ] ;
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: LD_VAR 0 2
29104: PUSH
29105: LD_INT 1
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: CALL_OW 12
29117: ARRAY
29118: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29119: LD_VAR 0 1
29123: PPUSH
29124: LD_INT 0
29126: PPUSH
29127: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_OWVAR 3
29140: PUSH
29141: LD_VAR 0 1
29145: DIFF
29146: PPUSH
29147: LD_VAR 0 1
29151: PPUSH
29152: CALL_OW 74
29156: PPUSH
29157: CALL_OW 115
// wait ( 0 0$20 ) ;
29161: LD_INT 700
29163: PPUSH
29164: CALL_OW 67
// SetSide ( un , your_side ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_OWVAR 2
29177: PPUSH
29178: CALL_OW 235
// end ;
29182: PPOPN 2
29184: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29185: LD_EXP 90
29189: PUSH
29190: LD_EXP 123
29194: AND
29195: IFFALSE 29301
29197: GO 29199
29199: DISABLE
29200: LD_INT 0
29202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29203: LD_ADDR_VAR 0 1
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 30
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PPUSH
29252: CALL_OW 69
29256: ST_TO_ADDR
// if not depot then
29257: LD_VAR 0 1
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29266: LD_VAR 0 1
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 250
29279: PPUSH
29280: LD_VAR 0 1
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 251
29293: PPUSH
29294: LD_INT 70
29296: PPUSH
29297: CALL_OW 495
// end ;
29301: PPOPN 1
29303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29304: LD_EXP 90
29308: PUSH
29309: LD_EXP 124
29313: AND
29314: IFFALSE 29525
29316: GO 29318
29318: DISABLE
29319: LD_INT 0
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29326: LD_ADDR_VAR 0 5
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_OWVAR 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 21
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 69
29361: ST_TO_ADDR
// if not tmp then
29362: LD_VAR 0 5
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29525
// for i in tmp do
29371: LD_ADDR_VAR 0 1
29375: PUSH
29376: LD_VAR 0 5
29380: PUSH
29381: FOR_IN
29382: IFFALSE 29523
// begin d := rand ( 0 , 5 ) ;
29384: LD_ADDR_VAR 0 4
29388: PUSH
29389: LD_INT 0
29391: PPUSH
29392: LD_INT 5
29394: PPUSH
29395: CALL_OW 12
29399: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 250
29414: PPUSH
29415: LD_VAR 0 4
29419: PPUSH
29420: LD_INT 3
29422: PPUSH
29423: LD_INT 12
29425: PPUSH
29426: CALL_OW 12
29430: PPUSH
29431: CALL_OW 272
29435: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 251
29450: PPUSH
29451: LD_VAR 0 4
29455: PPUSH
29456: LD_INT 3
29458: PPUSH
29459: LD_INT 12
29461: PPUSH
29462: CALL_OW 12
29466: PPUSH
29467: CALL_OW 273
29471: ST_TO_ADDR
// if ValidHex ( x , y ) then
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 3
29481: PPUSH
29482: CALL_OW 488
29486: IFFALSE 29521
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29488: LD_VAR 0 1
29492: PPUSH
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: LD_INT 3
29505: PPUSH
29506: LD_INT 6
29508: PPUSH
29509: CALL_OW 12
29513: PPUSH
29514: LD_INT 1
29516: PPUSH
29517: CALL_OW 483
// end ;
29521: GO 29381
29523: POP
29524: POP
// end ;
29525: PPOPN 5
29527: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29528: LD_EXP 90
29532: PUSH
29533: LD_EXP 125
29537: AND
29538: IFFALSE 29632
29540: GO 29542
29542: DISABLE
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 32
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 21
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: PPUSH
29589: CALL_OW 69
29593: ST_TO_ADDR
// if not tmp then
29594: LD_VAR 0 2
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29632
// for i in tmp do
29603: LD_ADDR_VAR 0 1
29607: PUSH
29608: LD_VAR 0 2
29612: PUSH
29613: FOR_IN
29614: IFFALSE 29630
// SetFuel ( i , 0 ) ;
29616: LD_VAR 0 1
29620: PPUSH
29621: LD_INT 0
29623: PPUSH
29624: CALL_OW 240
29628: GO 29613
29630: POP
29631: POP
// end ;
29632: PPOPN 2
29634: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29635: LD_EXP 90
29639: PUSH
29640: LD_EXP 126
29644: AND
29645: IFFALSE 29711
29647: GO 29649
29649: DISABLE
29650: LD_INT 0
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29653: LD_ADDR_VAR 0 1
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: LD_INT 29
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 1
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29711
// DestroyUnit ( tmp [ 1 ] ) ;
29698: LD_VAR 0 1
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: PPUSH
29707: CALL_OW 65
// end ;
29711: PPOPN 1
29713: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29714: LD_EXP 90
29718: PUSH
29719: LD_EXP 128
29723: AND
29724: IFFALSE 29853
29726: GO 29728
29728: DISABLE
29729: LD_INT 0
29731: PPUSH
// begin uc_side := 0 ;
29732: LD_ADDR_OWVAR 20
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
// uc_nation := nation_arabian ;
29740: LD_ADDR_OWVAR 21
29744: PUSH
29745: LD_INT 2
29747: ST_TO_ADDR
// hc_gallery :=  ;
29748: LD_ADDR_OWVAR 33
29752: PUSH
29753: LD_STRING 
29755: ST_TO_ADDR
// hc_name :=  ;
29756: LD_ADDR_OWVAR 26
29760: PUSH
29761: LD_STRING 
29763: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 11
29769: PPUSH
29770: LD_INT 10
29772: PPUSH
29773: CALL_OW 380
// un := CreateHuman ;
29777: LD_ADDR_VAR 0 1
29781: PUSH
29782: CALL_OW 44
29786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_INT 1
29794: PPUSH
29795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29799: LD_INT 35
29801: PPUSH
29802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_INT 22
29813: PUSH
29814: LD_OWVAR 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 69
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL_OW 74
29837: PPUSH
29838: CALL_OW 115
// until IsDead ( un ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 301
29851: IFFALSE 29799
// end ;
29853: PPOPN 1
29855: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29856: LD_EXP 90
29860: PUSH
29861: LD_EXP 130
29865: AND
29866: IFFALSE 29878
29868: GO 29870
29870: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29871: LD_STRING earthquake(getX(game), 0, 32)
29873: PPUSH
29874: CALL_OW 559
29878: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29879: LD_EXP 90
29883: PUSH
29884: LD_EXP 131
29888: AND
29889: IFFALSE 29980
29891: GO 29893
29893: DISABLE
29894: LD_INT 0
29896: PPUSH
// begin enable ;
29897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29898: LD_ADDR_VAR 0 1
29902: PUSH
29903: LD_INT 22
29905: PUSH
29906: LD_OWVAR 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 33
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: ST_TO_ADDR
// if not tmp then
29945: LD_VAR 0 1
29949: NOT
29950: IFFALSE 29954
// exit ;
29952: GO 29980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29954: LD_VAR 0 1
29958: PUSH
29959: LD_INT 1
29961: PPUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 12
29971: ARRAY
29972: PPUSH
29973: LD_INT 1
29975: PPUSH
29976: CALL_OW 234
// end ;
29980: PPOPN 1
29982: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29983: LD_EXP 90
29987: PUSH
29988: LD_EXP 132
29992: AND
29993: IFFALSE 30134
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_OWVAR 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 25
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: ST_TO_ADDR
// if not tmp then
30039: LD_VAR 0 3
30043: NOT
30044: IFFALSE 30048
// exit ;
30046: GO 30134
// un := tmp [ rand ( 1 , tmp ) ] ;
30048: LD_ADDR_VAR 0 2
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_INT 1
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 12
30070: ARRAY
30071: ST_TO_ADDR
// if Crawls ( un ) then
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL_OW 318
30081: IFFALSE 30092
// ComWalk ( un ) ;
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30092: LD_VAR 0 2
30096: PPUSH
30097: LD_INT 9
30099: PPUSH
30100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30104: LD_INT 28
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 2
30114: PPUSH
30115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30119: LD_INT 29
30121: PPUSH
30122: LD_OWVAR 2
30126: PPUSH
30127: LD_INT 2
30129: PPUSH
30130: CALL_OW 322
// end ;
30134: PPOPN 3
30136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30137: LD_EXP 90
30141: PUSH
30142: LD_EXP 133
30146: AND
30147: IFFALSE 30258
30149: GO 30151
30151: DISABLE
30152: LD_INT 0
30154: PPUSH
30155: PPUSH
30156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_OWVAR 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 25
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PPUSH
30188: CALL_OW 69
30192: ST_TO_ADDR
// if not tmp then
30193: LD_VAR 0 3
30197: NOT
30198: IFFALSE 30202
// exit ;
30200: GO 30258
// un := tmp [ rand ( 1 , tmp ) ] ;
30202: LD_ADDR_VAR 0 2
30206: PUSH
30207: LD_VAR 0 3
30211: PUSH
30212: LD_INT 1
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 12
30224: ARRAY
30225: ST_TO_ADDR
// if Crawls ( un ) then
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 318
30235: IFFALSE 30246
// ComWalk ( un ) ;
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_INT 8
30253: PPUSH
30254: CALL_OW 336
// end ;
30258: PPOPN 3
30260: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30261: LD_EXP 90
30265: PUSH
30266: LD_EXP 134
30270: AND
30271: IFFALSE 30415
30273: GO 30275
30275: DISABLE
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30280: LD_ADDR_VAR 0 2
30284: PUSH
30285: LD_INT 22
30287: PUSH
30288: LD_OWVAR 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 21
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 34
30312: PUSH
30313: LD_INT 12
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 34
30322: PUSH
30323: LD_INT 51
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_INT 32
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 69
30355: ST_TO_ADDR
// if not tmp then
30356: LD_VAR 0 2
30360: NOT
30361: IFFALSE 30365
// exit ;
30363: GO 30415
// for i in tmp do
30365: LD_ADDR_VAR 0 1
30369: PUSH
30370: LD_VAR 0 2
30374: PUSH
30375: FOR_IN
30376: IFFALSE 30413
// if GetCargo ( i , mat_artifact ) = 0 then
30378: LD_VAR 0 1
30382: PPUSH
30383: LD_INT 4
30385: PPUSH
30386: CALL_OW 289
30390: PUSH
30391: LD_INT 0
30393: EQUAL
30394: IFFALSE 30411
// SetCargo ( i , mat_siberit , 100 ) ;
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_INT 3
30403: PPUSH
30404: LD_INT 100
30406: PPUSH
30407: CALL_OW 290
30411: GO 30375
30413: POP
30414: POP
// end ;
30415: PPOPN 2
30417: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30418: LD_EXP 90
30422: PUSH
30423: LD_EXP 135
30427: AND
30428: IFFALSE 30611
30430: GO 30432
30432: DISABLE
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_OWVAR 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 69
30458: ST_TO_ADDR
// if not tmp then
30459: LD_VAR 0 2
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 30611
// for i := 1 to 2 do
30468: LD_ADDR_VAR 0 1
30472: PUSH
30473: DOUBLE
30474: LD_INT 1
30476: DEC
30477: ST_TO_ADDR
30478: LD_INT 2
30480: PUSH
30481: FOR_TO
30482: IFFALSE 30609
// begin uc_side := your_side ;
30484: LD_ADDR_OWVAR 20
30488: PUSH
30489: LD_OWVAR 2
30493: ST_TO_ADDR
// uc_nation := nation_american ;
30494: LD_ADDR_OWVAR 21
30498: PUSH
30499: LD_INT 1
30501: ST_TO_ADDR
// vc_chassis := us_morphling ;
30502: LD_ADDR_OWVAR 37
30506: PUSH
30507: LD_INT 5
30509: ST_TO_ADDR
// vc_engine := engine_siberite ;
30510: LD_ADDR_OWVAR 39
30514: PUSH
30515: LD_INT 3
30517: ST_TO_ADDR
// vc_control := control_computer ;
30518: LD_ADDR_OWVAR 38
30522: PUSH
30523: LD_INT 3
30525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30526: LD_ADDR_OWVAR 40
30530: PUSH
30531: LD_INT 10
30533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30534: LD_VAR 0 2
30538: PUSH
30539: LD_INT 1
30541: ARRAY
30542: PPUSH
30543: CALL_OW 310
30547: NOT
30548: IFFALSE 30595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30550: CALL_OW 45
30554: PPUSH
30555: LD_VAR 0 2
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 250
30568: PPUSH
30569: LD_VAR 0 2
30573: PUSH
30574: LD_INT 1
30576: ARRAY
30577: PPUSH
30578: CALL_OW 251
30582: PPUSH
30583: LD_INT 12
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 50
30593: GO 30607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30595: CALL_OW 45
30599: PPUSH
30600: LD_INT 1
30602: PPUSH
30603: CALL_OW 51
// end ;
30607: GO 30481
30609: POP
30610: POP
// end ;
30611: PPOPN 2
30613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30614: LD_EXP 90
30618: PUSH
30619: LD_EXP 136
30623: AND
30624: IFFALSE 30846
30626: GO 30628
30628: DISABLE
30629: LD_INT 0
30631: PPUSH
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30637: LD_ADDR_VAR 0 6
30641: PUSH
30642: LD_INT 22
30644: PUSH
30645: LD_OWVAR 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 21
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: LD_INT 23
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: PPUSH
30686: CALL_OW 69
30690: ST_TO_ADDR
// if not tmp then
30691: LD_VAR 0 6
30695: NOT
30696: IFFALSE 30700
// exit ;
30698: GO 30846
// s1 := rand ( 1 , 4 ) ;
30700: LD_ADDR_VAR 0 2
30704: PUSH
30705: LD_INT 1
30707: PPUSH
30708: LD_INT 4
30710: PPUSH
30711: CALL_OW 12
30715: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_VAR 0 6
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: CALL_OW 259
30739: ST_TO_ADDR
// if s1 = 1 then
30740: LD_VAR 0 2
30744: PUSH
30745: LD_INT 1
30747: EQUAL
30748: IFFALSE 30768
// s2 := rand ( 2 , 4 ) else
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 2
30757: PPUSH
30758: LD_INT 4
30760: PPUSH
30761: CALL_OW 12
30765: ST_TO_ADDR
30766: GO 30776
// s2 := 1 ;
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: LD_INT 1
30775: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30776: LD_ADDR_VAR 0 5
30780: PUSH
30781: LD_VAR 0 6
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: LD_VAR 0 3
30794: PPUSH
30795: CALL_OW 259
30799: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30800: LD_VAR 0 6
30804: PUSH
30805: LD_INT 1
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 5
30818: PPUSH
30819: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30823: LD_VAR 0 6
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: LD_VAR 0 3
30836: PPUSH
30837: LD_VAR 0 4
30841: PPUSH
30842: CALL_OW 237
// end ;
30846: PPOPN 6
30848: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30849: LD_EXP 90
30853: PUSH
30854: LD_EXP 137
30858: AND
30859: IFFALSE 30938
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30867: LD_ADDR_VAR 0 1
30871: PUSH
30872: LD_INT 22
30874: PUSH
30875: LD_OWVAR 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 30
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PPUSH
30898: CALL_OW 69
30902: ST_TO_ADDR
// if not tmp then
30903: LD_VAR 0 1
30907: NOT
30908: IFFALSE 30912
// exit ;
30910: GO 30938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30912: LD_VAR 0 1
30916: PUSH
30917: LD_INT 1
30919: PPUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 12
30929: ARRAY
30930: PPUSH
30931: LD_INT 1
30933: PPUSH
30934: CALL_OW 234
// end ;
30938: PPOPN 1
30940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30941: LD_EXP 90
30945: PUSH
30946: LD_EXP 138
30950: AND
30951: IFFALSE 31063
30953: GO 30955
30955: DISABLE
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30960: LD_ADDR_VAR 0 2
30964: PUSH
30965: LD_INT 22
30967: PUSH
30968: LD_OWVAR 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 30
30982: PUSH
30983: LD_INT 27
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 26
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 30
31002: PUSH
31003: LD_INT 28
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PPUSH
31020: CALL_OW 69
31024: ST_TO_ADDR
// if not tmp then
31025: LD_VAR 0 2
31029: NOT
31030: IFFALSE 31034
// exit ;
31032: GO 31063
// for i in tmp do
31034: LD_ADDR_VAR 0 1
31038: PUSH
31039: LD_VAR 0 2
31043: PUSH
31044: FOR_IN
31045: IFFALSE 31061
// SetLives ( i , 1 ) ;
31047: LD_VAR 0 1
31051: PPUSH
31052: LD_INT 1
31054: PPUSH
31055: CALL_OW 234
31059: GO 31044
31061: POP
31062: POP
// end ;
31063: PPOPN 2
31065: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31066: LD_EXP 90
31070: PUSH
31071: LD_EXP 139
31075: AND
31076: IFFALSE 31350
31078: GO 31080
31080: DISABLE
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
// begin i := rand ( 1 , 7 ) ;
31086: LD_ADDR_VAR 0 1
31090: PUSH
31091: LD_INT 1
31093: PPUSH
31094: LD_INT 7
31096: PPUSH
31097: CALL_OW 12
31101: ST_TO_ADDR
// case i of 1 :
31102: LD_VAR 0 1
31106: PUSH
31107: LD_INT 1
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31125
31115: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31116: LD_STRING earthquake(getX(game), 0, 32)
31118: PPUSH
31119: CALL_OW 559
31123: GO 31350
31125: LD_INT 2
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31147
31133: POP
// begin ToLua ( displayStucuk(); ) ;
31134: LD_STRING displayStucuk();
31136: PPUSH
31137: CALL_OW 559
// ResetFog ;
31141: CALL_OW 335
// end ; 3 :
31145: GO 31350
31147: LD_INT 3
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31259
31155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31156: LD_ADDR_VAR 0 2
31160: PUSH
31161: LD_INT 22
31163: PUSH
31164: LD_OWVAR 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 25
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: ST_TO_ADDR
// if not tmp then
31192: LD_VAR 0 2
31196: NOT
31197: IFFALSE 31201
// exit ;
31199: GO 31350
// un := tmp [ rand ( 1 , tmp ) ] ;
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_VAR 0 2
31210: PUSH
31211: LD_INT 1
31213: PPUSH
31214: LD_VAR 0 2
31218: PPUSH
31219: CALL_OW 12
31223: ARRAY
31224: ST_TO_ADDR
// if Crawls ( un ) then
31225: LD_VAR 0 3
31229: PPUSH
31230: CALL_OW 318
31234: IFFALSE 31245
// ComWalk ( un ) ;
31236: LD_VAR 0 3
31240: PPUSH
31241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31245: LD_VAR 0 3
31249: PPUSH
31250: LD_INT 8
31252: PPUSH
31253: CALL_OW 336
// end ; 4 :
31257: GO 31350
31259: LD_INT 4
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31328
31267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31268: LD_ADDR_VAR 0 2
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_OWVAR 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 30
31287: PUSH
31288: LD_INT 29
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PPUSH
31299: CALL_OW 69
31303: ST_TO_ADDR
// if not tmp then
31304: LD_VAR 0 2
31308: NOT
31309: IFFALSE 31313
// exit ;
31311: GO 31350
// DestroyUnit ( tmp [ 1 ] ) ;
31313: LD_VAR 0 2
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: PPUSH
31322: CALL_OW 65
// end ; 5 .. 7 :
31326: GO 31350
31328: LD_INT 5
31330: DOUBLE
31331: GREATEREQUAL
31332: IFFALSE 31340
31334: LD_INT 7
31336: DOUBLE
31337: LESSEQUAL
31338: IFTRUE 31342
31340: GO 31349
31342: POP
// StreamSibBomb ; end ;
31343: CALL 27600 0 0
31347: GO 31350
31349: POP
// end ;
31350: PPOPN 3
31352: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31353: LD_EXP 90
31357: PUSH
31358: LD_EXP 140
31362: AND
31363: IFFALSE 31519
31365: GO 31367
31367: DISABLE
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_INT 81
31380: PUSH
31381: LD_OWVAR 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 21
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 21
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31519
// p := 0 ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_INT 0
31443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31444: LD_INT 35
31446: PPUSH
31447: CALL_OW 67
// p := p + 1 ;
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 3
31460: PUSH
31461: LD_INT 1
31463: PLUS
31464: ST_TO_ADDR
// for i in tmp do
31465: LD_ADDR_VAR 0 1
31469: PUSH
31470: LD_VAR 0 2
31474: PUSH
31475: FOR_IN
31476: IFFALSE 31507
// if GetLives ( i ) < 1000 then
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 256
31487: PUSH
31488: LD_INT 1000
31490: LESS
31491: IFFALSE 31505
// SetLives ( i , 1000 ) ;
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_INT 1000
31500: PPUSH
31501: CALL_OW 234
31505: GO 31475
31507: POP
31508: POP
// until p > 20 ;
31509: LD_VAR 0 3
31513: PUSH
31514: LD_INT 20
31516: GREATER
31517: IFFALSE 31444
// end ;
31519: PPOPN 3
31521: END
// every 0 0$1 trigger StreamModeActive and sTime do
31522: LD_EXP 90
31526: PUSH
31527: LD_EXP 141
31531: AND
31532: IFFALSE 31567
31534: GO 31536
31536: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31537: LD_INT 28
31539: PPUSH
31540: LD_OWVAR 2
31544: PPUSH
31545: LD_INT 2
31547: PPUSH
31548: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31552: LD_INT 30
31554: PPUSH
31555: LD_OWVAR 2
31559: PPUSH
31560: LD_INT 2
31562: PPUSH
31563: CALL_OW 322
// end ;
31567: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31568: LD_EXP 90
31572: PUSH
31573: LD_EXP 142
31577: AND
31578: IFFALSE 31699
31580: GO 31582
31582: DISABLE
31583: LD_INT 0
31585: PPUSH
31586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31587: LD_ADDR_VAR 0 2
31591: PUSH
31592: LD_INT 22
31594: PUSH
31595: LD_OWVAR 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 21
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 23
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: PPUSH
31636: CALL_OW 69
31640: ST_TO_ADDR
// if not tmp then
31641: LD_VAR 0 2
31645: NOT
31646: IFFALSE 31650
// exit ;
31648: GO 31699
// for i in tmp do
31650: LD_ADDR_VAR 0 1
31654: PUSH
31655: LD_VAR 0 2
31659: PUSH
31660: FOR_IN
31661: IFFALSE 31697
// begin if Crawls ( i ) then
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 318
31672: IFFALSE 31683
// ComWalk ( i ) ;
31674: LD_VAR 0 1
31678: PPUSH
31679: CALL_OW 138
// SetClass ( i , 2 ) ;
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_INT 2
31690: PPUSH
31691: CALL_OW 336
// end ;
31695: GO 31660
31697: POP
31698: POP
// end ;
31699: PPOPN 2
31701: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31702: LD_EXP 90
31706: PUSH
31707: LD_EXP 143
31711: AND
31712: IFFALSE 31993
31714: GO 31716
31716: DISABLE
31717: LD_INT 0
31719: PPUSH
31720: PPUSH
31721: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31722: LD_OWVAR 2
31726: PPUSH
31727: LD_INT 9
31729: PPUSH
31730: LD_INT 1
31732: PPUSH
31733: LD_INT 1
31735: PPUSH
31736: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31740: LD_INT 9
31742: PPUSH
31743: LD_OWVAR 2
31747: PPUSH
31748: CALL_OW 343
// uc_side := 9 ;
31752: LD_ADDR_OWVAR 20
31756: PUSH
31757: LD_INT 9
31759: ST_TO_ADDR
// uc_nation := 2 ;
31760: LD_ADDR_OWVAR 21
31764: PUSH
31765: LD_INT 2
31767: ST_TO_ADDR
// hc_name := Dark Warrior ;
31768: LD_ADDR_OWVAR 26
31772: PUSH
31773: LD_STRING Dark Warrior
31775: ST_TO_ADDR
// hc_gallery :=  ;
31776: LD_ADDR_OWVAR 33
31780: PUSH
31781: LD_STRING 
31783: ST_TO_ADDR
// hc_noskilllimit := true ;
31784: LD_ADDR_OWVAR 76
31788: PUSH
31789: LD_INT 1
31791: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31792: LD_ADDR_OWVAR 31
31796: PUSH
31797: LD_INT 30
31799: PUSH
31800: LD_INT 30
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: LD_INT 30
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// un := CreateHuman ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: CALL_OW 44
31824: ST_TO_ADDR
// hc_noskilllimit := false ;
31825: LD_ADDR_OWVAR 76
31829: PUSH
31830: LD_INT 0
31832: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31833: LD_VAR 0 3
31837: PPUSH
31838: LD_INT 1
31840: PPUSH
31841: CALL_OW 51
// p := 0 ;
31845: LD_ADDR_VAR 0 2
31849: PUSH
31850: LD_INT 0
31852: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31853: LD_INT 35
31855: PPUSH
31856: CALL_OW 67
// p := p + 1 ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: LD_VAR 0 2
31869: PUSH
31870: LD_INT 1
31872: PLUS
31873: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 256
31883: PUSH
31884: LD_INT 1000
31886: LESS
31887: IFFALSE 31901
// SetLives ( un , 1000 ) ;
31889: LD_VAR 0 3
31893: PPUSH
31894: LD_INT 1000
31896: PPUSH
31897: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31901: LD_VAR 0 3
31905: PPUSH
31906: LD_INT 81
31908: PUSH
31909: LD_OWVAR 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 91
31920: PUSH
31921: LD_VAR 0 3
31925: PUSH
31926: LD_INT 30
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PPUSH
31938: CALL_OW 69
31942: PPUSH
31943: LD_VAR 0 3
31947: PPUSH
31948: CALL_OW 74
31952: PPUSH
31953: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31957: LD_VAR 0 2
31961: PUSH
31962: LD_INT 60
31964: GREATER
31965: PUSH
31966: LD_VAR 0 3
31970: PPUSH
31971: CALL_OW 301
31975: OR
31976: IFFALSE 31853
// if un then
31978: LD_VAR 0 3
31982: IFFALSE 31993
// RemoveUnit ( un ) ;
31984: LD_VAR 0 3
31988: PPUSH
31989: CALL_OW 64
// end ;
31993: PPOPN 3
31995: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31996: LD_INT 0
31998: PPUSH
// case cmd of 301 :
31999: LD_VAR 0 1
32003: PUSH
32004: LD_INT 301
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32044
32012: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32013: LD_VAR 0 6
32017: PPUSH
32018: LD_VAR 0 7
32022: PPUSH
32023: LD_VAR 0 8
32027: PPUSH
32028: LD_VAR 0 4
32032: PPUSH
32033: LD_VAR 0 5
32037: PPUSH
32038: CALL 33245 0 5
32042: GO 32165
32044: LD_INT 302
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32089
32052: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32053: LD_VAR 0 6
32057: PPUSH
32058: LD_VAR 0 7
32062: PPUSH
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_VAR 0 9
32072: PPUSH
32073: LD_VAR 0 4
32077: PPUSH
32078: LD_VAR 0 5
32082: PPUSH
32083: CALL 33336 0 6
32087: GO 32165
32089: LD_INT 303
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32134
32097: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32098: LD_VAR 0 6
32102: PPUSH
32103: LD_VAR 0 7
32107: PPUSH
32108: LD_VAR 0 8
32112: PPUSH
32113: LD_VAR 0 9
32117: PPUSH
32118: LD_VAR 0 4
32122: PPUSH
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL 32170 0 6
32132: GO 32165
32134: LD_INT 304
32136: DOUBLE
32137: EQUAL
32138: IFTRUE 32142
32140: GO 32164
32142: POP
// hHackTeleport ( unit , x , y ) ; end ;
32143: LD_VAR 0 2
32147: PPUSH
32148: LD_VAR 0 4
32152: PPUSH
32153: LD_VAR 0 5
32157: PPUSH
32158: CALL 33929 0 3
32162: GO 32165
32164: POP
// end ;
32165: LD_VAR 0 12
32169: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32170: LD_INT 0
32172: PPUSH
32173: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32174: LD_VAR 0 1
32178: PUSH
32179: LD_INT 1
32181: LESS
32182: PUSH
32183: LD_VAR 0 1
32187: PUSH
32188: LD_INT 3
32190: GREATER
32191: OR
32192: PUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 428
32207: OR
32208: IFFALSE 32212
// exit ;
32210: GO 32932
// uc_side := your_side ;
32212: LD_ADDR_OWVAR 20
32216: PUSH
32217: LD_OWVAR 2
32221: ST_TO_ADDR
// uc_nation := nation ;
32222: LD_ADDR_OWVAR 21
32226: PUSH
32227: LD_VAR 0 1
32231: ST_TO_ADDR
// bc_level = 1 ;
32232: LD_ADDR_OWVAR 43
32236: PUSH
32237: LD_INT 1
32239: ST_TO_ADDR
// case btype of 1 :
32240: LD_VAR 0 2
32244: PUSH
32245: LD_INT 1
32247: DOUBLE
32248: EQUAL
32249: IFTRUE 32253
32251: GO 32264
32253: POP
// bc_type := b_depot ; 2 :
32254: LD_ADDR_OWVAR 42
32258: PUSH
32259: LD_INT 0
32261: ST_TO_ADDR
32262: GO 32876
32264: LD_INT 2
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32283
32272: POP
// bc_type := b_warehouse ; 3 :
32273: LD_ADDR_OWVAR 42
32277: PUSH
32278: LD_INT 1
32280: ST_TO_ADDR
32281: GO 32876
32283: LD_INT 3
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32302
32291: POP
// bc_type := b_lab ; 4 .. 9 :
32292: LD_ADDR_OWVAR 42
32296: PUSH
32297: LD_INT 6
32299: ST_TO_ADDR
32300: GO 32876
32302: LD_INT 4
32304: DOUBLE
32305: GREATEREQUAL
32306: IFFALSE 32314
32308: LD_INT 9
32310: DOUBLE
32311: LESSEQUAL
32312: IFTRUE 32316
32314: GO 32368
32316: POP
// begin bc_type := b_lab_half ;
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 7
32324: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32325: LD_ADDR_OWVAR 44
32329: PUSH
32330: LD_INT 10
32332: PUSH
32333: LD_INT 11
32335: PUSH
32336: LD_INT 12
32338: PUSH
32339: LD_INT 15
32341: PUSH
32342: LD_INT 14
32344: PUSH
32345: LD_INT 13
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: PUSH
32356: LD_VAR 0 2
32360: PUSH
32361: LD_INT 3
32363: MINUS
32364: ARRAY
32365: ST_TO_ADDR
// end ; 10 .. 13 :
32366: GO 32876
32368: LD_INT 10
32370: DOUBLE
32371: GREATEREQUAL
32372: IFFALSE 32380
32374: LD_INT 13
32376: DOUBLE
32377: LESSEQUAL
32378: IFTRUE 32382
32380: GO 32459
32382: POP
// begin bc_type := b_lab_full ;
32383: LD_ADDR_OWVAR 42
32387: PUSH
32388: LD_INT 8
32390: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32391: LD_ADDR_OWVAR 44
32395: PUSH
32396: LD_INT 10
32398: PUSH
32399: LD_INT 12
32401: PUSH
32402: LD_INT 14
32404: PUSH
32405: LD_INT 13
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: LD_VAR 0 2
32418: PUSH
32419: LD_INT 9
32421: MINUS
32422: ARRAY
32423: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32424: LD_ADDR_OWVAR 45
32428: PUSH
32429: LD_INT 11
32431: PUSH
32432: LD_INT 15
32434: PUSH
32435: LD_INT 12
32437: PUSH
32438: LD_INT 15
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 9
32454: MINUS
32455: ARRAY
32456: ST_TO_ADDR
// end ; 14 :
32457: GO 32876
32459: LD_INT 14
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32478
32467: POP
// bc_type := b_workshop ; 15 :
32468: LD_ADDR_OWVAR 42
32472: PUSH
32473: LD_INT 2
32475: ST_TO_ADDR
32476: GO 32876
32478: LD_INT 15
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32497
32486: POP
// bc_type := b_factory ; 16 :
32487: LD_ADDR_OWVAR 42
32491: PUSH
32492: LD_INT 3
32494: ST_TO_ADDR
32495: GO 32876
32497: LD_INT 16
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32516
32505: POP
// bc_type := b_ext_gun ; 17 :
32506: LD_ADDR_OWVAR 42
32510: PUSH
32511: LD_INT 17
32513: ST_TO_ADDR
32514: GO 32876
32516: LD_INT 17
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32552
32524: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32525: LD_ADDR_OWVAR 42
32529: PUSH
32530: LD_INT 19
32532: PUSH
32533: LD_INT 23
32535: PUSH
32536: LD_INT 19
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: PUSH
32544: LD_VAR 0 1
32548: ARRAY
32549: ST_TO_ADDR
32550: GO 32876
32552: LD_INT 18
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_ext_radar ; 19 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 20
32568: ST_TO_ADDR
32569: GO 32876
32571: LD_INT 19
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32590
32579: POP
// bc_type := b_ext_radio ; 20 :
32580: LD_ADDR_OWVAR 42
32584: PUSH
32585: LD_INT 22
32587: ST_TO_ADDR
32588: GO 32876
32590: LD_INT 20
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32609
32598: POP
// bc_type := b_ext_siberium ; 21 :
32599: LD_ADDR_OWVAR 42
32603: PUSH
32604: LD_INT 21
32606: ST_TO_ADDR
32607: GO 32876
32609: LD_INT 21
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32628
32617: POP
// bc_type := b_ext_computer ; 22 :
32618: LD_ADDR_OWVAR 42
32622: PUSH
32623: LD_INT 24
32625: ST_TO_ADDR
32626: GO 32876
32628: LD_INT 22
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32647
32636: POP
// bc_type := b_ext_track ; 23 :
32637: LD_ADDR_OWVAR 42
32641: PUSH
32642: LD_INT 16
32644: ST_TO_ADDR
32645: GO 32876
32647: LD_INT 23
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32666
32655: POP
// bc_type := b_ext_laser ; 24 :
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 25
32663: ST_TO_ADDR
32664: GO 32876
32666: LD_INT 24
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32685
32674: POP
// bc_type := b_control_tower ; 25 :
32675: LD_ADDR_OWVAR 42
32679: PUSH
32680: LD_INT 36
32682: ST_TO_ADDR
32683: GO 32876
32685: LD_INT 25
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32704
32693: POP
// bc_type := b_breastwork ; 26 :
32694: LD_ADDR_OWVAR 42
32698: PUSH
32699: LD_INT 31
32701: ST_TO_ADDR
32702: GO 32876
32704: LD_INT 26
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32723
32712: POP
// bc_type := b_bunker ; 27 :
32713: LD_ADDR_OWVAR 42
32717: PUSH
32718: LD_INT 32
32720: ST_TO_ADDR
32721: GO 32876
32723: LD_INT 27
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32742
32731: POP
// bc_type := b_turret ; 28 :
32732: LD_ADDR_OWVAR 42
32736: PUSH
32737: LD_INT 33
32739: ST_TO_ADDR
32740: GO 32876
32742: LD_INT 28
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32761
32750: POP
// bc_type := b_armoury ; 29 :
32751: LD_ADDR_OWVAR 42
32755: PUSH
32756: LD_INT 4
32758: ST_TO_ADDR
32759: GO 32876
32761: LD_INT 29
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32780
32769: POP
// bc_type := b_barracks ; 30 :
32770: LD_ADDR_OWVAR 42
32774: PUSH
32775: LD_INT 5
32777: ST_TO_ADDR
32778: GO 32876
32780: LD_INT 30
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32799
32788: POP
// bc_type := b_solar_power ; 31 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 27
32796: ST_TO_ADDR
32797: GO 32876
32799: LD_INT 31
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32818
32807: POP
// bc_type := b_oil_power ; 32 :
32808: LD_ADDR_OWVAR 42
32812: PUSH
32813: LD_INT 26
32815: ST_TO_ADDR
32816: GO 32876
32818: LD_INT 32
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32837
32826: POP
// bc_type := b_siberite_power ; 33 :
32827: LD_ADDR_OWVAR 42
32831: PUSH
32832: LD_INT 28
32834: ST_TO_ADDR
32835: GO 32876
32837: LD_INT 33
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32856
32845: POP
// bc_type := b_oil_mine ; 34 :
32846: LD_ADDR_OWVAR 42
32850: PUSH
32851: LD_INT 29
32853: ST_TO_ADDR
32854: GO 32876
32856: LD_INT 34
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32875
32864: POP
// bc_type := b_siberite_mine ; end ;
32865: LD_ADDR_OWVAR 42
32869: PUSH
32870: LD_INT 30
32872: ST_TO_ADDR
32873: GO 32876
32875: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32876: LD_ADDR_VAR 0 8
32880: PUSH
32881: LD_VAR 0 5
32885: PPUSH
32886: LD_VAR 0 6
32890: PPUSH
32891: LD_VAR 0 3
32895: PPUSH
32896: CALL_OW 47
32900: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32901: LD_OWVAR 42
32905: PUSH
32906: LD_INT 32
32908: PUSH
32909: LD_INT 33
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: IN
32916: IFFALSE 32932
// PlaceWeaponTurret ( b , weapon ) ;
32918: LD_VAR 0 8
32922: PPUSH
32923: LD_VAR 0 4
32927: PPUSH
32928: CALL_OW 431
// end ;
32932: LD_VAR 0 7
32936: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_INT 22
32950: PUSH
32951: LD_OWVAR 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 30
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 69
32996: ST_TO_ADDR
// if not tmp then
32997: LD_VAR 0 4
33001: NOT
33002: IFFALSE 33006
// exit ;
33004: GO 33065
// for i in tmp do
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: LD_VAR 0 4
33015: PUSH
33016: FOR_IN
33017: IFFALSE 33063
// for j = 1 to 3 do
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: DOUBLE
33025: LD_INT 1
33027: DEC
33028: ST_TO_ADDR
33029: LD_INT 3
33031: PUSH
33032: FOR_TO
33033: IFFALSE 33059
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33035: LD_VAR 0 2
33039: PPUSH
33040: CALL_OW 274
33044: PPUSH
33045: LD_VAR 0 3
33049: PPUSH
33050: LD_INT 99999
33052: PPUSH
33053: CALL_OW 277
33057: GO 33032
33059: POP
33060: POP
33061: GO 33016
33063: POP
33064: POP
// end ;
33065: LD_VAR 0 1
33069: RET
// export function hHackSetLevel10 ; var i , j ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33075: LD_ADDR_VAR 0 2
33079: PUSH
33080: LD_INT 21
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33148
// if IsSelected ( i ) then
33098: LD_VAR 0 2
33102: PPUSH
33103: CALL_OW 306
33107: IFFALSE 33146
// begin for j := 1 to 4 do
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: DOUBLE
33115: LD_INT 1
33117: DEC
33118: ST_TO_ADDR
33119: LD_INT 4
33121: PUSH
33122: FOR_TO
33123: IFFALSE 33144
// SetSkill ( i , j , 10 ) ;
33125: LD_VAR 0 2
33129: PPUSH
33130: LD_VAR 0 3
33134: PPUSH
33135: LD_INT 10
33137: PPUSH
33138: CALL_OW 237
33142: GO 33122
33144: POP
33145: POP
// end ;
33146: GO 33095
33148: POP
33149: POP
// end ;
33150: LD_VAR 0 1
33154: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
33159: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 22
33167: PUSH
33168: LD_OWVAR 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PPUSH
33191: CALL_OW 69
33195: PUSH
33196: FOR_IN
33197: IFFALSE 33238
// begin for j := 1 to 4 do
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: DOUBLE
33205: LD_INT 1
33207: DEC
33208: ST_TO_ADDR
33209: LD_INT 4
33211: PUSH
33212: FOR_TO
33213: IFFALSE 33234
// SetSkill ( i , j , 10 ) ;
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_VAR 0 3
33224: PPUSH
33225: LD_INT 10
33227: PPUSH
33228: CALL_OW 237
33232: GO 33212
33234: POP
33235: POP
// end ;
33236: GO 33196
33238: POP
33239: POP
// end ;
33240: LD_VAR 0 1
33244: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33245: LD_INT 0
33247: PPUSH
// uc_side := your_side ;
33248: LD_ADDR_OWVAR 20
33252: PUSH
33253: LD_OWVAR 2
33257: ST_TO_ADDR
// uc_nation := nation ;
33258: LD_ADDR_OWVAR 21
33262: PUSH
33263: LD_VAR 0 1
33267: ST_TO_ADDR
// InitHc ;
33268: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33272: LD_INT 0
33274: PPUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33289: LD_VAR 0 4
33293: PPUSH
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 428
33303: PUSH
33304: LD_INT 0
33306: EQUAL
33307: IFFALSE 33331
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33309: CALL_OW 44
33313: PPUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: LD_VAR 0 5
33323: PPUSH
33324: LD_INT 1
33326: PPUSH
33327: CALL_OW 48
// end ;
33331: LD_VAR 0 6
33335: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
// uc_side := your_side ;
33340: LD_ADDR_OWVAR 20
33344: PUSH
33345: LD_OWVAR 2
33349: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33350: LD_VAR 0 1
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: IN
33377: IFFALSE 33389
// uc_nation := nation_american else
33379: LD_ADDR_OWVAR 21
33383: PUSH
33384: LD_INT 1
33386: ST_TO_ADDR
33387: GO 33432
// if chassis in [ 11 , 12 , 13 , 14 ] then
33389: LD_VAR 0 1
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: LD_INT 12
33399: PUSH
33400: LD_INT 13
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: IN
33412: IFFALSE 33424
// uc_nation := nation_arabian else
33414: LD_ADDR_OWVAR 21
33418: PUSH
33419: LD_INT 2
33421: ST_TO_ADDR
33422: GO 33432
// uc_nation := nation_russian ;
33424: LD_ADDR_OWVAR 21
33428: PUSH
33429: LD_INT 3
33431: ST_TO_ADDR
// vc_chassis := chassis ;
33432: LD_ADDR_OWVAR 37
33436: PUSH
33437: LD_VAR 0 1
33441: ST_TO_ADDR
// vc_engine := engine ;
33442: LD_ADDR_OWVAR 39
33446: PUSH
33447: LD_VAR 0 2
33451: ST_TO_ADDR
// vc_control := control ;
33452: LD_ADDR_OWVAR 38
33456: PUSH
33457: LD_VAR 0 3
33461: ST_TO_ADDR
// vc_weapon := weapon ;
33462: LD_ADDR_OWVAR 40
33466: PUSH
33467: LD_VAR 0 4
33471: ST_TO_ADDR
// un := CreateVehicle ;
33472: LD_ADDR_VAR 0 8
33476: PUSH
33477: CALL_OW 45
33481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33482: LD_VAR 0 8
33486: PPUSH
33487: LD_INT 0
33489: PPUSH
33490: LD_INT 5
33492: PPUSH
33493: CALL_OW 12
33497: PPUSH
33498: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33502: LD_VAR 0 8
33506: PPUSH
33507: LD_VAR 0 5
33511: PPUSH
33512: LD_VAR 0 6
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: CALL_OW 48
// end ;
33524: LD_VAR 0 7
33528: RET
// export hInvincible ; every 1 do
33529: GO 33531
33531: DISABLE
// hInvincible := [ ] ;
33532: LD_ADDR_EXP 144
33536: PUSH
33537: EMPTY
33538: ST_TO_ADDR
33539: END
// every 10 do var i ;
33540: GO 33542
33542: DISABLE
33543: LD_INT 0
33545: PPUSH
// begin enable ;
33546: ENABLE
// if not hInvincible then
33547: LD_EXP 144
33551: NOT
33552: IFFALSE 33556
// exit ;
33554: GO 33600
// for i in hInvincible do
33556: LD_ADDR_VAR 0 1
33560: PUSH
33561: LD_EXP 144
33565: PUSH
33566: FOR_IN
33567: IFFALSE 33598
// if GetLives ( i ) < 1000 then
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 256
33578: PUSH
33579: LD_INT 1000
33581: LESS
33582: IFFALSE 33596
// SetLives ( i , 1000 ) ;
33584: LD_VAR 0 1
33588: PPUSH
33589: LD_INT 1000
33591: PPUSH
33592: CALL_OW 234
33596: GO 33566
33598: POP
33599: POP
// end ;
33600: PPOPN 1
33602: END
// export function hHackInvincible ; var i ; begin
33603: LD_INT 0
33605: PPUSH
33606: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33607: LD_ADDR_VAR 0 2
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 21
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 21
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: PPUSH
33640: CALL_OW 69
33644: PUSH
33645: FOR_IN
33646: IFFALSE 33707
// if IsSelected ( i ) then
33648: LD_VAR 0 2
33652: PPUSH
33653: CALL_OW 306
33657: IFFALSE 33705
// begin if i in hInvincible then
33659: LD_VAR 0 2
33663: PUSH
33664: LD_EXP 144
33668: IN
33669: IFFALSE 33689
// hInvincible := hInvincible diff i else
33671: LD_ADDR_EXP 144
33675: PUSH
33676: LD_EXP 144
33680: PUSH
33681: LD_VAR 0 2
33685: DIFF
33686: ST_TO_ADDR
33687: GO 33705
// hInvincible := hInvincible union i ;
33689: LD_ADDR_EXP 144
33693: PUSH
33694: LD_EXP 144
33698: PUSH
33699: LD_VAR 0 2
33703: UNION
33704: ST_TO_ADDR
// end ;
33705: GO 33645
33707: POP
33708: POP
// end ;
33709: LD_VAR 0 1
33713: RET
// export function hHackInvisible ; var i , j ; begin
33714: LD_INT 0
33716: PPUSH
33717: PPUSH
33718: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_INT 21
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PPUSH
33734: CALL_OW 69
33738: PUSH
33739: FOR_IN
33740: IFFALSE 33764
// if IsSelected ( i ) then
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 306
33751: IFFALSE 33762
// ComForceInvisible ( i ) ;
33753: LD_VAR 0 2
33757: PPUSH
33758: CALL_OW 496
33762: GO 33739
33764: POP
33765: POP
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackChangeYourSide ; begin
33771: LD_INT 0
33773: PPUSH
// if your_side = 8 then
33774: LD_OWVAR 2
33778: PUSH
33779: LD_INT 8
33781: EQUAL
33782: IFFALSE 33794
// your_side := 0 else
33784: LD_ADDR_OWVAR 2
33788: PUSH
33789: LD_INT 0
33791: ST_TO_ADDR
33792: GO 33808
// your_side := your_side + 1 ;
33794: LD_ADDR_OWVAR 2
33798: PUSH
33799: LD_OWVAR 2
33803: PUSH
33804: LD_INT 1
33806: PLUS
33807: ST_TO_ADDR
// end ;
33808: LD_VAR 0 1
33812: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
33817: PPUSH
// for i in all_units do
33818: LD_ADDR_VAR 0 2
33822: PUSH
33823: LD_OWVAR 3
33827: PUSH
33828: FOR_IN
33829: IFFALSE 33907
// if IsSelected ( i ) then
33831: LD_VAR 0 2
33835: PPUSH
33836: CALL_OW 306
33840: IFFALSE 33905
// begin j := GetSide ( i ) ;
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: CALL_OW 255
33856: ST_TO_ADDR
// if j = 8 then
33857: LD_VAR 0 3
33861: PUSH
33862: LD_INT 8
33864: EQUAL
33865: IFFALSE 33877
// j := 0 else
33867: LD_ADDR_VAR 0 3
33871: PUSH
33872: LD_INT 0
33874: ST_TO_ADDR
33875: GO 33891
// j := j + 1 ;
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_VAR 0 3
33886: PUSH
33887: LD_INT 1
33889: PLUS
33890: ST_TO_ADDR
// SetSide ( i , j ) ;
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: CALL_OW 235
// end ;
33905: GO 33828
33907: POP
33908: POP
// end ;
33909: LD_VAR 0 1
33913: RET
// export function hHackFog ; begin
33914: LD_INT 0
33916: PPUSH
// FogOff ( true ) ;
33917: LD_INT 1
33919: PPUSH
33920: CALL_OW 344
// end ;
33924: LD_VAR 0 1
33928: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33929: LD_INT 0
33931: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_VAR 0 2
33941: PPUSH
33942: LD_VAR 0 3
33946: PPUSH
33947: LD_INT 1
33949: PPUSH
33950: LD_INT 1
33952: PPUSH
33953: CALL_OW 483
// CenterOnXY ( x , y ) ;
33957: LD_VAR 0 2
33961: PPUSH
33962: LD_VAR 0 3
33966: PPUSH
33967: CALL_OW 84
// end ; end_of_file
33971: LD_VAR 0 4
33975: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 264
33991: PUSH
33992: LD_EXP 159
33996: EQUAL
33997: IFFALSE 34069
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33999: LD_INT 68
34001: PPUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: CALL_OW 255
34011: PPUSH
34012: CALL_OW 321
34016: PUSH
34017: LD_INT 2
34019: EQUAL
34020: IFFALSE 34032
// eff := 70 else
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: LD_INT 70
34029: ST_TO_ADDR
34030: GO 34040
// eff := 30 ;
34032: LD_ADDR_VAR 0 4
34036: PUSH
34037: LD_INT 30
34039: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 250
34049: PPUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 251
34059: PPUSH
34060: LD_VAR 0 4
34064: PPUSH
34065: CALL_OW 495
// end ; end ;
34069: LD_VAR 0 2
34073: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34074: LD_INT 0
34076: PPUSH
// end ;
34077: LD_VAR 0 4
34081: RET
// export function SOS_Command ( cmd ) ; begin
34082: LD_INT 0
34084: PPUSH
// end ;
34085: LD_VAR 0 2
34089: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34090: LD_INT 0
34092: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34093: LD_VAR 0 1
34097: PUSH
34098: LD_INT 250
34100: EQUAL
34101: PUSH
34102: LD_VAR 0 2
34106: PPUSH
34107: CALL_OW 264
34111: PUSH
34112: LD_EXP 162
34116: EQUAL
34117: AND
34118: IFFALSE 34139
// MinerPlaceMine ( unit , x , y ) ;
34120: LD_VAR 0 2
34124: PPUSH
34125: LD_VAR 0 4
34129: PPUSH
34130: LD_VAR 0 5
34134: PPUSH
34135: CALL 36480 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34139: LD_VAR 0 1
34143: PUSH
34144: LD_INT 251
34146: EQUAL
34147: PUSH
34148: LD_VAR 0 2
34152: PPUSH
34153: CALL_OW 264
34157: PUSH
34158: LD_EXP 162
34162: EQUAL
34163: AND
34164: IFFALSE 34185
// MinerDetonateMine ( unit , x , y ) ;
34166: LD_VAR 0 2
34170: PPUSH
34171: LD_VAR 0 4
34175: PPUSH
34176: LD_VAR 0 5
34180: PPUSH
34181: CALL 36757 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34185: LD_VAR 0 1
34189: PUSH
34190: LD_INT 252
34192: EQUAL
34193: PUSH
34194: LD_VAR 0 2
34198: PPUSH
34199: CALL_OW 264
34203: PUSH
34204: LD_EXP 162
34208: EQUAL
34209: AND
34210: IFFALSE 34231
// MinerCreateMinefield ( unit , x , y ) ;
34212: LD_VAR 0 2
34216: PPUSH
34217: LD_VAR 0 4
34221: PPUSH
34222: LD_VAR 0 5
34226: PPUSH
34227: CALL 37174 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34231: LD_VAR 0 1
34235: PUSH
34236: LD_INT 253
34238: EQUAL
34239: PUSH
34240: LD_VAR 0 2
34244: PPUSH
34245: CALL_OW 257
34249: PUSH
34250: LD_INT 5
34252: EQUAL
34253: AND
34254: IFFALSE 34275
// ComBinocular ( unit , x , y ) ;
34256: LD_VAR 0 2
34260: PPUSH
34261: LD_VAR 0 4
34265: PPUSH
34266: LD_VAR 0 5
34270: PPUSH
34271: CALL 37545 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34275: LD_VAR 0 1
34279: PUSH
34280: LD_INT 254
34282: EQUAL
34283: PUSH
34284: LD_VAR 0 2
34288: PPUSH
34289: CALL_OW 264
34293: PUSH
34294: LD_EXP 157
34298: EQUAL
34299: AND
34300: PUSH
34301: LD_VAR 0 3
34305: PPUSH
34306: CALL_OW 263
34310: PUSH
34311: LD_INT 3
34313: EQUAL
34314: AND
34315: IFFALSE 34331
// HackDestroyVehicle ( unit , selectedUnit ) ;
34317: LD_VAR 0 2
34321: PPUSH
34322: LD_VAR 0 3
34326: PPUSH
34327: CALL 35840 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34331: LD_VAR 0 1
34335: PUSH
34336: LD_INT 255
34338: EQUAL
34339: PUSH
34340: LD_VAR 0 2
34344: PPUSH
34345: CALL_OW 264
34349: PUSH
34350: LD_INT 14
34352: PUSH
34353: LD_INT 53
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: IN
34360: AND
34361: PUSH
34362: LD_VAR 0 4
34366: PPUSH
34367: LD_VAR 0 5
34371: PPUSH
34372: CALL_OW 488
34376: AND
34377: IFFALSE 34401
// CutTreeXYR ( unit , x , y , 12 ) ;
34379: LD_VAR 0 2
34383: PPUSH
34384: LD_VAR 0 4
34388: PPUSH
34389: LD_VAR 0 5
34393: PPUSH
34394: LD_INT 12
34396: PPUSH
34397: CALL 34406 0 4
// end ;
34401: LD_VAR 0 6
34405: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34406: LD_INT 0
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34417: LD_VAR 0 1
34421: NOT
34422: PUSH
34423: LD_VAR 0 2
34427: PPUSH
34428: LD_VAR 0 3
34432: PPUSH
34433: CALL_OW 488
34437: NOT
34438: OR
34439: PUSH
34440: LD_VAR 0 4
34444: NOT
34445: OR
34446: IFFALSE 34450
// exit ;
34448: GO 34790
// list := [ ] ;
34450: LD_ADDR_VAR 0 13
34454: PUSH
34455: EMPTY
34456: ST_TO_ADDR
// if x - r < 0 then
34457: LD_VAR 0 2
34461: PUSH
34462: LD_VAR 0 4
34466: MINUS
34467: PUSH
34468: LD_INT 0
34470: LESS
34471: IFFALSE 34483
// min_x := 0 else
34473: LD_ADDR_VAR 0 7
34477: PUSH
34478: LD_INT 0
34480: ST_TO_ADDR
34481: GO 34499
// min_x := x - r ;
34483: LD_ADDR_VAR 0 7
34487: PUSH
34488: LD_VAR 0 2
34492: PUSH
34493: LD_VAR 0 4
34497: MINUS
34498: ST_TO_ADDR
// if y - r < 0 then
34499: LD_VAR 0 3
34503: PUSH
34504: LD_VAR 0 4
34508: MINUS
34509: PUSH
34510: LD_INT 0
34512: LESS
34513: IFFALSE 34525
// min_y := 0 else
34515: LD_ADDR_VAR 0 8
34519: PUSH
34520: LD_INT 0
34522: ST_TO_ADDR
34523: GO 34541
// min_y := y - r ;
34525: LD_ADDR_VAR 0 8
34529: PUSH
34530: LD_VAR 0 3
34534: PUSH
34535: LD_VAR 0 4
34539: MINUS
34540: ST_TO_ADDR
// max_x := x + r ;
34541: LD_ADDR_VAR 0 9
34545: PUSH
34546: LD_VAR 0 2
34550: PUSH
34551: LD_VAR 0 4
34555: PLUS
34556: ST_TO_ADDR
// max_y := y + r ;
34557: LD_ADDR_VAR 0 10
34561: PUSH
34562: LD_VAR 0 3
34566: PUSH
34567: LD_VAR 0 4
34571: PLUS
34572: ST_TO_ADDR
// for _x = min_x to max_x do
34573: LD_ADDR_VAR 0 11
34577: PUSH
34578: DOUBLE
34579: LD_VAR 0 7
34583: DEC
34584: ST_TO_ADDR
34585: LD_VAR 0 9
34589: PUSH
34590: FOR_TO
34591: IFFALSE 34708
// for _y = min_y to max_y do
34593: LD_ADDR_VAR 0 12
34597: PUSH
34598: DOUBLE
34599: LD_VAR 0 8
34603: DEC
34604: ST_TO_ADDR
34605: LD_VAR 0 10
34609: PUSH
34610: FOR_TO
34611: IFFALSE 34704
// begin if not ValidHex ( _x , _y ) then
34613: LD_VAR 0 11
34617: PPUSH
34618: LD_VAR 0 12
34622: PPUSH
34623: CALL_OW 488
34627: NOT
34628: IFFALSE 34632
// continue ;
34630: GO 34610
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34632: LD_VAR 0 11
34636: PPUSH
34637: LD_VAR 0 12
34641: PPUSH
34642: CALL_OW 351
34646: PUSH
34647: LD_VAR 0 11
34651: PPUSH
34652: LD_VAR 0 12
34656: PPUSH
34657: CALL_OW 554
34661: AND
34662: IFFALSE 34702
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34664: LD_ADDR_VAR 0 13
34668: PUSH
34669: LD_VAR 0 13
34673: PPUSH
34674: LD_VAR 0 13
34678: PUSH
34679: LD_INT 1
34681: PLUS
34682: PPUSH
34683: LD_VAR 0 11
34687: PUSH
34688: LD_VAR 0 12
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PPUSH
34697: CALL_OW 2
34701: ST_TO_ADDR
// end ;
34702: GO 34610
34704: POP
34705: POP
34706: GO 34590
34708: POP
34709: POP
// if not list then
34710: LD_VAR 0 13
34714: NOT
34715: IFFALSE 34719
// exit ;
34717: GO 34790
// for i in list do
34719: LD_ADDR_VAR 0 6
34723: PUSH
34724: LD_VAR 0 13
34728: PUSH
34729: FOR_IN
34730: IFFALSE 34788
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34732: LD_VAR 0 1
34736: PPUSH
34737: LD_STRING M
34739: PUSH
34740: LD_VAR 0 6
34744: PUSH
34745: LD_INT 1
34747: ARRAY
34748: PUSH
34749: LD_VAR 0 6
34753: PUSH
34754: LD_INT 2
34756: ARRAY
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: PUSH
34779: EMPTY
34780: LIST
34781: PPUSH
34782: CALL_OW 447
34786: GO 34729
34788: POP
34789: POP
// end ;
34790: LD_VAR 0 5
34794: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34795: LD_EXP 145
34799: NOT
34800: IFFALSE 34850
34802: GO 34804
34804: DISABLE
// begin initHack := true ;
34805: LD_ADDR_EXP 145
34809: PUSH
34810: LD_INT 1
34812: ST_TO_ADDR
// hackTanks := [ ] ;
34813: LD_ADDR_EXP 146
34817: PUSH
34818: EMPTY
34819: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34820: LD_ADDR_EXP 147
34824: PUSH
34825: EMPTY
34826: ST_TO_ADDR
// hackLimit := 3 ;
34827: LD_ADDR_EXP 148
34831: PUSH
34832: LD_INT 3
34834: ST_TO_ADDR
// hackDist := 12 ;
34835: LD_ADDR_EXP 149
34839: PUSH
34840: LD_INT 12
34842: ST_TO_ADDR
// hackCounter := [ ] ;
34843: LD_ADDR_EXP 150
34847: PUSH
34848: EMPTY
34849: ST_TO_ADDR
// end ;
34850: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34851: LD_EXP 145
34855: PUSH
34856: LD_INT 34
34858: PUSH
34859: LD_EXP 157
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PPUSH
34868: CALL_OW 69
34872: AND
34873: IFFALSE 35128
34875: GO 34877
34877: DISABLE
34878: LD_INT 0
34880: PPUSH
34881: PPUSH
// begin enable ;
34882: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34883: LD_ADDR_VAR 0 1
34887: PUSH
34888: LD_INT 34
34890: PUSH
34891: LD_EXP 157
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PPUSH
34900: CALL_OW 69
34904: PUSH
34905: FOR_IN
34906: IFFALSE 35126
// begin if not i in hackTanks then
34908: LD_VAR 0 1
34912: PUSH
34913: LD_EXP 146
34917: IN
34918: NOT
34919: IFFALSE 35002
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34921: LD_ADDR_EXP 146
34925: PUSH
34926: LD_EXP 146
34930: PPUSH
34931: LD_EXP 146
34935: PUSH
34936: LD_INT 1
34938: PLUS
34939: PPUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: CALL_OW 1
34949: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34950: LD_ADDR_EXP 147
34954: PUSH
34955: LD_EXP 147
34959: PPUSH
34960: LD_EXP 147
34964: PUSH
34965: LD_INT 1
34967: PLUS
34968: PPUSH
34969: EMPTY
34970: PPUSH
34971: CALL_OW 1
34975: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34976: LD_ADDR_EXP 150
34980: PUSH
34981: LD_EXP 150
34985: PPUSH
34986: LD_EXP 150
34990: PUSH
34991: LD_INT 1
34993: PLUS
34994: PPUSH
34995: EMPTY
34996: PPUSH
34997: CALL_OW 1
35001: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL_OW 302
35011: NOT
35012: IFFALSE 35025
// begin HackUnlinkAll ( i ) ;
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL 35131 0 1
// continue ;
35023: GO 34905
// end ; HackCheckCapturedStatus ( i ) ;
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL 35574 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35034: LD_ADDR_VAR 0 2
35038: PUSH
35039: LD_INT 81
35041: PUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 255
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 33
35058: PUSH
35059: LD_INT 3
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 91
35068: PUSH
35069: LD_VAR 0 1
35073: PUSH
35074: LD_EXP 149
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 50
35086: PUSH
35087: EMPTY
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: PPUSH
35096: CALL_OW 69
35100: ST_TO_ADDR
// if not tmp then
35101: LD_VAR 0 2
35105: NOT
35106: IFFALSE 35110
// continue ;
35108: GO 34905
// HackLink ( i , tmp ) ;
35110: LD_VAR 0 1
35114: PPUSH
35115: LD_VAR 0 2
35119: PPUSH
35120: CALL 35267 0 2
// end ;
35124: GO 34905
35126: POP
35127: POP
// end ;
35128: PPOPN 2
35130: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35131: LD_INT 0
35133: PPUSH
35134: PPUSH
35135: PPUSH
// if not hack in hackTanks then
35136: LD_VAR 0 1
35140: PUSH
35141: LD_EXP 146
35145: IN
35146: NOT
35147: IFFALSE 35151
// exit ;
35149: GO 35262
// index := GetElementIndex ( hackTanks , hack ) ;
35151: LD_ADDR_VAR 0 4
35155: PUSH
35156: LD_EXP 146
35160: PPUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL 42840 0 2
35170: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35171: LD_EXP 147
35175: PUSH
35176: LD_VAR 0 4
35180: ARRAY
35181: IFFALSE 35262
// begin for i in hackTanksCaptured [ index ] do
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_EXP 147
35192: PUSH
35193: LD_VAR 0 4
35197: ARRAY
35198: PUSH
35199: FOR_IN
35200: IFFALSE 35226
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35202: LD_VAR 0 3
35206: PUSH
35207: LD_INT 1
35209: ARRAY
35210: PPUSH
35211: LD_VAR 0 3
35215: PUSH
35216: LD_INT 2
35218: ARRAY
35219: PPUSH
35220: CALL_OW 235
35224: GO 35199
35226: POP
35227: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35228: LD_ADDR_EXP 147
35232: PUSH
35233: LD_EXP 147
35237: PPUSH
35238: LD_VAR 0 4
35242: PPUSH
35243: EMPTY
35244: PPUSH
35245: CALL_OW 1
35249: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_INT 0
35257: PPUSH
35258: CALL_OW 505
// end ; end ;
35262: LD_VAR 0 2
35266: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35267: LD_INT 0
35269: PPUSH
35270: PPUSH
35271: PPUSH
// if not hack in hackTanks or not vehicles then
35272: LD_VAR 0 1
35276: PUSH
35277: LD_EXP 146
35281: IN
35282: NOT
35283: PUSH
35284: LD_VAR 0 2
35288: NOT
35289: OR
35290: IFFALSE 35294
// exit ;
35292: GO 35569
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35294: LD_ADDR_VAR 0 2
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: LD_VAR 0 2
35308: PPUSH
35309: LD_INT 1
35311: PPUSH
35312: LD_INT 1
35314: PPUSH
35315: CALL 43490 0 4
35319: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35320: LD_ADDR_VAR 0 5
35324: PUSH
35325: LD_EXP 146
35329: PPUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL 42840 0 2
35339: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35340: LD_EXP 147
35344: PUSH
35345: LD_VAR 0 5
35349: ARRAY
35350: PUSH
35351: LD_EXP 148
35355: LESS
35356: IFFALSE 35545
// begin for i := 1 to vehicles do
35358: LD_ADDR_VAR 0 4
35362: PUSH
35363: DOUBLE
35364: LD_INT 1
35366: DEC
35367: ST_TO_ADDR
35368: LD_VAR 0 2
35372: PUSH
35373: FOR_TO
35374: IFFALSE 35543
// begin if hackTanksCaptured [ index ] = hackLimit then
35376: LD_EXP 147
35380: PUSH
35381: LD_VAR 0 5
35385: ARRAY
35386: PUSH
35387: LD_EXP 148
35391: EQUAL
35392: IFFALSE 35396
// break ;
35394: GO 35543
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35396: LD_ADDR_EXP 150
35400: PUSH
35401: LD_EXP 150
35405: PPUSH
35406: LD_VAR 0 5
35410: PPUSH
35411: LD_EXP 150
35415: PUSH
35416: LD_VAR 0 5
35420: ARRAY
35421: PUSH
35422: LD_INT 1
35424: PLUS
35425: PPUSH
35426: CALL_OW 1
35430: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35431: LD_ADDR_EXP 147
35435: PUSH
35436: LD_EXP 147
35440: PPUSH
35441: LD_VAR 0 5
35445: PUSH
35446: LD_EXP 147
35450: PUSH
35451: LD_VAR 0 5
35455: ARRAY
35456: PUSH
35457: LD_INT 1
35459: PLUS
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PPUSH
35465: LD_VAR 0 2
35469: PUSH
35470: LD_VAR 0 4
35474: ARRAY
35475: PUSH
35476: LD_VAR 0 2
35480: PUSH
35481: LD_VAR 0 4
35485: ARRAY
35486: PPUSH
35487: CALL_OW 255
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PPUSH
35496: CALL 43055 0 3
35500: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35501: LD_VAR 0 2
35505: PUSH
35506: LD_VAR 0 4
35510: ARRAY
35511: PPUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 255
35521: PPUSH
35522: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35526: LD_VAR 0 2
35530: PUSH
35531: LD_VAR 0 4
35535: ARRAY
35536: PPUSH
35537: CALL_OW 141
// end ;
35541: GO 35373
35543: POP
35544: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35545: LD_VAR 0 1
35549: PPUSH
35550: LD_EXP 147
35554: PUSH
35555: LD_VAR 0 5
35559: ARRAY
35560: PUSH
35561: LD_INT 0
35563: PLUS
35564: PPUSH
35565: CALL_OW 505
// end ;
35569: LD_VAR 0 3
35573: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35574: LD_INT 0
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
// if not hack in hackTanks then
35580: LD_VAR 0 1
35584: PUSH
35585: LD_EXP 146
35589: IN
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 35835
// index := GetElementIndex ( hackTanks , hack ) ;
35595: LD_ADDR_VAR 0 4
35599: PUSH
35600: LD_EXP 146
35604: PPUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL 42840 0 2
35614: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35615: LD_ADDR_VAR 0 3
35619: PUSH
35620: DOUBLE
35621: LD_EXP 147
35625: PUSH
35626: LD_VAR 0 4
35630: ARRAY
35631: INC
35632: ST_TO_ADDR
35633: LD_INT 1
35635: PUSH
35636: FOR_DOWNTO
35637: IFFALSE 35809
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35639: LD_ADDR_VAR 0 5
35643: PUSH
35644: LD_EXP 147
35648: PUSH
35649: LD_VAR 0 4
35653: ARRAY
35654: PUSH
35655: LD_VAR 0 3
35659: ARRAY
35660: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35661: LD_VAR 0 5
35665: PUSH
35666: LD_INT 1
35668: ARRAY
35669: PPUSH
35670: CALL_OW 302
35674: NOT
35675: PUSH
35676: LD_VAR 0 5
35680: PUSH
35681: LD_INT 1
35683: ARRAY
35684: PPUSH
35685: CALL_OW 255
35689: PUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 255
35699: NONEQUAL
35700: OR
35701: IFFALSE 35807
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35703: LD_VAR 0 5
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: PPUSH
35712: CALL_OW 305
35716: PUSH
35717: LD_VAR 0 5
35721: PUSH
35722: LD_INT 1
35724: ARRAY
35725: PPUSH
35726: CALL_OW 255
35730: PUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 255
35740: EQUAL
35741: AND
35742: IFFALSE 35766
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35744: LD_VAR 0 5
35748: PUSH
35749: LD_INT 1
35751: ARRAY
35752: PPUSH
35753: LD_VAR 0 5
35757: PUSH
35758: LD_INT 2
35760: ARRAY
35761: PPUSH
35762: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35766: LD_ADDR_EXP 147
35770: PUSH
35771: LD_EXP 147
35775: PPUSH
35776: LD_VAR 0 4
35780: PPUSH
35781: LD_EXP 147
35785: PUSH
35786: LD_VAR 0 4
35790: ARRAY
35791: PPUSH
35792: LD_VAR 0 3
35796: PPUSH
35797: CALL_OW 3
35801: PPUSH
35802: CALL_OW 1
35806: ST_TO_ADDR
// end ; end ;
35807: GO 35636
35809: POP
35810: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35811: LD_VAR 0 1
35815: PPUSH
35816: LD_EXP 147
35820: PUSH
35821: LD_VAR 0 4
35825: ARRAY
35826: PUSH
35827: LD_INT 0
35829: PLUS
35830: PPUSH
35831: CALL_OW 505
// end ;
35835: LD_VAR 0 2
35839: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35840: LD_INT 0
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
// if not hack in hackTanks then
35846: LD_VAR 0 1
35850: PUSH
35851: LD_EXP 146
35855: IN
35856: NOT
35857: IFFALSE 35861
// exit ;
35859: GO 35946
// index := GetElementIndex ( hackTanks , hack ) ;
35861: LD_ADDR_VAR 0 5
35865: PUSH
35866: LD_EXP 146
35870: PPUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL 42840 0 2
35880: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35881: LD_ADDR_VAR 0 4
35885: PUSH
35886: DOUBLE
35887: LD_INT 1
35889: DEC
35890: ST_TO_ADDR
35891: LD_EXP 147
35895: PUSH
35896: LD_VAR 0 5
35900: ARRAY
35901: PUSH
35902: FOR_TO
35903: IFFALSE 35944
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35905: LD_EXP 147
35909: PUSH
35910: LD_VAR 0 5
35914: ARRAY
35915: PUSH
35916: LD_VAR 0 4
35920: ARRAY
35921: PUSH
35922: LD_INT 1
35924: ARRAY
35925: PUSH
35926: LD_VAR 0 2
35930: EQUAL
35931: IFFALSE 35942
// KillUnit ( vehicle ) ;
35933: LD_VAR 0 2
35937: PPUSH
35938: CALL_OW 66
35942: GO 35902
35944: POP
35945: POP
// end ;
35946: LD_VAR 0 3
35950: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35951: LD_EXP 151
35955: NOT
35956: IFFALSE 35991
35958: GO 35960
35960: DISABLE
// begin initMiner := true ;
35961: LD_ADDR_EXP 151
35965: PUSH
35966: LD_INT 1
35968: ST_TO_ADDR
// minersList := [ ] ;
35969: LD_ADDR_EXP 152
35973: PUSH
35974: EMPTY
35975: ST_TO_ADDR
// minerMinesList := [ ] ;
35976: LD_ADDR_EXP 153
35980: PUSH
35981: EMPTY
35982: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35983: LD_ADDR_EXP 154
35987: PUSH
35988: LD_INT 5
35990: ST_TO_ADDR
// end ;
35991: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35992: LD_EXP 151
35996: PUSH
35997: LD_INT 34
35999: PUSH
36000: LD_EXP 162
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PPUSH
36009: CALL_OW 69
36013: AND
36014: IFFALSE 36477
36016: GO 36018
36018: DISABLE
36019: LD_INT 0
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
// begin enable ;
36025: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36026: LD_ADDR_VAR 0 1
36030: PUSH
36031: LD_INT 34
36033: PUSH
36034: LD_EXP 162
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PPUSH
36043: CALL_OW 69
36047: PUSH
36048: FOR_IN
36049: IFFALSE 36121
// begin if not i in minersList then
36051: LD_VAR 0 1
36055: PUSH
36056: LD_EXP 152
36060: IN
36061: NOT
36062: IFFALSE 36119
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36064: LD_ADDR_EXP 152
36068: PUSH
36069: LD_EXP 152
36073: PPUSH
36074: LD_EXP 152
36078: PUSH
36079: LD_INT 1
36081: PLUS
36082: PPUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 1
36092: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36093: LD_ADDR_EXP 153
36097: PUSH
36098: LD_EXP 153
36102: PPUSH
36103: LD_EXP 153
36107: PUSH
36108: LD_INT 1
36110: PLUS
36111: PPUSH
36112: EMPTY
36113: PPUSH
36114: CALL_OW 1
36118: ST_TO_ADDR
// end end ;
36119: GO 36048
36121: POP
36122: POP
// for i := minerMinesList downto 1 do
36123: LD_ADDR_VAR 0 1
36127: PUSH
36128: DOUBLE
36129: LD_EXP 153
36133: INC
36134: ST_TO_ADDR
36135: LD_INT 1
36137: PUSH
36138: FOR_DOWNTO
36139: IFFALSE 36475
// begin if IsLive ( minersList [ i ] ) then
36141: LD_EXP 152
36145: PUSH
36146: LD_VAR 0 1
36150: ARRAY
36151: PPUSH
36152: CALL_OW 300
36156: IFFALSE 36184
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36158: LD_EXP 152
36162: PUSH
36163: LD_VAR 0 1
36167: ARRAY
36168: PPUSH
36169: LD_EXP 153
36173: PUSH
36174: LD_VAR 0 1
36178: ARRAY
36179: PPUSH
36180: CALL_OW 505
// if not minerMinesList [ i ] then
36184: LD_EXP 153
36188: PUSH
36189: LD_VAR 0 1
36193: ARRAY
36194: NOT
36195: IFFALSE 36199
// continue ;
36197: GO 36138
// for j := minerMinesList [ i ] downto 1 do
36199: LD_ADDR_VAR 0 2
36203: PUSH
36204: DOUBLE
36205: LD_EXP 153
36209: PUSH
36210: LD_VAR 0 1
36214: ARRAY
36215: INC
36216: ST_TO_ADDR
36217: LD_INT 1
36219: PUSH
36220: FOR_DOWNTO
36221: IFFALSE 36471
// begin side := GetSide ( minersList [ i ] ) ;
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_EXP 152
36232: PUSH
36233: LD_VAR 0 1
36237: ARRAY
36238: PPUSH
36239: CALL_OW 255
36243: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36244: LD_ADDR_VAR 0 4
36248: PUSH
36249: LD_EXP 153
36253: PUSH
36254: LD_VAR 0 1
36258: ARRAY
36259: PUSH
36260: LD_VAR 0 2
36264: ARRAY
36265: PUSH
36266: LD_INT 1
36268: ARRAY
36269: PPUSH
36270: LD_EXP 153
36274: PUSH
36275: LD_VAR 0 1
36279: ARRAY
36280: PUSH
36281: LD_VAR 0 2
36285: ARRAY
36286: PUSH
36287: LD_INT 2
36289: ARRAY
36290: PPUSH
36291: CALL_OW 428
36295: ST_TO_ADDR
// if not tmp then
36296: LD_VAR 0 4
36300: NOT
36301: IFFALSE 36305
// continue ;
36303: GO 36220
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36305: LD_VAR 0 4
36309: PUSH
36310: LD_INT 81
36312: PUSH
36313: LD_VAR 0 3
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PPUSH
36322: CALL_OW 69
36326: IN
36327: PUSH
36328: LD_EXP 153
36332: PUSH
36333: LD_VAR 0 1
36337: ARRAY
36338: PUSH
36339: LD_VAR 0 2
36343: ARRAY
36344: PUSH
36345: LD_INT 1
36347: ARRAY
36348: PPUSH
36349: LD_EXP 153
36353: PUSH
36354: LD_VAR 0 1
36358: ARRAY
36359: PUSH
36360: LD_VAR 0 2
36364: ARRAY
36365: PUSH
36366: LD_INT 2
36368: ARRAY
36369: PPUSH
36370: CALL_OW 458
36374: AND
36375: IFFALSE 36469
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36377: LD_EXP 153
36381: PUSH
36382: LD_VAR 0 1
36386: ARRAY
36387: PUSH
36388: LD_VAR 0 2
36392: ARRAY
36393: PUSH
36394: LD_INT 1
36396: ARRAY
36397: PPUSH
36398: LD_EXP 153
36402: PUSH
36403: LD_VAR 0 1
36407: ARRAY
36408: PUSH
36409: LD_VAR 0 2
36413: ARRAY
36414: PUSH
36415: LD_INT 2
36417: ARRAY
36418: PPUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36428: LD_ADDR_EXP 153
36432: PUSH
36433: LD_EXP 153
36437: PPUSH
36438: LD_VAR 0 1
36442: PPUSH
36443: LD_EXP 153
36447: PUSH
36448: LD_VAR 0 1
36452: ARRAY
36453: PPUSH
36454: LD_VAR 0 2
36458: PPUSH
36459: CALL_OW 3
36463: PPUSH
36464: CALL_OW 1
36468: ST_TO_ADDR
// end ; end ;
36469: GO 36220
36471: POP
36472: POP
// end ;
36473: GO 36138
36475: POP
36476: POP
// end ;
36477: PPOPN 4
36479: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36480: LD_INT 0
36482: PPUSH
36483: PPUSH
// result := false ;
36484: LD_ADDR_VAR 0 4
36488: PUSH
36489: LD_INT 0
36491: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36492: LD_VAR 0 1
36496: PPUSH
36497: CALL_OW 264
36501: PUSH
36502: LD_EXP 162
36506: EQUAL
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 36752
// index := GetElementIndex ( minersList , unit ) ;
36512: LD_ADDR_VAR 0 5
36516: PUSH
36517: LD_EXP 152
36521: PPUSH
36522: LD_VAR 0 1
36526: PPUSH
36527: CALL 42840 0 2
36531: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36532: LD_EXP 153
36536: PUSH
36537: LD_VAR 0 5
36541: ARRAY
36542: PUSH
36543: LD_EXP 154
36547: GREATEREQUAL
36548: IFFALSE 36552
// exit ;
36550: GO 36752
// ComMoveXY ( unit , x , y ) ;
36552: LD_VAR 0 1
36556: PPUSH
36557: LD_VAR 0 2
36561: PPUSH
36562: LD_VAR 0 3
36566: PPUSH
36567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36571: LD_INT 35
36573: PPUSH
36574: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36578: LD_VAR 0 1
36582: PPUSH
36583: LD_VAR 0 2
36587: PPUSH
36588: LD_VAR 0 3
36592: PPUSH
36593: CALL 72904 0 3
36597: NOT
36598: PUSH
36599: LD_VAR 0 1
36603: PPUSH
36604: CALL_OW 314
36608: AND
36609: IFFALSE 36613
// exit ;
36611: GO 36752
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36613: LD_VAR 0 2
36617: PPUSH
36618: LD_VAR 0 3
36622: PPUSH
36623: CALL_OW 428
36627: PUSH
36628: LD_VAR 0 1
36632: EQUAL
36633: PUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 314
36643: NOT
36644: AND
36645: IFFALSE 36571
// PlaySoundXY ( x , y , PlantMine ) ;
36647: LD_VAR 0 2
36651: PPUSH
36652: LD_VAR 0 3
36656: PPUSH
36657: LD_STRING PlantMine
36659: PPUSH
36660: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36664: LD_VAR 0 2
36668: PPUSH
36669: LD_VAR 0 3
36673: PPUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 255
36683: PPUSH
36684: LD_INT 0
36686: PPUSH
36687: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36691: LD_ADDR_EXP 153
36695: PUSH
36696: LD_EXP 153
36700: PPUSH
36701: LD_VAR 0 5
36705: PUSH
36706: LD_EXP 153
36710: PUSH
36711: LD_VAR 0 5
36715: ARRAY
36716: PUSH
36717: LD_INT 1
36719: PLUS
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PPUSH
36725: LD_VAR 0 2
36729: PUSH
36730: LD_VAR 0 3
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PPUSH
36739: CALL 43055 0 3
36743: ST_TO_ADDR
// result := true ;
36744: LD_ADDR_VAR 0 4
36748: PUSH
36749: LD_INT 1
36751: ST_TO_ADDR
// end ;
36752: LD_VAR 0 4
36756: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36757: LD_INT 0
36759: PPUSH
36760: PPUSH
36761: PPUSH
// if not unit in minersList then
36762: LD_VAR 0 1
36766: PUSH
36767: LD_EXP 152
36771: IN
36772: NOT
36773: IFFALSE 36777
// exit ;
36775: GO 37169
// index := GetElementIndex ( minersList , unit ) ;
36777: LD_ADDR_VAR 0 6
36781: PUSH
36782: LD_EXP 152
36786: PPUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL 42840 0 2
36796: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36797: LD_ADDR_VAR 0 5
36801: PUSH
36802: DOUBLE
36803: LD_EXP 153
36807: PUSH
36808: LD_VAR 0 6
36812: ARRAY
36813: INC
36814: ST_TO_ADDR
36815: LD_INT 1
36817: PUSH
36818: FOR_DOWNTO
36819: IFFALSE 36980
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36821: LD_EXP 153
36825: PUSH
36826: LD_VAR 0 6
36830: ARRAY
36831: PUSH
36832: LD_VAR 0 5
36836: ARRAY
36837: PUSH
36838: LD_INT 1
36840: ARRAY
36841: PUSH
36842: LD_VAR 0 2
36846: EQUAL
36847: PUSH
36848: LD_EXP 153
36852: PUSH
36853: LD_VAR 0 6
36857: ARRAY
36858: PUSH
36859: LD_VAR 0 5
36863: ARRAY
36864: PUSH
36865: LD_INT 2
36867: ARRAY
36868: PUSH
36869: LD_VAR 0 3
36873: EQUAL
36874: AND
36875: IFFALSE 36978
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36877: LD_EXP 153
36881: PUSH
36882: LD_VAR 0 6
36886: ARRAY
36887: PUSH
36888: LD_VAR 0 5
36892: ARRAY
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: PPUSH
36898: LD_EXP 153
36902: PUSH
36903: LD_VAR 0 6
36907: ARRAY
36908: PUSH
36909: LD_VAR 0 5
36913: ARRAY
36914: PUSH
36915: LD_INT 2
36917: ARRAY
36918: PPUSH
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 255
36928: PPUSH
36929: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36933: LD_ADDR_EXP 153
36937: PUSH
36938: LD_EXP 153
36942: PPUSH
36943: LD_VAR 0 6
36947: PPUSH
36948: LD_EXP 153
36952: PUSH
36953: LD_VAR 0 6
36957: ARRAY
36958: PPUSH
36959: LD_VAR 0 5
36963: PPUSH
36964: CALL_OW 3
36968: PPUSH
36969: CALL_OW 1
36973: ST_TO_ADDR
// exit ;
36974: POP
36975: POP
36976: GO 37169
// end ; end ;
36978: GO 36818
36980: POP
36981: POP
// for i := minerMinesList [ index ] downto 1 do
36982: LD_ADDR_VAR 0 5
36986: PUSH
36987: DOUBLE
36988: LD_EXP 153
36992: PUSH
36993: LD_VAR 0 6
36997: ARRAY
36998: INC
36999: ST_TO_ADDR
37000: LD_INT 1
37002: PUSH
37003: FOR_DOWNTO
37004: IFFALSE 37167
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37006: LD_EXP 153
37010: PUSH
37011: LD_VAR 0 6
37015: ARRAY
37016: PUSH
37017: LD_VAR 0 5
37021: ARRAY
37022: PUSH
37023: LD_INT 1
37025: ARRAY
37026: PPUSH
37027: LD_EXP 153
37031: PUSH
37032: LD_VAR 0 6
37036: ARRAY
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: PUSH
37044: LD_INT 2
37046: ARRAY
37047: PPUSH
37048: LD_VAR 0 2
37052: PPUSH
37053: LD_VAR 0 3
37057: PPUSH
37058: CALL_OW 298
37062: PUSH
37063: LD_INT 6
37065: LESS
37066: IFFALSE 37165
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37068: LD_EXP 153
37072: PUSH
37073: LD_VAR 0 6
37077: ARRAY
37078: PUSH
37079: LD_VAR 0 5
37083: ARRAY
37084: PUSH
37085: LD_INT 1
37087: ARRAY
37088: PPUSH
37089: LD_EXP 153
37093: PUSH
37094: LD_VAR 0 6
37098: ARRAY
37099: PUSH
37100: LD_VAR 0 5
37104: ARRAY
37105: PUSH
37106: LD_INT 2
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 255
37119: PPUSH
37120: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37124: LD_ADDR_EXP 153
37128: PUSH
37129: LD_EXP 153
37133: PPUSH
37134: LD_VAR 0 6
37138: PPUSH
37139: LD_EXP 153
37143: PUSH
37144: LD_VAR 0 6
37148: ARRAY
37149: PPUSH
37150: LD_VAR 0 5
37154: PPUSH
37155: CALL_OW 3
37159: PPUSH
37160: CALL_OW 1
37164: ST_TO_ADDR
// end ; end ;
37165: GO 37003
37167: POP
37168: POP
// end ;
37169: LD_VAR 0 4
37173: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37174: LD_INT 0
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 264
37194: PUSH
37195: LD_EXP 162
37199: EQUAL
37200: NOT
37201: PUSH
37202: LD_VAR 0 1
37206: PUSH
37207: LD_EXP 152
37211: IN
37212: NOT
37213: OR
37214: IFFALSE 37218
// exit ;
37216: GO 37540
// index := GetElementIndex ( minersList , unit ) ;
37218: LD_ADDR_VAR 0 6
37222: PUSH
37223: LD_EXP 152
37227: PPUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL 42840 0 2
37237: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37238: LD_ADDR_VAR 0 8
37242: PUSH
37243: LD_EXP 154
37247: PUSH
37248: LD_EXP 153
37252: PUSH
37253: LD_VAR 0 6
37257: ARRAY
37258: MINUS
37259: ST_TO_ADDR
// if not minesFreeAmount then
37260: LD_VAR 0 8
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 37540
// tmp := [ ] ;
37269: LD_ADDR_VAR 0 7
37273: PUSH
37274: EMPTY
37275: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37276: LD_ADDR_VAR 0 5
37280: PUSH
37281: DOUBLE
37282: LD_INT 1
37284: DEC
37285: ST_TO_ADDR
37286: LD_VAR 0 8
37290: PUSH
37291: FOR_TO
37292: IFFALSE 37487
// begin _d := rand ( 0 , 5 ) ;
37294: LD_ADDR_VAR 0 11
37298: PUSH
37299: LD_INT 0
37301: PPUSH
37302: LD_INT 5
37304: PPUSH
37305: CALL_OW 12
37309: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37310: LD_ADDR_VAR 0 12
37314: PUSH
37315: LD_INT 2
37317: PPUSH
37318: LD_INT 6
37320: PPUSH
37321: CALL_OW 12
37325: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37326: LD_ADDR_VAR 0 9
37330: PUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_VAR 0 11
37340: PPUSH
37341: LD_VAR 0 12
37345: PPUSH
37346: CALL_OW 272
37350: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37351: LD_ADDR_VAR 0 10
37355: PUSH
37356: LD_VAR 0 3
37360: PPUSH
37361: LD_VAR 0 11
37365: PPUSH
37366: LD_VAR 0 12
37370: PPUSH
37371: CALL_OW 273
37375: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37376: LD_VAR 0 9
37380: PPUSH
37381: LD_VAR 0 10
37385: PPUSH
37386: CALL_OW 488
37390: PUSH
37391: LD_VAR 0 9
37395: PUSH
37396: LD_VAR 0 10
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_VAR 0 7
37409: IN
37410: NOT
37411: AND
37412: PUSH
37413: LD_VAR 0 9
37417: PPUSH
37418: LD_VAR 0 10
37422: PPUSH
37423: CALL_OW 458
37427: NOT
37428: AND
37429: IFFALSE 37471
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37431: LD_ADDR_VAR 0 7
37435: PUSH
37436: LD_VAR 0 7
37440: PPUSH
37441: LD_VAR 0 7
37445: PUSH
37446: LD_INT 1
37448: PLUS
37449: PPUSH
37450: LD_VAR 0 9
37454: PUSH
37455: LD_VAR 0 10
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PPUSH
37464: CALL_OW 1
37468: ST_TO_ADDR
37469: GO 37485
// i := i - 1 ;
37471: LD_ADDR_VAR 0 5
37475: PUSH
37476: LD_VAR 0 5
37480: PUSH
37481: LD_INT 1
37483: MINUS
37484: ST_TO_ADDR
// end ;
37485: GO 37291
37487: POP
37488: POP
// for i in tmp do
37489: LD_ADDR_VAR 0 5
37493: PUSH
37494: LD_VAR 0 7
37498: PUSH
37499: FOR_IN
37500: IFFALSE 37538
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37502: LD_VAR 0 1
37506: PPUSH
37507: LD_VAR 0 5
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: LD_VAR 0 5
37520: PUSH
37521: LD_INT 2
37523: ARRAY
37524: PPUSH
37525: CALL 36480 0 3
37529: NOT
37530: IFFALSE 37536
// exit ;
37532: POP
37533: POP
37534: GO 37540
37536: GO 37499
37538: POP
37539: POP
// end ;
37540: LD_VAR 0 4
37544: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37545: LD_INT 0
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
// if not GetClass ( unit ) = class_sniper then
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 257
37563: PUSH
37564: LD_INT 5
37566: EQUAL
37567: NOT
37568: IFFALSE 37572
// exit ;
37570: GO 37960
// dist := 8 ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_INT 8
37579: ST_TO_ADDR
// viewRange := 12 ;
37580: LD_ADDR_VAR 0 7
37584: PUSH
37585: LD_INT 12
37587: ST_TO_ADDR
// side := GetSide ( unit ) ;
37588: LD_ADDR_VAR 0 6
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 255
37602: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37603: LD_INT 61
37605: PPUSH
37606: LD_VAR 0 6
37610: PPUSH
37611: CALL_OW 321
37615: PUSH
37616: LD_INT 2
37618: EQUAL
37619: IFFALSE 37629
// viewRange := 16 ;
37621: LD_ADDR_VAR 0 7
37625: PUSH
37626: LD_INT 16
37628: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37629: LD_VAR 0 1
37633: PPUSH
37634: LD_VAR 0 2
37638: PPUSH
37639: LD_VAR 0 3
37643: PPUSH
37644: CALL_OW 297
37648: PUSH
37649: LD_VAR 0 5
37653: GREATER
37654: IFFALSE 37733
// begin ComMoveXY ( unit , x , y ) ;
37656: LD_VAR 0 1
37660: PPUSH
37661: LD_VAR 0 2
37665: PPUSH
37666: LD_VAR 0 3
37670: PPUSH
37671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37675: LD_INT 35
37677: PPUSH
37678: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: CALL 72904 0 3
37701: NOT
37702: IFFALSE 37706
// exit ;
37704: GO 37960
// until GetDistUnitXY ( unit , x , y ) < dist ;
37706: LD_VAR 0 1
37710: PPUSH
37711: LD_VAR 0 2
37715: PPUSH
37716: LD_VAR 0 3
37720: PPUSH
37721: CALL_OW 297
37725: PUSH
37726: LD_VAR 0 5
37730: LESS
37731: IFFALSE 37675
// end ; ComTurnXY ( unit , x , y ) ;
37733: LD_VAR 0 1
37737: PPUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_VAR 0 3
37747: PPUSH
37748: CALL_OW 118
// wait ( 5 ) ;
37752: LD_INT 5
37754: PPUSH
37755: CALL_OW 67
// _d := GetDir ( unit ) ;
37759: LD_ADDR_VAR 0 10
37763: PUSH
37764: LD_VAR 0 1
37768: PPUSH
37769: CALL_OW 254
37773: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37774: LD_ADDR_VAR 0 8
37778: PUSH
37779: LD_VAR 0 1
37783: PPUSH
37784: CALL_OW 250
37788: PPUSH
37789: LD_VAR 0 10
37793: PPUSH
37794: LD_VAR 0 5
37798: PPUSH
37799: CALL_OW 272
37803: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37804: LD_ADDR_VAR 0 9
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 251
37818: PPUSH
37819: LD_VAR 0 10
37823: PPUSH
37824: LD_VAR 0 5
37828: PPUSH
37829: CALL_OW 273
37833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37834: LD_VAR 0 8
37838: PPUSH
37839: LD_VAR 0 9
37843: PPUSH
37844: CALL_OW 488
37848: NOT
37849: IFFALSE 37853
// exit ;
37851: GO 37960
// ComAnimCustom ( unit , 1 ) ;
37853: LD_VAR 0 1
37857: PPUSH
37858: LD_INT 1
37860: PPUSH
37861: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37865: LD_VAR 0 8
37869: PPUSH
37870: LD_VAR 0 9
37874: PPUSH
37875: LD_VAR 0 6
37879: PPUSH
37880: LD_VAR 0 7
37884: PPUSH
37885: CALL_OW 330
// repeat wait ( 1 ) ;
37889: LD_INT 1
37891: PPUSH
37892: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 316
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 314
37915: OR
37916: PUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 302
37926: NOT
37927: OR
37928: PUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 301
37938: OR
37939: IFFALSE 37889
// RemoveSeeing ( _x , _y , side ) ;
37941: LD_VAR 0 8
37945: PPUSH
37946: LD_VAR 0 9
37950: PPUSH
37951: LD_VAR 0 6
37955: PPUSH
37956: CALL_OW 331
// end ; end_of_file
37960: LD_VAR 0 4
37964: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
37965: LD_INT 0
37967: PPUSH
// ar_miner := 81 ;
37968: LD_ADDR_EXP 162
37972: PUSH
37973: LD_INT 81
37975: ST_TO_ADDR
// ar_crane := 88 ;
37976: LD_ADDR_EXP 161
37980: PUSH
37981: LD_INT 88
37983: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
37984: LD_ADDR_EXP 156
37988: PUSH
37989: LD_INT 89
37991: ST_TO_ADDR
// us_hack := 99 ;
37992: LD_ADDR_EXP 157
37996: PUSH
37997: LD_INT 99
37999: ST_TO_ADDR
// us_artillery := 97 ;
38000: LD_ADDR_EXP 158
38004: PUSH
38005: LD_INT 97
38007: ST_TO_ADDR
// ar_bio_bomb := 91 ;
38008: LD_ADDR_EXP 159
38012: PUSH
38013: LD_INT 91
38015: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
38016: LD_ADDR_EXP 160
38020: PUSH
38021: LD_INT 92
38023: ST_TO_ADDR
// ru_radar := 98 ;
38024: LD_ADDR_EXP 155
38028: PUSH
38029: LD_INT 98
38031: ST_TO_ADDR
// tech_Artillery := 80 ;
38032: LD_ADDR_EXP 163
38036: PUSH
38037: LD_INT 80
38039: ST_TO_ADDR
// tech_RadMat := 81 ;
38040: LD_ADDR_EXP 164
38044: PUSH
38045: LD_INT 81
38047: ST_TO_ADDR
// tech_BasicTools := 82 ;
38048: LD_ADDR_EXP 165
38052: PUSH
38053: LD_INT 82
38055: ST_TO_ADDR
// tech_Cargo := 83 ;
38056: LD_ADDR_EXP 166
38060: PUSH
38061: LD_INT 83
38063: ST_TO_ADDR
// tech_Track := 84 ;
38064: LD_ADDR_EXP 167
38068: PUSH
38069: LD_INT 84
38071: ST_TO_ADDR
// tech_Crane := 85 ;
38072: LD_ADDR_EXP 168
38076: PUSH
38077: LD_INT 85
38079: ST_TO_ADDR
// tech_Bulldozer := 86 ;
38080: LD_ADDR_EXP 169
38084: PUSH
38085: LD_INT 86
38087: ST_TO_ADDR
// tech_Hovercraft := 87 ;
38088: LD_ADDR_EXP 170
38092: PUSH
38093: LD_INT 87
38095: ST_TO_ADDR
// end ;
38096: LD_VAR 0 1
38100: RET
// every 1 do
38101: GO 38103
38103: DISABLE
// InitGlobalVariables ; end_of_file
38104: CALL 37965 0 0
38108: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38109: LD_INT 0
38111: PPUSH
38112: PPUSH
// if exist_mode then
38113: LD_VAR 0 2
38117: IFFALSE 38142
// unit := CreateCharacter ( prefix & ident ) else
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_VAR 0 3
38128: PUSH
38129: LD_VAR 0 1
38133: STR
38134: PPUSH
38135: CALL_OW 34
38139: ST_TO_ADDR
38140: GO 38157
// unit := NewCharacter ( ident ) ;
38142: LD_ADDR_VAR 0 5
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 25
38156: ST_TO_ADDR
// result := unit ;
38157: LD_ADDR_VAR 0 4
38161: PUSH
38162: LD_VAR 0 5
38166: ST_TO_ADDR
// end ;
38167: LD_VAR 0 4
38171: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38172: LD_INT 0
38174: PPUSH
38175: PPUSH
// if not side or not nation then
38176: LD_VAR 0 1
38180: NOT
38181: PUSH
38182: LD_VAR 0 2
38186: NOT
38187: OR
38188: IFFALSE 38192
// exit ;
38190: GO 38956
// case nation of nation_american :
38192: LD_VAR 0 2
38196: PUSH
38197: LD_INT 1
38199: DOUBLE
38200: EQUAL
38201: IFTRUE 38205
38203: GO 38419
38205: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38206: LD_ADDR_VAR 0 4
38210: PUSH
38211: LD_INT 35
38213: PUSH
38214: LD_INT 45
38216: PUSH
38217: LD_INT 46
38219: PUSH
38220: LD_INT 47
38222: PUSH
38223: LD_INT 82
38225: PUSH
38226: LD_INT 83
38228: PUSH
38229: LD_INT 84
38231: PUSH
38232: LD_INT 85
38234: PUSH
38235: LD_INT 86
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 6
38246: PUSH
38247: LD_INT 15
38249: PUSH
38250: LD_INT 16
38252: PUSH
38253: LD_INT 7
38255: PUSH
38256: LD_INT 12
38258: PUSH
38259: LD_INT 13
38261: PUSH
38262: LD_INT 10
38264: PUSH
38265: LD_INT 14
38267: PUSH
38268: LD_INT 20
38270: PUSH
38271: LD_INT 21
38273: PUSH
38274: LD_INT 22
38276: PUSH
38277: LD_INT 25
38279: PUSH
38280: LD_INT 32
38282: PUSH
38283: LD_INT 27
38285: PUSH
38286: LD_INT 36
38288: PUSH
38289: LD_INT 69
38291: PUSH
38292: LD_INT 39
38294: PUSH
38295: LD_INT 34
38297: PUSH
38298: LD_INT 40
38300: PUSH
38301: LD_INT 48
38303: PUSH
38304: LD_INT 49
38306: PUSH
38307: LD_INT 50
38309: PUSH
38310: LD_INT 51
38312: PUSH
38313: LD_INT 52
38315: PUSH
38316: LD_INT 53
38318: PUSH
38319: LD_INT 54
38321: PUSH
38322: LD_INT 55
38324: PUSH
38325: LD_INT 56
38327: PUSH
38328: LD_INT 57
38330: PUSH
38331: LD_INT 58
38333: PUSH
38334: LD_INT 59
38336: PUSH
38337: LD_INT 60
38339: PUSH
38340: LD_INT 61
38342: PUSH
38343: LD_INT 62
38345: PUSH
38346: LD_INT 80
38348: PUSH
38349: LD_INT 82
38351: PUSH
38352: LD_INT 83
38354: PUSH
38355: LD_INT 84
38357: PUSH
38358: LD_INT 85
38360: PUSH
38361: LD_INT 86
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: ST_TO_ADDR
38417: GO 38880
38419: LD_INT 2
38421: DOUBLE
38422: EQUAL
38423: IFTRUE 38427
38425: GO 38649
38427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
38428: LD_ADDR_VAR 0 4
38432: PUSH
38433: LD_INT 35
38435: PUSH
38436: LD_INT 45
38438: PUSH
38439: LD_INT 46
38441: PUSH
38442: LD_INT 47
38444: PUSH
38445: LD_INT 82
38447: PUSH
38448: LD_INT 83
38450: PUSH
38451: LD_INT 84
38453: PUSH
38454: LD_INT 85
38456: PUSH
38457: LD_INT 87
38459: PUSH
38460: LD_INT 70
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: LD_INT 11
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: LD_INT 4
38474: PUSH
38475: LD_INT 5
38477: PUSH
38478: LD_INT 6
38480: PUSH
38481: LD_INT 15
38483: PUSH
38484: LD_INT 18
38486: PUSH
38487: LD_INT 7
38489: PUSH
38490: LD_INT 17
38492: PUSH
38493: LD_INT 8
38495: PUSH
38496: LD_INT 20
38498: PUSH
38499: LD_INT 21
38501: PUSH
38502: LD_INT 22
38504: PUSH
38505: LD_INT 72
38507: PUSH
38508: LD_INT 26
38510: PUSH
38511: LD_INT 69
38513: PUSH
38514: LD_INT 39
38516: PUSH
38517: LD_INT 40
38519: PUSH
38520: LD_INT 41
38522: PUSH
38523: LD_INT 42
38525: PUSH
38526: LD_INT 43
38528: PUSH
38529: LD_INT 48
38531: PUSH
38532: LD_INT 49
38534: PUSH
38535: LD_INT 50
38537: PUSH
38538: LD_INT 51
38540: PUSH
38541: LD_INT 52
38543: PUSH
38544: LD_INT 53
38546: PUSH
38547: LD_INT 54
38549: PUSH
38550: LD_INT 55
38552: PUSH
38553: LD_INT 56
38555: PUSH
38556: LD_INT 60
38558: PUSH
38559: LD_INT 61
38561: PUSH
38562: LD_INT 62
38564: PUSH
38565: LD_INT 66
38567: PUSH
38568: LD_INT 67
38570: PUSH
38571: LD_INT 68
38573: PUSH
38574: LD_INT 81
38576: PUSH
38577: LD_INT 82
38579: PUSH
38580: LD_INT 83
38582: PUSH
38583: LD_INT 84
38585: PUSH
38586: LD_INT 85
38588: PUSH
38589: LD_INT 87
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: ST_TO_ADDR
38647: GO 38880
38649: LD_INT 3
38651: DOUBLE
38652: EQUAL
38653: IFTRUE 38657
38655: GO 38879
38657: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38658: LD_ADDR_VAR 0 4
38662: PUSH
38663: LD_INT 46
38665: PUSH
38666: LD_INT 47
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 82
38677: PUSH
38678: LD_INT 83
38680: PUSH
38681: LD_INT 84
38683: PUSH
38684: LD_INT 85
38686: PUSH
38687: LD_INT 86
38689: PUSH
38690: LD_INT 11
38692: PUSH
38693: LD_INT 9
38695: PUSH
38696: LD_INT 20
38698: PUSH
38699: LD_INT 19
38701: PUSH
38702: LD_INT 21
38704: PUSH
38705: LD_INT 24
38707: PUSH
38708: LD_INT 22
38710: PUSH
38711: LD_INT 25
38713: PUSH
38714: LD_INT 28
38716: PUSH
38717: LD_INT 29
38719: PUSH
38720: LD_INT 30
38722: PUSH
38723: LD_INT 31
38725: PUSH
38726: LD_INT 37
38728: PUSH
38729: LD_INT 38
38731: PUSH
38732: LD_INT 32
38734: PUSH
38735: LD_INT 27
38737: PUSH
38738: LD_INT 33
38740: PUSH
38741: LD_INT 69
38743: PUSH
38744: LD_INT 39
38746: PUSH
38747: LD_INT 34
38749: PUSH
38750: LD_INT 40
38752: PUSH
38753: LD_INT 71
38755: PUSH
38756: LD_INT 23
38758: PUSH
38759: LD_INT 44
38761: PUSH
38762: LD_INT 48
38764: PUSH
38765: LD_INT 49
38767: PUSH
38768: LD_INT 50
38770: PUSH
38771: LD_INT 51
38773: PUSH
38774: LD_INT 52
38776: PUSH
38777: LD_INT 53
38779: PUSH
38780: LD_INT 54
38782: PUSH
38783: LD_INT 55
38785: PUSH
38786: LD_INT 56
38788: PUSH
38789: LD_INT 57
38791: PUSH
38792: LD_INT 58
38794: PUSH
38795: LD_INT 59
38797: PUSH
38798: LD_INT 63
38800: PUSH
38801: LD_INT 64
38803: PUSH
38804: LD_INT 65
38806: PUSH
38807: LD_INT 82
38809: PUSH
38810: LD_INT 83
38812: PUSH
38813: LD_INT 84
38815: PUSH
38816: LD_INT 85
38818: PUSH
38819: LD_INT 86
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
38877: GO 38880
38879: POP
// if state > - 1 and state < 3 then
38880: LD_VAR 0 3
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: GREATER
38889: PUSH
38890: LD_VAR 0 3
38894: PUSH
38895: LD_INT 3
38897: LESS
38898: AND
38899: IFFALSE 38956
// for i in result do
38901: LD_ADDR_VAR 0 5
38905: PUSH
38906: LD_VAR 0 4
38910: PUSH
38911: FOR_IN
38912: IFFALSE 38954
// if GetTech ( i , side ) <> state then
38914: LD_VAR 0 5
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 321
38928: PUSH
38929: LD_VAR 0 3
38933: NONEQUAL
38934: IFFALSE 38952
// result := result diff i ;
38936: LD_ADDR_VAR 0 4
38940: PUSH
38941: LD_VAR 0 4
38945: PUSH
38946: LD_VAR 0 5
38950: DIFF
38951: ST_TO_ADDR
38952: GO 38911
38954: POP
38955: POP
// end ;
38956: LD_VAR 0 4
38960: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38961: LD_INT 0
38963: PPUSH
38964: PPUSH
38965: PPUSH
// result := true ;
38966: LD_ADDR_VAR 0 3
38970: PUSH
38971: LD_INT 1
38973: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38974: LD_ADDR_VAR 0 5
38978: PUSH
38979: LD_VAR 0 2
38983: PPUSH
38984: CALL_OW 480
38988: ST_TO_ADDR
// if not tmp then
38989: LD_VAR 0 5
38993: NOT
38994: IFFALSE 38998
// exit ;
38996: GO 39047
// for i in tmp do
38998: LD_ADDR_VAR 0 4
39002: PUSH
39003: LD_VAR 0 5
39007: PUSH
39008: FOR_IN
39009: IFFALSE 39045
// if GetTech ( i , side ) <> state_researched then
39011: LD_VAR 0 4
39015: PPUSH
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 321
39025: PUSH
39026: LD_INT 2
39028: NONEQUAL
39029: IFFALSE 39043
// begin result := false ;
39031: LD_ADDR_VAR 0 3
39035: PUSH
39036: LD_INT 0
39038: ST_TO_ADDR
// exit ;
39039: POP
39040: POP
39041: GO 39047
// end ;
39043: GO 39008
39045: POP
39046: POP
// end ;
39047: LD_VAR 0 3
39051: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39052: LD_INT 0
39054: PPUSH
39055: PPUSH
39056: PPUSH
39057: PPUSH
39058: PPUSH
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39067: LD_VAR 0 1
39071: NOT
39072: PUSH
39073: LD_VAR 0 1
39077: PPUSH
39078: CALL_OW 257
39082: PUSH
39083: LD_INT 9
39085: NONEQUAL
39086: OR
39087: IFFALSE 39091
// exit ;
39089: GO 39664
// side := GetSide ( unit ) ;
39091: LD_ADDR_VAR 0 9
39095: PUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 255
39105: ST_TO_ADDR
// tech_space := tech_spacanom ;
39106: LD_ADDR_VAR 0 12
39110: PUSH
39111: LD_INT 29
39113: ST_TO_ADDR
// tech_time := tech_taurad ;
39114: LD_ADDR_VAR 0 13
39118: PUSH
39119: LD_INT 28
39121: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39122: LD_ADDR_VAR 0 11
39126: PUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: CALL_OW 310
39136: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39137: LD_VAR 0 11
39141: PPUSH
39142: CALL_OW 247
39146: PUSH
39147: LD_INT 2
39149: EQUAL
39150: IFFALSE 39154
// exit ;
39152: GO 39664
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39154: LD_ADDR_VAR 0 8
39158: PUSH
39159: LD_INT 81
39161: PUSH
39162: LD_VAR 0 9
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: LD_INT 21
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PPUSH
39192: CALL_OW 69
39196: ST_TO_ADDR
// if not tmp then
39197: LD_VAR 0 8
39201: NOT
39202: IFFALSE 39206
// exit ;
39204: GO 39664
// if in_unit then
39206: LD_VAR 0 11
39210: IFFALSE 39234
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39212: LD_ADDR_VAR 0 10
39216: PUSH
39217: LD_VAR 0 8
39221: PPUSH
39222: LD_VAR 0 11
39226: PPUSH
39227: CALL_OW 74
39231: ST_TO_ADDR
39232: GO 39254
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39234: LD_ADDR_VAR 0 10
39238: PUSH
39239: LD_VAR 0 8
39243: PPUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 74
39253: ST_TO_ADDR
// if not enemy then
39254: LD_VAR 0 10
39258: NOT
39259: IFFALSE 39263
// exit ;
39261: GO 39664
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39263: LD_VAR 0 11
39267: PUSH
39268: LD_VAR 0 11
39272: PPUSH
39273: LD_VAR 0 10
39277: PPUSH
39278: CALL_OW 296
39282: PUSH
39283: LD_INT 13
39285: GREATER
39286: AND
39287: PUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: LD_VAR 0 10
39297: PPUSH
39298: CALL_OW 296
39302: PUSH
39303: LD_INT 12
39305: GREATER
39306: OR
39307: IFFALSE 39311
// exit ;
39309: GO 39664
// missile := [ 1 ] ;
39311: LD_ADDR_VAR 0 14
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39322: LD_VAR 0 9
39326: PPUSH
39327: LD_VAR 0 12
39331: PPUSH
39332: CALL_OW 325
39336: IFFALSE 39365
// missile := Insert ( missile , missile + 1 , 2 ) ;
39338: LD_ADDR_VAR 0 14
39342: PUSH
39343: LD_VAR 0 14
39347: PPUSH
39348: LD_VAR 0 14
39352: PUSH
39353: LD_INT 1
39355: PLUS
39356: PPUSH
39357: LD_INT 2
39359: PPUSH
39360: CALL_OW 2
39364: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39365: LD_VAR 0 9
39369: PPUSH
39370: LD_VAR 0 13
39374: PPUSH
39375: CALL_OW 325
39379: PUSH
39380: LD_VAR 0 10
39384: PPUSH
39385: CALL_OW 255
39389: PPUSH
39390: LD_VAR 0 13
39394: PPUSH
39395: CALL_OW 325
39399: NOT
39400: AND
39401: IFFALSE 39430
// missile := Insert ( missile , missile + 1 , 3 ) ;
39403: LD_ADDR_VAR 0 14
39407: PUSH
39408: LD_VAR 0 14
39412: PPUSH
39413: LD_VAR 0 14
39417: PUSH
39418: LD_INT 1
39420: PLUS
39421: PPUSH
39422: LD_INT 3
39424: PPUSH
39425: CALL_OW 2
39429: ST_TO_ADDR
// if missile < 2 then
39430: LD_VAR 0 14
39434: PUSH
39435: LD_INT 2
39437: LESS
39438: IFFALSE 39442
// exit ;
39440: GO 39664
// x := GetX ( enemy ) ;
39442: LD_ADDR_VAR 0 4
39446: PUSH
39447: LD_VAR 0 10
39451: PPUSH
39452: CALL_OW 250
39456: ST_TO_ADDR
// y := GetY ( enemy ) ;
39457: LD_ADDR_VAR 0 5
39461: PUSH
39462: LD_VAR 0 10
39466: PPUSH
39467: CALL_OW 251
39471: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39472: LD_ADDR_VAR 0 6
39476: PUSH
39477: LD_VAR 0 4
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PPUSH
39486: LD_INT 1
39488: PPUSH
39489: CALL_OW 12
39493: PLUS
39494: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39495: LD_ADDR_VAR 0 7
39499: PUSH
39500: LD_VAR 0 5
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PPUSH
39509: LD_INT 1
39511: PPUSH
39512: CALL_OW 12
39516: PLUS
39517: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39518: LD_VAR 0 6
39522: PPUSH
39523: LD_VAR 0 7
39527: PPUSH
39528: CALL_OW 488
39532: NOT
39533: IFFALSE 39555
// begin _x := x ;
39535: LD_ADDR_VAR 0 6
39539: PUSH
39540: LD_VAR 0 4
39544: ST_TO_ADDR
// _y := y ;
39545: LD_ADDR_VAR 0 7
39549: PUSH
39550: LD_VAR 0 5
39554: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39555: LD_ADDR_VAR 0 3
39559: PUSH
39560: LD_INT 1
39562: PPUSH
39563: LD_VAR 0 14
39567: PPUSH
39568: CALL_OW 12
39572: ST_TO_ADDR
// case i of 1 :
39573: LD_VAR 0 3
39577: PUSH
39578: LD_INT 1
39580: DOUBLE
39581: EQUAL
39582: IFTRUE 39586
39584: GO 39603
39586: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39587: LD_VAR 0 1
39591: PPUSH
39592: LD_VAR 0 10
39596: PPUSH
39597: CALL_OW 115
39601: GO 39664
39603: LD_INT 2
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39611
39609: GO 39633
39611: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39612: LD_VAR 0 1
39616: PPUSH
39617: LD_VAR 0 6
39621: PPUSH
39622: LD_VAR 0 7
39626: PPUSH
39627: CALL_OW 153
39631: GO 39664
39633: LD_INT 3
39635: DOUBLE
39636: EQUAL
39637: IFTRUE 39641
39639: GO 39663
39641: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39642: LD_VAR 0 1
39646: PPUSH
39647: LD_VAR 0 6
39651: PPUSH
39652: LD_VAR 0 7
39656: PPUSH
39657: CALL_OW 154
39661: GO 39664
39663: POP
// end ;
39664: LD_VAR 0 2
39668: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39669: LD_INT 0
39671: PPUSH
39672: PPUSH
39673: PPUSH
39674: PPUSH
39675: PPUSH
39676: PPUSH
// if not unit or not building then
39677: LD_VAR 0 1
39681: NOT
39682: PUSH
39683: LD_VAR 0 2
39687: NOT
39688: OR
39689: IFFALSE 39693
// exit ;
39691: GO 39851
// x := GetX ( building ) ;
39693: LD_ADDR_VAR 0 5
39697: PUSH
39698: LD_VAR 0 2
39702: PPUSH
39703: CALL_OW 250
39707: ST_TO_ADDR
// y := GetY ( building ) ;
39708: LD_ADDR_VAR 0 6
39712: PUSH
39713: LD_VAR 0 2
39717: PPUSH
39718: CALL_OW 251
39722: ST_TO_ADDR
// for i = 0 to 5 do
39723: LD_ADDR_VAR 0 4
39727: PUSH
39728: DOUBLE
39729: LD_INT 0
39731: DEC
39732: ST_TO_ADDR
39733: LD_INT 5
39735: PUSH
39736: FOR_TO
39737: IFFALSE 39849
// begin _x := ShiftX ( x , i , 3 ) ;
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: LD_VAR 0 5
39748: PPUSH
39749: LD_VAR 0 4
39753: PPUSH
39754: LD_INT 3
39756: PPUSH
39757: CALL_OW 272
39761: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39762: LD_ADDR_VAR 0 8
39766: PUSH
39767: LD_VAR 0 6
39771: PPUSH
39772: LD_VAR 0 4
39776: PPUSH
39777: LD_INT 3
39779: PPUSH
39780: CALL_OW 273
39784: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39785: LD_VAR 0 7
39789: PPUSH
39790: LD_VAR 0 8
39794: PPUSH
39795: CALL_OW 488
39799: NOT
39800: IFFALSE 39804
// continue ;
39802: GO 39736
// if HexInfo ( _x , _y ) = 0 then
39804: LD_VAR 0 7
39808: PPUSH
39809: LD_VAR 0 8
39813: PPUSH
39814: CALL_OW 428
39818: PUSH
39819: LD_INT 0
39821: EQUAL
39822: IFFALSE 39847
// begin ComMoveXY ( unit , _x , _y ) ;
39824: LD_VAR 0 1
39828: PPUSH
39829: LD_VAR 0 7
39833: PPUSH
39834: LD_VAR 0 8
39838: PPUSH
39839: CALL_OW 111
// exit ;
39843: POP
39844: POP
39845: GO 39851
// end ; end ;
39847: GO 39736
39849: POP
39850: POP
// end ;
39851: LD_VAR 0 3
39855: RET
// export function ScanBase ( side , base_area ) ; begin
39856: LD_INT 0
39858: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39859: LD_ADDR_VAR 0 3
39863: PUSH
39864: LD_VAR 0 2
39868: PPUSH
39869: LD_INT 81
39871: PUSH
39872: LD_VAR 0 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PPUSH
39881: CALL_OW 70
39885: ST_TO_ADDR
// end ;
39886: LD_VAR 0 3
39890: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
// result := false ;
39897: LD_ADDR_VAR 0 2
39901: PUSH
39902: LD_INT 0
39904: ST_TO_ADDR
// side := GetSide ( unit ) ;
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 255
39919: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39920: LD_ADDR_VAR 0 4
39924: PUSH
39925: LD_VAR 0 1
39929: PPUSH
39930: CALL_OW 248
39934: ST_TO_ADDR
// case nat of 1 :
39935: LD_VAR 0 4
39939: PUSH
39940: LD_INT 1
39942: DOUBLE
39943: EQUAL
39944: IFTRUE 39948
39946: GO 39959
39948: POP
// tech := tech_lassight ; 2 :
39949: LD_ADDR_VAR 0 5
39953: PUSH
39954: LD_INT 12
39956: ST_TO_ADDR
39957: GO 39998
39959: LD_INT 2
39961: DOUBLE
39962: EQUAL
39963: IFTRUE 39967
39965: GO 39978
39967: POP
// tech := tech_mortar ; 3 :
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_INT 41
39975: ST_TO_ADDR
39976: GO 39998
39978: LD_INT 3
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 39997
39986: POP
// tech := tech_bazooka ; end ;
39987: LD_ADDR_VAR 0 5
39991: PUSH
39992: LD_INT 44
39994: ST_TO_ADDR
39995: GO 39998
39997: POP
// if Researched ( side , tech ) then
39998: LD_VAR 0 3
40002: PPUSH
40003: LD_VAR 0 5
40007: PPUSH
40008: CALL_OW 325
40012: IFFALSE 40039
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40014: LD_ADDR_VAR 0 2
40018: PUSH
40019: LD_INT 5
40021: PUSH
40022: LD_INT 8
40024: PUSH
40025: LD_INT 9
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: PUSH
40033: LD_VAR 0 4
40037: ARRAY
40038: ST_TO_ADDR
// end ;
40039: LD_VAR 0 2
40043: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40044: LD_INT 0
40046: PPUSH
40047: PPUSH
40048: PPUSH
// if not mines then
40049: LD_VAR 0 2
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40202
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_INT 81
40065: PUSH
40066: LD_VAR 0 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: LD_INT 21
40080: PUSH
40081: LD_INT 3
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PPUSH
40096: CALL_OW 69
40100: ST_TO_ADDR
// for i in mines do
40101: LD_ADDR_VAR 0 4
40105: PUSH
40106: LD_VAR 0 2
40110: PUSH
40111: FOR_IN
40112: IFFALSE 40200
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40114: LD_VAR 0 4
40118: PUSH
40119: LD_INT 1
40121: ARRAY
40122: PPUSH
40123: LD_VAR 0 4
40127: PUSH
40128: LD_INT 2
40130: ARRAY
40131: PPUSH
40132: CALL_OW 458
40136: NOT
40137: IFFALSE 40141
// continue ;
40139: GO 40111
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40141: LD_VAR 0 4
40145: PUSH
40146: LD_INT 1
40148: ARRAY
40149: PPUSH
40150: LD_VAR 0 4
40154: PUSH
40155: LD_INT 2
40157: ARRAY
40158: PPUSH
40159: CALL_OW 428
40163: PUSH
40164: LD_VAR 0 5
40168: IN
40169: IFFALSE 40198
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40171: LD_VAR 0 4
40175: PUSH
40176: LD_INT 1
40178: ARRAY
40179: PPUSH
40180: LD_VAR 0 4
40184: PUSH
40185: LD_INT 2
40187: ARRAY
40188: PPUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 456
// end ;
40198: GO 40111
40200: POP
40201: POP
// end ;
40202: LD_VAR 0 3
40206: RET
// export function Count ( array ) ; var i ; begin
40207: LD_INT 0
40209: PPUSH
40210: PPUSH
// result := 0 ;
40211: LD_ADDR_VAR 0 2
40215: PUSH
40216: LD_INT 0
40218: ST_TO_ADDR
// for i in array do
40219: LD_ADDR_VAR 0 3
40223: PUSH
40224: LD_VAR 0 1
40228: PUSH
40229: FOR_IN
40230: IFFALSE 40254
// if i then
40232: LD_VAR 0 3
40236: IFFALSE 40252
// result := result + 1 ;
40238: LD_ADDR_VAR 0 2
40242: PUSH
40243: LD_VAR 0 2
40247: PUSH
40248: LD_INT 1
40250: PLUS
40251: ST_TO_ADDR
40252: GO 40229
40254: POP
40255: POP
// end ;
40256: LD_VAR 0 2
40260: RET
// export function IsEmpty ( building ) ; begin
40261: LD_INT 0
40263: PPUSH
// if not building then
40264: LD_VAR 0 1
40268: NOT
40269: IFFALSE 40273
// exit ;
40271: GO 40316
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40273: LD_ADDR_VAR 0 2
40277: PUSH
40278: LD_VAR 0 1
40282: PUSH
40283: LD_INT 22
40285: PUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 255
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 58
40302: PUSH
40303: EMPTY
40304: LIST
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PPUSH
40310: CALL_OW 69
40314: IN
40315: ST_TO_ADDR
// end ;
40316: LD_VAR 0 2
40320: RET
// export function IsNotFull ( building ) ; begin
40321: LD_INT 0
40323: PPUSH
// if not building then
40324: LD_VAR 0 1
40328: NOT
40329: IFFALSE 40333
// exit ;
40331: GO 40352
// result := UnitsInside ( building ) < 6 ;
40333: LD_ADDR_VAR 0 2
40337: PUSH
40338: LD_VAR 0 1
40342: PPUSH
40343: CALL_OW 313
40347: PUSH
40348: LD_INT 6
40350: LESS
40351: ST_TO_ADDR
// end ;
40352: LD_VAR 0 2
40356: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40357: LD_INT 0
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
// tmp := [ ] ;
40363: LD_ADDR_VAR 0 3
40367: PUSH
40368: EMPTY
40369: ST_TO_ADDR
// list := [ ] ;
40370: LD_ADDR_VAR 0 5
40374: PUSH
40375: EMPTY
40376: ST_TO_ADDR
// for i = 16 to 25 do
40377: LD_ADDR_VAR 0 4
40381: PUSH
40382: DOUBLE
40383: LD_INT 16
40385: DEC
40386: ST_TO_ADDR
40387: LD_INT 25
40389: PUSH
40390: FOR_TO
40391: IFFALSE 40464
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40393: LD_ADDR_VAR 0 3
40397: PUSH
40398: LD_VAR 0 3
40402: PUSH
40403: LD_INT 22
40405: PUSH
40406: LD_VAR 0 1
40410: PPUSH
40411: CALL_OW 255
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 91
40422: PUSH
40423: LD_VAR 0 1
40427: PUSH
40428: LD_INT 6
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 30
40438: PUSH
40439: LD_VAR 0 4
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: PPUSH
40456: CALL_OW 69
40460: ADD
40461: ST_TO_ADDR
40462: GO 40390
40464: POP
40465: POP
// for i = 1 to tmp do
40466: LD_ADDR_VAR 0 4
40470: PUSH
40471: DOUBLE
40472: LD_INT 1
40474: DEC
40475: ST_TO_ADDR
40476: LD_VAR 0 3
40480: PUSH
40481: FOR_TO
40482: IFFALSE 40570
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40484: LD_ADDR_VAR 0 5
40488: PUSH
40489: LD_VAR 0 5
40493: PUSH
40494: LD_VAR 0 3
40498: PUSH
40499: LD_VAR 0 4
40503: ARRAY
40504: PPUSH
40505: CALL_OW 266
40509: PUSH
40510: LD_VAR 0 3
40514: PUSH
40515: LD_VAR 0 4
40519: ARRAY
40520: PPUSH
40521: CALL_OW 250
40525: PUSH
40526: LD_VAR 0 3
40530: PUSH
40531: LD_VAR 0 4
40535: ARRAY
40536: PPUSH
40537: CALL_OW 251
40541: PUSH
40542: LD_VAR 0 3
40546: PUSH
40547: LD_VAR 0 4
40551: ARRAY
40552: PPUSH
40553: CALL_OW 254
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: ADD
40567: ST_TO_ADDR
40568: GO 40481
40570: POP
40571: POP
// result := list ;
40572: LD_ADDR_VAR 0 2
40576: PUSH
40577: LD_VAR 0 5
40581: ST_TO_ADDR
// end ;
40582: LD_VAR 0 2
40586: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40587: LD_INT 0
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
// if not factory then
40596: LD_VAR 0 1
40600: NOT
40601: IFFALSE 40605
// exit ;
40603: GO 41198
// if control = control_apeman then
40605: LD_VAR 0 4
40609: PUSH
40610: LD_INT 5
40612: EQUAL
40613: IFFALSE 40722
// begin tmp := UnitsInside ( factory ) ;
40615: LD_ADDR_VAR 0 8
40619: PUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: CALL_OW 313
40629: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40630: LD_VAR 0 8
40634: PPUSH
40635: LD_INT 25
40637: PUSH
40638: LD_INT 12
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PPUSH
40645: CALL_OW 72
40649: NOT
40650: IFFALSE 40660
// control := control_manual ;
40652: LD_ADDR_VAR 0 4
40656: PUSH
40657: LD_INT 1
40659: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40660: LD_ADDR_VAR 0 8
40664: PUSH
40665: LD_VAR 0 1
40669: PPUSH
40670: CALL 40357 0 1
40674: ST_TO_ADDR
// if tmp then
40675: LD_VAR 0 8
40679: IFFALSE 40722
// begin for i in tmp do
40681: LD_ADDR_VAR 0 7
40685: PUSH
40686: LD_VAR 0 8
40690: PUSH
40691: FOR_IN
40692: IFFALSE 40720
// if i [ 1 ] = b_ext_radio then
40694: LD_VAR 0 7
40698: PUSH
40699: LD_INT 1
40701: ARRAY
40702: PUSH
40703: LD_INT 22
40705: EQUAL
40706: IFFALSE 40718
// begin control := control_remote ;
40708: LD_ADDR_VAR 0 4
40712: PUSH
40713: LD_INT 2
40715: ST_TO_ADDR
// break ;
40716: GO 40720
// end ;
40718: GO 40691
40720: POP
40721: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40722: LD_VAR 0 1
40726: PPUSH
40727: LD_VAR 0 2
40731: PPUSH
40732: LD_VAR 0 3
40736: PPUSH
40737: LD_VAR 0 4
40741: PPUSH
40742: LD_VAR 0 5
40746: PPUSH
40747: CALL_OW 448
40751: IFFALSE 40786
// begin result := [ chassis , engine , control , weapon ] ;
40753: LD_ADDR_VAR 0 6
40757: PUSH
40758: LD_VAR 0 2
40762: PUSH
40763: LD_VAR 0 3
40767: PUSH
40768: LD_VAR 0 4
40772: PUSH
40773: LD_VAR 0 5
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: ST_TO_ADDR
// exit ;
40784: GO 41198
// end ; _chassis := AvailableChassisList ( factory ) ;
40786: LD_ADDR_VAR 0 9
40790: PUSH
40791: LD_VAR 0 1
40795: PPUSH
40796: CALL_OW 475
40800: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40801: LD_ADDR_VAR 0 11
40805: PUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 476
40815: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40816: LD_ADDR_VAR 0 12
40820: PUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL_OW 477
40830: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40831: LD_ADDR_VAR 0 10
40835: PUSH
40836: LD_VAR 0 1
40840: PPUSH
40841: CALL_OW 478
40845: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40846: LD_VAR 0 9
40850: NOT
40851: PUSH
40852: LD_VAR 0 11
40856: NOT
40857: OR
40858: PUSH
40859: LD_VAR 0 12
40863: NOT
40864: OR
40865: PUSH
40866: LD_VAR 0 10
40870: NOT
40871: OR
40872: IFFALSE 40907
// begin result := [ chassis , engine , control , weapon ] ;
40874: LD_ADDR_VAR 0 6
40878: PUSH
40879: LD_VAR 0 2
40883: PUSH
40884: LD_VAR 0 3
40888: PUSH
40889: LD_VAR 0 4
40893: PUSH
40894: LD_VAR 0 5
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// exit ;
40905: GO 41198
// end ; if not chassis in _chassis then
40907: LD_VAR 0 2
40911: PUSH
40912: LD_VAR 0 9
40916: IN
40917: NOT
40918: IFFALSE 40944
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40920: LD_ADDR_VAR 0 2
40924: PUSH
40925: LD_VAR 0 9
40929: PUSH
40930: LD_INT 1
40932: PPUSH
40933: LD_VAR 0 9
40937: PPUSH
40938: CALL_OW 12
40942: ARRAY
40943: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40944: LD_VAR 0 2
40948: PPUSH
40949: LD_VAR 0 3
40953: PPUSH
40954: CALL 41203 0 2
40958: NOT
40959: IFFALSE 41018
// repeat engine := _engine [ 1 ] ;
40961: LD_ADDR_VAR 0 3
40965: PUSH
40966: LD_VAR 0 11
40970: PUSH
40971: LD_INT 1
40973: ARRAY
40974: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40975: LD_ADDR_VAR 0 11
40979: PUSH
40980: LD_VAR 0 11
40984: PPUSH
40985: LD_INT 1
40987: PPUSH
40988: CALL_OW 3
40992: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: CALL 41203 0 2
41007: PUSH
41008: LD_VAR 0 11
41012: PUSH
41013: EMPTY
41014: EQUAL
41015: OR
41016: IFFALSE 40961
// if not control in _control then
41018: LD_VAR 0 4
41022: PUSH
41023: LD_VAR 0 12
41027: IN
41028: NOT
41029: IFFALSE 41055
// control := _control [ rand ( 1 , _control ) ] ;
41031: LD_ADDR_VAR 0 4
41035: PUSH
41036: LD_VAR 0 12
41040: PUSH
41041: LD_INT 1
41043: PPUSH
41044: LD_VAR 0 12
41048: PPUSH
41049: CALL_OW 12
41053: ARRAY
41054: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41055: LD_VAR 0 2
41059: PPUSH
41060: LD_VAR 0 5
41064: PPUSH
41065: CALL 41423 0 2
41069: NOT
41070: IFFALSE 41129
// repeat weapon := _weapon [ 1 ] ;
41072: LD_ADDR_VAR 0 5
41076: PUSH
41077: LD_VAR 0 10
41081: PUSH
41082: LD_INT 1
41084: ARRAY
41085: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41086: LD_ADDR_VAR 0 10
41090: PUSH
41091: LD_VAR 0 10
41095: PPUSH
41096: LD_INT 1
41098: PPUSH
41099: CALL_OW 3
41103: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41104: LD_VAR 0 2
41108: PPUSH
41109: LD_VAR 0 5
41113: PPUSH
41114: CALL 41423 0 2
41118: PUSH
41119: LD_VAR 0 10
41123: PUSH
41124: EMPTY
41125: EQUAL
41126: OR
41127: IFFALSE 41072
// result := [ ] ;
41129: LD_ADDR_VAR 0 6
41133: PUSH
41134: EMPTY
41135: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41136: LD_VAR 0 1
41140: PPUSH
41141: LD_VAR 0 2
41145: PPUSH
41146: LD_VAR 0 3
41150: PPUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: LD_VAR 0 5
41160: PPUSH
41161: CALL_OW 448
41165: IFFALSE 41198
// result := [ chassis , engine , control , weapon ] ;
41167: LD_ADDR_VAR 0 6
41171: PUSH
41172: LD_VAR 0 2
41176: PUSH
41177: LD_VAR 0 3
41181: PUSH
41182: LD_VAR 0 4
41186: PUSH
41187: LD_VAR 0 5
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// end ;
41198: LD_VAR 0 6
41202: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41203: LD_INT 0
41205: PPUSH
// if not chassis or not engine then
41206: LD_VAR 0 1
41210: NOT
41211: PUSH
41212: LD_VAR 0 2
41216: NOT
41217: OR
41218: IFFALSE 41222
// exit ;
41220: GO 41418
// case engine of engine_solar :
41222: LD_VAR 0 2
41226: PUSH
41227: LD_INT 2
41229: DOUBLE
41230: EQUAL
41231: IFTRUE 41235
41233: GO 41273
41235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41236: LD_ADDR_VAR 0 3
41240: PUSH
41241: LD_INT 11
41243: PUSH
41244: LD_INT 12
41246: PUSH
41247: LD_INT 13
41249: PUSH
41250: LD_INT 14
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: ST_TO_ADDR
41271: GO 41402
41273: LD_INT 1
41275: DOUBLE
41276: EQUAL
41277: IFTRUE 41281
41279: GO 41343
41281: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_INT 11
41289: PUSH
41290: LD_INT 12
41292: PUSH
41293: LD_INT 13
41295: PUSH
41296: LD_INT 14
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: LD_INT 4
41310: PUSH
41311: LD_INT 5
41313: PUSH
41314: LD_INT 21
41316: PUSH
41317: LD_INT 23
41319: PUSH
41320: LD_INT 22
41322: PUSH
41323: LD_INT 24
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
41341: GO 41402
41343: LD_INT 3
41345: DOUBLE
41346: EQUAL
41347: IFTRUE 41351
41349: GO 41401
41351: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_INT 13
41359: PUSH
41360: LD_INT 14
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 3
41368: PUSH
41369: LD_INT 4
41371: PUSH
41372: LD_INT 5
41374: PUSH
41375: LD_INT 21
41377: PUSH
41378: LD_INT 22
41380: PUSH
41381: LD_INT 23
41383: PUSH
41384: LD_INT 24
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
41399: GO 41402
41401: POP
// result := ( chassis in result ) ;
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_VAR 0 1
41411: PUSH
41412: LD_VAR 0 3
41416: IN
41417: ST_TO_ADDR
// end ;
41418: LD_VAR 0 3
41422: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41423: LD_INT 0
41425: PPUSH
// if not chassis or not weapon then
41426: LD_VAR 0 1
41430: NOT
41431: PUSH
41432: LD_VAR 0 2
41436: NOT
41437: OR
41438: IFFALSE 41442
// exit ;
41440: GO 42468
// case weapon of us_machine_gun :
41442: LD_VAR 0 2
41446: PUSH
41447: LD_INT 2
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41455
41453: GO 41485
41455: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: LD_INT 4
41472: PUSH
41473: LD_INT 5
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: ST_TO_ADDR
41483: GO 42452
41485: LD_INT 3
41487: DOUBLE
41488: EQUAL
41489: IFTRUE 41493
41491: GO 41523
41493: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41494: LD_ADDR_VAR 0 3
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 3
41507: PUSH
41508: LD_INT 4
41510: PUSH
41511: LD_INT 5
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
41521: GO 42452
41523: LD_INT 11
41525: DOUBLE
41526: EQUAL
41527: IFTRUE 41531
41529: GO 41561
41531: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41532: LD_ADDR_VAR 0 3
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 4
41548: PUSH
41549: LD_INT 5
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: ST_TO_ADDR
41559: GO 42452
41561: LD_INT 4
41563: DOUBLE
41564: EQUAL
41565: IFTRUE 41569
41567: GO 41595
41569: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41570: LD_ADDR_VAR 0 3
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 3
41580: PUSH
41581: LD_INT 4
41583: PUSH
41584: LD_INT 5
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
41593: GO 42452
41595: LD_INT 5
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41629
41603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: LD_INT 4
41617: PUSH
41618: LD_INT 5
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: ST_TO_ADDR
41627: GO 42452
41629: LD_INT 9
41631: DOUBLE
41632: EQUAL
41633: IFTRUE 41637
41635: GO 41663
41637: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41638: LD_ADDR_VAR 0 3
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 4
41651: PUSH
41652: LD_INT 5
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: ST_TO_ADDR
41661: GO 42452
41663: LD_INT 7
41665: DOUBLE
41666: EQUAL
41667: IFTRUE 41671
41669: GO 41697
41671: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41672: LD_ADDR_VAR 0 3
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: LD_INT 4
41685: PUSH
41686: LD_INT 5
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
41695: GO 42452
41697: LD_INT 12
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41705
41703: GO 41731
41705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41706: LD_ADDR_VAR 0 3
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: LD_INT 4
41719: PUSH
41720: LD_INT 5
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
41729: GO 42452
41731: LD_INT 13
41733: DOUBLE
41734: EQUAL
41735: IFTRUE 41739
41737: GO 41765
41739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41740: LD_ADDR_VAR 0 3
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: LD_INT 5
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: ST_TO_ADDR
41763: GO 42452
41765: LD_INT 14
41767: DOUBLE
41768: EQUAL
41769: IFTRUE 41773
41771: GO 41791
41773: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41774: LD_ADDR_VAR 0 3
41778: PUSH
41779: LD_INT 4
41781: PUSH
41782: LD_INT 5
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: ST_TO_ADDR
41789: GO 42452
41791: LD_INT 6
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41799
41797: GO 41817
41799: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: LD_INT 5
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: ST_TO_ADDR
41815: GO 42452
41817: LD_INT 10
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41825
41823: GO 41843
41825: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41826: LD_ADDR_VAR 0 3
41830: PUSH
41831: LD_INT 4
41833: PUSH
41834: LD_INT 5
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: ST_TO_ADDR
41841: GO 42452
41843: LD_INT 22
41845: DOUBLE
41846: EQUAL
41847: IFTRUE 41851
41849: GO 41877
41851: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_INT 11
41859: PUSH
41860: LD_INT 12
41862: PUSH
41863: LD_INT 13
41865: PUSH
41866: LD_INT 14
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
41875: GO 42452
41877: LD_INT 23
41879: DOUBLE
41880: EQUAL
41881: IFTRUE 41885
41883: GO 41911
41885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_INT 11
41893: PUSH
41894: LD_INT 12
41896: PUSH
41897: LD_INT 13
41899: PUSH
41900: LD_INT 14
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: ST_TO_ADDR
41909: GO 42452
41911: LD_INT 24
41913: DOUBLE
41914: EQUAL
41915: IFTRUE 41919
41917: GO 41945
41919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41920: LD_ADDR_VAR 0 3
41924: PUSH
41925: LD_INT 11
41927: PUSH
41928: LD_INT 12
41930: PUSH
41931: LD_INT 13
41933: PUSH
41934: LD_INT 14
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
41943: GO 42452
41945: LD_INT 30
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41953
41951: GO 41979
41953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41954: LD_ADDR_VAR 0 3
41958: PUSH
41959: LD_INT 11
41961: PUSH
41962: LD_INT 12
41964: PUSH
41965: LD_INT 13
41967: PUSH
41968: LD_INT 14
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
41977: GO 42452
41979: LD_INT 25
41981: DOUBLE
41982: EQUAL
41983: IFTRUE 41987
41985: GO 42005
41987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41988: LD_ADDR_VAR 0 3
41992: PUSH
41993: LD_INT 13
41995: PUSH
41996: LD_INT 14
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: ST_TO_ADDR
42003: GO 42452
42005: LD_INT 27
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42031
42013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_INT 13
42021: PUSH
42022: LD_INT 14
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: ST_TO_ADDR
42029: GO 42452
42031: LD_INT 28
42033: DOUBLE
42034: EQUAL
42035: IFTRUE 42039
42037: GO 42057
42039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42040: LD_ADDR_VAR 0 3
42044: PUSH
42045: LD_INT 13
42047: PUSH
42048: LD_INT 14
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: ST_TO_ADDR
42055: GO 42452
42057: LD_INT 29
42059: DOUBLE
42060: EQUAL
42061: IFTRUE 42065
42063: GO 42083
42065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_INT 13
42073: PUSH
42074: LD_INT 14
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: ST_TO_ADDR
42081: GO 42452
42083: LD_INT 31
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42091
42089: GO 42109
42091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42092: LD_ADDR_VAR 0 3
42096: PUSH
42097: LD_INT 13
42099: PUSH
42100: LD_INT 14
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: ST_TO_ADDR
42107: GO 42452
42109: LD_INT 26
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42117
42115: GO 42135
42117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42118: LD_ADDR_VAR 0 3
42122: PUSH
42123: LD_INT 13
42125: PUSH
42126: LD_INT 14
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: ST_TO_ADDR
42133: GO 42452
42135: LD_INT 42
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42169
42143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_INT 21
42151: PUSH
42152: LD_INT 22
42154: PUSH
42155: LD_INT 23
42157: PUSH
42158: LD_INT 24
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
42167: GO 42452
42169: LD_INT 43
42171: DOUBLE
42172: EQUAL
42173: IFTRUE 42177
42175: GO 42203
42177: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42178: LD_ADDR_VAR 0 3
42182: PUSH
42183: LD_INT 21
42185: PUSH
42186: LD_INT 22
42188: PUSH
42189: LD_INT 23
42191: PUSH
42192: LD_INT 24
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
42201: GO 42452
42203: LD_INT 44
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42211
42209: GO 42237
42211: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 21
42219: PUSH
42220: LD_INT 22
42222: PUSH
42223: LD_INT 23
42225: PUSH
42226: LD_INT 24
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
42235: GO 42452
42237: LD_INT 45
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42271
42245: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 21
42253: PUSH
42254: LD_INT 22
42256: PUSH
42257: LD_INT 23
42259: PUSH
42260: LD_INT 24
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
42269: GO 42452
42271: LD_INT 49
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42279
42277: GO 42305
42279: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_INT 21
42287: PUSH
42288: LD_INT 22
42290: PUSH
42291: LD_INT 23
42293: PUSH
42294: LD_INT 24
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: ST_TO_ADDR
42303: GO 42452
42305: LD_INT 51
42307: DOUBLE
42308: EQUAL
42309: IFTRUE 42313
42311: GO 42339
42313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 21
42321: PUSH
42322: LD_INT 22
42324: PUSH
42325: LD_INT 23
42327: PUSH
42328: LD_INT 24
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
42337: GO 42452
42339: LD_INT 52
42341: DOUBLE
42342: EQUAL
42343: IFTRUE 42347
42345: GO 42373
42347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_INT 21
42355: PUSH
42356: LD_INT 22
42358: PUSH
42359: LD_INT 23
42361: PUSH
42362: LD_INT 24
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: ST_TO_ADDR
42371: GO 42452
42373: LD_INT 53
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42399
42381: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 23
42389: PUSH
42390: LD_INT 24
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42452
42399: LD_INT 46
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42425
42407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 23
42415: PUSH
42416: LD_INT 24
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: ST_TO_ADDR
42423: GO 42452
42425: LD_INT 47
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42451
42433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 23
42441: PUSH
42442: LD_INT 24
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: ST_TO_ADDR
42449: GO 42452
42451: POP
// result := ( chassis in result ) ;
42452: LD_ADDR_VAR 0 3
42456: PUSH
42457: LD_VAR 0 1
42461: PUSH
42462: LD_VAR 0 3
42466: IN
42467: ST_TO_ADDR
// end ;
42468: LD_VAR 0 3
42472: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
// result := array ;
42482: LD_ADDR_VAR 0 5
42486: PUSH
42487: LD_VAR 0 1
42491: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42492: LD_VAR 0 1
42496: NOT
42497: PUSH
42498: LD_VAR 0 2
42502: NOT
42503: OR
42504: PUSH
42505: LD_VAR 0 3
42509: NOT
42510: OR
42511: PUSH
42512: LD_VAR 0 2
42516: PUSH
42517: LD_VAR 0 1
42521: GREATER
42522: OR
42523: PUSH
42524: LD_VAR 0 3
42528: PUSH
42529: LD_VAR 0 1
42533: GREATER
42534: OR
42535: IFFALSE 42539
// exit ;
42537: GO 42835
// if direction then
42539: LD_VAR 0 4
42543: IFFALSE 42607
// begin d := 1 ;
42545: LD_ADDR_VAR 0 9
42549: PUSH
42550: LD_INT 1
42552: ST_TO_ADDR
// if i_from > i_to then
42553: LD_VAR 0 2
42557: PUSH
42558: LD_VAR 0 3
42562: GREATER
42563: IFFALSE 42589
// length := ( array - i_from ) + i_to else
42565: LD_ADDR_VAR 0 11
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_VAR 0 2
42579: MINUS
42580: PUSH
42581: LD_VAR 0 3
42585: PLUS
42586: ST_TO_ADDR
42587: GO 42605
// length := i_to - i_from ;
42589: LD_ADDR_VAR 0 11
42593: PUSH
42594: LD_VAR 0 3
42598: PUSH
42599: LD_VAR 0 2
42603: MINUS
42604: ST_TO_ADDR
// end else
42605: GO 42668
// begin d := - 1 ;
42607: LD_ADDR_VAR 0 9
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: ST_TO_ADDR
// if i_from > i_to then
42616: LD_VAR 0 2
42620: PUSH
42621: LD_VAR 0 3
42625: GREATER
42626: IFFALSE 42646
// length := i_from - i_to else
42628: LD_ADDR_VAR 0 11
42632: PUSH
42633: LD_VAR 0 2
42637: PUSH
42638: LD_VAR 0 3
42642: MINUS
42643: ST_TO_ADDR
42644: GO 42668
// length := ( array - i_to ) + i_from ;
42646: LD_ADDR_VAR 0 11
42650: PUSH
42651: LD_VAR 0 1
42655: PUSH
42656: LD_VAR 0 3
42660: MINUS
42661: PUSH
42662: LD_VAR 0 2
42666: PLUS
42667: ST_TO_ADDR
// end ; if not length then
42668: LD_VAR 0 11
42672: NOT
42673: IFFALSE 42677
// exit ;
42675: GO 42835
// tmp := array ;
42677: LD_ADDR_VAR 0 10
42681: PUSH
42682: LD_VAR 0 1
42686: ST_TO_ADDR
// for i = 1 to length do
42687: LD_ADDR_VAR 0 6
42691: PUSH
42692: DOUBLE
42693: LD_INT 1
42695: DEC
42696: ST_TO_ADDR
42697: LD_VAR 0 11
42701: PUSH
42702: FOR_TO
42703: IFFALSE 42823
// begin for j = 1 to array do
42705: LD_ADDR_VAR 0 7
42709: PUSH
42710: DOUBLE
42711: LD_INT 1
42713: DEC
42714: ST_TO_ADDR
42715: LD_VAR 0 1
42719: PUSH
42720: FOR_TO
42721: IFFALSE 42809
// begin k := j + d ;
42723: LD_ADDR_VAR 0 8
42727: PUSH
42728: LD_VAR 0 7
42732: PUSH
42733: LD_VAR 0 9
42737: PLUS
42738: ST_TO_ADDR
// if k > array then
42739: LD_VAR 0 8
42743: PUSH
42744: LD_VAR 0 1
42748: GREATER
42749: IFFALSE 42759
// k := 1 ;
42751: LD_ADDR_VAR 0 8
42755: PUSH
42756: LD_INT 1
42758: ST_TO_ADDR
// if not k then
42759: LD_VAR 0 8
42763: NOT
42764: IFFALSE 42776
// k := array ;
42766: LD_ADDR_VAR 0 8
42770: PUSH
42771: LD_VAR 0 1
42775: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42776: LD_ADDR_VAR 0 10
42780: PUSH
42781: LD_VAR 0 10
42785: PPUSH
42786: LD_VAR 0 8
42790: PPUSH
42791: LD_VAR 0 1
42795: PUSH
42796: LD_VAR 0 7
42800: ARRAY
42801: PPUSH
42802: CALL_OW 1
42806: ST_TO_ADDR
// end ;
42807: GO 42720
42809: POP
42810: POP
// array := tmp ;
42811: LD_ADDR_VAR 0 1
42815: PUSH
42816: LD_VAR 0 10
42820: ST_TO_ADDR
// end ;
42821: GO 42702
42823: POP
42824: POP
// result := array ;
42825: LD_ADDR_VAR 0 5
42829: PUSH
42830: LD_VAR 0 1
42834: ST_TO_ADDR
// end ;
42835: LD_VAR 0 5
42839: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42840: LD_INT 0
42842: PPUSH
42843: PPUSH
// result := 0 ;
42844: LD_ADDR_VAR 0 3
42848: PUSH
42849: LD_INT 0
42851: ST_TO_ADDR
// if not array or not value in array then
42852: LD_VAR 0 1
42856: NOT
42857: PUSH
42858: LD_VAR 0 2
42862: PUSH
42863: LD_VAR 0 1
42867: IN
42868: NOT
42869: OR
42870: IFFALSE 42874
// exit ;
42872: GO 42928
// for i = 1 to array do
42874: LD_ADDR_VAR 0 4
42878: PUSH
42879: DOUBLE
42880: LD_INT 1
42882: DEC
42883: ST_TO_ADDR
42884: LD_VAR 0 1
42888: PUSH
42889: FOR_TO
42890: IFFALSE 42926
// if value = array [ i ] then
42892: LD_VAR 0 2
42896: PUSH
42897: LD_VAR 0 1
42901: PUSH
42902: LD_VAR 0 4
42906: ARRAY
42907: EQUAL
42908: IFFALSE 42924
// begin result := i ;
42910: LD_ADDR_VAR 0 3
42914: PUSH
42915: LD_VAR 0 4
42919: ST_TO_ADDR
// exit ;
42920: POP
42921: POP
42922: GO 42928
// end ;
42924: GO 42889
42926: POP
42927: POP
// end ;
42928: LD_VAR 0 3
42932: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42933: LD_INT 0
42935: PPUSH
// vc_chassis := chassis ;
42936: LD_ADDR_OWVAR 37
42940: PUSH
42941: LD_VAR 0 1
42945: ST_TO_ADDR
// vc_engine := engine ;
42946: LD_ADDR_OWVAR 39
42950: PUSH
42951: LD_VAR 0 2
42955: ST_TO_ADDR
// vc_control := control ;
42956: LD_ADDR_OWVAR 38
42960: PUSH
42961: LD_VAR 0 3
42965: ST_TO_ADDR
// vc_weapon := weapon ;
42966: LD_ADDR_OWVAR 40
42970: PUSH
42971: LD_VAR 0 4
42975: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42976: LD_ADDR_OWVAR 41
42980: PUSH
42981: LD_VAR 0 5
42985: ST_TO_ADDR
// end ;
42986: LD_VAR 0 6
42990: RET
// export function WantPlant ( unit ) ; var task ; begin
42991: LD_INT 0
42993: PPUSH
42994: PPUSH
// result := false ;
42995: LD_ADDR_VAR 0 2
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43003: LD_ADDR_VAR 0 3
43007: PUSH
43008: LD_VAR 0 1
43012: PPUSH
43013: CALL_OW 437
43017: ST_TO_ADDR
// if task then
43018: LD_VAR 0 3
43022: IFFALSE 43050
// if task [ 1 ] [ 1 ] = p then
43024: LD_VAR 0 3
43028: PUSH
43029: LD_INT 1
43031: ARRAY
43032: PUSH
43033: LD_INT 1
43035: ARRAY
43036: PUSH
43037: LD_STRING p
43039: EQUAL
43040: IFFALSE 43050
// result := true ;
43042: LD_ADDR_VAR 0 2
43046: PUSH
43047: LD_INT 1
43049: ST_TO_ADDR
// end ;
43050: LD_VAR 0 2
43054: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43055: LD_INT 0
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
// if pos < 1 then
43061: LD_VAR 0 2
43065: PUSH
43066: LD_INT 1
43068: LESS
43069: IFFALSE 43073
// exit ;
43071: GO 43376
// if pos = 1 then
43073: LD_VAR 0 2
43077: PUSH
43078: LD_INT 1
43080: EQUAL
43081: IFFALSE 43114
// result := Replace ( arr , pos [ 1 ] , value ) else
43083: LD_ADDR_VAR 0 4
43087: PUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: LD_VAR 0 2
43097: PUSH
43098: LD_INT 1
43100: ARRAY
43101: PPUSH
43102: LD_VAR 0 3
43106: PPUSH
43107: CALL_OW 1
43111: ST_TO_ADDR
43112: GO 43376
// begin tmp := arr ;
43114: LD_ADDR_VAR 0 6
43118: PUSH
43119: LD_VAR 0 1
43123: ST_TO_ADDR
// s_arr := [ tmp ] ;
43124: LD_ADDR_VAR 0 7
43128: PUSH
43129: LD_VAR 0 6
43133: PUSH
43134: EMPTY
43135: LIST
43136: ST_TO_ADDR
// for i = 1 to pos - 1 do
43137: LD_ADDR_VAR 0 5
43141: PUSH
43142: DOUBLE
43143: LD_INT 1
43145: DEC
43146: ST_TO_ADDR
43147: LD_VAR 0 2
43151: PUSH
43152: LD_INT 1
43154: MINUS
43155: PUSH
43156: FOR_TO
43157: IFFALSE 43202
// begin tmp := tmp [ pos [ i ] ] ;
43159: LD_ADDR_VAR 0 6
43163: PUSH
43164: LD_VAR 0 6
43168: PUSH
43169: LD_VAR 0 2
43173: PUSH
43174: LD_VAR 0 5
43178: ARRAY
43179: ARRAY
43180: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43181: LD_ADDR_VAR 0 7
43185: PUSH
43186: LD_VAR 0 7
43190: PUSH
43191: LD_VAR 0 6
43195: PUSH
43196: EMPTY
43197: LIST
43198: ADD
43199: ST_TO_ADDR
// end ;
43200: GO 43156
43202: POP
43203: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43204: LD_ADDR_VAR 0 6
43208: PUSH
43209: LD_VAR 0 6
43213: PPUSH
43214: LD_VAR 0 2
43218: PUSH
43219: LD_VAR 0 2
43223: ARRAY
43224: PPUSH
43225: LD_VAR 0 3
43229: PPUSH
43230: CALL_OW 1
43234: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43235: LD_ADDR_VAR 0 7
43239: PUSH
43240: LD_VAR 0 7
43244: PPUSH
43245: LD_VAR 0 7
43249: PPUSH
43250: LD_VAR 0 6
43254: PPUSH
43255: CALL_OW 1
43259: ST_TO_ADDR
// for i = s_arr downto 2 do
43260: LD_ADDR_VAR 0 5
43264: PUSH
43265: DOUBLE
43266: LD_VAR 0 7
43270: INC
43271: ST_TO_ADDR
43272: LD_INT 2
43274: PUSH
43275: FOR_DOWNTO
43276: IFFALSE 43360
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43278: LD_ADDR_VAR 0 6
43282: PUSH
43283: LD_VAR 0 7
43287: PUSH
43288: LD_VAR 0 5
43292: PUSH
43293: LD_INT 1
43295: MINUS
43296: ARRAY
43297: PPUSH
43298: LD_VAR 0 2
43302: PUSH
43303: LD_VAR 0 5
43307: PUSH
43308: LD_INT 1
43310: MINUS
43311: ARRAY
43312: PPUSH
43313: LD_VAR 0 7
43317: PUSH
43318: LD_VAR 0 5
43322: ARRAY
43323: PPUSH
43324: CALL_OW 1
43328: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43329: LD_ADDR_VAR 0 7
43333: PUSH
43334: LD_VAR 0 7
43338: PPUSH
43339: LD_VAR 0 5
43343: PUSH
43344: LD_INT 1
43346: MINUS
43347: PPUSH
43348: LD_VAR 0 6
43352: PPUSH
43353: CALL_OW 1
43357: ST_TO_ADDR
// end ;
43358: GO 43275
43360: POP
43361: POP
// result := s_arr [ 1 ] ;
43362: LD_ADDR_VAR 0 4
43366: PUSH
43367: LD_VAR 0 7
43371: PUSH
43372: LD_INT 1
43374: ARRAY
43375: ST_TO_ADDR
// end ; end ;
43376: LD_VAR 0 4
43380: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
// if not list then
43385: LD_VAR 0 1
43389: NOT
43390: IFFALSE 43394
// exit ;
43392: GO 43485
// i := list [ pos1 ] ;
43394: LD_ADDR_VAR 0 5
43398: PUSH
43399: LD_VAR 0 1
43403: PUSH
43404: LD_VAR 0 2
43408: ARRAY
43409: ST_TO_ADDR
// if not i then
43410: LD_VAR 0 5
43414: NOT
43415: IFFALSE 43419
// exit ;
43417: GO 43485
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43419: LD_ADDR_VAR 0 1
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: LD_VAR 0 2
43433: PPUSH
43434: LD_VAR 0 1
43438: PUSH
43439: LD_VAR 0 3
43443: ARRAY
43444: PPUSH
43445: CALL_OW 1
43449: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43450: LD_ADDR_VAR 0 1
43454: PUSH
43455: LD_VAR 0 1
43459: PPUSH
43460: LD_VAR 0 3
43464: PPUSH
43465: LD_VAR 0 5
43469: PPUSH
43470: CALL_OW 1
43474: ST_TO_ADDR
// result := list ;
43475: LD_ADDR_VAR 0 4
43479: PUSH
43480: LD_VAR 0 1
43484: ST_TO_ADDR
// end ;
43485: LD_VAR 0 4
43489: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43490: LD_INT 0
43492: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43493: LD_ADDR_VAR 0 5
43497: PUSH
43498: LD_VAR 0 1
43502: PPUSH
43503: CALL_OW 250
43507: PPUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 251
43517: PPUSH
43518: LD_VAR 0 2
43522: PPUSH
43523: LD_VAR 0 3
43527: PPUSH
43528: LD_VAR 0 4
43532: PPUSH
43533: CALL 43543 0 5
43537: ST_TO_ADDR
// end ;
43538: LD_VAR 0 5
43542: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43543: LD_INT 0
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
// if not list then
43549: LD_VAR 0 3
43553: NOT
43554: IFFALSE 43558
// exit ;
43556: GO 43946
// result := [ ] ;
43558: LD_ADDR_VAR 0 6
43562: PUSH
43563: EMPTY
43564: ST_TO_ADDR
// for i in list do
43565: LD_ADDR_VAR 0 7
43569: PUSH
43570: LD_VAR 0 3
43574: PUSH
43575: FOR_IN
43576: IFFALSE 43778
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43578: LD_ADDR_VAR 0 9
43582: PUSH
43583: LD_VAR 0 7
43587: PPUSH
43588: LD_VAR 0 1
43592: PPUSH
43593: LD_VAR 0 2
43597: PPUSH
43598: CALL_OW 297
43602: ST_TO_ADDR
// if not result then
43603: LD_VAR 0 6
43607: NOT
43608: IFFALSE 43634
// result := [ [ i , tmp ] ] else
43610: LD_ADDR_VAR 0 6
43614: PUSH
43615: LD_VAR 0 7
43619: PUSH
43620: LD_VAR 0 9
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: EMPTY
43630: LIST
43631: ST_TO_ADDR
43632: GO 43776
// begin if result [ result ] [ 2 ] < tmp then
43634: LD_VAR 0 6
43638: PUSH
43639: LD_VAR 0 6
43643: ARRAY
43644: PUSH
43645: LD_INT 2
43647: ARRAY
43648: PUSH
43649: LD_VAR 0 9
43653: LESS
43654: IFFALSE 43696
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43656: LD_ADDR_VAR 0 6
43660: PUSH
43661: LD_VAR 0 6
43665: PPUSH
43666: LD_VAR 0 6
43670: PUSH
43671: LD_INT 1
43673: PLUS
43674: PPUSH
43675: LD_VAR 0 7
43679: PUSH
43680: LD_VAR 0 9
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PPUSH
43689: CALL_OW 2
43693: ST_TO_ADDR
43694: GO 43776
// for j = 1 to result do
43696: LD_ADDR_VAR 0 8
43700: PUSH
43701: DOUBLE
43702: LD_INT 1
43704: DEC
43705: ST_TO_ADDR
43706: LD_VAR 0 6
43710: PUSH
43711: FOR_TO
43712: IFFALSE 43774
// begin if tmp < result [ j ] [ 2 ] then
43714: LD_VAR 0 9
43718: PUSH
43719: LD_VAR 0 6
43723: PUSH
43724: LD_VAR 0 8
43728: ARRAY
43729: PUSH
43730: LD_INT 2
43732: ARRAY
43733: LESS
43734: IFFALSE 43772
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43736: LD_ADDR_VAR 0 6
43740: PUSH
43741: LD_VAR 0 6
43745: PPUSH
43746: LD_VAR 0 8
43750: PPUSH
43751: LD_VAR 0 7
43755: PUSH
43756: LD_VAR 0 9
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PPUSH
43765: CALL_OW 2
43769: ST_TO_ADDR
// break ;
43770: GO 43774
// end ; end ;
43772: GO 43711
43774: POP
43775: POP
// end ; end ;
43776: GO 43575
43778: POP
43779: POP
// if result and not asc then
43780: LD_VAR 0 6
43784: PUSH
43785: LD_VAR 0 4
43789: NOT
43790: AND
43791: IFFALSE 43866
// begin tmp := result ;
43793: LD_ADDR_VAR 0 9
43797: PUSH
43798: LD_VAR 0 6
43802: ST_TO_ADDR
// for i = tmp downto 1 do
43803: LD_ADDR_VAR 0 7
43807: PUSH
43808: DOUBLE
43809: LD_VAR 0 9
43813: INC
43814: ST_TO_ADDR
43815: LD_INT 1
43817: PUSH
43818: FOR_DOWNTO
43819: IFFALSE 43864
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43821: LD_ADDR_VAR 0 6
43825: PUSH
43826: LD_VAR 0 6
43830: PPUSH
43831: LD_VAR 0 9
43835: PUSH
43836: LD_VAR 0 7
43840: MINUS
43841: PUSH
43842: LD_INT 1
43844: PLUS
43845: PPUSH
43846: LD_VAR 0 9
43850: PUSH
43851: LD_VAR 0 7
43855: ARRAY
43856: PPUSH
43857: CALL_OW 1
43861: ST_TO_ADDR
43862: GO 43818
43864: POP
43865: POP
// end ; tmp := [ ] ;
43866: LD_ADDR_VAR 0 9
43870: PUSH
43871: EMPTY
43872: ST_TO_ADDR
// if mode then
43873: LD_VAR 0 5
43877: IFFALSE 43946
// begin for i = 1 to result do
43879: LD_ADDR_VAR 0 7
43883: PUSH
43884: DOUBLE
43885: LD_INT 1
43887: DEC
43888: ST_TO_ADDR
43889: LD_VAR 0 6
43893: PUSH
43894: FOR_TO
43895: IFFALSE 43934
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43897: LD_ADDR_VAR 0 9
43901: PUSH
43902: LD_VAR 0 9
43906: PPUSH
43907: LD_VAR 0 7
43911: PPUSH
43912: LD_VAR 0 6
43916: PUSH
43917: LD_VAR 0 7
43921: ARRAY
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: PPUSH
43927: CALL_OW 1
43931: ST_TO_ADDR
43932: GO 43894
43934: POP
43935: POP
// result := tmp ;
43936: LD_ADDR_VAR 0 6
43940: PUSH
43941: LD_VAR 0 9
43945: ST_TO_ADDR
// end ; end ;
43946: LD_VAR 0 6
43950: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43951: LD_INT 0
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43959: LD_ADDR_VAR 0 5
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: ST_TO_ADDR
// if not x or not y then
43981: LD_VAR 0 2
43985: NOT
43986: PUSH
43987: LD_VAR 0 3
43991: NOT
43992: OR
43993: IFFALSE 43997
// exit ;
43995: GO 45643
// if not range then
43997: LD_VAR 0 4
44001: NOT
44002: IFFALSE 44012
// range := 10 ;
44004: LD_ADDR_VAR 0 4
44008: PUSH
44009: LD_INT 10
44011: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44012: LD_ADDR_VAR 0 8
44016: PUSH
44017: LD_INT 81
44019: PUSH
44020: LD_VAR 0 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 92
44031: PUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_VAR 0 3
44041: PUSH
44042: LD_VAR 0 4
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: LD_INT 21
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: PPUSH
44075: CALL_OW 69
44079: ST_TO_ADDR
// if not tmp then
44080: LD_VAR 0 8
44084: NOT
44085: IFFALSE 44089
// exit ;
44087: GO 45643
// for i in tmp do
44089: LD_ADDR_VAR 0 6
44093: PUSH
44094: LD_VAR 0 8
44098: PUSH
44099: FOR_IN
44100: IFFALSE 45618
// begin points := [ 0 , 0 , 0 ] ;
44102: LD_ADDR_VAR 0 9
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// bpoints := 1 ;
44121: LD_ADDR_VAR 0 10
44125: PUSH
44126: LD_INT 1
44128: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44129: LD_VAR 0 6
44133: PPUSH
44134: CALL_OW 247
44138: PUSH
44139: LD_INT 1
44141: DOUBLE
44142: EQUAL
44143: IFTRUE 44147
44145: GO 44725
44147: POP
// begin if GetClass ( i ) = 1 then
44148: LD_VAR 0 6
44152: PPUSH
44153: CALL_OW 257
44157: PUSH
44158: LD_INT 1
44160: EQUAL
44161: IFFALSE 44182
// points := [ 10 , 5 , 3 ] ;
44163: LD_ADDR_VAR 0 9
44167: PUSH
44168: LD_INT 10
44170: PUSH
44171: LD_INT 5
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44182: LD_VAR 0 6
44186: PPUSH
44187: CALL_OW 257
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 4
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: IN
44206: IFFALSE 44227
// points := [ 3 , 2 , 1 ] ;
44208: LD_ADDR_VAR 0 9
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44227: LD_VAR 0 6
44231: PPUSH
44232: CALL_OW 257
44236: PUSH
44237: LD_INT 5
44239: EQUAL
44240: IFFALSE 44261
// points := [ 130 , 5 , 2 ] ;
44242: LD_ADDR_VAR 0 9
44246: PUSH
44247: LD_INT 130
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44261: LD_VAR 0 6
44265: PPUSH
44266: CALL_OW 257
44270: PUSH
44271: LD_INT 8
44273: EQUAL
44274: IFFALSE 44295
// points := [ 35 , 35 , 30 ] ;
44276: LD_ADDR_VAR 0 9
44280: PUSH
44281: LD_INT 35
44283: PUSH
44284: LD_INT 35
44286: PUSH
44287: LD_INT 30
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44295: LD_VAR 0 6
44299: PPUSH
44300: CALL_OW 257
44304: PUSH
44305: LD_INT 9
44307: EQUAL
44308: IFFALSE 44329
// points := [ 20 , 55 , 40 ] ;
44310: LD_ADDR_VAR 0 9
44314: PUSH
44315: LD_INT 20
44317: PUSH
44318: LD_INT 55
44320: PUSH
44321: LD_INT 40
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44329: LD_VAR 0 6
44333: PPUSH
44334: CALL_OW 257
44338: PUSH
44339: LD_INT 12
44341: PUSH
44342: LD_INT 16
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: IN
44349: IFFALSE 44370
// points := [ 5 , 3 , 2 ] ;
44351: LD_ADDR_VAR 0 9
44355: PUSH
44356: LD_INT 5
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44370: LD_VAR 0 6
44374: PPUSH
44375: CALL_OW 257
44379: PUSH
44380: LD_INT 17
44382: EQUAL
44383: IFFALSE 44404
// points := [ 100 , 50 , 75 ] ;
44385: LD_ADDR_VAR 0 9
44389: PUSH
44390: LD_INT 100
44392: PUSH
44393: LD_INT 50
44395: PUSH
44396: LD_INT 75
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44404: LD_VAR 0 6
44408: PPUSH
44409: CALL_OW 257
44413: PUSH
44414: LD_INT 15
44416: EQUAL
44417: IFFALSE 44438
// points := [ 10 , 5 , 3 ] ;
44419: LD_ADDR_VAR 0 9
44423: PUSH
44424: LD_INT 10
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44438: LD_VAR 0 6
44442: PPUSH
44443: CALL_OW 257
44447: PUSH
44448: LD_INT 14
44450: EQUAL
44451: IFFALSE 44472
// points := [ 10 , 0 , 0 ] ;
44453: LD_ADDR_VAR 0 9
44457: PUSH
44458: LD_INT 10
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44472: LD_VAR 0 6
44476: PPUSH
44477: CALL_OW 257
44481: PUSH
44482: LD_INT 11
44484: EQUAL
44485: IFFALSE 44506
// points := [ 30 , 10 , 5 ] ;
44487: LD_ADDR_VAR 0 9
44491: PUSH
44492: LD_INT 30
44494: PUSH
44495: LD_INT 10
44497: PUSH
44498: LD_INT 5
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44506: LD_VAR 0 1
44510: PPUSH
44511: LD_INT 5
44513: PPUSH
44514: CALL_OW 321
44518: PUSH
44519: LD_INT 2
44521: EQUAL
44522: IFFALSE 44539
// bpoints := bpoints * 1.8 ;
44524: LD_ADDR_VAR 0 10
44528: PUSH
44529: LD_VAR 0 10
44533: PUSH
44534: LD_REAL  1.80000000000000E+0000
44537: MUL
44538: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44539: LD_VAR 0 6
44543: PPUSH
44544: CALL_OW 257
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 4
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: IN
44567: PUSH
44568: LD_VAR 0 1
44572: PPUSH
44573: LD_INT 51
44575: PPUSH
44576: CALL_OW 321
44580: PUSH
44581: LD_INT 2
44583: EQUAL
44584: AND
44585: IFFALSE 44602
// bpoints := bpoints * 1.2 ;
44587: LD_ADDR_VAR 0 10
44591: PUSH
44592: LD_VAR 0 10
44596: PUSH
44597: LD_REAL  1.20000000000000E+0000
44600: MUL
44601: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44602: LD_VAR 0 6
44606: PPUSH
44607: CALL_OW 257
44611: PUSH
44612: LD_INT 5
44614: PUSH
44615: LD_INT 7
44617: PUSH
44618: LD_INT 9
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: IN
44626: PUSH
44627: LD_VAR 0 1
44631: PPUSH
44632: LD_INT 52
44634: PPUSH
44635: CALL_OW 321
44639: PUSH
44640: LD_INT 2
44642: EQUAL
44643: AND
44644: IFFALSE 44661
// bpoints := bpoints * 1.5 ;
44646: LD_ADDR_VAR 0 10
44650: PUSH
44651: LD_VAR 0 10
44655: PUSH
44656: LD_REAL  1.50000000000000E+0000
44659: MUL
44660: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44661: LD_VAR 0 1
44665: PPUSH
44666: LD_INT 66
44668: PPUSH
44669: CALL_OW 321
44673: PUSH
44674: LD_INT 2
44676: EQUAL
44677: IFFALSE 44694
// bpoints := bpoints * 1.1 ;
44679: LD_ADDR_VAR 0 10
44683: PUSH
44684: LD_VAR 0 10
44688: PUSH
44689: LD_REAL  1.10000000000000E+0000
44692: MUL
44693: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44694: LD_ADDR_VAR 0 10
44698: PUSH
44699: LD_VAR 0 10
44703: PUSH
44704: LD_VAR 0 6
44708: PPUSH
44709: LD_INT 1
44711: PPUSH
44712: CALL_OW 259
44716: PUSH
44717: LD_REAL  1.15000000000000E+0000
44720: MUL
44721: MUL
44722: ST_TO_ADDR
// end ; unit_vehicle :
44723: GO 45547
44725: LD_INT 2
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 45535
44733: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44734: LD_VAR 0 6
44738: PPUSH
44739: CALL_OW 264
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 42
44749: PUSH
44750: LD_INT 24
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: IN
44758: IFFALSE 44779
// points := [ 25 , 5 , 3 ] ;
44760: LD_ADDR_VAR 0 9
44764: PUSH
44765: LD_INT 25
44767: PUSH
44768: LD_INT 5
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44779: LD_VAR 0 6
44783: PPUSH
44784: CALL_OW 264
44788: PUSH
44789: LD_INT 4
44791: PUSH
44792: LD_INT 43
44794: PUSH
44795: LD_INT 25
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: IN
44803: IFFALSE 44824
// points := [ 40 , 15 , 5 ] ;
44805: LD_ADDR_VAR 0 9
44809: PUSH
44810: LD_INT 40
44812: PUSH
44813: LD_INT 15
44815: PUSH
44816: LD_INT 5
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44824: LD_VAR 0 6
44828: PPUSH
44829: CALL_OW 264
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: LD_INT 23
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: IN
44844: IFFALSE 44865
// points := [ 7 , 25 , 8 ] ;
44846: LD_ADDR_VAR 0 9
44850: PUSH
44851: LD_INT 7
44853: PUSH
44854: LD_INT 25
44856: PUSH
44857: LD_INT 8
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44865: LD_VAR 0 6
44869: PPUSH
44870: CALL_OW 264
44874: PUSH
44875: LD_INT 5
44877: PUSH
44878: LD_INT 27
44880: PUSH
44881: LD_INT 44
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: IN
44889: IFFALSE 44910
// points := [ 14 , 50 , 16 ] ;
44891: LD_ADDR_VAR 0 9
44895: PUSH
44896: LD_INT 14
44898: PUSH
44899: LD_INT 50
44901: PUSH
44902: LD_INT 16
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44910: LD_VAR 0 6
44914: PPUSH
44915: CALL_OW 264
44919: PUSH
44920: LD_INT 6
44922: PUSH
44923: LD_INT 46
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: IN
44930: IFFALSE 44951
// points := [ 32 , 120 , 70 ] ;
44932: LD_ADDR_VAR 0 9
44936: PUSH
44937: LD_INT 32
44939: PUSH
44940: LD_INT 120
44942: PUSH
44943: LD_INT 70
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
44951: LD_VAR 0 6
44955: PPUSH
44956: CALL_OW 264
44960: PUSH
44961: LD_INT 7
44963: PUSH
44964: LD_INT 28
44966: PUSH
44967: LD_INT 45
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: IN
44975: IFFALSE 44996
// points := [ 35 , 20 , 45 ] ;
44977: LD_ADDR_VAR 0 9
44981: PUSH
44982: LD_INT 35
44984: PUSH
44985: LD_INT 20
44987: PUSH
44988: LD_INT 45
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44996: LD_VAR 0 6
45000: PPUSH
45001: CALL_OW 264
45005: PUSH
45006: LD_INT 47
45008: PUSH
45009: EMPTY
45010: LIST
45011: IN
45012: IFFALSE 45033
// points := [ 67 , 45 , 75 ] ;
45014: LD_ADDR_VAR 0 9
45018: PUSH
45019: LD_INT 67
45021: PUSH
45022: LD_INT 45
45024: PUSH
45025: LD_INT 75
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45033: LD_VAR 0 6
45037: PPUSH
45038: CALL_OW 264
45042: PUSH
45043: LD_INT 26
45045: PUSH
45046: EMPTY
45047: LIST
45048: IN
45049: IFFALSE 45070
// points := [ 120 , 30 , 80 ] ;
45051: LD_ADDR_VAR 0 9
45055: PUSH
45056: LD_INT 120
45058: PUSH
45059: LD_INT 30
45061: PUSH
45062: LD_INT 80
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45070: LD_VAR 0 6
45074: PPUSH
45075: CALL_OW 264
45079: PUSH
45080: LD_INT 22
45082: PUSH
45083: EMPTY
45084: LIST
45085: IN
45086: IFFALSE 45107
// points := [ 40 , 1 , 1 ] ;
45088: LD_ADDR_VAR 0 9
45092: PUSH
45093: LD_INT 40
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45107: LD_VAR 0 6
45111: PPUSH
45112: CALL_OW 264
45116: PUSH
45117: LD_INT 29
45119: PUSH
45120: EMPTY
45121: LIST
45122: IN
45123: IFFALSE 45144
// points := [ 70 , 200 , 400 ] ;
45125: LD_ADDR_VAR 0 9
45129: PUSH
45130: LD_INT 70
45132: PUSH
45133: LD_INT 200
45135: PUSH
45136: LD_INT 400
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45144: LD_VAR 0 6
45148: PPUSH
45149: CALL_OW 264
45153: PUSH
45154: LD_INT 14
45156: PUSH
45157: LD_INT 53
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: IN
45164: IFFALSE 45185
// points := [ 40 , 10 , 20 ] ;
45166: LD_ADDR_VAR 0 9
45170: PUSH
45171: LD_INT 40
45173: PUSH
45174: LD_INT 10
45176: PUSH
45177: LD_INT 20
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45185: LD_VAR 0 6
45189: PPUSH
45190: CALL_OW 264
45194: PUSH
45195: LD_INT 9
45197: PUSH
45198: EMPTY
45199: LIST
45200: IN
45201: IFFALSE 45222
// points := [ 5 , 70 , 20 ] ;
45203: LD_ADDR_VAR 0 9
45207: PUSH
45208: LD_INT 5
45210: PUSH
45211: LD_INT 70
45213: PUSH
45214: LD_INT 20
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45222: LD_VAR 0 6
45226: PPUSH
45227: CALL_OW 264
45231: PUSH
45232: LD_INT 10
45234: PUSH
45235: EMPTY
45236: LIST
45237: IN
45238: IFFALSE 45259
// points := [ 35 , 110 , 70 ] ;
45240: LD_ADDR_VAR 0 9
45244: PUSH
45245: LD_INT 35
45247: PUSH
45248: LD_INT 110
45250: PUSH
45251: LD_INT 70
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45259: LD_VAR 0 6
45263: PPUSH
45264: CALL_OW 265
45268: PUSH
45269: LD_INT 25
45271: EQUAL
45272: IFFALSE 45293
// points := [ 80 , 65 , 100 ] ;
45274: LD_ADDR_VAR 0 9
45278: PUSH
45279: LD_INT 80
45281: PUSH
45282: LD_INT 65
45284: PUSH
45285: LD_INT 100
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45293: LD_VAR 0 6
45297: PPUSH
45298: CALL_OW 263
45302: PUSH
45303: LD_INT 1
45305: EQUAL
45306: IFFALSE 45341
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45308: LD_ADDR_VAR 0 10
45312: PUSH
45313: LD_VAR 0 10
45317: PUSH
45318: LD_VAR 0 6
45322: PPUSH
45323: CALL_OW 311
45327: PPUSH
45328: LD_INT 3
45330: PPUSH
45331: CALL_OW 259
45335: PUSH
45336: LD_INT 4
45338: MUL
45339: MUL
45340: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45341: LD_VAR 0 6
45345: PPUSH
45346: CALL_OW 263
45350: PUSH
45351: LD_INT 2
45353: EQUAL
45354: IFFALSE 45405
// begin j := IsControledBy ( i ) ;
45356: LD_ADDR_VAR 0 7
45360: PUSH
45361: LD_VAR 0 6
45365: PPUSH
45366: CALL_OW 312
45370: ST_TO_ADDR
// if j then
45371: LD_VAR 0 7
45375: IFFALSE 45405
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45377: LD_ADDR_VAR 0 10
45381: PUSH
45382: LD_VAR 0 10
45386: PUSH
45387: LD_VAR 0 7
45391: PPUSH
45392: LD_INT 3
45394: PPUSH
45395: CALL_OW 259
45399: PUSH
45400: LD_INT 3
45402: MUL
45403: MUL
45404: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45405: LD_VAR 0 6
45409: PPUSH
45410: CALL_OW 264
45414: PUSH
45415: LD_INT 5
45417: PUSH
45418: LD_INT 6
45420: PUSH
45421: LD_INT 46
45423: PUSH
45424: LD_INT 44
45426: PUSH
45427: LD_INT 47
45429: PUSH
45430: LD_INT 45
45432: PUSH
45433: LD_INT 28
45435: PUSH
45436: LD_INT 7
45438: PUSH
45439: LD_INT 27
45441: PUSH
45442: LD_INT 29
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: IN
45457: PUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: LD_INT 52
45465: PPUSH
45466: CALL_OW 321
45470: PUSH
45471: LD_INT 2
45473: EQUAL
45474: AND
45475: IFFALSE 45492
// bpoints := bpoints * 1.2 ;
45477: LD_ADDR_VAR 0 10
45481: PUSH
45482: LD_VAR 0 10
45486: PUSH
45487: LD_REAL  1.20000000000000E+0000
45490: MUL
45491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45492: LD_VAR 0 6
45496: PPUSH
45497: CALL_OW 264
45501: PUSH
45502: LD_INT 6
45504: PUSH
45505: LD_INT 46
45507: PUSH
45508: LD_INT 47
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: IN
45516: IFFALSE 45533
// bpoints := bpoints * 1.2 ;
45518: LD_ADDR_VAR 0 10
45522: PUSH
45523: LD_VAR 0 10
45527: PUSH
45528: LD_REAL  1.20000000000000E+0000
45531: MUL
45532: ST_TO_ADDR
// end ; unit_building :
45533: GO 45547
45535: LD_INT 3
45537: DOUBLE
45538: EQUAL
45539: IFTRUE 45543
45541: GO 45546
45543: POP
// ; end ;
45544: GO 45547
45546: POP
// for j = 1 to 3 do
45547: LD_ADDR_VAR 0 7
45551: PUSH
45552: DOUBLE
45553: LD_INT 1
45555: DEC
45556: ST_TO_ADDR
45557: LD_INT 3
45559: PUSH
45560: FOR_TO
45561: IFFALSE 45614
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45563: LD_ADDR_VAR 0 5
45567: PUSH
45568: LD_VAR 0 5
45572: PPUSH
45573: LD_VAR 0 7
45577: PPUSH
45578: LD_VAR 0 5
45582: PUSH
45583: LD_VAR 0 7
45587: ARRAY
45588: PUSH
45589: LD_VAR 0 9
45593: PUSH
45594: LD_VAR 0 7
45598: ARRAY
45599: PUSH
45600: LD_VAR 0 10
45604: MUL
45605: PLUS
45606: PPUSH
45607: CALL_OW 1
45611: ST_TO_ADDR
45612: GO 45560
45614: POP
45615: POP
// end ;
45616: GO 44099
45618: POP
45619: POP
// result := Replace ( result , 4 , tmp ) ;
45620: LD_ADDR_VAR 0 5
45624: PUSH
45625: LD_VAR 0 5
45629: PPUSH
45630: LD_INT 4
45632: PPUSH
45633: LD_VAR 0 8
45637: PPUSH
45638: CALL_OW 1
45642: ST_TO_ADDR
// end ;
45643: LD_VAR 0 5
45647: RET
// export function DangerAtRange ( unit , range ) ; begin
45648: LD_INT 0
45650: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 255
45665: PPUSH
45666: LD_VAR 0 1
45670: PPUSH
45671: CALL_OW 250
45675: PPUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 251
45685: PPUSH
45686: LD_VAR 0 2
45690: PPUSH
45691: CALL 43951 0 4
45695: ST_TO_ADDR
// end ;
45696: LD_VAR 0 3
45700: RET
// export function DangerInArea ( side , area ) ; begin
45701: LD_INT 0
45703: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45704: LD_ADDR_VAR 0 3
45708: PUSH
45709: LD_VAR 0 2
45713: PPUSH
45714: LD_INT 81
45716: PUSH
45717: LD_VAR 0 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PPUSH
45726: CALL_OW 70
45730: ST_TO_ADDR
// end ;
45731: LD_VAR 0 3
45735: RET
// export function IsExtension ( b ) ; begin
45736: LD_INT 0
45738: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45739: LD_ADDR_VAR 0 2
45743: PUSH
45744: LD_VAR 0 1
45748: PUSH
45749: LD_INT 23
45751: PUSH
45752: LD_INT 20
45754: PUSH
45755: LD_INT 22
45757: PUSH
45758: LD_INT 17
45760: PUSH
45761: LD_INT 24
45763: PUSH
45764: LD_INT 21
45766: PUSH
45767: LD_INT 19
45769: PUSH
45770: LD_INT 16
45772: PUSH
45773: LD_INT 25
45775: PUSH
45776: LD_INT 18
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: IN
45791: ST_TO_ADDR
// end ;
45792: LD_VAR 0 2
45796: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
45797: LD_INT 0
45799: PPUSH
45800: PPUSH
45801: PPUSH
// result := [ ] ;
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45809: LD_ADDR_VAR 0 4
45813: PUSH
45814: LD_VAR 0 2
45818: PPUSH
45819: LD_INT 21
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PPUSH
45829: CALL_OW 70
45833: ST_TO_ADDR
// if not tmp then
45834: LD_VAR 0 4
45838: NOT
45839: IFFALSE 45843
// exit ;
45841: GO 45901
// for i in tmp do
45843: LD_ADDR_VAR 0 5
45847: PUSH
45848: LD_VAR 0 4
45852: PUSH
45853: FOR_IN
45854: IFFALSE 45889
// if GetBase ( i ) <> base then
45856: LD_VAR 0 5
45860: PPUSH
45861: CALL_OW 274
45865: PUSH
45866: LD_VAR 0 1
45870: NONEQUAL
45871: IFFALSE 45887
// ComLinkToBase ( base , i ) ;
45873: LD_VAR 0 1
45877: PPUSH
45878: LD_VAR 0 5
45882: PPUSH
45883: CALL_OW 169
45887: GO 45853
45889: POP
45890: POP
// result := tmp ;
45891: LD_ADDR_VAR 0 3
45895: PUSH
45896: LD_VAR 0 4
45900: ST_TO_ADDR
// end ;
45901: LD_VAR 0 3
45905: RET
// export function ComComplete ( unit , b ) ; var i ; begin
45906: LD_INT 0
45908: PPUSH
45909: PPUSH
// if BuildingStatus ( b ) = bs_build then
45910: LD_VAR 0 2
45914: PPUSH
45915: CALL_OW 461
45919: PUSH
45920: LD_INT 1
45922: EQUAL
45923: IFFALSE 45983
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45925: LD_VAR 0 1
45929: PPUSH
45930: LD_STRING h
45932: PUSH
45933: LD_VAR 0 2
45937: PPUSH
45938: CALL_OW 250
45942: PUSH
45943: LD_VAR 0 2
45947: PPUSH
45948: CALL_OW 251
45952: PUSH
45953: LD_VAR 0 2
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: PPUSH
45979: CALL_OW 446
// end ;
45983: LD_VAR 0 3
45987: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45988: LD_INT 0
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
45996: LD_VAR 0 1
46000: NOT
46001: PUSH
46002: LD_VAR 0 1
46006: PPUSH
46007: CALL_OW 263
46011: PUSH
46012: LD_INT 2
46014: EQUAL
46015: NOT
46016: OR
46017: IFFALSE 46021
// exit ;
46019: GO 46337
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46021: LD_ADDR_VAR 0 6
46025: PUSH
46026: LD_INT 22
46028: PUSH
46029: LD_VAR 0 1
46033: PPUSH
46034: CALL_OW 255
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 30
46048: PUSH
46049: LD_INT 36
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 34
46058: PUSH
46059: LD_INT 31
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PPUSH
46075: CALL_OW 69
46079: ST_TO_ADDR
// if not tmp then
46080: LD_VAR 0 6
46084: NOT
46085: IFFALSE 46089
// exit ;
46087: GO 46337
// result := [ ] ;
46089: LD_ADDR_VAR 0 2
46093: PUSH
46094: EMPTY
46095: ST_TO_ADDR
// for i in tmp do
46096: LD_ADDR_VAR 0 3
46100: PUSH
46101: LD_VAR 0 6
46105: PUSH
46106: FOR_IN
46107: IFFALSE 46178
// begin t := UnitsInside ( i ) ;
46109: LD_ADDR_VAR 0 4
46113: PUSH
46114: LD_VAR 0 3
46118: PPUSH
46119: CALL_OW 313
46123: ST_TO_ADDR
// if t then
46124: LD_VAR 0 4
46128: IFFALSE 46176
// for j in t do
46130: LD_ADDR_VAR 0 7
46134: PUSH
46135: LD_VAR 0 4
46139: PUSH
46140: FOR_IN
46141: IFFALSE 46174
// result := Insert ( result , result + 1 , j ) ;
46143: LD_ADDR_VAR 0 2
46147: PUSH
46148: LD_VAR 0 2
46152: PPUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 1
46160: PLUS
46161: PPUSH
46162: LD_VAR 0 7
46166: PPUSH
46167: CALL_OW 2
46171: ST_TO_ADDR
46172: GO 46140
46174: POP
46175: POP
// end ;
46176: GO 46106
46178: POP
46179: POP
// if not result then
46180: LD_VAR 0 2
46184: NOT
46185: IFFALSE 46189
// exit ;
46187: GO 46337
// mech := result [ 1 ] ;
46189: LD_ADDR_VAR 0 5
46193: PUSH
46194: LD_VAR 0 2
46198: PUSH
46199: LD_INT 1
46201: ARRAY
46202: ST_TO_ADDR
// if result > 1 then
46203: LD_VAR 0 2
46207: PUSH
46208: LD_INT 1
46210: GREATER
46211: IFFALSE 46323
// for i = 2 to result do
46213: LD_ADDR_VAR 0 3
46217: PUSH
46218: DOUBLE
46219: LD_INT 2
46221: DEC
46222: ST_TO_ADDR
46223: LD_VAR 0 2
46227: PUSH
46228: FOR_TO
46229: IFFALSE 46321
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46231: LD_ADDR_VAR 0 4
46235: PUSH
46236: LD_VAR 0 2
46240: PUSH
46241: LD_VAR 0 3
46245: ARRAY
46246: PPUSH
46247: LD_INT 3
46249: PPUSH
46250: CALL_OW 259
46254: PUSH
46255: LD_VAR 0 2
46259: PUSH
46260: LD_VAR 0 3
46264: ARRAY
46265: PPUSH
46266: CALL_OW 432
46270: MINUS
46271: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46272: LD_VAR 0 4
46276: PUSH
46277: LD_VAR 0 5
46281: PPUSH
46282: LD_INT 3
46284: PPUSH
46285: CALL_OW 259
46289: PUSH
46290: LD_VAR 0 5
46294: PPUSH
46295: CALL_OW 432
46299: MINUS
46300: GREATEREQUAL
46301: IFFALSE 46319
// mech := result [ i ] ;
46303: LD_ADDR_VAR 0 5
46307: PUSH
46308: LD_VAR 0 2
46312: PUSH
46313: LD_VAR 0 3
46317: ARRAY
46318: ST_TO_ADDR
// end ;
46319: GO 46228
46321: POP
46322: POP
// ComLinkTo ( vehicle , mech ) ;
46323: LD_VAR 0 1
46327: PPUSH
46328: LD_VAR 0 5
46332: PPUSH
46333: CALL_OW 135
// end ;
46337: LD_VAR 0 2
46341: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
46346: PPUSH
46347: PPUSH
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
46356: PPUSH
// result := [ ] ;
46357: LD_ADDR_VAR 0 7
46361: PUSH
46362: EMPTY
46363: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46364: LD_VAR 0 1
46368: PPUSH
46369: CALL_OW 266
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: IN
46384: NOT
46385: IFFALSE 46389
// exit ;
46387: GO 48020
// if name then
46389: LD_VAR 0 3
46393: IFFALSE 46409
// SetBName ( base_dep , name ) ;
46395: LD_VAR 0 1
46399: PPUSH
46400: LD_VAR 0 3
46404: PPUSH
46405: CALL_OW 500
// base := GetBase ( base_dep ) ;
46409: LD_ADDR_VAR 0 15
46413: PUSH
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 274
46423: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46424: LD_ADDR_VAR 0 16
46428: PUSH
46429: LD_VAR 0 1
46433: PPUSH
46434: CALL_OW 255
46438: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46439: LD_ADDR_VAR 0 17
46443: PUSH
46444: LD_VAR 0 1
46448: PPUSH
46449: CALL_OW 248
46453: ST_TO_ADDR
// if sources then
46454: LD_VAR 0 5
46458: IFFALSE 46505
// for i = 1 to 3 do
46460: LD_ADDR_VAR 0 8
46464: PUSH
46465: DOUBLE
46466: LD_INT 1
46468: DEC
46469: ST_TO_ADDR
46470: LD_INT 3
46472: PUSH
46473: FOR_TO
46474: IFFALSE 46503
// AddResourceType ( base , i , sources [ i ] ) ;
46476: LD_VAR 0 15
46480: PPUSH
46481: LD_VAR 0 8
46485: PPUSH
46486: LD_VAR 0 5
46490: PUSH
46491: LD_VAR 0 8
46495: ARRAY
46496: PPUSH
46497: CALL_OW 276
46501: GO 46473
46503: POP
46504: POP
// buildings := GetBaseBuildings ( base , area ) ;
46505: LD_ADDR_VAR 0 18
46509: PUSH
46510: LD_VAR 0 15
46514: PPUSH
46515: LD_VAR 0 2
46519: PPUSH
46520: CALL 45797 0 2
46524: ST_TO_ADDR
// InitHc ;
46525: CALL_OW 19
// InitUc ;
46529: CALL_OW 18
// uc_side := side ;
46533: LD_ADDR_OWVAR 20
46537: PUSH
46538: LD_VAR 0 16
46542: ST_TO_ADDR
// uc_nation := nation ;
46543: LD_ADDR_OWVAR 21
46547: PUSH
46548: LD_VAR 0 17
46552: ST_TO_ADDR
// if buildings then
46553: LD_VAR 0 18
46557: IFFALSE 47879
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46559: LD_ADDR_VAR 0 19
46563: PUSH
46564: LD_VAR 0 18
46568: PPUSH
46569: LD_INT 2
46571: PUSH
46572: LD_INT 30
46574: PUSH
46575: LD_INT 29
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 30
46584: PUSH
46585: LD_INT 30
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: PPUSH
46597: CALL_OW 72
46601: ST_TO_ADDR
// if tmp then
46602: LD_VAR 0 19
46606: IFFALSE 46654
// for i in tmp do
46608: LD_ADDR_VAR 0 8
46612: PUSH
46613: LD_VAR 0 19
46617: PUSH
46618: FOR_IN
46619: IFFALSE 46652
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46621: LD_VAR 0 8
46625: PPUSH
46626: CALL_OW 250
46630: PPUSH
46631: LD_VAR 0 8
46635: PPUSH
46636: CALL_OW 251
46640: PPUSH
46641: LD_VAR 0 16
46645: PPUSH
46646: CALL_OW 441
46650: GO 46618
46652: POP
46653: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46654: LD_VAR 0 18
46658: PPUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 30
46664: PUSH
46665: LD_INT 32
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 30
46674: PUSH
46675: LD_INT 33
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: PPUSH
46687: CALL_OW 72
46691: IFFALSE 46779
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46693: LD_ADDR_VAR 0 8
46697: PUSH
46698: LD_VAR 0 18
46702: PPUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 30
46708: PUSH
46709: LD_INT 32
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 30
46718: PUSH
46719: LD_INT 33
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: PPUSH
46731: CALL_OW 72
46735: PUSH
46736: FOR_IN
46737: IFFALSE 46777
// begin if not GetBWeapon ( i ) then
46739: LD_VAR 0 8
46743: PPUSH
46744: CALL_OW 269
46748: NOT
46749: IFFALSE 46775
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46751: LD_VAR 0 8
46755: PPUSH
46756: LD_VAR 0 8
46760: PPUSH
46761: LD_VAR 0 2
46765: PPUSH
46766: CALL 48025 0 2
46770: PPUSH
46771: CALL_OW 431
// end ;
46775: GO 46736
46777: POP
46778: POP
// end ; for i = 1 to personel do
46779: LD_ADDR_VAR 0 8
46783: PUSH
46784: DOUBLE
46785: LD_INT 1
46787: DEC
46788: ST_TO_ADDR
46789: LD_VAR 0 6
46793: PUSH
46794: FOR_TO
46795: IFFALSE 47859
// begin if i > 4 then
46797: LD_VAR 0 8
46801: PUSH
46802: LD_INT 4
46804: GREATER
46805: IFFALSE 46809
// break ;
46807: GO 47859
// case i of 1 :
46809: LD_VAR 0 8
46813: PUSH
46814: LD_INT 1
46816: DOUBLE
46817: EQUAL
46818: IFTRUE 46822
46820: GO 46902
46822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46823: LD_ADDR_VAR 0 12
46827: PUSH
46828: LD_VAR 0 18
46832: PPUSH
46833: LD_INT 22
46835: PUSH
46836: LD_VAR 0 16
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 58
46847: PUSH
46848: EMPTY
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 30
46856: PUSH
46857: LD_INT 32
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 30
46866: PUSH
46867: LD_INT 4
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 30
46876: PUSH
46877: LD_INT 5
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: PPUSH
46895: CALL_OW 72
46899: ST_TO_ADDR
46900: GO 47124
46902: LD_INT 2
46904: DOUBLE
46905: EQUAL
46906: IFTRUE 46910
46908: GO 46972
46910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46911: LD_ADDR_VAR 0 12
46915: PUSH
46916: LD_VAR 0 18
46920: PPUSH
46921: LD_INT 22
46923: PUSH
46924: LD_VAR 0 16
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: LD_INT 30
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 30
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PPUSH
46965: CALL_OW 72
46969: ST_TO_ADDR
46970: GO 47124
46972: LD_INT 3
46974: DOUBLE
46975: EQUAL
46976: IFTRUE 46980
46978: GO 47042
46980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46981: LD_ADDR_VAR 0 12
46985: PUSH
46986: LD_VAR 0 18
46990: PPUSH
46991: LD_INT 22
46993: PUSH
46994: LD_VAR 0 16
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 30
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 30
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PPUSH
47035: CALL_OW 72
47039: ST_TO_ADDR
47040: GO 47124
47042: LD_INT 4
47044: DOUBLE
47045: EQUAL
47046: IFTRUE 47050
47048: GO 47123
47050: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47051: LD_ADDR_VAR 0 12
47055: PUSH
47056: LD_VAR 0 18
47060: PPUSH
47061: LD_INT 22
47063: PUSH
47064: LD_VAR 0 16
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 30
47078: PUSH
47079: LD_INT 6
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 30
47088: PUSH
47089: LD_INT 7
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 30
47098: PUSH
47099: LD_INT 8
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PPUSH
47116: CALL_OW 72
47120: ST_TO_ADDR
47121: GO 47124
47123: POP
// if i = 1 then
47124: LD_VAR 0 8
47128: PUSH
47129: LD_INT 1
47131: EQUAL
47132: IFFALSE 47243
// begin tmp := [ ] ;
47134: LD_ADDR_VAR 0 19
47138: PUSH
47139: EMPTY
47140: ST_TO_ADDR
// for j in f do
47141: LD_ADDR_VAR 0 9
47145: PUSH
47146: LD_VAR 0 12
47150: PUSH
47151: FOR_IN
47152: IFFALSE 47225
// if GetBType ( j ) = b_bunker then
47154: LD_VAR 0 9
47158: PPUSH
47159: CALL_OW 266
47163: PUSH
47164: LD_INT 32
47166: EQUAL
47167: IFFALSE 47194
// tmp := Insert ( tmp , 1 , j ) else
47169: LD_ADDR_VAR 0 19
47173: PUSH
47174: LD_VAR 0 19
47178: PPUSH
47179: LD_INT 1
47181: PPUSH
47182: LD_VAR 0 9
47186: PPUSH
47187: CALL_OW 2
47191: ST_TO_ADDR
47192: GO 47223
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47194: LD_ADDR_VAR 0 19
47198: PUSH
47199: LD_VAR 0 19
47203: PPUSH
47204: LD_VAR 0 19
47208: PUSH
47209: LD_INT 1
47211: PLUS
47212: PPUSH
47213: LD_VAR 0 9
47217: PPUSH
47218: CALL_OW 2
47222: ST_TO_ADDR
47223: GO 47151
47225: POP
47226: POP
// if tmp then
47227: LD_VAR 0 19
47231: IFFALSE 47243
// f := tmp ;
47233: LD_ADDR_VAR 0 12
47237: PUSH
47238: LD_VAR 0 19
47242: ST_TO_ADDR
// end ; x := personel [ i ] ;
47243: LD_ADDR_VAR 0 13
47247: PUSH
47248: LD_VAR 0 6
47252: PUSH
47253: LD_VAR 0 8
47257: ARRAY
47258: ST_TO_ADDR
// if x = - 1 then
47259: LD_VAR 0 13
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: EQUAL
47268: IFFALSE 47477
// begin for j in f do
47270: LD_ADDR_VAR 0 9
47274: PUSH
47275: LD_VAR 0 12
47279: PUSH
47280: FOR_IN
47281: IFFALSE 47473
// repeat InitHc ;
47283: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47287: LD_VAR 0 9
47291: PPUSH
47292: CALL_OW 266
47296: PUSH
47297: LD_INT 5
47299: EQUAL
47300: IFFALSE 47370
// begin if UnitsInside ( j ) < 3 then
47302: LD_VAR 0 9
47306: PPUSH
47307: CALL_OW 313
47311: PUSH
47312: LD_INT 3
47314: LESS
47315: IFFALSE 47351
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47317: LD_INT 0
47319: PPUSH
47320: LD_INT 5
47322: PUSH
47323: LD_INT 8
47325: PUSH
47326: LD_INT 9
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: PUSH
47334: LD_VAR 0 17
47338: ARRAY
47339: PPUSH
47340: LD_VAR 0 4
47344: PPUSH
47345: CALL_OW 380
47349: GO 47368
// PrepareHuman ( false , i , skill ) ;
47351: LD_INT 0
47353: PPUSH
47354: LD_VAR 0 8
47358: PPUSH
47359: LD_VAR 0 4
47363: PPUSH
47364: CALL_OW 380
// end else
47368: GO 47387
// PrepareHuman ( false , i , skill ) ;
47370: LD_INT 0
47372: PPUSH
47373: LD_VAR 0 8
47377: PPUSH
47378: LD_VAR 0 4
47382: PPUSH
47383: CALL_OW 380
// un := CreateHuman ;
47387: LD_ADDR_VAR 0 14
47391: PUSH
47392: CALL_OW 44
47396: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47397: LD_ADDR_VAR 0 7
47401: PUSH
47402: LD_VAR 0 7
47406: PPUSH
47407: LD_INT 1
47409: PPUSH
47410: LD_VAR 0 14
47414: PPUSH
47415: CALL_OW 2
47419: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47420: LD_VAR 0 14
47424: PPUSH
47425: LD_VAR 0 9
47429: PPUSH
47430: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47434: LD_VAR 0 9
47438: PPUSH
47439: CALL_OW 313
47443: PUSH
47444: LD_INT 6
47446: EQUAL
47447: PUSH
47448: LD_VAR 0 9
47452: PPUSH
47453: CALL_OW 266
47457: PUSH
47458: LD_INT 32
47460: PUSH
47461: LD_INT 31
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: IN
47468: OR
47469: IFFALSE 47283
47471: GO 47280
47473: POP
47474: POP
// end else
47475: GO 47857
// for j = 1 to x do
47477: LD_ADDR_VAR 0 9
47481: PUSH
47482: DOUBLE
47483: LD_INT 1
47485: DEC
47486: ST_TO_ADDR
47487: LD_VAR 0 13
47491: PUSH
47492: FOR_TO
47493: IFFALSE 47855
// begin InitHc ;
47495: CALL_OW 19
// if not f then
47499: LD_VAR 0 12
47503: NOT
47504: IFFALSE 47593
// begin PrepareHuman ( false , i , skill ) ;
47506: LD_INT 0
47508: PPUSH
47509: LD_VAR 0 8
47513: PPUSH
47514: LD_VAR 0 4
47518: PPUSH
47519: CALL_OW 380
// un := CreateHuman ;
47523: LD_ADDR_VAR 0 14
47527: PUSH
47528: CALL_OW 44
47532: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47533: LD_ADDR_VAR 0 7
47537: PUSH
47538: LD_VAR 0 7
47542: PPUSH
47543: LD_INT 1
47545: PPUSH
47546: LD_VAR 0 14
47550: PPUSH
47551: CALL_OW 2
47555: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47556: LD_VAR 0 14
47560: PPUSH
47561: LD_VAR 0 1
47565: PPUSH
47566: CALL_OW 250
47570: PPUSH
47571: LD_VAR 0 1
47575: PPUSH
47576: CALL_OW 251
47580: PPUSH
47581: LD_INT 10
47583: PPUSH
47584: LD_INT 0
47586: PPUSH
47587: CALL_OW 50
// continue ;
47591: GO 47492
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47593: LD_VAR 0 12
47597: PUSH
47598: LD_INT 1
47600: ARRAY
47601: PPUSH
47602: CALL_OW 313
47606: PUSH
47607: LD_VAR 0 12
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: PPUSH
47616: CALL_OW 266
47620: PUSH
47621: LD_INT 32
47623: PUSH
47624: LD_INT 31
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: IN
47631: AND
47632: PUSH
47633: LD_VAR 0 12
47637: PUSH
47638: LD_INT 1
47640: ARRAY
47641: PPUSH
47642: CALL_OW 313
47646: PUSH
47647: LD_INT 6
47649: EQUAL
47650: OR
47651: IFFALSE 47671
// f := Delete ( f , 1 ) ;
47653: LD_ADDR_VAR 0 12
47657: PUSH
47658: LD_VAR 0 12
47662: PPUSH
47663: LD_INT 1
47665: PPUSH
47666: CALL_OW 3
47670: ST_TO_ADDR
// if not f then
47671: LD_VAR 0 12
47675: NOT
47676: IFFALSE 47694
// begin x := x + 2 ;
47678: LD_ADDR_VAR 0 13
47682: PUSH
47683: LD_VAR 0 13
47687: PUSH
47688: LD_INT 2
47690: PLUS
47691: ST_TO_ADDR
// continue ;
47692: GO 47492
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47694: LD_VAR 0 12
47698: PUSH
47699: LD_INT 1
47701: ARRAY
47702: PPUSH
47703: CALL_OW 266
47707: PUSH
47708: LD_INT 5
47710: EQUAL
47711: IFFALSE 47785
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47713: LD_VAR 0 12
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: PPUSH
47722: CALL_OW 313
47726: PUSH
47727: LD_INT 3
47729: LESS
47730: IFFALSE 47766
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47732: LD_INT 0
47734: PPUSH
47735: LD_INT 5
47737: PUSH
47738: LD_INT 8
47740: PUSH
47741: LD_INT 9
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: LD_VAR 0 17
47753: ARRAY
47754: PPUSH
47755: LD_VAR 0 4
47759: PPUSH
47760: CALL_OW 380
47764: GO 47783
// PrepareHuman ( false , i , skill ) ;
47766: LD_INT 0
47768: PPUSH
47769: LD_VAR 0 8
47773: PPUSH
47774: LD_VAR 0 4
47778: PPUSH
47779: CALL_OW 380
// end else
47783: GO 47802
// PrepareHuman ( false , i , skill ) ;
47785: LD_INT 0
47787: PPUSH
47788: LD_VAR 0 8
47792: PPUSH
47793: LD_VAR 0 4
47797: PPUSH
47798: CALL_OW 380
// un := CreateHuman ;
47802: LD_ADDR_VAR 0 14
47806: PUSH
47807: CALL_OW 44
47811: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47812: LD_ADDR_VAR 0 7
47816: PUSH
47817: LD_VAR 0 7
47821: PPUSH
47822: LD_INT 1
47824: PPUSH
47825: LD_VAR 0 14
47829: PPUSH
47830: CALL_OW 2
47834: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47835: LD_VAR 0 14
47839: PPUSH
47840: LD_VAR 0 12
47844: PUSH
47845: LD_INT 1
47847: ARRAY
47848: PPUSH
47849: CALL_OW 52
// end ;
47853: GO 47492
47855: POP
47856: POP
// end ;
47857: GO 46794
47859: POP
47860: POP
// result := result ^ buildings ;
47861: LD_ADDR_VAR 0 7
47865: PUSH
47866: LD_VAR 0 7
47870: PUSH
47871: LD_VAR 0 18
47875: ADD
47876: ST_TO_ADDR
// end else
47877: GO 48020
// begin for i = 1 to personel do
47879: LD_ADDR_VAR 0 8
47883: PUSH
47884: DOUBLE
47885: LD_INT 1
47887: DEC
47888: ST_TO_ADDR
47889: LD_VAR 0 6
47893: PUSH
47894: FOR_TO
47895: IFFALSE 48018
// begin if i > 4 then
47897: LD_VAR 0 8
47901: PUSH
47902: LD_INT 4
47904: GREATER
47905: IFFALSE 47909
// break ;
47907: GO 48018
// x := personel [ i ] ;
47909: LD_ADDR_VAR 0 13
47913: PUSH
47914: LD_VAR 0 6
47918: PUSH
47919: LD_VAR 0 8
47923: ARRAY
47924: ST_TO_ADDR
// if x = - 1 then
47925: LD_VAR 0 13
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: EQUAL
47934: IFFALSE 47938
// continue ;
47936: GO 47894
// PrepareHuman ( false , i , skill ) ;
47938: LD_INT 0
47940: PPUSH
47941: LD_VAR 0 8
47945: PPUSH
47946: LD_VAR 0 4
47950: PPUSH
47951: CALL_OW 380
// un := CreateHuman ;
47955: LD_ADDR_VAR 0 14
47959: PUSH
47960: CALL_OW 44
47964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47965: LD_VAR 0 14
47969: PPUSH
47970: LD_VAR 0 1
47974: PPUSH
47975: CALL_OW 250
47979: PPUSH
47980: LD_VAR 0 1
47984: PPUSH
47985: CALL_OW 251
47989: PPUSH
47990: LD_INT 10
47992: PPUSH
47993: LD_INT 0
47995: PPUSH
47996: CALL_OW 50
// result := result ^ un ;
48000: LD_ADDR_VAR 0 7
48004: PUSH
48005: LD_VAR 0 7
48009: PUSH
48010: LD_VAR 0 14
48014: ADD
48015: ST_TO_ADDR
// end ;
48016: GO 47894
48018: POP
48019: POP
// end ; end ;
48020: LD_VAR 0 7
48024: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48025: LD_INT 0
48027: PPUSH
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
// result := false ;
48043: LD_ADDR_VAR 0 3
48047: PUSH
48048: LD_INT 0
48050: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48051: LD_VAR 0 1
48055: NOT
48056: PUSH
48057: LD_VAR 0 1
48061: PPUSH
48062: CALL_OW 266
48066: PUSH
48067: LD_INT 32
48069: PUSH
48070: LD_INT 33
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: IN
48077: NOT
48078: OR
48079: IFFALSE 48083
// exit ;
48081: GO 49219
// nat := GetNation ( tower ) ;
48083: LD_ADDR_VAR 0 12
48087: PUSH
48088: LD_VAR 0 1
48092: PPUSH
48093: CALL_OW 248
48097: ST_TO_ADDR
// side := GetSide ( tower ) ;
48098: LD_ADDR_VAR 0 16
48102: PUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 255
48112: ST_TO_ADDR
// x := GetX ( tower ) ;
48113: LD_ADDR_VAR 0 10
48117: PUSH
48118: LD_VAR 0 1
48122: PPUSH
48123: CALL_OW 250
48127: ST_TO_ADDR
// y := GetY ( tower ) ;
48128: LD_ADDR_VAR 0 11
48132: PUSH
48133: LD_VAR 0 1
48137: PPUSH
48138: CALL_OW 251
48142: ST_TO_ADDR
// if not x or not y then
48143: LD_VAR 0 10
48147: NOT
48148: PUSH
48149: LD_VAR 0 11
48153: NOT
48154: OR
48155: IFFALSE 48159
// exit ;
48157: GO 49219
// weapon := 0 ;
48159: LD_ADDR_VAR 0 18
48163: PUSH
48164: LD_INT 0
48166: ST_TO_ADDR
// fac_list := [ ] ;
48167: LD_ADDR_VAR 0 17
48171: PUSH
48172: EMPTY
48173: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
48174: LD_ADDR_VAR 0 6
48178: PUSH
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 274
48188: PPUSH
48189: LD_VAR 0 2
48193: PPUSH
48194: CALL 45797 0 2
48198: PPUSH
48199: LD_INT 30
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PPUSH
48209: CALL_OW 72
48213: ST_TO_ADDR
// if not factories then
48214: LD_VAR 0 6
48218: NOT
48219: IFFALSE 48223
// exit ;
48221: GO 49219
// for i in factories do
48223: LD_ADDR_VAR 0 8
48227: PUSH
48228: LD_VAR 0 6
48232: PUSH
48233: FOR_IN
48234: IFFALSE 48259
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48236: LD_ADDR_VAR 0 17
48240: PUSH
48241: LD_VAR 0 17
48245: PUSH
48246: LD_VAR 0 8
48250: PPUSH
48251: CALL_OW 478
48255: UNION
48256: ST_TO_ADDR
48257: GO 48233
48259: POP
48260: POP
// if not fac_list then
48261: LD_VAR 0 17
48265: NOT
48266: IFFALSE 48270
// exit ;
48268: GO 49219
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48270: LD_ADDR_VAR 0 5
48274: PUSH
48275: LD_INT 4
48277: PUSH
48278: LD_INT 5
48280: PUSH
48281: LD_INT 9
48283: PUSH
48284: LD_INT 10
48286: PUSH
48287: LD_INT 6
48289: PUSH
48290: LD_INT 7
48292: PUSH
48293: LD_INT 11
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 27
48307: PUSH
48308: LD_INT 28
48310: PUSH
48311: LD_INT 26
48313: PUSH
48314: LD_INT 30
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 43
48325: PUSH
48326: LD_INT 44
48328: PUSH
48329: LD_INT 46
48331: PUSH
48332: LD_INT 45
48334: PUSH
48335: LD_INT 47
48337: PUSH
48338: LD_INT 49
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: PUSH
48354: LD_VAR 0 12
48358: ARRAY
48359: ST_TO_ADDR
// for i in list do
48360: LD_ADDR_VAR 0 8
48364: PUSH
48365: LD_VAR 0 5
48369: PUSH
48370: FOR_IN
48371: IFFALSE 48404
// if not i in fac_list then
48373: LD_VAR 0 8
48377: PUSH
48378: LD_VAR 0 17
48382: IN
48383: NOT
48384: IFFALSE 48402
// list := list diff i ;
48386: LD_ADDR_VAR 0 5
48390: PUSH
48391: LD_VAR 0 5
48395: PUSH
48396: LD_VAR 0 8
48400: DIFF
48401: ST_TO_ADDR
48402: GO 48370
48404: POP
48405: POP
// if not list then
48406: LD_VAR 0 5
48410: NOT
48411: IFFALSE 48415
// exit ;
48413: GO 49219
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48415: LD_VAR 0 12
48419: PUSH
48420: LD_INT 3
48422: EQUAL
48423: PUSH
48424: LD_INT 49
48426: PUSH
48427: LD_VAR 0 5
48431: IN
48432: AND
48433: PUSH
48434: LD_INT 31
48436: PPUSH
48437: LD_VAR 0 16
48441: PPUSH
48442: CALL_OW 321
48446: PUSH
48447: LD_INT 2
48449: EQUAL
48450: AND
48451: IFFALSE 48511
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48453: LD_INT 22
48455: PUSH
48456: LD_VAR 0 16
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 35
48467: PUSH
48468: LD_INT 49
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 91
48477: PUSH
48478: LD_VAR 0 1
48482: PUSH
48483: LD_INT 10
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: PPUSH
48496: CALL_OW 69
48500: NOT
48501: IFFALSE 48511
// weapon := ru_time_lapser ;
48503: LD_ADDR_VAR 0 18
48507: PUSH
48508: LD_INT 49
48510: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48511: LD_VAR 0 12
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: IN
48526: PUSH
48527: LD_INT 11
48529: PUSH
48530: LD_VAR 0 5
48534: IN
48535: PUSH
48536: LD_INT 30
48538: PUSH
48539: LD_VAR 0 5
48543: IN
48544: OR
48545: AND
48546: PUSH
48547: LD_INT 6
48549: PPUSH
48550: LD_VAR 0 16
48554: PPUSH
48555: CALL_OW 321
48559: PUSH
48560: LD_INT 2
48562: EQUAL
48563: AND
48564: IFFALSE 48729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48566: LD_INT 22
48568: PUSH
48569: LD_VAR 0 16
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 35
48583: PUSH
48584: LD_INT 11
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 35
48593: PUSH
48594: LD_INT 30
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 91
48608: PUSH
48609: LD_VAR 0 1
48613: PUSH
48614: LD_INT 18
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: PPUSH
48627: CALL_OW 69
48631: NOT
48632: PUSH
48633: LD_INT 22
48635: PUSH
48636: LD_VAR 0 16
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 30
48650: PUSH
48651: LD_INT 32
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 30
48660: PUSH
48661: LD_INT 33
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 91
48675: PUSH
48676: LD_VAR 0 1
48680: PUSH
48681: LD_INT 12
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: PPUSH
48697: CALL_OW 69
48701: PUSH
48702: LD_INT 2
48704: GREATER
48705: AND
48706: IFFALSE 48729
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48708: LD_ADDR_VAR 0 18
48712: PUSH
48713: LD_INT 11
48715: PUSH
48716: LD_INT 30
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_VAR 0 12
48727: ARRAY
48728: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48729: LD_VAR 0 18
48733: NOT
48734: PUSH
48735: LD_INT 40
48737: PPUSH
48738: LD_VAR 0 16
48742: PPUSH
48743: CALL_OW 321
48747: PUSH
48748: LD_INT 2
48750: EQUAL
48751: AND
48752: PUSH
48753: LD_INT 7
48755: PUSH
48756: LD_VAR 0 5
48760: IN
48761: PUSH
48762: LD_INT 28
48764: PUSH
48765: LD_VAR 0 5
48769: IN
48770: OR
48771: PUSH
48772: LD_INT 45
48774: PUSH
48775: LD_VAR 0 5
48779: IN
48780: OR
48781: AND
48782: IFFALSE 49036
// begin hex := GetHexInfo ( x , y ) ;
48784: LD_ADDR_VAR 0 4
48788: PUSH
48789: LD_VAR 0 10
48793: PPUSH
48794: LD_VAR 0 11
48798: PPUSH
48799: CALL_OW 546
48803: ST_TO_ADDR
// if hex [ 1 ] then
48804: LD_VAR 0 4
48808: PUSH
48809: LD_INT 1
48811: ARRAY
48812: IFFALSE 48816
// exit ;
48814: GO 49219
// height := hex [ 2 ] ;
48816: LD_ADDR_VAR 0 15
48820: PUSH
48821: LD_VAR 0 4
48825: PUSH
48826: LD_INT 2
48828: ARRAY
48829: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48830: LD_ADDR_VAR 0 14
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 3
48843: PUSH
48844: LD_INT 5
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: ST_TO_ADDR
// for i in tmp do
48853: LD_ADDR_VAR 0 8
48857: PUSH
48858: LD_VAR 0 14
48862: PUSH
48863: FOR_IN
48864: IFFALSE 49034
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_VAR 0 10
48875: PPUSH
48876: LD_VAR 0 8
48880: PPUSH
48881: LD_INT 5
48883: PPUSH
48884: CALL_OW 272
48888: PUSH
48889: LD_VAR 0 11
48893: PPUSH
48894: LD_VAR 0 8
48898: PPUSH
48899: LD_INT 5
48901: PPUSH
48902: CALL_OW 273
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48911: LD_VAR 0 9
48915: PUSH
48916: LD_INT 1
48918: ARRAY
48919: PPUSH
48920: LD_VAR 0 9
48924: PUSH
48925: LD_INT 2
48927: ARRAY
48928: PPUSH
48929: CALL_OW 488
48933: IFFALSE 49032
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48935: LD_ADDR_VAR 0 4
48939: PUSH
48940: LD_VAR 0 9
48944: PUSH
48945: LD_INT 1
48947: ARRAY
48948: PPUSH
48949: LD_VAR 0 9
48953: PUSH
48954: LD_INT 2
48956: ARRAY
48957: PPUSH
48958: CALL_OW 546
48962: ST_TO_ADDR
// if hex [ 1 ] then
48963: LD_VAR 0 4
48967: PUSH
48968: LD_INT 1
48970: ARRAY
48971: IFFALSE 48975
// continue ;
48973: GO 48863
// h := hex [ 2 ] ;
48975: LD_ADDR_VAR 0 13
48979: PUSH
48980: LD_VAR 0 4
48984: PUSH
48985: LD_INT 2
48987: ARRAY
48988: ST_TO_ADDR
// if h + 7 < height then
48989: LD_VAR 0 13
48993: PUSH
48994: LD_INT 7
48996: PLUS
48997: PUSH
48998: LD_VAR 0 15
49002: LESS
49003: IFFALSE 49032
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49005: LD_ADDR_VAR 0 18
49009: PUSH
49010: LD_INT 7
49012: PUSH
49013: LD_INT 28
49015: PUSH
49016: LD_INT 45
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: PUSH
49024: LD_VAR 0 12
49028: ARRAY
49029: ST_TO_ADDR
// break ;
49030: GO 49034
// end ; end ; end ;
49032: GO 48863
49034: POP
49035: POP
// end ; if not weapon then
49036: LD_VAR 0 18
49040: NOT
49041: IFFALSE 49101
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_VAR 0 5
49052: PUSH
49053: LD_INT 11
49055: PUSH
49056: LD_INT 30
49058: PUSH
49059: LD_INT 49
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: DIFF
49067: ST_TO_ADDR
// if not list then
49068: LD_VAR 0 5
49072: NOT
49073: IFFALSE 49077
// exit ;
49075: GO 49219
// weapon := list [ rand ( 1 , list ) ] ;
49077: LD_ADDR_VAR 0 18
49081: PUSH
49082: LD_VAR 0 5
49086: PUSH
49087: LD_INT 1
49089: PPUSH
49090: LD_VAR 0 5
49094: PPUSH
49095: CALL_OW 12
49099: ARRAY
49100: ST_TO_ADDR
// end ; if weapon then
49101: LD_VAR 0 18
49105: IFFALSE 49219
// begin tmp := CostOfWeapon ( weapon ) ;
49107: LD_ADDR_VAR 0 14
49111: PUSH
49112: LD_VAR 0 18
49116: PPUSH
49117: CALL_OW 451
49121: ST_TO_ADDR
// j := GetBase ( tower ) ;
49122: LD_ADDR_VAR 0 9
49126: PUSH
49127: LD_VAR 0 1
49131: PPUSH
49132: CALL_OW 274
49136: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49137: LD_VAR 0 9
49141: PPUSH
49142: LD_INT 1
49144: PPUSH
49145: CALL_OW 275
49149: PUSH
49150: LD_VAR 0 14
49154: PUSH
49155: LD_INT 1
49157: ARRAY
49158: GREATEREQUAL
49159: PUSH
49160: LD_VAR 0 9
49164: PPUSH
49165: LD_INT 2
49167: PPUSH
49168: CALL_OW 275
49172: PUSH
49173: LD_VAR 0 14
49177: PUSH
49178: LD_INT 2
49180: ARRAY
49181: GREATEREQUAL
49182: AND
49183: PUSH
49184: LD_VAR 0 9
49188: PPUSH
49189: LD_INT 3
49191: PPUSH
49192: CALL_OW 275
49196: PUSH
49197: LD_VAR 0 14
49201: PUSH
49202: LD_INT 3
49204: ARRAY
49205: GREATEREQUAL
49206: AND
49207: IFFALSE 49219
// result := weapon ;
49209: LD_ADDR_VAR 0 3
49213: PUSH
49214: LD_VAR 0 18
49218: ST_TO_ADDR
// end ; end ;
49219: LD_VAR 0 3
49223: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49224: LD_INT 0
49226: PPUSH
49227: PPUSH
// result := true ;
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_INT 1
49235: ST_TO_ADDR
// if array1 = array2 then
49236: LD_VAR 0 1
49240: PUSH
49241: LD_VAR 0 2
49245: EQUAL
49246: IFFALSE 49306
// begin for i = 1 to array1 do
49248: LD_ADDR_VAR 0 4
49252: PUSH
49253: DOUBLE
49254: LD_INT 1
49256: DEC
49257: ST_TO_ADDR
49258: LD_VAR 0 1
49262: PUSH
49263: FOR_TO
49264: IFFALSE 49302
// if array1 [ i ] <> array2 [ i ] then
49266: LD_VAR 0 1
49270: PUSH
49271: LD_VAR 0 4
49275: ARRAY
49276: PUSH
49277: LD_VAR 0 2
49281: PUSH
49282: LD_VAR 0 4
49286: ARRAY
49287: NONEQUAL
49288: IFFALSE 49300
// begin result := false ;
49290: LD_ADDR_VAR 0 3
49294: PUSH
49295: LD_INT 0
49297: ST_TO_ADDR
// break ;
49298: GO 49302
// end ;
49300: GO 49263
49302: POP
49303: POP
// end else
49304: GO 49314
// result := false ;
49306: LD_ADDR_VAR 0 3
49310: PUSH
49311: LD_INT 0
49313: ST_TO_ADDR
// end ;
49314: LD_VAR 0 3
49318: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49319: LD_INT 0
49321: PPUSH
49322: PPUSH
49323: PPUSH
// pom := GetBase ( fac ) ;
49324: LD_ADDR_VAR 0 5
49328: PUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 274
49338: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49339: LD_ADDR_VAR 0 4
49343: PUSH
49344: LD_VAR 0 2
49348: PUSH
49349: LD_INT 1
49351: ARRAY
49352: PPUSH
49353: LD_VAR 0 2
49357: PUSH
49358: LD_INT 2
49360: ARRAY
49361: PPUSH
49362: LD_VAR 0 2
49366: PUSH
49367: LD_INT 3
49369: ARRAY
49370: PPUSH
49371: LD_VAR 0 2
49375: PUSH
49376: LD_INT 4
49378: ARRAY
49379: PPUSH
49380: CALL_OW 449
49384: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49385: LD_ADDR_VAR 0 3
49389: PUSH
49390: LD_VAR 0 5
49394: PPUSH
49395: LD_INT 1
49397: PPUSH
49398: CALL_OW 275
49402: PUSH
49403: LD_VAR 0 4
49407: PUSH
49408: LD_INT 1
49410: ARRAY
49411: GREATEREQUAL
49412: PUSH
49413: LD_VAR 0 5
49417: PPUSH
49418: LD_INT 2
49420: PPUSH
49421: CALL_OW 275
49425: PUSH
49426: LD_VAR 0 4
49430: PUSH
49431: LD_INT 2
49433: ARRAY
49434: GREATEREQUAL
49435: AND
49436: PUSH
49437: LD_VAR 0 5
49441: PPUSH
49442: LD_INT 3
49444: PPUSH
49445: CALL_OW 275
49449: PUSH
49450: LD_VAR 0 4
49454: PUSH
49455: LD_INT 3
49457: ARRAY
49458: GREATEREQUAL
49459: AND
49460: ST_TO_ADDR
// end ;
49461: LD_VAR 0 3
49465: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49466: LD_INT 0
49468: PPUSH
49469: PPUSH
49470: PPUSH
49471: PPUSH
// pom := GetBase ( building ) ;
49472: LD_ADDR_VAR 0 3
49476: PUSH
49477: LD_VAR 0 1
49481: PPUSH
49482: CALL_OW 274
49486: ST_TO_ADDR
// if not pom then
49487: LD_VAR 0 3
49491: NOT
49492: IFFALSE 49496
// exit ;
49494: GO 49666
// btype := GetBType ( building ) ;
49496: LD_ADDR_VAR 0 5
49500: PUSH
49501: LD_VAR 0 1
49505: PPUSH
49506: CALL_OW 266
49510: ST_TO_ADDR
// if btype = b_armoury then
49511: LD_VAR 0 5
49515: PUSH
49516: LD_INT 4
49518: EQUAL
49519: IFFALSE 49529
// btype := b_barracks ;
49521: LD_ADDR_VAR 0 5
49525: PUSH
49526: LD_INT 5
49528: ST_TO_ADDR
// if btype = b_depot then
49529: LD_VAR 0 5
49533: PUSH
49534: LD_INT 0
49536: EQUAL
49537: IFFALSE 49547
// btype := b_warehouse ;
49539: LD_ADDR_VAR 0 5
49543: PUSH
49544: LD_INT 1
49546: ST_TO_ADDR
// if btype = b_workshop then
49547: LD_VAR 0 5
49551: PUSH
49552: LD_INT 2
49554: EQUAL
49555: IFFALSE 49565
// btype := b_factory ;
49557: LD_ADDR_VAR 0 5
49561: PUSH
49562: LD_INT 3
49564: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49565: LD_ADDR_VAR 0 4
49569: PUSH
49570: LD_VAR 0 5
49574: PPUSH
49575: LD_VAR 0 1
49579: PPUSH
49580: CALL_OW 248
49584: PPUSH
49585: CALL_OW 450
49589: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49590: LD_ADDR_VAR 0 2
49594: PUSH
49595: LD_VAR 0 3
49599: PPUSH
49600: LD_INT 1
49602: PPUSH
49603: CALL_OW 275
49607: PUSH
49608: LD_VAR 0 4
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: GREATEREQUAL
49617: PUSH
49618: LD_VAR 0 3
49622: PPUSH
49623: LD_INT 2
49625: PPUSH
49626: CALL_OW 275
49630: PUSH
49631: LD_VAR 0 4
49635: PUSH
49636: LD_INT 2
49638: ARRAY
49639: GREATEREQUAL
49640: AND
49641: PUSH
49642: LD_VAR 0 3
49646: PPUSH
49647: LD_INT 3
49649: PPUSH
49650: CALL_OW 275
49654: PUSH
49655: LD_VAR 0 4
49659: PUSH
49660: LD_INT 3
49662: ARRAY
49663: GREATEREQUAL
49664: AND
49665: ST_TO_ADDR
// end ;
49666: LD_VAR 0 2
49670: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49671: LD_INT 0
49673: PPUSH
49674: PPUSH
49675: PPUSH
// pom := GetBase ( building ) ;
49676: LD_ADDR_VAR 0 4
49680: PUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 274
49690: ST_TO_ADDR
// if not pom then
49691: LD_VAR 0 4
49695: NOT
49696: IFFALSE 49700
// exit ;
49698: GO 49801
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49700: LD_ADDR_VAR 0 5
49704: PUSH
49705: LD_VAR 0 2
49709: PPUSH
49710: LD_VAR 0 1
49714: PPUSH
49715: CALL_OW 248
49719: PPUSH
49720: CALL_OW 450
49724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49725: LD_ADDR_VAR 0 3
49729: PUSH
49730: LD_VAR 0 4
49734: PPUSH
49735: LD_INT 1
49737: PPUSH
49738: CALL_OW 275
49742: PUSH
49743: LD_VAR 0 5
49747: PUSH
49748: LD_INT 1
49750: ARRAY
49751: GREATEREQUAL
49752: PUSH
49753: LD_VAR 0 4
49757: PPUSH
49758: LD_INT 2
49760: PPUSH
49761: CALL_OW 275
49765: PUSH
49766: LD_VAR 0 5
49770: PUSH
49771: LD_INT 2
49773: ARRAY
49774: GREATEREQUAL
49775: AND
49776: PUSH
49777: LD_VAR 0 4
49781: PPUSH
49782: LD_INT 3
49784: PPUSH
49785: CALL_OW 275
49789: PUSH
49790: LD_VAR 0 5
49794: PUSH
49795: LD_INT 3
49797: ARRAY
49798: GREATEREQUAL
49799: AND
49800: ST_TO_ADDR
// end ;
49801: LD_VAR 0 3
49805: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
49806: LD_INT 0
49808: PPUSH
49809: PPUSH
49810: PPUSH
49811: PPUSH
49812: PPUSH
49813: PPUSH
49814: PPUSH
49815: PPUSH
49816: PPUSH
49817: PPUSH
// result := false ;
49818: LD_ADDR_VAR 0 6
49822: PUSH
49823: LD_INT 0
49825: ST_TO_ADDR
// if not base or not btype or not x or not y then
49826: LD_VAR 0 1
49830: NOT
49831: PUSH
49832: LD_VAR 0 2
49836: NOT
49837: OR
49838: PUSH
49839: LD_VAR 0 3
49843: NOT
49844: OR
49845: PUSH
49846: LD_VAR 0 4
49850: NOT
49851: OR
49852: IFFALSE 49856
// exit ;
49854: GO 50465
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
49856: LD_ADDR_VAR 0 12
49860: PUSH
49861: LD_VAR 0 2
49865: PPUSH
49866: LD_VAR 0 3
49870: PPUSH
49871: LD_VAR 0 4
49875: PPUSH
49876: LD_VAR 0 5
49880: PPUSH
49881: LD_VAR 0 1
49885: PUSH
49886: LD_INT 1
49888: ARRAY
49889: PPUSH
49890: CALL_OW 248
49894: PPUSH
49895: LD_INT 0
49897: PPUSH
49898: CALL 51302 0 6
49902: ST_TO_ADDR
// if not hexes then
49903: LD_VAR 0 12
49907: NOT
49908: IFFALSE 49912
// exit ;
49910: GO 50465
// for i = 1 to hexes do
49912: LD_ADDR_VAR 0 7
49916: PUSH
49917: DOUBLE
49918: LD_INT 1
49920: DEC
49921: ST_TO_ADDR
49922: LD_VAR 0 12
49926: PUSH
49927: FOR_TO
49928: IFFALSE 50463
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49930: LD_ADDR_VAR 0 11
49934: PUSH
49935: LD_VAR 0 12
49939: PUSH
49940: LD_VAR 0 7
49944: ARRAY
49945: PUSH
49946: LD_INT 1
49948: ARRAY
49949: PPUSH
49950: LD_VAR 0 12
49954: PUSH
49955: LD_VAR 0 7
49959: ARRAY
49960: PUSH
49961: LD_INT 2
49963: ARRAY
49964: PPUSH
49965: CALL_OW 428
49969: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49970: LD_VAR 0 12
49974: PUSH
49975: LD_VAR 0 7
49979: ARRAY
49980: PUSH
49981: LD_INT 1
49983: ARRAY
49984: PPUSH
49985: LD_VAR 0 12
49989: PUSH
49990: LD_VAR 0 7
49994: ARRAY
49995: PUSH
49996: LD_INT 2
49998: ARRAY
49999: PPUSH
50000: CALL_OW 351
50004: PUSH
50005: LD_VAR 0 12
50009: PUSH
50010: LD_VAR 0 7
50014: ARRAY
50015: PUSH
50016: LD_INT 1
50018: ARRAY
50019: PPUSH
50020: LD_VAR 0 12
50024: PUSH
50025: LD_VAR 0 7
50029: ARRAY
50030: PUSH
50031: LD_INT 2
50033: ARRAY
50034: PPUSH
50035: CALL_OW 488
50039: NOT
50040: OR
50041: PUSH
50042: LD_VAR 0 11
50046: PPUSH
50047: CALL_OW 247
50051: PUSH
50052: LD_INT 3
50054: EQUAL
50055: OR
50056: IFFALSE 50062
// exit ;
50058: POP
50059: POP
50060: GO 50465
// if not tmp or not tmp in base then
50062: LD_VAR 0 11
50066: NOT
50067: PUSH
50068: LD_VAR 0 11
50072: PUSH
50073: LD_VAR 0 1
50077: IN
50078: NOT
50079: OR
50080: IFFALSE 50084
// continue ;
50082: GO 49927
// result := true ;
50084: LD_ADDR_VAR 0 6
50088: PUSH
50089: LD_INT 1
50091: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50092: LD_ADDR_VAR 0 15
50096: PUSH
50097: LD_VAR 0 1
50101: PPUSH
50102: LD_INT 22
50104: PUSH
50105: LD_VAR 0 11
50109: PPUSH
50110: CALL_OW 255
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 30
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 30
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PPUSH
50151: CALL_OW 72
50155: ST_TO_ADDR
// if dep then
50156: LD_VAR 0 15
50160: IFFALSE 50296
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50162: LD_ADDR_VAR 0 14
50166: PUSH
50167: LD_VAR 0 15
50171: PUSH
50172: LD_INT 1
50174: ARRAY
50175: PPUSH
50176: CALL_OW 250
50180: PPUSH
50181: LD_VAR 0 15
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: PPUSH
50190: CALL_OW 254
50194: PPUSH
50195: LD_INT 5
50197: PPUSH
50198: CALL_OW 272
50202: PUSH
50203: LD_VAR 0 15
50207: PUSH
50208: LD_INT 1
50210: ARRAY
50211: PPUSH
50212: CALL_OW 251
50216: PPUSH
50217: LD_VAR 0 15
50221: PUSH
50222: LD_INT 1
50224: ARRAY
50225: PPUSH
50226: CALL_OW 254
50230: PPUSH
50231: LD_INT 5
50233: PPUSH
50234: CALL_OW 273
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50243: LD_VAR 0 14
50247: PUSH
50248: LD_INT 1
50250: ARRAY
50251: PPUSH
50252: LD_VAR 0 14
50256: PUSH
50257: LD_INT 2
50259: ARRAY
50260: PPUSH
50261: CALL_OW 488
50265: IFFALSE 50296
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50267: LD_VAR 0 11
50271: PPUSH
50272: LD_VAR 0 14
50276: PUSH
50277: LD_INT 1
50279: ARRAY
50280: PPUSH
50281: LD_VAR 0 14
50285: PUSH
50286: LD_INT 2
50288: ARRAY
50289: PPUSH
50290: CALL_OW 111
// continue ;
50294: GO 49927
// end ; end ; r := GetDir ( tmp ) ;
50296: LD_ADDR_VAR 0 13
50300: PUSH
50301: LD_VAR 0 11
50305: PPUSH
50306: CALL_OW 254
50310: ST_TO_ADDR
// if r = 5 then
50311: LD_VAR 0 13
50315: PUSH
50316: LD_INT 5
50318: EQUAL
50319: IFFALSE 50329
// r := 0 ;
50321: LD_ADDR_VAR 0 13
50325: PUSH
50326: LD_INT 0
50328: ST_TO_ADDR
// for j = r to 5 do
50329: LD_ADDR_VAR 0 8
50333: PUSH
50334: DOUBLE
50335: LD_VAR 0 13
50339: DEC
50340: ST_TO_ADDR
50341: LD_INT 5
50343: PUSH
50344: FOR_TO
50345: IFFALSE 50459
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50347: LD_ADDR_VAR 0 9
50351: PUSH
50352: LD_VAR 0 11
50356: PPUSH
50357: CALL_OW 250
50361: PPUSH
50362: LD_VAR 0 8
50366: PPUSH
50367: LD_INT 2
50369: PPUSH
50370: CALL_OW 272
50374: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50375: LD_ADDR_VAR 0 10
50379: PUSH
50380: LD_VAR 0 11
50384: PPUSH
50385: CALL_OW 251
50389: PPUSH
50390: LD_VAR 0 8
50394: PPUSH
50395: LD_INT 2
50397: PPUSH
50398: CALL_OW 273
50402: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50403: LD_VAR 0 9
50407: PPUSH
50408: LD_VAR 0 10
50412: PPUSH
50413: CALL_OW 488
50417: PUSH
50418: LD_VAR 0 9
50422: PPUSH
50423: LD_VAR 0 10
50427: PPUSH
50428: CALL_OW 428
50432: NOT
50433: AND
50434: IFFALSE 50457
// begin ComMoveXY ( tmp , _x , _y ) ;
50436: LD_VAR 0 11
50440: PPUSH
50441: LD_VAR 0 9
50445: PPUSH
50446: LD_VAR 0 10
50450: PPUSH
50451: CALL_OW 111
// break ;
50455: GO 50459
// end ; end ;
50457: GO 50344
50459: POP
50460: POP
// end ;
50461: GO 49927
50463: POP
50464: POP
// end ;
50465: LD_VAR 0 6
50469: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
50470: LD_INT 0
50472: PPUSH
50473: PPUSH
50474: PPUSH
50475: PPUSH
50476: PPUSH
50477: PPUSH
50478: PPUSH
50479: PPUSH
50480: PPUSH
50481: PPUSH
// result := false ;
50482: LD_ADDR_VAR 0 6
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50490: LD_VAR 0 1
50494: NOT
50495: PUSH
50496: LD_VAR 0 1
50500: PPUSH
50501: CALL_OW 266
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: IN
50516: NOT
50517: OR
50518: PUSH
50519: LD_VAR 0 2
50523: NOT
50524: OR
50525: PUSH
50526: LD_VAR 0 5
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: LD_INT 4
50545: PUSH
50546: LD_INT 5
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: IN
50557: NOT
50558: OR
50559: PUSH
50560: LD_VAR 0 3
50564: PPUSH
50565: LD_VAR 0 4
50569: PPUSH
50570: CALL_OW 488
50574: NOT
50575: OR
50576: IFFALSE 50580
// exit ;
50578: GO 51297
// pom := GetBase ( depot ) ;
50580: LD_ADDR_VAR 0 10
50584: PUSH
50585: LD_VAR 0 1
50589: PPUSH
50590: CALL_OW 274
50594: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50595: LD_ADDR_VAR 0 11
50599: PUSH
50600: LD_VAR 0 2
50604: PPUSH
50605: LD_VAR 0 1
50609: PPUSH
50610: CALL_OW 248
50614: PPUSH
50615: CALL_OW 450
50619: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50620: LD_VAR 0 10
50624: PPUSH
50625: LD_INT 1
50627: PPUSH
50628: CALL_OW 275
50632: PUSH
50633: LD_VAR 0 11
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: GREATEREQUAL
50642: PUSH
50643: LD_VAR 0 10
50647: PPUSH
50648: LD_INT 2
50650: PPUSH
50651: CALL_OW 275
50655: PUSH
50656: LD_VAR 0 11
50660: PUSH
50661: LD_INT 2
50663: ARRAY
50664: GREATEREQUAL
50665: AND
50666: PUSH
50667: LD_VAR 0 10
50671: PPUSH
50672: LD_INT 3
50674: PPUSH
50675: CALL_OW 275
50679: PUSH
50680: LD_VAR 0 11
50684: PUSH
50685: LD_INT 3
50687: ARRAY
50688: GREATEREQUAL
50689: AND
50690: NOT
50691: IFFALSE 50695
// exit ;
50693: GO 51297
// if GetBType ( depot ) = b_depot then
50695: LD_VAR 0 1
50699: PPUSH
50700: CALL_OW 266
50704: PUSH
50705: LD_INT 0
50707: EQUAL
50708: IFFALSE 50720
// dist := 28 else
50710: LD_ADDR_VAR 0 14
50714: PUSH
50715: LD_INT 28
50717: ST_TO_ADDR
50718: GO 50728
// dist := 36 ;
50720: LD_ADDR_VAR 0 14
50724: PUSH
50725: LD_INT 36
50727: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50728: LD_VAR 0 1
50732: PPUSH
50733: LD_VAR 0 3
50737: PPUSH
50738: LD_VAR 0 4
50742: PPUSH
50743: CALL_OW 297
50747: PUSH
50748: LD_VAR 0 14
50752: GREATER
50753: IFFALSE 50757
// exit ;
50755: GO 51297
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50757: LD_ADDR_VAR 0 12
50761: PUSH
50762: LD_VAR 0 2
50766: PPUSH
50767: LD_VAR 0 3
50771: PPUSH
50772: LD_VAR 0 4
50776: PPUSH
50777: LD_VAR 0 5
50781: PPUSH
50782: LD_VAR 0 1
50786: PPUSH
50787: CALL_OW 248
50791: PPUSH
50792: LD_INT 0
50794: PPUSH
50795: CALL 51302 0 6
50799: ST_TO_ADDR
// if not hexes then
50800: LD_VAR 0 12
50804: NOT
50805: IFFALSE 50809
// exit ;
50807: GO 51297
// hex := GetHexInfo ( x , y ) ;
50809: LD_ADDR_VAR 0 15
50813: PUSH
50814: LD_VAR 0 3
50818: PPUSH
50819: LD_VAR 0 4
50823: PPUSH
50824: CALL_OW 546
50828: ST_TO_ADDR
// if hex [ 1 ] then
50829: LD_VAR 0 15
50833: PUSH
50834: LD_INT 1
50836: ARRAY
50837: IFFALSE 50841
// exit ;
50839: GO 51297
// height := hex [ 2 ] ;
50841: LD_ADDR_VAR 0 13
50845: PUSH
50846: LD_VAR 0 15
50850: PUSH
50851: LD_INT 2
50853: ARRAY
50854: ST_TO_ADDR
// for i = 1 to hexes do
50855: LD_ADDR_VAR 0 7
50859: PUSH
50860: DOUBLE
50861: LD_INT 1
50863: DEC
50864: ST_TO_ADDR
50865: LD_VAR 0 12
50869: PUSH
50870: FOR_TO
50871: IFFALSE 51201
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50873: LD_VAR 0 12
50877: PUSH
50878: LD_VAR 0 7
50882: ARRAY
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: PPUSH
50888: LD_VAR 0 12
50892: PUSH
50893: LD_VAR 0 7
50897: ARRAY
50898: PUSH
50899: LD_INT 2
50901: ARRAY
50902: PPUSH
50903: CALL_OW 488
50907: NOT
50908: PUSH
50909: LD_VAR 0 12
50913: PUSH
50914: LD_VAR 0 7
50918: ARRAY
50919: PUSH
50920: LD_INT 1
50922: ARRAY
50923: PPUSH
50924: LD_VAR 0 12
50928: PUSH
50929: LD_VAR 0 7
50933: ARRAY
50934: PUSH
50935: LD_INT 2
50937: ARRAY
50938: PPUSH
50939: CALL_OW 428
50943: PUSH
50944: LD_INT 0
50946: GREATER
50947: OR
50948: PUSH
50949: LD_VAR 0 12
50953: PUSH
50954: LD_VAR 0 7
50958: ARRAY
50959: PUSH
50960: LD_INT 1
50962: ARRAY
50963: PPUSH
50964: LD_VAR 0 12
50968: PUSH
50969: LD_VAR 0 7
50973: ARRAY
50974: PUSH
50975: LD_INT 2
50977: ARRAY
50978: PPUSH
50979: CALL_OW 351
50983: OR
50984: IFFALSE 50990
// exit ;
50986: POP
50987: POP
50988: GO 51297
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50990: LD_ADDR_VAR 0 8
50994: PUSH
50995: LD_VAR 0 12
50999: PUSH
51000: LD_VAR 0 7
51004: ARRAY
51005: PUSH
51006: LD_INT 1
51008: ARRAY
51009: PPUSH
51010: LD_VAR 0 12
51014: PUSH
51015: LD_VAR 0 7
51019: ARRAY
51020: PUSH
51021: LD_INT 2
51023: ARRAY
51024: PPUSH
51025: CALL_OW 546
51029: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51030: LD_VAR 0 8
51034: PUSH
51035: LD_INT 1
51037: ARRAY
51038: PUSH
51039: LD_VAR 0 8
51043: PUSH
51044: LD_INT 2
51046: ARRAY
51047: PUSH
51048: LD_VAR 0 13
51052: PUSH
51053: LD_INT 2
51055: PLUS
51056: GREATER
51057: OR
51058: PUSH
51059: LD_VAR 0 8
51063: PUSH
51064: LD_INT 2
51066: ARRAY
51067: PUSH
51068: LD_VAR 0 13
51072: PUSH
51073: LD_INT 2
51075: MINUS
51076: LESS
51077: OR
51078: PUSH
51079: LD_VAR 0 8
51083: PUSH
51084: LD_INT 3
51086: ARRAY
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 8
51093: PUSH
51094: LD_INT 9
51096: PUSH
51097: LD_INT 10
51099: PUSH
51100: LD_INT 11
51102: PUSH
51103: LD_INT 12
51105: PUSH
51106: LD_INT 13
51108: PUSH
51109: LD_INT 16
51111: PUSH
51112: LD_INT 17
51114: PUSH
51115: LD_INT 18
51117: PUSH
51118: LD_INT 19
51120: PUSH
51121: LD_INT 20
51123: PUSH
51124: LD_INT 21
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: IN
51142: NOT
51143: OR
51144: PUSH
51145: LD_VAR 0 8
51149: PUSH
51150: LD_INT 5
51152: ARRAY
51153: NOT
51154: OR
51155: PUSH
51156: LD_VAR 0 8
51160: PUSH
51161: LD_INT 6
51163: ARRAY
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 7
51173: PUSH
51174: LD_INT 9
51176: PUSH
51177: LD_INT 10
51179: PUSH
51180: LD_INT 11
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: IN
51191: NOT
51192: OR
51193: IFFALSE 51199
// exit ;
51195: POP
51196: POP
51197: GO 51297
// end ;
51199: GO 50870
51201: POP
51202: POP
// side := GetSide ( depot ) ;
51203: LD_ADDR_VAR 0 9
51207: PUSH
51208: LD_VAR 0 1
51212: PPUSH
51213: CALL_OW 255
51217: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51218: LD_VAR 0 9
51222: PPUSH
51223: LD_VAR 0 3
51227: PPUSH
51228: LD_VAR 0 4
51232: PPUSH
51233: LD_INT 20
51235: PPUSH
51236: CALL 43951 0 4
51240: PUSH
51241: LD_INT 4
51243: ARRAY
51244: IFFALSE 51248
// exit ;
51246: GO 51297
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51248: LD_VAR 0 2
51252: PUSH
51253: LD_INT 29
51255: PUSH
51256: LD_INT 30
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: IN
51263: PUSH
51264: LD_VAR 0 3
51268: PPUSH
51269: LD_VAR 0 4
51273: PPUSH
51274: LD_VAR 0 9
51278: PPUSH
51279: CALL_OW 440
51283: NOT
51284: AND
51285: IFFALSE 51289
// exit ;
51287: GO 51297
// result := true ;
51289: LD_ADDR_VAR 0 6
51293: PUSH
51294: LD_INT 1
51296: ST_TO_ADDR
// end ;
51297: LD_VAR 0 6
51301: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51302: LD_INT 0
51304: PPUSH
51305: PPUSH
51306: PPUSH
51307: PPUSH
51308: PPUSH
51309: PPUSH
51310: PPUSH
51311: PPUSH
51312: PPUSH
51313: PPUSH
51314: PPUSH
51315: PPUSH
51316: PPUSH
51317: PPUSH
51318: PPUSH
51319: PPUSH
51320: PPUSH
51321: PPUSH
51322: PPUSH
51323: PPUSH
51324: PPUSH
51325: PPUSH
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
51346: PPUSH
51347: PPUSH
51348: PPUSH
51349: PPUSH
51350: PPUSH
51351: PPUSH
51352: PPUSH
51353: PPUSH
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
// result = [ ] ;
51362: LD_ADDR_VAR 0 7
51366: PUSH
51367: EMPTY
51368: ST_TO_ADDR
// temp_list = [ ] ;
51369: LD_ADDR_VAR 0 9
51373: PUSH
51374: EMPTY
51375: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51376: LD_VAR 0 4
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: LD_INT 4
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: IN
51407: NOT
51408: PUSH
51409: LD_VAR 0 1
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: IN
51424: PUSH
51425: LD_VAR 0 5
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: IN
51444: NOT
51445: AND
51446: OR
51447: IFFALSE 51451
// exit ;
51449: GO 69842
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51451: LD_VAR 0 1
51455: PUSH
51456: LD_INT 6
51458: PUSH
51459: LD_INT 7
51461: PUSH
51462: LD_INT 8
51464: PUSH
51465: LD_INT 13
51467: PUSH
51468: LD_INT 12
51470: PUSH
51471: LD_INT 15
51473: PUSH
51474: LD_INT 11
51476: PUSH
51477: LD_INT 14
51479: PUSH
51480: LD_INT 10
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: IN
51494: IFFALSE 51504
// btype = b_lab ;
51496: LD_ADDR_VAR 0 1
51500: PUSH
51501: LD_INT 6
51503: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51504: LD_VAR 0 6
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: IN
51523: NOT
51524: PUSH
51525: LD_VAR 0 1
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: LD_INT 6
51544: PUSH
51545: LD_INT 36
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: LD_INT 5
51553: PUSH
51554: LD_INT 31
51556: PUSH
51557: LD_INT 32
51559: PUSH
51560: LD_INT 33
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: IN
51576: NOT
51577: PUSH
51578: LD_VAR 0 6
51582: PUSH
51583: LD_INT 1
51585: EQUAL
51586: AND
51587: OR
51588: PUSH
51589: LD_VAR 0 1
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: IN
51604: NOT
51605: PUSH
51606: LD_VAR 0 6
51610: PUSH
51611: LD_INT 2
51613: EQUAL
51614: AND
51615: OR
51616: IFFALSE 51626
// mode = 0 ;
51618: LD_ADDR_VAR 0 6
51622: PUSH
51623: LD_INT 0
51625: ST_TO_ADDR
// case mode of 0 :
51626: LD_VAR 0 6
51630: PUSH
51631: LD_INT 0
51633: DOUBLE
51634: EQUAL
51635: IFTRUE 51639
51637: GO 63092
51639: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51640: LD_ADDR_VAR 0 11
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51833: LD_ADDR_VAR 0 12
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52029: LD_ADDR_VAR 0 13
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52228: LD_ADDR_VAR 0 14
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52424: LD_ADDR_VAR 0 15
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52617: LD_ADDR_VAR 0 16
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52810: LD_ADDR_VAR 0 17
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53040: LD_ADDR_VAR 0 18
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53270: LD_ADDR_VAR 0 19
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53500: LD_ADDR_VAR 0 20
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53730: LD_ADDR_VAR 0 21
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53960: LD_ADDR_VAR 0 22
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 2
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54190: LD_ADDR_VAR 0 23
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54470: LD_ADDR_VAR 0 24
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54746: LD_ADDR_VAR 0 25
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55020: LD_ADDR_VAR 0 26
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55296: LD_ADDR_VAR 0 27
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55576: LD_ADDR_VAR 0 28
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55858: LD_ADDR_VAR 0 29
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56137: LD_ADDR_VAR 0 30
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56415: LD_ADDR_VAR 0 31
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56693: LD_ADDR_VAR 0 32
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56971: LD_ADDR_VAR 0 33
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57250: LD_ADDR_VAR 0 34
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57530: LD_ADDR_VAR 0 35
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57642: LD_ADDR_VAR 0 36
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57754: LD_ADDR_VAR 0 37
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57866: LD_ADDR_VAR 0 38
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57978: LD_ADDR_VAR 0 39
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58090: LD_ADDR_VAR 0 40
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58202: LD_ADDR_VAR 0 41
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 3
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58552: LD_ADDR_VAR 0 42
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: LD_INT 3
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58902: LD_ADDR_VAR 0 43
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 3
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59250: LD_ADDR_VAR 0 44
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59600: LD_ADDR_VAR 0 45
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: LD_INT 3
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 3
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59950: LD_ADDR_VAR 0 46
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60298: LD_ADDR_VAR 0 47
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60449: LD_ADDR_VAR 0 48
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60596: LD_ADDR_VAR 0 49
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60740: LD_ADDR_VAR 0 50
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60884: LD_ADDR_VAR 0 51
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61031: LD_ADDR_VAR 0 52
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61182: LD_ADDR_VAR 0 53
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61412: LD_ADDR_VAR 0 54
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: LD_INT 2
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61642: LD_ADDR_VAR 0 55
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61872: LD_ADDR_VAR 0 56
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: LD_INT 2
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 2
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62102: LD_ADDR_VAR 0 57
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62332: LD_ADDR_VAR 0 58
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 2
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62562: LD_ADDR_VAR 0 59
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62650: LD_ADDR_VAR 0 60
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62738: LD_ADDR_VAR 0 61
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62826: LD_ADDR_VAR 0 62
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62914: LD_ADDR_VAR 0 63
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63002: LD_ADDR_VAR 0 64
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: ST_TO_ADDR
// end ; 1 :
63090: GO 68987
63092: LD_INT 1
63094: DOUBLE
63095: EQUAL
63096: IFTRUE 63100
63098: GO 65723
63100: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63101: LD_ADDR_VAR 0 11
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: LD_INT 3
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63145: LD_ADDR_VAR 0 12
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63186: LD_ADDR_VAR 0 13
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 3
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63226: LD_ADDR_VAR 0 14
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63267: LD_ADDR_VAR 0 15
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 3
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63311: LD_ADDR_VAR 0 16
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: LD_INT 3
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 3
63330: NEG
63331: PUSH
63332: LD_INT 2
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: LD_INT 3
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63357: LD_ADDR_VAR 0 17
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63401: LD_ADDR_VAR 0 18
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63442: LD_ADDR_VAR 0 19
63446: PUSH
63447: LD_INT 3
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: LD_INT 3
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: LD_INT 3
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63482: LD_ADDR_VAR 0 20
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 3
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63523: LD_ADDR_VAR 0 21
63527: PUSH
63528: LD_INT 2
63530: NEG
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 3
63541: NEG
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63567: LD_ADDR_VAR 0 22
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 3
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 3
63586: NEG
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 3
63598: NEG
63599: PUSH
63600: LD_INT 3
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63613: LD_ADDR_VAR 0 23
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 3
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 4
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 3
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63657: LD_ADDR_VAR 0 24
63661: PUSH
63662: LD_INT 3
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 4
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63698: LD_ADDR_VAR 0 25
63702: PUSH
63703: LD_INT 3
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 4
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: LD_INT 4
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: LIST
63737: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63738: LD_ADDR_VAR 0 26
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 4
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63779: LD_ADDR_VAR 0 27
63783: PUSH
63784: LD_INT 3
63786: NEG
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 3
63797: NEG
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 4
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63823: LD_ADDR_VAR 0 28
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 3
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 3
63842: NEG
63843: PUSH
63844: LD_INT 4
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 4
63854: NEG
63855: PUSH
63856: LD_INT 3
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63869: LD_ADDR_VAR 0 29
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 4
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 4
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 5
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: LD_INT 4
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 6
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 6
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 5
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64024: LD_ADDR_VAR 0 30
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: LD_INT 1
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 4
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 4
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 4
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 5
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 5
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 5
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 6
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 6
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64167: LD_ADDR_VAR 0 31
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: LD_INT 3
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: LD_INT 3
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: PUSH
64215: LD_INT 4
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: LD_INT 4
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 5
64234: PUSH
64235: LD_INT 4
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 5
64244: PUSH
64245: LD_INT 5
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 4
64254: PUSH
64255: LD_INT 5
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 6
64264: PUSH
64265: LD_INT 5
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 6
64274: PUSH
64275: LD_INT 6
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 5
64284: PUSH
64285: LD_INT 6
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64306: LD_ADDR_VAR 0 32
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 4
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: LD_INT 5
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 5
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 4
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 6
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 6
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 5
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64449: LD_ADDR_VAR 0 33
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 3
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 4
64501: NEG
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 4
64512: NEG
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 4
64524: NEG
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 5
64535: NEG
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 5
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 5
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 6
64569: NEG
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 6
64580: NEG
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64604: LD_ADDR_VAR 0 34
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 3
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 3
64623: NEG
64624: PUSH
64625: LD_INT 2
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 3
64635: NEG
64636: PUSH
64637: LD_INT 3
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: NEG
64648: PUSH
64649: LD_INT 4
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 4
64659: NEG
64660: PUSH
64661: LD_INT 3
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 4
64671: NEG
64672: PUSH
64673: LD_INT 4
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 4
64683: NEG
64684: PUSH
64685: LD_INT 5
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 5
64695: NEG
64696: PUSH
64697: LD_INT 4
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 5
64707: NEG
64708: PUSH
64709: LD_INT 5
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 5
64719: NEG
64720: PUSH
64721: LD_INT 6
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 6
64731: NEG
64732: PUSH
64733: LD_INT 5
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 6
64743: NEG
64744: PUSH
64745: LD_INT 6
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64767: LD_ADDR_VAR 0 41
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 2
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: LD_INT 3
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64811: LD_ADDR_VAR 0 42
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64852: LD_ADDR_VAR 0 43
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64892: LD_ADDR_VAR 0 44
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 2
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64933: LD_ADDR_VAR 0 45
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 3
64962: NEG
64963: PUSH
64964: LD_INT 1
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64977: LD_ADDR_VAR 0 46
64981: PUSH
64982: LD_INT 2
64984: NEG
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: LD_INT 3
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 3
65008: NEG
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65023: LD_ADDR_VAR 0 47
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: LD_INT 3
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: LD_INT 3
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65056: LD_ADDR_VAR 0 48
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: LD_INT 2
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65087: LD_ADDR_VAR 0 49
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65116: LD_ADDR_VAR 0 50
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: LD_INT 3
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 3
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65145: LD_ADDR_VAR 0 51
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: NEG
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65176: LD_ADDR_VAR 0 52
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65209: LD_ADDR_VAR 0 53
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65253: LD_ADDR_VAR 0 54
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65294: LD_ADDR_VAR 0 55
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65334: LD_ADDR_VAR 0 56
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65375: LD_ADDR_VAR 0 57
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 3
65393: NEG
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65419: LD_ADDR_VAR 0 58
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: LD_INT 3
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65465: LD_ADDR_VAR 0 59
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65509: LD_ADDR_VAR 0 60
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65550: LD_ADDR_VAR 0 61
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65590: LD_ADDR_VAR 0 62
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65631: LD_ADDR_VAR 0 63
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: LIST
65674: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65675: LD_ADDR_VAR 0 64
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: NEG
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: ST_TO_ADDR
// end ; 2 :
65721: GO 68987
65723: LD_INT 2
65725: DOUBLE
65726: EQUAL
65727: IFTRUE 65731
65729: GO 68986
65731: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65732: LD_ADDR_VAR 0 29
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 4
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 5
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 5
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 4
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 3
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: LD_INT 2
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 5
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 3
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 4
65852: PUSH
65853: LD_INT 3
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 4
65862: PUSH
65863: LD_INT 4
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: LD_INT 4
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 4
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 2
65912: PUSH
65913: LD_INT 4
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 4
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: LD_INT 4
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: LD_INT 5
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 5
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: LD_INT 4
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 3
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: LD_INT 5
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 3
66015: NEG
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 4
66071: NEG
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 4
66082: NEG
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 4
66094: NEG
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: NEG
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 4
66117: NEG
66118: PUSH
66119: LD_INT 4
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 4
66129: NEG
66130: PUSH
66131: LD_INT 5
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 3
66141: NEG
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 4
66165: NEG
66166: PUSH
66167: LD_INT 3
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 5
66177: NEG
66178: PUSH
66179: LD_INT 4
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 5
66189: NEG
66190: PUSH
66191: LD_INT 5
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: LD_INT 5
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 5
66213: NEG
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66270: LD_ADDR_VAR 0 30
66274: PUSH
66275: LD_INT 4
66277: PUSH
66278: LD_INT 4
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 4
66287: PUSH
66288: LD_INT 3
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 5
66297: PUSH
66298: LD_INT 4
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 5
66307: PUSH
66308: LD_INT 5
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 4
66317: PUSH
66318: LD_INT 5
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: LD_INT 4
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 5
66347: PUSH
66348: LD_INT 3
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: LD_INT 5
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 3
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: LD_INT 4
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 4
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: LD_INT 3
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: LD_INT 2
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: LD_INT 4
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 4
66460: NEG
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 4
66471: NEG
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 4
66505: NEG
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 5
66516: NEG
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 5
66539: NEG
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 3
66551: NEG
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: LD_INT 3
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: LD_INT 4
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 2
66586: NEG
66587: PUSH
66588: LD_INT 3
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 2
66598: NEG
66599: PUSH
66600: LD_INT 2
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 3
66610: NEG
66611: PUSH
66612: LD_INT 2
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 4
66622: NEG
66623: PUSH
66624: LD_INT 3
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 4
66634: NEG
66635: PUSH
66636: LD_INT 4
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: LD_INT 4
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 4
66658: NEG
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 4
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: LD_INT 5
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: LD_INT 4
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 3
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 3
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: LD_INT 4
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: LD_INT 5
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 2
66749: PUSH
66750: LD_INT 3
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: LD_INT 5
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66817: LD_ADDR_VAR 0 31
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: LD_INT 4
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 3
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 4
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 5
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 4
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: LD_INT 3
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 2
66896: PUSH
66897: LD_INT 5
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: LD_INT 3
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 3
66962: NEG
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 4
66973: NEG
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 4
66996: NEG
66997: PUSH
66998: LD_INT 2
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 2
67008: NEG
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 4
67019: NEG
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: LD_INT 5
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: LD_INT 4
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 3
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 4
67067: NEG
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 5
67079: NEG
67080: PUSH
67081: LD_INT 4
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 5
67091: NEG
67092: PUSH
67093: LD_INT 5
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: LD_INT 5
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 5
67115: NEG
67116: PUSH
67117: LD_INT 3
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 3
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: LD_INT 4
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 2
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: LD_INT 4
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 4
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 4
67239: PUSH
67240: LD_INT 1
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 5
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 5
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 4
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 3
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 3
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: PUSH
67302: LD_INT 2
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 5
67312: PUSH
67313: LD_INT 2
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67367: LD_ADDR_VAR 0 32
67371: PUSH
67372: LD_INT 4
67374: NEG
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 3
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 4
67419: NEG
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 5
67430: NEG
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 5
67441: NEG
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 2
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 3
67465: NEG
67466: PUSH
67467: LD_INT 2
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: LD_INT 3
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: LD_INT 4
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 2
67500: NEG
67501: PUSH
67502: LD_INT 3
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: LD_INT 2
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: LD_INT 3
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 4
67548: NEG
67549: PUSH
67550: LD_INT 4
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 4
67572: NEG
67573: PUSH
67574: LD_INT 2
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 4
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: LD_INT 5
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: LD_INT 4
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: NEG
67652: PUSH
67653: LD_INT 5
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: LD_INT 3
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: LD_INT 5
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: LD_INT 1
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: LD_INT 2
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 4
67769: PUSH
67770: LD_INT 2
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: LD_INT 4
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: LD_INT 3
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 5
67799: PUSH
67800: LD_INT 4
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 5
67809: PUSH
67810: LD_INT 5
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 4
67819: PUSH
67820: LD_INT 5
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: LD_INT 4
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: LD_INT 3
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 5
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67914: LD_ADDR_VAR 0 33
67918: PUSH
67919: LD_INT 4
67921: NEG
67922: PUSH
67923: LD_INT 4
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 4
67933: NEG
67934: PUSH
67935: LD_INT 5
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: LD_INT 4
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 4
67969: NEG
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 5
67981: NEG
67982: PUSH
67983: LD_INT 4
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 5
67993: NEG
67994: PUSH
67995: LD_INT 5
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: LD_INT 5
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 5
68017: NEG
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 3
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 4
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: NEG
68097: PUSH
68098: LD_INT 4
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 2
68119: NEG
68120: PUSH
68121: LD_INT 4
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 4
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 5
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 5
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: LD_INT 1
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 3
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 5
68214: PUSH
68215: LD_INT 2
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 3
68224: PUSH
68225: LD_INT 3
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: LD_INT 2
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 4
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 4
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 4
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: LD_INT 4
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: LD_INT 5
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: LD_INT 5
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: LD_INT 4
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: NEG
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: LD_INT 5
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 2
68396: NEG
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68452: LD_ADDR_VAR 0 34
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 0
68470: PUSH
68471: LD_INT 5
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: PUSH
68493: LD_INT 3
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: LD_INT 3
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: LD_INT 4
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: LD_INT 5
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 2
68538: PUSH
68539: LD_INT 3
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: NEG
68550: PUSH
68551: LD_INT 5
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 3
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 3
68571: PUSH
68572: LD_INT 1
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 4
68592: PUSH
68593: LD_INT 1
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: PUSH
68623: LD_INT 1
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: LD_INT 2
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: LD_INT 2
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 4
68654: PUSH
68655: LD_INT 4
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 4
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 5
68674: PUSH
68675: LD_INT 4
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 5
68684: PUSH
68685: LD_INT 5
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: PUSH
68695: LD_INT 5
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 3
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 5
68724: PUSH
68725: LD_INT 3
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: LD_INT 5
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 1
68764: PUSH
68765: LD_INT 3
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 1
68774: PUSH
68775: LD_INT 4
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: LD_INT 4
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 1
68794: NEG
68795: PUSH
68796: LD_INT 3
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: LD_INT 2
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 2
68816: PUSH
68817: LD_INT 4
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 4
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 4
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 4
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 5
68893: NEG
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 5
68904: NEG
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 5
68916: NEG
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: ST_TO_ADDR
// end ; end ;
68984: GO 68987
68986: POP
// case btype of b_depot , b_warehouse :
68987: LD_VAR 0 1
68991: PUSH
68992: LD_INT 0
68994: DOUBLE
68995: EQUAL
68996: IFTRUE 69006
68998: LD_INT 1
69000: DOUBLE
69001: EQUAL
69002: IFTRUE 69006
69004: GO 69207
69006: POP
// case nation of nation_american :
69007: LD_VAR 0 5
69011: PUSH
69012: LD_INT 1
69014: DOUBLE
69015: EQUAL
69016: IFTRUE 69020
69018: GO 69076
69020: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69021: LD_ADDR_VAR 0 9
69025: PUSH
69026: LD_VAR 0 11
69030: PUSH
69031: LD_VAR 0 12
69035: PUSH
69036: LD_VAR 0 13
69040: PUSH
69041: LD_VAR 0 14
69045: PUSH
69046: LD_VAR 0 15
69050: PUSH
69051: LD_VAR 0 16
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: PUSH
69064: LD_VAR 0 4
69068: PUSH
69069: LD_INT 1
69071: PLUS
69072: ARRAY
69073: ST_TO_ADDR
69074: GO 69205
69076: LD_INT 2
69078: DOUBLE
69079: EQUAL
69080: IFTRUE 69084
69082: GO 69140
69084: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69085: LD_ADDR_VAR 0 9
69089: PUSH
69090: LD_VAR 0 17
69094: PUSH
69095: LD_VAR 0 18
69099: PUSH
69100: LD_VAR 0 19
69104: PUSH
69105: LD_VAR 0 20
69109: PUSH
69110: LD_VAR 0 21
69114: PUSH
69115: LD_VAR 0 22
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: PUSH
69128: LD_VAR 0 4
69132: PUSH
69133: LD_INT 1
69135: PLUS
69136: ARRAY
69137: ST_TO_ADDR
69138: GO 69205
69140: LD_INT 3
69142: DOUBLE
69143: EQUAL
69144: IFTRUE 69148
69146: GO 69204
69148: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69149: LD_ADDR_VAR 0 9
69153: PUSH
69154: LD_VAR 0 23
69158: PUSH
69159: LD_VAR 0 24
69163: PUSH
69164: LD_VAR 0 25
69168: PUSH
69169: LD_VAR 0 26
69173: PUSH
69174: LD_VAR 0 27
69178: PUSH
69179: LD_VAR 0 28
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: PUSH
69192: LD_VAR 0 4
69196: PUSH
69197: LD_INT 1
69199: PLUS
69200: ARRAY
69201: ST_TO_ADDR
69202: GO 69205
69204: POP
69205: GO 69760
69207: LD_INT 2
69209: DOUBLE
69210: EQUAL
69211: IFTRUE 69221
69213: LD_INT 3
69215: DOUBLE
69216: EQUAL
69217: IFTRUE 69221
69219: GO 69277
69221: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69222: LD_ADDR_VAR 0 9
69226: PUSH
69227: LD_VAR 0 29
69231: PUSH
69232: LD_VAR 0 30
69236: PUSH
69237: LD_VAR 0 31
69241: PUSH
69242: LD_VAR 0 32
69246: PUSH
69247: LD_VAR 0 33
69251: PUSH
69252: LD_VAR 0 34
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: PUSH
69265: LD_VAR 0 4
69269: PUSH
69270: LD_INT 1
69272: PLUS
69273: ARRAY
69274: ST_TO_ADDR
69275: GO 69760
69277: LD_INT 16
69279: DOUBLE
69280: EQUAL
69281: IFTRUE 69339
69283: LD_INT 17
69285: DOUBLE
69286: EQUAL
69287: IFTRUE 69339
69289: LD_INT 18
69291: DOUBLE
69292: EQUAL
69293: IFTRUE 69339
69295: LD_INT 19
69297: DOUBLE
69298: EQUAL
69299: IFTRUE 69339
69301: LD_INT 22
69303: DOUBLE
69304: EQUAL
69305: IFTRUE 69339
69307: LD_INT 20
69309: DOUBLE
69310: EQUAL
69311: IFTRUE 69339
69313: LD_INT 21
69315: DOUBLE
69316: EQUAL
69317: IFTRUE 69339
69319: LD_INT 23
69321: DOUBLE
69322: EQUAL
69323: IFTRUE 69339
69325: LD_INT 24
69327: DOUBLE
69328: EQUAL
69329: IFTRUE 69339
69331: LD_INT 25
69333: DOUBLE
69334: EQUAL
69335: IFTRUE 69339
69337: GO 69395
69339: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69340: LD_ADDR_VAR 0 9
69344: PUSH
69345: LD_VAR 0 35
69349: PUSH
69350: LD_VAR 0 36
69354: PUSH
69355: LD_VAR 0 37
69359: PUSH
69360: LD_VAR 0 38
69364: PUSH
69365: LD_VAR 0 39
69369: PUSH
69370: LD_VAR 0 40
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: PUSH
69383: LD_VAR 0 4
69387: PUSH
69388: LD_INT 1
69390: PLUS
69391: ARRAY
69392: ST_TO_ADDR
69393: GO 69760
69395: LD_INT 6
69397: DOUBLE
69398: EQUAL
69399: IFTRUE 69451
69401: LD_INT 7
69403: DOUBLE
69404: EQUAL
69405: IFTRUE 69451
69407: LD_INT 8
69409: DOUBLE
69410: EQUAL
69411: IFTRUE 69451
69413: LD_INT 13
69415: DOUBLE
69416: EQUAL
69417: IFTRUE 69451
69419: LD_INT 12
69421: DOUBLE
69422: EQUAL
69423: IFTRUE 69451
69425: LD_INT 15
69427: DOUBLE
69428: EQUAL
69429: IFTRUE 69451
69431: LD_INT 11
69433: DOUBLE
69434: EQUAL
69435: IFTRUE 69451
69437: LD_INT 14
69439: DOUBLE
69440: EQUAL
69441: IFTRUE 69451
69443: LD_INT 10
69445: DOUBLE
69446: EQUAL
69447: IFTRUE 69451
69449: GO 69507
69451: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69452: LD_ADDR_VAR 0 9
69456: PUSH
69457: LD_VAR 0 41
69461: PUSH
69462: LD_VAR 0 42
69466: PUSH
69467: LD_VAR 0 43
69471: PUSH
69472: LD_VAR 0 44
69476: PUSH
69477: LD_VAR 0 45
69481: PUSH
69482: LD_VAR 0 46
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: PUSH
69495: LD_VAR 0 4
69499: PUSH
69500: LD_INT 1
69502: PLUS
69503: ARRAY
69504: ST_TO_ADDR
69505: GO 69760
69507: LD_INT 36
69509: DOUBLE
69510: EQUAL
69511: IFTRUE 69515
69513: GO 69571
69515: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69516: LD_ADDR_VAR 0 9
69520: PUSH
69521: LD_VAR 0 47
69525: PUSH
69526: LD_VAR 0 48
69530: PUSH
69531: LD_VAR 0 49
69535: PUSH
69536: LD_VAR 0 50
69540: PUSH
69541: LD_VAR 0 51
69545: PUSH
69546: LD_VAR 0 52
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: PUSH
69559: LD_VAR 0 4
69563: PUSH
69564: LD_INT 1
69566: PLUS
69567: ARRAY
69568: ST_TO_ADDR
69569: GO 69760
69571: LD_INT 4
69573: DOUBLE
69574: EQUAL
69575: IFTRUE 69597
69577: LD_INT 5
69579: DOUBLE
69580: EQUAL
69581: IFTRUE 69597
69583: LD_INT 34
69585: DOUBLE
69586: EQUAL
69587: IFTRUE 69597
69589: LD_INT 37
69591: DOUBLE
69592: EQUAL
69593: IFTRUE 69597
69595: GO 69653
69597: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69598: LD_ADDR_VAR 0 9
69602: PUSH
69603: LD_VAR 0 53
69607: PUSH
69608: LD_VAR 0 54
69612: PUSH
69613: LD_VAR 0 55
69617: PUSH
69618: LD_VAR 0 56
69622: PUSH
69623: LD_VAR 0 57
69627: PUSH
69628: LD_VAR 0 58
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: PUSH
69641: LD_VAR 0 4
69645: PUSH
69646: LD_INT 1
69648: PLUS
69649: ARRAY
69650: ST_TO_ADDR
69651: GO 69760
69653: LD_INT 31
69655: DOUBLE
69656: EQUAL
69657: IFTRUE 69703
69659: LD_INT 32
69661: DOUBLE
69662: EQUAL
69663: IFTRUE 69703
69665: LD_INT 33
69667: DOUBLE
69668: EQUAL
69669: IFTRUE 69703
69671: LD_INT 27
69673: DOUBLE
69674: EQUAL
69675: IFTRUE 69703
69677: LD_INT 26
69679: DOUBLE
69680: EQUAL
69681: IFTRUE 69703
69683: LD_INT 28
69685: DOUBLE
69686: EQUAL
69687: IFTRUE 69703
69689: LD_INT 29
69691: DOUBLE
69692: EQUAL
69693: IFTRUE 69703
69695: LD_INT 30
69697: DOUBLE
69698: EQUAL
69699: IFTRUE 69703
69701: GO 69759
69703: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69704: LD_ADDR_VAR 0 9
69708: PUSH
69709: LD_VAR 0 59
69713: PUSH
69714: LD_VAR 0 60
69718: PUSH
69719: LD_VAR 0 61
69723: PUSH
69724: LD_VAR 0 62
69728: PUSH
69729: LD_VAR 0 63
69733: PUSH
69734: LD_VAR 0 64
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: PUSH
69747: LD_VAR 0 4
69751: PUSH
69752: LD_INT 1
69754: PLUS
69755: ARRAY
69756: ST_TO_ADDR
69757: GO 69760
69759: POP
// temp_list2 = [ ] ;
69760: LD_ADDR_VAR 0 10
69764: PUSH
69765: EMPTY
69766: ST_TO_ADDR
// for i in temp_list do
69767: LD_ADDR_VAR 0 8
69771: PUSH
69772: LD_VAR 0 9
69776: PUSH
69777: FOR_IN
69778: IFFALSE 69830
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69780: LD_ADDR_VAR 0 10
69784: PUSH
69785: LD_VAR 0 10
69789: PUSH
69790: LD_VAR 0 8
69794: PUSH
69795: LD_INT 1
69797: ARRAY
69798: PUSH
69799: LD_VAR 0 2
69803: PLUS
69804: PUSH
69805: LD_VAR 0 8
69809: PUSH
69810: LD_INT 2
69812: ARRAY
69813: PUSH
69814: LD_VAR 0 3
69818: PLUS
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: EMPTY
69825: LIST
69826: ADD
69827: ST_TO_ADDR
69828: GO 69777
69830: POP
69831: POP
// result = temp_list2 ;
69832: LD_ADDR_VAR 0 7
69836: PUSH
69837: LD_VAR 0 10
69841: ST_TO_ADDR
// end ;
69842: LD_VAR 0 7
69846: RET
// export function EnemyInRange ( unit , dist ) ; begin
69847: LD_INT 0
69849: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69850: LD_ADDR_VAR 0 3
69854: PUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: CALL_OW 255
69864: PPUSH
69865: LD_VAR 0 1
69869: PPUSH
69870: CALL_OW 250
69874: PPUSH
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 251
69884: PPUSH
69885: LD_VAR 0 2
69889: PPUSH
69890: CALL 43951 0 4
69894: PUSH
69895: LD_INT 4
69897: ARRAY
69898: ST_TO_ADDR
// end ;
69899: LD_VAR 0 3
69903: RET
// export function PlayerSeeMe ( unit ) ; begin
69904: LD_INT 0
69906: PPUSH
// result := See ( your_side , unit ) ;
69907: LD_ADDR_VAR 0 2
69911: PUSH
69912: LD_OWVAR 2
69916: PPUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: CALL_OW 292
69926: ST_TO_ADDR
// end ;
69927: LD_VAR 0 2
69931: RET
// export function ReverseDir ( unit ) ; begin
69932: LD_INT 0
69934: PPUSH
// if not unit then
69935: LD_VAR 0 1
69939: NOT
69940: IFFALSE 69944
// exit ;
69942: GO 69967
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69944: LD_ADDR_VAR 0 2
69948: PUSH
69949: LD_VAR 0 1
69953: PPUSH
69954: CALL_OW 254
69958: PUSH
69959: LD_INT 3
69961: PLUS
69962: PUSH
69963: LD_INT 6
69965: MOD
69966: ST_TO_ADDR
// end ;
69967: LD_VAR 0 2
69971: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69972: LD_INT 0
69974: PPUSH
69975: PPUSH
69976: PPUSH
69977: PPUSH
69978: PPUSH
// if not hexes then
69979: LD_VAR 0 2
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70136
// dist := 9999 ;
69988: LD_ADDR_VAR 0 5
69992: PUSH
69993: LD_INT 9999
69995: ST_TO_ADDR
// for i = 1 to hexes do
69996: LD_ADDR_VAR 0 4
70000: PUSH
70001: DOUBLE
70002: LD_INT 1
70004: DEC
70005: ST_TO_ADDR
70006: LD_VAR 0 2
70010: PUSH
70011: FOR_TO
70012: IFFALSE 70124
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70014: LD_VAR 0 1
70018: PPUSH
70019: LD_VAR 0 2
70023: PUSH
70024: LD_VAR 0 4
70028: ARRAY
70029: PUSH
70030: LD_INT 1
70032: ARRAY
70033: PPUSH
70034: LD_VAR 0 2
70038: PUSH
70039: LD_VAR 0 4
70043: ARRAY
70044: PUSH
70045: LD_INT 2
70047: ARRAY
70048: PPUSH
70049: CALL_OW 297
70053: PUSH
70054: LD_VAR 0 5
70058: LESS
70059: IFFALSE 70122
// begin hex := hexes [ i ] ;
70061: LD_ADDR_VAR 0 7
70065: PUSH
70066: LD_VAR 0 2
70070: PUSH
70071: LD_VAR 0 4
70075: ARRAY
70076: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70077: LD_ADDR_VAR 0 5
70081: PUSH
70082: LD_VAR 0 1
70086: PPUSH
70087: LD_VAR 0 2
70091: PUSH
70092: LD_VAR 0 4
70096: ARRAY
70097: PUSH
70098: LD_INT 1
70100: ARRAY
70101: PPUSH
70102: LD_VAR 0 2
70106: PUSH
70107: LD_VAR 0 4
70111: ARRAY
70112: PUSH
70113: LD_INT 2
70115: ARRAY
70116: PPUSH
70117: CALL_OW 297
70121: ST_TO_ADDR
// end ; end ;
70122: GO 70011
70124: POP
70125: POP
// result := hex ;
70126: LD_ADDR_VAR 0 3
70130: PUSH
70131: LD_VAR 0 7
70135: ST_TO_ADDR
// end ;
70136: LD_VAR 0 3
70140: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70141: LD_INT 0
70143: PPUSH
70144: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70145: LD_VAR 0 1
70149: NOT
70150: PUSH
70151: LD_VAR 0 1
70155: PUSH
70156: LD_INT 21
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 23
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PPUSH
70180: CALL_OW 69
70184: IN
70185: NOT
70186: OR
70187: IFFALSE 70191
// exit ;
70189: GO 70238
// for i = 1 to 3 do
70191: LD_ADDR_VAR 0 3
70195: PUSH
70196: DOUBLE
70197: LD_INT 1
70199: DEC
70200: ST_TO_ADDR
70201: LD_INT 3
70203: PUSH
70204: FOR_TO
70205: IFFALSE 70236
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70207: LD_VAR 0 1
70211: PPUSH
70212: CALL_OW 250
70216: PPUSH
70217: LD_VAR 0 1
70221: PPUSH
70222: CALL_OW 251
70226: PPUSH
70227: LD_INT 1
70229: PPUSH
70230: CALL_OW 453
70234: GO 70204
70236: POP
70237: POP
// end ;
70238: LD_VAR 0 2
70242: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70243: LD_INT 0
70245: PPUSH
70246: PPUSH
70247: PPUSH
70248: PPUSH
70249: PPUSH
70250: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70251: LD_VAR 0 1
70255: NOT
70256: PUSH
70257: LD_VAR 0 2
70261: NOT
70262: OR
70263: PUSH
70264: LD_VAR 0 1
70268: PPUSH
70269: CALL_OW 314
70273: OR
70274: IFFALSE 70278
// exit ;
70276: GO 70719
// x := GetX ( enemy_unit ) ;
70278: LD_ADDR_VAR 0 7
70282: PUSH
70283: LD_VAR 0 2
70287: PPUSH
70288: CALL_OW 250
70292: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70293: LD_ADDR_VAR 0 8
70297: PUSH
70298: LD_VAR 0 2
70302: PPUSH
70303: CALL_OW 251
70307: ST_TO_ADDR
// if not x or not y then
70308: LD_VAR 0 7
70312: NOT
70313: PUSH
70314: LD_VAR 0 8
70318: NOT
70319: OR
70320: IFFALSE 70324
// exit ;
70322: GO 70719
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70324: LD_ADDR_VAR 0 6
70328: PUSH
70329: LD_VAR 0 7
70333: PPUSH
70334: LD_INT 0
70336: PPUSH
70337: LD_INT 4
70339: PPUSH
70340: CALL_OW 272
70344: PUSH
70345: LD_VAR 0 8
70349: PPUSH
70350: LD_INT 0
70352: PPUSH
70353: LD_INT 4
70355: PPUSH
70356: CALL_OW 273
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_VAR 0 7
70369: PPUSH
70370: LD_INT 1
70372: PPUSH
70373: LD_INT 4
70375: PPUSH
70376: CALL_OW 272
70380: PUSH
70381: LD_VAR 0 8
70385: PPUSH
70386: LD_INT 1
70388: PPUSH
70389: LD_INT 4
70391: PPUSH
70392: CALL_OW 273
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_VAR 0 7
70405: PPUSH
70406: LD_INT 2
70408: PPUSH
70409: LD_INT 4
70411: PPUSH
70412: CALL_OW 272
70416: PUSH
70417: LD_VAR 0 8
70421: PPUSH
70422: LD_INT 2
70424: PPUSH
70425: LD_INT 4
70427: PPUSH
70428: CALL_OW 273
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_VAR 0 7
70441: PPUSH
70442: LD_INT 3
70444: PPUSH
70445: LD_INT 4
70447: PPUSH
70448: CALL_OW 272
70452: PUSH
70453: LD_VAR 0 8
70457: PPUSH
70458: LD_INT 3
70460: PPUSH
70461: LD_INT 4
70463: PPUSH
70464: CALL_OW 273
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_VAR 0 7
70477: PPUSH
70478: LD_INT 4
70480: PPUSH
70481: LD_INT 4
70483: PPUSH
70484: CALL_OW 272
70488: PUSH
70489: LD_VAR 0 8
70493: PPUSH
70494: LD_INT 4
70496: PPUSH
70497: LD_INT 4
70499: PPUSH
70500: CALL_OW 273
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_VAR 0 7
70513: PPUSH
70514: LD_INT 5
70516: PPUSH
70517: LD_INT 4
70519: PPUSH
70520: CALL_OW 272
70524: PUSH
70525: LD_VAR 0 8
70529: PPUSH
70530: LD_INT 5
70532: PPUSH
70533: LD_INT 4
70535: PPUSH
70536: CALL_OW 273
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: ST_TO_ADDR
// for i = tmp downto 1 do
70553: LD_ADDR_VAR 0 4
70557: PUSH
70558: DOUBLE
70559: LD_VAR 0 6
70563: INC
70564: ST_TO_ADDR
70565: LD_INT 1
70567: PUSH
70568: FOR_DOWNTO
70569: IFFALSE 70670
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70571: LD_VAR 0 6
70575: PUSH
70576: LD_VAR 0 4
70580: ARRAY
70581: PUSH
70582: LD_INT 1
70584: ARRAY
70585: PPUSH
70586: LD_VAR 0 6
70590: PUSH
70591: LD_VAR 0 4
70595: ARRAY
70596: PUSH
70597: LD_INT 2
70599: ARRAY
70600: PPUSH
70601: CALL_OW 488
70605: NOT
70606: PUSH
70607: LD_VAR 0 6
70611: PUSH
70612: LD_VAR 0 4
70616: ARRAY
70617: PUSH
70618: LD_INT 1
70620: ARRAY
70621: PPUSH
70622: LD_VAR 0 6
70626: PUSH
70627: LD_VAR 0 4
70631: ARRAY
70632: PUSH
70633: LD_INT 2
70635: ARRAY
70636: PPUSH
70637: CALL_OW 428
70641: PUSH
70642: LD_INT 0
70644: NONEQUAL
70645: OR
70646: IFFALSE 70668
// tmp := Delete ( tmp , i ) ;
70648: LD_ADDR_VAR 0 6
70652: PUSH
70653: LD_VAR 0 6
70657: PPUSH
70658: LD_VAR 0 4
70662: PPUSH
70663: CALL_OW 3
70667: ST_TO_ADDR
70668: GO 70568
70670: POP
70671: POP
// j := GetClosestHex ( unit , tmp ) ;
70672: LD_ADDR_VAR 0 5
70676: PUSH
70677: LD_VAR 0 1
70681: PPUSH
70682: LD_VAR 0 6
70686: PPUSH
70687: CALL 69972 0 2
70691: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70692: LD_VAR 0 1
70696: PPUSH
70697: LD_VAR 0 5
70701: PUSH
70702: LD_INT 1
70704: ARRAY
70705: PPUSH
70706: LD_VAR 0 5
70710: PUSH
70711: LD_INT 2
70713: ARRAY
70714: PPUSH
70715: CALL_OW 111
// end ;
70719: LD_VAR 0 3
70723: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70724: LD_INT 0
70726: PPUSH
70727: PPUSH
70728: PPUSH
// uc_side = 0 ;
70729: LD_ADDR_OWVAR 20
70733: PUSH
70734: LD_INT 0
70736: ST_TO_ADDR
// uc_nation = 0 ;
70737: LD_ADDR_OWVAR 21
70741: PUSH
70742: LD_INT 0
70744: ST_TO_ADDR
// InitHc_All ( ) ;
70745: CALL_OW 584
// InitVc ;
70749: CALL_OW 20
// if mastodonts then
70753: LD_VAR 0 6
70757: IFFALSE 70824
// for i = 1 to mastodonts do
70759: LD_ADDR_VAR 0 11
70763: PUSH
70764: DOUBLE
70765: LD_INT 1
70767: DEC
70768: ST_TO_ADDR
70769: LD_VAR 0 6
70773: PUSH
70774: FOR_TO
70775: IFFALSE 70822
// begin vc_chassis := 31 ;
70777: LD_ADDR_OWVAR 37
70781: PUSH
70782: LD_INT 31
70784: ST_TO_ADDR
// vc_control := control_rider ;
70785: LD_ADDR_OWVAR 38
70789: PUSH
70790: LD_INT 4
70792: ST_TO_ADDR
// animal := CreateVehicle ;
70793: LD_ADDR_VAR 0 12
70797: PUSH
70798: CALL_OW 45
70802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70803: LD_VAR 0 12
70807: PPUSH
70808: LD_VAR 0 8
70812: PPUSH
70813: LD_INT 0
70815: PPUSH
70816: CALL 73012 0 3
// end ;
70820: GO 70774
70822: POP
70823: POP
// if horses then
70824: LD_VAR 0 5
70828: IFFALSE 70895
// for i = 1 to horses do
70830: LD_ADDR_VAR 0 11
70834: PUSH
70835: DOUBLE
70836: LD_INT 1
70838: DEC
70839: ST_TO_ADDR
70840: LD_VAR 0 5
70844: PUSH
70845: FOR_TO
70846: IFFALSE 70893
// begin hc_class := 21 ;
70848: LD_ADDR_OWVAR 28
70852: PUSH
70853: LD_INT 21
70855: ST_TO_ADDR
// hc_gallery :=  ;
70856: LD_ADDR_OWVAR 33
70860: PUSH
70861: LD_STRING 
70863: ST_TO_ADDR
// animal := CreateHuman ;
70864: LD_ADDR_VAR 0 12
70868: PUSH
70869: CALL_OW 44
70873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70874: LD_VAR 0 12
70878: PPUSH
70879: LD_VAR 0 8
70883: PPUSH
70884: LD_INT 0
70886: PPUSH
70887: CALL 73012 0 3
// end ;
70891: GO 70845
70893: POP
70894: POP
// if birds then
70895: LD_VAR 0 1
70899: IFFALSE 70966
// for i = 1 to birds do
70901: LD_ADDR_VAR 0 11
70905: PUSH
70906: DOUBLE
70907: LD_INT 1
70909: DEC
70910: ST_TO_ADDR
70911: LD_VAR 0 1
70915: PUSH
70916: FOR_TO
70917: IFFALSE 70964
// begin hc_class = 18 ;
70919: LD_ADDR_OWVAR 28
70923: PUSH
70924: LD_INT 18
70926: ST_TO_ADDR
// hc_gallery =  ;
70927: LD_ADDR_OWVAR 33
70931: PUSH
70932: LD_STRING 
70934: ST_TO_ADDR
// animal := CreateHuman ;
70935: LD_ADDR_VAR 0 12
70939: PUSH
70940: CALL_OW 44
70944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70945: LD_VAR 0 12
70949: PPUSH
70950: LD_VAR 0 8
70954: PPUSH
70955: LD_INT 0
70957: PPUSH
70958: CALL 73012 0 3
// end ;
70962: GO 70916
70964: POP
70965: POP
// if tigers then
70966: LD_VAR 0 2
70970: IFFALSE 71054
// for i = 1 to tigers do
70972: LD_ADDR_VAR 0 11
70976: PUSH
70977: DOUBLE
70978: LD_INT 1
70980: DEC
70981: ST_TO_ADDR
70982: LD_VAR 0 2
70986: PUSH
70987: FOR_TO
70988: IFFALSE 71052
// begin hc_class = class_tiger ;
70990: LD_ADDR_OWVAR 28
70994: PUSH
70995: LD_INT 14
70997: ST_TO_ADDR
// hc_gallery =  ;
70998: LD_ADDR_OWVAR 33
71002: PUSH
71003: LD_STRING 
71005: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71006: LD_ADDR_OWVAR 35
71010: PUSH
71011: LD_INT 7
71013: NEG
71014: PPUSH
71015: LD_INT 7
71017: PPUSH
71018: CALL_OW 12
71022: ST_TO_ADDR
// animal := CreateHuman ;
71023: LD_ADDR_VAR 0 12
71027: PUSH
71028: CALL_OW 44
71032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71033: LD_VAR 0 12
71037: PPUSH
71038: LD_VAR 0 8
71042: PPUSH
71043: LD_INT 0
71045: PPUSH
71046: CALL 73012 0 3
// end ;
71050: GO 70987
71052: POP
71053: POP
// if apemans then
71054: LD_VAR 0 3
71058: IFFALSE 71181
// for i = 1 to apemans do
71060: LD_ADDR_VAR 0 11
71064: PUSH
71065: DOUBLE
71066: LD_INT 1
71068: DEC
71069: ST_TO_ADDR
71070: LD_VAR 0 3
71074: PUSH
71075: FOR_TO
71076: IFFALSE 71179
// begin hc_class = class_apeman ;
71078: LD_ADDR_OWVAR 28
71082: PUSH
71083: LD_INT 12
71085: ST_TO_ADDR
// hc_gallery =  ;
71086: LD_ADDR_OWVAR 33
71090: PUSH
71091: LD_STRING 
71093: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
71094: LD_ADDR_OWVAR 35
71098: PUSH
71099: LD_INT 5
71101: NEG
71102: PPUSH
71103: LD_INT 5
71105: PPUSH
71106: CALL_OW 12
71110: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71111: LD_ADDR_OWVAR 31
71115: PUSH
71116: LD_INT 1
71118: PPUSH
71119: LD_INT 3
71121: PPUSH
71122: CALL_OW 12
71126: PUSH
71127: LD_INT 1
71129: PPUSH
71130: LD_INT 3
71132: PPUSH
71133: CALL_OW 12
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_INT 0
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: ST_TO_ADDR
// animal := CreateHuman ;
71150: LD_ADDR_VAR 0 12
71154: PUSH
71155: CALL_OW 44
71159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71160: LD_VAR 0 12
71164: PPUSH
71165: LD_VAR 0 8
71169: PPUSH
71170: LD_INT 0
71172: PPUSH
71173: CALL 73012 0 3
// end ;
71177: GO 71075
71179: POP
71180: POP
// if enchidnas then
71181: LD_VAR 0 4
71185: IFFALSE 71252
// for i = 1 to enchidnas do
71187: LD_ADDR_VAR 0 11
71191: PUSH
71192: DOUBLE
71193: LD_INT 1
71195: DEC
71196: ST_TO_ADDR
71197: LD_VAR 0 4
71201: PUSH
71202: FOR_TO
71203: IFFALSE 71250
// begin hc_class = 13 ;
71205: LD_ADDR_OWVAR 28
71209: PUSH
71210: LD_INT 13
71212: ST_TO_ADDR
// hc_gallery =  ;
71213: LD_ADDR_OWVAR 33
71217: PUSH
71218: LD_STRING 
71220: ST_TO_ADDR
// animal := CreateHuman ;
71221: LD_ADDR_VAR 0 12
71225: PUSH
71226: CALL_OW 44
71230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71231: LD_VAR 0 12
71235: PPUSH
71236: LD_VAR 0 8
71240: PPUSH
71241: LD_INT 0
71243: PPUSH
71244: CALL 73012 0 3
// end ;
71248: GO 71202
71250: POP
71251: POP
// if fishes then
71252: LD_VAR 0 7
71256: IFFALSE 71323
// for i = 1 to fishes do
71258: LD_ADDR_VAR 0 11
71262: PUSH
71263: DOUBLE
71264: LD_INT 1
71266: DEC
71267: ST_TO_ADDR
71268: LD_VAR 0 7
71272: PUSH
71273: FOR_TO
71274: IFFALSE 71321
// begin hc_class = 20 ;
71276: LD_ADDR_OWVAR 28
71280: PUSH
71281: LD_INT 20
71283: ST_TO_ADDR
// hc_gallery =  ;
71284: LD_ADDR_OWVAR 33
71288: PUSH
71289: LD_STRING 
71291: ST_TO_ADDR
// animal := CreateHuman ;
71292: LD_ADDR_VAR 0 12
71296: PUSH
71297: CALL_OW 44
71301: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71302: LD_VAR 0 12
71306: PPUSH
71307: LD_VAR 0 9
71311: PPUSH
71312: LD_INT 0
71314: PPUSH
71315: CALL 73012 0 3
// end ;
71319: GO 71273
71321: POP
71322: POP
// end ;
71323: LD_VAR 0 10
71327: RET
// export function WantHeal ( sci , unit ) ; begin
71328: LD_INT 0
71330: PPUSH
// if GetTaskList ( sci ) > 0 then
71331: LD_VAR 0 1
71335: PPUSH
71336: CALL_OW 437
71340: PUSH
71341: LD_INT 0
71343: GREATER
71344: IFFALSE 71414
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71346: LD_VAR 0 1
71350: PPUSH
71351: CALL_OW 437
71355: PUSH
71356: LD_INT 1
71358: ARRAY
71359: PUSH
71360: LD_INT 1
71362: ARRAY
71363: PUSH
71364: LD_STRING l
71366: EQUAL
71367: PUSH
71368: LD_VAR 0 1
71372: PPUSH
71373: CALL_OW 437
71377: PUSH
71378: LD_INT 1
71380: ARRAY
71381: PUSH
71382: LD_INT 4
71384: ARRAY
71385: PUSH
71386: LD_VAR 0 2
71390: EQUAL
71391: AND
71392: IFFALSE 71404
// result := true else
71394: LD_ADDR_VAR 0 3
71398: PUSH
71399: LD_INT 1
71401: ST_TO_ADDR
71402: GO 71412
// result := false ;
71404: LD_ADDR_VAR 0 3
71408: PUSH
71409: LD_INT 0
71411: ST_TO_ADDR
// end else
71412: GO 71422
// result := false ;
71414: LD_ADDR_VAR 0 3
71418: PUSH
71419: LD_INT 0
71421: ST_TO_ADDR
// end ;
71422: LD_VAR 0 3
71426: RET
// export function HealTarget ( sci ) ; begin
71427: LD_INT 0
71429: PPUSH
// if not sci then
71430: LD_VAR 0 1
71434: NOT
71435: IFFALSE 71439
// exit ;
71437: GO 71504
// result := 0 ;
71439: LD_ADDR_VAR 0 2
71443: PUSH
71444: LD_INT 0
71446: ST_TO_ADDR
// if GetTaskList ( sci ) then
71447: LD_VAR 0 1
71451: PPUSH
71452: CALL_OW 437
71456: IFFALSE 71504
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71458: LD_VAR 0 1
71462: PPUSH
71463: CALL_OW 437
71467: PUSH
71468: LD_INT 1
71470: ARRAY
71471: PUSH
71472: LD_INT 1
71474: ARRAY
71475: PUSH
71476: LD_STRING l
71478: EQUAL
71479: IFFALSE 71504
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71481: LD_ADDR_VAR 0 2
71485: PUSH
71486: LD_VAR 0 1
71490: PPUSH
71491: CALL_OW 437
71495: PUSH
71496: LD_INT 1
71498: ARRAY
71499: PUSH
71500: LD_INT 4
71502: ARRAY
71503: ST_TO_ADDR
// end ;
71504: LD_VAR 0 2
71508: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71509: LD_INT 0
71511: PPUSH
71512: PPUSH
71513: PPUSH
71514: PPUSH
// if not base_units then
71515: LD_VAR 0 1
71519: NOT
71520: IFFALSE 71524
// exit ;
71522: GO 71611
// result := false ;
71524: LD_ADDR_VAR 0 2
71528: PUSH
71529: LD_INT 0
71531: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71532: LD_ADDR_VAR 0 5
71536: PUSH
71537: LD_VAR 0 1
71541: PPUSH
71542: LD_INT 21
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PPUSH
71552: CALL_OW 72
71556: ST_TO_ADDR
// if not tmp then
71557: LD_VAR 0 5
71561: NOT
71562: IFFALSE 71566
// exit ;
71564: GO 71611
// for i in tmp do
71566: LD_ADDR_VAR 0 3
71570: PUSH
71571: LD_VAR 0 5
71575: PUSH
71576: FOR_IN
71577: IFFALSE 71609
// begin result := EnemyInRange ( i , 22 ) ;
71579: LD_ADDR_VAR 0 2
71583: PUSH
71584: LD_VAR 0 3
71588: PPUSH
71589: LD_INT 22
71591: PPUSH
71592: CALL 69847 0 2
71596: ST_TO_ADDR
// if result then
71597: LD_VAR 0 2
71601: IFFALSE 71607
// exit ;
71603: POP
71604: POP
71605: GO 71611
// end ;
71607: GO 71576
71609: POP
71610: POP
// end ;
71611: LD_VAR 0 2
71615: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71616: LD_INT 0
71618: PPUSH
71619: PPUSH
// if not units then
71620: LD_VAR 0 1
71624: NOT
71625: IFFALSE 71629
// exit ;
71627: GO 71699
// result := [ ] ;
71629: LD_ADDR_VAR 0 3
71633: PUSH
71634: EMPTY
71635: ST_TO_ADDR
// for i in units do
71636: LD_ADDR_VAR 0 4
71640: PUSH
71641: LD_VAR 0 1
71645: PUSH
71646: FOR_IN
71647: IFFALSE 71697
// if GetTag ( i ) = tag then
71649: LD_VAR 0 4
71653: PPUSH
71654: CALL_OW 110
71658: PUSH
71659: LD_VAR 0 2
71663: EQUAL
71664: IFFALSE 71695
// result := Insert ( result , result + 1 , i ) ;
71666: LD_ADDR_VAR 0 3
71670: PUSH
71671: LD_VAR 0 3
71675: PPUSH
71676: LD_VAR 0 3
71680: PUSH
71681: LD_INT 1
71683: PLUS
71684: PPUSH
71685: LD_VAR 0 4
71689: PPUSH
71690: CALL_OW 2
71694: ST_TO_ADDR
71695: GO 71646
71697: POP
71698: POP
// end ;
71699: LD_VAR 0 3
71703: RET
// export function IsDriver ( un ) ; begin
71704: LD_INT 0
71706: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71707: LD_ADDR_VAR 0 2
71711: PUSH
71712: LD_VAR 0 1
71716: PUSH
71717: LD_INT 55
71719: PUSH
71720: EMPTY
71721: LIST
71722: PPUSH
71723: CALL_OW 69
71727: IN
71728: ST_TO_ADDR
// end ;
71729: LD_VAR 0 2
71733: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71734: LD_INT 0
71736: PPUSH
71737: PPUSH
// list := [ ] ;
71738: LD_ADDR_VAR 0 5
71742: PUSH
71743: EMPTY
71744: ST_TO_ADDR
// case d of 0 :
71745: LD_VAR 0 3
71749: PUSH
71750: LD_INT 0
71752: DOUBLE
71753: EQUAL
71754: IFTRUE 71758
71756: GO 71891
71758: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71759: LD_ADDR_VAR 0 5
71763: PUSH
71764: LD_VAR 0 1
71768: PUSH
71769: LD_INT 4
71771: MINUS
71772: PUSH
71773: LD_VAR 0 2
71777: PUSH
71778: LD_INT 4
71780: MINUS
71781: PUSH
71782: LD_INT 2
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: LD_VAR 0 1
71794: PUSH
71795: LD_INT 3
71797: MINUS
71798: PUSH
71799: LD_VAR 0 2
71803: PUSH
71804: LD_INT 1
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: LIST
71811: PUSH
71812: LD_VAR 0 1
71816: PUSH
71817: LD_INT 4
71819: PLUS
71820: PUSH
71821: LD_VAR 0 2
71825: PUSH
71826: LD_INT 4
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: LIST
71833: PUSH
71834: LD_VAR 0 1
71838: PUSH
71839: LD_INT 3
71841: PLUS
71842: PUSH
71843: LD_VAR 0 2
71847: PUSH
71848: LD_INT 3
71850: PLUS
71851: PUSH
71852: LD_INT 5
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 1
71864: PUSH
71865: LD_VAR 0 2
71869: PUSH
71870: LD_INT 4
71872: PLUS
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: ST_TO_ADDR
// end ; 1 :
71889: GO 72589
71891: LD_INT 1
71893: DOUBLE
71894: EQUAL
71895: IFTRUE 71899
71897: GO 72032
71899: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71900: LD_ADDR_VAR 0 5
71904: PUSH
71905: LD_VAR 0 1
71909: PUSH
71910: LD_VAR 0 2
71914: PUSH
71915: LD_INT 4
71917: MINUS
71918: PUSH
71919: LD_INT 3
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: LIST
71926: PUSH
71927: LD_VAR 0 1
71931: PUSH
71932: LD_INT 3
71934: MINUS
71935: PUSH
71936: LD_VAR 0 2
71940: PUSH
71941: LD_INT 3
71943: MINUS
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: LIST
71952: PUSH
71953: LD_VAR 0 1
71957: PUSH
71958: LD_INT 4
71960: MINUS
71961: PUSH
71962: LD_VAR 0 2
71966: PUSH
71967: LD_INT 1
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: LIST
71974: PUSH
71975: LD_VAR 0 1
71979: PUSH
71980: LD_VAR 0 2
71984: PUSH
71985: LD_INT 3
71987: PLUS
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: LIST
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_INT 4
72004: PLUS
72005: PUSH
72006: LD_VAR 0 2
72010: PUSH
72011: LD_INT 4
72013: PLUS
72014: PUSH
72015: LD_INT 5
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: ST_TO_ADDR
// end ; 2 :
72030: GO 72589
72032: LD_INT 2
72034: DOUBLE
72035: EQUAL
72036: IFTRUE 72040
72038: GO 72169
72040: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72041: LD_ADDR_VAR 0 5
72045: PUSH
72046: LD_VAR 0 1
72050: PUSH
72051: LD_VAR 0 2
72055: PUSH
72056: LD_INT 3
72058: MINUS
72059: PUSH
72060: LD_INT 3
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: LIST
72067: PUSH
72068: LD_VAR 0 1
72072: PUSH
72073: LD_INT 4
72075: PLUS
72076: PUSH
72077: LD_VAR 0 2
72081: PUSH
72082: LD_INT 4
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: LIST
72089: PUSH
72090: LD_VAR 0 1
72094: PUSH
72095: LD_VAR 0 2
72099: PUSH
72100: LD_INT 4
72102: PLUS
72103: PUSH
72104: LD_INT 0
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: LIST
72111: PUSH
72112: LD_VAR 0 1
72116: PUSH
72117: LD_INT 3
72119: MINUS
72120: PUSH
72121: LD_VAR 0 2
72125: PUSH
72126: LD_INT 1
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: LIST
72133: PUSH
72134: LD_VAR 0 1
72138: PUSH
72139: LD_INT 4
72141: MINUS
72142: PUSH
72143: LD_VAR 0 2
72147: PUSH
72148: LD_INT 4
72150: MINUS
72151: PUSH
72152: LD_INT 2
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: ST_TO_ADDR
// end ; 3 :
72167: GO 72589
72169: LD_INT 3
72171: DOUBLE
72172: EQUAL
72173: IFTRUE 72177
72175: GO 72310
72177: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72178: LD_ADDR_VAR 0 5
72182: PUSH
72183: LD_VAR 0 1
72187: PUSH
72188: LD_INT 3
72190: PLUS
72191: PUSH
72192: LD_VAR 0 2
72196: PUSH
72197: LD_INT 4
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: LIST
72204: PUSH
72205: LD_VAR 0 1
72209: PUSH
72210: LD_INT 4
72212: PLUS
72213: PUSH
72214: LD_VAR 0 2
72218: PUSH
72219: LD_INT 4
72221: PLUS
72222: PUSH
72223: LD_INT 5
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: PUSH
72231: LD_VAR 0 1
72235: PUSH
72236: LD_INT 4
72238: MINUS
72239: PUSH
72240: LD_VAR 0 2
72244: PUSH
72245: LD_INT 1
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: LIST
72252: PUSH
72253: LD_VAR 0 1
72257: PUSH
72258: LD_VAR 0 2
72262: PUSH
72263: LD_INT 4
72265: MINUS
72266: PUSH
72267: LD_INT 3
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 3
72282: MINUS
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 3
72291: MINUS
72292: PUSH
72293: LD_INT 2
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: LIST
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: ST_TO_ADDR
// end ; 4 :
72308: GO 72589
72310: LD_INT 4
72312: DOUBLE
72313: EQUAL
72314: IFTRUE 72318
72316: GO 72451
72318: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72319: LD_ADDR_VAR 0 5
72323: PUSH
72324: LD_VAR 0 1
72328: PUSH
72329: LD_VAR 0 2
72333: PUSH
72334: LD_INT 4
72336: PLUS
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: LIST
72345: PUSH
72346: LD_VAR 0 1
72350: PUSH
72351: LD_INT 3
72353: PLUS
72354: PUSH
72355: LD_VAR 0 2
72359: PUSH
72360: LD_INT 3
72362: PLUS
72363: PUSH
72364: LD_INT 5
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: LIST
72371: PUSH
72372: LD_VAR 0 1
72376: PUSH
72377: LD_INT 4
72379: PLUS
72380: PUSH
72381: LD_VAR 0 2
72385: PUSH
72386: LD_INT 4
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: LIST
72393: PUSH
72394: LD_VAR 0 1
72398: PUSH
72399: LD_VAR 0 2
72403: PUSH
72404: LD_INT 3
72406: MINUS
72407: PUSH
72408: LD_INT 3
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: LIST
72415: PUSH
72416: LD_VAR 0 1
72420: PUSH
72421: LD_INT 4
72423: MINUS
72424: PUSH
72425: LD_VAR 0 2
72429: PUSH
72430: LD_INT 4
72432: MINUS
72433: PUSH
72434: LD_INT 2
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: LIST
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: ST_TO_ADDR
// end ; 5 :
72449: GO 72589
72451: LD_INT 5
72453: DOUBLE
72454: EQUAL
72455: IFTRUE 72459
72457: GO 72588
72459: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72460: LD_ADDR_VAR 0 5
72464: PUSH
72465: LD_VAR 0 1
72469: PUSH
72470: LD_INT 4
72472: MINUS
72473: PUSH
72474: LD_VAR 0 2
72478: PUSH
72479: LD_INT 1
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: LIST
72486: PUSH
72487: LD_VAR 0 1
72491: PUSH
72492: LD_VAR 0 2
72496: PUSH
72497: LD_INT 4
72499: MINUS
72500: PUSH
72501: LD_INT 3
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: LIST
72508: PUSH
72509: LD_VAR 0 1
72513: PUSH
72514: LD_INT 4
72516: PLUS
72517: PUSH
72518: LD_VAR 0 2
72522: PUSH
72523: LD_INT 4
72525: PLUS
72526: PUSH
72527: LD_INT 5
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: PUSH
72535: LD_VAR 0 1
72539: PUSH
72540: LD_INT 3
72542: PLUS
72543: PUSH
72544: LD_VAR 0 2
72548: PUSH
72549: LD_INT 4
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: PUSH
72557: LD_VAR 0 1
72561: PUSH
72562: LD_VAR 0 2
72566: PUSH
72567: LD_INT 3
72569: PLUS
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: ST_TO_ADDR
// end ; end ;
72586: GO 72589
72588: POP
// result := list ;
72589: LD_ADDR_VAR 0 4
72593: PUSH
72594: LD_VAR 0 5
72598: ST_TO_ADDR
// end ;
72599: LD_VAR 0 4
72603: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72604: LD_INT 0
72606: PPUSH
72607: PPUSH
72608: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72609: LD_VAR 0 1
72613: NOT
72614: PUSH
72615: LD_VAR 0 2
72619: PUSH
72620: LD_INT 1
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: LD_INT 3
72628: PUSH
72629: LD_INT 4
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: IN
72638: NOT
72639: OR
72640: IFFALSE 72644
// exit ;
72642: GO 72736
// tmp := [ ] ;
72644: LD_ADDR_VAR 0 5
72648: PUSH
72649: EMPTY
72650: ST_TO_ADDR
// for i in units do
72651: LD_ADDR_VAR 0 4
72655: PUSH
72656: LD_VAR 0 1
72660: PUSH
72661: FOR_IN
72662: IFFALSE 72705
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72664: LD_ADDR_VAR 0 5
72668: PUSH
72669: LD_VAR 0 5
72673: PPUSH
72674: LD_VAR 0 5
72678: PUSH
72679: LD_INT 1
72681: PLUS
72682: PPUSH
72683: LD_VAR 0 4
72687: PPUSH
72688: LD_VAR 0 2
72692: PPUSH
72693: CALL_OW 259
72697: PPUSH
72698: CALL_OW 2
72702: ST_TO_ADDR
72703: GO 72661
72705: POP
72706: POP
// if not tmp then
72707: LD_VAR 0 5
72711: NOT
72712: IFFALSE 72716
// exit ;
72714: GO 72736
// result := SortListByListDesc ( units , tmp ) ;
72716: LD_ADDR_VAR 0 3
72720: PUSH
72721: LD_VAR 0 1
72725: PPUSH
72726: LD_VAR 0 5
72730: PPUSH
72731: CALL_OW 77
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 3
72740: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
72745: PPUSH
// result := false ;
72746: LD_ADDR_VAR 0 3
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// x := GetX ( building ) ;
72754: LD_ADDR_VAR 0 4
72758: PUSH
72759: LD_VAR 0 2
72763: PPUSH
72764: CALL_OW 250
72768: ST_TO_ADDR
// y := GetY ( building ) ;
72769: LD_ADDR_VAR 0 5
72773: PUSH
72774: LD_VAR 0 2
72778: PPUSH
72779: CALL_OW 251
72783: ST_TO_ADDR
// if not building or not x or not y then
72784: LD_VAR 0 2
72788: NOT
72789: PUSH
72790: LD_VAR 0 4
72794: NOT
72795: OR
72796: PUSH
72797: LD_VAR 0 5
72801: NOT
72802: OR
72803: IFFALSE 72807
// exit ;
72805: GO 72899
// if GetTaskList ( unit ) then
72807: LD_VAR 0 1
72811: PPUSH
72812: CALL_OW 437
72816: IFFALSE 72899
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72818: LD_STRING e
72820: PUSH
72821: LD_VAR 0 1
72825: PPUSH
72826: CALL_OW 437
72830: PUSH
72831: LD_INT 1
72833: ARRAY
72834: PUSH
72835: LD_INT 1
72837: ARRAY
72838: EQUAL
72839: PUSH
72840: LD_VAR 0 4
72844: PUSH
72845: LD_VAR 0 1
72849: PPUSH
72850: CALL_OW 437
72854: PUSH
72855: LD_INT 1
72857: ARRAY
72858: PUSH
72859: LD_INT 2
72861: ARRAY
72862: EQUAL
72863: AND
72864: PUSH
72865: LD_VAR 0 5
72869: PUSH
72870: LD_VAR 0 1
72874: PPUSH
72875: CALL_OW 437
72879: PUSH
72880: LD_INT 1
72882: ARRAY
72883: PUSH
72884: LD_INT 3
72886: ARRAY
72887: EQUAL
72888: AND
72889: IFFALSE 72899
// result := true end ;
72891: LD_ADDR_VAR 0 3
72895: PUSH
72896: LD_INT 1
72898: ST_TO_ADDR
// end ;
72899: LD_VAR 0 3
72903: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72904: LD_INT 0
72906: PPUSH
// result := false ;
72907: LD_ADDR_VAR 0 4
72911: PUSH
72912: LD_INT 0
72914: ST_TO_ADDR
// if GetTaskList ( unit ) then
72915: LD_VAR 0 1
72919: PPUSH
72920: CALL_OW 437
72924: IFFALSE 73007
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72926: LD_STRING M
72928: PUSH
72929: LD_VAR 0 1
72933: PPUSH
72934: CALL_OW 437
72938: PUSH
72939: LD_INT 1
72941: ARRAY
72942: PUSH
72943: LD_INT 1
72945: ARRAY
72946: EQUAL
72947: PUSH
72948: LD_VAR 0 2
72952: PUSH
72953: LD_VAR 0 1
72957: PPUSH
72958: CALL_OW 437
72962: PUSH
72963: LD_INT 1
72965: ARRAY
72966: PUSH
72967: LD_INT 2
72969: ARRAY
72970: EQUAL
72971: AND
72972: PUSH
72973: LD_VAR 0 3
72977: PUSH
72978: LD_VAR 0 1
72982: PPUSH
72983: CALL_OW 437
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: PUSH
72992: LD_INT 3
72994: ARRAY
72995: EQUAL
72996: AND
72997: IFFALSE 73007
// result := true ;
72999: LD_ADDR_VAR 0 4
73003: PUSH
73004: LD_INT 1
73006: ST_TO_ADDR
// end ; end ;
73007: LD_VAR 0 4
73011: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73012: LD_INT 0
73014: PPUSH
73015: PPUSH
73016: PPUSH
73017: PPUSH
// if not unit or not area then
73018: LD_VAR 0 1
73022: NOT
73023: PUSH
73024: LD_VAR 0 2
73028: NOT
73029: OR
73030: IFFALSE 73034
// exit ;
73032: GO 73198
// tmp := AreaToList ( area , i ) ;
73034: LD_ADDR_VAR 0 6
73038: PUSH
73039: LD_VAR 0 2
73043: PPUSH
73044: LD_VAR 0 5
73048: PPUSH
73049: CALL_OW 517
73053: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73054: LD_ADDR_VAR 0 5
73058: PUSH
73059: DOUBLE
73060: LD_INT 1
73062: DEC
73063: ST_TO_ADDR
73064: LD_VAR 0 6
73068: PUSH
73069: LD_INT 1
73071: ARRAY
73072: PUSH
73073: FOR_TO
73074: IFFALSE 73196
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73076: LD_ADDR_VAR 0 7
73080: PUSH
73081: LD_VAR 0 6
73085: PUSH
73086: LD_INT 1
73088: ARRAY
73089: PUSH
73090: LD_VAR 0 5
73094: ARRAY
73095: PUSH
73096: LD_VAR 0 6
73100: PUSH
73101: LD_INT 2
73103: ARRAY
73104: PUSH
73105: LD_VAR 0 5
73109: ARRAY
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73115: LD_VAR 0 7
73119: PUSH
73120: LD_INT 1
73122: ARRAY
73123: PPUSH
73124: LD_VAR 0 7
73128: PUSH
73129: LD_INT 2
73131: ARRAY
73132: PPUSH
73133: CALL_OW 428
73137: PUSH
73138: LD_INT 0
73140: EQUAL
73141: IFFALSE 73194
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73143: LD_VAR 0 1
73147: PPUSH
73148: LD_VAR 0 7
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: PPUSH
73157: LD_VAR 0 7
73161: PUSH
73162: LD_INT 2
73164: ARRAY
73165: PPUSH
73166: LD_VAR 0 3
73170: PPUSH
73171: CALL_OW 48
// result := IsPlaced ( unit ) ;
73175: LD_ADDR_VAR 0 4
73179: PUSH
73180: LD_VAR 0 1
73184: PPUSH
73185: CALL_OW 305
73189: ST_TO_ADDR
// exit ;
73190: POP
73191: POP
73192: GO 73198
// end ; end ;
73194: GO 73073
73196: POP
73197: POP
// end ;
73198: LD_VAR 0 4
73202: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73203: LD_INT 0
73205: PPUSH
73206: PPUSH
73207: PPUSH
// if not side or side > 8 then
73208: LD_VAR 0 1
73212: NOT
73213: PUSH
73214: LD_VAR 0 1
73218: PUSH
73219: LD_INT 8
73221: GREATER
73222: OR
73223: IFFALSE 73227
// exit ;
73225: GO 73414
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73227: LD_ADDR_VAR 0 4
73231: PUSH
73232: LD_INT 22
73234: PUSH
73235: LD_VAR 0 1
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 21
73246: PUSH
73247: LD_INT 3
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PPUSH
73258: CALL_OW 69
73262: ST_TO_ADDR
// if not tmp then
73263: LD_VAR 0 4
73267: NOT
73268: IFFALSE 73272
// exit ;
73270: GO 73414
// enable_addtolog := true ;
73272: LD_ADDR_OWVAR 81
73276: PUSH
73277: LD_INT 1
73279: ST_TO_ADDR
// AddToLog ( [ ) ;
73280: LD_STRING [
73282: PPUSH
73283: CALL_OW 561
// for i in tmp do
73287: LD_ADDR_VAR 0 3
73291: PUSH
73292: LD_VAR 0 4
73296: PUSH
73297: FOR_IN
73298: IFFALSE 73405
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73300: LD_STRING [
73302: PUSH
73303: LD_VAR 0 3
73307: PPUSH
73308: CALL_OW 266
73312: STR
73313: PUSH
73314: LD_STRING , 
73316: STR
73317: PUSH
73318: LD_VAR 0 3
73322: PPUSH
73323: CALL_OW 250
73327: STR
73328: PUSH
73329: LD_STRING , 
73331: STR
73332: PUSH
73333: LD_VAR 0 3
73337: PPUSH
73338: CALL_OW 251
73342: STR
73343: PUSH
73344: LD_STRING , 
73346: STR
73347: PUSH
73348: LD_VAR 0 3
73352: PPUSH
73353: CALL_OW 254
73357: STR
73358: PUSH
73359: LD_STRING , 
73361: STR
73362: PUSH
73363: LD_VAR 0 3
73367: PPUSH
73368: LD_INT 1
73370: PPUSH
73371: CALL_OW 268
73375: STR
73376: PUSH
73377: LD_STRING , 
73379: STR
73380: PUSH
73381: LD_VAR 0 3
73385: PPUSH
73386: LD_INT 2
73388: PPUSH
73389: CALL_OW 268
73393: STR
73394: PUSH
73395: LD_STRING ],
73397: STR
73398: PPUSH
73399: CALL_OW 561
// end ;
73403: GO 73297
73405: POP
73406: POP
// AddToLog ( ]; ) ;
73407: LD_STRING ];
73409: PPUSH
73410: CALL_OW 561
// end ;
73414: LD_VAR 0 2
73418: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73419: LD_INT 0
73421: PPUSH
73422: PPUSH
73423: PPUSH
73424: PPUSH
73425: PPUSH
// if not area or not rate or not max then
73426: LD_VAR 0 1
73430: NOT
73431: PUSH
73432: LD_VAR 0 2
73436: NOT
73437: OR
73438: PUSH
73439: LD_VAR 0 4
73443: NOT
73444: OR
73445: IFFALSE 73449
// exit ;
73447: GO 73641
// while 1 do
73449: LD_INT 1
73451: IFFALSE 73641
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73453: LD_ADDR_VAR 0 9
73457: PUSH
73458: LD_VAR 0 1
73462: PPUSH
73463: LD_INT 1
73465: PPUSH
73466: CALL_OW 287
73470: PUSH
73471: LD_INT 10
73473: MUL
73474: ST_TO_ADDR
// r := rate / 10 ;
73475: LD_ADDR_VAR 0 7
73479: PUSH
73480: LD_VAR 0 2
73484: PUSH
73485: LD_INT 10
73487: DIVREAL
73488: ST_TO_ADDR
// time := 1 1$00 ;
73489: LD_ADDR_VAR 0 8
73493: PUSH
73494: LD_INT 2100
73496: ST_TO_ADDR
// if amount < min then
73497: LD_VAR 0 9
73501: PUSH
73502: LD_VAR 0 3
73506: LESS
73507: IFFALSE 73525
// r := r * 2 else
73509: LD_ADDR_VAR 0 7
73513: PUSH
73514: LD_VAR 0 7
73518: PUSH
73519: LD_INT 2
73521: MUL
73522: ST_TO_ADDR
73523: GO 73551
// if amount > max then
73525: LD_VAR 0 9
73529: PUSH
73530: LD_VAR 0 4
73534: GREATER
73535: IFFALSE 73551
// r := r / 2 ;
73537: LD_ADDR_VAR 0 7
73541: PUSH
73542: LD_VAR 0 7
73546: PUSH
73547: LD_INT 2
73549: DIVREAL
73550: ST_TO_ADDR
// time := time / r ;
73551: LD_ADDR_VAR 0 8
73555: PUSH
73556: LD_VAR 0 8
73560: PUSH
73561: LD_VAR 0 7
73565: DIVREAL
73566: ST_TO_ADDR
// if time < 0 then
73567: LD_VAR 0 8
73571: PUSH
73572: LD_INT 0
73574: LESS
73575: IFFALSE 73592
// time := time * - 1 ;
73577: LD_ADDR_VAR 0 8
73581: PUSH
73582: LD_VAR 0 8
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: MUL
73591: ST_TO_ADDR
// wait ( time ) ;
73592: LD_VAR 0 8
73596: PPUSH
73597: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73601: LD_INT 35
73603: PPUSH
73604: LD_INT 875
73606: PPUSH
73607: CALL_OW 12
73611: PPUSH
73612: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73616: LD_INT 1
73618: PPUSH
73619: LD_INT 5
73621: PPUSH
73622: CALL_OW 12
73626: PPUSH
73627: LD_VAR 0 1
73631: PPUSH
73632: LD_INT 1
73634: PPUSH
73635: CALL_OW 55
// end ;
73639: GO 73449
// end ;
73641: LD_VAR 0 5
73645: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73646: LD_INT 0
73648: PPUSH
73649: PPUSH
73650: PPUSH
73651: PPUSH
73652: PPUSH
73653: PPUSH
73654: PPUSH
73655: PPUSH
// if not turrets or not factories then
73656: LD_VAR 0 1
73660: NOT
73661: PUSH
73662: LD_VAR 0 2
73666: NOT
73667: OR
73668: IFFALSE 73672
// exit ;
73670: GO 73979
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73672: LD_ADDR_VAR 0 10
73676: PUSH
73677: LD_INT 5
73679: PUSH
73680: LD_INT 6
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 2
73689: PUSH
73690: LD_INT 4
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 3
73699: PUSH
73700: LD_INT 5
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 24
73714: PUSH
73715: LD_INT 25
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 23
73724: PUSH
73725: LD_INT 27
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 42
73738: PUSH
73739: LD_INT 43
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 44
73748: PUSH
73749: LD_INT 46
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 45
73758: PUSH
73759: LD_INT 47
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: LIST
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: LIST
73775: ST_TO_ADDR
// result := [ ] ;
73776: LD_ADDR_VAR 0 3
73780: PUSH
73781: EMPTY
73782: ST_TO_ADDR
// for i in turrets do
73783: LD_ADDR_VAR 0 4
73787: PUSH
73788: LD_VAR 0 1
73792: PUSH
73793: FOR_IN
73794: IFFALSE 73977
// begin nat := GetNation ( i ) ;
73796: LD_ADDR_VAR 0 7
73800: PUSH
73801: LD_VAR 0 4
73805: PPUSH
73806: CALL_OW 248
73810: ST_TO_ADDR
// weapon := 0 ;
73811: LD_ADDR_VAR 0 8
73815: PUSH
73816: LD_INT 0
73818: ST_TO_ADDR
// if not nat then
73819: LD_VAR 0 7
73823: NOT
73824: IFFALSE 73828
// continue ;
73826: GO 73793
// for j in list [ nat ] do
73828: LD_ADDR_VAR 0 5
73832: PUSH
73833: LD_VAR 0 10
73837: PUSH
73838: LD_VAR 0 7
73842: ARRAY
73843: PUSH
73844: FOR_IN
73845: IFFALSE 73886
// if GetBWeapon ( i ) = j [ 1 ] then
73847: LD_VAR 0 4
73851: PPUSH
73852: CALL_OW 269
73856: PUSH
73857: LD_VAR 0 5
73861: PUSH
73862: LD_INT 1
73864: ARRAY
73865: EQUAL
73866: IFFALSE 73884
// begin weapon := j [ 2 ] ;
73868: LD_ADDR_VAR 0 8
73872: PUSH
73873: LD_VAR 0 5
73877: PUSH
73878: LD_INT 2
73880: ARRAY
73881: ST_TO_ADDR
// break ;
73882: GO 73886
// end ;
73884: GO 73844
73886: POP
73887: POP
// if not weapon then
73888: LD_VAR 0 8
73892: NOT
73893: IFFALSE 73897
// continue ;
73895: GO 73793
// for k in factories do
73897: LD_ADDR_VAR 0 6
73901: PUSH
73902: LD_VAR 0 2
73906: PUSH
73907: FOR_IN
73908: IFFALSE 73973
// begin weapons := AvailableWeaponList ( k ) ;
73910: LD_ADDR_VAR 0 9
73914: PUSH
73915: LD_VAR 0 6
73919: PPUSH
73920: CALL_OW 478
73924: ST_TO_ADDR
// if not weapons then
73925: LD_VAR 0 9
73929: NOT
73930: IFFALSE 73934
// continue ;
73932: GO 73907
// if weapon in weapons then
73934: LD_VAR 0 8
73938: PUSH
73939: LD_VAR 0 9
73943: IN
73944: IFFALSE 73971
// begin result := [ i , weapon ] ;
73946: LD_ADDR_VAR 0 3
73950: PUSH
73951: LD_VAR 0 4
73955: PUSH
73956: LD_VAR 0 8
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: ST_TO_ADDR
// exit ;
73965: POP
73966: POP
73967: POP
73968: POP
73969: GO 73979
// end ; end ;
73971: GO 73907
73973: POP
73974: POP
// end ;
73975: GO 73793
73977: POP
73978: POP
// end ;
73979: LD_VAR 0 3
73983: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73984: LD_INT 0
73986: PPUSH
// if not side or side > 8 then
73987: LD_VAR 0 3
73991: NOT
73992: PUSH
73993: LD_VAR 0 3
73997: PUSH
73998: LD_INT 8
74000: GREATER
74001: OR
74002: IFFALSE 74006
// exit ;
74004: GO 74065
// if not range then
74006: LD_VAR 0 4
74010: NOT
74011: IFFALSE 74022
// range := - 12 ;
74013: LD_ADDR_VAR 0 4
74017: PUSH
74018: LD_INT 12
74020: NEG
74021: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74022: LD_VAR 0 1
74026: PPUSH
74027: LD_VAR 0 2
74031: PPUSH
74032: LD_VAR 0 3
74036: PPUSH
74037: LD_VAR 0 4
74041: PPUSH
74042: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74046: LD_VAR 0 1
74050: PPUSH
74051: LD_VAR 0 2
74055: PPUSH
74056: LD_VAR 0 3
74060: PPUSH
74061: CALL_OW 331
// end ;
74065: LD_VAR 0 5
74069: RET
// export function Video ( mode ) ; begin
74070: LD_INT 0
74072: PPUSH
// ingame_video = mode ;
74073: LD_ADDR_OWVAR 52
74077: PUSH
74078: LD_VAR 0 1
74082: ST_TO_ADDR
// interface_hidden = mode ;
74083: LD_ADDR_OWVAR 54
74087: PUSH
74088: LD_VAR 0 1
74092: ST_TO_ADDR
// end ;
74093: LD_VAR 0 2
74097: RET
// export function Join ( array , element ) ; begin
74098: LD_INT 0
74100: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74101: LD_ADDR_VAR 0 3
74105: PUSH
74106: LD_VAR 0 1
74110: PPUSH
74111: LD_VAR 0 1
74115: PUSH
74116: LD_INT 1
74118: PLUS
74119: PPUSH
74120: LD_VAR 0 2
74124: PPUSH
74125: CALL_OW 1
74129: ST_TO_ADDR
// end ;
74130: LD_VAR 0 3
74134: RET
// export function JoinUnion ( array , element ) ; begin
74135: LD_INT 0
74137: PPUSH
// result := array union element ;
74138: LD_ADDR_VAR 0 3
74142: PUSH
74143: LD_VAR 0 1
74147: PUSH
74148: LD_VAR 0 2
74152: UNION
74153: ST_TO_ADDR
// end ;
74154: LD_VAR 0 3
74158: RET
// export function GetBehemoths ( side ) ; begin
74159: LD_INT 0
74161: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74162: LD_ADDR_VAR 0 2
74166: PUSH
74167: LD_INT 22
74169: PUSH
74170: LD_VAR 0 1
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 31
74181: PUSH
74182: LD_INT 25
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: PPUSH
74193: CALL_OW 69
74197: ST_TO_ADDR
// end ;
74198: LD_VAR 0 2
74202: RET
// export function Shuffle ( array ) ; var i , index ; begin
74203: LD_INT 0
74205: PPUSH
74206: PPUSH
74207: PPUSH
// result := [ ] ;
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: EMPTY
74214: ST_TO_ADDR
// if not array then
74215: LD_VAR 0 1
74219: NOT
74220: IFFALSE 74224
// exit ;
74222: GO 74323
// Randomize ;
74224: CALL_OW 10
// for i = array downto 1 do
74228: LD_ADDR_VAR 0 3
74232: PUSH
74233: DOUBLE
74234: LD_VAR 0 1
74238: INC
74239: ST_TO_ADDR
74240: LD_INT 1
74242: PUSH
74243: FOR_DOWNTO
74244: IFFALSE 74321
// begin index := rand ( 1 , array ) ;
74246: LD_ADDR_VAR 0 4
74250: PUSH
74251: LD_INT 1
74253: PPUSH
74254: LD_VAR 0 1
74258: PPUSH
74259: CALL_OW 12
74263: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74264: LD_ADDR_VAR 0 2
74268: PUSH
74269: LD_VAR 0 2
74273: PPUSH
74274: LD_VAR 0 2
74278: PUSH
74279: LD_INT 1
74281: PLUS
74282: PPUSH
74283: LD_VAR 0 1
74287: PUSH
74288: LD_VAR 0 4
74292: ARRAY
74293: PPUSH
74294: CALL_OW 2
74298: ST_TO_ADDR
// array := Delete ( array , index ) ;
74299: LD_ADDR_VAR 0 1
74303: PUSH
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_VAR 0 4
74313: PPUSH
74314: CALL_OW 3
74318: ST_TO_ADDR
// end ;
74319: GO 74243
74321: POP
74322: POP
// end ;
74323: LD_VAR 0 2
74327: RET
// export function GetBaseMaterials ( base ) ; begin
74328: LD_INT 0
74330: PPUSH
// result := [ 0 , 0 , 0 ] ;
74331: LD_ADDR_VAR 0 2
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: LD_INT 0
74341: PUSH
74342: LD_INT 0
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: LIST
74349: ST_TO_ADDR
// if not base then
74350: LD_VAR 0 1
74354: NOT
74355: IFFALSE 74359
// exit ;
74357: GO 74408
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74359: LD_ADDR_VAR 0 2
74363: PUSH
74364: LD_VAR 0 1
74368: PPUSH
74369: LD_INT 1
74371: PPUSH
74372: CALL_OW 275
74376: PUSH
74377: LD_VAR 0 1
74381: PPUSH
74382: LD_INT 2
74384: PPUSH
74385: CALL_OW 275
74389: PUSH
74390: LD_VAR 0 1
74394: PPUSH
74395: LD_INT 3
74397: PPUSH
74398: CALL_OW 275
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: ST_TO_ADDR
// end ;
74408: LD_VAR 0 2
74412: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74413: LD_INT 0
74415: PPUSH
74416: PPUSH
// result := array ;
74417: LD_ADDR_VAR 0 3
74421: PUSH
74422: LD_VAR 0 1
74426: ST_TO_ADDR
// if size > 0 then
74427: LD_VAR 0 2
74431: PUSH
74432: LD_INT 0
74434: GREATER
74435: IFFALSE 74481
// for i := array downto size do
74437: LD_ADDR_VAR 0 4
74441: PUSH
74442: DOUBLE
74443: LD_VAR 0 1
74447: INC
74448: ST_TO_ADDR
74449: LD_VAR 0 2
74453: PUSH
74454: FOR_DOWNTO
74455: IFFALSE 74479
// result := Delete ( result , result ) ;
74457: LD_ADDR_VAR 0 3
74461: PUSH
74462: LD_VAR 0 3
74466: PPUSH
74467: LD_VAR 0 3
74471: PPUSH
74472: CALL_OW 3
74476: ST_TO_ADDR
74477: GO 74454
74479: POP
74480: POP
// end ;
74481: LD_VAR 0 3
74485: RET
// export function ComExit ( unit ) ; var tmp ; begin
74486: LD_INT 0
74488: PPUSH
74489: PPUSH
// if not IsInUnit ( unit ) then
74490: LD_VAR 0 1
74494: PPUSH
74495: CALL_OW 310
74499: NOT
74500: IFFALSE 74504
// exit ;
74502: GO 74564
// tmp := IsInUnit ( unit ) ;
74504: LD_ADDR_VAR 0 3
74508: PUSH
74509: LD_VAR 0 1
74513: PPUSH
74514: CALL_OW 310
74518: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74519: LD_VAR 0 3
74523: PPUSH
74524: CALL_OW 247
74528: PUSH
74529: LD_INT 2
74531: EQUAL
74532: IFFALSE 74545
// ComExitVehicle ( unit ) else
74534: LD_VAR 0 1
74538: PPUSH
74539: CALL_OW 121
74543: GO 74554
// ComExitBuilding ( unit ) ;
74545: LD_VAR 0 1
74549: PPUSH
74550: CALL_OW 122
// result := tmp ;
74554: LD_ADDR_VAR 0 2
74558: PUSH
74559: LD_VAR 0 3
74563: ST_TO_ADDR
// end ;
74564: LD_VAR 0 2
74568: RET
// export function ResetHc ; begin
74569: LD_INT 0
74571: PPUSH
// InitHc ;
74572: CALL_OW 19
// hc_importance := 0 ;
74576: LD_ADDR_OWVAR 32
74580: PUSH
74581: LD_INT 0
74583: ST_TO_ADDR
// end ;
74584: LD_VAR 0 1
74588: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74589: LD_INT 0
74591: PPUSH
74592: PPUSH
74593: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74594: LD_ADDR_VAR 0 6
74598: PUSH
74599: LD_VAR 0 1
74603: PUSH
74604: LD_VAR 0 3
74608: PLUS
74609: PUSH
74610: LD_INT 2
74612: DIV
74613: ST_TO_ADDR
// if _x < 0 then
74614: LD_VAR 0 6
74618: PUSH
74619: LD_INT 0
74621: LESS
74622: IFFALSE 74639
// _x := _x * - 1 ;
74624: LD_ADDR_VAR 0 6
74628: PUSH
74629: LD_VAR 0 6
74633: PUSH
74634: LD_INT 1
74636: NEG
74637: MUL
74638: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74639: LD_ADDR_VAR 0 7
74643: PUSH
74644: LD_VAR 0 2
74648: PUSH
74649: LD_VAR 0 4
74653: PLUS
74654: PUSH
74655: LD_INT 2
74657: DIV
74658: ST_TO_ADDR
// if _y < 0 then
74659: LD_VAR 0 7
74663: PUSH
74664: LD_INT 0
74666: LESS
74667: IFFALSE 74684
// _y := _y * - 1 ;
74669: LD_ADDR_VAR 0 7
74673: PUSH
74674: LD_VAR 0 7
74678: PUSH
74679: LD_INT 1
74681: NEG
74682: MUL
74683: ST_TO_ADDR
// result := [ _x , _y ] ;
74684: LD_ADDR_VAR 0 5
74688: PUSH
74689: LD_VAR 0 6
74693: PUSH
74694: LD_VAR 0 7
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: ST_TO_ADDR
// end ;
74703: LD_VAR 0 5
74707: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74708: LD_INT 0
74710: PPUSH
74711: PPUSH
74712: PPUSH
74713: PPUSH
// task := GetTaskList ( unit ) ;
74714: LD_ADDR_VAR 0 7
74718: PUSH
74719: LD_VAR 0 1
74723: PPUSH
74724: CALL_OW 437
74728: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74729: LD_VAR 0 7
74733: NOT
74734: PUSH
74735: LD_VAR 0 1
74739: PPUSH
74740: LD_VAR 0 2
74744: PPUSH
74745: CALL_OW 308
74749: NOT
74750: AND
74751: IFFALSE 74755
// exit ;
74753: GO 74873
// if IsInArea ( unit , area ) then
74755: LD_VAR 0 1
74759: PPUSH
74760: LD_VAR 0 2
74764: PPUSH
74765: CALL_OW 308
74769: IFFALSE 74787
// begin ComMoveToArea ( unit , goAway ) ;
74771: LD_VAR 0 1
74775: PPUSH
74776: LD_VAR 0 3
74780: PPUSH
74781: CALL_OW 113
// exit ;
74785: GO 74873
// end ; if task [ 1 ] [ 1 ] <> M then
74787: LD_VAR 0 7
74791: PUSH
74792: LD_INT 1
74794: ARRAY
74795: PUSH
74796: LD_INT 1
74798: ARRAY
74799: PUSH
74800: LD_STRING M
74802: NONEQUAL
74803: IFFALSE 74807
// exit ;
74805: GO 74873
// x := task [ 1 ] [ 2 ] ;
74807: LD_ADDR_VAR 0 5
74811: PUSH
74812: LD_VAR 0 7
74816: PUSH
74817: LD_INT 1
74819: ARRAY
74820: PUSH
74821: LD_INT 2
74823: ARRAY
74824: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74825: LD_ADDR_VAR 0 6
74829: PUSH
74830: LD_VAR 0 7
74834: PUSH
74835: LD_INT 1
74837: ARRAY
74838: PUSH
74839: LD_INT 3
74841: ARRAY
74842: ST_TO_ADDR
// if InArea ( x , y , area ) then
74843: LD_VAR 0 5
74847: PPUSH
74848: LD_VAR 0 6
74852: PPUSH
74853: LD_VAR 0 2
74857: PPUSH
74858: CALL_OW 309
74862: IFFALSE 74873
// ComStop ( unit ) ;
74864: LD_VAR 0 1
74868: PPUSH
74869: CALL_OW 141
// end ;
74873: LD_VAR 0 4
74877: RET
// export function Abs ( value ) ; begin
74878: LD_INT 0
74880: PPUSH
// result := value ;
74881: LD_ADDR_VAR 0 2
74885: PUSH
74886: LD_VAR 0 1
74890: ST_TO_ADDR
// if value < 0 then
74891: LD_VAR 0 1
74895: PUSH
74896: LD_INT 0
74898: LESS
74899: IFFALSE 74916
// result := value * - 1 ;
74901: LD_ADDR_VAR 0 2
74905: PUSH
74906: LD_VAR 0 1
74910: PUSH
74911: LD_INT 1
74913: NEG
74914: MUL
74915: ST_TO_ADDR
// end ;
74916: LD_VAR 0 2
74920: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74921: LD_INT 0
74923: PPUSH
74924: PPUSH
74925: PPUSH
74926: PPUSH
74927: PPUSH
74928: PPUSH
74929: PPUSH
74930: PPUSH
// if not unit or not building then
74931: LD_VAR 0 1
74935: NOT
74936: PUSH
74937: LD_VAR 0 2
74941: NOT
74942: OR
74943: IFFALSE 74947
// exit ;
74945: GO 75173
// x := GetX ( building ) ;
74947: LD_ADDR_VAR 0 4
74951: PUSH
74952: LD_VAR 0 2
74956: PPUSH
74957: CALL_OW 250
74961: ST_TO_ADDR
// y := GetY ( building ) ;
74962: LD_ADDR_VAR 0 6
74966: PUSH
74967: LD_VAR 0 2
74971: PPUSH
74972: CALL_OW 251
74976: ST_TO_ADDR
// d := GetDir ( building ) ;
74977: LD_ADDR_VAR 0 8
74981: PUSH
74982: LD_VAR 0 2
74986: PPUSH
74987: CALL_OW 254
74991: ST_TO_ADDR
// r := 4 ;
74992: LD_ADDR_VAR 0 9
74996: PUSH
74997: LD_INT 4
74999: ST_TO_ADDR
// for i := 1 to 5 do
75000: LD_ADDR_VAR 0 10
75004: PUSH
75005: DOUBLE
75006: LD_INT 1
75008: DEC
75009: ST_TO_ADDR
75010: LD_INT 5
75012: PUSH
75013: FOR_TO
75014: IFFALSE 75171
// begin _x := ShiftX ( x , d , r + i ) ;
75016: LD_ADDR_VAR 0 5
75020: PUSH
75021: LD_VAR 0 4
75025: PPUSH
75026: LD_VAR 0 8
75030: PPUSH
75031: LD_VAR 0 9
75035: PUSH
75036: LD_VAR 0 10
75040: PLUS
75041: PPUSH
75042: CALL_OW 272
75046: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75047: LD_ADDR_VAR 0 7
75051: PUSH
75052: LD_VAR 0 6
75056: PPUSH
75057: LD_VAR 0 8
75061: PPUSH
75062: LD_VAR 0 9
75066: PUSH
75067: LD_VAR 0 10
75071: PLUS
75072: PPUSH
75073: CALL_OW 273
75077: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75078: LD_VAR 0 5
75082: PPUSH
75083: LD_VAR 0 7
75087: PPUSH
75088: CALL_OW 488
75092: PUSH
75093: LD_VAR 0 5
75097: PPUSH
75098: LD_VAR 0 7
75102: PPUSH
75103: CALL_OW 428
75107: PPUSH
75108: CALL_OW 247
75112: PUSH
75113: LD_INT 3
75115: PUSH
75116: LD_INT 2
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: IN
75123: NOT
75124: AND
75125: IFFALSE 75169
// begin ComMoveXY ( unit , _x , _y ) ;
75127: LD_VAR 0 1
75131: PPUSH
75132: LD_VAR 0 5
75136: PPUSH
75137: LD_VAR 0 7
75141: PPUSH
75142: CALL_OW 111
// result := [ _x , _y ] ;
75146: LD_ADDR_VAR 0 3
75150: PUSH
75151: LD_VAR 0 5
75155: PUSH
75156: LD_VAR 0 7
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: ST_TO_ADDR
// exit ;
75165: POP
75166: POP
75167: GO 75173
// end ; end ;
75169: GO 75013
75171: POP
75172: POP
// end ; end_of_file
75173: LD_VAR 0 3
75177: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75178: LD_VAR 0 1
75182: PUSH
75183: LD_INT 200
75185: DOUBLE
75186: GREATEREQUAL
75187: IFFALSE 75195
75189: LD_INT 299
75191: DOUBLE
75192: LESSEQUAL
75193: IFTRUE 75197
75195: GO 75229
75197: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75198: LD_VAR 0 1
75202: PPUSH
75203: LD_VAR 0 2
75207: PPUSH
75208: LD_VAR 0 3
75212: PPUSH
75213: LD_VAR 0 4
75217: PPUSH
75218: LD_VAR 0 5
75222: PPUSH
75223: CALL 34090 0 5
75227: GO 75306
75229: LD_INT 300
75231: DOUBLE
75232: GREATEREQUAL
75233: IFFALSE 75241
75235: LD_INT 399
75237: DOUBLE
75238: LESSEQUAL
75239: IFTRUE 75243
75241: GO 75305
75243: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75244: LD_VAR 0 1
75248: PPUSH
75249: LD_VAR 0 2
75253: PPUSH
75254: LD_VAR 0 3
75258: PPUSH
75259: LD_VAR 0 4
75263: PPUSH
75264: LD_VAR 0 5
75268: PPUSH
75269: LD_VAR 0 6
75273: PPUSH
75274: LD_VAR 0 7
75278: PPUSH
75279: LD_VAR 0 8
75283: PPUSH
75284: LD_VAR 0 9
75288: PPUSH
75289: LD_VAR 0 10
75293: PPUSH
75294: LD_VAR 0 11
75298: PPUSH
75299: CALL 31996 0 11
75303: GO 75306
75305: POP
// end ;
75306: PPOPN 11
75308: END
