// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 65 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 52462 0 9
// PrepareRussian ;
  43: CALL 395 0 0
// Action ;
  47: CALL 6204 0 0
// if debug then
  51: LD_EXP 1
  55: IFFALSE 64
// FogOff ( 3 ) ;
  57: LD_INT 3
  59: PPUSH
  60: CALL_OW 344
// end ;
  64: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  76: LD_ADDR_EXP 2
  80: PUSH
  81: LD_STRING 01_
  83: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  84: LD_ADDR_EXP 3
  88: PUSH
  89: LD_STRING 02_
  91: ST_TO_ADDR
// beriaVisited := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kurinDontWannaTalk := false ;
 100: LD_ADDR_EXP 5
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// kirovHasTank := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// blockNorth := true ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// hasLab := false ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasWorkshop := false ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// hasToBuildTank := false ;
 140: LD_ADDR_EXP 11
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// hasTank := false ;
 148: LD_ADDR_EXP 12
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 156: LD_ADDR_EXP 8
 160: PUSH
 161: LD_INT 60
 163: ST_TO_ADDR
// allianceAttacked := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// hasAllTanks := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// vehCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// vehCaptured := false ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// americanTrap := false ;
 196: LD_ADDR_EXP 17
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// belkovTrapped := false ;
 204: LD_ADDR_EXP 18
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// belkovDied := false ;
 212: LD_ADDR_EXP 19
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// belkovSaved := false ;
 220: LD_ADDR_EXP 28
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// westOutpostDiscovered := false ;
 228: LD_ADDR_EXP 20
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 236: LD_ADDR_EXP 21
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// westOutpostDestroyed := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 252: LD_ADDR_EXP 23
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 260: LD_ADDR_EXP 24
 264: PUSH
 265: LD_INT 0
 267: ST_TO_ADDR
// reinforcementsGained := false ;
 268: LD_ADDR_EXP 25
 272: PUSH
 273: LD_INT 0
 275: ST_TO_ADDR
// allMapPointsSpotted := false ;
 276: LD_ADDR_EXP 26
 280: PUSH
 281: LD_INT 0
 283: ST_TO_ADDR
// mapSpotCounter := 0 ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 292: LD_ADDR_EXP 29
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 300: LD_ADDR_EXP 30
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// initiative := false ;
 308: LD_ADDR_EXP 31
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// belkovBrother := false ;
 316: LD_ADDR_EXP 32
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 324: LD_ADDR_EXP 33
 328: PUSH
 329: LD_INT 1
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 1
 336: RET
// every 0 0$1 trigger vehCounter >= 5 do
 337: LD_EXP 15
 341: PUSH
 342: LD_INT 5
 344: GREATEREQUAL
 345: IFFALSE 357
 347: GO 349
 349: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 350: LD_STRING ACH_WORKSHOP
 352: PPUSH
 353: CALL_OW 543
 357: END
// every 0 0$1 trigger vehCaptured do
 358: LD_EXP 16
 362: IFFALSE 374
 364: GO 366
 366: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 367: LD_STRING ACH_RETAKE
 369: PPUSH
 370: CALL_OW 543
 374: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 375: LD_INT 193
 377: PPUSH
 378: CALL_OW 301
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 387: LD_STRING ACH_DEPOT
 389: PPUSH
 390: CALL_OW 543
 394: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un , additional ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// uc_side := 6 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 6
 410: ST_TO_ADDR
// uc_nation := 3 ;
 411: LD_ADDR_OWVAR 21
 415: PUSH
 416: LD_INT 3
 418: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 419: LD_INT 71
 421: PPUSH
 422: LD_STRING kirov
 424: PPUSH
 425: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 429: LD_ADDR_EXP 38
 433: PUSH
 434: LD_STRING Kurin
 436: PPUSH
 437: CALL_OW 25
 441: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 442: LD_EXP 38
 446: PPUSH
 447: LD_INT 117
 449: PPUSH
 450: LD_INT 108
 452: PPUSH
 453: LD_INT 0
 455: PPUSH
 456: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 460: LD_EXP 38
 464: PPUSH
 465: LD_INT 2
 467: PPUSH
 468: CALL 59133 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 472: LD_ADDR_EXP 39
 476: PUSH
 477: LD_STRING Kovalyuk
 479: PPUSH
 480: CALL_OW 25
 484: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 485: LD_EXP 39
 489: PPUSH
 490: LD_INT 71
 492: PPUSH
 493: CALL_OW 52
// additional := ( 3 - Count ( CreateCharacterSet ( 01_belkovTeam ) ) ) ;
 497: LD_ADDR_VAR 0 6
 501: PUSH
 502: LD_INT 3
 504: PUSH
 505: LD_STRING 01_belkovTeam
 507: PPUSH
 508: CALL_OW 31
 512: PPUSH
 513: CALL 19845 0 1
 517: MINUS
 518: ST_TO_ADDR
// if additional < 0 then
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 0
 526: LESS
 527: IFFALSE 537
// additional := 0 ;
 529: LD_ADDR_VAR 0 6
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// tmp := [ [ ru2_arm1 , class_soldier , 2 + additional ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: LD_INT 95
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_VAR 0 6
 555: PLUS
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 209
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 83
 578: PUSH
 579: LD_INT 4
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 71
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 71
 606: PUSH
 607: LD_INT 3
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// InitHC_All ( ) ;
 625: CALL_OW 584
// belkovBrother := false ;
 629: LD_ADDR_EXP 32
 633: PUSH
 634: LD_INT 0
 636: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 637: LD_EXP 2
 641: PUSH
 642: LD_STRING Belkov
 644: STR
 645: PPUSH
 646: CALL_OW 28
 650: NOT
 651: IFFALSE 660
 653: PUSH
 654: LD_EXP 1
 658: NOT
 659: AND
 660: IFFALSE 697
// begin Belkov := NewCharacter ( Belkov2 ) ;
 662: LD_ADDR_EXP 36
 666: PUSH
 667: LD_STRING Belkov2
 669: PPUSH
 670: CALL_OW 25
 674: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 675: LD_EXP 36
 679: PPUSH
 680: LD_INT 71
 682: PPUSH
 683: CALL_OW 52
// belkovBrother := true ;
 687: LD_ADDR_EXP 32
 691: PUSH
 692: LD_INT 1
 694: ST_TO_ADDR
// end else
 695: GO 763
// begin un := NewCharacter ( Belkov2 ) ;
 697: LD_ADDR_VAR 0 5
 701: PUSH
 702: LD_STRING Belkov2
 704: PPUSH
 705: CALL_OW 25
 709: ST_TO_ADDR
// SetTag ( un , tBelkov ) ;
 710: LD_VAR 0 5
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 109
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 722: LD_ADDR_EXP 43
 726: PUSH
 727: LD_EXP 43
 731: PPUSH
 732: LD_EXP 43
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_VAR 0 5
 745: PPUSH
 746: CALL_OW 1
 750: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 751: LD_VAR 0 5
 755: PPUSH
 756: LD_INT 209
 758: PPUSH
 759: CALL_OW 52
// end ; for i in tmp do
 763: LD_ADDR_VAR 0 2
 767: PUSH
 768: LD_VAR 0 4
 772: PUSH
 773: FOR_IN
 774: IFFALSE 880
// for j := 1 to i [ 3 ] do
 776: LD_ADDR_VAR 0 3
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 3
 793: ARRAY
 794: PUSH
 795: FOR_TO
 796: IFFALSE 876
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_VAR 0 2
 805: PUSH
 806: LD_INT 2
 808: ARRAY
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 380
// un := CreateHuman ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 827: LD_VAR 0 5
 831: PPUSH
 832: LD_VAR 0 2
 836: PUSH
 837: LD_INT 1
 839: ARRAY
 840: PPUSH
 841: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 845: LD_ADDR_EXP 43
 849: PUSH
 850: LD_EXP 43
 854: PPUSH
 855: LD_EXP 43
 859: PUSH
 860: LD_INT 1
 862: PLUS
 863: PPUSH
 864: LD_VAR 0 5
 868: PPUSH
 869: CALL_OW 1
 873: ST_TO_ADDR
// end ;
 874: GO 795
 876: POP
 877: POP
 878: GO 773
 880: POP
 881: POP
// SetBName ( beria , beria ) ;
 882: LD_INT 106
 884: PPUSH
 885: LD_STRING beria
 887: PPUSH
 888: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 892: LD_ADDR_EXP 40
 896: PUSH
 897: LD_STRING Platonov
 899: PPUSH
 900: CALL_OW 25
 904: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 905: LD_EXP 40
 909: PPUSH
 910: LD_INT 66
 912: PPUSH
 913: LD_INT 99
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 923: LD_EXP 40
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL 59133 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 935: LD_ADDR_EXP 41
 939: PUSH
 940: LD_STRING Kuklajs
 942: PPUSH
 943: CALL_OW 25
 947: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 948: LD_ADDR_EXP 42
 952: PUSH
 953: LD_STRING Benko
 955: PPUSH
 956: CALL_OW 25
 960: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 961: LD_EXP 41
 965: PPUSH
 966: LD_INT 76
 968: PPUSH
 969: LD_INT 99
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 979: LD_EXP 42
 983: PPUSH
 984: LD_INT 68
 986: PPUSH
 987: LD_INT 88
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 997: LD_EXP 41
1001: PUSH
1002: LD_EXP 42
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
1015: LD_ADDR_EXP 44
1019: PUSH
1020: LD_EXP 44
1024: PPUSH
1025: LD_EXP 44
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: PPUSH
1034: LD_EXP 41
1038: PPUSH
1039: CALL_OW 1
1043: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
1044: LD_ADDR_EXP 44
1048: PUSH
1049: LD_EXP 44
1053: PPUSH
1054: LD_EXP 44
1058: PUSH
1059: LD_INT 1
1061: PLUS
1062: PPUSH
1063: LD_EXP 42
1067: PPUSH
1068: CALL_OW 1
1072: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
1073: LD_ADDR_VAR 0 4
1077: PUSH
1078: LD_INT 63
1080: PUSH
1081: LD_INT 86
1083: PUSH
1084: LD_INT 0
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 74
1094: PUSH
1095: LD_INT 94
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 77
1108: PUSH
1109: LD_INT 103
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: ST_TO_ADDR
// for i in tmp do
1125: LD_ADDR_VAR 0 2
1129: PUSH
1130: LD_VAR 0 4
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1263
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// un := CreateHuman ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1182: LD_VAR 0 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 3
1194: ARRAY
1195: PPUSH
1196: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 2
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PPUSH
1223: CALL_OW 428
1227: PPUSH
1228: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1232: LD_ADDR_EXP 44
1236: PUSH
1237: LD_EXP 44
1241: PPUSH
1242: LD_EXP 44
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 1
1260: ST_TO_ADDR
// end ;
1261: GO 1135
1263: POP
1264: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1265: LD_EXP 2
1269: PUSH
1270: LD_STRING Gnyevko
1272: STR
1273: PPUSH
1274: CALL_OW 28
1278: NOT
1279: IFFALSE 1288
1281: PUSH
1282: LD_EXP 1
1286: NOT
1287: AND
1288: IFFALSE 1315
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 2
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1303: CALL_OW 44
1307: PPUSH
1308: LD_INT 106
1310: PPUSH
1311: CALL_OW 52
// end ; end ;
1315: LD_VAR 0 1
1319: RET
// export function PrepareBurlak ; var i ; begin
1320: LD_INT 0
1322: PPUSH
1323: PPUSH
// uc_side := 3 ;
1324: LD_ADDR_OWVAR 20
1328: PUSH
1329: LD_INT 3
1331: ST_TO_ADDR
// uc_nation := 3 ;
1332: LD_ADDR_OWVAR 21
1336: PUSH
1337: LD_INT 3
1339: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1340: LD_ADDR_EXP 34
1344: PUSH
1345: LD_STRING Burlak
1347: PPUSH
1348: LD_EXP 1
1352: NOT
1353: PPUSH
1354: LD_EXP 2
1358: PPUSH
1359: CALL 17621 0 3
1363: ST_TO_ADDR
// uc_side := 6 ;
1364: LD_ADDR_OWVAR 20
1368: PUSH
1369: LD_INT 6
1371: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1372: LD_ADDR_EXP 35
1376: PUSH
1377: LD_STRING Gnyevko
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 17621 0 3
1395: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1396: LD_ADDR_EXP 37
1400: PUSH
1401: LD_STRING Kirilenkova
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 17621 0 3
1419: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1420: LD_ADDR_EXP 36
1424: PUSH
1425: LD_STRING Belkov
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 17621 0 3
1443: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_belkovTeam ) ;
1444: LD_ADDR_EXP 45
1448: PUSH
1449: LD_STRING 01_belkovTeam
1451: PPUSH
1452: CALL_OW 31
1456: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1457: LD_ADDR_VAR 0 1
1461: PUSH
1462: LD_EXP 34
1466: PUSH
1467: LD_EXP 35
1471: PUSH
1472: LD_EXP 37
1476: PUSH
1477: LD_EXP 36
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_EXP 45
1492: UNION
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 1
1498: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1499: LD_EXP 4
1503: IFFALSE 1521
1505: PUSH
1506: LD_INT 47
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: CALL_OW 321
1516: PUSH
1517: LD_INT 2
1519: EQUAL
1520: AND
1521: IFFALSE 1748
1523: GO 1525
1525: DISABLE
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1530: LD_ADDR_VAR 0 1
1534: PUSH
1535: LD_EXP 43
1539: PPUSH
1540: LD_INT 25
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 72
1554: ST_TO_ADDR
// if not tmp then
1555: LD_VAR 0 1
1559: NOT
1560: IFFALSE 1564
// exit ;
1562: GO 1748
// wait ( 0 0$5 ) ;
1564: LD_INT 175
1566: PPUSH
1567: CALL_OW 67
// ComExit ( tmp ) ;
1571: LD_VAR 0 1
1575: PPUSH
1576: CALL 56209 0 1
// for i := 1 to 2 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 2
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1637
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 71
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1611: LD_VAR 0 1
1615: PPUSH
1616: LD_INT 121
1618: PPUSH
1619: LD_INT 111
1621: PPUSH
1622: CALL_OW 171
// AddComUnload ( tmp ) ;
1626: LD_VAR 0 1
1630: PPUSH
1631: CALL_OW 219
// end ;
1635: GO 1593
1637: POP
1638: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1639: LD_VAR 0 1
1643: PPUSH
1644: LD_INT 2
1646: PPUSH
1647: LD_INT 113
1649: PPUSH
1650: LD_INT 113
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1660: LD_INT 83
1662: PPUSH
1663: LD_INT 46
1665: PPUSH
1666: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1670: LD_INT 83
1672: PPUSH
1673: LD_INT 47
1675: PPUSH
1676: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1680: LD_INT 83
1682: PPUSH
1683: LD_INT 48
1685: PPUSH
1686: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1690: LD_VAR 0 1
1694: PPUSH
1695: LD_INT 26
1697: PPUSH
1698: LD_INT 116
1700: PPUSH
1701: LD_INT 98
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1711: LD_INT 35
1713: PPUSH
1714: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_INT 60
1725: PUSH
1726: EMPTY
1727: LIST
1728: PPUSH
1729: CALL_OW 72
1733: NOT
1734: IFFALSE 1711
// ComEnterUnit ( tmp , kirov ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_INT 71
1743: PPUSH
1744: CALL_OW 120
// end ;
1748: PPOPN 2
1750: END
// export function BelkovAttackScript ; var i , un , brother , belkovTank , mech , tmp , fuel ; begin
1751: LD_INT 0
1753: PPUSH
1754: PPUSH
1755: PPUSH
1756: PPUSH
1757: PPUSH
1758: PPUSH
1759: PPUSH
1760: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1761: LD_ADDR_VAR 0 5
1765: PUSH
1766: LD_INT 22
1768: PUSH
1769: LD_INT 6
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 21
1778: PUSH
1779: LD_INT 2
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PPUSH
1790: CALL_OW 69
1794: ST_TO_ADDR
// if not belkovTank then
1795: LD_VAR 0 5
1799: NOT
1800: IFFALSE 1893
// begin uc_side := 6 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 6
1809: ST_TO_ADDR
// uc_nation := 3 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 3
1817: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1818: LD_INT 21
1820: PPUSH
1821: LD_INT 1
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 42
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 22641 0 5
// belkovTank := CreateVehicle ;
1837: LD_ADDR_VAR 0 5
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1859: LD_VAR 0 5
1863: PPUSH
1864: LD_INT 127
1866: PPUSH
1867: LD_INT 118
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1877: LD_EXP 36
1881: PPUSH
1882: LD_VAR 0 5
1886: PPUSH
1887: CALL_OW 120
// end else
1891: GO 1907
// begin belkovTank := belkovTank [ 1 ] ;
1893: LD_ADDR_VAR 0 5
1897: PUSH
1898: LD_VAR 0 5
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1907: LD_VAR 0 5
1911: PPUSH
1912: LD_INT 71
1914: PPUSH
1915: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1919: LD_VAR 0 5
1923: PPUSH
1924: LD_INT 71
1926: PPUSH
1927: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1931: LD_VAR 0 5
1935: PPUSH
1936: CALL_OW 256
1940: PUSH
1941: LD_INT 1000
1943: LESS
1944: IFFALSE 2057
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_EXP 43
1955: PPUSH
1956: LD_INT 25
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: ST_TO_ADDR
// if not mech then
1971: LD_VAR 0 6
1975: NOT
1976: IFFALSE 1992
// SetLives ( belkovTank , 1000 ) else
1978: LD_VAR 0 5
1982: PPUSH
1983: LD_INT 1000
1985: PPUSH
1986: CALL_OW 234
1990: GO 2057
// begin ComExit ( mech ) ;
1992: LD_VAR 0 6
1996: PPUSH
1997: CALL 56209 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
2001: LD_VAR 0 6
2005: PPUSH
2006: LD_VAR 0 5
2010: PPUSH
2011: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2015: LD_VAR 0 6
2019: PPUSH
2020: LD_INT 22
2022: PUSH
2023: LD_INT 6
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 69
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
2057: LD_INT 70
2059: PPUSH
2060: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
2064: LD_VAR 0 5
2068: PPUSH
2069: CALL_OW 256
2073: PUSH
2074: LD_INT 1000
2076: EQUAL
2077: IFFALSE 2057
// if mech then
2079: LD_VAR 0 6
2083: IFFALSE 2127
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2085: LD_VAR 0 6
2089: PPUSH
2090: LD_INT 22
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 69
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2127: LD_EXP 36
2131: PPUSH
2132: LD_INT 107
2134: PPUSH
2135: LD_INT 104
2137: PPUSH
2138: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2142: LD_EXP 36
2146: PPUSH
2147: LD_INT 95
2149: PPUSH
2150: LD_INT 101
2152: PPUSH
2153: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2157: LD_EXP 36
2161: PPUSH
2162: LD_INT 89
2164: PPUSH
2165: LD_INT 100
2167: PPUSH
2168: CALL_OW 171
// wait ( 0 0$2 ) ;
2172: LD_INT 70
2174: PPUSH
2175: CALL_OW 67
// brother := FilterAllUnits ( [ [ f_side , 6 ] , [ f_tag , tBelkov ] , [ f_class , class_soldier ] ] ) ;
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 6
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 120
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 25
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PPUSH
2219: CALL_OW 69
2223: ST_TO_ADDR
// if brother then
2224: LD_VAR 0 4
2228: IFFALSE 2271
// if not brother [ 1 ] in belkovTeam then
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: ARRAY
2238: PUSH
2239: LD_EXP 45
2243: IN
2244: NOT
2245: IFFALSE 2271
// belkovTeam := Join ( belkovTeam , brother [ 1 ] ) ;
2247: LD_ADDR_EXP 45
2251: PUSH
2252: LD_EXP 45
2256: PPUSH
2257: LD_VAR 0 4
2261: PUSH
2262: LD_INT 1
2264: ARRAY
2265: PPUSH
2266: CALL 55811 0 2
2270: ST_TO_ADDR
// if belkovTeam < 3 then
2271: LD_EXP 45
2275: PUSH
2276: LD_INT 3
2278: LESS
2279: IFFALSE 2364
// begin for i := belkovTeam to 3 do
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: DOUBLE
2287: LD_EXP 45
2291: DEC
2292: ST_TO_ADDR
2293: LD_INT 3
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2362
// begin un := kirovBaseSquad [ 1 ] ;
2299: LD_ADDR_VAR 0 3
2303: PUSH
2304: LD_EXP 43
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
2313: LD_ADDR_EXP 43
2317: PUSH
2318: LD_EXP 43
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: CALL_OW 3
2330: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
2331: LD_ADDR_EXP 45
2335: PUSH
2336: LD_EXP 45
2340: PPUSH
2341: LD_EXP 45
2345: PUSH
2346: LD_INT 1
2348: PLUS
2349: PPUSH
2350: LD_VAR 0 3
2354: PPUSH
2355: CALL_OW 1
2359: ST_TO_ADDR
// end ;
2360: GO 2296
2362: POP
2363: POP
// end ; if Kirilenkova then
2364: LD_EXP 37
2368: IFFALSE 2392
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
2370: LD_ADDR_EXP 45
2374: PUSH
2375: LD_EXP 45
2379: PPUSH
2380: LD_EXP 37
2384: PPUSH
2385: CALL 55811 0 2
2389: ST_TO_ADDR
2390: GO 2431
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
2392: LD_ADDR_EXP 45
2396: PUSH
2397: LD_EXP 45
2401: PPUSH
2402: LD_EXP 43
2406: PPUSH
2407: LD_INT 25
2409: PUSH
2410: LD_INT 4
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 72
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL 55811 0 2
2430: ST_TO_ADDR
// for i in belkovTeam do
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_EXP 45
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2470
// begin ComExit ( i ) ;
2444: LD_VAR 0 2
2448: PPUSH
2449: CALL 56209 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 89
2460: PPUSH
2461: LD_INT 100
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2441
2470: POP
2471: POP
// tmp := Belkov union belkovTeam ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_EXP 36
2481: PUSH
2482: LD_EXP 45
2486: UNION
2487: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2488: LD_INT 35
2490: PPUSH
2491: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2495: LD_VAR 0 7
2499: PPUSH
2500: LD_INT 60
2502: PUSH
2503: EMPTY
2504: LIST
2505: PPUSH
2506: CALL_OW 72
2510: NOT
2511: IFFALSE 2488
// ComMoveXY ( tmp , 71 , 65 ) ;
2513: LD_VAR 0 7
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: LD_INT 65
2523: PPUSH
2524: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2528: LD_VAR 0 7
2532: PPUSH
2533: LD_INT 61
2535: PPUSH
2536: LD_INT 37
2538: PPUSH
2539: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2543: LD_VAR 0 7
2547: PPUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 17
2553: PPUSH
2554: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2558: LD_VAR 0 7
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2570: LD_EXP 36
2574: PPUSH
2575: LD_INT 63
2577: PPUSH
2578: LD_INT 8
2580: PPUSH
2581: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2585: LD_EXP 36
2589: PPUSH
2590: LD_INT 105
2592: PPUSH
2593: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2597: LD_EXP 36
2601: PPUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 37
2607: PPUSH
2608: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2612: LD_EXP 36
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2624: LD_VAR 0 7
2628: PPUSH
2629: LD_INT 88
2631: PPUSH
2632: LD_INT 29
2634: PPUSH
2635: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2639: LD_INT 35
2641: PPUSH
2642: CALL_OW 67
// for i in tmp do
2646: LD_ADDR_VAR 0 2
2650: PUSH
2651: LD_VAR 0 7
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2688
// if not HasTask ( i ) then
2659: LD_VAR 0 2
2663: PPUSH
2664: CALL_OW 314
2668: NOT
2669: IFFALSE 2686
// AddComMoveXY ( tmp , 88 , 29 ) ;
2671: LD_VAR 0 7
2675: PPUSH
2676: LD_INT 88
2678: PPUSH
2679: LD_INT 29
2681: PPUSH
2682: CALL_OW 171
2686: GO 2656
2688: POP
2689: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2690: LD_VAR 0 7
2694: PPUSH
2695: LD_INT 95
2697: PUSH
2698: LD_INT 6
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PPUSH
2705: CALL_OW 72
2709: IFFALSE 2803
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_VAR 0 7
2720: PPUSH
2721: LD_INT 95
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 72
2735: PUSH
2736: FOR_IN
2737: IFFALSE 2801
// begin if i = Belkov then
2739: LD_VAR 0 2
2743: PUSH
2744: LD_EXP 36
2748: EQUAL
2749: IFFALSE 2790
// begin belkovTank := IsInUnit ( Belkov ) ;
2751: LD_ADDR_VAR 0 5
2755: PUSH
2756: LD_EXP 36
2760: PPUSH
2761: CALL_OW 310
2765: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2766: LD_ADDR_VAR 0 8
2770: PUSH
2771: LD_VAR 0 5
2775: PPUSH
2776: CALL_OW 261
2780: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2781: LD_VAR 0 5
2785: PPUSH
2786: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: CALL_OW 64
// end ;
2799: GO 2736
2801: POP
2802: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2803: LD_VAR 0 7
2807: PPUSH
2808: LD_INT 52
2810: PUSH
2811: EMPTY
2812: LIST
2813: PPUSH
2814: CALL_OW 72
2818: NOT
2819: IFFALSE 2639
// wait ( 1 1$20 ) ;
2821: LD_INT 2800
2823: PPUSH
2824: CALL_OW 67
// if fuel < 50 then
2828: LD_VAR 0 8
2832: PUSH
2833: LD_INT 50
2835: LESS
2836: IFFALSE 2846
// fuel := 50 ;
2838: LD_ADDR_VAR 0 8
2842: PUSH
2843: LD_INT 50
2845: ST_TO_ADDR
// uc_side := 6 ;
2846: LD_ADDR_OWVAR 20
2850: PUSH
2851: LD_INT 6
2853: ST_TO_ADDR
// uc_nation := 3 ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_INT 3
2861: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2862: LD_INT 21
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 42
2873: PPUSH
2874: LD_VAR 0 8
2878: PUSH
2879: LD_INT 5
2881: MINUS
2882: PPUSH
2883: CALL 22641 0 5
// belkovTank := CreateVehicle ;
2887: LD_ADDR_VAR 0 5
2891: PUSH
2892: CALL_OW 45
2896: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2897: LD_VAR 0 5
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2909: LD_VAR 0 5
2913: PPUSH
2914: LD_INT 60
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2927: LD_EXP 36
2931: PPUSH
2932: LD_VAR 0 5
2936: PPUSH
2937: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2941: LD_EXP 36
2945: PPUSH
2946: LD_INT 72
2948: PPUSH
2949: LD_INT 26
2951: PPUSH
2952: CALL_OW 111
// wait ( 0 0$2 ) ;
2956: LD_INT 70
2958: PPUSH
2959: CALL_OW 67
// for i in belkovTeam do
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_EXP 45
2972: PUSH
2973: FOR_IN
2974: IFFALSE 3018
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_INT 60
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_INT 65
3001: PPUSH
3002: LD_INT 18
3004: PPUSH
3005: CALL_OW 111
// wait ( 0 0$0.8 ) ;
3009: LD_INT 28
3011: PPUSH
3012: CALL_OW 67
// end ;
3016: GO 2973
3018: POP
3019: POP
// repeat wait ( 0 0$1 ) ;
3020: LD_INT 35
3022: PPUSH
3023: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
3027: LD_EXP 14
3031: IFFALSE 3051
3033: PUSH
3034: LD_EXP 45
3038: PPUSH
3039: LD_INT 60
3041: PUSH
3042: EMPTY
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: NOT
3050: AND
3051: IFFALSE 3020
// americanTrap := true ;
3053: LD_ADDR_EXP 17
3057: PUSH
3058: LD_INT 1
3060: ST_TO_ADDR
// end ;
3061: LD_VAR 0 1
3065: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
3066: LD_EXP 4
3070: IFFALSE 3083
3072: PUSH
3073: LD_EXP 40
3077: PPUSH
3078: CALL_OW 302
3082: AND
3083: IFFALSE 3407
3085: GO 3087
3087: DISABLE
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
3095: LD_EXP 8
3099: PUSH
3100: LD_INT 0
3102: GREATER
3103: IFFALSE 3117
3105: PUSH
3106: LD_EXP 40
3110: PPUSH
3111: CALL_OW 314
3115: NOT
3116: AND
3117: IFFALSE 3288
// begin dir := rand ( 0 , 5 ) ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_INT 0
3126: PPUSH
3127: LD_INT 5
3129: PPUSH
3130: CALL_OW 12
3134: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_EXP 40
3144: PPUSH
3145: CALL_OW 250
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_INT 5
3157: PPUSH
3158: CALL_OW 272
3162: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 40
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: LD_INT 5
3185: PPUSH
3186: CALL_OW 273
3190: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
3191: LD_VAR 0 1
3195: PPUSH
3196: LD_VAR 0 2
3200: PPUSH
3201: CALL_OW 488
3205: IFFALSE 3230
3207: PUSH
3208: LD_INT 106
3210: PPUSH
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: CALL_OW 297
3225: PUSH
3226: LD_INT 26
3228: LESS
3229: AND
3230: IFFALSE 3253
// AddComMoveXY ( Platonov , x , y ) else
3232: LD_EXP 40
3236: PPUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 2
3246: PPUSH
3247: CALL_OW 171
3251: GO 3268
// AddComMoveXY ( Platonov , 64 , 96 ) ;
3253: LD_EXP 40
3257: PPUSH
3258: LD_INT 64
3260: PPUSH
3261: LD_INT 96
3263: PPUSH
3264: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
3268: LD_EXP 40
3272: PPUSH
3273: LD_INT 105
3275: PPUSH
3276: LD_INT 315
3278: PPUSH
3279: CALL_OW 12
3283: PPUSH
3284: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: LESSEQUAL
3296: IFFALSE 3342
// begin if not IsAt ( Platonov , 64 , 96 ) then
3298: LD_EXP 40
3302: PPUSH
3303: LD_INT 64
3305: PPUSH
3306: LD_INT 96
3308: PPUSH
3309: CALL_OW 307
3313: NOT
3314: IFFALSE 3340
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
3316: LD_EXP 40
3320: PPUSH
3321: LD_INT 64
3323: PPUSH
3324: LD_INT 96
3326: PPUSH
3327: CALL_OW 111
// AddComHold ( Platonov ) ;
3331: LD_EXP 40
3335: PPUSH
3336: CALL_OW 200
// end ; end else
3340: GO 3407
// if tick mod 0 0$75 = 0 0$00 then
3342: LD_OWVAR 1
3346: PUSH
3347: LD_INT 2625
3349: MOD
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3407
// begin amount := rand ( 2 , 5 ) ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 5
3366: PPUSH
3367: CALL_OW 12
3371: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3372: LD_ADDR_EXP 8
3376: PUSH
3377: LD_EXP 8
3381: PUSH
3382: LD_VAR 0 3
3386: PUSH
3387: LD_INT 10
3389: MUL
3390: MINUS
3391: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_INT 5
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 55
// end ; end ;
3407: PPOPN 4
3409: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3410: LD_INT 106
3412: PPUSH
3413: CALL_OW 274
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 275
3425: PUSH
3426: LD_INT 30
3428: LESS
3429: IFFALSE 3641
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: LD_EXP 43
3447: PPUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 60
3453: PUSH
3454: EMPTY
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 72
3479: ST_TO_ADDR
// if not eng then
3480: LD_VAR 0 2
3484: NOT
3485: IFFALSE 3489
// exit ;
3487: GO 3641
// ComExit ( eng ) ;
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL 56209 0 1
// i := 5 ;
3498: LD_ADDR_VAR 0 1
3502: PUSH
3503: LD_INT 5
3505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3506: LD_INT 35
3508: PPUSH
3509: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 60
3520: PUSH
3521: EMPTY
3522: LIST
3523: PPUSH
3524: CALL_OW 72
3528: NOT
3529: IFFALSE 3537
3531: PUSH
3532: LD_VAR 0 2
3536: AND
3537: IFFALSE 3607
// begin ComTransport ( eng , kirov , mat_oil ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_INT 71
3546: PPUSH
3547: LD_INT 2
3549: PPUSH
3550: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3554: LD_VAR 0 2
3558: PPUSH
3559: LD_INT 67
3561: PPUSH
3562: LD_INT 99
3564: PPUSH
3565: CALL_OW 171
// AddComUnload ( eng ) ;
3569: LD_VAR 0 2
3573: PPUSH
3574: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3578: LD_VAR 0 2
3582: PPUSH
3583: LD_INT 107
3585: PPUSH
3586: LD_INT 104
3588: PPUSH
3589: CALL_OW 171
// i := i - 1 ;
3593: LD_ADDR_VAR 0 1
3597: PUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 1
3605: MINUS
3606: ST_TO_ADDR
// end ; until i = 0 ;
3607: LD_VAR 0 1
3611: PUSH
3612: LD_INT 0
3614: EQUAL
3615: IFFALSE 3506
// AddComMoveUnit ( eng , kirov ) ;
3617: LD_VAR 0 2
3621: PPUSH
3622: LD_INT 71
3624: PPUSH
3625: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_INT 71
3636: PPUSH
3637: CALL_OW 180
// end ;
3641: PPOPN 2
3643: END
// export function SendReinforcements ; var i ; begin
3644: LD_INT 0
3646: PPUSH
3647: PPUSH
// reinforcementsGained := true ;
3648: LD_ADDR_EXP 25
3652: PUSH
3653: LD_INT 1
3655: ST_TO_ADDR
// for i := 1 to 2 do
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: DOUBLE
3662: LD_INT 1
3664: DEC
3665: ST_TO_ADDR
3666: LD_INT 2
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3752
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3672: LD_EXP 44
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: PPUSH
3683: CALL 56209 0 1
3687: IFFALSE 3696
// wait ( 0 0$0.3 ) ;
3689: LD_INT 10
3691: PPUSH
3692: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3696: LD_EXP 44
3700: PUSH
3701: LD_VAR 0 2
3705: ARRAY
3706: PPUSH
3707: LD_INT 75
3709: PPUSH
3710: LD_INT 84
3712: PPUSH
3713: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3717: LD_EXP 44
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PPUSH
3728: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3732: LD_EXP 44
3736: PUSH
3737: LD_VAR 0 2
3741: ARRAY
3742: PPUSH
3743: LD_INT 3
3745: PPUSH
3746: CALL_OW 235
// end ;
3750: GO 3669
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 1
3758: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3759: LD_EXP 21
3763: IFFALSE 3771
3765: PUSH
3766: LD_EXP 18
3770: AND
3771: IFFALSE 3794
3773: PUSH
3774: LD_EXP 43
3778: PPUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 3
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 72
3793: AND
3794: IFFALSE 3951
3796: GO 3798
3798: DISABLE
3799: LD_INT 0
3801: PPUSH
3802: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3803: LD_ADDR_VAR 0 1
3807: PUSH
3808: LD_EXP 43
3812: PPUSH
3813: LD_INT 25
3815: PUSH
3816: LD_INT 3
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PPUSH
3823: CALL_OW 72
3827: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 30
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not fac then
3862: LD_VAR 0 2
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 3951
// fac := fac [ 1 ] ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 2
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3885: LD_VAR 0 2
3889: PPUSH
3890: CALL_OW 313
3894: PUSH
3895: LD_INT 0
3897: EQUAL
3898: IFFALSE 3930
// begin ComExit ( mech ) ;
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL 56209 0 1
// wait ( 3 ) ;
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_VAR 0 2
3925: PPUSH
3926: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3930: LD_VAR 0 2
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 1
3943: PPUSH
3944: LD_INT 42
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: PPOPN 2
3953: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
3958: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3959: LD_VAR 0 1
3963: PPUSH
3964: LD_INT 90
3966: PPUSH
3967: LD_INT 100
3969: PPUSH
3970: CALL_OW 111
// wait ( 0 0$10 ) ;
3974: LD_INT 350
3976: PPUSH
3977: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3981: LD_VAR 0 1
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3993: LD_INT 35
3995: PPUSH
3996: CALL_OW 67
// tag := GetTag ( vehicle ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 110
4014: ST_TO_ADDR
// if tag = 0 then
4015: LD_VAR 0 4
4019: PUSH
4020: LD_INT 0
4022: EQUAL
4023: IFFALSE 4094
// begin if not HasTask ( vehicle ) then
4025: LD_VAR 0 1
4029: PPUSH
4030: CALL_OW 314
4034: NOT
4035: IFFALSE 4052
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
4037: LD_VAR 0 1
4041: PPUSH
4042: LD_INT 83
4044: PPUSH
4045: LD_INT 68
4047: PPUSH
4048: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 256
4061: PUSH
4062: LD_INT 750
4064: LESS
4065: IFFALSE 4094
// begin SetTag ( vehicle , 1 ) ;
4067: LD_VAR 0 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
4079: LD_VAR 0 1
4083: PPUSH
4084: LD_INT 93
4086: PPUSH
4087: LD_INT 102
4089: PPUSH
4090: CALL_OW 111
// end ; end ; if tag = 1 then
4094: LD_VAR 0 4
4098: PUSH
4099: LD_INT 1
4101: EQUAL
4102: IFFALSE 4194
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
4104: LD_VAR 0 1
4108: PPUSH
4109: LD_INT 113
4111: PPUSH
4112: LD_INT 106
4114: PPUSH
4115: CALL_OW 307
4119: NOT
4120: IFFALSE 4134
4122: PUSH
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 314
4132: NOT
4133: AND
4134: IFFALSE 4151
// ComMoveXY ( vehicle , 113 , 106 ) ;
4136: LD_VAR 0 1
4140: PPUSH
4141: LD_INT 113
4143: PPUSH
4144: LD_INT 106
4146: PPUSH
4147: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
4151: LD_VAR 0 1
4155: PPUSH
4156: LD_INT 113
4158: PPUSH
4159: LD_INT 106
4161: PPUSH
4162: CALL_OW 307
4166: IFFALSE 4194
// begin SetTag ( vehicle , 2 ) ;
4168: LD_VAR 0 1
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 311
4189: PPUSH
4190: CALL 57525 0 1
// end ; end ; if tag = 2 then
4194: LD_VAR 0 4
4198: PUSH
4199: LD_INT 2
4201: EQUAL
4202: IFFALSE 4268
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 256
4213: PUSH
4214: LD_INT 1000
4216: EQUAL
4217: IFFALSE 4230
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 311
4229: AND
4230: IFFALSE 4268
// begin ComMoveUnit ( vehicle , kirov ) ;
4232: LD_VAR 0 1
4236: PPUSH
4237: LD_INT 71
4239: PPUSH
4240: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_INT 71
4251: PPUSH
4252: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
4256: LD_VAR 0 1
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 301
4277: IFTRUE 4285
4279: PUSH
4280: LD_EXP 23
4284: OR
4285: IFFALSE 3993
// if eastOutpostDestroyed then
4287: LD_EXP 23
4291: IFFALSE 4308
// ComMoveXY ( vehicle , 111 , 105 ) ;
4293: LD_VAR 0 1
4297: PPUSH
4298: LD_INT 111
4300: PPUSH
4301: LD_INT 105
4303: PPUSH
4304: CALL_OW 111
// end ; end_of_file
4308: LD_VAR 0 2
4312: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
4317: PPUSH
4318: PPUSH
// uc_side := 1 ;
4319: LD_ADDR_OWVAR 20
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// uc_nation := 1 ;
4327: LD_ADDR_OWVAR 21
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// usWestForces := [ ] ;
4335: LD_ADDR_EXP 46
4339: PUSH
4340: EMPTY
4341: ST_TO_ADDR
// usEastForces := [ ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: EMPTY
4348: ST_TO_ADDR
// bc_type := b_depot ;
4349: LD_ADDR_OWVAR 42
4353: PUSH
4354: LD_INT 0
4356: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4357: LD_ADDR_OWVAR 43
4361: PUSH
4362: LD_OWVAR 67
4366: PUSH
4367: LD_INT 1
4369: MINUS
4370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4371: LD_INT 48
4373: PPUSH
4374: LD_INT 54
4376: PPUSH
4377: LD_INT 2
4379: PPUSH
4380: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4384: LD_ADDR_VAR 0 4
4388: PUSH
4389: LD_INT 55
4391: PUSH
4392: LD_INT 55
4394: PUSH
4395: LD_INT 4
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 59
4405: PUSH
4406: LD_INT 61
4408: PUSH
4409: LD_INT 4
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// if Difficulty > 1 then
4421: LD_OWVAR 67
4425: PUSH
4426: LD_INT 1
4428: GREATER
4429: IFFALSE 4465
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 4
4445: PPUSH
4446: LD_INT 46
4448: PUSH
4449: LD_INT 64
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 2
4464: ST_TO_ADDR
// if Difficulty > 2 then
4465: LD_OWVAR 67
4469: PUSH
4470: LD_INT 2
4472: GREATER
4473: IFFALSE 4509
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4475: LD_ADDR_VAR 0 4
4479: PUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 4
4489: PPUSH
4490: LD_INT 36
4492: PUSH
4493: LD_INT 48
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 2
4508: ST_TO_ADDR
// bc_type := b_breastwork ;
4509: LD_ADDR_OWVAR 42
4513: PUSH
4514: LD_INT 31
4516: ST_TO_ADDR
// InitHC_All ( ) ;
4517: CALL_OW 584
// for i in tmp do
4521: LD_ADDR_VAR 0 2
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: FOR_IN
4532: IFFALSE 4676
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 2
4550: ARRAY
4551: PPUSH
4552: LD_VAR 0 2
4556: PUSH
4557: LD_INT 3
4559: ARRAY
4560: PPUSH
4561: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4565: LD_INT 0
4567: PPUSH
4568: LD_OWVAR 67
4572: PPUSH
4573: CALL_OW 381
// un := CreateHuman ;
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: CALL_OW 44
4586: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4587: LD_ADDR_EXP 46
4591: PUSH
4592: LD_EXP 46
4596: PPUSH
4597: LD_EXP 46
4601: PUSH
4602: LD_INT 1
4604: PLUS
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: CALL_OW 1
4615: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_VAR 0 2
4625: PUSH
4626: LD_INT 3
4628: ARRAY
4629: PUSH
4630: LD_INT 3
4632: PLUS
4633: PUSH
4634: LD_INT 6
4636: MOD
4637: PPUSH
4638: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_VAR 0 2
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: LD_VAR 0 2
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PPUSH
4665: CALL_OW 428
4669: PPUSH
4670: CALL_OW 52
// end ;
4674: GO 4531
4676: POP
4677: POP
// for i := 1 to 2 do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: DOUBLE
4684: LD_INT 1
4686: DEC
4687: ST_TO_ADDR
4688: LD_INT 2
4690: PUSH
4691: FOR_TO
4692: IFFALSE 4768
// begin PrepareEngineer ( false , Difficulty ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_OWVAR 67
4701: PPUSH
4702: CALL_OW 382
// un := CreateHuman ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: CALL_OW 44
4715: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4716: LD_ADDR_EXP 46
4720: PUSH
4721: LD_EXP 46
4725: PPUSH
4726: LD_EXP 46
4730: PUSH
4731: LD_INT 1
4733: PLUS
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: CALL_OW 1
4744: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4745: LD_VAR 0 3
4749: PPUSH
4750: LD_INT 54
4752: PPUSH
4753: LD_INT 58
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: LD_INT 0
4761: PPUSH
4762: CALL_OW 50
// end ;
4766: GO 4691
4768: POP
4769: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4770: LD_ADDR_VAR 0 4
4774: PUSH
4775: LD_INT 87
4777: PUSH
4778: LD_INT 62
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 89
4791: PUSH
4792: LD_INT 67
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: ST_TO_ADDR
// if Difficulty > 2 then
4807: LD_OWVAR 67
4811: PUSH
4812: LD_INT 2
4814: GREATER
4815: IFFALSE 4851
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4817: LD_ADDR_VAR 0 4
4821: PUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 4
4831: PPUSH
4832: LD_INT 88
4834: PUSH
4835: LD_INT 53
4837: PUSH
4838: LD_INT 2
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 2
4850: ST_TO_ADDR
// bc_type := b_breastwork ;
4851: LD_ADDR_OWVAR 42
4855: PUSH
4856: LD_INT 31
4858: ST_TO_ADDR
// for i in tmp do
4859: LD_ADDR_VAR 0 2
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: FOR_IN
4870: IFFALSE 5014
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4872: LD_VAR 0 2
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_INT 3
4897: ARRAY
4898: PPUSH
4899: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_OWVAR 67
4910: PPUSH
4911: CALL_OW 381
// un := CreateHuman ;
4915: LD_ADDR_VAR 0 3
4919: PUSH
4920: CALL_OW 44
4924: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4925: LD_ADDR_EXP 47
4929: PUSH
4930: LD_EXP 47
4934: PPUSH
4935: LD_EXP 47
4939: PUSH
4940: LD_INT 1
4942: PLUS
4943: PPUSH
4944: LD_VAR 0 3
4948: PPUSH
4949: CALL_OW 1
4953: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_VAR 0 2
4963: PUSH
4964: LD_INT 3
4966: ARRAY
4967: PUSH
4968: LD_INT 3
4970: PLUS
4971: PUSH
4972: LD_INT 6
4974: MOD
4975: PPUSH
4976: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: LD_VAR 0 2
4989: PUSH
4990: LD_INT 1
4992: ARRAY
4993: PPUSH
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: CALL_OW 428
5007: PPUSH
5008: CALL_OW 52
// end ;
5012: GO 4869
5014: POP
5015: POP
// for i := 1 to 2 do
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: DOUBLE
5022: LD_INT 1
5024: DEC
5025: ST_TO_ADDR
5026: LD_INT 2
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5106
// begin PrepareEngineer ( false , Difficulty ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_OWVAR 67
5039: PPUSH
5040: CALL_OW 382
// un := CreateHuman ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: CALL_OW 44
5053: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
5054: LD_ADDR_EXP 47
5058: PUSH
5059: LD_EXP 47
5063: PPUSH
5064: LD_EXP 47
5068: PUSH
5069: LD_INT 1
5071: PLUS
5072: PPUSH
5073: LD_VAR 0 3
5077: PPUSH
5078: CALL_OW 1
5082: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
5083: LD_VAR 0 3
5087: PPUSH
5088: LD_INT 95
5090: PPUSH
5091: LD_INT 65
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: LD_INT 0
5099: PPUSH
5100: CALL_OW 50
// end ;
5104: GO 5029
5106: POP
5107: POP
// end ;
5108: LD_VAR 0 1
5112: RET
// export function PrepareAmericanTrap ; var i , un ; begin
5113: LD_INT 0
5115: PPUSH
5116: PPUSH
5117: PPUSH
// usTrapForces := [ ] ;
5118: LD_ADDR_EXP 48
5122: PUSH
5123: EMPTY
5124: ST_TO_ADDR
// uc_side := 1 ;
5125: LD_ADDR_OWVAR 20
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// uc_nation := 1 ;
5133: LD_ADDR_OWVAR 21
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// InitHC_All ( ) ;
5141: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
5145: LD_INT 1
5147: PPUSH
5148: LD_OWVAR 67
5152: PPUSH
5153: CALL_OW 381
// un := CreateHuman ;
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: CALL_OW 44
5166: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5167: LD_ADDR_EXP 48
5171: PUSH
5172: LD_EXP 48
5176: PPUSH
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL 55811 0 2
5186: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: DOUBLE
5193: LD_INT 1
5195: DEC
5196: ST_TO_ADDR
5197: LD_INT 5
5199: PUSH
5200: LD_INT 6
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_OWVAR 67
5219: ARRAY
5220: PUSH
5221: FOR_TO
5222: IFFALSE 5268
// begin PrepareSoldier ( false , Difficulty ) ;
5224: LD_INT 0
5226: PPUSH
5227: LD_OWVAR 67
5231: PPUSH
5232: CALL_OW 381
// un := CreateHuman ;
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: CALL_OW 44
5245: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5246: LD_ADDR_EXP 48
5250: PUSH
5251: LD_EXP 48
5255: PPUSH
5256: LD_VAR 0 3
5260: PPUSH
5261: CALL 55811 0 2
5265: ST_TO_ADDR
// end ;
5266: GO 5221
5268: POP
5269: POP
// for i := 1 to 2 do
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_INT 2
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5330
// begin PrepareScientist ( false , Difficulty ) ;
5286: LD_INT 0
5288: PPUSH
5289: LD_OWVAR 67
5293: PPUSH
5294: CALL_OW 384
// un := CreateHuman ;
5298: LD_ADDR_VAR 0 3
5302: PUSH
5303: CALL_OW 44
5307: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5308: LD_ADDR_EXP 48
5312: PUSH
5313: LD_EXP 48
5317: PPUSH
5318: LD_VAR 0 3
5322: PPUSH
5323: CALL 55811 0 2
5327: ST_TO_ADDR
// end ;
5328: GO 5283
5330: POP
5331: POP
// end ;
5332: LD_VAR 0 1
5336: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
5337: LD_EXP 46
5341: IFFALSE 5921
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
// begin enable ;
5353: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_INT 8
5361: PPUSH
5362: LD_INT 22
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 70
5390: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: LD_EXP 46
5400: PPUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PPUSH
5411: CALL_OW 72
5415: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5416: LD_ADDR_VAR 0 5
5420: PUSH
5421: LD_EXP 46
5425: PPUSH
5426: LD_INT 25
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PPUSH
5436: CALL_OW 72
5440: ST_TO_ADDR
// if eng then
5441: LD_VAR 0 4
5445: IFFALSE 5641
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 24
5457: PUSH
5458: LD_INT 1000
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: IFFALSE 5587
// begin for i in eng do
5475: LD_ADDR_VAR 0 1
5479: PUSH
5480: LD_VAR 0 4
5484: PUSH
5485: FOR_IN
5486: IFFALSE 5583
// if IsInUnit ( i ) then
5488: LD_VAR 0 1
5492: PPUSH
5493: CALL_OW 310
5497: IFFALSE 5510
// ComExit ( i ) else
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL 56209 0 1
5508: GO 5581
// if IsOk ( i ) and not HasTask ( i ) then
5510: LD_VAR 0 1
5514: PPUSH
5515: CALL_OW 302
5519: IFFALSE 5533
5521: PUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 314
5531: NOT
5532: AND
5533: IFFALSE 5581
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5535: LD_VAR 0 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 72
5566: PPUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 74
5576: PPUSH
5577: CALL_OW 130
5581: GO 5485
5583: POP
5584: POP
// end else
5585: GO 5641
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5587: LD_VAR 0 3
5591: PPUSH
5592: LD_INT 30
5594: PUSH
5595: LD_INT 0
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 72
5606: IFFALSE 5641
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 30
5620: PUSH
5621: LD_INT 0
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PPUSH
5628: CALL_OW 72
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5641: LD_VAR 0 5
5645: PPUSH
5646: LD_INT 50
5648: PUSH
5649: EMPTY
5650: LIST
5651: PPUSH
5652: CALL_OW 72
5656: IFFALSE 5681
5658: PUSH
5659: LD_INT 18
5661: PPUSH
5662: LD_INT 81
5664: PUSH
5665: LD_INT 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 70
5676: PUSH
5677: LD_INT 1
5679: GREATER
5680: AND
5681: IFFALSE 5703
5683: PUSH
5684: LD_INT 18
5686: PPUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 70
5701: NOT
5702: AND
5703: IFFALSE 5757
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5705: LD_ADDR_VAR 0 1
5709: PUSH
5710: LD_VAR 0 5
5714: PPUSH
5715: LD_INT 50
5717: PUSH
5718: EMPTY
5719: LIST
5720: PPUSH
5721: CALL_OW 72
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5755
// begin ComExit ( i ) ;
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL 56209 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: LD_INT 46
5745: PPUSH
5746: LD_INT 62
5748: PPUSH
5749: CALL_OW 174
// end ;
5753: GO 5726
5755: POP
5756: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5757: LD_INT 18
5759: PPUSH
5760: LD_INT 81
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 70
5774: NOT
5775: IFFALSE 5811
5777: PUSH
5778: LD_VAR 0 5
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 54
5788: PUSH
5789: EMPTY
5790: LIST
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 72
5810: AND
5811: IFFALSE 5844
5813: PUSH
5814: LD_VAR 0 3
5818: PPUSH
5819: LD_INT 30
5821: PUSH
5822: LD_INT 31
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 58
5831: PUSH
5832: EMPTY
5833: LIST
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: AND
5844: IFFALSE 5921
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5846: LD_VAR 0 5
5850: PPUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 54
5856: PUSH
5857: EMPTY
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 50
5866: PUSH
5867: EMPTY
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 72
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: LD_INT 30
5890: PUSH
5891: LD_INT 31
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 58
5900: PUSH
5901: EMPTY
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 120
// end ;
5921: PPOPN 5
5923: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5924: LD_EXP 47
5928: IFFALSE 6201
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin enable ;
5938: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_INT 15
5946: PPUSH
5947: LD_INT 22
5949: PUSH
5950: LD_INT 1
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 70
5975: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_EXP 47
5985: PPUSH
5986: LD_INT 25
5988: PUSH
5989: LD_INT 2
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 72
6000: ST_TO_ADDR
// if eng then
6001: LD_VAR 0 3
6005: IFFALSE 6201
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 24
6017: PUSH
6018: LD_INT 1000
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 72
6033: IFFALSE 6147
// begin for i in eng do
6035: LD_ADDR_VAR 0 1
6039: PUSH
6040: LD_VAR 0 3
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6143
// if IsInUnit ( i ) then
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 310
6057: IFFALSE 6070
// ComExit ( i ) else
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL 56209 0 1
6068: GO 6141
// if IsOk ( i ) and not HasTask ( i ) then
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6093
6081: PUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 314
6091: NOT
6092: AND
6093: IFFALSE 6141
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 24
6110: PUSH
6111: LD_INT 1000
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PPUSH
6122: CALL_OW 72
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 74
6136: PPUSH
6137: CALL_OW 130
6141: GO 6045
6143: POP
6144: POP
// end else
6145: GO 6201
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 30
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: CALL_OW 72
6166: IFFALSE 6201
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_VAR 0 2
6177: PPUSH
6178: LD_INT 30
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 72
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: CALL_OW 120
// end ; end_of_file
6201: PPOPN 3
6203: END
// export function Action ; var i , tmp ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
// InGameOn ;
6209: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
6213: LD_INT 112
6215: PPUSH
6216: LD_INT 107
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 12
6224: NEG
6225: PPUSH
6226: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
6230: LD_INT 121
6232: PPUSH
6233: LD_INT 113
6235: PPUSH
6236: CALL_OW 86
// tmp := PrepareBurlak ;
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: CALL 1320 0 0
6249: ST_TO_ADDR
// for i in tmp do
6250: LD_ADDR_VAR 0 2
6254: PUSH
6255: LD_VAR 0 3
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6314
// begin SetDir ( i , 5 ) ;
6263: LD_VAR 0 2
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
6275: LD_VAR 0 2
6279: PPUSH
6280: LD_INT 3
6282: PPUSH
6283: LD_INT 0
6285: PPUSH
6286: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
6290: LD_VAR 0 2
6294: PPUSH
6295: LD_INT 121
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: CALL_OW 111
// wait ( 0 0$0.8 ) ;
6305: LD_INT 28
6307: PPUSH
6308: CALL_OW 67
// end ;
6312: GO 6260
6314: POP
6315: POP
// CenterOnUnits ( Kurin ) ;
6316: LD_EXP 38
6320: PPUSH
6321: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
6325: LD_EXP 34
6329: PPUSH
6330: LD_EXP 38
6334: PPUSH
6335: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
6339: LD_INT 35
6341: PPUSH
6342: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
6346: LD_EXP 34
6350: PPUSH
6351: LD_EXP 38
6355: PPUSH
6356: CALL_OW 296
6360: PUSH
6361: LD_INT 6
6363: LESS
6364: IFFALSE 6339
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6366: LD_EXP 34
6370: PUSH
6371: LD_EXP 35
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: LD_EXP 38
6384: PPUSH
6385: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_VAR 0 3
6398: PUSH
6399: LD_EXP 34
6403: PUSH
6404: LD_EXP 35
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: DIFF
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6481
// if GetClass ( i ) = class_soldier then
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 257
6426: PUSH
6427: LD_INT 1
6429: EQUAL
6430: IFFALSE 6467
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 95
6439: PUSH
6440: LD_INT 209
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: LD_INT 2
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: PPUSH
6461: CALL_OW 120
6465: GO 6479
// ComEnterUnit ( i , ru_lab ) ;
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_INT 83
6474: PPUSH
6475: CALL_OW 120
6479: GO 6414
6481: POP
6482: POP
// Say ( Kurin , D1-Kur-1 ) ;
6483: LD_EXP 38
6487: PPUSH
6488: LD_STRING D1-Kur-1
6490: PPUSH
6491: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6495: LD_EXP 34
6499: PPUSH
6500: LD_STRING D1-Bur-1
6502: PPUSH
6503: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6507: LD_INT 10
6509: PPUSH
6510: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6514: LD_EXP 38
6518: PPUSH
6519: LD_STRING D1-Kur-2
6521: PPUSH
6522: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6526: LD_EXP 39
6530: PPUSH
6531: CALL 56209 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6535: LD_EXP 39
6539: PPUSH
6540: LD_INT 115
6542: PPUSH
6543: LD_INT 108
6545: PPUSH
6546: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6550: LD_EXP 39
6554: PPUSH
6555: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6559: LD_EXP 34
6563: PPUSH
6564: LD_STRING D1-Bur-2
6566: PPUSH
6567: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6571: LD_EXP 38
6575: PPUSH
6576: LD_STRING D1-Kur-3
6578: PPUSH
6579: CALL_OW 88
// if Gnyevko then
6583: LD_EXP 35
6587: IFFALSE 6601
// Say ( Kurin , D1-Kur-3a ) ;
6589: LD_EXP 38
6593: PPUSH
6594: LD_STRING D1-Kur-3a
6596: PPUSH
6597: CALL_OW 88
// InGameOff ;
6601: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6605: LD_STRING M1
6607: PPUSH
6608: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6612: LD_INT 112
6614: PPUSH
6615: LD_INT 107
6617: PPUSH
6618: LD_INT 3
6620: PPUSH
6621: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6625: LD_INT 66
6627: PPUSH
6628: LD_INT 99
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: LD_INT 7
6636: NEG
6637: PPUSH
6638: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6642: LD_INT 66
6644: PPUSH
6645: LD_INT 99
6647: PPUSH
6648: LD_INT 3
6650: PPUSH
6651: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6655: LD_EXP 39
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: CALL_OW 235
// if Gnyevko then
6667: LD_EXP 35
6671: IFFALSE 6685
// SetSide ( Gnyevko , 3 ) ;
6673: LD_EXP 35
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 235
// SaveForQuickRestart ;
6685: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6689: LD_EXP 38
6693: PPUSH
6694: LD_INT 71
6696: PPUSH
6697: CALL_OW 120
// wait ( 0 0$2 ) ;
6701: LD_INT 70
6703: PPUSH
6704: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6708: LD_EXP 43
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PPUSH
6717: CALL 56209 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6721: LD_EXP 43
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: PPUSH
6730: LD_INT 98
6732: PPUSH
6733: LD_INT 98
6735: PPUSH
6736: CALL_OW 428
6740: PPUSH
6741: CALL_OW 180
// wait ( 0 0$12 ) ;
6745: LD_INT 420
6747: PPUSH
6748: CALL_OW 67
// kurinDontWannaTalk := true ;
6752: LD_ADDR_EXP 5
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 1
6764: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6765: LD_EXP 5
6769: IFFALSE 6805
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 91
6784: PUSH
6785: LD_INT 71
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: AND
6805: IFFALSE 6992
6807: GO 6809
6809: DISABLE
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
// begin enable ;
6814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 91
6832: PUSH
6833: LD_INT 71
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// InGameOn ;
6853: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6857: LD_INT 116
6859: PPUSH
6860: LD_INT 107
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: LD_INT 3
6868: PPUSH
6869: CALL_OW 330
// ComExit ( Kurin ) ;
6873: LD_EXP 38
6877: PPUSH
6878: CALL 56209 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6882: LD_EXP 38
6886: PPUSH
6887: LD_VAR 0 2
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6900: LD_EXP 38
6904: PPUSH
6905: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6909: LD_VAR 0 2
6913: PPUSH
6914: LD_INT 87
6916: PPUSH
6917: LD_INT 99
6919: PPUSH
6920: CALL_OW 111
// if kirovHasTank then
6924: LD_EXP 6
6928: IFFALSE 6944
// Say ( Kurin , D1a-Kur-1a ) else
6930: LD_EXP 38
6934: PPUSH
6935: LD_STRING D1a-Kur-1a
6937: PPUSH
6938: CALL_OW 88
6942: GO 6956
// Say ( Kurin , D1a-Kur-1 ) ;
6944: LD_EXP 38
6948: PPUSH
6949: LD_STRING D1a-Kur-1
6951: PPUSH
6952: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6956: LD_EXP 38
6960: PPUSH
6961: LD_INT 71
6963: PPUSH
6964: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6968: LD_INT 116
6970: PPUSH
6971: LD_INT 107
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: CALL_OW 331
// wait ( 0 0$3 ) ;
6981: LD_INT 105
6983: PPUSH
6984: CALL_OW 67
// InGameOff ;
6988: CALL_OW 9
// end ;
6992: PPOPN 2
6994: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6995: LD_INT 22
6997: PUSH
6998: LD_INT 3
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 95
7007: PUSH
7008: LD_INT 4
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PPUSH
7019: CALL_OW 69
7023: IFFALSE 7031
7025: PUSH
7026: LD_EXP 7
7030: AND
7031: IFFALSE 7374
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin enable ;
7043: ENABLE
// blockNorth := false ;
7044: LD_ADDR_EXP 7
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// InGameOn ;
7052: CALL_OW 8
// DialogueOn ;
7056: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 3
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 95
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
7094: LD_EXP 39
7098: PUSH
7099: LD_VAR 0 2
7103: IN
7104: IFFALSE 7117
7106: PUSH
7107: LD_EXP 39
7111: PPUSH
7112: CALL_OW 302
7116: AND
7117: IFFALSE 7133
// Say ( Kovalyuk , D1b-Kov-1 ) else
7119: LD_EXP 39
7123: PPUSH
7124: LD_STRING D1b-Kov-1
7126: PPUSH
7127: CALL_OW 88
7131: GO 7170
// if Burlak in tmp and IsOk ( Burlak ) then
7133: LD_EXP 34
7137: PUSH
7138: LD_VAR 0 2
7142: IN
7143: IFFALSE 7156
7145: PUSH
7146: LD_EXP 34
7150: PPUSH
7151: CALL_OW 302
7155: AND
7156: IFFALSE 7170
// Say ( Burlak , D1b-Bur-1 ) ;
7158: LD_EXP 34
7162: PPUSH
7163: LD_STRING D1b-Bur-1
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
7174: LD_INT 22
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 21
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PPUSH
7210: CALL_OW 141
// for i in tmp do
7214: LD_ADDR_VAR 0 1
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: FOR_IN
7225: IFFALSE 7353
// begin d := rand ( 2 , 3 ) ;
7227: LD_ADDR_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 3
7237: PPUSH
7238: CALL_OW 12
7242: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
7243: LD_ADDR_VAR 0 3
7247: PUSH
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 250
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: LD_INT 6
7265: PPUSH
7266: CALL_OW 272
7270: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL_OW 251
7285: PPUSH
7286: LD_VAR 0 5
7290: PPUSH
7291: LD_INT 6
7293: PPUSH
7294: CALL_OW 273
7298: ST_TO_ADDR
// if ValidHex ( x , y ) then
7299: LD_VAR 0 3
7303: PPUSH
7304: LD_VAR 0 4
7308: PPUSH
7309: CALL_OW 488
7313: IFFALSE 7336
// ComMoveXY ( i , x , y ) else
7315: LD_VAR 0 1
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 111
7334: GO 7351
// ComMoveXY ( i , 79 , 85 ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_INT 79
7343: PPUSH
7344: LD_INT 85
7346: PPUSH
7347: CALL_OW 111
// end ;
7351: GO 7224
7353: POP
7354: POP
// wait ( 0 0$5 ) ;
7355: LD_INT 175
7357: PPUSH
7358: CALL_OW 67
// InGameOff ;
7362: CALL_OW 9
// blockNorth := true ;
7366: LD_ADDR_EXP 7
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// end ;
7374: PPOPN 5
7376: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7377: LD_EXP 44
7381: PPUSH
7382: LD_INT 101
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: IFFALSE 7405
7398: PUSH
7399: LD_EXP 4
7403: NOT
7404: AND
7405: IFFALSE 7809
7407: GO 7409
7409: DISABLE
7410: LD_INT 0
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7417: LD_ADDR_VAR 0 5
7421: PUSH
7422: LD_EXP 44
7426: PPUSH
7427: LD_EXP 34
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// InGameOn ;
7437: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7441: LD_VAR 0 5
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 5
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 3
7463: PPUSH
7464: LD_INT 6
7466: PPUSH
7467: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7471: LD_VAR 0 5
7475: PPUSH
7476: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7480: LD_VAR 0 5
7484: PPUSH
7485: LD_EXP 34
7489: PPUSH
7490: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7494: LD_VAR 0 5
7498: PPUSH
7499: LD_STRING D2-RSol1-1
7501: PPUSH
7502: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 5
7525: PPUSH
7526: CALL_OW 254
7530: PPUSH
7531: LD_INT 3
7533: PPUSH
7534: CALL_OW 272
7538: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7539: LD_ADDR_VAR 0 4
7543: PUSH
7544: LD_VAR 0 5
7548: PPUSH
7549: CALL_OW 251
7553: PPUSH
7554: LD_VAR 0 5
7558: PPUSH
7559: CALL_OW 254
7563: PPUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 273
7571: ST_TO_ADDR
// if ValidHex ( x , y ) then
7572: LD_VAR 0 3
7576: PPUSH
7577: LD_VAR 0 4
7581: PPUSH
7582: CALL_OW 488
7586: IFFALSE 7618
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7588: LD_EXP 35
7592: PUSH
7593: LD_EXP 39
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_VAR 0 4
7611: PPUSH
7612: CALL_OW 111
7616: GO 7641
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7618: LD_EXP 35
7622: PUSH
7623: LD_EXP 39
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: LD_VAR 0 5
7636: PPUSH
7637: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7641: LD_EXP 34
7645: PPUSH
7646: LD_VAR 0 5
7650: PPUSH
7651: CALL_OW 112
// p := 0 ;
7655: LD_ADDR_VAR 0 2
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// p := p + 1 ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_INT 1
7682: PLUS
7683: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7684: LD_VAR 0 2
7688: PUSH
7689: LD_INT 10
7691: GREATER
7692: IFTRUE 7714
7694: PUSH
7695: LD_EXP 34
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: CALL_OW 296
7709: PUSH
7710: LD_INT 6
7712: LESS
7713: OR
7714: IFFALSE 7663
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7716: LD_EXP 34
7720: PUSH
7721: LD_EXP 35
7725: PUSH
7726: LD_EXP 39
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PPUSH
7736: LD_VAR 0 5
7740: PPUSH
7741: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7745: LD_EXP 34
7749: PPUSH
7750: LD_STRING D2-Bur-1
7752: PPUSH
7753: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7757: LD_VAR 0 5
7761: PPUSH
7762: LD_STRING D2-RSol1-2
7764: PPUSH
7765: CALL_OW 88
// ComHold ( nearestGuard ) ;
7769: LD_VAR 0 5
7773: PPUSH
7774: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7778: LD_VAR 0 5
7782: PPUSH
7783: CALL_OW 250
7787: PPUSH
7788: LD_VAR 0 5
7792: PPUSH
7793: CALL_OW 251
7797: PPUSH
7798: LD_INT 3
7800: PPUSH
7801: CALL_OW 331
// InGameOff ;
7805: CALL_OW 9
// end ;
7809: PPOPN 5
7811: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7812: LD_EXP 34
7816: PPUSH
7817: LD_EXP 40
7821: PPUSH
7822: CALL_OW 296
7826: PUSH
7827: LD_INT 10
7829: LESS
7830: IFFALSE 7846
7832: PUSH
7833: LD_INT 3
7835: PPUSH
7836: LD_EXP 40
7840: PPUSH
7841: CALL_OW 292
7845: AND
7846: IFFALSE 8204
7848: GO 7850
7850: DISABLE
7851: LD_INT 0
7853: PPUSH
// begin InGameOn ;
7854: CALL_OW 8
// beriaVisited := true ;
7858: LD_ADDR_EXP 4
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7866: LD_EXP 34
7870: PPUSH
7871: LD_EXP 40
7875: PPUSH
7876: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7880: LD_EXP 35
7884: PUSH
7885: LD_EXP 39
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PPUSH
7894: LD_INT 68
7896: PPUSH
7897: LD_INT 99
7899: PPUSH
7900: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7904: LD_EXP 40
7908: PPUSH
7909: LD_EXP 34
7913: PPUSH
7914: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7918: LD_EXP 40
7922: PPUSH
7923: LD_STRING D2-Pla-2
7925: PPUSH
7926: CALL_OW 88
// p := 0 ;
7930: LD_ADDR_VAR 0 1
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7938: LD_INT 35
7940: PPUSH
7941: CALL_OW 67
// p := p + 1 ;
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 1
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7959: LD_EXP 34
7963: PPUSH
7964: LD_EXP 40
7968: PPUSH
7969: CALL_OW 296
7973: PUSH
7974: LD_INT 6
7976: LESS
7977: IFTRUE 7989
7979: PUSH
7980: LD_VAR 0 1
7984: PUSH
7985: LD_INT 8
7987: GREATER
7988: OR
7989: IFFALSE 7938
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7991: LD_EXP 34
7995: PUSH
7996: LD_EXP 35
8000: PUSH
8001: LD_EXP 39
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: PPUSH
8011: LD_EXP 40
8015: PPUSH
8016: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
8020: LD_EXP 34
8024: PPUSH
8025: LD_STRING D2-Bur-2
8027: PPUSH
8028: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
8032: LD_INT 6
8034: PPUSH
8035: LD_INT 3
8037: PPUSH
8038: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
8042: LD_EXP 40
8046: PPUSH
8047: LD_STRING D2-Pla-3
8049: PPUSH
8050: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8054: LD_EXP 34
8058: PPUSH
8059: LD_STRING D2-Bur-3
8061: PPUSH
8062: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8066: LD_EXP 40
8070: PPUSH
8071: LD_STRING D2-Pla-4
8073: PPUSH
8074: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8078: LD_EXP 34
8082: PPUSH
8083: LD_STRING D2-Bur-4
8085: PPUSH
8086: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8090: LD_EXP 40
8094: PPUSH
8095: LD_STRING D2-Pla-5
8097: PPUSH
8098: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
8102: LD_INT 1
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL 8207 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8124: LD_EXP 40
8128: PPUSH
8129: LD_STRING D3-Pla-1
8131: PPUSH
8132: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8136: LD_EXP 34
8140: PPUSH
8141: LD_STRING D3-Bur-1
8143: PPUSH
8144: CALL_OW 88
// InGameOff ;
8148: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8152: LD_STRING M2a
8154: PPUSH
8155: CALL_OW 337
// SetSide ( beria , 3 ) ;
8159: LD_INT 106
8161: PPUSH
8162: LD_INT 3
8164: PPUSH
8165: CALL_OW 235
// if not Gnyevko then
8169: LD_EXP 35
8173: NOT
8174: IFFALSE 8195
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
8176: LD_INT 106
8178: PPUSH
8179: CALL_OW 313
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_INT 3
8190: PPUSH
8191: CALL_OW 235
// ComFree ( Platonov ) ;
8195: LD_EXP 40
8199: PPUSH
8200: CALL_OW 139
// end ;
8204: PPOPN 1
8206: END
// function AskPlatonov ( questions ) ; var q ; begin
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_STRING QMoreInfo
8218: PPUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 98
8228: ST_TO_ADDR
// case q of 1 :
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 1
8236: DOUBLE
8237: EQUAL
8238: IFTRUE 8242
8240: GO 8269
8242: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
8243: LD_EXP 34
8247: PPUSH
8248: LD_STRING D2a-Bur-1
8250: PPUSH
8251: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
8255: LD_EXP 40
8259: PPUSH
8260: LD_STRING D2a-Pla-1
8262: PPUSH
8263: CALL_OW 88
// end ; 2 :
8267: GO 8340
8269: LD_INT 2
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8304
8277: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
8278: LD_EXP 34
8282: PPUSH
8283: LD_STRING D2b-Bur-1
8285: PPUSH
8286: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
8290: LD_EXP 40
8294: PPUSH
8295: LD_STRING D2b-Pla-1
8297: PPUSH
8298: CALL_OW 88
// end ; 3 :
8302: GO 8340
8304: LD_INT 3
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8339
8312: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
8313: LD_EXP 34
8317: PPUSH
8318: LD_STRING D2c-Bur-1
8320: PPUSH
8321: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
8325: LD_EXP 40
8329: PPUSH
8330: LD_STRING D2c-Pla-1
8332: PPUSH
8333: CALL_OW 88
// end ; end ;
8337: GO 8340
8339: POP
// if q < 4 and questions > 2 then
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 4
8347: LESS
8348: IFFALSE 8360
8350: PUSH
8351: LD_VAR 0 1
8355: PUSH
8356: LD_INT 2
8358: GREATER
8359: AND
8360: IFFALSE 8377
// AskPlatonov ( questions diff q ) ;
8362: LD_VAR 0 1
8366: PUSH
8367: LD_VAR 0 3
8371: DIFF
8372: PPUSH
8373: CALL 8207 0 1
// end ;
8377: LD_VAR 0 2
8381: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8382: LD_INT 0
8384: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8385: LD_EXP 40
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8404: LD_INT 35
8406: PPUSH
8407: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8411: LD_EXP 40
8415: PPUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_VAR 0 2
8425: PPUSH
8426: CALL_OW 297
8430: PUSH
8431: LD_INT 5
8433: LESS
8434: IFFALSE 8456
8436: PUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 283
8451: PUSH
8452: LD_INT 1
8454: EQUAL
8455: AND
8456: IFFALSE 8404
// ComStop ( Platonov ) ;
8458: LD_EXP 40
8462: PPUSH
8463: CALL_OW 141
// if ingame_video then
8467: LD_OWVAR 52
8471: IFFALSE 8475
// exit ;
8473: GO 8496
// ComHold ( Platonov ) ;
8475: LD_EXP 40
8479: PPUSH
8480: CALL_OW 140
// Say ( Platonov , D4-Pla-1 ) ;
8484: LD_EXP 40
8488: PPUSH
8489: LD_STRING D4-Pla-1
8491: PPUSH
8492: CALL_OW 88
// end ;
8496: LD_VAR 0 3
8500: RET
// every 0 0$2 trigger hasLab do
8501: LD_EXP 9
8505: IFFALSE 8569
8507: GO 8509
8509: DISABLE
// begin DialogueOn ;
8510: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8514: LD_EXP 34
8518: PPUSH
8519: LD_STRING D5a-Bur-1
8521: PPUSH
8522: CALL_OW 88
// if hasWorkshop then
8526: LD_EXP 10
8530: IFFALSE 8546
// Say ( Platonov , D5a-Pla-1 ) else
8532: LD_EXP 40
8536: PPUSH
8537: LD_STRING D5a-Pla-1
8539: PPUSH
8540: CALL_OW 88
8544: GO 8558
// Say ( Platonov , D5a-Pla-1a ) ;
8546: LD_EXP 40
8550: PPUSH
8551: LD_STRING D5a-Pla-1a
8553: PPUSH
8554: CALL_OW 88
// DialogueOff ;
8558: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8562: LD_STRING M2b
8564: PPUSH
8565: CALL_OW 337
// end ;
8569: END
// every 0 0$2 trigger hasWorkshop do
8570: LD_EXP 10
8574: IFFALSE 8638
8576: GO 8578
8578: DISABLE
// begin DialogueOn ;
8579: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8583: LD_EXP 34
8587: PPUSH
8588: LD_STRING D5b-Bur-1
8590: PPUSH
8591: CALL_OW 88
// if hasLab then
8595: LD_EXP 9
8599: IFFALSE 8615
// Say ( Platonov , D5b-Pla-1 ) else
8601: LD_EXP 40
8605: PPUSH
8606: LD_STRING D5b-Pla-1
8608: PPUSH
8609: CALL_OW 88
8613: GO 8627
// Say ( Platonov , D5b-Pla-1a ) ;
8615: LD_EXP 40
8619: PPUSH
8620: LD_STRING D5b-Pla-1a
8622: PPUSH
8623: CALL_OW 88
// DialogueOff ;
8627: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8631: LD_STRING M2c
8633: PPUSH
8634: CALL_OW 337
// end ;
8638: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8639: LD_EXP 9
8643: IFFALSE 8651
8645: PUSH
8646: LD_EXP 10
8650: AND
8651: IFFALSE 8745
8653: GO 8655
8655: DISABLE
// begin DialogueOn ;
8656: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8660: LD_INT 47
8662: PPUSH
8663: LD_INT 3
8665: PPUSH
8666: CALL_OW 321
8670: PUSH
8671: LD_INT 2
8673: EQUAL
8674: IFFALSE 8702
// begin Say ( Burlak , D7b-Bur-1 ) ;
8676: LD_EXP 34
8680: PPUSH
8681: LD_STRING D7b-Bur-1
8683: PPUSH
8684: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8688: LD_EXP 40
8692: PPUSH
8693: LD_STRING D7b-Pla-1
8695: PPUSH
8696: CALL_OW 88
// end else
8700: GO 8726
// begin Say ( Burlak , D7a-Bur-1 ) ;
8702: LD_EXP 34
8706: PPUSH
8707: LD_STRING D7a-Bur-1
8709: PPUSH
8710: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8714: LD_EXP 40
8718: PPUSH
8719: LD_STRING D7a-Pla-1
8721: PPUSH
8722: CALL_OW 88
// end ; DialogueOff ;
8726: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8730: LD_STRING M2
8732: PPUSH
8733: CALL_OW 337
// hasToBuildTank := true ;
8737: LD_ADDR_EXP 11
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end ;
8745: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8746: LD_EXP 4
8750: IFFALSE 8776
8752: PUSH
8753: LD_EXP 9
8757: NOT
8758: IFTRUE 8767
8760: PUSH
8761: LD_EXP 10
8765: NOT
8766: OR
8767: IFTRUE 8775
8769: PUSH
8770: LD_EXP 11
8774: OR
8775: AND
8776: IFFALSE 8819
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 3
8791: PUSH
8792: LD_INT 91
8794: PUSH
8795: LD_INT 106
8797: PUSH
8798: LD_INT 32
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 69
8818: AND
8819: IFFALSE 8928
8821: GO 8823
8823: DISABLE
8824: LD_INT 0
8826: PPUSH
// begin enable ;
8827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8828: LD_ADDR_VAR 0 1
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: LD_INT 91
8848: PUSH
8849: LD_INT 106
8851: PUSH
8852: LD_INT 32
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 69
8872: ST_TO_ADDR
// InGameOn ;
8873: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8877: LD_VAR 0 1
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: LD_INT 66
8897: PPUSH
8898: LD_INT 99
8900: PPUSH
8901: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8905: LD_EXP 40
8909: PPUSH
8910: LD_STRING D8-Pla-1
8912: PPUSH
8913: CALL_OW 88
// wait ( 0 0$3 ) ;
8917: LD_INT 105
8919: PPUSH
8920: CALL_OW 67
// InGameOff ;
8924: CALL_OW 9
// end ;
8928: PPOPN 1
8930: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8931: LD_INT 21
8933: PPUSH
8934: LD_INT 22
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 23
8946: PUSH
8947: LD_INT 3
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 30
8959: PUSH
8960: LD_INT 4
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 30
8969: PUSH
8970: LD_INT 31
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 70
8991: IFFALSE 9000
8993: PUSH
8994: LD_EXP 31
8998: NOT
8999: AND
9000: IFFALSE 9251
9002: GO 9004
9004: DISABLE
9005: LD_INT 0
9007: PPUSH
// begin enable ;
9008: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) [ 1 ] ;
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_INT 21
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 23
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 2
9039: PUSH
9040: LD_INT 30
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 30
9052: PUSH
9053: LD_INT 31
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 70
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9079: LD_EXP 40
9083: PPUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9093: LD_INT 35
9095: PPUSH
9096: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9100: LD_EXP 40
9104: PPUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 296
9114: PUSH
9115: LD_INT 6
9117: LESS
9118: IFFALSE 9093
// InGameOn ;
9120: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9124: LD_EXP 40
9128: PPUSH
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 119
// ComTurnUnit ( Burlak , Platonov ) ;
9138: LD_EXP 34
9142: PPUSH
9143: LD_EXP 40
9147: PPUSH
9148: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
9152: LD_EXP 40
9156: PPUSH
9157: LD_STRING D6-Pla-1
9159: PPUSH
9160: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9164: LD_EXP 34
9168: PPUSH
9169: LD_STRING D6-Bur-1
9171: PPUSH
9172: CALL_OW 88
// RemoveUnit ( tmp ) ;
9176: LD_VAR 0 1
9180: PPUSH
9181: CALL_OW 64
// if GetBType ( tmp ) = b_breastwork then
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 266
9194: PUSH
9195: LD_INT 31
9197: EQUAL
9198: IFFALSE 9220
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
9200: LD_INT 106
9202: PPUSH
9203: CALL_OW 274
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 10
9213: PPUSH
9214: CALL_OW 276
9218: GO 9238
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
9220: LD_INT 106
9222: PPUSH
9223: CALL_OW 274
9227: PPUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_INT 30
9233: PPUSH
9234: CALL_OW 276
// InGameOff ;
9238: CALL_OW 9
// ComFree ( Burlak ) ;
9242: LD_EXP 34
9246: PPUSH
9247: CALL_OW 139
// end ;
9251: PPOPN 1
9253: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
9254: LD_EXP 4
9258: IFFALSE 9304
9260: PUSH
9261: LD_INT 21
9263: PPUSH
9264: LD_INT 22
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 23
9276: PUSH
9277: LD_INT 3
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 71
9303: AND
9304: IFFALSE 9625
9306: GO 9308
9308: DISABLE
9309: LD_INT 0
9311: PPUSH
9312: PPUSH
// begin enable ;
9313: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
9314: LD_ADDR_VAR 0 1
9318: PUSH
9319: LD_INT 21
9321: PPUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 23
9334: PUSH
9335: LD_INT 3
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 21
9344: PUSH
9345: LD_INT 3
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 71
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9366: LD_EXP 40
9370: PPUSH
9371: LD_VAR 0 1
9375: PPUSH
9376: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9380: LD_INT 35
9382: PPUSH
9383: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9387: LD_EXP 40
9391: PPUSH
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 296
9401: PUSH
9402: LD_INT 6
9404: LESS
9405: IFFALSE 9380
// InGameOn ;
9407: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9411: LD_EXP 40
9415: PPUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 119
// ComTurnUnit ( Burlak , Platonov ) ;
9425: LD_EXP 34
9429: PPUSH
9430: LD_EXP 40
9434: PPUSH
9435: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
9439: LD_EXP 40
9443: PPUSH
9444: LD_STRING DPlatAngry
9446: PPUSH
9447: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9451: LD_EXP 34
9455: PPUSH
9456: LD_STRING D6-Bur-1
9458: PPUSH
9459: CALL_OW 88
// RemoveUnit ( tmp ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 64
// InGameOff ;
9472: CALL_OW 9
// ComFree ( Burlak ) ;
9476: LD_EXP 34
9480: PPUSH
9481: CALL_OW 139
// amount := 0 ;
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9493: LD_VAR 0 1
9497: PPUSH
9498: CALL_OW 266
9502: PUSH
9503: LD_INT 31
9505: DOUBLE
9506: EQUAL
9507: IFTRUE 9511
9509: GO 9522
9511: POP
// amount := 10 ; b_lab :
9512: LD_ADDR_VAR 0 2
9516: PUSH
9517: LD_INT 10
9519: ST_TO_ADDR
9520: GO 9599
9522: LD_INT 6
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9541
9530: POP
// amount := 20 ; b_armoury :
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 20
9538: ST_TO_ADDR
9539: GO 9599
9541: LD_INT 4
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9560
9549: POP
// amount := 30 ; b_workshop :
9550: LD_ADDR_VAR 0 2
9554: PUSH
9555: LD_INT 30
9557: ST_TO_ADDR
9558: GO 9599
9560: LD_INT 2
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 9579
9568: POP
// amount := 40 ; b_oil_power :
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: LD_INT 40
9576: ST_TO_ADDR
9577: GO 9599
9579: LD_INT 26
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9598
9587: POP
// amount := 20 ; end ;
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 20
9595: ST_TO_ADDR
9596: GO 9599
9598: POP
// if amount then
9599: LD_VAR 0 2
9603: IFFALSE 9625
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9605: LD_INT 106
9607: PPUSH
9608: CALL_OW 274
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 2
9620: PPUSH
9621: CALL_OW 276
// end ;
9625: PPOPN 2
9627: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9628: LD_INT 22
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 92
9640: PUSH
9641: LD_INT 112
9643: PUSH
9644: LD_INT 155
9646: PUSH
9647: LD_INT 8
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PPUSH
9660: CALL_OW 69
9664: PUSH
9665: LD_INT 2
9667: LESS
9668: IFFALSE 9691
9670: PUSH
9671: LD_EXP 34
9675: PPUSH
9676: LD_INT 112
9678: PPUSH
9679: LD_INT 155
9681: PPUSH
9682: CALL_OW 297
9686: PUSH
9687: LD_INT 8
9689: LESS
9690: AND
9691: IFFALSE 9906
9693: GO 9695
9695: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9696: LD_INT 112
9698: PPUSH
9699: LD_INT 155
9701: PPUSH
9702: LD_INT 3
9704: PPUSH
9705: LD_INT 4
9707: NEG
9708: PPUSH
9709: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9713: LD_INT 1
9715: PPUSH
9716: LD_EXP 34
9720: PPUSH
9721: CALL_OW 471
// uc_side := 1 ;
9725: LD_ADDR_OWVAR 20
9729: PUSH
9730: LD_INT 1
9732: ST_TO_ADDR
// uc_nation := 1 ;
9733: LD_ADDR_OWVAR 21
9737: PUSH
9738: LD_INT 1
9740: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9741: LD_ADDR_EXP 49
9745: PUSH
9746: LD_STRING Dickens
9748: PPUSH
9749: CALL_OW 25
9753: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9754: LD_EXP 49
9758: PPUSH
9759: LD_INT 112
9761: PPUSH
9762: LD_INT 155
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 48
// wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9779: LD_EXP 49
9783: PPUSH
9784: LD_EXP 34
9788: PPUSH
9789: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9793: LD_EXP 49
9797: PPUSH
9798: LD_STRING DUsSpawnSol
9800: PPUSH
9801: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9805: LD_INT 1
9807: PPUSH
9808: LD_EXP 34
9812: PPUSH
9813: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9817: LD_INT 112
9819: PPUSH
9820: LD_INT 155
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9830: LD_EXP 49
9834: PPUSH
9835: LD_INT 77
9837: PPUSH
9838: LD_INT 152
9840: PPUSH
9841: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9845: LD_INT 35
9847: PPUSH
9848: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9852: LD_EXP 49
9856: PPUSH
9857: CALL_OW 302
9861: NOT
9862: IFTRUE 9881
9864: PUSH
9865: LD_EXP 49
9869: PPUSH
9870: LD_INT 77
9872: PPUSH
9873: LD_INT 152
9875: PPUSH
9876: CALL_OW 307
9880: OR
9881: IFFALSE 9845
// if not IsOk ( Dickens ) then
9883: LD_EXP 49
9887: PPUSH
9888: CALL_OW 302
9892: NOT
9893: IFFALSE 9897
// exit ;
9895: GO 9906
// RemoveUnit ( Dickens ) ;
9897: LD_EXP 49
9901: PPUSH
9902: CALL_OW 64
// end ;
9906: END
// every 0 0$2 trigger GetLives ( Burlak ) < 900 do
9907: LD_EXP 34
9911: PPUSH
9912: CALL_OW 256
9916: PUSH
9917: LD_INT 900
9919: LESS
9920: IFFALSE 9952
9922: GO 9924
9924: DISABLE
// begin if SideShoot ( Burlak ) = 1 then
9925: LD_EXP 34
9929: PPUSH
9930: CALL_OW 503
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: IFFALSE 9952
// Say ( Burlak , DUsSpawnBur ) ;
9940: LD_EXP 34
9944: PPUSH
9945: LD_STRING DUsSpawnBur
9947: PPUSH
9948: CALL_OW 88
// end ;
9952: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9953: LD_EXP 12
9957: IFFALSE 10863
9959: GO 9961
9961: DISABLE
9962: LD_INT 0
9964: PPUSH
9965: PPUSH
9966: PPUSH
9967: PPUSH
// begin hasToBuildTank := false ;
9968: LD_ADDR_EXP 11
9972: PUSH
9973: LD_INT 0
9975: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9976: LD_ADDR_EXP 5
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9984: LD_ADDR_VAR 0 2
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 21
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 69
10017: ST_TO_ADDR
// InGameOn ;
10018: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
10022: LD_VAR 0 2
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PPUSH
10031: CALL_OW 85
// wait ( 0 0$1 ) ;
10035: LD_INT 35
10037: PPUSH
10038: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
10042: LD_EXP 34
10046: PPUSH
10047: LD_STRING D9-Bur-1
10049: PPUSH
10050: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
10054: LD_EXP 40
10058: PPUSH
10059: LD_VAR 0 2
10063: PUSH
10064: LD_INT 1
10066: ARRAY
10067: PPUSH
10068: CALL_OW 112
// p := 0 ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10080: LD_INT 35
10082: PPUSH
10083: CALL_OW 67
// p := p + 1 ;
10087: LD_ADDR_VAR 0 3
10091: PUSH
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 1
10099: PLUS
10100: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
10101: LD_EXP 40
10105: PPUSH
10106: LD_VAR 0 2
10110: PUSH
10111: LD_INT 1
10113: ARRAY
10114: PPUSH
10115: CALL_OW 296
10119: PUSH
10120: LD_INT 8
10122: LESS
10123: IFTRUE 10135
10125: PUSH
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 8
10133: GREATER
10134: OR
10135: IFFALSE 10080
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
10137: LD_EXP 40
10141: PPUSH
10142: LD_VAR 0 2
10146: PUSH
10147: LD_INT 1
10149: ARRAY
10150: PPUSH
10151: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
10155: LD_EXP 40
10159: PPUSH
10160: LD_STRING D9-Pla-1
10162: PPUSH
10163: CALL_OW 88
// ComFree ( Platonov ) ;
10167: LD_EXP 40
10171: PPUSH
10172: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
10176: LD_EXP 40
10180: PPUSH
10181: LD_INT 64
10183: PPUSH
10184: LD_INT 98
10186: PPUSH
10187: CALL_OW 171
// InGameOff ;
10191: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
10195: LD_STRING M3
10197: PPUSH
10198: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
10202: LD_EXP 41
10206: PPUSH
10207: LD_INT 70
10209: PPUSH
10210: LD_INT 108
10212: PPUSH
10213: CALL_OW 111
// AddComHold ( Kuklajs ) ;
10217: LD_EXP 41
10221: PPUSH
10222: CALL_OW 200
// wait ( 1 ) ;
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 67
// ComExit ( Belkov ) ;
10233: LD_EXP 36
10237: PPUSH
10238: CALL 56209 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
10242: LD_EXP 36
10246: PPUSH
10247: LD_INT 113
10249: PPUSH
10250: LD_INT 104
10252: PPUSH
10253: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_INT 116
10264: PPUSH
10265: LD_INT 108
10267: PPUSH
10268: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
10272: LD_INT 35
10274: PPUSH
10275: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10279: LD_INT 22
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 21
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 91
10301: PUSH
10302: LD_INT 71
10304: PUSH
10305: LD_INT 8
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: IFFALSE 10272
// InGameOn ;
10324: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10328: LD_ADDR_VAR 0 2
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_INT 3
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 91
10355: PUSH
10356: LD_INT 71
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: ST_TO_ADDR
// ComExit ( Kurin ) ;
10377: LD_EXP 38
10381: PPUSH
10382: CALL 56209 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10386: LD_EXP 38
10390: PPUSH
10391: LD_VAR 0 2
10395: PUSH
10396: LD_INT 1
10398: ARRAY
10399: PPUSH
10400: CALL_OW 179
// wait ( 0 0$1 ) ;
10404: LD_INT 35
10406: PPUSH
10407: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10411: LD_VAR 0 2
10415: PUSH
10416: LD_INT 1
10418: ARRAY
10419: PPUSH
10420: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10424: LD_ADDR_VAR 0 4
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 1
10436: ARRAY
10437: PPUSH
10438: CALL_OW 311
10442: ST_TO_ADDR
// ComExit ( un ) ;
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 56209 0 1
// wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10459: LD_VAR 0 4
10463: PPUSH
10464: LD_EXP 38
10468: PPUSH
10469: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10473: LD_EXP 36
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10491: LD_INT 10
10493: PPUSH
10494: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10498: LD_EXP 38
10502: PPUSH
10503: LD_STRING D10-Kur-1
10505: PPUSH
10506: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10510: LD_EXP 36
10514: PPUSH
10515: LD_INT 122
10517: PPUSH
10518: LD_INT 112
10520: PPUSH
10521: CALL_OW 176
// wait ( 0 0$2 ) ;
10525: LD_INT 70
10527: PPUSH
10528: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10532: LD_EXP 36
10536: PPUSH
10537: LD_STRING D10-Bel-1
10539: PPUSH
10540: CALL_OW 88
// if belkovBrother then
10544: LD_EXP 32
10548: IFFALSE 10600
// begin Say ( Burlak , D10-Bur-1 ) ;
10550: LD_EXP 34
10554: PPUSH
10555: LD_STRING D10-Bur-1
10557: PPUSH
10558: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10562: LD_EXP 36
10566: PPUSH
10567: LD_STRING D10-Bel-2
10569: PPUSH
10570: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10574: LD_EXP 34
10578: PPUSH
10579: LD_STRING D10-Bur-2
10581: PPUSH
10582: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10586: LD_EXP 38
10590: PPUSH
10591: LD_STRING D10-Kur-2a
10593: PPUSH
10594: CALL_OW 88
// end else
10598: GO 10612
// begin Say ( Kurin , D10-Kur-2 ) end ;
10600: LD_EXP 38
10604: PPUSH
10605: LD_STRING D10-Kur-2
10607: PPUSH
10608: CALL_OW 88
// wait ( 0 0$2 ) ;
10612: LD_INT 70
10614: PPUSH
10615: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10619: LD_EXP 38
10623: PPUSH
10624: LD_STRING D10-Kur-2b
10626: PPUSH
10627: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10631: LD_VAR 0 4
10635: PPUSH
10636: LD_INT 66
10638: PPUSH
10639: LD_INT 97
10641: PPUSH
10642: CALL_OW 111
// wait ( 0 0$5 ) ;
10646: LD_INT 175
10648: PPUSH
10649: CALL_OW 67
// InGameOff ;
10653: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10657: LD_EXP 33
10661: PPUSH
10662: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10666: LD_STRING M4
10668: PPUSH
10669: CALL_OW 337
// wait ( 0 0$6 ) ;
10673: LD_INT 210
10675: PPUSH
10676: CALL_OW 67
// kurinDontWannaTalk := true ;
10680: LD_ADDR_EXP 5
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10688: LD_INT 140
10690: PPUSH
10691: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10695: LD_INT 35
10697: PPUSH
10698: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10702: LD_EXP 34
10706: PPUSH
10707: CALL_OW 310
10711: IFTRUE 10731
10713: PUSH
10714: LD_EXP 34
10718: PPUSH
10719: LD_INT 106
10721: PPUSH
10722: CALL_OW 296
10726: PUSH
10727: LD_INT 12
10729: LESS
10730: OR
10731: IFFALSE 10695
// DialogueOn ;
10733: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10737: LD_EXP 40
10741: PPUSH
10742: LD_STRING D11-Pla-1
10744: PPUSH
10745: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10749: LD_EXP 34
10753: PPUSH
10754: LD_STRING D11-Bur-1
10756: PPUSH
10757: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10761: LD_INT 22
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PPUSH
10785: CALL_OW 69
10789: PUSH
10790: LD_INT 1
10792: GREATER
10793: IFFALSE 10807
// Say ( Burlak , D11-Bur-1a ) ;
10795: LD_EXP 34
10799: PPUSH
10800: LD_STRING D11-Bur-1a
10802: PPUSH
10803: CALL_OW 88
// DialogueOff ;
10807: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10811: LD_ADDR_EXP 8
10815: PUSH
10816: LD_INT 160
10818: PUSH
10819: LD_INT 150
10821: PUSH
10822: LD_INT 140
10824: PUSH
10825: LD_INT 120
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_OWVAR 67
10838: ARRAY
10839: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10840: LD_STRING M5
10842: PPUSH
10843: CALL_OW 337
// kirovHasTank := true ;
10847: LD_ADDR_EXP 6
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// hasToBuildTank := true ;
10855: LD_ADDR_EXP 11
10859: PUSH
10860: LD_INT 1
10862: ST_TO_ADDR
// end ;
10863: PPOPN 4
10865: END
// every 0 0$2 trigger allianceAttacked do
10866: LD_EXP 13
10870: IFFALSE 10909
10872: GO 10874
10874: DISABLE
// begin DialogueOn ;
10875: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10879: LD_EXP 38
10883: PPUSH
10884: LD_STRING DArestKur
10886: PPUSH
10887: CALL_OW 88
// dwait ( 0 0$1 ) ;
10891: LD_INT 35
10893: PPUSH
10894: CALL_OW 68
// YouLost ( SelfAttack ) ;
10898: LD_STRING SelfAttack
10900: PPUSH
10901: CALL_OW 104
// DialogueOff ;
10905: CALL_OW 7
// end ;
10909: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10910: LD_INT 22
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 2
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 69
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_INT 3
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 21
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PPUSH
10963: CALL_OW 69
10967: GREATEREQUAL
10968: IFFALSE 10976
10970: PUSH
10971: LD_EXP 6
10975: AND
10976: IFFALSE 11146
10978: GO 10980
10980: DISABLE
// begin hasToBuildTank := false ;
10981: LD_ADDR_EXP 11
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// blockNorth := false ;
10989: LD_ADDR_EXP 7
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// InGameOn ;
10997: CALL_OW 8
// wait ( 0 0$2 ) ;
11001: LD_INT 70
11003: PPUSH
11004: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
11008: LD_INT 106
11010: PPUSH
11011: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
11015: LD_EXP 40
11019: PPUSH
11020: LD_INT 65
11022: PPUSH
11023: LD_INT 97
11025: PPUSH
11026: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
11030: LD_EXP 40
11034: PPUSH
11035: LD_EXP 34
11039: PPUSH
11040: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
11044: LD_EXP 34
11048: PPUSH
11049: LD_STRING D12-Bur-1
11051: PPUSH
11052: CALL_OW 88
// wait ( 0 0$1 ) ;
11056: LD_INT 35
11058: PPUSH
11059: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D12-Pla-1
11070: PPUSH
11071: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11075: LD_EXP 34
11079: PPUSH
11080: LD_STRING D12-Bur-2
11082: PPUSH
11083: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11087: LD_EXP 40
11091: PPUSH
11092: LD_STRING D12-Pla-2
11094: PPUSH
11095: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11099: LD_EXP 34
11103: PPUSH
11104: LD_STRING D12-Bur-3
11106: PPUSH
11107: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11111: LD_EXP 40
11115: PPUSH
11116: LD_STRING D12-Pla-3
11118: PPUSH
11119: CALL_OW 88
// hasAllTanks := true ;
11123: LD_ADDR_EXP 14
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// InGameOff ;
11131: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
11135: LD_STRING M6
11137: PPUSH
11138: CALL_OW 337
// PrepareAmerican ;
11142: CALL 4313 0 0
// end ;
11146: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
11147: LD_EXP 17
11151: IFFALSE 12928
11153: GO 11155
11155: DISABLE
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
// begin PrepareAmericanTrap ;
11165: CALL 5113 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
11169: LD_ADDR_VAR 0 2
11173: PUSH
11174: LD_EXP 48
11178: PPUSH
11179: LD_INT 26
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 72
11193: PUSH
11194: LD_INT 1
11196: ARRAY
11197: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
11198: LD_INT 22
11200: PUSH
11201: LD_INT 3
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 3
11210: PUSH
11211: LD_INT 21
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 60
11227: PUSH
11228: EMPTY
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 69
11240: PPUSH
11241: CALL_OW 141
// InGameOn ;
11245: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
11249: LD_INT 69
11251: PPUSH
11252: LD_INT 22
11254: PPUSH
11255: CALL_OW 86
// wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// DialogueOn ;
11266: CALL_OW 6
// game_speed := 4 ;
11270: LD_ADDR_OWVAR 65
11274: PUSH
11275: LD_INT 4
11277: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
11278: LD_VAR 0 2
11282: PPUSH
11283: LD_STRING D13-Sol1-1
11285: PPUSH
11286: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
11290: LD_EXP 36
11294: PPUSH
11295: LD_STRING D13-Bel-1
11297: PPUSH
11298: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11302: LD_EXP 38
11306: PPUSH
11307: LD_STRING D13-Kur-1
11309: PPUSH
11310: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
11314: LD_INT 10
11316: PPUSH
11317: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
11321: LD_EXP 36
11325: PPUSH
11326: LD_STRING D13-Bel-2
11328: PPUSH
11329: CALL_OW 94
// DialogueOff ;
11333: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11337: LD_EXP 36
11341: PPUSH
11342: LD_INT 76
11344: PPUSH
11345: LD_INT 20
11347: PPUSH
11348: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11352: LD_EXP 45
11356: PPUSH
11357: LD_INT 72
11359: PPUSH
11360: LD_INT 20
11362: PPUSH
11363: CALL_OW 111
// wait ( 0 0$2 ) ;
11367: LD_INT 70
11369: PPUSH
11370: CALL_OW 67
// for i in usTrapForces do
11374: LD_ADDR_VAR 0 1
11378: PUSH
11379: LD_EXP 48
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11418
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11387: LD_VAR 0 1
11391: PPUSH
11392: LD_INT 7
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_EXP 36
11411: PPUSH
11412: CALL_OW 119
// end ;
11416: GO 11384
11418: POP
11419: POP
// wait ( 0 0$0.3 ) ;
11420: LD_INT 10
11422: PPUSH
11423: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11427: LD_EXP 48
11431: PPUSH
11432: LD_INT 65
11434: PPUSH
11435: LD_INT 18
11437: PPUSH
11438: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11449: LD_EXP 48
11453: PPUSH
11454: LD_INT 101
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 72
11468: PUSH
11469: LD_INT 3
11471: GREATER
11472: IFFALSE 11442
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11474: LD_INT 65
11476: PPUSH
11477: LD_INT 18
11479: PPUSH
11480: LD_INT 3
11482: PPUSH
11483: LD_INT 26
11485: NEG
11486: PPUSH
11487: CALL_OW 330
// DialogueOn ;
11491: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_STRING D14-Sol1-1
11502: PPUSH
11503: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11507: LD_EXP 36
11511: PPUSH
11512: LD_STRING D14-Bel-1
11514: PPUSH
11515: CALL_OW 88
// DialogueOff ;
11519: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11523: LD_INT 65
11525: PPUSH
11526: LD_INT 18
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11536: LD_EXP 45
11540: PPUSH
11541: LD_INT 31
11543: PPUSH
11544: LD_INT 9
11546: PPUSH
11547: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11551: LD_EXP 48
11555: PPUSH
11556: LD_INT 50
11558: PPUSH
11559: LD_INT 16
11561: PPUSH
11562: CALL_OW 174
// wait ( 0 0$2 ) ;
11566: LD_INT 70
11568: PPUSH
11569: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11573: LD_ADDR_VAR 0 6
11577: PUSH
11578: LD_EXP 36
11582: PPUSH
11583: CALL_OW 310
11587: ST_TO_ADDR
// if not belkovTank then
11588: LD_VAR 0 6
11592: NOT
11593: IFFALSE 11633
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11595: LD_ADDR_VAR 0 6
11599: PUSH
11600: LD_INT 22
11602: PUSH
11603: LD_INT 6
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 69
11628: PUSH
11629: LD_INT 1
11631: ARRAY
11632: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11633: LD_EXP 36
11637: PPUSH
11638: LD_INT 58
11640: PPUSH
11641: LD_INT 21
11643: PPUSH
11644: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11648: LD_EXP 36
11652: PPUSH
11653: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11657: LD_EXP 36
11661: PPUSH
11662: LD_INT 53
11664: PPUSH
11665: LD_INT 18
11667: PPUSH
11668: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11672: LD_EXP 36
11676: PPUSH
11677: LD_INT 31
11679: PPUSH
11680: LD_INT 9
11682: PPUSH
11683: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11687: LD_INT 35
11689: PPUSH
11690: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11694: LD_ADDR_VAR 0 1
11698: PUSH
11699: LD_EXP 36
11703: PUSH
11704: LD_EXP 45
11708: UNION
11709: PUSH
11710: LD_VAR 0 6
11714: UNION
11715: PUSH
11716: FOR_IN
11717: IFFALSE 11748
// if GetLives ( i ) < 800 then
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL_OW 256
11728: PUSH
11729: LD_INT 800
11731: LESS
11732: IFFALSE 11746
// SetLives ( i , 800 ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_INT 800
11741: PPUSH
11742: CALL_OW 234
11746: GO 11716
11748: POP
11749: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11750: LD_EXP 36
11754: PPUSH
11755: LD_INT 31
11757: PPUSH
11758: LD_INT 9
11760: PPUSH
11761: CALL_OW 297
11765: PUSH
11766: LD_INT 4
11768: LESS
11769: IFFALSE 11687
// for i := 1 to Difficulty do
11771: LD_ADDR_VAR 0 1
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_OWVAR 67
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11829
// if i <= belkovTeam then
11789: LD_VAR 0 1
11793: PUSH
11794: LD_EXP 45
11798: LESSEQUAL
11799: IFFALSE 11827
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11801: LD_EXP 45
11805: PUSH
11806: LD_VAR 0 1
11810: ARRAY
11811: PPUSH
11812: LD_INT 600
11814: PPUSH
11815: LD_INT 800
11817: PPUSH
11818: CALL_OW 12
11822: PPUSH
11823: CALL_OW 234
11827: GO 11786
11829: POP
11830: POP
// SetLives ( Belkov , 820 ) ;
11831: LD_EXP 36
11835: PPUSH
11836: LD_INT 820
11838: PPUSH
11839: CALL_OW 234
// InGameOff ;
11843: CALL_OW 9
// DialogueOn ;
11847: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11851: LD_EXP 36
11855: PPUSH
11856: LD_STRING D14-Bel-1a
11858: PPUSH
11859: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11863: LD_EXP 38
11867: PPUSH
11868: LD_STRING D14-Kur-1
11870: PPUSH
11871: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11875: LD_EXP 36
11879: PPUSH
11880: LD_STRING D14-Bel-2
11882: PPUSH
11883: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11887: LD_EXP 38
11891: PPUSH
11892: LD_STRING D14-Kur-2
11894: PPUSH
11895: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11899: LD_EXP 34
11903: PPUSH
11904: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11908: LD_EXP 34
11912: PPUSH
11913: LD_STRING D14a-Bur-1
11915: PPUSH
11916: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11920: LD_EXP 40
11924: PPUSH
11925: LD_STRING D14a-Pla-1
11927: PPUSH
11928: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11932: LD_EXP 34
11936: PPUSH
11937: LD_STRING D14a-Bur-2
11939: PPUSH
11940: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11944: LD_EXP 40
11948: PPUSH
11949: LD_STRING D14a-Pla-2
11951: PPUSH
11952: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11956: LD_EXP 34
11960: PPUSH
11961: LD_STRING D14a-Bur-3
11963: PPUSH
11964: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11968: LD_EXP 40
11972: PPUSH
11973: LD_STRING D14a-Pla-3
11975: PPUSH
11976: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11980: LD_EXP 34
11984: PPUSH
11985: LD_STRING D14a-Bur-4
11987: PPUSH
11988: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11992: LD_EXP 40
11996: PPUSH
11997: LD_STRING D14a-Pla-4
11999: PPUSH
12000: CALL_OW 88
// DialogueOff ;
12004: CALL_OW 7
// belkovTrapped := true ;
12008: LD_ADDR_EXP 18
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
12016: LD_EXP 48
12020: PPUSH
12021: LD_INT 68
12023: PPUSH
12024: LD_INT 16
12026: PPUSH
12027: CALL_OW 111
// if belkovTank then
12031: LD_VAR 0 6
12035: IFFALSE 12074
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
12037: LD_EXP 48
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: PPUSH
12046: LD_VAR 0 6
12050: PPUSH
12051: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
12055: LD_EXP 48
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: LD_INT 69
12066: PPUSH
12067: LD_INT 20
12069: PPUSH
12070: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
12074: LD_EXP 36
12078: PPUSH
12079: LD_INT 40
12081: PPUSH
12082: LD_INT 17
12084: PPUSH
12085: CALL_OW 111
// AddComHold ( Belkov ) ;
12089: LD_EXP 36
12093: PPUSH
12094: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] , [ 41 , 16 ] ] ;
12098: LD_ADDR_VAR 0 3
12102: PUSH
12103: LD_INT 44
12105: PUSH
12106: LD_INT 18
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 42
12115: PUSH
12116: LD_INT 16
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 40
12125: PUSH
12126: LD_INT 15
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 44
12135: PUSH
12136: LD_INT 20
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 42
12145: PUSH
12146: LD_INT 20
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 42
12155: PUSH
12156: LD_INT 12
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 42
12165: PUSH
12166: LD_INT 8
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 41
12175: PUSH
12176: LD_INT 16
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
12193: LD_ADDR_VAR 0 1
12197: PUSH
12198: LD_EXP 45
12202: PPUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 1
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12285
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: LD_VAR 0 3
12230: PUSH
12231: LD_INT 1
12233: ARRAY
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 1
12246: ARRAY
12247: PUSH
12248: LD_INT 2
12250: ARRAY
12251: PPUSH
12252: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
12256: LD_ADDR_VAR 0 3
12260: PUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 3
12273: ST_TO_ADDR
// AddComCrawl ( i ) ;
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 197
// end ;
12283: GO 12218
12285: POP
12286: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
12287: LD_EXP 45
12291: PPUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 4
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 72
12306: IFFALSE 12338
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
12308: LD_EXP 45
12312: PPUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: PPUSH
12328: LD_INT 38
12330: PPUSH
12331: LD_INT 18
12333: PPUSH
12334: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12338: LD_ADDR_VAR 0 7
12342: PUSH
12343: LD_INT 9450
12345: PUSH
12346: LD_INT 8400
12348: PUSH
12349: LD_INT 6650
12351: PUSH
12352: LD_INT 5250
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_OWVAR 67
12365: ARRAY
12366: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12367: LD_INT 35
12369: PPUSH
12370: CALL_OW 67
// timer := timer - 0 0$1 ;
12374: LD_ADDR_VAR 0 7
12378: PUSH
12379: LD_VAR 0 7
12383: PUSH
12384: LD_INT 35
12386: MINUS
12387: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12388: LD_INT 19
12390: PPUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 70
12405: IFFALSE 12415
// timer := 0 0$0 ;
12407: LD_ADDR_VAR 0 7
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// until timer <= 0 ;
12415: LD_VAR 0 7
12419: PUSH
12420: LD_INT 0
12422: LESSEQUAL
12423: IFFALSE 12367
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12425: LD_EXP 48
12429: PPUSH
12430: LD_INT 50
12432: PUSH
12433: EMPTY
12434: LIST
12435: PPUSH
12436: CALL_OW 72
12440: NOT
12441: IFFALSE 12445
// exit ;
12443: GO 12928
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12445: LD_ADDR_VAR 0 4
12449: PUSH
12450: LD_EXP 48
12454: PPUSH
12455: LD_INT 25
12457: PUSH
12458: LD_INT 1
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 54
12470: PUSH
12471: EMPTY
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12487: LD_ADDR_VAR 0 5
12491: PUSH
12492: LD_EXP 48
12496: PPUSH
12497: LD_INT 25
12499: PUSH
12500: LD_INT 4
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: LD_INT 54
12512: PUSH
12513: EMPTY
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 72
12528: ST_TO_ADDR
// for i in sol do
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_VAR 0 4
12538: PUSH
12539: FOR_IN
12540: IFFALSE 12556
// SetTag ( i , 0 ) ;
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 109
12554: GO 12539
12556: POP
12557: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_INT 60
12565: PPUSH
12566: LD_INT 8
12568: PPUSH
12569: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12573: LD_INT 22
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 21
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: IFFALSE 12642
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12603: LD_INT 22
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 21
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 69
12631: PPUSH
12632: LD_INT 53
12634: PPUSH
12635: LD_INT 24
12637: PPUSH
12638: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12642: LD_INT 18
12644: PPUSH
12645: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12649: LD_ADDR_VAR 0 4
12653: PUSH
12654: LD_EXP 48
12658: PPUSH
12659: LD_INT 25
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 50
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: LD_INT 54
12680: PUSH
12681: EMPTY
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 72
12697: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12698: LD_VAR 0 4
12702: PPUSH
12703: LD_INT 0
12705: PPUSH
12706: CALL 53356 0 2
12710: PUSH
12711: LD_VAR 0 4
12715: EQUAL
12716: IFFALSE 12755
// begin wait ( 0 0$3 ) ;
12718: LD_INT 105
12720: PPUSH
12721: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12725: LD_VAR 0 4
12729: PPUSH
12730: LD_INT 41
12732: PPUSH
12733: LD_INT 18
12735: PPUSH
12736: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12740: LD_VAR 0 5
12744: PPUSH
12745: LD_INT 60
12747: PPUSH
12748: LD_INT 8
12750: PPUSH
12751: CALL_OW 111
// end ; for i in sol do
12755: LD_ADDR_VAR 0 1
12759: PUSH
12760: LD_VAR 0 4
12764: PUSH
12765: FOR_IN
12766: IFFALSE 12841
// if GetLives ( i ) < 800 then
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 256
12777: PUSH
12778: LD_INT 800
12780: LESS
12781: IFFALSE 12812
// begin SetTag ( i , 1 ) ;
12783: LD_VAR 0 1
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12795: LD_VAR 0 1
12799: PPUSH
12800: LD_INT 60
12802: PPUSH
12803: LD_INT 8
12805: PPUSH
12806: CALL_OW 111
// end else
12810: GO 12839
// if GetLives ( i ) = 1000 then
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 256
12821: PUSH
12822: LD_INT 1000
12824: EQUAL
12825: IFFALSE 12839
// SetTag ( i , 0 ) ;
12827: LD_VAR 0 1
12831: PPUSH
12832: LD_INT 0
12834: PPUSH
12835: CALL_OW 109
12839: GO 12765
12841: POP
12842: POP
// until belkovDied or not sol ;
12843: LD_EXP 19
12847: IFTRUE 12856
12849: PUSH
12850: LD_VAR 0 4
12854: NOT
12855: OR
12856: IFFALSE 12642
// if not sol then
12858: LD_VAR 0 4
12862: NOT
12863: IFFALSE 12867
// exit ;
12865: GO 12928
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12867: LD_VAR 0 4
12871: PUSH
12872: LD_VAR 0 5
12876: ADD
12877: PPUSH
12878: LD_INT 56
12880: PPUSH
12881: LD_INT 25
12883: PPUSH
12884: CALL_OW 111
// wait ( 0 0$30 ) ;
12888: LD_INT 1050
12890: PPUSH
12891: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12895: LD_EXP 48
12899: PPUSH
12900: LD_INT 66
12902: PPUSH
12903: LD_INT 96
12905: PPUSH
12906: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12910: LD_VAR 0 5
12914: PPUSH
12915: LD_VAR 0 4
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PPUSH
12924: CALL_OW 112
// end ;
12928: PPOPN 7
12930: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12931: LD_EXP 18
12935: IFFALSE 12944
12937: PUSH
12938: LD_EXP 19
12942: NOT
12943: AND
12944: IFFALSE 12965
12946: PUSH
12947: LD_INT 9
12949: PPUSH
12950: LD_INT 22
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 70
12964: AND
12965: IFFALSE 13292
12967: GO 12969
12969: DISABLE
// begin if not initiative then
12970: LD_EXP 31
12974: NOT
12975: IFFALSE 13222
// begin case Query ( QAttackAm ) of 1 :
12977: LD_STRING QAttackAm
12979: PPUSH
12980: CALL_OW 97
12984: PUSH
12985: LD_INT 1
12987: DOUBLE
12988: EQUAL
12989: IFTRUE 12993
12991: GO 13060
12993: POP
// begin initiative := true ;
12994: LD_ADDR_EXP 31
12998: PUSH
12999: LD_INT 1
13001: ST_TO_ADDR
// DialogueOn ;
13002: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
13006: LD_EXP 34
13010: PPUSH
13011: LD_STRING D17-Bur-1
13013: PPUSH
13014: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
13018: LD_EXP 40
13022: PPUSH
13023: LD_STRING D17-Pla-1
13025: PPUSH
13026: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
13030: LD_EXP 34
13034: PPUSH
13035: LD_STRING D17-Bur-2
13037: PPUSH
13038: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
13042: LD_EXP 40
13046: PPUSH
13047: LD_STRING D17-Pla-2
13049: PPUSH
13050: CALL_OW 94
// DialogueOff ;
13054: CALL_OW 7
// end ; 2 :
13058: GO 13222
13060: LD_INT 2
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13160
13068: POP
// begin initiative := true ;
13069: LD_ADDR_EXP 31
13073: PUSH
13074: LD_INT 1
13076: ST_TO_ADDR
// DialogueOn ;
13077: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13081: LD_EXP 34
13085: PPUSH
13086: LD_STRING D18-Bur-1
13088: PPUSH
13089: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13093: LD_EXP 40
13097: PPUSH
13098: LD_STRING D18-Pla-1
13100: PPUSH
13101: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13105: LD_EXP 34
13109: PPUSH
13110: LD_STRING D18-Bur-2
13112: PPUSH
13113: CALL_OW 88
// if not reinforcementsGained then
13117: LD_EXP 25
13121: NOT
13122: IFFALSE 13142
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
13124: LD_EXP 40
13128: PPUSH
13129: LD_STRING D18-Pla-2
13131: PPUSH
13132: CALL_OW 94
// SendReinforcements ;
13136: CALL 3644 0 0
// end else
13140: GO 13154
// SayRadio ( Platonov , D22-Pla-1b ) ;
13142: LD_EXP 40
13146: PPUSH
13147: LD_STRING D22-Pla-1b
13149: PPUSH
13150: CALL_OW 94
// DialogueOff ;
13154: CALL_OW 7
// end ; 3 :
13158: GO 13222
13160: LD_INT 3
13162: DOUBLE
13163: EQUAL
13164: IFTRUE 13168
13166: GO 13221
13168: POP
// begin if IsOk ( Gnyevko ) then
13169: LD_EXP 35
13173: PPUSH
13174: CALL_OW 302
13178: IFFALSE 13194
// Say ( Gnyevko , D19A-Gny-1 ) else
13180: LD_EXP 35
13184: PPUSH
13185: LD_STRING D19A-Gny-1
13187: PPUSH
13188: CALL_OW 88
13192: GO 13217
// if IsOk ( Kovalyuk ) then
13194: LD_EXP 39
13198: PPUSH
13199: CALL_OW 302
13203: IFFALSE 13217
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13205: LD_EXP 39
13209: PPUSH
13210: LD_STRING D19A-Kov-1
13212: PPUSH
13213: CALL_OW 88
// exit ;
13217: GO 13292
// end ; end ;
13219: GO 13222
13221: POP
// end ; if IsOk ( Gnyevko ) then
13222: LD_EXP 35
13226: PPUSH
13227: CALL_OW 302
13231: IFFALSE 13257
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13233: LD_EXP 35
13237: PPUSH
13238: LD_STRING D19-Gny-1
13240: PPUSH
13241: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13245: LD_EXP 34
13249: PPUSH
13250: LD_STRING D19-Bur-1
13252: PPUSH
13253: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
13257: LD_EXP 39
13261: PPUSH
13262: CALL_OW 302
13266: IFFALSE 13292
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13268: LD_EXP 39
13272: PPUSH
13273: LD_STRING D19-Kov-1
13275: PPUSH
13276: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13280: LD_EXP 34
13284: PPUSH
13285: LD_STRING D19-Bur-2
13287: PPUSH
13288: CALL_OW 88
// end ; end ;
13292: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
13293: LD_EXP 18
13297: IFFALSE 13306
13299: PUSH
13300: LD_EXP 19
13304: NOT
13305: AND
13306: IFFALSE 13327
13308: PUSH
13309: LD_INT 16
13311: PPUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 3
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 70
13326: AND
13327: IFFALSE 13564
13329: GO 13331
13331: DISABLE
// begin if not initiative then
13332: LD_EXP 31
13336: NOT
13337: IFFALSE 13515
// begin case Query ( QAttackBw ) of 1 :
13339: LD_STRING QAttackBw
13341: PPUSH
13342: CALL_OW 97
13346: PUSH
13347: LD_INT 1
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13398
13355: POP
// begin initiative := true ;
13356: LD_ADDR_EXP 31
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// DialogueOn ;
13364: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13368: LD_EXP 34
13372: PPUSH
13373: LD_STRING D21-Bur-1
13375: PPUSH
13376: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13380: LD_EXP 40
13384: PPUSH
13385: LD_STRING D21-Pla-1
13387: PPUSH
13388: CALL_OW 94
// DialogueOff ;
13392: CALL_OW 7
// end ; 2 :
13396: GO 13515
13398: LD_INT 2
13400: DOUBLE
13401: EQUAL
13402: IFTRUE 13406
13404: GO 13503
13406: POP
// begin initiative := true ;
13407: LD_ADDR_EXP 31
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// DialogueOn ;
13415: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13419: LD_EXP 34
13423: PPUSH
13424: LD_STRING D22-Bur-1
13426: PPUSH
13427: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13431: LD_EXP 25
13435: NOT
13436: IFFALSE 13444
13438: PUSH
13439: LD_EXP 22
13443: AND
13444: IFFALSE 13464
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13446: LD_EXP 40
13450: PPUSH
13451: LD_STRING D22-Pla-1
13453: PPUSH
13454: CALL_OW 94
// SendReinforcements ;
13458: CALL 3644 0 0
// end else
13462: GO 13497
// if not westOutpostDestroyed then
13464: LD_EXP 22
13468: NOT
13469: IFFALSE 13485
// SayRadio ( Platonov , D22-Pla-1a ) else
13471: LD_EXP 40
13475: PPUSH
13476: LD_STRING D22-Pla-1a
13478: PPUSH
13479: CALL_OW 94
13483: GO 13497
// SayRadio ( Platonov , D22-Pla-1b ) ;
13485: LD_EXP 40
13489: PPUSH
13490: LD_STRING D22-Pla-1b
13492: PPUSH
13493: CALL_OW 94
// DialogueOff ;
13497: CALL_OW 7
// end ; 3 :
13501: GO 13515
13503: LD_INT 3
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13514
13511: POP
// begin end ; end ;
13512: GO 13515
13514: POP
// end ; ChangeMissionObjectives ( M9 ) ;
13515: LD_STRING M9
13517: PPUSH
13518: CALL_OW 337
// wait ( 0 0$1 ) ;
13522: LD_INT 35
13524: PPUSH
13525: CALL_OW 67
// if IsOk ( Gnyevko ) then
13529: LD_EXP 35
13533: PPUSH
13534: CALL_OW 302
13538: IFFALSE 13564
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13540: LD_EXP 35
13544: PPUSH
13545: LD_STRING D23-Gny-1
13547: PPUSH
13548: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13552: LD_EXP 34
13556: PPUSH
13557: LD_STRING D23-Bur-1
13559: PPUSH
13560: CALL_OW 88
// end ; end ;
13564: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13565: LD_EXP 18
13569: IFFALSE 13577
13571: PUSH
13572: LD_EXP 19
13576: AND
13577: IFFALSE 13586
13579: PUSH
13580: LD_EXP 28
13584: NOT
13585: AND
13586: IFFALSE 13615
13588: PUSH
13589: LD_EXP 45
13593: PPUSH
13594: LD_INT 91
13596: PUSH
13597: LD_EXP 34
13601: PUSH
13602: LD_INT 8
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 72
13614: AND
13615: IFFALSE 13659
13617: GO 13619
13619: DISABLE
13620: LD_INT 0
13622: PPUSH
// begin for i in belkovTeam do
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: LD_EXP 45
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13650
// SetSide ( i , 3 ) ;
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_INT 3
13643: PPUSH
13644: CALL_OW 235
13648: GO 13633
13650: POP
13651: POP
// ChangeMissionObjectives ( M9a ) ;
13652: LD_STRING M9a
13654: PPUSH
13655: CALL_OW 337
// end ;
13659: PPOPN 1
13661: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13662: LD_EXP 34
13666: PPUSH
13667: LD_EXP 36
13671: PPUSH
13672: CALL_OW 296
13676: PUSH
13677: LD_INT 6
13679: LESS
13680: IFFALSE 13688
13682: PUSH
13683: LD_EXP 18
13687: AND
13688: IFFALSE 13701
13690: PUSH
13691: LD_EXP 36
13695: PPUSH
13696: CALL_OW 302
13700: AND
13701: IFFALSE 13713
13703: PUSH
13704: LD_INT 3
13706: PPUSH
13707: CALL_OW 463
13711: NOT
13712: AND
13713: IFFALSE 14030
13715: GO 13717
13717: DISABLE
13718: LD_INT 0
13720: PPUSH
13721: PPUSH
// begin InGameOn ;
13722: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13726: LD_EXP 34
13730: PPUSH
13731: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13735: LD_EXP 34
13739: PPUSH
13740: LD_INT 37
13742: PPUSH
13743: LD_INT 17
13745: PPUSH
13746: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13750: LD_EXP 34
13754: PPUSH
13755: LD_EXP 36
13759: PPUSH
13760: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13764: LD_EXP 36
13768: PPUSH
13769: LD_EXP 34
13773: PPUSH
13774: CALL_OW 119
// p := 0 ;
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: LD_INT 0
13785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13786: LD_INT 35
13788: PPUSH
13789: CALL_OW 67
// p := p + 1 ;
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_VAR 0 2
13802: PUSH
13803: LD_INT 1
13805: PLUS
13806: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13807: LD_EXP 34
13811: PPUSH
13812: LD_EXP 36
13816: PPUSH
13817: CALL_OW 296
13821: PUSH
13822: LD_INT 4
13824: LESS
13825: IFTRUE 13837
13827: PUSH
13828: LD_VAR 0 2
13832: PUSH
13833: LD_INT 6
13835: GREATER
13836: OR
13837: IFFALSE 13786
// ComTurnUnit ( Burlak , Belkov ) ;
13839: LD_EXP 34
13843: PPUSH
13844: LD_EXP 36
13848: PPUSH
13849: CALL_OW 119
// DialogueOn ;
13853: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13857: LD_EXP 36
13861: PPUSH
13862: LD_STRING D24-Bel-1
13864: PPUSH
13865: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13869: LD_EXP 34
13873: PPUSH
13874: LD_STRING D24-Bur-1
13876: PPUSH
13877: CALL_OW 88
// if belkovBrother then
13881: LD_EXP 32
13885: IFFALSE 13899
// Say ( Burlak , D24-Bur-1a ) ;
13887: LD_EXP 34
13891: PPUSH
13892: LD_STRING D24-Bur-1a
13894: PPUSH
13895: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13899: LD_EXP 36
13903: PPUSH
13904: LD_STRING D24-Bel-2
13906: PPUSH
13907: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13911: LD_EXP 34
13915: PPUSH
13916: LD_STRING D24-Bur-2
13918: PPUSH
13919: CALL_OW 88
// if vehCaptured then
13923: LD_EXP 16
13927: IFFALSE 13941
// Say ( Burlak , D24-Bur-2a ) ;
13929: LD_EXP 34
13933: PPUSH
13934: LD_STRING D24-Bur-2a
13936: PPUSH
13937: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13941: LD_EXP 40
13945: PPUSH
13946: LD_STRING D24-Pla-2
13948: PPUSH
13949: CALL_OW 94
// if not westOutpostDestroyed then
13953: LD_EXP 22
13957: NOT
13958: IFFALSE 13972
// SayRadio ( Platonov , D24-Pla-2a ) ;
13960: LD_EXP 40
13964: PPUSH
13965: LD_STRING D24-Pla-2a
13967: PPUSH
13968: CALL_OW 94
// DialogueOff ;
13972: CALL_OW 7
// InGameOff ;
13976: CALL_OW 9
// belkovSaved := true ;
13980: LD_ADDR_EXP 28
13984: PUSH
13985: LD_INT 1
13987: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_EXP 45
13997: PUSH
13998: LD_EXP 36
14002: UNION
14003: PUSH
14004: FOR_IN
14005: IFFALSE 14021
// SetSide ( i , 3 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 3
14014: PPUSH
14015: CALL_OW 235
14019: GO 14004
14021: POP
14022: POP
// ChangeMissionObjectives ( M9a ) ;
14023: LD_STRING M9a
14025: PPUSH
14026: CALL_OW 337
// end ;
14030: PPOPN 2
14032: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
14033: LD_INT 3
14035: PPUSH
14036: LD_INT 22
14038: PUSH
14039: LD_INT 1
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 95
14048: PUSH
14049: LD_INT 8
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: PPUSH
14065: CALL 59256 0 2
14069: IFFALSE 14254
14071: GO 14073
14073: DISABLE
// begin DialogueOn ;
14074: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
14078: LD_INT 49
14080: PPUSH
14081: LD_INT 57
14083: PPUSH
14084: LD_INT 3
14086: PPUSH
14087: LD_INT 12
14089: NEG
14090: PPUSH
14091: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
14095: LD_INT 49
14097: PPUSH
14098: LD_INT 57
14100: PPUSH
14101: LD_INT 3
14103: PPUSH
14104: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
14108: LD_INT 49
14110: PPUSH
14111: LD_INT 57
14113: PPUSH
14114: CALL_OW 84
// if not eastOutpostDiscovered then
14118: LD_EXP 21
14122: NOT
14123: IFFALSE 14163
// begin Say ( Burlak , D15-Bur-1 ) ;
14125: LD_EXP 34
14129: PPUSH
14130: LD_STRING D15-Bur-1
14132: PPUSH
14133: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14137: LD_EXP 35
14141: PPUSH
14142: LD_STRING D15-Gny-1
14144: PPUSH
14145: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14149: LD_EXP 39
14153: PPUSH
14154: LD_STRING D15-Kov-1
14156: PPUSH
14157: CALL_OW 88
// end else
14161: GO 14199
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14163: LD_EXP 39
14167: PPUSH
14168: LD_STRING D16-Kov-1
14170: PPUSH
14171: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14175: LD_EXP 34
14179: PPUSH
14180: LD_STRING D16-Bur-1
14182: PPUSH
14183: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14187: LD_EXP 35
14191: PPUSH
14192: LD_STRING D16-Gny-1
14194: PPUSH
14195: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
14199: LD_EXP 34
14203: PPUSH
14204: LD_STRING D15-Bur-2
14206: PPUSH
14207: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
14211: LD_EXP 39
14215: PPUSH
14216: LD_STRING D15-Kov-2
14218: PPUSH
14219: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
14223: LD_EXP 34
14227: PPUSH
14228: LD_STRING D15-Bur-3
14230: PPUSH
14231: CALL_OW 88
// DialogueOff ;
14235: CALL_OW 7
// westOutpostDiscovered := true ;
14239: LD_ADDR_EXP 20
14243: PUSH
14244: LD_INT 1
14246: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
14247: LD_STRING M7
14249: PPUSH
14250: CALL_OW 337
// end ;
14254: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 22
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 95
14270: PUSH
14271: LD_INT 15
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: PPUSH
14287: CALL 59256 0 2
14291: IFFALSE 14432
14293: GO 14295
14295: DISABLE
// begin DialogueOn ;
14296: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
14300: LD_INT 95
14302: PPUSH
14303: LD_INT 65
14305: PPUSH
14306: LD_INT 3
14308: PPUSH
14309: LD_INT 12
14311: NEG
14312: PPUSH
14313: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
14317: LD_INT 95
14319: PPUSH
14320: LD_INT 65
14322: PPUSH
14323: LD_INT 3
14325: PPUSH
14326: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
14330: LD_INT 95
14332: PPUSH
14333: LD_INT 65
14335: PPUSH
14336: CALL_OW 84
// if westOutpostDiscovered then
14340: LD_EXP 20
14344: IFFALSE 14384
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14346: LD_EXP 39
14350: PPUSH
14351: LD_STRING D16-Kov-1
14353: PPUSH
14354: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14358: LD_EXP 34
14362: PPUSH
14363: LD_STRING D16-Bur-1
14365: PPUSH
14366: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14370: LD_EXP 35
14374: PPUSH
14375: LD_STRING D16-Gny-1
14377: PPUSH
14378: CALL_OW 88
// end else
14382: GO 14420
// begin Say ( Burlak , D15-Bur-1 ) ;
14384: LD_EXP 34
14388: PPUSH
14389: LD_STRING D15-Bur-1
14391: PPUSH
14392: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14396: LD_EXP 35
14400: PPUSH
14401: LD_STRING D15-Gny-1
14403: PPUSH
14404: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14408: LD_EXP 39
14412: PPUSH
14413: LD_STRING D15-Kov-1
14415: PPUSH
14416: CALL_OW 88
// end ; DialogueOff ;
14420: CALL_OW 7
// eastOutpostDiscovered := true ;
14424: LD_ADDR_EXP 21
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// end ;
14432: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14433: LD_INT 8
14435: PPUSH
14436: LD_INT 22
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 50
14448: PUSH
14449: EMPTY
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 70
14460: PUSH
14461: LD_INT 0
14463: EQUAL
14464: IFFALSE 14472
14466: PUSH
14467: LD_EXP 20
14471: AND
14472: IFFALSE 14516
14474: GO 14476
14476: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14477: LD_EXP 34
14481: PPUSH
14482: LD_STRING D20-Bur-1
14484: PPUSH
14485: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14489: LD_EXP 40
14493: PPUSH
14494: LD_STRING D20-Pla-1
14496: PPUSH
14497: CALL_OW 94
// westOutpostDestroyed := true ;
14501: LD_ADDR_EXP 22
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14509: LD_STRING M8
14511: PPUSH
14512: CALL_OW 337
// end ;
14516: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14517: LD_INT 15
14519: PPUSH
14520: LD_INT 22
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 50
14532: PUSH
14533: EMPTY
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 70
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14556
14550: PUSH
14551: LD_EXP 21
14555: AND
14556: IFFALSE 14686
14558: GO 14560
14560: DISABLE
14561: LD_INT 0
14563: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14564: LD_EXP 34
14568: PPUSH
14569: LD_STRING D20-Bur-1
14571: PPUSH
14572: CALL_OW 88
// SayRadio ( Platonov , D20a-Pla-1 ) ;
14576: LD_EXP 40
14580: PPUSH
14581: LD_STRING D20a-Pla-1
14583: PPUSH
14584: CALL_OW 94
// eastOutpostDestroyed := true ;
14588: LD_ADDR_EXP 23
14592: PUSH
14593: LD_INT 1
14595: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14596: LD_INT 35
14598: PPUSH
14599: CALL_OW 67
// stop_talking := true ;
14603: LD_ADDR_OWVAR 56
14607: PUSH
14608: LD_INT 1
14610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 23
14628: PUSH
14629: LD_INT 3
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 21
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14676
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14659: LD_VAR 0 1
14663: PPUSH
14664: LD_INT 1
14666: PPUSH
14667: LD_INT 1500
14669: PPUSH
14670: CALL_OW 591
14674: GO 14656
14676: POP
14677: POP
// stop_talking := false ;
14678: LD_ADDR_OWVAR 56
14682: PUSH
14683: LD_INT 0
14685: ST_TO_ADDR
// end ;
14686: PPOPN 1
14688: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14689: LD_INT 19
14691: PPUSH
14692: LD_INT 22
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 70
14720: IFFALSE 14828
14722: GO 14724
14724: DISABLE
// begin DialogueOn ;
14725: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14729: LD_INT 19
14731: PPUSH
14732: LD_INT 22
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 21
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 70
14760: PPUSH
14761: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14765: LD_EXP 34
14769: PPUSH
14770: LD_STRING D26-Bur-1
14772: PPUSH
14773: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14777: LD_EXP 39
14781: PPUSH
14782: LD_STRING D26-Kov-1
14784: PPUSH
14785: CALL_OW 88
// if IsOk ( Gnyevko ) then
14789: LD_EXP 35
14793: PPUSH
14794: CALL_OW 302
14798: IFFALSE 14824
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14800: LD_EXP 35
14804: PPUSH
14805: LD_STRING D26-Gny-1
14807: PPUSH
14808: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14812: LD_EXP 34
14816: PPUSH
14817: LD_STRING D26-Bur-2
14819: PPUSH
14820: CALL_OW 88
// end ; DialogueOff ;
14824: CALL_OW 7
// end ;
14828: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14829: LD_EXP 21
14833: IFFALSE 14842
14835: PUSH
14836: LD_EXP 23
14840: NOT
14841: AND
14842: IFFALSE 14888
14844: PUSH
14845: LD_INT 17
14847: PPUSH
14848: LD_INT 22
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: LD_INT 24
14863: PUSH
14864: LD_INT 1000
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 70
14883: PUSH
14884: LD_INT 1
14886: GREATER
14887: AND
14888: IFFALSE 14953
14890: GO 14892
14892: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14893: LD_EXP 35
14897: PPUSH
14898: LD_STRING D16A-Gny-1
14900: PPUSH
14901: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14905: LD_EXP 39
14909: PPUSH
14910: LD_STRING D16A-Kov-1
14912: PPUSH
14913: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14917: LD_EXP 35
14921: PPUSH
14922: CALL_OW 302
14926: IFTRUE 14939
14928: PUSH
14929: LD_EXP 39
14933: PPUSH
14934: CALL_OW 302
14938: OR
14939: IFFALSE 14953
// Say ( Burlak , D16A-Bur-1 ) ;
14941: LD_EXP 34
14945: PPUSH
14946: LD_STRING D16A-Bur-1
14948: PPUSH
14949: CALL_OW 88
// end ;
14953: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14954: LD_INT 3
14956: PPUSH
14957: LD_INT 9
14959: PPUSH
14960: CALL_OW 294
14964: IFFALSE 14977
14966: GO 14968
14968: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14969: LD_ADDR_EXP 24
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// end ;
14977: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14978: LD_INT 3
14980: PPUSH
14981: LD_INT 10
14983: PPUSH
14984: CALL_OW 294
14988: IFFALSE 15008
14990: GO 14992
14992: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14993: LD_ADDR_EXP 27
14997: PUSH
14998: LD_EXP 27
15002: PPUSH
15003: CALL 57184 0 1
15007: ST_TO_ADDR
15008: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
15009: LD_INT 3
15011: PPUSH
15012: LD_INT 11
15014: PPUSH
15015: CALL_OW 294
15019: IFFALSE 15039
15021: GO 15023
15023: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15024: LD_ADDR_EXP 27
15028: PUSH
15029: LD_EXP 27
15033: PPUSH
15034: CALL 57184 0 1
15038: ST_TO_ADDR
15039: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
15040: LD_INT 3
15042: PPUSH
15043: LD_INT 12
15045: PPUSH
15046: CALL_OW 294
15050: IFFALSE 15070
15052: GO 15054
15054: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15055: LD_ADDR_EXP 27
15059: PUSH
15060: LD_EXP 27
15064: PPUSH
15065: CALL 57184 0 1
15069: ST_TO_ADDR
15070: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
15071: LD_INT 3
15073: PPUSH
15074: LD_INT 13
15076: PPUSH
15077: CALL_OW 294
15081: IFFALSE 15101
15083: GO 15085
15085: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15086: LD_ADDR_EXP 27
15090: PUSH
15091: LD_EXP 27
15095: PPUSH
15096: CALL 57184 0 1
15100: ST_TO_ADDR
15101: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
15102: LD_INT 3
15104: PPUSH
15105: LD_INT 14
15107: PPUSH
15108: CALL_OW 294
15112: IFFALSE 15132
15114: GO 15116
15116: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15117: LD_ADDR_EXP 27
15121: PUSH
15122: LD_EXP 27
15126: PPUSH
15127: CALL 57184 0 1
15131: ST_TO_ADDR
15132: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
15133: LD_EXP 27
15137: PUSH
15138: LD_INT 5
15140: GREATEREQUAL
15141: IFFALSE 15149
15143: PUSH
15144: LD_EXP 14
15148: AND
15149: IFFALSE 15169
15151: GO 15153
15153: DISABLE
// begin allMapPointsSpotted := true ;
15154: LD_ADDR_EXP 26
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15162: LD_STRING M10
15164: PPUSH
15165: CALL_OW 337
// end ;
15169: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
15170: LD_EXP 26
15174: IFFALSE 15182
15176: PUSH
15177: LD_EXP 22
15181: AND
15182: IFFALSE 15194
15184: GO 15186
15186: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
15187: LD_STRING M10a
15189: PPUSH
15190: CALL_OW 337
// end ;
15194: END
// every 0 0$1 trigger hasAllTanks do var timer , tmp , burlakIsInsideBuilding , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
15195: LD_EXP 14
15199: IFFALSE 15924
15201: GO 15203
15203: DISABLE
15204: LD_INT 0
15206: PPUSH
15207: PPUSH
15208: PPUSH
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
// begin wasOutsideBeria := false ;
15213: LD_ADDR_VAR 0 5
15217: PUSH
15218: LD_INT 0
15220: ST_TO_ADDR
// wantToTalk := false ;
15221: LD_ADDR_VAR 0 4
15225: PUSH
15226: LD_INT 0
15228: ST_TO_ADDR
// westOutpostReported := false ;
15229: LD_ADDR_VAR 0 6
15233: PUSH
15234: LD_INT 0
15236: ST_TO_ADDR
// eastOutpostReported := false ;
15237: LD_ADDR_VAR 0 7
15241: PUSH
15242: LD_INT 0
15244: ST_TO_ADDR
// timer := 0 0$0 ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
15253: LD_INT 70
15255: PPUSH
15256: CALL_OW 67
// burlakIsInsideBuilding := false ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_INT 0
15267: ST_TO_ADDR
// tmp := IsInUnit ( Burlak ) ;
15268: LD_ADDR_VAR 0 2
15272: PUSH
15273: LD_EXP 34
15277: PPUSH
15278: CALL_OW 310
15282: ST_TO_ADDR
// if tmp then
15283: LD_VAR 0 2
15287: IFFALSE 15308
// burlakIsInsideBuilding := GetType ( tmp ) = unit_building ;
15289: LD_ADDR_VAR 0 3
15293: PUSH
15294: LD_VAR 0 2
15298: PPUSH
15299: CALL_OW 247
15303: PUSH
15304: LD_INT 3
15306: EQUAL
15307: ST_TO_ADDR
// if not burlakIsInsideBuilding then
15308: LD_VAR 0 3
15312: NOT
15313: IFFALSE 15329
// timer := timer + 0 0$2 ;
15315: LD_ADDR_VAR 0 1
15319: PUSH
15320: LD_VAR 0 1
15324: PUSH
15325: LD_INT 70
15327: PLUS
15328: ST_TO_ADDR
// if timer >= 0 0$30 then
15329: LD_VAR 0 1
15333: PUSH
15334: LD_INT 1050
15336: GREATEREQUAL
15337: IFFALSE 15347
// wantToTalk := true ;
15339: LD_ADDR_VAR 0 4
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 and not burlakIsInsideBuilding then
15347: LD_EXP 34
15351: PPUSH
15352: LD_EXP 40
15356: PPUSH
15357: CALL_OW 296
15361: PUSH
15362: LD_INT 9
15364: GREATER
15365: IFFALSE 15374
15367: PUSH
15368: LD_VAR 0 3
15372: NOT
15373: AND
15374: IFFALSE 15384
// wasOutsideBeria := true ;
15376: LD_ADDR_VAR 0 5
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
15384: LD_VAR 0 4
15388: IFFALSE 15396
15390: PUSH
15391: LD_VAR 0 5
15395: AND
15396: IFFALSE 15445
15398: PUSH
15399: LD_EXP 34
15403: PPUSH
15404: LD_EXP 40
15408: PPUSH
15409: CALL_OW 296
15413: PUSH
15414: LD_INT 8
15416: LESS
15417: IFTRUE 15444
15419: PUSH
15420: LD_EXP 34
15424: PPUSH
15425: CALL_OW 310
15429: PPUSH
15430: LD_EXP 40
15434: PPUSH
15435: CALL_OW 296
15439: PUSH
15440: LD_INT 8
15442: LESS
15443: OR
15444: AND
15445: IFFALSE 15809
// begin timer := 0 0$0 ;
15447: LD_ADDR_VAR 0 1
15451: PUSH
15452: LD_INT 0
15454: ST_TO_ADDR
// wantToTalk := false ;
15455: LD_ADDR_VAR 0 4
15459: PUSH
15460: LD_INT 0
15462: ST_TO_ADDR
// wasOutsideBeria := false ;
15463: LD_ADDR_VAR 0 5
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15471: LD_EXP 40
15475: PPUSH
15476: CALL_OW 87
// DialogueOn ;
15480: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15484: LD_EXP 40
15488: PPUSH
15489: LD_STRING D25-Pla-1
15491: PPUSH
15492: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15496: LD_VAR 0 6
15500: NOT
15501: IFFALSE 15510
15503: PUSH
15504: LD_VAR 0 7
15508: NOT
15509: AND
15510: IFFALSE 15518
15512: PUSH
15513: LD_EXP 20
15517: AND
15518: IFFALSE 15526
15520: PUSH
15521: LD_EXP 21
15525: AND
15526: IFFALSE 15608
// begin westOutpostReported := true ;
15528: LD_ADDR_VAR 0 6
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// eastOutpostReported := true ;
15536: LD_ADDR_VAR 0 7
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15544: LD_EXP 34
15548: PPUSH
15549: LD_STRING D25-Bur-1
15551: PPUSH
15552: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15556: LD_EXP 24
15560: IFFALSE 15569
15562: PUSH
15563: LD_EXP 22
15567: NOT
15568: AND
15569: IFFALSE 15606
// begin Say ( Burlak , D25b-Bur-1 ) ;
15571: LD_EXP 34
15575: PPUSH
15576: LD_STRING D25b-Bur-1
15578: PPUSH
15579: CALL_OW 88
// if not reinforcementsGained then
15583: LD_EXP 25
15587: NOT
15588: IFFALSE 15606
// begin Say ( Platonov , D25b-Pla-1 ) ;
15590: LD_EXP 40
15594: PPUSH
15595: LD_STRING D25b-Pla-1
15597: PPUSH
15598: CALL_OW 88
// SendReinforcements ( ) ;
15602: CALL 3644 0 0
// end ; end ; end else
15606: GO 15805
// if not westOutpostReported and westOutpostDiscovered then
15608: LD_VAR 0 6
15612: NOT
15613: IFFALSE 15621
15615: PUSH
15616: LD_EXP 20
15620: AND
15621: IFFALSE 15695
// begin westOutpostReported := true ;
15623: LD_ADDR_VAR 0 6
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15631: LD_EXP 34
15635: PPUSH
15636: LD_STRING D25a-Bur-1b
15638: PPUSH
15639: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15643: LD_EXP 24
15647: IFFALSE 15656
15649: PUSH
15650: LD_EXP 22
15654: NOT
15655: AND
15656: IFFALSE 15693
// begin Say ( Burlak , D25b-Bur-1 ) ;
15658: LD_EXP 34
15662: PPUSH
15663: LD_STRING D25b-Bur-1
15665: PPUSH
15666: CALL_OW 88
// if not reinforcementsGained then
15670: LD_EXP 25
15674: NOT
15675: IFFALSE 15693
// begin Say ( Platonov , D25b-Pla-1 ) ;
15677: LD_EXP 40
15681: PPUSH
15682: LD_STRING D25b-Pla-1
15684: PPUSH
15685: CALL_OW 88
// SendReinforcements ( ) ;
15689: CALL 3644 0 0
// end ; end ; end else
15693: GO 15805
// if not eastOutpostReported and eastOutpostDiscovered then
15695: LD_VAR 0 7
15699: NOT
15700: IFFALSE 15708
15702: PUSH
15703: LD_EXP 21
15707: AND
15708: IFFALSE 15732
// begin eastOutpostReported := true ;
15710: LD_ADDR_VAR 0 7
15714: PUSH
15715: LD_INT 1
15717: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15718: LD_EXP 34
15722: PPUSH
15723: LD_STRING D25a-Bur-1a
15725: PPUSH
15726: CALL_OW 88
// end else
15730: GO 15805
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15732: LD_EXP 20
15736: NOT
15737: IFTRUE 15746
15739: PUSH
15740: LD_EXP 21
15744: NOT
15745: OR
15746: IFFALSE 15774
// begin Say ( Burlak , D25a-Bur-1 ) ;
15748: LD_EXP 34
15752: PPUSH
15753: LD_STRING D25a-Bur-1
15755: PPUSH
15756: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15760: LD_EXP 40
15764: PPUSH
15765: LD_STRING D25c-Pla-1
15767: PPUSH
15768: CALL_OW 88
// end else
15772: GO 15805
// if not allMapPointsSpotted then
15774: LD_EXP 26
15778: NOT
15779: IFFALSE 15805
// begin Say ( Burlak , D25a-Bur-1 ) ;
15781: LD_EXP 34
15785: PPUSH
15786: LD_STRING D25a-Bur-1
15788: PPUSH
15789: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15793: LD_EXP 40
15797: PPUSH
15798: LD_STRING D25c-Pla-1a
15800: PPUSH
15801: CALL_OW 88
// end ; DialogueOff ;
15805: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15809: LD_EXP 26
15813: IFFALSE 15821
15815: PUSH
15816: LD_EXP 22
15820: AND
15821: IFFALSE 15253
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15823: LD_INT 22
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 91
15845: PUSH
15846: LD_EXP 40
15850: PUSH
15851: LD_INT 10
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: IFFALSE 15913
// begin if not belkovDied and not belkovSaved then
15870: LD_EXP 19
15874: NOT
15875: IFFALSE 15884
15877: PUSH
15878: LD_EXP 28
15882: NOT
15883: AND
15884: IFFALSE 15907
// begin if Query ( QContMission ) = 1 then
15886: LD_STRING QContMission
15888: PPUSH
15889: CALL_OW 97
15893: PUSH
15894: LD_INT 1
15896: EQUAL
15897: IFFALSE 15905
// begin EndMission ;
15899: CALL 16009 0 0
// exit ;
15903: GO 15924
// end ; end else
15905: GO 15913
// begin EndMission ;
15907: CALL 16009 0 0
// exit ;
15911: GO 15924
// end ; end ; wait ( 0 0$10 ) ;
15913: LD_INT 350
15915: PPUSH
15916: CALL_OW 67
// until false ;
15920: LD_INT 0
15922: IFFALSE 15823
// end ;
15924: PPOPN 7
15926: END
// every 0 0$2 trigger not hasAllTanks do
15927: LD_EXP 14
15931: NOT
15932: IFFALSE 16008
15934: GO 15936
15936: DISABLE
// begin if IsOk ( Gnyevko ) then
15937: LD_EXP 35
15941: PPUSH
15942: CALL_OW 302
15946: IFFALSE 15972
// if SideShoot ( Gnyevko ) = 3 then
15948: LD_EXP 35
15952: PPUSH
15953: CALL_OW 503
15957: PUSH
15958: LD_INT 3
15960: EQUAL
15961: IFFALSE 15972
// begin YouLost ( SelfAttack ) ;
15963: LD_STRING SelfAttack
15965: PPUSH
15966: CALL_OW 104
// exit ;
15970: GO 16008
// end ; if IsOk ( Kovalyuk ) then
15972: LD_EXP 39
15976: PPUSH
15977: CALL_OW 302
15981: IFFALSE 16007
// if SideShoot ( Kovalyuk ) = 3 then
15983: LD_EXP 39
15987: PPUSH
15988: CALL_OW 503
15992: PUSH
15993: LD_INT 3
15995: EQUAL
15996: IFFALSE 16007
// begin YouLost ( SelfAttack ) ;
15998: LD_STRING SelfAttack
16000: PPUSH
16001: CALL_OW 104
// exit ;
16005: GO 16008
// end ; enable ;
16007: ENABLE
// end ;
16008: END
// function EndMission ; var i , tmp ; begin
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
16013: PPUSH
// if initiative then
16014: LD_EXP 31
16018: IFFALSE 16032
// AddMedal ( Initiative , 1 ) else
16020: LD_STRING Initiative
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 101
16030: GO 16073
// begin SaveVariable ( 1 , 02_Selfish ) ;
16032: LD_INT 1
16034: PPUSH
16035: LD_STRING 02_Selfish
16037: PPUSH
16038: CALL_OW 39
// if not eastOutpostDestroyed then
16042: LD_EXP 23
16046: NOT
16047: IFFALSE 16062
// AddMedal ( Initiative , - 2 ) else
16049: LD_STRING Initiative
16051: PPUSH
16052: LD_INT 2
16054: NEG
16055: PPUSH
16056: CALL_OW 101
16060: GO 16073
// AddMedal ( Initiative , - 1 ) ;
16062: LD_STRING Initiative
16064: PPUSH
16065: LD_INT 1
16067: NEG
16068: PPUSH
16069: CALL_OW 101
// end ; SaveVariable ( belkovSaved , 02_belkovSaved ) ;
16073: LD_EXP 28
16077: PPUSH
16078: LD_STRING 02_belkovSaved
16080: PPUSH
16081: CALL_OW 39
// if not belkovDied and belkovSaved then
16085: LD_EXP 19
16089: NOT
16090: IFFALSE 16098
16092: PUSH
16093: LD_EXP 28
16097: AND
16098: IFFALSE 16112
// AddMedal ( Belkov , 1 ) else
16100: LD_STRING Belkov
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 101
16110: GO 16209
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
16112: LD_EXP 45
16116: PPUSH
16117: LD_INT 22
16119: PUSH
16120: LD_INT 3
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 72
16131: IFFALSE 16145
// AddMedal ( Belkov , 2 ) else
16133: LD_STRING Belkov
16135: PPUSH
16136: LD_INT 2
16138: PPUSH
16139: CALL_OW 101
16143: GO 16209
// if belkovDied then
16145: LD_EXP 19
16149: IFFALSE 16164
// AddMedal ( Belkov , - 1 ) else
16151: LD_STRING Belkov
16153: PPUSH
16154: LD_INT 1
16156: NEG
16157: PPUSH
16158: CALL_OW 101
16162: GO 16209
// if not belkovSaved then
16164: LD_EXP 28
16168: NOT
16169: IFFALSE 16184
// AddMedal ( Belkov , - 2 ) else
16171: LD_STRING Belkov
16173: PPUSH
16174: LD_INT 2
16176: NEG
16177: PPUSH
16178: CALL_OW 101
16182: GO 16209
// if belkovDied and belkovSaved then
16184: LD_EXP 19
16188: IFFALSE 16196
16190: PUSH
16191: LD_EXP 28
16195: AND
16196: IFFALSE 16209
// AddMedal ( Belkov , - 3 ) ;
16198: LD_STRING Belkov
16200: PPUSH
16201: LD_INT 3
16203: NEG
16204: PPUSH
16205: CALL_OW 101
// if playerTeamDeadCounter = 0 then
16209: LD_EXP 30
16213: PUSH
16214: LD_INT 0
16216: EQUAL
16217: IFFALSE 16231
// AddMedal ( NoLosses , 1 ) else
16219: LD_STRING NoLosses
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 101
16229: GO 16242
// AddMedal ( NoLosses , - 1 ) ;
16231: LD_STRING NoLosses
16233: PPUSH
16234: LD_INT 1
16236: NEG
16237: PPUSH
16238: CALL_OW 101
// GiveMedals ( Main ) ;
16242: LD_STRING Main
16244: PPUSH
16245: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
16249: LD_INT 22
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 23
16261: PUSH
16262: LD_INT 3
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: PPUSH
16284: CALL_OW 69
16288: PPUSH
16289: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
16293: LD_EXP 34
16297: PPUSH
16298: LD_EXP 3
16302: PUSH
16303: LD_STRING Burlak
16305: STR
16306: PPUSH
16307: CALL_OW 38
// if IsLive ( Gnyevko ) then
16311: LD_EXP 35
16315: PPUSH
16316: CALL_OW 300
16320: IFFALSE 16340
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
16322: LD_EXP 35
16326: PPUSH
16327: LD_EXP 3
16331: PUSH
16332: LD_STRING Gnyevko
16334: STR
16335: PPUSH
16336: CALL_OW 38
// if IsLive ( Kovalyuk ) then
16340: LD_EXP 39
16344: PPUSH
16345: CALL_OW 300
16349: IFFALSE 16369
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
16351: LD_EXP 39
16355: PPUSH
16356: LD_EXP 3
16360: PUSH
16361: LD_STRING Kovalyuk
16363: STR
16364: PPUSH
16365: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
16369: LD_EXP 36
16373: PPUSH
16374: CALL_OW 300
16378: IFFALSE 16386
16380: PUSH
16381: LD_EXP 28
16385: AND
16386: IFFALSE 16406
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
16388: LD_EXP 36
16392: PPUSH
16393: LD_EXP 3
16397: PUSH
16398: LD_STRING Belkov
16400: STR
16401: PPUSH
16402: CALL_OW 38
// if IsLive ( Kirilenkova ) then
16406: LD_EXP 37
16410: PPUSH
16411: CALL_OW 300
16415: IFFALSE 16435
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
16417: LD_EXP 37
16421: PPUSH
16422: LD_EXP 3
16426: PUSH
16427: LD_STRING Kirilenkova
16429: STR
16430: PPUSH
16431: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
16435: LD_INT 22
16437: PUSH
16438: LD_INT 3
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 23
16447: PUSH
16448: LD_INT 3
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: PUSH
16475: LD_EXP 34
16479: PUSH
16480: LD_EXP 35
16484: PUSH
16485: LD_EXP 39
16489: PUSH
16490: LD_EXP 36
16494: PUSH
16495: LD_EXP 37
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: DIFF
16507: PPUSH
16508: LD_EXP 3
16512: PUSH
16513: LD_STRING burlakTeam
16515: STR
16516: PPUSH
16517: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
16521: LD_INT 22
16523: PUSH
16524: LD_INT 6
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 3
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: PUSH
16561: LD_EXP 40
16565: PUSH
16566: LD_EXP 38
16570: PUSH
16571: LD_EXP 36
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: LD_EXP 45
16585: UNION
16586: DIFF
16587: PPUSH
16588: LD_EXP 3
16592: PUSH
16593: LD_STRING kirovTeam
16595: STR
16596: PPUSH
16597: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16601: LD_EXP 23
16605: PPUSH
16606: LD_STRING 02_EasternOutpostDestroyed
16608: PPUSH
16609: CALL_OW 39
// tmp := [ ] ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: EMPTY
16619: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16620: LD_ADDR_VAR 0 2
16624: PUSH
16625: LD_INT 22
16627: PUSH
16628: LD_INT 3
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 21
16637: PUSH
16638: LD_INT 3
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PPUSH
16649: CALL_OW 69
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16742
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16657: LD_ADDR_VAR 0 3
16661: PUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: LD_VAR 0 2
16671: PPUSH
16672: CALL_OW 266
16676: PUSH
16677: LD_VAR 0 2
16681: PPUSH
16682: CALL_OW 248
16686: PUSH
16687: LD_VAR 0 2
16691: PPUSH
16692: CALL_OW 267
16696: PUSH
16697: LD_VAR 0 2
16701: PPUSH
16702: CALL_OW 250
16706: PUSH
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 251
16716: PUSH
16717: LD_VAR 0 2
16721: PPUSH
16722: CALL_OW 254
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: PPUSH
16735: CALL 55811 0 2
16739: ST_TO_ADDR
16740: GO 16654
16742: POP
16743: POP
// SaveVariable ( tmp , 02_Beria ) ;
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_STRING 02_Beria
16751: PPUSH
16752: CALL_OW 39
// tmp := [ ] ;
16756: LD_ADDR_VAR 0 3
16760: PUSH
16761: EMPTY
16762: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16763: LD_ADDR_VAR 0 2
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 6
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: PUSH
16797: FOR_IN
16798: IFFALSE 16885
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16800: LD_ADDR_VAR 0 3
16804: PUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_VAR 0 2
16814: PPUSH
16815: CALL_OW 266
16819: PUSH
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL_OW 248
16829: PUSH
16830: LD_VAR 0 2
16834: PPUSH
16835: CALL_OW 267
16839: PUSH
16840: LD_VAR 0 2
16844: PPUSH
16845: CALL_OW 250
16849: PUSH
16850: LD_VAR 0 2
16854: PPUSH
16855: CALL_OW 251
16859: PUSH
16860: LD_VAR 0 2
16864: PPUSH
16865: CALL_OW 254
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: PPUSH
16878: CALL 55811 0 2
16882: ST_TO_ADDR
16883: GO 16797
16885: POP
16886: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_STRING 02_Kirov
16894: PPUSH
16895: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16899: LD_INT 22
16901: PUSH
16902: LD_INT 3
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 21
16911: PUSH
16912: LD_INT 2
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PPUSH
16928: CALL 19845 0 1
16932: PPUSH
16933: LD_STRING 02_VehiclesCount
16935: PPUSH
16936: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16940: LD_INT 22
16942: PUSH
16943: LD_INT 6
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PPUSH
16964: CALL_OW 69
16968: PPUSH
16969: CALL 19845 0 1
16973: PPUSH
16974: LD_STRING 02_KirovVehiclesCount
16976: PPUSH
16977: CALL_OW 39
// YouWin ;
16981: CALL_OW 103
// end ; end_of_file
16985: LD_VAR 0 1
16989: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not mode then
16990: LD_VAR 0 5
16994: NOT
16995: IFFALSE 16999
// exit ;
16997: GO 17020
// wait ( 0 0$12 ) ;
16999: LD_INT 420
17001: PPUSH
17002: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
17006: LD_VAR 0 2
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: CALL 8382 0 2
// end ;
17020: PPOPN 5
17022: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL 77500 0 1
// if un = Burlak then
17032: LD_VAR 0 1
17036: PUSH
17037: LD_EXP 34
17041: EQUAL
17042: IFFALSE 17051
// YouLost ( Burlak ) ;
17044: LD_STRING Burlak
17046: PPUSH
17047: CALL_OW 104
// if un = Platonov then
17051: LD_VAR 0 1
17055: PUSH
17056: LD_EXP 40
17060: EQUAL
17061: IFFALSE 17070
// YouLost ( Platonov ) ;
17063: LD_STRING Platonov
17065: PPUSH
17066: CALL_OW 104
// if un = Kurin then
17070: LD_VAR 0 1
17074: PUSH
17075: LD_EXP 38
17079: EQUAL
17080: IFFALSE 17089
// YouLost ( Kurin ) ;
17082: LD_STRING Kurin
17084: PPUSH
17085: CALL_OW 104
// if un = Belkov then
17089: LD_VAR 0 1
17093: PUSH
17094: LD_EXP 36
17098: EQUAL
17099: IFFALSE 17109
// belkovDied := true ;
17101: LD_ADDR_EXP 19
17105: PUSH
17106: LD_INT 1
17108: ST_TO_ADDR
// if un in belkovTeam then
17109: LD_VAR 0 1
17113: PUSH
17114: LD_EXP 45
17118: IN
17119: IFFALSE 17152
// begin belkovTeam := belkovTeam diff un ;
17121: LD_ADDR_EXP 45
17125: PUSH
17126: LD_EXP 45
17130: PUSH
17131: LD_VAR 0 1
17135: DIFF
17136: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
17137: LD_ADDR_EXP 29
17141: PUSH
17142: LD_EXP 29
17146: PPUSH
17147: CALL 57184 0 1
17151: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
17152: LD_VAR 0 1
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_INT 3
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 23
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: IN
17197: IFFALSE 17214
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
17199: LD_ADDR_EXP 30
17203: PUSH
17204: LD_EXP 30
17208: PPUSH
17209: CALL 57184 0 1
17213: ST_TO_ADDR
// if un in usWestForces then
17214: LD_VAR 0 1
17218: PUSH
17219: LD_EXP 46
17223: IN
17224: IFFALSE 17242
// usWestForces := usWestForces diff un ;
17226: LD_ADDR_EXP 46
17230: PUSH
17231: LD_EXP 46
17235: PUSH
17236: LD_VAR 0 1
17240: DIFF
17241: ST_TO_ADDR
// if un in usEastForces then
17242: LD_VAR 0 1
17246: PUSH
17247: LD_EXP 47
17251: IN
17252: IFFALSE 17270
// usEastForces := usEastForces diff un ;
17254: LD_ADDR_EXP 47
17258: PUSH
17259: LD_EXP 47
17263: PUSH
17264: LD_VAR 0 1
17268: DIFF
17269: ST_TO_ADDR
// if un = Dickens then
17270: LD_VAR 0 1
17274: PUSH
17275: LD_EXP 49
17279: EQUAL
17280: IFFALSE 17298
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
17282: LD_INT 1
17284: PPUSH
17285: LD_EXP 3
17289: PUSH
17290: LD_STRING DickensKilled
17292: STR
17293: PPUSH
17294: CALL_OW 39
// end ;
17298: PPOPN 1
17300: END
// on BuildingComplete ( b ) do var mech ;
17301: LD_INT 0
17303: PPUSH
// begin if GetSide ( b ) = 3 then
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 255
17313: PUSH
17314: LD_INT 3
17316: EQUAL
17317: IFFALSE 17376
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 266
17328: PUSH
17329: LD_INT 6
17331: PUSH
17332: LD_INT 7
17334: PUSH
17335: LD_INT 8
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: IN
17343: IFFALSE 17353
// hasLab := true ;
17345: LD_ADDR_EXP 9
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 266
17362: PUSH
17363: LD_INT 2
17365: EQUAL
17366: IFFALSE 17376
// hasWorkshop := true ;
17368: LD_ADDR_EXP 10
17372: PUSH
17373: LD_INT 1
17375: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 255
17385: PUSH
17386: LD_INT 6
17388: EQUAL
17389: IFFALSE 17463
// begin if GetBType ( b ) = b_workshop then
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 266
17400: PUSH
17401: LD_INT 2
17403: EQUAL
17404: IFFALSE 17463
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
17406: LD_ADDR_VAR 0 2
17410: PUSH
17411: LD_EXP 43
17415: PPUSH
17416: LD_INT 25
17418: PUSH
17419: LD_INT 3
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 72
17430: ST_TO_ADDR
// if not mech then
17431: LD_VAR 0 2
17435: NOT
17436: IFFALSE 17440
// exit ;
17438: GO 17463
// ComExit ( mech ) ;
17440: LD_VAR 0 2
17444: PPUSH
17445: CALL 56209 0 1
// AddComEnterUnit ( mech , b ) ;
17449: LD_VAR 0 2
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 180
// end ; end ; end ;
17463: PPOPN 2
17465: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17466: LD_VAR 0 1
17470: PPUSH
17471: LD_VAR 0 2
17475: PPUSH
17476: CALL 77558 0 2
// if GetSide ( vehicle ) = 3 then
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 255
17489: PUSH
17490: LD_INT 3
17492: EQUAL
17493: IFFALSE 17518
// begin hasTank := true ;
17495: LD_ADDR_EXP 12
17499: PUSH
17500: LD_INT 1
17502: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
17503: LD_ADDR_EXP 15
17507: PUSH
17508: LD_EXP 15
17512: PPUSH
17513: CALL 57184 0 1
17517: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 255
17527: PUSH
17528: LD_INT 6
17530: EQUAL
17531: IFFALSE 17542
// KirovAttack ( vehicle ) ;
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL 3954 0 1
// end ;
17542: PPOPN 2
17544: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
17545: LD_VAR 0 1
17549: PUSH
17550: LD_EXP 33
17554: EQUAL
17555: IFFALSE 17561
// BelkovAttackScript ;
17557: CALL 1751 0 0
// end ;
17561: PPOPN 1
17563: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
17564: LD_INT 0
17566: PPUSH
// begin if side = 1 then
17567: LD_VAR 0 3
17571: PUSH
17572: LD_INT 1
17574: EQUAL
17575: IFFALSE 17585
// vehCaptured := true ;
17577: LD_ADDR_EXP 16
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// end ;
17585: PPOPN 5
17587: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
17588: LD_VAR 0 1
17592: PUSH
17593: LD_INT 3
17595: EQUAL
17596: IFFALSE 17608
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: LD_INT 6
17606: EQUAL
17607: AND
17608: IFFALSE 17618
// allianceAttacked := true ;
17610: LD_ADDR_EXP 13
17614: PUSH
17615: LD_INT 1
17617: ST_TO_ADDR
// end ; end_of_file
17618: PPOPN 2
17620: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17621: LD_INT 0
17623: PPUSH
17624: PPUSH
// if exist_mode then
17625: LD_VAR 0 2
17629: IFFALSE 17675
// begin unit := CreateCharacter ( prefix & ident ) ;
17631: LD_ADDR_VAR 0 5
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_VAR 0 1
17645: STR
17646: PPUSH
17647: CALL_OW 34
17651: ST_TO_ADDR
// if unit then
17652: LD_VAR 0 5
17656: IFFALSE 17673
// DeleteCharacters ( prefix & ident ) ;
17658: LD_VAR 0 3
17662: PUSH
17663: LD_VAR 0 1
17667: STR
17668: PPUSH
17669: CALL_OW 40
// end else
17673: GO 17690
// unit := NewCharacter ( ident ) ;
17675: LD_ADDR_VAR 0 5
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 25
17689: ST_TO_ADDR
// result := unit ;
17690: LD_ADDR_VAR 0 4
17694: PUSH
17695: LD_VAR 0 5
17699: ST_TO_ADDR
// end ;
17700: LD_VAR 0 4
17704: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17705: LD_INT 0
17707: PPUSH
17708: PPUSH
// if exist_mode then
17709: LD_VAR 0 2
17713: IFFALSE 17738
// unit := CreateCharacter ( prefix & ident ) else
17715: LD_ADDR_VAR 0 5
17719: PUSH
17720: LD_VAR 0 3
17724: PUSH
17725: LD_VAR 0 1
17729: STR
17730: PPUSH
17731: CALL_OW 34
17735: ST_TO_ADDR
17736: GO 17753
// unit := NewCharacter ( ident ) ;
17738: LD_ADDR_VAR 0 5
17742: PUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 25
17752: ST_TO_ADDR
// result := unit ;
17753: LD_ADDR_VAR 0 4
17757: PUSH
17758: LD_VAR 0 5
17762: ST_TO_ADDR
// end ;
17763: LD_VAR 0 4
17767: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17768: LD_INT 0
17770: PPUSH
17771: PPUSH
// if not side or not nation then
17772: LD_VAR 0 1
17776: NOT
17777: IFTRUE 17786
17779: PUSH
17780: LD_VAR 0 2
17784: NOT
17785: OR
17786: IFFALSE 17790
// exit ;
17788: GO 18584
// case nation of nation_american :
17790: LD_VAR 0 2
17794: PUSH
17795: LD_INT 1
17797: DOUBLE
17798: EQUAL
17799: IFTRUE 17803
17801: GO 18025
17803: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17804: LD_ADDR_VAR 0 4
17808: PUSH
17809: LD_INT 35
17811: PUSH
17812: LD_INT 45
17814: PUSH
17815: LD_INT 46
17817: PUSH
17818: LD_INT 47
17820: PUSH
17821: LD_INT 82
17823: PUSH
17824: LD_INT 83
17826: PUSH
17827: LD_INT 84
17829: PUSH
17830: LD_INT 85
17832: PUSH
17833: LD_INT 86
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 6
17844: PUSH
17845: LD_INT 15
17847: PUSH
17848: LD_INT 16
17850: PUSH
17851: LD_INT 7
17853: PUSH
17854: LD_INT 12
17856: PUSH
17857: LD_INT 13
17859: PUSH
17860: LD_INT 10
17862: PUSH
17863: LD_INT 14
17865: PUSH
17866: LD_INT 20
17868: PUSH
17869: LD_INT 21
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_INT 25
17877: PUSH
17878: LD_INT 32
17880: PUSH
17881: LD_INT 27
17883: PUSH
17884: LD_INT 36
17886: PUSH
17887: LD_INT 69
17889: PUSH
17890: LD_INT 39
17892: PUSH
17893: LD_INT 34
17895: PUSH
17896: LD_INT 40
17898: PUSH
17899: LD_INT 48
17901: PUSH
17902: LD_INT 49
17904: PUSH
17905: LD_INT 50
17907: PUSH
17908: LD_INT 51
17910: PUSH
17911: LD_INT 52
17913: PUSH
17914: LD_INT 53
17916: PUSH
17917: LD_INT 54
17919: PUSH
17920: LD_INT 55
17922: PUSH
17923: LD_INT 56
17925: PUSH
17926: LD_INT 57
17928: PUSH
17929: LD_INT 58
17931: PUSH
17932: LD_INT 59
17934: PUSH
17935: LD_INT 60
17937: PUSH
17938: LD_INT 61
17940: PUSH
17941: LD_INT 62
17943: PUSH
17944: LD_INT 80
17946: PUSH
17947: LD_INT 82
17949: PUSH
17950: LD_INT 83
17952: PUSH
17953: LD_INT 84
17955: PUSH
17956: LD_INT 85
17958: PUSH
17959: LD_INT 86
17961: PUSH
17962: LD_INT 90
17964: PUSH
17965: LD_INT 93
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: ST_TO_ADDR
18023: GO 18506
18025: LD_INT 2
18027: DOUBLE
18028: EQUAL
18029: IFTRUE 18033
18031: GO 18267
18033: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
18034: LD_ADDR_VAR 0 4
18038: PUSH
18039: LD_INT 35
18041: PUSH
18042: LD_INT 45
18044: PUSH
18045: LD_INT 46
18047: PUSH
18048: LD_INT 47
18050: PUSH
18051: LD_INT 82
18053: PUSH
18054: LD_INT 83
18056: PUSH
18057: LD_INT 84
18059: PUSH
18060: LD_INT 85
18062: PUSH
18063: LD_INT 87
18065: PUSH
18066: LD_INT 70
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: LD_INT 11
18074: PUSH
18075: LD_INT 3
18077: PUSH
18078: LD_INT 4
18080: PUSH
18081: LD_INT 5
18083: PUSH
18084: LD_INT 6
18086: PUSH
18087: LD_INT 15
18089: PUSH
18090: LD_INT 18
18092: PUSH
18093: LD_INT 7
18095: PUSH
18096: LD_INT 17
18098: PUSH
18099: LD_INT 8
18101: PUSH
18102: LD_INT 20
18104: PUSH
18105: LD_INT 21
18107: PUSH
18108: LD_INT 22
18110: PUSH
18111: LD_INT 72
18113: PUSH
18114: LD_INT 26
18116: PUSH
18117: LD_INT 69
18119: PUSH
18120: LD_INT 39
18122: PUSH
18123: LD_INT 40
18125: PUSH
18126: LD_INT 41
18128: PUSH
18129: LD_INT 42
18131: PUSH
18132: LD_INT 43
18134: PUSH
18135: LD_INT 48
18137: PUSH
18138: LD_INT 49
18140: PUSH
18141: LD_INT 50
18143: PUSH
18144: LD_INT 51
18146: PUSH
18147: LD_INT 52
18149: PUSH
18150: LD_INT 53
18152: PUSH
18153: LD_INT 54
18155: PUSH
18156: LD_INT 55
18158: PUSH
18159: LD_INT 56
18161: PUSH
18162: LD_INT 60
18164: PUSH
18165: LD_INT 61
18167: PUSH
18168: LD_INT 62
18170: PUSH
18171: LD_INT 66
18173: PUSH
18174: LD_INT 67
18176: PUSH
18177: LD_INT 68
18179: PUSH
18180: LD_INT 81
18182: PUSH
18183: LD_INT 82
18185: PUSH
18186: LD_INT 83
18188: PUSH
18189: LD_INT 84
18191: PUSH
18192: LD_INT 85
18194: PUSH
18195: LD_INT 87
18197: PUSH
18198: LD_INT 88
18200: PUSH
18201: LD_INT 92
18203: PUSH
18204: LD_INT 94
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: ST_TO_ADDR
18265: GO 18506
18267: LD_INT 3
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18505
18275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
18276: LD_ADDR_VAR 0 4
18280: PUSH
18281: LD_INT 46
18283: PUSH
18284: LD_INT 47
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 82
18295: PUSH
18296: LD_INT 83
18298: PUSH
18299: LD_INT 84
18301: PUSH
18302: LD_INT 85
18304: PUSH
18305: LD_INT 86
18307: PUSH
18308: LD_INT 11
18310: PUSH
18311: LD_INT 9
18313: PUSH
18314: LD_INT 20
18316: PUSH
18317: LD_INT 19
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 24
18325: PUSH
18326: LD_INT 22
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 28
18334: PUSH
18335: LD_INT 29
18337: PUSH
18338: LD_INT 30
18340: PUSH
18341: LD_INT 31
18343: PUSH
18344: LD_INT 37
18346: PUSH
18347: LD_INT 38
18349: PUSH
18350: LD_INT 32
18352: PUSH
18353: LD_INT 27
18355: PUSH
18356: LD_INT 33
18358: PUSH
18359: LD_INT 69
18361: PUSH
18362: LD_INT 39
18364: PUSH
18365: LD_INT 34
18367: PUSH
18368: LD_INT 40
18370: PUSH
18371: LD_INT 71
18373: PUSH
18374: LD_INT 23
18376: PUSH
18377: LD_INT 44
18379: PUSH
18380: LD_INT 48
18382: PUSH
18383: LD_INT 49
18385: PUSH
18386: LD_INT 50
18388: PUSH
18389: LD_INT 51
18391: PUSH
18392: LD_INT 52
18394: PUSH
18395: LD_INT 53
18397: PUSH
18398: LD_INT 54
18400: PUSH
18401: LD_INT 55
18403: PUSH
18404: LD_INT 56
18406: PUSH
18407: LD_INT 57
18409: PUSH
18410: LD_INT 58
18412: PUSH
18413: LD_INT 59
18415: PUSH
18416: LD_INT 63
18418: PUSH
18419: LD_INT 64
18421: PUSH
18422: LD_INT 65
18424: PUSH
18425: LD_INT 82
18427: PUSH
18428: LD_INT 83
18430: PUSH
18431: LD_INT 84
18433: PUSH
18434: LD_INT 85
18436: PUSH
18437: LD_INT 86
18439: PUSH
18440: LD_INT 89
18442: PUSH
18443: LD_INT 91
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: ST_TO_ADDR
18503: GO 18506
18505: POP
// if state > - 1 and state < 3 then
18506: LD_VAR 0 3
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: GREATER
18515: IFFALSE 18527
18517: PUSH
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 3
18525: LESS
18526: AND
18527: IFFALSE 18584
// for i in result do
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_VAR 0 4
18538: PUSH
18539: FOR_IN
18540: IFFALSE 18582
// if GetTech ( i , side ) <> state then
18542: LD_VAR 0 5
18546: PPUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 321
18556: PUSH
18557: LD_VAR 0 3
18561: NONEQUAL
18562: IFFALSE 18580
// result := result diff i ;
18564: LD_ADDR_VAR 0 4
18568: PUSH
18569: LD_VAR 0 4
18573: PUSH
18574: LD_VAR 0 5
18578: DIFF
18579: ST_TO_ADDR
18580: GO 18539
18582: POP
18583: POP
// end ;
18584: LD_VAR 0 4
18588: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18589: LD_INT 0
18591: PPUSH
18592: PPUSH
18593: PPUSH
// result := true ;
18594: LD_ADDR_VAR 0 3
18598: PUSH
18599: LD_INT 1
18601: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18602: LD_ADDR_VAR 0 5
18606: PUSH
18607: LD_VAR 0 2
18611: PPUSH
18612: CALL_OW 480
18616: ST_TO_ADDR
// if not tmp then
18617: LD_VAR 0 5
18621: NOT
18622: IFFALSE 18626
// exit ;
18624: GO 18675
// for i in tmp do
18626: LD_ADDR_VAR 0 4
18630: PUSH
18631: LD_VAR 0 5
18635: PUSH
18636: FOR_IN
18637: IFFALSE 18673
// if GetTech ( i , side ) <> state_researched then
18639: LD_VAR 0 4
18643: PPUSH
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 321
18653: PUSH
18654: LD_INT 2
18656: NONEQUAL
18657: IFFALSE 18671
// begin result := false ;
18659: LD_ADDR_VAR 0 3
18663: PUSH
18664: LD_INT 0
18666: ST_TO_ADDR
// exit ;
18667: POP
18668: POP
18669: GO 18675
// end ;
18671: GO 18636
18673: POP
18674: POP
// end ;
18675: LD_VAR 0 3
18679: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18680: LD_INT 0
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
18692: PPUSH
18693: PPUSH
18694: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18695: LD_VAR 0 1
18699: NOT
18700: IFTRUE 18717
18702: PUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 257
18712: PUSH
18713: LD_INT 9
18715: NONEQUAL
18716: OR
18717: IFFALSE 18721
// exit ;
18719: GO 19300
// side := GetSide ( unit ) ;
18721: LD_ADDR_VAR 0 9
18725: PUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 255
18735: ST_TO_ADDR
// tech_space := tech_spacanom ;
18736: LD_ADDR_VAR 0 12
18740: PUSH
18741: LD_INT 29
18743: ST_TO_ADDR
// tech_time := tech_taurad ;
18744: LD_ADDR_VAR 0 13
18748: PUSH
18749: LD_INT 28
18751: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18752: LD_ADDR_VAR 0 11
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 310
18766: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18767: LD_VAR 0 11
18771: PPUSH
18772: CALL_OW 247
18776: PUSH
18777: LD_INT 2
18779: EQUAL
18780: IFFALSE 18784
// exit ;
18782: GO 19300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18784: LD_ADDR_VAR 0 8
18788: PUSH
18789: LD_INT 81
18791: PUSH
18792: LD_VAR 0 9
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: LD_INT 21
18806: PUSH
18807: LD_INT 3
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PPUSH
18822: CALL_OW 69
18826: ST_TO_ADDR
// if not tmp then
18827: LD_VAR 0 8
18831: NOT
18832: IFFALSE 18836
// exit ;
18834: GO 19300
// if in_unit then
18836: LD_VAR 0 11
18840: IFFALSE 18864
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18842: LD_ADDR_VAR 0 10
18846: PUSH
18847: LD_VAR 0 8
18851: PPUSH
18852: LD_VAR 0 11
18856: PPUSH
18857: CALL_OW 74
18861: ST_TO_ADDR
18862: GO 18884
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18864: LD_ADDR_VAR 0 10
18868: PUSH
18869: LD_VAR 0 8
18873: PPUSH
18874: LD_VAR 0 1
18878: PPUSH
18879: CALL_OW 74
18883: ST_TO_ADDR
// if not enemy then
18884: LD_VAR 0 10
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 19300
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18893: LD_VAR 0 11
18897: IFFALSE 18919
18899: PUSH
18900: LD_VAR 0 11
18904: PPUSH
18905: LD_VAR 0 10
18909: PPUSH
18910: CALL_OW 296
18914: PUSH
18915: LD_INT 13
18917: GREATER
18918: AND
18919: IFTRUE 18941
18921: PUSH
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_VAR 0 10
18931: PPUSH
18932: CALL_OW 296
18936: PUSH
18937: LD_INT 12
18939: GREATER
18940: OR
18941: IFFALSE 18945
// exit ;
18943: GO 19300
// missile := [ 1 ] ;
18945: LD_ADDR_VAR 0 14
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18956: LD_VAR 0 9
18960: PPUSH
18961: LD_VAR 0 12
18965: PPUSH
18966: CALL_OW 325
18970: IFFALSE 18999
// missile := Replace ( missile , missile + 1 , 2 ) ;
18972: LD_ADDR_VAR 0 14
18976: PUSH
18977: LD_VAR 0 14
18981: PPUSH
18982: LD_VAR 0 14
18986: PUSH
18987: LD_INT 1
18989: PLUS
18990: PPUSH
18991: LD_INT 2
18993: PPUSH
18994: CALL_OW 1
18998: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18999: LD_VAR 0 9
19003: PPUSH
19004: LD_VAR 0 13
19008: PPUSH
19009: CALL_OW 325
19013: IFFALSE 19037
19015: PUSH
19016: LD_VAR 0 10
19020: PPUSH
19021: CALL_OW 255
19025: PPUSH
19026: LD_VAR 0 13
19030: PPUSH
19031: CALL_OW 325
19035: NOT
19036: AND
19037: IFFALSE 19066
// missile := Replace ( missile , missile + 1 , 3 ) ;
19039: LD_ADDR_VAR 0 14
19043: PUSH
19044: LD_VAR 0 14
19048: PPUSH
19049: LD_VAR 0 14
19053: PUSH
19054: LD_INT 1
19056: PLUS
19057: PPUSH
19058: LD_INT 3
19060: PPUSH
19061: CALL_OW 1
19065: ST_TO_ADDR
// if missile < 2 then
19066: LD_VAR 0 14
19070: PUSH
19071: LD_INT 2
19073: LESS
19074: IFFALSE 19078
// exit ;
19076: GO 19300
// x := GetX ( enemy ) ;
19078: LD_ADDR_VAR 0 4
19082: PUSH
19083: LD_VAR 0 10
19087: PPUSH
19088: CALL_OW 250
19092: ST_TO_ADDR
// y := GetY ( enemy ) ;
19093: LD_ADDR_VAR 0 5
19097: PUSH
19098: LD_VAR 0 10
19102: PPUSH
19103: CALL_OW 251
19107: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19108: LD_ADDR_VAR 0 6
19112: PUSH
19113: LD_VAR 0 4
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 12
19129: PLUS
19130: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19131: LD_ADDR_VAR 0 7
19135: PUSH
19136: LD_VAR 0 5
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 12
19152: PLUS
19153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19154: LD_VAR 0 6
19158: PPUSH
19159: LD_VAR 0 7
19163: PPUSH
19164: CALL_OW 488
19168: NOT
19169: IFFALSE 19191
// begin _x := x ;
19171: LD_ADDR_VAR 0 6
19175: PUSH
19176: LD_VAR 0 4
19180: ST_TO_ADDR
// _y := y ;
19181: LD_ADDR_VAR 0 7
19185: PUSH
19186: LD_VAR 0 5
19190: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_VAR 0 14
19203: PPUSH
19204: CALL_OW 12
19208: ST_TO_ADDR
// case i of 1 :
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 1
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19239
19222: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 10
19232: PPUSH
19233: CALL_OW 115
19237: GO 19300
19239: LD_INT 2
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19269
19247: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 6
19257: PPUSH
19258: LD_VAR 0 7
19262: PPUSH
19263: CALL_OW 153
19267: GO 19300
19269: LD_INT 3
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19299
19277: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19278: LD_VAR 0 1
19282: PPUSH
19283: LD_VAR 0 6
19287: PPUSH
19288: LD_VAR 0 7
19292: PPUSH
19293: CALL_OW 154
19297: GO 19300
19299: POP
// end ;
19300: LD_VAR 0 2
19304: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19305: LD_INT 0
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
19311: PPUSH
19312: PPUSH
// if not unit or not building then
19313: LD_VAR 0 1
19317: NOT
19318: IFTRUE 19327
19320: PUSH
19321: LD_VAR 0 2
19325: NOT
19326: OR
19327: IFFALSE 19331
// exit ;
19329: GO 19489
// x := GetX ( building ) ;
19331: LD_ADDR_VAR 0 5
19335: PUSH
19336: LD_VAR 0 2
19340: PPUSH
19341: CALL_OW 250
19345: ST_TO_ADDR
// y := GetY ( building ) ;
19346: LD_ADDR_VAR 0 6
19350: PUSH
19351: LD_VAR 0 2
19355: PPUSH
19356: CALL_OW 251
19360: ST_TO_ADDR
// for i := 0 to 5 do
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: DOUBLE
19367: LD_INT 0
19369: DEC
19370: ST_TO_ADDR
19371: LD_INT 5
19373: PUSH
19374: FOR_TO
19375: IFFALSE 19487
// begin _x := ShiftX ( x , i , 3 ) ;
19377: LD_ADDR_VAR 0 7
19381: PUSH
19382: LD_VAR 0 5
19386: PPUSH
19387: LD_VAR 0 4
19391: PPUSH
19392: LD_INT 3
19394: PPUSH
19395: CALL_OW 272
19399: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19400: LD_ADDR_VAR 0 8
19404: PUSH
19405: LD_VAR 0 6
19409: PPUSH
19410: LD_VAR 0 4
19414: PPUSH
19415: LD_INT 3
19417: PPUSH
19418: CALL_OW 273
19422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19423: LD_VAR 0 7
19427: PPUSH
19428: LD_VAR 0 8
19432: PPUSH
19433: CALL_OW 488
19437: NOT
19438: IFFALSE 19442
// continue ;
19440: GO 19374
// if HexInfo ( _x , _y ) = 0 then
19442: LD_VAR 0 7
19446: PPUSH
19447: LD_VAR 0 8
19451: PPUSH
19452: CALL_OW 428
19456: PUSH
19457: LD_INT 0
19459: EQUAL
19460: IFFALSE 19485
// begin ComMoveXY ( unit , _x , _y ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: LD_VAR 0 7
19471: PPUSH
19472: LD_VAR 0 8
19476: PPUSH
19477: CALL_OW 111
// exit ;
19481: POP
19482: POP
19483: GO 19489
// end ; end ;
19485: GO 19374
19487: POP
19488: POP
// end ;
19489: LD_VAR 0 3
19493: RET
// export function ScanBase ( side , base_area ) ; begin
19494: LD_INT 0
19496: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_VAR 0 2
19506: PPUSH
19507: LD_INT 81
19509: PUSH
19510: LD_VAR 0 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 70
19523: ST_TO_ADDR
// end ;
19524: LD_VAR 0 3
19528: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19529: LD_INT 0
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
// result := false ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// side := GetSide ( unit ) ;
19543: LD_ADDR_VAR 0 3
19547: PUSH
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL_OW 255
19557: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19558: LD_ADDR_VAR 0 4
19562: PUSH
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 248
19572: ST_TO_ADDR
// case nat of 1 :
19573: LD_VAR 0 4
19577: PUSH
19578: LD_INT 1
19580: DOUBLE
19581: EQUAL
19582: IFTRUE 19586
19584: GO 19597
19586: POP
// tech := tech_lassight ; 2 :
19587: LD_ADDR_VAR 0 5
19591: PUSH
19592: LD_INT 12
19594: ST_TO_ADDR
19595: GO 19636
19597: LD_INT 2
19599: DOUBLE
19600: EQUAL
19601: IFTRUE 19605
19603: GO 19616
19605: POP
// tech := tech_mortar ; 3 :
19606: LD_ADDR_VAR 0 5
19610: PUSH
19611: LD_INT 41
19613: ST_TO_ADDR
19614: GO 19636
19616: LD_INT 3
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19635
19624: POP
// tech := tech_bazooka ; end ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_INT 44
19632: ST_TO_ADDR
19633: GO 19636
19635: POP
// if Researched ( side , tech ) then
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_VAR 0 5
19645: PPUSH
19646: CALL_OW 325
19650: IFFALSE 19677
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19652: LD_ADDR_VAR 0 2
19656: PUSH
19657: LD_INT 5
19659: PUSH
19660: LD_INT 8
19662: PUSH
19663: LD_INT 9
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: PUSH
19671: LD_VAR 0 4
19675: ARRAY
19676: ST_TO_ADDR
// end ;
19677: LD_VAR 0 2
19681: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19682: LD_INT 0
19684: PPUSH
19685: PPUSH
19686: PPUSH
// if not mines then
19687: LD_VAR 0 2
19691: NOT
19692: IFFALSE 19696
// exit ;
19694: GO 19840
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19696: LD_ADDR_VAR 0 5
19700: PUSH
19701: LD_INT 81
19703: PUSH
19704: LD_VAR 0 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 21
19718: PUSH
19719: LD_INT 3
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: ST_TO_ADDR
// for i in mines do
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_VAR 0 2
19748: PUSH
19749: FOR_IN
19750: IFFALSE 19838
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19752: LD_VAR 0 4
19756: PUSH
19757: LD_INT 1
19759: ARRAY
19760: PPUSH
19761: LD_VAR 0 4
19765: PUSH
19766: LD_INT 2
19768: ARRAY
19769: PPUSH
19770: CALL_OW 458
19774: NOT
19775: IFFALSE 19779
// continue ;
19777: GO 19749
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19779: LD_VAR 0 4
19783: PUSH
19784: LD_INT 1
19786: ARRAY
19787: PPUSH
19788: LD_VAR 0 4
19792: PUSH
19793: LD_INT 2
19795: ARRAY
19796: PPUSH
19797: CALL_OW 428
19801: PUSH
19802: LD_VAR 0 5
19806: IN
19807: IFFALSE 19836
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19809: LD_VAR 0 4
19813: PUSH
19814: LD_INT 1
19816: ARRAY
19817: PPUSH
19818: LD_VAR 0 4
19822: PUSH
19823: LD_INT 2
19825: ARRAY
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 456
// end ;
19836: GO 19749
19838: POP
19839: POP
// end ;
19840: LD_VAR 0 3
19844: RET
// export function Count ( array ) ; begin
19845: LD_INT 0
19847: PPUSH
// result := array + 0 ;
19848: LD_ADDR_VAR 0 2
19852: PUSH
19853: LD_VAR 0 1
19857: PUSH
19858: LD_INT 0
19860: PLUS
19861: ST_TO_ADDR
// end ;
19862: LD_VAR 0 2
19866: RET
// export function IsEmpty ( building ) ; begin
19867: LD_INT 0
19869: PPUSH
// if not building then
19870: LD_VAR 0 1
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 19922
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19879: LD_ADDR_VAR 0 2
19883: PUSH
19884: LD_VAR 0 1
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_VAR 0 1
19896: PPUSH
19897: CALL_OW 255
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 58
19908: PUSH
19909: EMPTY
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PPUSH
19916: CALL_OW 69
19920: IN
19921: ST_TO_ADDR
// end ;
19922: LD_VAR 0 2
19926: RET
// export function IsNotFull ( building ) ; var places ; begin
19927: LD_INT 0
19929: PPUSH
19930: PPUSH
// if not building then
19931: LD_VAR 0 1
19935: NOT
19936: IFFALSE 19940
// exit ;
19938: GO 19968
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19940: LD_ADDR_VAR 0 2
19944: PUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: LD_INT 3
19952: PUSH
19953: LD_INT 62
19955: PUSH
19956: EMPTY
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 72
19967: ST_TO_ADDR
// end ;
19968: LD_VAR 0 2
19972: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19973: LD_INT 0
19975: PPUSH
19976: PPUSH
19977: PPUSH
19978: PPUSH
// tmp := [ ] ;
19979: LD_ADDR_VAR 0 3
19983: PUSH
19984: EMPTY
19985: ST_TO_ADDR
// list := [ ] ;
19986: LD_ADDR_VAR 0 5
19990: PUSH
19991: EMPTY
19992: ST_TO_ADDR
// for i = 16 to 25 do
19993: LD_ADDR_VAR 0 4
19997: PUSH
19998: DOUBLE
19999: LD_INT 16
20001: DEC
20002: ST_TO_ADDR
20003: LD_INT 25
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20080
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 22
20021: PUSH
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 255
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 91
20038: PUSH
20039: LD_VAR 0 1
20043: PUSH
20044: LD_INT 6
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 30
20054: PUSH
20055: LD_VAR 0 4
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: PPUSH
20072: CALL_OW 69
20076: ADD
20077: ST_TO_ADDR
20078: GO 20006
20080: POP
20081: POP
// for i = 1 to tmp do
20082: LD_ADDR_VAR 0 4
20086: PUSH
20087: DOUBLE
20088: LD_INT 1
20090: DEC
20091: ST_TO_ADDR
20092: LD_VAR 0 3
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20186
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20100: LD_ADDR_VAR 0 5
20104: PUSH
20105: LD_VAR 0 5
20109: PUSH
20110: LD_VAR 0 3
20114: PUSH
20115: LD_VAR 0 4
20119: ARRAY
20120: PPUSH
20121: CALL_OW 266
20125: PUSH
20126: LD_VAR 0 3
20130: PUSH
20131: LD_VAR 0 4
20135: ARRAY
20136: PPUSH
20137: CALL_OW 250
20141: PUSH
20142: LD_VAR 0 3
20146: PUSH
20147: LD_VAR 0 4
20151: ARRAY
20152: PPUSH
20153: CALL_OW 251
20157: PUSH
20158: LD_VAR 0 3
20162: PUSH
20163: LD_VAR 0 4
20167: ARRAY
20168: PPUSH
20169: CALL_OW 254
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: ADD
20183: ST_TO_ADDR
20184: GO 20097
20186: POP
20187: POP
// result := list ;
20188: LD_ADDR_VAR 0 2
20192: PUSH
20193: LD_VAR 0 5
20197: ST_TO_ADDR
// end ;
20198: LD_VAR 0 2
20202: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20203: LD_INT 0
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
// if not factory then
20212: LD_VAR 0 1
20216: NOT
20217: IFFALSE 20221
// exit ;
20219: GO 20824
// if control = control_apeman then
20221: LD_VAR 0 4
20225: PUSH
20226: LD_INT 5
20228: EQUAL
20229: IFFALSE 20338
// begin tmp := UnitsInside ( factory ) ;
20231: LD_ADDR_VAR 0 8
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 313
20245: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20246: LD_VAR 0 8
20250: PPUSH
20251: LD_INT 25
20253: PUSH
20254: LD_INT 12
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PPUSH
20261: CALL_OW 72
20265: NOT
20266: IFFALSE 20276
// control := control_manual ;
20268: LD_ADDR_VAR 0 4
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20276: LD_ADDR_VAR 0 8
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL 19973 0 1
20290: ST_TO_ADDR
// if tmp then
20291: LD_VAR 0 8
20295: IFFALSE 20338
// begin for i in tmp do
20297: LD_ADDR_VAR 0 7
20301: PUSH
20302: LD_VAR 0 8
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20336
// if i [ 1 ] = b_ext_radio then
20310: LD_VAR 0 7
20314: PUSH
20315: LD_INT 1
20317: ARRAY
20318: PUSH
20319: LD_INT 22
20321: EQUAL
20322: IFFALSE 20334
// begin control := control_remote ;
20324: LD_ADDR_VAR 0 4
20328: PUSH
20329: LD_INT 2
20331: ST_TO_ADDR
// break ;
20332: GO 20336
// end ;
20334: GO 20307
20336: POP
20337: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_VAR 0 2
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: LD_VAR 0 4
20357: PPUSH
20358: LD_VAR 0 5
20362: PPUSH
20363: CALL_OW 448
20367: IFFALSE 20402
// begin result := [ chassis , engine , control , weapon ] ;
20369: LD_ADDR_VAR 0 6
20373: PUSH
20374: LD_VAR 0 2
20378: PUSH
20379: LD_VAR 0 3
20383: PUSH
20384: LD_VAR 0 4
20388: PUSH
20389: LD_VAR 0 5
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: ST_TO_ADDR
// exit ;
20400: GO 20824
// end ; _chassis := AvailableChassisList ( factory ) ;
20402: LD_ADDR_VAR 0 9
20406: PUSH
20407: LD_VAR 0 1
20411: PPUSH
20412: CALL_OW 475
20416: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20417: LD_ADDR_VAR 0 11
20421: PUSH
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 476
20431: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20432: LD_ADDR_VAR 0 12
20436: PUSH
20437: LD_VAR 0 1
20441: PPUSH
20442: CALL_OW 477
20446: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20447: LD_ADDR_VAR 0 10
20451: PUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 478
20461: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20462: LD_VAR 0 9
20466: NOT
20467: IFTRUE 20476
20469: PUSH
20470: LD_VAR 0 11
20474: NOT
20475: OR
20476: IFTRUE 20485
20478: PUSH
20479: LD_VAR 0 12
20483: NOT
20484: OR
20485: IFTRUE 20494
20487: PUSH
20488: LD_VAR 0 10
20492: NOT
20493: OR
20494: IFFALSE 20529
// begin result := [ chassis , engine , control , weapon ] ;
20496: LD_ADDR_VAR 0 6
20500: PUSH
20501: LD_VAR 0 2
20505: PUSH
20506: LD_VAR 0 3
20510: PUSH
20511: LD_VAR 0 4
20515: PUSH
20516: LD_VAR 0 5
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: ST_TO_ADDR
// exit ;
20527: GO 20824
// end ; if not chassis in _chassis then
20529: LD_VAR 0 2
20533: PUSH
20534: LD_VAR 0 9
20538: IN
20539: NOT
20540: IFFALSE 20566
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20542: LD_ADDR_VAR 0 2
20546: PUSH
20547: LD_VAR 0 9
20551: PUSH
20552: LD_INT 1
20554: PPUSH
20555: LD_VAR 0 9
20559: PPUSH
20560: CALL_OW 12
20564: ARRAY
20565: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_VAR 0 3
20575: PPUSH
20576: CALL 20829 0 2
20580: NOT
20581: IFFALSE 20642
// repeat engine := _engine [ 1 ] ;
20583: LD_ADDR_VAR 0 3
20587: PUSH
20588: LD_VAR 0 11
20592: PUSH
20593: LD_INT 1
20595: ARRAY
20596: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20597: LD_ADDR_VAR 0 11
20601: PUSH
20602: LD_VAR 0 11
20606: PPUSH
20607: LD_INT 1
20609: PPUSH
20610: CALL_OW 3
20614: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: CALL 20829 0 2
20629: IFTRUE 20640
20631: PUSH
20632: LD_VAR 0 11
20636: PUSH
20637: EMPTY
20638: EQUAL
20639: OR
20640: IFFALSE 20583
// if not control in _control then
20642: LD_VAR 0 4
20646: PUSH
20647: LD_VAR 0 12
20651: IN
20652: NOT
20653: IFFALSE 20679
// control := _control [ rand ( 1 , _control ) ] ;
20655: LD_ADDR_VAR 0 4
20659: PUSH
20660: LD_VAR 0 12
20664: PUSH
20665: LD_INT 1
20667: PPUSH
20668: LD_VAR 0 12
20672: PPUSH
20673: CALL_OW 12
20677: ARRAY
20678: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20679: LD_VAR 0 2
20683: PPUSH
20684: LD_VAR 0 5
20688: PPUSH
20689: CALL 21051 0 2
20693: NOT
20694: IFFALSE 20755
// repeat weapon := _weapon [ 1 ] ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 10
20705: PUSH
20706: LD_INT 1
20708: ARRAY
20709: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20710: LD_ADDR_VAR 0 10
20714: PUSH
20715: LD_VAR 0 10
20719: PPUSH
20720: LD_INT 1
20722: PPUSH
20723: CALL_OW 3
20727: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20728: LD_VAR 0 2
20732: PPUSH
20733: LD_VAR 0 5
20737: PPUSH
20738: CALL 21051 0 2
20742: IFTRUE 20753
20744: PUSH
20745: LD_VAR 0 10
20749: PUSH
20750: EMPTY
20751: EQUAL
20752: OR
20753: IFFALSE 20696
// result := [ ] ;
20755: LD_ADDR_VAR 0 6
20759: PUSH
20760: EMPTY
20761: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20762: LD_VAR 0 1
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: LD_VAR 0 4
20781: PPUSH
20782: LD_VAR 0 5
20786: PPUSH
20787: CALL_OW 448
20791: IFFALSE 20824
// result := [ chassis , engine , control , weapon ] ;
20793: LD_ADDR_VAR 0 6
20797: PUSH
20798: LD_VAR 0 2
20802: PUSH
20803: LD_VAR 0 3
20807: PUSH
20808: LD_VAR 0 4
20812: PUSH
20813: LD_VAR 0 5
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: ST_TO_ADDR
// end ;
20824: LD_VAR 0 6
20828: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20829: LD_INT 0
20831: PPUSH
// if not chassis or not engine then
20832: LD_VAR 0 1
20836: NOT
20837: IFTRUE 20846
20839: PUSH
20840: LD_VAR 0 2
20844: NOT
20845: OR
20846: IFFALSE 20850
// exit ;
20848: GO 21046
// case engine of engine_solar :
20850: LD_VAR 0 2
20854: PUSH
20855: LD_INT 2
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20901
20863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20864: LD_ADDR_VAR 0 3
20868: PUSH
20869: LD_INT 11
20871: PUSH
20872: LD_INT 12
20874: PUSH
20875: LD_INT 13
20877: PUSH
20878: LD_INT 14
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: ST_TO_ADDR
20899: GO 21030
20901: LD_INT 1
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20971
20909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: LD_INT 11
20917: PUSH
20918: LD_INT 12
20920: PUSH
20921: LD_INT 13
20923: PUSH
20924: LD_INT 14
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 3
20935: PUSH
20936: LD_INT 4
20938: PUSH
20939: LD_INT 5
20941: PUSH
20942: LD_INT 21
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_INT 24
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: ST_TO_ADDR
20969: GO 21030
20971: LD_INT 3
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 21029
20979: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20980: LD_ADDR_VAR 0 3
20984: PUSH
20985: LD_INT 13
20987: PUSH
20988: LD_INT 14
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: LD_INT 3
20996: PUSH
20997: LD_INT 4
20999: PUSH
21000: LD_INT 5
21002: PUSH
21003: LD_INT 21
21005: PUSH
21006: LD_INT 22
21008: PUSH
21009: LD_INT 23
21011: PUSH
21012: LD_INT 24
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: ST_TO_ADDR
21027: GO 21030
21029: POP
// result := ( chassis in result ) ;
21030: LD_ADDR_VAR 0 3
21034: PUSH
21035: LD_VAR 0 1
21039: PUSH
21040: LD_VAR 0 3
21044: IN
21045: ST_TO_ADDR
// end ;
21046: LD_VAR 0 3
21050: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21051: LD_INT 0
21053: PPUSH
// if not chassis or not weapon then
21054: LD_VAR 0 1
21058: NOT
21059: IFTRUE 21068
21061: PUSH
21062: LD_VAR 0 2
21066: NOT
21067: OR
21068: IFFALSE 21072
// exit ;
21070: GO 22166
// case weapon of us_machine_gun :
21072: LD_VAR 0 2
21076: PUSH
21077: LD_INT 2
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21115
21085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: LD_INT 4
21102: PUSH
21103: LD_INT 5
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: ST_TO_ADDR
21113: GO 22150
21115: LD_INT 3
21117: DOUBLE
21118: EQUAL
21119: IFTRUE 21123
21121: GO 21153
21123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21124: LD_ADDR_VAR 0 3
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 3
21137: PUSH
21138: LD_INT 4
21140: PUSH
21141: LD_INT 5
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
21151: GO 22150
21153: LD_INT 11
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21191
21161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: LD_INT 4
21178: PUSH
21179: LD_INT 5
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 22150
21191: LD_INT 4
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21225
21199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21200: LD_ADDR_VAR 0 3
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 3
21210: PUSH
21211: LD_INT 4
21213: PUSH
21214: LD_INT 5
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: ST_TO_ADDR
21223: GO 22150
21225: LD_INT 5
21227: DOUBLE
21228: EQUAL
21229: IFTRUE 21233
21231: GO 21259
21233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21234: LD_ADDR_VAR 0 3
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: LD_INT 4
21247: PUSH
21248: LD_INT 5
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: ST_TO_ADDR
21257: GO 22150
21259: LD_INT 9
21261: DOUBLE
21262: EQUAL
21263: IFTRUE 21267
21265: GO 21293
21267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21268: LD_ADDR_VAR 0 3
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 3
21278: PUSH
21279: LD_INT 4
21281: PUSH
21282: LD_INT 5
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: ST_TO_ADDR
21291: GO 22150
21293: LD_INT 7
21295: DOUBLE
21296: EQUAL
21297: IFTRUE 21301
21299: GO 21327
21301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21302: LD_ADDR_VAR 0 3
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: LD_INT 3
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: LD_INT 5
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: ST_TO_ADDR
21325: GO 22150
21327: LD_INT 12
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21361
21335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21336: LD_ADDR_VAR 0 3
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 4
21349: PUSH
21350: LD_INT 5
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: ST_TO_ADDR
21359: GO 22150
21361: LD_INT 13
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21395
21369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: LD_INT 4
21383: PUSH
21384: LD_INT 5
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
21393: GO 22150
21395: LD_INT 14
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21421
21403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21404: LD_ADDR_VAR 0 3
21408: PUSH
21409: LD_INT 4
21411: PUSH
21412: LD_INT 5
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: ST_TO_ADDR
21419: GO 22150
21421: LD_INT 6
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21447
21429: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21430: LD_ADDR_VAR 0 3
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: LD_INT 5
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: ST_TO_ADDR
21445: GO 22150
21447: LD_INT 10
21449: DOUBLE
21450: EQUAL
21451: IFTRUE 21455
21453: GO 21473
21455: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21456: LD_ADDR_VAR 0 3
21460: PUSH
21461: LD_INT 4
21463: PUSH
21464: LD_INT 5
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: ST_TO_ADDR
21471: GO 22150
21473: LD_INT 22
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21507
21481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21482: LD_ADDR_VAR 0 3
21486: PUSH
21487: LD_INT 11
21489: PUSH
21490: LD_INT 12
21492: PUSH
21493: LD_INT 13
21495: PUSH
21496: LD_INT 14
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: ST_TO_ADDR
21505: GO 22150
21507: LD_INT 23
21509: DOUBLE
21510: EQUAL
21511: IFTRUE 21515
21513: GO 21541
21515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21516: LD_ADDR_VAR 0 3
21520: PUSH
21521: LD_INT 11
21523: PUSH
21524: LD_INT 12
21526: PUSH
21527: LD_INT 13
21529: PUSH
21530: LD_INT 14
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: ST_TO_ADDR
21539: GO 22150
21541: LD_INT 24
21543: DOUBLE
21544: EQUAL
21545: IFTRUE 21549
21547: GO 21575
21549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21550: LD_ADDR_VAR 0 3
21554: PUSH
21555: LD_INT 11
21557: PUSH
21558: LD_INT 12
21560: PUSH
21561: LD_INT 13
21563: PUSH
21564: LD_INT 14
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: ST_TO_ADDR
21573: GO 22150
21575: LD_INT 30
21577: DOUBLE
21578: EQUAL
21579: IFTRUE 21583
21581: GO 21609
21583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21584: LD_ADDR_VAR 0 3
21588: PUSH
21589: LD_INT 11
21591: PUSH
21592: LD_INT 12
21594: PUSH
21595: LD_INT 13
21597: PUSH
21598: LD_INT 14
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: ST_TO_ADDR
21607: GO 22150
21609: LD_INT 25
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21635
21617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21618: LD_ADDR_VAR 0 3
21622: PUSH
21623: LD_INT 13
21625: PUSH
21626: LD_INT 14
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: ST_TO_ADDR
21633: GO 22150
21635: LD_INT 27
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21661
21643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21644: LD_ADDR_VAR 0 3
21648: PUSH
21649: LD_INT 13
21651: PUSH
21652: LD_INT 14
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: ST_TO_ADDR
21659: GO 22150
21661: LD_INT 92
21663: DOUBLE
21664: EQUAL
21665: IFTRUE 21669
21667: GO 21695
21669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_INT 11
21677: PUSH
21678: LD_INT 12
21680: PUSH
21681: LD_INT 13
21683: PUSH
21684: LD_INT 14
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: ST_TO_ADDR
21693: GO 22150
21695: LD_INT 28
21697: DOUBLE
21698: EQUAL
21699: IFTRUE 21703
21701: GO 21721
21703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21704: LD_ADDR_VAR 0 3
21708: PUSH
21709: LD_INT 13
21711: PUSH
21712: LD_INT 14
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: ST_TO_ADDR
21719: GO 22150
21721: LD_INT 29
21723: DOUBLE
21724: EQUAL
21725: IFTRUE 21729
21727: GO 21747
21729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21730: LD_ADDR_VAR 0 3
21734: PUSH
21735: LD_INT 13
21737: PUSH
21738: LD_INT 14
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: ST_TO_ADDR
21745: GO 22150
21747: LD_INT 31
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21773
21755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_INT 13
21763: PUSH
21764: LD_INT 14
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: ST_TO_ADDR
21771: GO 22150
21773: LD_INT 26
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21799
21781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_INT 13
21789: PUSH
21790: LD_INT 14
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: ST_TO_ADDR
21797: GO 22150
21799: LD_INT 42
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21833
21807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 21
21815: PUSH
21816: LD_INT 22
21818: PUSH
21819: LD_INT 23
21821: PUSH
21822: LD_INT 24
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: ST_TO_ADDR
21831: GO 22150
21833: LD_INT 43
21835: DOUBLE
21836: EQUAL
21837: IFTRUE 21841
21839: GO 21867
21841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_INT 21
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_INT 23
21855: PUSH
21856: LD_INT 24
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: ST_TO_ADDR
21865: GO 22150
21867: LD_INT 44
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21901
21875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21876: LD_ADDR_VAR 0 3
21880: PUSH
21881: LD_INT 21
21883: PUSH
21884: LD_INT 22
21886: PUSH
21887: LD_INT 23
21889: PUSH
21890: LD_INT 24
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: ST_TO_ADDR
21899: GO 22150
21901: LD_INT 45
21903: DOUBLE
21904: EQUAL
21905: IFTRUE 21909
21907: GO 21935
21909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21910: LD_ADDR_VAR 0 3
21914: PUSH
21915: LD_INT 21
21917: PUSH
21918: LD_INT 22
21920: PUSH
21921: LD_INT 23
21923: PUSH
21924: LD_INT 24
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: ST_TO_ADDR
21933: GO 22150
21935: LD_INT 49
21937: DOUBLE
21938: EQUAL
21939: IFTRUE 21943
21941: GO 21969
21943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21944: LD_ADDR_VAR 0 3
21948: PUSH
21949: LD_INT 21
21951: PUSH
21952: LD_INT 22
21954: PUSH
21955: LD_INT 23
21957: PUSH
21958: LD_INT 24
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: ST_TO_ADDR
21967: GO 22150
21969: LD_INT 51
21971: DOUBLE
21972: EQUAL
21973: IFTRUE 21977
21975: GO 22003
21977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21978: LD_ADDR_VAR 0 3
21982: PUSH
21983: LD_INT 21
21985: PUSH
21986: LD_INT 22
21988: PUSH
21989: LD_INT 23
21991: PUSH
21992: LD_INT 24
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: ST_TO_ADDR
22001: GO 22150
22003: LD_INT 52
22005: DOUBLE
22006: EQUAL
22007: IFTRUE 22011
22009: GO 22037
22011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_INT 21
22019: PUSH
22020: LD_INT 22
22022: PUSH
22023: LD_INT 23
22025: PUSH
22026: LD_INT 24
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: ST_TO_ADDR
22035: GO 22150
22037: LD_INT 53
22039: DOUBLE
22040: EQUAL
22041: IFTRUE 22045
22043: GO 22063
22045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22046: LD_ADDR_VAR 0 3
22050: PUSH
22051: LD_INT 23
22053: PUSH
22054: LD_INT 24
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: ST_TO_ADDR
22061: GO 22150
22063: LD_INT 46
22065: DOUBLE
22066: EQUAL
22067: IFTRUE 22071
22069: GO 22089
22071: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_INT 23
22079: PUSH
22080: LD_INT 24
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 22150
22089: LD_INT 47
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22115
22097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
22098: LD_ADDR_VAR 0 3
22102: PUSH
22103: LD_INT 23
22105: PUSH
22106: LD_INT 24
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: ST_TO_ADDR
22113: GO 22150
22115: LD_INT 98
22117: DOUBLE
22118: EQUAL
22119: IFTRUE 22123
22121: GO 22149
22123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22124: LD_ADDR_VAR 0 3
22128: PUSH
22129: LD_INT 21
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_INT 23
22137: PUSH
22138: LD_INT 24
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: ST_TO_ADDR
22147: GO 22150
22149: POP
// result := ( chassis in result ) ;
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: LD_VAR 0 1
22159: PUSH
22160: LD_VAR 0 3
22164: IN
22165: ST_TO_ADDR
// end ;
22166: LD_VAR 0 3
22170: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
// result := array ;
22180: LD_ADDR_VAR 0 5
22184: PUSH
22185: LD_VAR 0 1
22189: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22190: LD_VAR 0 1
22194: NOT
22195: IFTRUE 22204
22197: PUSH
22198: LD_VAR 0 2
22202: NOT
22203: OR
22204: IFTRUE 22213
22206: PUSH
22207: LD_VAR 0 3
22211: NOT
22212: OR
22213: IFTRUE 22227
22215: PUSH
22216: LD_VAR 0 2
22220: PUSH
22221: LD_VAR 0 1
22225: GREATER
22226: OR
22227: IFTRUE 22241
22229: PUSH
22230: LD_VAR 0 3
22234: PUSH
22235: LD_VAR 0 1
22239: GREATER
22240: OR
22241: IFFALSE 22245
// exit ;
22243: GO 22541
// if direction then
22245: LD_VAR 0 4
22249: IFFALSE 22313
// begin d := 1 ;
22251: LD_ADDR_VAR 0 9
22255: PUSH
22256: LD_INT 1
22258: ST_TO_ADDR
// if i_from > i_to then
22259: LD_VAR 0 2
22263: PUSH
22264: LD_VAR 0 3
22268: GREATER
22269: IFFALSE 22295
// length := ( array - i_from ) + i_to else
22271: LD_ADDR_VAR 0 11
22275: PUSH
22276: LD_VAR 0 1
22280: PUSH
22281: LD_VAR 0 2
22285: MINUS
22286: PUSH
22287: LD_VAR 0 3
22291: PLUS
22292: ST_TO_ADDR
22293: GO 22311
// length := i_to - i_from ;
22295: LD_ADDR_VAR 0 11
22299: PUSH
22300: LD_VAR 0 3
22304: PUSH
22305: LD_VAR 0 2
22309: MINUS
22310: ST_TO_ADDR
// end else
22311: GO 22374
// begin d := - 1 ;
22313: LD_ADDR_VAR 0 9
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: ST_TO_ADDR
// if i_from > i_to then
22322: LD_VAR 0 2
22326: PUSH
22327: LD_VAR 0 3
22331: GREATER
22332: IFFALSE 22352
// length := i_from - i_to else
22334: LD_ADDR_VAR 0 11
22338: PUSH
22339: LD_VAR 0 2
22343: PUSH
22344: LD_VAR 0 3
22348: MINUS
22349: ST_TO_ADDR
22350: GO 22374
// length := ( array - i_to ) + i_from ;
22352: LD_ADDR_VAR 0 11
22356: PUSH
22357: LD_VAR 0 1
22361: PUSH
22362: LD_VAR 0 3
22366: MINUS
22367: PUSH
22368: LD_VAR 0 2
22372: PLUS
22373: ST_TO_ADDR
// end ; if not length then
22374: LD_VAR 0 11
22378: NOT
22379: IFFALSE 22383
// exit ;
22381: GO 22541
// tmp := array ;
22383: LD_ADDR_VAR 0 10
22387: PUSH
22388: LD_VAR 0 1
22392: ST_TO_ADDR
// for i = 1 to length do
22393: LD_ADDR_VAR 0 6
22397: PUSH
22398: DOUBLE
22399: LD_INT 1
22401: DEC
22402: ST_TO_ADDR
22403: LD_VAR 0 11
22407: PUSH
22408: FOR_TO
22409: IFFALSE 22529
// begin for j = 1 to array do
22411: LD_ADDR_VAR 0 7
22415: PUSH
22416: DOUBLE
22417: LD_INT 1
22419: DEC
22420: ST_TO_ADDR
22421: LD_VAR 0 1
22425: PUSH
22426: FOR_TO
22427: IFFALSE 22515
// begin k := j + d ;
22429: LD_ADDR_VAR 0 8
22433: PUSH
22434: LD_VAR 0 7
22438: PUSH
22439: LD_VAR 0 9
22443: PLUS
22444: ST_TO_ADDR
// if k > array then
22445: LD_VAR 0 8
22449: PUSH
22450: LD_VAR 0 1
22454: GREATER
22455: IFFALSE 22465
// k := 1 ;
22457: LD_ADDR_VAR 0 8
22461: PUSH
22462: LD_INT 1
22464: ST_TO_ADDR
// if not k then
22465: LD_VAR 0 8
22469: NOT
22470: IFFALSE 22482
// k := array ;
22472: LD_ADDR_VAR 0 8
22476: PUSH
22477: LD_VAR 0 1
22481: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22482: LD_ADDR_VAR 0 10
22486: PUSH
22487: LD_VAR 0 10
22491: PPUSH
22492: LD_VAR 0 8
22496: PPUSH
22497: LD_VAR 0 1
22501: PUSH
22502: LD_VAR 0 7
22506: ARRAY
22507: PPUSH
22508: CALL_OW 1
22512: ST_TO_ADDR
// end ;
22513: GO 22426
22515: POP
22516: POP
// array := tmp ;
22517: LD_ADDR_VAR 0 1
22521: PUSH
22522: LD_VAR 0 10
22526: ST_TO_ADDR
// end ;
22527: GO 22408
22529: POP
22530: POP
// result := array ;
22531: LD_ADDR_VAR 0 5
22535: PUSH
22536: LD_VAR 0 1
22540: ST_TO_ADDR
// end ;
22541: LD_VAR 0 5
22545: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
// result := 0 ;
22550: LD_ADDR_VAR 0 3
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// if not array or not value in array then
22558: LD_VAR 0 1
22562: NOT
22563: IFTRUE 22578
22565: PUSH
22566: LD_VAR 0 2
22570: PUSH
22571: LD_VAR 0 1
22575: IN
22576: NOT
22577: OR
22578: IFFALSE 22582
// exit ;
22580: GO 22636
// for i = 1 to array do
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: DOUBLE
22588: LD_INT 1
22590: DEC
22591: ST_TO_ADDR
22592: LD_VAR 0 1
22596: PUSH
22597: FOR_TO
22598: IFFALSE 22634
// if value = array [ i ] then
22600: LD_VAR 0 2
22604: PUSH
22605: LD_VAR 0 1
22609: PUSH
22610: LD_VAR 0 4
22614: ARRAY
22615: EQUAL
22616: IFFALSE 22632
// begin result := i ;
22618: LD_ADDR_VAR 0 3
22622: PUSH
22623: LD_VAR 0 4
22627: ST_TO_ADDR
// exit ;
22628: POP
22629: POP
22630: GO 22636
// end ;
22632: GO 22597
22634: POP
22635: POP
// end ;
22636: LD_VAR 0 3
22640: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22641: LD_INT 0
22643: PPUSH
// vc_chassis := chassis ;
22644: LD_ADDR_OWVAR 37
22648: PUSH
22649: LD_VAR 0 1
22653: ST_TO_ADDR
// vc_engine := engine ;
22654: LD_ADDR_OWVAR 39
22658: PUSH
22659: LD_VAR 0 2
22663: ST_TO_ADDR
// vc_control := control ;
22664: LD_ADDR_OWVAR 38
22668: PUSH
22669: LD_VAR 0 3
22673: ST_TO_ADDR
// vc_weapon := weapon ;
22674: LD_ADDR_OWVAR 40
22678: PUSH
22679: LD_VAR 0 4
22683: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22684: LD_ADDR_OWVAR 41
22688: PUSH
22689: LD_VAR 0 5
22693: ST_TO_ADDR
// end ;
22694: LD_VAR 0 6
22698: RET
// export function WantPlant ( unit ) ; var task ; begin
22699: LD_INT 0
22701: PPUSH
22702: PPUSH
// result := false ;
22703: LD_ADDR_VAR 0 2
22707: PUSH
22708: LD_INT 0
22710: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22711: LD_ADDR_VAR 0 3
22715: PUSH
22716: LD_VAR 0 1
22720: PPUSH
22721: CALL_OW 437
22725: ST_TO_ADDR
// if task then
22726: LD_VAR 0 3
22730: IFFALSE 22758
// if task [ 1 ] [ 1 ] = p then
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: PUSH
22745: LD_STRING p
22747: EQUAL
22748: IFFALSE 22758
// result := true ;
22750: LD_ADDR_VAR 0 2
22754: PUSH
22755: LD_INT 1
22757: ST_TO_ADDR
// end ;
22758: LD_VAR 0 2
22762: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22763: LD_INT 0
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
// if pos < 1 then
22769: LD_VAR 0 2
22773: PUSH
22774: LD_INT 1
22776: LESS
22777: IFFALSE 22781
// exit ;
22779: GO 23084
// if pos = 1 then
22781: LD_VAR 0 2
22785: PUSH
22786: LD_INT 1
22788: EQUAL
22789: IFFALSE 22822
// result := Replace ( arr , pos [ 1 ] , value ) else
22791: LD_ADDR_VAR 0 4
22795: PUSH
22796: LD_VAR 0 1
22800: PPUSH
22801: LD_VAR 0 2
22805: PUSH
22806: LD_INT 1
22808: ARRAY
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: CALL_OW 1
22819: ST_TO_ADDR
22820: GO 23084
// begin tmp := arr ;
22822: LD_ADDR_VAR 0 6
22826: PUSH
22827: LD_VAR 0 1
22831: ST_TO_ADDR
// s_arr := [ tmp ] ;
22832: LD_ADDR_VAR 0 7
22836: PUSH
22837: LD_VAR 0 6
22841: PUSH
22842: EMPTY
22843: LIST
22844: ST_TO_ADDR
// for i = 1 to pos - 1 do
22845: LD_ADDR_VAR 0 5
22849: PUSH
22850: DOUBLE
22851: LD_INT 1
22853: DEC
22854: ST_TO_ADDR
22855: LD_VAR 0 2
22859: PUSH
22860: LD_INT 1
22862: MINUS
22863: PUSH
22864: FOR_TO
22865: IFFALSE 22910
// begin tmp := tmp [ pos [ i ] ] ;
22867: LD_ADDR_VAR 0 6
22871: PUSH
22872: LD_VAR 0 6
22876: PUSH
22877: LD_VAR 0 2
22881: PUSH
22882: LD_VAR 0 5
22886: ARRAY
22887: ARRAY
22888: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22889: LD_ADDR_VAR 0 7
22893: PUSH
22894: LD_VAR 0 7
22898: PUSH
22899: LD_VAR 0 6
22903: PUSH
22904: EMPTY
22905: LIST
22906: ADD
22907: ST_TO_ADDR
// end ;
22908: GO 22864
22910: POP
22911: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22912: LD_ADDR_VAR 0 6
22916: PUSH
22917: LD_VAR 0 6
22921: PPUSH
22922: LD_VAR 0 2
22926: PUSH
22927: LD_VAR 0 2
22931: ARRAY
22932: PPUSH
22933: LD_VAR 0 3
22937: PPUSH
22938: CALL_OW 1
22942: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22943: LD_ADDR_VAR 0 7
22947: PUSH
22948: LD_VAR 0 7
22952: PPUSH
22953: LD_VAR 0 7
22957: PPUSH
22958: LD_VAR 0 6
22962: PPUSH
22963: CALL_OW 1
22967: ST_TO_ADDR
// for i = s_arr downto 2 do
22968: LD_ADDR_VAR 0 5
22972: PUSH
22973: DOUBLE
22974: LD_VAR 0 7
22978: INC
22979: ST_TO_ADDR
22980: LD_INT 2
22982: PUSH
22983: FOR_DOWNTO
22984: IFFALSE 23068
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22986: LD_ADDR_VAR 0 6
22990: PUSH
22991: LD_VAR 0 7
22995: PUSH
22996: LD_VAR 0 5
23000: PUSH
23001: LD_INT 1
23003: MINUS
23004: ARRAY
23005: PPUSH
23006: LD_VAR 0 2
23010: PUSH
23011: LD_VAR 0 5
23015: PUSH
23016: LD_INT 1
23018: MINUS
23019: ARRAY
23020: PPUSH
23021: LD_VAR 0 7
23025: PUSH
23026: LD_VAR 0 5
23030: ARRAY
23031: PPUSH
23032: CALL_OW 1
23036: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23037: LD_ADDR_VAR 0 7
23041: PUSH
23042: LD_VAR 0 7
23046: PPUSH
23047: LD_VAR 0 5
23051: PUSH
23052: LD_INT 1
23054: MINUS
23055: PPUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: CALL_OW 1
23065: ST_TO_ADDR
// end ;
23066: GO 22983
23068: POP
23069: POP
// result := s_arr [ 1 ] ;
23070: LD_ADDR_VAR 0 4
23074: PUSH
23075: LD_VAR 0 7
23079: PUSH
23080: LD_INT 1
23082: ARRAY
23083: ST_TO_ADDR
// end ; end ;
23084: LD_VAR 0 4
23088: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23089: LD_INT 0
23091: PPUSH
23092: PPUSH
// if not list then
23093: LD_VAR 0 1
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23193
// i := list [ pos1 ] ;
23102: LD_ADDR_VAR 0 5
23106: PUSH
23107: LD_VAR 0 1
23111: PUSH
23112: LD_VAR 0 2
23116: ARRAY
23117: ST_TO_ADDR
// if not i then
23118: LD_VAR 0 5
23122: NOT
23123: IFFALSE 23127
// exit ;
23125: GO 23193
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23127: LD_ADDR_VAR 0 1
23131: PUSH
23132: LD_VAR 0 1
23136: PPUSH
23137: LD_VAR 0 2
23141: PPUSH
23142: LD_VAR 0 1
23146: PUSH
23147: LD_VAR 0 3
23151: ARRAY
23152: PPUSH
23153: CALL_OW 1
23157: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23158: LD_ADDR_VAR 0 1
23162: PUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_VAR 0 3
23172: PPUSH
23173: LD_VAR 0 5
23177: PPUSH
23178: CALL_OW 1
23182: ST_TO_ADDR
// result := list ;
23183: LD_ADDR_VAR 0 4
23187: PUSH
23188: LD_VAR 0 1
23192: ST_TO_ADDR
// end ;
23193: LD_VAR 0 4
23197: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23198: LD_INT 0
23200: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23201: LD_ADDR_VAR 0 5
23205: PUSH
23206: LD_VAR 0 1
23210: PPUSH
23211: CALL_OW 250
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 251
23225: PPUSH
23226: LD_VAR 0 2
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_VAR 0 4
23240: PPUSH
23241: CALL 23623 0 5
23245: ST_TO_ADDR
// end ;
23246: LD_VAR 0 5
23250: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
23251: LD_INT 0
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
// if not list or not unit then
23257: LD_VAR 0 2
23261: NOT
23262: IFTRUE 23271
23264: PUSH
23265: LD_VAR 0 1
23269: NOT
23270: OR
23271: IFFALSE 23275
// exit ;
23273: GO 23618
// result := [ ] ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: EMPTY
23281: ST_TO_ADDR
// for i in list do
23282: LD_ADDR_VAR 0 6
23286: PUSH
23287: LD_VAR 0 2
23291: PUSH
23292: FOR_IN
23293: IFFALSE 23511
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23295: LD_ADDR_VAR 0 8
23299: PUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_VAR 0 6
23309: PUSH
23310: LD_INT 1
23312: ARRAY
23313: PPUSH
23314: LD_VAR 0 6
23318: PUSH
23319: LD_INT 2
23321: ARRAY
23322: PPUSH
23323: CALL_OW 297
23327: ST_TO_ADDR
// if not Count ( result ) then
23328: LD_VAR 0 5
23332: PPUSH
23333: CALL 19845 0 1
23337: NOT
23338: IFFALSE 23371
// begin result := Join ( result , [ i , tmp ] ) ;
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_VAR 0 5
23349: PPUSH
23350: LD_VAR 0 6
23354: PUSH
23355: LD_VAR 0 8
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL 55811 0 2
23368: ST_TO_ADDR
// continue ;
23369: GO 23292
// end ; if result [ result ] [ 2 ] <= tmp then
23371: LD_VAR 0 5
23375: PUSH
23376: LD_VAR 0 5
23380: ARRAY
23381: PUSH
23382: LD_INT 2
23384: ARRAY
23385: PUSH
23386: LD_VAR 0 8
23390: LESSEQUAL
23391: IFFALSE 23424
// result := Join ( result , [ i , tmp ] ) else
23393: LD_ADDR_VAR 0 5
23397: PUSH
23398: LD_VAR 0 5
23402: PPUSH
23403: LD_VAR 0 6
23407: PUSH
23408: LD_VAR 0 8
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PPUSH
23417: CALL 55811 0 2
23421: ST_TO_ADDR
23422: GO 23509
// begin for j := 1 to Count ( result ) do
23424: LD_ADDR_VAR 0 7
23428: PUSH
23429: DOUBLE
23430: LD_INT 1
23432: DEC
23433: ST_TO_ADDR
23434: LD_VAR 0 5
23438: PPUSH
23439: CALL 19845 0 1
23443: PUSH
23444: FOR_TO
23445: IFFALSE 23507
// begin if tmp < result [ j ] [ 2 ] then
23447: LD_VAR 0 8
23451: PUSH
23452: LD_VAR 0 5
23456: PUSH
23457: LD_VAR 0 7
23461: ARRAY
23462: PUSH
23463: LD_INT 2
23465: ARRAY
23466: LESS
23467: IFFALSE 23505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23469: LD_ADDR_VAR 0 5
23473: PUSH
23474: LD_VAR 0 5
23478: PPUSH
23479: LD_VAR 0 7
23483: PPUSH
23484: LD_VAR 0 6
23488: PUSH
23489: LD_VAR 0 8
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 2
23502: ST_TO_ADDR
// break ;
23503: GO 23507
// end ; end ;
23505: GO 23444
23507: POP
23508: POP
// end ; end ;
23509: GO 23292
23511: POP
23512: POP
// if result and not asc then
23513: LD_VAR 0 5
23517: IFFALSE 23526
23519: PUSH
23520: LD_VAR 0 3
23524: NOT
23525: AND
23526: IFFALSE 23543
// result := ReverseArray ( result ) ;
23528: LD_ADDR_VAR 0 5
23532: PUSH
23533: LD_VAR 0 5
23537: PPUSH
23538: CALL 50901 0 1
23542: ST_TO_ADDR
// tmp := [ ] ;
23543: LD_ADDR_VAR 0 8
23547: PUSH
23548: EMPTY
23549: ST_TO_ADDR
// if mode then
23550: LD_VAR 0 4
23554: IFFALSE 23618
// begin for i := 1 to result do
23556: LD_ADDR_VAR 0 6
23560: PUSH
23561: DOUBLE
23562: LD_INT 1
23564: DEC
23565: ST_TO_ADDR
23566: LD_VAR 0 5
23570: PUSH
23571: FOR_TO
23572: IFFALSE 23606
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23574: LD_ADDR_VAR 0 8
23578: PUSH
23579: LD_VAR 0 8
23583: PPUSH
23584: LD_VAR 0 5
23588: PUSH
23589: LD_VAR 0 6
23593: ARRAY
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PPUSH
23599: CALL 55811 0 2
23603: ST_TO_ADDR
23604: GO 23571
23606: POP
23607: POP
// result := tmp ;
23608: LD_ADDR_VAR 0 5
23612: PUSH
23613: LD_VAR 0 8
23617: ST_TO_ADDR
// end ; end ;
23618: LD_VAR 0 5
23622: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
// if not list then
23629: LD_VAR 0 3
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 24028
// result := [ ] ;
23638: LD_ADDR_VAR 0 6
23642: PUSH
23643: EMPTY
23644: ST_TO_ADDR
// for i in list do
23645: LD_ADDR_VAR 0 7
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: FOR_IN
23656: IFFALSE 23858
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23658: LD_ADDR_VAR 0 9
23662: PUSH
23663: LD_VAR 0 7
23667: PPUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: CALL_OW 297
23682: ST_TO_ADDR
// if not result then
23683: LD_VAR 0 6
23687: NOT
23688: IFFALSE 23714
// result := [ [ i , tmp ] ] else
23690: LD_ADDR_VAR 0 6
23694: PUSH
23695: LD_VAR 0 7
23699: PUSH
23700: LD_VAR 0 9
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: EMPTY
23710: LIST
23711: ST_TO_ADDR
23712: GO 23856
// begin if result [ result ] [ 2 ] <= tmp then
23714: LD_VAR 0 6
23718: PUSH
23719: LD_VAR 0 6
23723: ARRAY
23724: PUSH
23725: LD_INT 2
23727: ARRAY
23728: PUSH
23729: LD_VAR 0 9
23733: LESSEQUAL
23734: IFFALSE 23776
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23736: LD_ADDR_VAR 0 6
23740: PUSH
23741: LD_VAR 0 6
23745: PPUSH
23746: LD_VAR 0 6
23750: PUSH
23751: LD_INT 1
23753: PLUS
23754: PPUSH
23755: LD_VAR 0 7
23759: PUSH
23760: LD_VAR 0 9
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 2
23773: ST_TO_ADDR
23774: GO 23856
// for j := 1 to result do
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: DOUBLE
23782: LD_INT 1
23784: DEC
23785: ST_TO_ADDR
23786: LD_VAR 0 6
23790: PUSH
23791: FOR_TO
23792: IFFALSE 23854
// begin if tmp < result [ j ] [ 2 ] then
23794: LD_VAR 0 9
23798: PUSH
23799: LD_VAR 0 6
23803: PUSH
23804: LD_VAR 0 8
23808: ARRAY
23809: PUSH
23810: LD_INT 2
23812: ARRAY
23813: LESS
23814: IFFALSE 23852
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23816: LD_ADDR_VAR 0 6
23820: PUSH
23821: LD_VAR 0 6
23825: PPUSH
23826: LD_VAR 0 8
23830: PPUSH
23831: LD_VAR 0 7
23835: PUSH
23836: LD_VAR 0 9
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PPUSH
23845: CALL_OW 2
23849: ST_TO_ADDR
// break ;
23850: GO 23854
// end ; end ;
23852: GO 23791
23854: POP
23855: POP
// end ; end ;
23856: GO 23655
23858: POP
23859: POP
// if result and not asc then
23860: LD_VAR 0 6
23864: IFFALSE 23873
23866: PUSH
23867: LD_VAR 0 4
23871: NOT
23872: AND
23873: IFFALSE 23948
// begin tmp := result ;
23875: LD_ADDR_VAR 0 9
23879: PUSH
23880: LD_VAR 0 6
23884: ST_TO_ADDR
// for i = tmp downto 1 do
23885: LD_ADDR_VAR 0 7
23889: PUSH
23890: DOUBLE
23891: LD_VAR 0 9
23895: INC
23896: ST_TO_ADDR
23897: LD_INT 1
23899: PUSH
23900: FOR_DOWNTO
23901: IFFALSE 23946
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23903: LD_ADDR_VAR 0 6
23907: PUSH
23908: LD_VAR 0 6
23912: PPUSH
23913: LD_VAR 0 9
23917: PUSH
23918: LD_VAR 0 7
23922: MINUS
23923: PUSH
23924: LD_INT 1
23926: PLUS
23927: PPUSH
23928: LD_VAR 0 9
23932: PUSH
23933: LD_VAR 0 7
23937: ARRAY
23938: PPUSH
23939: CALL_OW 1
23943: ST_TO_ADDR
23944: GO 23900
23946: POP
23947: POP
// end ; tmp := [ ] ;
23948: LD_ADDR_VAR 0 9
23952: PUSH
23953: EMPTY
23954: ST_TO_ADDR
// if mode then
23955: LD_VAR 0 5
23959: IFFALSE 24028
// begin for i = 1 to result do
23961: LD_ADDR_VAR 0 7
23965: PUSH
23966: DOUBLE
23967: LD_INT 1
23969: DEC
23970: ST_TO_ADDR
23971: LD_VAR 0 6
23975: PUSH
23976: FOR_TO
23977: IFFALSE 24016
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23979: LD_ADDR_VAR 0 9
23983: PUSH
23984: LD_VAR 0 9
23988: PPUSH
23989: LD_VAR 0 7
23993: PPUSH
23994: LD_VAR 0 6
23998: PUSH
23999: LD_VAR 0 7
24003: ARRAY
24004: PUSH
24005: LD_INT 1
24007: ARRAY
24008: PPUSH
24009: CALL_OW 1
24013: ST_TO_ADDR
24014: GO 23976
24016: POP
24017: POP
// result := tmp ;
24018: LD_ADDR_VAR 0 6
24022: PUSH
24023: LD_VAR 0 9
24027: ST_TO_ADDR
// end ; end ;
24028: LD_VAR 0 6
24032: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
24033: LD_INT 0
24035: PPUSH
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
24040: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
24041: LD_ADDR_VAR 0 5
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// if not x or not y then
24063: LD_VAR 0 2
24067: NOT
24068: IFTRUE 24077
24070: PUSH
24071: LD_VAR 0 3
24075: NOT
24076: OR
24077: IFFALSE 24081
// exit ;
24079: GO 25737
// if not range then
24081: LD_VAR 0 4
24085: NOT
24086: IFFALSE 24096
// range := 10 ;
24088: LD_ADDR_VAR 0 4
24092: PUSH
24093: LD_INT 10
24095: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24096: LD_ADDR_VAR 0 8
24100: PUSH
24101: LD_INT 81
24103: PUSH
24104: LD_VAR 0 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 92
24115: PUSH
24116: LD_VAR 0 2
24120: PUSH
24121: LD_VAR 0 3
24125: PUSH
24126: LD_VAR 0 4
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 3
24139: PUSH
24140: LD_INT 21
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: ST_TO_ADDR
// if not tmp then
24164: LD_VAR 0 8
24168: NOT
24169: IFFALSE 24173
// exit ;
24171: GO 25737
// for i in tmp do
24173: LD_ADDR_VAR 0 6
24177: PUSH
24178: LD_VAR 0 8
24182: PUSH
24183: FOR_IN
24184: IFFALSE 25712
// begin points := [ 0 , 0 , 0 ] ;
24186: LD_ADDR_VAR 0 9
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: ST_TO_ADDR
// bpoints := 1 ;
24205: LD_ADDR_VAR 0 10
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24213: LD_VAR 0 6
24217: PPUSH
24218: CALL_OW 247
24222: PUSH
24223: LD_INT 1
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24813
24231: POP
// begin if GetClass ( i ) = 1 then
24232: LD_VAR 0 6
24236: PPUSH
24237: CALL_OW 257
24241: PUSH
24242: LD_INT 1
24244: EQUAL
24245: IFFALSE 24266
// points := [ 10 , 5 , 3 ] ;
24247: LD_ADDR_VAR 0 9
24251: PUSH
24252: LD_INT 10
24254: PUSH
24255: LD_INT 5
24257: PUSH
24258: LD_INT 3
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24266: LD_VAR 0 6
24270: PPUSH
24271: CALL_OW 257
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 4
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: IN
24290: IFFALSE 24311
// points := [ 3 , 2 , 1 ] ;
24292: LD_ADDR_VAR 0 9
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24311: LD_VAR 0 6
24315: PPUSH
24316: CALL_OW 257
24320: PUSH
24321: LD_INT 5
24323: EQUAL
24324: IFFALSE 24345
// points := [ 130 , 5 , 2 ] ;
24326: LD_ADDR_VAR 0 9
24330: PUSH
24331: LD_INT 130
24333: PUSH
24334: LD_INT 5
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24345: LD_VAR 0 6
24349: PPUSH
24350: CALL_OW 257
24354: PUSH
24355: LD_INT 8
24357: EQUAL
24358: IFFALSE 24379
// points := [ 35 , 35 , 30 ] ;
24360: LD_ADDR_VAR 0 9
24364: PUSH
24365: LD_INT 35
24367: PUSH
24368: LD_INT 35
24370: PUSH
24371: LD_INT 30
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24379: LD_VAR 0 6
24383: PPUSH
24384: CALL_OW 257
24388: PUSH
24389: LD_INT 9
24391: EQUAL
24392: IFFALSE 24413
// points := [ 20 , 55 , 40 ] ;
24394: LD_ADDR_VAR 0 9
24398: PUSH
24399: LD_INT 20
24401: PUSH
24402: LD_INT 55
24404: PUSH
24405: LD_INT 40
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24413: LD_VAR 0 6
24417: PPUSH
24418: CALL_OW 257
24422: PUSH
24423: LD_INT 12
24425: PUSH
24426: LD_INT 16
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: IN
24433: IFFALSE 24454
// points := [ 5 , 3 , 2 ] ;
24435: LD_ADDR_VAR 0 9
24439: PUSH
24440: LD_INT 5
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24454: LD_VAR 0 6
24458: PPUSH
24459: CALL_OW 257
24463: PUSH
24464: LD_INT 17
24466: EQUAL
24467: IFFALSE 24488
// points := [ 100 , 50 , 75 ] ;
24469: LD_ADDR_VAR 0 9
24473: PUSH
24474: LD_INT 100
24476: PUSH
24477: LD_INT 50
24479: PUSH
24480: LD_INT 75
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24488: LD_VAR 0 6
24492: PPUSH
24493: CALL_OW 257
24497: PUSH
24498: LD_INT 15
24500: EQUAL
24501: IFFALSE 24522
// points := [ 10 , 5 , 3 ] ;
24503: LD_ADDR_VAR 0 9
24507: PUSH
24508: LD_INT 10
24510: PUSH
24511: LD_INT 5
24513: PUSH
24514: LD_INT 3
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24522: LD_VAR 0 6
24526: PPUSH
24527: CALL_OW 257
24531: PUSH
24532: LD_INT 14
24534: EQUAL
24535: IFFALSE 24556
// points := [ 10 , 0 , 0 ] ;
24537: LD_ADDR_VAR 0 9
24541: PUSH
24542: LD_INT 10
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24556: LD_VAR 0 6
24560: PPUSH
24561: CALL_OW 257
24565: PUSH
24566: LD_INT 11
24568: EQUAL
24569: IFFALSE 24590
// points := [ 30 , 10 , 5 ] ;
24571: LD_ADDR_VAR 0 9
24575: PUSH
24576: LD_INT 30
24578: PUSH
24579: LD_INT 10
24581: PUSH
24582: LD_INT 5
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24590: LD_VAR 0 1
24594: PPUSH
24595: LD_INT 5
24597: PPUSH
24598: CALL_OW 321
24602: PUSH
24603: LD_INT 2
24605: EQUAL
24606: IFFALSE 24623
// bpoints := bpoints * 1.8 ;
24608: LD_ADDR_VAR 0 10
24612: PUSH
24613: LD_VAR 0 10
24617: PUSH
24618: LD_REAL  1.80000000000000E+0000
24621: MUL
24622: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24623: LD_VAR 0 6
24627: PPUSH
24628: CALL_OW 257
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: LD_INT 4
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: IN
24651: IFFALSE 24671
24653: PUSH
24654: LD_VAR 0 1
24658: PPUSH
24659: LD_INT 51
24661: PPUSH
24662: CALL_OW 321
24666: PUSH
24667: LD_INT 2
24669: EQUAL
24670: AND
24671: IFFALSE 24688
// bpoints := bpoints * 1.2 ;
24673: LD_ADDR_VAR 0 10
24677: PUSH
24678: LD_VAR 0 10
24682: PUSH
24683: LD_REAL  1.20000000000000E+0000
24686: MUL
24687: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24688: LD_VAR 0 6
24692: PPUSH
24693: CALL_OW 257
24697: PUSH
24698: LD_INT 5
24700: PUSH
24701: LD_INT 7
24703: PUSH
24704: LD_INT 9
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: IN
24712: IFFALSE 24732
24714: PUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_INT 52
24722: PPUSH
24723: CALL_OW 321
24727: PUSH
24728: LD_INT 2
24730: EQUAL
24731: AND
24732: IFFALSE 24749
// bpoints := bpoints * 1.5 ;
24734: LD_ADDR_VAR 0 10
24738: PUSH
24739: LD_VAR 0 10
24743: PUSH
24744: LD_REAL  1.50000000000000E+0000
24747: MUL
24748: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24749: LD_VAR 0 1
24753: PPUSH
24754: LD_INT 66
24756: PPUSH
24757: CALL_OW 321
24761: PUSH
24762: LD_INT 2
24764: EQUAL
24765: IFFALSE 24782
// bpoints := bpoints * 1.1 ;
24767: LD_ADDR_VAR 0 10
24771: PUSH
24772: LD_VAR 0 10
24776: PUSH
24777: LD_REAL  1.10000000000000E+0000
24780: MUL
24781: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24782: LD_ADDR_VAR 0 10
24786: PUSH
24787: LD_VAR 0 10
24791: PUSH
24792: LD_VAR 0 6
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 259
24804: PUSH
24805: LD_REAL  1.15000000000000E+0000
24808: MUL
24809: MUL
24810: ST_TO_ADDR
// end ; unit_vehicle :
24811: GO 25641
24813: LD_INT 2
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 25629
24821: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24822: LD_VAR 0 6
24826: PPUSH
24827: CALL_OW 264
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 42
24837: PUSH
24838: LD_INT 24
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: IN
24846: IFFALSE 24867
// points := [ 25 , 5 , 3 ] ;
24848: LD_ADDR_VAR 0 9
24852: PUSH
24853: LD_INT 25
24855: PUSH
24856: LD_INT 5
24858: PUSH
24859: LD_INT 3
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24867: LD_VAR 0 6
24871: PPUSH
24872: CALL_OW 264
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 43
24882: PUSH
24883: LD_INT 25
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: IN
24891: IFFALSE 24912
// points := [ 40 , 15 , 5 ] ;
24893: LD_ADDR_VAR 0 9
24897: PUSH
24898: LD_INT 40
24900: PUSH
24901: LD_INT 15
24903: PUSH
24904: LD_INT 5
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24912: LD_VAR 0 6
24916: PPUSH
24917: CALL_OW 264
24921: PUSH
24922: LD_INT 3
24924: PUSH
24925: LD_INT 23
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: IN
24932: IFFALSE 24953
// points := [ 7 , 25 , 8 ] ;
24934: LD_ADDR_VAR 0 9
24938: PUSH
24939: LD_INT 7
24941: PUSH
24942: LD_INT 25
24944: PUSH
24945: LD_INT 8
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24953: LD_VAR 0 6
24957: PPUSH
24958: CALL_OW 264
24962: PUSH
24963: LD_INT 5
24965: PUSH
24966: LD_INT 27
24968: PUSH
24969: LD_INT 44
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: IN
24977: IFFALSE 24998
// points := [ 14 , 50 , 16 ] ;
24979: LD_ADDR_VAR 0 9
24983: PUSH
24984: LD_INT 14
24986: PUSH
24987: LD_INT 50
24989: PUSH
24990: LD_INT 16
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24998: LD_VAR 0 6
25002: PPUSH
25003: CALL_OW 264
25007: PUSH
25008: LD_INT 6
25010: PUSH
25011: LD_INT 46
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: IN
25018: IFFALSE 25039
// points := [ 32 , 120 , 70 ] ;
25020: LD_ADDR_VAR 0 9
25024: PUSH
25025: LD_INT 32
25027: PUSH
25028: LD_INT 120
25030: PUSH
25031: LD_INT 70
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
25039: LD_VAR 0 6
25043: PPUSH
25044: CALL_OW 264
25048: PUSH
25049: LD_INT 7
25051: PUSH
25052: LD_INT 28
25054: PUSH
25055: LD_INT 45
25057: PUSH
25058: LD_INT 92
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: IN
25067: IFFALSE 25088
// points := [ 35 , 20 , 45 ] ;
25069: LD_ADDR_VAR 0 9
25073: PUSH
25074: LD_INT 35
25076: PUSH
25077: LD_INT 20
25079: PUSH
25080: LD_INT 45
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
25088: LD_VAR 0 6
25092: PPUSH
25093: CALL_OW 264
25097: PUSH
25098: LD_INT 47
25100: PUSH
25101: EMPTY
25102: LIST
25103: IN
25104: IFFALSE 25125
// points := [ 67 , 45 , 75 ] ;
25106: LD_ADDR_VAR 0 9
25110: PUSH
25111: LD_INT 67
25113: PUSH
25114: LD_INT 45
25116: PUSH
25117: LD_INT 75
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25125: LD_VAR 0 6
25129: PPUSH
25130: CALL_OW 264
25134: PUSH
25135: LD_INT 26
25137: PUSH
25138: EMPTY
25139: LIST
25140: IN
25141: IFFALSE 25162
// points := [ 120 , 30 , 80 ] ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_INT 120
25150: PUSH
25151: LD_INT 30
25153: PUSH
25154: LD_INT 80
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25162: LD_VAR 0 6
25166: PPUSH
25167: CALL_OW 264
25171: PUSH
25172: LD_INT 22
25174: PUSH
25175: EMPTY
25176: LIST
25177: IN
25178: IFFALSE 25199
// points := [ 40 , 1 , 1 ] ;
25180: LD_ADDR_VAR 0 9
25184: PUSH
25185: LD_INT 40
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25199: LD_VAR 0 6
25203: PPUSH
25204: CALL_OW 264
25208: PUSH
25209: LD_INT 29
25211: PUSH
25212: EMPTY
25213: LIST
25214: IN
25215: IFFALSE 25236
// points := [ 70 , 200 , 400 ] ;
25217: LD_ADDR_VAR 0 9
25221: PUSH
25222: LD_INT 70
25224: PUSH
25225: LD_INT 200
25227: PUSH
25228: LD_INT 400
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25236: LD_VAR 0 6
25240: PPUSH
25241: CALL_OW 264
25245: PUSH
25246: LD_INT 14
25248: PUSH
25249: LD_INT 53
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: IN
25256: IFFALSE 25277
// points := [ 40 , 10 , 20 ] ;
25258: LD_ADDR_VAR 0 9
25262: PUSH
25263: LD_INT 40
25265: PUSH
25266: LD_INT 10
25268: PUSH
25269: LD_INT 20
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25277: LD_VAR 0 6
25281: PPUSH
25282: CALL_OW 264
25286: PUSH
25287: LD_INT 9
25289: PUSH
25290: EMPTY
25291: LIST
25292: IN
25293: IFFALSE 25314
// points := [ 5 , 70 , 20 ] ;
25295: LD_ADDR_VAR 0 9
25299: PUSH
25300: LD_INT 5
25302: PUSH
25303: LD_INT 70
25305: PUSH
25306: LD_INT 20
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25314: LD_VAR 0 6
25318: PPUSH
25319: CALL_OW 264
25323: PUSH
25324: LD_INT 10
25326: PUSH
25327: EMPTY
25328: LIST
25329: IN
25330: IFFALSE 25351
// points := [ 35 , 110 , 70 ] ;
25332: LD_ADDR_VAR 0 9
25336: PUSH
25337: LD_INT 35
25339: PUSH
25340: LD_INT 110
25342: PUSH
25343: LD_INT 70
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25351: LD_VAR 0 6
25355: PPUSH
25356: CALL_OW 265
25360: PUSH
25361: LD_INT 25
25363: EQUAL
25364: IFFALSE 25385
// points := [ 80 , 65 , 100 ] ;
25366: LD_ADDR_VAR 0 9
25370: PUSH
25371: LD_INT 80
25373: PUSH
25374: LD_INT 65
25376: PUSH
25377: LD_INT 100
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25385: LD_VAR 0 6
25389: PPUSH
25390: CALL_OW 263
25394: PUSH
25395: LD_INT 1
25397: EQUAL
25398: IFFALSE 25433
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25400: LD_ADDR_VAR 0 10
25404: PUSH
25405: LD_VAR 0 10
25409: PUSH
25410: LD_VAR 0 6
25414: PPUSH
25415: CALL_OW 311
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: CALL_OW 259
25427: PUSH
25428: LD_INT 4
25430: MUL
25431: MUL
25432: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25433: LD_VAR 0 6
25437: PPUSH
25438: CALL_OW 263
25442: PUSH
25443: LD_INT 2
25445: EQUAL
25446: IFFALSE 25497
// begin j := IsControledBy ( i ) ;
25448: LD_ADDR_VAR 0 7
25452: PUSH
25453: LD_VAR 0 6
25457: PPUSH
25458: CALL_OW 312
25462: ST_TO_ADDR
// if j then
25463: LD_VAR 0 7
25467: IFFALSE 25497
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25469: LD_ADDR_VAR 0 10
25473: PUSH
25474: LD_VAR 0 10
25478: PUSH
25479: LD_VAR 0 7
25483: PPUSH
25484: LD_INT 3
25486: PPUSH
25487: CALL_OW 259
25491: PUSH
25492: LD_INT 3
25494: MUL
25495: MUL
25496: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25497: LD_VAR 0 6
25501: PPUSH
25502: CALL_OW 264
25506: PUSH
25507: LD_INT 5
25509: PUSH
25510: LD_INT 6
25512: PUSH
25513: LD_INT 46
25515: PUSH
25516: LD_INT 44
25518: PUSH
25519: LD_INT 47
25521: PUSH
25522: LD_INT 45
25524: PUSH
25525: LD_INT 28
25527: PUSH
25528: LD_INT 7
25530: PUSH
25531: LD_INT 27
25533: PUSH
25534: LD_INT 29
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: IN
25549: IFFALSE 25569
25551: PUSH
25552: LD_VAR 0 1
25556: PPUSH
25557: LD_INT 52
25559: PPUSH
25560: CALL_OW 321
25564: PUSH
25565: LD_INT 2
25567: EQUAL
25568: AND
25569: IFFALSE 25586
// bpoints := bpoints * 1.2 ;
25571: LD_ADDR_VAR 0 10
25575: PUSH
25576: LD_VAR 0 10
25580: PUSH
25581: LD_REAL  1.20000000000000E+0000
25584: MUL
25585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25586: LD_VAR 0 6
25590: PPUSH
25591: CALL_OW 264
25595: PUSH
25596: LD_INT 6
25598: PUSH
25599: LD_INT 46
25601: PUSH
25602: LD_INT 47
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: IN
25610: IFFALSE 25627
// bpoints := bpoints * 1.2 ;
25612: LD_ADDR_VAR 0 10
25616: PUSH
25617: LD_VAR 0 10
25621: PUSH
25622: LD_REAL  1.20000000000000E+0000
25625: MUL
25626: ST_TO_ADDR
// end ; unit_building :
25627: GO 25641
25629: LD_INT 3
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 25640
25637: POP
// ; end ;
25638: GO 25641
25640: POP
// for j = 1 to 3 do
25641: LD_ADDR_VAR 0 7
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_INT 3
25653: PUSH
25654: FOR_TO
25655: IFFALSE 25708
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25657: LD_ADDR_VAR 0 5
25661: PUSH
25662: LD_VAR 0 5
25666: PPUSH
25667: LD_VAR 0 7
25671: PPUSH
25672: LD_VAR 0 5
25676: PUSH
25677: LD_VAR 0 7
25681: ARRAY
25682: PUSH
25683: LD_VAR 0 9
25687: PUSH
25688: LD_VAR 0 7
25692: ARRAY
25693: PUSH
25694: LD_VAR 0 10
25698: MUL
25699: PLUS
25700: PPUSH
25701: CALL_OW 1
25705: ST_TO_ADDR
25706: GO 25654
25708: POP
25709: POP
// end ;
25710: GO 24183
25712: POP
25713: POP
// result := Replace ( result , 4 , tmp ) ;
25714: LD_ADDR_VAR 0 5
25718: PUSH
25719: LD_VAR 0 5
25723: PPUSH
25724: LD_INT 4
25726: PPUSH
25727: LD_VAR 0 8
25731: PPUSH
25732: CALL_OW 1
25736: ST_TO_ADDR
// end ;
25737: LD_VAR 0 5
25741: RET
// export function DangerAtRange ( unit , range ) ; begin
25742: LD_INT 0
25744: PPUSH
// if not unit then
25745: LD_VAR 0 1
25749: NOT
25750: IFFALSE 25754
// exit ;
25752: GO 25799
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 255
25768: PPUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 250
25778: PPUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 251
25788: PPUSH
25789: LD_VAR 0 2
25793: PPUSH
25794: CALL 24033 0 4
25798: ST_TO_ADDR
// end ;
25799: LD_VAR 0 3
25803: RET
// export function DangerInArea ( side , area ) ; begin
25804: LD_INT 0
25806: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25807: LD_ADDR_VAR 0 3
25811: PUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: LD_INT 81
25819: PUSH
25820: LD_VAR 0 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PPUSH
25829: CALL_OW 70
25833: ST_TO_ADDR
// end ;
25834: LD_VAR 0 3
25838: RET
// export function IsExtension ( b ) ; begin
25839: LD_INT 0
25841: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25842: LD_ADDR_VAR 0 2
25846: PUSH
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 23
25854: PUSH
25855: LD_INT 20
25857: PUSH
25858: LD_INT 22
25860: PUSH
25861: LD_INT 17
25863: PUSH
25864: LD_INT 24
25866: PUSH
25867: LD_INT 21
25869: PUSH
25870: LD_INT 19
25872: PUSH
25873: LD_INT 16
25875: PUSH
25876: LD_INT 25
25878: PUSH
25879: LD_INT 18
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: IN
25894: ST_TO_ADDR
// end ;
25895: LD_VAR 0 2
25899: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25900: LD_INT 0
25902: PPUSH
25903: PPUSH
25904: PPUSH
// result := [ ] ;
25905: LD_ADDR_VAR 0 4
25909: PUSH
25910: EMPTY
25911: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25912: LD_ADDR_VAR 0 5
25916: PUSH
25917: LD_VAR 0 2
25921: PPUSH
25922: LD_INT 21
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PPUSH
25932: CALL_OW 70
25936: ST_TO_ADDR
// if not tmp then
25937: LD_VAR 0 5
25941: NOT
25942: IFFALSE 25946
// exit ;
25944: GO 26010
// if checkLink then
25946: LD_VAR 0 3
25950: IFFALSE 26000
// begin for i in tmp do
25952: LD_ADDR_VAR 0 6
25956: PUSH
25957: LD_VAR 0 5
25961: PUSH
25962: FOR_IN
25963: IFFALSE 25998
// if GetBase ( i ) <> base then
25965: LD_VAR 0 6
25969: PPUSH
25970: CALL_OW 274
25974: PUSH
25975: LD_VAR 0 1
25979: NONEQUAL
25980: IFFALSE 25996
// ComLinkToBase ( base , i ) ;
25982: LD_VAR 0 1
25986: PPUSH
25987: LD_VAR 0 6
25991: PPUSH
25992: CALL_OW 169
25996: GO 25962
25998: POP
25999: POP
// end ; result := tmp ;
26000: LD_ADDR_VAR 0 4
26004: PUSH
26005: LD_VAR 0 5
26009: ST_TO_ADDR
// end ;
26010: LD_VAR 0 4
26014: RET
// export function ComComplete ( units , b ) ; var i ; begin
26015: LD_INT 0
26017: PPUSH
26018: PPUSH
// if not units then
26019: LD_VAR 0 1
26023: NOT
26024: IFFALSE 26028
// exit ;
26026: GO 26118
// for i in units do
26028: LD_ADDR_VAR 0 4
26032: PUSH
26033: LD_VAR 0 1
26037: PUSH
26038: FOR_IN
26039: IFFALSE 26116
// if BuildingStatus ( b ) = bs_build then
26041: LD_VAR 0 2
26045: PPUSH
26046: CALL_OW 461
26050: PUSH
26051: LD_INT 1
26053: EQUAL
26054: IFFALSE 26114
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
26056: LD_VAR 0 4
26060: PPUSH
26061: LD_STRING h
26063: PUSH
26064: LD_VAR 0 2
26068: PPUSH
26069: CALL_OW 250
26073: PUSH
26074: LD_VAR 0 2
26078: PPUSH
26079: CALL_OW 251
26083: PUSH
26084: LD_VAR 0 2
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: PPUSH
26110: CALL_OW 446
26114: GO 26038
26116: POP
26117: POP
// end ;
26118: LD_VAR 0 3
26122: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26123: LD_INT 0
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
26131: LD_VAR 0 1
26135: NOT
26136: IFTRUE 26153
26138: PUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 263
26148: PUSH
26149: LD_INT 2
26151: NONEQUAL
26152: OR
26153: IFFALSE 26157
// exit ;
26155: GO 26473
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26157: LD_ADDR_VAR 0 6
26161: PUSH
26162: LD_INT 22
26164: PUSH
26165: LD_VAR 0 1
26169: PPUSH
26170: CALL_OW 255
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 30
26184: PUSH
26185: LD_INT 36
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 34
26194: PUSH
26195: LD_INT 31
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 6
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26473
// result := [ ] ;
26225: LD_ADDR_VAR 0 2
26229: PUSH
26230: EMPTY
26231: ST_TO_ADDR
// for i in tmp do
26232: LD_ADDR_VAR 0 3
26236: PUSH
26237: LD_VAR 0 6
26241: PUSH
26242: FOR_IN
26243: IFFALSE 26314
// begin t := UnitsInside ( i ) ;
26245: LD_ADDR_VAR 0 4
26249: PUSH
26250: LD_VAR 0 3
26254: PPUSH
26255: CALL_OW 313
26259: ST_TO_ADDR
// if t then
26260: LD_VAR 0 4
26264: IFFALSE 26312
// for j in t do
26266: LD_ADDR_VAR 0 7
26270: PUSH
26271: LD_VAR 0 4
26275: PUSH
26276: FOR_IN
26277: IFFALSE 26310
// result := Replace ( result , result + 1 , j ) ;
26279: LD_ADDR_VAR 0 2
26283: PUSH
26284: LD_VAR 0 2
26288: PPUSH
26289: LD_VAR 0 2
26293: PUSH
26294: LD_INT 1
26296: PLUS
26297: PPUSH
26298: LD_VAR 0 7
26302: PPUSH
26303: CALL_OW 1
26307: ST_TO_ADDR
26308: GO 26276
26310: POP
26311: POP
// end ;
26312: GO 26242
26314: POP
26315: POP
// if not result then
26316: LD_VAR 0 2
26320: NOT
26321: IFFALSE 26325
// exit ;
26323: GO 26473
// mech := result [ 1 ] ;
26325: LD_ADDR_VAR 0 5
26329: PUSH
26330: LD_VAR 0 2
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: ST_TO_ADDR
// if result > 1 then
26339: LD_VAR 0 2
26343: PUSH
26344: LD_INT 1
26346: GREATER
26347: IFFALSE 26459
// begin for i = 2 to result do
26349: LD_ADDR_VAR 0 3
26353: PUSH
26354: DOUBLE
26355: LD_INT 2
26357: DEC
26358: ST_TO_ADDR
26359: LD_VAR 0 2
26363: PUSH
26364: FOR_TO
26365: IFFALSE 26457
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26367: LD_ADDR_VAR 0 4
26371: PUSH
26372: LD_VAR 0 2
26376: PUSH
26377: LD_VAR 0 3
26381: ARRAY
26382: PPUSH
26383: LD_INT 3
26385: PPUSH
26386: CALL_OW 259
26390: PUSH
26391: LD_VAR 0 2
26395: PUSH
26396: LD_VAR 0 3
26400: ARRAY
26401: PPUSH
26402: CALL_OW 432
26406: MINUS
26407: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26408: LD_VAR 0 4
26412: PUSH
26413: LD_VAR 0 5
26417: PPUSH
26418: LD_INT 3
26420: PPUSH
26421: CALL_OW 259
26425: PUSH
26426: LD_VAR 0 5
26430: PPUSH
26431: CALL_OW 432
26435: MINUS
26436: GREATEREQUAL
26437: IFFALSE 26455
// mech := result [ i ] ;
26439: LD_ADDR_VAR 0 5
26443: PUSH
26444: LD_VAR 0 2
26448: PUSH
26449: LD_VAR 0 3
26453: ARRAY
26454: ST_TO_ADDR
// end ;
26455: GO 26364
26457: POP
26458: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26459: LD_VAR 0 1
26463: PPUSH
26464: LD_VAR 0 5
26468: PPUSH
26469: CALL_OW 135
// end ;
26473: LD_VAR 0 2
26477: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26478: LD_INT 0
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
// result := [ ] ;
26493: LD_ADDR_VAR 0 7
26497: PUSH
26498: EMPTY
26499: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 266
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: IN
26520: NOT
26521: IFFALSE 26525
// exit ;
26523: GO 28165
// if name then
26525: LD_VAR 0 3
26529: IFFALSE 26545
// SetBName ( base_dep , name ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_VAR 0 3
26540: PPUSH
26541: CALL_OW 500
// base := GetBase ( base_dep ) ;
26545: LD_ADDR_VAR 0 15
26549: PUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 274
26559: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26560: LD_ADDR_VAR 0 16
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 255
26574: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26575: LD_ADDR_VAR 0 17
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 248
26589: ST_TO_ADDR
// if sources then
26590: LD_VAR 0 5
26594: IFFALSE 26641
// for i = 1 to 3 do
26596: LD_ADDR_VAR 0 8
26600: PUSH
26601: DOUBLE
26602: LD_INT 1
26604: DEC
26605: ST_TO_ADDR
26606: LD_INT 3
26608: PUSH
26609: FOR_TO
26610: IFFALSE 26639
// AddResourceType ( base , i , sources [ i ] ) ;
26612: LD_VAR 0 15
26616: PPUSH
26617: LD_VAR 0 8
26621: PPUSH
26622: LD_VAR 0 5
26626: PUSH
26627: LD_VAR 0 8
26631: ARRAY
26632: PPUSH
26633: CALL_OW 276
26637: GO 26609
26639: POP
26640: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26641: LD_ADDR_VAR 0 18
26645: PUSH
26646: LD_VAR 0 15
26650: PPUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: LD_INT 1
26658: PPUSH
26659: CALL 25900 0 3
26663: ST_TO_ADDR
// InitHc ;
26664: CALL_OW 19
// InitUc ;
26668: CALL_OW 18
// uc_side := side ;
26672: LD_ADDR_OWVAR 20
26676: PUSH
26677: LD_VAR 0 16
26681: ST_TO_ADDR
// uc_nation := nation ;
26682: LD_ADDR_OWVAR 21
26686: PUSH
26687: LD_VAR 0 17
26691: ST_TO_ADDR
// if buildings then
26692: LD_VAR 0 18
26696: IFFALSE 28024
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26698: LD_ADDR_VAR 0 19
26702: PUSH
26703: LD_VAR 0 18
26707: PPUSH
26708: LD_INT 2
26710: PUSH
26711: LD_INT 30
26713: PUSH
26714: LD_INT 29
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 30
26723: PUSH
26724: LD_INT 30
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: PPUSH
26736: CALL_OW 72
26740: ST_TO_ADDR
// if tmp then
26741: LD_VAR 0 19
26745: IFFALSE 26793
// for i in tmp do
26747: LD_ADDR_VAR 0 8
26751: PUSH
26752: LD_VAR 0 19
26756: PUSH
26757: FOR_IN
26758: IFFALSE 26791
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26760: LD_VAR 0 8
26764: PPUSH
26765: CALL_OW 250
26769: PPUSH
26770: LD_VAR 0 8
26774: PPUSH
26775: CALL_OW 251
26779: PPUSH
26780: LD_VAR 0 16
26784: PPUSH
26785: CALL_OW 441
26789: GO 26757
26791: POP
26792: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26793: LD_VAR 0 18
26797: PPUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: LD_INT 32
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 30
26813: PUSH
26814: LD_INT 33
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: PPUSH
26826: CALL_OW 72
26830: IFFALSE 26918
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26832: LD_ADDR_VAR 0 8
26836: PUSH
26837: LD_VAR 0 18
26841: PPUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 30
26847: PUSH
26848: LD_INT 32
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 30
26857: PUSH
26858: LD_INT 33
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: PPUSH
26870: CALL_OW 72
26874: PUSH
26875: FOR_IN
26876: IFFALSE 26916
// begin if not GetBWeapon ( i ) then
26878: LD_VAR 0 8
26882: PPUSH
26883: CALL_OW 269
26887: NOT
26888: IFFALSE 26914
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26890: LD_VAR 0 8
26894: PPUSH
26895: LD_VAR 0 8
26899: PPUSH
26900: LD_VAR 0 2
26904: PPUSH
26905: CALL 28170 0 2
26909: PPUSH
26910: CALL_OW 431
// end ;
26914: GO 26875
26916: POP
26917: POP
// end ; for i = 1 to personel do
26918: LD_ADDR_VAR 0 8
26922: PUSH
26923: DOUBLE
26924: LD_INT 1
26926: DEC
26927: ST_TO_ADDR
26928: LD_VAR 0 6
26932: PUSH
26933: FOR_TO
26934: IFFALSE 28004
// begin if i > 4 then
26936: LD_VAR 0 8
26940: PUSH
26941: LD_INT 4
26943: GREATER
26944: IFFALSE 26948
// break ;
26946: GO 28004
// case i of 1 :
26948: LD_VAR 0 8
26952: PUSH
26953: LD_INT 1
26955: DOUBLE
26956: EQUAL
26957: IFTRUE 26961
26959: GO 27041
26961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26962: LD_ADDR_VAR 0 12
26966: PUSH
26967: LD_VAR 0 18
26971: PPUSH
26972: LD_INT 22
26974: PUSH
26975: LD_VAR 0 16
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 58
26986: PUSH
26987: EMPTY
26988: LIST
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 32
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 30
27005: PUSH
27006: LD_INT 4
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 30
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 72
27038: ST_TO_ADDR
27039: GO 27263
27041: LD_INT 2
27043: DOUBLE
27044: EQUAL
27045: IFTRUE 27049
27047: GO 27111
27049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
27050: LD_ADDR_VAR 0 12
27054: PUSH
27055: LD_VAR 0 18
27059: PPUSH
27060: LD_INT 22
27062: PUSH
27063: LD_VAR 0 16
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 30
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 30
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 72
27108: ST_TO_ADDR
27109: GO 27263
27111: LD_INT 3
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27119
27117: GO 27181
27119: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27120: LD_ADDR_VAR 0 12
27124: PUSH
27125: LD_VAR 0 18
27129: PPUSH
27130: LD_INT 22
27132: PUSH
27133: LD_VAR 0 16
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 30
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 30
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PPUSH
27174: CALL_OW 72
27178: ST_TO_ADDR
27179: GO 27263
27181: LD_INT 4
27183: DOUBLE
27184: EQUAL
27185: IFTRUE 27189
27187: GO 27262
27189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27190: LD_ADDR_VAR 0 12
27194: PUSH
27195: LD_VAR 0 18
27199: PPUSH
27200: LD_INT 22
27202: PUSH
27203: LD_VAR 0 16
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 30
27217: PUSH
27218: LD_INT 6
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 30
27227: PUSH
27228: LD_INT 7
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 30
27237: PUSH
27238: LD_INT 8
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PPUSH
27255: CALL_OW 72
27259: ST_TO_ADDR
27260: GO 27263
27262: POP
// if i = 1 then
27263: LD_VAR 0 8
27267: PUSH
27268: LD_INT 1
27270: EQUAL
27271: IFFALSE 27382
// begin tmp := [ ] ;
27273: LD_ADDR_VAR 0 19
27277: PUSH
27278: EMPTY
27279: ST_TO_ADDR
// for j in f do
27280: LD_ADDR_VAR 0 9
27284: PUSH
27285: LD_VAR 0 12
27289: PUSH
27290: FOR_IN
27291: IFFALSE 27364
// if GetBType ( j ) = b_bunker then
27293: LD_VAR 0 9
27297: PPUSH
27298: CALL_OW 266
27302: PUSH
27303: LD_INT 32
27305: EQUAL
27306: IFFALSE 27333
// tmp := Insert ( tmp , 1 , j ) else
27308: LD_ADDR_VAR 0 19
27312: PUSH
27313: LD_VAR 0 19
27317: PPUSH
27318: LD_INT 1
27320: PPUSH
27321: LD_VAR 0 9
27325: PPUSH
27326: CALL_OW 2
27330: ST_TO_ADDR
27331: GO 27362
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27333: LD_ADDR_VAR 0 19
27337: PUSH
27338: LD_VAR 0 19
27342: PPUSH
27343: LD_VAR 0 19
27347: PUSH
27348: LD_INT 1
27350: PLUS
27351: PPUSH
27352: LD_VAR 0 9
27356: PPUSH
27357: CALL_OW 2
27361: ST_TO_ADDR
27362: GO 27290
27364: POP
27365: POP
// if tmp then
27366: LD_VAR 0 19
27370: IFFALSE 27382
// f := tmp ;
27372: LD_ADDR_VAR 0 12
27376: PUSH
27377: LD_VAR 0 19
27381: ST_TO_ADDR
// end ; x := personel [ i ] ;
27382: LD_ADDR_VAR 0 13
27386: PUSH
27387: LD_VAR 0 6
27391: PUSH
27392: LD_VAR 0 8
27396: ARRAY
27397: ST_TO_ADDR
// if x = - 1 then
27398: LD_VAR 0 13
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: EQUAL
27407: IFFALSE 27618
// begin for j in f do
27409: LD_ADDR_VAR 0 9
27413: PUSH
27414: LD_VAR 0 12
27418: PUSH
27419: FOR_IN
27420: IFFALSE 27614
// repeat InitHc ;
27422: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27426: LD_VAR 0 9
27430: PPUSH
27431: CALL_OW 266
27435: PUSH
27436: LD_INT 5
27438: EQUAL
27439: IFFALSE 27509
// begin if UnitsInside ( j ) < 3 then
27441: LD_VAR 0 9
27445: PPUSH
27446: CALL_OW 313
27450: PUSH
27451: LD_INT 3
27453: LESS
27454: IFFALSE 27490
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27456: LD_INT 0
27458: PPUSH
27459: LD_INT 5
27461: PUSH
27462: LD_INT 8
27464: PUSH
27465: LD_INT 9
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: PUSH
27473: LD_VAR 0 17
27477: ARRAY
27478: PPUSH
27479: LD_VAR 0 4
27483: PPUSH
27484: CALL_OW 380
27488: GO 27507
// PrepareHuman ( false , i , skill ) ;
27490: LD_INT 0
27492: PPUSH
27493: LD_VAR 0 8
27497: PPUSH
27498: LD_VAR 0 4
27502: PPUSH
27503: CALL_OW 380
// end else
27507: GO 27526
// PrepareHuman ( false , i , skill ) ;
27509: LD_INT 0
27511: PPUSH
27512: LD_VAR 0 8
27516: PPUSH
27517: LD_VAR 0 4
27521: PPUSH
27522: CALL_OW 380
// un := CreateHuman ;
27526: LD_ADDR_VAR 0 14
27530: PUSH
27531: CALL_OW 44
27535: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27536: LD_ADDR_VAR 0 7
27540: PUSH
27541: LD_VAR 0 7
27545: PPUSH
27546: LD_INT 1
27548: PPUSH
27549: LD_VAR 0 14
27553: PPUSH
27554: CALL_OW 2
27558: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27559: LD_VAR 0 14
27563: PPUSH
27564: LD_VAR 0 9
27568: PPUSH
27569: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27573: LD_VAR 0 9
27577: PPUSH
27578: CALL_OW 313
27582: PUSH
27583: LD_INT 6
27585: EQUAL
27586: IFTRUE 27610
27588: PUSH
27589: LD_VAR 0 9
27593: PPUSH
27594: CALL_OW 266
27598: PUSH
27599: LD_INT 32
27601: PUSH
27602: LD_INT 31
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: IN
27609: OR
27610: IFFALSE 27422
27612: GO 27419
27614: POP
27615: POP
// end else
27616: GO 28002
// for j = 1 to x do
27618: LD_ADDR_VAR 0 9
27622: PUSH
27623: DOUBLE
27624: LD_INT 1
27626: DEC
27627: ST_TO_ADDR
27628: LD_VAR 0 13
27632: PUSH
27633: FOR_TO
27634: IFFALSE 28000
// begin InitHc ;
27636: CALL_OW 19
// if not f then
27640: LD_VAR 0 12
27644: NOT
27645: IFFALSE 27734
// begin PrepareHuman ( false , i , skill ) ;
27647: LD_INT 0
27649: PPUSH
27650: LD_VAR 0 8
27654: PPUSH
27655: LD_VAR 0 4
27659: PPUSH
27660: CALL_OW 380
// un := CreateHuman ;
27664: LD_ADDR_VAR 0 14
27668: PUSH
27669: CALL_OW 44
27673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27674: LD_ADDR_VAR 0 7
27678: PUSH
27679: LD_VAR 0 7
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: LD_VAR 0 14
27691: PPUSH
27692: CALL_OW 2
27696: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27697: LD_VAR 0 14
27701: PPUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 250
27711: PPUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL_OW 251
27721: PPUSH
27722: LD_INT 10
27724: PPUSH
27725: LD_INT 0
27727: PPUSH
27728: CALL_OW 50
// continue ;
27732: GO 27633
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27734: LD_VAR 0 12
27738: PUSH
27739: LD_INT 1
27741: ARRAY
27742: PPUSH
27743: CALL_OW 313
27747: IFFALSE 27775
27749: PUSH
27750: LD_VAR 0 12
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: CALL_OW 266
27763: PUSH
27764: LD_INT 32
27766: PUSH
27767: LD_INT 31
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: IN
27774: AND
27775: IFTRUE 27796
27777: PUSH
27778: LD_VAR 0 12
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PPUSH
27787: CALL_OW 313
27791: PUSH
27792: LD_INT 6
27794: EQUAL
27795: OR
27796: IFFALSE 27816
// f := Delete ( f , 1 ) ;
27798: LD_ADDR_VAR 0 12
27802: PUSH
27803: LD_VAR 0 12
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: CALL_OW 3
27815: ST_TO_ADDR
// if not f then
27816: LD_VAR 0 12
27820: NOT
27821: IFFALSE 27839
// begin x := x + 2 ;
27823: LD_ADDR_VAR 0 13
27827: PUSH
27828: LD_VAR 0 13
27832: PUSH
27833: LD_INT 2
27835: PLUS
27836: ST_TO_ADDR
// continue ;
27837: GO 27633
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27839: LD_VAR 0 12
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: PPUSH
27848: CALL_OW 266
27852: PUSH
27853: LD_INT 5
27855: EQUAL
27856: IFFALSE 27930
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27858: LD_VAR 0 12
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: CALL_OW 313
27871: PUSH
27872: LD_INT 3
27874: LESS
27875: IFFALSE 27911
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27877: LD_INT 0
27879: PPUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 8
27885: PUSH
27886: LD_INT 9
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: PUSH
27894: LD_VAR 0 17
27898: ARRAY
27899: PPUSH
27900: LD_VAR 0 4
27904: PPUSH
27905: CALL_OW 380
27909: GO 27928
// PrepareHuman ( false , i , skill ) ;
27911: LD_INT 0
27913: PPUSH
27914: LD_VAR 0 8
27918: PPUSH
27919: LD_VAR 0 4
27923: PPUSH
27924: CALL_OW 380
// end else
27928: GO 27947
// PrepareHuman ( false , i , skill ) ;
27930: LD_INT 0
27932: PPUSH
27933: LD_VAR 0 8
27937: PPUSH
27938: LD_VAR 0 4
27942: PPUSH
27943: CALL_OW 380
// un := CreateHuman ;
27947: LD_ADDR_VAR 0 14
27951: PUSH
27952: CALL_OW 44
27956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27957: LD_ADDR_VAR 0 7
27961: PUSH
27962: LD_VAR 0 7
27966: PPUSH
27967: LD_INT 1
27969: PPUSH
27970: LD_VAR 0 14
27974: PPUSH
27975: CALL_OW 2
27979: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27980: LD_VAR 0 14
27984: PPUSH
27985: LD_VAR 0 12
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: PPUSH
27994: CALL_OW 52
// end ;
27998: GO 27633
28000: POP
28001: POP
// end ;
28002: GO 26933
28004: POP
28005: POP
// result := result ^ buildings ;
28006: LD_ADDR_VAR 0 7
28010: PUSH
28011: LD_VAR 0 7
28015: PUSH
28016: LD_VAR 0 18
28020: ADD
28021: ST_TO_ADDR
// end else
28022: GO 28165
// begin for i = 1 to personel do
28024: LD_ADDR_VAR 0 8
28028: PUSH
28029: DOUBLE
28030: LD_INT 1
28032: DEC
28033: ST_TO_ADDR
28034: LD_VAR 0 6
28038: PUSH
28039: FOR_TO
28040: IFFALSE 28163
// begin if i > 4 then
28042: LD_VAR 0 8
28046: PUSH
28047: LD_INT 4
28049: GREATER
28050: IFFALSE 28054
// break ;
28052: GO 28163
// x := personel [ i ] ;
28054: LD_ADDR_VAR 0 13
28058: PUSH
28059: LD_VAR 0 6
28063: PUSH
28064: LD_VAR 0 8
28068: ARRAY
28069: ST_TO_ADDR
// if x = - 1 then
28070: LD_VAR 0 13
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: EQUAL
28079: IFFALSE 28083
// continue ;
28081: GO 28039
// PrepareHuman ( false , i , skill ) ;
28083: LD_INT 0
28085: PPUSH
28086: LD_VAR 0 8
28090: PPUSH
28091: LD_VAR 0 4
28095: PPUSH
28096: CALL_OW 380
// un := CreateHuman ;
28100: LD_ADDR_VAR 0 14
28104: PUSH
28105: CALL_OW 44
28109: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28110: LD_VAR 0 14
28114: PPUSH
28115: LD_VAR 0 1
28119: PPUSH
28120: CALL_OW 250
28124: PPUSH
28125: LD_VAR 0 1
28129: PPUSH
28130: CALL_OW 251
28134: PPUSH
28135: LD_INT 10
28137: PPUSH
28138: LD_INT 0
28140: PPUSH
28141: CALL_OW 50
// result := result ^ un ;
28145: LD_ADDR_VAR 0 7
28149: PUSH
28150: LD_VAR 0 7
28154: PUSH
28155: LD_VAR 0 14
28159: ADD
28160: ST_TO_ADDR
// end ;
28161: GO 28039
28163: POP
28164: POP
// end ; end ;
28165: LD_VAR 0 7
28169: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28170: LD_INT 0
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
// result := false ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 0
28195: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28196: LD_VAR 0 1
28200: NOT
28201: IFTRUE 28226
28203: PUSH
28204: LD_VAR 0 1
28208: PPUSH
28209: CALL_OW 266
28213: PUSH
28214: LD_INT 32
28216: PUSH
28217: LD_INT 33
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: IN
28224: NOT
28225: OR
28226: IFFALSE 28230
// exit ;
28228: GO 29365
// nat := GetNation ( tower ) ;
28230: LD_ADDR_VAR 0 12
28234: PUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: CALL_OW 248
28244: ST_TO_ADDR
// side := GetSide ( tower ) ;
28245: LD_ADDR_VAR 0 16
28249: PUSH
28250: LD_VAR 0 1
28254: PPUSH
28255: CALL_OW 255
28259: ST_TO_ADDR
// x := GetX ( tower ) ;
28260: LD_ADDR_VAR 0 10
28264: PUSH
28265: LD_VAR 0 1
28269: PPUSH
28270: CALL_OW 250
28274: ST_TO_ADDR
// y := GetY ( tower ) ;
28275: LD_ADDR_VAR 0 11
28279: PUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL_OW 251
28289: ST_TO_ADDR
// if not x or not y then
28290: LD_VAR 0 10
28294: NOT
28295: IFTRUE 28304
28297: PUSH
28298: LD_VAR 0 11
28302: NOT
28303: OR
28304: IFFALSE 28308
// exit ;
28306: GO 29365
// weapon := 0 ;
28308: LD_ADDR_VAR 0 18
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// fac_list := [ ] ;
28316: LD_ADDR_VAR 0 17
28320: PUSH
28321: EMPTY
28322: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28323: LD_ADDR_VAR 0 6
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 274
28337: PPUSH
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_INT 0
28345: PPUSH
28346: CALL 25900 0 3
28350: PPUSH
28351: LD_INT 30
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 72
28365: ST_TO_ADDR
// if not factories then
28366: LD_VAR 0 6
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 29365
// for i in factories do
28375: LD_ADDR_VAR 0 8
28379: PUSH
28380: LD_VAR 0 6
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28411
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28388: LD_ADDR_VAR 0 17
28392: PUSH
28393: LD_VAR 0 17
28397: PUSH
28398: LD_VAR 0 8
28402: PPUSH
28403: CALL_OW 478
28407: UNION
28408: ST_TO_ADDR
28409: GO 28385
28411: POP
28412: POP
// if not fac_list then
28413: LD_VAR 0 17
28417: NOT
28418: IFFALSE 28422
// exit ;
28420: GO 29365
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: LD_INT 5
28432: PUSH
28433: LD_INT 9
28435: PUSH
28436: LD_INT 10
28438: PUSH
28439: LD_INT 6
28441: PUSH
28442: LD_INT 7
28444: PUSH
28445: LD_INT 11
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 27
28459: PUSH
28460: LD_INT 28
28462: PUSH
28463: LD_INT 26
28465: PUSH
28466: LD_INT 30
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 43
28477: PUSH
28478: LD_INT 44
28480: PUSH
28481: LD_INT 46
28483: PUSH
28484: LD_INT 45
28486: PUSH
28487: LD_INT 47
28489: PUSH
28490: LD_INT 49
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: PUSH
28506: LD_VAR 0 12
28510: ARRAY
28511: ST_TO_ADDR
// list := list isect fac_list ;
28512: LD_ADDR_VAR 0 5
28516: PUSH
28517: LD_VAR 0 5
28521: PUSH
28522: LD_VAR 0 17
28526: ISECT
28527: ST_TO_ADDR
// if not list then
28528: LD_VAR 0 5
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 29365
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28537: LD_VAR 0 12
28541: PUSH
28542: LD_INT 3
28544: EQUAL
28545: IFFALSE 28557
28547: PUSH
28548: LD_INT 49
28550: PUSH
28551: LD_VAR 0 5
28555: IN
28556: AND
28557: IFFALSE 28577
28559: PUSH
28560: LD_INT 31
28562: PPUSH
28563: LD_VAR 0 16
28567: PPUSH
28568: CALL_OW 321
28572: PUSH
28573: LD_INT 2
28575: EQUAL
28576: AND
28577: IFFALSE 28637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28579: LD_INT 22
28581: PUSH
28582: LD_VAR 0 16
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 35
28593: PUSH
28594: LD_INT 49
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 91
28603: PUSH
28604: LD_VAR 0 1
28608: PUSH
28609: LD_INT 10
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: PPUSH
28622: CALL_OW 69
28626: NOT
28627: IFFALSE 28637
// weapon := ru_time_lapser ;
28629: LD_ADDR_VAR 0 18
28633: PUSH
28634: LD_INT 49
28636: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28637: LD_VAR 0 12
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: IN
28652: IFFALSE 28676
28654: PUSH
28655: LD_INT 11
28657: PUSH
28658: LD_VAR 0 5
28662: IN
28663: IFTRUE 28675
28665: PUSH
28666: LD_INT 30
28668: PUSH
28669: LD_VAR 0 5
28673: IN
28674: OR
28675: AND
28676: IFFALSE 28696
28678: PUSH
28679: LD_INT 6
28681: PPUSH
28682: LD_VAR 0 16
28686: PPUSH
28687: CALL_OW 321
28691: PUSH
28692: LD_INT 2
28694: EQUAL
28695: AND
28696: IFFALSE 28863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28698: LD_INT 22
28700: PUSH
28701: LD_VAR 0 16
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 35
28715: PUSH
28716: LD_INT 11
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 35
28725: PUSH
28726: LD_INT 30
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 91
28740: PUSH
28741: LD_VAR 0 1
28745: PUSH
28746: LD_INT 18
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: NOT
28764: IFFALSE 28840
28766: PUSH
28767: LD_INT 22
28769: PUSH
28770: LD_VAR 0 16
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 30
28784: PUSH
28785: LD_INT 32
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 30
28794: PUSH
28795: LD_INT 33
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 91
28809: PUSH
28810: LD_VAR 0 1
28814: PUSH
28815: LD_INT 12
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: PPUSH
28831: CALL_OW 69
28835: PUSH
28836: LD_INT 2
28838: GREATER
28839: AND
28840: IFFALSE 28863
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28842: LD_ADDR_VAR 0 18
28846: PUSH
28847: LD_INT 11
28849: PUSH
28850: LD_INT 30
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_VAR 0 12
28861: ARRAY
28862: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28863: LD_VAR 0 18
28867: NOT
28868: IFFALSE 28888
28870: PUSH
28871: LD_INT 40
28873: PPUSH
28874: LD_VAR 0 16
28878: PPUSH
28879: CALL_OW 321
28883: PUSH
28884: LD_INT 2
28886: EQUAL
28887: AND
28888: IFFALSE 28924
28890: PUSH
28891: LD_INT 7
28893: PUSH
28894: LD_VAR 0 5
28898: IN
28899: IFTRUE 28911
28901: PUSH
28902: LD_INT 28
28904: PUSH
28905: LD_VAR 0 5
28909: IN
28910: OR
28911: IFTRUE 28923
28913: PUSH
28914: LD_INT 45
28916: PUSH
28917: LD_VAR 0 5
28921: IN
28922: OR
28923: AND
28924: IFFALSE 29178
// begin hex := GetHexInfo ( x , y ) ;
28926: LD_ADDR_VAR 0 4
28930: PUSH
28931: LD_VAR 0 10
28935: PPUSH
28936: LD_VAR 0 11
28940: PPUSH
28941: CALL_OW 546
28945: ST_TO_ADDR
// if hex [ 1 ] then
28946: LD_VAR 0 4
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: IFFALSE 28958
// exit ;
28956: GO 29365
// height := hex [ 2 ] ;
28958: LD_ADDR_VAR 0 15
28962: PUSH
28963: LD_VAR 0 4
28967: PUSH
28968: LD_INT 2
28970: ARRAY
28971: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28972: LD_ADDR_VAR 0 14
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: LD_INT 5
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// for i in tmp do
28995: LD_ADDR_VAR 0 8
28999: PUSH
29000: LD_VAR 0 14
29004: PUSH
29005: FOR_IN
29006: IFFALSE 29176
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29008: LD_ADDR_VAR 0 9
29012: PUSH
29013: LD_VAR 0 10
29017: PPUSH
29018: LD_VAR 0 8
29022: PPUSH
29023: LD_INT 5
29025: PPUSH
29026: CALL_OW 272
29030: PUSH
29031: LD_VAR 0 11
29035: PPUSH
29036: LD_VAR 0 8
29040: PPUSH
29041: LD_INT 5
29043: PPUSH
29044: CALL_OW 273
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29053: LD_VAR 0 9
29057: PUSH
29058: LD_INT 1
29060: ARRAY
29061: PPUSH
29062: LD_VAR 0 9
29066: PUSH
29067: LD_INT 2
29069: ARRAY
29070: PPUSH
29071: CALL_OW 488
29075: IFFALSE 29174
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: LD_VAR 0 9
29086: PUSH
29087: LD_INT 1
29089: ARRAY
29090: PPUSH
29091: LD_VAR 0 9
29095: PUSH
29096: LD_INT 2
29098: ARRAY
29099: PPUSH
29100: CALL_OW 546
29104: ST_TO_ADDR
// if hex [ 1 ] then
29105: LD_VAR 0 4
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: IFFALSE 29117
// continue ;
29115: GO 29005
// h := hex [ 2 ] ;
29117: LD_ADDR_VAR 0 13
29121: PUSH
29122: LD_VAR 0 4
29126: PUSH
29127: LD_INT 2
29129: ARRAY
29130: ST_TO_ADDR
// if h + 7 < height then
29131: LD_VAR 0 13
29135: PUSH
29136: LD_INT 7
29138: PLUS
29139: PUSH
29140: LD_VAR 0 15
29144: LESS
29145: IFFALSE 29174
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29147: LD_ADDR_VAR 0 18
29151: PUSH
29152: LD_INT 7
29154: PUSH
29155: LD_INT 28
29157: PUSH
29158: LD_INT 45
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: PUSH
29166: LD_VAR 0 12
29170: ARRAY
29171: ST_TO_ADDR
// break ;
29172: GO 29176
// end ; end ; end ;
29174: GO 29005
29176: POP
29177: POP
// end ; if not weapon then
29178: LD_VAR 0 18
29182: NOT
29183: IFFALSE 29243
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29185: LD_ADDR_VAR 0 5
29189: PUSH
29190: LD_VAR 0 5
29194: PUSH
29195: LD_INT 11
29197: PUSH
29198: LD_INT 30
29200: PUSH
29201: LD_INT 49
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: DIFF
29209: ST_TO_ADDR
// if not list then
29210: LD_VAR 0 5
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29365
// weapon := list [ rand ( 1 , list ) ] ;
29219: LD_ADDR_VAR 0 18
29223: PUSH
29224: LD_VAR 0 5
29228: PUSH
29229: LD_INT 1
29231: PPUSH
29232: LD_VAR 0 5
29236: PPUSH
29237: CALL_OW 12
29241: ARRAY
29242: ST_TO_ADDR
// end ; if weapon then
29243: LD_VAR 0 18
29247: IFFALSE 29365
// begin tmp := CostOfWeapon ( weapon ) ;
29249: LD_ADDR_VAR 0 14
29253: PUSH
29254: LD_VAR 0 18
29258: PPUSH
29259: CALL_OW 451
29263: ST_TO_ADDR
// j := GetBase ( tower ) ;
29264: LD_ADDR_VAR 0 9
29268: PUSH
29269: LD_VAR 0 1
29273: PPUSH
29274: CALL_OW 274
29278: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29279: LD_VAR 0 9
29283: PPUSH
29284: LD_INT 1
29286: PPUSH
29287: CALL_OW 275
29291: PUSH
29292: LD_VAR 0 14
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: GREATEREQUAL
29301: IFFALSE 29327
29303: PUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_INT 2
29311: PPUSH
29312: CALL_OW 275
29316: PUSH
29317: LD_VAR 0 14
29321: PUSH
29322: LD_INT 2
29324: ARRAY
29325: GREATEREQUAL
29326: AND
29327: IFFALSE 29353
29329: PUSH
29330: LD_VAR 0 9
29334: PPUSH
29335: LD_INT 3
29337: PPUSH
29338: CALL_OW 275
29342: PUSH
29343: LD_VAR 0 14
29347: PUSH
29348: LD_INT 3
29350: ARRAY
29351: GREATEREQUAL
29352: AND
29353: IFFALSE 29365
// result := weapon ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_VAR 0 18
29364: ST_TO_ADDR
// end ; end ;
29365: LD_VAR 0 3
29369: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29370: LD_INT 0
29372: PPUSH
29373: PPUSH
// result := true ;
29374: LD_ADDR_VAR 0 3
29378: PUSH
29379: LD_INT 1
29381: ST_TO_ADDR
// if array1 = array2 then
29382: LD_VAR 0 1
29386: PUSH
29387: LD_VAR 0 2
29391: EQUAL
29392: IFFALSE 29452
// begin for i = 1 to array1 do
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: DOUBLE
29400: LD_INT 1
29402: DEC
29403: ST_TO_ADDR
29404: LD_VAR 0 1
29408: PUSH
29409: FOR_TO
29410: IFFALSE 29448
// if array1 [ i ] <> array2 [ i ] then
29412: LD_VAR 0 1
29416: PUSH
29417: LD_VAR 0 4
29421: ARRAY
29422: PUSH
29423: LD_VAR 0 2
29427: PUSH
29428: LD_VAR 0 4
29432: ARRAY
29433: NONEQUAL
29434: IFFALSE 29446
// begin result := false ;
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
// break ;
29444: GO 29448
// end ;
29446: GO 29409
29448: POP
29449: POP
// end else
29450: GO 29460
// result := false ;
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// end ;
29460: LD_VAR 0 3
29464: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29465: LD_INT 0
29467: PPUSH
29468: PPUSH
// if not array1 or not array2 then
29469: LD_VAR 0 1
29473: NOT
29474: IFTRUE 29483
29476: PUSH
29477: LD_VAR 0 2
29481: NOT
29482: OR
29483: IFFALSE 29487
// exit ;
29485: GO 29551
// result := true ;
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_INT 1
29494: ST_TO_ADDR
// for i = 1 to array1 do
29495: LD_ADDR_VAR 0 4
29499: PUSH
29500: DOUBLE
29501: LD_INT 1
29503: DEC
29504: ST_TO_ADDR
29505: LD_VAR 0 1
29509: PUSH
29510: FOR_TO
29511: IFFALSE 29549
// if array1 [ i ] <> array2 [ i ] then
29513: LD_VAR 0 1
29517: PUSH
29518: LD_VAR 0 4
29522: ARRAY
29523: PUSH
29524: LD_VAR 0 2
29528: PUSH
29529: LD_VAR 0 4
29533: ARRAY
29534: NONEQUAL
29535: IFFALSE 29547
// begin result := false ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 0
29544: ST_TO_ADDR
// break ;
29545: GO 29549
// end ;
29547: GO 29510
29549: POP
29550: POP
// end ;
29551: LD_VAR 0 3
29555: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
29560: PPUSH
// pom := GetBase ( fac ) ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_VAR 0 1
29570: PPUSH
29571: CALL_OW 274
29575: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29576: LD_ADDR_VAR 0 4
29580: PUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: LD_VAR 0 2
29594: PUSH
29595: LD_INT 2
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 2
29603: PUSH
29604: LD_INT 3
29606: ARRAY
29607: PPUSH
29608: LD_VAR 0 2
29612: PUSH
29613: LD_INT 4
29615: ARRAY
29616: PPUSH
29617: CALL_OW 449
29621: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: LD_VAR 0 5
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 275
29639: PUSH
29640: LD_VAR 0 4
29644: PUSH
29645: LD_INT 1
29647: ARRAY
29648: GREATEREQUAL
29649: IFFALSE 29675
29651: PUSH
29652: LD_VAR 0 5
29656: PPUSH
29657: LD_INT 2
29659: PPUSH
29660: CALL_OW 275
29664: PUSH
29665: LD_VAR 0 4
29669: PUSH
29670: LD_INT 2
29672: ARRAY
29673: GREATEREQUAL
29674: AND
29675: IFFALSE 29701
29677: PUSH
29678: LD_VAR 0 5
29682: PPUSH
29683: LD_INT 3
29685: PPUSH
29686: CALL_OW 275
29690: PUSH
29691: LD_VAR 0 4
29695: PUSH
29696: LD_INT 3
29698: ARRAY
29699: GREATEREQUAL
29700: AND
29701: ST_TO_ADDR
// end ;
29702: LD_VAR 0 3
29706: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
// pom := GetBase ( building ) ;
29713: LD_ADDR_VAR 0 3
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 274
29727: ST_TO_ADDR
// if not pom then
29728: LD_VAR 0 3
29732: NOT
29733: IFFALSE 29737
// exit ;
29735: GO 29911
// btype := GetBType ( building ) ;
29737: LD_ADDR_VAR 0 5
29741: PUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 266
29751: ST_TO_ADDR
// if btype = b_armoury then
29752: LD_VAR 0 5
29756: PUSH
29757: LD_INT 4
29759: EQUAL
29760: IFFALSE 29770
// btype := b_barracks ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_INT 5
29769: ST_TO_ADDR
// if btype = b_depot then
29770: LD_VAR 0 5
29774: PUSH
29775: LD_INT 0
29777: EQUAL
29778: IFFALSE 29788
// btype := b_warehouse ;
29780: LD_ADDR_VAR 0 5
29784: PUSH
29785: LD_INT 1
29787: ST_TO_ADDR
// if btype = b_workshop then
29788: LD_VAR 0 5
29792: PUSH
29793: LD_INT 2
29795: EQUAL
29796: IFFALSE 29806
// btype := b_factory ;
29798: LD_ADDR_VAR 0 5
29802: PUSH
29803: LD_INT 3
29805: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29806: LD_ADDR_VAR 0 4
29810: PUSH
29811: LD_VAR 0 5
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 248
29825: PPUSH
29826: CALL_OW 450
29830: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 3
29840: PPUSH
29841: LD_INT 1
29843: PPUSH
29844: CALL_OW 275
29848: PUSH
29849: LD_VAR 0 4
29853: PUSH
29854: LD_INT 1
29856: ARRAY
29857: GREATEREQUAL
29858: IFFALSE 29884
29860: PUSH
29861: LD_VAR 0 3
29865: PPUSH
29866: LD_INT 2
29868: PPUSH
29869: CALL_OW 275
29873: PUSH
29874: LD_VAR 0 4
29878: PUSH
29879: LD_INT 2
29881: ARRAY
29882: GREATEREQUAL
29883: AND
29884: IFFALSE 29910
29886: PUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: LD_INT 3
29894: PPUSH
29895: CALL_OW 275
29899: PUSH
29900: LD_VAR 0 4
29904: PUSH
29905: LD_INT 3
29907: ARRAY
29908: GREATEREQUAL
29909: AND
29910: ST_TO_ADDR
// end ;
29911: LD_VAR 0 2
29915: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29916: LD_INT 0
29918: PPUSH
29919: PPUSH
29920: PPUSH
// pom := GetBase ( building ) ;
29921: LD_ADDR_VAR 0 4
29925: PUSH
29926: LD_VAR 0 1
29930: PPUSH
29931: CALL_OW 274
29935: ST_TO_ADDR
// if not pom then
29936: LD_VAR 0 4
29940: NOT
29941: IFFALSE 29945
// exit ;
29943: GO 30050
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29945: LD_ADDR_VAR 0 5
29949: PUSH
29950: LD_VAR 0 2
29954: PPUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 248
29964: PPUSH
29965: CALL_OW 450
29969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_VAR 0 4
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: CALL_OW 275
29987: PUSH
29988: LD_VAR 0 5
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: GREATEREQUAL
29997: IFFALSE 30023
29999: PUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: LD_INT 2
30007: PPUSH
30008: CALL_OW 275
30012: PUSH
30013: LD_VAR 0 5
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: GREATEREQUAL
30022: AND
30023: IFFALSE 30049
30025: PUSH
30026: LD_VAR 0 4
30030: PPUSH
30031: LD_INT 3
30033: PPUSH
30034: CALL_OW 275
30038: PUSH
30039: LD_VAR 0 5
30043: PUSH
30044: LD_INT 3
30046: ARRAY
30047: GREATEREQUAL
30048: AND
30049: ST_TO_ADDR
// end ;
30050: LD_VAR 0 3
30054: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
30055: LD_INT 0
30057: PPUSH
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
// result := false ;
30068: LD_ADDR_VAR 0 8
30072: PUSH
30073: LD_INT 0
30075: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
30076: LD_VAR 0 5
30080: NOT
30081: IFTRUE 30090
30083: PUSH
30084: LD_VAR 0 1
30088: NOT
30089: OR
30090: IFTRUE 30099
30092: PUSH
30093: LD_VAR 0 2
30097: NOT
30098: OR
30099: IFTRUE 30108
30101: PUSH
30102: LD_VAR 0 3
30106: NOT
30107: OR
30108: IFFALSE 30112
// exit ;
30110: GO 30938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
30112: LD_ADDR_VAR 0 14
30116: PUSH
30117: LD_VAR 0 1
30121: PPUSH
30122: LD_VAR 0 2
30126: PPUSH
30127: LD_VAR 0 3
30131: PPUSH
30132: LD_VAR 0 4
30136: PPUSH
30137: LD_VAR 0 5
30141: PUSH
30142: LD_INT 1
30144: ARRAY
30145: PPUSH
30146: CALL_OW 248
30150: PPUSH
30151: LD_INT 0
30153: PPUSH
30154: CALL 32219 0 6
30158: ST_TO_ADDR
// if not hexes then
30159: LD_VAR 0 14
30163: NOT
30164: IFFALSE 30168
// exit ;
30166: GO 30938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30168: LD_ADDR_VAR 0 17
30172: PUSH
30173: LD_VAR 0 5
30177: PPUSH
30178: LD_INT 22
30180: PUSH
30181: LD_VAR 0 13
30185: PPUSH
30186: CALL_OW 255
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PPUSH
30227: CALL_OW 72
30231: ST_TO_ADDR
// for i = 1 to hexes do
30232: LD_ADDR_VAR 0 9
30236: PUSH
30237: DOUBLE
30238: LD_INT 1
30240: DEC
30241: ST_TO_ADDR
30242: LD_VAR 0 14
30246: PUSH
30247: FOR_TO
30248: IFFALSE 30936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30250: LD_ADDR_VAR 0 13
30254: PUSH
30255: LD_VAR 0 14
30259: PUSH
30260: LD_VAR 0 9
30264: ARRAY
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: PPUSH
30270: LD_VAR 0 14
30274: PUSH
30275: LD_VAR 0 9
30279: ARRAY
30280: PUSH
30281: LD_INT 2
30283: ARRAY
30284: PPUSH
30285: CALL_OW 428
30289: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30290: LD_VAR 0 14
30294: PUSH
30295: LD_VAR 0 9
30299: ARRAY
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 14
30309: PUSH
30310: LD_VAR 0 9
30314: ARRAY
30315: PUSH
30316: LD_INT 2
30318: ARRAY
30319: PPUSH
30320: CALL_OW 351
30324: IFTRUE 30363
30326: PUSH
30327: LD_VAR 0 14
30331: PUSH
30332: LD_VAR 0 9
30336: ARRAY
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: LD_VAR 0 14
30346: PUSH
30347: LD_VAR 0 9
30351: ARRAY
30352: PUSH
30353: LD_INT 2
30355: ARRAY
30356: PPUSH
30357: CALL_OW 488
30361: NOT
30362: OR
30363: IFTRUE 30380
30365: PUSH
30366: LD_VAR 0 13
30370: PPUSH
30371: CALL_OW 247
30375: PUSH
30376: LD_INT 3
30378: EQUAL
30379: OR
30380: IFFALSE 30386
// exit ;
30382: POP
30383: POP
30384: GO 30938
// if not tmp then
30386: LD_VAR 0 13
30390: NOT
30391: IFFALSE 30395
// continue ;
30393: GO 30247
// result := true ;
30395: LD_ADDR_VAR 0 8
30399: PUSH
30400: LD_INT 1
30402: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30403: LD_VAR 0 6
30407: IFFALSE 30424
30409: PUSH
30410: LD_VAR 0 13
30414: PPUSH
30415: CALL_OW 247
30419: PUSH
30420: LD_INT 2
30422: EQUAL
30423: AND
30424: IFFALSE 30441
30426: PUSH
30427: LD_VAR 0 13
30431: PPUSH
30432: CALL_OW 263
30436: PUSH
30437: LD_INT 1
30439: EQUAL
30440: AND
30441: IFFALSE 30605
// begin if IsDrivenBy ( tmp ) then
30443: LD_VAR 0 13
30447: PPUSH
30448: CALL_OW 311
30452: IFFALSE 30456
// continue ;
30454: GO 30247
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30456: LD_VAR 0 6
30460: PPUSH
30461: LD_INT 3
30463: PUSH
30464: LD_INT 60
30466: PUSH
30467: EMPTY
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: LD_INT 55
30479: PUSH
30480: EMPTY
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PPUSH
30491: CALL_OW 72
30495: IFFALSE 30603
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30497: LD_ADDR_VAR 0 18
30501: PUSH
30502: LD_VAR 0 6
30506: PPUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 60
30512: PUSH
30513: EMPTY
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: LD_INT 55
30525: PUSH
30526: EMPTY
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PPUSH
30537: CALL_OW 72
30541: PUSH
30542: LD_INT 1
30544: ARRAY
30545: ST_TO_ADDR
// if IsInUnit ( driver ) then
30546: LD_VAR 0 18
30550: PPUSH
30551: CALL_OW 310
30555: IFFALSE 30566
// ComExit ( driver ) ;
30557: LD_VAR 0 18
30561: PPUSH
30562: CALL 56209 0 1
// AddComEnterUnit ( driver , tmp ) ;
30566: LD_VAR 0 18
30570: PPUSH
30571: LD_VAR 0 13
30575: PPUSH
30576: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30580: LD_VAR 0 18
30584: PPUSH
30585: LD_VAR 0 7
30589: PPUSH
30590: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30594: LD_VAR 0 18
30598: PPUSH
30599: CALL_OW 181
// end ; continue ;
30603: GO 30247
// end ; if not cleaners or not tmp in cleaners then
30605: LD_VAR 0 6
30609: NOT
30610: IFTRUE 30625
30612: PUSH
30613: LD_VAR 0 13
30617: PUSH
30618: LD_VAR 0 6
30622: IN
30623: NOT
30624: OR
30625: IFFALSE 30934
// begin if dep then
30627: LD_VAR 0 17
30631: IFFALSE 30767
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30633: LD_ADDR_VAR 0 16
30637: PUSH
30638: LD_VAR 0 17
30642: PUSH
30643: LD_INT 1
30645: ARRAY
30646: PPUSH
30647: CALL_OW 250
30651: PPUSH
30652: LD_VAR 0 17
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: CALL_OW 254
30665: PPUSH
30666: LD_INT 5
30668: PPUSH
30669: CALL_OW 272
30673: PUSH
30674: LD_VAR 0 17
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: CALL_OW 251
30687: PPUSH
30688: LD_VAR 0 17
30692: PUSH
30693: LD_INT 1
30695: ARRAY
30696: PPUSH
30697: CALL_OW 254
30701: PPUSH
30702: LD_INT 5
30704: PPUSH
30705: CALL_OW 273
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30714: LD_VAR 0 16
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: PPUSH
30723: LD_VAR 0 16
30727: PUSH
30728: LD_INT 2
30730: ARRAY
30731: PPUSH
30732: CALL_OW 488
30736: IFFALSE 30767
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30738: LD_VAR 0 13
30742: PPUSH
30743: LD_VAR 0 16
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 16
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PPUSH
30761: CALL_OW 111
// continue ;
30765: GO 30247
// end ; end ; r := GetDir ( tmp ) ;
30767: LD_ADDR_VAR 0 15
30771: PUSH
30772: LD_VAR 0 13
30776: PPUSH
30777: CALL_OW 254
30781: ST_TO_ADDR
// if r = 5 then
30782: LD_VAR 0 15
30786: PUSH
30787: LD_INT 5
30789: EQUAL
30790: IFFALSE 30800
// r := 0 ;
30792: LD_ADDR_VAR 0 15
30796: PUSH
30797: LD_INT 0
30799: ST_TO_ADDR
// for j = r to 5 do
30800: LD_ADDR_VAR 0 10
30804: PUSH
30805: DOUBLE
30806: LD_VAR 0 15
30810: DEC
30811: ST_TO_ADDR
30812: LD_INT 5
30814: PUSH
30815: FOR_TO
30816: IFFALSE 30932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30818: LD_ADDR_VAR 0 11
30822: PUSH
30823: LD_VAR 0 13
30827: PPUSH
30828: CALL_OW 250
30832: PPUSH
30833: LD_VAR 0 10
30837: PPUSH
30838: LD_INT 2
30840: PPUSH
30841: CALL_OW 272
30845: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30846: LD_ADDR_VAR 0 12
30850: PUSH
30851: LD_VAR 0 13
30855: PPUSH
30856: CALL_OW 251
30860: PPUSH
30861: LD_VAR 0 10
30865: PPUSH
30866: LD_INT 2
30868: PPUSH
30869: CALL_OW 273
30873: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30874: LD_VAR 0 11
30878: PPUSH
30879: LD_VAR 0 12
30883: PPUSH
30884: CALL_OW 488
30888: IFFALSE 30907
30890: PUSH
30891: LD_VAR 0 11
30895: PPUSH
30896: LD_VAR 0 12
30900: PPUSH
30901: CALL_OW 428
30905: NOT
30906: AND
30907: IFFALSE 30930
// begin ComMoveXY ( tmp , _x , _y ) ;
30909: LD_VAR 0 13
30913: PPUSH
30914: LD_VAR 0 11
30918: PPUSH
30919: LD_VAR 0 12
30923: PPUSH
30924: CALL_OW 111
// break ;
30928: GO 30932
// end ; end ;
30930: GO 30815
30932: POP
30933: POP
// end ; end ;
30934: GO 30247
30936: POP
30937: POP
// end ;
30938: LD_VAR 0 8
30942: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30943: LD_INT 0
30945: PPUSH
// result := true ;
30946: LD_ADDR_VAR 0 3
30950: PUSH
30951: LD_INT 1
30953: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30954: LD_VAR 0 2
30958: PUSH
30959: LD_INT 24
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30973
30965: LD_INT 33
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30998
30973: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30974: LD_ADDR_VAR 0 3
30978: PUSH
30979: LD_INT 32
30981: PPUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 321
30991: PUSH
30992: LD_INT 2
30994: EQUAL
30995: ST_TO_ADDR
30996: GO 31314
30998: LD_INT 20
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31031
31006: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 6
31014: PPUSH
31015: LD_VAR 0 1
31019: PPUSH
31020: CALL_OW 321
31024: PUSH
31025: LD_INT 2
31027: EQUAL
31028: ST_TO_ADDR
31029: GO 31314
31031: LD_INT 22
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31045
31037: LD_INT 36
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31070
31045: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_INT 15
31053: PPUSH
31054: LD_VAR 0 1
31058: PPUSH
31059: CALL_OW 321
31063: PUSH
31064: LD_INT 2
31066: EQUAL
31067: ST_TO_ADDR
31068: GO 31314
31070: LD_INT 30
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31103
31078: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 20
31086: PPUSH
31087: LD_VAR 0 1
31091: PPUSH
31092: CALL_OW 321
31096: PUSH
31097: LD_INT 2
31099: EQUAL
31100: ST_TO_ADDR
31101: GO 31314
31103: LD_INT 28
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31117
31109: LD_INT 21
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31142
31117: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
31118: LD_ADDR_VAR 0 3
31122: PUSH
31123: LD_INT 21
31125: PPUSH
31126: LD_VAR 0 1
31130: PPUSH
31131: CALL_OW 321
31135: PUSH
31136: LD_INT 2
31138: EQUAL
31139: ST_TO_ADDR
31140: GO 31314
31142: LD_INT 16
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31175
31150: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
31151: LD_ADDR_VAR 0 3
31155: PUSH
31156: LD_INT 84
31158: PPUSH
31159: LD_VAR 0 1
31163: PPUSH
31164: CALL_OW 321
31168: PUSH
31169: LD_INT 2
31171: EQUAL
31172: ST_TO_ADDR
31173: GO 31314
31175: LD_INT 19
31177: DOUBLE
31178: EQUAL
31179: IFTRUE 31189
31181: LD_INT 23
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31214
31189: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
31190: LD_ADDR_VAR 0 3
31194: PUSH
31195: LD_INT 83
31197: PPUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 321
31207: PUSH
31208: LD_INT 2
31210: EQUAL
31211: ST_TO_ADDR
31212: GO 31314
31214: LD_INT 17
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31247
31222: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_INT 39
31230: PPUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 321
31240: PUSH
31241: LD_INT 2
31243: EQUAL
31244: ST_TO_ADDR
31245: GO 31314
31247: LD_INT 18
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31280
31255: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_INT 40
31263: PPUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: CALL_OW 321
31273: PUSH
31274: LD_INT 2
31276: EQUAL
31277: ST_TO_ADDR
31278: GO 31314
31280: LD_INT 27
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31313
31288: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_INT 35
31296: PPUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 321
31306: PUSH
31307: LD_INT 2
31309: EQUAL
31310: ST_TO_ADDR
31311: GO 31314
31313: POP
// end ;
31314: LD_VAR 0 3
31318: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31319: LD_INT 0
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
// result := false ;
31332: LD_ADDR_VAR 0 6
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// if btype = b_depot then
31340: LD_VAR 0 2
31344: PUSH
31345: LD_INT 0
31347: EQUAL
31348: IFFALSE 31360
// begin result := true ;
31350: LD_ADDR_VAR 0 6
31354: PUSH
31355: LD_INT 1
31357: ST_TO_ADDR
// exit ;
31358: GO 32214
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31360: LD_VAR 0 1
31364: NOT
31365: IFTRUE 31390
31367: PUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 266
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: IN
31388: NOT
31389: OR
31390: IFTRUE 31399
31392: PUSH
31393: LD_VAR 0 2
31397: NOT
31398: OR
31399: IFTRUE 31435
31401: PUSH
31402: LD_VAR 0 5
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: LD_INT 5
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: IN
31433: NOT
31434: OR
31435: IFTRUE 31454
31437: PUSH
31438: LD_VAR 0 3
31442: PPUSH
31443: LD_VAR 0 4
31447: PPUSH
31448: CALL_OW 488
31452: NOT
31453: OR
31454: IFFALSE 31458
// exit ;
31456: GO 32214
// side := GetSide ( depot ) ;
31458: LD_ADDR_VAR 0 9
31462: PUSH
31463: LD_VAR 0 1
31467: PPUSH
31468: CALL_OW 255
31472: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31473: LD_VAR 0 9
31477: PPUSH
31478: LD_VAR 0 2
31482: PPUSH
31483: CALL 30943 0 2
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 32214
// pom := GetBase ( depot ) ;
31492: LD_ADDR_VAR 0 10
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 274
31506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31507: LD_ADDR_VAR 0 11
31511: PUSH
31512: LD_VAR 0 2
31516: PPUSH
31517: LD_VAR 0 1
31521: PPUSH
31522: CALL_OW 248
31526: PPUSH
31527: CALL_OW 450
31531: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31532: LD_VAR 0 10
31536: PPUSH
31537: LD_INT 1
31539: PPUSH
31540: CALL_OW 275
31544: PUSH
31545: LD_VAR 0 11
31549: PUSH
31550: LD_INT 1
31552: ARRAY
31553: GREATEREQUAL
31554: IFFALSE 31580
31556: PUSH
31557: LD_VAR 0 10
31561: PPUSH
31562: LD_INT 2
31564: PPUSH
31565: CALL_OW 275
31569: PUSH
31570: LD_VAR 0 11
31574: PUSH
31575: LD_INT 2
31577: ARRAY
31578: GREATEREQUAL
31579: AND
31580: IFFALSE 31606
31582: PUSH
31583: LD_VAR 0 10
31587: PPUSH
31588: LD_INT 3
31590: PPUSH
31591: CALL_OW 275
31595: PUSH
31596: LD_VAR 0 11
31600: PUSH
31601: LD_INT 3
31603: ARRAY
31604: GREATEREQUAL
31605: AND
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 32214
// if GetBType ( depot ) = b_depot then
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 266
31620: PUSH
31621: LD_INT 0
31623: EQUAL
31624: IFFALSE 31636
// dist := 28 else
31626: LD_ADDR_VAR 0 14
31630: PUSH
31631: LD_INT 28
31633: ST_TO_ADDR
31634: GO 31644
// dist := 36 ;
31636: LD_ADDR_VAR 0 14
31640: PUSH
31641: LD_INT 36
31643: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31644: LD_VAR 0 1
31648: PPUSH
31649: LD_VAR 0 3
31653: PPUSH
31654: LD_VAR 0 4
31658: PPUSH
31659: CALL_OW 297
31663: PUSH
31664: LD_VAR 0 14
31668: GREATER
31669: IFFALSE 31673
// exit ;
31671: GO 32214
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31673: LD_ADDR_VAR 0 12
31677: PUSH
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_VAR 0 3
31687: PPUSH
31688: LD_VAR 0 4
31692: PPUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 248
31707: PPUSH
31708: LD_INT 0
31710: PPUSH
31711: CALL 32219 0 6
31715: ST_TO_ADDR
// if not hexes then
31716: LD_VAR 0 12
31720: NOT
31721: IFFALSE 31725
// exit ;
31723: GO 32214
// hex := GetHexInfo ( x , y ) ;
31725: LD_ADDR_VAR 0 15
31729: PUSH
31730: LD_VAR 0 3
31734: PPUSH
31735: LD_VAR 0 4
31739: PPUSH
31740: CALL_OW 546
31744: ST_TO_ADDR
// if hex [ 1 ] then
31745: LD_VAR 0 15
31749: PUSH
31750: LD_INT 1
31752: ARRAY
31753: IFFALSE 31757
// exit ;
31755: GO 32214
// height := hex [ 2 ] ;
31757: LD_ADDR_VAR 0 13
31761: PUSH
31762: LD_VAR 0 15
31766: PUSH
31767: LD_INT 2
31769: ARRAY
31770: ST_TO_ADDR
// for i = 1 to hexes do
31771: LD_ADDR_VAR 0 7
31775: PUSH
31776: DOUBLE
31777: LD_INT 1
31779: DEC
31780: ST_TO_ADDR
31781: LD_VAR 0 12
31785: PUSH
31786: FOR_TO
31787: IFFALSE 32131
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31789: LD_VAR 0 12
31793: PUSH
31794: LD_VAR 0 7
31798: ARRAY
31799: PUSH
31800: LD_INT 1
31802: ARRAY
31803: PPUSH
31804: LD_VAR 0 12
31808: PUSH
31809: LD_VAR 0 7
31813: ARRAY
31814: PUSH
31815: LD_INT 2
31817: ARRAY
31818: PPUSH
31819: CALL_OW 488
31823: NOT
31824: IFTRUE 31866
31826: PUSH
31827: LD_VAR 0 12
31831: PUSH
31832: LD_VAR 0 7
31836: ARRAY
31837: PUSH
31838: LD_INT 1
31840: ARRAY
31841: PPUSH
31842: LD_VAR 0 12
31846: PUSH
31847: LD_VAR 0 7
31851: ARRAY
31852: PUSH
31853: LD_INT 2
31855: ARRAY
31856: PPUSH
31857: CALL_OW 428
31861: PUSH
31862: LD_INT 0
31864: GREATER
31865: OR
31866: IFTRUE 31904
31868: PUSH
31869: LD_VAR 0 12
31873: PUSH
31874: LD_VAR 0 7
31878: ARRAY
31879: PUSH
31880: LD_INT 1
31882: ARRAY
31883: PPUSH
31884: LD_VAR 0 12
31888: PUSH
31889: LD_VAR 0 7
31893: ARRAY
31894: PUSH
31895: LD_INT 2
31897: ARRAY
31898: PPUSH
31899: CALL_OW 351
31903: OR
31904: IFFALSE 31910
// exit ;
31906: POP
31907: POP
31908: GO 32214
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31910: LD_ADDR_VAR 0 8
31914: PUSH
31915: LD_VAR 0 12
31919: PUSH
31920: LD_VAR 0 7
31924: ARRAY
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: PPUSH
31930: LD_VAR 0 12
31934: PUSH
31935: LD_VAR 0 7
31939: ARRAY
31940: PUSH
31941: LD_INT 2
31943: ARRAY
31944: PPUSH
31945: CALL_OW 546
31949: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31950: LD_VAR 0 8
31954: PUSH
31955: LD_INT 1
31957: ARRAY
31958: IFTRUE 31980
31960: PUSH
31961: LD_VAR 0 8
31965: PUSH
31966: LD_INT 2
31968: ARRAY
31969: PUSH
31970: LD_VAR 0 13
31974: PUSH
31975: LD_INT 2
31977: PLUS
31978: GREATER
31979: OR
31980: IFTRUE 32002
31982: PUSH
31983: LD_VAR 0 8
31987: PUSH
31988: LD_INT 2
31990: ARRAY
31991: PUSH
31992: LD_VAR 0 13
31996: PUSH
31997: LD_INT 2
31999: MINUS
32000: LESS
32001: OR
32002: IFTRUE 32070
32004: PUSH
32005: LD_VAR 0 8
32009: PUSH
32010: LD_INT 3
32012: ARRAY
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 8
32019: PUSH
32020: LD_INT 9
32022: PUSH
32023: LD_INT 10
32025: PUSH
32026: LD_INT 11
32028: PUSH
32029: LD_INT 12
32031: PUSH
32032: LD_INT 13
32034: PUSH
32035: LD_INT 16
32037: PUSH
32038: LD_INT 17
32040: PUSH
32041: LD_INT 18
32043: PUSH
32044: LD_INT 19
32046: PUSH
32047: LD_INT 20
32049: PUSH
32050: LD_INT 21
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: IN
32068: NOT
32069: OR
32070: IFTRUE 32083
32072: PUSH
32073: LD_VAR 0 8
32077: PUSH
32078: LD_INT 5
32080: ARRAY
32081: NOT
32082: OR
32083: IFTRUE 32123
32085: PUSH
32086: LD_VAR 0 8
32090: PUSH
32091: LD_INT 6
32093: ARRAY
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 7
32103: PUSH
32104: LD_INT 9
32106: PUSH
32107: LD_INT 10
32109: PUSH
32110: LD_INT 11
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: IN
32121: NOT
32122: OR
32123: IFFALSE 32129
// exit ;
32125: POP
32126: POP
32127: GO 32214
// end ;
32129: GO 31786
32131: POP
32132: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32133: LD_VAR 0 9
32137: PPUSH
32138: LD_VAR 0 3
32142: PPUSH
32143: LD_VAR 0 4
32147: PPUSH
32148: LD_INT 20
32150: PPUSH
32151: CALL 24033 0 4
32155: PUSH
32156: LD_INT 4
32158: ARRAY
32159: IFFALSE 32163
// exit ;
32161: GO 32214
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32163: LD_VAR 0 2
32167: PUSH
32168: LD_INT 29
32170: PUSH
32171: LD_INT 30
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: IN
32178: IFFALSE 32202
32180: PUSH
32181: LD_VAR 0 3
32185: PPUSH
32186: LD_VAR 0 4
32190: PPUSH
32191: LD_VAR 0 9
32195: PPUSH
32196: CALL_OW 440
32200: NOT
32201: AND
32202: IFFALSE 32206
// exit ;
32204: GO 32214
// result := true ;
32206: LD_ADDR_VAR 0 6
32210: PUSH
32211: LD_INT 1
32213: ST_TO_ADDR
// end ;
32214: LD_VAR 0 6
32218: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32219: LD_INT 0
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
32249: PPUSH
32250: PPUSH
32251: PPUSH
32252: PPUSH
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
// result = [ ] ;
32279: LD_ADDR_VAR 0 7
32283: PUSH
32284: EMPTY
32285: ST_TO_ADDR
// temp_list = [ ] ;
32286: LD_ADDR_VAR 0 9
32290: PUSH
32291: EMPTY
32292: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32293: LD_VAR 0 4
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 4
32312: PUSH
32313: LD_INT 5
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: IN
32324: NOT
32325: IFTRUE 32368
32327: PUSH
32328: LD_VAR 0 1
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: IN
32343: IFFALSE 32367
32345: PUSH
32346: LD_VAR 0 5
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: IN
32365: NOT
32366: AND
32367: OR
32368: IFFALSE 32372
// exit ;
32370: GO 50771
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32372: LD_VAR 0 1
32376: PUSH
32377: LD_INT 6
32379: PUSH
32380: LD_INT 7
32382: PUSH
32383: LD_INT 8
32385: PUSH
32386: LD_INT 13
32388: PUSH
32389: LD_INT 12
32391: PUSH
32392: LD_INT 15
32394: PUSH
32395: LD_INT 11
32397: PUSH
32398: LD_INT 14
32400: PUSH
32401: LD_INT 10
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: IN
32415: IFFALSE 32425
// btype = b_lab ;
32417: LD_ADDR_VAR 0 1
32421: PUSH
32422: LD_INT 6
32424: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32425: LD_VAR 0 6
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: IN
32444: NOT
32445: IFTRUE 32513
32447: PUSH
32448: LD_VAR 0 1
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 6
32467: PUSH
32468: LD_INT 36
32470: PUSH
32471: LD_INT 4
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: LD_INT 31
32479: PUSH
32480: LD_INT 32
32482: PUSH
32483: LD_INT 33
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: IN
32499: NOT
32500: IFFALSE 32512
32502: PUSH
32503: LD_VAR 0 6
32507: PUSH
32508: LD_INT 1
32510: EQUAL
32511: AND
32512: OR
32513: IFTRUE 32545
32515: PUSH
32516: LD_VAR 0 1
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: IN
32531: NOT
32532: IFFALSE 32544
32534: PUSH
32535: LD_VAR 0 6
32539: PUSH
32540: LD_INT 2
32542: EQUAL
32543: AND
32544: OR
32545: IFFALSE 32555
// mode = 0 ;
32547: LD_ADDR_VAR 0 6
32551: PUSH
32552: LD_INT 0
32554: ST_TO_ADDR
// case mode of 0 :
32555: LD_VAR 0 6
32559: PUSH
32560: LD_INT 0
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 44021
32568: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32569: LD_ADDR_VAR 0 11
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 3
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32762: LD_ADDR_VAR 0 12
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: NEG
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32958: LD_ADDR_VAR 0 13
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: LD_INT 2
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 3
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33157: LD_ADDR_VAR 0 14
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: LD_INT 3
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33353: LD_ADDR_VAR 0 15
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33546: LD_ADDR_VAR 0 16
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: NEG
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 3
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33739: LD_ADDR_VAR 0 17
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: NEG
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33969: LD_ADDR_VAR 0 18
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34199: LD_ADDR_VAR 0 19
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 2
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34429: LD_ADDR_VAR 0 20
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34659: LD_ADDR_VAR 0 21
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 2
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34889: LD_ADDR_VAR 0 22
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35119: LD_ADDR_VAR 0 23
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 2
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 3
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35399: LD_ADDR_VAR 0 24
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 3
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35675: LD_ADDR_VAR 0 25
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 3
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35949: LD_ADDR_VAR 0 26
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36225: LD_ADDR_VAR 0 27
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 3
36458: NEG
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 3
36470: NEG
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36505: LD_ADDR_VAR 0 28
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: LD_INT 3
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 3
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 3
36740: NEG
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36787: LD_ADDR_VAR 0 29
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: NEG
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37066: LD_ADDR_VAR 0 30
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 3
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 3
37309: NEG
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37344: LD_ADDR_VAR 0 31
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 3
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 3
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 3
37587: NEG
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37622: LD_ADDR_VAR 0 32
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 3
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37900: LD_ADDR_VAR 0 33
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 3
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: NEG
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38179: LD_ADDR_VAR 0 34
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: NEG
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 3
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: NEG
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38459: LD_ADDR_VAR 0 35
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38571: LD_ADDR_VAR 0 36
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38683: LD_ADDR_VAR 0 37
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38795: LD_ADDR_VAR 0 38
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38907: LD_ADDR_VAR 0 39
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39019: LD_ADDR_VAR 0 40
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39131: LD_ADDR_VAR 0 41
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: NEG
39322: PUSH
39323: LD_INT 3
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 3
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 3
39405: NEG
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39481: LD_ADDR_VAR 0 42
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: LD_INT 3
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 3
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: LD_INT 3
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: NEG
39791: PUSH
39792: LD_INT 3
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39831: LD_ADDR_VAR 0 43
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 3
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 3
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 3
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40179: LD_ADDR_VAR 0 44
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 3
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 3
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 3
40453: NEG
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: NEG
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 3
40476: NEG
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40529: LD_ADDR_VAR 0 45
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: LD_INT 3
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 3
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 3
40838: NEG
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40879: LD_ADDR_VAR 0 46
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 3
41175: NEG
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: NEG
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41227: LD_ADDR_VAR 0 47
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41378: LD_ADDR_VAR 0 48
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41525: LD_ADDR_VAR 0 49
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41669: LD_ADDR_VAR 0 50
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41813: LD_ADDR_VAR 0 51
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41960: LD_ADDR_VAR 0 52
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42111: LD_ADDR_VAR 0 53
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42341: LD_ADDR_VAR 0 54
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42571: LD_ADDR_VAR 0 55
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42801: LD_ADDR_VAR 0 56
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43031: LD_ADDR_VAR 0 57
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43261: LD_ADDR_VAR 0 58
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43491: LD_ADDR_VAR 0 59
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43579: LD_ADDR_VAR 0 60
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43667: LD_ADDR_VAR 0 61
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43755: LD_ADDR_VAR 0 62
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43843: LD_ADDR_VAR 0 63
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43931: LD_ADDR_VAR 0 64
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// end ; 1 :
44019: GO 49916
44021: LD_INT 1
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 46652
44029: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44030: LD_ADDR_VAR 0 11
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 3
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44074: LD_ADDR_VAR 0 12
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44115: LD_ADDR_VAR 0 13
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44155: LD_ADDR_VAR 0 14
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44196: LD_ADDR_VAR 0 15
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: NEG
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44240: LD_ADDR_VAR 0 16
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 3
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44286: LD_ADDR_VAR 0 17
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44330: LD_ADDR_VAR 0 18
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44371: LD_ADDR_VAR 0 19
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44411: LD_ADDR_VAR 0 20
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44452: LD_ADDR_VAR 0 21
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 3
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44496: LD_ADDR_VAR 0 22
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 3
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44542: LD_ADDR_VAR 0 23
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 4
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44586: LD_ADDR_VAR 0 24
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 4
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44627: LD_ADDR_VAR 0 25
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 3
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 4
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 4
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44667: LD_ADDR_VAR 0 26
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44708: LD_ADDR_VAR 0 27
44712: PUSH
44713: LD_INT 3
44715: NEG
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 4
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44752: LD_ADDR_VAR 0 28
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: LD_INT 3
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: NEG
44772: PUSH
44773: LD_INT 4
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 4
44783: NEG
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44798: LD_ADDR_VAR 0 29
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 3
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 4
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 4
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 3
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 5
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 5
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 4
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 6
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 6
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 5
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44953: LD_ADDR_VAR 0 30
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 3
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 4
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 4
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 4
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 6
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 6
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45096: LD_ADDR_VAR 0 31
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: LD_INT 4
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: LD_INT 4
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 5
45163: PUSH
45164: LD_INT 4
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 5
45173: PUSH
45174: LD_INT 5
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 4
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 6
45193: PUSH
45194: LD_INT 5
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 6
45203: PUSH
45204: LD_INT 6
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 5
45213: PUSH
45214: LD_INT 6
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45235: LD_ADDR_VAR 0 32
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 4
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 4
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 5
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 5
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 4
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 6
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 6
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 5
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45378: LD_ADDR_VAR 0 33
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 4
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 4
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 4
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 5
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 5
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 5
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 6
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 6
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45533: LD_ADDR_VAR 0 34
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: NEG
45577: PUSH
45578: LD_INT 4
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 4
45588: NEG
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 4
45600: NEG
45601: PUSH
45602: LD_INT 4
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 4
45612: NEG
45613: PUSH
45614: LD_INT 5
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 5
45624: NEG
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 5
45636: NEG
45637: PUSH
45638: LD_INT 5
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 5
45648: NEG
45649: PUSH
45650: LD_INT 6
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 6
45660: NEG
45661: PUSH
45662: LD_INT 5
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 6
45672: NEG
45673: PUSH
45674: LD_INT 6
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45696: LD_ADDR_VAR 0 41
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45740: LD_ADDR_VAR 0 42
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45781: LD_ADDR_VAR 0 43
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: LIST
45820: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45821: LD_ADDR_VAR 0 44
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45862: LD_ADDR_VAR 0 45
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45906: LD_ADDR_VAR 0 46
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45952: LD_ADDR_VAR 0 47
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45985: LD_ADDR_VAR 0 48
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46016: LD_ADDR_VAR 0 49
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46045: LD_ADDR_VAR 0 50
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46074: LD_ADDR_VAR 0 51
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46105: LD_ADDR_VAR 0 52
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46138: LD_ADDR_VAR 0 53
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46182: LD_ADDR_VAR 0 54
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46223: LD_ADDR_VAR 0 55
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: LD_INT 3
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46263: LD_ADDR_VAR 0 56
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46304: LD_ADDR_VAR 0 57
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46348: LD_ADDR_VAR 0 58
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: NEG
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46394: LD_ADDR_VAR 0 59
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46438: LD_ADDR_VAR 0 60
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46479: LD_ADDR_VAR 0 61
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46519: LD_ADDR_VAR 0 62
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46560: LD_ADDR_VAR 0 63
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46604: LD_ADDR_VAR 0 64
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// end ; 2 :
46650: GO 49916
46652: LD_INT 2
46654: DOUBLE
46655: EQUAL
46656: IFTRUE 46660
46658: GO 49915
46660: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46661: LD_ADDR_VAR 0 29
46665: PUSH
46666: LD_INT 4
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 4
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 5
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 5
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: LD_INT 4
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 4
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 4
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 4
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 4
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 4
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 5
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 5
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 4
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 5
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 4
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 4
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 4
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 4
47046: NEG
47047: PUSH
47048: LD_INT 4
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 4
47058: NEG
47059: PUSH
47060: LD_INT 5
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: NEG
47071: PUSH
47072: LD_INT 4
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 4
47094: NEG
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 5
47106: NEG
47107: PUSH
47108: LD_INT 4
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 5
47118: NEG
47119: PUSH
47120: LD_INT 5
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 5
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 5
47142: NEG
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47199: LD_ADDR_VAR 0 30
47203: PUSH
47204: LD_INT 4
47206: PUSH
47207: LD_INT 4
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 4
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 5
47226: PUSH
47227: LD_INT 4
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: LD_INT 5
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: LD_INT 4
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 5
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 4
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 4
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 4
47400: NEG
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 4
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 5
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 5
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 4
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 4
47551: NEG
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: NEG
47564: PUSH
47565: LD_INT 4
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 4
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 4
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 4
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 5
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 4
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 5
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 5
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47746: LD_ADDR_VAR 0 31
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 4
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 5
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 5
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 5
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 4
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 4
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 4
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: LD_INT 4
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 4
47960: NEG
47961: PUSH
47962: LD_INT 5
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: LD_INT 4
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 4
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 5
48008: NEG
48009: PUSH
48010: LD_INT 4
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 5
48020: NEG
48021: PUSH
48022: LD_INT 5
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: LD_INT 5
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 5
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 4
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 4
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 4
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 4
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 5
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 5
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 4
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48296: LD_ADDR_VAR 0 32
48300: PUSH
48301: LD_INT 4
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 4
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 4
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 5
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 5
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 5
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 3
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 4
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 4
48465: NEG
48466: PUSH
48467: LD_INT 3
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 4
48477: NEG
48478: PUSH
48479: LD_INT 4
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 4
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 4
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 4
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 5
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 4
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 4
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 5
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 5
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 4
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 4
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 4
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 4
48708: PUSH
48709: LD_INT 4
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 4
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 5
48728: PUSH
48729: LD_INT 4
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 5
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: LD_INT 5
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: LD_INT 4
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 5
48778: PUSH
48779: LD_INT 3
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: LD_INT 5
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48843: LD_ADDR_VAR 0 33
48847: PUSH
48848: LD_INT 4
48850: NEG
48851: PUSH
48852: LD_INT 4
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 4
48862: NEG
48863: PUSH
48864: LD_INT 5
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: LD_INT 4
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 4
48898: NEG
48899: PUSH
48900: LD_INT 3
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 5
48910: NEG
48911: PUSH
48912: LD_INT 4
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 5
48922: NEG
48923: PUSH
48924: LD_INT 5
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 5
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 5
48946: NEG
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 4
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 3
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 4
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 4
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 4
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 5
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 5
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 4
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 5
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 4
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 4
49183: PUSH
49184: LD_INT 4
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: LD_INT 4
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 4
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 5
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 5
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 4
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 5
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49381: LD_ADDR_VAR 0 34
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 4
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 5
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 4
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 3
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 4
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 5
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 5
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 4
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 4
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 4
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 4
49583: PUSH
49584: LD_INT 4
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 4
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: LD_INT 4
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 5
49613: PUSH
49614: LD_INT 5
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: LD_INT 5
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: LD_INT 4
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 5
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: LD_INT 5
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 4
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 4
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 4
49766: NEG
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 4
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 4
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 5
49822: NEG
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 5
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 5
49845: NEG
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// end ; end ;
49913: GO 49916
49915: POP
// case btype of b_depot , b_warehouse :
49916: LD_VAR 0 1
49920: PUSH
49921: LD_INT 0
49923: DOUBLE
49924: EQUAL
49925: IFTRUE 49935
49927: LD_INT 1
49929: DOUBLE
49930: EQUAL
49931: IFTRUE 49935
49933: GO 50136
49935: POP
// case nation of nation_american :
49936: LD_VAR 0 5
49940: PUSH
49941: LD_INT 1
49943: DOUBLE
49944: EQUAL
49945: IFTRUE 49949
49947: GO 50005
49949: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49950: LD_ADDR_VAR 0 9
49954: PUSH
49955: LD_VAR 0 11
49959: PUSH
49960: LD_VAR 0 12
49964: PUSH
49965: LD_VAR 0 13
49969: PUSH
49970: LD_VAR 0 14
49974: PUSH
49975: LD_VAR 0 15
49979: PUSH
49980: LD_VAR 0 16
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: PUSH
49993: LD_VAR 0 4
49997: PUSH
49998: LD_INT 1
50000: PLUS
50001: ARRAY
50002: ST_TO_ADDR
50003: GO 50134
50005: LD_INT 2
50007: DOUBLE
50008: EQUAL
50009: IFTRUE 50013
50011: GO 50069
50013: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50014: LD_ADDR_VAR 0 9
50018: PUSH
50019: LD_VAR 0 17
50023: PUSH
50024: LD_VAR 0 18
50028: PUSH
50029: LD_VAR 0 19
50033: PUSH
50034: LD_VAR 0 20
50038: PUSH
50039: LD_VAR 0 21
50043: PUSH
50044: LD_VAR 0 22
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: PUSH
50057: LD_VAR 0 4
50061: PUSH
50062: LD_INT 1
50064: PLUS
50065: ARRAY
50066: ST_TO_ADDR
50067: GO 50134
50069: LD_INT 3
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50077
50075: GO 50133
50077: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50078: LD_ADDR_VAR 0 9
50082: PUSH
50083: LD_VAR 0 23
50087: PUSH
50088: LD_VAR 0 24
50092: PUSH
50093: LD_VAR 0 25
50097: PUSH
50098: LD_VAR 0 26
50102: PUSH
50103: LD_VAR 0 27
50107: PUSH
50108: LD_VAR 0 28
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: PUSH
50121: LD_VAR 0 4
50125: PUSH
50126: LD_INT 1
50128: PLUS
50129: ARRAY
50130: ST_TO_ADDR
50131: GO 50134
50133: POP
50134: GO 50689
50136: LD_INT 2
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50150
50142: LD_INT 3
50144: DOUBLE
50145: EQUAL
50146: IFTRUE 50150
50148: GO 50206
50150: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50151: LD_ADDR_VAR 0 9
50155: PUSH
50156: LD_VAR 0 29
50160: PUSH
50161: LD_VAR 0 30
50165: PUSH
50166: LD_VAR 0 31
50170: PUSH
50171: LD_VAR 0 32
50175: PUSH
50176: LD_VAR 0 33
50180: PUSH
50181: LD_VAR 0 34
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: PUSH
50194: LD_VAR 0 4
50198: PUSH
50199: LD_INT 1
50201: PLUS
50202: ARRAY
50203: ST_TO_ADDR
50204: GO 50689
50206: LD_INT 16
50208: DOUBLE
50209: EQUAL
50210: IFTRUE 50268
50212: LD_INT 17
50214: DOUBLE
50215: EQUAL
50216: IFTRUE 50268
50218: LD_INT 18
50220: DOUBLE
50221: EQUAL
50222: IFTRUE 50268
50224: LD_INT 19
50226: DOUBLE
50227: EQUAL
50228: IFTRUE 50268
50230: LD_INT 22
50232: DOUBLE
50233: EQUAL
50234: IFTRUE 50268
50236: LD_INT 20
50238: DOUBLE
50239: EQUAL
50240: IFTRUE 50268
50242: LD_INT 21
50244: DOUBLE
50245: EQUAL
50246: IFTRUE 50268
50248: LD_INT 23
50250: DOUBLE
50251: EQUAL
50252: IFTRUE 50268
50254: LD_INT 24
50256: DOUBLE
50257: EQUAL
50258: IFTRUE 50268
50260: LD_INT 25
50262: DOUBLE
50263: EQUAL
50264: IFTRUE 50268
50266: GO 50324
50268: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50269: LD_ADDR_VAR 0 9
50273: PUSH
50274: LD_VAR 0 35
50278: PUSH
50279: LD_VAR 0 36
50283: PUSH
50284: LD_VAR 0 37
50288: PUSH
50289: LD_VAR 0 38
50293: PUSH
50294: LD_VAR 0 39
50298: PUSH
50299: LD_VAR 0 40
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: PUSH
50312: LD_VAR 0 4
50316: PUSH
50317: LD_INT 1
50319: PLUS
50320: ARRAY
50321: ST_TO_ADDR
50322: GO 50689
50324: LD_INT 6
50326: DOUBLE
50327: EQUAL
50328: IFTRUE 50380
50330: LD_INT 7
50332: DOUBLE
50333: EQUAL
50334: IFTRUE 50380
50336: LD_INT 8
50338: DOUBLE
50339: EQUAL
50340: IFTRUE 50380
50342: LD_INT 13
50344: DOUBLE
50345: EQUAL
50346: IFTRUE 50380
50348: LD_INT 12
50350: DOUBLE
50351: EQUAL
50352: IFTRUE 50380
50354: LD_INT 15
50356: DOUBLE
50357: EQUAL
50358: IFTRUE 50380
50360: LD_INT 11
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50380
50366: LD_INT 14
50368: DOUBLE
50369: EQUAL
50370: IFTRUE 50380
50372: LD_INT 10
50374: DOUBLE
50375: EQUAL
50376: IFTRUE 50380
50378: GO 50436
50380: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50381: LD_ADDR_VAR 0 9
50385: PUSH
50386: LD_VAR 0 41
50390: PUSH
50391: LD_VAR 0 42
50395: PUSH
50396: LD_VAR 0 43
50400: PUSH
50401: LD_VAR 0 44
50405: PUSH
50406: LD_VAR 0 45
50410: PUSH
50411: LD_VAR 0 46
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: PUSH
50424: LD_VAR 0 4
50428: PUSH
50429: LD_INT 1
50431: PLUS
50432: ARRAY
50433: ST_TO_ADDR
50434: GO 50689
50436: LD_INT 36
50438: DOUBLE
50439: EQUAL
50440: IFTRUE 50444
50442: GO 50500
50444: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50445: LD_ADDR_VAR 0 9
50449: PUSH
50450: LD_VAR 0 47
50454: PUSH
50455: LD_VAR 0 48
50459: PUSH
50460: LD_VAR 0 49
50464: PUSH
50465: LD_VAR 0 50
50469: PUSH
50470: LD_VAR 0 51
50474: PUSH
50475: LD_VAR 0 52
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: PUSH
50488: LD_VAR 0 4
50492: PUSH
50493: LD_INT 1
50495: PLUS
50496: ARRAY
50497: ST_TO_ADDR
50498: GO 50689
50500: LD_INT 4
50502: DOUBLE
50503: EQUAL
50504: IFTRUE 50526
50506: LD_INT 5
50508: DOUBLE
50509: EQUAL
50510: IFTRUE 50526
50512: LD_INT 34
50514: DOUBLE
50515: EQUAL
50516: IFTRUE 50526
50518: LD_INT 37
50520: DOUBLE
50521: EQUAL
50522: IFTRUE 50526
50524: GO 50582
50526: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50527: LD_ADDR_VAR 0 9
50531: PUSH
50532: LD_VAR 0 53
50536: PUSH
50537: LD_VAR 0 54
50541: PUSH
50542: LD_VAR 0 55
50546: PUSH
50547: LD_VAR 0 56
50551: PUSH
50552: LD_VAR 0 57
50556: PUSH
50557: LD_VAR 0 58
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: PUSH
50570: LD_VAR 0 4
50574: PUSH
50575: LD_INT 1
50577: PLUS
50578: ARRAY
50579: ST_TO_ADDR
50580: GO 50689
50582: LD_INT 31
50584: DOUBLE
50585: EQUAL
50586: IFTRUE 50632
50588: LD_INT 32
50590: DOUBLE
50591: EQUAL
50592: IFTRUE 50632
50594: LD_INT 33
50596: DOUBLE
50597: EQUAL
50598: IFTRUE 50632
50600: LD_INT 27
50602: DOUBLE
50603: EQUAL
50604: IFTRUE 50632
50606: LD_INT 26
50608: DOUBLE
50609: EQUAL
50610: IFTRUE 50632
50612: LD_INT 28
50614: DOUBLE
50615: EQUAL
50616: IFTRUE 50632
50618: LD_INT 29
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50632
50624: LD_INT 30
50626: DOUBLE
50627: EQUAL
50628: IFTRUE 50632
50630: GO 50688
50632: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50633: LD_ADDR_VAR 0 9
50637: PUSH
50638: LD_VAR 0 59
50642: PUSH
50643: LD_VAR 0 60
50647: PUSH
50648: LD_VAR 0 61
50652: PUSH
50653: LD_VAR 0 62
50657: PUSH
50658: LD_VAR 0 63
50662: PUSH
50663: LD_VAR 0 64
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: PUSH
50676: LD_VAR 0 4
50680: PUSH
50681: LD_INT 1
50683: PLUS
50684: ARRAY
50685: ST_TO_ADDR
50686: GO 50689
50688: POP
// temp_list2 = [ ] ;
50689: LD_ADDR_VAR 0 10
50693: PUSH
50694: EMPTY
50695: ST_TO_ADDR
// for i in temp_list do
50696: LD_ADDR_VAR 0 8
50700: PUSH
50701: LD_VAR 0 9
50705: PUSH
50706: FOR_IN
50707: IFFALSE 50759
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50709: LD_ADDR_VAR 0 10
50713: PUSH
50714: LD_VAR 0 10
50718: PUSH
50719: LD_VAR 0 8
50723: PUSH
50724: LD_INT 1
50726: ARRAY
50727: PUSH
50728: LD_VAR 0 2
50732: PLUS
50733: PUSH
50734: LD_VAR 0 8
50738: PUSH
50739: LD_INT 2
50741: ARRAY
50742: PUSH
50743: LD_VAR 0 3
50747: PLUS
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: ADD
50756: ST_TO_ADDR
50757: GO 50706
50759: POP
50760: POP
// result = temp_list2 ;
50761: LD_ADDR_VAR 0 7
50765: PUSH
50766: LD_VAR 0 10
50770: ST_TO_ADDR
// end ;
50771: LD_VAR 0 7
50775: RET
// export function EnemyInRange ( unit , dist ) ; begin
50776: LD_INT 0
50778: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50779: LD_ADDR_VAR 0 3
50783: PUSH
50784: LD_VAR 0 1
50788: PPUSH
50789: CALL_OW 255
50793: PPUSH
50794: LD_VAR 0 1
50798: PPUSH
50799: CALL_OW 250
50803: PPUSH
50804: LD_VAR 0 1
50808: PPUSH
50809: CALL_OW 251
50813: PPUSH
50814: LD_VAR 0 2
50818: PPUSH
50819: CALL 24033 0 4
50823: PUSH
50824: LD_INT 4
50826: ARRAY
50827: ST_TO_ADDR
// end ;
50828: LD_VAR 0 3
50832: RET
// export function PlayerSeeMe ( unit ) ; begin
50833: LD_INT 0
50835: PPUSH
// result := See ( your_side , unit ) ;
50836: LD_ADDR_VAR 0 2
50840: PUSH
50841: LD_OWVAR 2
50845: PPUSH
50846: LD_VAR 0 1
50850: PPUSH
50851: CALL_OW 292
50855: ST_TO_ADDR
// end ;
50856: LD_VAR 0 2
50860: RET
// export function ReverseDir ( unit ) ; begin
50861: LD_INT 0
50863: PPUSH
// if not unit then
50864: LD_VAR 0 1
50868: NOT
50869: IFFALSE 50873
// exit ;
50871: GO 50896
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50873: LD_ADDR_VAR 0 2
50877: PUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 254
50887: PUSH
50888: LD_INT 3
50890: PLUS
50891: PUSH
50892: LD_INT 6
50894: MOD
50895: ST_TO_ADDR
// end ;
50896: LD_VAR 0 2
50900: RET
// export function ReverseArray ( array ) ; var i ; begin
50901: LD_INT 0
50903: PPUSH
50904: PPUSH
// if not array then
50905: LD_VAR 0 1
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 50969
// result := [ ] ;
50914: LD_ADDR_VAR 0 2
50918: PUSH
50919: EMPTY
50920: ST_TO_ADDR
// for i := array downto 1 do
50921: LD_ADDR_VAR 0 3
50925: PUSH
50926: DOUBLE
50927: LD_VAR 0 1
50931: INC
50932: ST_TO_ADDR
50933: LD_INT 1
50935: PUSH
50936: FOR_DOWNTO
50937: IFFALSE 50967
// result := Join ( result , array [ i ] ) ;
50939: LD_ADDR_VAR 0 2
50943: PUSH
50944: LD_VAR 0 2
50948: PPUSH
50949: LD_VAR 0 1
50953: PUSH
50954: LD_VAR 0 3
50958: ARRAY
50959: PPUSH
50960: CALL 55811 0 2
50964: ST_TO_ADDR
50965: GO 50936
50967: POP
50968: POP
// end ;
50969: LD_VAR 0 2
50973: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50974: LD_INT 0
50976: PPUSH
50977: PPUSH
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
// if not unit or not hexes then
50982: LD_VAR 0 1
50986: NOT
50987: IFTRUE 50996
50989: PUSH
50990: LD_VAR 0 2
50994: NOT
50995: OR
50996: IFFALSE 51000
// exit ;
50998: GO 51123
// dist := 9999 ;
51000: LD_ADDR_VAR 0 5
51004: PUSH
51005: LD_INT 9999
51007: ST_TO_ADDR
// for i = 1 to hexes do
51008: LD_ADDR_VAR 0 4
51012: PUSH
51013: DOUBLE
51014: LD_INT 1
51016: DEC
51017: ST_TO_ADDR
51018: LD_VAR 0 2
51022: PUSH
51023: FOR_TO
51024: IFFALSE 51111
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51026: LD_ADDR_VAR 0 6
51030: PUSH
51031: LD_VAR 0 1
51035: PPUSH
51036: LD_VAR 0 2
51040: PUSH
51041: LD_VAR 0 4
51045: ARRAY
51046: PUSH
51047: LD_INT 1
51049: ARRAY
51050: PPUSH
51051: LD_VAR 0 2
51055: PUSH
51056: LD_VAR 0 4
51060: ARRAY
51061: PUSH
51062: LD_INT 2
51064: ARRAY
51065: PPUSH
51066: CALL_OW 297
51070: ST_TO_ADDR
// if tdist < dist then
51071: LD_VAR 0 6
51075: PUSH
51076: LD_VAR 0 5
51080: LESS
51081: IFFALSE 51109
// begin hex := hexes [ i ] ;
51083: LD_ADDR_VAR 0 8
51087: PUSH
51088: LD_VAR 0 2
51092: PUSH
51093: LD_VAR 0 4
51097: ARRAY
51098: ST_TO_ADDR
// dist := tdist ;
51099: LD_ADDR_VAR 0 5
51103: PUSH
51104: LD_VAR 0 6
51108: ST_TO_ADDR
// end ; end ;
51109: GO 51023
51111: POP
51112: POP
// result := hex ;
51113: LD_ADDR_VAR 0 3
51117: PUSH
51118: LD_VAR 0 8
51122: ST_TO_ADDR
// end ;
51123: LD_VAR 0 3
51127: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51128: LD_INT 0
51130: PPUSH
51131: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51132: LD_VAR 0 1
51136: NOT
51137: IFTRUE 51176
51139: PUSH
51140: LD_VAR 0 1
51144: PUSH
51145: LD_INT 21
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 23
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PPUSH
51169: CALL_OW 69
51173: IN
51174: NOT
51175: OR
51176: IFFALSE 51180
// exit ;
51178: GO 51227
// for i = 1 to 3 do
51180: LD_ADDR_VAR 0 3
51184: PUSH
51185: DOUBLE
51186: LD_INT 1
51188: DEC
51189: ST_TO_ADDR
51190: LD_INT 3
51192: PUSH
51193: FOR_TO
51194: IFFALSE 51225
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51196: LD_VAR 0 1
51200: PPUSH
51201: CALL_OW 250
51205: PPUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 251
51215: PPUSH
51216: LD_INT 1
51218: PPUSH
51219: CALL_OW 453
51223: GO 51193
51225: POP
51226: POP
// end ;
51227: LD_VAR 0 2
51231: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51232: LD_INT 0
51234: PPUSH
51235: PPUSH
51236: PPUSH
51237: PPUSH
51238: PPUSH
51239: PPUSH
// if not unit or not enemy_unit then
51240: LD_VAR 0 1
51244: NOT
51245: IFTRUE 51254
51247: PUSH
51248: LD_VAR 0 2
51252: NOT
51253: OR
51254: IFFALSE 51258
// exit ;
51256: GO 51729
// if GetLives ( i ) < 250 then
51258: LD_VAR 0 4
51262: PPUSH
51263: CALL_OW 256
51267: PUSH
51268: LD_INT 250
51270: LESS
51271: IFFALSE 51284
// begin ComAutodestruct ( i ) ;
51273: LD_VAR 0 4
51277: PPUSH
51278: CALL 51128 0 1
// exit ;
51282: GO 51729
// end ; x := GetX ( enemy_unit ) ;
51284: LD_ADDR_VAR 0 7
51288: PUSH
51289: LD_VAR 0 2
51293: PPUSH
51294: CALL_OW 250
51298: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51299: LD_ADDR_VAR 0 8
51303: PUSH
51304: LD_VAR 0 2
51308: PPUSH
51309: CALL_OW 251
51313: ST_TO_ADDR
// if not x or not y then
51314: LD_VAR 0 7
51318: NOT
51319: IFTRUE 51328
51321: PUSH
51322: LD_VAR 0 8
51326: NOT
51327: OR
51328: IFFALSE 51332
// exit ;
51330: GO 51729
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51332: LD_ADDR_VAR 0 6
51336: PUSH
51337: LD_VAR 0 7
51341: PPUSH
51342: LD_INT 0
51344: PPUSH
51345: LD_INT 4
51347: PPUSH
51348: CALL_OW 272
51352: PUSH
51353: LD_VAR 0 8
51357: PPUSH
51358: LD_INT 0
51360: PPUSH
51361: LD_INT 4
51363: PPUSH
51364: CALL_OW 273
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_VAR 0 7
51377: PPUSH
51378: LD_INT 1
51380: PPUSH
51381: LD_INT 4
51383: PPUSH
51384: CALL_OW 272
51388: PUSH
51389: LD_VAR 0 8
51393: PPUSH
51394: LD_INT 1
51396: PPUSH
51397: LD_INT 4
51399: PPUSH
51400: CALL_OW 273
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_VAR 0 7
51413: PPUSH
51414: LD_INT 2
51416: PPUSH
51417: LD_INT 4
51419: PPUSH
51420: CALL_OW 272
51424: PUSH
51425: LD_VAR 0 8
51429: PPUSH
51430: LD_INT 2
51432: PPUSH
51433: LD_INT 4
51435: PPUSH
51436: CALL_OW 273
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_VAR 0 7
51449: PPUSH
51450: LD_INT 3
51452: PPUSH
51453: LD_INT 4
51455: PPUSH
51456: CALL_OW 272
51460: PUSH
51461: LD_VAR 0 8
51465: PPUSH
51466: LD_INT 3
51468: PPUSH
51469: LD_INT 4
51471: PPUSH
51472: CALL_OW 273
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_VAR 0 7
51485: PPUSH
51486: LD_INT 4
51488: PPUSH
51489: LD_INT 4
51491: PPUSH
51492: CALL_OW 272
51496: PUSH
51497: LD_VAR 0 8
51501: PPUSH
51502: LD_INT 4
51504: PPUSH
51505: LD_INT 4
51507: PPUSH
51508: CALL_OW 273
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_VAR 0 7
51521: PPUSH
51522: LD_INT 5
51524: PPUSH
51525: LD_INT 4
51527: PPUSH
51528: CALL_OW 272
51532: PUSH
51533: LD_VAR 0 8
51537: PPUSH
51538: LD_INT 5
51540: PPUSH
51541: LD_INT 4
51543: PPUSH
51544: CALL_OW 273
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// for i = tmp downto 1 do
51561: LD_ADDR_VAR 0 4
51565: PUSH
51566: DOUBLE
51567: LD_VAR 0 6
51571: INC
51572: ST_TO_ADDR
51573: LD_INT 1
51575: PUSH
51576: FOR_DOWNTO
51577: IFFALSE 51680
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51579: LD_VAR 0 6
51583: PUSH
51584: LD_VAR 0 4
51588: ARRAY
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: PPUSH
51594: LD_VAR 0 6
51598: PUSH
51599: LD_VAR 0 4
51603: ARRAY
51604: PUSH
51605: LD_INT 2
51607: ARRAY
51608: PPUSH
51609: CALL_OW 488
51613: NOT
51614: IFTRUE 51656
51616: PUSH
51617: LD_VAR 0 6
51621: PUSH
51622: LD_VAR 0 4
51626: ARRAY
51627: PUSH
51628: LD_INT 1
51630: ARRAY
51631: PPUSH
51632: LD_VAR 0 6
51636: PUSH
51637: LD_VAR 0 4
51641: ARRAY
51642: PUSH
51643: LD_INT 2
51645: ARRAY
51646: PPUSH
51647: CALL_OW 428
51651: PUSH
51652: LD_INT 0
51654: NONEQUAL
51655: OR
51656: IFFALSE 51678
// tmp := Delete ( tmp , i ) ;
51658: LD_ADDR_VAR 0 6
51662: PUSH
51663: LD_VAR 0 6
51667: PPUSH
51668: LD_VAR 0 4
51672: PPUSH
51673: CALL_OW 3
51677: ST_TO_ADDR
51678: GO 51576
51680: POP
51681: POP
// j := GetClosestHex ( unit , tmp ) ;
51682: LD_ADDR_VAR 0 5
51686: PUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: LD_VAR 0 6
51696: PPUSH
51697: CALL 50974 0 2
51701: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51702: LD_VAR 0 1
51706: PPUSH
51707: LD_VAR 0 5
51711: PUSH
51712: LD_INT 1
51714: ARRAY
51715: PPUSH
51716: LD_VAR 0 5
51720: PUSH
51721: LD_INT 2
51723: ARRAY
51724: PPUSH
51725: CALL_OW 111
// end ;
51729: LD_VAR 0 3
51733: RET
// export function PrepareApemanSoldier ( ) ; begin
51734: LD_INT 0
51736: PPUSH
// uc_nation := 0 ;
51737: LD_ADDR_OWVAR 21
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// hc_sex := sex_male ;
51745: LD_ADDR_OWVAR 27
51749: PUSH
51750: LD_INT 1
51752: ST_TO_ADDR
// hc_name :=  ;
51753: LD_ADDR_OWVAR 26
51757: PUSH
51758: LD_STRING 
51760: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51761: LD_ADDR_OWVAR 28
51765: PUSH
51766: LD_INT 15
51768: ST_TO_ADDR
// hc_gallery :=  ;
51769: LD_ADDR_OWVAR 33
51773: PUSH
51774: LD_STRING 
51776: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51777: LD_ADDR_OWVAR 31
51781: PUSH
51782: LD_INT 0
51784: PPUSH
51785: LD_INT 3
51787: PPUSH
51788: CALL_OW 12
51792: PUSH
51793: LD_INT 0
51795: PPUSH
51796: LD_INT 3
51798: PPUSH
51799: CALL_OW 12
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51816: LD_ADDR_OWVAR 29
51820: PUSH
51821: LD_INT 12
51823: PUSH
51824: LD_INT 12
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// end ;
51831: LD_VAR 0 1
51835: RET
// export function PrepareApemanEngineer ( ) ; begin
51836: LD_INT 0
51838: PPUSH
// uc_nation := 0 ;
51839: LD_ADDR_OWVAR 21
51843: PUSH
51844: LD_INT 0
51846: ST_TO_ADDR
// hc_sex := sex_male ;
51847: LD_ADDR_OWVAR 27
51851: PUSH
51852: LD_INT 1
51854: ST_TO_ADDR
// hc_name :=  ;
51855: LD_ADDR_OWVAR 26
51859: PUSH
51860: LD_STRING 
51862: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51863: LD_ADDR_OWVAR 28
51867: PUSH
51868: LD_INT 16
51870: ST_TO_ADDR
// hc_gallery :=  ;
51871: LD_ADDR_OWVAR 33
51875: PUSH
51876: LD_STRING 
51878: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51879: LD_ADDR_OWVAR 31
51883: PUSH
51884: LD_INT 0
51886: PPUSH
51887: LD_INT 3
51889: PPUSH
51890: CALL_OW 12
51894: PUSH
51895: LD_INT 0
51897: PPUSH
51898: LD_INT 3
51900: PPUSH
51901: CALL_OW 12
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51918: LD_ADDR_OWVAR 29
51922: PUSH
51923: LD_INT 12
51925: PUSH
51926: LD_INT 12
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: ST_TO_ADDR
// end ;
51933: LD_VAR 0 1
51937: RET
// export function PrepareApeman ( agressivity ) ; begin
51938: LD_INT 0
51940: PPUSH
// uc_side := 0 ;
51941: LD_ADDR_OWVAR 20
51945: PUSH
51946: LD_INT 0
51948: ST_TO_ADDR
// uc_nation := 0 ;
51949: LD_ADDR_OWVAR 21
51953: PUSH
51954: LD_INT 0
51956: ST_TO_ADDR
// hc_sex := sex_male ;
51957: LD_ADDR_OWVAR 27
51961: PUSH
51962: LD_INT 1
51964: ST_TO_ADDR
// hc_class := class_apeman ;
51965: LD_ADDR_OWVAR 28
51969: PUSH
51970: LD_INT 12
51972: ST_TO_ADDR
// hc_gallery :=  ;
51973: LD_ADDR_OWVAR 33
51977: PUSH
51978: LD_STRING 
51980: ST_TO_ADDR
// hc_name :=  ;
51981: LD_ADDR_OWVAR 26
51985: PUSH
51986: LD_STRING 
51988: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51989: LD_ADDR_OWVAR 29
51993: PUSH
51994: LD_INT 12
51996: PUSH
51997: LD_INT 12
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// if agressivity = 0 then
52004: LD_VAR 0 1
52008: PUSH
52009: LD_INT 0
52011: EQUAL
52012: IFFALSE 52024
// hc_agressivity := 0 else
52014: LD_ADDR_OWVAR 35
52018: PUSH
52019: LD_INT 0
52021: ST_TO_ADDR
52022: GO 52045
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52024: LD_ADDR_OWVAR 35
52028: PUSH
52029: LD_VAR 0 1
52033: NEG
52034: PPUSH
52035: LD_VAR 0 1
52039: PPUSH
52040: CALL_OW 12
52044: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
52045: LD_ADDR_OWVAR 31
52049: PUSH
52050: LD_INT 0
52052: PPUSH
52053: LD_INT 3
52055: PPUSH
52056: CALL_OW 12
52060: PUSH
52061: LD_INT 0
52063: PPUSH
52064: LD_INT 3
52066: PPUSH
52067: CALL_OW 12
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// end ;
52084: LD_VAR 0 2
52088: RET
// export function PrepareTiger ( agressivity ) ; begin
52089: LD_INT 0
52091: PPUSH
// uc_side := 0 ;
52092: LD_ADDR_OWVAR 20
52096: PUSH
52097: LD_INT 0
52099: ST_TO_ADDR
// uc_nation := 0 ;
52100: LD_ADDR_OWVAR 21
52104: PUSH
52105: LD_INT 0
52107: ST_TO_ADDR
// InitHc ;
52108: CALL_OW 19
// hc_class := class_tiger ;
52112: LD_ADDR_OWVAR 28
52116: PUSH
52117: LD_INT 14
52119: ST_TO_ADDR
// hc_gallery :=  ;
52120: LD_ADDR_OWVAR 33
52124: PUSH
52125: LD_STRING 
52127: ST_TO_ADDR
// hc_name :=  ;
52128: LD_ADDR_OWVAR 26
52132: PUSH
52133: LD_STRING 
52135: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52136: LD_ADDR_OWVAR 35
52140: PUSH
52141: LD_VAR 0 1
52145: NEG
52146: PPUSH
52147: LD_VAR 0 1
52151: PPUSH
52152: CALL_OW 12
52156: ST_TO_ADDR
// end ;
52157: LD_VAR 0 2
52161: RET
// export function PrepareEnchidna ( ) ; begin
52162: LD_INT 0
52164: PPUSH
// uc_side := 0 ;
52165: LD_ADDR_OWVAR 20
52169: PUSH
52170: LD_INT 0
52172: ST_TO_ADDR
// uc_nation := 0 ;
52173: LD_ADDR_OWVAR 21
52177: PUSH
52178: LD_INT 0
52180: ST_TO_ADDR
// InitHc ;
52181: CALL_OW 19
// hc_class := class_baggie ;
52185: LD_ADDR_OWVAR 28
52189: PUSH
52190: LD_INT 13
52192: ST_TO_ADDR
// hc_gallery :=  ;
52193: LD_ADDR_OWVAR 33
52197: PUSH
52198: LD_STRING 
52200: ST_TO_ADDR
// hc_name :=  ;
52201: LD_ADDR_OWVAR 26
52205: PUSH
52206: LD_STRING 
52208: ST_TO_ADDR
// end ;
52209: LD_VAR 0 1
52213: RET
// export function PrepareFrog ( ) ; begin
52214: LD_INT 0
52216: PPUSH
// uc_side := 0 ;
52217: LD_ADDR_OWVAR 20
52221: PUSH
52222: LD_INT 0
52224: ST_TO_ADDR
// uc_nation := 0 ;
52225: LD_ADDR_OWVAR 21
52229: PUSH
52230: LD_INT 0
52232: ST_TO_ADDR
// InitHc ;
52233: CALL_OW 19
// hc_class := class_frog ;
52237: LD_ADDR_OWVAR 28
52241: PUSH
52242: LD_INT 19
52244: ST_TO_ADDR
// hc_gallery :=  ;
52245: LD_ADDR_OWVAR 33
52249: PUSH
52250: LD_STRING 
52252: ST_TO_ADDR
// hc_name :=  ;
52253: LD_ADDR_OWVAR 26
52257: PUSH
52258: LD_STRING 
52260: ST_TO_ADDR
// end ;
52261: LD_VAR 0 1
52265: RET
// export function PrepareFish ( ) ; begin
52266: LD_INT 0
52268: PPUSH
// uc_side := 0 ;
52269: LD_ADDR_OWVAR 20
52273: PUSH
52274: LD_INT 0
52276: ST_TO_ADDR
// uc_nation := 0 ;
52277: LD_ADDR_OWVAR 21
52281: PUSH
52282: LD_INT 0
52284: ST_TO_ADDR
// InitHc ;
52285: CALL_OW 19
// hc_class := class_fish ;
52289: LD_ADDR_OWVAR 28
52293: PUSH
52294: LD_INT 20
52296: ST_TO_ADDR
// hc_gallery :=  ;
52297: LD_ADDR_OWVAR 33
52301: PUSH
52302: LD_STRING 
52304: ST_TO_ADDR
// hc_name :=  ;
52305: LD_ADDR_OWVAR 26
52309: PUSH
52310: LD_STRING 
52312: ST_TO_ADDR
// end ;
52313: LD_VAR 0 1
52317: RET
// export function PrepareBird ( ) ; begin
52318: LD_INT 0
52320: PPUSH
// uc_side := 0 ;
52321: LD_ADDR_OWVAR 20
52325: PUSH
52326: LD_INT 0
52328: ST_TO_ADDR
// uc_nation := 0 ;
52329: LD_ADDR_OWVAR 21
52333: PUSH
52334: LD_INT 0
52336: ST_TO_ADDR
// InitHc ;
52337: CALL_OW 19
// hc_class := class_phororhacos ;
52341: LD_ADDR_OWVAR 28
52345: PUSH
52346: LD_INT 18
52348: ST_TO_ADDR
// hc_gallery :=  ;
52349: LD_ADDR_OWVAR 33
52353: PUSH
52354: LD_STRING 
52356: ST_TO_ADDR
// hc_name :=  ;
52357: LD_ADDR_OWVAR 26
52361: PUSH
52362: LD_STRING 
52364: ST_TO_ADDR
// end ;
52365: LD_VAR 0 1
52369: RET
// export function PrepareHorse ( ) ; begin
52370: LD_INT 0
52372: PPUSH
// uc_side := 0 ;
52373: LD_ADDR_OWVAR 20
52377: PUSH
52378: LD_INT 0
52380: ST_TO_ADDR
// uc_nation := 0 ;
52381: LD_ADDR_OWVAR 21
52385: PUSH
52386: LD_INT 0
52388: ST_TO_ADDR
// InitHc ;
52389: CALL_OW 19
// hc_class := class_horse ;
52393: LD_ADDR_OWVAR 28
52397: PUSH
52398: LD_INT 21
52400: ST_TO_ADDR
// hc_gallery :=  ;
52401: LD_ADDR_OWVAR 33
52405: PUSH
52406: LD_STRING 
52408: ST_TO_ADDR
// hc_name :=  ;
52409: LD_ADDR_OWVAR 26
52413: PUSH
52414: LD_STRING 
52416: ST_TO_ADDR
// end ;
52417: LD_VAR 0 1
52421: RET
// export function PrepareMastodont ( ) ; begin
52422: LD_INT 0
52424: PPUSH
// uc_side := 0 ;
52425: LD_ADDR_OWVAR 20
52429: PUSH
52430: LD_INT 0
52432: ST_TO_ADDR
// uc_nation := 0 ;
52433: LD_ADDR_OWVAR 21
52437: PUSH
52438: LD_INT 0
52440: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52441: LD_ADDR_OWVAR 37
52445: PUSH
52446: LD_INT 31
52448: ST_TO_ADDR
// vc_control := control_rider ;
52449: LD_ADDR_OWVAR 38
52453: PUSH
52454: LD_INT 4
52456: ST_TO_ADDR
// end ;
52457: LD_VAR 0 1
52461: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52462: LD_INT 0
52464: PPUSH
52465: PPUSH
52466: PPUSH
// uc_side = 0 ;
52467: LD_ADDR_OWVAR 20
52471: PUSH
52472: LD_INT 0
52474: ST_TO_ADDR
// uc_nation = 0 ;
52475: LD_ADDR_OWVAR 21
52479: PUSH
52480: LD_INT 0
52482: ST_TO_ADDR
// InitHc_All ( ) ;
52483: CALL_OW 584
// InitVc ;
52487: CALL_OW 20
// if mastodonts then
52491: LD_VAR 0 6
52495: IFFALSE 52562
// for i = 1 to mastodonts do
52497: LD_ADDR_VAR 0 11
52501: PUSH
52502: DOUBLE
52503: LD_INT 1
52505: DEC
52506: ST_TO_ADDR
52507: LD_VAR 0 6
52511: PUSH
52512: FOR_TO
52513: IFFALSE 52560
// begin vc_chassis := 31 ;
52515: LD_ADDR_OWVAR 37
52519: PUSH
52520: LD_INT 31
52522: ST_TO_ADDR
// vc_control := control_rider ;
52523: LD_ADDR_OWVAR 38
52527: PUSH
52528: LD_INT 4
52530: ST_TO_ADDR
// animal := CreateVehicle ;
52531: LD_ADDR_VAR 0 12
52535: PUSH
52536: CALL_OW 45
52540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52541: LD_VAR 0 12
52545: PPUSH
52546: LD_VAR 0 8
52550: PPUSH
52551: LD_INT 0
52553: PPUSH
52554: CALL 54704 0 3
// end ;
52558: GO 52512
52560: POP
52561: POP
// if horses then
52562: LD_VAR 0 5
52566: IFFALSE 52633
// for i = 1 to horses do
52568: LD_ADDR_VAR 0 11
52572: PUSH
52573: DOUBLE
52574: LD_INT 1
52576: DEC
52577: ST_TO_ADDR
52578: LD_VAR 0 5
52582: PUSH
52583: FOR_TO
52584: IFFALSE 52631
// begin hc_class := 21 ;
52586: LD_ADDR_OWVAR 28
52590: PUSH
52591: LD_INT 21
52593: ST_TO_ADDR
// hc_gallery :=  ;
52594: LD_ADDR_OWVAR 33
52598: PUSH
52599: LD_STRING 
52601: ST_TO_ADDR
// animal := CreateHuman ;
52602: LD_ADDR_VAR 0 12
52606: PUSH
52607: CALL_OW 44
52611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52612: LD_VAR 0 12
52616: PPUSH
52617: LD_VAR 0 8
52621: PPUSH
52622: LD_INT 0
52624: PPUSH
52625: CALL 54704 0 3
// end ;
52629: GO 52583
52631: POP
52632: POP
// if birds then
52633: LD_VAR 0 1
52637: IFFALSE 52704
// for i = 1 to birds do
52639: LD_ADDR_VAR 0 11
52643: PUSH
52644: DOUBLE
52645: LD_INT 1
52647: DEC
52648: ST_TO_ADDR
52649: LD_VAR 0 1
52653: PUSH
52654: FOR_TO
52655: IFFALSE 52702
// begin hc_class := 18 ;
52657: LD_ADDR_OWVAR 28
52661: PUSH
52662: LD_INT 18
52664: ST_TO_ADDR
// hc_gallery =  ;
52665: LD_ADDR_OWVAR 33
52669: PUSH
52670: LD_STRING 
52672: ST_TO_ADDR
// animal := CreateHuman ;
52673: LD_ADDR_VAR 0 12
52677: PUSH
52678: CALL_OW 44
52682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52683: LD_VAR 0 12
52687: PPUSH
52688: LD_VAR 0 8
52692: PPUSH
52693: LD_INT 0
52695: PPUSH
52696: CALL 54704 0 3
// end ;
52700: GO 52654
52702: POP
52703: POP
// if tigers then
52704: LD_VAR 0 2
52708: IFFALSE 52792
// for i = 1 to tigers do
52710: LD_ADDR_VAR 0 11
52714: PUSH
52715: DOUBLE
52716: LD_INT 1
52718: DEC
52719: ST_TO_ADDR
52720: LD_VAR 0 2
52724: PUSH
52725: FOR_TO
52726: IFFALSE 52790
// begin hc_class = class_tiger ;
52728: LD_ADDR_OWVAR 28
52732: PUSH
52733: LD_INT 14
52735: ST_TO_ADDR
// hc_gallery =  ;
52736: LD_ADDR_OWVAR 33
52740: PUSH
52741: LD_STRING 
52743: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52744: LD_ADDR_OWVAR 35
52748: PUSH
52749: LD_INT 7
52751: NEG
52752: PPUSH
52753: LD_INT 7
52755: PPUSH
52756: CALL_OW 12
52760: ST_TO_ADDR
// animal := CreateHuman ;
52761: LD_ADDR_VAR 0 12
52765: PUSH
52766: CALL_OW 44
52770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52771: LD_VAR 0 12
52775: PPUSH
52776: LD_VAR 0 8
52780: PPUSH
52781: LD_INT 0
52783: PPUSH
52784: CALL 54704 0 3
// end ;
52788: GO 52725
52790: POP
52791: POP
// if apemans then
52792: LD_VAR 0 3
52796: IFFALSE 52919
// for i = 1 to apemans do
52798: LD_ADDR_VAR 0 11
52802: PUSH
52803: DOUBLE
52804: LD_INT 1
52806: DEC
52807: ST_TO_ADDR
52808: LD_VAR 0 3
52812: PUSH
52813: FOR_TO
52814: IFFALSE 52917
// begin hc_class = class_apeman ;
52816: LD_ADDR_OWVAR 28
52820: PUSH
52821: LD_INT 12
52823: ST_TO_ADDR
// hc_gallery =  ;
52824: LD_ADDR_OWVAR 33
52828: PUSH
52829: LD_STRING 
52831: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52832: LD_ADDR_OWVAR 35
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PPUSH
52841: LD_INT 2
52843: PPUSH
52844: CALL_OW 12
52848: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52849: LD_ADDR_OWVAR 31
52853: PUSH
52854: LD_INT 1
52856: PPUSH
52857: LD_INT 3
52859: PPUSH
52860: CALL_OW 12
52864: PUSH
52865: LD_INT 1
52867: PPUSH
52868: LD_INT 3
52870: PPUSH
52871: CALL_OW 12
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// animal := CreateHuman ;
52888: LD_ADDR_VAR 0 12
52892: PUSH
52893: CALL_OW 44
52897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52898: LD_VAR 0 12
52902: PPUSH
52903: LD_VAR 0 8
52907: PPUSH
52908: LD_INT 0
52910: PPUSH
52911: CALL 54704 0 3
// end ;
52915: GO 52813
52917: POP
52918: POP
// if enchidnas then
52919: LD_VAR 0 4
52923: IFFALSE 52990
// for i = 1 to enchidnas do
52925: LD_ADDR_VAR 0 11
52929: PUSH
52930: DOUBLE
52931: LD_INT 1
52933: DEC
52934: ST_TO_ADDR
52935: LD_VAR 0 4
52939: PUSH
52940: FOR_TO
52941: IFFALSE 52988
// begin hc_class = 13 ;
52943: LD_ADDR_OWVAR 28
52947: PUSH
52948: LD_INT 13
52950: ST_TO_ADDR
// hc_gallery =  ;
52951: LD_ADDR_OWVAR 33
52955: PUSH
52956: LD_STRING 
52958: ST_TO_ADDR
// animal := CreateHuman ;
52959: LD_ADDR_VAR 0 12
52963: PUSH
52964: CALL_OW 44
52968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52969: LD_VAR 0 12
52973: PPUSH
52974: LD_VAR 0 8
52978: PPUSH
52979: LD_INT 0
52981: PPUSH
52982: CALL 54704 0 3
// end ;
52986: GO 52940
52988: POP
52989: POP
// if fishes then
52990: LD_VAR 0 7
52994: IFFALSE 53061
// for i = 1 to fishes do
52996: LD_ADDR_VAR 0 11
53000: PUSH
53001: DOUBLE
53002: LD_INT 1
53004: DEC
53005: ST_TO_ADDR
53006: LD_VAR 0 7
53010: PUSH
53011: FOR_TO
53012: IFFALSE 53059
// begin hc_class = 20 ;
53014: LD_ADDR_OWVAR 28
53018: PUSH
53019: LD_INT 20
53021: ST_TO_ADDR
// hc_gallery =  ;
53022: LD_ADDR_OWVAR 33
53026: PUSH
53027: LD_STRING 
53029: ST_TO_ADDR
// animal := CreateHuman ;
53030: LD_ADDR_VAR 0 12
53034: PUSH
53035: CALL_OW 44
53039: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53040: LD_VAR 0 12
53044: PPUSH
53045: LD_VAR 0 9
53049: PPUSH
53050: LD_INT 0
53052: PPUSH
53053: CALL 54704 0 3
// end ;
53057: GO 53011
53059: POP
53060: POP
// end ;
53061: LD_VAR 0 10
53065: RET
// export function WantHeal ( sci , unit ) ; begin
53066: LD_INT 0
53068: PPUSH
// if GetTaskList ( sci ) > 0 then
53069: LD_VAR 0 1
53073: PPUSH
53074: CALL_OW 437
53078: PUSH
53079: LD_INT 0
53081: GREATER
53082: IFFALSE 53154
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53084: LD_VAR 0 1
53088: PPUSH
53089: CALL_OW 437
53093: PUSH
53094: LD_INT 1
53096: ARRAY
53097: PUSH
53098: LD_INT 1
53100: ARRAY
53101: PUSH
53102: LD_STRING l
53104: EQUAL
53105: IFFALSE 53132
53107: PUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 437
53117: PUSH
53118: LD_INT 1
53120: ARRAY
53121: PUSH
53122: LD_INT 4
53124: ARRAY
53125: PUSH
53126: LD_VAR 0 2
53130: EQUAL
53131: AND
53132: IFFALSE 53144
// result := true else
53134: LD_ADDR_VAR 0 3
53138: PUSH
53139: LD_INT 1
53141: ST_TO_ADDR
53142: GO 53152
// result := false ;
53144: LD_ADDR_VAR 0 3
53148: PUSH
53149: LD_INT 0
53151: ST_TO_ADDR
// end else
53152: GO 53162
// result := false ;
53154: LD_ADDR_VAR 0 3
53158: PUSH
53159: LD_INT 0
53161: ST_TO_ADDR
// end ;
53162: LD_VAR 0 3
53166: RET
// export function HealTarget ( sci ) ; begin
53167: LD_INT 0
53169: PPUSH
// if not sci then
53170: LD_VAR 0 1
53174: NOT
53175: IFFALSE 53179
// exit ;
53177: GO 53244
// result := 0 ;
53179: LD_ADDR_VAR 0 2
53183: PUSH
53184: LD_INT 0
53186: ST_TO_ADDR
// if GetTaskList ( sci ) then
53187: LD_VAR 0 1
53191: PPUSH
53192: CALL_OW 437
53196: IFFALSE 53244
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53198: LD_VAR 0 1
53202: PPUSH
53203: CALL_OW 437
53207: PUSH
53208: LD_INT 1
53210: ARRAY
53211: PUSH
53212: LD_INT 1
53214: ARRAY
53215: PUSH
53216: LD_STRING l
53218: EQUAL
53219: IFFALSE 53244
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53221: LD_ADDR_VAR 0 2
53225: PUSH
53226: LD_VAR 0 1
53230: PPUSH
53231: CALL_OW 437
53235: PUSH
53236: LD_INT 1
53238: ARRAY
53239: PUSH
53240: LD_INT 4
53242: ARRAY
53243: ST_TO_ADDR
// end ;
53244: LD_VAR 0 2
53248: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53249: LD_INT 0
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
// if not base_units then
53255: LD_VAR 0 1
53259: NOT
53260: IFFALSE 53264
// exit ;
53262: GO 53351
// result := false ;
53264: LD_ADDR_VAR 0 2
53268: PUSH
53269: LD_INT 0
53271: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53272: LD_ADDR_VAR 0 5
53276: PUSH
53277: LD_VAR 0 1
53281: PPUSH
53282: LD_INT 21
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PPUSH
53292: CALL_OW 72
53296: ST_TO_ADDR
// if not tmp then
53297: LD_VAR 0 5
53301: NOT
53302: IFFALSE 53306
// exit ;
53304: GO 53351
// for i in tmp do
53306: LD_ADDR_VAR 0 3
53310: PUSH
53311: LD_VAR 0 5
53315: PUSH
53316: FOR_IN
53317: IFFALSE 53349
// begin result := EnemyInRange ( i , 22 ) ;
53319: LD_ADDR_VAR 0 2
53323: PUSH
53324: LD_VAR 0 3
53328: PPUSH
53329: LD_INT 22
53331: PPUSH
53332: CALL 50776 0 2
53336: ST_TO_ADDR
// if result then
53337: LD_VAR 0 2
53341: IFFALSE 53347
// exit ;
53343: POP
53344: POP
53345: GO 53351
// end ;
53347: GO 53316
53349: POP
53350: POP
// end ;
53351: LD_VAR 0 2
53355: RET
// export function FilterByTag ( units , tag ) ; begin
53356: LD_INT 0
53358: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53359: LD_ADDR_VAR 0 3
53363: PUSH
53364: LD_VAR 0 1
53368: PPUSH
53369: LD_INT 120
53371: PUSH
53372: LD_VAR 0 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PPUSH
53381: CALL_OW 72
53385: ST_TO_ADDR
// end ;
53386: LD_VAR 0 3
53390: RET
// export function IsDriver ( un ) ; begin
53391: LD_INT 0
53393: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53394: LD_ADDR_VAR 0 2
53398: PUSH
53399: LD_VAR 0 1
53403: PUSH
53404: LD_INT 55
53406: PUSH
53407: EMPTY
53408: LIST
53409: PPUSH
53410: CALL_OW 69
53414: IN
53415: ST_TO_ADDR
// end ;
53416: LD_VAR 0 2
53420: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53421: LD_INT 0
53423: PPUSH
53424: PPUSH
// list := [ ] ;
53425: LD_ADDR_VAR 0 5
53429: PUSH
53430: EMPTY
53431: ST_TO_ADDR
// case d of 0 :
53432: LD_VAR 0 3
53436: PUSH
53437: LD_INT 0
53439: DOUBLE
53440: EQUAL
53441: IFTRUE 53445
53443: GO 53578
53445: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53446: LD_ADDR_VAR 0 5
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: LD_INT 4
53458: MINUS
53459: PUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 4
53467: MINUS
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: LD_VAR 0 1
53481: PUSH
53482: LD_INT 3
53484: MINUS
53485: PUSH
53486: LD_VAR 0 2
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: PUSH
53499: LD_VAR 0 1
53503: PUSH
53504: LD_INT 4
53506: PLUS
53507: PUSH
53508: LD_VAR 0 2
53512: PUSH
53513: LD_INT 4
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_INT 3
53528: PLUS
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 3
53537: PLUS
53538: PUSH
53539: LD_INT 5
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: PUSH
53547: LD_VAR 0 1
53551: PUSH
53552: LD_VAR 0 2
53556: PUSH
53557: LD_INT 4
53559: PLUS
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// end ; 1 :
53576: GO 54276
53578: LD_INT 1
53580: DOUBLE
53581: EQUAL
53582: IFTRUE 53586
53584: GO 53719
53586: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53587: LD_ADDR_VAR 0 5
53591: PUSH
53592: LD_VAR 0 1
53596: PUSH
53597: LD_VAR 0 2
53601: PUSH
53602: LD_INT 4
53604: MINUS
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: PUSH
53614: LD_VAR 0 1
53618: PUSH
53619: LD_INT 3
53621: MINUS
53622: PUSH
53623: LD_VAR 0 2
53627: PUSH
53628: LD_INT 3
53630: MINUS
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: PUSH
53640: LD_VAR 0 1
53644: PUSH
53645: LD_INT 4
53647: MINUS
53648: PUSH
53649: LD_VAR 0 2
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: LD_VAR 0 1
53666: PUSH
53667: LD_VAR 0 2
53671: PUSH
53672: LD_INT 3
53674: PLUS
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: PUSH
53684: LD_VAR 0 1
53688: PUSH
53689: LD_INT 4
53691: PLUS
53692: PUSH
53693: LD_VAR 0 2
53697: PUSH
53698: LD_INT 4
53700: PLUS
53701: PUSH
53702: LD_INT 5
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// end ; 2 :
53717: GO 54276
53719: LD_INT 2
53721: DOUBLE
53722: EQUAL
53723: IFTRUE 53727
53725: GO 53856
53727: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53728: LD_ADDR_VAR 0 5
53732: PUSH
53733: LD_VAR 0 1
53737: PUSH
53738: LD_VAR 0 2
53742: PUSH
53743: LD_INT 3
53745: MINUS
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: LD_VAR 0 1
53759: PUSH
53760: LD_INT 4
53762: PLUS
53763: PUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_INT 4
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: PUSH
53777: LD_VAR 0 1
53781: PUSH
53782: LD_VAR 0 2
53786: PUSH
53787: LD_INT 4
53789: PLUS
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: PUSH
53799: LD_VAR 0 1
53803: PUSH
53804: LD_INT 3
53806: MINUS
53807: PUSH
53808: LD_VAR 0 2
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: PUSH
53821: LD_VAR 0 1
53825: PUSH
53826: LD_INT 4
53828: MINUS
53829: PUSH
53830: LD_VAR 0 2
53834: PUSH
53835: LD_INT 4
53837: MINUS
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
// end ; 3 :
53854: GO 54276
53856: LD_INT 3
53858: DOUBLE
53859: EQUAL
53860: IFTRUE 53864
53862: GO 53997
53864: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53865: LD_ADDR_VAR 0 5
53869: PUSH
53870: LD_VAR 0 1
53874: PUSH
53875: LD_INT 3
53877: PLUS
53878: PUSH
53879: LD_VAR 0 2
53883: PUSH
53884: LD_INT 4
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: PUSH
53892: LD_VAR 0 1
53896: PUSH
53897: LD_INT 4
53899: PLUS
53900: PUSH
53901: LD_VAR 0 2
53905: PUSH
53906: LD_INT 4
53908: PLUS
53909: PUSH
53910: LD_INT 5
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: PUSH
53918: LD_VAR 0 1
53922: PUSH
53923: LD_INT 4
53925: MINUS
53926: PUSH
53927: LD_VAR 0 2
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: PUSH
53940: LD_VAR 0 1
53944: PUSH
53945: LD_VAR 0 2
53949: PUSH
53950: LD_INT 4
53952: MINUS
53953: PUSH
53954: LD_INT 3
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: PUSH
53962: LD_VAR 0 1
53966: PUSH
53967: LD_INT 3
53969: MINUS
53970: PUSH
53971: LD_VAR 0 2
53975: PUSH
53976: LD_INT 3
53978: MINUS
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// end ; 4 :
53995: GO 54276
53997: LD_INT 4
53999: DOUBLE
54000: EQUAL
54001: IFTRUE 54005
54003: GO 54138
54005: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54006: LD_ADDR_VAR 0 5
54010: PUSH
54011: LD_VAR 0 1
54015: PUSH
54016: LD_VAR 0 2
54020: PUSH
54021: LD_INT 4
54023: PLUS
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: PUSH
54033: LD_VAR 0 1
54037: PUSH
54038: LD_INT 3
54040: PLUS
54041: PUSH
54042: LD_VAR 0 2
54046: PUSH
54047: LD_INT 3
54049: PLUS
54050: PUSH
54051: LD_INT 5
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: PUSH
54059: LD_VAR 0 1
54063: PUSH
54064: LD_INT 4
54066: PLUS
54067: PUSH
54068: LD_VAR 0 2
54072: PUSH
54073: LD_INT 4
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: PUSH
54081: LD_VAR 0 1
54085: PUSH
54086: LD_VAR 0 2
54090: PUSH
54091: LD_INT 3
54093: MINUS
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: PUSH
54103: LD_VAR 0 1
54107: PUSH
54108: LD_INT 4
54110: MINUS
54111: PUSH
54112: LD_VAR 0 2
54116: PUSH
54117: LD_INT 4
54119: MINUS
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// end ; 5 :
54136: GO 54276
54138: LD_INT 5
54140: DOUBLE
54141: EQUAL
54142: IFTRUE 54146
54144: GO 54275
54146: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54147: LD_ADDR_VAR 0 5
54151: PUSH
54152: LD_VAR 0 1
54156: PUSH
54157: LD_INT 4
54159: MINUS
54160: PUSH
54161: LD_VAR 0 2
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: PUSH
54174: LD_VAR 0 1
54178: PUSH
54179: LD_VAR 0 2
54183: PUSH
54184: LD_INT 4
54186: MINUS
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: PUSH
54196: LD_VAR 0 1
54200: PUSH
54201: LD_INT 4
54203: PLUS
54204: PUSH
54205: LD_VAR 0 2
54209: PUSH
54210: LD_INT 4
54212: PLUS
54213: PUSH
54214: LD_INT 5
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: PUSH
54222: LD_VAR 0 1
54226: PUSH
54227: LD_INT 3
54229: PLUS
54230: PUSH
54231: LD_VAR 0 2
54235: PUSH
54236: LD_INT 4
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: PUSH
54244: LD_VAR 0 1
54248: PUSH
54249: LD_VAR 0 2
54253: PUSH
54254: LD_INT 3
54256: PLUS
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// end ; end ;
54273: GO 54276
54275: POP
// result := list ;
54276: LD_ADDR_VAR 0 4
54280: PUSH
54281: LD_VAR 0 5
54285: ST_TO_ADDR
// end ;
54286: LD_VAR 0 4
54290: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54291: LD_INT 0
54293: PPUSH
54294: PPUSH
54295: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54296: LD_VAR 0 1
54300: NOT
54301: IFTRUE 54329
54303: PUSH
54304: LD_VAR 0 2
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: IN
54327: NOT
54328: OR
54329: IFFALSE 54333
// exit ;
54331: GO 54416
// tmp := [ ] ;
54333: LD_ADDR_VAR 0 5
54337: PUSH
54338: EMPTY
54339: ST_TO_ADDR
// for i in units do
54340: LD_ADDR_VAR 0 4
54344: PUSH
54345: LD_VAR 0 1
54349: PUSH
54350: FOR_IN
54351: IFFALSE 54385
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54353: LD_ADDR_VAR 0 5
54357: PUSH
54358: LD_VAR 0 5
54362: PPUSH
54363: LD_VAR 0 4
54367: PPUSH
54368: LD_VAR 0 2
54372: PPUSH
54373: CALL_OW 259
54377: PPUSH
54378: CALL 55811 0 2
54382: ST_TO_ADDR
54383: GO 54350
54385: POP
54386: POP
// if not tmp then
54387: LD_VAR 0 5
54391: NOT
54392: IFFALSE 54396
// exit ;
54394: GO 54416
// result := SortListByListDesc ( units , tmp ) ;
54396: LD_ADDR_VAR 0 3
54400: PUSH
54401: LD_VAR 0 1
54405: PPUSH
54406: LD_VAR 0 5
54410: PPUSH
54411: CALL_OW 77
54415: ST_TO_ADDR
// end ;
54416: LD_VAR 0 3
54420: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54421: LD_INT 0
54423: PPUSH
54424: PPUSH
54425: PPUSH
// result := false ;
54426: LD_ADDR_VAR 0 3
54430: PUSH
54431: LD_INT 0
54433: ST_TO_ADDR
// if not building then
54434: LD_VAR 0 2
54438: NOT
54439: IFFALSE 54443
// exit ;
54441: GO 54587
// x := GetX ( building ) ;
54443: LD_ADDR_VAR 0 4
54447: PUSH
54448: LD_VAR 0 2
54452: PPUSH
54453: CALL_OW 250
54457: ST_TO_ADDR
// y := GetY ( building ) ;
54458: LD_ADDR_VAR 0 5
54462: PUSH
54463: LD_VAR 0 2
54467: PPUSH
54468: CALL_OW 251
54472: ST_TO_ADDR
// if not x or not y then
54473: LD_VAR 0 4
54477: NOT
54478: IFTRUE 54487
54480: PUSH
54481: LD_VAR 0 5
54485: NOT
54486: OR
54487: IFFALSE 54491
// exit ;
54489: GO 54587
// if GetTaskList ( unit ) then
54491: LD_VAR 0 1
54495: PPUSH
54496: CALL_OW 437
54500: IFFALSE 54587
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54502: LD_STRING e
54504: PUSH
54505: LD_VAR 0 1
54509: PPUSH
54510: CALL_OW 437
54514: PUSH
54515: LD_INT 1
54517: ARRAY
54518: PUSH
54519: LD_INT 1
54521: ARRAY
54522: EQUAL
54523: IFFALSE 54550
54525: PUSH
54526: LD_VAR 0 4
54530: PUSH
54531: LD_VAR 0 1
54535: PPUSH
54536: CALL_OW 437
54540: PUSH
54541: LD_INT 1
54543: ARRAY
54544: PUSH
54545: LD_INT 2
54547: ARRAY
54548: EQUAL
54549: AND
54550: IFFALSE 54577
54552: PUSH
54553: LD_VAR 0 5
54557: PUSH
54558: LD_VAR 0 1
54562: PPUSH
54563: CALL_OW 437
54567: PUSH
54568: LD_INT 1
54570: ARRAY
54571: PUSH
54572: LD_INT 3
54574: ARRAY
54575: EQUAL
54576: AND
54577: IFFALSE 54587
// result := true end ;
54579: LD_ADDR_VAR 0 3
54583: PUSH
54584: LD_INT 1
54586: ST_TO_ADDR
// end ;
54587: LD_VAR 0 3
54591: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54592: LD_INT 0
54594: PPUSH
// result := false ;
54595: LD_ADDR_VAR 0 4
54599: PUSH
54600: LD_INT 0
54602: ST_TO_ADDR
// if GetTaskList ( unit ) then
54603: LD_VAR 0 1
54607: PPUSH
54608: CALL_OW 437
54612: IFFALSE 54699
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54614: LD_STRING M
54616: PUSH
54617: LD_VAR 0 1
54621: PPUSH
54622: CALL_OW 437
54626: PUSH
54627: LD_INT 1
54629: ARRAY
54630: PUSH
54631: LD_INT 1
54633: ARRAY
54634: EQUAL
54635: IFFALSE 54662
54637: PUSH
54638: LD_VAR 0 2
54642: PUSH
54643: LD_VAR 0 1
54647: PPUSH
54648: CALL_OW 437
54652: PUSH
54653: LD_INT 1
54655: ARRAY
54656: PUSH
54657: LD_INT 2
54659: ARRAY
54660: EQUAL
54661: AND
54662: IFFALSE 54689
54664: PUSH
54665: LD_VAR 0 3
54669: PUSH
54670: LD_VAR 0 1
54674: PPUSH
54675: CALL_OW 437
54679: PUSH
54680: LD_INT 1
54682: ARRAY
54683: PUSH
54684: LD_INT 3
54686: ARRAY
54687: EQUAL
54688: AND
54689: IFFALSE 54699
// result := true ;
54691: LD_ADDR_VAR 0 4
54695: PUSH
54696: LD_INT 1
54698: ST_TO_ADDR
// end ; end ;
54699: LD_VAR 0 4
54703: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54704: LD_INT 0
54706: PPUSH
54707: PPUSH
54708: PPUSH
54709: PPUSH
// if not unit or not area then
54710: LD_VAR 0 1
54714: NOT
54715: IFTRUE 54724
54717: PUSH
54718: LD_VAR 0 2
54722: NOT
54723: OR
54724: IFFALSE 54728
// exit ;
54726: GO 54904
// tmp := AreaToList ( area , i ) ;
54728: LD_ADDR_VAR 0 6
54732: PUSH
54733: LD_VAR 0 2
54737: PPUSH
54738: LD_VAR 0 5
54742: PPUSH
54743: CALL_OW 517
54747: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54748: LD_ADDR_VAR 0 5
54752: PUSH
54753: DOUBLE
54754: LD_INT 1
54756: DEC
54757: ST_TO_ADDR
54758: LD_VAR 0 6
54762: PUSH
54763: LD_INT 1
54765: ARRAY
54766: PUSH
54767: FOR_TO
54768: IFFALSE 54902
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54770: LD_ADDR_VAR 0 7
54774: PUSH
54775: LD_VAR 0 6
54779: PUSH
54780: LD_INT 1
54782: ARRAY
54783: PUSH
54784: LD_VAR 0 5
54788: ARRAY
54789: PUSH
54790: LD_VAR 0 6
54794: PUSH
54795: LD_INT 2
54797: ARRAY
54798: PUSH
54799: LD_VAR 0 5
54803: ARRAY
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54809: LD_INT 92
54811: PUSH
54812: LD_VAR 0 7
54816: PUSH
54817: LD_INT 1
54819: ARRAY
54820: PUSH
54821: LD_VAR 0 7
54825: PUSH
54826: LD_INT 2
54828: ARRAY
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: PPUSH
54839: CALL_OW 69
54843: PUSH
54844: LD_INT 0
54846: EQUAL
54847: IFFALSE 54900
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54849: LD_VAR 0 1
54853: PPUSH
54854: LD_VAR 0 7
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PPUSH
54863: LD_VAR 0 7
54867: PUSH
54868: LD_INT 2
54870: ARRAY
54871: PPUSH
54872: LD_VAR 0 3
54876: PPUSH
54877: CALL_OW 48
// result := IsPlaced ( unit ) ;
54881: LD_ADDR_VAR 0 4
54885: PUSH
54886: LD_VAR 0 1
54890: PPUSH
54891: CALL_OW 305
54895: ST_TO_ADDR
// exit ;
54896: POP
54897: POP
54898: GO 54904
// end ; end ;
54900: GO 54767
54902: POP
54903: POP
// end ;
54904: LD_VAR 0 4
54908: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54909: LD_INT 0
54911: PPUSH
54912: PPUSH
54913: PPUSH
// if not side or side > 8 then
54914: LD_VAR 0 1
54918: NOT
54919: IFTRUE 54931
54921: PUSH
54922: LD_VAR 0 1
54926: PUSH
54927: LD_INT 8
54929: GREATER
54930: OR
54931: IFFALSE 54935
// exit ;
54933: GO 55122
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54935: LD_ADDR_VAR 0 4
54939: PUSH
54940: LD_INT 22
54942: PUSH
54943: LD_VAR 0 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 21
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PPUSH
54966: CALL_OW 69
54970: ST_TO_ADDR
// if not tmp then
54971: LD_VAR 0 4
54975: NOT
54976: IFFALSE 54980
// exit ;
54978: GO 55122
// enable_addtolog := true ;
54980: LD_ADDR_OWVAR 81
54984: PUSH
54985: LD_INT 1
54987: ST_TO_ADDR
// AddToLog ( [ ) ;
54988: LD_STRING [
54990: PPUSH
54991: CALL_OW 561
// for i in tmp do
54995: LD_ADDR_VAR 0 3
54999: PUSH
55000: LD_VAR 0 4
55004: PUSH
55005: FOR_IN
55006: IFFALSE 55113
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55008: LD_STRING [
55010: PUSH
55011: LD_VAR 0 3
55015: PPUSH
55016: CALL_OW 266
55020: STR
55021: PUSH
55022: LD_STRING , 
55024: STR
55025: PUSH
55026: LD_VAR 0 3
55030: PPUSH
55031: CALL_OW 250
55035: STR
55036: PUSH
55037: LD_STRING , 
55039: STR
55040: PUSH
55041: LD_VAR 0 3
55045: PPUSH
55046: CALL_OW 251
55050: STR
55051: PUSH
55052: LD_STRING , 
55054: STR
55055: PUSH
55056: LD_VAR 0 3
55060: PPUSH
55061: CALL_OW 254
55065: STR
55066: PUSH
55067: LD_STRING , 
55069: STR
55070: PUSH
55071: LD_VAR 0 3
55075: PPUSH
55076: LD_INT 1
55078: PPUSH
55079: CALL_OW 268
55083: STR
55084: PUSH
55085: LD_STRING , 
55087: STR
55088: PUSH
55089: LD_VAR 0 3
55093: PPUSH
55094: LD_INT 2
55096: PPUSH
55097: CALL_OW 268
55101: STR
55102: PUSH
55103: LD_STRING ],
55105: STR
55106: PPUSH
55107: CALL_OW 561
// end ;
55111: GO 55005
55113: POP
55114: POP
// AddToLog ( ]; ) ;
55115: LD_STRING ];
55117: PPUSH
55118: CALL_OW 561
// end ;
55122: LD_VAR 0 2
55126: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55127: LD_INT 0
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
// if not area or not rate or not max then
55134: LD_VAR 0 1
55138: NOT
55139: IFTRUE 55148
55141: PUSH
55142: LD_VAR 0 2
55146: NOT
55147: OR
55148: IFTRUE 55157
55150: PUSH
55151: LD_VAR 0 4
55155: NOT
55156: OR
55157: IFFALSE 55161
// exit ;
55159: GO 55350
// while 1 do
55161: LD_INT 1
55163: IFFALSE 55350
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55165: LD_ADDR_VAR 0 9
55169: PUSH
55170: LD_VAR 0 1
55174: PPUSH
55175: LD_INT 1
55177: PPUSH
55178: CALL_OW 287
55182: PUSH
55183: LD_INT 10
55185: MUL
55186: ST_TO_ADDR
// r := rate / 10 ;
55187: LD_ADDR_VAR 0 7
55191: PUSH
55192: LD_VAR 0 2
55196: PUSH
55197: LD_INT 10
55199: DIVREAL
55200: ST_TO_ADDR
// time := 1 1$00 ;
55201: LD_ADDR_VAR 0 8
55205: PUSH
55206: LD_INT 2100
55208: ST_TO_ADDR
// if amount < min then
55209: LD_VAR 0 9
55213: PUSH
55214: LD_VAR 0 3
55218: LESS
55219: IFFALSE 55237
// r := r * 2 else
55221: LD_ADDR_VAR 0 7
55225: PUSH
55226: LD_VAR 0 7
55230: PUSH
55231: LD_INT 2
55233: MUL
55234: ST_TO_ADDR
55235: GO 55263
// if amount > max then
55237: LD_VAR 0 9
55241: PUSH
55242: LD_VAR 0 4
55246: GREATER
55247: IFFALSE 55263
// r := r / 2 ;
55249: LD_ADDR_VAR 0 7
55253: PUSH
55254: LD_VAR 0 7
55258: PUSH
55259: LD_INT 2
55261: DIVREAL
55262: ST_TO_ADDR
// time := time / r ;
55263: LD_ADDR_VAR 0 8
55267: PUSH
55268: LD_VAR 0 8
55272: PUSH
55273: LD_VAR 0 7
55277: DIVREAL
55278: ST_TO_ADDR
// if time < 0 then
55279: LD_VAR 0 8
55283: PUSH
55284: LD_INT 0
55286: LESS
55287: IFFALSE 55304
// time := time * - 1 ;
55289: LD_ADDR_VAR 0 8
55293: PUSH
55294: LD_VAR 0 8
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: MUL
55303: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55304: LD_VAR 0 8
55308: PUSH
55309: LD_INT 35
55311: PPUSH
55312: LD_INT 875
55314: PPUSH
55315: CALL_OW 12
55319: PLUS
55320: PPUSH
55321: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55325: LD_INT 1
55327: PPUSH
55328: LD_INT 5
55330: PPUSH
55331: CALL_OW 12
55335: PPUSH
55336: LD_VAR 0 1
55340: PPUSH
55341: LD_INT 1
55343: PPUSH
55344: CALL_OW 55
// end ;
55348: GO 55161
// end ;
55350: LD_VAR 0 5
55354: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55355: LD_INT 0
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
55364: PPUSH
// if not turrets or not factories then
55365: LD_VAR 0 1
55369: NOT
55370: IFTRUE 55379
55372: PUSH
55373: LD_VAR 0 2
55377: NOT
55378: OR
55379: IFFALSE 55383
// exit ;
55381: GO 55690
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55383: LD_ADDR_VAR 0 10
55387: PUSH
55388: LD_INT 5
55390: PUSH
55391: LD_INT 6
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 5
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 24
55425: PUSH
55426: LD_INT 25
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 23
55435: PUSH
55436: LD_INT 27
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 42
55449: PUSH
55450: LD_INT 43
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 44
55459: PUSH
55460: LD_INT 46
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 45
55469: PUSH
55470: LD_INT 47
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// result := [ ] ;
55487: LD_ADDR_VAR 0 3
55491: PUSH
55492: EMPTY
55493: ST_TO_ADDR
// for i in turrets do
55494: LD_ADDR_VAR 0 4
55498: PUSH
55499: LD_VAR 0 1
55503: PUSH
55504: FOR_IN
55505: IFFALSE 55688
// begin nat := GetNation ( i ) ;
55507: LD_ADDR_VAR 0 7
55511: PUSH
55512: LD_VAR 0 4
55516: PPUSH
55517: CALL_OW 248
55521: ST_TO_ADDR
// weapon := 0 ;
55522: LD_ADDR_VAR 0 8
55526: PUSH
55527: LD_INT 0
55529: ST_TO_ADDR
// if not nat then
55530: LD_VAR 0 7
55534: NOT
55535: IFFALSE 55539
// continue ;
55537: GO 55504
// for j in list [ nat ] do
55539: LD_ADDR_VAR 0 5
55543: PUSH
55544: LD_VAR 0 10
55548: PUSH
55549: LD_VAR 0 7
55553: ARRAY
55554: PUSH
55555: FOR_IN
55556: IFFALSE 55597
// if GetBWeapon ( i ) = j [ 1 ] then
55558: LD_VAR 0 4
55562: PPUSH
55563: CALL_OW 269
55567: PUSH
55568: LD_VAR 0 5
55572: PUSH
55573: LD_INT 1
55575: ARRAY
55576: EQUAL
55577: IFFALSE 55595
// begin weapon := j [ 2 ] ;
55579: LD_ADDR_VAR 0 8
55583: PUSH
55584: LD_VAR 0 5
55588: PUSH
55589: LD_INT 2
55591: ARRAY
55592: ST_TO_ADDR
// break ;
55593: GO 55597
// end ;
55595: GO 55555
55597: POP
55598: POP
// if not weapon then
55599: LD_VAR 0 8
55603: NOT
55604: IFFALSE 55608
// continue ;
55606: GO 55504
// for k in factories do
55608: LD_ADDR_VAR 0 6
55612: PUSH
55613: LD_VAR 0 2
55617: PUSH
55618: FOR_IN
55619: IFFALSE 55684
// begin weapons := AvailableWeaponList ( k ) ;
55621: LD_ADDR_VAR 0 9
55625: PUSH
55626: LD_VAR 0 6
55630: PPUSH
55631: CALL_OW 478
55635: ST_TO_ADDR
// if not weapons then
55636: LD_VAR 0 9
55640: NOT
55641: IFFALSE 55645
// continue ;
55643: GO 55618
// if weapon in weapons then
55645: LD_VAR 0 8
55649: PUSH
55650: LD_VAR 0 9
55654: IN
55655: IFFALSE 55682
// begin result := [ i , weapon ] ;
55657: LD_ADDR_VAR 0 3
55661: PUSH
55662: LD_VAR 0 4
55666: PUSH
55667: LD_VAR 0 8
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// exit ;
55676: POP
55677: POP
55678: POP
55679: POP
55680: GO 55690
// end ; end ;
55682: GO 55618
55684: POP
55685: POP
// end ;
55686: GO 55504
55688: POP
55689: POP
// end ;
55690: LD_VAR 0 3
55694: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55695: LD_INT 0
55697: PPUSH
// if not side or side > 8 then
55698: LD_VAR 0 3
55702: NOT
55703: IFTRUE 55715
55705: PUSH
55706: LD_VAR 0 3
55710: PUSH
55711: LD_INT 8
55713: GREATER
55714: OR
55715: IFFALSE 55719
// exit ;
55717: GO 55778
// if not range then
55719: LD_VAR 0 4
55723: NOT
55724: IFFALSE 55735
// range := - 12 ;
55726: LD_ADDR_VAR 0 4
55730: PUSH
55731: LD_INT 12
55733: NEG
55734: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55735: LD_VAR 0 1
55739: PPUSH
55740: LD_VAR 0 2
55744: PPUSH
55745: LD_VAR 0 3
55749: PPUSH
55750: LD_VAR 0 4
55754: PPUSH
55755: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55759: LD_VAR 0 1
55763: PPUSH
55764: LD_VAR 0 2
55768: PPUSH
55769: LD_VAR 0 3
55773: PPUSH
55774: CALL_OW 331
// end ;
55778: LD_VAR 0 5
55782: RET
// export function Video ( mode ) ; begin
55783: LD_INT 0
55785: PPUSH
// ingame_video = mode ;
55786: LD_ADDR_OWVAR 52
55790: PUSH
55791: LD_VAR 0 1
55795: ST_TO_ADDR
// interface_hidden = mode ;
55796: LD_ADDR_OWVAR 54
55800: PUSH
55801: LD_VAR 0 1
55805: ST_TO_ADDR
// end ;
55806: LD_VAR 0 2
55810: RET
// export function Join ( array , element ) ; begin
55811: LD_INT 0
55813: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55814: LD_ADDR_VAR 0 3
55818: PUSH
55819: LD_VAR 0 1
55823: PPUSH
55824: LD_VAR 0 1
55828: PUSH
55829: LD_INT 1
55831: PLUS
55832: PPUSH
55833: LD_VAR 0 2
55837: PPUSH
55838: CALL_OW 1
55842: ST_TO_ADDR
// end ;
55843: LD_VAR 0 3
55847: RET
// export function JoinUnion ( array , element ) ; begin
55848: LD_INT 0
55850: PPUSH
// result := array union element ;
55851: LD_ADDR_VAR 0 3
55855: PUSH
55856: LD_VAR 0 1
55860: PUSH
55861: LD_VAR 0 2
55865: UNION
55866: ST_TO_ADDR
// end ;
55867: LD_VAR 0 3
55871: RET
// export function GetBehemoths ( side ) ; begin
55872: LD_INT 0
55874: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55875: LD_ADDR_VAR 0 2
55879: PUSH
55880: LD_INT 22
55882: PUSH
55883: LD_VAR 0 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 31
55894: PUSH
55895: LD_INT 25
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PPUSH
55906: CALL_OW 69
55910: ST_TO_ADDR
// end ;
55911: LD_VAR 0 2
55915: RET
// export function Shuffle ( array ) ; var i , index ; begin
55916: LD_INT 0
55918: PPUSH
55919: PPUSH
55920: PPUSH
// result := [ ] ;
55921: LD_ADDR_VAR 0 2
55925: PUSH
55926: EMPTY
55927: ST_TO_ADDR
// if not array then
55928: LD_VAR 0 1
55932: NOT
55933: IFFALSE 55937
// exit ;
55935: GO 56036
// Randomize ;
55937: CALL_OW 10
// for i = array downto 1 do
55941: LD_ADDR_VAR 0 3
55945: PUSH
55946: DOUBLE
55947: LD_VAR 0 1
55951: INC
55952: ST_TO_ADDR
55953: LD_INT 1
55955: PUSH
55956: FOR_DOWNTO
55957: IFFALSE 56034
// begin index := rand ( 1 , array ) ;
55959: LD_ADDR_VAR 0 4
55963: PUSH
55964: LD_INT 1
55966: PPUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 12
55976: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55977: LD_ADDR_VAR 0 2
55981: PUSH
55982: LD_VAR 0 2
55986: PPUSH
55987: LD_VAR 0 2
55991: PUSH
55992: LD_INT 1
55994: PLUS
55995: PPUSH
55996: LD_VAR 0 1
56000: PUSH
56001: LD_VAR 0 4
56005: ARRAY
56006: PPUSH
56007: CALL_OW 2
56011: ST_TO_ADDR
// array := Delete ( array , index ) ;
56012: LD_ADDR_VAR 0 1
56016: PUSH
56017: LD_VAR 0 1
56021: PPUSH
56022: LD_VAR 0 4
56026: PPUSH
56027: CALL_OW 3
56031: ST_TO_ADDR
// end ;
56032: GO 55956
56034: POP
56035: POP
// end ;
56036: LD_VAR 0 2
56040: RET
// export function GetBaseMaterials ( base ) ; begin
56041: LD_INT 0
56043: PPUSH
// result := [ 0 , 0 , 0 ] ;
56044: LD_ADDR_VAR 0 2
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: ST_TO_ADDR
// if not base then
56063: LD_VAR 0 1
56067: NOT
56068: IFFALSE 56072
// exit ;
56070: GO 56121
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56072: LD_ADDR_VAR 0 2
56076: PUSH
56077: LD_VAR 0 1
56081: PPUSH
56082: LD_INT 1
56084: PPUSH
56085: CALL_OW 275
56089: PUSH
56090: LD_VAR 0 1
56094: PPUSH
56095: LD_INT 2
56097: PPUSH
56098: CALL_OW 275
56102: PUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: LD_INT 3
56110: PPUSH
56111: CALL_OW 275
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// end ;
56121: LD_VAR 0 2
56125: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56126: LD_INT 0
56128: PPUSH
56129: PPUSH
// result := array ;
56130: LD_ADDR_VAR 0 3
56134: PUSH
56135: LD_VAR 0 1
56139: ST_TO_ADDR
// if size >= result then
56140: LD_VAR 0 2
56144: PUSH
56145: LD_VAR 0 3
56149: GREATEREQUAL
56150: IFFALSE 56154
// exit ;
56152: GO 56204
// if size then
56154: LD_VAR 0 2
56158: IFFALSE 56204
// for i := array downto size do
56160: LD_ADDR_VAR 0 4
56164: PUSH
56165: DOUBLE
56166: LD_VAR 0 1
56170: INC
56171: ST_TO_ADDR
56172: LD_VAR 0 2
56176: PUSH
56177: FOR_DOWNTO
56178: IFFALSE 56202
// result := Delete ( result , result ) ;
56180: LD_ADDR_VAR 0 3
56184: PUSH
56185: LD_VAR 0 3
56189: PPUSH
56190: LD_VAR 0 3
56194: PPUSH
56195: CALL_OW 3
56199: ST_TO_ADDR
56200: GO 56177
56202: POP
56203: POP
// end ;
56204: LD_VAR 0 3
56208: RET
// export function ComExit ( unit ) ; var tmp ; begin
56209: LD_INT 0
56211: PPUSH
56212: PPUSH
// if not IsInUnit ( unit ) then
56213: LD_VAR 0 1
56217: PPUSH
56218: CALL_OW 310
56222: NOT
56223: IFFALSE 56227
// exit ;
56225: GO 56287
// tmp := IsInUnit ( unit ) ;
56227: LD_ADDR_VAR 0 3
56231: PUSH
56232: LD_VAR 0 1
56236: PPUSH
56237: CALL_OW 310
56241: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56242: LD_VAR 0 3
56246: PPUSH
56247: CALL_OW 247
56251: PUSH
56252: LD_INT 2
56254: EQUAL
56255: IFFALSE 56268
// ComExitVehicle ( unit ) else
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 121
56266: GO 56277
// ComExitBuilding ( unit ) ;
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 122
// result := tmp ;
56277: LD_ADDR_VAR 0 2
56281: PUSH
56282: LD_VAR 0 3
56286: ST_TO_ADDR
// end ;
56287: LD_VAR 0 2
56291: RET
// export function ComExitAll ( units ) ; var i ; begin
56292: LD_INT 0
56294: PPUSH
56295: PPUSH
// if not units then
56296: LD_VAR 0 1
56300: NOT
56301: IFFALSE 56305
// exit ;
56303: GO 56331
// for i in units do
56305: LD_ADDR_VAR 0 3
56309: PUSH
56310: LD_VAR 0 1
56314: PUSH
56315: FOR_IN
56316: IFFALSE 56329
// ComExit ( i ) ;
56318: LD_VAR 0 3
56322: PPUSH
56323: CALL 56209 0 1
56327: GO 56315
56329: POP
56330: POP
// end ;
56331: LD_VAR 0 2
56335: RET
// export function ResetHc ; begin
56336: LD_INT 0
56338: PPUSH
// InitHc ;
56339: CALL_OW 19
// hc_importance := 0 ;
56343: LD_ADDR_OWVAR 32
56347: PUSH
56348: LD_INT 0
56350: ST_TO_ADDR
// end ;
56351: LD_VAR 0 1
56355: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56356: LD_INT 0
56358: PPUSH
56359: PPUSH
56360: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56361: LD_ADDR_VAR 0 6
56365: PUSH
56366: LD_VAR 0 1
56370: PUSH
56371: LD_VAR 0 3
56375: PLUS
56376: PUSH
56377: LD_INT 2
56379: DIV
56380: ST_TO_ADDR
// if _x < 0 then
56381: LD_VAR 0 6
56385: PUSH
56386: LD_INT 0
56388: LESS
56389: IFFALSE 56406
// _x := _x * - 1 ;
56391: LD_ADDR_VAR 0 6
56395: PUSH
56396: LD_VAR 0 6
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: MUL
56405: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56406: LD_ADDR_VAR 0 7
56410: PUSH
56411: LD_VAR 0 2
56415: PUSH
56416: LD_VAR 0 4
56420: PLUS
56421: PUSH
56422: LD_INT 2
56424: DIV
56425: ST_TO_ADDR
// if _y < 0 then
56426: LD_VAR 0 7
56430: PUSH
56431: LD_INT 0
56433: LESS
56434: IFFALSE 56451
// _y := _y * - 1 ;
56436: LD_ADDR_VAR 0 7
56440: PUSH
56441: LD_VAR 0 7
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: MUL
56450: ST_TO_ADDR
// result := [ _x , _y ] ;
56451: LD_ADDR_VAR 0 5
56455: PUSH
56456: LD_VAR 0 6
56460: PUSH
56461: LD_VAR 0 7
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// end ;
56470: LD_VAR 0 5
56474: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56475: LD_INT 0
56477: PPUSH
56478: PPUSH
56479: PPUSH
56480: PPUSH
// task := GetTaskList ( unit ) ;
56481: LD_ADDR_VAR 0 7
56485: PUSH
56486: LD_VAR 0 1
56490: PPUSH
56491: CALL_OW 437
56495: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56496: LD_VAR 0 7
56500: NOT
56501: IFFALSE 56520
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_VAR 0 2
56513: PPUSH
56514: CALL_OW 308
56518: NOT
56519: AND
56520: IFFALSE 56524
// exit ;
56522: GO 56642
// if IsInArea ( unit , area ) then
56524: LD_VAR 0 1
56528: PPUSH
56529: LD_VAR 0 2
56533: PPUSH
56534: CALL_OW 308
56538: IFFALSE 56556
// begin ComMoveToArea ( unit , goAway ) ;
56540: LD_VAR 0 1
56544: PPUSH
56545: LD_VAR 0 3
56549: PPUSH
56550: CALL_OW 113
// exit ;
56554: GO 56642
// end ; if task [ 1 ] [ 1 ] <> M then
56556: LD_VAR 0 7
56560: PUSH
56561: LD_INT 1
56563: ARRAY
56564: PUSH
56565: LD_INT 1
56567: ARRAY
56568: PUSH
56569: LD_STRING M
56571: NONEQUAL
56572: IFFALSE 56576
// exit ;
56574: GO 56642
// x := task [ 1 ] [ 2 ] ;
56576: LD_ADDR_VAR 0 5
56580: PUSH
56581: LD_VAR 0 7
56585: PUSH
56586: LD_INT 1
56588: ARRAY
56589: PUSH
56590: LD_INT 2
56592: ARRAY
56593: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56594: LD_ADDR_VAR 0 6
56598: PUSH
56599: LD_VAR 0 7
56603: PUSH
56604: LD_INT 1
56606: ARRAY
56607: PUSH
56608: LD_INT 3
56610: ARRAY
56611: ST_TO_ADDR
// if InArea ( x , y , area ) then
56612: LD_VAR 0 5
56616: PPUSH
56617: LD_VAR 0 6
56621: PPUSH
56622: LD_VAR 0 2
56626: PPUSH
56627: CALL_OW 309
56631: IFFALSE 56642
// ComStop ( unit ) ;
56633: LD_VAR 0 1
56637: PPUSH
56638: CALL_OW 141
// end ;
56642: LD_VAR 0 4
56646: RET
// export function Abs ( value ) ; begin
56647: LD_INT 0
56649: PPUSH
// result := value ;
56650: LD_ADDR_VAR 0 2
56654: PUSH
56655: LD_VAR 0 1
56659: ST_TO_ADDR
// if value < 0 then
56660: LD_VAR 0 1
56664: PUSH
56665: LD_INT 0
56667: LESS
56668: IFFALSE 56685
// result := value * - 1 ;
56670: LD_ADDR_VAR 0 2
56674: PUSH
56675: LD_VAR 0 1
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: MUL
56684: ST_TO_ADDR
// end ;
56685: LD_VAR 0 2
56689: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56690: LD_INT 0
56692: PPUSH
56693: PPUSH
56694: PPUSH
56695: PPUSH
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
// if not unit or not building then
56700: LD_VAR 0 1
56704: NOT
56705: IFTRUE 56714
56707: PUSH
56708: LD_VAR 0 2
56712: NOT
56713: OR
56714: IFFALSE 56718
// exit ;
56716: GO 56946
// x := GetX ( building ) ;
56718: LD_ADDR_VAR 0 4
56722: PUSH
56723: LD_VAR 0 2
56727: PPUSH
56728: CALL_OW 250
56732: ST_TO_ADDR
// y := GetY ( building ) ;
56733: LD_ADDR_VAR 0 6
56737: PUSH
56738: LD_VAR 0 2
56742: PPUSH
56743: CALL_OW 251
56747: ST_TO_ADDR
// d := GetDir ( building ) ;
56748: LD_ADDR_VAR 0 8
56752: PUSH
56753: LD_VAR 0 2
56757: PPUSH
56758: CALL_OW 254
56762: ST_TO_ADDR
// r := 4 ;
56763: LD_ADDR_VAR 0 9
56767: PUSH
56768: LD_INT 4
56770: ST_TO_ADDR
// for i := 1 to 5 do
56771: LD_ADDR_VAR 0 10
56775: PUSH
56776: DOUBLE
56777: LD_INT 1
56779: DEC
56780: ST_TO_ADDR
56781: LD_INT 5
56783: PUSH
56784: FOR_TO
56785: IFFALSE 56944
// begin _x := ShiftX ( x , d , r + i ) ;
56787: LD_ADDR_VAR 0 5
56791: PUSH
56792: LD_VAR 0 4
56796: PPUSH
56797: LD_VAR 0 8
56801: PPUSH
56802: LD_VAR 0 9
56806: PUSH
56807: LD_VAR 0 10
56811: PLUS
56812: PPUSH
56813: CALL_OW 272
56817: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56818: LD_ADDR_VAR 0 7
56822: PUSH
56823: LD_VAR 0 6
56827: PPUSH
56828: LD_VAR 0 8
56832: PPUSH
56833: LD_VAR 0 9
56837: PUSH
56838: LD_VAR 0 10
56842: PLUS
56843: PPUSH
56844: CALL_OW 273
56848: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56849: LD_VAR 0 5
56853: PPUSH
56854: LD_VAR 0 7
56858: PPUSH
56859: CALL_OW 488
56863: IFFALSE 56898
56865: PUSH
56866: LD_VAR 0 5
56870: PPUSH
56871: LD_VAR 0 7
56875: PPUSH
56876: CALL_OW 428
56880: PPUSH
56881: CALL_OW 247
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: IN
56896: NOT
56897: AND
56898: IFFALSE 56942
// begin ComMoveXY ( unit , _x , _y ) ;
56900: LD_VAR 0 1
56904: PPUSH
56905: LD_VAR 0 5
56909: PPUSH
56910: LD_VAR 0 7
56914: PPUSH
56915: CALL_OW 111
// result := [ _x , _y ] ;
56919: LD_ADDR_VAR 0 3
56923: PUSH
56924: LD_VAR 0 5
56928: PUSH
56929: LD_VAR 0 7
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: ST_TO_ADDR
// exit ;
56938: POP
56939: POP
56940: GO 56946
// end ; end ;
56942: GO 56784
56944: POP
56945: POP
// end ;
56946: LD_VAR 0 3
56950: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56951: LD_INT 0
56953: PPUSH
56954: PPUSH
56955: PPUSH
// result := 0 ;
56956: LD_ADDR_VAR 0 3
56960: PUSH
56961: LD_INT 0
56963: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56964: LD_VAR 0 1
56968: PUSH
56969: LD_INT 0
56971: LESS
56972: IFTRUE 56984
56974: PUSH
56975: LD_VAR 0 1
56979: PUSH
56980: LD_INT 8
56982: GREATER
56983: OR
56984: IFTRUE 56996
56986: PUSH
56987: LD_VAR 0 2
56991: PUSH
56992: LD_INT 0
56994: LESS
56995: OR
56996: IFTRUE 57008
56998: PUSH
56999: LD_VAR 0 2
57003: PUSH
57004: LD_INT 8
57006: GREATER
57007: OR
57008: IFFALSE 57012
// exit ;
57010: GO 57087
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57012: LD_ADDR_VAR 0 4
57016: PUSH
57017: LD_INT 22
57019: PUSH
57020: LD_VAR 0 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PPUSH
57029: CALL_OW 69
57033: PUSH
57034: FOR_IN
57035: IFFALSE 57085
// begin un := UnitShoot ( i ) ;
57037: LD_ADDR_VAR 0 5
57041: PUSH
57042: LD_VAR 0 4
57046: PPUSH
57047: CALL_OW 504
57051: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57052: LD_VAR 0 5
57056: PPUSH
57057: CALL_OW 255
57061: PUSH
57062: LD_VAR 0 1
57066: EQUAL
57067: IFFALSE 57083
// begin result := un ;
57069: LD_ADDR_VAR 0 3
57073: PUSH
57074: LD_VAR 0 5
57078: ST_TO_ADDR
// exit ;
57079: POP
57080: POP
57081: GO 57087
// end ; end ;
57083: GO 57034
57085: POP
57086: POP
// end ;
57087: LD_VAR 0 3
57091: RET
// export function GetCargoBay ( units ) ; begin
57092: LD_INT 0
57094: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57095: LD_ADDR_VAR 0 2
57099: PUSH
57100: LD_VAR 0 1
57104: PPUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 34
57110: PUSH
57111: LD_INT 12
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 34
57120: PUSH
57121: LD_INT 51
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 34
57130: PUSH
57131: LD_INT 32
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 34
57140: PUSH
57141: LD_INT 89
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: PPUSH
57155: CALL_OW 72
57159: ST_TO_ADDR
// end ;
57160: LD_VAR 0 2
57164: RET
// export function Negate ( value ) ; begin
57165: LD_INT 0
57167: PPUSH
// result := not value ;
57168: LD_ADDR_VAR 0 2
57172: PUSH
57173: LD_VAR 0 1
57177: NOT
57178: ST_TO_ADDR
// end ;
57179: LD_VAR 0 2
57183: RET
// export function Inc ( value ) ; begin
57184: LD_INT 0
57186: PPUSH
// result := value + 1 ;
57187: LD_ADDR_VAR 0 2
57191: PUSH
57192: LD_VAR 0 1
57196: PUSH
57197: LD_INT 1
57199: PLUS
57200: ST_TO_ADDR
// end ;
57201: LD_VAR 0 2
57205: RET
// export function Dec ( value ) ; begin
57206: LD_INT 0
57208: PPUSH
// result := value - 1 ;
57209: LD_ADDR_VAR 0 2
57213: PUSH
57214: LD_VAR 0 1
57218: PUSH
57219: LD_INT 1
57221: MINUS
57222: ST_TO_ADDR
// end ;
57223: LD_VAR 0 2
57227: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57228: LD_INT 0
57230: PPUSH
57231: PPUSH
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57238: LD_VAR 0 1
57242: PPUSH
57243: LD_VAR 0 2
57247: PPUSH
57248: CALL_OW 488
57252: NOT
57253: IFTRUE 57272
57255: PUSH
57256: LD_VAR 0 3
57260: PPUSH
57261: LD_VAR 0 4
57265: PPUSH
57266: CALL_OW 488
57270: NOT
57271: OR
57272: IFFALSE 57285
// begin result := - 1 ;
57274: LD_ADDR_VAR 0 5
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: ST_TO_ADDR
// exit ;
57283: GO 57520
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57285: LD_ADDR_VAR 0 12
57289: PUSH
57290: LD_VAR 0 1
57294: PPUSH
57295: LD_VAR 0 2
57299: PPUSH
57300: LD_VAR 0 3
57304: PPUSH
57305: LD_VAR 0 4
57309: PPUSH
57310: CALL 56356 0 4
57314: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57315: LD_ADDR_VAR 0 11
57319: PUSH
57320: LD_VAR 0 1
57324: PPUSH
57325: LD_VAR 0 2
57329: PPUSH
57330: LD_VAR 0 12
57334: PUSH
57335: LD_INT 1
57337: ARRAY
57338: PPUSH
57339: LD_VAR 0 12
57343: PUSH
57344: LD_INT 2
57346: ARRAY
57347: PPUSH
57348: CALL_OW 298
57352: ST_TO_ADDR
// distance := 9999 ;
57353: LD_ADDR_VAR 0 10
57357: PUSH
57358: LD_INT 9999
57360: ST_TO_ADDR
// for i := 0 to 5 do
57361: LD_ADDR_VAR 0 6
57365: PUSH
57366: DOUBLE
57367: LD_INT 0
57369: DEC
57370: ST_TO_ADDR
57371: LD_INT 5
57373: PUSH
57374: FOR_TO
57375: IFFALSE 57518
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57377: LD_ADDR_VAR 0 7
57381: PUSH
57382: LD_VAR 0 1
57386: PPUSH
57387: LD_VAR 0 6
57391: PPUSH
57392: LD_VAR 0 11
57396: PPUSH
57397: CALL_OW 272
57401: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57402: LD_ADDR_VAR 0 8
57406: PUSH
57407: LD_VAR 0 2
57411: PPUSH
57412: LD_VAR 0 6
57416: PPUSH
57417: LD_VAR 0 11
57421: PPUSH
57422: CALL_OW 273
57426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57427: LD_VAR 0 7
57431: PPUSH
57432: LD_VAR 0 8
57436: PPUSH
57437: CALL_OW 488
57441: NOT
57442: IFFALSE 57446
// continue ;
57444: GO 57374
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57446: LD_ADDR_VAR 0 9
57450: PUSH
57451: LD_VAR 0 12
57455: PUSH
57456: LD_INT 1
57458: ARRAY
57459: PPUSH
57460: LD_VAR 0 12
57464: PUSH
57465: LD_INT 2
57467: ARRAY
57468: PPUSH
57469: LD_VAR 0 7
57473: PPUSH
57474: LD_VAR 0 8
57478: PPUSH
57479: CALL_OW 298
57483: ST_TO_ADDR
// if tmp < distance then
57484: LD_VAR 0 9
57488: PUSH
57489: LD_VAR 0 10
57493: LESS
57494: IFFALSE 57516
// begin result := i ;
57496: LD_ADDR_VAR 0 5
57500: PUSH
57501: LD_VAR 0 6
57505: ST_TO_ADDR
// distance := tmp ;
57506: LD_ADDR_VAR 0 10
57510: PUSH
57511: LD_VAR 0 9
57515: ST_TO_ADDR
// end ; end ;
57516: GO 57374
57518: POP
57519: POP
// end ;
57520: LD_VAR 0 5
57524: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57525: LD_INT 0
57527: PPUSH
57528: PPUSH
// if not driver or not IsInUnit ( driver ) then
57529: LD_VAR 0 1
57533: NOT
57534: IFTRUE 57548
57536: PUSH
57537: LD_VAR 0 1
57541: PPUSH
57542: CALL_OW 310
57546: NOT
57547: OR
57548: IFFALSE 57552
// exit ;
57550: GO 57642
// vehicle := IsInUnit ( driver ) ;
57552: LD_ADDR_VAR 0 3
57556: PUSH
57557: LD_VAR 0 1
57561: PPUSH
57562: CALL_OW 310
57566: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57567: LD_VAR 0 1
57571: PPUSH
57572: LD_STRING \
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: PUSH
57602: LD_STRING E
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_VAR 0 3
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PPUSH
57638: CALL_OW 446
// end ;
57642: LD_VAR 0 2
57646: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57647: LD_INT 0
57649: PPUSH
57650: PPUSH
// if not driver or not IsInUnit ( driver ) then
57651: LD_VAR 0 1
57655: NOT
57656: IFTRUE 57670
57658: PUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: CALL_OW 310
57668: NOT
57669: OR
57670: IFFALSE 57674
// exit ;
57672: GO 57764
// vehicle := IsInUnit ( driver ) ;
57674: LD_ADDR_VAR 0 3
57678: PUSH
57679: LD_VAR 0 1
57683: PPUSH
57684: CALL_OW 310
57688: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57689: LD_VAR 0 1
57693: PPUSH
57694: LD_STRING \
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: PUSH
57724: LD_STRING E
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_VAR 0 3
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PPUSH
57760: CALL_OW 447
// end ;
57764: LD_VAR 0 2
57768: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57769: LD_INT 0
57771: PPUSH
57772: PPUSH
57773: PPUSH
// tmp := [ ] ;
57774: LD_ADDR_VAR 0 5
57778: PUSH
57779: EMPTY
57780: ST_TO_ADDR
// for i in units do
57781: LD_ADDR_VAR 0 4
57785: PUSH
57786: LD_VAR 0 1
57790: PUSH
57791: FOR_IN
57792: IFFALSE 57830
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57794: LD_ADDR_VAR 0 5
57798: PUSH
57799: LD_VAR 0 5
57803: PPUSH
57804: LD_VAR 0 5
57808: PUSH
57809: LD_INT 1
57811: PLUS
57812: PPUSH
57813: LD_VAR 0 4
57817: PPUSH
57818: CALL_OW 256
57822: PPUSH
57823: CALL_OW 2
57827: ST_TO_ADDR
57828: GO 57791
57830: POP
57831: POP
// if not tmp then
57832: LD_VAR 0 5
57836: NOT
57837: IFFALSE 57841
// exit ;
57839: GO 57889
// if asc then
57841: LD_VAR 0 2
57845: IFFALSE 57869
// result := SortListByListAsc ( units , tmp ) else
57847: LD_ADDR_VAR 0 3
57851: PUSH
57852: LD_VAR 0 1
57856: PPUSH
57857: LD_VAR 0 5
57861: PPUSH
57862: CALL_OW 76
57866: ST_TO_ADDR
57867: GO 57889
// result := SortListByListDesc ( units , tmp ) ;
57869: LD_ADDR_VAR 0 3
57873: PUSH
57874: LD_VAR 0 1
57878: PPUSH
57879: LD_VAR 0 5
57883: PPUSH
57884: CALL_OW 77
57888: ST_TO_ADDR
// end ;
57889: LD_VAR 0 3
57893: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57894: LD_INT 0
57896: PPUSH
57897: PPUSH
// task := GetTaskList ( mech ) ;
57898: LD_ADDR_VAR 0 4
57902: PUSH
57903: LD_VAR 0 1
57907: PPUSH
57908: CALL_OW 437
57912: ST_TO_ADDR
// if not task then
57913: LD_VAR 0 4
57917: NOT
57918: IFFALSE 57922
// exit ;
57920: GO 57966
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57922: LD_ADDR_VAR 0 3
57926: PUSH
57927: LD_VAR 0 4
57931: PUSH
57932: LD_INT 1
57934: ARRAY
57935: PUSH
57936: LD_INT 1
57938: ARRAY
57939: PUSH
57940: LD_STRING r
57942: EQUAL
57943: IFFALSE 57965
57945: PUSH
57946: LD_VAR 0 4
57950: PUSH
57951: LD_INT 1
57953: ARRAY
57954: PUSH
57955: LD_INT 4
57957: ARRAY
57958: PUSH
57959: LD_VAR 0 2
57963: EQUAL
57964: AND
57965: ST_TO_ADDR
// end ;
57966: LD_VAR 0 3
57970: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57971: LD_INT 0
57973: PPUSH
// SetDir ( unit , d ) ;
57974: LD_VAR 0 1
57978: PPUSH
57979: LD_VAR 0 4
57983: PPUSH
57984: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57988: LD_ADDR_VAR 0 6
57992: PUSH
57993: LD_VAR 0 1
57997: PPUSH
57998: LD_VAR 0 2
58002: PPUSH
58003: LD_VAR 0 3
58007: PPUSH
58008: LD_VAR 0 5
58012: PPUSH
58013: CALL_OW 48
58017: ST_TO_ADDR
// end ;
58018: LD_VAR 0 6
58022: RET
// export function ToNaturalNumber ( number ) ; begin
58023: LD_INT 0
58025: PPUSH
// result := number div 1 ;
58026: LD_ADDR_VAR 0 2
58030: PUSH
58031: LD_VAR 0 1
58035: PUSH
58036: LD_INT 1
58038: DIV
58039: ST_TO_ADDR
// if number < 0 then
58040: LD_VAR 0 1
58044: PUSH
58045: LD_INT 0
58047: LESS
58048: IFFALSE 58058
// result := 0 ;
58050: LD_ADDR_VAR 0 2
58054: PUSH
58055: LD_INT 0
58057: ST_TO_ADDR
// end ;
58058: LD_VAR 0 2
58062: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
58063: LD_INT 0
58065: PPUSH
58066: PPUSH
58067: PPUSH
// if not buildings then
58068: LD_VAR 0 1
58072: NOT
58073: IFFALSE 58077
// exit ;
58075: GO 58192
// tmp := [ ] ;
58077: LD_ADDR_VAR 0 5
58081: PUSH
58082: EMPTY
58083: ST_TO_ADDR
// for b in buildings do
58084: LD_ADDR_VAR 0 4
58088: PUSH
58089: LD_VAR 0 1
58093: PUSH
58094: FOR_IN
58095: IFFALSE 58133
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
58097: LD_ADDR_VAR 0 5
58101: PUSH
58102: LD_VAR 0 5
58106: PPUSH
58107: LD_VAR 0 5
58111: PUSH
58112: LD_INT 1
58114: PLUS
58115: PPUSH
58116: LD_VAR 0 4
58120: PPUSH
58121: CALL_OW 266
58125: PPUSH
58126: CALL_OW 1
58130: ST_TO_ADDR
58131: GO 58094
58133: POP
58134: POP
// if not tmp then
58135: LD_VAR 0 5
58139: NOT
58140: IFFALSE 58144
// exit ;
58142: GO 58192
// if asc then
58144: LD_VAR 0 2
58148: IFFALSE 58172
// result := SortListByListAsc ( buildings , tmp ) else
58150: LD_ADDR_VAR 0 3
58154: PUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: LD_VAR 0 5
58164: PPUSH
58165: CALL_OW 76
58169: ST_TO_ADDR
58170: GO 58192
// result := SortListByListDesc ( buildings , tmp ) ;
58172: LD_ADDR_VAR 0 3
58176: PUSH
58177: LD_VAR 0 1
58181: PPUSH
58182: LD_VAR 0 5
58186: PPUSH
58187: CALL_OW 77
58191: ST_TO_ADDR
// end ;
58192: LD_VAR 0 3
58196: RET
// export function SortByClass ( units , class ) ; var un ; begin
58197: LD_INT 0
58199: PPUSH
58200: PPUSH
// if not units or not class then
58201: LD_VAR 0 1
58205: NOT
58206: IFTRUE 58215
58208: PUSH
58209: LD_VAR 0 2
58213: NOT
58214: OR
58215: IFFALSE 58219
// exit ;
58217: GO 58314
// result := [ ] ;
58219: LD_ADDR_VAR 0 3
58223: PUSH
58224: EMPTY
58225: ST_TO_ADDR
// for un in units do
58226: LD_ADDR_VAR 0 4
58230: PUSH
58231: LD_VAR 0 1
58235: PUSH
58236: FOR_IN
58237: IFFALSE 58312
// if GetClass ( un ) = class then
58239: LD_VAR 0 4
58243: PPUSH
58244: CALL_OW 257
58248: PUSH
58249: LD_VAR 0 2
58253: EQUAL
58254: IFFALSE 58281
// result := Insert ( result , 1 , un ) else
58256: LD_ADDR_VAR 0 3
58260: PUSH
58261: LD_VAR 0 3
58265: PPUSH
58266: LD_INT 1
58268: PPUSH
58269: LD_VAR 0 4
58273: PPUSH
58274: CALL_OW 2
58278: ST_TO_ADDR
58279: GO 58310
// result := Replace ( result , result + 1 , un ) ;
58281: LD_ADDR_VAR 0 3
58285: PUSH
58286: LD_VAR 0 3
58290: PPUSH
58291: LD_VAR 0 3
58295: PUSH
58296: LD_INT 1
58298: PLUS
58299: PPUSH
58300: LD_VAR 0 4
58304: PPUSH
58305: CALL_OW 1
58309: ST_TO_ADDR
58310: GO 58236
58312: POP
58313: POP
// end ;
58314: LD_VAR 0 3
58318: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58319: LD_INT 0
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
58326: PPUSH
58327: PPUSH
// result := [ ] ;
58328: LD_ADDR_VAR 0 4
58332: PUSH
58333: EMPTY
58334: ST_TO_ADDR
// if x - r < 0 then
58335: LD_VAR 0 1
58339: PUSH
58340: LD_VAR 0 3
58344: MINUS
58345: PUSH
58346: LD_INT 0
58348: LESS
58349: IFFALSE 58361
// min_x := 0 else
58351: LD_ADDR_VAR 0 8
58355: PUSH
58356: LD_INT 0
58358: ST_TO_ADDR
58359: GO 58377
// min_x := x - r ;
58361: LD_ADDR_VAR 0 8
58365: PUSH
58366: LD_VAR 0 1
58370: PUSH
58371: LD_VAR 0 3
58375: MINUS
58376: ST_TO_ADDR
// if y - r < 0 then
58377: LD_VAR 0 2
58381: PUSH
58382: LD_VAR 0 3
58386: MINUS
58387: PUSH
58388: LD_INT 0
58390: LESS
58391: IFFALSE 58403
// min_y := 0 else
58393: LD_ADDR_VAR 0 7
58397: PUSH
58398: LD_INT 0
58400: ST_TO_ADDR
58401: GO 58419
// min_y := y - r ;
58403: LD_ADDR_VAR 0 7
58407: PUSH
58408: LD_VAR 0 2
58412: PUSH
58413: LD_VAR 0 3
58417: MINUS
58418: ST_TO_ADDR
// max_x := x + r ;
58419: LD_ADDR_VAR 0 9
58423: PUSH
58424: LD_VAR 0 1
58428: PUSH
58429: LD_VAR 0 3
58433: PLUS
58434: ST_TO_ADDR
// max_y := y + r ;
58435: LD_ADDR_VAR 0 10
58439: PUSH
58440: LD_VAR 0 2
58444: PUSH
58445: LD_VAR 0 3
58449: PLUS
58450: ST_TO_ADDR
// for _x = min_x to max_x do
58451: LD_ADDR_VAR 0 5
58455: PUSH
58456: DOUBLE
58457: LD_VAR 0 8
58461: DEC
58462: ST_TO_ADDR
58463: LD_VAR 0 9
58467: PUSH
58468: FOR_TO
58469: IFFALSE 58570
// for _y = min_y to max_y do
58471: LD_ADDR_VAR 0 6
58475: PUSH
58476: DOUBLE
58477: LD_VAR 0 7
58481: DEC
58482: ST_TO_ADDR
58483: LD_VAR 0 10
58487: PUSH
58488: FOR_TO
58489: IFFALSE 58566
// begin if not ValidHex ( _x , _y ) then
58491: LD_VAR 0 5
58495: PPUSH
58496: LD_VAR 0 6
58500: PPUSH
58501: CALL_OW 488
58505: NOT
58506: IFFALSE 58510
// continue ;
58508: GO 58488
// if GetResourceTypeXY ( _x , _y ) then
58510: LD_VAR 0 5
58514: PPUSH
58515: LD_VAR 0 6
58519: PPUSH
58520: CALL_OW 283
58524: IFFALSE 58564
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58526: LD_ADDR_VAR 0 4
58530: PUSH
58531: LD_VAR 0 4
58535: PPUSH
58536: LD_VAR 0 4
58540: PUSH
58541: LD_INT 1
58543: PLUS
58544: PPUSH
58545: LD_VAR 0 5
58549: PUSH
58550: LD_VAR 0 6
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PPUSH
58559: CALL_OW 1
58563: ST_TO_ADDR
// end ;
58564: GO 58488
58566: POP
58567: POP
58568: GO 58468
58570: POP
58571: POP
// end ;
58572: LD_VAR 0 4
58576: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58577: LD_INT 0
58579: PPUSH
58580: PPUSH
58581: PPUSH
58582: PPUSH
58583: PPUSH
58584: PPUSH
58585: PPUSH
58586: PPUSH
// if not units then
58587: LD_VAR 0 1
58591: NOT
58592: IFFALSE 58596
// exit ;
58594: GO 59128
// result := UnitFilter ( units , [ f_ok ] ) ;
58596: LD_ADDR_VAR 0 3
58600: PUSH
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_INT 50
58608: PUSH
58609: EMPTY
58610: LIST
58611: PPUSH
58612: CALL_OW 72
58616: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58617: LD_ADDR_VAR 0 8
58621: PUSH
58622: LD_VAR 0 1
58626: PUSH
58627: LD_INT 1
58629: ARRAY
58630: PPUSH
58631: CALL_OW 255
58635: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58636: LD_ADDR_VAR 0 10
58640: PUSH
58641: LD_INT 29
58643: PUSH
58644: LD_INT 91
58646: PUSH
58647: LD_INT 49
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: LIST
58654: ST_TO_ADDR
// if not result then
58655: LD_VAR 0 3
58659: NOT
58660: IFFALSE 58664
// exit ;
58662: GO 59128
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58664: LD_ADDR_VAR 0 5
58668: PUSH
58669: LD_INT 81
58671: PUSH
58672: LD_VAR 0 8
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PPUSH
58681: CALL_OW 69
58685: ST_TO_ADDR
// for i in result do
58686: LD_ADDR_VAR 0 4
58690: PUSH
58691: LD_VAR 0 3
58695: PUSH
58696: FOR_IN
58697: IFFALSE 59126
// begin tag := GetTag ( i ) + 1 ;
58699: LD_ADDR_VAR 0 9
58703: PUSH
58704: LD_VAR 0 4
58708: PPUSH
58709: CALL_OW 110
58713: PUSH
58714: LD_INT 1
58716: PLUS
58717: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58718: LD_ADDR_VAR 0 7
58722: PUSH
58723: LD_VAR 0 4
58727: PPUSH
58728: CALL_OW 250
58732: PPUSH
58733: LD_VAR 0 4
58737: PPUSH
58738: CALL_OW 251
58742: PPUSH
58743: LD_INT 4
58745: PPUSH
58746: CALL 58319 0 3
58750: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58751: LD_VAR 0 4
58755: PPUSH
58756: CALL_OW 247
58760: PUSH
58761: LD_INT 2
58763: EQUAL
58764: IFFALSE 58776
58766: PUSH
58767: LD_VAR 0 7
58771: PUSH
58772: LD_INT 2
58774: GREATER
58775: AND
58776: IFFALSE 58796
58778: PUSH
58779: LD_VAR 0 4
58783: PPUSH
58784: CALL_OW 264
58788: PUSH
58789: LD_VAR 0 10
58793: IN
58794: NOT
58795: AND
58796: IFFALSE 58835
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58798: LD_VAR 0 4
58802: PPUSH
58803: LD_VAR 0 7
58807: PUSH
58808: LD_INT 1
58810: ARRAY
58811: PUSH
58812: LD_INT 1
58814: ARRAY
58815: PPUSH
58816: LD_VAR 0 7
58820: PUSH
58821: LD_INT 1
58823: ARRAY
58824: PUSH
58825: LD_INT 2
58827: ARRAY
58828: PPUSH
58829: CALL_OW 116
58833: GO 59124
// if path > tag then
58835: LD_VAR 0 2
58839: PUSH
58840: LD_VAR 0 9
58844: GREATER
58845: IFFALSE 59053
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58847: LD_ADDR_VAR 0 6
58851: PUSH
58852: LD_VAR 0 5
58856: PPUSH
58857: LD_INT 91
58859: PUSH
58860: LD_VAR 0 4
58864: PUSH
58865: LD_INT 8
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: PPUSH
58873: CALL_OW 72
58877: ST_TO_ADDR
// if nearEnemy then
58878: LD_VAR 0 6
58882: IFFALSE 58951
// begin if GetWeapon ( i ) = ru_time_lapser then
58884: LD_VAR 0 4
58888: PPUSH
58889: CALL_OW 264
58893: PUSH
58894: LD_INT 49
58896: EQUAL
58897: IFFALSE 58925
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58899: LD_VAR 0 4
58903: PPUSH
58904: LD_VAR 0 6
58908: PPUSH
58909: LD_VAR 0 4
58913: PPUSH
58914: CALL_OW 74
58918: PPUSH
58919: CALL_OW 112
58923: GO 58949
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58925: LD_VAR 0 4
58929: PPUSH
58930: LD_VAR 0 6
58934: PPUSH
58935: LD_VAR 0 4
58939: PPUSH
58940: CALL_OW 74
58944: PPUSH
58945: CALL 60209 0 2
// end else
58949: GO 59051
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58951: LD_VAR 0 4
58955: PPUSH
58956: LD_VAR 0 2
58960: PUSH
58961: LD_VAR 0 9
58965: ARRAY
58966: PUSH
58967: LD_INT 1
58969: ARRAY
58970: PPUSH
58971: LD_VAR 0 2
58975: PUSH
58976: LD_VAR 0 9
58980: ARRAY
58981: PUSH
58982: LD_INT 2
58984: ARRAY
58985: PPUSH
58986: CALL_OW 297
58990: PUSH
58991: LD_INT 6
58993: GREATER
58994: IFFALSE 59037
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58996: LD_VAR 0 4
59000: PPUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_VAR 0 9
59010: ARRAY
59011: PUSH
59012: LD_INT 1
59014: ARRAY
59015: PPUSH
59016: LD_VAR 0 2
59020: PUSH
59021: LD_VAR 0 9
59025: ARRAY
59026: PUSH
59027: LD_INT 2
59029: ARRAY
59030: PPUSH
59031: CALL_OW 114
59035: GO 59051
// SetTag ( i , tag ) ;
59037: LD_VAR 0 4
59041: PPUSH
59042: LD_VAR 0 9
59046: PPUSH
59047: CALL_OW 109
// end else
59051: GO 59124
// if enemy then
59053: LD_VAR 0 5
59057: IFFALSE 59124
// begin if GetWeapon ( i ) = ru_time_lapser then
59059: LD_VAR 0 4
59063: PPUSH
59064: CALL_OW 264
59068: PUSH
59069: LD_INT 49
59071: EQUAL
59072: IFFALSE 59100
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59074: LD_VAR 0 4
59078: PPUSH
59079: LD_VAR 0 5
59083: PPUSH
59084: LD_VAR 0 4
59088: PPUSH
59089: CALL_OW 74
59093: PPUSH
59094: CALL_OW 112
59098: GO 59124
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59100: LD_VAR 0 4
59104: PPUSH
59105: LD_VAR 0 5
59109: PPUSH
59110: LD_VAR 0 4
59114: PPUSH
59115: CALL_OW 74
59119: PPUSH
59120: CALL 60209 0 2
// end ; end ;
59124: GO 58696
59126: POP
59127: POP
// end ;
59128: LD_VAR 0 3
59132: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59133: LD_INT 0
59135: PPUSH
59136: PPUSH
59137: PPUSH
// if not unit or IsInUnit ( unit ) then
59138: LD_VAR 0 1
59142: NOT
59143: IFTRUE 59156
59145: PUSH
59146: LD_VAR 0 1
59150: PPUSH
59151: CALL_OW 310
59155: OR
59156: IFFALSE 59160
// exit ;
59158: GO 59251
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59160: LD_ADDR_VAR 0 4
59164: PUSH
59165: LD_VAR 0 1
59169: PPUSH
59170: CALL_OW 250
59174: PPUSH
59175: LD_VAR 0 2
59179: PPUSH
59180: LD_INT 1
59182: PPUSH
59183: CALL_OW 272
59187: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59188: LD_ADDR_VAR 0 5
59192: PUSH
59193: LD_VAR 0 1
59197: PPUSH
59198: CALL_OW 251
59202: PPUSH
59203: LD_VAR 0 2
59207: PPUSH
59208: LD_INT 1
59210: PPUSH
59211: CALL_OW 273
59215: ST_TO_ADDR
// if ValidHex ( x , y ) then
59216: LD_VAR 0 4
59220: PPUSH
59221: LD_VAR 0 5
59225: PPUSH
59226: CALL_OW 488
59230: IFFALSE 59251
// ComTurnXY ( unit , x , y ) ;
59232: LD_VAR 0 1
59236: PPUSH
59237: LD_VAR 0 4
59241: PPUSH
59242: LD_VAR 0 5
59246: PPUSH
59247: CALL_OW 118
// end ;
59251: LD_VAR 0 3
59255: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59256: LD_INT 0
59258: PPUSH
59259: PPUSH
// result := false ;
59260: LD_ADDR_VAR 0 3
59264: PUSH
59265: LD_INT 0
59267: ST_TO_ADDR
// if not units then
59268: LD_VAR 0 2
59272: NOT
59273: IFFALSE 59277
// exit ;
59275: GO 59322
// for i in units do
59277: LD_ADDR_VAR 0 4
59281: PUSH
59282: LD_VAR 0 2
59286: PUSH
59287: FOR_IN
59288: IFFALSE 59320
// if See ( side , i ) then
59290: LD_VAR 0 1
59294: PPUSH
59295: LD_VAR 0 4
59299: PPUSH
59300: CALL_OW 292
59304: IFFALSE 59318
// begin result := true ;
59306: LD_ADDR_VAR 0 3
59310: PUSH
59311: LD_INT 1
59313: ST_TO_ADDR
// exit ;
59314: POP
59315: POP
59316: GO 59322
// end ;
59318: GO 59287
59320: POP
59321: POP
// end ;
59322: LD_VAR 0 3
59326: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59327: LD_INT 0
59329: PPUSH
59330: PPUSH
59331: PPUSH
59332: PPUSH
// if not unit or not points then
59333: LD_VAR 0 1
59337: NOT
59338: IFTRUE 59347
59340: PUSH
59341: LD_VAR 0 2
59345: NOT
59346: OR
59347: IFFALSE 59351
// exit ;
59349: GO 59441
// dist := 99999 ;
59351: LD_ADDR_VAR 0 5
59355: PUSH
59356: LD_INT 99999
59358: ST_TO_ADDR
// for i in points do
59359: LD_ADDR_VAR 0 4
59363: PUSH
59364: LD_VAR 0 2
59368: PUSH
59369: FOR_IN
59370: IFFALSE 59439
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59372: LD_ADDR_VAR 0 6
59376: PUSH
59377: LD_VAR 0 1
59381: PPUSH
59382: LD_VAR 0 4
59386: PUSH
59387: LD_INT 1
59389: ARRAY
59390: PPUSH
59391: LD_VAR 0 4
59395: PUSH
59396: LD_INT 2
59398: ARRAY
59399: PPUSH
59400: CALL_OW 297
59404: ST_TO_ADDR
// if tmpDist < dist then
59405: LD_VAR 0 6
59409: PUSH
59410: LD_VAR 0 5
59414: LESS
59415: IFFALSE 59437
// begin result := i ;
59417: LD_ADDR_VAR 0 3
59421: PUSH
59422: LD_VAR 0 4
59426: ST_TO_ADDR
// dist := tmpDist ;
59427: LD_ADDR_VAR 0 5
59431: PUSH
59432: LD_VAR 0 6
59436: ST_TO_ADDR
// end ; end ;
59437: GO 59369
59439: POP
59440: POP
// end ;
59441: LD_VAR 0 3
59445: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59446: LD_INT 0
59448: PPUSH
// uc_side := side ;
59449: LD_ADDR_OWVAR 20
59453: PUSH
59454: LD_VAR 0 1
59458: ST_TO_ADDR
// uc_nation := 3 ;
59459: LD_ADDR_OWVAR 21
59463: PUSH
59464: LD_INT 3
59466: ST_TO_ADDR
// vc_chassis := 25 ;
59467: LD_ADDR_OWVAR 37
59471: PUSH
59472: LD_INT 25
59474: ST_TO_ADDR
// vc_engine := engine_siberite ;
59475: LD_ADDR_OWVAR 39
59479: PUSH
59480: LD_INT 3
59482: ST_TO_ADDR
// vc_control := control_computer ;
59483: LD_ADDR_OWVAR 38
59487: PUSH
59488: LD_INT 3
59490: ST_TO_ADDR
// vc_weapon := 59 ;
59491: LD_ADDR_OWVAR 40
59495: PUSH
59496: LD_INT 59
59498: ST_TO_ADDR
// result := CreateVehicle ;
59499: LD_ADDR_VAR 0 5
59503: PUSH
59504: CALL_OW 45
59508: ST_TO_ADDR
// SetDir ( result , d ) ;
59509: LD_VAR 0 5
59513: PPUSH
59514: LD_VAR 0 4
59518: PPUSH
59519: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59523: LD_VAR 0 5
59527: PPUSH
59528: LD_VAR 0 2
59532: PPUSH
59533: LD_VAR 0 3
59537: PPUSH
59538: LD_INT 0
59540: PPUSH
59541: CALL_OW 48
// end ;
59545: LD_VAR 0 5
59549: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59550: LD_INT 0
59552: PPUSH
59553: PPUSH
59554: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59555: LD_ADDR_VAR 0 2
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59578: LD_VAR 0 1
59582: NOT
59583: IFTRUE 59616
59585: PUSH
59586: LD_VAR 0 1
59590: PPUSH
59591: CALL_OW 264
59595: PUSH
59596: LD_INT 12
59598: PUSH
59599: LD_INT 51
59601: PUSH
59602: LD_INT 32
59604: PUSH
59605: LD_INT 89
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: IN
59614: NOT
59615: OR
59616: IFFALSE 59620
// exit ;
59618: GO 59718
// for i := 1 to 3 do
59620: LD_ADDR_VAR 0 3
59624: PUSH
59625: DOUBLE
59626: LD_INT 1
59628: DEC
59629: ST_TO_ADDR
59630: LD_INT 3
59632: PUSH
59633: FOR_TO
59634: IFFALSE 59716
// begin tmp := GetCargo ( cargo , i ) ;
59636: LD_ADDR_VAR 0 4
59640: PUSH
59641: LD_VAR 0 1
59645: PPUSH
59646: LD_VAR 0 3
59650: PPUSH
59651: CALL_OW 289
59655: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59656: LD_ADDR_VAR 0 2
59660: PUSH
59661: LD_VAR 0 2
59665: PPUSH
59666: LD_VAR 0 3
59670: PPUSH
59671: LD_VAR 0 4
59675: PPUSH
59676: CALL_OW 1
59680: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59681: LD_ADDR_VAR 0 2
59685: PUSH
59686: LD_VAR 0 2
59690: PPUSH
59691: LD_INT 4
59693: PPUSH
59694: LD_VAR 0 2
59698: PUSH
59699: LD_INT 4
59701: ARRAY
59702: PUSH
59703: LD_VAR 0 4
59707: PLUS
59708: PPUSH
59709: CALL_OW 1
59713: ST_TO_ADDR
// end ;
59714: GO 59633
59716: POP
59717: POP
// end ;
59718: LD_VAR 0 2
59722: RET
// export function Length ( array ) ; begin
59723: LD_INT 0
59725: PPUSH
// result := array + 0 ;
59726: LD_ADDR_VAR 0 2
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: LD_INT 0
59738: PLUS
59739: ST_TO_ADDR
// end ;
59740: LD_VAR 0 2
59744: RET
// export function PrepareArray ( array ) ; begin
59745: LD_INT 0
59747: PPUSH
// result := array diff 0 ;
59748: LD_ADDR_VAR 0 2
59752: PUSH
59753: LD_VAR 0 1
59757: PUSH
59758: LD_INT 0
59760: DIFF
59761: ST_TO_ADDR
// if not result [ 1 ] then
59762: LD_VAR 0 2
59766: PUSH
59767: LD_INT 1
59769: ARRAY
59770: NOT
59771: IFFALSE 59791
// result := Delete ( result , 1 ) ;
59773: LD_ADDR_VAR 0 2
59777: PUSH
59778: LD_VAR 0 2
59782: PPUSH
59783: LD_INT 1
59785: PPUSH
59786: CALL_OW 3
59790: ST_TO_ADDR
// end ;
59791: LD_VAR 0 2
59795: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59796: LD_INT 0
59798: PPUSH
59799: PPUSH
59800: PPUSH
59801: PPUSH
// sibRocketRange := 25 ;
59802: LD_ADDR_VAR 0 6
59806: PUSH
59807: LD_INT 25
59809: ST_TO_ADDR
// result := false ;
59810: LD_ADDR_VAR 0 4
59814: PUSH
59815: LD_INT 0
59817: ST_TO_ADDR
// for i := 0 to 5 do
59818: LD_ADDR_VAR 0 5
59822: PUSH
59823: DOUBLE
59824: LD_INT 0
59826: DEC
59827: ST_TO_ADDR
59828: LD_INT 5
59830: PUSH
59831: FOR_TO
59832: IFFALSE 59899
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59834: LD_VAR 0 1
59838: PPUSH
59839: LD_VAR 0 5
59843: PPUSH
59844: LD_VAR 0 6
59848: PPUSH
59849: CALL_OW 272
59853: PPUSH
59854: LD_VAR 0 2
59858: PPUSH
59859: LD_VAR 0 5
59863: PPUSH
59864: LD_VAR 0 6
59868: PPUSH
59869: CALL_OW 273
59873: PPUSH
59874: LD_VAR 0 3
59878: PPUSH
59879: CALL_OW 309
59883: IFFALSE 59897
// begin result := true ;
59885: LD_ADDR_VAR 0 4
59889: PUSH
59890: LD_INT 1
59892: ST_TO_ADDR
// exit ;
59893: POP
59894: POP
59895: GO 59901
// end ;
59897: GO 59831
59899: POP
59900: POP
// end ;
59901: LD_VAR 0 4
59905: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59906: LD_INT 0
59908: PPUSH
59909: PPUSH
59910: PPUSH
// if btype = b_depot then
59911: LD_VAR 0 2
59915: PUSH
59916: LD_INT 0
59918: EQUAL
59919: IFFALSE 59931
// begin result := true ;
59921: LD_ADDR_VAR 0 3
59925: PUSH
59926: LD_INT 1
59928: ST_TO_ADDR
// exit ;
59929: GO 60051
// end ; pom := GetBase ( depot ) ;
59931: LD_ADDR_VAR 0 4
59935: PUSH
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL_OW 274
59945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59946: LD_ADDR_VAR 0 5
59950: PUSH
59951: LD_VAR 0 2
59955: PPUSH
59956: LD_VAR 0 1
59960: PPUSH
59961: CALL_OW 248
59965: PPUSH
59966: CALL_OW 450
59970: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59971: LD_ADDR_VAR 0 3
59975: PUSH
59976: LD_VAR 0 4
59980: PPUSH
59981: LD_INT 1
59983: PPUSH
59984: CALL_OW 275
59988: PUSH
59989: LD_VAR 0 5
59993: PUSH
59994: LD_INT 1
59996: ARRAY
59997: GREATEREQUAL
59998: IFFALSE 60024
60000: PUSH
60001: LD_VAR 0 4
60005: PPUSH
60006: LD_INT 2
60008: PPUSH
60009: CALL_OW 275
60013: PUSH
60014: LD_VAR 0 5
60018: PUSH
60019: LD_INT 2
60021: ARRAY
60022: GREATEREQUAL
60023: AND
60024: IFFALSE 60050
60026: PUSH
60027: LD_VAR 0 4
60031: PPUSH
60032: LD_INT 3
60034: PPUSH
60035: CALL_OW 275
60039: PUSH
60040: LD_VAR 0 5
60044: PUSH
60045: LD_INT 3
60047: ARRAY
60048: GREATEREQUAL
60049: AND
60050: ST_TO_ADDR
// end ;
60051: LD_VAR 0 3
60055: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
60056: LD_INT 0
60058: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
60059: LD_VAR 0 1
60063: PPUSH
60064: LD_VAR 0 2
60068: PPUSH
60069: LD_INT 0
60071: PPUSH
60072: LD_INT 0
60074: PPUSH
60075: LD_INT 1
60077: PPUSH
60078: LD_INT 0
60080: PPUSH
60081: CALL_OW 587
// end ;
60085: LD_VAR 0 3
60089: RET
// export function CenterOnNow ( unit ) ; begin
60090: LD_INT 0
60092: PPUSH
// result := IsInUnit ( unit ) ;
60093: LD_ADDR_VAR 0 2
60097: PUSH
60098: LD_VAR 0 1
60102: PPUSH
60103: CALL_OW 310
60107: ST_TO_ADDR
// if not result then
60108: LD_VAR 0 2
60112: NOT
60113: IFFALSE 60125
// result := unit ;
60115: LD_ADDR_VAR 0 2
60119: PUSH
60120: LD_VAR 0 1
60124: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60125: LD_VAR 0 1
60129: PPUSH
60130: CALL_OW 87
// end ;
60134: LD_VAR 0 2
60138: RET
// export function ComMoveHex ( unit , hex ) ; begin
60139: LD_INT 0
60141: PPUSH
// if not hex then
60142: LD_VAR 0 2
60146: NOT
60147: IFFALSE 60151
// exit ;
60149: GO 60204
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60151: LD_VAR 0 2
60155: PUSH
60156: LD_INT 1
60158: ARRAY
60159: PPUSH
60160: LD_VAR 0 2
60164: PUSH
60165: LD_INT 2
60167: ARRAY
60168: PPUSH
60169: CALL_OW 428
60173: IFFALSE 60177
// exit ;
60175: GO 60204
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60177: LD_VAR 0 1
60181: PPUSH
60182: LD_VAR 0 2
60186: PUSH
60187: LD_INT 1
60189: ARRAY
60190: PPUSH
60191: LD_VAR 0 2
60195: PUSH
60196: LD_INT 2
60198: ARRAY
60199: PPUSH
60200: CALL_OW 111
// end ;
60204: LD_VAR 0 3
60208: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60209: LD_INT 0
60211: PPUSH
60212: PPUSH
60213: PPUSH
// if not unit or not enemy then
60214: LD_VAR 0 1
60218: NOT
60219: IFTRUE 60228
60221: PUSH
60222: LD_VAR 0 2
60226: NOT
60227: OR
60228: IFFALSE 60232
// exit ;
60230: GO 60358
// x := GetX ( enemy ) ;
60232: LD_ADDR_VAR 0 4
60236: PUSH
60237: LD_VAR 0 2
60241: PPUSH
60242: CALL_OW 250
60246: ST_TO_ADDR
// y := GetY ( enemy ) ;
60247: LD_ADDR_VAR 0 5
60251: PUSH
60252: LD_VAR 0 2
60256: PPUSH
60257: CALL_OW 251
60261: ST_TO_ADDR
// if ValidHex ( x , y ) then
60262: LD_VAR 0 4
60266: PPUSH
60267: LD_VAR 0 5
60271: PPUSH
60272: CALL_OW 488
60276: IFFALSE 60358
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60278: LD_VAR 0 2
60282: PPUSH
60283: CALL_OW 247
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: IN
60298: IFTRUE 60321
60300: PUSH
60301: LD_VAR 0 1
60305: PPUSH
60306: CALL_OW 255
60310: PPUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: CALL_OW 292
60320: OR
60321: IFFALSE 60339
// ComAttackUnit ( unit , enemy ) else
60323: LD_VAR 0 1
60327: PPUSH
60328: LD_VAR 0 2
60332: PPUSH
60333: CALL_OW 115
60337: GO 60358
// ComAgressiveMove ( unit , x , y ) ;
60339: LD_VAR 0 1
60343: PPUSH
60344: LD_VAR 0 4
60348: PPUSH
60349: LD_VAR 0 5
60353: PPUSH
60354: CALL_OW 114
// end ;
60358: LD_VAR 0 3
60362: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60363: LD_INT 0
60365: PPUSH
60366: PPUSH
60367: PPUSH
// list := AreaToList ( area , 0 ) ;
60368: LD_ADDR_VAR 0 5
60372: PUSH
60373: LD_VAR 0 1
60377: PPUSH
60378: LD_INT 0
60380: PPUSH
60381: CALL_OW 517
60385: ST_TO_ADDR
// if not list then
60386: LD_VAR 0 5
60390: NOT
60391: IFFALSE 60395
// exit ;
60393: GO 60525
// if all then
60395: LD_VAR 0 2
60399: IFFALSE 60487
// begin for i := 1 to list [ 1 ] do
60401: LD_ADDR_VAR 0 4
60405: PUSH
60406: DOUBLE
60407: LD_INT 1
60409: DEC
60410: ST_TO_ADDR
60411: LD_VAR 0 5
60415: PUSH
60416: LD_INT 1
60418: ARRAY
60419: PUSH
60420: FOR_TO
60421: IFFALSE 60483
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60423: LD_ADDR_VAR 0 3
60427: PUSH
60428: LD_VAR 0 3
60432: PPUSH
60433: LD_VAR 0 3
60437: PUSH
60438: LD_INT 1
60440: PLUS
60441: PPUSH
60442: LD_VAR 0 5
60446: PUSH
60447: LD_INT 1
60449: ARRAY
60450: PUSH
60451: LD_VAR 0 4
60455: ARRAY
60456: PUSH
60457: LD_VAR 0 5
60461: PUSH
60462: LD_INT 2
60464: ARRAY
60465: PUSH
60466: LD_VAR 0 4
60470: ARRAY
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PPUSH
60476: CALL_OW 1
60480: ST_TO_ADDR
60481: GO 60420
60483: POP
60484: POP
// exit ;
60485: GO 60525
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60487: LD_ADDR_VAR 0 3
60491: PUSH
60492: LD_VAR 0 5
60496: PUSH
60497: LD_INT 1
60499: ARRAY
60500: PUSH
60501: LD_INT 1
60503: ARRAY
60504: PUSH
60505: LD_VAR 0 5
60509: PUSH
60510: LD_INT 2
60512: ARRAY
60513: PUSH
60514: LD_INT 1
60516: ARRAY
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: ST_TO_ADDR
// end ;
60525: LD_VAR 0 3
60529: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60530: LD_INT 0
60532: PPUSH
60533: PPUSH
// list := AreaToList ( area , 0 ) ;
60534: LD_ADDR_VAR 0 4
60538: PUSH
60539: LD_VAR 0 1
60543: PPUSH
60544: LD_INT 0
60546: PPUSH
60547: CALL_OW 517
60551: ST_TO_ADDR
// if not list then
60552: LD_VAR 0 4
60556: NOT
60557: IFFALSE 60561
// exit ;
60559: GO 60602
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60561: LD_ADDR_VAR 0 3
60565: PUSH
60566: LD_VAR 0 4
60570: PUSH
60571: LD_INT 1
60573: ARRAY
60574: PUSH
60575: LD_INT 1
60577: ARRAY
60578: PUSH
60579: LD_VAR 0 4
60583: PUSH
60584: LD_INT 2
60586: ARRAY
60587: PUSH
60588: LD_INT 1
60590: ARRAY
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: ST_TO_ADDR
// end ;
60602: LD_VAR 0 3
60606: RET
// export function First ( array ) ; begin
60607: LD_INT 0
60609: PPUSH
// if not array then
60610: LD_VAR 0 1
60614: NOT
60615: IFFALSE 60619
// exit ;
60617: GO 60633
// result := array [ 1 ] ;
60619: LD_ADDR_VAR 0 2
60623: PUSH
60624: LD_VAR 0 1
60628: PUSH
60629: LD_INT 1
60631: ARRAY
60632: ST_TO_ADDR
// end ;
60633: LD_VAR 0 2
60637: RET
// export function Last ( array ) ; begin
60638: LD_INT 0
60640: PPUSH
// if not array then
60641: LD_VAR 0 1
60645: NOT
60646: IFFALSE 60650
// exit ;
60648: GO 60666
// result := array [ array ] ;
60650: LD_ADDR_VAR 0 2
60654: PUSH
60655: LD_VAR 0 1
60659: PUSH
60660: LD_VAR 0 1
60664: ARRAY
60665: ST_TO_ADDR
// end ;
60666: LD_VAR 0 2
60670: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60671: LD_INT 0
60673: PPUSH
60674: PPUSH
// result := [ ] ;
60675: LD_ADDR_VAR 0 5
60679: PUSH
60680: EMPTY
60681: ST_TO_ADDR
// if not array then
60682: LD_VAR 0 1
60686: NOT
60687: IFFALSE 60691
// exit ;
60689: GO 60803
// for i := 1 to array do
60691: LD_ADDR_VAR 0 6
60695: PUSH
60696: DOUBLE
60697: LD_INT 1
60699: DEC
60700: ST_TO_ADDR
60701: LD_VAR 0 1
60705: PUSH
60706: FOR_TO
60707: IFFALSE 60801
// if array [ i ] [ index ] = value then
60709: LD_VAR 0 1
60713: PUSH
60714: LD_VAR 0 6
60718: ARRAY
60719: PUSH
60720: LD_VAR 0 2
60724: ARRAY
60725: PUSH
60726: LD_VAR 0 3
60730: EQUAL
60731: IFFALSE 60799
// begin if indexColumn then
60733: LD_VAR 0 4
60737: IFFALSE 60773
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60739: LD_ADDR_VAR 0 5
60743: PUSH
60744: LD_VAR 0 5
60748: PPUSH
60749: LD_VAR 0 1
60753: PUSH
60754: LD_VAR 0 6
60758: ARRAY
60759: PUSH
60760: LD_VAR 0 4
60764: ARRAY
60765: PPUSH
60766: CALL 55811 0 2
60770: ST_TO_ADDR
60771: GO 60799
// result := Join ( result , array [ i ] ) ;
60773: LD_ADDR_VAR 0 5
60777: PUSH
60778: LD_VAR 0 5
60782: PPUSH
60783: LD_VAR 0 1
60787: PUSH
60788: LD_VAR 0 6
60792: ARRAY
60793: PPUSH
60794: CALL 55811 0 2
60798: ST_TO_ADDR
// end ;
60799: GO 60706
60801: POP
60802: POP
// end ;
60803: LD_VAR 0 5
60807: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60808: LD_INT 0
60810: PPUSH
// if not vehicles or not parkingPoint then
60811: LD_VAR 0 1
60815: NOT
60816: IFTRUE 60825
60818: PUSH
60819: LD_VAR 0 2
60823: NOT
60824: OR
60825: IFFALSE 60829
// exit ;
60827: GO 60927
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60829: LD_ADDR_VAR 0 1
60833: PUSH
60834: LD_VAR 0 1
60838: PPUSH
60839: LD_INT 50
60841: PUSH
60842: EMPTY
60843: LIST
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: LD_INT 92
60850: PUSH
60851: LD_VAR 0 2
60855: PUSH
60856: LD_INT 1
60858: ARRAY
60859: PUSH
60860: LD_VAR 0 2
60864: PUSH
60865: LD_INT 2
60867: ARRAY
60868: PUSH
60869: LD_INT 8
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PPUSH
60886: CALL_OW 72
60890: ST_TO_ADDR
// if not vehicles then
60891: LD_VAR 0 1
60895: NOT
60896: IFFALSE 60900
// exit ;
60898: GO 60927
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60900: LD_VAR 0 1
60904: PPUSH
60905: LD_VAR 0 2
60909: PUSH
60910: LD_INT 1
60912: ARRAY
60913: PPUSH
60914: LD_VAR 0 2
60918: PUSH
60919: LD_INT 2
60921: ARRAY
60922: PPUSH
60923: CALL_OW 111
// end ;
60927: LD_VAR 0 3
60931: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60932: LD_INT 0
60934: PPUSH
60935: PPUSH
60936: PPUSH
// if not side or not area then
60937: LD_VAR 0 1
60941: NOT
60942: IFTRUE 60951
60944: PUSH
60945: LD_VAR 0 2
60949: NOT
60950: OR
60951: IFFALSE 60955
// exit ;
60953: GO 61074
// tmp := AreaToList ( area , 0 ) ;
60955: LD_ADDR_VAR 0 5
60959: PUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: LD_INT 0
60967: PPUSH
60968: CALL_OW 517
60972: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60973: LD_ADDR_VAR 0 4
60977: PUSH
60978: DOUBLE
60979: LD_INT 1
60981: DEC
60982: ST_TO_ADDR
60983: LD_VAR 0 5
60987: PUSH
60988: LD_INT 1
60990: ARRAY
60991: PUSH
60992: FOR_TO
60993: IFFALSE 61072
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60995: LD_VAR 0 5
60999: PUSH
61000: LD_INT 1
61002: ARRAY
61003: PUSH
61004: LD_VAR 0 4
61008: ARRAY
61009: PPUSH
61010: LD_VAR 0 5
61014: PUSH
61015: LD_INT 2
61017: ARRAY
61018: PUSH
61019: LD_VAR 0 4
61023: ARRAY
61024: PPUSH
61025: CALL_OW 351
61029: IFFALSE 61070
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
61031: LD_VAR 0 5
61035: PUSH
61036: LD_INT 1
61038: ARRAY
61039: PUSH
61040: LD_VAR 0 4
61044: ARRAY
61045: PPUSH
61046: LD_VAR 0 5
61050: PUSH
61051: LD_INT 2
61053: ARRAY
61054: PUSH
61055: LD_VAR 0 4
61059: ARRAY
61060: PPUSH
61061: LD_VAR 0 1
61065: PPUSH
61066: CALL_OW 244
// end ;
61070: GO 60992
61072: POP
61073: POP
// end ;
61074: LD_VAR 0 3
61078: RET
// export function UniqueArray ( array ) ; var i ; begin
61079: LD_INT 0
61081: PPUSH
61082: PPUSH
// result := [ ] ;
61083: LD_ADDR_VAR 0 2
61087: PUSH
61088: EMPTY
61089: ST_TO_ADDR
// if not array then
61090: LD_VAR 0 1
61094: NOT
61095: IFFALSE 61099
// exit ;
61097: GO 61160
// for i := 1 to array do
61099: LD_ADDR_VAR 0 3
61103: PUSH
61104: DOUBLE
61105: LD_INT 1
61107: DEC
61108: ST_TO_ADDR
61109: LD_VAR 0 1
61113: PUSH
61114: FOR_TO
61115: IFFALSE 61158
// if not array [ i ] in result then
61117: LD_VAR 0 1
61121: PUSH
61122: LD_VAR 0 3
61126: ARRAY
61127: PUSH
61128: LD_VAR 0 2
61132: IN
61133: NOT
61134: IFFALSE 61156
// result := Join ( result , i ) ;
61136: LD_ADDR_VAR 0 2
61140: PUSH
61141: LD_VAR 0 2
61145: PPUSH
61146: LD_VAR 0 3
61150: PPUSH
61151: CALL 55811 0 2
61155: ST_TO_ADDR
61156: GO 61114
61158: POP
61159: POP
// end ; end_of_file
61160: LD_VAR 0 2
61164: RET
// export globalGameSaveCounter ; every 0 0$1 do
61165: GO 61167
61167: DISABLE
// begin enable ;
61168: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61169: LD_STRING updateTimer(
61171: PUSH
61172: LD_OWVAR 1
61176: STR
61177: PUSH
61178: LD_STRING );
61180: STR
61181: PPUSH
61182: CALL_OW 559
// end ;
61186: END
// every 0 0$1 do
61187: GO 61189
61189: DISABLE
// begin globalGameSaveCounter := 0 ;
61190: LD_ADDR_EXP 50
61194: PUSH
61195: LD_INT 0
61197: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61198: LD_STRING setGameSaveCounter(0)
61200: PPUSH
61201: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61205: LD_STRING initStreamRollete();
61207: PPUSH
61208: CALL_OW 559
// InitStreamMode ;
61212: CALL 62557 0 0
// DefineStreamItems ( false ) ;
61216: LD_INT 0
61218: PPUSH
61219: CALL 63021 0 1
// end ;
61223: END
// export function SOS_MapStart ( ) ; begin
61224: LD_INT 0
61226: PPUSH
// if streamModeActive then
61227: LD_EXP 51
61231: IFFALSE 61240
// DefineStreamItems ( true ) ;
61233: LD_INT 1
61235: PPUSH
61236: CALL 63021 0 1
// UpdateLuaVariables ( ) ;
61240: CALL 61257 0 0
// UpdateFactoryWaypoints ( ) ;
61244: CALL 76143 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61248: CALL 76395 0 0
// end ;
61252: LD_VAR 0 1
61256: RET
// function UpdateLuaVariables ( ) ; begin
61257: LD_INT 0
61259: PPUSH
// if globalGameSaveCounter then
61260: LD_EXP 50
61264: IFFALSE 61298
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61266: LD_ADDR_EXP 50
61270: PUSH
61271: LD_EXP 50
61275: PPUSH
61276: CALL 57184 0 1
61280: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61281: LD_STRING setGameSaveCounter(
61283: PUSH
61284: LD_EXP 50
61288: STR
61289: PUSH
61290: LD_STRING )
61292: STR
61293: PPUSH
61294: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61298: LD_STRING setGameDifficulty(
61300: PUSH
61301: LD_OWVAR 67
61305: STR
61306: PUSH
61307: LD_STRING )
61309: STR
61310: PPUSH
61311: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61315: LD_STRING displayDifficulty(
61317: PUSH
61318: LD_OWVAR 67
61322: STR
61323: PUSH
61324: LD_STRING )
61326: STR
61327: PPUSH
61328: CALL_OW 559
// end ;
61332: LD_VAR 0 1
61336: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61337: LD_INT 0
61339: PPUSH
// if p2 = stream_mode then
61340: LD_VAR 0 2
61344: PUSH
61345: LD_INT 100
61347: EQUAL
61348: IFFALSE 62351
// begin if not StreamModeActive then
61350: LD_EXP 51
61354: NOT
61355: IFFALSE 61365
// StreamModeActive := true ;
61357: LD_ADDR_EXP 51
61361: PUSH
61362: LD_INT 1
61364: ST_TO_ADDR
// if p3 = 0 then
61365: LD_VAR 0 3
61369: PUSH
61370: LD_INT 0
61372: EQUAL
61373: IFFALSE 61379
// InitStreamMode ;
61375: CALL 62557 0 0
// if p3 = 1 then
61379: LD_VAR 0 3
61383: PUSH
61384: LD_INT 1
61386: EQUAL
61387: IFFALSE 61397
// sRocket := true ;
61389: LD_ADDR_EXP 56
61393: PUSH
61394: LD_INT 1
61396: ST_TO_ADDR
// if p3 = 2 then
61397: LD_VAR 0 3
61401: PUSH
61402: LD_INT 2
61404: EQUAL
61405: IFFALSE 61415
// sSpeed := true ;
61407: LD_ADDR_EXP 55
61411: PUSH
61412: LD_INT 1
61414: ST_TO_ADDR
// if p3 = 3 then
61415: LD_VAR 0 3
61419: PUSH
61420: LD_INT 3
61422: EQUAL
61423: IFFALSE 61433
// sEngine := true ;
61425: LD_ADDR_EXP 57
61429: PUSH
61430: LD_INT 1
61432: ST_TO_ADDR
// if p3 = 4 then
61433: LD_VAR 0 3
61437: PUSH
61438: LD_INT 4
61440: EQUAL
61441: IFFALSE 61451
// sSpec := true ;
61443: LD_ADDR_EXP 54
61447: PUSH
61448: LD_INT 1
61450: ST_TO_ADDR
// if p3 = 5 then
61451: LD_VAR 0 3
61455: PUSH
61456: LD_INT 5
61458: EQUAL
61459: IFFALSE 61469
// sLevel := true ;
61461: LD_ADDR_EXP 58
61465: PUSH
61466: LD_INT 1
61468: ST_TO_ADDR
// if p3 = 6 then
61469: LD_VAR 0 3
61473: PUSH
61474: LD_INT 6
61476: EQUAL
61477: IFFALSE 61487
// sArmoury := true ;
61479: LD_ADDR_EXP 59
61483: PUSH
61484: LD_INT 1
61486: ST_TO_ADDR
// if p3 = 7 then
61487: LD_VAR 0 3
61491: PUSH
61492: LD_INT 7
61494: EQUAL
61495: IFFALSE 61505
// sRadar := true ;
61497: LD_ADDR_EXP 60
61501: PUSH
61502: LD_INT 1
61504: ST_TO_ADDR
// if p3 = 8 then
61505: LD_VAR 0 3
61509: PUSH
61510: LD_INT 8
61512: EQUAL
61513: IFFALSE 61523
// sBunker := true ;
61515: LD_ADDR_EXP 61
61519: PUSH
61520: LD_INT 1
61522: ST_TO_ADDR
// if p3 = 9 then
61523: LD_VAR 0 3
61527: PUSH
61528: LD_INT 9
61530: EQUAL
61531: IFFALSE 61541
// sHack := true ;
61533: LD_ADDR_EXP 62
61537: PUSH
61538: LD_INT 1
61540: ST_TO_ADDR
// if p3 = 10 then
61541: LD_VAR 0 3
61545: PUSH
61546: LD_INT 10
61548: EQUAL
61549: IFFALSE 61559
// sFire := true ;
61551: LD_ADDR_EXP 63
61555: PUSH
61556: LD_INT 1
61558: ST_TO_ADDR
// if p3 = 11 then
61559: LD_VAR 0 3
61563: PUSH
61564: LD_INT 11
61566: EQUAL
61567: IFFALSE 61577
// sRefresh := true ;
61569: LD_ADDR_EXP 64
61573: PUSH
61574: LD_INT 1
61576: ST_TO_ADDR
// if p3 = 12 then
61577: LD_VAR 0 3
61581: PUSH
61582: LD_INT 12
61584: EQUAL
61585: IFFALSE 61595
// sExp := true ;
61587: LD_ADDR_EXP 65
61591: PUSH
61592: LD_INT 1
61594: ST_TO_ADDR
// if p3 = 13 then
61595: LD_VAR 0 3
61599: PUSH
61600: LD_INT 13
61602: EQUAL
61603: IFFALSE 61613
// sDepot := true ;
61605: LD_ADDR_EXP 66
61609: PUSH
61610: LD_INT 1
61612: ST_TO_ADDR
// if p3 = 14 then
61613: LD_VAR 0 3
61617: PUSH
61618: LD_INT 14
61620: EQUAL
61621: IFFALSE 61631
// sFlag := true ;
61623: LD_ADDR_EXP 67
61627: PUSH
61628: LD_INT 1
61630: ST_TO_ADDR
// if p3 = 15 then
61631: LD_VAR 0 3
61635: PUSH
61636: LD_INT 15
61638: EQUAL
61639: IFFALSE 61649
// sKamikadze := true ;
61641: LD_ADDR_EXP 75
61645: PUSH
61646: LD_INT 1
61648: ST_TO_ADDR
// if p3 = 16 then
61649: LD_VAR 0 3
61653: PUSH
61654: LD_INT 16
61656: EQUAL
61657: IFFALSE 61667
// sTroll := true ;
61659: LD_ADDR_EXP 76
61663: PUSH
61664: LD_INT 1
61666: ST_TO_ADDR
// if p3 = 17 then
61667: LD_VAR 0 3
61671: PUSH
61672: LD_INT 17
61674: EQUAL
61675: IFFALSE 61685
// sSlow := true ;
61677: LD_ADDR_EXP 77
61681: PUSH
61682: LD_INT 1
61684: ST_TO_ADDR
// if p3 = 18 then
61685: LD_VAR 0 3
61689: PUSH
61690: LD_INT 18
61692: EQUAL
61693: IFFALSE 61703
// sLack := true ;
61695: LD_ADDR_EXP 78
61699: PUSH
61700: LD_INT 1
61702: ST_TO_ADDR
// if p3 = 19 then
61703: LD_VAR 0 3
61707: PUSH
61708: LD_INT 19
61710: EQUAL
61711: IFFALSE 61721
// sTank := true ;
61713: LD_ADDR_EXP 80
61717: PUSH
61718: LD_INT 1
61720: ST_TO_ADDR
// if p3 = 20 then
61721: LD_VAR 0 3
61725: PUSH
61726: LD_INT 20
61728: EQUAL
61729: IFFALSE 61739
// sRemote := true ;
61731: LD_ADDR_EXP 81
61735: PUSH
61736: LD_INT 1
61738: ST_TO_ADDR
// if p3 = 21 then
61739: LD_VAR 0 3
61743: PUSH
61744: LD_INT 21
61746: EQUAL
61747: IFFALSE 61757
// sPowell := true ;
61749: LD_ADDR_EXP 82
61753: PUSH
61754: LD_INT 1
61756: ST_TO_ADDR
// if p3 = 22 then
61757: LD_VAR 0 3
61761: PUSH
61762: LD_INT 22
61764: EQUAL
61765: IFFALSE 61775
// sTeleport := true ;
61767: LD_ADDR_EXP 85
61771: PUSH
61772: LD_INT 1
61774: ST_TO_ADDR
// if p3 = 23 then
61775: LD_VAR 0 3
61779: PUSH
61780: LD_INT 23
61782: EQUAL
61783: IFFALSE 61793
// sOilTower := true ;
61785: LD_ADDR_EXP 87
61789: PUSH
61790: LD_INT 1
61792: ST_TO_ADDR
// if p3 = 24 then
61793: LD_VAR 0 3
61797: PUSH
61798: LD_INT 24
61800: EQUAL
61801: IFFALSE 61811
// sShovel := true ;
61803: LD_ADDR_EXP 88
61807: PUSH
61808: LD_INT 1
61810: ST_TO_ADDR
// if p3 = 25 then
61811: LD_VAR 0 3
61815: PUSH
61816: LD_INT 25
61818: EQUAL
61819: IFFALSE 61829
// sSheik := true ;
61821: LD_ADDR_EXP 89
61825: PUSH
61826: LD_INT 1
61828: ST_TO_ADDR
// if p3 = 26 then
61829: LD_VAR 0 3
61833: PUSH
61834: LD_INT 26
61836: EQUAL
61837: IFFALSE 61847
// sEarthquake := true ;
61839: LD_ADDR_EXP 91
61843: PUSH
61844: LD_INT 1
61846: ST_TO_ADDR
// if p3 = 27 then
61847: LD_VAR 0 3
61851: PUSH
61852: LD_INT 27
61854: EQUAL
61855: IFFALSE 61865
// sAI := true ;
61857: LD_ADDR_EXP 92
61861: PUSH
61862: LD_INT 1
61864: ST_TO_ADDR
// if p3 = 28 then
61865: LD_VAR 0 3
61869: PUSH
61870: LD_INT 28
61872: EQUAL
61873: IFFALSE 61883
// sCargo := true ;
61875: LD_ADDR_EXP 95
61879: PUSH
61880: LD_INT 1
61882: ST_TO_ADDR
// if p3 = 29 then
61883: LD_VAR 0 3
61887: PUSH
61888: LD_INT 29
61890: EQUAL
61891: IFFALSE 61901
// sDLaser := true ;
61893: LD_ADDR_EXP 96
61897: PUSH
61898: LD_INT 1
61900: ST_TO_ADDR
// if p3 = 30 then
61901: LD_VAR 0 3
61905: PUSH
61906: LD_INT 30
61908: EQUAL
61909: IFFALSE 61919
// sExchange := true ;
61911: LD_ADDR_EXP 97
61915: PUSH
61916: LD_INT 1
61918: ST_TO_ADDR
// if p3 = 31 then
61919: LD_VAR 0 3
61923: PUSH
61924: LD_INT 31
61926: EQUAL
61927: IFFALSE 61937
// sFac := true ;
61929: LD_ADDR_EXP 98
61933: PUSH
61934: LD_INT 1
61936: ST_TO_ADDR
// if p3 = 32 then
61937: LD_VAR 0 3
61941: PUSH
61942: LD_INT 32
61944: EQUAL
61945: IFFALSE 61955
// sPower := true ;
61947: LD_ADDR_EXP 99
61951: PUSH
61952: LD_INT 1
61954: ST_TO_ADDR
// if p3 = 33 then
61955: LD_VAR 0 3
61959: PUSH
61960: LD_INT 33
61962: EQUAL
61963: IFFALSE 61973
// sRandom := true ;
61965: LD_ADDR_EXP 100
61969: PUSH
61970: LD_INT 1
61972: ST_TO_ADDR
// if p3 = 34 then
61973: LD_VAR 0 3
61977: PUSH
61978: LD_INT 34
61980: EQUAL
61981: IFFALSE 61991
// sShield := true ;
61983: LD_ADDR_EXP 101
61987: PUSH
61988: LD_INT 1
61990: ST_TO_ADDR
// if p3 = 35 then
61991: LD_VAR 0 3
61995: PUSH
61996: LD_INT 35
61998: EQUAL
61999: IFFALSE 62009
// sTime := true ;
62001: LD_ADDR_EXP 102
62005: PUSH
62006: LD_INT 1
62008: ST_TO_ADDR
// if p3 = 36 then
62009: LD_VAR 0 3
62013: PUSH
62014: LD_INT 36
62016: EQUAL
62017: IFFALSE 62027
// sTools := true ;
62019: LD_ADDR_EXP 103
62023: PUSH
62024: LD_INT 1
62026: ST_TO_ADDR
// if p3 = 101 then
62027: LD_VAR 0 3
62031: PUSH
62032: LD_INT 101
62034: EQUAL
62035: IFFALSE 62045
// sSold := true ;
62037: LD_ADDR_EXP 68
62041: PUSH
62042: LD_INT 1
62044: ST_TO_ADDR
// if p3 = 102 then
62045: LD_VAR 0 3
62049: PUSH
62050: LD_INT 102
62052: EQUAL
62053: IFFALSE 62063
// sDiff := true ;
62055: LD_ADDR_EXP 69
62059: PUSH
62060: LD_INT 1
62062: ST_TO_ADDR
// if p3 = 103 then
62063: LD_VAR 0 3
62067: PUSH
62068: LD_INT 103
62070: EQUAL
62071: IFFALSE 62081
// sFog := true ;
62073: LD_ADDR_EXP 72
62077: PUSH
62078: LD_INT 1
62080: ST_TO_ADDR
// if p3 = 104 then
62081: LD_VAR 0 3
62085: PUSH
62086: LD_INT 104
62088: EQUAL
62089: IFFALSE 62099
// sReset := true ;
62091: LD_ADDR_EXP 73
62095: PUSH
62096: LD_INT 1
62098: ST_TO_ADDR
// if p3 = 105 then
62099: LD_VAR 0 3
62103: PUSH
62104: LD_INT 105
62106: EQUAL
62107: IFFALSE 62117
// sSun := true ;
62109: LD_ADDR_EXP 74
62113: PUSH
62114: LD_INT 1
62116: ST_TO_ADDR
// if p3 = 106 then
62117: LD_VAR 0 3
62121: PUSH
62122: LD_INT 106
62124: EQUAL
62125: IFFALSE 62135
// sTiger := true ;
62127: LD_ADDR_EXP 70
62131: PUSH
62132: LD_INT 1
62134: ST_TO_ADDR
// if p3 = 107 then
62135: LD_VAR 0 3
62139: PUSH
62140: LD_INT 107
62142: EQUAL
62143: IFFALSE 62153
// sBomb := true ;
62145: LD_ADDR_EXP 71
62149: PUSH
62150: LD_INT 1
62152: ST_TO_ADDR
// if p3 = 108 then
62153: LD_VAR 0 3
62157: PUSH
62158: LD_INT 108
62160: EQUAL
62161: IFFALSE 62171
// sWound := true ;
62163: LD_ADDR_EXP 79
62167: PUSH
62168: LD_INT 1
62170: ST_TO_ADDR
// if p3 = 109 then
62171: LD_VAR 0 3
62175: PUSH
62176: LD_INT 109
62178: EQUAL
62179: IFFALSE 62189
// sBetray := true ;
62181: LD_ADDR_EXP 83
62185: PUSH
62186: LD_INT 1
62188: ST_TO_ADDR
// if p3 = 110 then
62189: LD_VAR 0 3
62193: PUSH
62194: LD_INT 110
62196: EQUAL
62197: IFFALSE 62207
// sContamin := true ;
62199: LD_ADDR_EXP 84
62203: PUSH
62204: LD_INT 1
62206: ST_TO_ADDR
// if p3 = 111 then
62207: LD_VAR 0 3
62211: PUSH
62212: LD_INT 111
62214: EQUAL
62215: IFFALSE 62225
// sOil := true ;
62217: LD_ADDR_EXP 86
62221: PUSH
62222: LD_INT 1
62224: ST_TO_ADDR
// if p3 = 112 then
62225: LD_VAR 0 3
62229: PUSH
62230: LD_INT 112
62232: EQUAL
62233: IFFALSE 62243
// sStu := true ;
62235: LD_ADDR_EXP 90
62239: PUSH
62240: LD_INT 1
62242: ST_TO_ADDR
// if p3 = 113 then
62243: LD_VAR 0 3
62247: PUSH
62248: LD_INT 113
62250: EQUAL
62251: IFFALSE 62261
// sBazooka := true ;
62253: LD_ADDR_EXP 93
62257: PUSH
62258: LD_INT 1
62260: ST_TO_ADDR
// if p3 = 114 then
62261: LD_VAR 0 3
62265: PUSH
62266: LD_INT 114
62268: EQUAL
62269: IFFALSE 62279
// sMortar := true ;
62271: LD_ADDR_EXP 94
62275: PUSH
62276: LD_INT 1
62278: ST_TO_ADDR
// if p3 = 115 then
62279: LD_VAR 0 3
62283: PUSH
62284: LD_INT 115
62286: EQUAL
62287: IFFALSE 62297
// sRanger := true ;
62289: LD_ADDR_EXP 104
62293: PUSH
62294: LD_INT 1
62296: ST_TO_ADDR
// if p3 = 116 then
62297: LD_VAR 0 3
62301: PUSH
62302: LD_INT 116
62304: EQUAL
62305: IFFALSE 62315
// sComputer := true ;
62307: LD_ADDR_EXP 105
62311: PUSH
62312: LD_INT 1
62314: ST_TO_ADDR
// if p3 = 117 then
62315: LD_VAR 0 3
62319: PUSH
62320: LD_INT 117
62322: EQUAL
62323: IFFALSE 62333
// s30 := true ;
62325: LD_ADDR_EXP 106
62329: PUSH
62330: LD_INT 1
62332: ST_TO_ADDR
// if p3 = 118 then
62333: LD_VAR 0 3
62337: PUSH
62338: LD_INT 118
62340: EQUAL
62341: IFFALSE 62351
// s60 := true ;
62343: LD_ADDR_EXP 107
62347: PUSH
62348: LD_INT 1
62350: ST_TO_ADDR
// end ; if p2 = hack_mode then
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 101
62358: EQUAL
62359: IFFALSE 62487
// begin case p3 of 1 :
62361: LD_VAR 0 3
62365: PUSH
62366: LD_INT 1
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62374
62372: GO 62381
62374: POP
// hHackUnlimitedResources ; 2 :
62375: CALL 74750 0 0
62379: GO 62487
62381: LD_INT 2
62383: DOUBLE
62384: EQUAL
62385: IFTRUE 62389
62387: GO 62396
62389: POP
// hHackSetLevel10 ; 3 :
62390: CALL 74883 0 0
62394: GO 62487
62396: LD_INT 3
62398: DOUBLE
62399: EQUAL
62400: IFTRUE 62404
62402: GO 62411
62404: POP
// hHackSetLevel10YourUnits ; 4 :
62405: CALL 74968 0 0
62409: GO 62487
62411: LD_INT 4
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62419
62417: GO 62426
62419: POP
// hHackInvincible ; 5 :
62420: CALL 75416 0 0
62424: GO 62487
62426: LD_INT 5
62428: DOUBLE
62429: EQUAL
62430: IFTRUE 62434
62432: GO 62441
62434: POP
// hHackInvisible ; 6 :
62435: CALL 75527 0 0
62439: GO 62487
62441: LD_INT 6
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62449
62447: GO 62456
62449: POP
// hHackChangeYourSide ; 7 :
62450: CALL 75584 0 0
62454: GO 62487
62456: LD_INT 7
62458: DOUBLE
62459: EQUAL
62460: IFTRUE 62464
62462: GO 62471
62464: POP
// hHackChangeUnitSide ; 8 :
62465: CALL 75626 0 0
62469: GO 62487
62471: LD_INT 8
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62479
62477: GO 62486
62479: POP
// hHackFog ; end ;
62480: CALL 75727 0 0
62484: GO 62487
62486: POP
// end ; if p2 = game_save_mode then
62487: LD_VAR 0 2
62491: PUSH
62492: LD_INT 102
62494: EQUAL
62495: IFFALSE 62552
// begin if p3 = 1 then
62497: LD_VAR 0 3
62501: PUSH
62502: LD_INT 1
62504: EQUAL
62505: IFFALSE 62517
// globalGameSaveCounter := p4 ;
62507: LD_ADDR_EXP 50
62511: PUSH
62512: LD_VAR 0 4
62516: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62517: LD_VAR 0 3
62521: PUSH
62522: LD_INT 2
62524: EQUAL
62525: IFFALSE 62533
62527: PUSH
62528: LD_EXP 50
62532: AND
62533: IFFALSE 62552
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62535: LD_STRING setGameSaveCounter(
62537: PUSH
62538: LD_EXP 50
62542: STR
62543: PUSH
62544: LD_STRING )
62546: STR
62547: PPUSH
62548: CALL_OW 559
// end ; end ;
62552: LD_VAR 0 7
62556: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62557: LD_INT 0
62559: PPUSH
// streamModeActive := false ;
62560: LD_ADDR_EXP 51
62564: PUSH
62565: LD_INT 0
62567: ST_TO_ADDR
// normalCounter := 36 ;
62568: LD_ADDR_EXP 52
62572: PUSH
62573: LD_INT 36
62575: ST_TO_ADDR
// hardcoreCounter := 18 ;
62576: LD_ADDR_EXP 53
62580: PUSH
62581: LD_INT 18
62583: ST_TO_ADDR
// sRocket := false ;
62584: LD_ADDR_EXP 56
62588: PUSH
62589: LD_INT 0
62591: ST_TO_ADDR
// sSpeed := false ;
62592: LD_ADDR_EXP 55
62596: PUSH
62597: LD_INT 0
62599: ST_TO_ADDR
// sEngine := false ;
62600: LD_ADDR_EXP 57
62604: PUSH
62605: LD_INT 0
62607: ST_TO_ADDR
// sSpec := false ;
62608: LD_ADDR_EXP 54
62612: PUSH
62613: LD_INT 0
62615: ST_TO_ADDR
// sLevel := false ;
62616: LD_ADDR_EXP 58
62620: PUSH
62621: LD_INT 0
62623: ST_TO_ADDR
// sArmoury := false ;
62624: LD_ADDR_EXP 59
62628: PUSH
62629: LD_INT 0
62631: ST_TO_ADDR
// sRadar := false ;
62632: LD_ADDR_EXP 60
62636: PUSH
62637: LD_INT 0
62639: ST_TO_ADDR
// sBunker := false ;
62640: LD_ADDR_EXP 61
62644: PUSH
62645: LD_INT 0
62647: ST_TO_ADDR
// sHack := false ;
62648: LD_ADDR_EXP 62
62652: PUSH
62653: LD_INT 0
62655: ST_TO_ADDR
// sFire := false ;
62656: LD_ADDR_EXP 63
62660: PUSH
62661: LD_INT 0
62663: ST_TO_ADDR
// sRefresh := false ;
62664: LD_ADDR_EXP 64
62668: PUSH
62669: LD_INT 0
62671: ST_TO_ADDR
// sExp := false ;
62672: LD_ADDR_EXP 65
62676: PUSH
62677: LD_INT 0
62679: ST_TO_ADDR
// sDepot := false ;
62680: LD_ADDR_EXP 66
62684: PUSH
62685: LD_INT 0
62687: ST_TO_ADDR
// sFlag := false ;
62688: LD_ADDR_EXP 67
62692: PUSH
62693: LD_INT 0
62695: ST_TO_ADDR
// sKamikadze := false ;
62696: LD_ADDR_EXP 75
62700: PUSH
62701: LD_INT 0
62703: ST_TO_ADDR
// sTroll := false ;
62704: LD_ADDR_EXP 76
62708: PUSH
62709: LD_INT 0
62711: ST_TO_ADDR
// sSlow := false ;
62712: LD_ADDR_EXP 77
62716: PUSH
62717: LD_INT 0
62719: ST_TO_ADDR
// sLack := false ;
62720: LD_ADDR_EXP 78
62724: PUSH
62725: LD_INT 0
62727: ST_TO_ADDR
// sTank := false ;
62728: LD_ADDR_EXP 80
62732: PUSH
62733: LD_INT 0
62735: ST_TO_ADDR
// sRemote := false ;
62736: LD_ADDR_EXP 81
62740: PUSH
62741: LD_INT 0
62743: ST_TO_ADDR
// sPowell := false ;
62744: LD_ADDR_EXP 82
62748: PUSH
62749: LD_INT 0
62751: ST_TO_ADDR
// sTeleport := false ;
62752: LD_ADDR_EXP 85
62756: PUSH
62757: LD_INT 0
62759: ST_TO_ADDR
// sOilTower := false ;
62760: LD_ADDR_EXP 87
62764: PUSH
62765: LD_INT 0
62767: ST_TO_ADDR
// sShovel := false ;
62768: LD_ADDR_EXP 88
62772: PUSH
62773: LD_INT 0
62775: ST_TO_ADDR
// sSheik := false ;
62776: LD_ADDR_EXP 89
62780: PUSH
62781: LD_INT 0
62783: ST_TO_ADDR
// sEarthquake := false ;
62784: LD_ADDR_EXP 91
62788: PUSH
62789: LD_INT 0
62791: ST_TO_ADDR
// sAI := false ;
62792: LD_ADDR_EXP 92
62796: PUSH
62797: LD_INT 0
62799: ST_TO_ADDR
// sCargo := false ;
62800: LD_ADDR_EXP 95
62804: PUSH
62805: LD_INT 0
62807: ST_TO_ADDR
// sDLaser := false ;
62808: LD_ADDR_EXP 96
62812: PUSH
62813: LD_INT 0
62815: ST_TO_ADDR
// sExchange := false ;
62816: LD_ADDR_EXP 97
62820: PUSH
62821: LD_INT 0
62823: ST_TO_ADDR
// sFac := false ;
62824: LD_ADDR_EXP 98
62828: PUSH
62829: LD_INT 0
62831: ST_TO_ADDR
// sPower := false ;
62832: LD_ADDR_EXP 99
62836: PUSH
62837: LD_INT 0
62839: ST_TO_ADDR
// sRandom := false ;
62840: LD_ADDR_EXP 100
62844: PUSH
62845: LD_INT 0
62847: ST_TO_ADDR
// sShield := false ;
62848: LD_ADDR_EXP 101
62852: PUSH
62853: LD_INT 0
62855: ST_TO_ADDR
// sTime := false ;
62856: LD_ADDR_EXP 102
62860: PUSH
62861: LD_INT 0
62863: ST_TO_ADDR
// sTools := false ;
62864: LD_ADDR_EXP 103
62868: PUSH
62869: LD_INT 0
62871: ST_TO_ADDR
// sSold := false ;
62872: LD_ADDR_EXP 68
62876: PUSH
62877: LD_INT 0
62879: ST_TO_ADDR
// sDiff := false ;
62880: LD_ADDR_EXP 69
62884: PUSH
62885: LD_INT 0
62887: ST_TO_ADDR
// sFog := false ;
62888: LD_ADDR_EXP 72
62892: PUSH
62893: LD_INT 0
62895: ST_TO_ADDR
// sReset := false ;
62896: LD_ADDR_EXP 73
62900: PUSH
62901: LD_INT 0
62903: ST_TO_ADDR
// sSun := false ;
62904: LD_ADDR_EXP 74
62908: PUSH
62909: LD_INT 0
62911: ST_TO_ADDR
// sTiger := false ;
62912: LD_ADDR_EXP 70
62916: PUSH
62917: LD_INT 0
62919: ST_TO_ADDR
// sBomb := false ;
62920: LD_ADDR_EXP 71
62924: PUSH
62925: LD_INT 0
62927: ST_TO_ADDR
// sWound := false ;
62928: LD_ADDR_EXP 79
62932: PUSH
62933: LD_INT 0
62935: ST_TO_ADDR
// sBetray := false ;
62936: LD_ADDR_EXP 83
62940: PUSH
62941: LD_INT 0
62943: ST_TO_ADDR
// sContamin := false ;
62944: LD_ADDR_EXP 84
62948: PUSH
62949: LD_INT 0
62951: ST_TO_ADDR
// sOil := false ;
62952: LD_ADDR_EXP 86
62956: PUSH
62957: LD_INT 0
62959: ST_TO_ADDR
// sStu := false ;
62960: LD_ADDR_EXP 90
62964: PUSH
62965: LD_INT 0
62967: ST_TO_ADDR
// sBazooka := false ;
62968: LD_ADDR_EXP 93
62972: PUSH
62973: LD_INT 0
62975: ST_TO_ADDR
// sMortar := false ;
62976: LD_ADDR_EXP 94
62980: PUSH
62981: LD_INT 0
62983: ST_TO_ADDR
// sRanger := false ;
62984: LD_ADDR_EXP 104
62988: PUSH
62989: LD_INT 0
62991: ST_TO_ADDR
// sComputer := false ;
62992: LD_ADDR_EXP 105
62996: PUSH
62997: LD_INT 0
62999: ST_TO_ADDR
// s30 := false ;
63000: LD_ADDR_EXP 106
63004: PUSH
63005: LD_INT 0
63007: ST_TO_ADDR
// s60 := false ;
63008: LD_ADDR_EXP 107
63012: PUSH
63013: LD_INT 0
63015: ST_TO_ADDR
// end ;
63016: LD_VAR 0 1
63020: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63021: LD_INT 0
63023: PPUSH
63024: PPUSH
63025: PPUSH
63026: PPUSH
63027: PPUSH
63028: PPUSH
63029: PPUSH
// result := [ ] ;
63030: LD_ADDR_VAR 0 2
63034: PUSH
63035: EMPTY
63036: ST_TO_ADDR
// if campaign_id = 1 then
63037: LD_OWVAR 69
63041: PUSH
63042: LD_INT 1
63044: EQUAL
63045: IFFALSE 66211
// begin case mission_number of 1 :
63047: LD_OWVAR 70
63051: PUSH
63052: LD_INT 1
63054: DOUBLE
63055: EQUAL
63056: IFTRUE 63060
63058: GO 63136
63060: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63061: LD_ADDR_VAR 0 2
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: LD_INT 4
63071: PUSH
63072: LD_INT 11
63074: PUSH
63075: LD_INT 12
63077: PUSH
63078: LD_INT 15
63080: PUSH
63081: LD_INT 16
63083: PUSH
63084: LD_INT 22
63086: PUSH
63087: LD_INT 23
63089: PUSH
63090: LD_INT 26
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 101
63106: PUSH
63107: LD_INT 102
63109: PUSH
63110: LD_INT 106
63112: PUSH
63113: LD_INT 116
63115: PUSH
63116: LD_INT 117
63118: PUSH
63119: LD_INT 118
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: ST_TO_ADDR
63134: GO 66209
63136: LD_INT 2
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63144
63142: GO 63228
63144: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63145: LD_ADDR_VAR 0 2
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: LD_INT 11
63158: PUSH
63159: LD_INT 12
63161: PUSH
63162: LD_INT 15
63164: PUSH
63165: LD_INT 16
63167: PUSH
63168: LD_INT 22
63170: PUSH
63171: LD_INT 23
63173: PUSH
63174: LD_INT 26
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 101
63190: PUSH
63191: LD_INT 102
63193: PUSH
63194: LD_INT 105
63196: PUSH
63197: LD_INT 106
63199: PUSH
63200: LD_INT 108
63202: PUSH
63203: LD_INT 116
63205: PUSH
63206: LD_INT 117
63208: PUSH
63209: LD_INT 118
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: ST_TO_ADDR
63226: GO 66209
63228: LD_INT 3
63230: DOUBLE
63231: EQUAL
63232: IFTRUE 63236
63234: GO 63324
63236: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63237: LD_ADDR_VAR 0 2
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: LD_INT 5
63250: PUSH
63251: LD_INT 11
63253: PUSH
63254: LD_INT 12
63256: PUSH
63257: LD_INT 15
63259: PUSH
63260: LD_INT 16
63262: PUSH
63263: LD_INT 22
63265: PUSH
63266: LD_INT 26
63268: PUSH
63269: LD_INT 36
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 101
63286: PUSH
63287: LD_INT 102
63289: PUSH
63290: LD_INT 105
63292: PUSH
63293: LD_INT 106
63295: PUSH
63296: LD_INT 108
63298: PUSH
63299: LD_INT 116
63301: PUSH
63302: LD_INT 117
63304: PUSH
63305: LD_INT 118
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: ST_TO_ADDR
63322: GO 66209
63324: LD_INT 4
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63332
63330: GO 63428
63332: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63333: LD_ADDR_VAR 0 2
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: LD_INT 5
63346: PUSH
63347: LD_INT 8
63349: PUSH
63350: LD_INT 11
63352: PUSH
63353: LD_INT 12
63355: PUSH
63356: LD_INT 15
63358: PUSH
63359: LD_INT 16
63361: PUSH
63362: LD_INT 22
63364: PUSH
63365: LD_INT 23
63367: PUSH
63368: LD_INT 26
63370: PUSH
63371: LD_INT 36
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 101
63390: PUSH
63391: LD_INT 102
63393: PUSH
63394: LD_INT 105
63396: PUSH
63397: LD_INT 106
63399: PUSH
63400: LD_INT 108
63402: PUSH
63403: LD_INT 116
63405: PUSH
63406: LD_INT 117
63408: PUSH
63409: LD_INT 118
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: ST_TO_ADDR
63426: GO 66209
63428: LD_INT 5
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63436
63434: GO 63548
63436: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63437: LD_ADDR_VAR 0 2
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 4
63447: PUSH
63448: LD_INT 5
63450: PUSH
63451: LD_INT 6
63453: PUSH
63454: LD_INT 8
63456: PUSH
63457: LD_INT 11
63459: PUSH
63460: LD_INT 12
63462: PUSH
63463: LD_INT 15
63465: PUSH
63466: LD_INT 16
63468: PUSH
63469: LD_INT 22
63471: PUSH
63472: LD_INT 23
63474: PUSH
63475: LD_INT 25
63477: PUSH
63478: LD_INT 26
63480: PUSH
63481: LD_INT 36
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 101
63502: PUSH
63503: LD_INT 102
63505: PUSH
63506: LD_INT 105
63508: PUSH
63509: LD_INT 106
63511: PUSH
63512: LD_INT 108
63514: PUSH
63515: LD_INT 109
63517: PUSH
63518: LD_INT 112
63520: PUSH
63521: LD_INT 116
63523: PUSH
63524: LD_INT 117
63526: PUSH
63527: LD_INT 118
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: ST_TO_ADDR
63546: GO 66209
63548: LD_INT 6
63550: DOUBLE
63551: EQUAL
63552: IFTRUE 63556
63554: GO 63688
63556: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63557: LD_ADDR_VAR 0 2
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: LD_INT 4
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: LD_INT 6
63573: PUSH
63574: LD_INT 8
63576: PUSH
63577: LD_INT 11
63579: PUSH
63580: LD_INT 12
63582: PUSH
63583: LD_INT 15
63585: PUSH
63586: LD_INT 16
63588: PUSH
63589: LD_INT 20
63591: PUSH
63592: LD_INT 21
63594: PUSH
63595: LD_INT 22
63597: PUSH
63598: LD_INT 23
63600: PUSH
63601: LD_INT 25
63603: PUSH
63604: LD_INT 26
63606: PUSH
63607: LD_INT 30
63609: PUSH
63610: LD_INT 31
63612: PUSH
63613: LD_INT 32
63615: PUSH
63616: LD_INT 36
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 101
63642: PUSH
63643: LD_INT 102
63645: PUSH
63646: LD_INT 105
63648: PUSH
63649: LD_INT 106
63651: PUSH
63652: LD_INT 108
63654: PUSH
63655: LD_INT 109
63657: PUSH
63658: LD_INT 112
63660: PUSH
63661: LD_INT 116
63663: PUSH
63664: LD_INT 117
63666: PUSH
63667: LD_INT 118
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: ST_TO_ADDR
63686: GO 66209
63688: LD_INT 7
63690: DOUBLE
63691: EQUAL
63692: IFTRUE 63696
63694: GO 63808
63696: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63697: LD_ADDR_VAR 0 2
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: LD_INT 5
63710: PUSH
63711: LD_INT 7
63713: PUSH
63714: LD_INT 11
63716: PUSH
63717: LD_INT 12
63719: PUSH
63720: LD_INT 15
63722: PUSH
63723: LD_INT 16
63725: PUSH
63726: LD_INT 20
63728: PUSH
63729: LD_INT 21
63731: PUSH
63732: LD_INT 22
63734: PUSH
63735: LD_INT 23
63737: PUSH
63738: LD_INT 25
63740: PUSH
63741: LD_INT 26
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 101
63762: PUSH
63763: LD_INT 102
63765: PUSH
63766: LD_INT 103
63768: PUSH
63769: LD_INT 105
63771: PUSH
63772: LD_INT 106
63774: PUSH
63775: LD_INT 108
63777: PUSH
63778: LD_INT 112
63780: PUSH
63781: LD_INT 116
63783: PUSH
63784: LD_INT 117
63786: PUSH
63787: LD_INT 118
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: ST_TO_ADDR
63806: GO 66209
63808: LD_INT 8
63810: DOUBLE
63811: EQUAL
63812: IFTRUE 63816
63814: GO 63956
63816: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63817: LD_ADDR_VAR 0 2
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 4
63827: PUSH
63828: LD_INT 5
63830: PUSH
63831: LD_INT 6
63833: PUSH
63834: LD_INT 7
63836: PUSH
63837: LD_INT 8
63839: PUSH
63840: LD_INT 11
63842: PUSH
63843: LD_INT 12
63845: PUSH
63846: LD_INT 15
63848: PUSH
63849: LD_INT 16
63851: PUSH
63852: LD_INT 20
63854: PUSH
63855: LD_INT 21
63857: PUSH
63858: LD_INT 22
63860: PUSH
63861: LD_INT 23
63863: PUSH
63864: LD_INT 25
63866: PUSH
63867: LD_INT 26
63869: PUSH
63870: LD_INT 30
63872: PUSH
63873: LD_INT 31
63875: PUSH
63876: LD_INT 32
63878: PUSH
63879: LD_INT 36
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 101
63906: PUSH
63907: LD_INT 102
63909: PUSH
63910: LD_INT 103
63912: PUSH
63913: LD_INT 105
63915: PUSH
63916: LD_INT 106
63918: PUSH
63919: LD_INT 108
63921: PUSH
63922: LD_INT 109
63924: PUSH
63925: LD_INT 112
63927: PUSH
63928: LD_INT 116
63930: PUSH
63931: LD_INT 117
63933: PUSH
63934: LD_INT 118
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: ST_TO_ADDR
63954: GO 66209
63956: LD_INT 9
63958: DOUBLE
63959: EQUAL
63960: IFTRUE 63964
63962: GO 64112
63964: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63965: LD_ADDR_VAR 0 2
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: LD_INT 4
63975: PUSH
63976: LD_INT 5
63978: PUSH
63979: LD_INT 6
63981: PUSH
63982: LD_INT 7
63984: PUSH
63985: LD_INT 8
63987: PUSH
63988: LD_INT 11
63990: PUSH
63991: LD_INT 12
63993: PUSH
63994: LD_INT 15
63996: PUSH
63997: LD_INT 16
63999: PUSH
64000: LD_INT 20
64002: PUSH
64003: LD_INT 21
64005: PUSH
64006: LD_INT 22
64008: PUSH
64009: LD_INT 23
64011: PUSH
64012: LD_INT 25
64014: PUSH
64015: LD_INT 26
64017: PUSH
64018: LD_INT 28
64020: PUSH
64021: LD_INT 30
64023: PUSH
64024: LD_INT 31
64026: PUSH
64027: LD_INT 32
64029: PUSH
64030: LD_INT 36
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 101
64058: PUSH
64059: LD_INT 102
64061: PUSH
64062: LD_INT 103
64064: PUSH
64065: LD_INT 105
64067: PUSH
64068: LD_INT 106
64070: PUSH
64071: LD_INT 108
64073: PUSH
64074: LD_INT 109
64076: PUSH
64077: LD_INT 112
64079: PUSH
64080: LD_INT 114
64082: PUSH
64083: LD_INT 116
64085: PUSH
64086: LD_INT 117
64088: PUSH
64089: LD_INT 118
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: ST_TO_ADDR
64110: GO 66209
64112: LD_INT 10
64114: DOUBLE
64115: EQUAL
64116: IFTRUE 64120
64118: GO 64316
64120: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64121: LD_ADDR_VAR 0 2
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: LD_INT 4
64131: PUSH
64132: LD_INT 5
64134: PUSH
64135: LD_INT 6
64137: PUSH
64138: LD_INT 7
64140: PUSH
64141: LD_INT 8
64143: PUSH
64144: LD_INT 9
64146: PUSH
64147: LD_INT 10
64149: PUSH
64150: LD_INT 11
64152: PUSH
64153: LD_INT 12
64155: PUSH
64156: LD_INT 13
64158: PUSH
64159: LD_INT 14
64161: PUSH
64162: LD_INT 15
64164: PUSH
64165: LD_INT 16
64167: PUSH
64168: LD_INT 17
64170: PUSH
64171: LD_INT 18
64173: PUSH
64174: LD_INT 19
64176: PUSH
64177: LD_INT 20
64179: PUSH
64180: LD_INT 21
64182: PUSH
64183: LD_INT 22
64185: PUSH
64186: LD_INT 23
64188: PUSH
64189: LD_INT 24
64191: PUSH
64192: LD_INT 25
64194: PUSH
64195: LD_INT 26
64197: PUSH
64198: LD_INT 28
64200: PUSH
64201: LD_INT 30
64203: PUSH
64204: LD_INT 31
64206: PUSH
64207: LD_INT 32
64209: PUSH
64210: LD_INT 36
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 101
64246: PUSH
64247: LD_INT 102
64249: PUSH
64250: LD_INT 103
64252: PUSH
64253: LD_INT 104
64255: PUSH
64256: LD_INT 105
64258: PUSH
64259: LD_INT 106
64261: PUSH
64262: LD_INT 107
64264: PUSH
64265: LD_INT 108
64267: PUSH
64268: LD_INT 109
64270: PUSH
64271: LD_INT 110
64273: PUSH
64274: LD_INT 111
64276: PUSH
64277: LD_INT 112
64279: PUSH
64280: LD_INT 114
64282: PUSH
64283: LD_INT 116
64285: PUSH
64286: LD_INT 117
64288: PUSH
64289: LD_INT 118
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: ST_TO_ADDR
64314: GO 66209
64316: LD_INT 11
64318: DOUBLE
64319: EQUAL
64320: IFTRUE 64324
64322: GO 64528
64324: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64325: LD_ADDR_VAR 0 2
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: LD_INT 4
64338: PUSH
64339: LD_INT 5
64341: PUSH
64342: LD_INT 6
64344: PUSH
64345: LD_INT 7
64347: PUSH
64348: LD_INT 8
64350: PUSH
64351: LD_INT 9
64353: PUSH
64354: LD_INT 10
64356: PUSH
64357: LD_INT 11
64359: PUSH
64360: LD_INT 12
64362: PUSH
64363: LD_INT 13
64365: PUSH
64366: LD_INT 14
64368: PUSH
64369: LD_INT 15
64371: PUSH
64372: LD_INT 16
64374: PUSH
64375: LD_INT 17
64377: PUSH
64378: LD_INT 18
64380: PUSH
64381: LD_INT 19
64383: PUSH
64384: LD_INT 20
64386: PUSH
64387: LD_INT 21
64389: PUSH
64390: LD_INT 22
64392: PUSH
64393: LD_INT 23
64395: PUSH
64396: LD_INT 24
64398: PUSH
64399: LD_INT 25
64401: PUSH
64402: LD_INT 26
64404: PUSH
64405: LD_INT 28
64407: PUSH
64408: LD_INT 30
64410: PUSH
64411: LD_INT 31
64413: PUSH
64414: LD_INT 32
64416: PUSH
64417: LD_INT 34
64419: PUSH
64420: LD_INT 36
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 101
64458: PUSH
64459: LD_INT 102
64461: PUSH
64462: LD_INT 103
64464: PUSH
64465: LD_INT 104
64467: PUSH
64468: LD_INT 105
64470: PUSH
64471: LD_INT 106
64473: PUSH
64474: LD_INT 107
64476: PUSH
64477: LD_INT 108
64479: PUSH
64480: LD_INT 109
64482: PUSH
64483: LD_INT 110
64485: PUSH
64486: LD_INT 111
64488: PUSH
64489: LD_INT 112
64491: PUSH
64492: LD_INT 114
64494: PUSH
64495: LD_INT 116
64497: PUSH
64498: LD_INT 117
64500: PUSH
64501: LD_INT 118
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: ST_TO_ADDR
64526: GO 66209
64528: LD_INT 12
64530: DOUBLE
64531: EQUAL
64532: IFTRUE 64536
64534: GO 64756
64536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64537: LD_ADDR_VAR 0 2
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: LD_INT 4
64553: PUSH
64554: LD_INT 5
64556: PUSH
64557: LD_INT 6
64559: PUSH
64560: LD_INT 7
64562: PUSH
64563: LD_INT 8
64565: PUSH
64566: LD_INT 9
64568: PUSH
64569: LD_INT 10
64571: PUSH
64572: LD_INT 11
64574: PUSH
64575: LD_INT 12
64577: PUSH
64578: LD_INT 13
64580: PUSH
64581: LD_INT 14
64583: PUSH
64584: LD_INT 15
64586: PUSH
64587: LD_INT 16
64589: PUSH
64590: LD_INT 17
64592: PUSH
64593: LD_INT 18
64595: PUSH
64596: LD_INT 19
64598: PUSH
64599: LD_INT 20
64601: PUSH
64602: LD_INT 21
64604: PUSH
64605: LD_INT 22
64607: PUSH
64608: LD_INT 23
64610: PUSH
64611: LD_INT 24
64613: PUSH
64614: LD_INT 25
64616: PUSH
64617: LD_INT 26
64619: PUSH
64620: LD_INT 27
64622: PUSH
64623: LD_INT 28
64625: PUSH
64626: LD_INT 30
64628: PUSH
64629: LD_INT 31
64631: PUSH
64632: LD_INT 32
64634: PUSH
64635: LD_INT 33
64637: PUSH
64638: LD_INT 34
64640: PUSH
64641: LD_INT 36
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 101
64682: PUSH
64683: LD_INT 102
64685: PUSH
64686: LD_INT 103
64688: PUSH
64689: LD_INT 104
64691: PUSH
64692: LD_INT 105
64694: PUSH
64695: LD_INT 106
64697: PUSH
64698: LD_INT 107
64700: PUSH
64701: LD_INT 108
64703: PUSH
64704: LD_INT 109
64706: PUSH
64707: LD_INT 110
64709: PUSH
64710: LD_INT 111
64712: PUSH
64713: LD_INT 112
64715: PUSH
64716: LD_INT 113
64718: PUSH
64719: LD_INT 114
64721: PUSH
64722: LD_INT 116
64724: PUSH
64725: LD_INT 117
64727: PUSH
64728: LD_INT 118
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: ST_TO_ADDR
64754: GO 66209
64756: LD_INT 13
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64972
64764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64765: LD_ADDR_VAR 0 2
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 2
64775: PUSH
64776: LD_INT 3
64778: PUSH
64779: LD_INT 4
64781: PUSH
64782: LD_INT 5
64784: PUSH
64785: LD_INT 8
64787: PUSH
64788: LD_INT 9
64790: PUSH
64791: LD_INT 10
64793: PUSH
64794: LD_INT 11
64796: PUSH
64797: LD_INT 12
64799: PUSH
64800: LD_INT 14
64802: PUSH
64803: LD_INT 15
64805: PUSH
64806: LD_INT 16
64808: PUSH
64809: LD_INT 17
64811: PUSH
64812: LD_INT 18
64814: PUSH
64815: LD_INT 19
64817: PUSH
64818: LD_INT 20
64820: PUSH
64821: LD_INT 21
64823: PUSH
64824: LD_INT 22
64826: PUSH
64827: LD_INT 23
64829: PUSH
64830: LD_INT 24
64832: PUSH
64833: LD_INT 25
64835: PUSH
64836: LD_INT 26
64838: PUSH
64839: LD_INT 27
64841: PUSH
64842: LD_INT 28
64844: PUSH
64845: LD_INT 30
64847: PUSH
64848: LD_INT 31
64850: PUSH
64851: LD_INT 32
64853: PUSH
64854: LD_INT 33
64856: PUSH
64857: LD_INT 34
64859: PUSH
64860: LD_INT 36
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 101
64898: PUSH
64899: LD_INT 102
64901: PUSH
64902: LD_INT 103
64904: PUSH
64905: LD_INT 104
64907: PUSH
64908: LD_INT 105
64910: PUSH
64911: LD_INT 106
64913: PUSH
64914: LD_INT 107
64916: PUSH
64917: LD_INT 108
64919: PUSH
64920: LD_INT 109
64922: PUSH
64923: LD_INT 110
64925: PUSH
64926: LD_INT 111
64928: PUSH
64929: LD_INT 112
64931: PUSH
64932: LD_INT 113
64934: PUSH
64935: LD_INT 114
64937: PUSH
64938: LD_INT 116
64940: PUSH
64941: LD_INT 117
64943: PUSH
64944: LD_INT 118
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: ST_TO_ADDR
64970: GO 66209
64972: LD_INT 14
64974: DOUBLE
64975: EQUAL
64976: IFTRUE 64980
64978: GO 65204
64980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64981: LD_ADDR_VAR 0 2
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: LD_INT 2
64991: PUSH
64992: LD_INT 3
64994: PUSH
64995: LD_INT 4
64997: PUSH
64998: LD_INT 5
65000: PUSH
65001: LD_INT 6
65003: PUSH
65004: LD_INT 7
65006: PUSH
65007: LD_INT 8
65009: PUSH
65010: LD_INT 9
65012: PUSH
65013: LD_INT 10
65015: PUSH
65016: LD_INT 11
65018: PUSH
65019: LD_INT 12
65021: PUSH
65022: LD_INT 13
65024: PUSH
65025: LD_INT 14
65027: PUSH
65028: LD_INT 15
65030: PUSH
65031: LD_INT 16
65033: PUSH
65034: LD_INT 17
65036: PUSH
65037: LD_INT 18
65039: PUSH
65040: LD_INT 19
65042: PUSH
65043: LD_INT 20
65045: PUSH
65046: LD_INT 21
65048: PUSH
65049: LD_INT 22
65051: PUSH
65052: LD_INT 23
65054: PUSH
65055: LD_INT 24
65057: PUSH
65058: LD_INT 25
65060: PUSH
65061: LD_INT 26
65063: PUSH
65064: LD_INT 27
65066: PUSH
65067: LD_INT 28
65069: PUSH
65070: LD_INT 29
65072: PUSH
65073: LD_INT 30
65075: PUSH
65076: LD_INT 31
65078: PUSH
65079: LD_INT 32
65081: PUSH
65082: LD_INT 33
65084: PUSH
65085: LD_INT 34
65087: PUSH
65088: LD_INT 36
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 101
65130: PUSH
65131: LD_INT 102
65133: PUSH
65134: LD_INT 103
65136: PUSH
65137: LD_INT 104
65139: PUSH
65140: LD_INT 105
65142: PUSH
65143: LD_INT 106
65145: PUSH
65146: LD_INT 107
65148: PUSH
65149: LD_INT 108
65151: PUSH
65152: LD_INT 109
65154: PUSH
65155: LD_INT 110
65157: PUSH
65158: LD_INT 111
65160: PUSH
65161: LD_INT 112
65163: PUSH
65164: LD_INT 113
65166: PUSH
65167: LD_INT 114
65169: PUSH
65170: LD_INT 116
65172: PUSH
65173: LD_INT 117
65175: PUSH
65176: LD_INT 118
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: ST_TO_ADDR
65202: GO 66209
65204: LD_INT 15
65206: DOUBLE
65207: EQUAL
65208: IFTRUE 65212
65210: GO 65436
65212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65213: LD_ADDR_VAR 0 2
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: LD_INT 2
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 4
65229: PUSH
65230: LD_INT 5
65232: PUSH
65233: LD_INT 6
65235: PUSH
65236: LD_INT 7
65238: PUSH
65239: LD_INT 8
65241: PUSH
65242: LD_INT 9
65244: PUSH
65245: LD_INT 10
65247: PUSH
65248: LD_INT 11
65250: PUSH
65251: LD_INT 12
65253: PUSH
65254: LD_INT 13
65256: PUSH
65257: LD_INT 14
65259: PUSH
65260: LD_INT 15
65262: PUSH
65263: LD_INT 16
65265: PUSH
65266: LD_INT 17
65268: PUSH
65269: LD_INT 18
65271: PUSH
65272: LD_INT 19
65274: PUSH
65275: LD_INT 20
65277: PUSH
65278: LD_INT 21
65280: PUSH
65281: LD_INT 22
65283: PUSH
65284: LD_INT 23
65286: PUSH
65287: LD_INT 24
65289: PUSH
65290: LD_INT 25
65292: PUSH
65293: LD_INT 26
65295: PUSH
65296: LD_INT 27
65298: PUSH
65299: LD_INT 28
65301: PUSH
65302: LD_INT 29
65304: PUSH
65305: LD_INT 30
65307: PUSH
65308: LD_INT 31
65310: PUSH
65311: LD_INT 32
65313: PUSH
65314: LD_INT 33
65316: PUSH
65317: LD_INT 34
65319: PUSH
65320: LD_INT 36
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 101
65362: PUSH
65363: LD_INT 102
65365: PUSH
65366: LD_INT 103
65368: PUSH
65369: LD_INT 104
65371: PUSH
65372: LD_INT 105
65374: PUSH
65375: LD_INT 106
65377: PUSH
65378: LD_INT 107
65380: PUSH
65381: LD_INT 108
65383: PUSH
65384: LD_INT 109
65386: PUSH
65387: LD_INT 110
65389: PUSH
65390: LD_INT 111
65392: PUSH
65393: LD_INT 112
65395: PUSH
65396: LD_INT 113
65398: PUSH
65399: LD_INT 114
65401: PUSH
65402: LD_INT 116
65404: PUSH
65405: LD_INT 117
65407: PUSH
65408: LD_INT 118
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: ST_TO_ADDR
65434: GO 66209
65436: LD_INT 16
65438: DOUBLE
65439: EQUAL
65440: IFTRUE 65444
65442: GO 65580
65444: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65445: LD_ADDR_VAR 0 2
65449: PUSH
65450: LD_INT 2
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: LD_INT 5
65458: PUSH
65459: LD_INT 7
65461: PUSH
65462: LD_INT 11
65464: PUSH
65465: LD_INT 12
65467: PUSH
65468: LD_INT 15
65470: PUSH
65471: LD_INT 16
65473: PUSH
65474: LD_INT 20
65476: PUSH
65477: LD_INT 21
65479: PUSH
65480: LD_INT 22
65482: PUSH
65483: LD_INT 23
65485: PUSH
65486: LD_INT 25
65488: PUSH
65489: LD_INT 26
65491: PUSH
65492: LD_INT 30
65494: PUSH
65495: LD_INT 31
65497: PUSH
65498: LD_INT 32
65500: PUSH
65501: LD_INT 33
65503: PUSH
65504: LD_INT 34
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 101
65530: PUSH
65531: LD_INT 102
65533: PUSH
65534: LD_INT 103
65536: PUSH
65537: LD_INT 106
65539: PUSH
65540: LD_INT 108
65542: PUSH
65543: LD_INT 112
65545: PUSH
65546: LD_INT 113
65548: PUSH
65549: LD_INT 114
65551: PUSH
65552: LD_INT 116
65554: PUSH
65555: LD_INT 117
65557: PUSH
65558: LD_INT 118
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: ST_TO_ADDR
65578: GO 66209
65580: LD_INT 17
65582: DOUBLE
65583: EQUAL
65584: IFTRUE 65588
65586: GO 65812
65588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65589: LD_ADDR_VAR 0 2
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 2
65599: PUSH
65600: LD_INT 3
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: LD_INT 5
65608: PUSH
65609: LD_INT 6
65611: PUSH
65612: LD_INT 7
65614: PUSH
65615: LD_INT 8
65617: PUSH
65618: LD_INT 9
65620: PUSH
65621: LD_INT 10
65623: PUSH
65624: LD_INT 11
65626: PUSH
65627: LD_INT 12
65629: PUSH
65630: LD_INT 13
65632: PUSH
65633: LD_INT 14
65635: PUSH
65636: LD_INT 15
65638: PUSH
65639: LD_INT 16
65641: PUSH
65642: LD_INT 17
65644: PUSH
65645: LD_INT 18
65647: PUSH
65648: LD_INT 19
65650: PUSH
65651: LD_INT 20
65653: PUSH
65654: LD_INT 21
65656: PUSH
65657: LD_INT 22
65659: PUSH
65660: LD_INT 23
65662: PUSH
65663: LD_INT 24
65665: PUSH
65666: LD_INT 25
65668: PUSH
65669: LD_INT 26
65671: PUSH
65672: LD_INT 27
65674: PUSH
65675: LD_INT 28
65677: PUSH
65678: LD_INT 29
65680: PUSH
65681: LD_INT 30
65683: PUSH
65684: LD_INT 31
65686: PUSH
65687: LD_INT 32
65689: PUSH
65690: LD_INT 33
65692: PUSH
65693: LD_INT 34
65695: PUSH
65696: LD_INT 36
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 101
65738: PUSH
65739: LD_INT 102
65741: PUSH
65742: LD_INT 103
65744: PUSH
65745: LD_INT 104
65747: PUSH
65748: LD_INT 105
65750: PUSH
65751: LD_INT 106
65753: PUSH
65754: LD_INT 107
65756: PUSH
65757: LD_INT 108
65759: PUSH
65760: LD_INT 109
65762: PUSH
65763: LD_INT 110
65765: PUSH
65766: LD_INT 111
65768: PUSH
65769: LD_INT 112
65771: PUSH
65772: LD_INT 113
65774: PUSH
65775: LD_INT 114
65777: PUSH
65778: LD_INT 116
65780: PUSH
65781: LD_INT 117
65783: PUSH
65784: LD_INT 118
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: ST_TO_ADDR
65810: GO 66209
65812: LD_INT 18
65814: DOUBLE
65815: EQUAL
65816: IFTRUE 65820
65818: GO 65968
65820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65821: LD_ADDR_VAR 0 2
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 4
65831: PUSH
65832: LD_INT 5
65834: PUSH
65835: LD_INT 7
65837: PUSH
65838: LD_INT 11
65840: PUSH
65841: LD_INT 12
65843: PUSH
65844: LD_INT 15
65846: PUSH
65847: LD_INT 16
65849: PUSH
65850: LD_INT 20
65852: PUSH
65853: LD_INT 21
65855: PUSH
65856: LD_INT 22
65858: PUSH
65859: LD_INT 23
65861: PUSH
65862: LD_INT 25
65864: PUSH
65865: LD_INT 26
65867: PUSH
65868: LD_INT 30
65870: PUSH
65871: LD_INT 31
65873: PUSH
65874: LD_INT 32
65876: PUSH
65877: LD_INT 33
65879: PUSH
65880: LD_INT 34
65882: PUSH
65883: LD_INT 35
65885: PUSH
65886: LD_INT 36
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 101
65914: PUSH
65915: LD_INT 102
65917: PUSH
65918: LD_INT 103
65920: PUSH
65921: LD_INT 106
65923: PUSH
65924: LD_INT 108
65926: PUSH
65927: LD_INT 112
65929: PUSH
65930: LD_INT 113
65932: PUSH
65933: LD_INT 114
65935: PUSH
65936: LD_INT 115
65938: PUSH
65939: LD_INT 116
65941: PUSH
65942: LD_INT 117
65944: PUSH
65945: LD_INT 118
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: ST_TO_ADDR
65966: GO 66209
65968: LD_INT 19
65970: DOUBLE
65971: EQUAL
65972: IFTRUE 65976
65974: GO 66208
65976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65977: LD_ADDR_VAR 0 2
65981: PUSH
65982: LD_INT 1
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: LD_INT 3
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: LD_INT 5
65996: PUSH
65997: LD_INT 6
65999: PUSH
66000: LD_INT 7
66002: PUSH
66003: LD_INT 8
66005: PUSH
66006: LD_INT 9
66008: PUSH
66009: LD_INT 10
66011: PUSH
66012: LD_INT 11
66014: PUSH
66015: LD_INT 12
66017: PUSH
66018: LD_INT 13
66020: PUSH
66021: LD_INT 14
66023: PUSH
66024: LD_INT 15
66026: PUSH
66027: LD_INT 16
66029: PUSH
66030: LD_INT 17
66032: PUSH
66033: LD_INT 18
66035: PUSH
66036: LD_INT 19
66038: PUSH
66039: LD_INT 20
66041: PUSH
66042: LD_INT 21
66044: PUSH
66045: LD_INT 22
66047: PUSH
66048: LD_INT 23
66050: PUSH
66051: LD_INT 24
66053: PUSH
66054: LD_INT 25
66056: PUSH
66057: LD_INT 26
66059: PUSH
66060: LD_INT 27
66062: PUSH
66063: LD_INT 28
66065: PUSH
66066: LD_INT 29
66068: PUSH
66069: LD_INT 30
66071: PUSH
66072: LD_INT 31
66074: PUSH
66075: LD_INT 32
66077: PUSH
66078: LD_INT 33
66080: PUSH
66081: LD_INT 34
66083: PUSH
66084: LD_INT 35
66086: PUSH
66087: LD_INT 36
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 101
66130: PUSH
66131: LD_INT 102
66133: PUSH
66134: LD_INT 103
66136: PUSH
66137: LD_INT 104
66139: PUSH
66140: LD_INT 105
66142: PUSH
66143: LD_INT 106
66145: PUSH
66146: LD_INT 107
66148: PUSH
66149: LD_INT 108
66151: PUSH
66152: LD_INT 109
66154: PUSH
66155: LD_INT 110
66157: PUSH
66158: LD_INT 111
66160: PUSH
66161: LD_INT 112
66163: PUSH
66164: LD_INT 113
66166: PUSH
66167: LD_INT 114
66169: PUSH
66170: LD_INT 115
66172: PUSH
66173: LD_INT 116
66175: PUSH
66176: LD_INT 117
66178: PUSH
66179: LD_INT 118
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: ST_TO_ADDR
66206: GO 66209
66208: POP
// end else
66209: GO 66440
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66211: LD_ADDR_VAR 0 2
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: LD_INT 4
66227: PUSH
66228: LD_INT 5
66230: PUSH
66231: LD_INT 6
66233: PUSH
66234: LD_INT 7
66236: PUSH
66237: LD_INT 8
66239: PUSH
66240: LD_INT 9
66242: PUSH
66243: LD_INT 10
66245: PUSH
66246: LD_INT 11
66248: PUSH
66249: LD_INT 12
66251: PUSH
66252: LD_INT 13
66254: PUSH
66255: LD_INT 14
66257: PUSH
66258: LD_INT 15
66260: PUSH
66261: LD_INT 16
66263: PUSH
66264: LD_INT 17
66266: PUSH
66267: LD_INT 18
66269: PUSH
66270: LD_INT 19
66272: PUSH
66273: LD_INT 20
66275: PUSH
66276: LD_INT 21
66278: PUSH
66279: LD_INT 22
66281: PUSH
66282: LD_INT 23
66284: PUSH
66285: LD_INT 24
66287: PUSH
66288: LD_INT 25
66290: PUSH
66291: LD_INT 26
66293: PUSH
66294: LD_INT 27
66296: PUSH
66297: LD_INT 28
66299: PUSH
66300: LD_INT 29
66302: PUSH
66303: LD_INT 30
66305: PUSH
66306: LD_INT 31
66308: PUSH
66309: LD_INT 32
66311: PUSH
66312: LD_INT 33
66314: PUSH
66315: LD_INT 34
66317: PUSH
66318: LD_INT 35
66320: PUSH
66321: LD_INT 36
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 101
66364: PUSH
66365: LD_INT 102
66367: PUSH
66368: LD_INT 103
66370: PUSH
66371: LD_INT 104
66373: PUSH
66374: LD_INT 105
66376: PUSH
66377: LD_INT 106
66379: PUSH
66380: LD_INT 107
66382: PUSH
66383: LD_INT 108
66385: PUSH
66386: LD_INT 109
66388: PUSH
66389: LD_INT 110
66391: PUSH
66392: LD_INT 111
66394: PUSH
66395: LD_INT 112
66397: PUSH
66398: LD_INT 113
66400: PUSH
66401: LD_INT 114
66403: PUSH
66404: LD_INT 115
66406: PUSH
66407: LD_INT 116
66409: PUSH
66410: LD_INT 117
66412: PUSH
66413: LD_INT 118
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: ST_TO_ADDR
// if result then
66440: LD_VAR 0 2
66444: IFFALSE 67230
// begin normal :=  ;
66446: LD_ADDR_VAR 0 5
66450: PUSH
66451: LD_STRING 
66453: ST_TO_ADDR
// hardcore :=  ;
66454: LD_ADDR_VAR 0 6
66458: PUSH
66459: LD_STRING 
66461: ST_TO_ADDR
// active :=  ;
66462: LD_ADDR_VAR 0 7
66466: PUSH
66467: LD_STRING 
66469: ST_TO_ADDR
// for i = 1 to normalCounter do
66470: LD_ADDR_VAR 0 8
66474: PUSH
66475: DOUBLE
66476: LD_INT 1
66478: DEC
66479: ST_TO_ADDR
66480: LD_EXP 52
66484: PUSH
66485: FOR_TO
66486: IFFALSE 66587
// begin tmp := 0 ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_STRING 0
66495: ST_TO_ADDR
// if result [ 1 ] then
66496: LD_VAR 0 2
66500: PUSH
66501: LD_INT 1
66503: ARRAY
66504: IFFALSE 66569
// if result [ 1 ] [ 1 ] = i then
66506: LD_VAR 0 2
66510: PUSH
66511: LD_INT 1
66513: ARRAY
66514: PUSH
66515: LD_INT 1
66517: ARRAY
66518: PUSH
66519: LD_VAR 0 8
66523: EQUAL
66524: IFFALSE 66569
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66526: LD_ADDR_VAR 0 2
66530: PUSH
66531: LD_VAR 0 2
66535: PPUSH
66536: LD_INT 1
66538: PPUSH
66539: LD_VAR 0 2
66543: PUSH
66544: LD_INT 1
66546: ARRAY
66547: PPUSH
66548: LD_INT 1
66550: PPUSH
66551: CALL_OW 3
66555: PPUSH
66556: CALL_OW 1
66560: ST_TO_ADDR
// tmp := 1 ;
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: LD_STRING 1
66568: ST_TO_ADDR
// end ; normal := normal & tmp ;
66569: LD_ADDR_VAR 0 5
66573: PUSH
66574: LD_VAR 0 5
66578: PUSH
66579: LD_VAR 0 3
66583: STR
66584: ST_TO_ADDR
// end ;
66585: GO 66485
66587: POP
66588: POP
// for i = 1 to hardcoreCounter do
66589: LD_ADDR_VAR 0 8
66593: PUSH
66594: DOUBLE
66595: LD_INT 1
66597: DEC
66598: ST_TO_ADDR
66599: LD_EXP 53
66603: PUSH
66604: FOR_TO
66605: IFFALSE 66710
// begin tmp := 0 ;
66607: LD_ADDR_VAR 0 3
66611: PUSH
66612: LD_STRING 0
66614: ST_TO_ADDR
// if result [ 2 ] then
66615: LD_VAR 0 2
66619: PUSH
66620: LD_INT 2
66622: ARRAY
66623: IFFALSE 66692
// if result [ 2 ] [ 1 ] = 100 + i then
66625: LD_VAR 0 2
66629: PUSH
66630: LD_INT 2
66632: ARRAY
66633: PUSH
66634: LD_INT 1
66636: ARRAY
66637: PUSH
66638: LD_INT 100
66640: PUSH
66641: LD_VAR 0 8
66645: PLUS
66646: EQUAL
66647: IFFALSE 66692
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66649: LD_ADDR_VAR 0 2
66653: PUSH
66654: LD_VAR 0 2
66658: PPUSH
66659: LD_INT 2
66661: PPUSH
66662: LD_VAR 0 2
66666: PUSH
66667: LD_INT 2
66669: ARRAY
66670: PPUSH
66671: LD_INT 1
66673: PPUSH
66674: CALL_OW 3
66678: PPUSH
66679: CALL_OW 1
66683: ST_TO_ADDR
// tmp := 1 ;
66684: LD_ADDR_VAR 0 3
66688: PUSH
66689: LD_STRING 1
66691: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66692: LD_ADDR_VAR 0 6
66696: PUSH
66697: LD_VAR 0 6
66701: PUSH
66702: LD_VAR 0 3
66706: STR
66707: ST_TO_ADDR
// end ;
66708: GO 66604
66710: POP
66711: POP
// if isGameLoad then
66712: LD_VAR 0 1
66716: IFFALSE 67191
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66718: LD_ADDR_VAR 0 4
66722: PUSH
66723: LD_EXP 56
66727: PUSH
66728: LD_EXP 55
66732: PUSH
66733: LD_EXP 57
66737: PUSH
66738: LD_EXP 54
66742: PUSH
66743: LD_EXP 58
66747: PUSH
66748: LD_EXP 59
66752: PUSH
66753: LD_EXP 60
66757: PUSH
66758: LD_EXP 61
66762: PUSH
66763: LD_EXP 62
66767: PUSH
66768: LD_EXP 63
66772: PUSH
66773: LD_EXP 64
66777: PUSH
66778: LD_EXP 65
66782: PUSH
66783: LD_EXP 66
66787: PUSH
66788: LD_EXP 67
66792: PUSH
66793: LD_EXP 75
66797: PUSH
66798: LD_EXP 76
66802: PUSH
66803: LD_EXP 77
66807: PUSH
66808: LD_EXP 78
66812: PUSH
66813: LD_EXP 80
66817: PUSH
66818: LD_EXP 81
66822: PUSH
66823: LD_EXP 82
66827: PUSH
66828: LD_EXP 85
66832: PUSH
66833: LD_EXP 87
66837: PUSH
66838: LD_EXP 88
66842: PUSH
66843: LD_EXP 89
66847: PUSH
66848: LD_EXP 91
66852: PUSH
66853: LD_EXP 92
66857: PUSH
66858: LD_EXP 95
66862: PUSH
66863: LD_EXP 96
66867: PUSH
66868: LD_EXP 97
66872: PUSH
66873: LD_EXP 98
66877: PUSH
66878: LD_EXP 99
66882: PUSH
66883: LD_EXP 100
66887: PUSH
66888: LD_EXP 101
66892: PUSH
66893: LD_EXP 102
66897: PUSH
66898: LD_EXP 103
66902: PUSH
66903: LD_EXP 68
66907: PUSH
66908: LD_EXP 69
66912: PUSH
66913: LD_EXP 72
66917: PUSH
66918: LD_EXP 73
66922: PUSH
66923: LD_EXP 74
66927: PUSH
66928: LD_EXP 70
66932: PUSH
66933: LD_EXP 71
66937: PUSH
66938: LD_EXP 79
66942: PUSH
66943: LD_EXP 83
66947: PUSH
66948: LD_EXP 84
66952: PUSH
66953: LD_EXP 86
66957: PUSH
66958: LD_EXP 90
66962: PUSH
66963: LD_EXP 93
66967: PUSH
66968: LD_EXP 94
66972: PUSH
66973: LD_EXP 104
66977: PUSH
66978: LD_EXP 105
66982: PUSH
66983: LD_EXP 106
66987: PUSH
66988: LD_EXP 107
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: ST_TO_ADDR
// tmp :=  ;
67049: LD_ADDR_VAR 0 3
67053: PUSH
67054: LD_STRING 
67056: ST_TO_ADDR
// for i = 1 to normalCounter do
67057: LD_ADDR_VAR 0 8
67061: PUSH
67062: DOUBLE
67063: LD_INT 1
67065: DEC
67066: ST_TO_ADDR
67067: LD_EXP 52
67071: PUSH
67072: FOR_TO
67073: IFFALSE 67109
// begin if flags [ i ] then
67075: LD_VAR 0 4
67079: PUSH
67080: LD_VAR 0 8
67084: ARRAY
67085: IFFALSE 67107
// tmp := tmp & i & ; ;
67087: LD_ADDR_VAR 0 3
67091: PUSH
67092: LD_VAR 0 3
67096: PUSH
67097: LD_VAR 0 8
67101: STR
67102: PUSH
67103: LD_STRING ;
67105: STR
67106: ST_TO_ADDR
// end ;
67107: GO 67072
67109: POP
67110: POP
// for i = 1 to hardcoreCounter do
67111: LD_ADDR_VAR 0 8
67115: PUSH
67116: DOUBLE
67117: LD_INT 1
67119: DEC
67120: ST_TO_ADDR
67121: LD_EXP 53
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67173
// begin if flags [ normalCounter + i ] then
67129: LD_VAR 0 4
67133: PUSH
67134: LD_EXP 52
67138: PUSH
67139: LD_VAR 0 8
67143: PLUS
67144: ARRAY
67145: IFFALSE 67171
// tmp := tmp & ( 100 + i ) & ; ;
67147: LD_ADDR_VAR 0 3
67151: PUSH
67152: LD_VAR 0 3
67156: PUSH
67157: LD_INT 100
67159: PUSH
67160: LD_VAR 0 8
67164: PLUS
67165: STR
67166: PUSH
67167: LD_STRING ;
67169: STR
67170: ST_TO_ADDR
// end ;
67171: GO 67126
67173: POP
67174: POP
// if tmp then
67175: LD_VAR 0 3
67179: IFFALSE 67191
// active := tmp ;
67181: LD_ADDR_VAR 0 7
67185: PUSH
67186: LD_VAR 0 3
67190: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67191: LD_STRING getStreamItemsFromMission("
67193: PUSH
67194: LD_VAR 0 5
67198: STR
67199: PUSH
67200: LD_STRING ","
67202: STR
67203: PUSH
67204: LD_VAR 0 6
67208: STR
67209: PUSH
67210: LD_STRING ","
67212: STR
67213: PUSH
67214: LD_VAR 0 7
67218: STR
67219: PUSH
67220: LD_STRING ")
67222: STR
67223: PPUSH
67224: CALL_OW 559
// end else
67228: GO 67237
// ToLua ( getStreamItemsFromMission("","","") ) ;
67230: LD_STRING getStreamItemsFromMission("","","")
67232: PPUSH
67233: CALL_OW 559
// end ;
67237: LD_VAR 0 2
67241: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67242: LD_EXP 51
67246: IFFALSE 67254
67248: PUSH
67249: LD_EXP 56
67253: AND
67254: IFFALSE 67378
67256: GO 67258
67258: DISABLE
67259: LD_INT 0
67261: PPUSH
67262: PPUSH
// begin enable ;
67263: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67264: LD_ADDR_VAR 0 2
67268: PUSH
67269: LD_INT 22
67271: PUSH
67272: LD_OWVAR 2
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: LD_INT 34
67286: PUSH
67287: LD_INT 7
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 34
67296: PUSH
67297: LD_INT 45
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 34
67306: PUSH
67307: LD_INT 28
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 34
67316: PUSH
67317: LD_INT 47
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PPUSH
67335: CALL_OW 69
67339: ST_TO_ADDR
// if not tmp then
67340: LD_VAR 0 2
67344: NOT
67345: IFFALSE 67349
// exit ;
67347: GO 67378
// for i in tmp do
67349: LD_ADDR_VAR 0 1
67353: PUSH
67354: LD_VAR 0 2
67358: PUSH
67359: FOR_IN
67360: IFFALSE 67376
// begin SetLives ( i , 0 ) ;
67362: LD_VAR 0 1
67366: PPUSH
67367: LD_INT 0
67369: PPUSH
67370: CALL_OW 234
// end ;
67374: GO 67359
67376: POP
67377: POP
// end ;
67378: PPOPN 2
67380: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67381: LD_EXP 51
67385: IFFALSE 67393
67387: PUSH
67388: LD_EXP 57
67392: AND
67393: IFFALSE 67477
67395: GO 67397
67397: DISABLE
67398: LD_INT 0
67400: PPUSH
67401: PPUSH
// begin enable ;
67402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67403: LD_ADDR_VAR 0 2
67407: PUSH
67408: LD_INT 22
67410: PUSH
67411: LD_OWVAR 2
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 32
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PPUSH
67434: CALL_OW 69
67438: ST_TO_ADDR
// if not tmp then
67439: LD_VAR 0 2
67443: NOT
67444: IFFALSE 67448
// exit ;
67446: GO 67477
// for i in tmp do
67448: LD_ADDR_VAR 0 1
67452: PUSH
67453: LD_VAR 0 2
67457: PUSH
67458: FOR_IN
67459: IFFALSE 67475
// begin SetLives ( i , 0 ) ;
67461: LD_VAR 0 1
67465: PPUSH
67466: LD_INT 0
67468: PPUSH
67469: CALL_OW 234
// end ;
67473: GO 67458
67475: POP
67476: POP
// end ;
67477: PPOPN 2
67479: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67480: LD_EXP 51
67484: IFFALSE 67492
67486: PUSH
67487: LD_EXP 54
67491: AND
67492: IFFALSE 67585
67494: GO 67496
67496: DISABLE
67497: LD_INT 0
67499: PPUSH
// begin enable ;
67500: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67501: LD_ADDR_VAR 0 1
67505: PUSH
67506: LD_INT 22
67508: PUSH
67509: LD_OWVAR 2
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 25
67523: PUSH
67524: LD_INT 5
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 25
67533: PUSH
67534: LD_INT 9
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 25
67543: PUSH
67544: LD_INT 8
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PPUSH
67561: CALL_OW 69
67565: PUSH
67566: FOR_IN
67567: IFFALSE 67583
// begin SetClass ( i , 1 ) ;
67569: LD_VAR 0 1
67573: PPUSH
67574: LD_INT 1
67576: PPUSH
67577: CALL_OW 336
// end ;
67581: GO 67566
67583: POP
67584: POP
// end ;
67585: PPOPN 1
67587: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67588: LD_EXP 51
67592: IFFALSE 67600
67594: PUSH
67595: LD_EXP 55
67599: AND
67600: IFFALSE 67612
67602: PUSH
67603: LD_OWVAR 65
67607: PUSH
67608: LD_INT 7
67610: LESS
67611: AND
67612: IFFALSE 67626
67614: GO 67616
67616: DISABLE
// begin enable ;
67617: ENABLE
// game_speed := 7 ;
67618: LD_ADDR_OWVAR 65
67622: PUSH
67623: LD_INT 7
67625: ST_TO_ADDR
// end ;
67626: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67627: LD_EXP 51
67631: IFFALSE 67639
67633: PUSH
67634: LD_EXP 58
67638: AND
67639: IFFALSE 67841
67641: GO 67643
67643: DISABLE
67644: LD_INT 0
67646: PPUSH
67647: PPUSH
67648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67649: LD_ADDR_VAR 0 3
67653: PUSH
67654: LD_INT 81
67656: PUSH
67657: LD_OWVAR 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 21
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PPUSH
67680: CALL_OW 69
67684: ST_TO_ADDR
// if not tmp then
67685: LD_VAR 0 3
67689: NOT
67690: IFFALSE 67694
// exit ;
67692: GO 67841
// if tmp > 5 then
67694: LD_VAR 0 3
67698: PUSH
67699: LD_INT 5
67701: GREATER
67702: IFFALSE 67714
// k := 5 else
67704: LD_ADDR_VAR 0 2
67708: PUSH
67709: LD_INT 5
67711: ST_TO_ADDR
67712: GO 67724
// k := tmp ;
67714: LD_ADDR_VAR 0 2
67718: PUSH
67719: LD_VAR 0 3
67723: ST_TO_ADDR
// for i := 1 to k do
67724: LD_ADDR_VAR 0 1
67728: PUSH
67729: DOUBLE
67730: LD_INT 1
67732: DEC
67733: ST_TO_ADDR
67734: LD_VAR 0 2
67738: PUSH
67739: FOR_TO
67740: IFFALSE 67839
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67742: LD_VAR 0 3
67746: PUSH
67747: LD_VAR 0 1
67751: ARRAY
67752: PPUSH
67753: LD_VAR 0 1
67757: PUSH
67758: LD_INT 4
67760: MOD
67761: PUSH
67762: LD_INT 1
67764: PLUS
67765: PPUSH
67766: CALL_OW 259
67770: PUSH
67771: LD_INT 10
67773: LESS
67774: IFFALSE 67837
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67776: LD_VAR 0 3
67780: PUSH
67781: LD_VAR 0 1
67785: ARRAY
67786: PPUSH
67787: LD_VAR 0 1
67791: PUSH
67792: LD_INT 4
67794: MOD
67795: PUSH
67796: LD_INT 1
67798: PLUS
67799: PPUSH
67800: LD_VAR 0 3
67804: PUSH
67805: LD_VAR 0 1
67809: ARRAY
67810: PPUSH
67811: LD_VAR 0 1
67815: PUSH
67816: LD_INT 4
67818: MOD
67819: PUSH
67820: LD_INT 1
67822: PLUS
67823: PPUSH
67824: CALL_OW 259
67828: PUSH
67829: LD_INT 1
67831: PLUS
67832: PPUSH
67833: CALL_OW 237
67837: GO 67739
67839: POP
67840: POP
// end ;
67841: PPOPN 3
67843: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67844: LD_EXP 51
67848: IFFALSE 67856
67850: PUSH
67851: LD_EXP 59
67855: AND
67856: IFFALSE 67876
67858: GO 67860
67860: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67861: LD_INT 4
67863: PPUSH
67864: LD_OWVAR 2
67868: PPUSH
67869: LD_INT 0
67871: PPUSH
67872: CALL_OW 324
67876: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67877: LD_EXP 51
67881: IFFALSE 67889
67883: PUSH
67884: LD_EXP 88
67888: AND
67889: IFFALSE 67909
67891: GO 67893
67893: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67894: LD_INT 19
67896: PPUSH
67897: LD_OWVAR 2
67901: PPUSH
67902: LD_INT 0
67904: PPUSH
67905: CALL_OW 324
67909: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67910: LD_EXP 51
67914: IFFALSE 67922
67916: PUSH
67917: LD_EXP 60
67921: AND
67922: IFFALSE 68024
67924: GO 67926
67926: DISABLE
67927: LD_INT 0
67929: PPUSH
67930: PPUSH
// begin enable ;
67931: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67932: LD_ADDR_VAR 0 2
67936: PUSH
67937: LD_INT 22
67939: PUSH
67940: LD_OWVAR 2
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: LD_INT 34
67954: PUSH
67955: LD_INT 11
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 34
67964: PUSH
67965: LD_INT 30
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: LIST
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PPUSH
67981: CALL_OW 69
67985: ST_TO_ADDR
// if not tmp then
67986: LD_VAR 0 2
67990: NOT
67991: IFFALSE 67995
// exit ;
67993: GO 68024
// for i in tmp do
67995: LD_ADDR_VAR 0 1
67999: PUSH
68000: LD_VAR 0 2
68004: PUSH
68005: FOR_IN
68006: IFFALSE 68022
// begin SetLives ( i , 0 ) ;
68008: LD_VAR 0 1
68012: PPUSH
68013: LD_INT 0
68015: PPUSH
68016: CALL_OW 234
// end ;
68020: GO 68005
68022: POP
68023: POP
// end ;
68024: PPOPN 2
68026: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68027: LD_EXP 51
68031: IFFALSE 68039
68033: PUSH
68034: LD_EXP 61
68038: AND
68039: IFFALSE 68059
68041: GO 68043
68043: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68044: LD_INT 32
68046: PPUSH
68047: LD_OWVAR 2
68051: PPUSH
68052: LD_INT 0
68054: PPUSH
68055: CALL_OW 324
68059: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68060: LD_EXP 51
68064: IFFALSE 68072
68066: PUSH
68067: LD_EXP 62
68071: AND
68072: IFFALSE 68255
68074: GO 68076
68076: DISABLE
68077: LD_INT 0
68079: PPUSH
68080: PPUSH
68081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68082: LD_ADDR_VAR 0 2
68086: PUSH
68087: LD_INT 22
68089: PUSH
68090: LD_OWVAR 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 33
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PPUSH
68113: CALL_OW 69
68117: ST_TO_ADDR
// if not tmp then
68118: LD_VAR 0 2
68122: NOT
68123: IFFALSE 68127
// exit ;
68125: GO 68255
// side := 0 ;
68127: LD_ADDR_VAR 0 3
68131: PUSH
68132: LD_INT 0
68134: ST_TO_ADDR
// for i := 1 to 8 do
68135: LD_ADDR_VAR 0 1
68139: PUSH
68140: DOUBLE
68141: LD_INT 1
68143: DEC
68144: ST_TO_ADDR
68145: LD_INT 8
68147: PUSH
68148: FOR_TO
68149: IFFALSE 68199
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68151: LD_OWVAR 2
68155: PUSH
68156: LD_VAR 0 1
68160: NONEQUAL
68161: IFFALSE 68183
68163: PUSH
68164: LD_OWVAR 2
68168: PPUSH
68169: LD_VAR 0 1
68173: PPUSH
68174: CALL_OW 81
68178: PUSH
68179: LD_INT 2
68181: EQUAL
68182: AND
68183: IFFALSE 68197
// begin side := i ;
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: LD_VAR 0 1
68194: ST_TO_ADDR
// break ;
68195: GO 68199
// end ;
68197: GO 68148
68199: POP
68200: POP
// if not side then
68201: LD_VAR 0 3
68205: NOT
68206: IFFALSE 68210
// exit ;
68208: GO 68255
// for i := 1 to tmp do
68210: LD_ADDR_VAR 0 1
68214: PUSH
68215: DOUBLE
68216: LD_INT 1
68218: DEC
68219: ST_TO_ADDR
68220: LD_VAR 0 2
68224: PUSH
68225: FOR_TO
68226: IFFALSE 68253
// if Prob ( 60 ) then
68228: LD_INT 60
68230: PPUSH
68231: CALL_OW 13
68235: IFFALSE 68251
// SetSide ( i , side ) ;
68237: LD_VAR 0 1
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: CALL_OW 235
68251: GO 68225
68253: POP
68254: POP
// end ;
68255: PPOPN 3
68257: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68258: LD_EXP 51
68262: IFFALSE 68270
68264: PUSH
68265: LD_EXP 64
68269: AND
68270: IFFALSE 68389
68272: GO 68274
68274: DISABLE
68275: LD_INT 0
68277: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68278: LD_ADDR_VAR 0 1
68282: PUSH
68283: LD_INT 22
68285: PUSH
68286: LD_OWVAR 2
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 21
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: PUSH
68308: LD_INT 23
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: PPUSH
68327: CALL_OW 69
68331: PUSH
68332: FOR_IN
68333: IFFALSE 68387
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68335: LD_VAR 0 1
68339: PPUSH
68340: CALL_OW 257
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: LD_INT 4
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: IN
68363: IFFALSE 68385
// SetClass ( un , rand ( 1 , 4 ) ) ;
68365: LD_VAR 0 1
68369: PPUSH
68370: LD_INT 1
68372: PPUSH
68373: LD_INT 4
68375: PPUSH
68376: CALL_OW 12
68380: PPUSH
68381: CALL_OW 336
68385: GO 68332
68387: POP
68388: POP
// end ;
68389: PPOPN 1
68391: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68392: LD_EXP 51
68396: IFFALSE 68404
68398: PUSH
68399: LD_EXP 63
68403: AND
68404: IFFALSE 68483
68406: GO 68408
68408: DISABLE
68409: LD_INT 0
68411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68412: LD_ADDR_VAR 0 1
68416: PUSH
68417: LD_INT 22
68419: PUSH
68420: LD_OWVAR 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 21
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PPUSH
68443: CALL_OW 69
68447: ST_TO_ADDR
// if not tmp then
68448: LD_VAR 0 1
68452: NOT
68453: IFFALSE 68457
// exit ;
68455: GO 68483
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68457: LD_VAR 0 1
68461: PUSH
68462: LD_INT 1
68464: PPUSH
68465: LD_VAR 0 1
68469: PPUSH
68470: CALL_OW 12
68474: ARRAY
68475: PPUSH
68476: LD_INT 100
68478: PPUSH
68479: CALL_OW 234
// end ;
68483: PPOPN 1
68485: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68486: LD_EXP 51
68490: IFFALSE 68498
68492: PUSH
68493: LD_EXP 65
68497: AND
68498: IFFALSE 68596
68500: GO 68502
68502: DISABLE
68503: LD_INT 0
68505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68506: LD_ADDR_VAR 0 1
68510: PUSH
68511: LD_INT 22
68513: PUSH
68514: LD_OWVAR 2
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 21
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PPUSH
68537: CALL_OW 69
68541: ST_TO_ADDR
// if not tmp then
68542: LD_VAR 0 1
68546: NOT
68547: IFFALSE 68551
// exit ;
68549: GO 68596
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68551: LD_VAR 0 1
68555: PUSH
68556: LD_INT 1
68558: PPUSH
68559: LD_VAR 0 1
68563: PPUSH
68564: CALL_OW 12
68568: ARRAY
68569: PPUSH
68570: LD_INT 1
68572: PPUSH
68573: LD_INT 4
68575: PPUSH
68576: CALL_OW 12
68580: PPUSH
68581: LD_INT 3000
68583: PPUSH
68584: LD_INT 9000
68586: PPUSH
68587: CALL_OW 12
68591: PPUSH
68592: CALL_OW 492
// end ;
68596: PPOPN 1
68598: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68599: LD_EXP 51
68603: IFFALSE 68611
68605: PUSH
68606: LD_EXP 66
68610: AND
68611: IFFALSE 68631
68613: GO 68615
68615: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68616: LD_INT 1
68618: PPUSH
68619: LD_OWVAR 2
68623: PPUSH
68624: LD_INT 0
68626: PPUSH
68627: CALL_OW 324
68631: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68632: LD_EXP 51
68636: IFFALSE 68644
68638: PUSH
68639: LD_EXP 67
68643: AND
68644: IFFALSE 68727
68646: GO 68648
68648: DISABLE
68649: LD_INT 0
68651: PPUSH
68652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68653: LD_ADDR_VAR 0 2
68657: PUSH
68658: LD_INT 22
68660: PUSH
68661: LD_OWVAR 2
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 21
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PPUSH
68684: CALL_OW 69
68688: ST_TO_ADDR
// if not tmp then
68689: LD_VAR 0 2
68693: NOT
68694: IFFALSE 68698
// exit ;
68696: GO 68727
// for i in tmp do
68698: LD_ADDR_VAR 0 1
68702: PUSH
68703: LD_VAR 0 2
68707: PUSH
68708: FOR_IN
68709: IFFALSE 68725
// SetBLevel ( i , 10 ) ;
68711: LD_VAR 0 1
68715: PPUSH
68716: LD_INT 10
68718: PPUSH
68719: CALL_OW 241
68723: GO 68708
68725: POP
68726: POP
// end ;
68727: PPOPN 2
68729: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68730: LD_EXP 51
68734: IFFALSE 68742
68736: PUSH
68737: LD_EXP 68
68741: AND
68742: IFFALSE 68853
68744: GO 68746
68746: DISABLE
68747: LD_INT 0
68749: PPUSH
68750: PPUSH
68751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68752: LD_ADDR_VAR 0 3
68756: PUSH
68757: LD_INT 22
68759: PUSH
68760: LD_OWVAR 2
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 25
68771: PUSH
68772: LD_INT 1
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PPUSH
68783: CALL_OW 69
68787: ST_TO_ADDR
// if not tmp then
68788: LD_VAR 0 3
68792: NOT
68793: IFFALSE 68797
// exit ;
68795: GO 68853
// un := tmp [ rand ( 1 , tmp ) ] ;
68797: LD_ADDR_VAR 0 2
68801: PUSH
68802: LD_VAR 0 3
68806: PUSH
68807: LD_INT 1
68809: PPUSH
68810: LD_VAR 0 3
68814: PPUSH
68815: CALL_OW 12
68819: ARRAY
68820: ST_TO_ADDR
// if Crawls ( un ) then
68821: LD_VAR 0 2
68825: PPUSH
68826: CALL_OW 318
68830: IFFALSE 68841
// ComWalk ( un ) ;
68832: LD_VAR 0 2
68836: PPUSH
68837: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68841: LD_VAR 0 2
68845: PPUSH
68846: LD_INT 5
68848: PPUSH
68849: CALL_OW 336
// end ;
68853: PPOPN 3
68855: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68856: LD_EXP 51
68860: IFFALSE 68868
68862: PUSH
68863: LD_EXP 69
68867: AND
68868: IFFALSE 68880
68870: PUSH
68871: LD_OWVAR 67
68875: PUSH
68876: LD_INT 4
68878: LESS
68879: AND
68880: IFFALSE 68899
68882: GO 68884
68884: DISABLE
// begin Difficulty := Difficulty + 1 ;
68885: LD_ADDR_OWVAR 67
68889: PUSH
68890: LD_OWVAR 67
68894: PUSH
68895: LD_INT 1
68897: PLUS
68898: ST_TO_ADDR
// end ;
68899: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68900: LD_EXP 51
68904: IFFALSE 68912
68906: PUSH
68907: LD_EXP 70
68911: AND
68912: IFFALSE 69015
68914: GO 68916
68916: DISABLE
68917: LD_INT 0
68919: PPUSH
// begin for i := 1 to 5 do
68920: LD_ADDR_VAR 0 1
68924: PUSH
68925: DOUBLE
68926: LD_INT 1
68928: DEC
68929: ST_TO_ADDR
68930: LD_INT 5
68932: PUSH
68933: FOR_TO
68934: IFFALSE 69013
// begin uc_nation := nation_nature ;
68936: LD_ADDR_OWVAR 21
68940: PUSH
68941: LD_INT 0
68943: ST_TO_ADDR
// uc_side := 0 ;
68944: LD_ADDR_OWVAR 20
68948: PUSH
68949: LD_INT 0
68951: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68952: LD_ADDR_OWVAR 29
68956: PUSH
68957: LD_INT 12
68959: PUSH
68960: LD_INT 12
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: ST_TO_ADDR
// hc_agressivity := 20 ;
68967: LD_ADDR_OWVAR 35
68971: PUSH
68972: LD_INT 20
68974: ST_TO_ADDR
// hc_class := class_tiger ;
68975: LD_ADDR_OWVAR 28
68979: PUSH
68980: LD_INT 14
68982: ST_TO_ADDR
// hc_gallery :=  ;
68983: LD_ADDR_OWVAR 33
68987: PUSH
68988: LD_STRING 
68990: ST_TO_ADDR
// hc_name :=  ;
68991: LD_ADDR_OWVAR 26
68995: PUSH
68996: LD_STRING 
68998: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68999: CALL_OW 44
69003: PPUSH
69004: LD_INT 0
69006: PPUSH
69007: CALL_OW 51
// end ;
69011: GO 68933
69013: POP
69014: POP
// end ;
69015: PPOPN 1
69017: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69018: LD_EXP 51
69022: IFFALSE 69030
69024: PUSH
69025: LD_EXP 71
69029: AND
69030: IFFALSE 69039
69032: GO 69034
69034: DISABLE
// StreamSibBomb ;
69035: CALL 69040 0 0
69039: END
// export function StreamSibBomb ; var i , x , y ; begin
69040: LD_INT 0
69042: PPUSH
69043: PPUSH
69044: PPUSH
69045: PPUSH
// result := false ;
69046: LD_ADDR_VAR 0 1
69050: PUSH
69051: LD_INT 0
69053: ST_TO_ADDR
// for i := 1 to 16 do
69054: LD_ADDR_VAR 0 2
69058: PUSH
69059: DOUBLE
69060: LD_INT 1
69062: DEC
69063: ST_TO_ADDR
69064: LD_INT 16
69066: PUSH
69067: FOR_TO
69068: IFFALSE 69267
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69070: LD_ADDR_VAR 0 3
69074: PUSH
69075: LD_INT 10
69077: PUSH
69078: LD_INT 20
69080: PUSH
69081: LD_INT 30
69083: PUSH
69084: LD_INT 40
69086: PUSH
69087: LD_INT 50
69089: PUSH
69090: LD_INT 60
69092: PUSH
69093: LD_INT 70
69095: PUSH
69096: LD_INT 80
69098: PUSH
69099: LD_INT 90
69101: PUSH
69102: LD_INT 100
69104: PUSH
69105: LD_INT 110
69107: PUSH
69108: LD_INT 120
69110: PUSH
69111: LD_INT 130
69113: PUSH
69114: LD_INT 140
69116: PUSH
69117: LD_INT 150
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: PPUSH
69140: LD_INT 15
69142: PPUSH
69143: CALL_OW 12
69147: ARRAY
69148: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69149: LD_ADDR_VAR 0 4
69153: PUSH
69154: LD_INT 10
69156: PUSH
69157: LD_INT 20
69159: PUSH
69160: LD_INT 30
69162: PUSH
69163: LD_INT 40
69165: PUSH
69166: LD_INT 50
69168: PUSH
69169: LD_INT 60
69171: PUSH
69172: LD_INT 70
69174: PUSH
69175: LD_INT 80
69177: PUSH
69178: LD_INT 90
69180: PUSH
69181: LD_INT 100
69183: PUSH
69184: LD_INT 110
69186: PUSH
69187: LD_INT 120
69189: PUSH
69190: LD_INT 130
69192: PUSH
69193: LD_INT 140
69195: PUSH
69196: LD_INT 150
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: PPUSH
69219: LD_INT 15
69221: PPUSH
69222: CALL_OW 12
69226: ARRAY
69227: ST_TO_ADDR
// if ValidHex ( x , y ) then
69228: LD_VAR 0 3
69232: PPUSH
69233: LD_VAR 0 4
69237: PPUSH
69238: CALL_OW 488
69242: IFFALSE 69265
// begin result := [ x , y ] ;
69244: LD_ADDR_VAR 0 1
69248: PUSH
69249: LD_VAR 0 3
69253: PUSH
69254: LD_VAR 0 4
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: ST_TO_ADDR
// break ;
69263: GO 69267
// end ; end ;
69265: GO 69067
69267: POP
69268: POP
// if result then
69269: LD_VAR 0 1
69273: IFFALSE 69333
// begin ToLua ( playSibBomb() ) ;
69275: LD_STRING playSibBomb()
69277: PPUSH
69278: CALL_OW 559
// wait ( 0 0$14 ) ;
69282: LD_INT 490
69284: PPUSH
69285: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69289: LD_VAR 0 1
69293: PUSH
69294: LD_INT 1
69296: ARRAY
69297: PPUSH
69298: LD_VAR 0 1
69302: PUSH
69303: LD_INT 2
69305: ARRAY
69306: PPUSH
69307: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69311: LD_VAR 0 1
69315: PUSH
69316: LD_INT 1
69318: ARRAY
69319: PPUSH
69320: LD_VAR 0 1
69324: PUSH
69325: LD_INT 2
69327: ARRAY
69328: PPUSH
69329: CALL_OW 429
// end ; end ;
69333: LD_VAR 0 1
69337: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69338: LD_EXP 51
69342: IFFALSE 69350
69344: PUSH
69345: LD_EXP 73
69349: AND
69350: IFFALSE 69362
69352: GO 69354
69354: DISABLE
// YouLost (  ) ;
69355: LD_STRING 
69357: PPUSH
69358: CALL_OW 104
69362: END
// every 0 0$1 trigger StreamModeActive and sFog do
69363: LD_EXP 51
69367: IFFALSE 69375
69369: PUSH
69370: LD_EXP 72
69374: AND
69375: IFFALSE 69389
69377: GO 69379
69379: DISABLE
// FogOff ( your_side ) ;
69380: LD_OWVAR 2
69384: PPUSH
69385: CALL_OW 344
69389: END
// every 0 0$1 trigger StreamModeActive and sSun do
69390: LD_EXP 51
69394: IFFALSE 69402
69396: PUSH
69397: LD_EXP 74
69401: AND
69402: IFFALSE 69430
69404: GO 69406
69406: DISABLE
// begin solar_recharge_percent := 0 ;
69407: LD_ADDR_OWVAR 79
69411: PUSH
69412: LD_INT 0
69414: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69415: LD_INT 10500
69417: PPUSH
69418: CALL_OW 67
// solar_recharge_percent := 100 ;
69422: LD_ADDR_OWVAR 79
69426: PUSH
69427: LD_INT 100
69429: ST_TO_ADDR
// end ;
69430: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69431: LD_EXP 51
69435: IFFALSE 69443
69437: PUSH
69438: LD_EXP 75
69442: AND
69443: IFFALSE 69682
69445: GO 69447
69447: DISABLE
69448: LD_INT 0
69450: PPUSH
69451: PPUSH
69452: PPUSH
// begin tmp := [ ] ;
69453: LD_ADDR_VAR 0 3
69457: PUSH
69458: EMPTY
69459: ST_TO_ADDR
// for i := 1 to 6 do
69460: LD_ADDR_VAR 0 1
69464: PUSH
69465: DOUBLE
69466: LD_INT 1
69468: DEC
69469: ST_TO_ADDR
69470: LD_INT 6
69472: PUSH
69473: FOR_TO
69474: IFFALSE 69579
// begin uc_nation := nation_nature ;
69476: LD_ADDR_OWVAR 21
69480: PUSH
69481: LD_INT 0
69483: ST_TO_ADDR
// uc_side := 0 ;
69484: LD_ADDR_OWVAR 20
69488: PUSH
69489: LD_INT 0
69491: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69492: LD_ADDR_OWVAR 29
69496: PUSH
69497: LD_INT 12
69499: PUSH
69500: LD_INT 12
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: ST_TO_ADDR
// hc_agressivity := 20 ;
69507: LD_ADDR_OWVAR 35
69511: PUSH
69512: LD_INT 20
69514: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69515: LD_ADDR_OWVAR 28
69519: PUSH
69520: LD_INT 17
69522: ST_TO_ADDR
// hc_gallery :=  ;
69523: LD_ADDR_OWVAR 33
69527: PUSH
69528: LD_STRING 
69530: ST_TO_ADDR
// hc_name :=  ;
69531: LD_ADDR_OWVAR 26
69535: PUSH
69536: LD_STRING 
69538: ST_TO_ADDR
// un := CreateHuman ;
69539: LD_ADDR_VAR 0 2
69543: PUSH
69544: CALL_OW 44
69548: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69549: LD_VAR 0 2
69553: PPUSH
69554: LD_INT 1
69556: PPUSH
69557: CALL_OW 51
// tmp := tmp ^ un ;
69561: LD_ADDR_VAR 0 3
69565: PUSH
69566: LD_VAR 0 3
69570: PUSH
69571: LD_VAR 0 2
69575: ADD
69576: ST_TO_ADDR
// end ;
69577: GO 69473
69579: POP
69580: POP
// repeat wait ( 0 0$1 ) ;
69581: LD_INT 35
69583: PPUSH
69584: CALL_OW 67
// for un in tmp do
69588: LD_ADDR_VAR 0 2
69592: PUSH
69593: LD_VAR 0 3
69597: PUSH
69598: FOR_IN
69599: IFFALSE 69673
// begin if IsDead ( un ) then
69601: LD_VAR 0 2
69605: PPUSH
69606: CALL_OW 301
69610: IFFALSE 69630
// begin tmp := tmp diff un ;
69612: LD_ADDR_VAR 0 3
69616: PUSH
69617: LD_VAR 0 3
69621: PUSH
69622: LD_VAR 0 2
69626: DIFF
69627: ST_TO_ADDR
// continue ;
69628: GO 69598
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69630: LD_VAR 0 2
69634: PPUSH
69635: LD_INT 3
69637: PUSH
69638: LD_INT 22
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PPUSH
69652: CALL_OW 69
69656: PPUSH
69657: LD_VAR 0 2
69661: PPUSH
69662: CALL_OW 74
69666: PPUSH
69667: CALL_OW 115
// end ;
69671: GO 69598
69673: POP
69674: POP
// until not tmp ;
69675: LD_VAR 0 3
69679: NOT
69680: IFFALSE 69581
// end ;
69682: PPOPN 3
69684: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69685: LD_EXP 51
69689: IFFALSE 69697
69691: PUSH
69692: LD_EXP 76
69696: AND
69697: IFFALSE 69751
69699: GO 69701
69701: DISABLE
// begin ToLua ( displayTroll(); ) ;
69702: LD_STRING displayTroll();
69704: PPUSH
69705: CALL_OW 559
// wait ( 3 3$00 ) ;
69709: LD_INT 6300
69711: PPUSH
69712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69716: LD_STRING hideTroll();
69718: PPUSH
69719: CALL_OW 559
// wait ( 1 1$00 ) ;
69723: LD_INT 2100
69725: PPUSH
69726: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69730: LD_STRING displayTroll();
69732: PPUSH
69733: CALL_OW 559
// wait ( 1 1$00 ) ;
69737: LD_INT 2100
69739: PPUSH
69740: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69744: LD_STRING hideTroll();
69746: PPUSH
69747: CALL_OW 559
// end ;
69751: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69752: LD_EXP 51
69756: IFFALSE 69764
69758: PUSH
69759: LD_EXP 77
69763: AND
69764: IFFALSE 69827
69766: GO 69768
69768: DISABLE
69769: LD_INT 0
69771: PPUSH
// begin p := 0 ;
69772: LD_ADDR_VAR 0 1
69776: PUSH
69777: LD_INT 0
69779: ST_TO_ADDR
// repeat game_speed := 1 ;
69780: LD_ADDR_OWVAR 65
69784: PUSH
69785: LD_INT 1
69787: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69788: LD_INT 35
69790: PPUSH
69791: CALL_OW 67
// p := p + 1 ;
69795: LD_ADDR_VAR 0 1
69799: PUSH
69800: LD_VAR 0 1
69804: PUSH
69805: LD_INT 1
69807: PLUS
69808: ST_TO_ADDR
// until p >= 60 ;
69809: LD_VAR 0 1
69813: PUSH
69814: LD_INT 60
69816: GREATEREQUAL
69817: IFFALSE 69780
// game_speed := 4 ;
69819: LD_ADDR_OWVAR 65
69823: PUSH
69824: LD_INT 4
69826: ST_TO_ADDR
// end ;
69827: PPOPN 1
69829: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69830: LD_EXP 51
69834: IFFALSE 69842
69836: PUSH
69837: LD_EXP 78
69841: AND
69842: IFFALSE 69988
69844: GO 69846
69846: DISABLE
69847: LD_INT 0
69849: PPUSH
69850: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69851: LD_ADDR_VAR 0 1
69855: PUSH
69856: LD_INT 22
69858: PUSH
69859: LD_OWVAR 2
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 2
69870: PUSH
69871: LD_INT 30
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 30
69883: PUSH
69884: LD_INT 1
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: LIST
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PPUSH
69900: CALL_OW 69
69904: ST_TO_ADDR
// if not depot then
69905: LD_VAR 0 1
69909: NOT
69910: IFFALSE 69914
// exit ;
69912: GO 69988
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_VAR 0 1
69923: PUSH
69924: LD_INT 1
69926: PPUSH
69927: LD_VAR 0 1
69931: PPUSH
69932: CALL_OW 12
69936: ARRAY
69937: PPUSH
69938: CALL_OW 274
69942: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69943: LD_VAR 0 2
69947: PPUSH
69948: LD_INT 1
69950: PPUSH
69951: LD_INT 0
69953: PPUSH
69954: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69958: LD_VAR 0 2
69962: PPUSH
69963: LD_INT 2
69965: PPUSH
69966: LD_INT 0
69968: PPUSH
69969: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69973: LD_VAR 0 2
69977: PPUSH
69978: LD_INT 3
69980: PPUSH
69981: LD_INT 0
69983: PPUSH
69984: CALL_OW 277
// end ;
69988: PPOPN 2
69990: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69991: LD_EXP 51
69995: IFFALSE 70003
69997: PUSH
69998: LD_EXP 79
70002: AND
70003: IFFALSE 70100
70005: GO 70007
70007: DISABLE
70008: LD_INT 0
70010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70011: LD_ADDR_VAR 0 1
70015: PUSH
70016: LD_INT 22
70018: PUSH
70019: LD_OWVAR 2
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 21
70030: PUSH
70031: LD_INT 1
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 23
70043: PUSH
70044: LD_INT 0
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: PPUSH
70060: CALL_OW 69
70064: ST_TO_ADDR
// if not tmp then
70065: LD_VAR 0 1
70069: NOT
70070: IFFALSE 70074
// exit ;
70072: GO 70100
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70074: LD_VAR 0 1
70078: PUSH
70079: LD_INT 1
70081: PPUSH
70082: LD_VAR 0 1
70086: PPUSH
70087: CALL_OW 12
70091: ARRAY
70092: PPUSH
70093: LD_INT 200
70095: PPUSH
70096: CALL_OW 234
// end ;
70100: PPOPN 1
70102: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70103: LD_EXP 51
70107: IFFALSE 70115
70109: PUSH
70110: LD_EXP 80
70114: AND
70115: IFFALSE 70194
70117: GO 70119
70119: DISABLE
70120: LD_INT 0
70122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70123: LD_ADDR_VAR 0 1
70127: PUSH
70128: LD_INT 22
70130: PUSH
70131: LD_OWVAR 2
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 21
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PPUSH
70154: CALL_OW 69
70158: ST_TO_ADDR
// if not tmp then
70159: LD_VAR 0 1
70163: NOT
70164: IFFALSE 70168
// exit ;
70166: GO 70194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70168: LD_VAR 0 1
70172: PUSH
70173: LD_INT 1
70175: PPUSH
70176: LD_VAR 0 1
70180: PPUSH
70181: CALL_OW 12
70185: ARRAY
70186: PPUSH
70187: LD_INT 60
70189: PPUSH
70190: CALL_OW 234
// end ;
70194: PPOPN 1
70196: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70197: LD_EXP 51
70201: IFFALSE 70209
70203: PUSH
70204: LD_EXP 81
70208: AND
70209: IFFALSE 70308
70211: GO 70213
70213: DISABLE
70214: LD_INT 0
70216: PPUSH
70217: PPUSH
// begin enable ;
70218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70219: LD_ADDR_VAR 0 1
70223: PUSH
70224: LD_INT 22
70226: PUSH
70227: LD_OWVAR 2
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 61
70238: PUSH
70239: EMPTY
70240: LIST
70241: PUSH
70242: LD_INT 33
70244: PUSH
70245: LD_INT 2
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: PPUSH
70257: CALL_OW 69
70261: ST_TO_ADDR
// if not tmp then
70262: LD_VAR 0 1
70266: NOT
70267: IFFALSE 70271
// exit ;
70269: GO 70308
// for i in tmp do
70271: LD_ADDR_VAR 0 2
70275: PUSH
70276: LD_VAR 0 1
70280: PUSH
70281: FOR_IN
70282: IFFALSE 70306
// if IsControledBy ( i ) then
70284: LD_VAR 0 2
70288: PPUSH
70289: CALL_OW 312
70293: IFFALSE 70304
// ComUnlink ( i ) ;
70295: LD_VAR 0 2
70299: PPUSH
70300: CALL_OW 136
70304: GO 70281
70306: POP
70307: POP
// end ;
70308: PPOPN 2
70310: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70311: LD_EXP 51
70315: IFFALSE 70323
70317: PUSH
70318: LD_EXP 82
70322: AND
70323: IFFALSE 70463
70325: GO 70327
70327: DISABLE
70328: LD_INT 0
70330: PPUSH
70331: PPUSH
// begin ToLua ( displayPowell(); ) ;
70332: LD_STRING displayPowell();
70334: PPUSH
70335: CALL_OW 559
// uc_side := 0 ;
70339: LD_ADDR_OWVAR 20
70343: PUSH
70344: LD_INT 0
70346: ST_TO_ADDR
// uc_nation := 2 ;
70347: LD_ADDR_OWVAR 21
70351: PUSH
70352: LD_INT 2
70354: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70355: LD_ADDR_OWVAR 37
70359: PUSH
70360: LD_INT 14
70362: ST_TO_ADDR
// vc_engine := engine_siberite ;
70363: LD_ADDR_OWVAR 39
70367: PUSH
70368: LD_INT 3
70370: ST_TO_ADDR
// vc_control := control_apeman ;
70371: LD_ADDR_OWVAR 38
70375: PUSH
70376: LD_INT 5
70378: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70379: LD_ADDR_OWVAR 40
70383: PUSH
70384: LD_INT 29
70386: ST_TO_ADDR
// un := CreateVehicle ;
70387: LD_ADDR_VAR 0 2
70391: PUSH
70392: CALL_OW 45
70396: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70397: LD_VAR 0 2
70401: PPUSH
70402: LD_INT 1
70404: PPUSH
70405: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70409: LD_INT 35
70411: PPUSH
70412: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70416: LD_VAR 0 2
70420: PPUSH
70421: LD_INT 22
70423: PUSH
70424: LD_OWVAR 2
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PPUSH
70433: CALL_OW 69
70437: PPUSH
70438: LD_VAR 0 2
70442: PPUSH
70443: CALL_OW 74
70447: PPUSH
70448: CALL_OW 115
// until IsDead ( un ) ;
70452: LD_VAR 0 2
70456: PPUSH
70457: CALL_OW 301
70461: IFFALSE 70409
// end ;
70463: PPOPN 2
70465: END
// every 0 0$1 trigger StreamModeActive and sStu do
70466: LD_EXP 51
70470: IFFALSE 70478
70472: PUSH
70473: LD_EXP 90
70477: AND
70478: IFFALSE 70494
70480: GO 70482
70482: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70483: LD_STRING displayStucuk();
70485: PPUSH
70486: CALL_OW 559
// ResetFog ;
70490: CALL_OW 335
// end ;
70494: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70495: LD_EXP 51
70499: IFFALSE 70507
70501: PUSH
70502: LD_EXP 83
70506: AND
70507: IFFALSE 70648
70509: GO 70511
70511: DISABLE
70512: LD_INT 0
70514: PPUSH
70515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70516: LD_ADDR_VAR 0 2
70520: PUSH
70521: LD_INT 22
70523: PUSH
70524: LD_OWVAR 2
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 21
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PPUSH
70547: CALL_OW 69
70551: ST_TO_ADDR
// if not tmp then
70552: LD_VAR 0 2
70556: NOT
70557: IFFALSE 70561
// exit ;
70559: GO 70648
// un := tmp [ rand ( 1 , tmp ) ] ;
70561: LD_ADDR_VAR 0 1
70565: PUSH
70566: LD_VAR 0 2
70570: PUSH
70571: LD_INT 1
70573: PPUSH
70574: LD_VAR 0 2
70578: PPUSH
70579: CALL_OW 12
70583: ARRAY
70584: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70585: LD_VAR 0 1
70589: PPUSH
70590: LD_INT 0
70592: PPUSH
70593: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70597: LD_VAR 0 1
70601: PPUSH
70602: LD_OWVAR 3
70606: PUSH
70607: LD_VAR 0 1
70611: DIFF
70612: PPUSH
70613: LD_VAR 0 1
70617: PPUSH
70618: CALL_OW 74
70622: PPUSH
70623: CALL_OW 115
// wait ( 0 0$20 ) ;
70627: LD_INT 700
70629: PPUSH
70630: CALL_OW 67
// SetSide ( un , your_side ) ;
70634: LD_VAR 0 1
70638: PPUSH
70639: LD_OWVAR 2
70643: PPUSH
70644: CALL_OW 235
// end ;
70648: PPOPN 2
70650: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70651: LD_EXP 51
70655: IFFALSE 70663
70657: PUSH
70658: LD_EXP 84
70662: AND
70663: IFFALSE 70769
70665: GO 70667
70667: DISABLE
70668: LD_INT 0
70670: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70671: LD_ADDR_VAR 0 1
70675: PUSH
70676: LD_INT 22
70678: PUSH
70679: LD_OWVAR 2
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: LD_INT 30
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 30
70703: PUSH
70704: LD_INT 1
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PPUSH
70720: CALL_OW 69
70724: ST_TO_ADDR
// if not depot then
70725: LD_VAR 0 1
70729: NOT
70730: IFFALSE 70734
// exit ;
70732: GO 70769
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70734: LD_VAR 0 1
70738: PUSH
70739: LD_INT 1
70741: ARRAY
70742: PPUSH
70743: CALL_OW 250
70747: PPUSH
70748: LD_VAR 0 1
70752: PUSH
70753: LD_INT 1
70755: ARRAY
70756: PPUSH
70757: CALL_OW 251
70761: PPUSH
70762: LD_INT 70
70764: PPUSH
70765: CALL_OW 495
// end ;
70769: PPOPN 1
70771: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70772: LD_EXP 51
70776: IFFALSE 70784
70778: PUSH
70779: LD_EXP 85
70783: AND
70784: IFFALSE 70995
70786: GO 70788
70788: DISABLE
70789: LD_INT 0
70791: PPUSH
70792: PPUSH
70793: PPUSH
70794: PPUSH
70795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70796: LD_ADDR_VAR 0 5
70800: PUSH
70801: LD_INT 22
70803: PUSH
70804: LD_OWVAR 2
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 21
70815: PUSH
70816: LD_INT 1
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PPUSH
70827: CALL_OW 69
70831: ST_TO_ADDR
// if not tmp then
70832: LD_VAR 0 5
70836: NOT
70837: IFFALSE 70841
// exit ;
70839: GO 70995
// for i in tmp do
70841: LD_ADDR_VAR 0 1
70845: PUSH
70846: LD_VAR 0 5
70850: PUSH
70851: FOR_IN
70852: IFFALSE 70993
// begin d := rand ( 0 , 5 ) ;
70854: LD_ADDR_VAR 0 4
70858: PUSH
70859: LD_INT 0
70861: PPUSH
70862: LD_INT 5
70864: PPUSH
70865: CALL_OW 12
70869: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70870: LD_ADDR_VAR 0 2
70874: PUSH
70875: LD_VAR 0 1
70879: PPUSH
70880: CALL_OW 250
70884: PPUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: LD_INT 3
70892: PPUSH
70893: LD_INT 12
70895: PPUSH
70896: CALL_OW 12
70900: PPUSH
70901: CALL_OW 272
70905: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70906: LD_ADDR_VAR 0 3
70910: PUSH
70911: LD_VAR 0 1
70915: PPUSH
70916: CALL_OW 251
70920: PPUSH
70921: LD_VAR 0 4
70925: PPUSH
70926: LD_INT 3
70928: PPUSH
70929: LD_INT 12
70931: PPUSH
70932: CALL_OW 12
70936: PPUSH
70937: CALL_OW 273
70941: ST_TO_ADDR
// if ValidHex ( x , y ) then
70942: LD_VAR 0 2
70946: PPUSH
70947: LD_VAR 0 3
70951: PPUSH
70952: CALL_OW 488
70956: IFFALSE 70991
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70958: LD_VAR 0 1
70962: PPUSH
70963: LD_VAR 0 2
70967: PPUSH
70968: LD_VAR 0 3
70972: PPUSH
70973: LD_INT 3
70975: PPUSH
70976: LD_INT 6
70978: PPUSH
70979: CALL_OW 12
70983: PPUSH
70984: LD_INT 1
70986: PPUSH
70987: CALL_OW 483
// end ;
70991: GO 70851
70993: POP
70994: POP
// end ;
70995: PPOPN 5
70997: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70998: LD_EXP 51
71002: IFFALSE 71010
71004: PUSH
71005: LD_EXP 86
71009: AND
71010: IFFALSE 71104
71012: GO 71014
71014: DISABLE
71015: LD_INT 0
71017: PPUSH
71018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71019: LD_ADDR_VAR 0 2
71023: PUSH
71024: LD_INT 22
71026: PUSH
71027: LD_OWVAR 2
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 32
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 21
71048: PUSH
71049: LD_INT 2
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: LIST
71060: PPUSH
71061: CALL_OW 69
71065: ST_TO_ADDR
// if not tmp then
71066: LD_VAR 0 2
71070: NOT
71071: IFFALSE 71075
// exit ;
71073: GO 71104
// for i in tmp do
71075: LD_ADDR_VAR 0 1
71079: PUSH
71080: LD_VAR 0 2
71084: PUSH
71085: FOR_IN
71086: IFFALSE 71102
// SetFuel ( i , 0 ) ;
71088: LD_VAR 0 1
71092: PPUSH
71093: LD_INT 0
71095: PPUSH
71096: CALL_OW 240
71100: GO 71085
71102: POP
71103: POP
// end ;
71104: PPOPN 2
71106: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71107: LD_EXP 51
71111: IFFALSE 71119
71113: PUSH
71114: LD_EXP 87
71118: AND
71119: IFFALSE 71185
71121: GO 71123
71123: DISABLE
71124: LD_INT 0
71126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71127: LD_ADDR_VAR 0 1
71131: PUSH
71132: LD_INT 22
71134: PUSH
71135: LD_OWVAR 2
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 30
71146: PUSH
71147: LD_INT 29
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PPUSH
71158: CALL_OW 69
71162: ST_TO_ADDR
// if not tmp then
71163: LD_VAR 0 1
71167: NOT
71168: IFFALSE 71172
// exit ;
71170: GO 71185
// DestroyUnit ( tmp [ 1 ] ) ;
71172: LD_VAR 0 1
71176: PUSH
71177: LD_INT 1
71179: ARRAY
71180: PPUSH
71181: CALL_OW 65
// end ;
71185: PPOPN 1
71187: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71188: LD_EXP 51
71192: IFFALSE 71200
71194: PUSH
71195: LD_EXP 89
71199: AND
71200: IFFALSE 71329
71202: GO 71204
71204: DISABLE
71205: LD_INT 0
71207: PPUSH
// begin uc_side := 0 ;
71208: LD_ADDR_OWVAR 20
71212: PUSH
71213: LD_INT 0
71215: ST_TO_ADDR
// uc_nation := nation_arabian ;
71216: LD_ADDR_OWVAR 21
71220: PUSH
71221: LD_INT 2
71223: ST_TO_ADDR
// hc_gallery :=  ;
71224: LD_ADDR_OWVAR 33
71228: PUSH
71229: LD_STRING 
71231: ST_TO_ADDR
// hc_name :=  ;
71232: LD_ADDR_OWVAR 26
71236: PUSH
71237: LD_STRING 
71239: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71240: LD_INT 1
71242: PPUSH
71243: LD_INT 11
71245: PPUSH
71246: LD_INT 10
71248: PPUSH
71249: CALL_OW 380
// un := CreateHuman ;
71253: LD_ADDR_VAR 0 1
71257: PUSH
71258: CALL_OW 44
71262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71263: LD_VAR 0 1
71267: PPUSH
71268: LD_INT 1
71270: PPUSH
71271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71275: LD_INT 35
71277: PPUSH
71278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71282: LD_VAR 0 1
71286: PPUSH
71287: LD_INT 22
71289: PUSH
71290: LD_OWVAR 2
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PPUSH
71299: CALL_OW 69
71303: PPUSH
71304: LD_VAR 0 1
71308: PPUSH
71309: CALL_OW 74
71313: PPUSH
71314: CALL_OW 115
// until IsDead ( un ) ;
71318: LD_VAR 0 1
71322: PPUSH
71323: CALL_OW 301
71327: IFFALSE 71275
// end ;
71329: PPOPN 1
71331: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71332: LD_EXP 51
71336: IFFALSE 71344
71338: PUSH
71339: LD_EXP 91
71343: AND
71344: IFFALSE 71356
71346: GO 71348
71348: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71349: LD_STRING earthquake(getX(game), 0, 32)
71351: PPUSH
71352: CALL_OW 559
71356: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71357: LD_EXP 51
71361: IFFALSE 71369
71363: PUSH
71364: LD_EXP 92
71368: AND
71369: IFFALSE 71460
71371: GO 71373
71373: DISABLE
71374: LD_INT 0
71376: PPUSH
// begin enable ;
71377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71378: LD_ADDR_VAR 0 1
71382: PUSH
71383: LD_INT 22
71385: PUSH
71386: LD_OWVAR 2
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 21
71397: PUSH
71398: LD_INT 2
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 33
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: PPUSH
71420: CALL_OW 69
71424: ST_TO_ADDR
// if not tmp then
71425: LD_VAR 0 1
71429: NOT
71430: IFFALSE 71434
// exit ;
71432: GO 71460
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71434: LD_VAR 0 1
71438: PUSH
71439: LD_INT 1
71441: PPUSH
71442: LD_VAR 0 1
71446: PPUSH
71447: CALL_OW 12
71451: ARRAY
71452: PPUSH
71453: LD_INT 1
71455: PPUSH
71456: CALL_OW 234
// end ;
71460: PPOPN 1
71462: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71463: LD_EXP 51
71467: IFFALSE 71475
71469: PUSH
71470: LD_EXP 93
71474: AND
71475: IFFALSE 71616
71477: GO 71479
71479: DISABLE
71480: LD_INT 0
71482: PPUSH
71483: PPUSH
71484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71485: LD_ADDR_VAR 0 3
71489: PUSH
71490: LD_INT 22
71492: PUSH
71493: LD_OWVAR 2
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 25
71504: PUSH
71505: LD_INT 1
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PPUSH
71516: CALL_OW 69
71520: ST_TO_ADDR
// if not tmp then
71521: LD_VAR 0 3
71525: NOT
71526: IFFALSE 71530
// exit ;
71528: GO 71616
// un := tmp [ rand ( 1 , tmp ) ] ;
71530: LD_ADDR_VAR 0 2
71534: PUSH
71535: LD_VAR 0 3
71539: PUSH
71540: LD_INT 1
71542: PPUSH
71543: LD_VAR 0 3
71547: PPUSH
71548: CALL_OW 12
71552: ARRAY
71553: ST_TO_ADDR
// if Crawls ( un ) then
71554: LD_VAR 0 2
71558: PPUSH
71559: CALL_OW 318
71563: IFFALSE 71574
// ComWalk ( un ) ;
71565: LD_VAR 0 2
71569: PPUSH
71570: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71574: LD_VAR 0 2
71578: PPUSH
71579: LD_INT 9
71581: PPUSH
71582: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71586: LD_INT 28
71588: PPUSH
71589: LD_OWVAR 2
71593: PPUSH
71594: LD_INT 2
71596: PPUSH
71597: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71601: LD_INT 29
71603: PPUSH
71604: LD_OWVAR 2
71608: PPUSH
71609: LD_INT 2
71611: PPUSH
71612: CALL_OW 322
// end ;
71616: PPOPN 3
71618: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71619: LD_EXP 51
71623: IFFALSE 71631
71625: PUSH
71626: LD_EXP 94
71630: AND
71631: IFFALSE 71742
71633: GO 71635
71635: DISABLE
71636: LD_INT 0
71638: PPUSH
71639: PPUSH
71640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71641: LD_ADDR_VAR 0 3
71645: PUSH
71646: LD_INT 22
71648: PUSH
71649: LD_OWVAR 2
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 25
71660: PUSH
71661: LD_INT 1
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PPUSH
71672: CALL_OW 69
71676: ST_TO_ADDR
// if not tmp then
71677: LD_VAR 0 3
71681: NOT
71682: IFFALSE 71686
// exit ;
71684: GO 71742
// un := tmp [ rand ( 1 , tmp ) ] ;
71686: LD_ADDR_VAR 0 2
71690: PUSH
71691: LD_VAR 0 3
71695: PUSH
71696: LD_INT 1
71698: PPUSH
71699: LD_VAR 0 3
71703: PPUSH
71704: CALL_OW 12
71708: ARRAY
71709: ST_TO_ADDR
// if Crawls ( un ) then
71710: LD_VAR 0 2
71714: PPUSH
71715: CALL_OW 318
71719: IFFALSE 71730
// ComWalk ( un ) ;
71721: LD_VAR 0 2
71725: PPUSH
71726: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71730: LD_VAR 0 2
71734: PPUSH
71735: LD_INT 8
71737: PPUSH
71738: CALL_OW 336
// end ;
71742: PPOPN 3
71744: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71745: LD_EXP 51
71749: IFFALSE 71757
71751: PUSH
71752: LD_EXP 95
71756: AND
71757: IFFALSE 71901
71759: GO 71761
71761: DISABLE
71762: LD_INT 0
71764: PPUSH
71765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71766: LD_ADDR_VAR 0 2
71770: PUSH
71771: LD_INT 22
71773: PUSH
71774: LD_OWVAR 2
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 21
71785: PUSH
71786: LD_INT 2
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: PUSH
71796: LD_INT 34
71798: PUSH
71799: LD_INT 12
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 34
71808: PUSH
71809: LD_INT 51
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 34
71818: PUSH
71819: LD_INT 32
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: LIST
71836: PPUSH
71837: CALL_OW 69
71841: ST_TO_ADDR
// if not tmp then
71842: LD_VAR 0 2
71846: NOT
71847: IFFALSE 71851
// exit ;
71849: GO 71901
// for i in tmp do
71851: LD_ADDR_VAR 0 1
71855: PUSH
71856: LD_VAR 0 2
71860: PUSH
71861: FOR_IN
71862: IFFALSE 71899
// if GetCargo ( i , mat_artifact ) = 0 then
71864: LD_VAR 0 1
71868: PPUSH
71869: LD_INT 4
71871: PPUSH
71872: CALL_OW 289
71876: PUSH
71877: LD_INT 0
71879: EQUAL
71880: IFFALSE 71897
// SetCargo ( i , mat_siberit , 100 ) ;
71882: LD_VAR 0 1
71886: PPUSH
71887: LD_INT 3
71889: PPUSH
71890: LD_INT 100
71892: PPUSH
71893: CALL_OW 290
71897: GO 71861
71899: POP
71900: POP
// end ;
71901: PPOPN 2
71903: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71904: LD_EXP 51
71908: IFFALSE 71916
71910: PUSH
71911: LD_EXP 96
71915: AND
71916: IFFALSE 72099
71918: GO 71920
71920: DISABLE
71921: LD_INT 0
71923: PPUSH
71924: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71925: LD_ADDR_VAR 0 2
71929: PUSH
71930: LD_INT 22
71932: PUSH
71933: LD_OWVAR 2
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PPUSH
71942: CALL_OW 69
71946: ST_TO_ADDR
// if not tmp then
71947: LD_VAR 0 2
71951: NOT
71952: IFFALSE 71956
// exit ;
71954: GO 72099
// for i := 1 to 2 do
71956: LD_ADDR_VAR 0 1
71960: PUSH
71961: DOUBLE
71962: LD_INT 1
71964: DEC
71965: ST_TO_ADDR
71966: LD_INT 2
71968: PUSH
71969: FOR_TO
71970: IFFALSE 72097
// begin uc_side := your_side ;
71972: LD_ADDR_OWVAR 20
71976: PUSH
71977: LD_OWVAR 2
71981: ST_TO_ADDR
// uc_nation := nation_american ;
71982: LD_ADDR_OWVAR 21
71986: PUSH
71987: LD_INT 1
71989: ST_TO_ADDR
// vc_chassis := us_morphling ;
71990: LD_ADDR_OWVAR 37
71994: PUSH
71995: LD_INT 5
71997: ST_TO_ADDR
// vc_engine := engine_siberite ;
71998: LD_ADDR_OWVAR 39
72002: PUSH
72003: LD_INT 3
72005: ST_TO_ADDR
// vc_control := control_computer ;
72006: LD_ADDR_OWVAR 38
72010: PUSH
72011: LD_INT 3
72013: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72014: LD_ADDR_OWVAR 40
72018: PUSH
72019: LD_INT 10
72021: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72022: LD_VAR 0 2
72026: PUSH
72027: LD_INT 1
72029: ARRAY
72030: PPUSH
72031: CALL_OW 310
72035: NOT
72036: IFFALSE 72083
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72038: CALL_OW 45
72042: PPUSH
72043: LD_VAR 0 2
72047: PUSH
72048: LD_INT 1
72050: ARRAY
72051: PPUSH
72052: CALL_OW 250
72056: PPUSH
72057: LD_VAR 0 2
72061: PUSH
72062: LD_INT 1
72064: ARRAY
72065: PPUSH
72066: CALL_OW 251
72070: PPUSH
72071: LD_INT 12
72073: PPUSH
72074: LD_INT 1
72076: PPUSH
72077: CALL_OW 50
72081: GO 72095
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72083: CALL_OW 45
72087: PPUSH
72088: LD_INT 1
72090: PPUSH
72091: CALL_OW 51
// end ;
72095: GO 71969
72097: POP
72098: POP
// end ;
72099: PPOPN 2
72101: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72102: LD_EXP 51
72106: IFFALSE 72114
72108: PUSH
72109: LD_EXP 97
72113: AND
72114: IFFALSE 72336
72116: GO 72118
72118: DISABLE
72119: LD_INT 0
72121: PPUSH
72122: PPUSH
72123: PPUSH
72124: PPUSH
72125: PPUSH
72126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72127: LD_ADDR_VAR 0 6
72131: PUSH
72132: LD_INT 22
72134: PUSH
72135: LD_OWVAR 2
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 21
72146: PUSH
72147: LD_INT 1
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 3
72156: PUSH
72157: LD_INT 23
72159: PUSH
72160: LD_INT 0
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: PPUSH
72176: CALL_OW 69
72180: ST_TO_ADDR
// if not tmp then
72181: LD_VAR 0 6
72185: NOT
72186: IFFALSE 72190
// exit ;
72188: GO 72336
// s1 := rand ( 1 , 4 ) ;
72190: LD_ADDR_VAR 0 2
72194: PUSH
72195: LD_INT 1
72197: PPUSH
72198: LD_INT 4
72200: PPUSH
72201: CALL_OW 12
72205: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72206: LD_ADDR_VAR 0 4
72210: PUSH
72211: LD_VAR 0 6
72215: PUSH
72216: LD_INT 1
72218: ARRAY
72219: PPUSH
72220: LD_VAR 0 2
72224: PPUSH
72225: CALL_OW 259
72229: ST_TO_ADDR
// if s1 = 1 then
72230: LD_VAR 0 2
72234: PUSH
72235: LD_INT 1
72237: EQUAL
72238: IFFALSE 72258
// s2 := rand ( 2 , 4 ) else
72240: LD_ADDR_VAR 0 3
72244: PUSH
72245: LD_INT 2
72247: PPUSH
72248: LD_INT 4
72250: PPUSH
72251: CALL_OW 12
72255: ST_TO_ADDR
72256: GO 72266
// s2 := 1 ;
72258: LD_ADDR_VAR 0 3
72262: PUSH
72263: LD_INT 1
72265: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72266: LD_ADDR_VAR 0 5
72270: PUSH
72271: LD_VAR 0 6
72275: PUSH
72276: LD_INT 1
72278: ARRAY
72279: PPUSH
72280: LD_VAR 0 3
72284: PPUSH
72285: CALL_OW 259
72289: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72290: LD_VAR 0 6
72294: PUSH
72295: LD_INT 1
72297: ARRAY
72298: PPUSH
72299: LD_VAR 0 2
72303: PPUSH
72304: LD_VAR 0 5
72308: PPUSH
72309: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72313: LD_VAR 0 6
72317: PUSH
72318: LD_INT 1
72320: ARRAY
72321: PPUSH
72322: LD_VAR 0 3
72326: PPUSH
72327: LD_VAR 0 4
72331: PPUSH
72332: CALL_OW 237
// end ;
72336: PPOPN 6
72338: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72339: LD_EXP 51
72343: IFFALSE 72351
72345: PUSH
72346: LD_EXP 98
72350: AND
72351: IFFALSE 72430
72353: GO 72355
72355: DISABLE
72356: LD_INT 0
72358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72359: LD_ADDR_VAR 0 1
72363: PUSH
72364: LD_INT 22
72366: PUSH
72367: LD_OWVAR 2
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 30
72378: PUSH
72379: LD_INT 3
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PPUSH
72390: CALL_OW 69
72394: ST_TO_ADDR
// if not tmp then
72395: LD_VAR 0 1
72399: NOT
72400: IFFALSE 72404
// exit ;
72402: GO 72430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72404: LD_VAR 0 1
72408: PUSH
72409: LD_INT 1
72411: PPUSH
72412: LD_VAR 0 1
72416: PPUSH
72417: CALL_OW 12
72421: ARRAY
72422: PPUSH
72423: LD_INT 1
72425: PPUSH
72426: CALL_OW 234
// end ;
72430: PPOPN 1
72432: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72433: LD_EXP 51
72437: IFFALSE 72445
72439: PUSH
72440: LD_EXP 99
72444: AND
72445: IFFALSE 72557
72447: GO 72449
72449: DISABLE
72450: LD_INT 0
72452: PPUSH
72453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72454: LD_ADDR_VAR 0 2
72458: PUSH
72459: LD_INT 22
72461: PUSH
72462: LD_OWVAR 2
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 2
72473: PUSH
72474: LD_INT 30
72476: PUSH
72477: LD_INT 27
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 30
72486: PUSH
72487: LD_INT 26
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 30
72496: PUSH
72497: LD_INT 28
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PPUSH
72514: CALL_OW 69
72518: ST_TO_ADDR
// if not tmp then
72519: LD_VAR 0 2
72523: NOT
72524: IFFALSE 72528
// exit ;
72526: GO 72557
// for i in tmp do
72528: LD_ADDR_VAR 0 1
72532: PUSH
72533: LD_VAR 0 2
72537: PUSH
72538: FOR_IN
72539: IFFALSE 72555
// SetLives ( i , 1 ) ;
72541: LD_VAR 0 1
72545: PPUSH
72546: LD_INT 1
72548: PPUSH
72549: CALL_OW 234
72553: GO 72538
72555: POP
72556: POP
// end ;
72557: PPOPN 2
72559: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72560: LD_EXP 51
72564: IFFALSE 72572
72566: PUSH
72567: LD_EXP 100
72571: AND
72572: IFFALSE 72859
72574: GO 72576
72576: DISABLE
72577: LD_INT 0
72579: PPUSH
72580: PPUSH
72581: PPUSH
// begin i := rand ( 1 , 7 ) ;
72582: LD_ADDR_VAR 0 1
72586: PUSH
72587: LD_INT 1
72589: PPUSH
72590: LD_INT 7
72592: PPUSH
72593: CALL_OW 12
72597: ST_TO_ADDR
// case i of 1 :
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 1
72605: DOUBLE
72606: EQUAL
72607: IFTRUE 72611
72609: GO 72621
72611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72612: LD_STRING earthquake(getX(game), 0, 32)
72614: PPUSH
72615: CALL_OW 559
72619: GO 72859
72621: LD_INT 2
72623: DOUBLE
72624: EQUAL
72625: IFTRUE 72629
72627: GO 72643
72629: POP
// begin ToLua ( displayStucuk(); ) ;
72630: LD_STRING displayStucuk();
72632: PPUSH
72633: CALL_OW 559
// ResetFog ;
72637: CALL_OW 335
// end ; 3 :
72641: GO 72859
72643: LD_INT 3
72645: DOUBLE
72646: EQUAL
72647: IFTRUE 72651
72649: GO 72755
72651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72652: LD_ADDR_VAR 0 2
72656: PUSH
72657: LD_INT 22
72659: PUSH
72660: LD_OWVAR 2
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 25
72671: PUSH
72672: LD_INT 1
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PPUSH
72683: CALL_OW 69
72687: ST_TO_ADDR
// if not tmp then
72688: LD_VAR 0 2
72692: NOT
72693: IFFALSE 72697
// exit ;
72695: GO 72859
// un := tmp [ rand ( 1 , tmp ) ] ;
72697: LD_ADDR_VAR 0 3
72701: PUSH
72702: LD_VAR 0 2
72706: PUSH
72707: LD_INT 1
72709: PPUSH
72710: LD_VAR 0 2
72714: PPUSH
72715: CALL_OW 12
72719: ARRAY
72720: ST_TO_ADDR
// if Crawls ( un ) then
72721: LD_VAR 0 3
72725: PPUSH
72726: CALL_OW 318
72730: IFFALSE 72741
// ComWalk ( un ) ;
72732: LD_VAR 0 3
72736: PPUSH
72737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72741: LD_VAR 0 3
72745: PPUSH
72746: LD_INT 8
72748: PPUSH
72749: CALL_OW 336
// end ; 4 :
72753: GO 72859
72755: LD_INT 4
72757: DOUBLE
72758: EQUAL
72759: IFTRUE 72763
72761: GO 72837
72763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72764: LD_ADDR_VAR 0 2
72768: PUSH
72769: LD_INT 22
72771: PUSH
72772: LD_OWVAR 2
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 30
72783: PUSH
72784: LD_INT 29
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PPUSH
72795: CALL_OW 69
72799: ST_TO_ADDR
// if not tmp then
72800: LD_VAR 0 2
72804: NOT
72805: IFFALSE 72809
// exit ;
72807: GO 72859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72809: LD_VAR 0 2
72813: PUSH
72814: LD_INT 1
72816: ARRAY
72817: PPUSH
72818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72822: LD_VAR 0 2
72826: PUSH
72827: LD_INT 1
72829: ARRAY
72830: PPUSH
72831: CALL_OW 65
// end ; 5 .. 7 :
72835: GO 72859
72837: LD_INT 5
72839: DOUBLE
72840: GREATEREQUAL
72841: IFFALSE 72849
72843: LD_INT 7
72845: DOUBLE
72846: LESSEQUAL
72847: IFTRUE 72851
72849: GO 72858
72851: POP
// StreamSibBomb ; end ;
72852: CALL 69040 0 0
72856: GO 72859
72858: POP
// end ;
72859: PPOPN 3
72861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72862: LD_EXP 51
72866: IFFALSE 72874
72868: PUSH
72869: LD_EXP 101
72873: AND
72874: IFFALSE 73030
72876: GO 72878
72878: DISABLE
72879: LD_INT 0
72881: PPUSH
72882: PPUSH
72883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72884: LD_ADDR_VAR 0 2
72888: PUSH
72889: LD_INT 81
72891: PUSH
72892: LD_OWVAR 2
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 2
72903: PUSH
72904: LD_INT 21
72906: PUSH
72907: LD_INT 1
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 21
72916: PUSH
72917: LD_INT 2
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: LIST
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PPUSH
72933: CALL_OW 69
72937: ST_TO_ADDR
// if not tmp then
72938: LD_VAR 0 2
72942: NOT
72943: IFFALSE 72947
// exit ;
72945: GO 73030
// p := 0 ;
72947: LD_ADDR_VAR 0 3
72951: PUSH
72952: LD_INT 0
72954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72955: LD_INT 35
72957: PPUSH
72958: CALL_OW 67
// p := p + 1 ;
72962: LD_ADDR_VAR 0 3
72966: PUSH
72967: LD_VAR 0 3
72971: PUSH
72972: LD_INT 1
72974: PLUS
72975: ST_TO_ADDR
// for i in tmp do
72976: LD_ADDR_VAR 0 1
72980: PUSH
72981: LD_VAR 0 2
72985: PUSH
72986: FOR_IN
72987: IFFALSE 73018
// if GetLives ( i ) < 1000 then
72989: LD_VAR 0 1
72993: PPUSH
72994: CALL_OW 256
72998: PUSH
72999: LD_INT 1000
73001: LESS
73002: IFFALSE 73016
// SetLives ( i , 1000 ) ;
73004: LD_VAR 0 1
73008: PPUSH
73009: LD_INT 1000
73011: PPUSH
73012: CALL_OW 234
73016: GO 72986
73018: POP
73019: POP
// until p > 20 ;
73020: LD_VAR 0 3
73024: PUSH
73025: LD_INT 20
73027: GREATER
73028: IFFALSE 72955
// end ;
73030: PPOPN 3
73032: END
// every 0 0$1 trigger StreamModeActive and sTime do
73033: LD_EXP 51
73037: IFFALSE 73045
73039: PUSH
73040: LD_EXP 102
73044: AND
73045: IFFALSE 73080
73047: GO 73049
73049: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73050: LD_INT 28
73052: PPUSH
73053: LD_OWVAR 2
73057: PPUSH
73058: LD_INT 2
73060: PPUSH
73061: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73065: LD_INT 30
73067: PPUSH
73068: LD_OWVAR 2
73072: PPUSH
73073: LD_INT 2
73075: PPUSH
73076: CALL_OW 322
// end ;
73080: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73081: LD_EXP 51
73085: IFFALSE 73093
73087: PUSH
73088: LD_EXP 103
73092: AND
73093: IFFALSE 73214
73095: GO 73097
73097: DISABLE
73098: LD_INT 0
73100: PPUSH
73101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73102: LD_ADDR_VAR 0 2
73106: PUSH
73107: LD_INT 22
73109: PUSH
73110: LD_OWVAR 2
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 21
73121: PUSH
73122: LD_INT 1
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 3
73131: PUSH
73132: LD_INT 23
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: LIST
73150: PPUSH
73151: CALL_OW 69
73155: ST_TO_ADDR
// if not tmp then
73156: LD_VAR 0 2
73160: NOT
73161: IFFALSE 73165
// exit ;
73163: GO 73214
// for i in tmp do
73165: LD_ADDR_VAR 0 1
73169: PUSH
73170: LD_VAR 0 2
73174: PUSH
73175: FOR_IN
73176: IFFALSE 73212
// begin if Crawls ( i ) then
73178: LD_VAR 0 1
73182: PPUSH
73183: CALL_OW 318
73187: IFFALSE 73198
// ComWalk ( i ) ;
73189: LD_VAR 0 1
73193: PPUSH
73194: CALL_OW 138
// SetClass ( i , 2 ) ;
73198: LD_VAR 0 1
73202: PPUSH
73203: LD_INT 2
73205: PPUSH
73206: CALL_OW 336
// end ;
73210: GO 73175
73212: POP
73213: POP
// end ;
73214: PPOPN 2
73216: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73217: LD_EXP 51
73221: IFFALSE 73229
73223: PUSH
73224: LD_EXP 104
73228: AND
73229: IFFALSE 73519
73231: GO 73233
73233: DISABLE
73234: LD_INT 0
73236: PPUSH
73237: PPUSH
73238: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73239: LD_OWVAR 2
73243: PPUSH
73244: LD_INT 9
73246: PPUSH
73247: LD_INT 1
73249: PPUSH
73250: LD_INT 1
73252: PPUSH
73253: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73257: LD_INT 9
73259: PPUSH
73260: LD_OWVAR 2
73264: PPUSH
73265: CALL_OW 343
// uc_side := 9 ;
73269: LD_ADDR_OWVAR 20
73273: PUSH
73274: LD_INT 9
73276: ST_TO_ADDR
// uc_nation := 2 ;
73277: LD_ADDR_OWVAR 21
73281: PUSH
73282: LD_INT 2
73284: ST_TO_ADDR
// hc_name := Dark Warrior ;
73285: LD_ADDR_OWVAR 26
73289: PUSH
73290: LD_STRING Dark Warrior
73292: ST_TO_ADDR
// hc_gallery :=  ;
73293: LD_ADDR_OWVAR 33
73297: PUSH
73298: LD_STRING 
73300: ST_TO_ADDR
// hc_noskilllimit := true ;
73301: LD_ADDR_OWVAR 76
73305: PUSH
73306: LD_INT 1
73308: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73309: LD_ADDR_OWVAR 31
73313: PUSH
73314: LD_INT 30
73316: PUSH
73317: LD_INT 30
73319: PUSH
73320: LD_INT 30
73322: PUSH
73323: LD_INT 30
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: ST_TO_ADDR
// un := CreateHuman ;
73332: LD_ADDR_VAR 0 3
73336: PUSH
73337: CALL_OW 44
73341: ST_TO_ADDR
// hc_noskilllimit := false ;
73342: LD_ADDR_OWVAR 76
73346: PUSH
73347: LD_INT 0
73349: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73350: LD_VAR 0 3
73354: PPUSH
73355: LD_INT 1
73357: PPUSH
73358: CALL_OW 51
// ToLua ( playRanger() ) ;
73362: LD_STRING playRanger()
73364: PPUSH
73365: CALL_OW 559
// p := 0 ;
73369: LD_ADDR_VAR 0 2
73373: PUSH
73374: LD_INT 0
73376: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73377: LD_INT 35
73379: PPUSH
73380: CALL_OW 67
// p := p + 1 ;
73384: LD_ADDR_VAR 0 2
73388: PUSH
73389: LD_VAR 0 2
73393: PUSH
73394: LD_INT 1
73396: PLUS
73397: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73398: LD_VAR 0 3
73402: PPUSH
73403: CALL_OW 256
73407: PUSH
73408: LD_INT 1000
73410: LESS
73411: IFFALSE 73425
// SetLives ( un , 1000 ) ;
73413: LD_VAR 0 3
73417: PPUSH
73418: LD_INT 1000
73420: PPUSH
73421: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73425: LD_VAR 0 3
73429: PPUSH
73430: LD_INT 81
73432: PUSH
73433: LD_OWVAR 2
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 91
73444: PUSH
73445: LD_VAR 0 3
73449: PUSH
73450: LD_INT 30
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: LIST
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PPUSH
73462: CALL_OW 69
73466: PPUSH
73467: LD_VAR 0 3
73471: PPUSH
73472: CALL_OW 74
73476: PPUSH
73477: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73481: LD_VAR 0 2
73485: PUSH
73486: LD_INT 80
73488: GREATER
73489: IFTRUE 73502
73491: PUSH
73492: LD_VAR 0 3
73496: PPUSH
73497: CALL_OW 301
73501: OR
73502: IFFALSE 73377
// if un then
73504: LD_VAR 0 3
73508: IFFALSE 73519
// RemoveUnit ( un ) ;
73510: LD_VAR 0 3
73514: PPUSH
73515: CALL_OW 64
// end ;
73519: PPOPN 3
73521: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73522: LD_EXP 105
73526: IFFALSE 73642
73528: GO 73530
73530: DISABLE
73531: LD_INT 0
73533: PPUSH
73534: PPUSH
73535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73536: LD_ADDR_VAR 0 2
73540: PUSH
73541: LD_INT 81
73543: PUSH
73544: LD_OWVAR 2
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 21
73555: PUSH
73556: LD_INT 1
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PPUSH
73567: CALL_OW 69
73571: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73572: LD_STRING playComputer()
73574: PPUSH
73575: CALL_OW 559
// if not tmp then
73579: LD_VAR 0 2
73583: NOT
73584: IFFALSE 73588
// exit ;
73586: GO 73642
// for i in tmp do
73588: LD_ADDR_VAR 0 1
73592: PUSH
73593: LD_VAR 0 2
73597: PUSH
73598: FOR_IN
73599: IFFALSE 73640
// for j := 1 to 4 do
73601: LD_ADDR_VAR 0 3
73605: PUSH
73606: DOUBLE
73607: LD_INT 1
73609: DEC
73610: ST_TO_ADDR
73611: LD_INT 4
73613: PUSH
73614: FOR_TO
73615: IFFALSE 73636
// SetSkill ( i , j , 10 ) ;
73617: LD_VAR 0 1
73621: PPUSH
73622: LD_VAR 0 3
73626: PPUSH
73627: LD_INT 10
73629: PPUSH
73630: CALL_OW 237
73634: GO 73614
73636: POP
73637: POP
73638: GO 73598
73640: POP
73641: POP
// end ;
73642: PPOPN 3
73644: END
// every 0 0$1 trigger s30 do var i , tmp ;
73645: LD_EXP 106
73649: IFFALSE 73718
73651: GO 73653
73653: DISABLE
73654: LD_INT 0
73656: PPUSH
73657: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73658: LD_ADDR_VAR 0 2
73662: PUSH
73663: LD_INT 22
73665: PUSH
73666: LD_OWVAR 2
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PPUSH
73675: CALL_OW 69
73679: ST_TO_ADDR
// if not tmp then
73680: LD_VAR 0 2
73684: NOT
73685: IFFALSE 73689
// exit ;
73687: GO 73718
// for i in tmp do
73689: LD_ADDR_VAR 0 1
73693: PUSH
73694: LD_VAR 0 2
73698: PUSH
73699: FOR_IN
73700: IFFALSE 73716
// SetLives ( i , 300 ) ;
73702: LD_VAR 0 1
73706: PPUSH
73707: LD_INT 300
73709: PPUSH
73710: CALL_OW 234
73714: GO 73699
73716: POP
73717: POP
// end ;
73718: PPOPN 2
73720: END
// every 0 0$1 trigger s60 do var i , tmp ;
73721: LD_EXP 107
73725: IFFALSE 73794
73727: GO 73729
73729: DISABLE
73730: LD_INT 0
73732: PPUSH
73733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73734: LD_ADDR_VAR 0 2
73738: PUSH
73739: LD_INT 22
73741: PUSH
73742: LD_OWVAR 2
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PPUSH
73751: CALL_OW 69
73755: ST_TO_ADDR
// if not tmp then
73756: LD_VAR 0 2
73760: NOT
73761: IFFALSE 73765
// exit ;
73763: GO 73794
// for i in tmp do
73765: LD_ADDR_VAR 0 1
73769: PUSH
73770: LD_VAR 0 2
73774: PUSH
73775: FOR_IN
73776: IFFALSE 73792
// SetLives ( i , 600 ) ;
73778: LD_VAR 0 1
73782: PPUSH
73783: LD_INT 600
73785: PPUSH
73786: CALL_OW 234
73790: GO 73775
73792: POP
73793: POP
// end ;
73794: PPOPN 2
73796: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73797: LD_INT 0
73799: PPUSH
// case cmd of 301 :
73800: LD_VAR 0 1
73804: PUSH
73805: LD_INT 301
73807: DOUBLE
73808: EQUAL
73809: IFTRUE 73813
73811: GO 73845
73813: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73814: LD_VAR 0 6
73818: PPUSH
73819: LD_VAR 0 7
73823: PPUSH
73824: LD_VAR 0 8
73828: PPUSH
73829: LD_VAR 0 4
73833: PPUSH
73834: LD_VAR 0 5
73838: PPUSH
73839: CALL 75058 0 5
73843: GO 73966
73845: LD_INT 302
73847: DOUBLE
73848: EQUAL
73849: IFTRUE 73853
73851: GO 73890
73853: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73854: LD_VAR 0 6
73858: PPUSH
73859: LD_VAR 0 7
73863: PPUSH
73864: LD_VAR 0 8
73868: PPUSH
73869: LD_VAR 0 9
73873: PPUSH
73874: LD_VAR 0 4
73878: PPUSH
73879: LD_VAR 0 5
73883: PPUSH
73884: CALL 75149 0 6
73888: GO 73966
73890: LD_INT 303
73892: DOUBLE
73893: EQUAL
73894: IFTRUE 73898
73896: GO 73935
73898: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73899: LD_VAR 0 6
73903: PPUSH
73904: LD_VAR 0 7
73908: PPUSH
73909: LD_VAR 0 8
73913: PPUSH
73914: LD_VAR 0 9
73918: PPUSH
73919: LD_VAR 0 4
73923: PPUSH
73924: LD_VAR 0 5
73928: PPUSH
73929: CALL 73971 0 6
73933: GO 73966
73935: LD_INT 304
73937: DOUBLE
73938: EQUAL
73939: IFTRUE 73943
73941: GO 73965
73943: POP
// hHackTeleport ( unit , x , y ) ; end ;
73944: LD_VAR 0 2
73948: PPUSH
73949: LD_VAR 0 4
73953: PPUSH
73954: LD_VAR 0 5
73958: PPUSH
73959: CALL 75742 0 3
73963: GO 73966
73965: POP
// end ;
73966: LD_VAR 0 12
73970: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73971: LD_INT 0
73973: PPUSH
73974: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73975: LD_VAR 0 1
73979: PUSH
73980: LD_INT 1
73982: LESS
73983: IFTRUE 73995
73985: PUSH
73986: LD_VAR 0 1
73990: PUSH
73991: LD_INT 3
73993: GREATER
73994: OR
73995: IFTRUE 74013
73997: PUSH
73998: LD_VAR 0 5
74002: PPUSH
74003: LD_VAR 0 6
74007: PPUSH
74008: CALL_OW 428
74012: OR
74013: IFFALSE 74017
// exit ;
74015: GO 74745
// uc_side := your_side ;
74017: LD_ADDR_OWVAR 20
74021: PUSH
74022: LD_OWVAR 2
74026: ST_TO_ADDR
// uc_nation := nation ;
74027: LD_ADDR_OWVAR 21
74031: PUSH
74032: LD_VAR 0 1
74036: ST_TO_ADDR
// bc_level = 1 ;
74037: LD_ADDR_OWVAR 43
74041: PUSH
74042: LD_INT 1
74044: ST_TO_ADDR
// case btype of 1 :
74045: LD_VAR 0 2
74049: PUSH
74050: LD_INT 1
74052: DOUBLE
74053: EQUAL
74054: IFTRUE 74058
74056: GO 74069
74058: POP
// bc_type := b_depot ; 2 :
74059: LD_ADDR_OWVAR 42
74063: PUSH
74064: LD_INT 0
74066: ST_TO_ADDR
74067: GO 74689
74069: LD_INT 2
74071: DOUBLE
74072: EQUAL
74073: IFTRUE 74077
74075: GO 74088
74077: POP
// bc_type := b_warehouse ; 3 :
74078: LD_ADDR_OWVAR 42
74082: PUSH
74083: LD_INT 1
74085: ST_TO_ADDR
74086: GO 74689
74088: LD_INT 3
74090: DOUBLE
74091: EQUAL
74092: IFTRUE 74096
74094: GO 74107
74096: POP
// bc_type := b_lab ; 4 .. 9 :
74097: LD_ADDR_OWVAR 42
74101: PUSH
74102: LD_INT 6
74104: ST_TO_ADDR
74105: GO 74689
74107: LD_INT 4
74109: DOUBLE
74110: GREATEREQUAL
74111: IFFALSE 74119
74113: LD_INT 9
74115: DOUBLE
74116: LESSEQUAL
74117: IFTRUE 74121
74119: GO 74181
74121: POP
// begin bc_type := b_lab_half ;
74122: LD_ADDR_OWVAR 42
74126: PUSH
74127: LD_INT 7
74129: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74130: LD_ADDR_OWVAR 44
74134: PUSH
74135: LD_INT 10
74137: PUSH
74138: LD_INT 11
74140: PUSH
74141: LD_INT 12
74143: PUSH
74144: LD_INT 15
74146: PUSH
74147: LD_INT 14
74149: PUSH
74150: LD_INT 13
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: PUSH
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 3
74168: MINUS
74169: ARRAY
74170: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
74171: LD_ADDR_OWVAR 45
74175: PUSH
74176: LD_INT 9
74178: ST_TO_ADDR
// end ; 10 .. 13 :
74179: GO 74689
74181: LD_INT 10
74183: DOUBLE
74184: GREATEREQUAL
74185: IFFALSE 74193
74187: LD_INT 13
74189: DOUBLE
74190: LESSEQUAL
74191: IFTRUE 74195
74193: GO 74272
74195: POP
// begin bc_type := b_lab_full ;
74196: LD_ADDR_OWVAR 42
74200: PUSH
74201: LD_INT 8
74203: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74204: LD_ADDR_OWVAR 44
74208: PUSH
74209: LD_INT 10
74211: PUSH
74212: LD_INT 12
74214: PUSH
74215: LD_INT 14
74217: PUSH
74218: LD_INT 13
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: PUSH
74227: LD_VAR 0 2
74231: PUSH
74232: LD_INT 9
74234: MINUS
74235: ARRAY
74236: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74237: LD_ADDR_OWVAR 45
74241: PUSH
74242: LD_INT 11
74244: PUSH
74245: LD_INT 15
74247: PUSH
74248: LD_INT 12
74250: PUSH
74251: LD_INT 15
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: PUSH
74260: LD_VAR 0 2
74264: PUSH
74265: LD_INT 9
74267: MINUS
74268: ARRAY
74269: ST_TO_ADDR
// end ; 14 :
74270: GO 74689
74272: LD_INT 14
74274: DOUBLE
74275: EQUAL
74276: IFTRUE 74280
74278: GO 74291
74280: POP
// bc_type := b_workshop ; 15 :
74281: LD_ADDR_OWVAR 42
74285: PUSH
74286: LD_INT 2
74288: ST_TO_ADDR
74289: GO 74689
74291: LD_INT 15
74293: DOUBLE
74294: EQUAL
74295: IFTRUE 74299
74297: GO 74310
74299: POP
// bc_type := b_factory ; 16 :
74300: LD_ADDR_OWVAR 42
74304: PUSH
74305: LD_INT 3
74307: ST_TO_ADDR
74308: GO 74689
74310: LD_INT 16
74312: DOUBLE
74313: EQUAL
74314: IFTRUE 74318
74316: GO 74329
74318: POP
// bc_type := b_ext_gun ; 17 :
74319: LD_ADDR_OWVAR 42
74323: PUSH
74324: LD_INT 17
74326: ST_TO_ADDR
74327: GO 74689
74329: LD_INT 17
74331: DOUBLE
74332: EQUAL
74333: IFTRUE 74337
74335: GO 74365
74337: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74338: LD_ADDR_OWVAR 42
74342: PUSH
74343: LD_INT 19
74345: PUSH
74346: LD_INT 23
74348: PUSH
74349: LD_INT 19
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: LD_VAR 0 1
74361: ARRAY
74362: ST_TO_ADDR
74363: GO 74689
74365: LD_INT 18
74367: DOUBLE
74368: EQUAL
74369: IFTRUE 74373
74371: GO 74384
74373: POP
// bc_type := b_ext_radar ; 19 :
74374: LD_ADDR_OWVAR 42
74378: PUSH
74379: LD_INT 20
74381: ST_TO_ADDR
74382: GO 74689
74384: LD_INT 19
74386: DOUBLE
74387: EQUAL
74388: IFTRUE 74392
74390: GO 74403
74392: POP
// bc_type := b_ext_radio ; 20 :
74393: LD_ADDR_OWVAR 42
74397: PUSH
74398: LD_INT 22
74400: ST_TO_ADDR
74401: GO 74689
74403: LD_INT 20
74405: DOUBLE
74406: EQUAL
74407: IFTRUE 74411
74409: GO 74422
74411: POP
// bc_type := b_ext_siberium ; 21 :
74412: LD_ADDR_OWVAR 42
74416: PUSH
74417: LD_INT 21
74419: ST_TO_ADDR
74420: GO 74689
74422: LD_INT 21
74424: DOUBLE
74425: EQUAL
74426: IFTRUE 74430
74428: GO 74441
74430: POP
// bc_type := b_ext_computer ; 22 :
74431: LD_ADDR_OWVAR 42
74435: PUSH
74436: LD_INT 24
74438: ST_TO_ADDR
74439: GO 74689
74441: LD_INT 22
74443: DOUBLE
74444: EQUAL
74445: IFTRUE 74449
74447: GO 74460
74449: POP
// bc_type := b_ext_track ; 23 :
74450: LD_ADDR_OWVAR 42
74454: PUSH
74455: LD_INT 16
74457: ST_TO_ADDR
74458: GO 74689
74460: LD_INT 23
74462: DOUBLE
74463: EQUAL
74464: IFTRUE 74468
74466: GO 74479
74468: POP
// bc_type := b_ext_laser ; 24 :
74469: LD_ADDR_OWVAR 42
74473: PUSH
74474: LD_INT 25
74476: ST_TO_ADDR
74477: GO 74689
74479: LD_INT 24
74481: DOUBLE
74482: EQUAL
74483: IFTRUE 74487
74485: GO 74498
74487: POP
// bc_type := b_control_tower ; 25 :
74488: LD_ADDR_OWVAR 42
74492: PUSH
74493: LD_INT 36
74495: ST_TO_ADDR
74496: GO 74689
74498: LD_INT 25
74500: DOUBLE
74501: EQUAL
74502: IFTRUE 74506
74504: GO 74517
74506: POP
// bc_type := b_breastwork ; 26 :
74507: LD_ADDR_OWVAR 42
74511: PUSH
74512: LD_INT 31
74514: ST_TO_ADDR
74515: GO 74689
74517: LD_INT 26
74519: DOUBLE
74520: EQUAL
74521: IFTRUE 74525
74523: GO 74536
74525: POP
// bc_type := b_bunker ; 27 :
74526: LD_ADDR_OWVAR 42
74530: PUSH
74531: LD_INT 32
74533: ST_TO_ADDR
74534: GO 74689
74536: LD_INT 27
74538: DOUBLE
74539: EQUAL
74540: IFTRUE 74544
74542: GO 74555
74544: POP
// bc_type := b_turret ; 28 :
74545: LD_ADDR_OWVAR 42
74549: PUSH
74550: LD_INT 33
74552: ST_TO_ADDR
74553: GO 74689
74555: LD_INT 28
74557: DOUBLE
74558: EQUAL
74559: IFTRUE 74563
74561: GO 74574
74563: POP
// bc_type := b_armoury ; 29 :
74564: LD_ADDR_OWVAR 42
74568: PUSH
74569: LD_INT 4
74571: ST_TO_ADDR
74572: GO 74689
74574: LD_INT 29
74576: DOUBLE
74577: EQUAL
74578: IFTRUE 74582
74580: GO 74593
74582: POP
// bc_type := b_barracks ; 30 :
74583: LD_ADDR_OWVAR 42
74587: PUSH
74588: LD_INT 5
74590: ST_TO_ADDR
74591: GO 74689
74593: LD_INT 30
74595: DOUBLE
74596: EQUAL
74597: IFTRUE 74601
74599: GO 74612
74601: POP
// bc_type := b_solar_power ; 31 :
74602: LD_ADDR_OWVAR 42
74606: PUSH
74607: LD_INT 27
74609: ST_TO_ADDR
74610: GO 74689
74612: LD_INT 31
74614: DOUBLE
74615: EQUAL
74616: IFTRUE 74620
74618: GO 74631
74620: POP
// bc_type := b_oil_power ; 32 :
74621: LD_ADDR_OWVAR 42
74625: PUSH
74626: LD_INT 26
74628: ST_TO_ADDR
74629: GO 74689
74631: LD_INT 32
74633: DOUBLE
74634: EQUAL
74635: IFTRUE 74639
74637: GO 74650
74639: POP
// bc_type := b_siberite_power ; 33 :
74640: LD_ADDR_OWVAR 42
74644: PUSH
74645: LD_INT 28
74647: ST_TO_ADDR
74648: GO 74689
74650: LD_INT 33
74652: DOUBLE
74653: EQUAL
74654: IFTRUE 74658
74656: GO 74669
74658: POP
// bc_type := b_oil_mine ; 34 :
74659: LD_ADDR_OWVAR 42
74663: PUSH
74664: LD_INT 29
74666: ST_TO_ADDR
74667: GO 74689
74669: LD_INT 34
74671: DOUBLE
74672: EQUAL
74673: IFTRUE 74677
74675: GO 74688
74677: POP
// bc_type := b_siberite_mine ; end ;
74678: LD_ADDR_OWVAR 42
74682: PUSH
74683: LD_INT 30
74685: ST_TO_ADDR
74686: GO 74689
74688: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74689: LD_ADDR_VAR 0 8
74693: PUSH
74694: LD_VAR 0 5
74698: PPUSH
74699: LD_VAR 0 6
74703: PPUSH
74704: LD_VAR 0 3
74708: PPUSH
74709: CALL_OW 47
74713: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74714: LD_OWVAR 42
74718: PUSH
74719: LD_INT 32
74721: PUSH
74722: LD_INT 33
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: IN
74729: IFFALSE 74745
// PlaceWeaponTurret ( b , weapon ) ;
74731: LD_VAR 0 8
74735: PPUSH
74736: LD_VAR 0 4
74740: PPUSH
74741: CALL_OW 431
// end ;
74745: LD_VAR 0 7
74749: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74750: LD_INT 0
74752: PPUSH
74753: PPUSH
74754: PPUSH
74755: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74756: LD_ADDR_VAR 0 4
74760: PUSH
74761: LD_INT 22
74763: PUSH
74764: LD_OWVAR 2
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: PUSH
74773: LD_INT 2
74775: PUSH
74776: LD_INT 30
74778: PUSH
74779: LD_INT 0
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 30
74788: PUSH
74789: LD_INT 1
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: LIST
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PPUSH
74805: CALL_OW 69
74809: ST_TO_ADDR
// if not tmp then
74810: LD_VAR 0 4
74814: NOT
74815: IFFALSE 74819
// exit ;
74817: GO 74878
// for i in tmp do
74819: LD_ADDR_VAR 0 2
74823: PUSH
74824: LD_VAR 0 4
74828: PUSH
74829: FOR_IN
74830: IFFALSE 74876
// for j = 1 to 3 do
74832: LD_ADDR_VAR 0 3
74836: PUSH
74837: DOUBLE
74838: LD_INT 1
74840: DEC
74841: ST_TO_ADDR
74842: LD_INT 3
74844: PUSH
74845: FOR_TO
74846: IFFALSE 74872
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74848: LD_VAR 0 2
74852: PPUSH
74853: CALL_OW 274
74857: PPUSH
74858: LD_VAR 0 3
74862: PPUSH
74863: LD_INT 99999
74865: PPUSH
74866: CALL_OW 277
74870: GO 74845
74872: POP
74873: POP
74874: GO 74829
74876: POP
74877: POP
// end ;
74878: LD_VAR 0 1
74882: RET
// export function hHackSetLevel10 ; var i , j ; begin
74883: LD_INT 0
74885: PPUSH
74886: PPUSH
74887: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74888: LD_ADDR_VAR 0 2
74892: PUSH
74893: LD_INT 21
74895: PUSH
74896: LD_INT 1
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PPUSH
74903: CALL_OW 69
74907: PUSH
74908: FOR_IN
74909: IFFALSE 74961
// if IsSelected ( i ) then
74911: LD_VAR 0 2
74915: PPUSH
74916: CALL_OW 306
74920: IFFALSE 74959
// begin for j := 1 to 4 do
74922: LD_ADDR_VAR 0 3
74926: PUSH
74927: DOUBLE
74928: LD_INT 1
74930: DEC
74931: ST_TO_ADDR
74932: LD_INT 4
74934: PUSH
74935: FOR_TO
74936: IFFALSE 74957
// SetSkill ( i , j , 10 ) ;
74938: LD_VAR 0 2
74942: PPUSH
74943: LD_VAR 0 3
74947: PPUSH
74948: LD_INT 10
74950: PPUSH
74951: CALL_OW 237
74955: GO 74935
74957: POP
74958: POP
// end ;
74959: GO 74908
74961: POP
74962: POP
// end ;
74963: LD_VAR 0 1
74967: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74968: LD_INT 0
74970: PPUSH
74971: PPUSH
74972: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74973: LD_ADDR_VAR 0 2
74977: PUSH
74978: LD_INT 22
74980: PUSH
74981: LD_OWVAR 2
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 21
74992: PUSH
74993: LD_INT 1
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PPUSH
75004: CALL_OW 69
75008: PUSH
75009: FOR_IN
75010: IFFALSE 75051
// begin for j := 1 to 4 do
75012: LD_ADDR_VAR 0 3
75016: PUSH
75017: DOUBLE
75018: LD_INT 1
75020: DEC
75021: ST_TO_ADDR
75022: LD_INT 4
75024: PUSH
75025: FOR_TO
75026: IFFALSE 75047
// SetSkill ( i , j , 10 ) ;
75028: LD_VAR 0 2
75032: PPUSH
75033: LD_VAR 0 3
75037: PPUSH
75038: LD_INT 10
75040: PPUSH
75041: CALL_OW 237
75045: GO 75025
75047: POP
75048: POP
// end ;
75049: GO 75009
75051: POP
75052: POP
// end ;
75053: LD_VAR 0 1
75057: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75058: LD_INT 0
75060: PPUSH
// uc_side := your_side ;
75061: LD_ADDR_OWVAR 20
75065: PUSH
75066: LD_OWVAR 2
75070: ST_TO_ADDR
// uc_nation := nation ;
75071: LD_ADDR_OWVAR 21
75075: PUSH
75076: LD_VAR 0 1
75080: ST_TO_ADDR
// InitHc ;
75081: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75085: LD_INT 0
75087: PPUSH
75088: LD_VAR 0 2
75092: PPUSH
75093: LD_VAR 0 3
75097: PPUSH
75098: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75102: LD_VAR 0 4
75106: PPUSH
75107: LD_VAR 0 5
75111: PPUSH
75112: CALL_OW 428
75116: PUSH
75117: LD_INT 0
75119: EQUAL
75120: IFFALSE 75144
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75122: CALL_OW 44
75126: PPUSH
75127: LD_VAR 0 4
75131: PPUSH
75132: LD_VAR 0 5
75136: PPUSH
75137: LD_INT 1
75139: PPUSH
75140: CALL_OW 48
// end ;
75144: LD_VAR 0 6
75148: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75149: LD_INT 0
75151: PPUSH
75152: PPUSH
// uc_side := your_side ;
75153: LD_ADDR_OWVAR 20
75157: PUSH
75158: LD_OWVAR 2
75162: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75163: LD_VAR 0 1
75167: PUSH
75168: LD_INT 1
75170: PUSH
75171: LD_INT 2
75173: PUSH
75174: LD_INT 3
75176: PUSH
75177: LD_INT 4
75179: PUSH
75180: LD_INT 5
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: IN
75190: IFFALSE 75202
// uc_nation := nation_american else
75192: LD_ADDR_OWVAR 21
75196: PUSH
75197: LD_INT 1
75199: ST_TO_ADDR
75200: GO 75245
// if chassis in [ 11 , 12 , 13 , 14 ] then
75202: LD_VAR 0 1
75206: PUSH
75207: LD_INT 11
75209: PUSH
75210: LD_INT 12
75212: PUSH
75213: LD_INT 13
75215: PUSH
75216: LD_INT 14
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: IN
75225: IFFALSE 75237
// uc_nation := nation_arabian else
75227: LD_ADDR_OWVAR 21
75231: PUSH
75232: LD_INT 2
75234: ST_TO_ADDR
75235: GO 75245
// uc_nation := nation_russian ;
75237: LD_ADDR_OWVAR 21
75241: PUSH
75242: LD_INT 3
75244: ST_TO_ADDR
// vc_chassis := chassis ;
75245: LD_ADDR_OWVAR 37
75249: PUSH
75250: LD_VAR 0 1
75254: ST_TO_ADDR
// vc_engine := engine ;
75255: LD_ADDR_OWVAR 39
75259: PUSH
75260: LD_VAR 0 2
75264: ST_TO_ADDR
// vc_control := control ;
75265: LD_ADDR_OWVAR 38
75269: PUSH
75270: LD_VAR 0 3
75274: ST_TO_ADDR
// vc_weapon := weapon ;
75275: LD_ADDR_OWVAR 40
75279: PUSH
75280: LD_VAR 0 4
75284: ST_TO_ADDR
// un := CreateVehicle ;
75285: LD_ADDR_VAR 0 8
75289: PUSH
75290: CALL_OW 45
75294: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75295: LD_VAR 0 8
75299: PPUSH
75300: LD_INT 0
75302: PPUSH
75303: LD_INT 5
75305: PPUSH
75306: CALL_OW 12
75310: PPUSH
75311: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75315: LD_VAR 0 8
75319: PPUSH
75320: LD_VAR 0 5
75324: PPUSH
75325: LD_VAR 0 6
75329: PPUSH
75330: LD_INT 1
75332: PPUSH
75333: CALL_OW 48
// end ;
75337: LD_VAR 0 7
75341: RET
// export hInvincible ; every 1 do
75342: GO 75344
75344: DISABLE
// hInvincible := [ ] ;
75345: LD_ADDR_EXP 108
75349: PUSH
75350: EMPTY
75351: ST_TO_ADDR
75352: END
// every 10 do var i ;
75353: GO 75355
75355: DISABLE
75356: LD_INT 0
75358: PPUSH
// begin enable ;
75359: ENABLE
// if not hInvincible then
75360: LD_EXP 108
75364: NOT
75365: IFFALSE 75369
// exit ;
75367: GO 75413
// for i in hInvincible do
75369: LD_ADDR_VAR 0 1
75373: PUSH
75374: LD_EXP 108
75378: PUSH
75379: FOR_IN
75380: IFFALSE 75411
// if GetLives ( i ) < 1000 then
75382: LD_VAR 0 1
75386: PPUSH
75387: CALL_OW 256
75391: PUSH
75392: LD_INT 1000
75394: LESS
75395: IFFALSE 75409
// SetLives ( i , 1000 ) ;
75397: LD_VAR 0 1
75401: PPUSH
75402: LD_INT 1000
75404: PPUSH
75405: CALL_OW 234
75409: GO 75379
75411: POP
75412: POP
// end ;
75413: PPOPN 1
75415: END
// export function hHackInvincible ; var i ; begin
75416: LD_INT 0
75418: PPUSH
75419: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75420: LD_ADDR_VAR 0 2
75424: PUSH
75425: LD_INT 2
75427: PUSH
75428: LD_INT 21
75430: PUSH
75431: LD_INT 1
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 21
75440: PUSH
75441: LD_INT 2
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: LIST
75452: PPUSH
75453: CALL_OW 69
75457: PUSH
75458: FOR_IN
75459: IFFALSE 75520
// if IsSelected ( i ) then
75461: LD_VAR 0 2
75465: PPUSH
75466: CALL_OW 306
75470: IFFALSE 75518
// begin if i in hInvincible then
75472: LD_VAR 0 2
75476: PUSH
75477: LD_EXP 108
75481: IN
75482: IFFALSE 75502
// hInvincible := hInvincible diff i else
75484: LD_ADDR_EXP 108
75488: PUSH
75489: LD_EXP 108
75493: PUSH
75494: LD_VAR 0 2
75498: DIFF
75499: ST_TO_ADDR
75500: GO 75518
// hInvincible := hInvincible union i ;
75502: LD_ADDR_EXP 108
75506: PUSH
75507: LD_EXP 108
75511: PUSH
75512: LD_VAR 0 2
75516: UNION
75517: ST_TO_ADDR
// end ;
75518: GO 75458
75520: POP
75521: POP
// end ;
75522: LD_VAR 0 1
75526: RET
// export function hHackInvisible ; var i , j ; begin
75527: LD_INT 0
75529: PPUSH
75530: PPUSH
75531: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75532: LD_ADDR_VAR 0 2
75536: PUSH
75537: LD_INT 21
75539: PUSH
75540: LD_INT 1
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PPUSH
75547: CALL_OW 69
75551: PUSH
75552: FOR_IN
75553: IFFALSE 75577
// if IsSelected ( i ) then
75555: LD_VAR 0 2
75559: PPUSH
75560: CALL_OW 306
75564: IFFALSE 75575
// ComForceInvisible ( i ) ;
75566: LD_VAR 0 2
75570: PPUSH
75571: CALL_OW 496
75575: GO 75552
75577: POP
75578: POP
// end ;
75579: LD_VAR 0 1
75583: RET
// export function hHackChangeYourSide ; begin
75584: LD_INT 0
75586: PPUSH
// if your_side = 8 then
75587: LD_OWVAR 2
75591: PUSH
75592: LD_INT 8
75594: EQUAL
75595: IFFALSE 75607
// your_side := 0 else
75597: LD_ADDR_OWVAR 2
75601: PUSH
75602: LD_INT 0
75604: ST_TO_ADDR
75605: GO 75621
// your_side := your_side + 1 ;
75607: LD_ADDR_OWVAR 2
75611: PUSH
75612: LD_OWVAR 2
75616: PUSH
75617: LD_INT 1
75619: PLUS
75620: ST_TO_ADDR
// end ;
75621: LD_VAR 0 1
75625: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75626: LD_INT 0
75628: PPUSH
75629: PPUSH
75630: PPUSH
// for i in all_units do
75631: LD_ADDR_VAR 0 2
75635: PUSH
75636: LD_OWVAR 3
75640: PUSH
75641: FOR_IN
75642: IFFALSE 75720
// if IsSelected ( i ) then
75644: LD_VAR 0 2
75648: PPUSH
75649: CALL_OW 306
75653: IFFALSE 75718
// begin j := GetSide ( i ) ;
75655: LD_ADDR_VAR 0 3
75659: PUSH
75660: LD_VAR 0 2
75664: PPUSH
75665: CALL_OW 255
75669: ST_TO_ADDR
// if j = 8 then
75670: LD_VAR 0 3
75674: PUSH
75675: LD_INT 8
75677: EQUAL
75678: IFFALSE 75690
// j := 0 else
75680: LD_ADDR_VAR 0 3
75684: PUSH
75685: LD_INT 0
75687: ST_TO_ADDR
75688: GO 75704
// j := j + 1 ;
75690: LD_ADDR_VAR 0 3
75694: PUSH
75695: LD_VAR 0 3
75699: PUSH
75700: LD_INT 1
75702: PLUS
75703: ST_TO_ADDR
// SetSide ( i , j ) ;
75704: LD_VAR 0 2
75708: PPUSH
75709: LD_VAR 0 3
75713: PPUSH
75714: CALL_OW 235
// end ;
75718: GO 75641
75720: POP
75721: POP
// end ;
75722: LD_VAR 0 1
75726: RET
// export function hHackFog ; begin
75727: LD_INT 0
75729: PPUSH
// FogOff ( true ) ;
75730: LD_INT 1
75732: PPUSH
75733: CALL_OW 344
// end ;
75737: LD_VAR 0 1
75741: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75742: LD_INT 0
75744: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75745: LD_VAR 0 1
75749: PPUSH
75750: LD_VAR 0 2
75754: PPUSH
75755: LD_VAR 0 3
75759: PPUSH
75760: LD_INT 1
75762: PPUSH
75763: LD_INT 1
75765: PPUSH
75766: CALL_OW 483
// CenterOnXY ( x , y ) ;
75770: LD_VAR 0 2
75774: PPUSH
75775: LD_VAR 0 3
75779: PPUSH
75780: CALL_OW 84
// end ;
75784: LD_VAR 0 4
75788: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75789: LD_INT 0
75791: PPUSH
75792: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75793: LD_VAR 0 1
75797: NOT
75798: IFTRUE 75817
75800: PUSH
75801: LD_VAR 0 2
75805: PPUSH
75806: LD_VAR 0 3
75810: PPUSH
75811: CALL_OW 488
75815: NOT
75816: OR
75817: IFTRUE 75852
75819: PUSH
75820: LD_VAR 0 1
75824: PPUSH
75825: CALL_OW 266
75829: PUSH
75830: LD_INT 3
75832: NONEQUAL
75833: IFFALSE 75851
75835: PUSH
75836: LD_VAR 0 1
75840: PPUSH
75841: CALL_OW 247
75845: PUSH
75846: LD_INT 1
75848: EQUAL
75849: NOT
75850: AND
75851: OR
75852: IFFALSE 75856
// exit ;
75854: GO 76138
// if GetType ( factory ) = unit_human then
75856: LD_VAR 0 1
75860: PPUSH
75861: CALL_OW 247
75865: PUSH
75866: LD_INT 1
75868: EQUAL
75869: IFFALSE 75886
// factory := IsInUnit ( factory ) ;
75871: LD_ADDR_VAR 0 1
75875: PUSH
75876: LD_VAR 0 1
75880: PPUSH
75881: CALL_OW 310
75885: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75886: LD_VAR 0 1
75890: PPUSH
75891: CALL_OW 266
75895: PUSH
75896: LD_INT 3
75898: NONEQUAL
75899: IFFALSE 75903
// exit ;
75901: GO 76138
// for i := 1 to Count ( factoryWaypoints ) do
75903: LD_ADDR_VAR 0 5
75907: PUSH
75908: DOUBLE
75909: LD_INT 1
75911: DEC
75912: ST_TO_ADDR
75913: LD_EXP 109
75917: PPUSH
75918: CALL 19845 0 1
75922: PUSH
75923: FOR_TO
75924: IFFALSE 76086
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
75926: LD_VAR 0 2
75930: PPUSH
75931: LD_VAR 0 3
75935: PPUSH
75936: CALL_OW 428
75940: PUSH
75941: LD_EXP 109
75945: PUSH
75946: LD_VAR 0 5
75950: ARRAY
75951: PUSH
75952: LD_INT 2
75954: ARRAY
75955: EQUAL
75956: IFFALSE 75988
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
75958: LD_ADDR_EXP 109
75962: PUSH
75963: LD_EXP 109
75967: PPUSH
75968: LD_VAR 0 5
75972: PPUSH
75973: CALL_OW 3
75977: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75978: CALL 76143 0 0
// exit ;
75982: POP
75983: POP
75984: GO 76138
// end else
75986: GO 76084
// if factory = factoryWaypoints [ i ] [ 2 ] then
75988: LD_VAR 0 1
75992: PUSH
75993: LD_EXP 109
75997: PUSH
75998: LD_VAR 0 5
76002: ARRAY
76003: PUSH
76004: LD_INT 2
76006: ARRAY
76007: EQUAL
76008: IFFALSE 76084
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
76010: LD_ADDR_EXP 109
76014: PUSH
76015: LD_EXP 109
76019: PPUSH
76020: LD_VAR 0 5
76024: PPUSH
76025: CALL_OW 3
76029: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
76030: LD_ADDR_EXP 109
76034: PUSH
76035: LD_EXP 109
76039: PPUSH
76040: LD_VAR 0 1
76044: PPUSH
76045: CALL_OW 255
76049: PUSH
76050: LD_VAR 0 1
76054: PUSH
76055: LD_VAR 0 2
76059: PUSH
76060: LD_VAR 0 3
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: PPUSH
76071: CALL 55811 0 2
76075: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76076: CALL 76143 0 0
// exit ;
76080: POP
76081: POP
76082: GO 76138
// end ; end ;
76084: GO 75923
76086: POP
76087: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
76088: LD_ADDR_EXP 109
76092: PUSH
76093: LD_EXP 109
76097: PPUSH
76098: LD_VAR 0 1
76102: PPUSH
76103: CALL_OW 255
76107: PUSH
76108: LD_VAR 0 1
76112: PUSH
76113: LD_VAR 0 2
76117: PUSH
76118: LD_VAR 0 3
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: PPUSH
76129: CALL 55811 0 2
76133: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76134: CALL 76143 0 0
// end ;
76138: LD_VAR 0 4
76142: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76143: LD_INT 0
76145: PPUSH
76146: PPUSH
76147: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76148: LD_STRING resetFactoryWaypoint();
76150: PPUSH
76151: CALL_OW 559
// if factoryWaypoints then
76155: LD_EXP 109
76159: IFFALSE 76280
// begin list := factoryWaypoints ;
76161: LD_ADDR_VAR 0 3
76165: PUSH
76166: LD_EXP 109
76170: ST_TO_ADDR
// for i := 1 to list do
76171: LD_ADDR_VAR 0 2
76175: PUSH
76176: DOUBLE
76177: LD_INT 1
76179: DEC
76180: ST_TO_ADDR
76181: LD_VAR 0 3
76185: PUSH
76186: FOR_TO
76187: IFFALSE 76278
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76189: LD_STRING setFactoryWaypointXY(
76191: PUSH
76192: LD_VAR 0 3
76196: PUSH
76197: LD_VAR 0 2
76201: ARRAY
76202: PUSH
76203: LD_INT 1
76205: ARRAY
76206: STR
76207: PUSH
76208: LD_STRING ,
76210: STR
76211: PUSH
76212: LD_VAR 0 3
76216: PUSH
76217: LD_VAR 0 2
76221: ARRAY
76222: PUSH
76223: LD_INT 2
76225: ARRAY
76226: STR
76227: PUSH
76228: LD_STRING ,
76230: STR
76231: PUSH
76232: LD_VAR 0 3
76236: PUSH
76237: LD_VAR 0 2
76241: ARRAY
76242: PUSH
76243: LD_INT 3
76245: ARRAY
76246: STR
76247: PUSH
76248: LD_STRING ,
76250: STR
76251: PUSH
76252: LD_VAR 0 3
76256: PUSH
76257: LD_VAR 0 2
76261: ARRAY
76262: PUSH
76263: LD_INT 4
76265: ARRAY
76266: STR
76267: PUSH
76268: LD_STRING )
76270: STR
76271: PPUSH
76272: CALL_OW 559
76276: GO 76186
76278: POP
76279: POP
// end ; end ;
76280: LD_VAR 0 1
76284: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76285: LD_INT 0
76287: PPUSH
// if HexInfo ( x , y ) = warehouse then
76288: LD_VAR 0 2
76292: PPUSH
76293: LD_VAR 0 3
76297: PPUSH
76298: CALL_OW 428
76302: PUSH
76303: LD_VAR 0 1
76307: EQUAL
76308: IFFALSE 76335
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76310: LD_ADDR_EXP 111
76314: PUSH
76315: LD_EXP 111
76319: PPUSH
76320: LD_VAR 0 1
76324: PPUSH
76325: LD_INT 0
76327: PPUSH
76328: CALL_OW 1
76332: ST_TO_ADDR
76333: GO 76386
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76335: LD_ADDR_EXP 111
76339: PUSH
76340: LD_EXP 111
76344: PPUSH
76345: LD_VAR 0 1
76349: PPUSH
76350: LD_VAR 0 1
76354: PPUSH
76355: CALL_OW 255
76359: PUSH
76360: LD_VAR 0 1
76364: PUSH
76365: LD_VAR 0 2
76369: PUSH
76370: LD_VAR 0 3
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: PPUSH
76381: CALL_OW 1
76385: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76386: CALL 76395 0 0
// end ;
76390: LD_VAR 0 4
76394: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76395: LD_INT 0
76397: PPUSH
76398: PPUSH
76399: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76400: LD_STRING resetWarehouseGatheringPoints();
76402: PPUSH
76403: CALL_OW 559
// if warehouseGatheringPoints then
76407: LD_EXP 111
76411: IFFALSE 76537
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76413: LD_ADDR_VAR 0 3
76417: PUSH
76418: LD_EXP 111
76422: PPUSH
76423: CALL 59745 0 1
76427: ST_TO_ADDR
// for i := 1 to list do
76428: LD_ADDR_VAR 0 2
76432: PUSH
76433: DOUBLE
76434: LD_INT 1
76436: DEC
76437: ST_TO_ADDR
76438: LD_VAR 0 3
76442: PUSH
76443: FOR_TO
76444: IFFALSE 76535
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76446: LD_STRING setWarehouseGatheringPointXY(
76448: PUSH
76449: LD_VAR 0 3
76453: PUSH
76454: LD_VAR 0 2
76458: ARRAY
76459: PUSH
76460: LD_INT 1
76462: ARRAY
76463: STR
76464: PUSH
76465: LD_STRING ,
76467: STR
76468: PUSH
76469: LD_VAR 0 3
76473: PUSH
76474: LD_VAR 0 2
76478: ARRAY
76479: PUSH
76480: LD_INT 2
76482: ARRAY
76483: STR
76484: PUSH
76485: LD_STRING ,
76487: STR
76488: PUSH
76489: LD_VAR 0 3
76493: PUSH
76494: LD_VAR 0 2
76498: ARRAY
76499: PUSH
76500: LD_INT 3
76502: ARRAY
76503: STR
76504: PUSH
76505: LD_STRING ,
76507: STR
76508: PUSH
76509: LD_VAR 0 3
76513: PUSH
76514: LD_VAR 0 2
76518: ARRAY
76519: PUSH
76520: LD_INT 4
76522: ARRAY
76523: STR
76524: PUSH
76525: LD_STRING )
76527: STR
76528: PPUSH
76529: CALL_OW 559
76533: GO 76443
76535: POP
76536: POP
// end ; end ;
76537: LD_VAR 0 1
76541: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76542: LD_EXP 111
76546: IFFALSE 77241
76548: GO 76550
76550: DISABLE
76551: LD_INT 0
76553: PPUSH
76554: PPUSH
76555: PPUSH
76556: PPUSH
76557: PPUSH
76558: PPUSH
76559: PPUSH
76560: PPUSH
76561: PPUSH
// begin enable ;
76562: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76563: LD_ADDR_VAR 0 3
76567: PUSH
76568: LD_EXP 111
76572: PPUSH
76573: CALL 59745 0 1
76577: ST_TO_ADDR
// if not list then
76578: LD_VAR 0 3
76582: NOT
76583: IFFALSE 76587
// exit ;
76585: GO 77241
// for i := 1 to list do
76587: LD_ADDR_VAR 0 1
76591: PUSH
76592: DOUBLE
76593: LD_INT 1
76595: DEC
76596: ST_TO_ADDR
76597: LD_VAR 0 3
76601: PUSH
76602: FOR_TO
76603: IFFALSE 77239
// begin depot := list [ i ] [ 2 ] ;
76605: LD_ADDR_VAR 0 8
76609: PUSH
76610: LD_VAR 0 3
76614: PUSH
76615: LD_VAR 0 1
76619: ARRAY
76620: PUSH
76621: LD_INT 2
76623: ARRAY
76624: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76625: LD_ADDR_VAR 0 5
76629: PUSH
76630: LD_VAR 0 3
76634: PUSH
76635: LD_VAR 0 1
76639: ARRAY
76640: PUSH
76641: LD_INT 1
76643: ARRAY
76644: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76645: LD_VAR 0 8
76649: PPUSH
76650: CALL_OW 301
76654: IFTRUE 76673
76656: PUSH
76657: LD_VAR 0 5
76661: PUSH
76662: LD_VAR 0 8
76666: PPUSH
76667: CALL_OW 255
76671: NONEQUAL
76672: OR
76673: IFFALSE 76702
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76675: LD_ADDR_EXP 111
76679: PUSH
76680: LD_EXP 111
76684: PPUSH
76685: LD_VAR 0 8
76689: PPUSH
76690: LD_INT 0
76692: PPUSH
76693: CALL_OW 1
76697: ST_TO_ADDR
// exit ;
76698: POP
76699: POP
76700: GO 77241
// end ; x := list [ i ] [ 3 ] ;
76702: LD_ADDR_VAR 0 6
76706: PUSH
76707: LD_VAR 0 3
76711: PUSH
76712: LD_VAR 0 1
76716: ARRAY
76717: PUSH
76718: LD_INT 3
76720: ARRAY
76721: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76722: LD_ADDR_VAR 0 7
76726: PUSH
76727: LD_VAR 0 3
76731: PUSH
76732: LD_VAR 0 1
76736: ARRAY
76737: PUSH
76738: LD_INT 4
76740: ARRAY
76741: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76742: LD_ADDR_VAR 0 9
76746: PUSH
76747: LD_VAR 0 6
76751: PPUSH
76752: LD_VAR 0 7
76756: PPUSH
76757: LD_INT 16
76759: PPUSH
76760: CALL 58319 0 3
76764: ST_TO_ADDR
// if not cratesNearbyPoint then
76765: LD_VAR 0 9
76769: NOT
76770: IFFALSE 76776
// exit ;
76772: POP
76773: POP
76774: GO 77241
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76776: LD_ADDR_VAR 0 4
76780: PUSH
76781: LD_INT 22
76783: PUSH
76784: LD_VAR 0 5
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 3
76795: PUSH
76796: LD_INT 60
76798: PUSH
76799: EMPTY
76800: LIST
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 91
76808: PUSH
76809: LD_VAR 0 8
76813: PUSH
76814: LD_INT 6
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 2
76824: PUSH
76825: LD_INT 25
76827: PUSH
76828: LD_INT 2
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 25
76837: PUSH
76838: LD_INT 16
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: LIST
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: PPUSH
76856: CALL_OW 69
76860: PUSH
76861: LD_VAR 0 8
76865: PPUSH
76866: CALL_OW 313
76870: PPUSH
76871: LD_INT 3
76873: PUSH
76874: LD_INT 60
76876: PUSH
76877: EMPTY
76878: LIST
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 2
76886: PUSH
76887: LD_INT 25
76889: PUSH
76890: LD_INT 2
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 25
76899: PUSH
76900: LD_INT 16
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PPUSH
76916: CALL_OW 72
76920: UNION
76921: ST_TO_ADDR
// if tmp then
76922: LD_VAR 0 4
76926: IFFALSE 77006
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76928: LD_ADDR_VAR 0 4
76932: PUSH
76933: LD_VAR 0 4
76937: PPUSH
76938: LD_INT 3
76940: PPUSH
76941: CALL 56126 0 2
76945: ST_TO_ADDR
// for j in tmp do
76946: LD_ADDR_VAR 0 2
76950: PUSH
76951: LD_VAR 0 4
76955: PUSH
76956: FOR_IN
76957: IFFALSE 77000
// begin if IsInUnit ( j ) then
76959: LD_VAR 0 2
76963: PPUSH
76964: CALL_OW 310
76968: IFFALSE 76979
// ComExit ( j ) ;
76970: LD_VAR 0 2
76974: PPUSH
76975: CALL 56209 0 1
// AddComCollect ( j , x , y ) ;
76979: LD_VAR 0 2
76983: PPUSH
76984: LD_VAR 0 6
76988: PPUSH
76989: LD_VAR 0 7
76993: PPUSH
76994: CALL_OW 177
// end ;
76998: GO 76956
77000: POP
77001: POP
// exit ;
77002: POP
77003: POP
77004: GO 77241
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77006: LD_ADDR_VAR 0 4
77010: PUSH
77011: LD_INT 22
77013: PUSH
77014: LD_VAR 0 5
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 91
77025: PUSH
77026: LD_VAR 0 8
77030: PUSH
77031: LD_INT 8
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 2
77041: PUSH
77042: LD_INT 34
77044: PUSH
77045: LD_INT 12
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 34
77054: PUSH
77055: LD_INT 51
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 34
77064: PUSH
77065: LD_INT 32
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PUSH
77072: LD_INT 34
77074: PUSH
77075: LD_INT 89
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: LIST
77093: PPUSH
77094: CALL_OW 69
77098: ST_TO_ADDR
// if tmp then
77099: LD_VAR 0 4
77103: IFFALSE 77237
// begin for j in tmp do
77105: LD_ADDR_VAR 0 2
77109: PUSH
77110: LD_VAR 0 4
77114: PUSH
77115: FOR_IN
77116: IFFALSE 77235
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77118: LD_VAR 0 2
77122: PPUSH
77123: CALL_OW 262
77127: PUSH
77128: LD_INT 3
77130: EQUAL
77131: IFTRUE 77148
77133: PUSH
77134: LD_VAR 0 2
77138: PPUSH
77139: CALL_OW 261
77143: PUSH
77144: LD_INT 20
77146: GREATER
77147: OR
77148: IFFALSE 77162
77150: PUSH
77151: LD_VAR 0 2
77155: PPUSH
77156: CALL_OW 314
77160: NOT
77161: AND
77162: IFFALSE 77192
77164: PUSH
77165: LD_VAR 0 2
77169: PPUSH
77170: CALL_OW 263
77174: PUSH
77175: LD_INT 1
77177: NONEQUAL
77178: IFTRUE 77191
77180: PUSH
77181: LD_VAR 0 2
77185: PPUSH
77186: CALL_OW 311
77190: OR
77191: AND
77192: IFFALSE 77233
// begin ComCollect ( j , x , y ) ;
77194: LD_VAR 0 2
77198: PPUSH
77199: LD_VAR 0 6
77203: PPUSH
77204: LD_VAR 0 7
77208: PPUSH
77209: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77213: LD_VAR 0 2
77217: PPUSH
77218: LD_VAR 0 8
77222: PPUSH
77223: CALL_OW 172
// exit ;
77227: POP
77228: POP
77229: POP
77230: POP
77231: GO 77241
// end ;
77233: GO 77115
77235: POP
77236: POP
// end ; end ;
77237: GO 76602
77239: POP
77240: POP
// end ; end_of_file
77241: PPOPN 9
77243: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77244: LD_VAR 0 1
77248: PPUSH
77249: LD_VAR 0 2
77253: PPUSH
77254: LD_VAR 0 3
77258: PPUSH
77259: LD_VAR 0 4
77263: PPUSH
77264: LD_VAR 0 5
77268: PPUSH
77269: LD_VAR 0 6
77273: PPUSH
77274: CALL 61337 0 6
// end ;
77278: PPOPN 6
77280: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77281: LD_INT 0
77283: PPUSH
// begin if not units then
77284: LD_VAR 0 1
77288: NOT
77289: IFFALSE 77293
// exit ;
77291: GO 77327
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77293: LD_VAR 0 1
77297: PPUSH
77298: LD_VAR 0 2
77302: PPUSH
77303: LD_VAR 0 3
77307: PPUSH
77308: LD_VAR 0 4
77312: PPUSH
77313: LD_VAR 0 5
77317: PPUSH
77318: LD_VAR 0 6
77322: PPUSH
77323: CALL 83695 0 6
// end ;
77327: PPOPN 7
77329: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77330: CALL 61224 0 0
// end ; end_of_file
77334: PPOPN 1
77336: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77337: LD_VAR 0 1
77341: PUSH
77342: LD_INT 200
77344: DOUBLE
77345: GREATEREQUAL
77346: IFFALSE 77354
77348: LD_INT 299
77350: DOUBLE
77351: LESSEQUAL
77352: IFTRUE 77356
77354: GO 77388
77356: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77357: LD_VAR 0 1
77361: PPUSH
77362: LD_VAR 0 2
77366: PPUSH
77367: LD_VAR 0 3
77371: PPUSH
77372: LD_VAR 0 4
77376: PPUSH
77377: LD_VAR 0 5
77381: PPUSH
77382: CALL 78169 0 5
77386: GO 77465
77388: LD_INT 300
77390: DOUBLE
77391: GREATEREQUAL
77392: IFFALSE 77400
77394: LD_INT 399
77396: DOUBLE
77397: LESSEQUAL
77398: IFTRUE 77402
77400: GO 77464
77402: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 2
77412: PPUSH
77413: LD_VAR 0 3
77417: PPUSH
77418: LD_VAR 0 4
77422: PPUSH
77423: LD_VAR 0 5
77427: PPUSH
77428: LD_VAR 0 6
77432: PPUSH
77433: LD_VAR 0 7
77437: PPUSH
77438: LD_VAR 0 8
77442: PPUSH
77443: LD_VAR 0 9
77447: PPUSH
77448: LD_VAR 0 10
77452: PPUSH
77453: LD_VAR 0 11
77457: PPUSH
77458: CALL 73797 0 11
77462: GO 77465
77464: POP
// end ;
77465: PPOPN 11
77467: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77468: LD_VAR 0 1
77472: PPUSH
77473: LD_VAR 0 2
77477: PPUSH
77478: LD_VAR 0 3
77482: PPUSH
77483: LD_VAR 0 4
77487: PPUSH
77488: LD_VAR 0 5
77492: PPUSH
77493: CALL 77550 0 5
// end ; end_of_file
77497: PPOPN 5
77499: END
// export function SOS_UnitDestroyed ( un ) ; begin
77500: LD_INT 0
77502: PPUSH
// ComRadiation ( un ) ;
77503: LD_VAR 0 1
77507: PPUSH
77508: CALL 78589 0 1
// end ;
77512: LD_VAR 0 2
77516: RET
// export function SOS_UnitKamikazed ( un ) ; begin
77517: LD_INT 0
77519: PPUSH
// ComRadiation ( un ) ;
77520: LD_VAR 0 1
77524: PPUSH
77525: CALL 78589 0 1
// end ;
77529: LD_VAR 0 2
77533: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77534: LD_INT 0
77536: PPUSH
// end ;
77537: LD_VAR 0 4
77541: RET
// export function SOS_Command ( cmd ) ; begin
77542: LD_INT 0
77544: PPUSH
// end ;
77545: LD_VAR 0 2
77549: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77550: LD_INT 0
77552: PPUSH
// end ;
77553: LD_VAR 0 6
77557: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
77558: LD_INT 0
77560: PPUSH
77561: PPUSH
77562: PPUSH
77563: PPUSH
// if not vehicle or not factory then
77564: LD_VAR 0 1
77568: NOT
77569: IFTRUE 77578
77571: PUSH
77572: LD_VAR 0 2
77576: NOT
77577: OR
77578: IFFALSE 77582
// exit ;
77580: GO 78164
// if not factoryWaypoints then
77582: LD_EXP 109
77586: NOT
77587: IFFALSE 77591
// exit ;
77589: GO 78164
// for i := 1 to Count ( factoryWaypoints ) do
77591: LD_ADDR_VAR 0 4
77595: PUSH
77596: DOUBLE
77597: LD_INT 1
77599: DEC
77600: ST_TO_ADDR
77601: LD_EXP 109
77605: PPUSH
77606: CALL 19845 0 1
77610: PUSH
77611: FOR_TO
77612: IFFALSE 78162
// if factoryWaypoints [ i ] [ 2 ] = factory then
77614: LD_EXP 109
77618: PUSH
77619: LD_VAR 0 4
77623: ARRAY
77624: PUSH
77625: LD_INT 2
77627: ARRAY
77628: PUSH
77629: LD_VAR 0 2
77633: EQUAL
77634: IFFALSE 78160
// begin if GetControl ( vehicle ) = control_manual then
77636: LD_VAR 0 1
77640: PPUSH
77641: CALL_OW 263
77645: PUSH
77646: LD_INT 1
77648: EQUAL
77649: IFFALSE 78013
// begin driver := IsDrivenBy ( vehicle ) ;
77651: LD_ADDR_VAR 0 5
77655: PUSH
77656: LD_VAR 0 1
77660: PPUSH
77661: CALL_OW 311
77665: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
77666: LD_VAR 0 5
77670: PUSH
77671: LD_EXP 110
77675: IN
77676: IFTRUE 77690
77678: PUSH
77679: LD_VAR 0 1
77683: PUSH
77684: LD_EXP 110
77688: IN
77689: OR
77690: IFFALSE 77696
// exit ;
77692: POP
77693: POP
77694: GO 78164
// if not HasTask ( driver ) then
77696: LD_VAR 0 5
77700: PPUSH
77701: CALL_OW 314
77705: NOT
77706: IFFALSE 78011
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
77708: LD_ADDR_EXP 110
77712: PUSH
77713: LD_EXP 110
77717: PPUSH
77718: LD_VAR 0 5
77722: PPUSH
77723: CALL 55811 0 2
77727: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
77728: LD_ADDR_EXP 110
77732: PUSH
77733: LD_EXP 110
77737: PPUSH
77738: LD_VAR 0 1
77742: PPUSH
77743: CALL 55811 0 2
77747: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77748: LD_ADDR_VAR 0 6
77752: PUSH
77753: LD_EXP 109
77757: PUSH
77758: LD_VAR 0 4
77762: ARRAY
77763: PUSH
77764: LD_INT 3
77766: ARRAY
77767: PPUSH
77768: LD_EXP 109
77772: PUSH
77773: LD_VAR 0 4
77777: ARRAY
77778: PUSH
77779: LD_INT 4
77781: ARRAY
77782: PPUSH
77783: CALL_OW 428
77787: ST_TO_ADDR
// if hex then
77788: LD_VAR 0 6
77792: IFFALSE 77810
// ComMoveUnit ( driver , hex ) else
77794: LD_VAR 0 5
77798: PPUSH
77799: LD_VAR 0 6
77803: PPUSH
77804: CALL_OW 112
77808: GO 77894
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
77810: LD_VAR 0 1
77814: PPUSH
77815: LD_EXP 109
77819: PUSH
77820: LD_VAR 0 4
77824: ARRAY
77825: PUSH
77826: LD_INT 3
77828: ARRAY
77829: PPUSH
77830: LD_EXP 109
77834: PUSH
77835: LD_VAR 0 4
77839: ARRAY
77840: PUSH
77841: LD_INT 4
77843: ARRAY
77844: PPUSH
77845: CALL_OW 297
77849: PUSH
77850: LD_INT 0
77852: GREATER
77853: IFFALSE 77894
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77855: LD_VAR 0 5
77859: PPUSH
77860: LD_EXP 109
77864: PUSH
77865: LD_VAR 0 4
77869: ARRAY
77870: PUSH
77871: LD_INT 3
77873: ARRAY
77874: PPUSH
77875: LD_EXP 109
77879: PUSH
77880: LD_VAR 0 4
77884: ARRAY
77885: PUSH
77886: LD_INT 4
77888: ARRAY
77889: PPUSH
77890: CALL_OW 111
// AddComExitVehicle ( driver ) ;
77894: LD_VAR 0 5
77898: PPUSH
77899: CALL_OW 181
// if Multiplayer then
77903: LD_OWVAR 4
77907: IFFALSE 77956
// begin repeat wait ( 10 ) ;
77909: LD_INT 10
77911: PPUSH
77912: CALL_OW 67
// until not IsInUnit ( driver ) ;
77916: LD_VAR 0 5
77920: PPUSH
77921: CALL_OW 310
77925: NOT
77926: IFFALSE 77909
// if not HasTask ( driver ) then
77928: LD_VAR 0 5
77932: PPUSH
77933: CALL_OW 314
77937: NOT
77938: IFFALSE 77954
// ComEnterUnit ( driver , factory ) ;
77940: LD_VAR 0 5
77944: PPUSH
77945: LD_VAR 0 2
77949: PPUSH
77950: CALL_OW 120
// end else
77954: GO 77970
// AddComEnterUnit ( driver , factory ) ;
77956: LD_VAR 0 5
77960: PPUSH
77961: LD_VAR 0 2
77965: PPUSH
77966: CALL_OW 180
// wait ( 0 0$1 ) ;
77970: LD_INT 35
77972: PPUSH
77973: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
77977: LD_ADDR_EXP 110
77981: PUSH
77982: LD_EXP 110
77986: PUSH
77987: LD_VAR 0 5
77991: DIFF
77992: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
77993: LD_ADDR_EXP 110
77997: PUSH
77998: LD_EXP 110
78002: PUSH
78003: LD_VAR 0 1
78007: DIFF
78008: ST_TO_ADDR
// break ;
78009: GO 78162
// end ; end else
78011: GO 78160
// if GetControl ( vehicle ) = control_remote then
78013: LD_VAR 0 1
78017: PPUSH
78018: CALL_OW 263
78022: PUSH
78023: LD_INT 2
78025: EQUAL
78026: IFFALSE 78112
// begin wait ( 0 0$2 ) ;
78028: LD_INT 70
78030: PPUSH
78031: CALL_OW 67
// repeat wait ( 10 ) ;
78035: LD_INT 10
78037: PPUSH
78038: CALL_OW 67
// Connect ( vehicle ) ;
78042: LD_VAR 0 1
78046: PPUSH
78047: CALL 26123 0 1
// until IsControledBy ( vehicle ) ;
78051: LD_VAR 0 1
78055: PPUSH
78056: CALL_OW 312
78060: IFFALSE 78035
// wait ( 10 ) ;
78062: LD_INT 10
78064: PPUSH
78065: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
78069: LD_VAR 0 1
78073: PPUSH
78074: LD_EXP 109
78078: PUSH
78079: LD_VAR 0 4
78083: ARRAY
78084: PUSH
78085: LD_INT 3
78087: ARRAY
78088: PPUSH
78089: LD_EXP 109
78093: PUSH
78094: LD_VAR 0 4
78098: ARRAY
78099: PUSH
78100: LD_INT 4
78102: ARRAY
78103: PPUSH
78104: CALL_OW 111
// break ;
78108: GO 78162
// end else
78110: GO 78160
// begin wait ( 0 0$3 ) ;
78112: LD_INT 105
78114: PPUSH
78115: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
78119: LD_VAR 0 1
78123: PPUSH
78124: LD_EXP 109
78128: PUSH
78129: LD_VAR 0 4
78133: ARRAY
78134: PUSH
78135: LD_INT 3
78137: ARRAY
78138: PPUSH
78139: LD_EXP 109
78143: PUSH
78144: LD_VAR 0 4
78148: ARRAY
78149: PUSH
78150: LD_INT 4
78152: ARRAY
78153: PPUSH
78154: CALL_OW 111
// break ;
78158: GO 78162
// end ; end ;
78160: GO 77611
78162: POP
78163: POP
// end ;
78164: LD_VAR 0 3
78168: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78169: LD_INT 0
78171: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78172: LD_VAR 0 1
78176: PUSH
78177: LD_INT 250
78179: EQUAL
78180: IFFALSE 78197
78182: PUSH
78183: LD_VAR 0 2
78187: PPUSH
78188: CALL_OW 264
78192: PUSH
78193: LD_INT 81
78195: EQUAL
78196: AND
78197: IFFALSE 78218
// MinerPlaceMine ( unit , x , y ) ;
78199: LD_VAR 0 2
78203: PPUSH
78204: LD_VAR 0 4
78208: PPUSH
78209: LD_VAR 0 5
78213: PPUSH
78214: CALL 81428 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78218: LD_VAR 0 1
78222: PUSH
78223: LD_INT 251
78225: EQUAL
78226: IFFALSE 78243
78228: PUSH
78229: LD_VAR 0 2
78233: PPUSH
78234: CALL_OW 264
78238: PUSH
78239: LD_INT 81
78241: EQUAL
78242: AND
78243: IFFALSE 78264
// MinerDetonateMine ( unit , x , y ) ;
78245: LD_VAR 0 2
78249: PPUSH
78250: LD_VAR 0 4
78254: PPUSH
78255: LD_VAR 0 5
78259: PPUSH
78260: CALL 81835 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78264: LD_VAR 0 1
78268: PUSH
78269: LD_INT 252
78271: EQUAL
78272: IFFALSE 78289
78274: PUSH
78275: LD_VAR 0 2
78279: PPUSH
78280: CALL_OW 264
78284: PUSH
78285: LD_INT 81
78287: EQUAL
78288: AND
78289: IFFALSE 78310
// MinerCreateMinefield ( unit , x , y ) ;
78291: LD_VAR 0 2
78295: PPUSH
78296: LD_VAR 0 4
78300: PPUSH
78301: LD_VAR 0 5
78305: PPUSH
78306: CALL 82067 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78310: LD_VAR 0 1
78314: PUSH
78315: LD_INT 253
78317: EQUAL
78318: IFFALSE 78335
78320: PUSH
78321: LD_VAR 0 2
78325: PPUSH
78326: CALL_OW 257
78330: PUSH
78331: LD_INT 5
78333: EQUAL
78334: AND
78335: IFFALSE 78356
// ComBinocular ( unit , x , y ) ;
78337: LD_VAR 0 2
78341: PPUSH
78342: LD_VAR 0 4
78346: PPUSH
78347: LD_VAR 0 5
78351: PPUSH
78352: CALL 82442 0 3
// if selectedUnit then
78356: LD_VAR 0 3
78360: IFFALSE 78420
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78362: LD_VAR 0 1
78366: PUSH
78367: LD_INT 254
78369: EQUAL
78370: IFFALSE 78387
78372: PUSH
78373: LD_VAR 0 2
78377: PPUSH
78378: CALL_OW 264
78382: PUSH
78383: LD_INT 99
78385: EQUAL
78386: AND
78387: IFFALSE 78404
78389: PUSH
78390: LD_VAR 0 3
78394: PPUSH
78395: CALL_OW 263
78399: PUSH
78400: LD_INT 3
78402: EQUAL
78403: AND
78404: IFFALSE 78420
// HackDestroyVehicle ( unit , selectedUnit ) ;
78406: LD_VAR 0 2
78410: PPUSH
78411: LD_VAR 0 3
78415: PPUSH
78416: CALL 80710 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78420: LD_VAR 0 1
78424: PUSH
78425: LD_INT 255
78427: EQUAL
78428: IFFALSE 78452
78430: PUSH
78431: LD_VAR 0 2
78435: PPUSH
78436: CALL_OW 264
78440: PUSH
78441: LD_INT 14
78443: PUSH
78444: LD_INT 53
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: IN
78451: AND
78452: IFFALSE 78470
78454: PUSH
78455: LD_VAR 0 4
78459: PPUSH
78460: LD_VAR 0 5
78464: PPUSH
78465: CALL_OW 488
78469: AND
78470: IFFALSE 78494
// CutTreeXYR ( unit , x , y , 12 ) ;
78472: LD_VAR 0 2
78476: PPUSH
78477: LD_VAR 0 4
78481: PPUSH
78482: LD_VAR 0 5
78486: PPUSH
78487: LD_INT 12
78489: PPUSH
78490: CALL 78685 0 4
// if cmd = 256 then
78494: LD_VAR 0 1
78498: PUSH
78499: LD_INT 256
78501: EQUAL
78502: IFFALSE 78523
// SetFactoryWaypoint ( unit , x , y ) ;
78504: LD_VAR 0 2
78508: PPUSH
78509: LD_VAR 0 4
78513: PPUSH
78514: LD_VAR 0 5
78518: PPUSH
78519: CALL 75789 0 3
// if cmd = 257 then
78523: LD_VAR 0 1
78527: PUSH
78528: LD_INT 257
78530: EQUAL
78531: IFFALSE 78552
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78533: LD_VAR 0 2
78537: PPUSH
78538: LD_VAR 0 4
78542: PPUSH
78543: LD_VAR 0 5
78547: PPUSH
78548: CALL 76285 0 3
// if cmd = 258 then
78552: LD_VAR 0 1
78556: PUSH
78557: LD_INT 258
78559: EQUAL
78560: IFFALSE 78584
// BurnTreeXYR ( unit , x , y , 8 ) ;
78562: LD_VAR 0 2
78566: PPUSH
78567: LD_VAR 0 4
78571: PPUSH
78572: LD_VAR 0 5
78576: PPUSH
78577: LD_INT 8
78579: PPUSH
78580: CALL 79085 0 4
// end ;
78584: LD_VAR 0 6
78588: RET
// export function ComRadiation ( un ) ; var eff ; begin
78589: LD_INT 0
78591: PPUSH
78592: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
78593: LD_VAR 0 1
78597: PPUSH
78598: CALL_OW 264
78602: PUSH
78603: LD_INT 91
78605: NONEQUAL
78606: IFFALSE 78610
// exit ;
78608: GO 78680
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78610: LD_INT 68
78612: PPUSH
78613: LD_VAR 0 1
78617: PPUSH
78618: CALL_OW 255
78622: PPUSH
78623: CALL_OW 321
78627: PUSH
78628: LD_INT 2
78630: EQUAL
78631: IFFALSE 78643
// eff := 50 else
78633: LD_ADDR_VAR 0 3
78637: PUSH
78638: LD_INT 50
78640: ST_TO_ADDR
78641: GO 78651
// eff := 25 ;
78643: LD_ADDR_VAR 0 3
78647: PUSH
78648: LD_INT 25
78650: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78651: LD_VAR 0 1
78655: PPUSH
78656: CALL_OW 250
78660: PPUSH
78661: LD_VAR 0 1
78665: PPUSH
78666: CALL_OW 251
78670: PPUSH
78671: LD_VAR 0 3
78675: PPUSH
78676: CALL_OW 495
// end ;
78680: LD_VAR 0 2
78684: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78685: LD_INT 0
78687: PPUSH
78688: PPUSH
78689: PPUSH
78690: PPUSH
78691: PPUSH
78692: PPUSH
78693: PPUSH
78694: PPUSH
78695: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
78696: LD_VAR 0 1
78700: PPUSH
78701: CALL_OW 302
78705: NOT
78706: IFTRUE 78725
78708: PUSH
78709: LD_VAR 0 2
78713: PPUSH
78714: LD_VAR 0 3
78718: PPUSH
78719: CALL_OW 488
78723: NOT
78724: OR
78725: IFTRUE 78734
78727: PUSH
78728: LD_VAR 0 4
78732: NOT
78733: OR
78734: IFFALSE 78738
// exit ;
78736: GO 79080
// list := [ ] ;
78738: LD_ADDR_VAR 0 13
78742: PUSH
78743: EMPTY
78744: ST_TO_ADDR
// if x - r < 0 then
78745: LD_VAR 0 2
78749: PUSH
78750: LD_VAR 0 4
78754: MINUS
78755: PUSH
78756: LD_INT 0
78758: LESS
78759: IFFALSE 78771
// min_x := 0 else
78761: LD_ADDR_VAR 0 7
78765: PUSH
78766: LD_INT 0
78768: ST_TO_ADDR
78769: GO 78787
// min_x := x - r ;
78771: LD_ADDR_VAR 0 7
78775: PUSH
78776: LD_VAR 0 2
78780: PUSH
78781: LD_VAR 0 4
78785: MINUS
78786: ST_TO_ADDR
// if y - r < 0 then
78787: LD_VAR 0 3
78791: PUSH
78792: LD_VAR 0 4
78796: MINUS
78797: PUSH
78798: LD_INT 0
78800: LESS
78801: IFFALSE 78813
// min_y := 0 else
78803: LD_ADDR_VAR 0 8
78807: PUSH
78808: LD_INT 0
78810: ST_TO_ADDR
78811: GO 78829
// min_y := y - r ;
78813: LD_ADDR_VAR 0 8
78817: PUSH
78818: LD_VAR 0 3
78822: PUSH
78823: LD_VAR 0 4
78827: MINUS
78828: ST_TO_ADDR
// max_x := x + r ;
78829: LD_ADDR_VAR 0 9
78833: PUSH
78834: LD_VAR 0 2
78838: PUSH
78839: LD_VAR 0 4
78843: PLUS
78844: ST_TO_ADDR
// max_y := y + r ;
78845: LD_ADDR_VAR 0 10
78849: PUSH
78850: LD_VAR 0 3
78854: PUSH
78855: LD_VAR 0 4
78859: PLUS
78860: ST_TO_ADDR
// for _x = min_x to max_x do
78861: LD_ADDR_VAR 0 11
78865: PUSH
78866: DOUBLE
78867: LD_VAR 0 7
78871: DEC
78872: ST_TO_ADDR
78873: LD_VAR 0 9
78877: PUSH
78878: FOR_TO
78879: IFFALSE 78998
// for _y = min_y to max_y do
78881: LD_ADDR_VAR 0 12
78885: PUSH
78886: DOUBLE
78887: LD_VAR 0 8
78891: DEC
78892: ST_TO_ADDR
78893: LD_VAR 0 10
78897: PUSH
78898: FOR_TO
78899: IFFALSE 78994
// begin if not ValidHex ( _x , _y ) then
78901: LD_VAR 0 11
78905: PPUSH
78906: LD_VAR 0 12
78910: PPUSH
78911: CALL_OW 488
78915: NOT
78916: IFFALSE 78920
// continue ;
78918: GO 78898
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78920: LD_VAR 0 11
78924: PPUSH
78925: LD_VAR 0 12
78929: PPUSH
78930: CALL_OW 351
78934: IFFALSE 78952
78936: PUSH
78937: LD_VAR 0 11
78941: PPUSH
78942: LD_VAR 0 12
78946: PPUSH
78947: CALL_OW 554
78951: AND
78952: IFFALSE 78992
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78954: LD_ADDR_VAR 0 13
78958: PUSH
78959: LD_VAR 0 13
78963: PPUSH
78964: LD_VAR 0 13
78968: PUSH
78969: LD_INT 1
78971: PLUS
78972: PPUSH
78973: LD_VAR 0 11
78977: PUSH
78978: LD_VAR 0 12
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PPUSH
78987: CALL_OW 2
78991: ST_TO_ADDR
// end ;
78992: GO 78898
78994: POP
78995: POP
78996: GO 78878
78998: POP
78999: POP
// if not list then
79000: LD_VAR 0 13
79004: NOT
79005: IFFALSE 79009
// exit ;
79007: GO 79080
// for i in list do
79009: LD_ADDR_VAR 0 6
79013: PUSH
79014: LD_VAR 0 13
79018: PUSH
79019: FOR_IN
79020: IFFALSE 79078
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79022: LD_VAR 0 1
79026: PPUSH
79027: LD_STRING M
79029: PUSH
79030: LD_VAR 0 6
79034: PUSH
79035: LD_INT 1
79037: ARRAY
79038: PUSH
79039: LD_VAR 0 6
79043: PUSH
79044: LD_INT 2
79046: ARRAY
79047: PUSH
79048: LD_INT 0
79050: PUSH
79051: LD_INT 0
79053: PUSH
79054: LD_INT 0
79056: PUSH
79057: LD_INT 0
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: PUSH
79069: EMPTY
79070: LIST
79071: PPUSH
79072: CALL_OW 447
79076: GO 79019
79078: POP
79079: POP
// end ;
79080: LD_VAR 0 5
79084: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
79085: LD_INT 0
79087: PPUSH
79088: PPUSH
79089: PPUSH
79090: PPUSH
79091: PPUSH
79092: PPUSH
79093: PPUSH
79094: PPUSH
79095: PPUSH
79096: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79097: LD_VAR 0 1
79101: PPUSH
79102: CALL_OW 302
79106: NOT
79107: IFTRUE 79126
79109: PUSH
79110: LD_VAR 0 2
79114: PPUSH
79115: LD_VAR 0 3
79119: PPUSH
79120: CALL_OW 488
79124: NOT
79125: OR
79126: IFTRUE 79135
79128: PUSH
79129: LD_VAR 0 4
79133: NOT
79134: OR
79135: IFFALSE 79139
// exit ;
79137: GO 79656
// list := [ ] ;
79139: LD_ADDR_VAR 0 13
79143: PUSH
79144: EMPTY
79145: ST_TO_ADDR
// if x - r < 0 then
79146: LD_VAR 0 2
79150: PUSH
79151: LD_VAR 0 4
79155: MINUS
79156: PUSH
79157: LD_INT 0
79159: LESS
79160: IFFALSE 79172
// min_x := 0 else
79162: LD_ADDR_VAR 0 7
79166: PUSH
79167: LD_INT 0
79169: ST_TO_ADDR
79170: GO 79188
// min_x := x - r ;
79172: LD_ADDR_VAR 0 7
79176: PUSH
79177: LD_VAR 0 2
79181: PUSH
79182: LD_VAR 0 4
79186: MINUS
79187: ST_TO_ADDR
// if y - r < 0 then
79188: LD_VAR 0 3
79192: PUSH
79193: LD_VAR 0 4
79197: MINUS
79198: PUSH
79199: LD_INT 0
79201: LESS
79202: IFFALSE 79214
// min_y := 0 else
79204: LD_ADDR_VAR 0 8
79208: PUSH
79209: LD_INT 0
79211: ST_TO_ADDR
79212: GO 79230
// min_y := y - r ;
79214: LD_ADDR_VAR 0 8
79218: PUSH
79219: LD_VAR 0 3
79223: PUSH
79224: LD_VAR 0 4
79228: MINUS
79229: ST_TO_ADDR
// max_x := x + r ;
79230: LD_ADDR_VAR 0 9
79234: PUSH
79235: LD_VAR 0 2
79239: PUSH
79240: LD_VAR 0 4
79244: PLUS
79245: ST_TO_ADDR
// max_y := y + r ;
79246: LD_ADDR_VAR 0 10
79250: PUSH
79251: LD_VAR 0 3
79255: PUSH
79256: LD_VAR 0 4
79260: PLUS
79261: ST_TO_ADDR
// for _x = min_x to max_x do
79262: LD_ADDR_VAR 0 11
79266: PUSH
79267: DOUBLE
79268: LD_VAR 0 7
79272: DEC
79273: ST_TO_ADDR
79274: LD_VAR 0 9
79278: PUSH
79279: FOR_TO
79280: IFFALSE 79399
// for _y = min_y to max_y do
79282: LD_ADDR_VAR 0 12
79286: PUSH
79287: DOUBLE
79288: LD_VAR 0 8
79292: DEC
79293: ST_TO_ADDR
79294: LD_VAR 0 10
79298: PUSH
79299: FOR_TO
79300: IFFALSE 79395
// begin if not ValidHex ( _x , _y ) then
79302: LD_VAR 0 11
79306: PPUSH
79307: LD_VAR 0 12
79311: PPUSH
79312: CALL_OW 488
79316: NOT
79317: IFFALSE 79321
// continue ;
79319: GO 79299
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79321: LD_VAR 0 11
79325: PPUSH
79326: LD_VAR 0 12
79330: PPUSH
79331: CALL_OW 351
79335: IFFALSE 79353
79337: PUSH
79338: LD_VAR 0 11
79342: PPUSH
79343: LD_VAR 0 12
79347: PPUSH
79348: CALL_OW 554
79352: AND
79353: IFFALSE 79393
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79355: LD_ADDR_VAR 0 13
79359: PUSH
79360: LD_VAR 0 13
79364: PPUSH
79365: LD_VAR 0 13
79369: PUSH
79370: LD_INT 1
79372: PLUS
79373: PPUSH
79374: LD_VAR 0 11
79378: PUSH
79379: LD_VAR 0 12
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PPUSH
79388: CALL_OW 2
79392: ST_TO_ADDR
// end ;
79393: GO 79299
79395: POP
79396: POP
79397: GO 79279
79399: POP
79400: POP
// if not list then
79401: LD_VAR 0 13
79405: NOT
79406: IFFALSE 79410
// exit ;
79408: GO 79656
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79410: LD_ADDR_VAR 0 13
79414: PUSH
79415: LD_VAR 0 1
79419: PPUSH
79420: LD_VAR 0 13
79424: PPUSH
79425: LD_INT 1
79427: PPUSH
79428: LD_INT 1
79430: PPUSH
79431: CALL 23251 0 4
79435: ST_TO_ADDR
// ComStop ( flame ) ;
79436: LD_VAR 0 1
79440: PPUSH
79441: CALL_OW 141
// for i in list do
79445: LD_ADDR_VAR 0 6
79449: PUSH
79450: LD_VAR 0 13
79454: PUSH
79455: FOR_IN
79456: IFFALSE 79487
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79458: LD_VAR 0 1
79462: PPUSH
79463: LD_VAR 0 6
79467: PUSH
79468: LD_INT 1
79470: ARRAY
79471: PPUSH
79472: LD_VAR 0 6
79476: PUSH
79477: LD_INT 2
79479: ARRAY
79480: PPUSH
79481: CALL_OW 176
79485: GO 79455
79487: POP
79488: POP
// repeat wait ( 0 0$1 ) ;
79489: LD_INT 35
79491: PPUSH
79492: CALL_OW 67
// task := GetTaskList ( flame ) ;
79496: LD_ADDR_VAR 0 14
79500: PUSH
79501: LD_VAR 0 1
79505: PPUSH
79506: CALL_OW 437
79510: ST_TO_ADDR
// if not task then
79511: LD_VAR 0 14
79515: NOT
79516: IFFALSE 79520
// exit ;
79518: GO 79656
// if task [ 1 ] [ 1 ] <> | then
79520: LD_VAR 0 14
79524: PUSH
79525: LD_INT 1
79527: ARRAY
79528: PUSH
79529: LD_INT 1
79531: ARRAY
79532: PUSH
79533: LD_STRING |
79535: NONEQUAL
79536: IFFALSE 79540
// exit ;
79538: GO 79656
// _x := task [ 1 ] [ 2 ] ;
79540: LD_ADDR_VAR 0 11
79544: PUSH
79545: LD_VAR 0 14
79549: PUSH
79550: LD_INT 1
79552: ARRAY
79553: PUSH
79554: LD_INT 2
79556: ARRAY
79557: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
79558: LD_ADDR_VAR 0 12
79562: PUSH
79563: LD_VAR 0 14
79567: PUSH
79568: LD_INT 1
79570: ARRAY
79571: PUSH
79572: LD_INT 3
79574: ARRAY
79575: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
79576: LD_VAR 0 11
79580: PPUSH
79581: LD_VAR 0 12
79585: PPUSH
79586: CALL_OW 351
79590: NOT
79591: IFTRUE 79610
79593: PUSH
79594: LD_VAR 0 11
79598: PPUSH
79599: LD_VAR 0 12
79603: PPUSH
79604: CALL_OW 554
79608: NOT
79609: OR
79610: IFFALSE 79644
// begin task := Delete ( task , 1 ) ;
79612: LD_ADDR_VAR 0 14
79616: PUSH
79617: LD_VAR 0 14
79621: PPUSH
79622: LD_INT 1
79624: PPUSH
79625: CALL_OW 3
79629: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
79630: LD_VAR 0 1
79634: PPUSH
79635: LD_VAR 0 14
79639: PPUSH
79640: CALL_OW 446
// end ; until not HasTask ( flame ) ;
79644: LD_VAR 0 1
79648: PPUSH
79649: CALL_OW 314
79653: NOT
79654: IFFALSE 79489
// end ;
79656: LD_VAR 0 5
79660: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79661: LD_EXP 113
79665: NOT
79666: IFFALSE 79716
79668: GO 79670
79670: DISABLE
// begin initHack := true ;
79671: LD_ADDR_EXP 113
79675: PUSH
79676: LD_INT 1
79678: ST_TO_ADDR
// hackTanks := [ ] ;
79679: LD_ADDR_EXP 114
79683: PUSH
79684: EMPTY
79685: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79686: LD_ADDR_EXP 115
79690: PUSH
79691: EMPTY
79692: ST_TO_ADDR
// hackLimit := 3 ;
79693: LD_ADDR_EXP 116
79697: PUSH
79698: LD_INT 3
79700: ST_TO_ADDR
// hackDist := 12 ;
79701: LD_ADDR_EXP 117
79705: PUSH
79706: LD_INT 12
79708: ST_TO_ADDR
// hackCounter := [ ] ;
79709: LD_ADDR_EXP 118
79713: PUSH
79714: EMPTY
79715: ST_TO_ADDR
// end ;
79716: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79717: LD_EXP 113
79721: IFFALSE 79739
79723: PUSH
79724: LD_INT 34
79726: PUSH
79727: LD_INT 99
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PPUSH
79734: CALL_OW 69
79738: AND
79739: IFFALSE 79992
79741: GO 79743
79743: DISABLE
79744: LD_INT 0
79746: PPUSH
79747: PPUSH
// begin enable ;
79748: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79749: LD_ADDR_VAR 0 1
79753: PUSH
79754: LD_INT 34
79756: PUSH
79757: LD_INT 99
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PPUSH
79764: CALL_OW 69
79768: PUSH
79769: FOR_IN
79770: IFFALSE 79990
// begin if not i in hackTanks then
79772: LD_VAR 0 1
79776: PUSH
79777: LD_EXP 114
79781: IN
79782: NOT
79783: IFFALSE 79866
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79785: LD_ADDR_EXP 114
79789: PUSH
79790: LD_EXP 114
79794: PPUSH
79795: LD_EXP 114
79799: PUSH
79800: LD_INT 1
79802: PLUS
79803: PPUSH
79804: LD_VAR 0 1
79808: PPUSH
79809: CALL_OW 1
79813: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79814: LD_ADDR_EXP 115
79818: PUSH
79819: LD_EXP 115
79823: PPUSH
79824: LD_EXP 115
79828: PUSH
79829: LD_INT 1
79831: PLUS
79832: PPUSH
79833: EMPTY
79834: PPUSH
79835: CALL_OW 1
79839: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79840: LD_ADDR_EXP 118
79844: PUSH
79845: LD_EXP 118
79849: PPUSH
79850: LD_EXP 118
79854: PUSH
79855: LD_INT 1
79857: PLUS
79858: PPUSH
79859: EMPTY
79860: PPUSH
79861: CALL_OW 1
79865: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79866: LD_VAR 0 1
79870: PPUSH
79871: CALL_OW 302
79875: NOT
79876: IFFALSE 79889
// begin HackUnlinkAll ( i ) ;
79878: LD_VAR 0 1
79882: PPUSH
79883: CALL 79995 0 1
// continue ;
79887: GO 79769
// end ; HackCheckCapturedStatus ( i ) ;
79889: LD_VAR 0 1
79893: PPUSH
79894: CALL 80440 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79898: LD_ADDR_VAR 0 2
79902: PUSH
79903: LD_INT 81
79905: PUSH
79906: LD_VAR 0 1
79910: PPUSH
79911: CALL_OW 255
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: PUSH
79920: LD_INT 33
79922: PUSH
79923: LD_INT 3
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: PUSH
79930: LD_INT 91
79932: PUSH
79933: LD_VAR 0 1
79937: PUSH
79938: LD_EXP 117
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: LIST
79947: PUSH
79948: LD_INT 50
79950: PUSH
79951: EMPTY
79952: LIST
79953: PUSH
79954: EMPTY
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: PPUSH
79960: CALL_OW 69
79964: ST_TO_ADDR
// if not tmp then
79965: LD_VAR 0 2
79969: NOT
79970: IFFALSE 79974
// continue ;
79972: GO 79769
// HackLink ( i , tmp ) ;
79974: LD_VAR 0 1
79978: PPUSH
79979: LD_VAR 0 2
79983: PPUSH
79984: CALL 80131 0 2
// end ;
79988: GO 79769
79990: POP
79991: POP
// end ;
79992: PPOPN 2
79994: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79995: LD_INT 0
79997: PPUSH
79998: PPUSH
79999: PPUSH
// if not hack in hackTanks then
80000: LD_VAR 0 1
80004: PUSH
80005: LD_EXP 114
80009: IN
80010: NOT
80011: IFFALSE 80015
// exit ;
80013: GO 80126
// index := GetElementIndex ( hackTanks , hack ) ;
80015: LD_ADDR_VAR 0 4
80019: PUSH
80020: LD_EXP 114
80024: PPUSH
80025: LD_VAR 0 1
80029: PPUSH
80030: CALL 22546 0 2
80034: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80035: LD_EXP 115
80039: PUSH
80040: LD_VAR 0 4
80044: ARRAY
80045: IFFALSE 80126
// begin for i in hackTanksCaptured [ index ] do
80047: LD_ADDR_VAR 0 3
80051: PUSH
80052: LD_EXP 115
80056: PUSH
80057: LD_VAR 0 4
80061: ARRAY
80062: PUSH
80063: FOR_IN
80064: IFFALSE 80090
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80066: LD_VAR 0 3
80070: PUSH
80071: LD_INT 1
80073: ARRAY
80074: PPUSH
80075: LD_VAR 0 3
80079: PUSH
80080: LD_INT 2
80082: ARRAY
80083: PPUSH
80084: CALL_OW 235
80088: GO 80063
80090: POP
80091: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80092: LD_ADDR_EXP 115
80096: PUSH
80097: LD_EXP 115
80101: PPUSH
80102: LD_VAR 0 4
80106: PPUSH
80107: EMPTY
80108: PPUSH
80109: CALL_OW 1
80113: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80114: LD_VAR 0 1
80118: PPUSH
80119: LD_INT 0
80121: PPUSH
80122: CALL_OW 505
// end ; end ;
80126: LD_VAR 0 2
80130: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80131: LD_INT 0
80133: PPUSH
80134: PPUSH
80135: PPUSH
// if not hack in hackTanks or not vehicles then
80136: LD_VAR 0 1
80140: PUSH
80141: LD_EXP 114
80145: IN
80146: NOT
80147: IFTRUE 80156
80149: PUSH
80150: LD_VAR 0 2
80154: NOT
80155: OR
80156: IFFALSE 80160
// exit ;
80158: GO 80435
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80160: LD_ADDR_VAR 0 2
80164: PUSH
80165: LD_VAR 0 1
80169: PPUSH
80170: LD_VAR 0 2
80174: PPUSH
80175: LD_INT 1
80177: PPUSH
80178: LD_INT 1
80180: PPUSH
80181: CALL 23198 0 4
80185: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80186: LD_ADDR_VAR 0 5
80190: PUSH
80191: LD_EXP 114
80195: PPUSH
80196: LD_VAR 0 1
80200: PPUSH
80201: CALL 22546 0 2
80205: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80206: LD_EXP 115
80210: PUSH
80211: LD_VAR 0 5
80215: ARRAY
80216: PUSH
80217: LD_EXP 116
80221: LESS
80222: IFFALSE 80411
// begin for i := 1 to vehicles do
80224: LD_ADDR_VAR 0 4
80228: PUSH
80229: DOUBLE
80230: LD_INT 1
80232: DEC
80233: ST_TO_ADDR
80234: LD_VAR 0 2
80238: PUSH
80239: FOR_TO
80240: IFFALSE 80409
// begin if hackTanksCaptured [ index ] = hackLimit then
80242: LD_EXP 115
80246: PUSH
80247: LD_VAR 0 5
80251: ARRAY
80252: PUSH
80253: LD_EXP 116
80257: EQUAL
80258: IFFALSE 80262
// break ;
80260: GO 80409
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80262: LD_ADDR_EXP 118
80266: PUSH
80267: LD_EXP 118
80271: PPUSH
80272: LD_VAR 0 5
80276: PPUSH
80277: LD_EXP 118
80281: PUSH
80282: LD_VAR 0 5
80286: ARRAY
80287: PUSH
80288: LD_INT 1
80290: PLUS
80291: PPUSH
80292: CALL_OW 1
80296: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80297: LD_ADDR_EXP 115
80301: PUSH
80302: LD_EXP 115
80306: PPUSH
80307: LD_VAR 0 5
80311: PUSH
80312: LD_EXP 115
80316: PUSH
80317: LD_VAR 0 5
80321: ARRAY
80322: PUSH
80323: LD_INT 1
80325: PLUS
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PPUSH
80331: LD_VAR 0 2
80335: PUSH
80336: LD_VAR 0 4
80340: ARRAY
80341: PUSH
80342: LD_VAR 0 2
80346: PUSH
80347: LD_VAR 0 4
80351: ARRAY
80352: PPUSH
80353: CALL_OW 255
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: PPUSH
80362: CALL 22763 0 3
80366: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80367: LD_VAR 0 2
80371: PUSH
80372: LD_VAR 0 4
80376: ARRAY
80377: PPUSH
80378: LD_VAR 0 1
80382: PPUSH
80383: CALL_OW 255
80387: PPUSH
80388: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80392: LD_VAR 0 2
80396: PUSH
80397: LD_VAR 0 4
80401: ARRAY
80402: PPUSH
80403: CALL_OW 141
// end ;
80407: GO 80239
80409: POP
80410: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80411: LD_VAR 0 1
80415: PPUSH
80416: LD_EXP 115
80420: PUSH
80421: LD_VAR 0 5
80425: ARRAY
80426: PUSH
80427: LD_INT 0
80429: PLUS
80430: PPUSH
80431: CALL_OW 505
// end ;
80435: LD_VAR 0 3
80439: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80440: LD_INT 0
80442: PPUSH
80443: PPUSH
80444: PPUSH
80445: PPUSH
// if not hack in hackTanks then
80446: LD_VAR 0 1
80450: PUSH
80451: LD_EXP 114
80455: IN
80456: NOT
80457: IFFALSE 80461
// exit ;
80459: GO 80705
// index := GetElementIndex ( hackTanks , hack ) ;
80461: LD_ADDR_VAR 0 4
80465: PUSH
80466: LD_EXP 114
80470: PPUSH
80471: LD_VAR 0 1
80475: PPUSH
80476: CALL 22546 0 2
80480: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80481: LD_ADDR_VAR 0 3
80485: PUSH
80486: DOUBLE
80487: LD_EXP 115
80491: PUSH
80492: LD_VAR 0 4
80496: ARRAY
80497: INC
80498: ST_TO_ADDR
80499: LD_INT 1
80501: PUSH
80502: FOR_DOWNTO
80503: IFFALSE 80679
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80505: LD_ADDR_VAR 0 5
80509: PUSH
80510: LD_EXP 115
80514: PUSH
80515: LD_VAR 0 4
80519: ARRAY
80520: PUSH
80521: LD_VAR 0 3
80525: ARRAY
80526: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80527: LD_VAR 0 5
80531: PUSH
80532: LD_INT 1
80534: ARRAY
80535: PPUSH
80536: CALL_OW 302
80540: NOT
80541: IFTRUE 80569
80543: PUSH
80544: LD_VAR 0 5
80548: PUSH
80549: LD_INT 1
80551: ARRAY
80552: PPUSH
80553: CALL_OW 255
80557: PUSH
80558: LD_VAR 0 1
80562: PPUSH
80563: CALL_OW 255
80567: NONEQUAL
80568: OR
80569: IFFALSE 80677
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80571: LD_VAR 0 5
80575: PUSH
80576: LD_INT 1
80578: ARRAY
80579: PPUSH
80580: CALL_OW 305
80584: IFFALSE 80612
80586: PUSH
80587: LD_VAR 0 5
80591: PUSH
80592: LD_INT 1
80594: ARRAY
80595: PPUSH
80596: CALL_OW 255
80600: PUSH
80601: LD_VAR 0 1
80605: PPUSH
80606: CALL_OW 255
80610: EQUAL
80611: AND
80612: IFFALSE 80636
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80614: LD_VAR 0 5
80618: PUSH
80619: LD_INT 1
80621: ARRAY
80622: PPUSH
80623: LD_VAR 0 5
80627: PUSH
80628: LD_INT 2
80630: ARRAY
80631: PPUSH
80632: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80636: LD_ADDR_EXP 115
80640: PUSH
80641: LD_EXP 115
80645: PPUSH
80646: LD_VAR 0 4
80650: PPUSH
80651: LD_EXP 115
80655: PUSH
80656: LD_VAR 0 4
80660: ARRAY
80661: PPUSH
80662: LD_VAR 0 3
80666: PPUSH
80667: CALL_OW 3
80671: PPUSH
80672: CALL_OW 1
80676: ST_TO_ADDR
// end ; end ;
80677: GO 80502
80679: POP
80680: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80681: LD_VAR 0 1
80685: PPUSH
80686: LD_EXP 115
80690: PUSH
80691: LD_VAR 0 4
80695: ARRAY
80696: PUSH
80697: LD_INT 0
80699: PLUS
80700: PPUSH
80701: CALL_OW 505
// end ;
80705: LD_VAR 0 2
80709: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80710: LD_INT 0
80712: PPUSH
80713: PPUSH
80714: PPUSH
80715: PPUSH
// if not hack in hackTanks then
80716: LD_VAR 0 1
80720: PUSH
80721: LD_EXP 114
80725: IN
80726: NOT
80727: IFFALSE 80731
// exit ;
80729: GO 80816
// index := GetElementIndex ( hackTanks , hack ) ;
80731: LD_ADDR_VAR 0 5
80735: PUSH
80736: LD_EXP 114
80740: PPUSH
80741: LD_VAR 0 1
80745: PPUSH
80746: CALL 22546 0 2
80750: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80751: LD_ADDR_VAR 0 4
80755: PUSH
80756: DOUBLE
80757: LD_INT 1
80759: DEC
80760: ST_TO_ADDR
80761: LD_EXP 115
80765: PUSH
80766: LD_VAR 0 5
80770: ARRAY
80771: PUSH
80772: FOR_TO
80773: IFFALSE 80814
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80775: LD_EXP 115
80779: PUSH
80780: LD_VAR 0 5
80784: ARRAY
80785: PUSH
80786: LD_VAR 0 4
80790: ARRAY
80791: PUSH
80792: LD_INT 1
80794: ARRAY
80795: PUSH
80796: LD_VAR 0 2
80800: EQUAL
80801: IFFALSE 80812
// KillUnit ( vehicle ) ;
80803: LD_VAR 0 2
80807: PPUSH
80808: CALL_OW 66
80812: GO 80772
80814: POP
80815: POP
// end ;
80816: LD_VAR 0 3
80820: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80821: LD_EXP 119
80825: NOT
80826: IFFALSE 80861
80828: GO 80830
80830: DISABLE
// begin initMiner := true ;
80831: LD_ADDR_EXP 119
80835: PUSH
80836: LD_INT 1
80838: ST_TO_ADDR
// minersList := [ ] ;
80839: LD_ADDR_EXP 120
80843: PUSH
80844: EMPTY
80845: ST_TO_ADDR
// minerMinesList := [ ] ;
80846: LD_ADDR_EXP 121
80850: PUSH
80851: EMPTY
80852: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
80853: LD_ADDR_EXP 122
80857: PUSH
80858: LD_INT 6
80860: ST_TO_ADDR
// end ;
80861: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
80862: LD_EXP 119
80866: IFFALSE 80897
80868: PUSH
80869: LD_EXP 121
80873: PPUSH
80874: CALL 19845 0 1
80878: IFTRUE 80896
80880: PUSH
80881: LD_INT 34
80883: PUSH
80884: LD_INT 81
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PPUSH
80891: CALL_OW 69
80895: OR
80896: AND
80897: IFFALSE 81425
80899: GO 80901
80901: DISABLE
80902: LD_INT 0
80904: PPUSH
80905: PPUSH
80906: PPUSH
80907: PPUSH
// begin enable ;
80908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80909: LD_ADDR_VAR 0 1
80913: PUSH
80914: LD_INT 34
80916: PUSH
80917: LD_INT 81
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PPUSH
80924: CALL_OW 69
80928: PUSH
80929: FOR_IN
80930: IFFALSE 81002
// begin if not i in minersList then
80932: LD_VAR 0 1
80936: PUSH
80937: LD_EXP 120
80941: IN
80942: NOT
80943: IFFALSE 81000
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80945: LD_ADDR_EXP 120
80949: PUSH
80950: LD_EXP 120
80954: PPUSH
80955: LD_EXP 120
80959: PUSH
80960: LD_INT 1
80962: PLUS
80963: PPUSH
80964: LD_VAR 0 1
80968: PPUSH
80969: CALL_OW 1
80973: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80974: LD_ADDR_EXP 121
80978: PUSH
80979: LD_EXP 121
80983: PPUSH
80984: LD_EXP 121
80988: PUSH
80989: LD_INT 1
80991: PLUS
80992: PPUSH
80993: EMPTY
80994: PPUSH
80995: CALL_OW 1
80999: ST_TO_ADDR
// end end ;
81000: GO 80929
81002: POP
81003: POP
// for i := minerMinesList downto 1 do
81004: LD_ADDR_VAR 0 1
81008: PUSH
81009: DOUBLE
81010: LD_EXP 121
81014: INC
81015: ST_TO_ADDR
81016: LD_INT 1
81018: PUSH
81019: FOR_DOWNTO
81020: IFFALSE 81423
// begin if IsLive ( minersList [ i ] ) then
81022: LD_EXP 120
81026: PUSH
81027: LD_VAR 0 1
81031: ARRAY
81032: PPUSH
81033: CALL_OW 300
81037: IFFALSE 81070
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
81039: LD_EXP 120
81043: PUSH
81044: LD_VAR 0 1
81048: ARRAY
81049: PPUSH
81050: LD_EXP 121
81054: PUSH
81055: LD_VAR 0 1
81059: ARRAY
81060: PPUSH
81061: CALL 19845 0 1
81065: PPUSH
81066: CALL_OW 505
// if not minerMinesList [ i ] then
81070: LD_EXP 121
81074: PUSH
81075: LD_VAR 0 1
81079: ARRAY
81080: NOT
81081: IFFALSE 81085
// continue ;
81083: GO 81019
// for j := minerMinesList [ i ] downto 1 do
81085: LD_ADDR_VAR 0 2
81089: PUSH
81090: DOUBLE
81091: LD_EXP 121
81095: PUSH
81096: LD_VAR 0 1
81100: ARRAY
81101: INC
81102: ST_TO_ADDR
81103: LD_INT 1
81105: PUSH
81106: FOR_DOWNTO
81107: IFFALSE 81419
// begin side := GetSide ( minersList [ i ] ) ;
81109: LD_ADDR_VAR 0 3
81113: PUSH
81114: LD_EXP 120
81118: PUSH
81119: LD_VAR 0 1
81123: ARRAY
81124: PPUSH
81125: CALL_OW 255
81129: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) then
81130: LD_EXP 120
81134: PUSH
81135: LD_VAR 0 1
81139: ARRAY
81140: PPUSH
81141: CALL_OW 301
81145: IFFALSE 81190
// begin minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81147: LD_ADDR_EXP 121
81151: PUSH
81152: LD_EXP 121
81156: PPUSH
81157: LD_VAR 0 1
81161: PPUSH
81162: LD_EXP 121
81166: PUSH
81167: LD_VAR 0 1
81171: ARRAY
81172: PPUSH
81173: LD_VAR 0 2
81177: PPUSH
81178: CALL_OW 3
81182: PPUSH
81183: CALL_OW 1
81187: ST_TO_ADDR
// continue ;
81188: GO 81106
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81190: LD_ADDR_VAR 0 4
81194: PUSH
81195: LD_EXP 121
81199: PUSH
81200: LD_VAR 0 1
81204: ARRAY
81205: PUSH
81206: LD_VAR 0 2
81210: ARRAY
81211: PUSH
81212: LD_INT 1
81214: ARRAY
81215: PPUSH
81216: LD_EXP 121
81220: PUSH
81221: LD_VAR 0 1
81225: ARRAY
81226: PUSH
81227: LD_VAR 0 2
81231: ARRAY
81232: PUSH
81233: LD_INT 2
81235: ARRAY
81236: PPUSH
81237: CALL_OW 428
81241: ST_TO_ADDR
// if not tmp then
81242: LD_VAR 0 4
81246: NOT
81247: IFFALSE 81251
// continue ;
81249: GO 81106
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81251: LD_VAR 0 4
81255: PUSH
81256: LD_INT 81
81258: PUSH
81259: LD_VAR 0 3
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PPUSH
81268: CALL_OW 69
81272: IN
81273: IFFALSE 81323
81275: PUSH
81276: LD_EXP 121
81280: PUSH
81281: LD_VAR 0 1
81285: ARRAY
81286: PUSH
81287: LD_VAR 0 2
81291: ARRAY
81292: PUSH
81293: LD_INT 1
81295: ARRAY
81296: PPUSH
81297: LD_EXP 121
81301: PUSH
81302: LD_VAR 0 1
81306: ARRAY
81307: PUSH
81308: LD_VAR 0 2
81312: ARRAY
81313: PUSH
81314: LD_INT 2
81316: ARRAY
81317: PPUSH
81318: CALL_OW 458
81322: AND
81323: IFFALSE 81417
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81325: LD_EXP 121
81329: PUSH
81330: LD_VAR 0 1
81334: ARRAY
81335: PUSH
81336: LD_VAR 0 2
81340: ARRAY
81341: PUSH
81342: LD_INT 1
81344: ARRAY
81345: PPUSH
81346: LD_EXP 121
81350: PUSH
81351: LD_VAR 0 1
81355: ARRAY
81356: PUSH
81357: LD_VAR 0 2
81361: ARRAY
81362: PUSH
81363: LD_INT 2
81365: ARRAY
81366: PPUSH
81367: LD_VAR 0 3
81371: PPUSH
81372: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81376: LD_ADDR_EXP 121
81380: PUSH
81381: LD_EXP 121
81385: PPUSH
81386: LD_VAR 0 1
81390: PPUSH
81391: LD_EXP 121
81395: PUSH
81396: LD_VAR 0 1
81400: ARRAY
81401: PPUSH
81402: LD_VAR 0 2
81406: PPUSH
81407: CALL_OW 3
81411: PPUSH
81412: CALL_OW 1
81416: ST_TO_ADDR
// end ; end ;
81417: GO 81106
81419: POP
81420: POP
// end ;
81421: GO 81019
81423: POP
81424: POP
// end ;
81425: PPOPN 4
81427: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
81428: LD_INT 0
81430: PPUSH
81431: PPUSH
81432: PPUSH
81433: PPUSH
// result := false ;
81434: LD_ADDR_VAR 0 4
81438: PUSH
81439: LD_INT 0
81441: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81442: LD_VAR 0 1
81446: PPUSH
81447: CALL_OW 264
81451: PUSH
81452: LD_INT 81
81454: EQUAL
81455: NOT
81456: IFFALSE 81460
// exit ;
81458: GO 81830
// side := GetSide ( unit ) ;
81460: LD_ADDR_VAR 0 6
81464: PUSH
81465: LD_VAR 0 1
81469: PPUSH
81470: CALL_OW 255
81474: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
81475: LD_ADDR_VAR 0 5
81479: PUSH
81480: LD_EXP 120
81484: PPUSH
81485: LD_VAR 0 1
81489: PPUSH
81490: CALL 22546 0 2
81494: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81495: LD_EXP 121
81499: PUSH
81500: LD_VAR 0 5
81504: ARRAY
81505: PUSH
81506: LD_EXP 122
81510: GREATEREQUAL
81511: IFFALSE 81515
// exit ;
81513: GO 81830
// ComMoveXY ( unit , x , y ) ;
81515: LD_VAR 0 1
81519: PPUSH
81520: LD_VAR 0 2
81524: PPUSH
81525: LD_VAR 0 3
81529: PPUSH
81530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81534: LD_INT 35
81536: PPUSH
81537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81541: LD_VAR 0 1
81545: PPUSH
81546: LD_VAR 0 2
81550: PPUSH
81551: LD_VAR 0 3
81555: PPUSH
81556: CALL 54592 0 3
81560: NOT
81561: IFFALSE 81574
81563: PUSH
81564: LD_VAR 0 1
81568: PPUSH
81569: CALL_OW 314
81573: AND
81574: IFFALSE 81578
// exit ;
81576: GO 81830
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81578: LD_VAR 0 2
81582: PPUSH
81583: LD_VAR 0 3
81587: PPUSH
81588: CALL_OW 428
81592: PUSH
81593: LD_VAR 0 1
81597: EQUAL
81598: IFFALSE 81612
81600: PUSH
81601: LD_VAR 0 1
81605: PPUSH
81606: CALL_OW 314
81610: NOT
81611: AND
81612: IFFALSE 81534
// if MineAtPos ( x , y ) then
81614: LD_VAR 0 2
81618: PPUSH
81619: LD_VAR 0 3
81623: PPUSH
81624: CALL_OW 458
81628: IFFALSE 81632
// exit ;
81630: GO 81830
// if your_side = side then
81632: LD_OWVAR 2
81636: PUSH
81637: LD_VAR 0 6
81641: EQUAL
81642: IFFALSE 81661
// PlaySoundXY ( x , y , PlantMine ) ;
81644: LD_VAR 0 2
81648: PPUSH
81649: LD_VAR 0 3
81653: PPUSH
81654: LD_STRING PlantMine
81656: PPUSH
81657: CALL_OW 366
// repeat wait ( 1 ) ;
81661: LD_INT 1
81663: PPUSH
81664: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
81668: LD_VAR 0 2
81672: PPUSH
81673: LD_VAR 0 3
81677: PPUSH
81678: LD_VAR 0 6
81682: PPUSH
81683: LD_INT 0
81685: PPUSH
81686: CALL_OW 454
81690: IFFALSE 81661
// if MineAtPos ( x , y ) then
81692: LD_VAR 0 2
81696: PPUSH
81697: LD_VAR 0 3
81701: PPUSH
81702: CALL_OW 458
81706: IFFALSE 81822
// begin for i in minerMinesList [ index ] do
81708: LD_ADDR_VAR 0 7
81712: PUSH
81713: LD_EXP 121
81717: PUSH
81718: LD_VAR 0 5
81722: ARRAY
81723: PUSH
81724: FOR_IN
81725: IFFALSE 81767
// if i [ 1 ] = x and i [ 2 ] = y then
81727: LD_VAR 0 7
81731: PUSH
81732: LD_INT 1
81734: ARRAY
81735: PUSH
81736: LD_VAR 0 2
81740: EQUAL
81741: IFFALSE 81759
81743: PUSH
81744: LD_VAR 0 7
81748: PUSH
81749: LD_INT 2
81751: ARRAY
81752: PUSH
81753: LD_VAR 0 3
81757: EQUAL
81758: AND
81759: IFFALSE 81765
// exit ;
81761: POP
81762: POP
81763: GO 81830
81765: GO 81724
81767: POP
81768: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81769: LD_ADDR_EXP 121
81773: PUSH
81774: LD_EXP 121
81778: PPUSH
81779: LD_VAR 0 5
81783: PUSH
81784: LD_EXP 121
81788: PUSH
81789: LD_VAR 0 5
81793: ARRAY
81794: PUSH
81795: LD_INT 1
81797: PLUS
81798: PUSH
81799: EMPTY
81800: LIST
81801: LIST
81802: PPUSH
81803: LD_VAR 0 2
81807: PUSH
81808: LD_VAR 0 3
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PPUSH
81817: CALL 22763 0 3
81821: ST_TO_ADDR
// end ; result := true ;
81822: LD_ADDR_VAR 0 4
81826: PUSH
81827: LD_INT 1
81829: ST_TO_ADDR
// end ;
81830: LD_VAR 0 4
81834: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81835: LD_INT 0
81837: PPUSH
81838: PPUSH
81839: PPUSH
// if not unit in minersList then
81840: LD_VAR 0 1
81844: PUSH
81845: LD_EXP 120
81849: IN
81850: NOT
81851: IFFALSE 81855
// exit ;
81853: GO 82062
// index := GetElementIndex ( minersList , unit ) ;
81855: LD_ADDR_VAR 0 6
81859: PUSH
81860: LD_EXP 120
81864: PPUSH
81865: LD_VAR 0 1
81869: PPUSH
81870: CALL 22546 0 2
81874: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81875: LD_ADDR_VAR 0 5
81879: PUSH
81880: DOUBLE
81881: LD_EXP 121
81885: PUSH
81886: LD_VAR 0 6
81890: ARRAY
81891: INC
81892: ST_TO_ADDR
81893: LD_INT 1
81895: PUSH
81896: FOR_DOWNTO
81897: IFFALSE 82060
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81899: LD_EXP 121
81903: PUSH
81904: LD_VAR 0 6
81908: ARRAY
81909: PUSH
81910: LD_VAR 0 5
81914: ARRAY
81915: PUSH
81916: LD_INT 1
81918: ARRAY
81919: PPUSH
81920: LD_EXP 121
81924: PUSH
81925: LD_VAR 0 6
81929: ARRAY
81930: PUSH
81931: LD_VAR 0 5
81935: ARRAY
81936: PUSH
81937: LD_INT 2
81939: ARRAY
81940: PPUSH
81941: LD_VAR 0 2
81945: PPUSH
81946: LD_VAR 0 3
81950: PPUSH
81951: CALL_OW 298
81955: PUSH
81956: LD_INT 6
81958: LESS
81959: IFFALSE 82058
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81961: LD_EXP 121
81965: PUSH
81966: LD_VAR 0 6
81970: ARRAY
81971: PUSH
81972: LD_VAR 0 5
81976: ARRAY
81977: PUSH
81978: LD_INT 1
81980: ARRAY
81981: PPUSH
81982: LD_EXP 121
81986: PUSH
81987: LD_VAR 0 6
81991: ARRAY
81992: PUSH
81993: LD_VAR 0 5
81997: ARRAY
81998: PUSH
81999: LD_INT 2
82001: ARRAY
82002: PPUSH
82003: LD_VAR 0 1
82007: PPUSH
82008: CALL_OW 255
82012: PPUSH
82013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82017: LD_ADDR_EXP 121
82021: PUSH
82022: LD_EXP 121
82026: PPUSH
82027: LD_VAR 0 6
82031: PPUSH
82032: LD_EXP 121
82036: PUSH
82037: LD_VAR 0 6
82041: ARRAY
82042: PPUSH
82043: LD_VAR 0 5
82047: PPUSH
82048: CALL_OW 3
82052: PPUSH
82053: CALL_OW 1
82057: ST_TO_ADDR
// end ; end ;
82058: GO 81896
82060: POP
82061: POP
// end ;
82062: LD_VAR 0 4
82066: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82067: LD_INT 0
82069: PPUSH
82070: PPUSH
82071: PPUSH
82072: PPUSH
82073: PPUSH
82074: PPUSH
82075: PPUSH
82076: PPUSH
82077: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82078: LD_VAR 0 1
82082: PPUSH
82083: CALL_OW 264
82087: PUSH
82088: LD_INT 81
82090: EQUAL
82091: NOT
82092: IFTRUE 82107
82094: PUSH
82095: LD_VAR 0 1
82099: PUSH
82100: LD_EXP 120
82104: IN
82105: NOT
82106: OR
82107: IFFALSE 82111
// exit ;
82109: GO 82437
// index := GetElementIndex ( minersList , unit ) ;
82111: LD_ADDR_VAR 0 6
82115: PUSH
82116: LD_EXP 120
82120: PPUSH
82121: LD_VAR 0 1
82125: PPUSH
82126: CALL 22546 0 2
82130: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82131: LD_ADDR_VAR 0 8
82135: PUSH
82136: LD_EXP 122
82140: PUSH
82141: LD_EXP 121
82145: PUSH
82146: LD_VAR 0 6
82150: ARRAY
82151: MINUS
82152: ST_TO_ADDR
// if not minesFreeAmount then
82153: LD_VAR 0 8
82157: NOT
82158: IFFALSE 82162
// exit ;
82160: GO 82437
// tmp := [ ] ;
82162: LD_ADDR_VAR 0 7
82166: PUSH
82167: EMPTY
82168: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82169: LD_ADDR_VAR 0 5
82173: PUSH
82174: DOUBLE
82175: LD_INT 1
82177: DEC
82178: ST_TO_ADDR
82179: LD_VAR 0 8
82183: PUSH
82184: FOR_TO
82185: IFFALSE 82384
// begin _d := rand ( 0 , 5 ) ;
82187: LD_ADDR_VAR 0 11
82191: PUSH
82192: LD_INT 0
82194: PPUSH
82195: LD_INT 5
82197: PPUSH
82198: CALL_OW 12
82202: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82203: LD_ADDR_VAR 0 12
82207: PUSH
82208: LD_INT 2
82210: PPUSH
82211: LD_INT 6
82213: PPUSH
82214: CALL_OW 12
82218: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82219: LD_ADDR_VAR 0 9
82223: PUSH
82224: LD_VAR 0 2
82228: PPUSH
82229: LD_VAR 0 11
82233: PPUSH
82234: LD_VAR 0 12
82238: PPUSH
82239: CALL_OW 272
82243: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82244: LD_ADDR_VAR 0 10
82248: PUSH
82249: LD_VAR 0 3
82253: PPUSH
82254: LD_VAR 0 11
82258: PPUSH
82259: LD_VAR 0 12
82263: PPUSH
82264: CALL_OW 273
82268: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82269: LD_VAR 0 9
82273: PPUSH
82274: LD_VAR 0 10
82278: PPUSH
82279: CALL_OW 488
82283: IFFALSE 82307
82285: PUSH
82286: LD_VAR 0 9
82290: PUSH
82291: LD_VAR 0 10
82295: PUSH
82296: EMPTY
82297: LIST
82298: LIST
82299: PUSH
82300: LD_VAR 0 7
82304: IN
82305: NOT
82306: AND
82307: IFFALSE 82326
82309: PUSH
82310: LD_VAR 0 9
82314: PPUSH
82315: LD_VAR 0 10
82319: PPUSH
82320: CALL_OW 458
82324: NOT
82325: AND
82326: IFFALSE 82368
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82328: LD_ADDR_VAR 0 7
82332: PUSH
82333: LD_VAR 0 7
82337: PPUSH
82338: LD_VAR 0 7
82342: PUSH
82343: LD_INT 1
82345: PLUS
82346: PPUSH
82347: LD_VAR 0 9
82351: PUSH
82352: LD_VAR 0 10
82356: PUSH
82357: EMPTY
82358: LIST
82359: LIST
82360: PPUSH
82361: CALL_OW 1
82365: ST_TO_ADDR
82366: GO 82382
// i := i - 1 ;
82368: LD_ADDR_VAR 0 5
82372: PUSH
82373: LD_VAR 0 5
82377: PUSH
82378: LD_INT 1
82380: MINUS
82381: ST_TO_ADDR
// end ;
82382: GO 82184
82384: POP
82385: POP
// for i in tmp do
82386: LD_ADDR_VAR 0 5
82390: PUSH
82391: LD_VAR 0 7
82395: PUSH
82396: FOR_IN
82397: IFFALSE 82435
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82399: LD_VAR 0 1
82403: PPUSH
82404: LD_VAR 0 5
82408: PUSH
82409: LD_INT 1
82411: ARRAY
82412: PPUSH
82413: LD_VAR 0 5
82417: PUSH
82418: LD_INT 2
82420: ARRAY
82421: PPUSH
82422: CALL 81428 0 3
82426: NOT
82427: IFFALSE 82433
// exit ;
82429: POP
82430: POP
82431: GO 82437
82433: GO 82396
82435: POP
82436: POP
// end ;
82437: LD_VAR 0 4
82441: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
82442: LD_INT 0
82444: PPUSH
82445: PPUSH
82446: PPUSH
82447: PPUSH
82448: PPUSH
82449: PPUSH
82450: PPUSH
82451: PPUSH
82452: PPUSH
// if GetClass ( unit ) <> class_sniper then
82453: LD_VAR 0 1
82457: PPUSH
82458: CALL_OW 257
82462: PUSH
82463: LD_INT 5
82465: NONEQUAL
82466: IFFALSE 82470
// exit ;
82468: GO 82940
// dist := 8 ;
82470: LD_ADDR_VAR 0 5
82474: PUSH
82475: LD_INT 8
82477: ST_TO_ADDR
// viewRange := 12 ;
82478: LD_ADDR_VAR 0 8
82482: PUSH
82483: LD_INT 12
82485: ST_TO_ADDR
// side := GetSide ( unit ) ;
82486: LD_ADDR_VAR 0 6
82490: PUSH
82491: LD_VAR 0 1
82495: PPUSH
82496: CALL_OW 255
82500: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82501: LD_INT 61
82503: PPUSH
82504: LD_VAR 0 6
82508: PPUSH
82509: CALL_OW 321
82513: PUSH
82514: LD_INT 2
82516: EQUAL
82517: IFFALSE 82527
// viewRange := 16 ;
82519: LD_ADDR_VAR 0 8
82523: PUSH
82524: LD_INT 16
82526: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82527: LD_VAR 0 1
82531: PPUSH
82532: LD_VAR 0 2
82536: PPUSH
82537: LD_VAR 0 3
82541: PPUSH
82542: CALL_OW 297
82546: PUSH
82547: LD_VAR 0 5
82551: GREATER
82552: IFFALSE 82631
// begin ComMoveXY ( unit , x , y ) ;
82554: LD_VAR 0 1
82558: PPUSH
82559: LD_VAR 0 2
82563: PPUSH
82564: LD_VAR 0 3
82568: PPUSH
82569: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82573: LD_INT 35
82575: PPUSH
82576: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82580: LD_VAR 0 1
82584: PPUSH
82585: LD_VAR 0 2
82589: PPUSH
82590: LD_VAR 0 3
82594: PPUSH
82595: CALL 54592 0 3
82599: NOT
82600: IFFALSE 82604
// exit ;
82602: GO 82940
// until GetDistUnitXY ( unit , x , y ) < dist ;
82604: LD_VAR 0 1
82608: PPUSH
82609: LD_VAR 0 2
82613: PPUSH
82614: LD_VAR 0 3
82618: PPUSH
82619: CALL_OW 297
82623: PUSH
82624: LD_VAR 0 5
82628: LESS
82629: IFFALSE 82573
// end ; ComTurnXY ( unit , x , y ) ;
82631: LD_VAR 0 1
82635: PPUSH
82636: LD_VAR 0 2
82640: PPUSH
82641: LD_VAR 0 3
82645: PPUSH
82646: CALL_OW 118
// repeat if Multiplayer then
82650: LD_OWVAR 4
82654: IFFALSE 82665
// wait ( 35 ) else
82656: LD_INT 35
82658: PPUSH
82659: CALL_OW 67
82663: GO 82672
// wait ( 5 ) ;
82665: LD_INT 5
82667: PPUSH
82668: CALL_OW 67
// _d := GetDir ( unit ) ;
82672: LD_ADDR_VAR 0 11
82676: PUSH
82677: LD_VAR 0 1
82681: PPUSH
82682: CALL_OW 254
82686: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
82687: LD_ADDR_VAR 0 7
82691: PUSH
82692: LD_VAR 0 1
82696: PPUSH
82697: CALL_OW 250
82701: PPUSH
82702: LD_VAR 0 1
82706: PPUSH
82707: CALL_OW 251
82711: PPUSH
82712: LD_VAR 0 2
82716: PPUSH
82717: LD_VAR 0 3
82721: PPUSH
82722: CALL 57228 0 4
82726: ST_TO_ADDR
// until dir = _d ;
82727: LD_VAR 0 7
82731: PUSH
82732: LD_VAR 0 11
82736: EQUAL
82737: IFFALSE 82650
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
82739: LD_ADDR_VAR 0 9
82743: PUSH
82744: LD_VAR 0 1
82748: PPUSH
82749: CALL_OW 250
82753: PPUSH
82754: LD_VAR 0 7
82758: PPUSH
82759: LD_VAR 0 5
82763: PPUSH
82764: CALL_OW 272
82768: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
82769: LD_ADDR_VAR 0 10
82773: PUSH
82774: LD_VAR 0 1
82778: PPUSH
82779: CALL_OW 251
82783: PPUSH
82784: LD_VAR 0 7
82788: PPUSH
82789: LD_VAR 0 5
82793: PPUSH
82794: CALL_OW 273
82798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82799: LD_VAR 0 9
82803: PPUSH
82804: LD_VAR 0 10
82808: PPUSH
82809: CALL_OW 488
82813: NOT
82814: IFFALSE 82818
// exit ;
82816: GO 82940
// ComAnimCustom ( unit , 1 ) ;
82818: LD_VAR 0 1
82822: PPUSH
82823: LD_INT 1
82825: PPUSH
82826: CALL_OW 592
// p := 0 ;
82830: LD_ADDR_VAR 0 12
82834: PUSH
82835: LD_INT 0
82837: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82838: LD_VAR 0 9
82842: PPUSH
82843: LD_VAR 0 10
82847: PPUSH
82848: LD_VAR 0 6
82852: PPUSH
82853: LD_VAR 0 8
82857: PPUSH
82858: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
82862: LD_INT 35
82864: PPUSH
82865: CALL_OW 67
// p := Inc ( p ) ;
82869: LD_ADDR_VAR 0 12
82873: PUSH
82874: LD_VAR 0 12
82878: PPUSH
82879: CALL 57184 0 1
82883: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
82884: LD_VAR 0 12
82888: PUSH
82889: LD_INT 3
82891: EQUAL
82892: IFTRUE 82906
82894: PUSH
82895: LD_VAR 0 1
82899: PPUSH
82900: CALL_OW 302
82904: NOT
82905: OR
82906: IFTRUE 82919
82908: PUSH
82909: LD_VAR 0 1
82913: PPUSH
82914: CALL_OW 301
82918: OR
82919: IFFALSE 82862
// RemoveSeeing ( _x , _y , side ) ;
82921: LD_VAR 0 9
82925: PPUSH
82926: LD_VAR 0 10
82930: PPUSH
82931: LD_VAR 0 6
82935: PPUSH
82936: CALL_OW 331
// end ;
82940: LD_VAR 0 4
82944: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
82945: LD_INT 0
82947: PPUSH
82948: PPUSH
82949: PPUSH
82950: PPUSH
82951: PPUSH
82952: PPUSH
82953: PPUSH
82954: PPUSH
82955: PPUSH
82956: PPUSH
82957: PPUSH
// if not unit then
82958: LD_VAR 0 1
82962: NOT
82963: IFFALSE 82967
// exit ;
82965: GO 83238
// side := GetSide ( unit ) ;
82967: LD_ADDR_VAR 0 3
82971: PUSH
82972: LD_VAR 0 1
82976: PPUSH
82977: CALL_OW 255
82981: ST_TO_ADDR
// x := GetX ( unit ) ;
82982: LD_ADDR_VAR 0 5
82986: PUSH
82987: LD_VAR 0 1
82991: PPUSH
82992: CALL_OW 250
82996: ST_TO_ADDR
// y := GetY ( unit ) ;
82997: LD_ADDR_VAR 0 6
83001: PUSH
83002: LD_VAR 0 1
83006: PPUSH
83007: CALL_OW 251
83011: ST_TO_ADDR
// r := 8 ;
83012: LD_ADDR_VAR 0 4
83016: PUSH
83017: LD_INT 8
83019: ST_TO_ADDR
// if x - r < 0 then
83020: LD_VAR 0 5
83024: PUSH
83025: LD_VAR 0 4
83029: MINUS
83030: PUSH
83031: LD_INT 0
83033: LESS
83034: IFFALSE 83046
// min_x := 0 else
83036: LD_ADDR_VAR 0 7
83040: PUSH
83041: LD_INT 0
83043: ST_TO_ADDR
83044: GO 83062
// min_x := x - r ;
83046: LD_ADDR_VAR 0 7
83050: PUSH
83051: LD_VAR 0 5
83055: PUSH
83056: LD_VAR 0 4
83060: MINUS
83061: ST_TO_ADDR
// if y - r < 0 then
83062: LD_VAR 0 6
83066: PUSH
83067: LD_VAR 0 4
83071: MINUS
83072: PUSH
83073: LD_INT 0
83075: LESS
83076: IFFALSE 83088
// min_y := 0 else
83078: LD_ADDR_VAR 0 8
83082: PUSH
83083: LD_INT 0
83085: ST_TO_ADDR
83086: GO 83104
// min_y := y - r ;
83088: LD_ADDR_VAR 0 8
83092: PUSH
83093: LD_VAR 0 6
83097: PUSH
83098: LD_VAR 0 4
83102: MINUS
83103: ST_TO_ADDR
// max_x := x + r ;
83104: LD_ADDR_VAR 0 9
83108: PUSH
83109: LD_VAR 0 5
83113: PUSH
83114: LD_VAR 0 4
83118: PLUS
83119: ST_TO_ADDR
// max_y := y + r ;
83120: LD_ADDR_VAR 0 10
83124: PUSH
83125: LD_VAR 0 6
83129: PUSH
83130: LD_VAR 0 4
83134: PLUS
83135: ST_TO_ADDR
// for _x = min_x to max_x do
83136: LD_ADDR_VAR 0 11
83140: PUSH
83141: DOUBLE
83142: LD_VAR 0 7
83146: DEC
83147: ST_TO_ADDR
83148: LD_VAR 0 9
83152: PUSH
83153: FOR_TO
83154: IFFALSE 83236
// for _y = min_y to max_y do
83156: LD_ADDR_VAR 0 12
83160: PUSH
83161: DOUBLE
83162: LD_VAR 0 8
83166: DEC
83167: ST_TO_ADDR
83168: LD_VAR 0 10
83172: PUSH
83173: FOR_TO
83174: IFFALSE 83232
// begin if not ValidHex ( _x , _y ) then
83176: LD_VAR 0 11
83180: PPUSH
83181: LD_VAR 0 12
83185: PPUSH
83186: CALL_OW 488
83190: NOT
83191: IFFALSE 83195
// continue ;
83193: GO 83173
// if MineAtPos ( _x , _y ) then
83195: LD_VAR 0 11
83199: PPUSH
83200: LD_VAR 0 12
83204: PPUSH
83205: CALL_OW 458
83209: IFFALSE 83230
// ViewMineAtPos ( _x , _y , side ) ;
83211: LD_VAR 0 11
83215: PPUSH
83216: LD_VAR 0 12
83220: PPUSH
83221: LD_VAR 0 3
83225: PPUSH
83226: CALL_OW 457
// end ;
83230: GO 83173
83232: POP
83233: POP
83234: GO 83153
83236: POP
83237: POP
// end ;
83238: LD_VAR 0 2
83242: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
83243: LD_INT 0
83245: PPUSH
83246: PPUSH
83247: PPUSH
83248: PPUSH
83249: PPUSH
83250: PPUSH
// if not units then
83251: LD_VAR 0 1
83255: NOT
83256: IFFALSE 83260
// exit ;
83258: GO 83690
// scaners := [ ] ;
83260: LD_ADDR_VAR 0 6
83264: PUSH
83265: EMPTY
83266: ST_TO_ADDR
// for i in units do
83267: LD_ADDR_VAR 0 3
83271: PUSH
83272: LD_VAR 0 1
83276: PUSH
83277: FOR_IN
83278: IFFALSE 83435
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
83280: LD_VAR 0 3
83284: PPUSH
83285: CALL_OW 264
83289: PUSH
83290: LD_INT 11
83292: NONEQUAL
83293: IFTRUE 83307
83295: PUSH
83296: LD_VAR 0 3
83300: PPUSH
83301: CALL_OW 302
83305: NOT
83306: OR
83307: IFTRUE 83324
83309: PUSH
83310: LD_VAR 0 3
83314: PPUSH
83315: CALL_OW 110
83319: PUSH
83320: LD_INT 502
83322: EQUAL
83323: OR
83324: IFFALSE 83328
// continue ;
83326: GO 83277
// ComStop ( i ) ;
83328: LD_VAR 0 3
83332: PPUSH
83333: CALL_OW 141
// x := GetX ( i ) ;
83337: LD_ADDR_VAR 0 4
83341: PUSH
83342: LD_VAR 0 3
83346: PPUSH
83347: CALL_OW 250
83351: ST_TO_ADDR
// y := GetY ( i ) ;
83352: LD_ADDR_VAR 0 5
83356: PUSH
83357: LD_VAR 0 3
83361: PPUSH
83362: CALL_OW 251
83366: ST_TO_ADDR
// if GetSide ( i ) = your_side then
83367: LD_VAR 0 3
83371: PPUSH
83372: CALL_OW 255
83376: PUSH
83377: LD_OWVAR 2
83381: EQUAL
83382: IFFALSE 83401
// PlaySoundXY ( x , y , mineDetector ) ;
83384: LD_VAR 0 4
83388: PPUSH
83389: LD_VAR 0 5
83393: PPUSH
83394: LD_STRING mineDetector
83396: PPUSH
83397: CALL_OW 366
// scaners := Join ( scaners , i ) ;
83401: LD_ADDR_VAR 0 6
83405: PUSH
83406: LD_VAR 0 6
83410: PPUSH
83411: LD_VAR 0 3
83415: PPUSH
83416: CALL 55811 0 2
83420: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
83421: LD_VAR 0 3
83425: PPUSH
83426: LD_INT 502
83428: PPUSH
83429: CALL_OW 109
// end ;
83433: GO 83277
83435: POP
83436: POP
// if not scaners then
83437: LD_VAR 0 6
83441: NOT
83442: IFFALSE 83446
// exit ;
83444: GO 83690
// wait ( 3 ) ;
83446: LD_INT 3
83448: PPUSH
83449: CALL_OW 67
// timer := 6 ;
83453: LD_ADDR_VAR 0 7
83457: PUSH
83458: LD_INT 6
83460: ST_TO_ADDR
// repeat for i in scaners do
83461: LD_ADDR_VAR 0 3
83465: PUSH
83466: LD_VAR 0 6
83470: PUSH
83471: FOR_IN
83472: IFFALSE 83588
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
83474: LD_VAR 0 3
83478: PPUSH
83479: CALL_OW 302
83483: NOT
83484: IFTRUE 83497
83486: PUSH
83487: LD_VAR 0 3
83491: PPUSH
83492: CALL_OW 314
83496: OR
83497: IFTRUE 83528
83499: PUSH
83500: LD_VAR 0 3
83504: PPUSH
83505: CALL_OW 263
83509: PUSH
83510: LD_INT 1
83512: EQUAL
83513: IFFALSE 83527
83515: PUSH
83516: LD_VAR 0 3
83520: PPUSH
83521: CALL_OW 311
83525: NOT
83526: AND
83527: OR
83528: IFFALSE 83572
// begin SetUnitDisplayNumber ( i , 0 ) ;
83530: LD_VAR 0 3
83534: PPUSH
83535: LD_INT 0
83537: PPUSH
83538: CALL_OW 505
// SetTag ( i , 0 ) ;
83542: LD_VAR 0 3
83546: PPUSH
83547: LD_INT 0
83549: PPUSH
83550: CALL_OW 109
// scaners := scaners diff i ;
83554: LD_ADDR_VAR 0 6
83558: PUSH
83559: LD_VAR 0 6
83563: PUSH
83564: LD_VAR 0 3
83568: DIFF
83569: ST_TO_ADDR
// continue ;
83570: GO 83471
// end ; SetUnitDisplayNumber ( i , timer ) ;
83572: LD_VAR 0 3
83576: PPUSH
83577: LD_VAR 0 7
83581: PPUSH
83582: CALL_OW 505
// end ;
83586: GO 83471
83588: POP
83589: POP
// if not scaners then
83590: LD_VAR 0 6
83594: NOT
83595: IFFALSE 83599
// exit ;
83597: GO 83690
// timer := Dec ( timer ) ;
83599: LD_ADDR_VAR 0 7
83603: PUSH
83604: LD_VAR 0 7
83608: PPUSH
83609: CALL 57206 0 1
83613: ST_TO_ADDR
// wait ( 0 0$1 ) ;
83614: LD_INT 35
83616: PPUSH
83617: CALL_OW 67
// until timer = 0 ;
83621: LD_VAR 0 7
83625: PUSH
83626: LD_INT 0
83628: EQUAL
83629: IFFALSE 83461
// if not scaners then
83631: LD_VAR 0 6
83635: NOT
83636: IFFALSE 83640
// exit ;
83638: GO 83690
// for i in scaners do
83640: LD_ADDR_VAR 0 3
83644: PUSH
83645: LD_VAR 0 6
83649: PUSH
83650: FOR_IN
83651: IFFALSE 83688
// begin SetUnitDisplayNumber ( i , 0 ) ;
83653: LD_VAR 0 3
83657: PPUSH
83658: LD_INT 0
83660: PPUSH
83661: CALL_OW 505
// SetTag ( i , 0 ) ;
83665: LD_VAR 0 3
83669: PPUSH
83670: LD_INT 0
83672: PPUSH
83673: CALL_OW 109
// RevealDetectorMine ( i ) ;
83677: LD_VAR 0 3
83681: PPUSH
83682: CALL 82945 0 1
// end ;
83686: GO 83650
83688: POP
83689: POP
// end ;
83690: LD_VAR 0 2
83694: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
83695: LD_INT 0
83697: PPUSH
// if p1 = mine_detector_mode then
83698: LD_VAR 0 2
83702: PUSH
83703: LD_INT 103
83705: EQUAL
83706: IFFALSE 83717
// DetectMine ( units ) ;
83708: LD_VAR 0 1
83712: PPUSH
83713: CALL 83243 0 1
// end ; end_of_file
83717: LD_VAR 0 7
83721: RET
