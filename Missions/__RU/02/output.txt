// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 65 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 52509 0 9
// PrepareRussian ;
  43: CALL 395 0 0
// Action ;
  47: CALL 6204 0 0
// if debug then
  51: LD_EXP 1
  55: IFFALSE 64
// FogOff ( 3 ) ;
  57: LD_INT 3
  59: PPUSH
  60: CALL_OW 344
// end ;
  64: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  76: LD_ADDR_EXP 2
  80: PUSH
  81: LD_STRING 01_
  83: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  84: LD_ADDR_EXP 3
  88: PUSH
  89: LD_STRING 02_
  91: ST_TO_ADDR
// beriaVisited := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kurinDontWannaTalk := false ;
 100: LD_ADDR_EXP 5
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// kirovHasTank := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// blockNorth := true ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// hasLab := false ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasWorkshop := false ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// hasToBuildTank := false ;
 140: LD_ADDR_EXP 11
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// hasTank := false ;
 148: LD_ADDR_EXP 12
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 156: LD_ADDR_EXP 8
 160: PUSH
 161: LD_INT 60
 163: ST_TO_ADDR
// allianceAttacked := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// hasAllTanks := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// vehCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// vehCaptured := false ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// americanTrap := false ;
 196: LD_ADDR_EXP 17
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// belkovTrapped := false ;
 204: LD_ADDR_EXP 18
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// belkovDied := false ;
 212: LD_ADDR_EXP 19
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// belkovSaved := false ;
 220: LD_ADDR_EXP 28
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// westOutpostDiscovered := false ;
 228: LD_ADDR_EXP 20
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 236: LD_ADDR_EXP 21
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// westOutpostDestroyed := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 252: LD_ADDR_EXP 23
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 260: LD_ADDR_EXP 24
 264: PUSH
 265: LD_INT 0
 267: ST_TO_ADDR
// reinforcementsGained := false ;
 268: LD_ADDR_EXP 25
 272: PUSH
 273: LD_INT 0
 275: ST_TO_ADDR
// allMapPointsSpotted := false ;
 276: LD_ADDR_EXP 26
 280: PUSH
 281: LD_INT 0
 283: ST_TO_ADDR
// mapSpotCounter := 0 ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 292: LD_ADDR_EXP 29
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 300: LD_ADDR_EXP 30
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// initiative := false ;
 308: LD_ADDR_EXP 31
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// belkovBrother := false ;
 316: LD_ADDR_EXP 32
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 324: LD_ADDR_EXP 33
 328: PUSH
 329: LD_INT 1
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 1
 336: RET
// every 0 0$1 trigger vehCounter >= 5 do
 337: LD_EXP 15
 341: PUSH
 342: LD_INT 5
 344: GREATEREQUAL
 345: IFFALSE 357
 347: GO 349
 349: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 350: LD_STRING ACH_WORKSHOP
 352: PPUSH
 353: CALL_OW 543
 357: END
// every 0 0$1 trigger vehCaptured do
 358: LD_EXP 16
 362: IFFALSE 374
 364: GO 366
 366: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 367: LD_STRING ACH_RETAKE
 369: PPUSH
 370: CALL_OW 543
 374: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 375: LD_INT 193
 377: PPUSH
 378: CALL_OW 301
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 387: LD_STRING ACH_DEPOT
 389: PPUSH
 390: CALL_OW 543
 394: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un , additional ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// uc_side := 6 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 6
 410: ST_TO_ADDR
// uc_nation := 3 ;
 411: LD_ADDR_OWVAR 21
 415: PUSH
 416: LD_INT 3
 418: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 419: LD_INT 71
 421: PPUSH
 422: LD_STRING kirov
 424: PPUSH
 425: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 429: LD_ADDR_EXP 38
 433: PUSH
 434: LD_STRING Kurin
 436: PPUSH
 437: CALL_OW 25
 441: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 442: LD_EXP 38
 446: PPUSH
 447: LD_INT 117
 449: PPUSH
 450: LD_INT 108
 452: PPUSH
 453: LD_INT 0
 455: PPUSH
 456: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 460: LD_EXP 38
 464: PPUSH
 465: LD_INT 2
 467: PPUSH
 468: CALL 59180 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 472: LD_ADDR_EXP 39
 476: PUSH
 477: LD_STRING Kovalyuk
 479: PPUSH
 480: CALL_OW 25
 484: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 485: LD_EXP 39
 489: PPUSH
 490: LD_INT 71
 492: PPUSH
 493: CALL_OW 52
// additional := ( 3 - Count ( CreateCharacterSet ( 01_belkovTeam ) ) ) ;
 497: LD_ADDR_VAR 0 6
 501: PUSH
 502: LD_INT 3
 504: PUSH
 505: LD_STRING 01_belkovTeam
 507: PPUSH
 508: CALL_OW 31
 512: PPUSH
 513: CALL 19882 0 1
 517: MINUS
 518: ST_TO_ADDR
// if additional < 0 then
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 0
 526: LESS
 527: IFFALSE 537
// additional := 0 ;
 529: LD_ADDR_VAR 0 6
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// tmp := [ [ ru2_arm1 , class_soldier , 2 + additional ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: LD_INT 95
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_VAR 0 6
 555: PLUS
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 209
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 83
 578: PUSH
 579: LD_INT 4
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 71
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 71
 606: PUSH
 607: LD_INT 3
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// InitHC_All ( ) ;
 625: CALL_OW 584
// belkovBrother := false ;
 629: LD_ADDR_EXP 32
 633: PUSH
 634: LD_INT 0
 636: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 637: LD_EXP 2
 641: PUSH
 642: LD_STRING Belkov
 644: STR
 645: PPUSH
 646: CALL_OW 28
 650: NOT
 651: IFFALSE 660
 653: PUSH
 654: LD_EXP 1
 658: NOT
 659: AND
 660: IFFALSE 697
// begin Belkov := NewCharacter ( Belkov2 ) ;
 662: LD_ADDR_EXP 36
 666: PUSH
 667: LD_STRING Belkov2
 669: PPUSH
 670: CALL_OW 25
 674: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 675: LD_EXP 36
 679: PPUSH
 680: LD_INT 71
 682: PPUSH
 683: CALL_OW 52
// belkovBrother := true ;
 687: LD_ADDR_EXP 32
 691: PUSH
 692: LD_INT 1
 694: ST_TO_ADDR
// end else
 695: GO 763
// begin un := NewCharacter ( Belkov2 ) ;
 697: LD_ADDR_VAR 0 5
 701: PUSH
 702: LD_STRING Belkov2
 704: PPUSH
 705: CALL_OW 25
 709: ST_TO_ADDR
// SetTag ( un , tBelkov ) ;
 710: LD_VAR 0 5
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 109
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 722: LD_ADDR_EXP 43
 726: PUSH
 727: LD_EXP 43
 731: PPUSH
 732: LD_EXP 43
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_VAR 0 5
 745: PPUSH
 746: CALL_OW 1
 750: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 751: LD_VAR 0 5
 755: PPUSH
 756: LD_INT 209
 758: PPUSH
 759: CALL_OW 52
// end ; for i in tmp do
 763: LD_ADDR_VAR 0 2
 767: PUSH
 768: LD_VAR 0 4
 772: PUSH
 773: FOR_IN
 774: IFFALSE 880
// for j := 1 to i [ 3 ] do
 776: LD_ADDR_VAR 0 3
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 3
 793: ARRAY
 794: PUSH
 795: FOR_TO
 796: IFFALSE 876
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_VAR 0 2
 805: PUSH
 806: LD_INT 2
 808: ARRAY
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 380
// un := CreateHuman ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 827: LD_VAR 0 5
 831: PPUSH
 832: LD_VAR 0 2
 836: PUSH
 837: LD_INT 1
 839: ARRAY
 840: PPUSH
 841: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 845: LD_ADDR_EXP 43
 849: PUSH
 850: LD_EXP 43
 854: PPUSH
 855: LD_EXP 43
 859: PUSH
 860: LD_INT 1
 862: PLUS
 863: PPUSH
 864: LD_VAR 0 5
 868: PPUSH
 869: CALL_OW 1
 873: ST_TO_ADDR
// end ;
 874: GO 795
 876: POP
 877: POP
 878: GO 773
 880: POP
 881: POP
// SetBName ( beria , beria ) ;
 882: LD_INT 106
 884: PPUSH
 885: LD_STRING beria
 887: PPUSH
 888: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 892: LD_ADDR_EXP 40
 896: PUSH
 897: LD_STRING Platonov
 899: PPUSH
 900: CALL_OW 25
 904: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 905: LD_EXP 40
 909: PPUSH
 910: LD_INT 66
 912: PPUSH
 913: LD_INT 99
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 923: LD_EXP 40
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL 59180 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 935: LD_ADDR_EXP 41
 939: PUSH
 940: LD_STRING Kuklajs
 942: PPUSH
 943: CALL_OW 25
 947: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 948: LD_ADDR_EXP 42
 952: PUSH
 953: LD_STRING Benko
 955: PPUSH
 956: CALL_OW 25
 960: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 961: LD_EXP 41
 965: PPUSH
 966: LD_INT 76
 968: PPUSH
 969: LD_INT 99
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 979: LD_EXP 42
 983: PPUSH
 984: LD_INT 68
 986: PPUSH
 987: LD_INT 88
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 997: LD_EXP 41
1001: PUSH
1002: LD_EXP 42
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
1015: LD_ADDR_EXP 44
1019: PUSH
1020: LD_EXP 44
1024: PPUSH
1025: LD_EXP 44
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: PPUSH
1034: LD_EXP 41
1038: PPUSH
1039: CALL_OW 1
1043: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
1044: LD_ADDR_EXP 44
1048: PUSH
1049: LD_EXP 44
1053: PPUSH
1054: LD_EXP 44
1058: PUSH
1059: LD_INT 1
1061: PLUS
1062: PPUSH
1063: LD_EXP 42
1067: PPUSH
1068: CALL_OW 1
1072: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
1073: LD_ADDR_VAR 0 4
1077: PUSH
1078: LD_INT 63
1080: PUSH
1081: LD_INT 86
1083: PUSH
1084: LD_INT 0
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 74
1094: PUSH
1095: LD_INT 94
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 77
1108: PUSH
1109: LD_INT 103
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: ST_TO_ADDR
// for i in tmp do
1125: LD_ADDR_VAR 0 2
1129: PUSH
1130: LD_VAR 0 4
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1263
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// un := CreateHuman ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1182: LD_VAR 0 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 3
1194: ARRAY
1195: PPUSH
1196: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 2
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PPUSH
1223: CALL_OW 428
1227: PPUSH
1228: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1232: LD_ADDR_EXP 44
1236: PUSH
1237: LD_EXP 44
1241: PPUSH
1242: LD_EXP 44
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 1
1260: ST_TO_ADDR
// end ;
1261: GO 1135
1263: POP
1264: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1265: LD_EXP 2
1269: PUSH
1270: LD_STRING Gnyevko
1272: STR
1273: PPUSH
1274: CALL_OW 28
1278: NOT
1279: IFFALSE 1288
1281: PUSH
1282: LD_EXP 1
1286: NOT
1287: AND
1288: IFFALSE 1315
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 2
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1303: CALL_OW 44
1307: PPUSH
1308: LD_INT 106
1310: PPUSH
1311: CALL_OW 52
// end ; end ;
1315: LD_VAR 0 1
1319: RET
// export function PrepareBurlak ; var i ; begin
1320: LD_INT 0
1322: PPUSH
1323: PPUSH
// uc_side := 3 ;
1324: LD_ADDR_OWVAR 20
1328: PUSH
1329: LD_INT 3
1331: ST_TO_ADDR
// uc_nation := 3 ;
1332: LD_ADDR_OWVAR 21
1336: PUSH
1337: LD_INT 3
1339: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1340: LD_ADDR_EXP 34
1344: PUSH
1345: LD_STRING Burlak
1347: PPUSH
1348: LD_EXP 1
1352: NOT
1353: PPUSH
1354: LD_EXP 2
1358: PPUSH
1359: CALL 17658 0 3
1363: ST_TO_ADDR
// uc_side := 6 ;
1364: LD_ADDR_OWVAR 20
1368: PUSH
1369: LD_INT 6
1371: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1372: LD_ADDR_EXP 35
1376: PUSH
1377: LD_STRING Gnyevko
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 17658 0 3
1395: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1396: LD_ADDR_EXP 37
1400: PUSH
1401: LD_STRING Kirilenkova
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 17658 0 3
1419: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1420: LD_ADDR_EXP 36
1424: PUSH
1425: LD_STRING Belkov
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 17658 0 3
1443: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_belkovTeam ) ;
1444: LD_ADDR_EXP 45
1448: PUSH
1449: LD_STRING 01_belkovTeam
1451: PPUSH
1452: CALL_OW 31
1456: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1457: LD_ADDR_VAR 0 1
1461: PUSH
1462: LD_EXP 34
1466: PUSH
1467: LD_EXP 35
1471: PUSH
1472: LD_EXP 37
1476: PUSH
1477: LD_EXP 36
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_EXP 45
1492: UNION
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 1
1498: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1499: LD_EXP 4
1503: IFFALSE 1521
1505: PUSH
1506: LD_INT 47
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: CALL_OW 321
1516: PUSH
1517: LD_INT 2
1519: EQUAL
1520: AND
1521: IFFALSE 1748
1523: GO 1525
1525: DISABLE
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1530: LD_ADDR_VAR 0 1
1534: PUSH
1535: LD_EXP 43
1539: PPUSH
1540: LD_INT 25
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 72
1554: ST_TO_ADDR
// if not tmp then
1555: LD_VAR 0 1
1559: NOT
1560: IFFALSE 1564
// exit ;
1562: GO 1748
// wait ( 0 0$5 ) ;
1564: LD_INT 175
1566: PPUSH
1567: CALL_OW 67
// ComExit ( tmp ) ;
1571: LD_VAR 0 1
1575: PPUSH
1576: CALL 56256 0 1
// for i := 1 to 2 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 2
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1637
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 71
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1611: LD_VAR 0 1
1615: PPUSH
1616: LD_INT 121
1618: PPUSH
1619: LD_INT 111
1621: PPUSH
1622: CALL_OW 171
// AddComUnload ( tmp ) ;
1626: LD_VAR 0 1
1630: PPUSH
1631: CALL_OW 219
// end ;
1635: GO 1593
1637: POP
1638: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1639: LD_VAR 0 1
1643: PPUSH
1644: LD_INT 2
1646: PPUSH
1647: LD_INT 113
1649: PPUSH
1650: LD_INT 113
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1660: LD_INT 83
1662: PPUSH
1663: LD_INT 46
1665: PPUSH
1666: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1670: LD_INT 83
1672: PPUSH
1673: LD_INT 47
1675: PPUSH
1676: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1680: LD_INT 83
1682: PPUSH
1683: LD_INT 48
1685: PPUSH
1686: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1690: LD_VAR 0 1
1694: PPUSH
1695: LD_INT 26
1697: PPUSH
1698: LD_INT 116
1700: PPUSH
1701: LD_INT 98
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1711: LD_INT 35
1713: PPUSH
1714: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_INT 60
1725: PUSH
1726: EMPTY
1727: LIST
1728: PPUSH
1729: CALL_OW 72
1733: NOT
1734: IFFALSE 1711
// ComEnterUnit ( tmp , kirov ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_INT 71
1743: PPUSH
1744: CALL_OW 120
// end ;
1748: PPOPN 2
1750: END
// export function BelkovAttackScript ; var i , un , brother , belkovTank , mech , tmp , fuel ; begin
1751: LD_INT 0
1753: PPUSH
1754: PPUSH
1755: PPUSH
1756: PPUSH
1757: PPUSH
1758: PPUSH
1759: PPUSH
1760: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1761: LD_ADDR_VAR 0 5
1765: PUSH
1766: LD_INT 22
1768: PUSH
1769: LD_INT 6
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 21
1778: PUSH
1779: LD_INT 2
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PPUSH
1790: CALL_OW 69
1794: ST_TO_ADDR
// if not belkovTank then
1795: LD_VAR 0 5
1799: NOT
1800: IFFALSE 1893
// begin uc_side := 6 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 6
1809: ST_TO_ADDR
// uc_nation := 3 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 3
1817: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1818: LD_INT 21
1820: PPUSH
1821: LD_INT 1
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 42
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 22678 0 5
// belkovTank := CreateVehicle ;
1837: LD_ADDR_VAR 0 5
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1859: LD_VAR 0 5
1863: PPUSH
1864: LD_INT 127
1866: PPUSH
1867: LD_INT 118
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1877: LD_EXP 36
1881: PPUSH
1882: LD_VAR 0 5
1886: PPUSH
1887: CALL_OW 120
// end else
1891: GO 1907
// begin belkovTank := belkovTank [ 1 ] ;
1893: LD_ADDR_VAR 0 5
1897: PUSH
1898: LD_VAR 0 5
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1907: LD_VAR 0 5
1911: PPUSH
1912: LD_INT 71
1914: PPUSH
1915: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1919: LD_VAR 0 5
1923: PPUSH
1924: LD_INT 71
1926: PPUSH
1927: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1931: LD_VAR 0 5
1935: PPUSH
1936: CALL_OW 256
1940: PUSH
1941: LD_INT 1000
1943: LESS
1944: IFFALSE 2057
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_EXP 43
1955: PPUSH
1956: LD_INT 25
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: ST_TO_ADDR
// if not mech then
1971: LD_VAR 0 6
1975: NOT
1976: IFFALSE 1992
// SetLives ( belkovTank , 1000 ) else
1978: LD_VAR 0 5
1982: PPUSH
1983: LD_INT 1000
1985: PPUSH
1986: CALL_OW 234
1990: GO 2057
// begin ComExit ( mech ) ;
1992: LD_VAR 0 6
1996: PPUSH
1997: CALL 56256 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
2001: LD_VAR 0 6
2005: PPUSH
2006: LD_VAR 0 5
2010: PPUSH
2011: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2015: LD_VAR 0 6
2019: PPUSH
2020: LD_INT 22
2022: PUSH
2023: LD_INT 6
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 69
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
2057: LD_INT 70
2059: PPUSH
2060: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
2064: LD_VAR 0 5
2068: PPUSH
2069: CALL_OW 256
2073: PUSH
2074: LD_INT 1000
2076: EQUAL
2077: IFFALSE 2057
// if mech then
2079: LD_VAR 0 6
2083: IFFALSE 2127
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2085: LD_VAR 0 6
2089: PPUSH
2090: LD_INT 22
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 69
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2127: LD_EXP 36
2131: PPUSH
2132: LD_INT 107
2134: PPUSH
2135: LD_INT 104
2137: PPUSH
2138: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2142: LD_EXP 36
2146: PPUSH
2147: LD_INT 95
2149: PPUSH
2150: LD_INT 101
2152: PPUSH
2153: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2157: LD_EXP 36
2161: PPUSH
2162: LD_INT 89
2164: PPUSH
2165: LD_INT 100
2167: PPUSH
2168: CALL_OW 171
// wait ( 0 0$2 ) ;
2172: LD_INT 70
2174: PPUSH
2175: CALL_OW 67
// brother := FilterAllUnits ( [ [ f_side , 6 ] , [ f_tag , tBelkov ] , [ f_class , class_soldier ] ] ) ;
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 6
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 120
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 25
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PPUSH
2219: CALL_OW 69
2223: ST_TO_ADDR
// if brother then
2224: LD_VAR 0 4
2228: IFFALSE 2271
// if not brother [ 1 ] in belkovTeam then
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: ARRAY
2238: PUSH
2239: LD_EXP 45
2243: IN
2244: NOT
2245: IFFALSE 2271
// belkovTeam := Join ( belkovTeam , brother [ 1 ] ) ;
2247: LD_ADDR_EXP 45
2251: PUSH
2252: LD_EXP 45
2256: PPUSH
2257: LD_VAR 0 4
2261: PUSH
2262: LD_INT 1
2264: ARRAY
2265: PPUSH
2266: CALL 55858 0 2
2270: ST_TO_ADDR
// if belkovTeam < 3 then
2271: LD_EXP 45
2275: PUSH
2276: LD_INT 3
2278: LESS
2279: IFFALSE 2364
// begin for i := belkovTeam to 3 do
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: DOUBLE
2287: LD_EXP 45
2291: DEC
2292: ST_TO_ADDR
2293: LD_INT 3
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2362
// begin un := kirovBaseSquad [ 1 ] ;
2299: LD_ADDR_VAR 0 3
2303: PUSH
2304: LD_EXP 43
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
2313: LD_ADDR_EXP 43
2317: PUSH
2318: LD_EXP 43
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: CALL_OW 3
2330: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
2331: LD_ADDR_EXP 45
2335: PUSH
2336: LD_EXP 45
2340: PPUSH
2341: LD_EXP 45
2345: PUSH
2346: LD_INT 1
2348: PLUS
2349: PPUSH
2350: LD_VAR 0 3
2354: PPUSH
2355: CALL_OW 1
2359: ST_TO_ADDR
// end ;
2360: GO 2296
2362: POP
2363: POP
// end ; if Kirilenkova then
2364: LD_EXP 37
2368: IFFALSE 2392
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
2370: LD_ADDR_EXP 45
2374: PUSH
2375: LD_EXP 45
2379: PPUSH
2380: LD_EXP 37
2384: PPUSH
2385: CALL 55858 0 2
2389: ST_TO_ADDR
2390: GO 2431
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
2392: LD_ADDR_EXP 45
2396: PUSH
2397: LD_EXP 45
2401: PPUSH
2402: LD_EXP 43
2406: PPUSH
2407: LD_INT 25
2409: PUSH
2410: LD_INT 4
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 72
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL 55858 0 2
2430: ST_TO_ADDR
// for i in belkovTeam do
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_EXP 45
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2470
// begin ComExit ( i ) ;
2444: LD_VAR 0 2
2448: PPUSH
2449: CALL 56256 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 89
2460: PPUSH
2461: LD_INT 100
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2441
2470: POP
2471: POP
// tmp := Belkov union belkovTeam ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_EXP 36
2481: PUSH
2482: LD_EXP 45
2486: UNION
2487: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2488: LD_INT 35
2490: PPUSH
2491: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2495: LD_VAR 0 7
2499: PPUSH
2500: LD_INT 60
2502: PUSH
2503: EMPTY
2504: LIST
2505: PPUSH
2506: CALL_OW 72
2510: NOT
2511: IFFALSE 2488
// ComMoveXY ( tmp , 71 , 65 ) ;
2513: LD_VAR 0 7
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: LD_INT 65
2523: PPUSH
2524: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2528: LD_VAR 0 7
2532: PPUSH
2533: LD_INT 61
2535: PPUSH
2536: LD_INT 37
2538: PPUSH
2539: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2543: LD_VAR 0 7
2547: PPUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 17
2553: PPUSH
2554: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2558: LD_VAR 0 7
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2570: LD_EXP 36
2574: PPUSH
2575: LD_INT 63
2577: PPUSH
2578: LD_INT 8
2580: PPUSH
2581: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2585: LD_EXP 36
2589: PPUSH
2590: LD_INT 105
2592: PPUSH
2593: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2597: LD_EXP 36
2601: PPUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 37
2607: PPUSH
2608: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2612: LD_EXP 36
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2624: LD_VAR 0 7
2628: PPUSH
2629: LD_INT 88
2631: PPUSH
2632: LD_INT 29
2634: PPUSH
2635: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2639: LD_INT 35
2641: PPUSH
2642: CALL_OW 67
// for i in tmp do
2646: LD_ADDR_VAR 0 2
2650: PUSH
2651: LD_VAR 0 7
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2688
// if not HasTask ( i ) then
2659: LD_VAR 0 2
2663: PPUSH
2664: CALL_OW 314
2668: NOT
2669: IFFALSE 2686
// AddComMoveXY ( tmp , 88 , 29 ) ;
2671: LD_VAR 0 7
2675: PPUSH
2676: LD_INT 88
2678: PPUSH
2679: LD_INT 29
2681: PPUSH
2682: CALL_OW 171
2686: GO 2656
2688: POP
2689: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2690: LD_VAR 0 7
2694: PPUSH
2695: LD_INT 95
2697: PUSH
2698: LD_INT 6
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PPUSH
2705: CALL_OW 72
2709: IFFALSE 2803
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_VAR 0 7
2720: PPUSH
2721: LD_INT 95
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 72
2735: PUSH
2736: FOR_IN
2737: IFFALSE 2801
// begin if i = Belkov then
2739: LD_VAR 0 2
2743: PUSH
2744: LD_EXP 36
2748: EQUAL
2749: IFFALSE 2790
// begin belkovTank := IsInUnit ( Belkov ) ;
2751: LD_ADDR_VAR 0 5
2755: PUSH
2756: LD_EXP 36
2760: PPUSH
2761: CALL_OW 310
2765: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2766: LD_ADDR_VAR 0 8
2770: PUSH
2771: LD_VAR 0 5
2775: PPUSH
2776: CALL_OW 261
2780: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2781: LD_VAR 0 5
2785: PPUSH
2786: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: CALL_OW 64
// end ;
2799: GO 2736
2801: POP
2802: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2803: LD_VAR 0 7
2807: PPUSH
2808: LD_INT 52
2810: PUSH
2811: EMPTY
2812: LIST
2813: PPUSH
2814: CALL_OW 72
2818: NOT
2819: IFFALSE 2639
// wait ( 1 1$20 ) ;
2821: LD_INT 2800
2823: PPUSH
2824: CALL_OW 67
// if fuel < 50 then
2828: LD_VAR 0 8
2832: PUSH
2833: LD_INT 50
2835: LESS
2836: IFFALSE 2846
// fuel := 50 ;
2838: LD_ADDR_VAR 0 8
2842: PUSH
2843: LD_INT 50
2845: ST_TO_ADDR
// uc_side := 6 ;
2846: LD_ADDR_OWVAR 20
2850: PUSH
2851: LD_INT 6
2853: ST_TO_ADDR
// uc_nation := 3 ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_INT 3
2861: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2862: LD_INT 21
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 42
2873: PPUSH
2874: LD_VAR 0 8
2878: PUSH
2879: LD_INT 5
2881: MINUS
2882: PPUSH
2883: CALL 22678 0 5
// belkovTank := CreateVehicle ;
2887: LD_ADDR_VAR 0 5
2891: PUSH
2892: CALL_OW 45
2896: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2897: LD_VAR 0 5
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2909: LD_VAR 0 5
2913: PPUSH
2914: LD_INT 60
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2927: LD_EXP 36
2931: PPUSH
2932: LD_VAR 0 5
2936: PPUSH
2937: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2941: LD_EXP 36
2945: PPUSH
2946: LD_INT 72
2948: PPUSH
2949: LD_INT 26
2951: PPUSH
2952: CALL_OW 111
// wait ( 0 0$2 ) ;
2956: LD_INT 70
2958: PPUSH
2959: CALL_OW 67
// for i in belkovTeam do
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_EXP 45
2972: PUSH
2973: FOR_IN
2974: IFFALSE 3018
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_INT 60
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_INT 65
3001: PPUSH
3002: LD_INT 18
3004: PPUSH
3005: CALL_OW 111
// wait ( 0 0$0.8 ) ;
3009: LD_INT 28
3011: PPUSH
3012: CALL_OW 67
// end ;
3016: GO 2973
3018: POP
3019: POP
// repeat wait ( 0 0$1 ) ;
3020: LD_INT 35
3022: PPUSH
3023: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
3027: LD_EXP 14
3031: IFFALSE 3051
3033: PUSH
3034: LD_EXP 45
3038: PPUSH
3039: LD_INT 60
3041: PUSH
3042: EMPTY
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: NOT
3050: AND
3051: IFFALSE 3020
// americanTrap := true ;
3053: LD_ADDR_EXP 17
3057: PUSH
3058: LD_INT 1
3060: ST_TO_ADDR
// end ;
3061: LD_VAR 0 1
3065: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
3066: LD_EXP 4
3070: IFFALSE 3083
3072: PUSH
3073: LD_EXP 40
3077: PPUSH
3078: CALL_OW 302
3082: AND
3083: IFFALSE 3407
3085: GO 3087
3087: DISABLE
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
3095: LD_EXP 8
3099: PUSH
3100: LD_INT 0
3102: GREATER
3103: IFFALSE 3117
3105: PUSH
3106: LD_EXP 40
3110: PPUSH
3111: CALL_OW 314
3115: NOT
3116: AND
3117: IFFALSE 3288
// begin dir := rand ( 0 , 5 ) ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_INT 0
3126: PPUSH
3127: LD_INT 5
3129: PPUSH
3130: CALL_OW 12
3134: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_EXP 40
3144: PPUSH
3145: CALL_OW 250
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_INT 5
3157: PPUSH
3158: CALL_OW 272
3162: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 40
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: LD_INT 5
3185: PPUSH
3186: CALL_OW 273
3190: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
3191: LD_VAR 0 1
3195: PPUSH
3196: LD_VAR 0 2
3200: PPUSH
3201: CALL_OW 488
3205: IFFALSE 3230
3207: PUSH
3208: LD_INT 106
3210: PPUSH
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: CALL_OW 297
3225: PUSH
3226: LD_INT 26
3228: LESS
3229: AND
3230: IFFALSE 3253
// AddComMoveXY ( Platonov , x , y ) else
3232: LD_EXP 40
3236: PPUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 2
3246: PPUSH
3247: CALL_OW 171
3251: GO 3268
// AddComMoveXY ( Platonov , 64 , 96 ) ;
3253: LD_EXP 40
3257: PPUSH
3258: LD_INT 64
3260: PPUSH
3261: LD_INT 96
3263: PPUSH
3264: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
3268: LD_EXP 40
3272: PPUSH
3273: LD_INT 105
3275: PPUSH
3276: LD_INT 315
3278: PPUSH
3279: CALL_OW 12
3283: PPUSH
3284: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: LESSEQUAL
3296: IFFALSE 3342
// begin if not IsAt ( Platonov , 64 , 96 ) then
3298: LD_EXP 40
3302: PPUSH
3303: LD_INT 64
3305: PPUSH
3306: LD_INT 96
3308: PPUSH
3309: CALL_OW 307
3313: NOT
3314: IFFALSE 3340
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
3316: LD_EXP 40
3320: PPUSH
3321: LD_INT 64
3323: PPUSH
3324: LD_INT 96
3326: PPUSH
3327: CALL_OW 111
// AddComHold ( Platonov ) ;
3331: LD_EXP 40
3335: PPUSH
3336: CALL_OW 200
// end ; end else
3340: GO 3407
// if tick mod 0 0$75 = 0 0$00 then
3342: LD_OWVAR 1
3346: PUSH
3347: LD_INT 2625
3349: MOD
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3407
// begin amount := rand ( 2 , 5 ) ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 5
3366: PPUSH
3367: CALL_OW 12
3371: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3372: LD_ADDR_EXP 8
3376: PUSH
3377: LD_EXP 8
3381: PUSH
3382: LD_VAR 0 3
3386: PUSH
3387: LD_INT 10
3389: MUL
3390: MINUS
3391: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_INT 5
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 55
// end ; end ;
3407: PPOPN 4
3409: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3410: LD_INT 106
3412: PPUSH
3413: CALL_OW 274
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 275
3425: PUSH
3426: LD_INT 30
3428: LESS
3429: IFFALSE 3641
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: LD_EXP 43
3447: PPUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 60
3453: PUSH
3454: EMPTY
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 72
3479: ST_TO_ADDR
// if not eng then
3480: LD_VAR 0 2
3484: NOT
3485: IFFALSE 3489
// exit ;
3487: GO 3641
// ComExit ( eng ) ;
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL 56256 0 1
// i := 5 ;
3498: LD_ADDR_VAR 0 1
3502: PUSH
3503: LD_INT 5
3505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3506: LD_INT 35
3508: PPUSH
3509: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 60
3520: PUSH
3521: EMPTY
3522: LIST
3523: PPUSH
3524: CALL_OW 72
3528: NOT
3529: IFFALSE 3537
3531: PUSH
3532: LD_VAR 0 2
3536: AND
3537: IFFALSE 3607
// begin ComTransport ( eng , kirov , mat_oil ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_INT 71
3546: PPUSH
3547: LD_INT 2
3549: PPUSH
3550: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3554: LD_VAR 0 2
3558: PPUSH
3559: LD_INT 67
3561: PPUSH
3562: LD_INT 99
3564: PPUSH
3565: CALL_OW 171
// AddComUnload ( eng ) ;
3569: LD_VAR 0 2
3573: PPUSH
3574: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3578: LD_VAR 0 2
3582: PPUSH
3583: LD_INT 107
3585: PPUSH
3586: LD_INT 104
3588: PPUSH
3589: CALL_OW 171
// i := i - 1 ;
3593: LD_ADDR_VAR 0 1
3597: PUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 1
3605: MINUS
3606: ST_TO_ADDR
// end ; until i = 0 ;
3607: LD_VAR 0 1
3611: PUSH
3612: LD_INT 0
3614: EQUAL
3615: IFFALSE 3506
// AddComMoveUnit ( eng , kirov ) ;
3617: LD_VAR 0 2
3621: PPUSH
3622: LD_INT 71
3624: PPUSH
3625: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_INT 71
3636: PPUSH
3637: CALL_OW 180
// end ;
3641: PPOPN 2
3643: END
// export function SendReinforcements ; var i ; begin
3644: LD_INT 0
3646: PPUSH
3647: PPUSH
// reinforcementsGained := true ;
3648: LD_ADDR_EXP 25
3652: PUSH
3653: LD_INT 1
3655: ST_TO_ADDR
// for i := 1 to 2 do
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: DOUBLE
3662: LD_INT 1
3664: DEC
3665: ST_TO_ADDR
3666: LD_INT 2
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3752
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3672: LD_EXP 44
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: PPUSH
3683: CALL 56256 0 1
3687: IFFALSE 3696
// wait ( 0 0$0.3 ) ;
3689: LD_INT 10
3691: PPUSH
3692: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3696: LD_EXP 44
3700: PUSH
3701: LD_VAR 0 2
3705: ARRAY
3706: PPUSH
3707: LD_INT 75
3709: PPUSH
3710: LD_INT 84
3712: PPUSH
3713: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3717: LD_EXP 44
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PPUSH
3728: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3732: LD_EXP 44
3736: PUSH
3737: LD_VAR 0 2
3741: ARRAY
3742: PPUSH
3743: LD_INT 3
3745: PPUSH
3746: CALL_OW 235
// end ;
3750: GO 3669
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 1
3758: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3759: LD_EXP 21
3763: IFFALSE 3771
3765: PUSH
3766: LD_EXP 18
3770: AND
3771: IFFALSE 3794
3773: PUSH
3774: LD_EXP 43
3778: PPUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 3
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 72
3793: AND
3794: IFFALSE 3951
3796: GO 3798
3798: DISABLE
3799: LD_INT 0
3801: PPUSH
3802: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3803: LD_ADDR_VAR 0 1
3807: PUSH
3808: LD_EXP 43
3812: PPUSH
3813: LD_INT 25
3815: PUSH
3816: LD_INT 3
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PPUSH
3823: CALL_OW 72
3827: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 30
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not fac then
3862: LD_VAR 0 2
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 3951
// fac := fac [ 1 ] ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 2
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3885: LD_VAR 0 2
3889: PPUSH
3890: CALL_OW 313
3894: PUSH
3895: LD_INT 0
3897: EQUAL
3898: IFFALSE 3930
// begin ComExit ( mech ) ;
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL 56256 0 1
// wait ( 3 ) ;
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_VAR 0 2
3925: PPUSH
3926: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3930: LD_VAR 0 2
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 1
3943: PPUSH
3944: LD_INT 42
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: PPOPN 2
3953: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
3958: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3959: LD_VAR 0 1
3963: PPUSH
3964: LD_INT 90
3966: PPUSH
3967: LD_INT 100
3969: PPUSH
3970: CALL_OW 111
// wait ( 0 0$10 ) ;
3974: LD_INT 350
3976: PPUSH
3977: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3981: LD_VAR 0 1
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3993: LD_INT 35
3995: PPUSH
3996: CALL_OW 67
// tag := GetTag ( vehicle ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 110
4014: ST_TO_ADDR
// if tag = 0 then
4015: LD_VAR 0 4
4019: PUSH
4020: LD_INT 0
4022: EQUAL
4023: IFFALSE 4094
// begin if not HasTask ( vehicle ) then
4025: LD_VAR 0 1
4029: PPUSH
4030: CALL_OW 314
4034: NOT
4035: IFFALSE 4052
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
4037: LD_VAR 0 1
4041: PPUSH
4042: LD_INT 83
4044: PPUSH
4045: LD_INT 68
4047: PPUSH
4048: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 256
4061: PUSH
4062: LD_INT 750
4064: LESS
4065: IFFALSE 4094
// begin SetTag ( vehicle , 1 ) ;
4067: LD_VAR 0 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
4079: LD_VAR 0 1
4083: PPUSH
4084: LD_INT 93
4086: PPUSH
4087: LD_INT 102
4089: PPUSH
4090: CALL_OW 111
// end ; end ; if tag = 1 then
4094: LD_VAR 0 4
4098: PUSH
4099: LD_INT 1
4101: EQUAL
4102: IFFALSE 4194
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
4104: LD_VAR 0 1
4108: PPUSH
4109: LD_INT 113
4111: PPUSH
4112: LD_INT 106
4114: PPUSH
4115: CALL_OW 307
4119: NOT
4120: IFFALSE 4134
4122: PUSH
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 314
4132: NOT
4133: AND
4134: IFFALSE 4151
// ComMoveXY ( vehicle , 113 , 106 ) ;
4136: LD_VAR 0 1
4140: PPUSH
4141: LD_INT 113
4143: PPUSH
4144: LD_INT 106
4146: PPUSH
4147: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
4151: LD_VAR 0 1
4155: PPUSH
4156: LD_INT 113
4158: PPUSH
4159: LD_INT 106
4161: PPUSH
4162: CALL_OW 307
4166: IFFALSE 4194
// begin SetTag ( vehicle , 2 ) ;
4168: LD_VAR 0 1
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 311
4189: PPUSH
4190: CALL 57572 0 1
// end ; end ; if tag = 2 then
4194: LD_VAR 0 4
4198: PUSH
4199: LD_INT 2
4201: EQUAL
4202: IFFALSE 4268
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 256
4213: PUSH
4214: LD_INT 1000
4216: EQUAL
4217: IFFALSE 4230
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 311
4229: AND
4230: IFFALSE 4268
// begin ComMoveUnit ( vehicle , kirov ) ;
4232: LD_VAR 0 1
4236: PPUSH
4237: LD_INT 71
4239: PPUSH
4240: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_INT 71
4251: PPUSH
4252: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
4256: LD_VAR 0 1
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 301
4277: IFTRUE 4285
4279: PUSH
4280: LD_EXP 23
4284: OR
4285: IFFALSE 3993
// if eastOutpostDestroyed then
4287: LD_EXP 23
4291: IFFALSE 4308
// ComMoveXY ( vehicle , 111 , 105 ) ;
4293: LD_VAR 0 1
4297: PPUSH
4298: LD_INT 111
4300: PPUSH
4301: LD_INT 105
4303: PPUSH
4304: CALL_OW 111
// end ; end_of_file
4308: LD_VAR 0 2
4312: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
4317: PPUSH
4318: PPUSH
// uc_side := 1 ;
4319: LD_ADDR_OWVAR 20
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// uc_nation := 1 ;
4327: LD_ADDR_OWVAR 21
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// usWestForces := [ ] ;
4335: LD_ADDR_EXP 46
4339: PUSH
4340: EMPTY
4341: ST_TO_ADDR
// usEastForces := [ ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: EMPTY
4348: ST_TO_ADDR
// bc_type := b_depot ;
4349: LD_ADDR_OWVAR 42
4353: PUSH
4354: LD_INT 0
4356: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4357: LD_ADDR_OWVAR 43
4361: PUSH
4362: LD_OWVAR 67
4366: PUSH
4367: LD_INT 1
4369: MINUS
4370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4371: LD_INT 48
4373: PPUSH
4374: LD_INT 54
4376: PPUSH
4377: LD_INT 2
4379: PPUSH
4380: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4384: LD_ADDR_VAR 0 4
4388: PUSH
4389: LD_INT 55
4391: PUSH
4392: LD_INT 55
4394: PUSH
4395: LD_INT 4
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 59
4405: PUSH
4406: LD_INT 61
4408: PUSH
4409: LD_INT 4
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// if Difficulty > 1 then
4421: LD_OWVAR 67
4425: PUSH
4426: LD_INT 1
4428: GREATER
4429: IFFALSE 4465
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 4
4445: PPUSH
4446: LD_INT 46
4448: PUSH
4449: LD_INT 64
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 2
4464: ST_TO_ADDR
// if Difficulty > 2 then
4465: LD_OWVAR 67
4469: PUSH
4470: LD_INT 2
4472: GREATER
4473: IFFALSE 4509
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4475: LD_ADDR_VAR 0 4
4479: PUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 4
4489: PPUSH
4490: LD_INT 36
4492: PUSH
4493: LD_INT 48
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 2
4508: ST_TO_ADDR
// bc_type := b_breastwork ;
4509: LD_ADDR_OWVAR 42
4513: PUSH
4514: LD_INT 31
4516: ST_TO_ADDR
// InitHC_All ( ) ;
4517: CALL_OW 584
// for i in tmp do
4521: LD_ADDR_VAR 0 2
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: FOR_IN
4532: IFFALSE 4676
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 2
4550: ARRAY
4551: PPUSH
4552: LD_VAR 0 2
4556: PUSH
4557: LD_INT 3
4559: ARRAY
4560: PPUSH
4561: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4565: LD_INT 0
4567: PPUSH
4568: LD_OWVAR 67
4572: PPUSH
4573: CALL_OW 381
// un := CreateHuman ;
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: CALL_OW 44
4586: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4587: LD_ADDR_EXP 46
4591: PUSH
4592: LD_EXP 46
4596: PPUSH
4597: LD_EXP 46
4601: PUSH
4602: LD_INT 1
4604: PLUS
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: CALL_OW 1
4615: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_VAR 0 2
4625: PUSH
4626: LD_INT 3
4628: ARRAY
4629: PUSH
4630: LD_INT 3
4632: PLUS
4633: PUSH
4634: LD_INT 6
4636: MOD
4637: PPUSH
4638: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_VAR 0 2
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: LD_VAR 0 2
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PPUSH
4665: CALL_OW 428
4669: PPUSH
4670: CALL_OW 52
// end ;
4674: GO 4531
4676: POP
4677: POP
// for i := 1 to 2 do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: DOUBLE
4684: LD_INT 1
4686: DEC
4687: ST_TO_ADDR
4688: LD_INT 2
4690: PUSH
4691: FOR_TO
4692: IFFALSE 4768
// begin PrepareEngineer ( false , Difficulty ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_OWVAR 67
4701: PPUSH
4702: CALL_OW 382
// un := CreateHuman ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: CALL_OW 44
4715: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4716: LD_ADDR_EXP 46
4720: PUSH
4721: LD_EXP 46
4725: PPUSH
4726: LD_EXP 46
4730: PUSH
4731: LD_INT 1
4733: PLUS
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: CALL_OW 1
4744: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4745: LD_VAR 0 3
4749: PPUSH
4750: LD_INT 54
4752: PPUSH
4753: LD_INT 58
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: LD_INT 0
4761: PPUSH
4762: CALL_OW 50
// end ;
4766: GO 4691
4768: POP
4769: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4770: LD_ADDR_VAR 0 4
4774: PUSH
4775: LD_INT 87
4777: PUSH
4778: LD_INT 62
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 89
4791: PUSH
4792: LD_INT 67
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: ST_TO_ADDR
// if Difficulty > 2 then
4807: LD_OWVAR 67
4811: PUSH
4812: LD_INT 2
4814: GREATER
4815: IFFALSE 4851
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4817: LD_ADDR_VAR 0 4
4821: PUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 4
4831: PPUSH
4832: LD_INT 88
4834: PUSH
4835: LD_INT 53
4837: PUSH
4838: LD_INT 2
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 2
4850: ST_TO_ADDR
// bc_type := b_breastwork ;
4851: LD_ADDR_OWVAR 42
4855: PUSH
4856: LD_INT 31
4858: ST_TO_ADDR
// for i in tmp do
4859: LD_ADDR_VAR 0 2
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: FOR_IN
4870: IFFALSE 5014
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4872: LD_VAR 0 2
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_INT 3
4897: ARRAY
4898: PPUSH
4899: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_OWVAR 67
4910: PPUSH
4911: CALL_OW 381
// un := CreateHuman ;
4915: LD_ADDR_VAR 0 3
4919: PUSH
4920: CALL_OW 44
4924: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4925: LD_ADDR_EXP 47
4929: PUSH
4930: LD_EXP 47
4934: PPUSH
4935: LD_EXP 47
4939: PUSH
4940: LD_INT 1
4942: PLUS
4943: PPUSH
4944: LD_VAR 0 3
4948: PPUSH
4949: CALL_OW 1
4953: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_VAR 0 2
4963: PUSH
4964: LD_INT 3
4966: ARRAY
4967: PUSH
4968: LD_INT 3
4970: PLUS
4971: PUSH
4972: LD_INT 6
4974: MOD
4975: PPUSH
4976: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: LD_VAR 0 2
4989: PUSH
4990: LD_INT 1
4992: ARRAY
4993: PPUSH
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: CALL_OW 428
5007: PPUSH
5008: CALL_OW 52
// end ;
5012: GO 4869
5014: POP
5015: POP
// for i := 1 to 2 do
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: DOUBLE
5022: LD_INT 1
5024: DEC
5025: ST_TO_ADDR
5026: LD_INT 2
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5106
// begin PrepareEngineer ( false , Difficulty ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_OWVAR 67
5039: PPUSH
5040: CALL_OW 382
// un := CreateHuman ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: CALL_OW 44
5053: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
5054: LD_ADDR_EXP 47
5058: PUSH
5059: LD_EXP 47
5063: PPUSH
5064: LD_EXP 47
5068: PUSH
5069: LD_INT 1
5071: PLUS
5072: PPUSH
5073: LD_VAR 0 3
5077: PPUSH
5078: CALL_OW 1
5082: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
5083: LD_VAR 0 3
5087: PPUSH
5088: LD_INT 95
5090: PPUSH
5091: LD_INT 65
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: LD_INT 0
5099: PPUSH
5100: CALL_OW 50
// end ;
5104: GO 5029
5106: POP
5107: POP
// end ;
5108: LD_VAR 0 1
5112: RET
// export function PrepareAmericanTrap ; var i , un ; begin
5113: LD_INT 0
5115: PPUSH
5116: PPUSH
5117: PPUSH
// usTrapForces := [ ] ;
5118: LD_ADDR_EXP 48
5122: PUSH
5123: EMPTY
5124: ST_TO_ADDR
// uc_side := 1 ;
5125: LD_ADDR_OWVAR 20
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// uc_nation := 1 ;
5133: LD_ADDR_OWVAR 21
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// InitHC_All ( ) ;
5141: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
5145: LD_INT 1
5147: PPUSH
5148: LD_OWVAR 67
5152: PPUSH
5153: CALL_OW 381
// un := CreateHuman ;
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: CALL_OW 44
5166: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5167: LD_ADDR_EXP 48
5171: PUSH
5172: LD_EXP 48
5176: PPUSH
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL 55858 0 2
5186: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: DOUBLE
5193: LD_INT 1
5195: DEC
5196: ST_TO_ADDR
5197: LD_INT 5
5199: PUSH
5200: LD_INT 6
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_OWVAR 67
5219: ARRAY
5220: PUSH
5221: FOR_TO
5222: IFFALSE 5268
// begin PrepareSoldier ( false , Difficulty ) ;
5224: LD_INT 0
5226: PPUSH
5227: LD_OWVAR 67
5231: PPUSH
5232: CALL_OW 381
// un := CreateHuman ;
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: CALL_OW 44
5245: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5246: LD_ADDR_EXP 48
5250: PUSH
5251: LD_EXP 48
5255: PPUSH
5256: LD_VAR 0 3
5260: PPUSH
5261: CALL 55858 0 2
5265: ST_TO_ADDR
// end ;
5266: GO 5221
5268: POP
5269: POP
// for i := 1 to 2 do
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_INT 2
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5330
// begin PrepareScientist ( false , Difficulty ) ;
5286: LD_INT 0
5288: PPUSH
5289: LD_OWVAR 67
5293: PPUSH
5294: CALL_OW 384
// un := CreateHuman ;
5298: LD_ADDR_VAR 0 3
5302: PUSH
5303: CALL_OW 44
5307: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5308: LD_ADDR_EXP 48
5312: PUSH
5313: LD_EXP 48
5317: PPUSH
5318: LD_VAR 0 3
5322: PPUSH
5323: CALL 55858 0 2
5327: ST_TO_ADDR
// end ;
5328: GO 5283
5330: POP
5331: POP
// end ;
5332: LD_VAR 0 1
5336: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
5337: LD_EXP 46
5341: IFFALSE 5921
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
// begin enable ;
5353: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_INT 8
5361: PPUSH
5362: LD_INT 22
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 70
5390: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: LD_EXP 46
5400: PPUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PPUSH
5411: CALL_OW 72
5415: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5416: LD_ADDR_VAR 0 5
5420: PUSH
5421: LD_EXP 46
5425: PPUSH
5426: LD_INT 25
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PPUSH
5436: CALL_OW 72
5440: ST_TO_ADDR
// if eng then
5441: LD_VAR 0 4
5445: IFFALSE 5641
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 24
5457: PUSH
5458: LD_INT 1000
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: IFFALSE 5587
// begin for i in eng do
5475: LD_ADDR_VAR 0 1
5479: PUSH
5480: LD_VAR 0 4
5484: PUSH
5485: FOR_IN
5486: IFFALSE 5583
// if IsInUnit ( i ) then
5488: LD_VAR 0 1
5492: PPUSH
5493: CALL_OW 310
5497: IFFALSE 5510
// ComExit ( i ) else
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL 56256 0 1
5508: GO 5581
// if IsOk ( i ) and not HasTask ( i ) then
5510: LD_VAR 0 1
5514: PPUSH
5515: CALL_OW 302
5519: IFFALSE 5533
5521: PUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 314
5531: NOT
5532: AND
5533: IFFALSE 5581
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5535: LD_VAR 0 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 72
5566: PPUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 74
5576: PPUSH
5577: CALL_OW 130
5581: GO 5485
5583: POP
5584: POP
// end else
5585: GO 5641
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5587: LD_VAR 0 3
5591: PPUSH
5592: LD_INT 30
5594: PUSH
5595: LD_INT 0
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 72
5606: IFFALSE 5641
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 30
5620: PUSH
5621: LD_INT 0
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PPUSH
5628: CALL_OW 72
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5641: LD_VAR 0 5
5645: PPUSH
5646: LD_INT 50
5648: PUSH
5649: EMPTY
5650: LIST
5651: PPUSH
5652: CALL_OW 72
5656: IFFALSE 5681
5658: PUSH
5659: LD_INT 18
5661: PPUSH
5662: LD_INT 81
5664: PUSH
5665: LD_INT 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 70
5676: PUSH
5677: LD_INT 1
5679: GREATER
5680: AND
5681: IFFALSE 5703
5683: PUSH
5684: LD_INT 18
5686: PPUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 70
5701: NOT
5702: AND
5703: IFFALSE 5757
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5705: LD_ADDR_VAR 0 1
5709: PUSH
5710: LD_VAR 0 5
5714: PPUSH
5715: LD_INT 50
5717: PUSH
5718: EMPTY
5719: LIST
5720: PPUSH
5721: CALL_OW 72
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5755
// begin ComExit ( i ) ;
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL 56256 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: LD_INT 46
5745: PPUSH
5746: LD_INT 62
5748: PPUSH
5749: CALL_OW 174
// end ;
5753: GO 5726
5755: POP
5756: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5757: LD_INT 18
5759: PPUSH
5760: LD_INT 81
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 70
5774: NOT
5775: IFFALSE 5811
5777: PUSH
5778: LD_VAR 0 5
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 54
5788: PUSH
5789: EMPTY
5790: LIST
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 72
5810: AND
5811: IFFALSE 5844
5813: PUSH
5814: LD_VAR 0 3
5818: PPUSH
5819: LD_INT 30
5821: PUSH
5822: LD_INT 31
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 58
5831: PUSH
5832: EMPTY
5833: LIST
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: AND
5844: IFFALSE 5921
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5846: LD_VAR 0 5
5850: PPUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 54
5856: PUSH
5857: EMPTY
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 50
5866: PUSH
5867: EMPTY
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 72
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: LD_INT 30
5890: PUSH
5891: LD_INT 31
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 58
5900: PUSH
5901: EMPTY
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 120
// end ;
5921: PPOPN 5
5923: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5924: LD_EXP 47
5928: IFFALSE 6201
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin enable ;
5938: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_INT 15
5946: PPUSH
5947: LD_INT 22
5949: PUSH
5950: LD_INT 1
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 70
5975: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_EXP 47
5985: PPUSH
5986: LD_INT 25
5988: PUSH
5989: LD_INT 2
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 72
6000: ST_TO_ADDR
// if eng then
6001: LD_VAR 0 3
6005: IFFALSE 6201
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 24
6017: PUSH
6018: LD_INT 1000
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 72
6033: IFFALSE 6147
// begin for i in eng do
6035: LD_ADDR_VAR 0 1
6039: PUSH
6040: LD_VAR 0 3
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6143
// if IsInUnit ( i ) then
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 310
6057: IFFALSE 6070
// ComExit ( i ) else
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL 56256 0 1
6068: GO 6141
// if IsOk ( i ) and not HasTask ( i ) then
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6093
6081: PUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 314
6091: NOT
6092: AND
6093: IFFALSE 6141
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 24
6110: PUSH
6111: LD_INT 1000
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PPUSH
6122: CALL_OW 72
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 74
6136: PPUSH
6137: CALL_OW 130
6141: GO 6045
6143: POP
6144: POP
// end else
6145: GO 6201
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 30
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: CALL_OW 72
6166: IFFALSE 6201
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_VAR 0 2
6177: PPUSH
6178: LD_INT 30
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 72
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: CALL_OW 120
// end ; end_of_file
6201: PPOPN 3
6203: END
// export function Action ; var i , tmp ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
// InGameOn ;
6209: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
6213: LD_INT 112
6215: PPUSH
6216: LD_INT 107
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 12
6224: NEG
6225: PPUSH
6226: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
6230: LD_INT 121
6232: PPUSH
6233: LD_INT 113
6235: PPUSH
6236: CALL_OW 86
// tmp := PrepareBurlak ;
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: CALL 1320 0 0
6249: ST_TO_ADDR
// for i in tmp do
6250: LD_ADDR_VAR 0 2
6254: PUSH
6255: LD_VAR 0 3
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6314
// begin SetDir ( i , 5 ) ;
6263: LD_VAR 0 2
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
6275: LD_VAR 0 2
6279: PPUSH
6280: LD_INT 3
6282: PPUSH
6283: LD_INT 0
6285: PPUSH
6286: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
6290: LD_VAR 0 2
6294: PPUSH
6295: LD_INT 121
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: CALL_OW 111
// wait ( 0 0$0.8 ) ;
6305: LD_INT 28
6307: PPUSH
6308: CALL_OW 67
// end ;
6312: GO 6260
6314: POP
6315: POP
// CenterOnUnits ( Kurin ) ;
6316: LD_EXP 38
6320: PPUSH
6321: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
6325: LD_EXP 34
6329: PPUSH
6330: LD_EXP 38
6334: PPUSH
6335: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
6339: LD_INT 35
6341: PPUSH
6342: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
6346: LD_EXP 34
6350: PPUSH
6351: LD_EXP 38
6355: PPUSH
6356: CALL_OW 296
6360: PUSH
6361: LD_INT 6
6363: LESS
6364: IFFALSE 6339
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6366: LD_EXP 34
6370: PUSH
6371: LD_EXP 35
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: LD_EXP 38
6384: PPUSH
6385: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_VAR 0 3
6398: PUSH
6399: LD_EXP 34
6403: PUSH
6404: LD_EXP 35
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: DIFF
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6481
// if GetClass ( i ) = class_soldier then
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 257
6426: PUSH
6427: LD_INT 1
6429: EQUAL
6430: IFFALSE 6467
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 95
6439: PUSH
6440: LD_INT 209
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: LD_INT 2
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: PPUSH
6461: CALL_OW 120
6465: GO 6479
// ComEnterUnit ( i , ru_lab ) ;
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_INT 83
6474: PPUSH
6475: CALL_OW 120
6479: GO 6414
6481: POP
6482: POP
// Say ( Kurin , D1-Kur-1 ) ;
6483: LD_EXP 38
6487: PPUSH
6488: LD_STRING D1-Kur-1
6490: PPUSH
6491: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6495: LD_EXP 34
6499: PPUSH
6500: LD_STRING D1-Bur-1
6502: PPUSH
6503: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6507: LD_INT 10
6509: PPUSH
6510: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6514: LD_EXP 38
6518: PPUSH
6519: LD_STRING D1-Kur-2
6521: PPUSH
6522: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6526: LD_EXP 39
6530: PPUSH
6531: CALL 56256 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6535: LD_EXP 39
6539: PPUSH
6540: LD_INT 115
6542: PPUSH
6543: LD_INT 108
6545: PPUSH
6546: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6550: LD_EXP 39
6554: PPUSH
6555: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6559: LD_EXP 34
6563: PPUSH
6564: LD_STRING D1-Bur-2
6566: PPUSH
6567: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6571: LD_EXP 38
6575: PPUSH
6576: LD_STRING D1-Kur-3
6578: PPUSH
6579: CALL_OW 88
// if Gnyevko then
6583: LD_EXP 35
6587: IFFALSE 6601
// Say ( Kurin , D1-Kur-3a ) ;
6589: LD_EXP 38
6593: PPUSH
6594: LD_STRING D1-Kur-3a
6596: PPUSH
6597: CALL_OW 88
// InGameOff ;
6601: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6605: LD_STRING M1
6607: PPUSH
6608: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6612: LD_INT 112
6614: PPUSH
6615: LD_INT 107
6617: PPUSH
6618: LD_INT 3
6620: PPUSH
6621: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6625: LD_INT 66
6627: PPUSH
6628: LD_INT 99
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: LD_INT 7
6636: NEG
6637: PPUSH
6638: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6642: LD_INT 66
6644: PPUSH
6645: LD_INT 99
6647: PPUSH
6648: LD_INT 3
6650: PPUSH
6651: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6655: LD_EXP 39
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: CALL_OW 235
// if Gnyevko then
6667: LD_EXP 35
6671: IFFALSE 6685
// SetSide ( Gnyevko , 3 ) ;
6673: LD_EXP 35
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 235
// SaveForQuickRestart ;
6685: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6689: LD_EXP 38
6693: PPUSH
6694: LD_INT 71
6696: PPUSH
6697: CALL_OW 120
// wait ( 0 0$2 ) ;
6701: LD_INT 70
6703: PPUSH
6704: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6708: LD_EXP 43
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PPUSH
6717: CALL 56256 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6721: LD_EXP 43
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: PPUSH
6730: LD_INT 98
6732: PPUSH
6733: LD_INT 98
6735: PPUSH
6736: CALL_OW 428
6740: PPUSH
6741: CALL_OW 180
// wait ( 0 0$12 ) ;
6745: LD_INT 420
6747: PPUSH
6748: CALL_OW 67
// kurinDontWannaTalk := true ;
6752: LD_ADDR_EXP 5
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 1
6764: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6765: LD_EXP 5
6769: IFFALSE 6805
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 91
6784: PUSH
6785: LD_INT 71
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: AND
6805: IFFALSE 6992
6807: GO 6809
6809: DISABLE
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
// begin enable ;
6814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 91
6832: PUSH
6833: LD_INT 71
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// InGameOn ;
6853: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6857: LD_INT 116
6859: PPUSH
6860: LD_INT 107
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: LD_INT 3
6868: PPUSH
6869: CALL_OW 330
// ComExit ( Kurin ) ;
6873: LD_EXP 38
6877: PPUSH
6878: CALL 56256 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6882: LD_EXP 38
6886: PPUSH
6887: LD_VAR 0 2
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6900: LD_EXP 38
6904: PPUSH
6905: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6909: LD_VAR 0 2
6913: PPUSH
6914: LD_INT 87
6916: PPUSH
6917: LD_INT 99
6919: PPUSH
6920: CALL_OW 111
// if kirovHasTank then
6924: LD_EXP 6
6928: IFFALSE 6944
// Say ( Kurin , D1a-Kur-1a ) else
6930: LD_EXP 38
6934: PPUSH
6935: LD_STRING D1a-Kur-1a
6937: PPUSH
6938: CALL_OW 88
6942: GO 6956
// Say ( Kurin , D1a-Kur-1 ) ;
6944: LD_EXP 38
6948: PPUSH
6949: LD_STRING D1a-Kur-1
6951: PPUSH
6952: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6956: LD_EXP 38
6960: PPUSH
6961: LD_INT 71
6963: PPUSH
6964: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6968: LD_INT 116
6970: PPUSH
6971: LD_INT 107
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: CALL_OW 331
// wait ( 0 0$3 ) ;
6981: LD_INT 105
6983: PPUSH
6984: CALL_OW 67
// InGameOff ;
6988: CALL_OW 9
// end ;
6992: PPOPN 2
6994: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6995: LD_INT 22
6997: PUSH
6998: LD_INT 3
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 95
7007: PUSH
7008: LD_INT 4
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PPUSH
7019: CALL_OW 69
7023: IFFALSE 7031
7025: PUSH
7026: LD_EXP 7
7030: AND
7031: IFFALSE 7374
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin enable ;
7043: ENABLE
// blockNorth := false ;
7044: LD_ADDR_EXP 7
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// InGameOn ;
7052: CALL_OW 8
// DialogueOn ;
7056: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 3
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 95
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
7094: LD_EXP 39
7098: PUSH
7099: LD_VAR 0 2
7103: IN
7104: IFFALSE 7117
7106: PUSH
7107: LD_EXP 39
7111: PPUSH
7112: CALL_OW 302
7116: AND
7117: IFFALSE 7133
// Say ( Kovalyuk , D1b-Kov-1 ) else
7119: LD_EXP 39
7123: PPUSH
7124: LD_STRING D1b-Kov-1
7126: PPUSH
7127: CALL_OW 88
7131: GO 7170
// if Burlak in tmp and IsOk ( Burlak ) then
7133: LD_EXP 34
7137: PUSH
7138: LD_VAR 0 2
7142: IN
7143: IFFALSE 7156
7145: PUSH
7146: LD_EXP 34
7150: PPUSH
7151: CALL_OW 302
7155: AND
7156: IFFALSE 7170
// Say ( Burlak , D1b-Bur-1 ) ;
7158: LD_EXP 34
7162: PPUSH
7163: LD_STRING D1b-Bur-1
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
7174: LD_INT 22
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 21
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PPUSH
7210: CALL_OW 141
// for i in tmp do
7214: LD_ADDR_VAR 0 1
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: FOR_IN
7225: IFFALSE 7353
// begin d := rand ( 2 , 3 ) ;
7227: LD_ADDR_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 3
7237: PPUSH
7238: CALL_OW 12
7242: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
7243: LD_ADDR_VAR 0 3
7247: PUSH
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 250
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: LD_INT 6
7265: PPUSH
7266: CALL_OW 272
7270: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL_OW 251
7285: PPUSH
7286: LD_VAR 0 5
7290: PPUSH
7291: LD_INT 6
7293: PPUSH
7294: CALL_OW 273
7298: ST_TO_ADDR
// if ValidHex ( x , y ) then
7299: LD_VAR 0 3
7303: PPUSH
7304: LD_VAR 0 4
7308: PPUSH
7309: CALL_OW 488
7313: IFFALSE 7336
// ComMoveXY ( i , x , y ) else
7315: LD_VAR 0 1
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 111
7334: GO 7351
// ComMoveXY ( i , 79 , 85 ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_INT 79
7343: PPUSH
7344: LD_INT 85
7346: PPUSH
7347: CALL_OW 111
// end ;
7351: GO 7224
7353: POP
7354: POP
// wait ( 0 0$5 ) ;
7355: LD_INT 175
7357: PPUSH
7358: CALL_OW 67
// InGameOff ;
7362: CALL_OW 9
// blockNorth := true ;
7366: LD_ADDR_EXP 7
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// end ;
7374: PPOPN 5
7376: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7377: LD_EXP 44
7381: PPUSH
7382: LD_INT 101
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: IFFALSE 7405
7398: PUSH
7399: LD_EXP 4
7403: NOT
7404: AND
7405: IFFALSE 7809
7407: GO 7409
7409: DISABLE
7410: LD_INT 0
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7417: LD_ADDR_VAR 0 5
7421: PUSH
7422: LD_EXP 44
7426: PPUSH
7427: LD_EXP 34
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// InGameOn ;
7437: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7441: LD_VAR 0 5
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 5
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 3
7463: PPUSH
7464: LD_INT 6
7466: PPUSH
7467: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7471: LD_VAR 0 5
7475: PPUSH
7476: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7480: LD_VAR 0 5
7484: PPUSH
7485: LD_EXP 34
7489: PPUSH
7490: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7494: LD_VAR 0 5
7498: PPUSH
7499: LD_STRING D2-RSol1-1
7501: PPUSH
7502: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 5
7525: PPUSH
7526: CALL_OW 254
7530: PPUSH
7531: LD_INT 3
7533: PPUSH
7534: CALL_OW 272
7538: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7539: LD_ADDR_VAR 0 4
7543: PUSH
7544: LD_VAR 0 5
7548: PPUSH
7549: CALL_OW 251
7553: PPUSH
7554: LD_VAR 0 5
7558: PPUSH
7559: CALL_OW 254
7563: PPUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 273
7571: ST_TO_ADDR
// if ValidHex ( x , y ) then
7572: LD_VAR 0 3
7576: PPUSH
7577: LD_VAR 0 4
7581: PPUSH
7582: CALL_OW 488
7586: IFFALSE 7618
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7588: LD_EXP 35
7592: PUSH
7593: LD_EXP 39
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_VAR 0 4
7611: PPUSH
7612: CALL_OW 111
7616: GO 7641
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7618: LD_EXP 35
7622: PUSH
7623: LD_EXP 39
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: LD_VAR 0 5
7636: PPUSH
7637: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7641: LD_EXP 34
7645: PPUSH
7646: LD_VAR 0 5
7650: PPUSH
7651: CALL_OW 112
// p := 0 ;
7655: LD_ADDR_VAR 0 2
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// p := p + 1 ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_INT 1
7682: PLUS
7683: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7684: LD_VAR 0 2
7688: PUSH
7689: LD_INT 10
7691: GREATER
7692: IFTRUE 7714
7694: PUSH
7695: LD_EXP 34
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: CALL_OW 296
7709: PUSH
7710: LD_INT 6
7712: LESS
7713: OR
7714: IFFALSE 7663
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7716: LD_EXP 34
7720: PUSH
7721: LD_EXP 35
7725: PUSH
7726: LD_EXP 39
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PPUSH
7736: LD_VAR 0 5
7740: PPUSH
7741: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7745: LD_EXP 34
7749: PPUSH
7750: LD_STRING D2-Bur-1
7752: PPUSH
7753: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7757: LD_VAR 0 5
7761: PPUSH
7762: LD_STRING D2-RSol1-2
7764: PPUSH
7765: CALL_OW 88
// ComHold ( nearestGuard ) ;
7769: LD_VAR 0 5
7773: PPUSH
7774: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7778: LD_VAR 0 5
7782: PPUSH
7783: CALL_OW 250
7787: PPUSH
7788: LD_VAR 0 5
7792: PPUSH
7793: CALL_OW 251
7797: PPUSH
7798: LD_INT 3
7800: PPUSH
7801: CALL_OW 331
// InGameOff ;
7805: CALL_OW 9
// end ;
7809: PPOPN 5
7811: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7812: LD_EXP 34
7816: PPUSH
7817: LD_EXP 40
7821: PPUSH
7822: CALL_OW 296
7826: PUSH
7827: LD_INT 10
7829: LESS
7830: IFFALSE 7846
7832: PUSH
7833: LD_INT 3
7835: PPUSH
7836: LD_EXP 40
7840: PPUSH
7841: CALL_OW 292
7845: AND
7846: IFFALSE 8204
7848: GO 7850
7850: DISABLE
7851: LD_INT 0
7853: PPUSH
// begin InGameOn ;
7854: CALL_OW 8
// beriaVisited := true ;
7858: LD_ADDR_EXP 4
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7866: LD_EXP 34
7870: PPUSH
7871: LD_EXP 40
7875: PPUSH
7876: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7880: LD_EXP 35
7884: PUSH
7885: LD_EXP 39
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PPUSH
7894: LD_INT 68
7896: PPUSH
7897: LD_INT 99
7899: PPUSH
7900: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7904: LD_EXP 40
7908: PPUSH
7909: LD_EXP 34
7913: PPUSH
7914: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7918: LD_EXP 40
7922: PPUSH
7923: LD_STRING D2-Pla-2
7925: PPUSH
7926: CALL_OW 88
// p := 0 ;
7930: LD_ADDR_VAR 0 1
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7938: LD_INT 35
7940: PPUSH
7941: CALL_OW 67
// p := p + 1 ;
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 1
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7959: LD_EXP 34
7963: PPUSH
7964: LD_EXP 40
7968: PPUSH
7969: CALL_OW 296
7973: PUSH
7974: LD_INT 6
7976: LESS
7977: IFTRUE 7989
7979: PUSH
7980: LD_VAR 0 1
7984: PUSH
7985: LD_INT 8
7987: GREATER
7988: OR
7989: IFFALSE 7938
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7991: LD_EXP 34
7995: PUSH
7996: LD_EXP 35
8000: PUSH
8001: LD_EXP 39
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: PPUSH
8011: LD_EXP 40
8015: PPUSH
8016: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
8020: LD_EXP 34
8024: PPUSH
8025: LD_STRING D2-Bur-2
8027: PPUSH
8028: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
8032: LD_INT 6
8034: PPUSH
8035: LD_INT 3
8037: PPUSH
8038: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
8042: LD_EXP 40
8046: PPUSH
8047: LD_STRING D2-Pla-3
8049: PPUSH
8050: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8054: LD_EXP 34
8058: PPUSH
8059: LD_STRING D2-Bur-3
8061: PPUSH
8062: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8066: LD_EXP 40
8070: PPUSH
8071: LD_STRING D2-Pla-4
8073: PPUSH
8074: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8078: LD_EXP 34
8082: PPUSH
8083: LD_STRING D2-Bur-4
8085: PPUSH
8086: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8090: LD_EXP 40
8094: PPUSH
8095: LD_STRING D2-Pla-5
8097: PPUSH
8098: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
8102: LD_INT 1
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL 8207 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8124: LD_EXP 40
8128: PPUSH
8129: LD_STRING D3-Pla-1
8131: PPUSH
8132: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8136: LD_EXP 34
8140: PPUSH
8141: LD_STRING D3-Bur-1
8143: PPUSH
8144: CALL_OW 88
// InGameOff ;
8148: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8152: LD_STRING M2a
8154: PPUSH
8155: CALL_OW 337
// SetSide ( beria , 3 ) ;
8159: LD_INT 106
8161: PPUSH
8162: LD_INT 3
8164: PPUSH
8165: CALL_OW 235
// if not Gnyevko then
8169: LD_EXP 35
8173: NOT
8174: IFFALSE 8195
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
8176: LD_INT 106
8178: PPUSH
8179: CALL_OW 313
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_INT 3
8190: PPUSH
8191: CALL_OW 235
// ComFree ( Platonov ) ;
8195: LD_EXP 40
8199: PPUSH
8200: CALL_OW 139
// end ;
8204: PPOPN 1
8206: END
// function AskPlatonov ( questions ) ; var q ; begin
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_STRING QMoreInfo
8218: PPUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 98
8228: ST_TO_ADDR
// case q of 1 :
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 1
8236: DOUBLE
8237: EQUAL
8238: IFTRUE 8242
8240: GO 8269
8242: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
8243: LD_EXP 34
8247: PPUSH
8248: LD_STRING D2a-Bur-1
8250: PPUSH
8251: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
8255: LD_EXP 40
8259: PPUSH
8260: LD_STRING D2a-Pla-1
8262: PPUSH
8263: CALL_OW 88
// end ; 2 :
8267: GO 8340
8269: LD_INT 2
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8304
8277: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
8278: LD_EXP 34
8282: PPUSH
8283: LD_STRING D2b-Bur-1
8285: PPUSH
8286: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
8290: LD_EXP 40
8294: PPUSH
8295: LD_STRING D2b-Pla-1
8297: PPUSH
8298: CALL_OW 88
// end ; 3 :
8302: GO 8340
8304: LD_INT 3
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8339
8312: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
8313: LD_EXP 34
8317: PPUSH
8318: LD_STRING D2c-Bur-1
8320: PPUSH
8321: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
8325: LD_EXP 40
8329: PPUSH
8330: LD_STRING D2c-Pla-1
8332: PPUSH
8333: CALL_OW 88
// end ; end ;
8337: GO 8340
8339: POP
// if q < 4 and questions > 2 then
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 4
8347: LESS
8348: IFFALSE 8360
8350: PUSH
8351: LD_VAR 0 1
8355: PUSH
8356: LD_INT 2
8358: GREATER
8359: AND
8360: IFFALSE 8377
// AskPlatonov ( questions diff q ) ;
8362: LD_VAR 0 1
8366: PUSH
8367: LD_VAR 0 3
8371: DIFF
8372: PPUSH
8373: CALL 8207 0 1
// end ;
8377: LD_VAR 0 2
8381: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8382: LD_INT 0
8384: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8385: LD_EXP 40
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8404: LD_INT 35
8406: PPUSH
8407: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8411: LD_EXP 40
8415: PPUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_VAR 0 2
8425: PPUSH
8426: CALL_OW 297
8430: PUSH
8431: LD_INT 5
8433: LESS
8434: IFFALSE 8456
8436: PUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 283
8451: PUSH
8452: LD_INT 1
8454: EQUAL
8455: AND
8456: IFFALSE 8404
// ComStop ( Platonov ) ;
8458: LD_EXP 40
8462: PPUSH
8463: CALL_OW 141
// if ingame_video then
8467: LD_OWVAR 52
8471: IFFALSE 8475
// exit ;
8473: GO 8496
// ComHold ( Platonov ) ;
8475: LD_EXP 40
8479: PPUSH
8480: CALL_OW 140
// Say ( Platonov , D4-Pla-1 ) ;
8484: LD_EXP 40
8488: PPUSH
8489: LD_STRING D4-Pla-1
8491: PPUSH
8492: CALL_OW 88
// end ;
8496: LD_VAR 0 3
8500: RET
// every 0 0$2 trigger hasLab do
8501: LD_EXP 9
8505: IFFALSE 8569
8507: GO 8509
8509: DISABLE
// begin DialogueOn ;
8510: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8514: LD_EXP 34
8518: PPUSH
8519: LD_STRING D5a-Bur-1
8521: PPUSH
8522: CALL_OW 88
// if hasWorkshop then
8526: LD_EXP 10
8530: IFFALSE 8546
// Say ( Platonov , D5a-Pla-1 ) else
8532: LD_EXP 40
8536: PPUSH
8537: LD_STRING D5a-Pla-1
8539: PPUSH
8540: CALL_OW 88
8544: GO 8558
// Say ( Platonov , D5a-Pla-1a ) ;
8546: LD_EXP 40
8550: PPUSH
8551: LD_STRING D5a-Pla-1a
8553: PPUSH
8554: CALL_OW 88
// DialogueOff ;
8558: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8562: LD_STRING M2b
8564: PPUSH
8565: CALL_OW 337
// end ;
8569: END
// every 0 0$2 trigger hasWorkshop do
8570: LD_EXP 10
8574: IFFALSE 8638
8576: GO 8578
8578: DISABLE
// begin DialogueOn ;
8579: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8583: LD_EXP 34
8587: PPUSH
8588: LD_STRING D5b-Bur-1
8590: PPUSH
8591: CALL_OW 88
// if hasLab then
8595: LD_EXP 9
8599: IFFALSE 8615
// Say ( Platonov , D5b-Pla-1 ) else
8601: LD_EXP 40
8605: PPUSH
8606: LD_STRING D5b-Pla-1
8608: PPUSH
8609: CALL_OW 88
8613: GO 8627
// Say ( Platonov , D5b-Pla-1a ) ;
8615: LD_EXP 40
8619: PPUSH
8620: LD_STRING D5b-Pla-1a
8622: PPUSH
8623: CALL_OW 88
// DialogueOff ;
8627: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8631: LD_STRING M2c
8633: PPUSH
8634: CALL_OW 337
// end ;
8638: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8639: LD_EXP 9
8643: IFFALSE 8651
8645: PUSH
8646: LD_EXP 10
8650: AND
8651: IFFALSE 8745
8653: GO 8655
8655: DISABLE
// begin DialogueOn ;
8656: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8660: LD_INT 47
8662: PPUSH
8663: LD_INT 3
8665: PPUSH
8666: CALL_OW 321
8670: PUSH
8671: LD_INT 2
8673: EQUAL
8674: IFFALSE 8702
// begin Say ( Burlak , D7b-Bur-1 ) ;
8676: LD_EXP 34
8680: PPUSH
8681: LD_STRING D7b-Bur-1
8683: PPUSH
8684: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8688: LD_EXP 40
8692: PPUSH
8693: LD_STRING D7b-Pla-1
8695: PPUSH
8696: CALL_OW 88
// end else
8700: GO 8726
// begin Say ( Burlak , D7a-Bur-1 ) ;
8702: LD_EXP 34
8706: PPUSH
8707: LD_STRING D7a-Bur-1
8709: PPUSH
8710: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8714: LD_EXP 40
8718: PPUSH
8719: LD_STRING D7a-Pla-1
8721: PPUSH
8722: CALL_OW 88
// end ; DialogueOff ;
8726: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8730: LD_STRING M2
8732: PPUSH
8733: CALL_OW 337
// hasToBuildTank := true ;
8737: LD_ADDR_EXP 11
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end ;
8745: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8746: LD_EXP 4
8750: IFFALSE 8776
8752: PUSH
8753: LD_EXP 9
8757: NOT
8758: IFTRUE 8767
8760: PUSH
8761: LD_EXP 10
8765: NOT
8766: OR
8767: IFTRUE 8775
8769: PUSH
8770: LD_EXP 11
8774: OR
8775: AND
8776: IFFALSE 8819
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 3
8791: PUSH
8792: LD_INT 91
8794: PUSH
8795: LD_INT 106
8797: PUSH
8798: LD_INT 32
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 69
8818: AND
8819: IFFALSE 8928
8821: GO 8823
8823: DISABLE
8824: LD_INT 0
8826: PPUSH
// begin enable ;
8827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8828: LD_ADDR_VAR 0 1
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: LD_INT 91
8848: PUSH
8849: LD_INT 106
8851: PUSH
8852: LD_INT 32
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 69
8872: ST_TO_ADDR
// InGameOn ;
8873: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8877: LD_VAR 0 1
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: LD_INT 66
8897: PPUSH
8898: LD_INT 99
8900: PPUSH
8901: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8905: LD_EXP 40
8909: PPUSH
8910: LD_STRING D8-Pla-1
8912: PPUSH
8913: CALL_OW 88
// wait ( 0 0$3 ) ;
8917: LD_INT 105
8919: PPUSH
8920: CALL_OW 67
// InGameOff ;
8924: CALL_OW 9
// end ;
8928: PPOPN 1
8930: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8931: LD_INT 21
8933: PPUSH
8934: LD_INT 22
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 23
8946: PUSH
8947: LD_INT 3
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 30
8959: PUSH
8960: LD_INT 4
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 30
8969: PUSH
8970: LD_INT 31
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 70
8991: IFFALSE 9000
8993: PUSH
8994: LD_EXP 31
8998: NOT
8999: AND
9000: IFFALSE 9251
9002: GO 9004
9004: DISABLE
9005: LD_INT 0
9007: PPUSH
// begin enable ;
9008: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) [ 1 ] ;
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_INT 21
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 23
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 2
9039: PUSH
9040: LD_INT 30
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 30
9052: PUSH
9053: LD_INT 31
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 70
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9079: LD_EXP 40
9083: PPUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9093: LD_INT 35
9095: PPUSH
9096: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9100: LD_EXP 40
9104: PPUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 296
9114: PUSH
9115: LD_INT 6
9117: LESS
9118: IFFALSE 9093
// InGameOn ;
9120: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9124: LD_EXP 40
9128: PPUSH
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 119
// ComTurnUnit ( Burlak , Platonov ) ;
9138: LD_EXP 34
9142: PPUSH
9143: LD_EXP 40
9147: PPUSH
9148: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
9152: LD_EXP 40
9156: PPUSH
9157: LD_STRING D6-Pla-1
9159: PPUSH
9160: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9164: LD_EXP 34
9168: PPUSH
9169: LD_STRING D6-Bur-1
9171: PPUSH
9172: CALL_OW 88
// RemoveUnit ( tmp ) ;
9176: LD_VAR 0 1
9180: PPUSH
9181: CALL_OW 64
// if GetBType ( tmp ) = b_breastwork then
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 266
9194: PUSH
9195: LD_INT 31
9197: EQUAL
9198: IFFALSE 9220
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
9200: LD_INT 106
9202: PPUSH
9203: CALL_OW 274
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 10
9213: PPUSH
9214: CALL_OW 276
9218: GO 9238
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
9220: LD_INT 106
9222: PPUSH
9223: CALL_OW 274
9227: PPUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_INT 30
9233: PPUSH
9234: CALL_OW 276
// InGameOff ;
9238: CALL_OW 9
// ComFree ( Burlak ) ;
9242: LD_EXP 34
9246: PPUSH
9247: CALL_OW 139
// end ;
9251: PPOPN 1
9253: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
9254: LD_EXP 4
9258: IFFALSE 9304
9260: PUSH
9261: LD_INT 21
9263: PPUSH
9264: LD_INT 22
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 23
9276: PUSH
9277: LD_INT 3
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 71
9303: AND
9304: IFFALSE 9625
9306: GO 9308
9308: DISABLE
9309: LD_INT 0
9311: PPUSH
9312: PPUSH
// begin enable ;
9313: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
9314: LD_ADDR_VAR 0 1
9318: PUSH
9319: LD_INT 21
9321: PPUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 23
9334: PUSH
9335: LD_INT 3
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 21
9344: PUSH
9345: LD_INT 3
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 71
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9366: LD_EXP 40
9370: PPUSH
9371: LD_VAR 0 1
9375: PPUSH
9376: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9380: LD_INT 35
9382: PPUSH
9383: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9387: LD_EXP 40
9391: PPUSH
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 296
9401: PUSH
9402: LD_INT 6
9404: LESS
9405: IFFALSE 9380
// InGameOn ;
9407: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9411: LD_EXP 40
9415: PPUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 119
// ComTurnUnit ( Burlak , Platonov ) ;
9425: LD_EXP 34
9429: PPUSH
9430: LD_EXP 40
9434: PPUSH
9435: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
9439: LD_EXP 40
9443: PPUSH
9444: LD_STRING DPlatAngry
9446: PPUSH
9447: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9451: LD_EXP 34
9455: PPUSH
9456: LD_STRING D6-Bur-1
9458: PPUSH
9459: CALL_OW 88
// RemoveUnit ( tmp ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 64
// InGameOff ;
9472: CALL_OW 9
// ComFree ( Burlak ) ;
9476: LD_EXP 34
9480: PPUSH
9481: CALL_OW 139
// amount := 0 ;
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9493: LD_VAR 0 1
9497: PPUSH
9498: CALL_OW 266
9502: PUSH
9503: LD_INT 31
9505: DOUBLE
9506: EQUAL
9507: IFTRUE 9511
9509: GO 9522
9511: POP
// amount := 10 ; b_lab :
9512: LD_ADDR_VAR 0 2
9516: PUSH
9517: LD_INT 10
9519: ST_TO_ADDR
9520: GO 9599
9522: LD_INT 6
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9541
9530: POP
// amount := 20 ; b_armoury :
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 20
9538: ST_TO_ADDR
9539: GO 9599
9541: LD_INT 4
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9560
9549: POP
// amount := 30 ; b_workshop :
9550: LD_ADDR_VAR 0 2
9554: PUSH
9555: LD_INT 30
9557: ST_TO_ADDR
9558: GO 9599
9560: LD_INT 2
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 9579
9568: POP
// amount := 40 ; b_oil_power :
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: LD_INT 40
9576: ST_TO_ADDR
9577: GO 9599
9579: LD_INT 26
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9598
9587: POP
// amount := 20 ; end ;
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 20
9595: ST_TO_ADDR
9596: GO 9599
9598: POP
// if amount then
9599: LD_VAR 0 2
9603: IFFALSE 9625
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9605: LD_INT 106
9607: PPUSH
9608: CALL_OW 274
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 2
9620: PPUSH
9621: CALL_OW 276
// end ;
9625: PPOPN 2
9627: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9628: LD_INT 22
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 92
9640: PUSH
9641: LD_INT 112
9643: PUSH
9644: LD_INT 155
9646: PUSH
9647: LD_INT 8
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PPUSH
9660: CALL_OW 69
9664: PUSH
9665: LD_INT 2
9667: LESS
9668: IFFALSE 9691
9670: PUSH
9671: LD_EXP 34
9675: PPUSH
9676: LD_INT 112
9678: PPUSH
9679: LD_INT 155
9681: PPUSH
9682: CALL_OW 297
9686: PUSH
9687: LD_INT 8
9689: LESS
9690: AND
9691: IFFALSE 9906
9693: GO 9695
9695: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9696: LD_INT 112
9698: PPUSH
9699: LD_INT 155
9701: PPUSH
9702: LD_INT 3
9704: PPUSH
9705: LD_INT 4
9707: NEG
9708: PPUSH
9709: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9713: LD_INT 1
9715: PPUSH
9716: LD_EXP 34
9720: PPUSH
9721: CALL_OW 471
// uc_side := 1 ;
9725: LD_ADDR_OWVAR 20
9729: PUSH
9730: LD_INT 1
9732: ST_TO_ADDR
// uc_nation := 1 ;
9733: LD_ADDR_OWVAR 21
9737: PUSH
9738: LD_INT 1
9740: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9741: LD_ADDR_EXP 49
9745: PUSH
9746: LD_STRING Dickens
9748: PPUSH
9749: CALL_OW 25
9753: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9754: LD_EXP 49
9758: PPUSH
9759: LD_INT 112
9761: PPUSH
9762: LD_INT 155
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 48
// wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9779: LD_EXP 49
9783: PPUSH
9784: LD_EXP 34
9788: PPUSH
9789: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9793: LD_EXP 49
9797: PPUSH
9798: LD_STRING DUsSpawnSol
9800: PPUSH
9801: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9805: LD_INT 1
9807: PPUSH
9808: LD_EXP 34
9812: PPUSH
9813: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9817: LD_INT 112
9819: PPUSH
9820: LD_INT 155
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9830: LD_EXP 49
9834: PPUSH
9835: LD_INT 77
9837: PPUSH
9838: LD_INT 152
9840: PPUSH
9841: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9845: LD_INT 35
9847: PPUSH
9848: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9852: LD_EXP 49
9856: PPUSH
9857: CALL_OW 302
9861: NOT
9862: IFTRUE 9881
9864: PUSH
9865: LD_EXP 49
9869: PPUSH
9870: LD_INT 77
9872: PPUSH
9873: LD_INT 152
9875: PPUSH
9876: CALL_OW 307
9880: OR
9881: IFFALSE 9845
// if not IsOk ( Dickens ) then
9883: LD_EXP 49
9887: PPUSH
9888: CALL_OW 302
9892: NOT
9893: IFFALSE 9897
// exit ;
9895: GO 9906
// RemoveUnit ( Dickens ) ;
9897: LD_EXP 49
9901: PPUSH
9902: CALL_OW 64
// end ;
9906: END
// every 0 0$2 trigger GetLives ( Burlak ) < 900 do
9907: LD_EXP 34
9911: PPUSH
9912: CALL_OW 256
9916: PUSH
9917: LD_INT 900
9919: LESS
9920: IFFALSE 9952
9922: GO 9924
9924: DISABLE
// begin if SideShoot ( Burlak ) = 1 then
9925: LD_EXP 34
9929: PPUSH
9930: CALL_OW 503
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: IFFALSE 9952
// Say ( Burlak , DUsSpawnBur ) ;
9940: LD_EXP 34
9944: PPUSH
9945: LD_STRING DUsSpawnBur
9947: PPUSH
9948: CALL_OW 88
// end ;
9952: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9953: LD_EXP 12
9957: IFFALSE 10863
9959: GO 9961
9961: DISABLE
9962: LD_INT 0
9964: PPUSH
9965: PPUSH
9966: PPUSH
9967: PPUSH
// begin hasToBuildTank := false ;
9968: LD_ADDR_EXP 11
9972: PUSH
9973: LD_INT 0
9975: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9976: LD_ADDR_EXP 5
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9984: LD_ADDR_VAR 0 2
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 21
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 69
10017: ST_TO_ADDR
// InGameOn ;
10018: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
10022: LD_VAR 0 2
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PPUSH
10031: CALL_OW 85
// wait ( 0 0$1 ) ;
10035: LD_INT 35
10037: PPUSH
10038: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
10042: LD_EXP 34
10046: PPUSH
10047: LD_STRING D9-Bur-1
10049: PPUSH
10050: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
10054: LD_EXP 40
10058: PPUSH
10059: LD_VAR 0 2
10063: PUSH
10064: LD_INT 1
10066: ARRAY
10067: PPUSH
10068: CALL_OW 112
// p := 0 ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10080: LD_INT 35
10082: PPUSH
10083: CALL_OW 67
// p := p + 1 ;
10087: LD_ADDR_VAR 0 3
10091: PUSH
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 1
10099: PLUS
10100: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
10101: LD_EXP 40
10105: PPUSH
10106: LD_VAR 0 2
10110: PUSH
10111: LD_INT 1
10113: ARRAY
10114: PPUSH
10115: CALL_OW 296
10119: PUSH
10120: LD_INT 8
10122: LESS
10123: IFTRUE 10135
10125: PUSH
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 8
10133: GREATER
10134: OR
10135: IFFALSE 10080
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
10137: LD_EXP 40
10141: PPUSH
10142: LD_VAR 0 2
10146: PUSH
10147: LD_INT 1
10149: ARRAY
10150: PPUSH
10151: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
10155: LD_EXP 40
10159: PPUSH
10160: LD_STRING D9-Pla-1
10162: PPUSH
10163: CALL_OW 88
// ComFree ( Platonov ) ;
10167: LD_EXP 40
10171: PPUSH
10172: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
10176: LD_EXP 40
10180: PPUSH
10181: LD_INT 64
10183: PPUSH
10184: LD_INT 98
10186: PPUSH
10187: CALL_OW 171
// InGameOff ;
10191: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
10195: LD_STRING M3
10197: PPUSH
10198: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
10202: LD_EXP 41
10206: PPUSH
10207: LD_INT 70
10209: PPUSH
10210: LD_INT 108
10212: PPUSH
10213: CALL_OW 111
// AddComHold ( Kuklajs ) ;
10217: LD_EXP 41
10221: PPUSH
10222: CALL_OW 200
// wait ( 1 ) ;
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 67
// ComExit ( Belkov ) ;
10233: LD_EXP 36
10237: PPUSH
10238: CALL 56256 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
10242: LD_EXP 36
10246: PPUSH
10247: LD_INT 113
10249: PPUSH
10250: LD_INT 104
10252: PPUSH
10253: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_INT 116
10264: PPUSH
10265: LD_INT 108
10267: PPUSH
10268: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
10272: LD_INT 35
10274: PPUSH
10275: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10279: LD_INT 22
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 21
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 91
10301: PUSH
10302: LD_INT 71
10304: PUSH
10305: LD_INT 8
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: IFFALSE 10272
// InGameOn ;
10324: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10328: LD_ADDR_VAR 0 2
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_INT 3
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 91
10355: PUSH
10356: LD_INT 71
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: ST_TO_ADDR
// ComExit ( Kurin ) ;
10377: LD_EXP 38
10381: PPUSH
10382: CALL 56256 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10386: LD_EXP 38
10390: PPUSH
10391: LD_VAR 0 2
10395: PUSH
10396: LD_INT 1
10398: ARRAY
10399: PPUSH
10400: CALL_OW 179
// wait ( 0 0$1 ) ;
10404: LD_INT 35
10406: PPUSH
10407: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10411: LD_VAR 0 2
10415: PUSH
10416: LD_INT 1
10418: ARRAY
10419: PPUSH
10420: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10424: LD_ADDR_VAR 0 4
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 1
10436: ARRAY
10437: PPUSH
10438: CALL_OW 311
10442: ST_TO_ADDR
// ComExit ( un ) ;
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 56256 0 1
// wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10459: LD_VAR 0 4
10463: PPUSH
10464: LD_EXP 38
10468: PPUSH
10469: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10473: LD_EXP 36
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10491: LD_INT 10
10493: PPUSH
10494: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10498: LD_EXP 38
10502: PPUSH
10503: LD_STRING D10-Kur-1
10505: PPUSH
10506: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10510: LD_EXP 36
10514: PPUSH
10515: LD_INT 122
10517: PPUSH
10518: LD_INT 112
10520: PPUSH
10521: CALL_OW 176
// wait ( 0 0$2 ) ;
10525: LD_INT 70
10527: PPUSH
10528: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10532: LD_EXP 36
10536: PPUSH
10537: LD_STRING D10-Bel-1
10539: PPUSH
10540: CALL_OW 88
// if belkovBrother then
10544: LD_EXP 32
10548: IFFALSE 10600
// begin Say ( Burlak , D10-Bur-1 ) ;
10550: LD_EXP 34
10554: PPUSH
10555: LD_STRING D10-Bur-1
10557: PPUSH
10558: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10562: LD_EXP 36
10566: PPUSH
10567: LD_STRING D10-Bel-2
10569: PPUSH
10570: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10574: LD_EXP 34
10578: PPUSH
10579: LD_STRING D10-Bur-2
10581: PPUSH
10582: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10586: LD_EXP 38
10590: PPUSH
10591: LD_STRING D10-Kur-2a
10593: PPUSH
10594: CALL_OW 88
// end else
10598: GO 10612
// begin Say ( Kurin , D10-Kur-2 ) end ;
10600: LD_EXP 38
10604: PPUSH
10605: LD_STRING D10-Kur-2
10607: PPUSH
10608: CALL_OW 88
// wait ( 0 0$2 ) ;
10612: LD_INT 70
10614: PPUSH
10615: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10619: LD_EXP 38
10623: PPUSH
10624: LD_STRING D10-Kur-2b
10626: PPUSH
10627: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10631: LD_VAR 0 4
10635: PPUSH
10636: LD_INT 66
10638: PPUSH
10639: LD_INT 97
10641: PPUSH
10642: CALL_OW 111
// wait ( 0 0$5 ) ;
10646: LD_INT 175
10648: PPUSH
10649: CALL_OW 67
// InGameOff ;
10653: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10657: LD_EXP 33
10661: PPUSH
10662: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10666: LD_STRING M4
10668: PPUSH
10669: CALL_OW 337
// wait ( 0 0$6 ) ;
10673: LD_INT 210
10675: PPUSH
10676: CALL_OW 67
// kurinDontWannaTalk := true ;
10680: LD_ADDR_EXP 5
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10688: LD_INT 140
10690: PPUSH
10691: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10695: LD_INT 35
10697: PPUSH
10698: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10702: LD_EXP 34
10706: PPUSH
10707: CALL_OW 310
10711: IFTRUE 10731
10713: PUSH
10714: LD_EXP 34
10718: PPUSH
10719: LD_INT 106
10721: PPUSH
10722: CALL_OW 296
10726: PUSH
10727: LD_INT 12
10729: LESS
10730: OR
10731: IFFALSE 10695
// DialogueOn ;
10733: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10737: LD_EXP 40
10741: PPUSH
10742: LD_STRING D11-Pla-1
10744: PPUSH
10745: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10749: LD_EXP 34
10753: PPUSH
10754: LD_STRING D11-Bur-1
10756: PPUSH
10757: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10761: LD_INT 22
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PPUSH
10785: CALL_OW 69
10789: PUSH
10790: LD_INT 1
10792: GREATER
10793: IFFALSE 10807
// Say ( Burlak , D11-Bur-1a ) ;
10795: LD_EXP 34
10799: PPUSH
10800: LD_STRING D11-Bur-1a
10802: PPUSH
10803: CALL_OW 88
// DialogueOff ;
10807: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10811: LD_ADDR_EXP 8
10815: PUSH
10816: LD_INT 160
10818: PUSH
10819: LD_INT 150
10821: PUSH
10822: LD_INT 140
10824: PUSH
10825: LD_INT 120
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_OWVAR 67
10838: ARRAY
10839: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10840: LD_STRING M5
10842: PPUSH
10843: CALL_OW 337
// kirovHasTank := true ;
10847: LD_ADDR_EXP 6
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// hasToBuildTank := true ;
10855: LD_ADDR_EXP 11
10859: PUSH
10860: LD_INT 1
10862: ST_TO_ADDR
// end ;
10863: PPOPN 4
10865: END
// every 0 0$2 trigger allianceAttacked do
10866: LD_EXP 13
10870: IFFALSE 10909
10872: GO 10874
10874: DISABLE
// begin DialogueOn ;
10875: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10879: LD_EXP 38
10883: PPUSH
10884: LD_STRING DArestKur
10886: PPUSH
10887: CALL_OW 88
// dwait ( 0 0$1 ) ;
10891: LD_INT 35
10893: PPUSH
10894: CALL_OW 68
// YouLost ( SelfAttack ) ;
10898: LD_STRING SelfAttack
10900: PPUSH
10901: CALL_OW 104
// DialogueOff ;
10905: CALL_OW 7
// end ;
10909: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10910: LD_INT 22
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 2
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 69
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_INT 3
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 21
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PPUSH
10963: CALL_OW 69
10967: GREATEREQUAL
10968: IFFALSE 10976
10970: PUSH
10971: LD_EXP 6
10975: AND
10976: IFFALSE 11146
10978: GO 10980
10980: DISABLE
// begin hasToBuildTank := false ;
10981: LD_ADDR_EXP 11
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// blockNorth := false ;
10989: LD_ADDR_EXP 7
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// InGameOn ;
10997: CALL_OW 8
// wait ( 0 0$2 ) ;
11001: LD_INT 70
11003: PPUSH
11004: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
11008: LD_INT 106
11010: PPUSH
11011: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
11015: LD_EXP 40
11019: PPUSH
11020: LD_INT 65
11022: PPUSH
11023: LD_INT 97
11025: PPUSH
11026: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
11030: LD_EXP 40
11034: PPUSH
11035: LD_EXP 34
11039: PPUSH
11040: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
11044: LD_EXP 34
11048: PPUSH
11049: LD_STRING D12-Bur-1
11051: PPUSH
11052: CALL_OW 88
// wait ( 0 0$1 ) ;
11056: LD_INT 35
11058: PPUSH
11059: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D12-Pla-1
11070: PPUSH
11071: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11075: LD_EXP 34
11079: PPUSH
11080: LD_STRING D12-Bur-2
11082: PPUSH
11083: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11087: LD_EXP 40
11091: PPUSH
11092: LD_STRING D12-Pla-2
11094: PPUSH
11095: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11099: LD_EXP 34
11103: PPUSH
11104: LD_STRING D12-Bur-3
11106: PPUSH
11107: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11111: LD_EXP 40
11115: PPUSH
11116: LD_STRING D12-Pla-3
11118: PPUSH
11119: CALL_OW 88
// hasAllTanks := true ;
11123: LD_ADDR_EXP 14
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// InGameOff ;
11131: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
11135: LD_STRING M6
11137: PPUSH
11138: CALL_OW 337
// PrepareAmerican ;
11142: CALL 4313 0 0
// end ;
11146: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
11147: LD_EXP 17
11151: IFFALSE 12928
11153: GO 11155
11155: DISABLE
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
// begin PrepareAmericanTrap ;
11165: CALL 5113 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
11169: LD_ADDR_VAR 0 2
11173: PUSH
11174: LD_EXP 48
11178: PPUSH
11179: LD_INT 26
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 72
11193: PUSH
11194: LD_INT 1
11196: ARRAY
11197: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
11198: LD_INT 22
11200: PUSH
11201: LD_INT 3
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 3
11210: PUSH
11211: LD_INT 21
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 60
11227: PUSH
11228: EMPTY
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 69
11240: PPUSH
11241: CALL_OW 141
// InGameOn ;
11245: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
11249: LD_INT 69
11251: PPUSH
11252: LD_INT 22
11254: PPUSH
11255: CALL_OW 86
// wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// DialogueOn ;
11266: CALL_OW 6
// game_speed := 4 ;
11270: LD_ADDR_OWVAR 65
11274: PUSH
11275: LD_INT 4
11277: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
11278: LD_VAR 0 2
11282: PPUSH
11283: LD_STRING D13-Sol1-1
11285: PPUSH
11286: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
11290: LD_EXP 36
11294: PPUSH
11295: LD_STRING D13-Bel-1
11297: PPUSH
11298: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11302: LD_EXP 38
11306: PPUSH
11307: LD_STRING D13-Kur-1
11309: PPUSH
11310: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
11314: LD_INT 10
11316: PPUSH
11317: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
11321: LD_EXP 36
11325: PPUSH
11326: LD_STRING D13-Bel-2
11328: PPUSH
11329: CALL_OW 94
// DialogueOff ;
11333: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11337: LD_EXP 36
11341: PPUSH
11342: LD_INT 76
11344: PPUSH
11345: LD_INT 20
11347: PPUSH
11348: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11352: LD_EXP 45
11356: PPUSH
11357: LD_INT 72
11359: PPUSH
11360: LD_INT 20
11362: PPUSH
11363: CALL_OW 111
// wait ( 0 0$2 ) ;
11367: LD_INT 70
11369: PPUSH
11370: CALL_OW 67
// for i in usTrapForces do
11374: LD_ADDR_VAR 0 1
11378: PUSH
11379: LD_EXP 48
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11418
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11387: LD_VAR 0 1
11391: PPUSH
11392: LD_INT 7
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_EXP 36
11411: PPUSH
11412: CALL_OW 119
// end ;
11416: GO 11384
11418: POP
11419: POP
// wait ( 0 0$0.3 ) ;
11420: LD_INT 10
11422: PPUSH
11423: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11427: LD_EXP 48
11431: PPUSH
11432: LD_INT 65
11434: PPUSH
11435: LD_INT 18
11437: PPUSH
11438: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11449: LD_EXP 48
11453: PPUSH
11454: LD_INT 101
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 72
11468: PUSH
11469: LD_INT 3
11471: GREATER
11472: IFFALSE 11442
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11474: LD_INT 65
11476: PPUSH
11477: LD_INT 18
11479: PPUSH
11480: LD_INT 3
11482: PPUSH
11483: LD_INT 26
11485: NEG
11486: PPUSH
11487: CALL_OW 330
// DialogueOn ;
11491: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_STRING D14-Sol1-1
11502: PPUSH
11503: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11507: LD_EXP 36
11511: PPUSH
11512: LD_STRING D14-Bel-1
11514: PPUSH
11515: CALL_OW 88
// DialogueOff ;
11519: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11523: LD_INT 65
11525: PPUSH
11526: LD_INT 18
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11536: LD_EXP 45
11540: PPUSH
11541: LD_INT 31
11543: PPUSH
11544: LD_INT 9
11546: PPUSH
11547: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11551: LD_EXP 48
11555: PPUSH
11556: LD_INT 50
11558: PPUSH
11559: LD_INT 16
11561: PPUSH
11562: CALL_OW 174
// wait ( 0 0$2 ) ;
11566: LD_INT 70
11568: PPUSH
11569: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11573: LD_ADDR_VAR 0 6
11577: PUSH
11578: LD_EXP 36
11582: PPUSH
11583: CALL_OW 310
11587: ST_TO_ADDR
// if not belkovTank then
11588: LD_VAR 0 6
11592: NOT
11593: IFFALSE 11633
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11595: LD_ADDR_VAR 0 6
11599: PUSH
11600: LD_INT 22
11602: PUSH
11603: LD_INT 6
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 69
11628: PUSH
11629: LD_INT 1
11631: ARRAY
11632: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11633: LD_EXP 36
11637: PPUSH
11638: LD_INT 58
11640: PPUSH
11641: LD_INT 21
11643: PPUSH
11644: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11648: LD_EXP 36
11652: PPUSH
11653: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11657: LD_EXP 36
11661: PPUSH
11662: LD_INT 53
11664: PPUSH
11665: LD_INT 18
11667: PPUSH
11668: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11672: LD_EXP 36
11676: PPUSH
11677: LD_INT 31
11679: PPUSH
11680: LD_INT 9
11682: PPUSH
11683: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11687: LD_INT 35
11689: PPUSH
11690: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11694: LD_ADDR_VAR 0 1
11698: PUSH
11699: LD_EXP 36
11703: PUSH
11704: LD_EXP 45
11708: UNION
11709: PUSH
11710: LD_VAR 0 6
11714: UNION
11715: PUSH
11716: FOR_IN
11717: IFFALSE 11748
// if GetLives ( i ) < 800 then
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL_OW 256
11728: PUSH
11729: LD_INT 800
11731: LESS
11732: IFFALSE 11746
// SetLives ( i , 800 ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_INT 800
11741: PPUSH
11742: CALL_OW 234
11746: GO 11716
11748: POP
11749: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11750: LD_EXP 36
11754: PPUSH
11755: LD_INT 31
11757: PPUSH
11758: LD_INT 9
11760: PPUSH
11761: CALL_OW 297
11765: PUSH
11766: LD_INT 4
11768: LESS
11769: IFFALSE 11687
// for i := 1 to Difficulty do
11771: LD_ADDR_VAR 0 1
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_OWVAR 67
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11829
// if i <= belkovTeam then
11789: LD_VAR 0 1
11793: PUSH
11794: LD_EXP 45
11798: LESSEQUAL
11799: IFFALSE 11827
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11801: LD_EXP 45
11805: PUSH
11806: LD_VAR 0 1
11810: ARRAY
11811: PPUSH
11812: LD_INT 600
11814: PPUSH
11815: LD_INT 800
11817: PPUSH
11818: CALL_OW 12
11822: PPUSH
11823: CALL_OW 234
11827: GO 11786
11829: POP
11830: POP
// SetLives ( Belkov , 820 ) ;
11831: LD_EXP 36
11835: PPUSH
11836: LD_INT 820
11838: PPUSH
11839: CALL_OW 234
// InGameOff ;
11843: CALL_OW 9
// DialogueOn ;
11847: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11851: LD_EXP 36
11855: PPUSH
11856: LD_STRING D14-Bel-1a
11858: PPUSH
11859: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11863: LD_EXP 38
11867: PPUSH
11868: LD_STRING D14-Kur-1
11870: PPUSH
11871: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11875: LD_EXP 36
11879: PPUSH
11880: LD_STRING D14-Bel-2
11882: PPUSH
11883: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11887: LD_EXP 38
11891: PPUSH
11892: LD_STRING D14-Kur-2
11894: PPUSH
11895: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11899: LD_EXP 34
11903: PPUSH
11904: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11908: LD_EXP 34
11912: PPUSH
11913: LD_STRING D14a-Bur-1
11915: PPUSH
11916: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11920: LD_EXP 40
11924: PPUSH
11925: LD_STRING D14a-Pla-1
11927: PPUSH
11928: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11932: LD_EXP 34
11936: PPUSH
11937: LD_STRING D14a-Bur-2
11939: PPUSH
11940: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11944: LD_EXP 40
11948: PPUSH
11949: LD_STRING D14a-Pla-2
11951: PPUSH
11952: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11956: LD_EXP 34
11960: PPUSH
11961: LD_STRING D14a-Bur-3
11963: PPUSH
11964: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11968: LD_EXP 40
11972: PPUSH
11973: LD_STRING D14a-Pla-3
11975: PPUSH
11976: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11980: LD_EXP 34
11984: PPUSH
11985: LD_STRING D14a-Bur-4
11987: PPUSH
11988: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11992: LD_EXP 40
11996: PPUSH
11997: LD_STRING D14a-Pla-4
11999: PPUSH
12000: CALL_OW 88
// DialogueOff ;
12004: CALL_OW 7
// belkovTrapped := true ;
12008: LD_ADDR_EXP 18
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
12016: LD_EXP 48
12020: PPUSH
12021: LD_INT 68
12023: PPUSH
12024: LD_INT 16
12026: PPUSH
12027: CALL_OW 111
// if belkovTank then
12031: LD_VAR 0 6
12035: IFFALSE 12074
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
12037: LD_EXP 48
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: PPUSH
12046: LD_VAR 0 6
12050: PPUSH
12051: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
12055: LD_EXP 48
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: LD_INT 69
12066: PPUSH
12067: LD_INT 20
12069: PPUSH
12070: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
12074: LD_EXP 36
12078: PPUSH
12079: LD_INT 40
12081: PPUSH
12082: LD_INT 17
12084: PPUSH
12085: CALL_OW 111
// AddComHold ( Belkov ) ;
12089: LD_EXP 36
12093: PPUSH
12094: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] , [ 41 , 16 ] ] ;
12098: LD_ADDR_VAR 0 3
12102: PUSH
12103: LD_INT 44
12105: PUSH
12106: LD_INT 18
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 42
12115: PUSH
12116: LD_INT 16
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 40
12125: PUSH
12126: LD_INT 15
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 44
12135: PUSH
12136: LD_INT 20
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 42
12145: PUSH
12146: LD_INT 20
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 42
12155: PUSH
12156: LD_INT 12
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 42
12165: PUSH
12166: LD_INT 8
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 41
12175: PUSH
12176: LD_INT 16
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
12193: LD_ADDR_VAR 0 1
12197: PUSH
12198: LD_EXP 45
12202: PPUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 1
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12285
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: LD_VAR 0 3
12230: PUSH
12231: LD_INT 1
12233: ARRAY
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 1
12246: ARRAY
12247: PUSH
12248: LD_INT 2
12250: ARRAY
12251: PPUSH
12252: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
12256: LD_ADDR_VAR 0 3
12260: PUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 3
12273: ST_TO_ADDR
// AddComCrawl ( i ) ;
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 197
// end ;
12283: GO 12218
12285: POP
12286: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
12287: LD_EXP 45
12291: PPUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 4
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 72
12306: IFFALSE 12338
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
12308: LD_EXP 45
12312: PPUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: PPUSH
12328: LD_INT 38
12330: PPUSH
12331: LD_INT 18
12333: PPUSH
12334: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12338: LD_ADDR_VAR 0 7
12342: PUSH
12343: LD_INT 9450
12345: PUSH
12346: LD_INT 8400
12348: PUSH
12349: LD_INT 6650
12351: PUSH
12352: LD_INT 5250
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_OWVAR 67
12365: ARRAY
12366: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12367: LD_INT 35
12369: PPUSH
12370: CALL_OW 67
// timer := timer - 0 0$1 ;
12374: LD_ADDR_VAR 0 7
12378: PUSH
12379: LD_VAR 0 7
12383: PUSH
12384: LD_INT 35
12386: MINUS
12387: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12388: LD_INT 19
12390: PPUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 70
12405: IFFALSE 12415
// timer := 0 0$0 ;
12407: LD_ADDR_VAR 0 7
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// until timer <= 0 ;
12415: LD_VAR 0 7
12419: PUSH
12420: LD_INT 0
12422: LESSEQUAL
12423: IFFALSE 12367
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12425: LD_EXP 48
12429: PPUSH
12430: LD_INT 50
12432: PUSH
12433: EMPTY
12434: LIST
12435: PPUSH
12436: CALL_OW 72
12440: NOT
12441: IFFALSE 12445
// exit ;
12443: GO 12928
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12445: LD_ADDR_VAR 0 4
12449: PUSH
12450: LD_EXP 48
12454: PPUSH
12455: LD_INT 25
12457: PUSH
12458: LD_INT 1
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 54
12470: PUSH
12471: EMPTY
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12487: LD_ADDR_VAR 0 5
12491: PUSH
12492: LD_EXP 48
12496: PPUSH
12497: LD_INT 25
12499: PUSH
12500: LD_INT 4
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: LD_INT 54
12512: PUSH
12513: EMPTY
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 72
12528: ST_TO_ADDR
// for i in sol do
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_VAR 0 4
12538: PUSH
12539: FOR_IN
12540: IFFALSE 12556
// SetTag ( i , 0 ) ;
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 109
12554: GO 12539
12556: POP
12557: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_INT 60
12565: PPUSH
12566: LD_INT 8
12568: PPUSH
12569: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12573: LD_INT 22
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 21
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: IFFALSE 12642
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12603: LD_INT 22
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 21
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 69
12631: PPUSH
12632: LD_INT 53
12634: PPUSH
12635: LD_INT 24
12637: PPUSH
12638: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12642: LD_INT 18
12644: PPUSH
12645: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12649: LD_ADDR_VAR 0 4
12653: PUSH
12654: LD_EXP 48
12658: PPUSH
12659: LD_INT 25
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 50
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: LD_INT 54
12680: PUSH
12681: EMPTY
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 72
12697: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12698: LD_VAR 0 4
12702: PPUSH
12703: LD_INT 0
12705: PPUSH
12706: CALL 53403 0 2
12710: PUSH
12711: LD_VAR 0 4
12715: EQUAL
12716: IFFALSE 12755
// begin wait ( 0 0$3 ) ;
12718: LD_INT 105
12720: PPUSH
12721: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12725: LD_VAR 0 4
12729: PPUSH
12730: LD_INT 41
12732: PPUSH
12733: LD_INT 18
12735: PPUSH
12736: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12740: LD_VAR 0 5
12744: PPUSH
12745: LD_INT 60
12747: PPUSH
12748: LD_INT 8
12750: PPUSH
12751: CALL_OW 111
// end ; for i in sol do
12755: LD_ADDR_VAR 0 1
12759: PUSH
12760: LD_VAR 0 4
12764: PUSH
12765: FOR_IN
12766: IFFALSE 12841
// if GetLives ( i ) < 800 then
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 256
12777: PUSH
12778: LD_INT 800
12780: LESS
12781: IFFALSE 12812
// begin SetTag ( i , 1 ) ;
12783: LD_VAR 0 1
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12795: LD_VAR 0 1
12799: PPUSH
12800: LD_INT 60
12802: PPUSH
12803: LD_INT 8
12805: PPUSH
12806: CALL_OW 111
// end else
12810: GO 12839
// if GetLives ( i ) = 1000 then
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 256
12821: PUSH
12822: LD_INT 1000
12824: EQUAL
12825: IFFALSE 12839
// SetTag ( i , 0 ) ;
12827: LD_VAR 0 1
12831: PPUSH
12832: LD_INT 0
12834: PPUSH
12835: CALL_OW 109
12839: GO 12765
12841: POP
12842: POP
// until belkovDied or not sol ;
12843: LD_EXP 19
12847: IFTRUE 12856
12849: PUSH
12850: LD_VAR 0 4
12854: NOT
12855: OR
12856: IFFALSE 12642
// if not sol then
12858: LD_VAR 0 4
12862: NOT
12863: IFFALSE 12867
// exit ;
12865: GO 12928
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12867: LD_VAR 0 4
12871: PUSH
12872: LD_VAR 0 5
12876: ADD
12877: PPUSH
12878: LD_INT 56
12880: PPUSH
12881: LD_INT 25
12883: PPUSH
12884: CALL_OW 111
// wait ( 0 0$30 ) ;
12888: LD_INT 1050
12890: PPUSH
12891: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12895: LD_EXP 48
12899: PPUSH
12900: LD_INT 66
12902: PPUSH
12903: LD_INT 96
12905: PPUSH
12906: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12910: LD_VAR 0 5
12914: PPUSH
12915: LD_VAR 0 4
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PPUSH
12924: CALL_OW 112
// end ;
12928: PPOPN 7
12930: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12931: LD_EXP 18
12935: IFFALSE 12944
12937: PUSH
12938: LD_EXP 19
12942: NOT
12943: AND
12944: IFFALSE 12965
12946: PUSH
12947: LD_INT 9
12949: PPUSH
12950: LD_INT 22
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 70
12964: AND
12965: IFFALSE 13285
12967: GO 12969
12969: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12970: LD_STRING QAttackAm
12972: PPUSH
12973: CALL_OW 97
12977: PUSH
12978: LD_INT 1
12980: DOUBLE
12981: EQUAL
12982: IFTRUE 12986
12984: GO 13053
12986: POP
// begin initiative := true ;
12987: LD_ADDR_EXP 31
12991: PUSH
12992: LD_INT 1
12994: ST_TO_ADDR
// DialogueOn ;
12995: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12999: LD_EXP 34
13003: PPUSH
13004: LD_STRING D17-Bur-1
13006: PPUSH
13007: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
13011: LD_EXP 40
13015: PPUSH
13016: LD_STRING D17-Pla-1
13018: PPUSH
13019: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
13023: LD_EXP 34
13027: PPUSH
13028: LD_STRING D17-Bur-2
13030: PPUSH
13031: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
13035: LD_EXP 40
13039: PPUSH
13040: LD_STRING D17-Pla-2
13042: PPUSH
13043: CALL_OW 94
// DialogueOff ;
13047: CALL_OW 7
// end ; 2 :
13051: GO 13215
13053: LD_INT 2
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 13153
13061: POP
// begin initiative := true ;
13062: LD_ADDR_EXP 31
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// DialogueOn ;
13070: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13074: LD_EXP 34
13078: PPUSH
13079: LD_STRING D18-Bur-1
13081: PPUSH
13082: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13086: LD_EXP 40
13090: PPUSH
13091: LD_STRING D18-Pla-1
13093: PPUSH
13094: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13098: LD_EXP 34
13102: PPUSH
13103: LD_STRING D18-Bur-2
13105: PPUSH
13106: CALL_OW 88
// if not reinforcementsGained then
13110: LD_EXP 25
13114: NOT
13115: IFFALSE 13135
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
13117: LD_EXP 40
13121: PPUSH
13122: LD_STRING D18-Pla-2
13124: PPUSH
13125: CALL_OW 94
// SendReinforcements ;
13129: CALL 3644 0 0
// end else
13133: GO 13147
// SayRadio ( Platonov , D22-Pla-1b ) ;
13135: LD_EXP 40
13139: PPUSH
13140: LD_STRING D22-Pla-1b
13142: PPUSH
13143: CALL_OW 94
// DialogueOff ;
13147: CALL_OW 7
// end ; 3 :
13151: GO 13215
13153: LD_INT 3
13155: DOUBLE
13156: EQUAL
13157: IFTRUE 13161
13159: GO 13214
13161: POP
// begin if IsOk ( Gnyevko ) then
13162: LD_EXP 35
13166: PPUSH
13167: CALL_OW 302
13171: IFFALSE 13187
// Say ( Gnyevko , D19A-Gny-1 ) else
13173: LD_EXP 35
13177: PPUSH
13178: LD_STRING D19A-Gny-1
13180: PPUSH
13181: CALL_OW 88
13185: GO 13210
// if IsOk ( Kovalyuk ) then
13187: LD_EXP 39
13191: PPUSH
13192: CALL_OW 302
13196: IFFALSE 13210
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13198: LD_EXP 39
13202: PPUSH
13203: LD_STRING D19A-Kov-1
13205: PPUSH
13206: CALL_OW 88
// exit ;
13210: GO 13285
// end ; end ;
13212: GO 13215
13214: POP
// if IsOk ( Gnyevko ) then
13215: LD_EXP 35
13219: PPUSH
13220: CALL_OW 302
13224: IFFALSE 13250
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13226: LD_EXP 35
13230: PPUSH
13231: LD_STRING D19-Gny-1
13233: PPUSH
13234: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13238: LD_EXP 34
13242: PPUSH
13243: LD_STRING D19-Bur-1
13245: PPUSH
13246: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
13250: LD_EXP 39
13254: PPUSH
13255: CALL_OW 302
13259: IFFALSE 13285
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13261: LD_EXP 39
13265: PPUSH
13266: LD_STRING D19-Kov-1
13268: PPUSH
13269: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13273: LD_EXP 34
13277: PPUSH
13278: LD_STRING D19-Bur-2
13280: PPUSH
13281: CALL_OW 88
// end ; end ;
13285: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
13286: LD_EXP 18
13290: IFFALSE 13299
13292: PUSH
13293: LD_EXP 19
13297: NOT
13298: AND
13299: IFFALSE 13320
13301: PUSH
13302: LD_INT 16
13304: PPUSH
13305: LD_INT 22
13307: PUSH
13308: LD_INT 3
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PPUSH
13315: CALL_OW 70
13319: AND
13320: IFFALSE 13550
13322: GO 13324
13324: DISABLE
// begin case Query ( QAttackBw ) of 1 :
13325: LD_STRING QAttackBw
13327: PPUSH
13328: CALL_OW 97
13332: PUSH
13333: LD_INT 1
13335: DOUBLE
13336: EQUAL
13337: IFTRUE 13341
13339: GO 13384
13341: POP
// begin initiative := true ;
13342: LD_ADDR_EXP 31
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// DialogueOn ;
13350: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13354: LD_EXP 34
13358: PPUSH
13359: LD_STRING D21-Bur-1
13361: PPUSH
13362: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13366: LD_EXP 40
13370: PPUSH
13371: LD_STRING D21-Pla-1
13373: PPUSH
13374: CALL_OW 94
// DialogueOff ;
13378: CALL_OW 7
// end ; 2 :
13382: GO 13501
13384: LD_INT 2
13386: DOUBLE
13387: EQUAL
13388: IFTRUE 13392
13390: GO 13489
13392: POP
// begin initiative := true ;
13393: LD_ADDR_EXP 31
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// DialogueOn ;
13401: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13405: LD_EXP 34
13409: PPUSH
13410: LD_STRING D22-Bur-1
13412: PPUSH
13413: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13417: LD_EXP 25
13421: NOT
13422: IFFALSE 13430
13424: PUSH
13425: LD_EXP 22
13429: AND
13430: IFFALSE 13450
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13432: LD_EXP 40
13436: PPUSH
13437: LD_STRING D22-Pla-1
13439: PPUSH
13440: CALL_OW 94
// SendReinforcements ;
13444: CALL 3644 0 0
// end else
13448: GO 13483
// if not westOutpostDestroyed then
13450: LD_EXP 22
13454: NOT
13455: IFFALSE 13471
// SayRadio ( Platonov , D22-Pla-1a ) else
13457: LD_EXP 40
13461: PPUSH
13462: LD_STRING D22-Pla-1a
13464: PPUSH
13465: CALL_OW 94
13469: GO 13483
// SayRadio ( Platonov , D22-Pla-1b ) ;
13471: LD_EXP 40
13475: PPUSH
13476: LD_STRING D22-Pla-1b
13478: PPUSH
13479: CALL_OW 94
// DialogueOff ;
13483: CALL_OW 7
// end ; 3 :
13487: GO 13501
13489: LD_INT 3
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13500
13497: POP
// ; end ;
13498: GO 13501
13500: POP
// ChangeMissionObjectives ( M9 ) ;
13501: LD_STRING M9
13503: PPUSH
13504: CALL_OW 337
// wait ( 0 0$1 ) ;
13508: LD_INT 35
13510: PPUSH
13511: CALL_OW 67
// if IsOk ( Gnyevko ) then
13515: LD_EXP 35
13519: PPUSH
13520: CALL_OW 302
13524: IFFALSE 13550
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13526: LD_EXP 35
13530: PPUSH
13531: LD_STRING D23-Gny-1
13533: PPUSH
13534: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13538: LD_EXP 34
13542: PPUSH
13543: LD_STRING D23-Bur-1
13545: PPUSH
13546: CALL_OW 88
// end ; end ;
13550: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13551: LD_EXP 18
13555: IFFALSE 13563
13557: PUSH
13558: LD_EXP 19
13562: AND
13563: IFFALSE 13572
13565: PUSH
13566: LD_EXP 28
13570: NOT
13571: AND
13572: IFFALSE 13601
13574: PUSH
13575: LD_EXP 45
13579: PPUSH
13580: LD_INT 91
13582: PUSH
13583: LD_EXP 34
13587: PUSH
13588: LD_INT 8
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: AND
13601: IFFALSE 13645
13603: GO 13605
13605: DISABLE
13606: LD_INT 0
13608: PPUSH
// begin for i in belkovTeam do
13609: LD_ADDR_VAR 0 1
13613: PUSH
13614: LD_EXP 45
13618: PUSH
13619: FOR_IN
13620: IFFALSE 13636
// SetSide ( i , 3 ) ;
13622: LD_VAR 0 1
13626: PPUSH
13627: LD_INT 3
13629: PPUSH
13630: CALL_OW 235
13634: GO 13619
13636: POP
13637: POP
// ChangeMissionObjectives ( M9a ) ;
13638: LD_STRING M9a
13640: PPUSH
13641: CALL_OW 337
// end ;
13645: PPOPN 1
13647: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13648: LD_EXP 34
13652: PPUSH
13653: LD_EXP 36
13657: PPUSH
13658: CALL_OW 296
13662: PUSH
13663: LD_INT 6
13665: LESS
13666: IFFALSE 13674
13668: PUSH
13669: LD_EXP 18
13673: AND
13674: IFFALSE 13687
13676: PUSH
13677: LD_EXP 36
13681: PPUSH
13682: CALL_OW 302
13686: AND
13687: IFFALSE 13699
13689: PUSH
13690: LD_INT 3
13692: PPUSH
13693: CALL_OW 463
13697: NOT
13698: AND
13699: IFFALSE 14016
13701: GO 13703
13703: DISABLE
13704: LD_INT 0
13706: PPUSH
13707: PPUSH
// begin InGameOn ;
13708: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13712: LD_EXP 34
13716: PPUSH
13717: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13721: LD_EXP 34
13725: PPUSH
13726: LD_INT 37
13728: PPUSH
13729: LD_INT 17
13731: PPUSH
13732: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13736: LD_EXP 34
13740: PPUSH
13741: LD_EXP 36
13745: PPUSH
13746: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13750: LD_EXP 36
13754: PPUSH
13755: LD_EXP 34
13759: PPUSH
13760: CALL_OW 119
// p := 0 ;
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13772: LD_INT 35
13774: PPUSH
13775: CALL_OW 67
// p := p + 1 ;
13779: LD_ADDR_VAR 0 2
13783: PUSH
13784: LD_VAR 0 2
13788: PUSH
13789: LD_INT 1
13791: PLUS
13792: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13793: LD_EXP 34
13797: PPUSH
13798: LD_EXP 36
13802: PPUSH
13803: CALL_OW 296
13807: PUSH
13808: LD_INT 4
13810: LESS
13811: IFTRUE 13823
13813: PUSH
13814: LD_VAR 0 2
13818: PUSH
13819: LD_INT 6
13821: GREATER
13822: OR
13823: IFFALSE 13772
// ComTurnUnit ( Burlak , Belkov ) ;
13825: LD_EXP 34
13829: PPUSH
13830: LD_EXP 36
13834: PPUSH
13835: CALL_OW 119
// DialogueOn ;
13839: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13843: LD_EXP 36
13847: PPUSH
13848: LD_STRING D24-Bel-1
13850: PPUSH
13851: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13855: LD_EXP 34
13859: PPUSH
13860: LD_STRING D24-Bur-1
13862: PPUSH
13863: CALL_OW 88
// if belkovBrother then
13867: LD_EXP 32
13871: IFFALSE 13885
// Say ( Burlak , D24-Bur-1a ) ;
13873: LD_EXP 34
13877: PPUSH
13878: LD_STRING D24-Bur-1a
13880: PPUSH
13881: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13885: LD_EXP 36
13889: PPUSH
13890: LD_STRING D24-Bel-2
13892: PPUSH
13893: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13897: LD_EXP 34
13901: PPUSH
13902: LD_STRING D24-Bur-2
13904: PPUSH
13905: CALL_OW 88
// if vehCaptured then
13909: LD_EXP 16
13913: IFFALSE 13927
// Say ( Burlak , D24-Bur-2a ) ;
13915: LD_EXP 34
13919: PPUSH
13920: LD_STRING D24-Bur-2a
13922: PPUSH
13923: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13927: LD_EXP 40
13931: PPUSH
13932: LD_STRING D24-Pla-2
13934: PPUSH
13935: CALL_OW 94
// if not westOutpostDestroyed then
13939: LD_EXP 22
13943: NOT
13944: IFFALSE 13958
// SayRadio ( Platonov , D24-Pla-2a ) ;
13946: LD_EXP 40
13950: PPUSH
13951: LD_STRING D24-Pla-2a
13953: PPUSH
13954: CALL_OW 94
// DialogueOff ;
13958: CALL_OW 7
// InGameOff ;
13962: CALL_OW 9
// belkovSaved := true ;
13966: LD_ADDR_EXP 28
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_EXP 45
13983: PUSH
13984: LD_EXP 36
13988: UNION
13989: PUSH
13990: FOR_IN
13991: IFFALSE 14007
// SetSide ( i , 3 ) ;
13993: LD_VAR 0 1
13997: PPUSH
13998: LD_INT 3
14000: PPUSH
14001: CALL_OW 235
14005: GO 13990
14007: POP
14008: POP
// ChangeMissionObjectives ( M9a ) ;
14009: LD_STRING M9a
14011: PPUSH
14012: CALL_OW 337
// end ;
14016: PPOPN 2
14018: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
14019: LD_INT 3
14021: PPUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 95
14034: PUSH
14035: LD_INT 8
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PPUSH
14046: CALL_OW 69
14050: PPUSH
14051: CALL 59303 0 2
14055: IFFALSE 14240
14057: GO 14059
14059: DISABLE
// begin DialogueOn ;
14060: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
14064: LD_INT 49
14066: PPUSH
14067: LD_INT 57
14069: PPUSH
14070: LD_INT 3
14072: PPUSH
14073: LD_INT 12
14075: NEG
14076: PPUSH
14077: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
14081: LD_INT 49
14083: PPUSH
14084: LD_INT 57
14086: PPUSH
14087: LD_INT 3
14089: PPUSH
14090: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
14094: LD_INT 49
14096: PPUSH
14097: LD_INT 57
14099: PPUSH
14100: CALL_OW 84
// if not eastOutpostDiscovered then
14104: LD_EXP 21
14108: NOT
14109: IFFALSE 14149
// begin Say ( Burlak , D15-Bur-1 ) ;
14111: LD_EXP 34
14115: PPUSH
14116: LD_STRING D15-Bur-1
14118: PPUSH
14119: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14123: LD_EXP 35
14127: PPUSH
14128: LD_STRING D15-Gny-1
14130: PPUSH
14131: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14135: LD_EXP 39
14139: PPUSH
14140: LD_STRING D15-Kov-1
14142: PPUSH
14143: CALL_OW 88
// end else
14147: GO 14185
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14149: LD_EXP 39
14153: PPUSH
14154: LD_STRING D16-Kov-1
14156: PPUSH
14157: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14161: LD_EXP 34
14165: PPUSH
14166: LD_STRING D16-Bur-1
14168: PPUSH
14169: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14173: LD_EXP 35
14177: PPUSH
14178: LD_STRING D16-Gny-1
14180: PPUSH
14181: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
14185: LD_EXP 34
14189: PPUSH
14190: LD_STRING D15-Bur-2
14192: PPUSH
14193: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
14197: LD_EXP 39
14201: PPUSH
14202: LD_STRING D15-Kov-2
14204: PPUSH
14205: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
14209: LD_EXP 34
14213: PPUSH
14214: LD_STRING D15-Bur-3
14216: PPUSH
14217: CALL_OW 88
// DialogueOff ;
14221: CALL_OW 7
// westOutpostDiscovered := true ;
14225: LD_ADDR_EXP 20
14229: PUSH
14230: LD_INT 1
14232: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
14233: LD_STRING M7
14235: PPUSH
14236: CALL_OW 337
// end ;
14240: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
14241: LD_INT 3
14243: PPUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 95
14256: PUSH
14257: LD_INT 15
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: PPUSH
14273: CALL 59303 0 2
14277: IFFALSE 14418
14279: GO 14281
14281: DISABLE
// begin DialogueOn ;
14282: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
14286: LD_INT 95
14288: PPUSH
14289: LD_INT 65
14291: PPUSH
14292: LD_INT 3
14294: PPUSH
14295: LD_INT 12
14297: NEG
14298: PPUSH
14299: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
14303: LD_INT 95
14305: PPUSH
14306: LD_INT 65
14308: PPUSH
14309: LD_INT 3
14311: PPUSH
14312: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
14316: LD_INT 95
14318: PPUSH
14319: LD_INT 65
14321: PPUSH
14322: CALL_OW 84
// if westOutpostDiscovered then
14326: LD_EXP 20
14330: IFFALSE 14370
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14332: LD_EXP 39
14336: PPUSH
14337: LD_STRING D16-Kov-1
14339: PPUSH
14340: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14344: LD_EXP 34
14348: PPUSH
14349: LD_STRING D16-Bur-1
14351: PPUSH
14352: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14356: LD_EXP 35
14360: PPUSH
14361: LD_STRING D16-Gny-1
14363: PPUSH
14364: CALL_OW 88
// end else
14368: GO 14406
// begin Say ( Burlak , D15-Bur-1 ) ;
14370: LD_EXP 34
14374: PPUSH
14375: LD_STRING D15-Bur-1
14377: PPUSH
14378: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14382: LD_EXP 35
14386: PPUSH
14387: LD_STRING D15-Gny-1
14389: PPUSH
14390: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14394: LD_EXP 39
14398: PPUSH
14399: LD_STRING D15-Kov-1
14401: PPUSH
14402: CALL_OW 88
// end ; DialogueOff ;
14406: CALL_OW 7
// eastOutpostDiscovered := true ;
14410: LD_ADDR_EXP 21
14414: PUSH
14415: LD_INT 1
14417: ST_TO_ADDR
// end ;
14418: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14419: LD_INT 8
14421: PPUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 50
14434: PUSH
14435: EMPTY
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 70
14446: PUSH
14447: LD_INT 0
14449: EQUAL
14450: IFFALSE 14458
14452: PUSH
14453: LD_EXP 20
14457: AND
14458: IFFALSE 14502
14460: GO 14462
14462: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14463: LD_EXP 34
14467: PPUSH
14468: LD_STRING D20-Bur-1
14470: PPUSH
14471: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14475: LD_EXP 40
14479: PPUSH
14480: LD_STRING D20-Pla-1
14482: PPUSH
14483: CALL_OW 94
// westOutpostDestroyed := true ;
14487: LD_ADDR_EXP 22
14491: PUSH
14492: LD_INT 1
14494: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14495: LD_STRING M8
14497: PPUSH
14498: CALL_OW 337
// end ;
14502: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14503: LD_INT 15
14505: PPUSH
14506: LD_INT 22
14508: PUSH
14509: LD_INT 1
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 50
14518: PUSH
14519: EMPTY
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 70
14530: PUSH
14531: LD_INT 0
14533: EQUAL
14534: IFFALSE 14542
14536: PUSH
14537: LD_EXP 21
14541: AND
14542: IFFALSE 14672
14544: GO 14546
14546: DISABLE
14547: LD_INT 0
14549: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14550: LD_EXP 34
14554: PPUSH
14555: LD_STRING D20-Bur-1
14557: PPUSH
14558: CALL_OW 88
// SayRadio ( Platonov , D20a-Pla-1 ) ;
14562: LD_EXP 40
14566: PPUSH
14567: LD_STRING D20a-Pla-1
14569: PPUSH
14570: CALL_OW 94
// eastOutpostDestroyed := true ;
14574: LD_ADDR_EXP 23
14578: PUSH
14579: LD_INT 1
14581: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14582: LD_INT 35
14584: PPUSH
14585: CALL_OW 67
// stop_talking := true ;
14589: LD_ADDR_OWVAR 56
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14597: LD_ADDR_VAR 0 1
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 23
14614: PUSH
14615: LD_INT 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 21
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14662
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14645: LD_VAR 0 1
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: LD_INT 1500
14655: PPUSH
14656: CALL_OW 591
14660: GO 14642
14662: POP
14663: POP
// stop_talking := false ;
14664: LD_ADDR_OWVAR 56
14668: PUSH
14669: LD_INT 0
14671: ST_TO_ADDR
// end ;
14672: PPOPN 1
14674: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14675: LD_INT 19
14677: PPUSH
14678: LD_INT 22
14680: PUSH
14681: LD_INT 3
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 21
14690: PUSH
14691: LD_INT 2
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PPUSH
14702: CALL_OW 70
14706: IFFALSE 14814
14708: GO 14710
14710: DISABLE
// begin DialogueOn ;
14711: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14715: LD_INT 19
14717: PPUSH
14718: LD_INT 22
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 70
14746: PPUSH
14747: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14751: LD_EXP 34
14755: PPUSH
14756: LD_STRING D26-Bur-1
14758: PPUSH
14759: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14763: LD_EXP 39
14767: PPUSH
14768: LD_STRING D26-Kov-1
14770: PPUSH
14771: CALL_OW 88
// if IsOk ( Gnyevko ) then
14775: LD_EXP 35
14779: PPUSH
14780: CALL_OW 302
14784: IFFALSE 14810
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14786: LD_EXP 35
14790: PPUSH
14791: LD_STRING D26-Gny-1
14793: PPUSH
14794: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14798: LD_EXP 34
14802: PPUSH
14803: LD_STRING D26-Bur-2
14805: PPUSH
14806: CALL_OW 88
// end ; DialogueOff ;
14810: CALL_OW 7
// end ;
14814: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14815: LD_EXP 21
14819: IFFALSE 14828
14821: PUSH
14822: LD_EXP 23
14826: NOT
14827: AND
14828: IFFALSE 14874
14830: PUSH
14831: LD_INT 17
14833: PPUSH
14834: LD_INT 22
14836: PUSH
14837: LD_INT 3
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: LD_INT 24
14849: PUSH
14850: LD_INT 1000
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 70
14869: PUSH
14870: LD_INT 1
14872: GREATER
14873: AND
14874: IFFALSE 14939
14876: GO 14878
14878: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14879: LD_EXP 35
14883: PPUSH
14884: LD_STRING D16A-Gny-1
14886: PPUSH
14887: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14891: LD_EXP 39
14895: PPUSH
14896: LD_STRING D16A-Kov-1
14898: PPUSH
14899: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14903: LD_EXP 35
14907: PPUSH
14908: CALL_OW 302
14912: IFTRUE 14925
14914: PUSH
14915: LD_EXP 39
14919: PPUSH
14920: CALL_OW 302
14924: OR
14925: IFFALSE 14939
// Say ( Burlak , D16A-Bur-1 ) ;
14927: LD_EXP 34
14931: PPUSH
14932: LD_STRING D16A-Bur-1
14934: PPUSH
14935: CALL_OW 88
// end ;
14939: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14940: LD_INT 3
14942: PPUSH
14943: LD_INT 9
14945: PPUSH
14946: CALL_OW 294
14950: IFFALSE 14963
14952: GO 14954
14954: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14955: LD_ADDR_EXP 24
14959: PUSH
14960: LD_INT 1
14962: ST_TO_ADDR
// end ;
14963: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14964: LD_INT 3
14966: PPUSH
14967: LD_INT 10
14969: PPUSH
14970: CALL_OW 294
14974: IFFALSE 14994
14976: GO 14978
14978: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14979: LD_ADDR_EXP 27
14983: PUSH
14984: LD_EXP 27
14988: PPUSH
14989: CALL 57231 0 1
14993: ST_TO_ADDR
14994: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14995: LD_INT 3
14997: PPUSH
14998: LD_INT 11
15000: PPUSH
15001: CALL_OW 294
15005: IFFALSE 15025
15007: GO 15009
15009: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15010: LD_ADDR_EXP 27
15014: PUSH
15015: LD_EXP 27
15019: PPUSH
15020: CALL 57231 0 1
15024: ST_TO_ADDR
15025: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
15026: LD_INT 3
15028: PPUSH
15029: LD_INT 12
15031: PPUSH
15032: CALL_OW 294
15036: IFFALSE 15056
15038: GO 15040
15040: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15041: LD_ADDR_EXP 27
15045: PUSH
15046: LD_EXP 27
15050: PPUSH
15051: CALL 57231 0 1
15055: ST_TO_ADDR
15056: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
15057: LD_INT 3
15059: PPUSH
15060: LD_INT 13
15062: PPUSH
15063: CALL_OW 294
15067: IFFALSE 15087
15069: GO 15071
15071: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15072: LD_ADDR_EXP 27
15076: PUSH
15077: LD_EXP 27
15081: PPUSH
15082: CALL 57231 0 1
15086: ST_TO_ADDR
15087: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
15088: LD_INT 3
15090: PPUSH
15091: LD_INT 14
15093: PPUSH
15094: CALL_OW 294
15098: IFFALSE 15118
15100: GO 15102
15102: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15103: LD_ADDR_EXP 27
15107: PUSH
15108: LD_EXP 27
15112: PPUSH
15113: CALL 57231 0 1
15117: ST_TO_ADDR
15118: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
15119: LD_EXP 27
15123: PUSH
15124: LD_INT 5
15126: GREATEREQUAL
15127: IFFALSE 15135
15129: PUSH
15130: LD_EXP 14
15134: AND
15135: IFFALSE 15155
15137: GO 15139
15139: DISABLE
// begin allMapPointsSpotted := true ;
15140: LD_ADDR_EXP 26
15144: PUSH
15145: LD_INT 1
15147: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15148: LD_STRING M10
15150: PPUSH
15151: CALL_OW 337
// end ;
15155: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
15156: LD_EXP 26
15160: IFFALSE 15168
15162: PUSH
15163: LD_EXP 22
15167: AND
15168: IFFALSE 15180
15170: GO 15172
15172: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
15173: LD_STRING M10a
15175: PPUSH
15176: CALL_OW 337
// end ;
15180: END
// every 0 0$1 trigger hasAllTanks do var timer , tmp , burlakIsInsideBuilding , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
15181: LD_EXP 14
15185: IFFALSE 15910
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
// begin wasOutsideBeria := false ;
15199: LD_ADDR_VAR 0 5
15203: PUSH
15204: LD_INT 0
15206: ST_TO_ADDR
// wantToTalk := false ;
15207: LD_ADDR_VAR 0 4
15211: PUSH
15212: LD_INT 0
15214: ST_TO_ADDR
// westOutpostReported := false ;
15215: LD_ADDR_VAR 0 6
15219: PUSH
15220: LD_INT 0
15222: ST_TO_ADDR
// eastOutpostReported := false ;
15223: LD_ADDR_VAR 0 7
15227: PUSH
15228: LD_INT 0
15230: ST_TO_ADDR
// timer := 0 0$0 ;
15231: LD_ADDR_VAR 0 1
15235: PUSH
15236: LD_INT 0
15238: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
15239: LD_INT 70
15241: PPUSH
15242: CALL_OW 67
// burlakIsInsideBuilding := false ;
15246: LD_ADDR_VAR 0 3
15250: PUSH
15251: LD_INT 0
15253: ST_TO_ADDR
// tmp := IsInUnit ( Burlak ) ;
15254: LD_ADDR_VAR 0 2
15258: PUSH
15259: LD_EXP 34
15263: PPUSH
15264: CALL_OW 310
15268: ST_TO_ADDR
// if tmp then
15269: LD_VAR 0 2
15273: IFFALSE 15294
// burlakIsInsideBuilding := GetType ( tmp ) = unit_building ;
15275: LD_ADDR_VAR 0 3
15279: PUSH
15280: LD_VAR 0 2
15284: PPUSH
15285: CALL_OW 247
15289: PUSH
15290: LD_INT 3
15292: EQUAL
15293: ST_TO_ADDR
// if not burlakIsInsideBuilding then
15294: LD_VAR 0 3
15298: NOT
15299: IFFALSE 15315
// timer := timer + 0 0$2 ;
15301: LD_ADDR_VAR 0 1
15305: PUSH
15306: LD_VAR 0 1
15310: PUSH
15311: LD_INT 70
15313: PLUS
15314: ST_TO_ADDR
// if timer >= 0 0$30 then
15315: LD_VAR 0 1
15319: PUSH
15320: LD_INT 1050
15322: GREATEREQUAL
15323: IFFALSE 15333
// wantToTalk := true ;
15325: LD_ADDR_VAR 0 4
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 and not burlakIsInsideBuilding then
15333: LD_EXP 34
15337: PPUSH
15338: LD_EXP 40
15342: PPUSH
15343: CALL_OW 296
15347: PUSH
15348: LD_INT 9
15350: GREATER
15351: IFFALSE 15360
15353: PUSH
15354: LD_VAR 0 3
15358: NOT
15359: AND
15360: IFFALSE 15370
// wasOutsideBeria := true ;
15362: LD_ADDR_VAR 0 5
15366: PUSH
15367: LD_INT 1
15369: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
15370: LD_VAR 0 4
15374: IFFALSE 15382
15376: PUSH
15377: LD_VAR 0 5
15381: AND
15382: IFFALSE 15431
15384: PUSH
15385: LD_EXP 34
15389: PPUSH
15390: LD_EXP 40
15394: PPUSH
15395: CALL_OW 296
15399: PUSH
15400: LD_INT 8
15402: LESS
15403: IFTRUE 15430
15405: PUSH
15406: LD_EXP 34
15410: PPUSH
15411: CALL_OW 310
15415: PPUSH
15416: LD_EXP 40
15420: PPUSH
15421: CALL_OW 296
15425: PUSH
15426: LD_INT 8
15428: LESS
15429: OR
15430: AND
15431: IFFALSE 15795
// begin timer := 0 0$0 ;
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// wantToTalk := false ;
15441: LD_ADDR_VAR 0 4
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// wasOutsideBeria := false ;
15449: LD_ADDR_VAR 0 5
15453: PUSH
15454: LD_INT 0
15456: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15457: LD_EXP 40
15461: PPUSH
15462: CALL_OW 87
// DialogueOn ;
15466: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15470: LD_EXP 40
15474: PPUSH
15475: LD_STRING D25-Pla-1
15477: PPUSH
15478: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15482: LD_VAR 0 6
15486: NOT
15487: IFFALSE 15496
15489: PUSH
15490: LD_VAR 0 7
15494: NOT
15495: AND
15496: IFFALSE 15504
15498: PUSH
15499: LD_EXP 20
15503: AND
15504: IFFALSE 15512
15506: PUSH
15507: LD_EXP 21
15511: AND
15512: IFFALSE 15594
// begin westOutpostReported := true ;
15514: LD_ADDR_VAR 0 6
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// eastOutpostReported := true ;
15522: LD_ADDR_VAR 0 7
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15530: LD_EXP 34
15534: PPUSH
15535: LD_STRING D25-Bur-1
15537: PPUSH
15538: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15542: LD_EXP 24
15546: IFFALSE 15555
15548: PUSH
15549: LD_EXP 22
15553: NOT
15554: AND
15555: IFFALSE 15592
// begin Say ( Burlak , D25b-Bur-1 ) ;
15557: LD_EXP 34
15561: PPUSH
15562: LD_STRING D25b-Bur-1
15564: PPUSH
15565: CALL_OW 88
// if not reinforcementsGained then
15569: LD_EXP 25
15573: NOT
15574: IFFALSE 15592
// begin Say ( Platonov , D25b-Pla-1 ) ;
15576: LD_EXP 40
15580: PPUSH
15581: LD_STRING D25b-Pla-1
15583: PPUSH
15584: CALL_OW 88
// SendReinforcements ( ) ;
15588: CALL 3644 0 0
// end ; end ; end else
15592: GO 15791
// if not westOutpostReported and westOutpostDiscovered then
15594: LD_VAR 0 6
15598: NOT
15599: IFFALSE 15607
15601: PUSH
15602: LD_EXP 20
15606: AND
15607: IFFALSE 15681
// begin westOutpostReported := true ;
15609: LD_ADDR_VAR 0 6
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15617: LD_EXP 34
15621: PPUSH
15622: LD_STRING D25a-Bur-1b
15624: PPUSH
15625: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15629: LD_EXP 24
15633: IFFALSE 15642
15635: PUSH
15636: LD_EXP 22
15640: NOT
15641: AND
15642: IFFALSE 15679
// begin Say ( Burlak , D25b-Bur-1 ) ;
15644: LD_EXP 34
15648: PPUSH
15649: LD_STRING D25b-Bur-1
15651: PPUSH
15652: CALL_OW 88
// if not reinforcementsGained then
15656: LD_EXP 25
15660: NOT
15661: IFFALSE 15679
// begin Say ( Platonov , D25b-Pla-1 ) ;
15663: LD_EXP 40
15667: PPUSH
15668: LD_STRING D25b-Pla-1
15670: PPUSH
15671: CALL_OW 88
// SendReinforcements ( ) ;
15675: CALL 3644 0 0
// end ; end ; end else
15679: GO 15791
// if not eastOutpostReported and eastOutpostDiscovered then
15681: LD_VAR 0 7
15685: NOT
15686: IFFALSE 15694
15688: PUSH
15689: LD_EXP 21
15693: AND
15694: IFFALSE 15718
// begin eastOutpostReported := true ;
15696: LD_ADDR_VAR 0 7
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15704: LD_EXP 34
15708: PPUSH
15709: LD_STRING D25a-Bur-1a
15711: PPUSH
15712: CALL_OW 88
// end else
15716: GO 15791
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15718: LD_EXP 20
15722: NOT
15723: IFTRUE 15732
15725: PUSH
15726: LD_EXP 21
15730: NOT
15731: OR
15732: IFFALSE 15760
// begin Say ( Burlak , D25a-Bur-1 ) ;
15734: LD_EXP 34
15738: PPUSH
15739: LD_STRING D25a-Bur-1
15741: PPUSH
15742: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15746: LD_EXP 40
15750: PPUSH
15751: LD_STRING D25c-Pla-1
15753: PPUSH
15754: CALL_OW 88
// end else
15758: GO 15791
// if not allMapPointsSpotted then
15760: LD_EXP 26
15764: NOT
15765: IFFALSE 15791
// begin Say ( Burlak , D25a-Bur-1 ) ;
15767: LD_EXP 34
15771: PPUSH
15772: LD_STRING D25a-Bur-1
15774: PPUSH
15775: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15779: LD_EXP 40
15783: PPUSH
15784: LD_STRING D25c-Pla-1a
15786: PPUSH
15787: CALL_OW 88
// end ; DialogueOff ;
15791: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15795: LD_EXP 26
15799: IFFALSE 15807
15801: PUSH
15802: LD_EXP 22
15806: AND
15807: IFFALSE 15239
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15809: LD_INT 22
15811: PUSH
15812: LD_INT 3
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 21
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 91
15831: PUSH
15832: LD_EXP 40
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: IFFALSE 15899
// begin if not belkovDied and not belkovSaved then
15856: LD_EXP 19
15860: NOT
15861: IFFALSE 15870
15863: PUSH
15864: LD_EXP 28
15868: NOT
15869: AND
15870: IFFALSE 15893
// begin if Query ( QContMission ) = 1 then
15872: LD_STRING QContMission
15874: PPUSH
15875: CALL_OW 97
15879: PUSH
15880: LD_INT 1
15882: EQUAL
15883: IFFALSE 15891
// begin EndMission ;
15885: CALL 15995 0 0
// exit ;
15889: GO 15910
// end ; end else
15891: GO 15899
// begin EndMission ;
15893: CALL 15995 0 0
// exit ;
15897: GO 15910
// end ; end ; wait ( 0 0$10 ) ;
15899: LD_INT 350
15901: PPUSH
15902: CALL_OW 67
// until false ;
15906: LD_INT 0
15908: IFFALSE 15809
// end ;
15910: PPOPN 7
15912: END
// every 0 0$2 trigger not hasAllTanks do
15913: LD_EXP 14
15917: NOT
15918: IFFALSE 15994
15920: GO 15922
15922: DISABLE
// begin if IsOk ( Gnyevko ) then
15923: LD_EXP 35
15927: PPUSH
15928: CALL_OW 302
15932: IFFALSE 15958
// if SideShoot ( Gnyevko ) = 3 then
15934: LD_EXP 35
15938: PPUSH
15939: CALL_OW 503
15943: PUSH
15944: LD_INT 3
15946: EQUAL
15947: IFFALSE 15958
// begin YouLost ( SelfAttack ) ;
15949: LD_STRING SelfAttack
15951: PPUSH
15952: CALL_OW 104
// exit ;
15956: GO 15994
// end ; if IsOk ( Kovalyuk ) then
15958: LD_EXP 39
15962: PPUSH
15963: CALL_OW 302
15967: IFFALSE 15993
// if SideShoot ( Kovalyuk ) = 3 then
15969: LD_EXP 39
15973: PPUSH
15974: CALL_OW 503
15978: PUSH
15979: LD_INT 3
15981: EQUAL
15982: IFFALSE 15993
// begin YouLost ( SelfAttack ) ;
15984: LD_STRING SelfAttack
15986: PPUSH
15987: CALL_OW 104
// exit ;
15991: GO 15994
// end ; enable ;
15993: ENABLE
// end ;
15994: END
// function EndMission ; var i , tmp ; begin
15995: LD_INT 0
15997: PPUSH
15998: PPUSH
15999: PPUSH
// if initiative then
16000: LD_EXP 31
16004: IFFALSE 16018
// AddMedal ( Initiative , 1 ) else
16006: LD_STRING Initiative
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 101
16016: GO 16059
// begin SaveVariable ( 1 , 02_Selfish ) ;
16018: LD_INT 1
16020: PPUSH
16021: LD_STRING 02_Selfish
16023: PPUSH
16024: CALL_OW 39
// if not eastOutpostDestroyed then
16028: LD_EXP 23
16032: NOT
16033: IFFALSE 16048
// AddMedal ( Initiative , - 2 ) else
16035: LD_STRING Initiative
16037: PPUSH
16038: LD_INT 2
16040: NEG
16041: PPUSH
16042: CALL_OW 101
16046: GO 16059
// AddMedal ( Initiative , - 1 ) ;
16048: LD_STRING Initiative
16050: PPUSH
16051: LD_INT 1
16053: NEG
16054: PPUSH
16055: CALL_OW 101
// end ; SaveVariable ( belkovSaved , 02_belkovSaved ) ;
16059: LD_EXP 28
16063: PPUSH
16064: LD_STRING 02_belkovSaved
16066: PPUSH
16067: CALL_OW 39
// if not belkovDied and belkovSaved then
16071: LD_EXP 19
16075: NOT
16076: IFFALSE 16084
16078: PUSH
16079: LD_EXP 28
16083: AND
16084: IFFALSE 16098
// AddMedal ( Belkov , 1 ) else
16086: LD_STRING Belkov
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 101
16096: GO 16195
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
16098: LD_EXP 45
16102: PPUSH
16103: LD_INT 22
16105: PUSH
16106: LD_INT 3
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PPUSH
16113: CALL_OW 72
16117: IFFALSE 16131
// AddMedal ( Belkov , 2 ) else
16119: LD_STRING Belkov
16121: PPUSH
16122: LD_INT 2
16124: PPUSH
16125: CALL_OW 101
16129: GO 16195
// if belkovDied then
16131: LD_EXP 19
16135: IFFALSE 16150
// AddMedal ( Belkov , - 1 ) else
16137: LD_STRING Belkov
16139: PPUSH
16140: LD_INT 1
16142: NEG
16143: PPUSH
16144: CALL_OW 101
16148: GO 16195
// if not belkovSaved then
16150: LD_EXP 28
16154: NOT
16155: IFFALSE 16170
// AddMedal ( Belkov , - 2 ) else
16157: LD_STRING Belkov
16159: PPUSH
16160: LD_INT 2
16162: NEG
16163: PPUSH
16164: CALL_OW 101
16168: GO 16195
// if belkovDied and belkovSaved then
16170: LD_EXP 19
16174: IFFALSE 16182
16176: PUSH
16177: LD_EXP 28
16181: AND
16182: IFFALSE 16195
// AddMedal ( Belkov , - 3 ) ;
16184: LD_STRING Belkov
16186: PPUSH
16187: LD_INT 3
16189: NEG
16190: PPUSH
16191: CALL_OW 101
// if playerTeamDeadCounter = 0 then
16195: LD_EXP 30
16199: PUSH
16200: LD_INT 0
16202: EQUAL
16203: IFFALSE 16217
// AddMedal ( NoLosses , 1 ) else
16205: LD_STRING NoLosses
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: CALL_OW 101
16215: GO 16228
// AddMedal ( NoLosses , - 1 ) ;
16217: LD_STRING NoLosses
16219: PPUSH
16220: LD_INT 1
16222: NEG
16223: PPUSH
16224: CALL_OW 101
// GiveMedals ( Main ) ;
16228: LD_STRING Main
16230: PPUSH
16231: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
16235: LD_INT 22
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 23
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 21
16257: PUSH
16258: LD_INT 1
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: PPUSH
16270: CALL_OW 69
16274: PPUSH
16275: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
16279: LD_EXP 34
16283: PPUSH
16284: LD_EXP 3
16288: PUSH
16289: LD_STRING Burlak
16291: STR
16292: PPUSH
16293: CALL_OW 38
// if IsLive ( Gnyevko ) then
16297: LD_EXP 35
16301: PPUSH
16302: CALL_OW 300
16306: IFFALSE 16326
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
16308: LD_EXP 35
16312: PPUSH
16313: LD_EXP 3
16317: PUSH
16318: LD_STRING Gnyevko
16320: STR
16321: PPUSH
16322: CALL_OW 38
// if IsLive ( Kovalyuk ) then
16326: LD_EXP 39
16330: PPUSH
16331: CALL_OW 300
16335: IFFALSE 16355
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
16337: LD_EXP 39
16341: PPUSH
16342: LD_EXP 3
16346: PUSH
16347: LD_STRING Kovalyuk
16349: STR
16350: PPUSH
16351: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
16355: LD_EXP 36
16359: PPUSH
16360: CALL_OW 300
16364: IFFALSE 16372
16366: PUSH
16367: LD_EXP 28
16371: AND
16372: IFFALSE 16392
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
16374: LD_EXP 36
16378: PPUSH
16379: LD_EXP 3
16383: PUSH
16384: LD_STRING Belkov
16386: STR
16387: PPUSH
16388: CALL_OW 38
// if IsLive ( Kirilenkova ) then
16392: LD_EXP 37
16396: PPUSH
16397: CALL_OW 300
16401: IFFALSE 16421
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
16403: LD_EXP 37
16407: PPUSH
16408: LD_EXP 3
16412: PUSH
16413: LD_STRING Kirilenkova
16415: STR
16416: PPUSH
16417: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
16421: LD_INT 22
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 23
16433: PUSH
16434: LD_INT 3
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 21
16443: PUSH
16444: LD_INT 1
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: PUSH
16461: LD_EXP 34
16465: PUSH
16466: LD_EXP 35
16470: PUSH
16471: LD_EXP 39
16475: PUSH
16476: LD_EXP 36
16480: PUSH
16481: LD_EXP 37
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: DIFF
16493: PPUSH
16494: LD_EXP 3
16498: PUSH
16499: LD_STRING burlakTeam
16501: STR
16502: PPUSH
16503: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
16507: LD_INT 22
16509: PUSH
16510: LD_INT 6
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 23
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: PUSH
16547: LD_EXP 40
16551: PUSH
16552: LD_EXP 38
16556: PUSH
16557: LD_EXP 36
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: LD_EXP 45
16571: UNION
16572: DIFF
16573: PPUSH
16574: LD_EXP 3
16578: PUSH
16579: LD_STRING kirovTeam
16581: STR
16582: PPUSH
16583: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16587: LD_EXP 23
16591: PPUSH
16592: LD_STRING 02_EasternOutpostDestroyed
16594: PPUSH
16595: CALL_OW 39
// tmp := [ ] ;
16599: LD_ADDR_VAR 0 3
16603: PUSH
16604: EMPTY
16605: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) union FilterUnitsInArea ( beriaArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16606: LD_ADDR_VAR 0 2
16610: PUSH
16611: LD_INT 22
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 21
16623: PUSH
16624: LD_INT 3
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: PUSH
16640: LD_INT 21
16642: PPUSH
16643: LD_INT 22
16645: PUSH
16646: LD_INT 6
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 21
16655: PUSH
16656: LD_INT 3
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL_OW 70
16671: UNION
16672: PUSH
16673: FOR_IN
16674: IFFALSE 16761
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: LD_VAR 0 2
16690: PPUSH
16691: CALL_OW 266
16695: PUSH
16696: LD_VAR 0 2
16700: PPUSH
16701: CALL_OW 248
16705: PUSH
16706: LD_VAR 0 2
16710: PPUSH
16711: CALL_OW 267
16715: PUSH
16716: LD_VAR 0 2
16720: PPUSH
16721: CALL_OW 250
16725: PUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: CALL_OW 251
16735: PUSH
16736: LD_VAR 0 2
16740: PPUSH
16741: CALL_OW 254
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: PPUSH
16754: CALL 55858 0 2
16758: ST_TO_ADDR
16759: GO 16673
16761: POP
16762: POP
// SaveVariable ( tmp , 02_Beria ) ;
16763: LD_VAR 0 3
16767: PPUSH
16768: LD_STRING 02_Beria
16770: PPUSH
16771: CALL_OW 39
// tmp := [ ] ;
16775: LD_ADDR_VAR 0 3
16779: PUSH
16780: EMPTY
16781: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_inarea , beriaArea ] ] ] ) do
16782: LD_ADDR_VAR 0 2
16786: PUSH
16787: LD_INT 22
16789: PUSH
16790: LD_INT 6
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 21
16799: PUSH
16800: LD_INT 3
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 3
16809: PUSH
16810: LD_INT 95
16812: PUSH
16813: LD_INT 21
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: PPUSH
16829: CALL_OW 69
16833: PUSH
16834: FOR_IN
16835: IFFALSE 16922
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16837: LD_ADDR_VAR 0 3
16841: PUSH
16842: LD_VAR 0 3
16846: PPUSH
16847: LD_VAR 0 2
16851: PPUSH
16852: CALL_OW 266
16856: PUSH
16857: LD_VAR 0 2
16861: PPUSH
16862: CALL_OW 248
16866: PUSH
16867: LD_VAR 0 2
16871: PPUSH
16872: CALL_OW 267
16876: PUSH
16877: LD_VAR 0 2
16881: PPUSH
16882: CALL_OW 250
16886: PUSH
16887: LD_VAR 0 2
16891: PPUSH
16892: CALL_OW 251
16896: PUSH
16897: LD_VAR 0 2
16901: PPUSH
16902: CALL_OW 254
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL 55858 0 2
16919: ST_TO_ADDR
16920: GO 16834
16922: POP
16923: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16924: LD_VAR 0 3
16928: PPUSH
16929: LD_STRING 02_Kirov
16931: PPUSH
16932: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16936: LD_INT 22
16938: PUSH
16939: LD_INT 3
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 21
16948: PUSH
16949: LD_INT 2
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PPUSH
16960: CALL_OW 69
16964: PPUSH
16965: CALL 19882 0 1
16969: PPUSH
16970: LD_STRING 02_VehiclesCount
16972: PPUSH
16973: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16977: LD_INT 22
16979: PUSH
16980: LD_INT 6
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 21
16989: PUSH
16990: LD_INT 2
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PPUSH
17001: CALL_OW 69
17005: PPUSH
17006: CALL 19882 0 1
17010: PPUSH
17011: LD_STRING 02_KirovVehiclesCount
17013: PPUSH
17014: CALL_OW 39
// YouWin ;
17018: CALL_OW 103
// end ; end_of_file
17022: LD_VAR 0 1
17026: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not mode then
17027: LD_VAR 0 5
17031: NOT
17032: IFFALSE 17036
// exit ;
17034: GO 17057
// wait ( 0 0$12 ) ;
17036: LD_INT 420
17038: PPUSH
17039: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
17043: LD_VAR 0 2
17047: PPUSH
17048: LD_VAR 0 3
17052: PPUSH
17053: CALL 8382 0 2
// end ;
17057: PPOPN 5
17059: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL 77554 0 1
// if un = Burlak then
17069: LD_VAR 0 1
17073: PUSH
17074: LD_EXP 34
17078: EQUAL
17079: IFFALSE 17088
// YouLost ( Burlak ) ;
17081: LD_STRING Burlak
17083: PPUSH
17084: CALL_OW 104
// if un = Platonov then
17088: LD_VAR 0 1
17092: PUSH
17093: LD_EXP 40
17097: EQUAL
17098: IFFALSE 17107
// YouLost ( Platonov ) ;
17100: LD_STRING Platonov
17102: PPUSH
17103: CALL_OW 104
// if un = Kurin then
17107: LD_VAR 0 1
17111: PUSH
17112: LD_EXP 38
17116: EQUAL
17117: IFFALSE 17126
// YouLost ( Kurin ) ;
17119: LD_STRING Kurin
17121: PPUSH
17122: CALL_OW 104
// if un = Belkov then
17126: LD_VAR 0 1
17130: PUSH
17131: LD_EXP 36
17135: EQUAL
17136: IFFALSE 17146
// belkovDied := true ;
17138: LD_ADDR_EXP 19
17142: PUSH
17143: LD_INT 1
17145: ST_TO_ADDR
// if un in belkovTeam then
17146: LD_VAR 0 1
17150: PUSH
17151: LD_EXP 45
17155: IN
17156: IFFALSE 17189
// begin belkovTeam := belkovTeam diff un ;
17158: LD_ADDR_EXP 45
17162: PUSH
17163: LD_EXP 45
17167: PUSH
17168: LD_VAR 0 1
17172: DIFF
17173: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
17174: LD_ADDR_EXP 29
17178: PUSH
17179: LD_EXP 29
17183: PPUSH
17184: CALL 57231 0 1
17188: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
17189: LD_VAR 0 1
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 21
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 23
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: PPUSH
17229: CALL_OW 69
17233: IN
17234: IFFALSE 17251
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
17236: LD_ADDR_EXP 30
17240: PUSH
17241: LD_EXP 30
17245: PPUSH
17246: CALL 57231 0 1
17250: ST_TO_ADDR
// if un in usWestForces then
17251: LD_VAR 0 1
17255: PUSH
17256: LD_EXP 46
17260: IN
17261: IFFALSE 17279
// usWestForces := usWestForces diff un ;
17263: LD_ADDR_EXP 46
17267: PUSH
17268: LD_EXP 46
17272: PUSH
17273: LD_VAR 0 1
17277: DIFF
17278: ST_TO_ADDR
// if un in usEastForces then
17279: LD_VAR 0 1
17283: PUSH
17284: LD_EXP 47
17288: IN
17289: IFFALSE 17307
// usEastForces := usEastForces diff un ;
17291: LD_ADDR_EXP 47
17295: PUSH
17296: LD_EXP 47
17300: PUSH
17301: LD_VAR 0 1
17305: DIFF
17306: ST_TO_ADDR
// if un = Dickens then
17307: LD_VAR 0 1
17311: PUSH
17312: LD_EXP 49
17316: EQUAL
17317: IFFALSE 17335
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
17319: LD_INT 1
17321: PPUSH
17322: LD_EXP 3
17326: PUSH
17327: LD_STRING DickensKilled
17329: STR
17330: PPUSH
17331: CALL_OW 39
// end ;
17335: PPOPN 1
17337: END
// on BuildingComplete ( b ) do var mech ;
17338: LD_INT 0
17340: PPUSH
// begin if GetSide ( b ) = 3 then
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL_OW 255
17350: PUSH
17351: LD_INT 3
17353: EQUAL
17354: IFFALSE 17413
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 266
17365: PUSH
17366: LD_INT 6
17368: PUSH
17369: LD_INT 7
17371: PUSH
17372: LD_INT 8
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: IN
17380: IFFALSE 17390
// hasLab := true ;
17382: LD_ADDR_EXP 9
17386: PUSH
17387: LD_INT 1
17389: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 266
17399: PUSH
17400: LD_INT 2
17402: EQUAL
17403: IFFALSE 17413
// hasWorkshop := true ;
17405: LD_ADDR_EXP 10
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 255
17422: PUSH
17423: LD_INT 6
17425: EQUAL
17426: IFFALSE 17500
// begin if GetBType ( b ) = b_workshop then
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 266
17437: PUSH
17438: LD_INT 2
17440: EQUAL
17441: IFFALSE 17500
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
17443: LD_ADDR_VAR 0 2
17447: PUSH
17448: LD_EXP 43
17452: PPUSH
17453: LD_INT 25
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 72
17467: ST_TO_ADDR
// if not mech then
17468: LD_VAR 0 2
17472: NOT
17473: IFFALSE 17477
// exit ;
17475: GO 17500
// ComExit ( mech ) ;
17477: LD_VAR 0 2
17481: PPUSH
17482: CALL 56256 0 1
// AddComEnterUnit ( mech , b ) ;
17486: LD_VAR 0 2
17490: PPUSH
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL_OW 180
// end ; end ; end ;
17500: PPOPN 2
17502: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_VAR 0 2
17512: PPUSH
17513: CALL 77612 0 2
// if GetSide ( vehicle ) = 3 then
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 255
17526: PUSH
17527: LD_INT 3
17529: EQUAL
17530: IFFALSE 17555
// begin hasTank := true ;
17532: LD_ADDR_EXP 12
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
17540: LD_ADDR_EXP 15
17544: PUSH
17545: LD_EXP 15
17549: PPUSH
17550: CALL 57231 0 1
17554: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 255
17564: PUSH
17565: LD_INT 6
17567: EQUAL
17568: IFFALSE 17579
// KirovAttack ( vehicle ) ;
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL 3954 0 1
// end ;
17579: PPOPN 2
17581: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
17582: LD_VAR 0 1
17586: PUSH
17587: LD_EXP 33
17591: EQUAL
17592: IFFALSE 17598
// BelkovAttackScript ;
17594: CALL 1751 0 0
// end ;
17598: PPOPN 1
17600: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
17601: LD_INT 0
17603: PPUSH
// begin if side = 1 then
17604: LD_VAR 0 3
17608: PUSH
17609: LD_INT 1
17611: EQUAL
17612: IFFALSE 17622
// vehCaptured := true ;
17614: LD_ADDR_EXP 16
17618: PUSH
17619: LD_INT 1
17621: ST_TO_ADDR
// end ;
17622: PPOPN 5
17624: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
17625: LD_VAR 0 1
17629: PUSH
17630: LD_INT 3
17632: EQUAL
17633: IFFALSE 17645
17635: PUSH
17636: LD_VAR 0 2
17640: PUSH
17641: LD_INT 6
17643: EQUAL
17644: AND
17645: IFFALSE 17655
// allianceAttacked := true ;
17647: LD_ADDR_EXP 13
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// end ; end_of_file
17655: PPOPN 2
17657: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17658: LD_INT 0
17660: PPUSH
17661: PPUSH
// if exist_mode then
17662: LD_VAR 0 2
17666: IFFALSE 17712
// begin unit := CreateCharacter ( prefix & ident ) ;
17668: LD_ADDR_VAR 0 5
17672: PUSH
17673: LD_VAR 0 3
17677: PUSH
17678: LD_VAR 0 1
17682: STR
17683: PPUSH
17684: CALL_OW 34
17688: ST_TO_ADDR
// if unit then
17689: LD_VAR 0 5
17693: IFFALSE 17710
// DeleteCharacters ( prefix & ident ) ;
17695: LD_VAR 0 3
17699: PUSH
17700: LD_VAR 0 1
17704: STR
17705: PPUSH
17706: CALL_OW 40
// end else
17710: GO 17727
// unit := NewCharacter ( ident ) ;
17712: LD_ADDR_VAR 0 5
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 25
17726: ST_TO_ADDR
// result := unit ;
17727: LD_ADDR_VAR 0 4
17731: PUSH
17732: LD_VAR 0 5
17736: ST_TO_ADDR
// end ;
17737: LD_VAR 0 4
17741: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17742: LD_INT 0
17744: PPUSH
17745: PPUSH
// if exist_mode then
17746: LD_VAR 0 2
17750: IFFALSE 17775
// unit := CreateCharacter ( prefix & ident ) else
17752: LD_ADDR_VAR 0 5
17756: PUSH
17757: LD_VAR 0 3
17761: PUSH
17762: LD_VAR 0 1
17766: STR
17767: PPUSH
17768: CALL_OW 34
17772: ST_TO_ADDR
17773: GO 17790
// unit := NewCharacter ( ident ) ;
17775: LD_ADDR_VAR 0 5
17779: PUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 25
17789: ST_TO_ADDR
// result := unit ;
17790: LD_ADDR_VAR 0 4
17794: PUSH
17795: LD_VAR 0 5
17799: ST_TO_ADDR
// end ;
17800: LD_VAR 0 4
17804: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17805: LD_INT 0
17807: PPUSH
17808: PPUSH
// if not side or not nation then
17809: LD_VAR 0 1
17813: NOT
17814: IFTRUE 17823
17816: PUSH
17817: LD_VAR 0 2
17821: NOT
17822: OR
17823: IFFALSE 17827
// exit ;
17825: GO 18621
// case nation of nation_american :
17827: LD_VAR 0 2
17831: PUSH
17832: LD_INT 1
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 18062
17840: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17841: LD_ADDR_VAR 0 4
17845: PUSH
17846: LD_INT 35
17848: PUSH
17849: LD_INT 45
17851: PUSH
17852: LD_INT 46
17854: PUSH
17855: LD_INT 47
17857: PUSH
17858: LD_INT 82
17860: PUSH
17861: LD_INT 83
17863: PUSH
17864: LD_INT 84
17866: PUSH
17867: LD_INT 85
17869: PUSH
17870: LD_INT 86
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: LD_INT 6
17881: PUSH
17882: LD_INT 15
17884: PUSH
17885: LD_INT 16
17887: PUSH
17888: LD_INT 7
17890: PUSH
17891: LD_INT 12
17893: PUSH
17894: LD_INT 13
17896: PUSH
17897: LD_INT 10
17899: PUSH
17900: LD_INT 14
17902: PUSH
17903: LD_INT 20
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_INT 25
17914: PUSH
17915: LD_INT 32
17917: PUSH
17918: LD_INT 27
17920: PUSH
17921: LD_INT 36
17923: PUSH
17924: LD_INT 69
17926: PUSH
17927: LD_INT 39
17929: PUSH
17930: LD_INT 34
17932: PUSH
17933: LD_INT 40
17935: PUSH
17936: LD_INT 48
17938: PUSH
17939: LD_INT 49
17941: PUSH
17942: LD_INT 50
17944: PUSH
17945: LD_INT 51
17947: PUSH
17948: LD_INT 52
17950: PUSH
17951: LD_INT 53
17953: PUSH
17954: LD_INT 54
17956: PUSH
17957: LD_INT 55
17959: PUSH
17960: LD_INT 56
17962: PUSH
17963: LD_INT 57
17965: PUSH
17966: LD_INT 58
17968: PUSH
17969: LD_INT 59
17971: PUSH
17972: LD_INT 60
17974: PUSH
17975: LD_INT 61
17977: PUSH
17978: LD_INT 62
17980: PUSH
17981: LD_INT 80
17983: PUSH
17984: LD_INT 82
17986: PUSH
17987: LD_INT 83
17989: PUSH
17990: LD_INT 84
17992: PUSH
17993: LD_INT 85
17995: PUSH
17996: LD_INT 86
17998: PUSH
17999: LD_INT 90
18001: PUSH
18002: LD_INT 93
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: ST_TO_ADDR
18060: GO 18543
18062: LD_INT 2
18064: DOUBLE
18065: EQUAL
18066: IFTRUE 18070
18068: GO 18304
18070: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
18071: LD_ADDR_VAR 0 4
18075: PUSH
18076: LD_INT 35
18078: PUSH
18079: LD_INT 45
18081: PUSH
18082: LD_INT 46
18084: PUSH
18085: LD_INT 47
18087: PUSH
18088: LD_INT 82
18090: PUSH
18091: LD_INT 83
18093: PUSH
18094: LD_INT 84
18096: PUSH
18097: LD_INT 85
18099: PUSH
18100: LD_INT 87
18102: PUSH
18103: LD_INT 70
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: LD_INT 11
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: LD_INT 4
18117: PUSH
18118: LD_INT 5
18120: PUSH
18121: LD_INT 6
18123: PUSH
18124: LD_INT 15
18126: PUSH
18127: LD_INT 18
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: LD_INT 17
18135: PUSH
18136: LD_INT 8
18138: PUSH
18139: LD_INT 20
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_INT 72
18150: PUSH
18151: LD_INT 26
18153: PUSH
18154: LD_INT 69
18156: PUSH
18157: LD_INT 39
18159: PUSH
18160: LD_INT 40
18162: PUSH
18163: LD_INT 41
18165: PUSH
18166: LD_INT 42
18168: PUSH
18169: LD_INT 43
18171: PUSH
18172: LD_INT 48
18174: PUSH
18175: LD_INT 49
18177: PUSH
18178: LD_INT 50
18180: PUSH
18181: LD_INT 51
18183: PUSH
18184: LD_INT 52
18186: PUSH
18187: LD_INT 53
18189: PUSH
18190: LD_INT 54
18192: PUSH
18193: LD_INT 55
18195: PUSH
18196: LD_INT 56
18198: PUSH
18199: LD_INT 60
18201: PUSH
18202: LD_INT 61
18204: PUSH
18205: LD_INT 62
18207: PUSH
18208: LD_INT 66
18210: PUSH
18211: LD_INT 67
18213: PUSH
18214: LD_INT 68
18216: PUSH
18217: LD_INT 81
18219: PUSH
18220: LD_INT 82
18222: PUSH
18223: LD_INT 83
18225: PUSH
18226: LD_INT 84
18228: PUSH
18229: LD_INT 85
18231: PUSH
18232: LD_INT 87
18234: PUSH
18235: LD_INT 88
18237: PUSH
18238: LD_INT 92
18240: PUSH
18241: LD_INT 94
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: ST_TO_ADDR
18302: GO 18543
18304: LD_INT 3
18306: DOUBLE
18307: EQUAL
18308: IFTRUE 18312
18310: GO 18542
18312: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
18313: LD_ADDR_VAR 0 4
18317: PUSH
18318: LD_INT 46
18320: PUSH
18321: LD_INT 47
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: LD_INT 82
18332: PUSH
18333: LD_INT 83
18335: PUSH
18336: LD_INT 84
18338: PUSH
18339: LD_INT 85
18341: PUSH
18342: LD_INT 86
18344: PUSH
18345: LD_INT 11
18347: PUSH
18348: LD_INT 9
18350: PUSH
18351: LD_INT 20
18353: PUSH
18354: LD_INT 19
18356: PUSH
18357: LD_INT 21
18359: PUSH
18360: LD_INT 24
18362: PUSH
18363: LD_INT 22
18365: PUSH
18366: LD_INT 25
18368: PUSH
18369: LD_INT 28
18371: PUSH
18372: LD_INT 29
18374: PUSH
18375: LD_INT 30
18377: PUSH
18378: LD_INT 31
18380: PUSH
18381: LD_INT 37
18383: PUSH
18384: LD_INT 38
18386: PUSH
18387: LD_INT 32
18389: PUSH
18390: LD_INT 27
18392: PUSH
18393: LD_INT 33
18395: PUSH
18396: LD_INT 69
18398: PUSH
18399: LD_INT 39
18401: PUSH
18402: LD_INT 34
18404: PUSH
18405: LD_INT 40
18407: PUSH
18408: LD_INT 71
18410: PUSH
18411: LD_INT 23
18413: PUSH
18414: LD_INT 44
18416: PUSH
18417: LD_INT 48
18419: PUSH
18420: LD_INT 49
18422: PUSH
18423: LD_INT 50
18425: PUSH
18426: LD_INT 51
18428: PUSH
18429: LD_INT 52
18431: PUSH
18432: LD_INT 53
18434: PUSH
18435: LD_INT 54
18437: PUSH
18438: LD_INT 55
18440: PUSH
18441: LD_INT 56
18443: PUSH
18444: LD_INT 57
18446: PUSH
18447: LD_INT 58
18449: PUSH
18450: LD_INT 59
18452: PUSH
18453: LD_INT 63
18455: PUSH
18456: LD_INT 64
18458: PUSH
18459: LD_INT 65
18461: PUSH
18462: LD_INT 82
18464: PUSH
18465: LD_INT 83
18467: PUSH
18468: LD_INT 84
18470: PUSH
18471: LD_INT 85
18473: PUSH
18474: LD_INT 86
18476: PUSH
18477: LD_INT 89
18479: PUSH
18480: LD_INT 91
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: ST_TO_ADDR
18540: GO 18543
18542: POP
// if state > - 1 and state < 3 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: GREATER
18552: IFFALSE 18564
18554: PUSH
18555: LD_VAR 0 3
18559: PUSH
18560: LD_INT 3
18562: LESS
18563: AND
18564: IFFALSE 18621
// for i in result do
18566: LD_ADDR_VAR 0 5
18570: PUSH
18571: LD_VAR 0 4
18575: PUSH
18576: FOR_IN
18577: IFFALSE 18619
// if GetTech ( i , side ) <> state then
18579: LD_VAR 0 5
18583: PPUSH
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 321
18593: PUSH
18594: LD_VAR 0 3
18598: NONEQUAL
18599: IFFALSE 18617
// result := result diff i ;
18601: LD_ADDR_VAR 0 4
18605: PUSH
18606: LD_VAR 0 4
18610: PUSH
18611: LD_VAR 0 5
18615: DIFF
18616: ST_TO_ADDR
18617: GO 18576
18619: POP
18620: POP
// end ;
18621: LD_VAR 0 4
18625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18626: LD_INT 0
18628: PPUSH
18629: PPUSH
18630: PPUSH
// result := true ;
18631: LD_ADDR_VAR 0 3
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18639: LD_ADDR_VAR 0 5
18643: PUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: CALL_OW 480
18653: ST_TO_ADDR
// if not tmp then
18654: LD_VAR 0 5
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 18712
// for i in tmp do
18663: LD_ADDR_VAR 0 4
18667: PUSH
18668: LD_VAR 0 5
18672: PUSH
18673: FOR_IN
18674: IFFALSE 18710
// if GetTech ( i , side ) <> state_researched then
18676: LD_VAR 0 4
18680: PPUSH
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL_OW 321
18690: PUSH
18691: LD_INT 2
18693: NONEQUAL
18694: IFFALSE 18708
// begin result := false ;
18696: LD_ADDR_VAR 0 3
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// exit ;
18704: POP
18705: POP
18706: GO 18712
// end ;
18708: GO 18673
18710: POP
18711: POP
// end ;
18712: LD_VAR 0 3
18716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18717: LD_INT 0
18719: PPUSH
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
18731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18732: LD_VAR 0 1
18736: NOT
18737: IFTRUE 18754
18739: PUSH
18740: LD_VAR 0 1
18744: PPUSH
18745: CALL_OW 257
18749: PUSH
18750: LD_INT 9
18752: NONEQUAL
18753: OR
18754: IFFALSE 18758
// exit ;
18756: GO 19337
// side := GetSide ( unit ) ;
18758: LD_ADDR_VAR 0 9
18762: PUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 255
18772: ST_TO_ADDR
// tech_space := tech_spacanom ;
18773: LD_ADDR_VAR 0 12
18777: PUSH
18778: LD_INT 29
18780: ST_TO_ADDR
// tech_time := tech_taurad ;
18781: LD_ADDR_VAR 0 13
18785: PUSH
18786: LD_INT 28
18788: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18789: LD_ADDR_VAR 0 11
18793: PUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 310
18803: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18804: LD_VAR 0 11
18808: PPUSH
18809: CALL_OW 247
18813: PUSH
18814: LD_INT 2
18816: EQUAL
18817: IFFALSE 18821
// exit ;
18819: GO 19337
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18821: LD_ADDR_VAR 0 8
18825: PUSH
18826: LD_INT 81
18828: PUSH
18829: LD_VAR 0 9
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 21
18843: PUSH
18844: LD_INT 3
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PPUSH
18859: CALL_OW 69
18863: ST_TO_ADDR
// if not tmp then
18864: LD_VAR 0 8
18868: NOT
18869: IFFALSE 18873
// exit ;
18871: GO 19337
// if in_unit then
18873: LD_VAR 0 11
18877: IFFALSE 18901
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18879: LD_ADDR_VAR 0 10
18883: PUSH
18884: LD_VAR 0 8
18888: PPUSH
18889: LD_VAR 0 11
18893: PPUSH
18894: CALL_OW 74
18898: ST_TO_ADDR
18899: GO 18921
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18901: LD_ADDR_VAR 0 10
18905: PUSH
18906: LD_VAR 0 8
18910: PPUSH
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 74
18920: ST_TO_ADDR
// if not enemy then
18921: LD_VAR 0 10
18925: NOT
18926: IFFALSE 18930
// exit ;
18928: GO 19337
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18930: LD_VAR 0 11
18934: IFFALSE 18956
18936: PUSH
18937: LD_VAR 0 11
18941: PPUSH
18942: LD_VAR 0 10
18946: PPUSH
18947: CALL_OW 296
18951: PUSH
18952: LD_INT 13
18954: GREATER
18955: AND
18956: IFTRUE 18978
18958: PUSH
18959: LD_VAR 0 1
18963: PPUSH
18964: LD_VAR 0 10
18968: PPUSH
18969: CALL_OW 296
18973: PUSH
18974: LD_INT 12
18976: GREATER
18977: OR
18978: IFFALSE 18982
// exit ;
18980: GO 19337
// missile := [ 1 ] ;
18982: LD_ADDR_VAR 0 14
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18993: LD_VAR 0 9
18997: PPUSH
18998: LD_VAR 0 12
19002: PPUSH
19003: CALL_OW 325
19007: IFFALSE 19036
// missile := Replace ( missile , missile + 1 , 2 ) ;
19009: LD_ADDR_VAR 0 14
19013: PUSH
19014: LD_VAR 0 14
19018: PPUSH
19019: LD_VAR 0 14
19023: PUSH
19024: LD_INT 1
19026: PLUS
19027: PPUSH
19028: LD_INT 2
19030: PPUSH
19031: CALL_OW 1
19035: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19036: LD_VAR 0 9
19040: PPUSH
19041: LD_VAR 0 13
19045: PPUSH
19046: CALL_OW 325
19050: IFFALSE 19074
19052: PUSH
19053: LD_VAR 0 10
19057: PPUSH
19058: CALL_OW 255
19062: PPUSH
19063: LD_VAR 0 13
19067: PPUSH
19068: CALL_OW 325
19072: NOT
19073: AND
19074: IFFALSE 19103
// missile := Replace ( missile , missile + 1 , 3 ) ;
19076: LD_ADDR_VAR 0 14
19080: PUSH
19081: LD_VAR 0 14
19085: PPUSH
19086: LD_VAR 0 14
19090: PUSH
19091: LD_INT 1
19093: PLUS
19094: PPUSH
19095: LD_INT 3
19097: PPUSH
19098: CALL_OW 1
19102: ST_TO_ADDR
// if missile < 2 then
19103: LD_VAR 0 14
19107: PUSH
19108: LD_INT 2
19110: LESS
19111: IFFALSE 19115
// exit ;
19113: GO 19337
// x := GetX ( enemy ) ;
19115: LD_ADDR_VAR 0 4
19119: PUSH
19120: LD_VAR 0 10
19124: PPUSH
19125: CALL_OW 250
19129: ST_TO_ADDR
// y := GetY ( enemy ) ;
19130: LD_ADDR_VAR 0 5
19134: PUSH
19135: LD_VAR 0 10
19139: PPUSH
19140: CALL_OW 251
19144: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19145: LD_ADDR_VAR 0 6
19149: PUSH
19150: LD_VAR 0 4
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PPUSH
19159: LD_INT 1
19161: PPUSH
19162: CALL_OW 12
19166: PLUS
19167: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19168: LD_ADDR_VAR 0 7
19172: PUSH
19173: LD_VAR 0 5
19177: PUSH
19178: LD_INT 1
19180: NEG
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: CALL_OW 12
19189: PLUS
19190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19191: LD_VAR 0 6
19195: PPUSH
19196: LD_VAR 0 7
19200: PPUSH
19201: CALL_OW 488
19205: NOT
19206: IFFALSE 19228
// begin _x := x ;
19208: LD_ADDR_VAR 0 6
19212: PUSH
19213: LD_VAR 0 4
19217: ST_TO_ADDR
// _y := y ;
19218: LD_ADDR_VAR 0 7
19222: PUSH
19223: LD_VAR 0 5
19227: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19228: LD_ADDR_VAR 0 3
19232: PUSH
19233: LD_INT 1
19235: PPUSH
19236: LD_VAR 0 14
19240: PPUSH
19241: CALL_OW 12
19245: ST_TO_ADDR
// case i of 1 :
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 1
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19276
19259: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19260: LD_VAR 0 1
19264: PPUSH
19265: LD_VAR 0 10
19269: PPUSH
19270: CALL_OW 115
19274: GO 19337
19276: LD_INT 2
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19306
19284: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19285: LD_VAR 0 1
19289: PPUSH
19290: LD_VAR 0 6
19294: PPUSH
19295: LD_VAR 0 7
19299: PPUSH
19300: CALL_OW 153
19304: GO 19337
19306: LD_INT 3
19308: DOUBLE
19309: EQUAL
19310: IFTRUE 19314
19312: GO 19336
19314: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_VAR 0 6
19324: PPUSH
19325: LD_VAR 0 7
19329: PPUSH
19330: CALL_OW 154
19334: GO 19337
19336: POP
// end ;
19337: LD_VAR 0 2
19341: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19342: LD_INT 0
19344: PPUSH
19345: PPUSH
19346: PPUSH
19347: PPUSH
19348: PPUSH
19349: PPUSH
// if not unit or not building then
19350: LD_VAR 0 1
19354: NOT
19355: IFTRUE 19364
19357: PUSH
19358: LD_VAR 0 2
19362: NOT
19363: OR
19364: IFFALSE 19368
// exit ;
19366: GO 19526
// x := GetX ( building ) ;
19368: LD_ADDR_VAR 0 5
19372: PUSH
19373: LD_VAR 0 2
19377: PPUSH
19378: CALL_OW 250
19382: ST_TO_ADDR
// y := GetY ( building ) ;
19383: LD_ADDR_VAR 0 6
19387: PUSH
19388: LD_VAR 0 2
19392: PPUSH
19393: CALL_OW 251
19397: ST_TO_ADDR
// for i := 0 to 5 do
19398: LD_ADDR_VAR 0 4
19402: PUSH
19403: DOUBLE
19404: LD_INT 0
19406: DEC
19407: ST_TO_ADDR
19408: LD_INT 5
19410: PUSH
19411: FOR_TO
19412: IFFALSE 19524
// begin _x := ShiftX ( x , i , 3 ) ;
19414: LD_ADDR_VAR 0 7
19418: PUSH
19419: LD_VAR 0 5
19423: PPUSH
19424: LD_VAR 0 4
19428: PPUSH
19429: LD_INT 3
19431: PPUSH
19432: CALL_OW 272
19436: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19437: LD_ADDR_VAR 0 8
19441: PUSH
19442: LD_VAR 0 6
19446: PPUSH
19447: LD_VAR 0 4
19451: PPUSH
19452: LD_INT 3
19454: PPUSH
19455: CALL_OW 273
19459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19460: LD_VAR 0 7
19464: PPUSH
19465: LD_VAR 0 8
19469: PPUSH
19470: CALL_OW 488
19474: NOT
19475: IFFALSE 19479
// continue ;
19477: GO 19411
// if HexInfo ( _x , _y ) = 0 then
19479: LD_VAR 0 7
19483: PPUSH
19484: LD_VAR 0 8
19488: PPUSH
19489: CALL_OW 428
19493: PUSH
19494: LD_INT 0
19496: EQUAL
19497: IFFALSE 19522
// begin ComMoveXY ( unit , _x , _y ) ;
19499: LD_VAR 0 1
19503: PPUSH
19504: LD_VAR 0 7
19508: PPUSH
19509: LD_VAR 0 8
19513: PPUSH
19514: CALL_OW 111
// exit ;
19518: POP
19519: POP
19520: GO 19526
// end ; end ;
19522: GO 19411
19524: POP
19525: POP
// end ;
19526: LD_VAR 0 3
19530: RET
// export function ScanBase ( side , base_area ) ; begin
19531: LD_INT 0
19533: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: LD_VAR 0 2
19543: PPUSH
19544: LD_INT 81
19546: PUSH
19547: LD_VAR 0 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 70
19560: ST_TO_ADDR
// end ;
19561: LD_VAR 0 3
19565: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19566: LD_INT 0
19568: PPUSH
19569: PPUSH
19570: PPUSH
19571: PPUSH
// result := false ;
19572: LD_ADDR_VAR 0 2
19576: PUSH
19577: LD_INT 0
19579: ST_TO_ADDR
// side := GetSide ( unit ) ;
19580: LD_ADDR_VAR 0 3
19584: PUSH
19585: LD_VAR 0 1
19589: PPUSH
19590: CALL_OW 255
19594: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19595: LD_ADDR_VAR 0 4
19599: PUSH
19600: LD_VAR 0 1
19604: PPUSH
19605: CALL_OW 248
19609: ST_TO_ADDR
// case nat of 1 :
19610: LD_VAR 0 4
19614: PUSH
19615: LD_INT 1
19617: DOUBLE
19618: EQUAL
19619: IFTRUE 19623
19621: GO 19634
19623: POP
// tech := tech_lassight ; 2 :
19624: LD_ADDR_VAR 0 5
19628: PUSH
19629: LD_INT 12
19631: ST_TO_ADDR
19632: GO 19673
19634: LD_INT 2
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19653
19642: POP
// tech := tech_mortar ; 3 :
19643: LD_ADDR_VAR 0 5
19647: PUSH
19648: LD_INT 41
19650: ST_TO_ADDR
19651: GO 19673
19653: LD_INT 3
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19672
19661: POP
// tech := tech_bazooka ; end ;
19662: LD_ADDR_VAR 0 5
19666: PUSH
19667: LD_INT 44
19669: ST_TO_ADDR
19670: GO 19673
19672: POP
// if Researched ( side , tech ) then
19673: LD_VAR 0 3
19677: PPUSH
19678: LD_VAR 0 5
19682: PPUSH
19683: CALL_OW 325
19687: IFFALSE 19714
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19689: LD_ADDR_VAR 0 2
19693: PUSH
19694: LD_INT 5
19696: PUSH
19697: LD_INT 8
19699: PUSH
19700: LD_INT 9
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: PUSH
19708: LD_VAR 0 4
19712: ARRAY
19713: ST_TO_ADDR
// end ;
19714: LD_VAR 0 2
19718: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19719: LD_INT 0
19721: PPUSH
19722: PPUSH
19723: PPUSH
// if not mines then
19724: LD_VAR 0 2
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19877
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19733: LD_ADDR_VAR 0 5
19737: PUSH
19738: LD_INT 81
19740: PUSH
19741: LD_VAR 0 1
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 3
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: ST_TO_ADDR
// for i in mines do
19776: LD_ADDR_VAR 0 4
19780: PUSH
19781: LD_VAR 0 2
19785: PUSH
19786: FOR_IN
19787: IFFALSE 19875
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19789: LD_VAR 0 4
19793: PUSH
19794: LD_INT 1
19796: ARRAY
19797: PPUSH
19798: LD_VAR 0 4
19802: PUSH
19803: LD_INT 2
19805: ARRAY
19806: PPUSH
19807: CALL_OW 458
19811: NOT
19812: IFFALSE 19816
// continue ;
19814: GO 19786
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19816: LD_VAR 0 4
19820: PUSH
19821: LD_INT 1
19823: ARRAY
19824: PPUSH
19825: LD_VAR 0 4
19829: PUSH
19830: LD_INT 2
19832: ARRAY
19833: PPUSH
19834: CALL_OW 428
19838: PUSH
19839: LD_VAR 0 5
19843: IN
19844: IFFALSE 19873
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19846: LD_VAR 0 4
19850: PUSH
19851: LD_INT 1
19853: ARRAY
19854: PPUSH
19855: LD_VAR 0 4
19859: PUSH
19860: LD_INT 2
19862: ARRAY
19863: PPUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 456
// end ;
19873: GO 19786
19875: POP
19876: POP
// end ;
19877: LD_VAR 0 3
19881: RET
// export function Count ( array ) ; begin
19882: LD_INT 0
19884: PPUSH
// result := array + 0 ;
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_VAR 0 1
19894: PUSH
19895: LD_INT 0
19897: PLUS
19898: ST_TO_ADDR
// end ;
19899: LD_VAR 0 2
19903: RET
// export function IsEmpty ( building ) ; begin
19904: LD_INT 0
19906: PPUSH
// if not building then
19907: LD_VAR 0 1
19911: NOT
19912: IFFALSE 19916
// exit ;
19914: GO 19959
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19916: LD_ADDR_VAR 0 2
19920: PUSH
19921: LD_VAR 0 1
19925: PUSH
19926: LD_INT 22
19928: PUSH
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 255
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 58
19945: PUSH
19946: EMPTY
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PPUSH
19953: CALL_OW 69
19957: IN
19958: ST_TO_ADDR
// end ;
19959: LD_VAR 0 2
19963: RET
// export function IsNotFull ( building ) ; var places ; begin
19964: LD_INT 0
19966: PPUSH
19967: PPUSH
// if not building then
19968: LD_VAR 0 1
19972: NOT
19973: IFFALSE 19977
// exit ;
19975: GO 20005
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: LD_INT 3
19989: PUSH
19990: LD_INT 62
19992: PUSH
19993: EMPTY
19994: LIST
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 72
20004: ST_TO_ADDR
// end ;
20005: LD_VAR 0 2
20009: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
20010: LD_INT 0
20012: PPUSH
20013: PPUSH
20014: PPUSH
20015: PPUSH
// tmp := [ ] ;
20016: LD_ADDR_VAR 0 3
20020: PUSH
20021: EMPTY
20022: ST_TO_ADDR
// list := [ ] ;
20023: LD_ADDR_VAR 0 5
20027: PUSH
20028: EMPTY
20029: ST_TO_ADDR
// for i = 16 to 25 do
20030: LD_ADDR_VAR 0 4
20034: PUSH
20035: DOUBLE
20036: LD_INT 16
20038: DEC
20039: ST_TO_ADDR
20040: LD_INT 25
20042: PUSH
20043: FOR_TO
20044: IFFALSE 20117
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_VAR 0 3
20055: PUSH
20056: LD_INT 22
20058: PUSH
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 255
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 91
20075: PUSH
20076: LD_VAR 0 1
20080: PUSH
20081: LD_INT 6
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_VAR 0 4
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: PPUSH
20109: CALL_OW 69
20113: ADD
20114: ST_TO_ADDR
20115: GO 20043
20117: POP
20118: POP
// for i = 1 to tmp do
20119: LD_ADDR_VAR 0 4
20123: PUSH
20124: DOUBLE
20125: LD_INT 1
20127: DEC
20128: ST_TO_ADDR
20129: LD_VAR 0 3
20133: PUSH
20134: FOR_TO
20135: IFFALSE 20223
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20137: LD_ADDR_VAR 0 5
20141: PUSH
20142: LD_VAR 0 5
20146: PUSH
20147: LD_VAR 0 3
20151: PUSH
20152: LD_VAR 0 4
20156: ARRAY
20157: PPUSH
20158: CALL_OW 266
20162: PUSH
20163: LD_VAR 0 3
20167: PUSH
20168: LD_VAR 0 4
20172: ARRAY
20173: PPUSH
20174: CALL_OW 250
20178: PUSH
20179: LD_VAR 0 3
20183: PUSH
20184: LD_VAR 0 4
20188: ARRAY
20189: PPUSH
20190: CALL_OW 251
20194: PUSH
20195: LD_VAR 0 3
20199: PUSH
20200: LD_VAR 0 4
20204: ARRAY
20205: PPUSH
20206: CALL_OW 254
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: ADD
20220: ST_TO_ADDR
20221: GO 20134
20223: POP
20224: POP
// result := list ;
20225: LD_ADDR_VAR 0 2
20229: PUSH
20230: LD_VAR 0 5
20234: ST_TO_ADDR
// end ;
20235: LD_VAR 0 2
20239: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
20248: PPUSH
// if not factory then
20249: LD_VAR 0 1
20253: NOT
20254: IFFALSE 20258
// exit ;
20256: GO 20861
// if control = control_apeman then
20258: LD_VAR 0 4
20262: PUSH
20263: LD_INT 5
20265: EQUAL
20266: IFFALSE 20375
// begin tmp := UnitsInside ( factory ) ;
20268: LD_ADDR_VAR 0 8
20272: PUSH
20273: LD_VAR 0 1
20277: PPUSH
20278: CALL_OW 313
20282: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_INT 25
20290: PUSH
20291: LD_INT 12
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PPUSH
20298: CALL_OW 72
20302: NOT
20303: IFFALSE 20313
// control := control_manual ;
20305: LD_ADDR_VAR 0 4
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20313: LD_ADDR_VAR 0 8
20317: PUSH
20318: LD_VAR 0 1
20322: PPUSH
20323: CALL 20010 0 1
20327: ST_TO_ADDR
// if tmp then
20328: LD_VAR 0 8
20332: IFFALSE 20375
// begin for i in tmp do
20334: LD_ADDR_VAR 0 7
20338: PUSH
20339: LD_VAR 0 8
20343: PUSH
20344: FOR_IN
20345: IFFALSE 20373
// if i [ 1 ] = b_ext_radio then
20347: LD_VAR 0 7
20351: PUSH
20352: LD_INT 1
20354: ARRAY
20355: PUSH
20356: LD_INT 22
20358: EQUAL
20359: IFFALSE 20371
// begin control := control_remote ;
20361: LD_ADDR_VAR 0 4
20365: PUSH
20366: LD_INT 2
20368: ST_TO_ADDR
// break ;
20369: GO 20373
// end ;
20371: GO 20344
20373: POP
20374: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20375: LD_VAR 0 1
20379: PPUSH
20380: LD_VAR 0 2
20384: PPUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: LD_VAR 0 4
20394: PPUSH
20395: LD_VAR 0 5
20399: PPUSH
20400: CALL_OW 448
20404: IFFALSE 20439
// begin result := [ chassis , engine , control , weapon ] ;
20406: LD_ADDR_VAR 0 6
20410: PUSH
20411: LD_VAR 0 2
20415: PUSH
20416: LD_VAR 0 3
20420: PUSH
20421: LD_VAR 0 4
20425: PUSH
20426: LD_VAR 0 5
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: ST_TO_ADDR
// exit ;
20437: GO 20861
// end ; _chassis := AvailableChassisList ( factory ) ;
20439: LD_ADDR_VAR 0 9
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 475
20453: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20454: LD_ADDR_VAR 0 11
20458: PUSH
20459: LD_VAR 0 1
20463: PPUSH
20464: CALL_OW 476
20468: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20469: LD_ADDR_VAR 0 12
20473: PUSH
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 477
20483: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20484: LD_ADDR_VAR 0 10
20488: PUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: CALL_OW 478
20498: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20499: LD_VAR 0 9
20503: NOT
20504: IFTRUE 20513
20506: PUSH
20507: LD_VAR 0 11
20511: NOT
20512: OR
20513: IFTRUE 20522
20515: PUSH
20516: LD_VAR 0 12
20520: NOT
20521: OR
20522: IFTRUE 20531
20524: PUSH
20525: LD_VAR 0 10
20529: NOT
20530: OR
20531: IFFALSE 20566
// begin result := [ chassis , engine , control , weapon ] ;
20533: LD_ADDR_VAR 0 6
20537: PUSH
20538: LD_VAR 0 2
20542: PUSH
20543: LD_VAR 0 3
20547: PUSH
20548: LD_VAR 0 4
20552: PUSH
20553: LD_VAR 0 5
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: ST_TO_ADDR
// exit ;
20564: GO 20861
// end ; if not chassis in _chassis then
20566: LD_VAR 0 2
20570: PUSH
20571: LD_VAR 0 9
20575: IN
20576: NOT
20577: IFFALSE 20603
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20579: LD_ADDR_VAR 0 2
20583: PUSH
20584: LD_VAR 0 9
20588: PUSH
20589: LD_INT 1
20591: PPUSH
20592: LD_VAR 0 9
20596: PPUSH
20597: CALL_OW 12
20601: ARRAY
20602: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20603: LD_VAR 0 2
20607: PPUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: CALL 20866 0 2
20617: NOT
20618: IFFALSE 20679
// repeat engine := _engine [ 1 ] ;
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_VAR 0 11
20629: PUSH
20630: LD_INT 1
20632: ARRAY
20633: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20634: LD_ADDR_VAR 0 11
20638: PUSH
20639: LD_VAR 0 11
20643: PPUSH
20644: LD_INT 1
20646: PPUSH
20647: CALL_OW 3
20651: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20652: LD_VAR 0 2
20656: PPUSH
20657: LD_VAR 0 3
20661: PPUSH
20662: CALL 20866 0 2
20666: IFTRUE 20677
20668: PUSH
20669: LD_VAR 0 11
20673: PUSH
20674: EMPTY
20675: EQUAL
20676: OR
20677: IFFALSE 20620
// if not control in _control then
20679: LD_VAR 0 4
20683: PUSH
20684: LD_VAR 0 12
20688: IN
20689: NOT
20690: IFFALSE 20716
// control := _control [ rand ( 1 , _control ) ] ;
20692: LD_ADDR_VAR 0 4
20696: PUSH
20697: LD_VAR 0 12
20701: PUSH
20702: LD_INT 1
20704: PPUSH
20705: LD_VAR 0 12
20709: PPUSH
20710: CALL_OW 12
20714: ARRAY
20715: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20716: LD_VAR 0 2
20720: PPUSH
20721: LD_VAR 0 5
20725: PPUSH
20726: CALL 21088 0 2
20730: NOT
20731: IFFALSE 20792
// repeat weapon := _weapon [ 1 ] ;
20733: LD_ADDR_VAR 0 5
20737: PUSH
20738: LD_VAR 0 10
20742: PUSH
20743: LD_INT 1
20745: ARRAY
20746: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20747: LD_ADDR_VAR 0 10
20751: PUSH
20752: LD_VAR 0 10
20756: PPUSH
20757: LD_INT 1
20759: PPUSH
20760: CALL_OW 3
20764: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20765: LD_VAR 0 2
20769: PPUSH
20770: LD_VAR 0 5
20774: PPUSH
20775: CALL 21088 0 2
20779: IFTRUE 20790
20781: PUSH
20782: LD_VAR 0 10
20786: PUSH
20787: EMPTY
20788: EQUAL
20789: OR
20790: IFFALSE 20733
// result := [ ] ;
20792: LD_ADDR_VAR 0 6
20796: PUSH
20797: EMPTY
20798: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_VAR 0 2
20808: PPUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: LD_VAR 0 4
20818: PPUSH
20819: LD_VAR 0 5
20823: PPUSH
20824: CALL_OW 448
20828: IFFALSE 20861
// result := [ chassis , engine , control , weapon ] ;
20830: LD_ADDR_VAR 0 6
20834: PUSH
20835: LD_VAR 0 2
20839: PUSH
20840: LD_VAR 0 3
20844: PUSH
20845: LD_VAR 0 4
20849: PUSH
20850: LD_VAR 0 5
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: ST_TO_ADDR
// end ;
20861: LD_VAR 0 6
20865: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20866: LD_INT 0
20868: PPUSH
// if not chassis or not engine then
20869: LD_VAR 0 1
20873: NOT
20874: IFTRUE 20883
20876: PUSH
20877: LD_VAR 0 2
20881: NOT
20882: OR
20883: IFFALSE 20887
// exit ;
20885: GO 21083
// case engine of engine_solar :
20887: LD_VAR 0 2
20891: PUSH
20892: LD_INT 2
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20938
20900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_INT 11
20908: PUSH
20909: LD_INT 12
20911: PUSH
20912: LD_INT 13
20914: PUSH
20915: LD_INT 14
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: ST_TO_ADDR
20936: GO 21067
20938: LD_INT 1
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 21008
20946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20947: LD_ADDR_VAR 0 3
20951: PUSH
20952: LD_INT 11
20954: PUSH
20955: LD_INT 12
20957: PUSH
20958: LD_INT 13
20960: PUSH
20961: LD_INT 14
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 4
20975: PUSH
20976: LD_INT 5
20978: PUSH
20979: LD_INT 21
20981: PUSH
20982: LD_INT 23
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_INT 24
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 21067
21008: LD_INT 3
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21066
21016: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 13
21024: PUSH
21025: LD_INT 14
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: LD_INT 3
21033: PUSH
21034: LD_INT 4
21036: PUSH
21037: LD_INT 5
21039: PUSH
21040: LD_INT 21
21042: PUSH
21043: LD_INT 22
21045: PUSH
21046: LD_INT 23
21048: PUSH
21049: LD_INT 24
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: ST_TO_ADDR
21064: GO 21067
21066: POP
// result := ( chassis in result ) ;
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_VAR 0 1
21076: PUSH
21077: LD_VAR 0 3
21081: IN
21082: ST_TO_ADDR
// end ;
21083: LD_VAR 0 3
21087: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21088: LD_INT 0
21090: PPUSH
// if not chassis or not weapon then
21091: LD_VAR 0 1
21095: NOT
21096: IFTRUE 21105
21098: PUSH
21099: LD_VAR 0 2
21103: NOT
21104: OR
21105: IFFALSE 21109
// exit ;
21107: GO 22203
// case weapon of us_machine_gun :
21109: LD_VAR 0 2
21113: PUSH
21114: LD_INT 2
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21152
21122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21123: LD_ADDR_VAR 0 3
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 3
21136: PUSH
21137: LD_INT 4
21139: PUSH
21140: LD_INT 5
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: ST_TO_ADDR
21150: GO 22187
21152: LD_INT 3
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21190
21160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21161: LD_ADDR_VAR 0 3
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 3
21174: PUSH
21175: LD_INT 4
21177: PUSH
21178: LD_INT 5
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: ST_TO_ADDR
21188: GO 22187
21190: LD_INT 11
21192: DOUBLE
21193: EQUAL
21194: IFTRUE 21198
21196: GO 21228
21198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21199: LD_ADDR_VAR 0 3
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: LD_INT 4
21215: PUSH
21216: LD_INT 5
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: ST_TO_ADDR
21226: GO 22187
21228: LD_INT 4
21230: DOUBLE
21231: EQUAL
21232: IFTRUE 21236
21234: GO 21262
21236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21237: LD_ADDR_VAR 0 3
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: LD_INT 3
21247: PUSH
21248: LD_INT 4
21250: PUSH
21251: LD_INT 5
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: ST_TO_ADDR
21260: GO 22187
21262: LD_INT 5
21264: DOUBLE
21265: EQUAL
21266: IFTRUE 21270
21268: GO 21296
21270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: LD_INT 3
21281: PUSH
21282: LD_INT 4
21284: PUSH
21285: LD_INT 5
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: ST_TO_ADDR
21294: GO 22187
21296: LD_INT 9
21298: DOUBLE
21299: EQUAL
21300: IFTRUE 21304
21302: GO 21330
21304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21305: LD_ADDR_VAR 0 3
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 3
21315: PUSH
21316: LD_INT 4
21318: PUSH
21319: LD_INT 5
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: ST_TO_ADDR
21328: GO 22187
21330: LD_INT 7
21332: DOUBLE
21333: EQUAL
21334: IFTRUE 21338
21336: GO 21364
21338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21339: LD_ADDR_VAR 0 3
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 4
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
21362: GO 22187
21364: LD_INT 12
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21398
21372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21373: LD_ADDR_VAR 0 3
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: LD_INT 3
21383: PUSH
21384: LD_INT 4
21386: PUSH
21387: LD_INT 5
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
21396: GO 22187
21398: LD_INT 13
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21432
21406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21407: LD_ADDR_VAR 0 3
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 3
21417: PUSH
21418: LD_INT 4
21420: PUSH
21421: LD_INT 5
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: ST_TO_ADDR
21430: GO 22187
21432: LD_INT 14
21434: DOUBLE
21435: EQUAL
21436: IFTRUE 21440
21438: GO 21458
21440: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21441: LD_ADDR_VAR 0 3
21445: PUSH
21446: LD_INT 4
21448: PUSH
21449: LD_INT 5
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: ST_TO_ADDR
21456: GO 22187
21458: LD_INT 6
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21484
21466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21467: LD_ADDR_VAR 0 3
21471: PUSH
21472: LD_INT 4
21474: PUSH
21475: LD_INT 5
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: ST_TO_ADDR
21482: GO 22187
21484: LD_INT 10
21486: DOUBLE
21487: EQUAL
21488: IFTRUE 21492
21490: GO 21510
21492: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21493: LD_ADDR_VAR 0 3
21497: PUSH
21498: LD_INT 4
21500: PUSH
21501: LD_INT 5
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: ST_TO_ADDR
21508: GO 22187
21510: LD_INT 22
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21544
21518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21519: LD_ADDR_VAR 0 3
21523: PUSH
21524: LD_INT 11
21526: PUSH
21527: LD_INT 12
21529: PUSH
21530: LD_INT 13
21532: PUSH
21533: LD_INT 14
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: ST_TO_ADDR
21542: GO 22187
21544: LD_INT 23
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21552
21550: GO 21578
21552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_INT 11
21560: PUSH
21561: LD_INT 12
21563: PUSH
21564: LD_INT 13
21566: PUSH
21567: LD_INT 14
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: ST_TO_ADDR
21576: GO 22187
21578: LD_INT 24
21580: DOUBLE
21581: EQUAL
21582: IFTRUE 21586
21584: GO 21612
21586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21587: LD_ADDR_VAR 0 3
21591: PUSH
21592: LD_INT 11
21594: PUSH
21595: LD_INT 12
21597: PUSH
21598: LD_INT 13
21600: PUSH
21601: LD_INT 14
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: ST_TO_ADDR
21610: GO 22187
21612: LD_INT 30
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21646
21620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21621: LD_ADDR_VAR 0 3
21625: PUSH
21626: LD_INT 11
21628: PUSH
21629: LD_INT 12
21631: PUSH
21632: LD_INT 13
21634: PUSH
21635: LD_INT 14
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: ST_TO_ADDR
21644: GO 22187
21646: LD_INT 25
21648: DOUBLE
21649: EQUAL
21650: IFTRUE 21654
21652: GO 21672
21654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21655: LD_ADDR_VAR 0 3
21659: PUSH
21660: LD_INT 13
21662: PUSH
21663: LD_INT 14
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 22187
21672: LD_INT 27
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21698
21680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21681: LD_ADDR_VAR 0 3
21685: PUSH
21686: LD_INT 13
21688: PUSH
21689: LD_INT 14
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: ST_TO_ADDR
21696: GO 22187
21698: LD_INT 92
21700: DOUBLE
21701: EQUAL
21702: IFTRUE 21706
21704: GO 21732
21706: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_INT 11
21714: PUSH
21715: LD_INT 12
21717: PUSH
21718: LD_INT 13
21720: PUSH
21721: LD_INT 14
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: ST_TO_ADDR
21730: GO 22187
21732: LD_INT 28
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21758
21740: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 13
21748: PUSH
21749: LD_INT 14
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: ST_TO_ADDR
21756: GO 22187
21758: LD_INT 29
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21784
21766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21767: LD_ADDR_VAR 0 3
21771: PUSH
21772: LD_INT 13
21774: PUSH
21775: LD_INT 14
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: ST_TO_ADDR
21782: GO 22187
21784: LD_INT 31
21786: DOUBLE
21787: EQUAL
21788: IFTRUE 21792
21790: GO 21810
21792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21793: LD_ADDR_VAR 0 3
21797: PUSH
21798: LD_INT 13
21800: PUSH
21801: LD_INT 14
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: ST_TO_ADDR
21808: GO 22187
21810: LD_INT 26
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21836
21818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21819: LD_ADDR_VAR 0 3
21823: PUSH
21824: LD_INT 13
21826: PUSH
21827: LD_INT 14
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: ST_TO_ADDR
21834: GO 22187
21836: LD_INT 42
21838: DOUBLE
21839: EQUAL
21840: IFTRUE 21844
21842: GO 21870
21844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21845: LD_ADDR_VAR 0 3
21849: PUSH
21850: LD_INT 21
21852: PUSH
21853: LD_INT 22
21855: PUSH
21856: LD_INT 23
21858: PUSH
21859: LD_INT 24
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: ST_TO_ADDR
21868: GO 22187
21870: LD_INT 43
21872: DOUBLE
21873: EQUAL
21874: IFTRUE 21878
21876: GO 21904
21878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21879: LD_ADDR_VAR 0 3
21883: PUSH
21884: LD_INT 21
21886: PUSH
21887: LD_INT 22
21889: PUSH
21890: LD_INT 23
21892: PUSH
21893: LD_INT 24
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
21902: GO 22187
21904: LD_INT 44
21906: DOUBLE
21907: EQUAL
21908: IFTRUE 21912
21910: GO 21938
21912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21913: LD_ADDR_VAR 0 3
21917: PUSH
21918: LD_INT 21
21920: PUSH
21921: LD_INT 22
21923: PUSH
21924: LD_INT 23
21926: PUSH
21927: LD_INT 24
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: ST_TO_ADDR
21936: GO 22187
21938: LD_INT 45
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 21972
21946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21947: LD_ADDR_VAR 0 3
21951: PUSH
21952: LD_INT 21
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 23
21960: PUSH
21961: LD_INT 24
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: ST_TO_ADDR
21970: GO 22187
21972: LD_INT 49
21974: DOUBLE
21975: EQUAL
21976: IFTRUE 21980
21978: GO 22006
21980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 21
21988: PUSH
21989: LD_INT 22
21991: PUSH
21992: LD_INT 23
21994: PUSH
21995: LD_INT 24
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: ST_TO_ADDR
22004: GO 22187
22006: LD_INT 51
22008: DOUBLE
22009: EQUAL
22010: IFTRUE 22014
22012: GO 22040
22014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22015: LD_ADDR_VAR 0 3
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_INT 23
22028: PUSH
22029: LD_INT 24
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: ST_TO_ADDR
22038: GO 22187
22040: LD_INT 52
22042: DOUBLE
22043: EQUAL
22044: IFTRUE 22048
22046: GO 22074
22048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22049: LD_ADDR_VAR 0 3
22053: PUSH
22054: LD_INT 21
22056: PUSH
22057: LD_INT 22
22059: PUSH
22060: LD_INT 23
22062: PUSH
22063: LD_INT 24
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: ST_TO_ADDR
22072: GO 22187
22074: LD_INT 53
22076: DOUBLE
22077: EQUAL
22078: IFTRUE 22082
22080: GO 22100
22082: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22083: LD_ADDR_VAR 0 3
22087: PUSH
22088: LD_INT 23
22090: PUSH
22091: LD_INT 24
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: ST_TO_ADDR
22098: GO 22187
22100: LD_INT 46
22102: DOUBLE
22103: EQUAL
22104: IFTRUE 22108
22106: GO 22126
22108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 23
22116: PUSH
22117: LD_INT 24
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: ST_TO_ADDR
22124: GO 22187
22126: LD_INT 47
22128: DOUBLE
22129: EQUAL
22130: IFTRUE 22134
22132: GO 22152
22134: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
22135: LD_ADDR_VAR 0 3
22139: PUSH
22140: LD_INT 23
22142: PUSH
22143: LD_INT 24
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: ST_TO_ADDR
22150: GO 22187
22152: LD_INT 98
22154: DOUBLE
22155: EQUAL
22156: IFTRUE 22160
22158: GO 22186
22160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22161: LD_ADDR_VAR 0 3
22165: PUSH
22166: LD_INT 21
22168: PUSH
22169: LD_INT 22
22171: PUSH
22172: LD_INT 23
22174: PUSH
22175: LD_INT 24
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
22184: GO 22187
22186: POP
// result := ( chassis in result ) ;
22187: LD_ADDR_VAR 0 3
22191: PUSH
22192: LD_VAR 0 1
22196: PUSH
22197: LD_VAR 0 3
22201: IN
22202: ST_TO_ADDR
// end ;
22203: LD_VAR 0 3
22207: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22208: LD_INT 0
22210: PPUSH
22211: PPUSH
22212: PPUSH
22213: PPUSH
22214: PPUSH
22215: PPUSH
22216: PPUSH
// result := array ;
22217: LD_ADDR_VAR 0 5
22221: PUSH
22222: LD_VAR 0 1
22226: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22227: LD_VAR 0 1
22231: NOT
22232: IFTRUE 22241
22234: PUSH
22235: LD_VAR 0 2
22239: NOT
22240: OR
22241: IFTRUE 22250
22243: PUSH
22244: LD_VAR 0 3
22248: NOT
22249: OR
22250: IFTRUE 22264
22252: PUSH
22253: LD_VAR 0 2
22257: PUSH
22258: LD_VAR 0 1
22262: GREATER
22263: OR
22264: IFTRUE 22278
22266: PUSH
22267: LD_VAR 0 3
22271: PUSH
22272: LD_VAR 0 1
22276: GREATER
22277: OR
22278: IFFALSE 22282
// exit ;
22280: GO 22578
// if direction then
22282: LD_VAR 0 4
22286: IFFALSE 22350
// begin d := 1 ;
22288: LD_ADDR_VAR 0 9
22292: PUSH
22293: LD_INT 1
22295: ST_TO_ADDR
// if i_from > i_to then
22296: LD_VAR 0 2
22300: PUSH
22301: LD_VAR 0 3
22305: GREATER
22306: IFFALSE 22332
// length := ( array - i_from ) + i_to else
22308: LD_ADDR_VAR 0 11
22312: PUSH
22313: LD_VAR 0 1
22317: PUSH
22318: LD_VAR 0 2
22322: MINUS
22323: PUSH
22324: LD_VAR 0 3
22328: PLUS
22329: ST_TO_ADDR
22330: GO 22348
// length := i_to - i_from ;
22332: LD_ADDR_VAR 0 11
22336: PUSH
22337: LD_VAR 0 3
22341: PUSH
22342: LD_VAR 0 2
22346: MINUS
22347: ST_TO_ADDR
// end else
22348: GO 22411
// begin d := - 1 ;
22350: LD_ADDR_VAR 0 9
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: ST_TO_ADDR
// if i_from > i_to then
22359: LD_VAR 0 2
22363: PUSH
22364: LD_VAR 0 3
22368: GREATER
22369: IFFALSE 22389
// length := i_from - i_to else
22371: LD_ADDR_VAR 0 11
22375: PUSH
22376: LD_VAR 0 2
22380: PUSH
22381: LD_VAR 0 3
22385: MINUS
22386: ST_TO_ADDR
22387: GO 22411
// length := ( array - i_to ) + i_from ;
22389: LD_ADDR_VAR 0 11
22393: PUSH
22394: LD_VAR 0 1
22398: PUSH
22399: LD_VAR 0 3
22403: MINUS
22404: PUSH
22405: LD_VAR 0 2
22409: PLUS
22410: ST_TO_ADDR
// end ; if not length then
22411: LD_VAR 0 11
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22578
// tmp := array ;
22420: LD_ADDR_VAR 0 10
22424: PUSH
22425: LD_VAR 0 1
22429: ST_TO_ADDR
// for i = 1 to length do
22430: LD_ADDR_VAR 0 6
22434: PUSH
22435: DOUBLE
22436: LD_INT 1
22438: DEC
22439: ST_TO_ADDR
22440: LD_VAR 0 11
22444: PUSH
22445: FOR_TO
22446: IFFALSE 22566
// begin for j = 1 to array do
22448: LD_ADDR_VAR 0 7
22452: PUSH
22453: DOUBLE
22454: LD_INT 1
22456: DEC
22457: ST_TO_ADDR
22458: LD_VAR 0 1
22462: PUSH
22463: FOR_TO
22464: IFFALSE 22552
// begin k := j + d ;
22466: LD_ADDR_VAR 0 8
22470: PUSH
22471: LD_VAR 0 7
22475: PUSH
22476: LD_VAR 0 9
22480: PLUS
22481: ST_TO_ADDR
// if k > array then
22482: LD_VAR 0 8
22486: PUSH
22487: LD_VAR 0 1
22491: GREATER
22492: IFFALSE 22502
// k := 1 ;
22494: LD_ADDR_VAR 0 8
22498: PUSH
22499: LD_INT 1
22501: ST_TO_ADDR
// if not k then
22502: LD_VAR 0 8
22506: NOT
22507: IFFALSE 22519
// k := array ;
22509: LD_ADDR_VAR 0 8
22513: PUSH
22514: LD_VAR 0 1
22518: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22519: LD_ADDR_VAR 0 10
22523: PUSH
22524: LD_VAR 0 10
22528: PPUSH
22529: LD_VAR 0 8
22533: PPUSH
22534: LD_VAR 0 1
22538: PUSH
22539: LD_VAR 0 7
22543: ARRAY
22544: PPUSH
22545: CALL_OW 1
22549: ST_TO_ADDR
// end ;
22550: GO 22463
22552: POP
22553: POP
// array := tmp ;
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_VAR 0 10
22563: ST_TO_ADDR
// end ;
22564: GO 22445
22566: POP
22567: POP
// result := array ;
22568: LD_ADDR_VAR 0 5
22572: PUSH
22573: LD_VAR 0 1
22577: ST_TO_ADDR
// end ;
22578: LD_VAR 0 5
22582: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22583: LD_INT 0
22585: PPUSH
22586: PPUSH
// result := 0 ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: LD_INT 0
22594: ST_TO_ADDR
// if not array or not value in array then
22595: LD_VAR 0 1
22599: NOT
22600: IFTRUE 22615
22602: PUSH
22603: LD_VAR 0 2
22607: PUSH
22608: LD_VAR 0 1
22612: IN
22613: NOT
22614: OR
22615: IFFALSE 22619
// exit ;
22617: GO 22673
// for i = 1 to array do
22619: LD_ADDR_VAR 0 4
22623: PUSH
22624: DOUBLE
22625: LD_INT 1
22627: DEC
22628: ST_TO_ADDR
22629: LD_VAR 0 1
22633: PUSH
22634: FOR_TO
22635: IFFALSE 22671
// if value = array [ i ] then
22637: LD_VAR 0 2
22641: PUSH
22642: LD_VAR 0 1
22646: PUSH
22647: LD_VAR 0 4
22651: ARRAY
22652: EQUAL
22653: IFFALSE 22669
// begin result := i ;
22655: LD_ADDR_VAR 0 3
22659: PUSH
22660: LD_VAR 0 4
22664: ST_TO_ADDR
// exit ;
22665: POP
22666: POP
22667: GO 22673
// end ;
22669: GO 22634
22671: POP
22672: POP
// end ;
22673: LD_VAR 0 3
22677: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22678: LD_INT 0
22680: PPUSH
// vc_chassis := chassis ;
22681: LD_ADDR_OWVAR 37
22685: PUSH
22686: LD_VAR 0 1
22690: ST_TO_ADDR
// vc_engine := engine ;
22691: LD_ADDR_OWVAR 39
22695: PUSH
22696: LD_VAR 0 2
22700: ST_TO_ADDR
// vc_control := control ;
22701: LD_ADDR_OWVAR 38
22705: PUSH
22706: LD_VAR 0 3
22710: ST_TO_ADDR
// vc_weapon := weapon ;
22711: LD_ADDR_OWVAR 40
22715: PUSH
22716: LD_VAR 0 4
22720: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22721: LD_ADDR_OWVAR 41
22725: PUSH
22726: LD_VAR 0 5
22730: ST_TO_ADDR
// end ;
22731: LD_VAR 0 6
22735: RET
// export function WantPlant ( unit ) ; var task ; begin
22736: LD_INT 0
22738: PPUSH
22739: PPUSH
// result := false ;
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: LD_INT 0
22747: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22748: LD_ADDR_VAR 0 3
22752: PUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 437
22762: ST_TO_ADDR
// if task then
22763: LD_VAR 0 3
22767: IFFALSE 22795
// if task [ 1 ] [ 1 ] = p then
22769: LD_VAR 0 3
22773: PUSH
22774: LD_INT 1
22776: ARRAY
22777: PUSH
22778: LD_INT 1
22780: ARRAY
22781: PUSH
22782: LD_STRING p
22784: EQUAL
22785: IFFALSE 22795
// result := true ;
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 1
22794: ST_TO_ADDR
// end ;
22795: LD_VAR 0 2
22799: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
// if pos < 1 then
22806: LD_VAR 0 2
22810: PUSH
22811: LD_INT 1
22813: LESS
22814: IFFALSE 22818
// exit ;
22816: GO 23121
// if pos = 1 then
22818: LD_VAR 0 2
22822: PUSH
22823: LD_INT 1
22825: EQUAL
22826: IFFALSE 22859
// result := Replace ( arr , pos [ 1 ] , value ) else
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_VAR 0 1
22837: PPUSH
22838: LD_VAR 0 2
22842: PUSH
22843: LD_INT 1
22845: ARRAY
22846: PPUSH
22847: LD_VAR 0 3
22851: PPUSH
22852: CALL_OW 1
22856: ST_TO_ADDR
22857: GO 23121
// begin tmp := arr ;
22859: LD_ADDR_VAR 0 6
22863: PUSH
22864: LD_VAR 0 1
22868: ST_TO_ADDR
// s_arr := [ tmp ] ;
22869: LD_ADDR_VAR 0 7
22873: PUSH
22874: LD_VAR 0 6
22878: PUSH
22879: EMPTY
22880: LIST
22881: ST_TO_ADDR
// for i = 1 to pos - 1 do
22882: LD_ADDR_VAR 0 5
22886: PUSH
22887: DOUBLE
22888: LD_INT 1
22890: DEC
22891: ST_TO_ADDR
22892: LD_VAR 0 2
22896: PUSH
22897: LD_INT 1
22899: MINUS
22900: PUSH
22901: FOR_TO
22902: IFFALSE 22947
// begin tmp := tmp [ pos [ i ] ] ;
22904: LD_ADDR_VAR 0 6
22908: PUSH
22909: LD_VAR 0 6
22913: PUSH
22914: LD_VAR 0 2
22918: PUSH
22919: LD_VAR 0 5
22923: ARRAY
22924: ARRAY
22925: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22926: LD_ADDR_VAR 0 7
22930: PUSH
22931: LD_VAR 0 7
22935: PUSH
22936: LD_VAR 0 6
22940: PUSH
22941: EMPTY
22942: LIST
22943: ADD
22944: ST_TO_ADDR
// end ;
22945: GO 22901
22947: POP
22948: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22949: LD_ADDR_VAR 0 6
22953: PUSH
22954: LD_VAR 0 6
22958: PPUSH
22959: LD_VAR 0 2
22963: PUSH
22964: LD_VAR 0 2
22968: ARRAY
22969: PPUSH
22970: LD_VAR 0 3
22974: PPUSH
22975: CALL_OW 1
22979: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22980: LD_ADDR_VAR 0 7
22984: PUSH
22985: LD_VAR 0 7
22989: PPUSH
22990: LD_VAR 0 7
22994: PPUSH
22995: LD_VAR 0 6
22999: PPUSH
23000: CALL_OW 1
23004: ST_TO_ADDR
// for i = s_arr downto 2 do
23005: LD_ADDR_VAR 0 5
23009: PUSH
23010: DOUBLE
23011: LD_VAR 0 7
23015: INC
23016: ST_TO_ADDR
23017: LD_INT 2
23019: PUSH
23020: FOR_DOWNTO
23021: IFFALSE 23105
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23023: LD_ADDR_VAR 0 6
23027: PUSH
23028: LD_VAR 0 7
23032: PUSH
23033: LD_VAR 0 5
23037: PUSH
23038: LD_INT 1
23040: MINUS
23041: ARRAY
23042: PPUSH
23043: LD_VAR 0 2
23047: PUSH
23048: LD_VAR 0 5
23052: PUSH
23053: LD_INT 1
23055: MINUS
23056: ARRAY
23057: PPUSH
23058: LD_VAR 0 7
23062: PUSH
23063: LD_VAR 0 5
23067: ARRAY
23068: PPUSH
23069: CALL_OW 1
23073: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23074: LD_ADDR_VAR 0 7
23078: PUSH
23079: LD_VAR 0 7
23083: PPUSH
23084: LD_VAR 0 5
23088: PUSH
23089: LD_INT 1
23091: MINUS
23092: PPUSH
23093: LD_VAR 0 6
23097: PPUSH
23098: CALL_OW 1
23102: ST_TO_ADDR
// end ;
23103: GO 23020
23105: POP
23106: POP
// result := s_arr [ 1 ] ;
23107: LD_ADDR_VAR 0 4
23111: PUSH
23112: LD_VAR 0 7
23116: PUSH
23117: LD_INT 1
23119: ARRAY
23120: ST_TO_ADDR
// end ; end ;
23121: LD_VAR 0 4
23125: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23126: LD_INT 0
23128: PPUSH
23129: PPUSH
// if not list then
23130: LD_VAR 0 1
23134: NOT
23135: IFFALSE 23139
// exit ;
23137: GO 23230
// i := list [ pos1 ] ;
23139: LD_ADDR_VAR 0 5
23143: PUSH
23144: LD_VAR 0 1
23148: PUSH
23149: LD_VAR 0 2
23153: ARRAY
23154: ST_TO_ADDR
// if not i then
23155: LD_VAR 0 5
23159: NOT
23160: IFFALSE 23164
// exit ;
23162: GO 23230
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23164: LD_ADDR_VAR 0 1
23168: PUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: LD_VAR 0 2
23178: PPUSH
23179: LD_VAR 0 1
23183: PUSH
23184: LD_VAR 0 3
23188: ARRAY
23189: PPUSH
23190: CALL_OW 1
23194: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23195: LD_ADDR_VAR 0 1
23199: PUSH
23200: LD_VAR 0 1
23204: PPUSH
23205: LD_VAR 0 3
23209: PPUSH
23210: LD_VAR 0 5
23214: PPUSH
23215: CALL_OW 1
23219: ST_TO_ADDR
// result := list ;
23220: LD_ADDR_VAR 0 4
23224: PUSH
23225: LD_VAR 0 1
23229: ST_TO_ADDR
// end ;
23230: LD_VAR 0 4
23234: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23235: LD_INT 0
23237: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23238: LD_ADDR_VAR 0 5
23242: PUSH
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL_OW 250
23252: PPUSH
23253: LD_VAR 0 1
23257: PPUSH
23258: CALL_OW 251
23262: PPUSH
23263: LD_VAR 0 2
23267: PPUSH
23268: LD_VAR 0 3
23272: PPUSH
23273: LD_VAR 0 4
23277: PPUSH
23278: CALL 23660 0 5
23282: ST_TO_ADDR
// end ;
23283: LD_VAR 0 5
23287: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
23288: LD_INT 0
23290: PPUSH
23291: PPUSH
23292: PPUSH
23293: PPUSH
// if not list or not unit then
23294: LD_VAR 0 2
23298: NOT
23299: IFTRUE 23308
23301: PUSH
23302: LD_VAR 0 1
23306: NOT
23307: OR
23308: IFFALSE 23312
// exit ;
23310: GO 23655
// result := [ ] ;
23312: LD_ADDR_VAR 0 5
23316: PUSH
23317: EMPTY
23318: ST_TO_ADDR
// for i in list do
23319: LD_ADDR_VAR 0 6
23323: PUSH
23324: LD_VAR 0 2
23328: PUSH
23329: FOR_IN
23330: IFFALSE 23548
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23332: LD_ADDR_VAR 0 8
23336: PUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: LD_VAR 0 6
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PPUSH
23351: LD_VAR 0 6
23355: PUSH
23356: LD_INT 2
23358: ARRAY
23359: PPUSH
23360: CALL_OW 297
23364: ST_TO_ADDR
// if not Count ( result ) then
23365: LD_VAR 0 5
23369: PPUSH
23370: CALL 19882 0 1
23374: NOT
23375: IFFALSE 23408
// begin result := Join ( result , [ i , tmp ] ) ;
23377: LD_ADDR_VAR 0 5
23381: PUSH
23382: LD_VAR 0 5
23386: PPUSH
23387: LD_VAR 0 6
23391: PUSH
23392: LD_VAR 0 8
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PPUSH
23401: CALL 55858 0 2
23405: ST_TO_ADDR
// continue ;
23406: GO 23329
// end ; if result [ result ] [ 2 ] <= tmp then
23408: LD_VAR 0 5
23412: PUSH
23413: LD_VAR 0 5
23417: ARRAY
23418: PUSH
23419: LD_INT 2
23421: ARRAY
23422: PUSH
23423: LD_VAR 0 8
23427: LESSEQUAL
23428: IFFALSE 23461
// result := Join ( result , [ i , tmp ] ) else
23430: LD_ADDR_VAR 0 5
23434: PUSH
23435: LD_VAR 0 5
23439: PPUSH
23440: LD_VAR 0 6
23444: PUSH
23445: LD_VAR 0 8
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL 55858 0 2
23458: ST_TO_ADDR
23459: GO 23546
// begin for j := 1 to Count ( result ) do
23461: LD_ADDR_VAR 0 7
23465: PUSH
23466: DOUBLE
23467: LD_INT 1
23469: DEC
23470: ST_TO_ADDR
23471: LD_VAR 0 5
23475: PPUSH
23476: CALL 19882 0 1
23480: PUSH
23481: FOR_TO
23482: IFFALSE 23544
// begin if tmp < result [ j ] [ 2 ] then
23484: LD_VAR 0 8
23488: PUSH
23489: LD_VAR 0 5
23493: PUSH
23494: LD_VAR 0 7
23498: ARRAY
23499: PUSH
23500: LD_INT 2
23502: ARRAY
23503: LESS
23504: IFFALSE 23542
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23506: LD_ADDR_VAR 0 5
23510: PUSH
23511: LD_VAR 0 5
23515: PPUSH
23516: LD_VAR 0 7
23520: PPUSH
23521: LD_VAR 0 6
23525: PUSH
23526: LD_VAR 0 8
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 2
23539: ST_TO_ADDR
// break ;
23540: GO 23544
// end ; end ;
23542: GO 23481
23544: POP
23545: POP
// end ; end ;
23546: GO 23329
23548: POP
23549: POP
// if result and not asc then
23550: LD_VAR 0 5
23554: IFFALSE 23563
23556: PUSH
23557: LD_VAR 0 3
23561: NOT
23562: AND
23563: IFFALSE 23580
// result := ReverseArray ( result ) ;
23565: LD_ADDR_VAR 0 5
23569: PUSH
23570: LD_VAR 0 5
23574: PPUSH
23575: CALL 50938 0 1
23579: ST_TO_ADDR
// tmp := [ ] ;
23580: LD_ADDR_VAR 0 8
23584: PUSH
23585: EMPTY
23586: ST_TO_ADDR
// if mode then
23587: LD_VAR 0 4
23591: IFFALSE 23655
// begin for i := 1 to result do
23593: LD_ADDR_VAR 0 6
23597: PUSH
23598: DOUBLE
23599: LD_INT 1
23601: DEC
23602: ST_TO_ADDR
23603: LD_VAR 0 5
23607: PUSH
23608: FOR_TO
23609: IFFALSE 23643
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23611: LD_ADDR_VAR 0 8
23615: PUSH
23616: LD_VAR 0 8
23620: PPUSH
23621: LD_VAR 0 5
23625: PUSH
23626: LD_VAR 0 6
23630: ARRAY
23631: PUSH
23632: LD_INT 1
23634: ARRAY
23635: PPUSH
23636: CALL 55858 0 2
23640: ST_TO_ADDR
23641: GO 23608
23643: POP
23644: POP
// result := tmp ;
23645: LD_ADDR_VAR 0 5
23649: PUSH
23650: LD_VAR 0 8
23654: ST_TO_ADDR
// end ; end ;
23655: LD_VAR 0 5
23659: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
// if not list then
23666: LD_VAR 0 3
23670: NOT
23671: IFFALSE 23675
// exit ;
23673: GO 24065
// result := [ ] ;
23675: LD_ADDR_VAR 0 6
23679: PUSH
23680: EMPTY
23681: ST_TO_ADDR
// for i in list do
23682: LD_ADDR_VAR 0 7
23686: PUSH
23687: LD_VAR 0 3
23691: PUSH
23692: FOR_IN
23693: IFFALSE 23895
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23695: LD_ADDR_VAR 0 9
23699: PUSH
23700: LD_VAR 0 7
23704: PPUSH
23705: LD_VAR 0 1
23709: PPUSH
23710: LD_VAR 0 2
23714: PPUSH
23715: CALL_OW 297
23719: ST_TO_ADDR
// if not result then
23720: LD_VAR 0 6
23724: NOT
23725: IFFALSE 23751
// result := [ [ i , tmp ] ] else
23727: LD_ADDR_VAR 0 6
23731: PUSH
23732: LD_VAR 0 7
23736: PUSH
23737: LD_VAR 0 9
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: EMPTY
23747: LIST
23748: ST_TO_ADDR
23749: GO 23893
// begin if result [ result ] [ 2 ] <= tmp then
23751: LD_VAR 0 6
23755: PUSH
23756: LD_VAR 0 6
23760: ARRAY
23761: PUSH
23762: LD_INT 2
23764: ARRAY
23765: PUSH
23766: LD_VAR 0 9
23770: LESSEQUAL
23771: IFFALSE 23813
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23773: LD_ADDR_VAR 0 6
23777: PUSH
23778: LD_VAR 0 6
23782: PPUSH
23783: LD_VAR 0 6
23787: PUSH
23788: LD_INT 1
23790: PLUS
23791: PPUSH
23792: LD_VAR 0 7
23796: PUSH
23797: LD_VAR 0 9
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PPUSH
23806: CALL_OW 2
23810: ST_TO_ADDR
23811: GO 23893
// for j := 1 to result do
23813: LD_ADDR_VAR 0 8
23817: PUSH
23818: DOUBLE
23819: LD_INT 1
23821: DEC
23822: ST_TO_ADDR
23823: LD_VAR 0 6
23827: PUSH
23828: FOR_TO
23829: IFFALSE 23891
// begin if tmp < result [ j ] [ 2 ] then
23831: LD_VAR 0 9
23835: PUSH
23836: LD_VAR 0 6
23840: PUSH
23841: LD_VAR 0 8
23845: ARRAY
23846: PUSH
23847: LD_INT 2
23849: ARRAY
23850: LESS
23851: IFFALSE 23889
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23853: LD_ADDR_VAR 0 6
23857: PUSH
23858: LD_VAR 0 6
23862: PPUSH
23863: LD_VAR 0 8
23867: PPUSH
23868: LD_VAR 0 7
23872: PUSH
23873: LD_VAR 0 9
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 2
23886: ST_TO_ADDR
// break ;
23887: GO 23891
// end ; end ;
23889: GO 23828
23891: POP
23892: POP
// end ; end ;
23893: GO 23692
23895: POP
23896: POP
// if result and not asc then
23897: LD_VAR 0 6
23901: IFFALSE 23910
23903: PUSH
23904: LD_VAR 0 4
23908: NOT
23909: AND
23910: IFFALSE 23985
// begin tmp := result ;
23912: LD_ADDR_VAR 0 9
23916: PUSH
23917: LD_VAR 0 6
23921: ST_TO_ADDR
// for i = tmp downto 1 do
23922: LD_ADDR_VAR 0 7
23926: PUSH
23927: DOUBLE
23928: LD_VAR 0 9
23932: INC
23933: ST_TO_ADDR
23934: LD_INT 1
23936: PUSH
23937: FOR_DOWNTO
23938: IFFALSE 23983
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23940: LD_ADDR_VAR 0 6
23944: PUSH
23945: LD_VAR 0 6
23949: PPUSH
23950: LD_VAR 0 9
23954: PUSH
23955: LD_VAR 0 7
23959: MINUS
23960: PUSH
23961: LD_INT 1
23963: PLUS
23964: PPUSH
23965: LD_VAR 0 9
23969: PUSH
23970: LD_VAR 0 7
23974: ARRAY
23975: PPUSH
23976: CALL_OW 1
23980: ST_TO_ADDR
23981: GO 23937
23983: POP
23984: POP
// end ; tmp := [ ] ;
23985: LD_ADDR_VAR 0 9
23989: PUSH
23990: EMPTY
23991: ST_TO_ADDR
// if mode then
23992: LD_VAR 0 5
23996: IFFALSE 24065
// begin for i = 1 to result do
23998: LD_ADDR_VAR 0 7
24002: PUSH
24003: DOUBLE
24004: LD_INT 1
24006: DEC
24007: ST_TO_ADDR
24008: LD_VAR 0 6
24012: PUSH
24013: FOR_TO
24014: IFFALSE 24053
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
24016: LD_ADDR_VAR 0 9
24020: PUSH
24021: LD_VAR 0 9
24025: PPUSH
24026: LD_VAR 0 7
24030: PPUSH
24031: LD_VAR 0 6
24035: PUSH
24036: LD_VAR 0 7
24040: ARRAY
24041: PUSH
24042: LD_INT 1
24044: ARRAY
24045: PPUSH
24046: CALL_OW 1
24050: ST_TO_ADDR
24051: GO 24013
24053: POP
24054: POP
// result := tmp ;
24055: LD_ADDR_VAR 0 6
24059: PUSH
24060: LD_VAR 0 9
24064: ST_TO_ADDR
// end ; end ;
24065: LD_VAR 0 6
24069: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
24070: LD_INT 0
24072: PPUSH
24073: PPUSH
24074: PPUSH
24075: PPUSH
24076: PPUSH
24077: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
24078: LD_ADDR_VAR 0 5
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: EMPTY
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// if not x or not y then
24100: LD_VAR 0 2
24104: NOT
24105: IFTRUE 24114
24107: PUSH
24108: LD_VAR 0 3
24112: NOT
24113: OR
24114: IFFALSE 24118
// exit ;
24116: GO 25774
// if not range then
24118: LD_VAR 0 4
24122: NOT
24123: IFFALSE 24133
// range := 10 ;
24125: LD_ADDR_VAR 0 4
24129: PUSH
24130: LD_INT 10
24132: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24133: LD_ADDR_VAR 0 8
24137: PUSH
24138: LD_INT 81
24140: PUSH
24141: LD_VAR 0 1
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 92
24152: PUSH
24153: LD_VAR 0 2
24157: PUSH
24158: LD_VAR 0 3
24162: PUSH
24163: LD_VAR 0 4
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 21
24179: PUSH
24180: LD_INT 3
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: PPUSH
24196: CALL_OW 69
24200: ST_TO_ADDR
// if not tmp then
24201: LD_VAR 0 8
24205: NOT
24206: IFFALSE 24210
// exit ;
24208: GO 25774
// for i in tmp do
24210: LD_ADDR_VAR 0 6
24214: PUSH
24215: LD_VAR 0 8
24219: PUSH
24220: FOR_IN
24221: IFFALSE 25749
// begin points := [ 0 , 0 , 0 ] ;
24223: LD_ADDR_VAR 0 9
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// bpoints := 1 ;
24242: LD_ADDR_VAR 0 10
24246: PUSH
24247: LD_INT 1
24249: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24250: LD_VAR 0 6
24254: PPUSH
24255: CALL_OW 247
24259: PUSH
24260: LD_INT 1
24262: DOUBLE
24263: EQUAL
24264: IFTRUE 24268
24266: GO 24850
24268: POP
// begin if GetClass ( i ) = 1 then
24269: LD_VAR 0 6
24273: PPUSH
24274: CALL_OW 257
24278: PUSH
24279: LD_INT 1
24281: EQUAL
24282: IFFALSE 24303
// points := [ 10 , 5 , 3 ] ;
24284: LD_ADDR_VAR 0 9
24288: PUSH
24289: LD_INT 10
24291: PUSH
24292: LD_INT 5
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24303: LD_VAR 0 6
24307: PPUSH
24308: CALL_OW 257
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: LD_INT 3
24318: PUSH
24319: LD_INT 4
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: IN
24327: IFFALSE 24348
// points := [ 3 , 2 , 1 ] ;
24329: LD_ADDR_VAR 0 9
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24348: LD_VAR 0 6
24352: PPUSH
24353: CALL_OW 257
24357: PUSH
24358: LD_INT 5
24360: EQUAL
24361: IFFALSE 24382
// points := [ 130 , 5 , 2 ] ;
24363: LD_ADDR_VAR 0 9
24367: PUSH
24368: LD_INT 130
24370: PUSH
24371: LD_INT 5
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24382: LD_VAR 0 6
24386: PPUSH
24387: CALL_OW 257
24391: PUSH
24392: LD_INT 8
24394: EQUAL
24395: IFFALSE 24416
// points := [ 35 , 35 , 30 ] ;
24397: LD_ADDR_VAR 0 9
24401: PUSH
24402: LD_INT 35
24404: PUSH
24405: LD_INT 35
24407: PUSH
24408: LD_INT 30
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24416: LD_VAR 0 6
24420: PPUSH
24421: CALL_OW 257
24425: PUSH
24426: LD_INT 9
24428: EQUAL
24429: IFFALSE 24450
// points := [ 20 , 55 , 40 ] ;
24431: LD_ADDR_VAR 0 9
24435: PUSH
24436: LD_INT 20
24438: PUSH
24439: LD_INT 55
24441: PUSH
24442: LD_INT 40
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24450: LD_VAR 0 6
24454: PPUSH
24455: CALL_OW 257
24459: PUSH
24460: LD_INT 12
24462: PUSH
24463: LD_INT 16
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: IN
24470: IFFALSE 24491
// points := [ 5 , 3 , 2 ] ;
24472: LD_ADDR_VAR 0 9
24476: PUSH
24477: LD_INT 5
24479: PUSH
24480: LD_INT 3
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24491: LD_VAR 0 6
24495: PPUSH
24496: CALL_OW 257
24500: PUSH
24501: LD_INT 17
24503: EQUAL
24504: IFFALSE 24525
// points := [ 100 , 50 , 75 ] ;
24506: LD_ADDR_VAR 0 9
24510: PUSH
24511: LD_INT 100
24513: PUSH
24514: LD_INT 50
24516: PUSH
24517: LD_INT 75
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24525: LD_VAR 0 6
24529: PPUSH
24530: CALL_OW 257
24534: PUSH
24535: LD_INT 15
24537: EQUAL
24538: IFFALSE 24559
// points := [ 10 , 5 , 3 ] ;
24540: LD_ADDR_VAR 0 9
24544: PUSH
24545: LD_INT 10
24547: PUSH
24548: LD_INT 5
24550: PUSH
24551: LD_INT 3
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24559: LD_VAR 0 6
24563: PPUSH
24564: CALL_OW 257
24568: PUSH
24569: LD_INT 14
24571: EQUAL
24572: IFFALSE 24593
// points := [ 10 , 0 , 0 ] ;
24574: LD_ADDR_VAR 0 9
24578: PUSH
24579: LD_INT 10
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: LIST
24592: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24593: LD_VAR 0 6
24597: PPUSH
24598: CALL_OW 257
24602: PUSH
24603: LD_INT 11
24605: EQUAL
24606: IFFALSE 24627
// points := [ 30 , 10 , 5 ] ;
24608: LD_ADDR_VAR 0 9
24612: PUSH
24613: LD_INT 30
24615: PUSH
24616: LD_INT 10
24618: PUSH
24619: LD_INT 5
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24627: LD_VAR 0 1
24631: PPUSH
24632: LD_INT 5
24634: PPUSH
24635: CALL_OW 321
24639: PUSH
24640: LD_INT 2
24642: EQUAL
24643: IFFALSE 24660
// bpoints := bpoints * 1.8 ;
24645: LD_ADDR_VAR 0 10
24649: PUSH
24650: LD_VAR 0 10
24654: PUSH
24655: LD_REAL  1.80000000000000E+0000
24658: MUL
24659: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24660: LD_VAR 0 6
24664: PPUSH
24665: CALL_OW 257
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: IN
24688: IFFALSE 24708
24690: PUSH
24691: LD_VAR 0 1
24695: PPUSH
24696: LD_INT 51
24698: PPUSH
24699: CALL_OW 321
24703: PUSH
24704: LD_INT 2
24706: EQUAL
24707: AND
24708: IFFALSE 24725
// bpoints := bpoints * 1.2 ;
24710: LD_ADDR_VAR 0 10
24714: PUSH
24715: LD_VAR 0 10
24719: PUSH
24720: LD_REAL  1.20000000000000E+0000
24723: MUL
24724: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24725: LD_VAR 0 6
24729: PPUSH
24730: CALL_OW 257
24734: PUSH
24735: LD_INT 5
24737: PUSH
24738: LD_INT 7
24740: PUSH
24741: LD_INT 9
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: IN
24749: IFFALSE 24769
24751: PUSH
24752: LD_VAR 0 1
24756: PPUSH
24757: LD_INT 52
24759: PPUSH
24760: CALL_OW 321
24764: PUSH
24765: LD_INT 2
24767: EQUAL
24768: AND
24769: IFFALSE 24786
// bpoints := bpoints * 1.5 ;
24771: LD_ADDR_VAR 0 10
24775: PUSH
24776: LD_VAR 0 10
24780: PUSH
24781: LD_REAL  1.50000000000000E+0000
24784: MUL
24785: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24786: LD_VAR 0 1
24790: PPUSH
24791: LD_INT 66
24793: PPUSH
24794: CALL_OW 321
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24819
// bpoints := bpoints * 1.1 ;
24804: LD_ADDR_VAR 0 10
24808: PUSH
24809: LD_VAR 0 10
24813: PUSH
24814: LD_REAL  1.10000000000000E+0000
24817: MUL
24818: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24819: LD_ADDR_VAR 0 10
24823: PUSH
24824: LD_VAR 0 10
24828: PUSH
24829: LD_VAR 0 6
24833: PPUSH
24834: LD_INT 1
24836: PPUSH
24837: CALL_OW 259
24841: PUSH
24842: LD_REAL  1.15000000000000E+0000
24845: MUL
24846: MUL
24847: ST_TO_ADDR
// end ; unit_vehicle :
24848: GO 25678
24850: LD_INT 2
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 25666
24858: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24859: LD_VAR 0 6
24863: PPUSH
24864: CALL_OW 264
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 42
24874: PUSH
24875: LD_INT 24
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: IN
24883: IFFALSE 24904
// points := [ 25 , 5 , 3 ] ;
24885: LD_ADDR_VAR 0 9
24889: PUSH
24890: LD_INT 25
24892: PUSH
24893: LD_INT 5
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24904: LD_VAR 0 6
24908: PPUSH
24909: CALL_OW 264
24913: PUSH
24914: LD_INT 4
24916: PUSH
24917: LD_INT 43
24919: PUSH
24920: LD_INT 25
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: IN
24928: IFFALSE 24949
// points := [ 40 , 15 , 5 ] ;
24930: LD_ADDR_VAR 0 9
24934: PUSH
24935: LD_INT 40
24937: PUSH
24938: LD_INT 15
24940: PUSH
24941: LD_INT 5
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24949: LD_VAR 0 6
24953: PPUSH
24954: CALL_OW 264
24958: PUSH
24959: LD_INT 3
24961: PUSH
24962: LD_INT 23
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: IN
24969: IFFALSE 24990
// points := [ 7 , 25 , 8 ] ;
24971: LD_ADDR_VAR 0 9
24975: PUSH
24976: LD_INT 7
24978: PUSH
24979: LD_INT 25
24981: PUSH
24982: LD_INT 8
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24990: LD_VAR 0 6
24994: PPUSH
24995: CALL_OW 264
24999: PUSH
25000: LD_INT 5
25002: PUSH
25003: LD_INT 27
25005: PUSH
25006: LD_INT 44
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: IN
25014: IFFALSE 25035
// points := [ 14 , 50 , 16 ] ;
25016: LD_ADDR_VAR 0 9
25020: PUSH
25021: LD_INT 14
25023: PUSH
25024: LD_INT 50
25026: PUSH
25027: LD_INT 16
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
25035: LD_VAR 0 6
25039: PPUSH
25040: CALL_OW 264
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: LD_INT 46
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: IN
25055: IFFALSE 25076
// points := [ 32 , 120 , 70 ] ;
25057: LD_ADDR_VAR 0 9
25061: PUSH
25062: LD_INT 32
25064: PUSH
25065: LD_INT 120
25067: PUSH
25068: LD_INT 70
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
25076: LD_VAR 0 6
25080: PPUSH
25081: CALL_OW 264
25085: PUSH
25086: LD_INT 7
25088: PUSH
25089: LD_INT 28
25091: PUSH
25092: LD_INT 45
25094: PUSH
25095: LD_INT 92
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: IN
25104: IFFALSE 25125
// points := [ 35 , 20 , 45 ] ;
25106: LD_ADDR_VAR 0 9
25110: PUSH
25111: LD_INT 35
25113: PUSH
25114: LD_INT 20
25116: PUSH
25117: LD_INT 45
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
25125: LD_VAR 0 6
25129: PPUSH
25130: CALL_OW 264
25134: PUSH
25135: LD_INT 47
25137: PUSH
25138: EMPTY
25139: LIST
25140: IN
25141: IFFALSE 25162
// points := [ 67 , 45 , 75 ] ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_INT 67
25150: PUSH
25151: LD_INT 45
25153: PUSH
25154: LD_INT 75
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25162: LD_VAR 0 6
25166: PPUSH
25167: CALL_OW 264
25171: PUSH
25172: LD_INT 26
25174: PUSH
25175: EMPTY
25176: LIST
25177: IN
25178: IFFALSE 25199
// points := [ 120 , 30 , 80 ] ;
25180: LD_ADDR_VAR 0 9
25184: PUSH
25185: LD_INT 120
25187: PUSH
25188: LD_INT 30
25190: PUSH
25191: LD_INT 80
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25199: LD_VAR 0 6
25203: PPUSH
25204: CALL_OW 264
25208: PUSH
25209: LD_INT 22
25211: PUSH
25212: EMPTY
25213: LIST
25214: IN
25215: IFFALSE 25236
// points := [ 40 , 1 , 1 ] ;
25217: LD_ADDR_VAR 0 9
25221: PUSH
25222: LD_INT 40
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25236: LD_VAR 0 6
25240: PPUSH
25241: CALL_OW 264
25245: PUSH
25246: LD_INT 29
25248: PUSH
25249: EMPTY
25250: LIST
25251: IN
25252: IFFALSE 25273
// points := [ 70 , 200 , 400 ] ;
25254: LD_ADDR_VAR 0 9
25258: PUSH
25259: LD_INT 70
25261: PUSH
25262: LD_INT 200
25264: PUSH
25265: LD_INT 400
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25273: LD_VAR 0 6
25277: PPUSH
25278: CALL_OW 264
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: LD_INT 53
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: IN
25293: IFFALSE 25314
// points := [ 40 , 10 , 20 ] ;
25295: LD_ADDR_VAR 0 9
25299: PUSH
25300: LD_INT 40
25302: PUSH
25303: LD_INT 10
25305: PUSH
25306: LD_INT 20
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25314: LD_VAR 0 6
25318: PPUSH
25319: CALL_OW 264
25323: PUSH
25324: LD_INT 9
25326: PUSH
25327: EMPTY
25328: LIST
25329: IN
25330: IFFALSE 25351
// points := [ 5 , 70 , 20 ] ;
25332: LD_ADDR_VAR 0 9
25336: PUSH
25337: LD_INT 5
25339: PUSH
25340: LD_INT 70
25342: PUSH
25343: LD_INT 20
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25351: LD_VAR 0 6
25355: PPUSH
25356: CALL_OW 264
25360: PUSH
25361: LD_INT 10
25363: PUSH
25364: EMPTY
25365: LIST
25366: IN
25367: IFFALSE 25388
// points := [ 35 , 110 , 70 ] ;
25369: LD_ADDR_VAR 0 9
25373: PUSH
25374: LD_INT 35
25376: PUSH
25377: LD_INT 110
25379: PUSH
25380: LD_INT 70
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25388: LD_VAR 0 6
25392: PPUSH
25393: CALL_OW 265
25397: PUSH
25398: LD_INT 25
25400: EQUAL
25401: IFFALSE 25422
// points := [ 80 , 65 , 100 ] ;
25403: LD_ADDR_VAR 0 9
25407: PUSH
25408: LD_INT 80
25410: PUSH
25411: LD_INT 65
25413: PUSH
25414: LD_INT 100
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25422: LD_VAR 0 6
25426: PPUSH
25427: CALL_OW 263
25431: PUSH
25432: LD_INT 1
25434: EQUAL
25435: IFFALSE 25470
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25437: LD_ADDR_VAR 0 10
25441: PUSH
25442: LD_VAR 0 10
25446: PUSH
25447: LD_VAR 0 6
25451: PPUSH
25452: CALL_OW 311
25456: PPUSH
25457: LD_INT 3
25459: PPUSH
25460: CALL_OW 259
25464: PUSH
25465: LD_INT 4
25467: MUL
25468: MUL
25469: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25470: LD_VAR 0 6
25474: PPUSH
25475: CALL_OW 263
25479: PUSH
25480: LD_INT 2
25482: EQUAL
25483: IFFALSE 25534
// begin j := IsControledBy ( i ) ;
25485: LD_ADDR_VAR 0 7
25489: PUSH
25490: LD_VAR 0 6
25494: PPUSH
25495: CALL_OW 312
25499: ST_TO_ADDR
// if j then
25500: LD_VAR 0 7
25504: IFFALSE 25534
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25506: LD_ADDR_VAR 0 10
25510: PUSH
25511: LD_VAR 0 10
25515: PUSH
25516: LD_VAR 0 7
25520: PPUSH
25521: LD_INT 3
25523: PPUSH
25524: CALL_OW 259
25528: PUSH
25529: LD_INT 3
25531: MUL
25532: MUL
25533: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25534: LD_VAR 0 6
25538: PPUSH
25539: CALL_OW 264
25543: PUSH
25544: LD_INT 5
25546: PUSH
25547: LD_INT 6
25549: PUSH
25550: LD_INT 46
25552: PUSH
25553: LD_INT 44
25555: PUSH
25556: LD_INT 47
25558: PUSH
25559: LD_INT 45
25561: PUSH
25562: LD_INT 28
25564: PUSH
25565: LD_INT 7
25567: PUSH
25568: LD_INT 27
25570: PUSH
25571: LD_INT 29
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: IN
25586: IFFALSE 25606
25588: PUSH
25589: LD_VAR 0 1
25593: PPUSH
25594: LD_INT 52
25596: PPUSH
25597: CALL_OW 321
25601: PUSH
25602: LD_INT 2
25604: EQUAL
25605: AND
25606: IFFALSE 25623
// bpoints := bpoints * 1.2 ;
25608: LD_ADDR_VAR 0 10
25612: PUSH
25613: LD_VAR 0 10
25617: PUSH
25618: LD_REAL  1.20000000000000E+0000
25621: MUL
25622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25623: LD_VAR 0 6
25627: PPUSH
25628: CALL_OW 264
25632: PUSH
25633: LD_INT 6
25635: PUSH
25636: LD_INT 46
25638: PUSH
25639: LD_INT 47
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: IN
25647: IFFALSE 25664
// bpoints := bpoints * 1.2 ;
25649: LD_ADDR_VAR 0 10
25653: PUSH
25654: LD_VAR 0 10
25658: PUSH
25659: LD_REAL  1.20000000000000E+0000
25662: MUL
25663: ST_TO_ADDR
// end ; unit_building :
25664: GO 25678
25666: LD_INT 3
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25674
25672: GO 25677
25674: POP
// ; end ;
25675: GO 25678
25677: POP
// for j = 1 to 3 do
25678: LD_ADDR_VAR 0 7
25682: PUSH
25683: DOUBLE
25684: LD_INT 1
25686: DEC
25687: ST_TO_ADDR
25688: LD_INT 3
25690: PUSH
25691: FOR_TO
25692: IFFALSE 25745
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25694: LD_ADDR_VAR 0 5
25698: PUSH
25699: LD_VAR 0 5
25703: PPUSH
25704: LD_VAR 0 7
25708: PPUSH
25709: LD_VAR 0 5
25713: PUSH
25714: LD_VAR 0 7
25718: ARRAY
25719: PUSH
25720: LD_VAR 0 9
25724: PUSH
25725: LD_VAR 0 7
25729: ARRAY
25730: PUSH
25731: LD_VAR 0 10
25735: MUL
25736: PLUS
25737: PPUSH
25738: CALL_OW 1
25742: ST_TO_ADDR
25743: GO 25691
25745: POP
25746: POP
// end ;
25747: GO 24220
25749: POP
25750: POP
// result := Replace ( result , 4 , tmp ) ;
25751: LD_ADDR_VAR 0 5
25755: PUSH
25756: LD_VAR 0 5
25760: PPUSH
25761: LD_INT 4
25763: PPUSH
25764: LD_VAR 0 8
25768: PPUSH
25769: CALL_OW 1
25773: ST_TO_ADDR
// end ;
25774: LD_VAR 0 5
25778: RET
// export function DangerAtRange ( unit , range ) ; begin
25779: LD_INT 0
25781: PPUSH
// if not unit then
25782: LD_VAR 0 1
25786: NOT
25787: IFFALSE 25791
// exit ;
25789: GO 25836
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: CALL_OW 255
25805: PPUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 250
25815: PPUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 251
25825: PPUSH
25826: LD_VAR 0 2
25830: PPUSH
25831: CALL 24070 0 4
25835: ST_TO_ADDR
// end ;
25836: LD_VAR 0 3
25840: RET
// export function DangerInArea ( side , area ) ; begin
25841: LD_INT 0
25843: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25844: LD_ADDR_VAR 0 3
25848: PUSH
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_INT 81
25856: PUSH
25857: LD_VAR 0 1
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PPUSH
25866: CALL_OW 70
25870: ST_TO_ADDR
// end ;
25871: LD_VAR 0 3
25875: RET
// export function IsExtension ( b ) ; begin
25876: LD_INT 0
25878: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25879: LD_ADDR_VAR 0 2
25883: PUSH
25884: LD_VAR 0 1
25888: PUSH
25889: LD_INT 23
25891: PUSH
25892: LD_INT 20
25894: PUSH
25895: LD_INT 22
25897: PUSH
25898: LD_INT 17
25900: PUSH
25901: LD_INT 24
25903: PUSH
25904: LD_INT 21
25906: PUSH
25907: LD_INT 19
25909: PUSH
25910: LD_INT 16
25912: PUSH
25913: LD_INT 25
25915: PUSH
25916: LD_INT 18
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: IN
25931: ST_TO_ADDR
// end ;
25932: LD_VAR 0 2
25936: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25937: LD_INT 0
25939: PPUSH
25940: PPUSH
25941: PPUSH
// result := [ ] ;
25942: LD_ADDR_VAR 0 4
25946: PUSH
25947: EMPTY
25948: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25949: LD_ADDR_VAR 0 5
25953: PUSH
25954: LD_VAR 0 2
25958: PPUSH
25959: LD_INT 21
25961: PUSH
25962: LD_INT 3
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PPUSH
25969: CALL_OW 70
25973: ST_TO_ADDR
// if not tmp then
25974: LD_VAR 0 5
25978: NOT
25979: IFFALSE 25983
// exit ;
25981: GO 26047
// if checkLink then
25983: LD_VAR 0 3
25987: IFFALSE 26037
// begin for i in tmp do
25989: LD_ADDR_VAR 0 6
25993: PUSH
25994: LD_VAR 0 5
25998: PUSH
25999: FOR_IN
26000: IFFALSE 26035
// if GetBase ( i ) <> base then
26002: LD_VAR 0 6
26006: PPUSH
26007: CALL_OW 274
26011: PUSH
26012: LD_VAR 0 1
26016: NONEQUAL
26017: IFFALSE 26033
// ComLinkToBase ( base , i ) ;
26019: LD_VAR 0 1
26023: PPUSH
26024: LD_VAR 0 6
26028: PPUSH
26029: CALL_OW 169
26033: GO 25999
26035: POP
26036: POP
// end ; result := tmp ;
26037: LD_ADDR_VAR 0 4
26041: PUSH
26042: LD_VAR 0 5
26046: ST_TO_ADDR
// end ;
26047: LD_VAR 0 4
26051: RET
// export function ComComplete ( units , b ) ; var i ; begin
26052: LD_INT 0
26054: PPUSH
26055: PPUSH
// if not units then
26056: LD_VAR 0 1
26060: NOT
26061: IFFALSE 26065
// exit ;
26063: GO 26155
// for i in units do
26065: LD_ADDR_VAR 0 4
26069: PUSH
26070: LD_VAR 0 1
26074: PUSH
26075: FOR_IN
26076: IFFALSE 26153
// if BuildingStatus ( b ) = bs_build then
26078: LD_VAR 0 2
26082: PPUSH
26083: CALL_OW 461
26087: PUSH
26088: LD_INT 1
26090: EQUAL
26091: IFFALSE 26151
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
26093: LD_VAR 0 4
26097: PPUSH
26098: LD_STRING h
26100: PUSH
26101: LD_VAR 0 2
26105: PPUSH
26106: CALL_OW 250
26110: PUSH
26111: LD_VAR 0 2
26115: PPUSH
26116: CALL_OW 251
26120: PUSH
26121: LD_VAR 0 2
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: PPUSH
26147: CALL_OW 446
26151: GO 26075
26153: POP
26154: POP
// end ;
26155: LD_VAR 0 3
26159: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
26168: LD_VAR 0 1
26172: NOT
26173: IFTRUE 26190
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 263
26185: PUSH
26186: LD_INT 2
26188: NONEQUAL
26189: OR
26190: IFFALSE 26194
// exit ;
26192: GO 26510
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26194: LD_ADDR_VAR 0 6
26198: PUSH
26199: LD_INT 22
26201: PUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 255
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: LD_INT 30
26221: PUSH
26222: LD_INT 36
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 34
26231: PUSH
26232: LD_INT 31
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PPUSH
26248: CALL_OW 69
26252: ST_TO_ADDR
// if not tmp then
26253: LD_VAR 0 6
26257: NOT
26258: IFFALSE 26262
// exit ;
26260: GO 26510
// result := [ ] ;
26262: LD_ADDR_VAR 0 2
26266: PUSH
26267: EMPTY
26268: ST_TO_ADDR
// for i in tmp do
26269: LD_ADDR_VAR 0 3
26273: PUSH
26274: LD_VAR 0 6
26278: PUSH
26279: FOR_IN
26280: IFFALSE 26351
// begin t := UnitsInside ( i ) ;
26282: LD_ADDR_VAR 0 4
26286: PUSH
26287: LD_VAR 0 3
26291: PPUSH
26292: CALL_OW 313
26296: ST_TO_ADDR
// if t then
26297: LD_VAR 0 4
26301: IFFALSE 26349
// for j in t do
26303: LD_ADDR_VAR 0 7
26307: PUSH
26308: LD_VAR 0 4
26312: PUSH
26313: FOR_IN
26314: IFFALSE 26347
// result := Replace ( result , result + 1 , j ) ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_VAR 0 2
26325: PPUSH
26326: LD_VAR 0 2
26330: PUSH
26331: LD_INT 1
26333: PLUS
26334: PPUSH
26335: LD_VAR 0 7
26339: PPUSH
26340: CALL_OW 1
26344: ST_TO_ADDR
26345: GO 26313
26347: POP
26348: POP
// end ;
26349: GO 26279
26351: POP
26352: POP
// if not result then
26353: LD_VAR 0 2
26357: NOT
26358: IFFALSE 26362
// exit ;
26360: GO 26510
// mech := result [ 1 ] ;
26362: LD_ADDR_VAR 0 5
26366: PUSH
26367: LD_VAR 0 2
26371: PUSH
26372: LD_INT 1
26374: ARRAY
26375: ST_TO_ADDR
// if result > 1 then
26376: LD_VAR 0 2
26380: PUSH
26381: LD_INT 1
26383: GREATER
26384: IFFALSE 26496
// begin for i = 2 to result do
26386: LD_ADDR_VAR 0 3
26390: PUSH
26391: DOUBLE
26392: LD_INT 2
26394: DEC
26395: ST_TO_ADDR
26396: LD_VAR 0 2
26400: PUSH
26401: FOR_TO
26402: IFFALSE 26494
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: LD_VAR 0 2
26413: PUSH
26414: LD_VAR 0 3
26418: ARRAY
26419: PPUSH
26420: LD_INT 3
26422: PPUSH
26423: CALL_OW 259
26427: PUSH
26428: LD_VAR 0 2
26432: PUSH
26433: LD_VAR 0 3
26437: ARRAY
26438: PPUSH
26439: CALL_OW 432
26443: MINUS
26444: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26445: LD_VAR 0 4
26449: PUSH
26450: LD_VAR 0 5
26454: PPUSH
26455: LD_INT 3
26457: PPUSH
26458: CALL_OW 259
26462: PUSH
26463: LD_VAR 0 5
26467: PPUSH
26468: CALL_OW 432
26472: MINUS
26473: GREATEREQUAL
26474: IFFALSE 26492
// mech := result [ i ] ;
26476: LD_ADDR_VAR 0 5
26480: PUSH
26481: LD_VAR 0 2
26485: PUSH
26486: LD_VAR 0 3
26490: ARRAY
26491: ST_TO_ADDR
// end ;
26492: GO 26401
26494: POP
26495: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_VAR 0 5
26505: PPUSH
26506: CALL_OW 135
// end ;
26510: LD_VAR 0 2
26514: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26515: LD_INT 0
26517: PPUSH
26518: PPUSH
26519: PPUSH
26520: PPUSH
26521: PPUSH
26522: PPUSH
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
26527: PPUSH
26528: PPUSH
26529: PPUSH
// result := [ ] ;
26530: LD_ADDR_VAR 0 7
26534: PUSH
26535: EMPTY
26536: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 266
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: IN
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 28202
// if name then
26562: LD_VAR 0 3
26566: IFFALSE 26582
// SetBName ( base_dep , name ) ;
26568: LD_VAR 0 1
26572: PPUSH
26573: LD_VAR 0 3
26577: PPUSH
26578: CALL_OW 500
// base := GetBase ( base_dep ) ;
26582: LD_ADDR_VAR 0 15
26586: PUSH
26587: LD_VAR 0 1
26591: PPUSH
26592: CALL_OW 274
26596: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26597: LD_ADDR_VAR 0 16
26601: PUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 255
26611: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26612: LD_ADDR_VAR 0 17
26616: PUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 248
26626: ST_TO_ADDR
// if sources then
26627: LD_VAR 0 5
26631: IFFALSE 26678
// for i = 1 to 3 do
26633: LD_ADDR_VAR 0 8
26637: PUSH
26638: DOUBLE
26639: LD_INT 1
26641: DEC
26642: ST_TO_ADDR
26643: LD_INT 3
26645: PUSH
26646: FOR_TO
26647: IFFALSE 26676
// AddResourceType ( base , i , sources [ i ] ) ;
26649: LD_VAR 0 15
26653: PPUSH
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_VAR 0 5
26663: PUSH
26664: LD_VAR 0 8
26668: ARRAY
26669: PPUSH
26670: CALL_OW 276
26674: GO 26646
26676: POP
26677: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26678: LD_ADDR_VAR 0 18
26682: PUSH
26683: LD_VAR 0 15
26687: PPUSH
26688: LD_VAR 0 2
26692: PPUSH
26693: LD_INT 1
26695: PPUSH
26696: CALL 25937 0 3
26700: ST_TO_ADDR
// InitHc ;
26701: CALL_OW 19
// InitUc ;
26705: CALL_OW 18
// uc_side := side ;
26709: LD_ADDR_OWVAR 20
26713: PUSH
26714: LD_VAR 0 16
26718: ST_TO_ADDR
// uc_nation := nation ;
26719: LD_ADDR_OWVAR 21
26723: PUSH
26724: LD_VAR 0 17
26728: ST_TO_ADDR
// if buildings then
26729: LD_VAR 0 18
26733: IFFALSE 28061
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26735: LD_ADDR_VAR 0 19
26739: PUSH
26740: LD_VAR 0 18
26744: PPUSH
26745: LD_INT 2
26747: PUSH
26748: LD_INT 30
26750: PUSH
26751: LD_INT 29
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 30
26760: PUSH
26761: LD_INT 30
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: PPUSH
26773: CALL_OW 72
26777: ST_TO_ADDR
// if tmp then
26778: LD_VAR 0 19
26782: IFFALSE 26830
// for i in tmp do
26784: LD_ADDR_VAR 0 8
26788: PUSH
26789: LD_VAR 0 19
26793: PUSH
26794: FOR_IN
26795: IFFALSE 26828
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26797: LD_VAR 0 8
26801: PPUSH
26802: CALL_OW 250
26806: PPUSH
26807: LD_VAR 0 8
26811: PPUSH
26812: CALL_OW 251
26816: PPUSH
26817: LD_VAR 0 16
26821: PPUSH
26822: CALL_OW 441
26826: GO 26794
26828: POP
26829: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26830: LD_VAR 0 18
26834: PPUSH
26835: LD_INT 2
26837: PUSH
26838: LD_INT 30
26840: PUSH
26841: LD_INT 32
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 30
26850: PUSH
26851: LD_INT 33
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: PPUSH
26863: CALL_OW 72
26867: IFFALSE 26955
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26869: LD_ADDR_VAR 0 8
26873: PUSH
26874: LD_VAR 0 18
26878: PPUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 30
26884: PUSH
26885: LD_INT 32
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: LD_INT 33
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: PPUSH
26907: CALL_OW 72
26911: PUSH
26912: FOR_IN
26913: IFFALSE 26953
// begin if not GetBWeapon ( i ) then
26915: LD_VAR 0 8
26919: PPUSH
26920: CALL_OW 269
26924: NOT
26925: IFFALSE 26951
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26927: LD_VAR 0 8
26931: PPUSH
26932: LD_VAR 0 8
26936: PPUSH
26937: LD_VAR 0 2
26941: PPUSH
26942: CALL 28207 0 2
26946: PPUSH
26947: CALL_OW 431
// end ;
26951: GO 26912
26953: POP
26954: POP
// end ; for i = 1 to personel do
26955: LD_ADDR_VAR 0 8
26959: PUSH
26960: DOUBLE
26961: LD_INT 1
26963: DEC
26964: ST_TO_ADDR
26965: LD_VAR 0 6
26969: PUSH
26970: FOR_TO
26971: IFFALSE 28041
// begin if i > 4 then
26973: LD_VAR 0 8
26977: PUSH
26978: LD_INT 4
26980: GREATER
26981: IFFALSE 26985
// break ;
26983: GO 28041
// case i of 1 :
26985: LD_VAR 0 8
26989: PUSH
26990: LD_INT 1
26992: DOUBLE
26993: EQUAL
26994: IFTRUE 26998
26996: GO 27078
26998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26999: LD_ADDR_VAR 0 12
27003: PUSH
27004: LD_VAR 0 18
27008: PPUSH
27009: LD_INT 22
27011: PUSH
27012: LD_VAR 0 16
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 58
27023: PUSH
27024: EMPTY
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 30
27032: PUSH
27033: LD_INT 32
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 30
27042: PUSH
27043: LD_INT 4
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 30
27052: PUSH
27053: LD_INT 5
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 72
27075: ST_TO_ADDR
27076: GO 27300
27078: LD_INT 2
27080: DOUBLE
27081: EQUAL
27082: IFTRUE 27086
27084: GO 27148
27086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
27087: LD_ADDR_VAR 0 12
27091: PUSH
27092: LD_VAR 0 18
27096: PPUSH
27097: LD_INT 22
27099: PUSH
27100: LD_VAR 0 16
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 30
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 30
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PPUSH
27141: CALL_OW 72
27145: ST_TO_ADDR
27146: GO 27300
27148: LD_INT 3
27150: DOUBLE
27151: EQUAL
27152: IFTRUE 27156
27154: GO 27218
27156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27157: LD_ADDR_VAR 0 12
27161: PUSH
27162: LD_VAR 0 18
27166: PPUSH
27167: LD_INT 22
27169: PUSH
27170: LD_VAR 0 16
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: LD_INT 30
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 30
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PPUSH
27211: CALL_OW 72
27215: ST_TO_ADDR
27216: GO 27300
27218: LD_INT 4
27220: DOUBLE
27221: EQUAL
27222: IFTRUE 27226
27224: GO 27299
27226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27227: LD_ADDR_VAR 0 12
27231: PUSH
27232: LD_VAR 0 18
27236: PPUSH
27237: LD_INT 22
27239: PUSH
27240: LD_VAR 0 16
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 30
27254: PUSH
27255: LD_INT 6
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 30
27264: PUSH
27265: LD_INT 7
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 30
27274: PUSH
27275: LD_INT 8
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PPUSH
27292: CALL_OW 72
27296: ST_TO_ADDR
27297: GO 27300
27299: POP
// if i = 1 then
27300: LD_VAR 0 8
27304: PUSH
27305: LD_INT 1
27307: EQUAL
27308: IFFALSE 27419
// begin tmp := [ ] ;
27310: LD_ADDR_VAR 0 19
27314: PUSH
27315: EMPTY
27316: ST_TO_ADDR
// for j in f do
27317: LD_ADDR_VAR 0 9
27321: PUSH
27322: LD_VAR 0 12
27326: PUSH
27327: FOR_IN
27328: IFFALSE 27401
// if GetBType ( j ) = b_bunker then
27330: LD_VAR 0 9
27334: PPUSH
27335: CALL_OW 266
27339: PUSH
27340: LD_INT 32
27342: EQUAL
27343: IFFALSE 27370
// tmp := Insert ( tmp , 1 , j ) else
27345: LD_ADDR_VAR 0 19
27349: PUSH
27350: LD_VAR 0 19
27354: PPUSH
27355: LD_INT 1
27357: PPUSH
27358: LD_VAR 0 9
27362: PPUSH
27363: CALL_OW 2
27367: ST_TO_ADDR
27368: GO 27399
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27370: LD_ADDR_VAR 0 19
27374: PUSH
27375: LD_VAR 0 19
27379: PPUSH
27380: LD_VAR 0 19
27384: PUSH
27385: LD_INT 1
27387: PLUS
27388: PPUSH
27389: LD_VAR 0 9
27393: PPUSH
27394: CALL_OW 2
27398: ST_TO_ADDR
27399: GO 27327
27401: POP
27402: POP
// if tmp then
27403: LD_VAR 0 19
27407: IFFALSE 27419
// f := tmp ;
27409: LD_ADDR_VAR 0 12
27413: PUSH
27414: LD_VAR 0 19
27418: ST_TO_ADDR
// end ; x := personel [ i ] ;
27419: LD_ADDR_VAR 0 13
27423: PUSH
27424: LD_VAR 0 6
27428: PUSH
27429: LD_VAR 0 8
27433: ARRAY
27434: ST_TO_ADDR
// if x = - 1 then
27435: LD_VAR 0 13
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: EQUAL
27444: IFFALSE 27655
// begin for j in f do
27446: LD_ADDR_VAR 0 9
27450: PUSH
27451: LD_VAR 0 12
27455: PUSH
27456: FOR_IN
27457: IFFALSE 27651
// repeat InitHc ;
27459: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27463: LD_VAR 0 9
27467: PPUSH
27468: CALL_OW 266
27472: PUSH
27473: LD_INT 5
27475: EQUAL
27476: IFFALSE 27546
// begin if UnitsInside ( j ) < 3 then
27478: LD_VAR 0 9
27482: PPUSH
27483: CALL_OW 313
27487: PUSH
27488: LD_INT 3
27490: LESS
27491: IFFALSE 27527
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27493: LD_INT 0
27495: PPUSH
27496: LD_INT 5
27498: PUSH
27499: LD_INT 8
27501: PUSH
27502: LD_INT 9
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: PUSH
27510: LD_VAR 0 17
27514: ARRAY
27515: PPUSH
27516: LD_VAR 0 4
27520: PPUSH
27521: CALL_OW 380
27525: GO 27544
// PrepareHuman ( false , i , skill ) ;
27527: LD_INT 0
27529: PPUSH
27530: LD_VAR 0 8
27534: PPUSH
27535: LD_VAR 0 4
27539: PPUSH
27540: CALL_OW 380
// end else
27544: GO 27563
// PrepareHuman ( false , i , skill ) ;
27546: LD_INT 0
27548: PPUSH
27549: LD_VAR 0 8
27553: PPUSH
27554: LD_VAR 0 4
27558: PPUSH
27559: CALL_OW 380
// un := CreateHuman ;
27563: LD_ADDR_VAR 0 14
27567: PUSH
27568: CALL_OW 44
27572: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27573: LD_ADDR_VAR 0 7
27577: PUSH
27578: LD_VAR 0 7
27582: PPUSH
27583: LD_INT 1
27585: PPUSH
27586: LD_VAR 0 14
27590: PPUSH
27591: CALL_OW 2
27595: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27596: LD_VAR 0 14
27600: PPUSH
27601: LD_VAR 0 9
27605: PPUSH
27606: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27610: LD_VAR 0 9
27614: PPUSH
27615: CALL_OW 313
27619: PUSH
27620: LD_INT 6
27622: EQUAL
27623: IFTRUE 27647
27625: PUSH
27626: LD_VAR 0 9
27630: PPUSH
27631: CALL_OW 266
27635: PUSH
27636: LD_INT 32
27638: PUSH
27639: LD_INT 31
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: IN
27646: OR
27647: IFFALSE 27459
27649: GO 27456
27651: POP
27652: POP
// end else
27653: GO 28039
// for j = 1 to x do
27655: LD_ADDR_VAR 0 9
27659: PUSH
27660: DOUBLE
27661: LD_INT 1
27663: DEC
27664: ST_TO_ADDR
27665: LD_VAR 0 13
27669: PUSH
27670: FOR_TO
27671: IFFALSE 28037
// begin InitHc ;
27673: CALL_OW 19
// if not f then
27677: LD_VAR 0 12
27681: NOT
27682: IFFALSE 27771
// begin PrepareHuman ( false , i , skill ) ;
27684: LD_INT 0
27686: PPUSH
27687: LD_VAR 0 8
27691: PPUSH
27692: LD_VAR 0 4
27696: PPUSH
27697: CALL_OW 380
// un := CreateHuman ;
27701: LD_ADDR_VAR 0 14
27705: PUSH
27706: CALL_OW 44
27710: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27711: LD_ADDR_VAR 0 7
27715: PUSH
27716: LD_VAR 0 7
27720: PPUSH
27721: LD_INT 1
27723: PPUSH
27724: LD_VAR 0 14
27728: PPUSH
27729: CALL_OW 2
27733: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27734: LD_VAR 0 14
27738: PPUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 250
27748: PPUSH
27749: LD_VAR 0 1
27753: PPUSH
27754: CALL_OW 251
27758: PPUSH
27759: LD_INT 10
27761: PPUSH
27762: LD_INT 0
27764: PPUSH
27765: CALL_OW 50
// continue ;
27769: GO 27670
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27771: LD_VAR 0 12
27775: PUSH
27776: LD_INT 1
27778: ARRAY
27779: PPUSH
27780: CALL_OW 313
27784: IFFALSE 27812
27786: PUSH
27787: LD_VAR 0 12
27791: PUSH
27792: LD_INT 1
27794: ARRAY
27795: PPUSH
27796: CALL_OW 266
27800: PUSH
27801: LD_INT 32
27803: PUSH
27804: LD_INT 31
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: IN
27811: AND
27812: IFTRUE 27833
27814: PUSH
27815: LD_VAR 0 12
27819: PUSH
27820: LD_INT 1
27822: ARRAY
27823: PPUSH
27824: CALL_OW 313
27828: PUSH
27829: LD_INT 6
27831: EQUAL
27832: OR
27833: IFFALSE 27853
// f := Delete ( f , 1 ) ;
27835: LD_ADDR_VAR 0 12
27839: PUSH
27840: LD_VAR 0 12
27844: PPUSH
27845: LD_INT 1
27847: PPUSH
27848: CALL_OW 3
27852: ST_TO_ADDR
// if not f then
27853: LD_VAR 0 12
27857: NOT
27858: IFFALSE 27876
// begin x := x + 2 ;
27860: LD_ADDR_VAR 0 13
27864: PUSH
27865: LD_VAR 0 13
27869: PUSH
27870: LD_INT 2
27872: PLUS
27873: ST_TO_ADDR
// continue ;
27874: GO 27670
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27876: LD_VAR 0 12
27880: PUSH
27881: LD_INT 1
27883: ARRAY
27884: PPUSH
27885: CALL_OW 266
27889: PUSH
27890: LD_INT 5
27892: EQUAL
27893: IFFALSE 27967
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27895: LD_VAR 0 12
27899: PUSH
27900: LD_INT 1
27902: ARRAY
27903: PPUSH
27904: CALL_OW 313
27908: PUSH
27909: LD_INT 3
27911: LESS
27912: IFFALSE 27948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27914: LD_INT 0
27916: PPUSH
27917: LD_INT 5
27919: PUSH
27920: LD_INT 8
27922: PUSH
27923: LD_INT 9
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: PUSH
27931: LD_VAR 0 17
27935: ARRAY
27936: PPUSH
27937: LD_VAR 0 4
27941: PPUSH
27942: CALL_OW 380
27946: GO 27965
// PrepareHuman ( false , i , skill ) ;
27948: LD_INT 0
27950: PPUSH
27951: LD_VAR 0 8
27955: PPUSH
27956: LD_VAR 0 4
27960: PPUSH
27961: CALL_OW 380
// end else
27965: GO 27984
// PrepareHuman ( false , i , skill ) ;
27967: LD_INT 0
27969: PPUSH
27970: LD_VAR 0 8
27974: PPUSH
27975: LD_VAR 0 4
27979: PPUSH
27980: CALL_OW 380
// un := CreateHuman ;
27984: LD_ADDR_VAR 0 14
27988: PUSH
27989: CALL_OW 44
27993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27994: LD_ADDR_VAR 0 7
27998: PUSH
27999: LD_VAR 0 7
28003: PPUSH
28004: LD_INT 1
28006: PPUSH
28007: LD_VAR 0 14
28011: PPUSH
28012: CALL_OW 2
28016: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28017: LD_VAR 0 14
28021: PPUSH
28022: LD_VAR 0 12
28026: PUSH
28027: LD_INT 1
28029: ARRAY
28030: PPUSH
28031: CALL_OW 52
// end ;
28035: GO 27670
28037: POP
28038: POP
// end ;
28039: GO 26970
28041: POP
28042: POP
// result := result ^ buildings ;
28043: LD_ADDR_VAR 0 7
28047: PUSH
28048: LD_VAR 0 7
28052: PUSH
28053: LD_VAR 0 18
28057: ADD
28058: ST_TO_ADDR
// end else
28059: GO 28202
// begin for i = 1 to personel do
28061: LD_ADDR_VAR 0 8
28065: PUSH
28066: DOUBLE
28067: LD_INT 1
28069: DEC
28070: ST_TO_ADDR
28071: LD_VAR 0 6
28075: PUSH
28076: FOR_TO
28077: IFFALSE 28200
// begin if i > 4 then
28079: LD_VAR 0 8
28083: PUSH
28084: LD_INT 4
28086: GREATER
28087: IFFALSE 28091
// break ;
28089: GO 28200
// x := personel [ i ] ;
28091: LD_ADDR_VAR 0 13
28095: PUSH
28096: LD_VAR 0 6
28100: PUSH
28101: LD_VAR 0 8
28105: ARRAY
28106: ST_TO_ADDR
// if x = - 1 then
28107: LD_VAR 0 13
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: EQUAL
28116: IFFALSE 28120
// continue ;
28118: GO 28076
// PrepareHuman ( false , i , skill ) ;
28120: LD_INT 0
28122: PPUSH
28123: LD_VAR 0 8
28127: PPUSH
28128: LD_VAR 0 4
28132: PPUSH
28133: CALL_OW 380
// un := CreateHuman ;
28137: LD_ADDR_VAR 0 14
28141: PUSH
28142: CALL_OW 44
28146: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28147: LD_VAR 0 14
28151: PPUSH
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL_OW 250
28161: PPUSH
28162: LD_VAR 0 1
28166: PPUSH
28167: CALL_OW 251
28171: PPUSH
28172: LD_INT 10
28174: PPUSH
28175: LD_INT 0
28177: PPUSH
28178: CALL_OW 50
// result := result ^ un ;
28182: LD_ADDR_VAR 0 7
28186: PUSH
28187: LD_VAR 0 7
28191: PUSH
28192: LD_VAR 0 14
28196: ADD
28197: ST_TO_ADDR
// end ;
28198: GO 28076
28200: POP
28201: POP
// end ; end ;
28202: LD_VAR 0 7
28206: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28207: LD_INT 0
28209: PPUSH
28210: PPUSH
28211: PPUSH
28212: PPUSH
28213: PPUSH
28214: PPUSH
28215: PPUSH
28216: PPUSH
28217: PPUSH
28218: PPUSH
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
28224: PPUSH
// result := false ;
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_INT 0
28232: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28233: LD_VAR 0 1
28237: NOT
28238: IFTRUE 28263
28240: PUSH
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 266
28250: PUSH
28251: LD_INT 32
28253: PUSH
28254: LD_INT 33
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: IN
28261: NOT
28262: OR
28263: IFFALSE 28267
// exit ;
28265: GO 29402
// nat := GetNation ( tower ) ;
28267: LD_ADDR_VAR 0 12
28271: PUSH
28272: LD_VAR 0 1
28276: PPUSH
28277: CALL_OW 248
28281: ST_TO_ADDR
// side := GetSide ( tower ) ;
28282: LD_ADDR_VAR 0 16
28286: PUSH
28287: LD_VAR 0 1
28291: PPUSH
28292: CALL_OW 255
28296: ST_TO_ADDR
// x := GetX ( tower ) ;
28297: LD_ADDR_VAR 0 10
28301: PUSH
28302: LD_VAR 0 1
28306: PPUSH
28307: CALL_OW 250
28311: ST_TO_ADDR
// y := GetY ( tower ) ;
28312: LD_ADDR_VAR 0 11
28316: PUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 251
28326: ST_TO_ADDR
// if not x or not y then
28327: LD_VAR 0 10
28331: NOT
28332: IFTRUE 28341
28334: PUSH
28335: LD_VAR 0 11
28339: NOT
28340: OR
28341: IFFALSE 28345
// exit ;
28343: GO 29402
// weapon := 0 ;
28345: LD_ADDR_VAR 0 18
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
// fac_list := [ ] ;
28353: LD_ADDR_VAR 0 17
28357: PUSH
28358: EMPTY
28359: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28360: LD_ADDR_VAR 0 6
28364: PUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 274
28374: PPUSH
28375: LD_VAR 0 2
28379: PPUSH
28380: LD_INT 0
28382: PPUSH
28383: CALL 25937 0 3
28387: PPUSH
28388: LD_INT 30
28390: PUSH
28391: LD_INT 3
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PPUSH
28398: CALL_OW 72
28402: ST_TO_ADDR
// if not factories then
28403: LD_VAR 0 6
28407: NOT
28408: IFFALSE 28412
// exit ;
28410: GO 29402
// for i in factories do
28412: LD_ADDR_VAR 0 8
28416: PUSH
28417: LD_VAR 0 6
28421: PUSH
28422: FOR_IN
28423: IFFALSE 28448
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28425: LD_ADDR_VAR 0 17
28429: PUSH
28430: LD_VAR 0 17
28434: PUSH
28435: LD_VAR 0 8
28439: PPUSH
28440: CALL_OW 478
28444: UNION
28445: ST_TO_ADDR
28446: GO 28422
28448: POP
28449: POP
// if not fac_list then
28450: LD_VAR 0 17
28454: NOT
28455: IFFALSE 28459
// exit ;
28457: GO 29402
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28459: LD_ADDR_VAR 0 5
28463: PUSH
28464: LD_INT 4
28466: PUSH
28467: LD_INT 5
28469: PUSH
28470: LD_INT 9
28472: PUSH
28473: LD_INT 10
28475: PUSH
28476: LD_INT 6
28478: PUSH
28479: LD_INT 7
28481: PUSH
28482: LD_INT 11
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 27
28496: PUSH
28497: LD_INT 28
28499: PUSH
28500: LD_INT 26
28502: PUSH
28503: LD_INT 30
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 43
28514: PUSH
28515: LD_INT 44
28517: PUSH
28518: LD_INT 46
28520: PUSH
28521: LD_INT 45
28523: PUSH
28524: LD_INT 47
28526: PUSH
28527: LD_INT 49
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: PUSH
28543: LD_VAR 0 12
28547: ARRAY
28548: ST_TO_ADDR
// list := list isect fac_list ;
28549: LD_ADDR_VAR 0 5
28553: PUSH
28554: LD_VAR 0 5
28558: PUSH
28559: LD_VAR 0 17
28563: ISECT
28564: ST_TO_ADDR
// if not list then
28565: LD_VAR 0 5
28569: NOT
28570: IFFALSE 28574
// exit ;
28572: GO 29402
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28574: LD_VAR 0 12
28578: PUSH
28579: LD_INT 3
28581: EQUAL
28582: IFFALSE 28594
28584: PUSH
28585: LD_INT 49
28587: PUSH
28588: LD_VAR 0 5
28592: IN
28593: AND
28594: IFFALSE 28614
28596: PUSH
28597: LD_INT 31
28599: PPUSH
28600: LD_VAR 0 16
28604: PPUSH
28605: CALL_OW 321
28609: PUSH
28610: LD_INT 2
28612: EQUAL
28613: AND
28614: IFFALSE 28674
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28616: LD_INT 22
28618: PUSH
28619: LD_VAR 0 16
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 35
28630: PUSH
28631: LD_INT 49
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 91
28640: PUSH
28641: LD_VAR 0 1
28645: PUSH
28646: LD_INT 10
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 69
28663: NOT
28664: IFFALSE 28674
// weapon := ru_time_lapser ;
28666: LD_ADDR_VAR 0 18
28670: PUSH
28671: LD_INT 49
28673: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28674: LD_VAR 0 12
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: IN
28689: IFFALSE 28713
28691: PUSH
28692: LD_INT 11
28694: PUSH
28695: LD_VAR 0 5
28699: IN
28700: IFTRUE 28712
28702: PUSH
28703: LD_INT 30
28705: PUSH
28706: LD_VAR 0 5
28710: IN
28711: OR
28712: AND
28713: IFFALSE 28733
28715: PUSH
28716: LD_INT 6
28718: PPUSH
28719: LD_VAR 0 16
28723: PPUSH
28724: CALL_OW 321
28728: PUSH
28729: LD_INT 2
28731: EQUAL
28732: AND
28733: IFFALSE 28900
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28735: LD_INT 22
28737: PUSH
28738: LD_VAR 0 16
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 35
28752: PUSH
28753: LD_INT 11
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 35
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 91
28777: PUSH
28778: LD_VAR 0 1
28782: PUSH
28783: LD_INT 18
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: PPUSH
28796: CALL_OW 69
28800: NOT
28801: IFFALSE 28877
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_VAR 0 16
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: LD_INT 30
28821: PUSH
28822: LD_INT 32
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 30
28831: PUSH
28832: LD_INT 33
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 91
28846: PUSH
28847: LD_VAR 0 1
28851: PUSH
28852: LD_INT 12
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: PPUSH
28868: CALL_OW 69
28872: PUSH
28873: LD_INT 2
28875: GREATER
28876: AND
28877: IFFALSE 28900
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28879: LD_ADDR_VAR 0 18
28883: PUSH
28884: LD_INT 11
28886: PUSH
28887: LD_INT 30
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_VAR 0 12
28898: ARRAY
28899: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28900: LD_VAR 0 18
28904: NOT
28905: IFFALSE 28925
28907: PUSH
28908: LD_INT 40
28910: PPUSH
28911: LD_VAR 0 16
28915: PPUSH
28916: CALL_OW 321
28920: PUSH
28921: LD_INT 2
28923: EQUAL
28924: AND
28925: IFFALSE 28961
28927: PUSH
28928: LD_INT 7
28930: PUSH
28931: LD_VAR 0 5
28935: IN
28936: IFTRUE 28948
28938: PUSH
28939: LD_INT 28
28941: PUSH
28942: LD_VAR 0 5
28946: IN
28947: OR
28948: IFTRUE 28960
28950: PUSH
28951: LD_INT 45
28953: PUSH
28954: LD_VAR 0 5
28958: IN
28959: OR
28960: AND
28961: IFFALSE 29215
// begin hex := GetHexInfo ( x , y ) ;
28963: LD_ADDR_VAR 0 4
28967: PUSH
28968: LD_VAR 0 10
28972: PPUSH
28973: LD_VAR 0 11
28977: PPUSH
28978: CALL_OW 546
28982: ST_TO_ADDR
// if hex [ 1 ] then
28983: LD_VAR 0 4
28987: PUSH
28988: LD_INT 1
28990: ARRAY
28991: IFFALSE 28995
// exit ;
28993: GO 29402
// height := hex [ 2 ] ;
28995: LD_ADDR_VAR 0 15
28999: PUSH
29000: LD_VAR 0 4
29004: PUSH
29005: LD_INT 2
29007: ARRAY
29008: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29009: LD_ADDR_VAR 0 14
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 3
29022: PUSH
29023: LD_INT 5
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: ST_TO_ADDR
// for i in tmp do
29032: LD_ADDR_VAR 0 8
29036: PUSH
29037: LD_VAR 0 14
29041: PUSH
29042: FOR_IN
29043: IFFALSE 29213
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29045: LD_ADDR_VAR 0 9
29049: PUSH
29050: LD_VAR 0 10
29054: PPUSH
29055: LD_VAR 0 8
29059: PPUSH
29060: LD_INT 5
29062: PPUSH
29063: CALL_OW 272
29067: PUSH
29068: LD_VAR 0 11
29072: PPUSH
29073: LD_VAR 0 8
29077: PPUSH
29078: LD_INT 5
29080: PPUSH
29081: CALL_OW 273
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29090: LD_VAR 0 9
29094: PUSH
29095: LD_INT 1
29097: ARRAY
29098: PPUSH
29099: LD_VAR 0 9
29103: PUSH
29104: LD_INT 2
29106: ARRAY
29107: PPUSH
29108: CALL_OW 488
29112: IFFALSE 29211
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
29114: LD_ADDR_VAR 0 4
29118: PUSH
29119: LD_VAR 0 9
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 9
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PPUSH
29137: CALL_OW 546
29141: ST_TO_ADDR
// if hex [ 1 ] then
29142: LD_VAR 0 4
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: IFFALSE 29154
// continue ;
29152: GO 29042
// h := hex [ 2 ] ;
29154: LD_ADDR_VAR 0 13
29158: PUSH
29159: LD_VAR 0 4
29163: PUSH
29164: LD_INT 2
29166: ARRAY
29167: ST_TO_ADDR
// if h + 7 < height then
29168: LD_VAR 0 13
29172: PUSH
29173: LD_INT 7
29175: PLUS
29176: PUSH
29177: LD_VAR 0 15
29181: LESS
29182: IFFALSE 29211
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29184: LD_ADDR_VAR 0 18
29188: PUSH
29189: LD_INT 7
29191: PUSH
29192: LD_INT 28
29194: PUSH
29195: LD_INT 45
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: PUSH
29203: LD_VAR 0 12
29207: ARRAY
29208: ST_TO_ADDR
// break ;
29209: GO 29213
// end ; end ; end ;
29211: GO 29042
29213: POP
29214: POP
// end ; if not weapon then
29215: LD_VAR 0 18
29219: NOT
29220: IFFALSE 29280
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29222: LD_ADDR_VAR 0 5
29226: PUSH
29227: LD_VAR 0 5
29231: PUSH
29232: LD_INT 11
29234: PUSH
29235: LD_INT 30
29237: PUSH
29238: LD_INT 49
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: DIFF
29246: ST_TO_ADDR
// if not list then
29247: LD_VAR 0 5
29251: NOT
29252: IFFALSE 29256
// exit ;
29254: GO 29402
// weapon := list [ rand ( 1 , list ) ] ;
29256: LD_ADDR_VAR 0 18
29260: PUSH
29261: LD_VAR 0 5
29265: PUSH
29266: LD_INT 1
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL_OW 12
29278: ARRAY
29279: ST_TO_ADDR
// end ; if weapon then
29280: LD_VAR 0 18
29284: IFFALSE 29402
// begin tmp := CostOfWeapon ( weapon ) ;
29286: LD_ADDR_VAR 0 14
29290: PUSH
29291: LD_VAR 0 18
29295: PPUSH
29296: CALL_OW 451
29300: ST_TO_ADDR
// j := GetBase ( tower ) ;
29301: LD_ADDR_VAR 0 9
29305: PUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 274
29315: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29316: LD_VAR 0 9
29320: PPUSH
29321: LD_INT 1
29323: PPUSH
29324: CALL_OW 275
29328: PUSH
29329: LD_VAR 0 14
29333: PUSH
29334: LD_INT 1
29336: ARRAY
29337: GREATEREQUAL
29338: IFFALSE 29364
29340: PUSH
29341: LD_VAR 0 9
29345: PPUSH
29346: LD_INT 2
29348: PPUSH
29349: CALL_OW 275
29353: PUSH
29354: LD_VAR 0 14
29358: PUSH
29359: LD_INT 2
29361: ARRAY
29362: GREATEREQUAL
29363: AND
29364: IFFALSE 29390
29366: PUSH
29367: LD_VAR 0 9
29371: PPUSH
29372: LD_INT 3
29374: PPUSH
29375: CALL_OW 275
29379: PUSH
29380: LD_VAR 0 14
29384: PUSH
29385: LD_INT 3
29387: ARRAY
29388: GREATEREQUAL
29389: AND
29390: IFFALSE 29402
// result := weapon ;
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_VAR 0 18
29401: ST_TO_ADDR
// end ; end ;
29402: LD_VAR 0 3
29406: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
// result := true ;
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_INT 1
29418: ST_TO_ADDR
// if array1 = array2 then
29419: LD_VAR 0 1
29423: PUSH
29424: LD_VAR 0 2
29428: EQUAL
29429: IFFALSE 29489
// begin for i = 1 to array1 do
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: DOUBLE
29437: LD_INT 1
29439: DEC
29440: ST_TO_ADDR
29441: LD_VAR 0 1
29445: PUSH
29446: FOR_TO
29447: IFFALSE 29485
// if array1 [ i ] <> array2 [ i ] then
29449: LD_VAR 0 1
29453: PUSH
29454: LD_VAR 0 4
29458: ARRAY
29459: PUSH
29460: LD_VAR 0 2
29464: PUSH
29465: LD_VAR 0 4
29469: ARRAY
29470: NONEQUAL
29471: IFFALSE 29483
// begin result := false ;
29473: LD_ADDR_VAR 0 3
29477: PUSH
29478: LD_INT 0
29480: ST_TO_ADDR
// break ;
29481: GO 29485
// end ;
29483: GO 29446
29485: POP
29486: POP
// end else
29487: GO 29497
// result := false ;
29489: LD_ADDR_VAR 0 3
29493: PUSH
29494: LD_INT 0
29496: ST_TO_ADDR
// end ;
29497: LD_VAR 0 3
29501: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29502: LD_INT 0
29504: PPUSH
29505: PPUSH
// if not array1 or not array2 then
29506: LD_VAR 0 1
29510: NOT
29511: IFTRUE 29520
29513: PUSH
29514: LD_VAR 0 2
29518: NOT
29519: OR
29520: IFFALSE 29524
// exit ;
29522: GO 29588
// result := true ;
29524: LD_ADDR_VAR 0 3
29528: PUSH
29529: LD_INT 1
29531: ST_TO_ADDR
// for i = 1 to array1 do
29532: LD_ADDR_VAR 0 4
29536: PUSH
29537: DOUBLE
29538: LD_INT 1
29540: DEC
29541: ST_TO_ADDR
29542: LD_VAR 0 1
29546: PUSH
29547: FOR_TO
29548: IFFALSE 29586
// if array1 [ i ] <> array2 [ i ] then
29550: LD_VAR 0 1
29554: PUSH
29555: LD_VAR 0 4
29559: ARRAY
29560: PUSH
29561: LD_VAR 0 2
29565: PUSH
29566: LD_VAR 0 4
29570: ARRAY
29571: NONEQUAL
29572: IFFALSE 29584
// begin result := false ;
29574: LD_ADDR_VAR 0 3
29578: PUSH
29579: LD_INT 0
29581: ST_TO_ADDR
// break ;
29582: GO 29586
// end ;
29584: GO 29547
29586: POP
29587: POP
// end ;
29588: LD_VAR 0 3
29592: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29593: LD_INT 0
29595: PPUSH
29596: PPUSH
29597: PPUSH
// pom := GetBase ( fac ) ;
29598: LD_ADDR_VAR 0 5
29602: PUSH
29603: LD_VAR 0 1
29607: PPUSH
29608: CALL_OW 274
29612: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29613: LD_ADDR_VAR 0 4
29617: PUSH
29618: LD_VAR 0 2
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PPUSH
29627: LD_VAR 0 2
29631: PUSH
29632: LD_INT 2
29634: ARRAY
29635: PPUSH
29636: LD_VAR 0 2
29640: PUSH
29641: LD_INT 3
29643: ARRAY
29644: PPUSH
29645: LD_VAR 0 2
29649: PUSH
29650: LD_INT 4
29652: ARRAY
29653: PPUSH
29654: CALL_OW 449
29658: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29659: LD_ADDR_VAR 0 3
29663: PUSH
29664: LD_VAR 0 5
29668: PPUSH
29669: LD_INT 1
29671: PPUSH
29672: CALL_OW 275
29676: PUSH
29677: LD_VAR 0 4
29681: PUSH
29682: LD_INT 1
29684: ARRAY
29685: GREATEREQUAL
29686: IFFALSE 29712
29688: PUSH
29689: LD_VAR 0 5
29693: PPUSH
29694: LD_INT 2
29696: PPUSH
29697: CALL_OW 275
29701: PUSH
29702: LD_VAR 0 4
29706: PUSH
29707: LD_INT 2
29709: ARRAY
29710: GREATEREQUAL
29711: AND
29712: IFFALSE 29738
29714: PUSH
29715: LD_VAR 0 5
29719: PPUSH
29720: LD_INT 3
29722: PPUSH
29723: CALL_OW 275
29727: PUSH
29728: LD_VAR 0 4
29732: PUSH
29733: LD_INT 3
29735: ARRAY
29736: GREATEREQUAL
29737: AND
29738: ST_TO_ADDR
// end ;
29739: LD_VAR 0 3
29743: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29744: LD_INT 0
29746: PPUSH
29747: PPUSH
29748: PPUSH
29749: PPUSH
// pom := GetBase ( building ) ;
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 274
29764: ST_TO_ADDR
// if not pom then
29765: LD_VAR 0 3
29769: NOT
29770: IFFALSE 29774
// exit ;
29772: GO 29948
// btype := GetBType ( building ) ;
29774: LD_ADDR_VAR 0 5
29778: PUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 266
29788: ST_TO_ADDR
// if btype = b_armoury then
29789: LD_VAR 0 5
29793: PUSH
29794: LD_INT 4
29796: EQUAL
29797: IFFALSE 29807
// btype := b_barracks ;
29799: LD_ADDR_VAR 0 5
29803: PUSH
29804: LD_INT 5
29806: ST_TO_ADDR
// if btype = b_depot then
29807: LD_VAR 0 5
29811: PUSH
29812: LD_INT 0
29814: EQUAL
29815: IFFALSE 29825
// btype := b_warehouse ;
29817: LD_ADDR_VAR 0 5
29821: PUSH
29822: LD_INT 1
29824: ST_TO_ADDR
// if btype = b_workshop then
29825: LD_VAR 0 5
29829: PUSH
29830: LD_INT 2
29832: EQUAL
29833: IFFALSE 29843
// btype := b_factory ;
29835: LD_ADDR_VAR 0 5
29839: PUSH
29840: LD_INT 3
29842: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29843: LD_ADDR_VAR 0 4
29847: PUSH
29848: LD_VAR 0 5
29852: PPUSH
29853: LD_VAR 0 1
29857: PPUSH
29858: CALL_OW 248
29862: PPUSH
29863: CALL_OW 450
29867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29868: LD_ADDR_VAR 0 2
29872: PUSH
29873: LD_VAR 0 3
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: CALL_OW 275
29885: PUSH
29886: LD_VAR 0 4
29890: PUSH
29891: LD_INT 1
29893: ARRAY
29894: GREATEREQUAL
29895: IFFALSE 29921
29897: PUSH
29898: LD_VAR 0 3
29902: PPUSH
29903: LD_INT 2
29905: PPUSH
29906: CALL_OW 275
29910: PUSH
29911: LD_VAR 0 4
29915: PUSH
29916: LD_INT 2
29918: ARRAY
29919: GREATEREQUAL
29920: AND
29921: IFFALSE 29947
29923: PUSH
29924: LD_VAR 0 3
29928: PPUSH
29929: LD_INT 3
29931: PPUSH
29932: CALL_OW 275
29936: PUSH
29937: LD_VAR 0 4
29941: PUSH
29942: LD_INT 3
29944: ARRAY
29945: GREATEREQUAL
29946: AND
29947: ST_TO_ADDR
// end ;
29948: LD_VAR 0 2
29952: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
// pom := GetBase ( building ) ;
29958: LD_ADDR_VAR 0 4
29962: PUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 274
29972: ST_TO_ADDR
// if not pom then
29973: LD_VAR 0 4
29977: NOT
29978: IFFALSE 29982
// exit ;
29980: GO 30087
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29982: LD_ADDR_VAR 0 5
29986: PUSH
29987: LD_VAR 0 2
29991: PPUSH
29992: LD_VAR 0 1
29996: PPUSH
29997: CALL_OW 248
30001: PPUSH
30002: CALL_OW 450
30006: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30007: LD_ADDR_VAR 0 3
30011: PUSH
30012: LD_VAR 0 4
30016: PPUSH
30017: LD_INT 1
30019: PPUSH
30020: CALL_OW 275
30024: PUSH
30025: LD_VAR 0 5
30029: PUSH
30030: LD_INT 1
30032: ARRAY
30033: GREATEREQUAL
30034: IFFALSE 30060
30036: PUSH
30037: LD_VAR 0 4
30041: PPUSH
30042: LD_INT 2
30044: PPUSH
30045: CALL_OW 275
30049: PUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_INT 2
30057: ARRAY
30058: GREATEREQUAL
30059: AND
30060: IFFALSE 30086
30062: PUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: LD_INT 3
30070: PPUSH
30071: CALL_OW 275
30075: PUSH
30076: LD_VAR 0 5
30080: PUSH
30081: LD_INT 3
30083: ARRAY
30084: GREATEREQUAL
30085: AND
30086: ST_TO_ADDR
// end ;
30087: LD_VAR 0 3
30091: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
30092: LD_INT 0
30094: PPUSH
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
// result := false ;
30105: LD_ADDR_VAR 0 8
30109: PUSH
30110: LD_INT 0
30112: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
30113: LD_VAR 0 5
30117: NOT
30118: IFTRUE 30127
30120: PUSH
30121: LD_VAR 0 1
30125: NOT
30126: OR
30127: IFTRUE 30136
30129: PUSH
30130: LD_VAR 0 2
30134: NOT
30135: OR
30136: IFTRUE 30145
30138: PUSH
30139: LD_VAR 0 3
30143: NOT
30144: OR
30145: IFFALSE 30149
// exit ;
30147: GO 30975
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
30149: LD_ADDR_VAR 0 14
30153: PUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_VAR 0 3
30168: PPUSH
30169: LD_VAR 0 4
30173: PPUSH
30174: LD_VAR 0 5
30178: PUSH
30179: LD_INT 1
30181: ARRAY
30182: PPUSH
30183: CALL_OW 248
30187: PPUSH
30188: LD_INT 0
30190: PPUSH
30191: CALL 32256 0 6
30195: ST_TO_ADDR
// if not hexes then
30196: LD_VAR 0 14
30200: NOT
30201: IFFALSE 30205
// exit ;
30203: GO 30975
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30205: LD_ADDR_VAR 0 17
30209: PUSH
30210: LD_VAR 0 5
30214: PPUSH
30215: LD_INT 22
30217: PUSH
30218: LD_VAR 0 13
30222: PPUSH
30223: CALL_OW 255
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 30
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PPUSH
30264: CALL_OW 72
30268: ST_TO_ADDR
// for i = 1 to hexes do
30269: LD_ADDR_VAR 0 9
30273: PUSH
30274: DOUBLE
30275: LD_INT 1
30277: DEC
30278: ST_TO_ADDR
30279: LD_VAR 0 14
30283: PUSH
30284: FOR_TO
30285: IFFALSE 30973
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30287: LD_ADDR_VAR 0 13
30291: PUSH
30292: LD_VAR 0 14
30296: PUSH
30297: LD_VAR 0 9
30301: ARRAY
30302: PUSH
30303: LD_INT 1
30305: ARRAY
30306: PPUSH
30307: LD_VAR 0 14
30311: PUSH
30312: LD_VAR 0 9
30316: ARRAY
30317: PUSH
30318: LD_INT 2
30320: ARRAY
30321: PPUSH
30322: CALL_OW 428
30326: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30327: LD_VAR 0 14
30331: PUSH
30332: LD_VAR 0 9
30336: ARRAY
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: LD_VAR 0 14
30346: PUSH
30347: LD_VAR 0 9
30351: ARRAY
30352: PUSH
30353: LD_INT 2
30355: ARRAY
30356: PPUSH
30357: CALL_OW 351
30361: IFTRUE 30400
30363: PUSH
30364: LD_VAR 0 14
30368: PUSH
30369: LD_VAR 0 9
30373: ARRAY
30374: PUSH
30375: LD_INT 1
30377: ARRAY
30378: PPUSH
30379: LD_VAR 0 14
30383: PUSH
30384: LD_VAR 0 9
30388: ARRAY
30389: PUSH
30390: LD_INT 2
30392: ARRAY
30393: PPUSH
30394: CALL_OW 488
30398: NOT
30399: OR
30400: IFTRUE 30417
30402: PUSH
30403: LD_VAR 0 13
30407: PPUSH
30408: CALL_OW 247
30412: PUSH
30413: LD_INT 3
30415: EQUAL
30416: OR
30417: IFFALSE 30423
// exit ;
30419: POP
30420: POP
30421: GO 30975
// if not tmp then
30423: LD_VAR 0 13
30427: NOT
30428: IFFALSE 30432
// continue ;
30430: GO 30284
// result := true ;
30432: LD_ADDR_VAR 0 8
30436: PUSH
30437: LD_INT 1
30439: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30440: LD_VAR 0 6
30444: IFFALSE 30461
30446: PUSH
30447: LD_VAR 0 13
30451: PPUSH
30452: CALL_OW 247
30456: PUSH
30457: LD_INT 2
30459: EQUAL
30460: AND
30461: IFFALSE 30478
30463: PUSH
30464: LD_VAR 0 13
30468: PPUSH
30469: CALL_OW 263
30473: PUSH
30474: LD_INT 1
30476: EQUAL
30477: AND
30478: IFFALSE 30642
// begin if IsDrivenBy ( tmp ) then
30480: LD_VAR 0 13
30484: PPUSH
30485: CALL_OW 311
30489: IFFALSE 30493
// continue ;
30491: GO 30284
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30493: LD_VAR 0 6
30497: PPUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 60
30503: PUSH
30504: EMPTY
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: LD_INT 55
30516: PUSH
30517: EMPTY
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PPUSH
30528: CALL_OW 72
30532: IFFALSE 30640
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30534: LD_ADDR_VAR 0 18
30538: PUSH
30539: LD_VAR 0 6
30543: PPUSH
30544: LD_INT 3
30546: PUSH
30547: LD_INT 60
30549: PUSH
30550: EMPTY
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 55
30562: PUSH
30563: EMPTY
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PPUSH
30574: CALL_OW 72
30578: PUSH
30579: LD_INT 1
30581: ARRAY
30582: ST_TO_ADDR
// if IsInUnit ( driver ) then
30583: LD_VAR 0 18
30587: PPUSH
30588: CALL_OW 310
30592: IFFALSE 30603
// ComExit ( driver ) ;
30594: LD_VAR 0 18
30598: PPUSH
30599: CALL 56256 0 1
// AddComEnterUnit ( driver , tmp ) ;
30603: LD_VAR 0 18
30607: PPUSH
30608: LD_VAR 0 13
30612: PPUSH
30613: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30617: LD_VAR 0 18
30621: PPUSH
30622: LD_VAR 0 7
30626: PPUSH
30627: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30631: LD_VAR 0 18
30635: PPUSH
30636: CALL_OW 181
// end ; continue ;
30640: GO 30284
// end ; if not cleaners or not tmp in cleaners then
30642: LD_VAR 0 6
30646: NOT
30647: IFTRUE 30662
30649: PUSH
30650: LD_VAR 0 13
30654: PUSH
30655: LD_VAR 0 6
30659: IN
30660: NOT
30661: OR
30662: IFFALSE 30971
// begin if dep then
30664: LD_VAR 0 17
30668: IFFALSE 30804
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30670: LD_ADDR_VAR 0 16
30674: PUSH
30675: LD_VAR 0 17
30679: PUSH
30680: LD_INT 1
30682: ARRAY
30683: PPUSH
30684: CALL_OW 250
30688: PPUSH
30689: LD_VAR 0 17
30693: PUSH
30694: LD_INT 1
30696: ARRAY
30697: PPUSH
30698: CALL_OW 254
30702: PPUSH
30703: LD_INT 5
30705: PPUSH
30706: CALL_OW 272
30710: PUSH
30711: LD_VAR 0 17
30715: PUSH
30716: LD_INT 1
30718: ARRAY
30719: PPUSH
30720: CALL_OW 251
30724: PPUSH
30725: LD_VAR 0 17
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: CALL_OW 254
30738: PPUSH
30739: LD_INT 5
30741: PPUSH
30742: CALL_OW 273
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30751: LD_VAR 0 16
30755: PUSH
30756: LD_INT 1
30758: ARRAY
30759: PPUSH
30760: LD_VAR 0 16
30764: PUSH
30765: LD_INT 2
30767: ARRAY
30768: PPUSH
30769: CALL_OW 488
30773: IFFALSE 30804
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30775: LD_VAR 0 13
30779: PPUSH
30780: LD_VAR 0 16
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PPUSH
30789: LD_VAR 0 16
30793: PUSH
30794: LD_INT 2
30796: ARRAY
30797: PPUSH
30798: CALL_OW 111
// continue ;
30802: GO 30284
// end ; end ; r := GetDir ( tmp ) ;
30804: LD_ADDR_VAR 0 15
30808: PUSH
30809: LD_VAR 0 13
30813: PPUSH
30814: CALL_OW 254
30818: ST_TO_ADDR
// if r = 5 then
30819: LD_VAR 0 15
30823: PUSH
30824: LD_INT 5
30826: EQUAL
30827: IFFALSE 30837
// r := 0 ;
30829: LD_ADDR_VAR 0 15
30833: PUSH
30834: LD_INT 0
30836: ST_TO_ADDR
// for j = r to 5 do
30837: LD_ADDR_VAR 0 10
30841: PUSH
30842: DOUBLE
30843: LD_VAR 0 15
30847: DEC
30848: ST_TO_ADDR
30849: LD_INT 5
30851: PUSH
30852: FOR_TO
30853: IFFALSE 30969
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30855: LD_ADDR_VAR 0 11
30859: PUSH
30860: LD_VAR 0 13
30864: PPUSH
30865: CALL_OW 250
30869: PPUSH
30870: LD_VAR 0 10
30874: PPUSH
30875: LD_INT 2
30877: PPUSH
30878: CALL_OW 272
30882: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30883: LD_ADDR_VAR 0 12
30887: PUSH
30888: LD_VAR 0 13
30892: PPUSH
30893: CALL_OW 251
30897: PPUSH
30898: LD_VAR 0 10
30902: PPUSH
30903: LD_INT 2
30905: PPUSH
30906: CALL_OW 273
30910: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30911: LD_VAR 0 11
30915: PPUSH
30916: LD_VAR 0 12
30920: PPUSH
30921: CALL_OW 488
30925: IFFALSE 30944
30927: PUSH
30928: LD_VAR 0 11
30932: PPUSH
30933: LD_VAR 0 12
30937: PPUSH
30938: CALL_OW 428
30942: NOT
30943: AND
30944: IFFALSE 30967
// begin ComMoveXY ( tmp , _x , _y ) ;
30946: LD_VAR 0 13
30950: PPUSH
30951: LD_VAR 0 11
30955: PPUSH
30956: LD_VAR 0 12
30960: PPUSH
30961: CALL_OW 111
// break ;
30965: GO 30969
// end ; end ;
30967: GO 30852
30969: POP
30970: POP
// end ; end ;
30971: GO 30284
30973: POP
30974: POP
// end ;
30975: LD_VAR 0 8
30979: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30980: LD_INT 0
30982: PPUSH
// result := true ;
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: LD_INT 1
30990: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30991: LD_VAR 0 2
30995: PUSH
30996: LD_INT 24
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31010
31002: LD_INT 33
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31035
31010: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: LD_INT 32
31018: PPUSH
31019: LD_VAR 0 1
31023: PPUSH
31024: CALL_OW 321
31028: PUSH
31029: LD_INT 2
31031: EQUAL
31032: ST_TO_ADDR
31033: GO 31351
31035: LD_INT 20
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31068
31043: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 6
31051: PPUSH
31052: LD_VAR 0 1
31056: PPUSH
31057: CALL_OW 321
31061: PUSH
31062: LD_INT 2
31064: EQUAL
31065: ST_TO_ADDR
31066: GO 31351
31068: LD_INT 22
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31082
31074: LD_INT 36
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31107
31082: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_INT 15
31090: PPUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 321
31100: PUSH
31101: LD_INT 2
31103: EQUAL
31104: ST_TO_ADDR
31105: GO 31351
31107: LD_INT 30
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31140
31115: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_INT 20
31123: PPUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 321
31133: PUSH
31134: LD_INT 2
31136: EQUAL
31137: ST_TO_ADDR
31138: GO 31351
31140: LD_INT 28
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31154
31146: LD_INT 21
31148: DOUBLE
31149: EQUAL
31150: IFTRUE 31154
31152: GO 31179
31154: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 21
31162: PPUSH
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 321
31172: PUSH
31173: LD_INT 2
31175: EQUAL
31176: ST_TO_ADDR
31177: GO 31351
31179: LD_INT 16
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31212
31187: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
31188: LD_ADDR_VAR 0 3
31192: PUSH
31193: LD_INT 84
31195: PPUSH
31196: LD_VAR 0 1
31200: PPUSH
31201: CALL_OW 321
31205: PUSH
31206: LD_INT 2
31208: EQUAL
31209: ST_TO_ADDR
31210: GO 31351
31212: LD_INT 19
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31226
31218: LD_INT 23
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31251
31226: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_INT 83
31234: PPUSH
31235: LD_VAR 0 1
31239: PPUSH
31240: CALL_OW 321
31244: PUSH
31245: LD_INT 2
31247: EQUAL
31248: ST_TO_ADDR
31249: GO 31351
31251: LD_INT 17
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31284
31259: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
31260: LD_ADDR_VAR 0 3
31264: PUSH
31265: LD_INT 39
31267: PPUSH
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 321
31277: PUSH
31278: LD_INT 2
31280: EQUAL
31281: ST_TO_ADDR
31282: GO 31351
31284: LD_INT 18
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31317
31292: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31293: LD_ADDR_VAR 0 3
31297: PUSH
31298: LD_INT 40
31300: PPUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 321
31310: PUSH
31311: LD_INT 2
31313: EQUAL
31314: ST_TO_ADDR
31315: GO 31351
31317: LD_INT 27
31319: DOUBLE
31320: EQUAL
31321: IFTRUE 31325
31323: GO 31350
31325: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31326: LD_ADDR_VAR 0 3
31330: PUSH
31331: LD_INT 35
31333: PPUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 321
31343: PUSH
31344: LD_INT 2
31346: EQUAL
31347: ST_TO_ADDR
31348: GO 31351
31350: POP
// end ;
31351: LD_VAR 0 3
31355: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31356: LD_INT 0
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
// result := false ;
31369: LD_ADDR_VAR 0 6
31373: PUSH
31374: LD_INT 0
31376: ST_TO_ADDR
// if btype = b_depot then
31377: LD_VAR 0 2
31381: PUSH
31382: LD_INT 0
31384: EQUAL
31385: IFFALSE 31397
// begin result := true ;
31387: LD_ADDR_VAR 0 6
31391: PUSH
31392: LD_INT 1
31394: ST_TO_ADDR
// exit ;
31395: GO 32251
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31397: LD_VAR 0 1
31401: NOT
31402: IFTRUE 31427
31404: PUSH
31405: LD_VAR 0 1
31409: PPUSH
31410: CALL_OW 266
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: IN
31425: NOT
31426: OR
31427: IFTRUE 31436
31429: PUSH
31430: LD_VAR 0 2
31434: NOT
31435: OR
31436: IFTRUE 31472
31438: PUSH
31439: LD_VAR 0 5
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: LD_INT 4
31458: PUSH
31459: LD_INT 5
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: IN
31470: NOT
31471: OR
31472: IFTRUE 31491
31474: PUSH
31475: LD_VAR 0 3
31479: PPUSH
31480: LD_VAR 0 4
31484: PPUSH
31485: CALL_OW 488
31489: NOT
31490: OR
31491: IFFALSE 31495
// exit ;
31493: GO 32251
// side := GetSide ( depot ) ;
31495: LD_ADDR_VAR 0 9
31499: PUSH
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 255
31509: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31510: LD_VAR 0 9
31514: PPUSH
31515: LD_VAR 0 2
31519: PPUSH
31520: CALL 30980 0 2
31524: NOT
31525: IFFALSE 31529
// exit ;
31527: GO 32251
// pom := GetBase ( depot ) ;
31529: LD_ADDR_VAR 0 10
31533: PUSH
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 274
31543: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31544: LD_ADDR_VAR 0 11
31548: PUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: LD_VAR 0 1
31558: PPUSH
31559: CALL_OW 248
31563: PPUSH
31564: CALL_OW 450
31568: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31569: LD_VAR 0 10
31573: PPUSH
31574: LD_INT 1
31576: PPUSH
31577: CALL_OW 275
31581: PUSH
31582: LD_VAR 0 11
31586: PUSH
31587: LD_INT 1
31589: ARRAY
31590: GREATEREQUAL
31591: IFFALSE 31617
31593: PUSH
31594: LD_VAR 0 10
31598: PPUSH
31599: LD_INT 2
31601: PPUSH
31602: CALL_OW 275
31606: PUSH
31607: LD_VAR 0 11
31611: PUSH
31612: LD_INT 2
31614: ARRAY
31615: GREATEREQUAL
31616: AND
31617: IFFALSE 31643
31619: PUSH
31620: LD_VAR 0 10
31624: PPUSH
31625: LD_INT 3
31627: PPUSH
31628: CALL_OW 275
31632: PUSH
31633: LD_VAR 0 11
31637: PUSH
31638: LD_INT 3
31640: ARRAY
31641: GREATEREQUAL
31642: AND
31643: NOT
31644: IFFALSE 31648
// exit ;
31646: GO 32251
// if GetBType ( depot ) = b_depot then
31648: LD_VAR 0 1
31652: PPUSH
31653: CALL_OW 266
31657: PUSH
31658: LD_INT 0
31660: EQUAL
31661: IFFALSE 31673
// dist := 28 else
31663: LD_ADDR_VAR 0 14
31667: PUSH
31668: LD_INT 28
31670: ST_TO_ADDR
31671: GO 31681
// dist := 36 ;
31673: LD_ADDR_VAR 0 14
31677: PUSH
31678: LD_INT 36
31680: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_VAR 0 3
31690: PPUSH
31691: LD_VAR 0 4
31695: PPUSH
31696: CALL_OW 297
31700: PUSH
31701: LD_VAR 0 14
31705: GREATER
31706: IFFALSE 31710
// exit ;
31708: GO 32251
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31710: LD_ADDR_VAR 0 12
31714: PUSH
31715: LD_VAR 0 2
31719: PPUSH
31720: LD_VAR 0 3
31724: PPUSH
31725: LD_VAR 0 4
31729: PPUSH
31730: LD_VAR 0 5
31734: PPUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 248
31744: PPUSH
31745: LD_INT 0
31747: PPUSH
31748: CALL 32256 0 6
31752: ST_TO_ADDR
// if not hexes then
31753: LD_VAR 0 12
31757: NOT
31758: IFFALSE 31762
// exit ;
31760: GO 32251
// hex := GetHexInfo ( x , y ) ;
31762: LD_ADDR_VAR 0 15
31766: PUSH
31767: LD_VAR 0 3
31771: PPUSH
31772: LD_VAR 0 4
31776: PPUSH
31777: CALL_OW 546
31781: ST_TO_ADDR
// if hex [ 1 ] then
31782: LD_VAR 0 15
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: IFFALSE 31794
// exit ;
31792: GO 32251
// height := hex [ 2 ] ;
31794: LD_ADDR_VAR 0 13
31798: PUSH
31799: LD_VAR 0 15
31803: PUSH
31804: LD_INT 2
31806: ARRAY
31807: ST_TO_ADDR
// for i = 1 to hexes do
31808: LD_ADDR_VAR 0 7
31812: PUSH
31813: DOUBLE
31814: LD_INT 1
31816: DEC
31817: ST_TO_ADDR
31818: LD_VAR 0 12
31822: PUSH
31823: FOR_TO
31824: IFFALSE 32168
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31826: LD_VAR 0 12
31830: PUSH
31831: LD_VAR 0 7
31835: ARRAY
31836: PUSH
31837: LD_INT 1
31839: ARRAY
31840: PPUSH
31841: LD_VAR 0 12
31845: PUSH
31846: LD_VAR 0 7
31850: ARRAY
31851: PUSH
31852: LD_INT 2
31854: ARRAY
31855: PPUSH
31856: CALL_OW 488
31860: NOT
31861: IFTRUE 31903
31863: PUSH
31864: LD_VAR 0 12
31868: PUSH
31869: LD_VAR 0 7
31873: ARRAY
31874: PUSH
31875: LD_INT 1
31877: ARRAY
31878: PPUSH
31879: LD_VAR 0 12
31883: PUSH
31884: LD_VAR 0 7
31888: ARRAY
31889: PUSH
31890: LD_INT 2
31892: ARRAY
31893: PPUSH
31894: CALL_OW 428
31898: PUSH
31899: LD_INT 0
31901: GREATER
31902: OR
31903: IFTRUE 31941
31905: PUSH
31906: LD_VAR 0 12
31910: PUSH
31911: LD_VAR 0 7
31915: ARRAY
31916: PUSH
31917: LD_INT 1
31919: ARRAY
31920: PPUSH
31921: LD_VAR 0 12
31925: PUSH
31926: LD_VAR 0 7
31930: ARRAY
31931: PUSH
31932: LD_INT 2
31934: ARRAY
31935: PPUSH
31936: CALL_OW 351
31940: OR
31941: IFFALSE 31947
// exit ;
31943: POP
31944: POP
31945: GO 32251
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31947: LD_ADDR_VAR 0 8
31951: PUSH
31952: LD_VAR 0 12
31956: PUSH
31957: LD_VAR 0 7
31961: ARRAY
31962: PUSH
31963: LD_INT 1
31965: ARRAY
31966: PPUSH
31967: LD_VAR 0 12
31971: PUSH
31972: LD_VAR 0 7
31976: ARRAY
31977: PUSH
31978: LD_INT 2
31980: ARRAY
31981: PPUSH
31982: CALL_OW 546
31986: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31987: LD_VAR 0 8
31991: PUSH
31992: LD_INT 1
31994: ARRAY
31995: IFTRUE 32017
31997: PUSH
31998: LD_VAR 0 8
32002: PUSH
32003: LD_INT 2
32005: ARRAY
32006: PUSH
32007: LD_VAR 0 13
32011: PUSH
32012: LD_INT 2
32014: PLUS
32015: GREATER
32016: OR
32017: IFTRUE 32039
32019: PUSH
32020: LD_VAR 0 8
32024: PUSH
32025: LD_INT 2
32027: ARRAY
32028: PUSH
32029: LD_VAR 0 13
32033: PUSH
32034: LD_INT 2
32036: MINUS
32037: LESS
32038: OR
32039: IFTRUE 32107
32041: PUSH
32042: LD_VAR 0 8
32046: PUSH
32047: LD_INT 3
32049: ARRAY
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 8
32056: PUSH
32057: LD_INT 9
32059: PUSH
32060: LD_INT 10
32062: PUSH
32063: LD_INT 11
32065: PUSH
32066: LD_INT 12
32068: PUSH
32069: LD_INT 13
32071: PUSH
32072: LD_INT 16
32074: PUSH
32075: LD_INT 17
32077: PUSH
32078: LD_INT 18
32080: PUSH
32081: LD_INT 19
32083: PUSH
32084: LD_INT 20
32086: PUSH
32087: LD_INT 21
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: IN
32105: NOT
32106: OR
32107: IFTRUE 32120
32109: PUSH
32110: LD_VAR 0 8
32114: PUSH
32115: LD_INT 5
32117: ARRAY
32118: NOT
32119: OR
32120: IFTRUE 32160
32122: PUSH
32123: LD_VAR 0 8
32127: PUSH
32128: LD_INT 6
32130: ARRAY
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 7
32140: PUSH
32141: LD_INT 9
32143: PUSH
32144: LD_INT 10
32146: PUSH
32147: LD_INT 11
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: IN
32158: NOT
32159: OR
32160: IFFALSE 32166
// exit ;
32162: POP
32163: POP
32164: GO 32251
// end ;
32166: GO 31823
32168: POP
32169: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32170: LD_VAR 0 9
32174: PPUSH
32175: LD_VAR 0 3
32179: PPUSH
32180: LD_VAR 0 4
32184: PPUSH
32185: LD_INT 20
32187: PPUSH
32188: CALL 24070 0 4
32192: PUSH
32193: LD_INT 4
32195: ARRAY
32196: IFFALSE 32200
// exit ;
32198: GO 32251
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32200: LD_VAR 0 2
32204: PUSH
32205: LD_INT 29
32207: PUSH
32208: LD_INT 30
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: IN
32215: IFFALSE 32239
32217: PUSH
32218: LD_VAR 0 3
32222: PPUSH
32223: LD_VAR 0 4
32227: PPUSH
32228: LD_VAR 0 9
32232: PPUSH
32233: CALL_OW 440
32237: NOT
32238: AND
32239: IFFALSE 32243
// exit ;
32241: GO 32251
// result := true ;
32243: LD_ADDR_VAR 0 6
32247: PUSH
32248: LD_INT 1
32250: ST_TO_ADDR
// end ;
32251: LD_VAR 0 6
32255: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32256: LD_INT 0
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
32279: PPUSH
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
32290: PPUSH
32291: PPUSH
32292: PPUSH
32293: PPUSH
32294: PPUSH
32295: PPUSH
32296: PPUSH
32297: PPUSH
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
32313: PPUSH
32314: PPUSH
32315: PPUSH
// result = [ ] ;
32316: LD_ADDR_VAR 0 7
32320: PUSH
32321: EMPTY
32322: ST_TO_ADDR
// temp_list = [ ] ;
32323: LD_ADDR_VAR 0 9
32327: PUSH
32328: EMPTY
32329: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32330: LD_VAR 0 4
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: LD_INT 4
32349: PUSH
32350: LD_INT 5
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: IN
32361: NOT
32362: IFTRUE 32405
32364: PUSH
32365: LD_VAR 0 1
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: IN
32380: IFFALSE 32404
32382: PUSH
32383: LD_VAR 0 5
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: LD_INT 3
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: IN
32402: NOT
32403: AND
32404: OR
32405: IFFALSE 32409
// exit ;
32407: GO 50808
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32409: LD_VAR 0 1
32413: PUSH
32414: LD_INT 6
32416: PUSH
32417: LD_INT 7
32419: PUSH
32420: LD_INT 8
32422: PUSH
32423: LD_INT 13
32425: PUSH
32426: LD_INT 12
32428: PUSH
32429: LD_INT 15
32431: PUSH
32432: LD_INT 11
32434: PUSH
32435: LD_INT 14
32437: PUSH
32438: LD_INT 10
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: IN
32452: IFFALSE 32462
// btype = b_lab ;
32454: LD_ADDR_VAR 0 1
32458: PUSH
32459: LD_INT 6
32461: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32462: LD_VAR 0 6
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: IN
32481: NOT
32482: IFTRUE 32550
32484: PUSH
32485: LD_VAR 0 1
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: LD_INT 3
32501: PUSH
32502: LD_INT 6
32504: PUSH
32505: LD_INT 36
32507: PUSH
32508: LD_INT 4
32510: PUSH
32511: LD_INT 5
32513: PUSH
32514: LD_INT 31
32516: PUSH
32517: LD_INT 32
32519: PUSH
32520: LD_INT 33
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: IN
32536: NOT
32537: IFFALSE 32549
32539: PUSH
32540: LD_VAR 0 6
32544: PUSH
32545: LD_INT 1
32547: EQUAL
32548: AND
32549: OR
32550: IFTRUE 32582
32552: PUSH
32553: LD_VAR 0 1
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: LD_INT 3
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: IN
32568: NOT
32569: IFFALSE 32581
32571: PUSH
32572: LD_VAR 0 6
32576: PUSH
32577: LD_INT 2
32579: EQUAL
32580: AND
32581: OR
32582: IFFALSE 32592
// mode = 0 ;
32584: LD_ADDR_VAR 0 6
32588: PUSH
32589: LD_INT 0
32591: ST_TO_ADDR
// case mode of 0 :
32592: LD_VAR 0 6
32596: PUSH
32597: LD_INT 0
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 44058
32605: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32606: LD_ADDR_VAR 0 11
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 3
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32799: LD_ADDR_VAR 0 12
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: NEG
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 3
32956: NEG
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32995: LD_ADDR_VAR 0 13
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 3
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 3
33166: NEG
33167: PUSH
33168: LD_INT 3
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33194: LD_ADDR_VAR 0 14
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: LD_INT 3
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 3
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33390: LD_ADDR_VAR 0 15
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 3
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33583: LD_ADDR_VAR 0 16
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33776: LD_ADDR_VAR 0 17
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: NEG
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34006: LD_ADDR_VAR 0 18
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 2
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: NEG
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34236: LD_ADDR_VAR 0 19
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34466: LD_ADDR_VAR 0 20
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: NEG
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34696: LD_ADDR_VAR 0 21
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: NEG
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: LD_INT 1
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 2
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34926: LD_ADDR_VAR 0 22
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35156: LD_ADDR_VAR 0 23
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 3
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: LD_INT 3
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35436: LD_ADDR_VAR 0 24
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: NEG
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35712: LD_ADDR_VAR 0 25
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: LD_INT 2
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 3
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35986: LD_ADDR_VAR 0 26
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 3
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36262: LD_ADDR_VAR 0 27
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 2
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 3
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 3
36507: NEG
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36542: LD_ADDR_VAR 0 28
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: LD_INT 3
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 3
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 3
36777: NEG
36778: PUSH
36779: LD_INT 1
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 3
36789: NEG
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36824: LD_ADDR_VAR 0 29
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 3
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 3
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: LD_INT 2
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37103: LD_ADDR_VAR 0 30
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: LD_INT 2
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 3
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 3
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37381: LD_ADDR_VAR 0 31
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: LD_INT 3
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 3
37624: NEG
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37659: LD_ADDR_VAR 0 32
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: LD_INT 2
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: LD_INT 3
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 3
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 3
37902: NEG
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37937: LD_ADDR_VAR 0 33
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: LD_INT 3
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: NEG
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38216: LD_ADDR_VAR 0 34
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38496: LD_ADDR_VAR 0 35
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38608: LD_ADDR_VAR 0 36
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38720: LD_ADDR_VAR 0 37
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38832: LD_ADDR_VAR 0 38
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38944: LD_ADDR_VAR 0 39
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39056: LD_ADDR_VAR 0 40
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39168: LD_ADDR_VAR 0 41
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: LD_INT 3
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 3
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 3
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 3
39442: NEG
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: NEG
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 3
39477: NEG
39478: PUSH
39479: LD_INT 3
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39518: LD_ADDR_VAR 0 42
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: LD_INT 3
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 3
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 3
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 3
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: NEG
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39868: LD_ADDR_VAR 0 43
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 2
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 3
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 3
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 3
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 3
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 3
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: NEG
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 3
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40216: LD_ADDR_VAR 0 44
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 3
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 3
40490: NEG
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 3
40525: NEG
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40566: LD_ADDR_VAR 0 45
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 3
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: NEG
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 3
40875: NEG
40876: PUSH
40877: LD_INT 3
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40916: LD_ADDR_VAR 0 46
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 3
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 3
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 3
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 3
41212: NEG
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41264: LD_ADDR_VAR 0 47
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: LD_INT 2
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41415: LD_ADDR_VAR 0 48
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41562: LD_ADDR_VAR 0 49
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41706: LD_ADDR_VAR 0 50
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41850: LD_ADDR_VAR 0 51
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41997: LD_ADDR_VAR 0 52
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42148: LD_ADDR_VAR 0 53
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42378: LD_ADDR_VAR 0 54
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42608: LD_ADDR_VAR 0 55
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42838: LD_ADDR_VAR 0 56
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43068: LD_ADDR_VAR 0 57
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43298: LD_ADDR_VAR 0 58
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43528: LD_ADDR_VAR 0 59
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43616: LD_ADDR_VAR 0 60
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43704: LD_ADDR_VAR 0 61
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43792: LD_ADDR_VAR 0 62
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43880: LD_ADDR_VAR 0 63
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43968: LD_ADDR_VAR 0 64
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// end ; 1 :
44056: GO 49953
44058: LD_INT 1
44060: DOUBLE
44061: EQUAL
44062: IFTRUE 44066
44064: GO 46689
44066: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44067: LD_ADDR_VAR 0 11
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 3
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 3
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44111: LD_ADDR_VAR 0 12
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 3
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 3
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: LIST
44151: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44152: LD_ADDR_VAR 0 13
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44192: LD_ADDR_VAR 0 14
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44233: LD_ADDR_VAR 0 15
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 3
44251: NEG
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44277: LD_ADDR_VAR 0 16
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: LD_INT 3
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 3
44296: NEG
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44323: LD_ADDR_VAR 0 17
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44367: LD_ADDR_VAR 0 18
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44408: LD_ADDR_VAR 0 19
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44448: LD_ADDR_VAR 0 20
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44489: LD_ADDR_VAR 0 21
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 3
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44533: LD_ADDR_VAR 0 22
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 3
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44579: LD_ADDR_VAR 0 23
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 3
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 4
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44623: LD_ADDR_VAR 0 24
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 4
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44664: LD_ADDR_VAR 0 25
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 4
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: LD_INT 4
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44704: LD_ADDR_VAR 0 26
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 3
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 4
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44745: LD_ADDR_VAR 0 27
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 3
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 4
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44789: LD_ADDR_VAR 0 28
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: LD_INT 4
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 4
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44835: LD_ADDR_VAR 0 29
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 3
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 3
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 4
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 4
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 5
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 5
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 4
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 6
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 6
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 5
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44990: LD_ADDR_VAR 0 30
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 4
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 4
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 4
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 5
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 5
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 5
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 6
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 6
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45133: LD_ADDR_VAR 0 31
45137: PUSH
45138: LD_INT 3
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 4
45170: PUSH
45171: LD_INT 3
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 4
45180: PUSH
45181: LD_INT 4
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: LD_INT 4
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 5
45200: PUSH
45201: LD_INT 4
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 5
45210: PUSH
45211: LD_INT 5
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 4
45220: PUSH
45221: LD_INT 5
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 6
45230: PUSH
45231: LD_INT 5
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 6
45240: PUSH
45241: LD_INT 6
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 5
45250: PUSH
45251: LD_INT 6
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45272: LD_ADDR_VAR 0 32
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 4
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 4
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 5
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 5
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 4
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 6
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 6
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 5
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45415: LD_ADDR_VAR 0 33
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: NEG
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 4
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 5
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 5
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 5
45524: NEG
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 6
45535: NEG
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 6
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45570: LD_ADDR_VAR 0 34
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: NEG
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: LD_INT 4
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 4
45625: NEG
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 4
45637: NEG
45638: PUSH
45639: LD_INT 4
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 4
45649: NEG
45650: PUSH
45651: LD_INT 5
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 5
45661: NEG
45662: PUSH
45663: LD_INT 4
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 5
45673: NEG
45674: PUSH
45675: LD_INT 5
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 5
45685: NEG
45686: PUSH
45687: LD_INT 6
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 6
45697: NEG
45698: PUSH
45699: LD_INT 5
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 6
45709: NEG
45710: PUSH
45711: LD_INT 6
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45733: LD_ADDR_VAR 0 41
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45777: LD_ADDR_VAR 0 42
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45818: LD_ADDR_VAR 0 43
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45858: LD_ADDR_VAR 0 44
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45899: LD_ADDR_VAR 0 45
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45943: LD_ADDR_VAR 0 46
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 3
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45989: LD_ADDR_VAR 0 47
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46022: LD_ADDR_VAR 0 48
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46053: LD_ADDR_VAR 0 49
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46082: LD_ADDR_VAR 0 50
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46111: LD_ADDR_VAR 0 51
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46142: LD_ADDR_VAR 0 52
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46175: LD_ADDR_VAR 0 53
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 3
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46219: LD_ADDR_VAR 0 54
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46260: LD_ADDR_VAR 0 55
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 3
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46300: LD_ADDR_VAR 0 56
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46341: LD_ADDR_VAR 0 57
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46385: LD_ADDR_VAR 0 58
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 3
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46431: LD_ADDR_VAR 0 59
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46475: LD_ADDR_VAR 0 60
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46516: LD_ADDR_VAR 0 61
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46556: LD_ADDR_VAR 0 62
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46597: LD_ADDR_VAR 0 63
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46641: LD_ADDR_VAR 0 64
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// end ; 2 :
46687: GO 49953
46689: LD_INT 2
46691: DOUBLE
46692: EQUAL
46693: IFTRUE 46697
46695: GO 49952
46697: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46698: LD_ADDR_VAR 0 29
46702: PUSH
46703: LD_INT 4
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 5
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 5
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 4
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 5
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 3
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 4
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 4
46828: PUSH
46829: LD_INT 4
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 4
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 4
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: LD_INT 4
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 4
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 4
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 5
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 5
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 4
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 5
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 4
47037: NEG
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 4
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 4
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 4
47083: NEG
47084: PUSH
47085: LD_INT 4
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 4
47095: NEG
47096: PUSH
47097: LD_INT 5
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: LD_INT 4
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: LD_INT 3
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 4
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 5
47143: NEG
47144: PUSH
47145: LD_INT 4
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 5
47155: NEG
47156: PUSH
47157: LD_INT 5
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 5
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 5
47179: NEG
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47236: LD_ADDR_VAR 0 30
47240: PUSH
47241: LD_INT 4
47243: PUSH
47244: LD_INT 4
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 4
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: LD_INT 4
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 5
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 4
47283: PUSH
47284: LD_INT 5
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 4
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 5
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: PUSH
47324: LD_INT 5
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 4
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 4
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 4
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 4
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 4
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 4
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 5
47482: NEG
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 5
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 5
47505: NEG
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: LD_INT 4
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: NEG
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 4
47588: NEG
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 4
47600: NEG
47601: PUSH
47602: LD_INT 4
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 4
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 4
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 4
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 5
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 4
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 4
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 5
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: LD_INT 5
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47783: LD_ADDR_VAR 0 31
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 4
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 5
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 5
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 4
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 5
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 4
47939: NEG
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 4
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 4
47962: NEG
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 4
47985: NEG
47986: PUSH
47987: LD_INT 4
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 4
47997: NEG
47998: PUSH
47999: LD_INT 5
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: LD_INT 4
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: LD_INT 3
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 4
48033: NEG
48034: PUSH
48035: LD_INT 3
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 5
48045: NEG
48046: PUSH
48047: LD_INT 4
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 5
48057: NEG
48058: PUSH
48059: LD_INT 5
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: NEG
48070: PUSH
48071: LD_INT 5
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 5
48081: NEG
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 3
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 4
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 4
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 4
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 5
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 5
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 4
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 5
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48333: LD_ADDR_VAR 0 32
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 4
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 4
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 5
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 5
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 5
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: LD_INT 4
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 4
48502: NEG
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 4
48514: NEG
48515: PUSH
48516: LD_INT 4
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 4
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 4
48538: NEG
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 4
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 5
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 4
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 4
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 5
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 5
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 4
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 4
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 5
48765: PUSH
48766: LD_INT 4
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 5
48775: PUSH
48776: LD_INT 5
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 4
48785: PUSH
48786: LD_INT 5
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 3
48795: PUSH
48796: LD_INT 4
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: LD_INT 3
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 5
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 5
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48880: LD_ADDR_VAR 0 33
48884: PUSH
48885: LD_INT 4
48887: NEG
48888: PUSH
48889: LD_INT 4
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 4
48899: NEG
48900: PUSH
48901: LD_INT 5
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: LD_INT 4
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: NEG
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 4
48935: NEG
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 5
48947: NEG
48948: PUSH
48949: LD_INT 4
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 5
48959: NEG
48960: PUSH
48961: LD_INT 5
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 3
48971: NEG
48972: PUSH
48973: LD_INT 5
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 5
48983: NEG
48984: PUSH
48985: LD_INT 3
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 4
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 3
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 3
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 4
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 4
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 5
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 5
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 4
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 3
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 5
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 4
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 4
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 4
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 4
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 5
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 5
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 4
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 5
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49418: LD_ADDR_VAR 0 34
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 4
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 5
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 4
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 5
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 5
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 4
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 4
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 4
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 4
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 4
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 5
49640: PUSH
49641: LD_INT 4
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 5
49650: PUSH
49651: LD_INT 5
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 4
49660: PUSH
49661: LD_INT 5
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 4
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: LD_INT 3
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 5
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 5
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 3
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 4
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 4
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 4
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 4
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 4
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 4
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 5
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 5
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 5
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: ST_TO_ADDR
// end ; end ;
49950: GO 49953
49952: POP
// case btype of b_depot , b_warehouse :
49953: LD_VAR 0 1
49957: PUSH
49958: LD_INT 0
49960: DOUBLE
49961: EQUAL
49962: IFTRUE 49972
49964: LD_INT 1
49966: DOUBLE
49967: EQUAL
49968: IFTRUE 49972
49970: GO 50173
49972: POP
// case nation of nation_american :
49973: LD_VAR 0 5
49977: PUSH
49978: LD_INT 1
49980: DOUBLE
49981: EQUAL
49982: IFTRUE 49986
49984: GO 50042
49986: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49987: LD_ADDR_VAR 0 9
49991: PUSH
49992: LD_VAR 0 11
49996: PUSH
49997: LD_VAR 0 12
50001: PUSH
50002: LD_VAR 0 13
50006: PUSH
50007: LD_VAR 0 14
50011: PUSH
50012: LD_VAR 0 15
50016: PUSH
50017: LD_VAR 0 16
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: PUSH
50030: LD_VAR 0 4
50034: PUSH
50035: LD_INT 1
50037: PLUS
50038: ARRAY
50039: ST_TO_ADDR
50040: GO 50171
50042: LD_INT 2
50044: DOUBLE
50045: EQUAL
50046: IFTRUE 50050
50048: GO 50106
50050: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50051: LD_ADDR_VAR 0 9
50055: PUSH
50056: LD_VAR 0 17
50060: PUSH
50061: LD_VAR 0 18
50065: PUSH
50066: LD_VAR 0 19
50070: PUSH
50071: LD_VAR 0 20
50075: PUSH
50076: LD_VAR 0 21
50080: PUSH
50081: LD_VAR 0 22
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: PUSH
50094: LD_VAR 0 4
50098: PUSH
50099: LD_INT 1
50101: PLUS
50102: ARRAY
50103: ST_TO_ADDR
50104: GO 50171
50106: LD_INT 3
50108: DOUBLE
50109: EQUAL
50110: IFTRUE 50114
50112: GO 50170
50114: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50115: LD_ADDR_VAR 0 9
50119: PUSH
50120: LD_VAR 0 23
50124: PUSH
50125: LD_VAR 0 24
50129: PUSH
50130: LD_VAR 0 25
50134: PUSH
50135: LD_VAR 0 26
50139: PUSH
50140: LD_VAR 0 27
50144: PUSH
50145: LD_VAR 0 28
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: PUSH
50158: LD_VAR 0 4
50162: PUSH
50163: LD_INT 1
50165: PLUS
50166: ARRAY
50167: ST_TO_ADDR
50168: GO 50171
50170: POP
50171: GO 50726
50173: LD_INT 2
50175: DOUBLE
50176: EQUAL
50177: IFTRUE 50187
50179: LD_INT 3
50181: DOUBLE
50182: EQUAL
50183: IFTRUE 50187
50185: GO 50243
50187: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50188: LD_ADDR_VAR 0 9
50192: PUSH
50193: LD_VAR 0 29
50197: PUSH
50198: LD_VAR 0 30
50202: PUSH
50203: LD_VAR 0 31
50207: PUSH
50208: LD_VAR 0 32
50212: PUSH
50213: LD_VAR 0 33
50217: PUSH
50218: LD_VAR 0 34
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: PUSH
50231: LD_VAR 0 4
50235: PUSH
50236: LD_INT 1
50238: PLUS
50239: ARRAY
50240: ST_TO_ADDR
50241: GO 50726
50243: LD_INT 16
50245: DOUBLE
50246: EQUAL
50247: IFTRUE 50305
50249: LD_INT 17
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50305
50255: LD_INT 18
50257: DOUBLE
50258: EQUAL
50259: IFTRUE 50305
50261: LD_INT 19
50263: DOUBLE
50264: EQUAL
50265: IFTRUE 50305
50267: LD_INT 22
50269: DOUBLE
50270: EQUAL
50271: IFTRUE 50305
50273: LD_INT 20
50275: DOUBLE
50276: EQUAL
50277: IFTRUE 50305
50279: LD_INT 21
50281: DOUBLE
50282: EQUAL
50283: IFTRUE 50305
50285: LD_INT 23
50287: DOUBLE
50288: EQUAL
50289: IFTRUE 50305
50291: LD_INT 24
50293: DOUBLE
50294: EQUAL
50295: IFTRUE 50305
50297: LD_INT 25
50299: DOUBLE
50300: EQUAL
50301: IFTRUE 50305
50303: GO 50361
50305: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50306: LD_ADDR_VAR 0 9
50310: PUSH
50311: LD_VAR 0 35
50315: PUSH
50316: LD_VAR 0 36
50320: PUSH
50321: LD_VAR 0 37
50325: PUSH
50326: LD_VAR 0 38
50330: PUSH
50331: LD_VAR 0 39
50335: PUSH
50336: LD_VAR 0 40
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: PUSH
50349: LD_VAR 0 4
50353: PUSH
50354: LD_INT 1
50356: PLUS
50357: ARRAY
50358: ST_TO_ADDR
50359: GO 50726
50361: LD_INT 6
50363: DOUBLE
50364: EQUAL
50365: IFTRUE 50417
50367: LD_INT 7
50369: DOUBLE
50370: EQUAL
50371: IFTRUE 50417
50373: LD_INT 8
50375: DOUBLE
50376: EQUAL
50377: IFTRUE 50417
50379: LD_INT 13
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50417
50385: LD_INT 12
50387: DOUBLE
50388: EQUAL
50389: IFTRUE 50417
50391: LD_INT 15
50393: DOUBLE
50394: EQUAL
50395: IFTRUE 50417
50397: LD_INT 11
50399: DOUBLE
50400: EQUAL
50401: IFTRUE 50417
50403: LD_INT 14
50405: DOUBLE
50406: EQUAL
50407: IFTRUE 50417
50409: LD_INT 10
50411: DOUBLE
50412: EQUAL
50413: IFTRUE 50417
50415: GO 50473
50417: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50418: LD_ADDR_VAR 0 9
50422: PUSH
50423: LD_VAR 0 41
50427: PUSH
50428: LD_VAR 0 42
50432: PUSH
50433: LD_VAR 0 43
50437: PUSH
50438: LD_VAR 0 44
50442: PUSH
50443: LD_VAR 0 45
50447: PUSH
50448: LD_VAR 0 46
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: PUSH
50461: LD_VAR 0 4
50465: PUSH
50466: LD_INT 1
50468: PLUS
50469: ARRAY
50470: ST_TO_ADDR
50471: GO 50726
50473: LD_INT 36
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50481
50479: GO 50537
50481: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50482: LD_ADDR_VAR 0 9
50486: PUSH
50487: LD_VAR 0 47
50491: PUSH
50492: LD_VAR 0 48
50496: PUSH
50497: LD_VAR 0 49
50501: PUSH
50502: LD_VAR 0 50
50506: PUSH
50507: LD_VAR 0 51
50511: PUSH
50512: LD_VAR 0 52
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: PUSH
50525: LD_VAR 0 4
50529: PUSH
50530: LD_INT 1
50532: PLUS
50533: ARRAY
50534: ST_TO_ADDR
50535: GO 50726
50537: LD_INT 4
50539: DOUBLE
50540: EQUAL
50541: IFTRUE 50563
50543: LD_INT 5
50545: DOUBLE
50546: EQUAL
50547: IFTRUE 50563
50549: LD_INT 34
50551: DOUBLE
50552: EQUAL
50553: IFTRUE 50563
50555: LD_INT 37
50557: DOUBLE
50558: EQUAL
50559: IFTRUE 50563
50561: GO 50619
50563: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50564: LD_ADDR_VAR 0 9
50568: PUSH
50569: LD_VAR 0 53
50573: PUSH
50574: LD_VAR 0 54
50578: PUSH
50579: LD_VAR 0 55
50583: PUSH
50584: LD_VAR 0 56
50588: PUSH
50589: LD_VAR 0 57
50593: PUSH
50594: LD_VAR 0 58
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: PUSH
50607: LD_VAR 0 4
50611: PUSH
50612: LD_INT 1
50614: PLUS
50615: ARRAY
50616: ST_TO_ADDR
50617: GO 50726
50619: LD_INT 31
50621: DOUBLE
50622: EQUAL
50623: IFTRUE 50669
50625: LD_INT 32
50627: DOUBLE
50628: EQUAL
50629: IFTRUE 50669
50631: LD_INT 33
50633: DOUBLE
50634: EQUAL
50635: IFTRUE 50669
50637: LD_INT 27
50639: DOUBLE
50640: EQUAL
50641: IFTRUE 50669
50643: LD_INT 26
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50669
50649: LD_INT 28
50651: DOUBLE
50652: EQUAL
50653: IFTRUE 50669
50655: LD_INT 29
50657: DOUBLE
50658: EQUAL
50659: IFTRUE 50669
50661: LD_INT 30
50663: DOUBLE
50664: EQUAL
50665: IFTRUE 50669
50667: GO 50725
50669: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50670: LD_ADDR_VAR 0 9
50674: PUSH
50675: LD_VAR 0 59
50679: PUSH
50680: LD_VAR 0 60
50684: PUSH
50685: LD_VAR 0 61
50689: PUSH
50690: LD_VAR 0 62
50694: PUSH
50695: LD_VAR 0 63
50699: PUSH
50700: LD_VAR 0 64
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: PUSH
50713: LD_VAR 0 4
50717: PUSH
50718: LD_INT 1
50720: PLUS
50721: ARRAY
50722: ST_TO_ADDR
50723: GO 50726
50725: POP
// temp_list2 = [ ] ;
50726: LD_ADDR_VAR 0 10
50730: PUSH
50731: EMPTY
50732: ST_TO_ADDR
// for i in temp_list do
50733: LD_ADDR_VAR 0 8
50737: PUSH
50738: LD_VAR 0 9
50742: PUSH
50743: FOR_IN
50744: IFFALSE 50796
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50746: LD_ADDR_VAR 0 10
50750: PUSH
50751: LD_VAR 0 10
50755: PUSH
50756: LD_VAR 0 8
50760: PUSH
50761: LD_INT 1
50763: ARRAY
50764: PUSH
50765: LD_VAR 0 2
50769: PLUS
50770: PUSH
50771: LD_VAR 0 8
50775: PUSH
50776: LD_INT 2
50778: ARRAY
50779: PUSH
50780: LD_VAR 0 3
50784: PLUS
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: ADD
50793: ST_TO_ADDR
50794: GO 50743
50796: POP
50797: POP
// result = temp_list2 ;
50798: LD_ADDR_VAR 0 7
50802: PUSH
50803: LD_VAR 0 10
50807: ST_TO_ADDR
// end ;
50808: LD_VAR 0 7
50812: RET
// export function EnemyInRange ( unit , dist ) ; begin
50813: LD_INT 0
50815: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50816: LD_ADDR_VAR 0 3
50820: PUSH
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 255
50830: PPUSH
50831: LD_VAR 0 1
50835: PPUSH
50836: CALL_OW 250
50840: PPUSH
50841: LD_VAR 0 1
50845: PPUSH
50846: CALL_OW 251
50850: PPUSH
50851: LD_VAR 0 2
50855: PPUSH
50856: CALL 24070 0 4
50860: PUSH
50861: LD_INT 4
50863: ARRAY
50864: ST_TO_ADDR
// end ;
50865: LD_VAR 0 3
50869: RET
// export function PlayerSeeMe ( unit ) ; begin
50870: LD_INT 0
50872: PPUSH
// result := See ( your_side , unit ) ;
50873: LD_ADDR_VAR 0 2
50877: PUSH
50878: LD_OWVAR 2
50882: PPUSH
50883: LD_VAR 0 1
50887: PPUSH
50888: CALL_OW 292
50892: ST_TO_ADDR
// end ;
50893: LD_VAR 0 2
50897: RET
// export function ReverseDir ( unit ) ; begin
50898: LD_INT 0
50900: PPUSH
// if not unit then
50901: LD_VAR 0 1
50905: NOT
50906: IFFALSE 50910
// exit ;
50908: GO 50933
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50910: LD_ADDR_VAR 0 2
50914: PUSH
50915: LD_VAR 0 1
50919: PPUSH
50920: CALL_OW 254
50924: PUSH
50925: LD_INT 3
50927: PLUS
50928: PUSH
50929: LD_INT 6
50931: MOD
50932: ST_TO_ADDR
// end ;
50933: LD_VAR 0 2
50937: RET
// export function ReverseArray ( array ) ; var i ; begin
50938: LD_INT 0
50940: PPUSH
50941: PPUSH
// if not array then
50942: LD_VAR 0 1
50946: NOT
50947: IFFALSE 50951
// exit ;
50949: GO 51006
// result := [ ] ;
50951: LD_ADDR_VAR 0 2
50955: PUSH
50956: EMPTY
50957: ST_TO_ADDR
// for i := array downto 1 do
50958: LD_ADDR_VAR 0 3
50962: PUSH
50963: DOUBLE
50964: LD_VAR 0 1
50968: INC
50969: ST_TO_ADDR
50970: LD_INT 1
50972: PUSH
50973: FOR_DOWNTO
50974: IFFALSE 51004
// result := Join ( result , array [ i ] ) ;
50976: LD_ADDR_VAR 0 2
50980: PUSH
50981: LD_VAR 0 2
50985: PPUSH
50986: LD_VAR 0 1
50990: PUSH
50991: LD_VAR 0 3
50995: ARRAY
50996: PPUSH
50997: CALL 55858 0 2
51001: ST_TO_ADDR
51002: GO 50973
51004: POP
51005: POP
// end ;
51006: LD_VAR 0 2
51010: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
51011: LD_INT 0
51013: PPUSH
51014: PPUSH
51015: PPUSH
51016: PPUSH
51017: PPUSH
51018: PPUSH
// if not unit or not hexes then
51019: LD_VAR 0 1
51023: NOT
51024: IFTRUE 51033
51026: PUSH
51027: LD_VAR 0 2
51031: NOT
51032: OR
51033: IFFALSE 51037
// exit ;
51035: GO 51160
// dist := 9999 ;
51037: LD_ADDR_VAR 0 5
51041: PUSH
51042: LD_INT 9999
51044: ST_TO_ADDR
// for i = 1 to hexes do
51045: LD_ADDR_VAR 0 4
51049: PUSH
51050: DOUBLE
51051: LD_INT 1
51053: DEC
51054: ST_TO_ADDR
51055: LD_VAR 0 2
51059: PUSH
51060: FOR_TO
51061: IFFALSE 51148
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51063: LD_ADDR_VAR 0 6
51067: PUSH
51068: LD_VAR 0 1
51072: PPUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_VAR 0 4
51082: ARRAY
51083: PUSH
51084: LD_INT 1
51086: ARRAY
51087: PPUSH
51088: LD_VAR 0 2
51092: PUSH
51093: LD_VAR 0 4
51097: ARRAY
51098: PUSH
51099: LD_INT 2
51101: ARRAY
51102: PPUSH
51103: CALL_OW 297
51107: ST_TO_ADDR
// if tdist < dist then
51108: LD_VAR 0 6
51112: PUSH
51113: LD_VAR 0 5
51117: LESS
51118: IFFALSE 51146
// begin hex := hexes [ i ] ;
51120: LD_ADDR_VAR 0 8
51124: PUSH
51125: LD_VAR 0 2
51129: PUSH
51130: LD_VAR 0 4
51134: ARRAY
51135: ST_TO_ADDR
// dist := tdist ;
51136: LD_ADDR_VAR 0 5
51140: PUSH
51141: LD_VAR 0 6
51145: ST_TO_ADDR
// end ; end ;
51146: GO 51060
51148: POP
51149: POP
// result := hex ;
51150: LD_ADDR_VAR 0 3
51154: PUSH
51155: LD_VAR 0 8
51159: ST_TO_ADDR
// end ;
51160: LD_VAR 0 3
51164: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51165: LD_INT 0
51167: PPUSH
51168: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51169: LD_VAR 0 1
51173: NOT
51174: IFTRUE 51213
51176: PUSH
51177: LD_VAR 0 1
51181: PUSH
51182: LD_INT 21
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 23
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PPUSH
51206: CALL_OW 69
51210: IN
51211: NOT
51212: OR
51213: IFFALSE 51217
// exit ;
51215: GO 51264
// for i = 1 to 3 do
51217: LD_ADDR_VAR 0 3
51221: PUSH
51222: DOUBLE
51223: LD_INT 1
51225: DEC
51226: ST_TO_ADDR
51227: LD_INT 3
51229: PUSH
51230: FOR_TO
51231: IFFALSE 51262
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 250
51242: PPUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 251
51252: PPUSH
51253: LD_INT 1
51255: PPUSH
51256: CALL_OW 453
51260: GO 51230
51262: POP
51263: POP
// end ;
51264: LD_VAR 0 2
51268: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51269: LD_INT 0
51271: PPUSH
51272: PPUSH
51273: PPUSH
51274: PPUSH
51275: PPUSH
51276: PPUSH
// if not unit or not enemy_unit then
51277: LD_VAR 0 1
51281: NOT
51282: IFTRUE 51291
51284: PUSH
51285: LD_VAR 0 2
51289: NOT
51290: OR
51291: IFFALSE 51295
// exit ;
51293: GO 51776
// if GetLives ( i ) < 250 then
51295: LD_VAR 0 4
51299: PPUSH
51300: CALL_OW 256
51304: PUSH
51305: LD_INT 250
51307: LESS
51308: IFFALSE 51321
// begin ComAutodestruct ( i ) ;
51310: LD_VAR 0 4
51314: PPUSH
51315: CALL 51165 0 1
// exit ;
51319: GO 51776
// end ; x := GetX ( enemy_unit ) ;
51321: LD_ADDR_VAR 0 7
51325: PUSH
51326: LD_VAR 0 2
51330: PPUSH
51331: CALL_OW 250
51335: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51336: LD_ADDR_VAR 0 8
51340: PUSH
51341: LD_VAR 0 2
51345: PPUSH
51346: CALL_OW 251
51350: ST_TO_ADDR
// if not x or not y then
51351: LD_VAR 0 7
51355: NOT
51356: IFTRUE 51365
51358: PUSH
51359: LD_VAR 0 8
51363: NOT
51364: OR
51365: IFFALSE 51369
// exit ;
51367: GO 51776
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51369: LD_ADDR_VAR 0 6
51373: PUSH
51374: LD_VAR 0 7
51378: PPUSH
51379: LD_INT 0
51381: PPUSH
51382: LD_INT 4
51384: PPUSH
51385: CALL_OW 272
51389: PUSH
51390: LD_VAR 0 8
51394: PPUSH
51395: LD_INT 0
51397: PPUSH
51398: LD_INT 4
51400: PPUSH
51401: CALL_OW 273
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_VAR 0 7
51414: PPUSH
51415: LD_INT 1
51417: PPUSH
51418: LD_INT 4
51420: PPUSH
51421: CALL_OW 272
51425: PUSH
51426: LD_VAR 0 8
51430: PPUSH
51431: LD_INT 1
51433: PPUSH
51434: LD_INT 4
51436: PPUSH
51437: CALL_OW 273
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_VAR 0 7
51450: PPUSH
51451: LD_INT 2
51453: PPUSH
51454: LD_INT 4
51456: PPUSH
51457: CALL_OW 272
51461: PUSH
51462: LD_VAR 0 8
51466: PPUSH
51467: LD_INT 2
51469: PPUSH
51470: LD_INT 4
51472: PPUSH
51473: CALL_OW 273
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_VAR 0 7
51486: PPUSH
51487: LD_INT 3
51489: PPUSH
51490: LD_INT 4
51492: PPUSH
51493: CALL_OW 272
51497: PUSH
51498: LD_VAR 0 8
51502: PPUSH
51503: LD_INT 3
51505: PPUSH
51506: LD_INT 4
51508: PPUSH
51509: CALL_OW 273
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_VAR 0 7
51522: PPUSH
51523: LD_INT 4
51525: PPUSH
51526: LD_INT 4
51528: PPUSH
51529: CALL_OW 272
51533: PUSH
51534: LD_VAR 0 8
51538: PPUSH
51539: LD_INT 4
51541: PPUSH
51542: LD_INT 4
51544: PPUSH
51545: CALL_OW 273
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_VAR 0 7
51558: PPUSH
51559: LD_INT 5
51561: PPUSH
51562: LD_INT 4
51564: PPUSH
51565: CALL_OW 272
51569: PUSH
51570: LD_VAR 0 8
51574: PPUSH
51575: LD_INT 5
51577: PPUSH
51578: LD_INT 4
51580: PPUSH
51581: CALL_OW 273
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: ST_TO_ADDR
// for i = tmp downto 1 do
51598: LD_ADDR_VAR 0 4
51602: PUSH
51603: DOUBLE
51604: LD_VAR 0 6
51608: INC
51609: ST_TO_ADDR
51610: LD_INT 1
51612: PUSH
51613: FOR_DOWNTO
51614: IFFALSE 51717
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51616: LD_VAR 0 6
51620: PUSH
51621: LD_VAR 0 4
51625: ARRAY
51626: PUSH
51627: LD_INT 1
51629: ARRAY
51630: PPUSH
51631: LD_VAR 0 6
51635: PUSH
51636: LD_VAR 0 4
51640: ARRAY
51641: PUSH
51642: LD_INT 2
51644: ARRAY
51645: PPUSH
51646: CALL_OW 488
51650: NOT
51651: IFTRUE 51693
51653: PUSH
51654: LD_VAR 0 6
51658: PUSH
51659: LD_VAR 0 4
51663: ARRAY
51664: PUSH
51665: LD_INT 1
51667: ARRAY
51668: PPUSH
51669: LD_VAR 0 6
51673: PUSH
51674: LD_VAR 0 4
51678: ARRAY
51679: PUSH
51680: LD_INT 2
51682: ARRAY
51683: PPUSH
51684: CALL_OW 428
51688: PUSH
51689: LD_INT 0
51691: NONEQUAL
51692: OR
51693: IFFALSE 51715
// tmp := Delete ( tmp , i ) ;
51695: LD_ADDR_VAR 0 6
51699: PUSH
51700: LD_VAR 0 6
51704: PPUSH
51705: LD_VAR 0 4
51709: PPUSH
51710: CALL_OW 3
51714: ST_TO_ADDR
51715: GO 51613
51717: POP
51718: POP
// j := GetClosestHex ( unit , tmp ) ;
51719: LD_ADDR_VAR 0 5
51723: PUSH
51724: LD_VAR 0 1
51728: PPUSH
51729: LD_VAR 0 6
51733: PPUSH
51734: CALL 51011 0 2
51738: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51739: LD_VAR 0 1
51743: PPUSH
51744: LD_VAR 0 5
51748: PUSH
51749: LD_INT 1
51751: ARRAY
51752: PPUSH
51753: LD_VAR 0 5
51757: PUSH
51758: LD_INT 2
51760: ARRAY
51761: PPUSH
51762: CALL_OW 111
// result := j ;
51766: LD_ADDR_VAR 0 3
51770: PUSH
51771: LD_VAR 0 5
51775: ST_TO_ADDR
// end ;
51776: LD_VAR 0 3
51780: RET
// export function PrepareApemanSoldier ( ) ; begin
51781: LD_INT 0
51783: PPUSH
// uc_nation := 0 ;
51784: LD_ADDR_OWVAR 21
51788: PUSH
51789: LD_INT 0
51791: ST_TO_ADDR
// hc_sex := sex_male ;
51792: LD_ADDR_OWVAR 27
51796: PUSH
51797: LD_INT 1
51799: ST_TO_ADDR
// hc_name :=  ;
51800: LD_ADDR_OWVAR 26
51804: PUSH
51805: LD_STRING 
51807: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51808: LD_ADDR_OWVAR 28
51812: PUSH
51813: LD_INT 15
51815: ST_TO_ADDR
// hc_gallery :=  ;
51816: LD_ADDR_OWVAR 33
51820: PUSH
51821: LD_STRING 
51823: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51824: LD_ADDR_OWVAR 31
51828: PUSH
51829: LD_INT 0
51831: PPUSH
51832: LD_INT 3
51834: PPUSH
51835: CALL_OW 12
51839: PUSH
51840: LD_INT 0
51842: PPUSH
51843: LD_INT 3
51845: PPUSH
51846: CALL_OW 12
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51863: LD_ADDR_OWVAR 29
51867: PUSH
51868: LD_INT 10
51870: PUSH
51871: LD_INT 12
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: ST_TO_ADDR
// end ;
51878: LD_VAR 0 1
51882: RET
// export function PrepareApemanEngineer ( ) ; begin
51883: LD_INT 0
51885: PPUSH
// uc_nation := 0 ;
51886: LD_ADDR_OWVAR 21
51890: PUSH
51891: LD_INT 0
51893: ST_TO_ADDR
// hc_sex := sex_male ;
51894: LD_ADDR_OWVAR 27
51898: PUSH
51899: LD_INT 1
51901: ST_TO_ADDR
// hc_name :=  ;
51902: LD_ADDR_OWVAR 26
51906: PUSH
51907: LD_STRING 
51909: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51910: LD_ADDR_OWVAR 28
51914: PUSH
51915: LD_INT 16
51917: ST_TO_ADDR
// hc_gallery :=  ;
51918: LD_ADDR_OWVAR 33
51922: PUSH
51923: LD_STRING 
51925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51926: LD_ADDR_OWVAR 31
51930: PUSH
51931: LD_INT 0
51933: PPUSH
51934: LD_INT 3
51936: PPUSH
51937: CALL_OW 12
51941: PUSH
51942: LD_INT 0
51944: PPUSH
51945: LD_INT 3
51947: PPUSH
51948: CALL_OW 12
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51965: LD_ADDR_OWVAR 29
51969: PUSH
51970: LD_INT 10
51972: PUSH
51973: LD_INT 12
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// end ;
51980: LD_VAR 0 1
51984: RET
// export function PrepareApeman ( agressivity ) ; begin
51985: LD_INT 0
51987: PPUSH
// uc_side := 0 ;
51988: LD_ADDR_OWVAR 20
51992: PUSH
51993: LD_INT 0
51995: ST_TO_ADDR
// uc_nation := 0 ;
51996: LD_ADDR_OWVAR 21
52000: PUSH
52001: LD_INT 0
52003: ST_TO_ADDR
// hc_sex := sex_male ;
52004: LD_ADDR_OWVAR 27
52008: PUSH
52009: LD_INT 1
52011: ST_TO_ADDR
// hc_class := class_apeman ;
52012: LD_ADDR_OWVAR 28
52016: PUSH
52017: LD_INT 12
52019: ST_TO_ADDR
// hc_gallery :=  ;
52020: LD_ADDR_OWVAR 33
52024: PUSH
52025: LD_STRING 
52027: ST_TO_ADDR
// hc_name :=  ;
52028: LD_ADDR_OWVAR 26
52032: PUSH
52033: LD_STRING 
52035: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
52036: LD_ADDR_OWVAR 29
52040: PUSH
52041: LD_INT 10
52043: PUSH
52044: LD_INT 12
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// if agressivity = 0 then
52051: LD_VAR 0 1
52055: PUSH
52056: LD_INT 0
52058: EQUAL
52059: IFFALSE 52071
// hc_agressivity := 0 else
52061: LD_ADDR_OWVAR 35
52065: PUSH
52066: LD_INT 0
52068: ST_TO_ADDR
52069: GO 52092
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52071: LD_ADDR_OWVAR 35
52075: PUSH
52076: LD_VAR 0 1
52080: NEG
52081: PPUSH
52082: LD_VAR 0 1
52086: PPUSH
52087: CALL_OW 12
52091: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
52092: LD_ADDR_OWVAR 31
52096: PUSH
52097: LD_INT 0
52099: PPUSH
52100: LD_INT 3
52102: PPUSH
52103: CALL_OW 12
52107: PUSH
52108: LD_INT 0
52110: PPUSH
52111: LD_INT 3
52113: PPUSH
52114: CALL_OW 12
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// end ;
52131: LD_VAR 0 2
52135: RET
// export function PrepareTiger ( agressivity ) ; begin
52136: LD_INT 0
52138: PPUSH
// uc_side := 0 ;
52139: LD_ADDR_OWVAR 20
52143: PUSH
52144: LD_INT 0
52146: ST_TO_ADDR
// uc_nation := 0 ;
52147: LD_ADDR_OWVAR 21
52151: PUSH
52152: LD_INT 0
52154: ST_TO_ADDR
// InitHc ;
52155: CALL_OW 19
// hc_class := class_tiger ;
52159: LD_ADDR_OWVAR 28
52163: PUSH
52164: LD_INT 14
52166: ST_TO_ADDR
// hc_gallery :=  ;
52167: LD_ADDR_OWVAR 33
52171: PUSH
52172: LD_STRING 
52174: ST_TO_ADDR
// hc_name :=  ;
52175: LD_ADDR_OWVAR 26
52179: PUSH
52180: LD_STRING 
52182: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52183: LD_ADDR_OWVAR 35
52187: PUSH
52188: LD_VAR 0 1
52192: NEG
52193: PPUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: CALL_OW 12
52203: ST_TO_ADDR
// end ;
52204: LD_VAR 0 2
52208: RET
// export function PrepareEnchidna ( ) ; begin
52209: LD_INT 0
52211: PPUSH
// uc_side := 0 ;
52212: LD_ADDR_OWVAR 20
52216: PUSH
52217: LD_INT 0
52219: ST_TO_ADDR
// uc_nation := 0 ;
52220: LD_ADDR_OWVAR 21
52224: PUSH
52225: LD_INT 0
52227: ST_TO_ADDR
// InitHc ;
52228: CALL_OW 19
// hc_class := class_baggie ;
52232: LD_ADDR_OWVAR 28
52236: PUSH
52237: LD_INT 13
52239: ST_TO_ADDR
// hc_gallery :=  ;
52240: LD_ADDR_OWVAR 33
52244: PUSH
52245: LD_STRING 
52247: ST_TO_ADDR
// hc_name :=  ;
52248: LD_ADDR_OWVAR 26
52252: PUSH
52253: LD_STRING 
52255: ST_TO_ADDR
// end ;
52256: LD_VAR 0 1
52260: RET
// export function PrepareFrog ( ) ; begin
52261: LD_INT 0
52263: PPUSH
// uc_side := 0 ;
52264: LD_ADDR_OWVAR 20
52268: PUSH
52269: LD_INT 0
52271: ST_TO_ADDR
// uc_nation := 0 ;
52272: LD_ADDR_OWVAR 21
52276: PUSH
52277: LD_INT 0
52279: ST_TO_ADDR
// InitHc ;
52280: CALL_OW 19
// hc_class := class_frog ;
52284: LD_ADDR_OWVAR 28
52288: PUSH
52289: LD_INT 19
52291: ST_TO_ADDR
// hc_gallery :=  ;
52292: LD_ADDR_OWVAR 33
52296: PUSH
52297: LD_STRING 
52299: ST_TO_ADDR
// hc_name :=  ;
52300: LD_ADDR_OWVAR 26
52304: PUSH
52305: LD_STRING 
52307: ST_TO_ADDR
// end ;
52308: LD_VAR 0 1
52312: RET
// export function PrepareFish ( ) ; begin
52313: LD_INT 0
52315: PPUSH
// uc_side := 0 ;
52316: LD_ADDR_OWVAR 20
52320: PUSH
52321: LD_INT 0
52323: ST_TO_ADDR
// uc_nation := 0 ;
52324: LD_ADDR_OWVAR 21
52328: PUSH
52329: LD_INT 0
52331: ST_TO_ADDR
// InitHc ;
52332: CALL_OW 19
// hc_class := class_fish ;
52336: LD_ADDR_OWVAR 28
52340: PUSH
52341: LD_INT 20
52343: ST_TO_ADDR
// hc_gallery :=  ;
52344: LD_ADDR_OWVAR 33
52348: PUSH
52349: LD_STRING 
52351: ST_TO_ADDR
// hc_name :=  ;
52352: LD_ADDR_OWVAR 26
52356: PUSH
52357: LD_STRING 
52359: ST_TO_ADDR
// end ;
52360: LD_VAR 0 1
52364: RET
// export function PrepareBird ( ) ; begin
52365: LD_INT 0
52367: PPUSH
// uc_side := 0 ;
52368: LD_ADDR_OWVAR 20
52372: PUSH
52373: LD_INT 0
52375: ST_TO_ADDR
// uc_nation := 0 ;
52376: LD_ADDR_OWVAR 21
52380: PUSH
52381: LD_INT 0
52383: ST_TO_ADDR
// InitHc ;
52384: CALL_OW 19
// hc_class := class_phororhacos ;
52388: LD_ADDR_OWVAR 28
52392: PUSH
52393: LD_INT 18
52395: ST_TO_ADDR
// hc_gallery :=  ;
52396: LD_ADDR_OWVAR 33
52400: PUSH
52401: LD_STRING 
52403: ST_TO_ADDR
// hc_name :=  ;
52404: LD_ADDR_OWVAR 26
52408: PUSH
52409: LD_STRING 
52411: ST_TO_ADDR
// end ;
52412: LD_VAR 0 1
52416: RET
// export function PrepareHorse ( ) ; begin
52417: LD_INT 0
52419: PPUSH
// uc_side := 0 ;
52420: LD_ADDR_OWVAR 20
52424: PUSH
52425: LD_INT 0
52427: ST_TO_ADDR
// uc_nation := 0 ;
52428: LD_ADDR_OWVAR 21
52432: PUSH
52433: LD_INT 0
52435: ST_TO_ADDR
// InitHc ;
52436: CALL_OW 19
// hc_class := class_horse ;
52440: LD_ADDR_OWVAR 28
52444: PUSH
52445: LD_INT 21
52447: ST_TO_ADDR
// hc_gallery :=  ;
52448: LD_ADDR_OWVAR 33
52452: PUSH
52453: LD_STRING 
52455: ST_TO_ADDR
// hc_name :=  ;
52456: LD_ADDR_OWVAR 26
52460: PUSH
52461: LD_STRING 
52463: ST_TO_ADDR
// end ;
52464: LD_VAR 0 1
52468: RET
// export function PrepareMastodont ( ) ; begin
52469: LD_INT 0
52471: PPUSH
// uc_side := 0 ;
52472: LD_ADDR_OWVAR 20
52476: PUSH
52477: LD_INT 0
52479: ST_TO_ADDR
// uc_nation := 0 ;
52480: LD_ADDR_OWVAR 21
52484: PUSH
52485: LD_INT 0
52487: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52488: LD_ADDR_OWVAR 37
52492: PUSH
52493: LD_INT 31
52495: ST_TO_ADDR
// vc_control := control_rider ;
52496: LD_ADDR_OWVAR 38
52500: PUSH
52501: LD_INT 4
52503: ST_TO_ADDR
// end ;
52504: LD_VAR 0 1
52508: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52509: LD_INT 0
52511: PPUSH
52512: PPUSH
52513: PPUSH
// uc_side = 0 ;
52514: LD_ADDR_OWVAR 20
52518: PUSH
52519: LD_INT 0
52521: ST_TO_ADDR
// uc_nation = 0 ;
52522: LD_ADDR_OWVAR 21
52526: PUSH
52527: LD_INT 0
52529: ST_TO_ADDR
// InitHc_All ( ) ;
52530: CALL_OW 584
// InitVc ;
52534: CALL_OW 20
// if mastodonts then
52538: LD_VAR 0 6
52542: IFFALSE 52609
// for i = 1 to mastodonts do
52544: LD_ADDR_VAR 0 11
52548: PUSH
52549: DOUBLE
52550: LD_INT 1
52552: DEC
52553: ST_TO_ADDR
52554: LD_VAR 0 6
52558: PUSH
52559: FOR_TO
52560: IFFALSE 52607
// begin vc_chassis := 31 ;
52562: LD_ADDR_OWVAR 37
52566: PUSH
52567: LD_INT 31
52569: ST_TO_ADDR
// vc_control := control_rider ;
52570: LD_ADDR_OWVAR 38
52574: PUSH
52575: LD_INT 4
52577: ST_TO_ADDR
// animal := CreateVehicle ;
52578: LD_ADDR_VAR 0 12
52582: PUSH
52583: CALL_OW 45
52587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52588: LD_VAR 0 12
52592: PPUSH
52593: LD_VAR 0 8
52597: PPUSH
52598: LD_INT 0
52600: PPUSH
52601: CALL 54751 0 3
// end ;
52605: GO 52559
52607: POP
52608: POP
// if horses then
52609: LD_VAR 0 5
52613: IFFALSE 52680
// for i = 1 to horses do
52615: LD_ADDR_VAR 0 11
52619: PUSH
52620: DOUBLE
52621: LD_INT 1
52623: DEC
52624: ST_TO_ADDR
52625: LD_VAR 0 5
52629: PUSH
52630: FOR_TO
52631: IFFALSE 52678
// begin hc_class := 21 ;
52633: LD_ADDR_OWVAR 28
52637: PUSH
52638: LD_INT 21
52640: ST_TO_ADDR
// hc_gallery :=  ;
52641: LD_ADDR_OWVAR 33
52645: PUSH
52646: LD_STRING 
52648: ST_TO_ADDR
// animal := CreateHuman ;
52649: LD_ADDR_VAR 0 12
52653: PUSH
52654: CALL_OW 44
52658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52659: LD_VAR 0 12
52663: PPUSH
52664: LD_VAR 0 8
52668: PPUSH
52669: LD_INT 0
52671: PPUSH
52672: CALL 54751 0 3
// end ;
52676: GO 52630
52678: POP
52679: POP
// if birds then
52680: LD_VAR 0 1
52684: IFFALSE 52751
// for i = 1 to birds do
52686: LD_ADDR_VAR 0 11
52690: PUSH
52691: DOUBLE
52692: LD_INT 1
52694: DEC
52695: ST_TO_ADDR
52696: LD_VAR 0 1
52700: PUSH
52701: FOR_TO
52702: IFFALSE 52749
// begin hc_class := 18 ;
52704: LD_ADDR_OWVAR 28
52708: PUSH
52709: LD_INT 18
52711: ST_TO_ADDR
// hc_gallery =  ;
52712: LD_ADDR_OWVAR 33
52716: PUSH
52717: LD_STRING 
52719: ST_TO_ADDR
// animal := CreateHuman ;
52720: LD_ADDR_VAR 0 12
52724: PUSH
52725: CALL_OW 44
52729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52730: LD_VAR 0 12
52734: PPUSH
52735: LD_VAR 0 8
52739: PPUSH
52740: LD_INT 0
52742: PPUSH
52743: CALL 54751 0 3
// end ;
52747: GO 52701
52749: POP
52750: POP
// if tigers then
52751: LD_VAR 0 2
52755: IFFALSE 52839
// for i = 1 to tigers do
52757: LD_ADDR_VAR 0 11
52761: PUSH
52762: DOUBLE
52763: LD_INT 1
52765: DEC
52766: ST_TO_ADDR
52767: LD_VAR 0 2
52771: PUSH
52772: FOR_TO
52773: IFFALSE 52837
// begin hc_class = class_tiger ;
52775: LD_ADDR_OWVAR 28
52779: PUSH
52780: LD_INT 14
52782: ST_TO_ADDR
// hc_gallery =  ;
52783: LD_ADDR_OWVAR 33
52787: PUSH
52788: LD_STRING 
52790: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52791: LD_ADDR_OWVAR 35
52795: PUSH
52796: LD_INT 7
52798: NEG
52799: PPUSH
52800: LD_INT 7
52802: PPUSH
52803: CALL_OW 12
52807: ST_TO_ADDR
// animal := CreateHuman ;
52808: LD_ADDR_VAR 0 12
52812: PUSH
52813: CALL_OW 44
52817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52818: LD_VAR 0 12
52822: PPUSH
52823: LD_VAR 0 8
52827: PPUSH
52828: LD_INT 0
52830: PPUSH
52831: CALL 54751 0 3
// end ;
52835: GO 52772
52837: POP
52838: POP
// if apemans then
52839: LD_VAR 0 3
52843: IFFALSE 52966
// for i = 1 to apemans do
52845: LD_ADDR_VAR 0 11
52849: PUSH
52850: DOUBLE
52851: LD_INT 1
52853: DEC
52854: ST_TO_ADDR
52855: LD_VAR 0 3
52859: PUSH
52860: FOR_TO
52861: IFFALSE 52964
// begin hc_class = class_apeman ;
52863: LD_ADDR_OWVAR 28
52867: PUSH
52868: LD_INT 12
52870: ST_TO_ADDR
// hc_gallery =  ;
52871: LD_ADDR_OWVAR 33
52875: PUSH
52876: LD_STRING 
52878: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52879: LD_ADDR_OWVAR 35
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PPUSH
52888: LD_INT 2
52890: PPUSH
52891: CALL_OW 12
52895: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52896: LD_ADDR_OWVAR 31
52900: PUSH
52901: LD_INT 1
52903: PPUSH
52904: LD_INT 3
52906: PPUSH
52907: CALL_OW 12
52911: PUSH
52912: LD_INT 1
52914: PPUSH
52915: LD_INT 3
52917: PPUSH
52918: CALL_OW 12
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// animal := CreateHuman ;
52935: LD_ADDR_VAR 0 12
52939: PUSH
52940: CALL_OW 44
52944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52945: LD_VAR 0 12
52949: PPUSH
52950: LD_VAR 0 8
52954: PPUSH
52955: LD_INT 0
52957: PPUSH
52958: CALL 54751 0 3
// end ;
52962: GO 52860
52964: POP
52965: POP
// if enchidnas then
52966: LD_VAR 0 4
52970: IFFALSE 53037
// for i = 1 to enchidnas do
52972: LD_ADDR_VAR 0 11
52976: PUSH
52977: DOUBLE
52978: LD_INT 1
52980: DEC
52981: ST_TO_ADDR
52982: LD_VAR 0 4
52986: PUSH
52987: FOR_TO
52988: IFFALSE 53035
// begin hc_class = 13 ;
52990: LD_ADDR_OWVAR 28
52994: PUSH
52995: LD_INT 13
52997: ST_TO_ADDR
// hc_gallery =  ;
52998: LD_ADDR_OWVAR 33
53002: PUSH
53003: LD_STRING 
53005: ST_TO_ADDR
// animal := CreateHuman ;
53006: LD_ADDR_VAR 0 12
53010: PUSH
53011: CALL_OW 44
53015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53016: LD_VAR 0 12
53020: PPUSH
53021: LD_VAR 0 8
53025: PPUSH
53026: LD_INT 0
53028: PPUSH
53029: CALL 54751 0 3
// end ;
53033: GO 52987
53035: POP
53036: POP
// if fishes then
53037: LD_VAR 0 7
53041: IFFALSE 53108
// for i = 1 to fishes do
53043: LD_ADDR_VAR 0 11
53047: PUSH
53048: DOUBLE
53049: LD_INT 1
53051: DEC
53052: ST_TO_ADDR
53053: LD_VAR 0 7
53057: PUSH
53058: FOR_TO
53059: IFFALSE 53106
// begin hc_class = 20 ;
53061: LD_ADDR_OWVAR 28
53065: PUSH
53066: LD_INT 20
53068: ST_TO_ADDR
// hc_gallery =  ;
53069: LD_ADDR_OWVAR 33
53073: PUSH
53074: LD_STRING 
53076: ST_TO_ADDR
// animal := CreateHuman ;
53077: LD_ADDR_VAR 0 12
53081: PUSH
53082: CALL_OW 44
53086: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53087: LD_VAR 0 12
53091: PPUSH
53092: LD_VAR 0 9
53096: PPUSH
53097: LD_INT 0
53099: PPUSH
53100: CALL 54751 0 3
// end ;
53104: GO 53058
53106: POP
53107: POP
// end ;
53108: LD_VAR 0 10
53112: RET
// export function WantHeal ( sci , unit ) ; begin
53113: LD_INT 0
53115: PPUSH
// if GetTaskList ( sci ) > 0 then
53116: LD_VAR 0 1
53120: PPUSH
53121: CALL_OW 437
53125: PUSH
53126: LD_INT 0
53128: GREATER
53129: IFFALSE 53201
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53131: LD_VAR 0 1
53135: PPUSH
53136: CALL_OW 437
53140: PUSH
53141: LD_INT 1
53143: ARRAY
53144: PUSH
53145: LD_INT 1
53147: ARRAY
53148: PUSH
53149: LD_STRING l
53151: EQUAL
53152: IFFALSE 53179
53154: PUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 437
53164: PUSH
53165: LD_INT 1
53167: ARRAY
53168: PUSH
53169: LD_INT 4
53171: ARRAY
53172: PUSH
53173: LD_VAR 0 2
53177: EQUAL
53178: AND
53179: IFFALSE 53191
// result := true else
53181: LD_ADDR_VAR 0 3
53185: PUSH
53186: LD_INT 1
53188: ST_TO_ADDR
53189: GO 53199
// result := false ;
53191: LD_ADDR_VAR 0 3
53195: PUSH
53196: LD_INT 0
53198: ST_TO_ADDR
// end else
53199: GO 53209
// result := false ;
53201: LD_ADDR_VAR 0 3
53205: PUSH
53206: LD_INT 0
53208: ST_TO_ADDR
// end ;
53209: LD_VAR 0 3
53213: RET
// export function HealTarget ( sci ) ; begin
53214: LD_INT 0
53216: PPUSH
// if not sci then
53217: LD_VAR 0 1
53221: NOT
53222: IFFALSE 53226
// exit ;
53224: GO 53291
// result := 0 ;
53226: LD_ADDR_VAR 0 2
53230: PUSH
53231: LD_INT 0
53233: ST_TO_ADDR
// if GetTaskList ( sci ) then
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 437
53243: IFFALSE 53291
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53245: LD_VAR 0 1
53249: PPUSH
53250: CALL_OW 437
53254: PUSH
53255: LD_INT 1
53257: ARRAY
53258: PUSH
53259: LD_INT 1
53261: ARRAY
53262: PUSH
53263: LD_STRING l
53265: EQUAL
53266: IFFALSE 53291
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53268: LD_ADDR_VAR 0 2
53272: PUSH
53273: LD_VAR 0 1
53277: PPUSH
53278: CALL_OW 437
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: PUSH
53287: LD_INT 4
53289: ARRAY
53290: ST_TO_ADDR
// end ;
53291: LD_VAR 0 2
53295: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53296: LD_INT 0
53298: PPUSH
53299: PPUSH
53300: PPUSH
53301: PPUSH
// if not base_units then
53302: LD_VAR 0 1
53306: NOT
53307: IFFALSE 53311
// exit ;
53309: GO 53398
// result := false ;
53311: LD_ADDR_VAR 0 2
53315: PUSH
53316: LD_INT 0
53318: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53319: LD_ADDR_VAR 0 5
53323: PUSH
53324: LD_VAR 0 1
53328: PPUSH
53329: LD_INT 21
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PPUSH
53339: CALL_OW 72
53343: ST_TO_ADDR
// if not tmp then
53344: LD_VAR 0 5
53348: NOT
53349: IFFALSE 53353
// exit ;
53351: GO 53398
// for i in tmp do
53353: LD_ADDR_VAR 0 3
53357: PUSH
53358: LD_VAR 0 5
53362: PUSH
53363: FOR_IN
53364: IFFALSE 53396
// begin result := EnemyInRange ( i , 22 ) ;
53366: LD_ADDR_VAR 0 2
53370: PUSH
53371: LD_VAR 0 3
53375: PPUSH
53376: LD_INT 22
53378: PPUSH
53379: CALL 50813 0 2
53383: ST_TO_ADDR
// if result then
53384: LD_VAR 0 2
53388: IFFALSE 53394
// exit ;
53390: POP
53391: POP
53392: GO 53398
// end ;
53394: GO 53363
53396: POP
53397: POP
// end ;
53398: LD_VAR 0 2
53402: RET
// export function FilterByTag ( units , tag ) ; begin
53403: LD_INT 0
53405: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53406: LD_ADDR_VAR 0 3
53410: PUSH
53411: LD_VAR 0 1
53415: PPUSH
53416: LD_INT 120
53418: PUSH
53419: LD_VAR 0 2
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PPUSH
53428: CALL_OW 72
53432: ST_TO_ADDR
// end ;
53433: LD_VAR 0 3
53437: RET
// export function IsDriver ( un ) ; begin
53438: LD_INT 0
53440: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53441: LD_ADDR_VAR 0 2
53445: PUSH
53446: LD_VAR 0 1
53450: PUSH
53451: LD_INT 55
53453: PUSH
53454: EMPTY
53455: LIST
53456: PPUSH
53457: CALL_OW 69
53461: IN
53462: ST_TO_ADDR
// end ;
53463: LD_VAR 0 2
53467: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53468: LD_INT 0
53470: PPUSH
53471: PPUSH
// list := [ ] ;
53472: LD_ADDR_VAR 0 5
53476: PUSH
53477: EMPTY
53478: ST_TO_ADDR
// case d of 0 :
53479: LD_VAR 0 3
53483: PUSH
53484: LD_INT 0
53486: DOUBLE
53487: EQUAL
53488: IFTRUE 53492
53490: GO 53625
53492: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53493: LD_ADDR_VAR 0 5
53497: PUSH
53498: LD_VAR 0 1
53502: PUSH
53503: LD_INT 4
53505: MINUS
53506: PUSH
53507: LD_VAR 0 2
53511: PUSH
53512: LD_INT 4
53514: MINUS
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: PUSH
53524: LD_VAR 0 1
53528: PUSH
53529: LD_INT 3
53531: MINUS
53532: PUSH
53533: LD_VAR 0 2
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: PUSH
53546: LD_VAR 0 1
53550: PUSH
53551: LD_INT 4
53553: PLUS
53554: PUSH
53555: LD_VAR 0 2
53559: PUSH
53560: LD_INT 4
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: PUSH
53568: LD_VAR 0 1
53572: PUSH
53573: LD_INT 3
53575: PLUS
53576: PUSH
53577: LD_VAR 0 2
53581: PUSH
53582: LD_INT 3
53584: PLUS
53585: PUSH
53586: LD_INT 5
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: PUSH
53594: LD_VAR 0 1
53598: PUSH
53599: LD_VAR 0 2
53603: PUSH
53604: LD_INT 4
53606: PLUS
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// end ; 1 :
53623: GO 54323
53625: LD_INT 1
53627: DOUBLE
53628: EQUAL
53629: IFTRUE 53633
53631: GO 53766
53633: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53634: LD_ADDR_VAR 0 5
53638: PUSH
53639: LD_VAR 0 1
53643: PUSH
53644: LD_VAR 0 2
53648: PUSH
53649: LD_INT 4
53651: MINUS
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: LD_VAR 0 1
53665: PUSH
53666: LD_INT 3
53668: MINUS
53669: PUSH
53670: LD_VAR 0 2
53674: PUSH
53675: LD_INT 3
53677: MINUS
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: LD_VAR 0 1
53691: PUSH
53692: LD_INT 4
53694: MINUS
53695: PUSH
53696: LD_VAR 0 2
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: PUSH
53709: LD_VAR 0 1
53713: PUSH
53714: LD_VAR 0 2
53718: PUSH
53719: LD_INT 3
53721: PLUS
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: PUSH
53731: LD_VAR 0 1
53735: PUSH
53736: LD_INT 4
53738: PLUS
53739: PUSH
53740: LD_VAR 0 2
53744: PUSH
53745: LD_INT 4
53747: PLUS
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// end ; 2 :
53764: GO 54323
53766: LD_INT 2
53768: DOUBLE
53769: EQUAL
53770: IFTRUE 53774
53772: GO 53903
53774: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53775: LD_ADDR_VAR 0 5
53779: PUSH
53780: LD_VAR 0 1
53784: PUSH
53785: LD_VAR 0 2
53789: PUSH
53790: LD_INT 3
53792: MINUS
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: PUSH
53802: LD_VAR 0 1
53806: PUSH
53807: LD_INT 4
53809: PLUS
53810: PUSH
53811: LD_VAR 0 2
53815: PUSH
53816: LD_INT 4
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: PUSH
53824: LD_VAR 0 1
53828: PUSH
53829: LD_VAR 0 2
53833: PUSH
53834: LD_INT 4
53836: PLUS
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: PUSH
53846: LD_VAR 0 1
53850: PUSH
53851: LD_INT 3
53853: MINUS
53854: PUSH
53855: LD_VAR 0 2
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: PUSH
53868: LD_VAR 0 1
53872: PUSH
53873: LD_INT 4
53875: MINUS
53876: PUSH
53877: LD_VAR 0 2
53881: PUSH
53882: LD_INT 4
53884: MINUS
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: ST_TO_ADDR
// end ; 3 :
53901: GO 54323
53903: LD_INT 3
53905: DOUBLE
53906: EQUAL
53907: IFTRUE 53911
53909: GO 54044
53911: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53912: LD_ADDR_VAR 0 5
53916: PUSH
53917: LD_VAR 0 1
53921: PUSH
53922: LD_INT 3
53924: PLUS
53925: PUSH
53926: LD_VAR 0 2
53930: PUSH
53931: LD_INT 4
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: LD_VAR 0 1
53943: PUSH
53944: LD_INT 4
53946: PLUS
53947: PUSH
53948: LD_VAR 0 2
53952: PUSH
53953: LD_INT 4
53955: PLUS
53956: PUSH
53957: LD_INT 5
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: PUSH
53965: LD_VAR 0 1
53969: PUSH
53970: LD_INT 4
53972: MINUS
53973: PUSH
53974: LD_VAR 0 2
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: PUSH
53987: LD_VAR 0 1
53991: PUSH
53992: LD_VAR 0 2
53996: PUSH
53997: LD_INT 4
53999: MINUS
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: PUSH
54009: LD_VAR 0 1
54013: PUSH
54014: LD_INT 3
54016: MINUS
54017: PUSH
54018: LD_VAR 0 2
54022: PUSH
54023: LD_INT 3
54025: MINUS
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: ST_TO_ADDR
// end ; 4 :
54042: GO 54323
54044: LD_INT 4
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54052
54050: GO 54185
54052: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54053: LD_ADDR_VAR 0 5
54057: PUSH
54058: LD_VAR 0 1
54062: PUSH
54063: LD_VAR 0 2
54067: PUSH
54068: LD_INT 4
54070: PLUS
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: PUSH
54080: LD_VAR 0 1
54084: PUSH
54085: LD_INT 3
54087: PLUS
54088: PUSH
54089: LD_VAR 0 2
54093: PUSH
54094: LD_INT 3
54096: PLUS
54097: PUSH
54098: LD_INT 5
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: PUSH
54106: LD_VAR 0 1
54110: PUSH
54111: LD_INT 4
54113: PLUS
54114: PUSH
54115: LD_VAR 0 2
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: LD_VAR 0 1
54132: PUSH
54133: LD_VAR 0 2
54137: PUSH
54138: LD_INT 3
54140: MINUS
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 1
54154: PUSH
54155: LD_INT 4
54157: MINUS
54158: PUSH
54159: LD_VAR 0 2
54163: PUSH
54164: LD_INT 4
54166: MINUS
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// end ; 5 :
54183: GO 54323
54185: LD_INT 5
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54193
54191: GO 54322
54193: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54194: LD_ADDR_VAR 0 5
54198: PUSH
54199: LD_VAR 0 1
54203: PUSH
54204: LD_INT 4
54206: MINUS
54207: PUSH
54208: LD_VAR 0 2
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: PUSH
54221: LD_VAR 0 1
54225: PUSH
54226: LD_VAR 0 2
54230: PUSH
54231: LD_INT 4
54233: MINUS
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: LIST
54242: PUSH
54243: LD_VAR 0 1
54247: PUSH
54248: LD_INT 4
54250: PLUS
54251: PUSH
54252: LD_VAR 0 2
54256: PUSH
54257: LD_INT 4
54259: PLUS
54260: PUSH
54261: LD_INT 5
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: PUSH
54269: LD_VAR 0 1
54273: PUSH
54274: LD_INT 3
54276: PLUS
54277: PUSH
54278: LD_VAR 0 2
54282: PUSH
54283: LD_INT 4
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: PUSH
54291: LD_VAR 0 1
54295: PUSH
54296: LD_VAR 0 2
54300: PUSH
54301: LD_INT 3
54303: PLUS
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// end ; end ;
54320: GO 54323
54322: POP
// result := list ;
54323: LD_ADDR_VAR 0 4
54327: PUSH
54328: LD_VAR 0 5
54332: ST_TO_ADDR
// end ;
54333: LD_VAR 0 4
54337: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54338: LD_INT 0
54340: PPUSH
54341: PPUSH
54342: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54343: LD_VAR 0 1
54347: NOT
54348: IFTRUE 54376
54350: PUSH
54351: LD_VAR 0 2
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: IN
54374: NOT
54375: OR
54376: IFFALSE 54380
// exit ;
54378: GO 54463
// tmp := [ ] ;
54380: LD_ADDR_VAR 0 5
54384: PUSH
54385: EMPTY
54386: ST_TO_ADDR
// for i in units do
54387: LD_ADDR_VAR 0 4
54391: PUSH
54392: LD_VAR 0 1
54396: PUSH
54397: FOR_IN
54398: IFFALSE 54432
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54400: LD_ADDR_VAR 0 5
54404: PUSH
54405: LD_VAR 0 5
54409: PPUSH
54410: LD_VAR 0 4
54414: PPUSH
54415: LD_VAR 0 2
54419: PPUSH
54420: CALL_OW 259
54424: PPUSH
54425: CALL 55858 0 2
54429: ST_TO_ADDR
54430: GO 54397
54432: POP
54433: POP
// if not tmp then
54434: LD_VAR 0 5
54438: NOT
54439: IFFALSE 54443
// exit ;
54441: GO 54463
// result := SortListByListDesc ( units , tmp ) ;
54443: LD_ADDR_VAR 0 3
54447: PUSH
54448: LD_VAR 0 1
54452: PPUSH
54453: LD_VAR 0 5
54457: PPUSH
54458: CALL_OW 77
54462: ST_TO_ADDR
// end ;
54463: LD_VAR 0 3
54467: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54468: LD_INT 0
54470: PPUSH
54471: PPUSH
54472: PPUSH
// result := false ;
54473: LD_ADDR_VAR 0 3
54477: PUSH
54478: LD_INT 0
54480: ST_TO_ADDR
// if not building then
54481: LD_VAR 0 2
54485: NOT
54486: IFFALSE 54490
// exit ;
54488: GO 54634
// x := GetX ( building ) ;
54490: LD_ADDR_VAR 0 4
54494: PUSH
54495: LD_VAR 0 2
54499: PPUSH
54500: CALL_OW 250
54504: ST_TO_ADDR
// y := GetY ( building ) ;
54505: LD_ADDR_VAR 0 5
54509: PUSH
54510: LD_VAR 0 2
54514: PPUSH
54515: CALL_OW 251
54519: ST_TO_ADDR
// if not x or not y then
54520: LD_VAR 0 4
54524: NOT
54525: IFTRUE 54534
54527: PUSH
54528: LD_VAR 0 5
54532: NOT
54533: OR
54534: IFFALSE 54538
// exit ;
54536: GO 54634
// if GetTaskList ( unit ) then
54538: LD_VAR 0 1
54542: PPUSH
54543: CALL_OW 437
54547: IFFALSE 54634
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54549: LD_STRING e
54551: PUSH
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 437
54561: PUSH
54562: LD_INT 1
54564: ARRAY
54565: PUSH
54566: LD_INT 1
54568: ARRAY
54569: EQUAL
54570: IFFALSE 54597
54572: PUSH
54573: LD_VAR 0 4
54577: PUSH
54578: LD_VAR 0 1
54582: PPUSH
54583: CALL_OW 437
54587: PUSH
54588: LD_INT 1
54590: ARRAY
54591: PUSH
54592: LD_INT 2
54594: ARRAY
54595: EQUAL
54596: AND
54597: IFFALSE 54624
54599: PUSH
54600: LD_VAR 0 5
54604: PUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: CALL_OW 437
54614: PUSH
54615: LD_INT 1
54617: ARRAY
54618: PUSH
54619: LD_INT 3
54621: ARRAY
54622: EQUAL
54623: AND
54624: IFFALSE 54634
// result := true end ;
54626: LD_ADDR_VAR 0 3
54630: PUSH
54631: LD_INT 1
54633: ST_TO_ADDR
// end ;
54634: LD_VAR 0 3
54638: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54639: LD_INT 0
54641: PPUSH
// result := false ;
54642: LD_ADDR_VAR 0 4
54646: PUSH
54647: LD_INT 0
54649: ST_TO_ADDR
// if GetTaskList ( unit ) then
54650: LD_VAR 0 1
54654: PPUSH
54655: CALL_OW 437
54659: IFFALSE 54746
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54661: LD_STRING M
54663: PUSH
54664: LD_VAR 0 1
54668: PPUSH
54669: CALL_OW 437
54673: PUSH
54674: LD_INT 1
54676: ARRAY
54677: PUSH
54678: LD_INT 1
54680: ARRAY
54681: EQUAL
54682: IFFALSE 54709
54684: PUSH
54685: LD_VAR 0 2
54689: PUSH
54690: LD_VAR 0 1
54694: PPUSH
54695: CALL_OW 437
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PUSH
54704: LD_INT 2
54706: ARRAY
54707: EQUAL
54708: AND
54709: IFFALSE 54736
54711: PUSH
54712: LD_VAR 0 3
54716: PUSH
54717: LD_VAR 0 1
54721: PPUSH
54722: CALL_OW 437
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PUSH
54731: LD_INT 3
54733: ARRAY
54734: EQUAL
54735: AND
54736: IFFALSE 54746
// result := true ;
54738: LD_ADDR_VAR 0 4
54742: PUSH
54743: LD_INT 1
54745: ST_TO_ADDR
// end ; end ;
54746: LD_VAR 0 4
54750: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54751: LD_INT 0
54753: PPUSH
54754: PPUSH
54755: PPUSH
54756: PPUSH
// if not unit or not area then
54757: LD_VAR 0 1
54761: NOT
54762: IFTRUE 54771
54764: PUSH
54765: LD_VAR 0 2
54769: NOT
54770: OR
54771: IFFALSE 54775
// exit ;
54773: GO 54951
// tmp := AreaToList ( area , i ) ;
54775: LD_ADDR_VAR 0 6
54779: PUSH
54780: LD_VAR 0 2
54784: PPUSH
54785: LD_VAR 0 5
54789: PPUSH
54790: CALL_OW 517
54794: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54795: LD_ADDR_VAR 0 5
54799: PUSH
54800: DOUBLE
54801: LD_INT 1
54803: DEC
54804: ST_TO_ADDR
54805: LD_VAR 0 6
54809: PUSH
54810: LD_INT 1
54812: ARRAY
54813: PUSH
54814: FOR_TO
54815: IFFALSE 54949
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54817: LD_ADDR_VAR 0 7
54821: PUSH
54822: LD_VAR 0 6
54826: PUSH
54827: LD_INT 1
54829: ARRAY
54830: PUSH
54831: LD_VAR 0 5
54835: ARRAY
54836: PUSH
54837: LD_VAR 0 6
54841: PUSH
54842: LD_INT 2
54844: ARRAY
54845: PUSH
54846: LD_VAR 0 5
54850: ARRAY
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54856: LD_INT 92
54858: PUSH
54859: LD_VAR 0 7
54863: PUSH
54864: LD_INT 1
54866: ARRAY
54867: PUSH
54868: LD_VAR 0 7
54872: PUSH
54873: LD_INT 2
54875: ARRAY
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: PPUSH
54886: CALL_OW 69
54890: PUSH
54891: LD_INT 0
54893: EQUAL
54894: IFFALSE 54947
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54896: LD_VAR 0 1
54900: PPUSH
54901: LD_VAR 0 7
54905: PUSH
54906: LD_INT 1
54908: ARRAY
54909: PPUSH
54910: LD_VAR 0 7
54914: PUSH
54915: LD_INT 2
54917: ARRAY
54918: PPUSH
54919: LD_VAR 0 3
54923: PPUSH
54924: CALL_OW 48
// result := IsPlaced ( unit ) ;
54928: LD_ADDR_VAR 0 4
54932: PUSH
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 305
54942: ST_TO_ADDR
// exit ;
54943: POP
54944: POP
54945: GO 54951
// end ; end ;
54947: GO 54814
54949: POP
54950: POP
// end ;
54951: LD_VAR 0 4
54955: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54956: LD_INT 0
54958: PPUSH
54959: PPUSH
54960: PPUSH
// if not side or side > 8 then
54961: LD_VAR 0 1
54965: NOT
54966: IFTRUE 54978
54968: PUSH
54969: LD_VAR 0 1
54973: PUSH
54974: LD_INT 8
54976: GREATER
54977: OR
54978: IFFALSE 54982
// exit ;
54980: GO 55169
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54982: LD_ADDR_VAR 0 4
54986: PUSH
54987: LD_INT 22
54989: PUSH
54990: LD_VAR 0 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 21
55001: PUSH
55002: LD_INT 3
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PPUSH
55013: CALL_OW 69
55017: ST_TO_ADDR
// if not tmp then
55018: LD_VAR 0 4
55022: NOT
55023: IFFALSE 55027
// exit ;
55025: GO 55169
// enable_addtolog := true ;
55027: LD_ADDR_OWVAR 81
55031: PUSH
55032: LD_INT 1
55034: ST_TO_ADDR
// AddToLog ( [ ) ;
55035: LD_STRING [
55037: PPUSH
55038: CALL_OW 561
// for i in tmp do
55042: LD_ADDR_VAR 0 3
55046: PUSH
55047: LD_VAR 0 4
55051: PUSH
55052: FOR_IN
55053: IFFALSE 55160
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55055: LD_STRING [
55057: PUSH
55058: LD_VAR 0 3
55062: PPUSH
55063: CALL_OW 266
55067: STR
55068: PUSH
55069: LD_STRING , 
55071: STR
55072: PUSH
55073: LD_VAR 0 3
55077: PPUSH
55078: CALL_OW 250
55082: STR
55083: PUSH
55084: LD_STRING , 
55086: STR
55087: PUSH
55088: LD_VAR 0 3
55092: PPUSH
55093: CALL_OW 251
55097: STR
55098: PUSH
55099: LD_STRING , 
55101: STR
55102: PUSH
55103: LD_VAR 0 3
55107: PPUSH
55108: CALL_OW 254
55112: STR
55113: PUSH
55114: LD_STRING , 
55116: STR
55117: PUSH
55118: LD_VAR 0 3
55122: PPUSH
55123: LD_INT 1
55125: PPUSH
55126: CALL_OW 268
55130: STR
55131: PUSH
55132: LD_STRING , 
55134: STR
55135: PUSH
55136: LD_VAR 0 3
55140: PPUSH
55141: LD_INT 2
55143: PPUSH
55144: CALL_OW 268
55148: STR
55149: PUSH
55150: LD_STRING ],
55152: STR
55153: PPUSH
55154: CALL_OW 561
// end ;
55158: GO 55052
55160: POP
55161: POP
// AddToLog ( ]; ) ;
55162: LD_STRING ];
55164: PPUSH
55165: CALL_OW 561
// end ;
55169: LD_VAR 0 2
55173: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55174: LD_INT 0
55176: PPUSH
55177: PPUSH
55178: PPUSH
55179: PPUSH
55180: PPUSH
// if not area or not rate or not max then
55181: LD_VAR 0 1
55185: NOT
55186: IFTRUE 55195
55188: PUSH
55189: LD_VAR 0 2
55193: NOT
55194: OR
55195: IFTRUE 55204
55197: PUSH
55198: LD_VAR 0 4
55202: NOT
55203: OR
55204: IFFALSE 55208
// exit ;
55206: GO 55397
// while 1 do
55208: LD_INT 1
55210: IFFALSE 55397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55212: LD_ADDR_VAR 0 9
55216: PUSH
55217: LD_VAR 0 1
55221: PPUSH
55222: LD_INT 1
55224: PPUSH
55225: CALL_OW 287
55229: PUSH
55230: LD_INT 10
55232: MUL
55233: ST_TO_ADDR
// r := rate / 10 ;
55234: LD_ADDR_VAR 0 7
55238: PUSH
55239: LD_VAR 0 2
55243: PUSH
55244: LD_INT 10
55246: DIVREAL
55247: ST_TO_ADDR
// time := 1 1$00 ;
55248: LD_ADDR_VAR 0 8
55252: PUSH
55253: LD_INT 2100
55255: ST_TO_ADDR
// if amount < min then
55256: LD_VAR 0 9
55260: PUSH
55261: LD_VAR 0 3
55265: LESS
55266: IFFALSE 55284
// r := r * 2 else
55268: LD_ADDR_VAR 0 7
55272: PUSH
55273: LD_VAR 0 7
55277: PUSH
55278: LD_INT 2
55280: MUL
55281: ST_TO_ADDR
55282: GO 55310
// if amount > max then
55284: LD_VAR 0 9
55288: PUSH
55289: LD_VAR 0 4
55293: GREATER
55294: IFFALSE 55310
// r := r / 2 ;
55296: LD_ADDR_VAR 0 7
55300: PUSH
55301: LD_VAR 0 7
55305: PUSH
55306: LD_INT 2
55308: DIVREAL
55309: ST_TO_ADDR
// time := time / r ;
55310: LD_ADDR_VAR 0 8
55314: PUSH
55315: LD_VAR 0 8
55319: PUSH
55320: LD_VAR 0 7
55324: DIVREAL
55325: ST_TO_ADDR
// if time < 0 then
55326: LD_VAR 0 8
55330: PUSH
55331: LD_INT 0
55333: LESS
55334: IFFALSE 55351
// time := time * - 1 ;
55336: LD_ADDR_VAR 0 8
55340: PUSH
55341: LD_VAR 0 8
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: MUL
55350: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55351: LD_VAR 0 8
55355: PUSH
55356: LD_INT 35
55358: PPUSH
55359: LD_INT 875
55361: PPUSH
55362: CALL_OW 12
55366: PLUS
55367: PPUSH
55368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55372: LD_INT 1
55374: PPUSH
55375: LD_INT 5
55377: PPUSH
55378: CALL_OW 12
55382: PPUSH
55383: LD_VAR 0 1
55387: PPUSH
55388: LD_INT 1
55390: PPUSH
55391: CALL_OW 55
// end ;
55395: GO 55208
// end ;
55397: LD_VAR 0 5
55401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55402: LD_INT 0
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
// if not turrets or not factories then
55412: LD_VAR 0 1
55416: NOT
55417: IFTRUE 55426
55419: PUSH
55420: LD_VAR 0 2
55424: NOT
55425: OR
55426: IFFALSE 55430
// exit ;
55428: GO 55737
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55430: LD_ADDR_VAR 0 10
55434: PUSH
55435: LD_INT 5
55437: PUSH
55438: LD_INT 6
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 4
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: LD_INT 5
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 24
55472: PUSH
55473: LD_INT 25
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 23
55482: PUSH
55483: LD_INT 27
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 42
55496: PUSH
55497: LD_INT 43
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 44
55506: PUSH
55507: LD_INT 46
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 45
55516: PUSH
55517: LD_INT 47
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// result := [ ] ;
55534: LD_ADDR_VAR 0 3
55538: PUSH
55539: EMPTY
55540: ST_TO_ADDR
// for i in turrets do
55541: LD_ADDR_VAR 0 4
55545: PUSH
55546: LD_VAR 0 1
55550: PUSH
55551: FOR_IN
55552: IFFALSE 55735
// begin nat := GetNation ( i ) ;
55554: LD_ADDR_VAR 0 7
55558: PUSH
55559: LD_VAR 0 4
55563: PPUSH
55564: CALL_OW 248
55568: ST_TO_ADDR
// weapon := 0 ;
55569: LD_ADDR_VAR 0 8
55573: PUSH
55574: LD_INT 0
55576: ST_TO_ADDR
// if not nat then
55577: LD_VAR 0 7
55581: NOT
55582: IFFALSE 55586
// continue ;
55584: GO 55551
// for j in list [ nat ] do
55586: LD_ADDR_VAR 0 5
55590: PUSH
55591: LD_VAR 0 10
55595: PUSH
55596: LD_VAR 0 7
55600: ARRAY
55601: PUSH
55602: FOR_IN
55603: IFFALSE 55644
// if GetBWeapon ( i ) = j [ 1 ] then
55605: LD_VAR 0 4
55609: PPUSH
55610: CALL_OW 269
55614: PUSH
55615: LD_VAR 0 5
55619: PUSH
55620: LD_INT 1
55622: ARRAY
55623: EQUAL
55624: IFFALSE 55642
// begin weapon := j [ 2 ] ;
55626: LD_ADDR_VAR 0 8
55630: PUSH
55631: LD_VAR 0 5
55635: PUSH
55636: LD_INT 2
55638: ARRAY
55639: ST_TO_ADDR
// break ;
55640: GO 55644
// end ;
55642: GO 55602
55644: POP
55645: POP
// if not weapon then
55646: LD_VAR 0 8
55650: NOT
55651: IFFALSE 55655
// continue ;
55653: GO 55551
// for k in factories do
55655: LD_ADDR_VAR 0 6
55659: PUSH
55660: LD_VAR 0 2
55664: PUSH
55665: FOR_IN
55666: IFFALSE 55731
// begin weapons := AvailableWeaponList ( k ) ;
55668: LD_ADDR_VAR 0 9
55672: PUSH
55673: LD_VAR 0 6
55677: PPUSH
55678: CALL_OW 478
55682: ST_TO_ADDR
// if not weapons then
55683: LD_VAR 0 9
55687: NOT
55688: IFFALSE 55692
// continue ;
55690: GO 55665
// if weapon in weapons then
55692: LD_VAR 0 8
55696: PUSH
55697: LD_VAR 0 9
55701: IN
55702: IFFALSE 55729
// begin result := [ i , weapon ] ;
55704: LD_ADDR_VAR 0 3
55708: PUSH
55709: LD_VAR 0 4
55713: PUSH
55714: LD_VAR 0 8
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// exit ;
55723: POP
55724: POP
55725: POP
55726: POP
55727: GO 55737
// end ; end ;
55729: GO 55665
55731: POP
55732: POP
// end ;
55733: GO 55551
55735: POP
55736: POP
// end ;
55737: LD_VAR 0 3
55741: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55742: LD_INT 0
55744: PPUSH
// if not side or side > 8 then
55745: LD_VAR 0 3
55749: NOT
55750: IFTRUE 55762
55752: PUSH
55753: LD_VAR 0 3
55757: PUSH
55758: LD_INT 8
55760: GREATER
55761: OR
55762: IFFALSE 55766
// exit ;
55764: GO 55825
// if not range then
55766: LD_VAR 0 4
55770: NOT
55771: IFFALSE 55782
// range := - 12 ;
55773: LD_ADDR_VAR 0 4
55777: PUSH
55778: LD_INT 12
55780: NEG
55781: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55782: LD_VAR 0 1
55786: PPUSH
55787: LD_VAR 0 2
55791: PPUSH
55792: LD_VAR 0 3
55796: PPUSH
55797: LD_VAR 0 4
55801: PPUSH
55802: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55806: LD_VAR 0 1
55810: PPUSH
55811: LD_VAR 0 2
55815: PPUSH
55816: LD_VAR 0 3
55820: PPUSH
55821: CALL_OW 331
// end ;
55825: LD_VAR 0 5
55829: RET
// export function Video ( mode ) ; begin
55830: LD_INT 0
55832: PPUSH
// ingame_video = mode ;
55833: LD_ADDR_OWVAR 52
55837: PUSH
55838: LD_VAR 0 1
55842: ST_TO_ADDR
// interface_hidden = mode ;
55843: LD_ADDR_OWVAR 54
55847: PUSH
55848: LD_VAR 0 1
55852: ST_TO_ADDR
// end ;
55853: LD_VAR 0 2
55857: RET
// export function Join ( array , element ) ; begin
55858: LD_INT 0
55860: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55861: LD_ADDR_VAR 0 3
55865: PUSH
55866: LD_VAR 0 1
55870: PPUSH
55871: LD_VAR 0 1
55875: PUSH
55876: LD_INT 1
55878: PLUS
55879: PPUSH
55880: LD_VAR 0 2
55884: PPUSH
55885: CALL_OW 1
55889: ST_TO_ADDR
// end ;
55890: LD_VAR 0 3
55894: RET
// export function JoinUnion ( array , element ) ; begin
55895: LD_INT 0
55897: PPUSH
// result := array union element ;
55898: LD_ADDR_VAR 0 3
55902: PUSH
55903: LD_VAR 0 1
55907: PUSH
55908: LD_VAR 0 2
55912: UNION
55913: ST_TO_ADDR
// end ;
55914: LD_VAR 0 3
55918: RET
// export function GetBehemoths ( side ) ; begin
55919: LD_INT 0
55921: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55922: LD_ADDR_VAR 0 2
55926: PUSH
55927: LD_INT 22
55929: PUSH
55930: LD_VAR 0 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 31
55941: PUSH
55942: LD_INT 25
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PPUSH
55953: CALL_OW 69
55957: ST_TO_ADDR
// end ;
55958: LD_VAR 0 2
55962: RET
// export function Shuffle ( array ) ; var i , index ; begin
55963: LD_INT 0
55965: PPUSH
55966: PPUSH
55967: PPUSH
// result := [ ] ;
55968: LD_ADDR_VAR 0 2
55972: PUSH
55973: EMPTY
55974: ST_TO_ADDR
// if not array then
55975: LD_VAR 0 1
55979: NOT
55980: IFFALSE 55984
// exit ;
55982: GO 56083
// Randomize ;
55984: CALL_OW 10
// for i = array downto 1 do
55988: LD_ADDR_VAR 0 3
55992: PUSH
55993: DOUBLE
55994: LD_VAR 0 1
55998: INC
55999: ST_TO_ADDR
56000: LD_INT 1
56002: PUSH
56003: FOR_DOWNTO
56004: IFFALSE 56081
// begin index := rand ( 1 , array ) ;
56006: LD_ADDR_VAR 0 4
56010: PUSH
56011: LD_INT 1
56013: PPUSH
56014: LD_VAR 0 1
56018: PPUSH
56019: CALL_OW 12
56023: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56024: LD_ADDR_VAR 0 2
56028: PUSH
56029: LD_VAR 0 2
56033: PPUSH
56034: LD_VAR 0 2
56038: PUSH
56039: LD_INT 1
56041: PLUS
56042: PPUSH
56043: LD_VAR 0 1
56047: PUSH
56048: LD_VAR 0 4
56052: ARRAY
56053: PPUSH
56054: CALL_OW 2
56058: ST_TO_ADDR
// array := Delete ( array , index ) ;
56059: LD_ADDR_VAR 0 1
56063: PUSH
56064: LD_VAR 0 1
56068: PPUSH
56069: LD_VAR 0 4
56073: PPUSH
56074: CALL_OW 3
56078: ST_TO_ADDR
// end ;
56079: GO 56003
56081: POP
56082: POP
// end ;
56083: LD_VAR 0 2
56087: RET
// export function GetBaseMaterials ( base ) ; begin
56088: LD_INT 0
56090: PPUSH
// result := [ 0 , 0 , 0 ] ;
56091: LD_ADDR_VAR 0 2
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// if not base then
56110: LD_VAR 0 1
56114: NOT
56115: IFFALSE 56119
// exit ;
56117: GO 56168
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56119: LD_ADDR_VAR 0 2
56123: PUSH
56124: LD_VAR 0 1
56128: PPUSH
56129: LD_INT 1
56131: PPUSH
56132: CALL_OW 275
56136: PUSH
56137: LD_VAR 0 1
56141: PPUSH
56142: LD_INT 2
56144: PPUSH
56145: CALL_OW 275
56149: PUSH
56150: LD_VAR 0 1
56154: PPUSH
56155: LD_INT 3
56157: PPUSH
56158: CALL_OW 275
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// end ;
56168: LD_VAR 0 2
56172: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56173: LD_INT 0
56175: PPUSH
56176: PPUSH
// result := array ;
56177: LD_ADDR_VAR 0 3
56181: PUSH
56182: LD_VAR 0 1
56186: ST_TO_ADDR
// if size >= result then
56187: LD_VAR 0 2
56191: PUSH
56192: LD_VAR 0 3
56196: GREATEREQUAL
56197: IFFALSE 56201
// exit ;
56199: GO 56251
// if size then
56201: LD_VAR 0 2
56205: IFFALSE 56251
// for i := array downto size do
56207: LD_ADDR_VAR 0 4
56211: PUSH
56212: DOUBLE
56213: LD_VAR 0 1
56217: INC
56218: ST_TO_ADDR
56219: LD_VAR 0 2
56223: PUSH
56224: FOR_DOWNTO
56225: IFFALSE 56249
// result := Delete ( result , result ) ;
56227: LD_ADDR_VAR 0 3
56231: PUSH
56232: LD_VAR 0 3
56236: PPUSH
56237: LD_VAR 0 3
56241: PPUSH
56242: CALL_OW 3
56246: ST_TO_ADDR
56247: GO 56224
56249: POP
56250: POP
// end ;
56251: LD_VAR 0 3
56255: RET
// export function ComExit ( unit ) ; var tmp ; begin
56256: LD_INT 0
56258: PPUSH
56259: PPUSH
// if not IsInUnit ( unit ) then
56260: LD_VAR 0 1
56264: PPUSH
56265: CALL_OW 310
56269: NOT
56270: IFFALSE 56274
// exit ;
56272: GO 56334
// tmp := IsInUnit ( unit ) ;
56274: LD_ADDR_VAR 0 3
56278: PUSH
56279: LD_VAR 0 1
56283: PPUSH
56284: CALL_OW 310
56288: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56289: LD_VAR 0 3
56293: PPUSH
56294: CALL_OW 247
56298: PUSH
56299: LD_INT 2
56301: EQUAL
56302: IFFALSE 56315
// ComExitVehicle ( unit ) else
56304: LD_VAR 0 1
56308: PPUSH
56309: CALL_OW 121
56313: GO 56324
// ComExitBuilding ( unit ) ;
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 122
// result := tmp ;
56324: LD_ADDR_VAR 0 2
56328: PUSH
56329: LD_VAR 0 3
56333: ST_TO_ADDR
// end ;
56334: LD_VAR 0 2
56338: RET
// export function ComExitAll ( units ) ; var i ; begin
56339: LD_INT 0
56341: PPUSH
56342: PPUSH
// if not units then
56343: LD_VAR 0 1
56347: NOT
56348: IFFALSE 56352
// exit ;
56350: GO 56378
// for i in units do
56352: LD_ADDR_VAR 0 3
56356: PUSH
56357: LD_VAR 0 1
56361: PUSH
56362: FOR_IN
56363: IFFALSE 56376
// ComExit ( i ) ;
56365: LD_VAR 0 3
56369: PPUSH
56370: CALL 56256 0 1
56374: GO 56362
56376: POP
56377: POP
// end ;
56378: LD_VAR 0 2
56382: RET
// export function ResetHc ; begin
56383: LD_INT 0
56385: PPUSH
// InitHc ;
56386: CALL_OW 19
// hc_importance := 0 ;
56390: LD_ADDR_OWVAR 32
56394: PUSH
56395: LD_INT 0
56397: ST_TO_ADDR
// end ;
56398: LD_VAR 0 1
56402: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56403: LD_INT 0
56405: PPUSH
56406: PPUSH
56407: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56408: LD_ADDR_VAR 0 6
56412: PUSH
56413: LD_VAR 0 1
56417: PUSH
56418: LD_VAR 0 3
56422: PLUS
56423: PUSH
56424: LD_INT 2
56426: DIV
56427: ST_TO_ADDR
// if _x < 0 then
56428: LD_VAR 0 6
56432: PUSH
56433: LD_INT 0
56435: LESS
56436: IFFALSE 56453
// _x := _x * - 1 ;
56438: LD_ADDR_VAR 0 6
56442: PUSH
56443: LD_VAR 0 6
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: MUL
56452: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56453: LD_ADDR_VAR 0 7
56457: PUSH
56458: LD_VAR 0 2
56462: PUSH
56463: LD_VAR 0 4
56467: PLUS
56468: PUSH
56469: LD_INT 2
56471: DIV
56472: ST_TO_ADDR
// if _y < 0 then
56473: LD_VAR 0 7
56477: PUSH
56478: LD_INT 0
56480: LESS
56481: IFFALSE 56498
// _y := _y * - 1 ;
56483: LD_ADDR_VAR 0 7
56487: PUSH
56488: LD_VAR 0 7
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: MUL
56497: ST_TO_ADDR
// result := [ _x , _y ] ;
56498: LD_ADDR_VAR 0 5
56502: PUSH
56503: LD_VAR 0 6
56507: PUSH
56508: LD_VAR 0 7
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// end ;
56517: LD_VAR 0 5
56521: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56522: LD_INT 0
56524: PPUSH
56525: PPUSH
56526: PPUSH
56527: PPUSH
// task := GetTaskList ( unit ) ;
56528: LD_ADDR_VAR 0 7
56532: PUSH
56533: LD_VAR 0 1
56537: PPUSH
56538: CALL_OW 437
56542: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56543: LD_VAR 0 7
56547: NOT
56548: IFFALSE 56567
56550: PUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_VAR 0 2
56560: PPUSH
56561: CALL_OW 308
56565: NOT
56566: AND
56567: IFFALSE 56571
// exit ;
56569: GO 56689
// if IsInArea ( unit , area ) then
56571: LD_VAR 0 1
56575: PPUSH
56576: LD_VAR 0 2
56580: PPUSH
56581: CALL_OW 308
56585: IFFALSE 56603
// begin ComMoveToArea ( unit , goAway ) ;
56587: LD_VAR 0 1
56591: PPUSH
56592: LD_VAR 0 3
56596: PPUSH
56597: CALL_OW 113
// exit ;
56601: GO 56689
// end ; if task [ 1 ] [ 1 ] <> M then
56603: LD_VAR 0 7
56607: PUSH
56608: LD_INT 1
56610: ARRAY
56611: PUSH
56612: LD_INT 1
56614: ARRAY
56615: PUSH
56616: LD_STRING M
56618: NONEQUAL
56619: IFFALSE 56623
// exit ;
56621: GO 56689
// x := task [ 1 ] [ 2 ] ;
56623: LD_ADDR_VAR 0 5
56627: PUSH
56628: LD_VAR 0 7
56632: PUSH
56633: LD_INT 1
56635: ARRAY
56636: PUSH
56637: LD_INT 2
56639: ARRAY
56640: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56641: LD_ADDR_VAR 0 6
56645: PUSH
56646: LD_VAR 0 7
56650: PUSH
56651: LD_INT 1
56653: ARRAY
56654: PUSH
56655: LD_INT 3
56657: ARRAY
56658: ST_TO_ADDR
// if InArea ( x , y , area ) then
56659: LD_VAR 0 5
56663: PPUSH
56664: LD_VAR 0 6
56668: PPUSH
56669: LD_VAR 0 2
56673: PPUSH
56674: CALL_OW 309
56678: IFFALSE 56689
// ComStop ( unit ) ;
56680: LD_VAR 0 1
56684: PPUSH
56685: CALL_OW 141
// end ;
56689: LD_VAR 0 4
56693: RET
// export function Abs ( value ) ; begin
56694: LD_INT 0
56696: PPUSH
// result := value ;
56697: LD_ADDR_VAR 0 2
56701: PUSH
56702: LD_VAR 0 1
56706: ST_TO_ADDR
// if value < 0 then
56707: LD_VAR 0 1
56711: PUSH
56712: LD_INT 0
56714: LESS
56715: IFFALSE 56732
// result := value * - 1 ;
56717: LD_ADDR_VAR 0 2
56721: PUSH
56722: LD_VAR 0 1
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: MUL
56731: ST_TO_ADDR
// end ;
56732: LD_VAR 0 2
56736: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56737: LD_INT 0
56739: PPUSH
56740: PPUSH
56741: PPUSH
56742: PPUSH
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
// if not unit or not building then
56747: LD_VAR 0 1
56751: NOT
56752: IFTRUE 56761
56754: PUSH
56755: LD_VAR 0 2
56759: NOT
56760: OR
56761: IFFALSE 56765
// exit ;
56763: GO 56993
// x := GetX ( building ) ;
56765: LD_ADDR_VAR 0 4
56769: PUSH
56770: LD_VAR 0 2
56774: PPUSH
56775: CALL_OW 250
56779: ST_TO_ADDR
// y := GetY ( building ) ;
56780: LD_ADDR_VAR 0 6
56784: PUSH
56785: LD_VAR 0 2
56789: PPUSH
56790: CALL_OW 251
56794: ST_TO_ADDR
// d := GetDir ( building ) ;
56795: LD_ADDR_VAR 0 8
56799: PUSH
56800: LD_VAR 0 2
56804: PPUSH
56805: CALL_OW 254
56809: ST_TO_ADDR
// r := 4 ;
56810: LD_ADDR_VAR 0 9
56814: PUSH
56815: LD_INT 4
56817: ST_TO_ADDR
// for i := 1 to 5 do
56818: LD_ADDR_VAR 0 10
56822: PUSH
56823: DOUBLE
56824: LD_INT 1
56826: DEC
56827: ST_TO_ADDR
56828: LD_INT 5
56830: PUSH
56831: FOR_TO
56832: IFFALSE 56991
// begin _x := ShiftX ( x , d , r + i ) ;
56834: LD_ADDR_VAR 0 5
56838: PUSH
56839: LD_VAR 0 4
56843: PPUSH
56844: LD_VAR 0 8
56848: PPUSH
56849: LD_VAR 0 9
56853: PUSH
56854: LD_VAR 0 10
56858: PLUS
56859: PPUSH
56860: CALL_OW 272
56864: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56865: LD_ADDR_VAR 0 7
56869: PUSH
56870: LD_VAR 0 6
56874: PPUSH
56875: LD_VAR 0 8
56879: PPUSH
56880: LD_VAR 0 9
56884: PUSH
56885: LD_VAR 0 10
56889: PLUS
56890: PPUSH
56891: CALL_OW 273
56895: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56896: LD_VAR 0 5
56900: PPUSH
56901: LD_VAR 0 7
56905: PPUSH
56906: CALL_OW 488
56910: IFFALSE 56945
56912: PUSH
56913: LD_VAR 0 5
56917: PPUSH
56918: LD_VAR 0 7
56922: PPUSH
56923: CALL_OW 428
56927: PPUSH
56928: CALL_OW 247
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: IN
56943: NOT
56944: AND
56945: IFFALSE 56989
// begin ComMoveXY ( unit , _x , _y ) ;
56947: LD_VAR 0 1
56951: PPUSH
56952: LD_VAR 0 5
56956: PPUSH
56957: LD_VAR 0 7
56961: PPUSH
56962: CALL_OW 111
// result := [ _x , _y ] ;
56966: LD_ADDR_VAR 0 3
56970: PUSH
56971: LD_VAR 0 5
56975: PUSH
56976: LD_VAR 0 7
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// exit ;
56985: POP
56986: POP
56987: GO 56993
// end ; end ;
56989: GO 56831
56991: POP
56992: POP
// end ;
56993: LD_VAR 0 3
56997: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56998: LD_INT 0
57000: PPUSH
57001: PPUSH
57002: PPUSH
// result := 0 ;
57003: LD_ADDR_VAR 0 3
57007: PUSH
57008: LD_INT 0
57010: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57011: LD_VAR 0 1
57015: PUSH
57016: LD_INT 0
57018: LESS
57019: IFTRUE 57031
57021: PUSH
57022: LD_VAR 0 1
57026: PUSH
57027: LD_INT 8
57029: GREATER
57030: OR
57031: IFTRUE 57043
57033: PUSH
57034: LD_VAR 0 2
57038: PUSH
57039: LD_INT 0
57041: LESS
57042: OR
57043: IFTRUE 57055
57045: PUSH
57046: LD_VAR 0 2
57050: PUSH
57051: LD_INT 8
57053: GREATER
57054: OR
57055: IFFALSE 57059
// exit ;
57057: GO 57134
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57059: LD_ADDR_VAR 0 4
57063: PUSH
57064: LD_INT 22
57066: PUSH
57067: LD_VAR 0 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PPUSH
57076: CALL_OW 69
57080: PUSH
57081: FOR_IN
57082: IFFALSE 57132
// begin un := UnitShoot ( i ) ;
57084: LD_ADDR_VAR 0 5
57088: PUSH
57089: LD_VAR 0 4
57093: PPUSH
57094: CALL_OW 504
57098: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57099: LD_VAR 0 5
57103: PPUSH
57104: CALL_OW 255
57108: PUSH
57109: LD_VAR 0 1
57113: EQUAL
57114: IFFALSE 57130
// begin result := un ;
57116: LD_ADDR_VAR 0 3
57120: PUSH
57121: LD_VAR 0 5
57125: ST_TO_ADDR
// exit ;
57126: POP
57127: POP
57128: GO 57134
// end ; end ;
57130: GO 57081
57132: POP
57133: POP
// end ;
57134: LD_VAR 0 3
57138: RET
// export function GetCargoBay ( units ) ; begin
57139: LD_INT 0
57141: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57142: LD_ADDR_VAR 0 2
57146: PUSH
57147: LD_VAR 0 1
57151: PPUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 34
57157: PUSH
57158: LD_INT 12
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 34
57167: PUSH
57168: LD_INT 51
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 34
57177: PUSH
57178: LD_INT 32
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 34
57187: PUSH
57188: LD_INT 89
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: PPUSH
57202: CALL_OW 72
57206: ST_TO_ADDR
// end ;
57207: LD_VAR 0 2
57211: RET
// export function Negate ( value ) ; begin
57212: LD_INT 0
57214: PPUSH
// result := not value ;
57215: LD_ADDR_VAR 0 2
57219: PUSH
57220: LD_VAR 0 1
57224: NOT
57225: ST_TO_ADDR
// end ;
57226: LD_VAR 0 2
57230: RET
// export function Inc ( value ) ; begin
57231: LD_INT 0
57233: PPUSH
// result := value + 1 ;
57234: LD_ADDR_VAR 0 2
57238: PUSH
57239: LD_VAR 0 1
57243: PUSH
57244: LD_INT 1
57246: PLUS
57247: ST_TO_ADDR
// end ;
57248: LD_VAR 0 2
57252: RET
// export function Dec ( value ) ; begin
57253: LD_INT 0
57255: PPUSH
// result := value - 1 ;
57256: LD_ADDR_VAR 0 2
57260: PUSH
57261: LD_VAR 0 1
57265: PUSH
57266: LD_INT 1
57268: MINUS
57269: ST_TO_ADDR
// end ;
57270: LD_VAR 0 2
57274: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57275: LD_INT 0
57277: PPUSH
57278: PPUSH
57279: PPUSH
57280: PPUSH
57281: PPUSH
57282: PPUSH
57283: PPUSH
57284: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57285: LD_VAR 0 1
57289: PPUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: CALL_OW 488
57299: NOT
57300: IFTRUE 57319
57302: PUSH
57303: LD_VAR 0 3
57307: PPUSH
57308: LD_VAR 0 4
57312: PPUSH
57313: CALL_OW 488
57317: NOT
57318: OR
57319: IFFALSE 57332
// begin result := - 1 ;
57321: LD_ADDR_VAR 0 5
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: ST_TO_ADDR
// exit ;
57330: GO 57567
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57332: LD_ADDR_VAR 0 12
57336: PUSH
57337: LD_VAR 0 1
57341: PPUSH
57342: LD_VAR 0 2
57346: PPUSH
57347: LD_VAR 0 3
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: CALL 56403 0 4
57361: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57362: LD_ADDR_VAR 0 11
57366: PUSH
57367: LD_VAR 0 1
57371: PPUSH
57372: LD_VAR 0 2
57376: PPUSH
57377: LD_VAR 0 12
57381: PUSH
57382: LD_INT 1
57384: ARRAY
57385: PPUSH
57386: LD_VAR 0 12
57390: PUSH
57391: LD_INT 2
57393: ARRAY
57394: PPUSH
57395: CALL_OW 298
57399: ST_TO_ADDR
// distance := 9999 ;
57400: LD_ADDR_VAR 0 10
57404: PUSH
57405: LD_INT 9999
57407: ST_TO_ADDR
// for i := 0 to 5 do
57408: LD_ADDR_VAR 0 6
57412: PUSH
57413: DOUBLE
57414: LD_INT 0
57416: DEC
57417: ST_TO_ADDR
57418: LD_INT 5
57420: PUSH
57421: FOR_TO
57422: IFFALSE 57565
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57424: LD_ADDR_VAR 0 7
57428: PUSH
57429: LD_VAR 0 1
57433: PPUSH
57434: LD_VAR 0 6
57438: PPUSH
57439: LD_VAR 0 11
57443: PPUSH
57444: CALL_OW 272
57448: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57449: LD_ADDR_VAR 0 8
57453: PUSH
57454: LD_VAR 0 2
57458: PPUSH
57459: LD_VAR 0 6
57463: PPUSH
57464: LD_VAR 0 11
57468: PPUSH
57469: CALL_OW 273
57473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57474: LD_VAR 0 7
57478: PPUSH
57479: LD_VAR 0 8
57483: PPUSH
57484: CALL_OW 488
57488: NOT
57489: IFFALSE 57493
// continue ;
57491: GO 57421
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57493: LD_ADDR_VAR 0 9
57497: PUSH
57498: LD_VAR 0 12
57502: PUSH
57503: LD_INT 1
57505: ARRAY
57506: PPUSH
57507: LD_VAR 0 12
57511: PUSH
57512: LD_INT 2
57514: ARRAY
57515: PPUSH
57516: LD_VAR 0 7
57520: PPUSH
57521: LD_VAR 0 8
57525: PPUSH
57526: CALL_OW 298
57530: ST_TO_ADDR
// if tmp < distance then
57531: LD_VAR 0 9
57535: PUSH
57536: LD_VAR 0 10
57540: LESS
57541: IFFALSE 57563
// begin result := i ;
57543: LD_ADDR_VAR 0 5
57547: PUSH
57548: LD_VAR 0 6
57552: ST_TO_ADDR
// distance := tmp ;
57553: LD_ADDR_VAR 0 10
57557: PUSH
57558: LD_VAR 0 9
57562: ST_TO_ADDR
// end ; end ;
57563: GO 57421
57565: POP
57566: POP
// end ;
57567: LD_VAR 0 5
57571: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57572: LD_INT 0
57574: PPUSH
57575: PPUSH
// if not driver or not IsInUnit ( driver ) then
57576: LD_VAR 0 1
57580: NOT
57581: IFTRUE 57595
57583: PUSH
57584: LD_VAR 0 1
57588: PPUSH
57589: CALL_OW 310
57593: NOT
57594: OR
57595: IFFALSE 57599
// exit ;
57597: GO 57689
// vehicle := IsInUnit ( driver ) ;
57599: LD_ADDR_VAR 0 3
57603: PUSH
57604: LD_VAR 0 1
57608: PPUSH
57609: CALL_OW 310
57613: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57614: LD_VAR 0 1
57618: PPUSH
57619: LD_STRING \
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_STRING E
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_VAR 0 3
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PPUSH
57685: CALL_OW 446
// end ;
57689: LD_VAR 0 2
57693: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57694: LD_INT 0
57696: PPUSH
57697: PPUSH
// if not driver or not IsInUnit ( driver ) then
57698: LD_VAR 0 1
57702: NOT
57703: IFTRUE 57717
57705: PUSH
57706: LD_VAR 0 1
57710: PPUSH
57711: CALL_OW 310
57715: NOT
57716: OR
57717: IFFALSE 57721
// exit ;
57719: GO 57811
// vehicle := IsInUnit ( driver ) ;
57721: LD_ADDR_VAR 0 3
57725: PUSH
57726: LD_VAR 0 1
57730: PPUSH
57731: CALL_OW 310
57735: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57736: LD_VAR 0 1
57740: PPUSH
57741: LD_STRING \
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: PUSH
57771: LD_STRING E
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_VAR 0 3
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PPUSH
57807: CALL_OW 447
// end ;
57811: LD_VAR 0 2
57815: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57816: LD_INT 0
57818: PPUSH
57819: PPUSH
57820: PPUSH
// tmp := [ ] ;
57821: LD_ADDR_VAR 0 5
57825: PUSH
57826: EMPTY
57827: ST_TO_ADDR
// for i in units do
57828: LD_ADDR_VAR 0 4
57832: PUSH
57833: LD_VAR 0 1
57837: PUSH
57838: FOR_IN
57839: IFFALSE 57877
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57841: LD_ADDR_VAR 0 5
57845: PUSH
57846: LD_VAR 0 5
57850: PPUSH
57851: LD_VAR 0 5
57855: PUSH
57856: LD_INT 1
57858: PLUS
57859: PPUSH
57860: LD_VAR 0 4
57864: PPUSH
57865: CALL_OW 256
57869: PPUSH
57870: CALL_OW 2
57874: ST_TO_ADDR
57875: GO 57838
57877: POP
57878: POP
// if not tmp then
57879: LD_VAR 0 5
57883: NOT
57884: IFFALSE 57888
// exit ;
57886: GO 57936
// if asc then
57888: LD_VAR 0 2
57892: IFFALSE 57916
// result := SortListByListAsc ( units , tmp ) else
57894: LD_ADDR_VAR 0 3
57898: PUSH
57899: LD_VAR 0 1
57903: PPUSH
57904: LD_VAR 0 5
57908: PPUSH
57909: CALL_OW 76
57913: ST_TO_ADDR
57914: GO 57936
// result := SortListByListDesc ( units , tmp ) ;
57916: LD_ADDR_VAR 0 3
57920: PUSH
57921: LD_VAR 0 1
57925: PPUSH
57926: LD_VAR 0 5
57930: PPUSH
57931: CALL_OW 77
57935: ST_TO_ADDR
// end ;
57936: LD_VAR 0 3
57940: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57941: LD_INT 0
57943: PPUSH
57944: PPUSH
// task := GetTaskList ( mech ) ;
57945: LD_ADDR_VAR 0 4
57949: PUSH
57950: LD_VAR 0 1
57954: PPUSH
57955: CALL_OW 437
57959: ST_TO_ADDR
// if not task then
57960: LD_VAR 0 4
57964: NOT
57965: IFFALSE 57969
// exit ;
57967: GO 58013
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57969: LD_ADDR_VAR 0 3
57973: PUSH
57974: LD_VAR 0 4
57978: PUSH
57979: LD_INT 1
57981: ARRAY
57982: PUSH
57983: LD_INT 1
57985: ARRAY
57986: PUSH
57987: LD_STRING r
57989: EQUAL
57990: IFFALSE 58012
57992: PUSH
57993: LD_VAR 0 4
57997: PUSH
57998: LD_INT 1
58000: ARRAY
58001: PUSH
58002: LD_INT 4
58004: ARRAY
58005: PUSH
58006: LD_VAR 0 2
58010: EQUAL
58011: AND
58012: ST_TO_ADDR
// end ;
58013: LD_VAR 0 3
58017: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58018: LD_INT 0
58020: PPUSH
// SetDir ( unit , d ) ;
58021: LD_VAR 0 1
58025: PPUSH
58026: LD_VAR 0 4
58030: PPUSH
58031: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
58035: LD_ADDR_VAR 0 6
58039: PUSH
58040: LD_VAR 0 1
58044: PPUSH
58045: LD_VAR 0 2
58049: PPUSH
58050: LD_VAR 0 3
58054: PPUSH
58055: LD_VAR 0 5
58059: PPUSH
58060: CALL_OW 48
58064: ST_TO_ADDR
// end ;
58065: LD_VAR 0 6
58069: RET
// export function ToNaturalNumber ( number ) ; begin
58070: LD_INT 0
58072: PPUSH
// result := number div 1 ;
58073: LD_ADDR_VAR 0 2
58077: PUSH
58078: LD_VAR 0 1
58082: PUSH
58083: LD_INT 1
58085: DIV
58086: ST_TO_ADDR
// if number < 0 then
58087: LD_VAR 0 1
58091: PUSH
58092: LD_INT 0
58094: LESS
58095: IFFALSE 58105
// result := 0 ;
58097: LD_ADDR_VAR 0 2
58101: PUSH
58102: LD_INT 0
58104: ST_TO_ADDR
// end ;
58105: LD_VAR 0 2
58109: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
58110: LD_INT 0
58112: PPUSH
58113: PPUSH
58114: PPUSH
// if not buildings then
58115: LD_VAR 0 1
58119: NOT
58120: IFFALSE 58124
// exit ;
58122: GO 58239
// tmp := [ ] ;
58124: LD_ADDR_VAR 0 5
58128: PUSH
58129: EMPTY
58130: ST_TO_ADDR
// for b in buildings do
58131: LD_ADDR_VAR 0 4
58135: PUSH
58136: LD_VAR 0 1
58140: PUSH
58141: FOR_IN
58142: IFFALSE 58180
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
58144: LD_ADDR_VAR 0 5
58148: PUSH
58149: LD_VAR 0 5
58153: PPUSH
58154: LD_VAR 0 5
58158: PUSH
58159: LD_INT 1
58161: PLUS
58162: PPUSH
58163: LD_VAR 0 4
58167: PPUSH
58168: CALL_OW 266
58172: PPUSH
58173: CALL_OW 1
58177: ST_TO_ADDR
58178: GO 58141
58180: POP
58181: POP
// if not tmp then
58182: LD_VAR 0 5
58186: NOT
58187: IFFALSE 58191
// exit ;
58189: GO 58239
// if asc then
58191: LD_VAR 0 2
58195: IFFALSE 58219
// result := SortListByListAsc ( buildings , tmp ) else
58197: LD_ADDR_VAR 0 3
58201: PUSH
58202: LD_VAR 0 1
58206: PPUSH
58207: LD_VAR 0 5
58211: PPUSH
58212: CALL_OW 76
58216: ST_TO_ADDR
58217: GO 58239
// result := SortListByListDesc ( buildings , tmp ) ;
58219: LD_ADDR_VAR 0 3
58223: PUSH
58224: LD_VAR 0 1
58228: PPUSH
58229: LD_VAR 0 5
58233: PPUSH
58234: CALL_OW 77
58238: ST_TO_ADDR
// end ;
58239: LD_VAR 0 3
58243: RET
// export function SortByClass ( units , class ) ; var un ; begin
58244: LD_INT 0
58246: PPUSH
58247: PPUSH
// if not units or not class then
58248: LD_VAR 0 1
58252: NOT
58253: IFTRUE 58262
58255: PUSH
58256: LD_VAR 0 2
58260: NOT
58261: OR
58262: IFFALSE 58266
// exit ;
58264: GO 58361
// result := [ ] ;
58266: LD_ADDR_VAR 0 3
58270: PUSH
58271: EMPTY
58272: ST_TO_ADDR
// for un in units do
58273: LD_ADDR_VAR 0 4
58277: PUSH
58278: LD_VAR 0 1
58282: PUSH
58283: FOR_IN
58284: IFFALSE 58359
// if GetClass ( un ) = class then
58286: LD_VAR 0 4
58290: PPUSH
58291: CALL_OW 257
58295: PUSH
58296: LD_VAR 0 2
58300: EQUAL
58301: IFFALSE 58328
// result := Insert ( result , 1 , un ) else
58303: LD_ADDR_VAR 0 3
58307: PUSH
58308: LD_VAR 0 3
58312: PPUSH
58313: LD_INT 1
58315: PPUSH
58316: LD_VAR 0 4
58320: PPUSH
58321: CALL_OW 2
58325: ST_TO_ADDR
58326: GO 58357
// result := Replace ( result , result + 1 , un ) ;
58328: LD_ADDR_VAR 0 3
58332: PUSH
58333: LD_VAR 0 3
58337: PPUSH
58338: LD_VAR 0 3
58342: PUSH
58343: LD_INT 1
58345: PLUS
58346: PPUSH
58347: LD_VAR 0 4
58351: PPUSH
58352: CALL_OW 1
58356: ST_TO_ADDR
58357: GO 58283
58359: POP
58360: POP
// end ;
58361: LD_VAR 0 3
58365: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58366: LD_INT 0
58368: PPUSH
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
58374: PPUSH
// result := [ ] ;
58375: LD_ADDR_VAR 0 4
58379: PUSH
58380: EMPTY
58381: ST_TO_ADDR
// if x - r < 0 then
58382: LD_VAR 0 1
58386: PUSH
58387: LD_VAR 0 3
58391: MINUS
58392: PUSH
58393: LD_INT 0
58395: LESS
58396: IFFALSE 58408
// min_x := 0 else
58398: LD_ADDR_VAR 0 8
58402: PUSH
58403: LD_INT 0
58405: ST_TO_ADDR
58406: GO 58424
// min_x := x - r ;
58408: LD_ADDR_VAR 0 8
58412: PUSH
58413: LD_VAR 0 1
58417: PUSH
58418: LD_VAR 0 3
58422: MINUS
58423: ST_TO_ADDR
// if y - r < 0 then
58424: LD_VAR 0 2
58428: PUSH
58429: LD_VAR 0 3
58433: MINUS
58434: PUSH
58435: LD_INT 0
58437: LESS
58438: IFFALSE 58450
// min_y := 0 else
58440: LD_ADDR_VAR 0 7
58444: PUSH
58445: LD_INT 0
58447: ST_TO_ADDR
58448: GO 58466
// min_y := y - r ;
58450: LD_ADDR_VAR 0 7
58454: PUSH
58455: LD_VAR 0 2
58459: PUSH
58460: LD_VAR 0 3
58464: MINUS
58465: ST_TO_ADDR
// max_x := x + r ;
58466: LD_ADDR_VAR 0 9
58470: PUSH
58471: LD_VAR 0 1
58475: PUSH
58476: LD_VAR 0 3
58480: PLUS
58481: ST_TO_ADDR
// max_y := y + r ;
58482: LD_ADDR_VAR 0 10
58486: PUSH
58487: LD_VAR 0 2
58491: PUSH
58492: LD_VAR 0 3
58496: PLUS
58497: ST_TO_ADDR
// for _x = min_x to max_x do
58498: LD_ADDR_VAR 0 5
58502: PUSH
58503: DOUBLE
58504: LD_VAR 0 8
58508: DEC
58509: ST_TO_ADDR
58510: LD_VAR 0 9
58514: PUSH
58515: FOR_TO
58516: IFFALSE 58617
// for _y = min_y to max_y do
58518: LD_ADDR_VAR 0 6
58522: PUSH
58523: DOUBLE
58524: LD_VAR 0 7
58528: DEC
58529: ST_TO_ADDR
58530: LD_VAR 0 10
58534: PUSH
58535: FOR_TO
58536: IFFALSE 58613
// begin if not ValidHex ( _x , _y ) then
58538: LD_VAR 0 5
58542: PPUSH
58543: LD_VAR 0 6
58547: PPUSH
58548: CALL_OW 488
58552: NOT
58553: IFFALSE 58557
// continue ;
58555: GO 58535
// if GetResourceTypeXY ( _x , _y ) then
58557: LD_VAR 0 5
58561: PPUSH
58562: LD_VAR 0 6
58566: PPUSH
58567: CALL_OW 283
58571: IFFALSE 58611
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58573: LD_ADDR_VAR 0 4
58577: PUSH
58578: LD_VAR 0 4
58582: PPUSH
58583: LD_VAR 0 4
58587: PUSH
58588: LD_INT 1
58590: PLUS
58591: PPUSH
58592: LD_VAR 0 5
58596: PUSH
58597: LD_VAR 0 6
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PPUSH
58606: CALL_OW 1
58610: ST_TO_ADDR
// end ;
58611: GO 58535
58613: POP
58614: POP
58615: GO 58515
58617: POP
58618: POP
// end ;
58619: LD_VAR 0 4
58623: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58624: LD_INT 0
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
58631: PPUSH
58632: PPUSH
58633: PPUSH
// if not units then
58634: LD_VAR 0 1
58638: NOT
58639: IFFALSE 58643
// exit ;
58641: GO 59175
// result := UnitFilter ( units , [ f_ok ] ) ;
58643: LD_ADDR_VAR 0 3
58647: PUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: LD_INT 50
58655: PUSH
58656: EMPTY
58657: LIST
58658: PPUSH
58659: CALL_OW 72
58663: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58664: LD_ADDR_VAR 0 8
58668: PUSH
58669: LD_VAR 0 1
58673: PUSH
58674: LD_INT 1
58676: ARRAY
58677: PPUSH
58678: CALL_OW 255
58682: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58683: LD_ADDR_VAR 0 10
58687: PUSH
58688: LD_INT 29
58690: PUSH
58691: LD_INT 91
58693: PUSH
58694: LD_INT 49
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: ST_TO_ADDR
// if not result then
58702: LD_VAR 0 3
58706: NOT
58707: IFFALSE 58711
// exit ;
58709: GO 59175
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58711: LD_ADDR_VAR 0 5
58715: PUSH
58716: LD_INT 81
58718: PUSH
58719: LD_VAR 0 8
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PPUSH
58728: CALL_OW 69
58732: ST_TO_ADDR
// for i in result do
58733: LD_ADDR_VAR 0 4
58737: PUSH
58738: LD_VAR 0 3
58742: PUSH
58743: FOR_IN
58744: IFFALSE 59173
// begin tag := GetTag ( i ) + 1 ;
58746: LD_ADDR_VAR 0 9
58750: PUSH
58751: LD_VAR 0 4
58755: PPUSH
58756: CALL_OW 110
58760: PUSH
58761: LD_INT 1
58763: PLUS
58764: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58765: LD_ADDR_VAR 0 7
58769: PUSH
58770: LD_VAR 0 4
58774: PPUSH
58775: CALL_OW 250
58779: PPUSH
58780: LD_VAR 0 4
58784: PPUSH
58785: CALL_OW 251
58789: PPUSH
58790: LD_INT 4
58792: PPUSH
58793: CALL 58366 0 3
58797: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58798: LD_VAR 0 4
58802: PPUSH
58803: CALL_OW 247
58807: PUSH
58808: LD_INT 2
58810: EQUAL
58811: IFFALSE 58823
58813: PUSH
58814: LD_VAR 0 7
58818: PUSH
58819: LD_INT 2
58821: GREATER
58822: AND
58823: IFFALSE 58843
58825: PUSH
58826: LD_VAR 0 4
58830: PPUSH
58831: CALL_OW 264
58835: PUSH
58836: LD_VAR 0 10
58840: IN
58841: NOT
58842: AND
58843: IFFALSE 58882
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58845: LD_VAR 0 4
58849: PPUSH
58850: LD_VAR 0 7
58854: PUSH
58855: LD_INT 1
58857: ARRAY
58858: PUSH
58859: LD_INT 1
58861: ARRAY
58862: PPUSH
58863: LD_VAR 0 7
58867: PUSH
58868: LD_INT 1
58870: ARRAY
58871: PUSH
58872: LD_INT 2
58874: ARRAY
58875: PPUSH
58876: CALL_OW 116
58880: GO 59171
// if path > tag then
58882: LD_VAR 0 2
58886: PUSH
58887: LD_VAR 0 9
58891: GREATER
58892: IFFALSE 59100
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58894: LD_ADDR_VAR 0 6
58898: PUSH
58899: LD_VAR 0 5
58903: PPUSH
58904: LD_INT 91
58906: PUSH
58907: LD_VAR 0 4
58911: PUSH
58912: LD_INT 8
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PPUSH
58920: CALL_OW 72
58924: ST_TO_ADDR
// if nearEnemy then
58925: LD_VAR 0 6
58929: IFFALSE 58998
// begin if GetWeapon ( i ) = ru_time_lapser then
58931: LD_VAR 0 4
58935: PPUSH
58936: CALL_OW 264
58940: PUSH
58941: LD_INT 49
58943: EQUAL
58944: IFFALSE 58972
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58946: LD_VAR 0 4
58950: PPUSH
58951: LD_VAR 0 6
58955: PPUSH
58956: LD_VAR 0 4
58960: PPUSH
58961: CALL_OW 74
58965: PPUSH
58966: CALL_OW 112
58970: GO 58996
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58972: LD_VAR 0 4
58976: PPUSH
58977: LD_VAR 0 6
58981: PPUSH
58982: LD_VAR 0 4
58986: PPUSH
58987: CALL_OW 74
58991: PPUSH
58992: CALL 60256 0 2
// end else
58996: GO 59098
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58998: LD_VAR 0 4
59002: PPUSH
59003: LD_VAR 0 2
59007: PUSH
59008: LD_VAR 0 9
59012: ARRAY
59013: PUSH
59014: LD_INT 1
59016: ARRAY
59017: PPUSH
59018: LD_VAR 0 2
59022: PUSH
59023: LD_VAR 0 9
59027: ARRAY
59028: PUSH
59029: LD_INT 2
59031: ARRAY
59032: PPUSH
59033: CALL_OW 297
59037: PUSH
59038: LD_INT 6
59040: GREATER
59041: IFFALSE 59084
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59043: LD_VAR 0 4
59047: PPUSH
59048: LD_VAR 0 2
59052: PUSH
59053: LD_VAR 0 9
59057: ARRAY
59058: PUSH
59059: LD_INT 1
59061: ARRAY
59062: PPUSH
59063: LD_VAR 0 2
59067: PUSH
59068: LD_VAR 0 9
59072: ARRAY
59073: PUSH
59074: LD_INT 2
59076: ARRAY
59077: PPUSH
59078: CALL_OW 114
59082: GO 59098
// SetTag ( i , tag ) ;
59084: LD_VAR 0 4
59088: PPUSH
59089: LD_VAR 0 9
59093: PPUSH
59094: CALL_OW 109
// end else
59098: GO 59171
// if enemy then
59100: LD_VAR 0 5
59104: IFFALSE 59171
// begin if GetWeapon ( i ) = ru_time_lapser then
59106: LD_VAR 0 4
59110: PPUSH
59111: CALL_OW 264
59115: PUSH
59116: LD_INT 49
59118: EQUAL
59119: IFFALSE 59147
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59121: LD_VAR 0 4
59125: PPUSH
59126: LD_VAR 0 5
59130: PPUSH
59131: LD_VAR 0 4
59135: PPUSH
59136: CALL_OW 74
59140: PPUSH
59141: CALL_OW 112
59145: GO 59171
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59147: LD_VAR 0 4
59151: PPUSH
59152: LD_VAR 0 5
59156: PPUSH
59157: LD_VAR 0 4
59161: PPUSH
59162: CALL_OW 74
59166: PPUSH
59167: CALL 60256 0 2
// end ; end ;
59171: GO 58743
59173: POP
59174: POP
// end ;
59175: LD_VAR 0 3
59179: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59180: LD_INT 0
59182: PPUSH
59183: PPUSH
59184: PPUSH
// if not unit or IsInUnit ( unit ) then
59185: LD_VAR 0 1
59189: NOT
59190: IFTRUE 59203
59192: PUSH
59193: LD_VAR 0 1
59197: PPUSH
59198: CALL_OW 310
59202: OR
59203: IFFALSE 59207
// exit ;
59205: GO 59298
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59207: LD_ADDR_VAR 0 4
59211: PUSH
59212: LD_VAR 0 1
59216: PPUSH
59217: CALL_OW 250
59221: PPUSH
59222: LD_VAR 0 2
59226: PPUSH
59227: LD_INT 1
59229: PPUSH
59230: CALL_OW 272
59234: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59235: LD_ADDR_VAR 0 5
59239: PUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: CALL_OW 251
59249: PPUSH
59250: LD_VAR 0 2
59254: PPUSH
59255: LD_INT 1
59257: PPUSH
59258: CALL_OW 273
59262: ST_TO_ADDR
// if ValidHex ( x , y ) then
59263: LD_VAR 0 4
59267: PPUSH
59268: LD_VAR 0 5
59272: PPUSH
59273: CALL_OW 488
59277: IFFALSE 59298
// ComTurnXY ( unit , x , y ) ;
59279: LD_VAR 0 1
59283: PPUSH
59284: LD_VAR 0 4
59288: PPUSH
59289: LD_VAR 0 5
59293: PPUSH
59294: CALL_OW 118
// end ;
59298: LD_VAR 0 3
59302: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59303: LD_INT 0
59305: PPUSH
59306: PPUSH
// result := false ;
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_INT 0
59314: ST_TO_ADDR
// if not units then
59315: LD_VAR 0 2
59319: NOT
59320: IFFALSE 59324
// exit ;
59322: GO 59369
// for i in units do
59324: LD_ADDR_VAR 0 4
59328: PUSH
59329: LD_VAR 0 2
59333: PUSH
59334: FOR_IN
59335: IFFALSE 59367
// if See ( side , i ) then
59337: LD_VAR 0 1
59341: PPUSH
59342: LD_VAR 0 4
59346: PPUSH
59347: CALL_OW 292
59351: IFFALSE 59365
// begin result := true ;
59353: LD_ADDR_VAR 0 3
59357: PUSH
59358: LD_INT 1
59360: ST_TO_ADDR
// exit ;
59361: POP
59362: POP
59363: GO 59369
// end ;
59365: GO 59334
59367: POP
59368: POP
// end ;
59369: LD_VAR 0 3
59373: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59374: LD_INT 0
59376: PPUSH
59377: PPUSH
59378: PPUSH
59379: PPUSH
// if not unit or not points then
59380: LD_VAR 0 1
59384: NOT
59385: IFTRUE 59394
59387: PUSH
59388: LD_VAR 0 2
59392: NOT
59393: OR
59394: IFFALSE 59398
// exit ;
59396: GO 59488
// dist := 99999 ;
59398: LD_ADDR_VAR 0 5
59402: PUSH
59403: LD_INT 99999
59405: ST_TO_ADDR
// for i in points do
59406: LD_ADDR_VAR 0 4
59410: PUSH
59411: LD_VAR 0 2
59415: PUSH
59416: FOR_IN
59417: IFFALSE 59486
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59419: LD_ADDR_VAR 0 6
59423: PUSH
59424: LD_VAR 0 1
59428: PPUSH
59429: LD_VAR 0 4
59433: PUSH
59434: LD_INT 1
59436: ARRAY
59437: PPUSH
59438: LD_VAR 0 4
59442: PUSH
59443: LD_INT 2
59445: ARRAY
59446: PPUSH
59447: CALL_OW 297
59451: ST_TO_ADDR
// if tmpDist < dist then
59452: LD_VAR 0 6
59456: PUSH
59457: LD_VAR 0 5
59461: LESS
59462: IFFALSE 59484
// begin result := i ;
59464: LD_ADDR_VAR 0 3
59468: PUSH
59469: LD_VAR 0 4
59473: ST_TO_ADDR
// dist := tmpDist ;
59474: LD_ADDR_VAR 0 5
59478: PUSH
59479: LD_VAR 0 6
59483: ST_TO_ADDR
// end ; end ;
59484: GO 59416
59486: POP
59487: POP
// end ;
59488: LD_VAR 0 3
59492: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59493: LD_INT 0
59495: PPUSH
// uc_side := side ;
59496: LD_ADDR_OWVAR 20
59500: PUSH
59501: LD_VAR 0 1
59505: ST_TO_ADDR
// uc_nation := 3 ;
59506: LD_ADDR_OWVAR 21
59510: PUSH
59511: LD_INT 3
59513: ST_TO_ADDR
// vc_chassis := 25 ;
59514: LD_ADDR_OWVAR 37
59518: PUSH
59519: LD_INT 25
59521: ST_TO_ADDR
// vc_engine := engine_siberite ;
59522: LD_ADDR_OWVAR 39
59526: PUSH
59527: LD_INT 3
59529: ST_TO_ADDR
// vc_control := control_computer ;
59530: LD_ADDR_OWVAR 38
59534: PUSH
59535: LD_INT 3
59537: ST_TO_ADDR
// vc_weapon := 59 ;
59538: LD_ADDR_OWVAR 40
59542: PUSH
59543: LD_INT 59
59545: ST_TO_ADDR
// result := CreateVehicle ;
59546: LD_ADDR_VAR 0 5
59550: PUSH
59551: CALL_OW 45
59555: ST_TO_ADDR
// SetDir ( result , d ) ;
59556: LD_VAR 0 5
59560: PPUSH
59561: LD_VAR 0 4
59565: PPUSH
59566: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59570: LD_VAR 0 5
59574: PPUSH
59575: LD_VAR 0 2
59579: PPUSH
59580: LD_VAR 0 3
59584: PPUSH
59585: LD_INT 0
59587: PPUSH
59588: CALL_OW 48
// end ;
59592: LD_VAR 0 5
59596: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
59601: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59602: LD_ADDR_VAR 0 2
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59625: LD_VAR 0 1
59629: NOT
59630: IFTRUE 59663
59632: PUSH
59633: LD_VAR 0 1
59637: PPUSH
59638: CALL_OW 264
59642: PUSH
59643: LD_INT 12
59645: PUSH
59646: LD_INT 51
59648: PUSH
59649: LD_INT 32
59651: PUSH
59652: LD_INT 89
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: IN
59661: NOT
59662: OR
59663: IFFALSE 59667
// exit ;
59665: GO 59765
// for i := 1 to 3 do
59667: LD_ADDR_VAR 0 3
59671: PUSH
59672: DOUBLE
59673: LD_INT 1
59675: DEC
59676: ST_TO_ADDR
59677: LD_INT 3
59679: PUSH
59680: FOR_TO
59681: IFFALSE 59763
// begin tmp := GetCargo ( cargo , i ) ;
59683: LD_ADDR_VAR 0 4
59687: PUSH
59688: LD_VAR 0 1
59692: PPUSH
59693: LD_VAR 0 3
59697: PPUSH
59698: CALL_OW 289
59702: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59703: LD_ADDR_VAR 0 2
59707: PUSH
59708: LD_VAR 0 2
59712: PPUSH
59713: LD_VAR 0 3
59717: PPUSH
59718: LD_VAR 0 4
59722: PPUSH
59723: CALL_OW 1
59727: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59728: LD_ADDR_VAR 0 2
59732: PUSH
59733: LD_VAR 0 2
59737: PPUSH
59738: LD_INT 4
59740: PPUSH
59741: LD_VAR 0 2
59745: PUSH
59746: LD_INT 4
59748: ARRAY
59749: PUSH
59750: LD_VAR 0 4
59754: PLUS
59755: PPUSH
59756: CALL_OW 1
59760: ST_TO_ADDR
// end ;
59761: GO 59680
59763: POP
59764: POP
// end ;
59765: LD_VAR 0 2
59769: RET
// export function Length ( array ) ; begin
59770: LD_INT 0
59772: PPUSH
// result := array + 0 ;
59773: LD_ADDR_VAR 0 2
59777: PUSH
59778: LD_VAR 0 1
59782: PUSH
59783: LD_INT 0
59785: PLUS
59786: ST_TO_ADDR
// end ;
59787: LD_VAR 0 2
59791: RET
// export function PrepareArray ( array ) ; begin
59792: LD_INT 0
59794: PPUSH
// result := array diff 0 ;
59795: LD_ADDR_VAR 0 2
59799: PUSH
59800: LD_VAR 0 1
59804: PUSH
59805: LD_INT 0
59807: DIFF
59808: ST_TO_ADDR
// if not result [ 1 ] then
59809: LD_VAR 0 2
59813: PUSH
59814: LD_INT 1
59816: ARRAY
59817: NOT
59818: IFFALSE 59838
// result := Delete ( result , 1 ) ;
59820: LD_ADDR_VAR 0 2
59824: PUSH
59825: LD_VAR 0 2
59829: PPUSH
59830: LD_INT 1
59832: PPUSH
59833: CALL_OW 3
59837: ST_TO_ADDR
// end ;
59838: LD_VAR 0 2
59842: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59843: LD_INT 0
59845: PPUSH
59846: PPUSH
59847: PPUSH
59848: PPUSH
// sibRocketRange := 25 ;
59849: LD_ADDR_VAR 0 6
59853: PUSH
59854: LD_INT 25
59856: ST_TO_ADDR
// result := false ;
59857: LD_ADDR_VAR 0 4
59861: PUSH
59862: LD_INT 0
59864: ST_TO_ADDR
// for i := 0 to 5 do
59865: LD_ADDR_VAR 0 5
59869: PUSH
59870: DOUBLE
59871: LD_INT 0
59873: DEC
59874: ST_TO_ADDR
59875: LD_INT 5
59877: PUSH
59878: FOR_TO
59879: IFFALSE 59946
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59881: LD_VAR 0 1
59885: PPUSH
59886: LD_VAR 0 5
59890: PPUSH
59891: LD_VAR 0 6
59895: PPUSH
59896: CALL_OW 272
59900: PPUSH
59901: LD_VAR 0 2
59905: PPUSH
59906: LD_VAR 0 5
59910: PPUSH
59911: LD_VAR 0 6
59915: PPUSH
59916: CALL_OW 273
59920: PPUSH
59921: LD_VAR 0 3
59925: PPUSH
59926: CALL_OW 309
59930: IFFALSE 59944
// begin result := true ;
59932: LD_ADDR_VAR 0 4
59936: PUSH
59937: LD_INT 1
59939: ST_TO_ADDR
// exit ;
59940: POP
59941: POP
59942: GO 59948
// end ;
59944: GO 59878
59946: POP
59947: POP
// end ;
59948: LD_VAR 0 4
59952: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59953: LD_INT 0
59955: PPUSH
59956: PPUSH
59957: PPUSH
// if btype = b_depot then
59958: LD_VAR 0 2
59962: PUSH
59963: LD_INT 0
59965: EQUAL
59966: IFFALSE 59978
// begin result := true ;
59968: LD_ADDR_VAR 0 3
59972: PUSH
59973: LD_INT 1
59975: ST_TO_ADDR
// exit ;
59976: GO 60098
// end ; pom := GetBase ( depot ) ;
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 274
59992: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59993: LD_ADDR_VAR 0 5
59997: PUSH
59998: LD_VAR 0 2
60002: PPUSH
60003: LD_VAR 0 1
60007: PPUSH
60008: CALL_OW 248
60012: PPUSH
60013: CALL_OW 450
60017: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
60018: LD_ADDR_VAR 0 3
60022: PUSH
60023: LD_VAR 0 4
60027: PPUSH
60028: LD_INT 1
60030: PPUSH
60031: CALL_OW 275
60035: PUSH
60036: LD_VAR 0 5
60040: PUSH
60041: LD_INT 1
60043: ARRAY
60044: GREATEREQUAL
60045: IFFALSE 60071
60047: PUSH
60048: LD_VAR 0 4
60052: PPUSH
60053: LD_INT 2
60055: PPUSH
60056: CALL_OW 275
60060: PUSH
60061: LD_VAR 0 5
60065: PUSH
60066: LD_INT 2
60068: ARRAY
60069: GREATEREQUAL
60070: AND
60071: IFFALSE 60097
60073: PUSH
60074: LD_VAR 0 4
60078: PPUSH
60079: LD_INT 3
60081: PPUSH
60082: CALL_OW 275
60086: PUSH
60087: LD_VAR 0 5
60091: PUSH
60092: LD_INT 3
60094: ARRAY
60095: GREATEREQUAL
60096: AND
60097: ST_TO_ADDR
// end ;
60098: LD_VAR 0 3
60102: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
60103: LD_INT 0
60105: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
60106: LD_VAR 0 1
60110: PPUSH
60111: LD_VAR 0 2
60115: PPUSH
60116: LD_INT 0
60118: PPUSH
60119: LD_INT 0
60121: PPUSH
60122: LD_INT 1
60124: PPUSH
60125: LD_INT 0
60127: PPUSH
60128: CALL_OW 587
// end ;
60132: LD_VAR 0 3
60136: RET
// export function CenterOnNow ( unit ) ; begin
60137: LD_INT 0
60139: PPUSH
// result := IsInUnit ( unit ) ;
60140: LD_ADDR_VAR 0 2
60144: PUSH
60145: LD_VAR 0 1
60149: PPUSH
60150: CALL_OW 310
60154: ST_TO_ADDR
// if not result then
60155: LD_VAR 0 2
60159: NOT
60160: IFFALSE 60172
// result := unit ;
60162: LD_ADDR_VAR 0 2
60166: PUSH
60167: LD_VAR 0 1
60171: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60172: LD_VAR 0 1
60176: PPUSH
60177: CALL_OW 87
// end ;
60181: LD_VAR 0 2
60185: RET
// export function ComMoveHex ( unit , hex ) ; begin
60186: LD_INT 0
60188: PPUSH
// if not hex then
60189: LD_VAR 0 2
60193: NOT
60194: IFFALSE 60198
// exit ;
60196: GO 60251
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60198: LD_VAR 0 2
60202: PUSH
60203: LD_INT 1
60205: ARRAY
60206: PPUSH
60207: LD_VAR 0 2
60211: PUSH
60212: LD_INT 2
60214: ARRAY
60215: PPUSH
60216: CALL_OW 428
60220: IFFALSE 60224
// exit ;
60222: GO 60251
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60224: LD_VAR 0 1
60228: PPUSH
60229: LD_VAR 0 2
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: PPUSH
60238: LD_VAR 0 2
60242: PUSH
60243: LD_INT 2
60245: ARRAY
60246: PPUSH
60247: CALL_OW 111
// end ;
60251: LD_VAR 0 3
60255: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60256: LD_INT 0
60258: PPUSH
60259: PPUSH
60260: PPUSH
// if not unit or not enemy then
60261: LD_VAR 0 1
60265: NOT
60266: IFTRUE 60275
60268: PUSH
60269: LD_VAR 0 2
60273: NOT
60274: OR
60275: IFFALSE 60279
// exit ;
60277: GO 60405
// x := GetX ( enemy ) ;
60279: LD_ADDR_VAR 0 4
60283: PUSH
60284: LD_VAR 0 2
60288: PPUSH
60289: CALL_OW 250
60293: ST_TO_ADDR
// y := GetY ( enemy ) ;
60294: LD_ADDR_VAR 0 5
60298: PUSH
60299: LD_VAR 0 2
60303: PPUSH
60304: CALL_OW 251
60308: ST_TO_ADDR
// if ValidHex ( x , y ) then
60309: LD_VAR 0 4
60313: PPUSH
60314: LD_VAR 0 5
60318: PPUSH
60319: CALL_OW 488
60323: IFFALSE 60405
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60325: LD_VAR 0 2
60329: PPUSH
60330: CALL_OW 247
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: IN
60345: IFTRUE 60368
60347: PUSH
60348: LD_VAR 0 1
60352: PPUSH
60353: CALL_OW 255
60357: PPUSH
60358: LD_VAR 0 2
60362: PPUSH
60363: CALL_OW 292
60367: OR
60368: IFFALSE 60386
// ComAttackUnit ( unit , enemy ) else
60370: LD_VAR 0 1
60374: PPUSH
60375: LD_VAR 0 2
60379: PPUSH
60380: CALL_OW 115
60384: GO 60405
// ComAgressiveMove ( unit , x , y ) ;
60386: LD_VAR 0 1
60390: PPUSH
60391: LD_VAR 0 4
60395: PPUSH
60396: LD_VAR 0 5
60400: PPUSH
60401: CALL_OW 114
// end ;
60405: LD_VAR 0 3
60409: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60410: LD_INT 0
60412: PPUSH
60413: PPUSH
60414: PPUSH
// list := AreaToList ( area , 0 ) ;
60415: LD_ADDR_VAR 0 5
60419: PUSH
60420: LD_VAR 0 1
60424: PPUSH
60425: LD_INT 0
60427: PPUSH
60428: CALL_OW 517
60432: ST_TO_ADDR
// if not list then
60433: LD_VAR 0 5
60437: NOT
60438: IFFALSE 60442
// exit ;
60440: GO 60572
// if all then
60442: LD_VAR 0 2
60446: IFFALSE 60534
// begin for i := 1 to list [ 1 ] do
60448: LD_ADDR_VAR 0 4
60452: PUSH
60453: DOUBLE
60454: LD_INT 1
60456: DEC
60457: ST_TO_ADDR
60458: LD_VAR 0 5
60462: PUSH
60463: LD_INT 1
60465: ARRAY
60466: PUSH
60467: FOR_TO
60468: IFFALSE 60530
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60470: LD_ADDR_VAR 0 3
60474: PUSH
60475: LD_VAR 0 3
60479: PPUSH
60480: LD_VAR 0 3
60484: PUSH
60485: LD_INT 1
60487: PLUS
60488: PPUSH
60489: LD_VAR 0 5
60493: PUSH
60494: LD_INT 1
60496: ARRAY
60497: PUSH
60498: LD_VAR 0 4
60502: ARRAY
60503: PUSH
60504: LD_VAR 0 5
60508: PUSH
60509: LD_INT 2
60511: ARRAY
60512: PUSH
60513: LD_VAR 0 4
60517: ARRAY
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PPUSH
60523: CALL_OW 1
60527: ST_TO_ADDR
60528: GO 60467
60530: POP
60531: POP
// exit ;
60532: GO 60572
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60534: LD_ADDR_VAR 0 3
60538: PUSH
60539: LD_VAR 0 5
60543: PUSH
60544: LD_INT 1
60546: ARRAY
60547: PUSH
60548: LD_INT 1
60550: ARRAY
60551: PUSH
60552: LD_VAR 0 5
60556: PUSH
60557: LD_INT 2
60559: ARRAY
60560: PUSH
60561: LD_INT 1
60563: ARRAY
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: ST_TO_ADDR
// end ;
60572: LD_VAR 0 3
60576: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60577: LD_INT 0
60579: PPUSH
60580: PPUSH
// list := AreaToList ( area , 0 ) ;
60581: LD_ADDR_VAR 0 4
60585: PUSH
60586: LD_VAR 0 1
60590: PPUSH
60591: LD_INT 0
60593: PPUSH
60594: CALL_OW 517
60598: ST_TO_ADDR
// if not list then
60599: LD_VAR 0 4
60603: NOT
60604: IFFALSE 60608
// exit ;
60606: GO 60649
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60608: LD_ADDR_VAR 0 3
60612: PUSH
60613: LD_VAR 0 4
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: PUSH
60622: LD_INT 1
60624: ARRAY
60625: PUSH
60626: LD_VAR 0 4
60630: PUSH
60631: LD_INT 2
60633: ARRAY
60634: PUSH
60635: LD_INT 1
60637: ARRAY
60638: PUSH
60639: LD_VAR 0 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// end ;
60649: LD_VAR 0 3
60653: RET
// export function First ( array ) ; begin
60654: LD_INT 0
60656: PPUSH
// if not array then
60657: LD_VAR 0 1
60661: NOT
60662: IFFALSE 60666
// exit ;
60664: GO 60680
// result := array [ 1 ] ;
60666: LD_ADDR_VAR 0 2
60670: PUSH
60671: LD_VAR 0 1
60675: PUSH
60676: LD_INT 1
60678: ARRAY
60679: ST_TO_ADDR
// end ;
60680: LD_VAR 0 2
60684: RET
// export function Last ( array ) ; begin
60685: LD_INT 0
60687: PPUSH
// if not array then
60688: LD_VAR 0 1
60692: NOT
60693: IFFALSE 60697
// exit ;
60695: GO 60713
// result := array [ array ] ;
60697: LD_ADDR_VAR 0 2
60701: PUSH
60702: LD_VAR 0 1
60706: PUSH
60707: LD_VAR 0 1
60711: ARRAY
60712: ST_TO_ADDR
// end ;
60713: LD_VAR 0 2
60717: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60718: LD_INT 0
60720: PPUSH
60721: PPUSH
// result := [ ] ;
60722: LD_ADDR_VAR 0 5
60726: PUSH
60727: EMPTY
60728: ST_TO_ADDR
// if not array then
60729: LD_VAR 0 1
60733: NOT
60734: IFFALSE 60738
// exit ;
60736: GO 60850
// for i := 1 to array do
60738: LD_ADDR_VAR 0 6
60742: PUSH
60743: DOUBLE
60744: LD_INT 1
60746: DEC
60747: ST_TO_ADDR
60748: LD_VAR 0 1
60752: PUSH
60753: FOR_TO
60754: IFFALSE 60848
// if array [ i ] [ index ] = value then
60756: LD_VAR 0 1
60760: PUSH
60761: LD_VAR 0 6
60765: ARRAY
60766: PUSH
60767: LD_VAR 0 2
60771: ARRAY
60772: PUSH
60773: LD_VAR 0 3
60777: EQUAL
60778: IFFALSE 60846
// begin if indexColumn then
60780: LD_VAR 0 4
60784: IFFALSE 60820
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60786: LD_ADDR_VAR 0 5
60790: PUSH
60791: LD_VAR 0 5
60795: PPUSH
60796: LD_VAR 0 1
60800: PUSH
60801: LD_VAR 0 6
60805: ARRAY
60806: PUSH
60807: LD_VAR 0 4
60811: ARRAY
60812: PPUSH
60813: CALL 55858 0 2
60817: ST_TO_ADDR
60818: GO 60846
// result := Join ( result , array [ i ] ) ;
60820: LD_ADDR_VAR 0 5
60824: PUSH
60825: LD_VAR 0 5
60829: PPUSH
60830: LD_VAR 0 1
60834: PUSH
60835: LD_VAR 0 6
60839: ARRAY
60840: PPUSH
60841: CALL 55858 0 2
60845: ST_TO_ADDR
// end ;
60846: GO 60753
60848: POP
60849: POP
// end ;
60850: LD_VAR 0 5
60854: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60855: LD_INT 0
60857: PPUSH
// if not vehicles or not parkingPoint then
60858: LD_VAR 0 1
60862: NOT
60863: IFTRUE 60872
60865: PUSH
60866: LD_VAR 0 2
60870: NOT
60871: OR
60872: IFFALSE 60876
// exit ;
60874: GO 60974
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60876: LD_ADDR_VAR 0 1
60880: PUSH
60881: LD_VAR 0 1
60885: PPUSH
60886: LD_INT 50
60888: PUSH
60889: EMPTY
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: LD_INT 92
60897: PUSH
60898: LD_VAR 0 2
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PUSH
60907: LD_VAR 0 2
60911: PUSH
60912: LD_INT 2
60914: ARRAY
60915: PUSH
60916: LD_INT 8
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PPUSH
60933: CALL_OW 72
60937: ST_TO_ADDR
// if not vehicles then
60938: LD_VAR 0 1
60942: NOT
60943: IFFALSE 60947
// exit ;
60945: GO 60974
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60947: LD_VAR 0 1
60951: PPUSH
60952: LD_VAR 0 2
60956: PUSH
60957: LD_INT 1
60959: ARRAY
60960: PPUSH
60961: LD_VAR 0 2
60965: PUSH
60966: LD_INT 2
60968: ARRAY
60969: PPUSH
60970: CALL_OW 111
// end ;
60974: LD_VAR 0 3
60978: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60979: LD_INT 0
60981: PPUSH
60982: PPUSH
60983: PPUSH
// if not side or not area then
60984: LD_VAR 0 1
60988: NOT
60989: IFTRUE 60998
60991: PUSH
60992: LD_VAR 0 2
60996: NOT
60997: OR
60998: IFFALSE 61002
// exit ;
61000: GO 61121
// tmp := AreaToList ( area , 0 ) ;
61002: LD_ADDR_VAR 0 5
61006: PUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: LD_INT 0
61014: PPUSH
61015: CALL_OW 517
61019: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61020: LD_ADDR_VAR 0 4
61024: PUSH
61025: DOUBLE
61026: LD_INT 1
61028: DEC
61029: ST_TO_ADDR
61030: LD_VAR 0 5
61034: PUSH
61035: LD_INT 1
61037: ARRAY
61038: PUSH
61039: FOR_TO
61040: IFFALSE 61119
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
61042: LD_VAR 0 5
61046: PUSH
61047: LD_INT 1
61049: ARRAY
61050: PUSH
61051: LD_VAR 0 4
61055: ARRAY
61056: PPUSH
61057: LD_VAR 0 5
61061: PUSH
61062: LD_INT 2
61064: ARRAY
61065: PUSH
61066: LD_VAR 0 4
61070: ARRAY
61071: PPUSH
61072: CALL_OW 351
61076: IFFALSE 61117
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
61078: LD_VAR 0 5
61082: PUSH
61083: LD_INT 1
61085: ARRAY
61086: PUSH
61087: LD_VAR 0 4
61091: ARRAY
61092: PPUSH
61093: LD_VAR 0 5
61097: PUSH
61098: LD_INT 2
61100: ARRAY
61101: PUSH
61102: LD_VAR 0 4
61106: ARRAY
61107: PPUSH
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 244
// end ;
61117: GO 61039
61119: POP
61120: POP
// end ;
61121: LD_VAR 0 3
61125: RET
// export function UniqueArray ( array ) ; var i ; begin
61126: LD_INT 0
61128: PPUSH
61129: PPUSH
// result := [ ] ;
61130: LD_ADDR_VAR 0 2
61134: PUSH
61135: EMPTY
61136: ST_TO_ADDR
// if not array then
61137: LD_VAR 0 1
61141: NOT
61142: IFFALSE 61146
// exit ;
61144: GO 61207
// for i := 1 to array do
61146: LD_ADDR_VAR 0 3
61150: PUSH
61151: DOUBLE
61152: LD_INT 1
61154: DEC
61155: ST_TO_ADDR
61156: LD_VAR 0 1
61160: PUSH
61161: FOR_TO
61162: IFFALSE 61205
// if not array [ i ] in result then
61164: LD_VAR 0 1
61168: PUSH
61169: LD_VAR 0 3
61173: ARRAY
61174: PUSH
61175: LD_VAR 0 2
61179: IN
61180: NOT
61181: IFFALSE 61203
// result := Join ( result , i ) ;
61183: LD_ADDR_VAR 0 2
61187: PUSH
61188: LD_VAR 0 2
61192: PPUSH
61193: LD_VAR 0 3
61197: PPUSH
61198: CALL 55858 0 2
61202: ST_TO_ADDR
61203: GO 61161
61205: POP
61206: POP
// end ; end_of_file
61207: LD_VAR 0 2
61211: RET
// export globalGameSaveCounter ; every 0 0$1 do
61212: GO 61214
61214: DISABLE
// begin enable ;
61215: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61216: LD_STRING updateTimer(
61218: PUSH
61219: LD_OWVAR 1
61223: STR
61224: PUSH
61225: LD_STRING );
61227: STR
61228: PPUSH
61229: CALL_OW 559
// end ;
61233: END
// every 0 0$1 do
61234: GO 61236
61236: DISABLE
// begin globalGameSaveCounter := 0 ;
61237: LD_ADDR_EXP 50
61241: PUSH
61242: LD_INT 0
61244: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61245: LD_STRING setGameSaveCounter(0)
61247: PPUSH
61248: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61252: LD_STRING initStreamRollete();
61254: PPUSH
61255: CALL_OW 559
// InitStreamMode ;
61259: CALL 62611 0 0
// DefineStreamItems ( false ) ;
61263: LD_INT 0
61265: PPUSH
61266: CALL 63075 0 1
// end ;
61270: END
// export function SOS_MapStart ( ) ; begin
61271: LD_INT 0
61273: PPUSH
// if streamModeActive then
61274: LD_EXP 51
61278: IFFALSE 61287
// DefineStreamItems ( true ) ;
61280: LD_INT 1
61282: PPUSH
61283: CALL 63075 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
61287: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
61289: PPUSH
61290: CALL_OW 559
// UpdateLuaVariables ( ) ;
61294: CALL 61311 0 0
// UpdateFactoryWaypoints ( ) ;
61298: CALL 76197 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61302: CALL 76449 0 0
// end ;
61306: LD_VAR 0 1
61310: RET
// function UpdateLuaVariables ( ) ; begin
61311: LD_INT 0
61313: PPUSH
// if globalGameSaveCounter then
61314: LD_EXP 50
61318: IFFALSE 61352
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61320: LD_ADDR_EXP 50
61324: PUSH
61325: LD_EXP 50
61329: PPUSH
61330: CALL 57231 0 1
61334: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61335: LD_STRING setGameSaveCounter(
61337: PUSH
61338: LD_EXP 50
61342: STR
61343: PUSH
61344: LD_STRING )
61346: STR
61347: PPUSH
61348: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61352: LD_STRING setGameDifficulty(
61354: PUSH
61355: LD_OWVAR 67
61359: STR
61360: PUSH
61361: LD_STRING )
61363: STR
61364: PPUSH
61365: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61369: LD_STRING displayDifficulty(
61371: PUSH
61372: LD_OWVAR 67
61376: STR
61377: PUSH
61378: LD_STRING )
61380: STR
61381: PPUSH
61382: CALL_OW 559
// end ;
61386: LD_VAR 0 1
61390: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61391: LD_INT 0
61393: PPUSH
// if p2 = stream_mode then
61394: LD_VAR 0 2
61398: PUSH
61399: LD_INT 100
61401: EQUAL
61402: IFFALSE 62405
// begin if not StreamModeActive then
61404: LD_EXP 51
61408: NOT
61409: IFFALSE 61419
// StreamModeActive := true ;
61411: LD_ADDR_EXP 51
61415: PUSH
61416: LD_INT 1
61418: ST_TO_ADDR
// if p3 = 0 then
61419: LD_VAR 0 3
61423: PUSH
61424: LD_INT 0
61426: EQUAL
61427: IFFALSE 61433
// InitStreamMode ;
61429: CALL 62611 0 0
// if p3 = 1 then
61433: LD_VAR 0 3
61437: PUSH
61438: LD_INT 1
61440: EQUAL
61441: IFFALSE 61451
// sRocket := true ;
61443: LD_ADDR_EXP 56
61447: PUSH
61448: LD_INT 1
61450: ST_TO_ADDR
// if p3 = 2 then
61451: LD_VAR 0 3
61455: PUSH
61456: LD_INT 2
61458: EQUAL
61459: IFFALSE 61469
// sSpeed := true ;
61461: LD_ADDR_EXP 55
61465: PUSH
61466: LD_INT 1
61468: ST_TO_ADDR
// if p3 = 3 then
61469: LD_VAR 0 3
61473: PUSH
61474: LD_INT 3
61476: EQUAL
61477: IFFALSE 61487
// sEngine := true ;
61479: LD_ADDR_EXP 57
61483: PUSH
61484: LD_INT 1
61486: ST_TO_ADDR
// if p3 = 4 then
61487: LD_VAR 0 3
61491: PUSH
61492: LD_INT 4
61494: EQUAL
61495: IFFALSE 61505
// sSpec := true ;
61497: LD_ADDR_EXP 54
61501: PUSH
61502: LD_INT 1
61504: ST_TO_ADDR
// if p3 = 5 then
61505: LD_VAR 0 3
61509: PUSH
61510: LD_INT 5
61512: EQUAL
61513: IFFALSE 61523
// sLevel := true ;
61515: LD_ADDR_EXP 58
61519: PUSH
61520: LD_INT 1
61522: ST_TO_ADDR
// if p3 = 6 then
61523: LD_VAR 0 3
61527: PUSH
61528: LD_INT 6
61530: EQUAL
61531: IFFALSE 61541
// sArmoury := true ;
61533: LD_ADDR_EXP 59
61537: PUSH
61538: LD_INT 1
61540: ST_TO_ADDR
// if p3 = 7 then
61541: LD_VAR 0 3
61545: PUSH
61546: LD_INT 7
61548: EQUAL
61549: IFFALSE 61559
// sRadar := true ;
61551: LD_ADDR_EXP 60
61555: PUSH
61556: LD_INT 1
61558: ST_TO_ADDR
// if p3 = 8 then
61559: LD_VAR 0 3
61563: PUSH
61564: LD_INT 8
61566: EQUAL
61567: IFFALSE 61577
// sBunker := true ;
61569: LD_ADDR_EXP 61
61573: PUSH
61574: LD_INT 1
61576: ST_TO_ADDR
// if p3 = 9 then
61577: LD_VAR 0 3
61581: PUSH
61582: LD_INT 9
61584: EQUAL
61585: IFFALSE 61595
// sHack := true ;
61587: LD_ADDR_EXP 62
61591: PUSH
61592: LD_INT 1
61594: ST_TO_ADDR
// if p3 = 10 then
61595: LD_VAR 0 3
61599: PUSH
61600: LD_INT 10
61602: EQUAL
61603: IFFALSE 61613
// sFire := true ;
61605: LD_ADDR_EXP 63
61609: PUSH
61610: LD_INT 1
61612: ST_TO_ADDR
// if p3 = 11 then
61613: LD_VAR 0 3
61617: PUSH
61618: LD_INT 11
61620: EQUAL
61621: IFFALSE 61631
// sRefresh := true ;
61623: LD_ADDR_EXP 64
61627: PUSH
61628: LD_INT 1
61630: ST_TO_ADDR
// if p3 = 12 then
61631: LD_VAR 0 3
61635: PUSH
61636: LD_INT 12
61638: EQUAL
61639: IFFALSE 61649
// sExp := true ;
61641: LD_ADDR_EXP 65
61645: PUSH
61646: LD_INT 1
61648: ST_TO_ADDR
// if p3 = 13 then
61649: LD_VAR 0 3
61653: PUSH
61654: LD_INT 13
61656: EQUAL
61657: IFFALSE 61667
// sDepot := true ;
61659: LD_ADDR_EXP 66
61663: PUSH
61664: LD_INT 1
61666: ST_TO_ADDR
// if p3 = 14 then
61667: LD_VAR 0 3
61671: PUSH
61672: LD_INT 14
61674: EQUAL
61675: IFFALSE 61685
// sFlag := true ;
61677: LD_ADDR_EXP 67
61681: PUSH
61682: LD_INT 1
61684: ST_TO_ADDR
// if p3 = 15 then
61685: LD_VAR 0 3
61689: PUSH
61690: LD_INT 15
61692: EQUAL
61693: IFFALSE 61703
// sKamikadze := true ;
61695: LD_ADDR_EXP 75
61699: PUSH
61700: LD_INT 1
61702: ST_TO_ADDR
// if p3 = 16 then
61703: LD_VAR 0 3
61707: PUSH
61708: LD_INT 16
61710: EQUAL
61711: IFFALSE 61721
// sTroll := true ;
61713: LD_ADDR_EXP 76
61717: PUSH
61718: LD_INT 1
61720: ST_TO_ADDR
// if p3 = 17 then
61721: LD_VAR 0 3
61725: PUSH
61726: LD_INT 17
61728: EQUAL
61729: IFFALSE 61739
// sSlow := true ;
61731: LD_ADDR_EXP 77
61735: PUSH
61736: LD_INT 1
61738: ST_TO_ADDR
// if p3 = 18 then
61739: LD_VAR 0 3
61743: PUSH
61744: LD_INT 18
61746: EQUAL
61747: IFFALSE 61757
// sLack := true ;
61749: LD_ADDR_EXP 78
61753: PUSH
61754: LD_INT 1
61756: ST_TO_ADDR
// if p3 = 19 then
61757: LD_VAR 0 3
61761: PUSH
61762: LD_INT 19
61764: EQUAL
61765: IFFALSE 61775
// sTank := true ;
61767: LD_ADDR_EXP 80
61771: PUSH
61772: LD_INT 1
61774: ST_TO_ADDR
// if p3 = 20 then
61775: LD_VAR 0 3
61779: PUSH
61780: LD_INT 20
61782: EQUAL
61783: IFFALSE 61793
// sRemote := true ;
61785: LD_ADDR_EXP 81
61789: PUSH
61790: LD_INT 1
61792: ST_TO_ADDR
// if p3 = 21 then
61793: LD_VAR 0 3
61797: PUSH
61798: LD_INT 21
61800: EQUAL
61801: IFFALSE 61811
// sPowell := true ;
61803: LD_ADDR_EXP 82
61807: PUSH
61808: LD_INT 1
61810: ST_TO_ADDR
// if p3 = 22 then
61811: LD_VAR 0 3
61815: PUSH
61816: LD_INT 22
61818: EQUAL
61819: IFFALSE 61829
// sTeleport := true ;
61821: LD_ADDR_EXP 85
61825: PUSH
61826: LD_INT 1
61828: ST_TO_ADDR
// if p3 = 23 then
61829: LD_VAR 0 3
61833: PUSH
61834: LD_INT 23
61836: EQUAL
61837: IFFALSE 61847
// sOilTower := true ;
61839: LD_ADDR_EXP 87
61843: PUSH
61844: LD_INT 1
61846: ST_TO_ADDR
// if p3 = 24 then
61847: LD_VAR 0 3
61851: PUSH
61852: LD_INT 24
61854: EQUAL
61855: IFFALSE 61865
// sShovel := true ;
61857: LD_ADDR_EXP 88
61861: PUSH
61862: LD_INT 1
61864: ST_TO_ADDR
// if p3 = 25 then
61865: LD_VAR 0 3
61869: PUSH
61870: LD_INT 25
61872: EQUAL
61873: IFFALSE 61883
// sSheik := true ;
61875: LD_ADDR_EXP 89
61879: PUSH
61880: LD_INT 1
61882: ST_TO_ADDR
// if p3 = 26 then
61883: LD_VAR 0 3
61887: PUSH
61888: LD_INT 26
61890: EQUAL
61891: IFFALSE 61901
// sEarthquake := true ;
61893: LD_ADDR_EXP 91
61897: PUSH
61898: LD_INT 1
61900: ST_TO_ADDR
// if p3 = 27 then
61901: LD_VAR 0 3
61905: PUSH
61906: LD_INT 27
61908: EQUAL
61909: IFFALSE 61919
// sAI := true ;
61911: LD_ADDR_EXP 92
61915: PUSH
61916: LD_INT 1
61918: ST_TO_ADDR
// if p3 = 28 then
61919: LD_VAR 0 3
61923: PUSH
61924: LD_INT 28
61926: EQUAL
61927: IFFALSE 61937
// sCargo := true ;
61929: LD_ADDR_EXP 95
61933: PUSH
61934: LD_INT 1
61936: ST_TO_ADDR
// if p3 = 29 then
61937: LD_VAR 0 3
61941: PUSH
61942: LD_INT 29
61944: EQUAL
61945: IFFALSE 61955
// sDLaser := true ;
61947: LD_ADDR_EXP 96
61951: PUSH
61952: LD_INT 1
61954: ST_TO_ADDR
// if p3 = 30 then
61955: LD_VAR 0 3
61959: PUSH
61960: LD_INT 30
61962: EQUAL
61963: IFFALSE 61973
// sExchange := true ;
61965: LD_ADDR_EXP 97
61969: PUSH
61970: LD_INT 1
61972: ST_TO_ADDR
// if p3 = 31 then
61973: LD_VAR 0 3
61977: PUSH
61978: LD_INT 31
61980: EQUAL
61981: IFFALSE 61991
// sFac := true ;
61983: LD_ADDR_EXP 98
61987: PUSH
61988: LD_INT 1
61990: ST_TO_ADDR
// if p3 = 32 then
61991: LD_VAR 0 3
61995: PUSH
61996: LD_INT 32
61998: EQUAL
61999: IFFALSE 62009
// sPower := true ;
62001: LD_ADDR_EXP 99
62005: PUSH
62006: LD_INT 1
62008: ST_TO_ADDR
// if p3 = 33 then
62009: LD_VAR 0 3
62013: PUSH
62014: LD_INT 33
62016: EQUAL
62017: IFFALSE 62027
// sRandom := true ;
62019: LD_ADDR_EXP 100
62023: PUSH
62024: LD_INT 1
62026: ST_TO_ADDR
// if p3 = 34 then
62027: LD_VAR 0 3
62031: PUSH
62032: LD_INT 34
62034: EQUAL
62035: IFFALSE 62045
// sShield := true ;
62037: LD_ADDR_EXP 101
62041: PUSH
62042: LD_INT 1
62044: ST_TO_ADDR
// if p3 = 35 then
62045: LD_VAR 0 3
62049: PUSH
62050: LD_INT 35
62052: EQUAL
62053: IFFALSE 62063
// sTime := true ;
62055: LD_ADDR_EXP 102
62059: PUSH
62060: LD_INT 1
62062: ST_TO_ADDR
// if p3 = 36 then
62063: LD_VAR 0 3
62067: PUSH
62068: LD_INT 36
62070: EQUAL
62071: IFFALSE 62081
// sTools := true ;
62073: LD_ADDR_EXP 103
62077: PUSH
62078: LD_INT 1
62080: ST_TO_ADDR
// if p3 = 101 then
62081: LD_VAR 0 3
62085: PUSH
62086: LD_INT 101
62088: EQUAL
62089: IFFALSE 62099
// sSold := true ;
62091: LD_ADDR_EXP 68
62095: PUSH
62096: LD_INT 1
62098: ST_TO_ADDR
// if p3 = 102 then
62099: LD_VAR 0 3
62103: PUSH
62104: LD_INT 102
62106: EQUAL
62107: IFFALSE 62117
// sDiff := true ;
62109: LD_ADDR_EXP 69
62113: PUSH
62114: LD_INT 1
62116: ST_TO_ADDR
// if p3 = 103 then
62117: LD_VAR 0 3
62121: PUSH
62122: LD_INT 103
62124: EQUAL
62125: IFFALSE 62135
// sFog := true ;
62127: LD_ADDR_EXP 72
62131: PUSH
62132: LD_INT 1
62134: ST_TO_ADDR
// if p3 = 104 then
62135: LD_VAR 0 3
62139: PUSH
62140: LD_INT 104
62142: EQUAL
62143: IFFALSE 62153
// sReset := true ;
62145: LD_ADDR_EXP 73
62149: PUSH
62150: LD_INT 1
62152: ST_TO_ADDR
// if p3 = 105 then
62153: LD_VAR 0 3
62157: PUSH
62158: LD_INT 105
62160: EQUAL
62161: IFFALSE 62171
// sSun := true ;
62163: LD_ADDR_EXP 74
62167: PUSH
62168: LD_INT 1
62170: ST_TO_ADDR
// if p3 = 106 then
62171: LD_VAR 0 3
62175: PUSH
62176: LD_INT 106
62178: EQUAL
62179: IFFALSE 62189
// sTiger := true ;
62181: LD_ADDR_EXP 70
62185: PUSH
62186: LD_INT 1
62188: ST_TO_ADDR
// if p3 = 107 then
62189: LD_VAR 0 3
62193: PUSH
62194: LD_INT 107
62196: EQUAL
62197: IFFALSE 62207
// sBomb := true ;
62199: LD_ADDR_EXP 71
62203: PUSH
62204: LD_INT 1
62206: ST_TO_ADDR
// if p3 = 108 then
62207: LD_VAR 0 3
62211: PUSH
62212: LD_INT 108
62214: EQUAL
62215: IFFALSE 62225
// sWound := true ;
62217: LD_ADDR_EXP 79
62221: PUSH
62222: LD_INT 1
62224: ST_TO_ADDR
// if p3 = 109 then
62225: LD_VAR 0 3
62229: PUSH
62230: LD_INT 109
62232: EQUAL
62233: IFFALSE 62243
// sBetray := true ;
62235: LD_ADDR_EXP 83
62239: PUSH
62240: LD_INT 1
62242: ST_TO_ADDR
// if p3 = 110 then
62243: LD_VAR 0 3
62247: PUSH
62248: LD_INT 110
62250: EQUAL
62251: IFFALSE 62261
// sContamin := true ;
62253: LD_ADDR_EXP 84
62257: PUSH
62258: LD_INT 1
62260: ST_TO_ADDR
// if p3 = 111 then
62261: LD_VAR 0 3
62265: PUSH
62266: LD_INT 111
62268: EQUAL
62269: IFFALSE 62279
// sOil := true ;
62271: LD_ADDR_EXP 86
62275: PUSH
62276: LD_INT 1
62278: ST_TO_ADDR
// if p3 = 112 then
62279: LD_VAR 0 3
62283: PUSH
62284: LD_INT 112
62286: EQUAL
62287: IFFALSE 62297
// sStu := true ;
62289: LD_ADDR_EXP 90
62293: PUSH
62294: LD_INT 1
62296: ST_TO_ADDR
// if p3 = 113 then
62297: LD_VAR 0 3
62301: PUSH
62302: LD_INT 113
62304: EQUAL
62305: IFFALSE 62315
// sBazooka := true ;
62307: LD_ADDR_EXP 93
62311: PUSH
62312: LD_INT 1
62314: ST_TO_ADDR
// if p3 = 114 then
62315: LD_VAR 0 3
62319: PUSH
62320: LD_INT 114
62322: EQUAL
62323: IFFALSE 62333
// sMortar := true ;
62325: LD_ADDR_EXP 94
62329: PUSH
62330: LD_INT 1
62332: ST_TO_ADDR
// if p3 = 115 then
62333: LD_VAR 0 3
62337: PUSH
62338: LD_INT 115
62340: EQUAL
62341: IFFALSE 62351
// sRanger := true ;
62343: LD_ADDR_EXP 104
62347: PUSH
62348: LD_INT 1
62350: ST_TO_ADDR
// if p3 = 116 then
62351: LD_VAR 0 3
62355: PUSH
62356: LD_INT 116
62358: EQUAL
62359: IFFALSE 62369
// sComputer := true ;
62361: LD_ADDR_EXP 105
62365: PUSH
62366: LD_INT 1
62368: ST_TO_ADDR
// if p3 = 117 then
62369: LD_VAR 0 3
62373: PUSH
62374: LD_INT 117
62376: EQUAL
62377: IFFALSE 62387
// s30 := true ;
62379: LD_ADDR_EXP 106
62383: PUSH
62384: LD_INT 1
62386: ST_TO_ADDR
// if p3 = 118 then
62387: LD_VAR 0 3
62391: PUSH
62392: LD_INT 118
62394: EQUAL
62395: IFFALSE 62405
// s60 := true ;
62397: LD_ADDR_EXP 107
62401: PUSH
62402: LD_INT 1
62404: ST_TO_ADDR
// end ; if p2 = hack_mode then
62405: LD_VAR 0 2
62409: PUSH
62410: LD_INT 101
62412: EQUAL
62413: IFFALSE 62541
// begin case p3 of 1 :
62415: LD_VAR 0 3
62419: PUSH
62420: LD_INT 1
62422: DOUBLE
62423: EQUAL
62424: IFTRUE 62428
62426: GO 62435
62428: POP
// hHackUnlimitedResources ; 2 :
62429: CALL 74804 0 0
62433: GO 62541
62435: LD_INT 2
62437: DOUBLE
62438: EQUAL
62439: IFTRUE 62443
62441: GO 62450
62443: POP
// hHackSetLevel10 ; 3 :
62444: CALL 74937 0 0
62448: GO 62541
62450: LD_INT 3
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62458
62456: GO 62465
62458: POP
// hHackSetLevel10YourUnits ; 4 :
62459: CALL 75022 0 0
62463: GO 62541
62465: LD_INT 4
62467: DOUBLE
62468: EQUAL
62469: IFTRUE 62473
62471: GO 62480
62473: POP
// hHackInvincible ; 5 :
62474: CALL 75470 0 0
62478: GO 62541
62480: LD_INT 5
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62488
62486: GO 62495
62488: POP
// hHackInvisible ; 6 :
62489: CALL 75581 0 0
62493: GO 62541
62495: LD_INT 6
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62503
62501: GO 62510
62503: POP
// hHackChangeYourSide ; 7 :
62504: CALL 75638 0 0
62508: GO 62541
62510: LD_INT 7
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62518
62516: GO 62525
62518: POP
// hHackChangeUnitSide ; 8 :
62519: CALL 75680 0 0
62523: GO 62541
62525: LD_INT 8
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62533
62531: GO 62540
62533: POP
// hHackFog ; end ;
62534: CALL 75781 0 0
62538: GO 62541
62540: POP
// end ; if p2 = game_save_mode then
62541: LD_VAR 0 2
62545: PUSH
62546: LD_INT 102
62548: EQUAL
62549: IFFALSE 62606
// begin if p3 = 1 then
62551: LD_VAR 0 3
62555: PUSH
62556: LD_INT 1
62558: EQUAL
62559: IFFALSE 62571
// globalGameSaveCounter := p4 ;
62561: LD_ADDR_EXP 50
62565: PUSH
62566: LD_VAR 0 4
62570: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62571: LD_VAR 0 3
62575: PUSH
62576: LD_INT 2
62578: EQUAL
62579: IFFALSE 62587
62581: PUSH
62582: LD_EXP 50
62586: AND
62587: IFFALSE 62606
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62589: LD_STRING setGameSaveCounter(
62591: PUSH
62592: LD_EXP 50
62596: STR
62597: PUSH
62598: LD_STRING )
62600: STR
62601: PPUSH
62602: CALL_OW 559
// end ; end ;
62606: LD_VAR 0 7
62610: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62611: LD_INT 0
62613: PPUSH
// streamModeActive := false ;
62614: LD_ADDR_EXP 51
62618: PUSH
62619: LD_INT 0
62621: ST_TO_ADDR
// normalCounter := 36 ;
62622: LD_ADDR_EXP 52
62626: PUSH
62627: LD_INT 36
62629: ST_TO_ADDR
// hardcoreCounter := 18 ;
62630: LD_ADDR_EXP 53
62634: PUSH
62635: LD_INT 18
62637: ST_TO_ADDR
// sRocket := false ;
62638: LD_ADDR_EXP 56
62642: PUSH
62643: LD_INT 0
62645: ST_TO_ADDR
// sSpeed := false ;
62646: LD_ADDR_EXP 55
62650: PUSH
62651: LD_INT 0
62653: ST_TO_ADDR
// sEngine := false ;
62654: LD_ADDR_EXP 57
62658: PUSH
62659: LD_INT 0
62661: ST_TO_ADDR
// sSpec := false ;
62662: LD_ADDR_EXP 54
62666: PUSH
62667: LD_INT 0
62669: ST_TO_ADDR
// sLevel := false ;
62670: LD_ADDR_EXP 58
62674: PUSH
62675: LD_INT 0
62677: ST_TO_ADDR
// sArmoury := false ;
62678: LD_ADDR_EXP 59
62682: PUSH
62683: LD_INT 0
62685: ST_TO_ADDR
// sRadar := false ;
62686: LD_ADDR_EXP 60
62690: PUSH
62691: LD_INT 0
62693: ST_TO_ADDR
// sBunker := false ;
62694: LD_ADDR_EXP 61
62698: PUSH
62699: LD_INT 0
62701: ST_TO_ADDR
// sHack := false ;
62702: LD_ADDR_EXP 62
62706: PUSH
62707: LD_INT 0
62709: ST_TO_ADDR
// sFire := false ;
62710: LD_ADDR_EXP 63
62714: PUSH
62715: LD_INT 0
62717: ST_TO_ADDR
// sRefresh := false ;
62718: LD_ADDR_EXP 64
62722: PUSH
62723: LD_INT 0
62725: ST_TO_ADDR
// sExp := false ;
62726: LD_ADDR_EXP 65
62730: PUSH
62731: LD_INT 0
62733: ST_TO_ADDR
// sDepot := false ;
62734: LD_ADDR_EXP 66
62738: PUSH
62739: LD_INT 0
62741: ST_TO_ADDR
// sFlag := false ;
62742: LD_ADDR_EXP 67
62746: PUSH
62747: LD_INT 0
62749: ST_TO_ADDR
// sKamikadze := false ;
62750: LD_ADDR_EXP 75
62754: PUSH
62755: LD_INT 0
62757: ST_TO_ADDR
// sTroll := false ;
62758: LD_ADDR_EXP 76
62762: PUSH
62763: LD_INT 0
62765: ST_TO_ADDR
// sSlow := false ;
62766: LD_ADDR_EXP 77
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// sLack := false ;
62774: LD_ADDR_EXP 78
62778: PUSH
62779: LD_INT 0
62781: ST_TO_ADDR
// sTank := false ;
62782: LD_ADDR_EXP 80
62786: PUSH
62787: LD_INT 0
62789: ST_TO_ADDR
// sRemote := false ;
62790: LD_ADDR_EXP 81
62794: PUSH
62795: LD_INT 0
62797: ST_TO_ADDR
// sPowell := false ;
62798: LD_ADDR_EXP 82
62802: PUSH
62803: LD_INT 0
62805: ST_TO_ADDR
// sTeleport := false ;
62806: LD_ADDR_EXP 85
62810: PUSH
62811: LD_INT 0
62813: ST_TO_ADDR
// sOilTower := false ;
62814: LD_ADDR_EXP 87
62818: PUSH
62819: LD_INT 0
62821: ST_TO_ADDR
// sShovel := false ;
62822: LD_ADDR_EXP 88
62826: PUSH
62827: LD_INT 0
62829: ST_TO_ADDR
// sSheik := false ;
62830: LD_ADDR_EXP 89
62834: PUSH
62835: LD_INT 0
62837: ST_TO_ADDR
// sEarthquake := false ;
62838: LD_ADDR_EXP 91
62842: PUSH
62843: LD_INT 0
62845: ST_TO_ADDR
// sAI := false ;
62846: LD_ADDR_EXP 92
62850: PUSH
62851: LD_INT 0
62853: ST_TO_ADDR
// sCargo := false ;
62854: LD_ADDR_EXP 95
62858: PUSH
62859: LD_INT 0
62861: ST_TO_ADDR
// sDLaser := false ;
62862: LD_ADDR_EXP 96
62866: PUSH
62867: LD_INT 0
62869: ST_TO_ADDR
// sExchange := false ;
62870: LD_ADDR_EXP 97
62874: PUSH
62875: LD_INT 0
62877: ST_TO_ADDR
// sFac := false ;
62878: LD_ADDR_EXP 98
62882: PUSH
62883: LD_INT 0
62885: ST_TO_ADDR
// sPower := false ;
62886: LD_ADDR_EXP 99
62890: PUSH
62891: LD_INT 0
62893: ST_TO_ADDR
// sRandom := false ;
62894: LD_ADDR_EXP 100
62898: PUSH
62899: LD_INT 0
62901: ST_TO_ADDR
// sShield := false ;
62902: LD_ADDR_EXP 101
62906: PUSH
62907: LD_INT 0
62909: ST_TO_ADDR
// sTime := false ;
62910: LD_ADDR_EXP 102
62914: PUSH
62915: LD_INT 0
62917: ST_TO_ADDR
// sTools := false ;
62918: LD_ADDR_EXP 103
62922: PUSH
62923: LD_INT 0
62925: ST_TO_ADDR
// sSold := false ;
62926: LD_ADDR_EXP 68
62930: PUSH
62931: LD_INT 0
62933: ST_TO_ADDR
// sDiff := false ;
62934: LD_ADDR_EXP 69
62938: PUSH
62939: LD_INT 0
62941: ST_TO_ADDR
// sFog := false ;
62942: LD_ADDR_EXP 72
62946: PUSH
62947: LD_INT 0
62949: ST_TO_ADDR
// sReset := false ;
62950: LD_ADDR_EXP 73
62954: PUSH
62955: LD_INT 0
62957: ST_TO_ADDR
// sSun := false ;
62958: LD_ADDR_EXP 74
62962: PUSH
62963: LD_INT 0
62965: ST_TO_ADDR
// sTiger := false ;
62966: LD_ADDR_EXP 70
62970: PUSH
62971: LD_INT 0
62973: ST_TO_ADDR
// sBomb := false ;
62974: LD_ADDR_EXP 71
62978: PUSH
62979: LD_INT 0
62981: ST_TO_ADDR
// sWound := false ;
62982: LD_ADDR_EXP 79
62986: PUSH
62987: LD_INT 0
62989: ST_TO_ADDR
// sBetray := false ;
62990: LD_ADDR_EXP 83
62994: PUSH
62995: LD_INT 0
62997: ST_TO_ADDR
// sContamin := false ;
62998: LD_ADDR_EXP 84
63002: PUSH
63003: LD_INT 0
63005: ST_TO_ADDR
// sOil := false ;
63006: LD_ADDR_EXP 86
63010: PUSH
63011: LD_INT 0
63013: ST_TO_ADDR
// sStu := false ;
63014: LD_ADDR_EXP 90
63018: PUSH
63019: LD_INT 0
63021: ST_TO_ADDR
// sBazooka := false ;
63022: LD_ADDR_EXP 93
63026: PUSH
63027: LD_INT 0
63029: ST_TO_ADDR
// sMortar := false ;
63030: LD_ADDR_EXP 94
63034: PUSH
63035: LD_INT 0
63037: ST_TO_ADDR
// sRanger := false ;
63038: LD_ADDR_EXP 104
63042: PUSH
63043: LD_INT 0
63045: ST_TO_ADDR
// sComputer := false ;
63046: LD_ADDR_EXP 105
63050: PUSH
63051: LD_INT 0
63053: ST_TO_ADDR
// s30 := false ;
63054: LD_ADDR_EXP 106
63058: PUSH
63059: LD_INT 0
63061: ST_TO_ADDR
// s60 := false ;
63062: LD_ADDR_EXP 107
63066: PUSH
63067: LD_INT 0
63069: ST_TO_ADDR
// end ;
63070: LD_VAR 0 1
63074: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63075: LD_INT 0
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
63082: PPUSH
63083: PPUSH
// result := [ ] ;
63084: LD_ADDR_VAR 0 2
63088: PUSH
63089: EMPTY
63090: ST_TO_ADDR
// if campaign_id = 1 then
63091: LD_OWVAR 69
63095: PUSH
63096: LD_INT 1
63098: EQUAL
63099: IFFALSE 66265
// begin case mission_number of 1 :
63101: LD_OWVAR 70
63105: PUSH
63106: LD_INT 1
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63114
63112: GO 63190
63114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: LD_INT 11
63128: PUSH
63129: LD_INT 12
63131: PUSH
63132: LD_INT 15
63134: PUSH
63135: LD_INT 16
63137: PUSH
63138: LD_INT 22
63140: PUSH
63141: LD_INT 23
63143: PUSH
63144: LD_INT 26
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 101
63160: PUSH
63161: LD_INT 102
63163: PUSH
63164: LD_INT 106
63166: PUSH
63167: LD_INT 116
63169: PUSH
63170: LD_INT 117
63172: PUSH
63173: LD_INT 118
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: ST_TO_ADDR
63188: GO 66263
63190: LD_INT 2
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63198
63196: GO 63282
63198: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 4
63209: PUSH
63210: LD_INT 11
63212: PUSH
63213: LD_INT 12
63215: PUSH
63216: LD_INT 15
63218: PUSH
63219: LD_INT 16
63221: PUSH
63222: LD_INT 22
63224: PUSH
63225: LD_INT 23
63227: PUSH
63228: LD_INT 26
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 101
63244: PUSH
63245: LD_INT 102
63247: PUSH
63248: LD_INT 105
63250: PUSH
63251: LD_INT 106
63253: PUSH
63254: LD_INT 108
63256: PUSH
63257: LD_INT 116
63259: PUSH
63260: LD_INT 117
63262: PUSH
63263: LD_INT 118
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: ST_TO_ADDR
63280: GO 66263
63282: LD_INT 3
63284: DOUBLE
63285: EQUAL
63286: IFTRUE 63290
63288: GO 63378
63290: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63291: LD_ADDR_VAR 0 2
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: LD_INT 5
63304: PUSH
63305: LD_INT 11
63307: PUSH
63308: LD_INT 12
63310: PUSH
63311: LD_INT 15
63313: PUSH
63314: LD_INT 16
63316: PUSH
63317: LD_INT 22
63319: PUSH
63320: LD_INT 26
63322: PUSH
63323: LD_INT 36
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 101
63340: PUSH
63341: LD_INT 102
63343: PUSH
63344: LD_INT 105
63346: PUSH
63347: LD_INT 106
63349: PUSH
63350: LD_INT 108
63352: PUSH
63353: LD_INT 116
63355: PUSH
63356: LD_INT 117
63358: PUSH
63359: LD_INT 118
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: ST_TO_ADDR
63376: GO 66263
63378: LD_INT 4
63380: DOUBLE
63381: EQUAL
63382: IFTRUE 63386
63384: GO 63482
63386: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63387: LD_ADDR_VAR 0 2
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: LD_INT 5
63400: PUSH
63401: LD_INT 8
63403: PUSH
63404: LD_INT 11
63406: PUSH
63407: LD_INT 12
63409: PUSH
63410: LD_INT 15
63412: PUSH
63413: LD_INT 16
63415: PUSH
63416: LD_INT 22
63418: PUSH
63419: LD_INT 23
63421: PUSH
63422: LD_INT 26
63424: PUSH
63425: LD_INT 36
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 101
63444: PUSH
63445: LD_INT 102
63447: PUSH
63448: LD_INT 105
63450: PUSH
63451: LD_INT 106
63453: PUSH
63454: LD_INT 108
63456: PUSH
63457: LD_INT 116
63459: PUSH
63460: LD_INT 117
63462: PUSH
63463: LD_INT 118
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: ST_TO_ADDR
63480: GO 66263
63482: LD_INT 5
63484: DOUBLE
63485: EQUAL
63486: IFTRUE 63490
63488: GO 63602
63490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63491: LD_ADDR_VAR 0 2
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: LD_INT 4
63501: PUSH
63502: LD_INT 5
63504: PUSH
63505: LD_INT 6
63507: PUSH
63508: LD_INT 8
63510: PUSH
63511: LD_INT 11
63513: PUSH
63514: LD_INT 12
63516: PUSH
63517: LD_INT 15
63519: PUSH
63520: LD_INT 16
63522: PUSH
63523: LD_INT 22
63525: PUSH
63526: LD_INT 23
63528: PUSH
63529: LD_INT 25
63531: PUSH
63532: LD_INT 26
63534: PUSH
63535: LD_INT 36
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 101
63556: PUSH
63557: LD_INT 102
63559: PUSH
63560: LD_INT 105
63562: PUSH
63563: LD_INT 106
63565: PUSH
63566: LD_INT 108
63568: PUSH
63569: LD_INT 109
63571: PUSH
63572: LD_INT 112
63574: PUSH
63575: LD_INT 116
63577: PUSH
63578: LD_INT 117
63580: PUSH
63581: LD_INT 118
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: ST_TO_ADDR
63600: GO 66263
63602: LD_INT 6
63604: DOUBLE
63605: EQUAL
63606: IFTRUE 63610
63608: GO 63742
63610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63611: LD_ADDR_VAR 0 2
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: LD_INT 4
63621: PUSH
63622: LD_INT 5
63624: PUSH
63625: LD_INT 6
63627: PUSH
63628: LD_INT 8
63630: PUSH
63631: LD_INT 11
63633: PUSH
63634: LD_INT 12
63636: PUSH
63637: LD_INT 15
63639: PUSH
63640: LD_INT 16
63642: PUSH
63643: LD_INT 20
63645: PUSH
63646: LD_INT 21
63648: PUSH
63649: LD_INT 22
63651: PUSH
63652: LD_INT 23
63654: PUSH
63655: LD_INT 25
63657: PUSH
63658: LD_INT 26
63660: PUSH
63661: LD_INT 30
63663: PUSH
63664: LD_INT 31
63666: PUSH
63667: LD_INT 32
63669: PUSH
63670: LD_INT 36
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 101
63696: PUSH
63697: LD_INT 102
63699: PUSH
63700: LD_INT 105
63702: PUSH
63703: LD_INT 106
63705: PUSH
63706: LD_INT 108
63708: PUSH
63709: LD_INT 109
63711: PUSH
63712: LD_INT 112
63714: PUSH
63715: LD_INT 116
63717: PUSH
63718: LD_INT 117
63720: PUSH
63721: LD_INT 118
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: ST_TO_ADDR
63740: GO 66263
63742: LD_INT 7
63744: DOUBLE
63745: EQUAL
63746: IFTRUE 63750
63748: GO 63862
63750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63751: LD_ADDR_VAR 0 2
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: LD_INT 4
63761: PUSH
63762: LD_INT 5
63764: PUSH
63765: LD_INT 7
63767: PUSH
63768: LD_INT 11
63770: PUSH
63771: LD_INT 12
63773: PUSH
63774: LD_INT 15
63776: PUSH
63777: LD_INT 16
63779: PUSH
63780: LD_INT 20
63782: PUSH
63783: LD_INT 21
63785: PUSH
63786: LD_INT 22
63788: PUSH
63789: LD_INT 23
63791: PUSH
63792: LD_INT 25
63794: PUSH
63795: LD_INT 26
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 101
63816: PUSH
63817: LD_INT 102
63819: PUSH
63820: LD_INT 103
63822: PUSH
63823: LD_INT 105
63825: PUSH
63826: LD_INT 106
63828: PUSH
63829: LD_INT 108
63831: PUSH
63832: LD_INT 112
63834: PUSH
63835: LD_INT 116
63837: PUSH
63838: LD_INT 117
63840: PUSH
63841: LD_INT 118
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: ST_TO_ADDR
63860: GO 66263
63862: LD_INT 8
63864: DOUBLE
63865: EQUAL
63866: IFTRUE 63870
63868: GO 64010
63870: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63871: LD_ADDR_VAR 0 2
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 4
63881: PUSH
63882: LD_INT 5
63884: PUSH
63885: LD_INT 6
63887: PUSH
63888: LD_INT 7
63890: PUSH
63891: LD_INT 8
63893: PUSH
63894: LD_INT 11
63896: PUSH
63897: LD_INT 12
63899: PUSH
63900: LD_INT 15
63902: PUSH
63903: LD_INT 16
63905: PUSH
63906: LD_INT 20
63908: PUSH
63909: LD_INT 21
63911: PUSH
63912: LD_INT 22
63914: PUSH
63915: LD_INT 23
63917: PUSH
63918: LD_INT 25
63920: PUSH
63921: LD_INT 26
63923: PUSH
63924: LD_INT 30
63926: PUSH
63927: LD_INT 31
63929: PUSH
63930: LD_INT 32
63932: PUSH
63933: LD_INT 36
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 101
63960: PUSH
63961: LD_INT 102
63963: PUSH
63964: LD_INT 103
63966: PUSH
63967: LD_INT 105
63969: PUSH
63970: LD_INT 106
63972: PUSH
63973: LD_INT 108
63975: PUSH
63976: LD_INT 109
63978: PUSH
63979: LD_INT 112
63981: PUSH
63982: LD_INT 116
63984: PUSH
63985: LD_INT 117
63987: PUSH
63988: LD_INT 118
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: ST_TO_ADDR
64008: GO 66263
64010: LD_INT 9
64012: DOUBLE
64013: EQUAL
64014: IFTRUE 64018
64016: GO 64166
64018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64019: LD_ADDR_VAR 0 2
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: LD_INT 4
64029: PUSH
64030: LD_INT 5
64032: PUSH
64033: LD_INT 6
64035: PUSH
64036: LD_INT 7
64038: PUSH
64039: LD_INT 8
64041: PUSH
64042: LD_INT 11
64044: PUSH
64045: LD_INT 12
64047: PUSH
64048: LD_INT 15
64050: PUSH
64051: LD_INT 16
64053: PUSH
64054: LD_INT 20
64056: PUSH
64057: LD_INT 21
64059: PUSH
64060: LD_INT 22
64062: PUSH
64063: LD_INT 23
64065: PUSH
64066: LD_INT 25
64068: PUSH
64069: LD_INT 26
64071: PUSH
64072: LD_INT 28
64074: PUSH
64075: LD_INT 30
64077: PUSH
64078: LD_INT 31
64080: PUSH
64081: LD_INT 32
64083: PUSH
64084: LD_INT 36
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 101
64112: PUSH
64113: LD_INT 102
64115: PUSH
64116: LD_INT 103
64118: PUSH
64119: LD_INT 105
64121: PUSH
64122: LD_INT 106
64124: PUSH
64125: LD_INT 108
64127: PUSH
64128: LD_INT 109
64130: PUSH
64131: LD_INT 112
64133: PUSH
64134: LD_INT 114
64136: PUSH
64137: LD_INT 116
64139: PUSH
64140: LD_INT 117
64142: PUSH
64143: LD_INT 118
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: ST_TO_ADDR
64164: GO 66263
64166: LD_INT 10
64168: DOUBLE
64169: EQUAL
64170: IFTRUE 64174
64172: GO 64370
64174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64175: LD_ADDR_VAR 0 2
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: LD_INT 4
64185: PUSH
64186: LD_INT 5
64188: PUSH
64189: LD_INT 6
64191: PUSH
64192: LD_INT 7
64194: PUSH
64195: LD_INT 8
64197: PUSH
64198: LD_INT 9
64200: PUSH
64201: LD_INT 10
64203: PUSH
64204: LD_INT 11
64206: PUSH
64207: LD_INT 12
64209: PUSH
64210: LD_INT 13
64212: PUSH
64213: LD_INT 14
64215: PUSH
64216: LD_INT 15
64218: PUSH
64219: LD_INT 16
64221: PUSH
64222: LD_INT 17
64224: PUSH
64225: LD_INT 18
64227: PUSH
64228: LD_INT 19
64230: PUSH
64231: LD_INT 20
64233: PUSH
64234: LD_INT 21
64236: PUSH
64237: LD_INT 22
64239: PUSH
64240: LD_INT 23
64242: PUSH
64243: LD_INT 24
64245: PUSH
64246: LD_INT 25
64248: PUSH
64249: LD_INT 26
64251: PUSH
64252: LD_INT 28
64254: PUSH
64255: LD_INT 30
64257: PUSH
64258: LD_INT 31
64260: PUSH
64261: LD_INT 32
64263: PUSH
64264: LD_INT 36
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 101
64300: PUSH
64301: LD_INT 102
64303: PUSH
64304: LD_INT 103
64306: PUSH
64307: LD_INT 104
64309: PUSH
64310: LD_INT 105
64312: PUSH
64313: LD_INT 106
64315: PUSH
64316: LD_INT 107
64318: PUSH
64319: LD_INT 108
64321: PUSH
64322: LD_INT 109
64324: PUSH
64325: LD_INT 110
64327: PUSH
64328: LD_INT 111
64330: PUSH
64331: LD_INT 112
64333: PUSH
64334: LD_INT 114
64336: PUSH
64337: LD_INT 116
64339: PUSH
64340: LD_INT 117
64342: PUSH
64343: LD_INT 118
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: ST_TO_ADDR
64368: GO 66263
64370: LD_INT 11
64372: DOUBLE
64373: EQUAL
64374: IFTRUE 64378
64376: GO 64582
64378: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64379: LD_ADDR_VAR 0 2
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: LD_INT 4
64392: PUSH
64393: LD_INT 5
64395: PUSH
64396: LD_INT 6
64398: PUSH
64399: LD_INT 7
64401: PUSH
64402: LD_INT 8
64404: PUSH
64405: LD_INT 9
64407: PUSH
64408: LD_INT 10
64410: PUSH
64411: LD_INT 11
64413: PUSH
64414: LD_INT 12
64416: PUSH
64417: LD_INT 13
64419: PUSH
64420: LD_INT 14
64422: PUSH
64423: LD_INT 15
64425: PUSH
64426: LD_INT 16
64428: PUSH
64429: LD_INT 17
64431: PUSH
64432: LD_INT 18
64434: PUSH
64435: LD_INT 19
64437: PUSH
64438: LD_INT 20
64440: PUSH
64441: LD_INT 21
64443: PUSH
64444: LD_INT 22
64446: PUSH
64447: LD_INT 23
64449: PUSH
64450: LD_INT 24
64452: PUSH
64453: LD_INT 25
64455: PUSH
64456: LD_INT 26
64458: PUSH
64459: LD_INT 28
64461: PUSH
64462: LD_INT 30
64464: PUSH
64465: LD_INT 31
64467: PUSH
64468: LD_INT 32
64470: PUSH
64471: LD_INT 34
64473: PUSH
64474: LD_INT 36
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 101
64512: PUSH
64513: LD_INT 102
64515: PUSH
64516: LD_INT 103
64518: PUSH
64519: LD_INT 104
64521: PUSH
64522: LD_INT 105
64524: PUSH
64525: LD_INT 106
64527: PUSH
64528: LD_INT 107
64530: PUSH
64531: LD_INT 108
64533: PUSH
64534: LD_INT 109
64536: PUSH
64537: LD_INT 110
64539: PUSH
64540: LD_INT 111
64542: PUSH
64543: LD_INT 112
64545: PUSH
64546: LD_INT 114
64548: PUSH
64549: LD_INT 116
64551: PUSH
64552: LD_INT 117
64554: PUSH
64555: LD_INT 118
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: ST_TO_ADDR
64580: GO 66263
64582: LD_INT 12
64584: DOUBLE
64585: EQUAL
64586: IFTRUE 64590
64588: GO 64810
64590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64591: LD_ADDR_VAR 0 2
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: LD_INT 4
64607: PUSH
64608: LD_INT 5
64610: PUSH
64611: LD_INT 6
64613: PUSH
64614: LD_INT 7
64616: PUSH
64617: LD_INT 8
64619: PUSH
64620: LD_INT 9
64622: PUSH
64623: LD_INT 10
64625: PUSH
64626: LD_INT 11
64628: PUSH
64629: LD_INT 12
64631: PUSH
64632: LD_INT 13
64634: PUSH
64635: LD_INT 14
64637: PUSH
64638: LD_INT 15
64640: PUSH
64641: LD_INT 16
64643: PUSH
64644: LD_INT 17
64646: PUSH
64647: LD_INT 18
64649: PUSH
64650: LD_INT 19
64652: PUSH
64653: LD_INT 20
64655: PUSH
64656: LD_INT 21
64658: PUSH
64659: LD_INT 22
64661: PUSH
64662: LD_INT 23
64664: PUSH
64665: LD_INT 24
64667: PUSH
64668: LD_INT 25
64670: PUSH
64671: LD_INT 26
64673: PUSH
64674: LD_INT 27
64676: PUSH
64677: LD_INT 28
64679: PUSH
64680: LD_INT 30
64682: PUSH
64683: LD_INT 31
64685: PUSH
64686: LD_INT 32
64688: PUSH
64689: LD_INT 33
64691: PUSH
64692: LD_INT 34
64694: PUSH
64695: LD_INT 36
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 101
64736: PUSH
64737: LD_INT 102
64739: PUSH
64740: LD_INT 103
64742: PUSH
64743: LD_INT 104
64745: PUSH
64746: LD_INT 105
64748: PUSH
64749: LD_INT 106
64751: PUSH
64752: LD_INT 107
64754: PUSH
64755: LD_INT 108
64757: PUSH
64758: LD_INT 109
64760: PUSH
64761: LD_INT 110
64763: PUSH
64764: LD_INT 111
64766: PUSH
64767: LD_INT 112
64769: PUSH
64770: LD_INT 113
64772: PUSH
64773: LD_INT 114
64775: PUSH
64776: LD_INT 116
64778: PUSH
64779: LD_INT 117
64781: PUSH
64782: LD_INT 118
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: ST_TO_ADDR
64808: GO 66263
64810: LD_INT 13
64812: DOUBLE
64813: EQUAL
64814: IFTRUE 64818
64816: GO 65026
64818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64819: LD_ADDR_VAR 0 2
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: LD_INT 5
64838: PUSH
64839: LD_INT 8
64841: PUSH
64842: LD_INT 9
64844: PUSH
64845: LD_INT 10
64847: PUSH
64848: LD_INT 11
64850: PUSH
64851: LD_INT 12
64853: PUSH
64854: LD_INT 14
64856: PUSH
64857: LD_INT 15
64859: PUSH
64860: LD_INT 16
64862: PUSH
64863: LD_INT 17
64865: PUSH
64866: LD_INT 18
64868: PUSH
64869: LD_INT 19
64871: PUSH
64872: LD_INT 20
64874: PUSH
64875: LD_INT 21
64877: PUSH
64878: LD_INT 22
64880: PUSH
64881: LD_INT 23
64883: PUSH
64884: LD_INT 24
64886: PUSH
64887: LD_INT 25
64889: PUSH
64890: LD_INT 26
64892: PUSH
64893: LD_INT 27
64895: PUSH
64896: LD_INT 28
64898: PUSH
64899: LD_INT 30
64901: PUSH
64902: LD_INT 31
64904: PUSH
64905: LD_INT 32
64907: PUSH
64908: LD_INT 33
64910: PUSH
64911: LD_INT 34
64913: PUSH
64914: LD_INT 36
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 101
64952: PUSH
64953: LD_INT 102
64955: PUSH
64956: LD_INT 103
64958: PUSH
64959: LD_INT 104
64961: PUSH
64962: LD_INT 105
64964: PUSH
64965: LD_INT 106
64967: PUSH
64968: LD_INT 107
64970: PUSH
64971: LD_INT 108
64973: PUSH
64974: LD_INT 109
64976: PUSH
64977: LD_INT 110
64979: PUSH
64980: LD_INT 111
64982: PUSH
64983: LD_INT 112
64985: PUSH
64986: LD_INT 113
64988: PUSH
64989: LD_INT 114
64991: PUSH
64992: LD_INT 116
64994: PUSH
64995: LD_INT 117
64997: PUSH
64998: LD_INT 118
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: ST_TO_ADDR
65024: GO 66263
65026: LD_INT 14
65028: DOUBLE
65029: EQUAL
65030: IFTRUE 65034
65032: GO 65258
65034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65035: LD_ADDR_VAR 0 2
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 2
65045: PUSH
65046: LD_INT 3
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: LD_INT 5
65054: PUSH
65055: LD_INT 6
65057: PUSH
65058: LD_INT 7
65060: PUSH
65061: LD_INT 8
65063: PUSH
65064: LD_INT 9
65066: PUSH
65067: LD_INT 10
65069: PUSH
65070: LD_INT 11
65072: PUSH
65073: LD_INT 12
65075: PUSH
65076: LD_INT 13
65078: PUSH
65079: LD_INT 14
65081: PUSH
65082: LD_INT 15
65084: PUSH
65085: LD_INT 16
65087: PUSH
65088: LD_INT 17
65090: PUSH
65091: LD_INT 18
65093: PUSH
65094: LD_INT 19
65096: PUSH
65097: LD_INT 20
65099: PUSH
65100: LD_INT 21
65102: PUSH
65103: LD_INT 22
65105: PUSH
65106: LD_INT 23
65108: PUSH
65109: LD_INT 24
65111: PUSH
65112: LD_INT 25
65114: PUSH
65115: LD_INT 26
65117: PUSH
65118: LD_INT 27
65120: PUSH
65121: LD_INT 28
65123: PUSH
65124: LD_INT 29
65126: PUSH
65127: LD_INT 30
65129: PUSH
65130: LD_INT 31
65132: PUSH
65133: LD_INT 32
65135: PUSH
65136: LD_INT 33
65138: PUSH
65139: LD_INT 34
65141: PUSH
65142: LD_INT 36
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 101
65184: PUSH
65185: LD_INT 102
65187: PUSH
65188: LD_INT 103
65190: PUSH
65191: LD_INT 104
65193: PUSH
65194: LD_INT 105
65196: PUSH
65197: LD_INT 106
65199: PUSH
65200: LD_INT 107
65202: PUSH
65203: LD_INT 108
65205: PUSH
65206: LD_INT 109
65208: PUSH
65209: LD_INT 110
65211: PUSH
65212: LD_INT 111
65214: PUSH
65215: LD_INT 112
65217: PUSH
65218: LD_INT 113
65220: PUSH
65221: LD_INT 114
65223: PUSH
65224: LD_INT 116
65226: PUSH
65227: LD_INT 117
65229: PUSH
65230: LD_INT 118
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: ST_TO_ADDR
65256: GO 66263
65258: LD_INT 15
65260: DOUBLE
65261: EQUAL
65262: IFTRUE 65266
65264: GO 65490
65266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65267: LD_ADDR_VAR 0 2
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: LD_INT 4
65283: PUSH
65284: LD_INT 5
65286: PUSH
65287: LD_INT 6
65289: PUSH
65290: LD_INT 7
65292: PUSH
65293: LD_INT 8
65295: PUSH
65296: LD_INT 9
65298: PUSH
65299: LD_INT 10
65301: PUSH
65302: LD_INT 11
65304: PUSH
65305: LD_INT 12
65307: PUSH
65308: LD_INT 13
65310: PUSH
65311: LD_INT 14
65313: PUSH
65314: LD_INT 15
65316: PUSH
65317: LD_INT 16
65319: PUSH
65320: LD_INT 17
65322: PUSH
65323: LD_INT 18
65325: PUSH
65326: LD_INT 19
65328: PUSH
65329: LD_INT 20
65331: PUSH
65332: LD_INT 21
65334: PUSH
65335: LD_INT 22
65337: PUSH
65338: LD_INT 23
65340: PUSH
65341: LD_INT 24
65343: PUSH
65344: LD_INT 25
65346: PUSH
65347: LD_INT 26
65349: PUSH
65350: LD_INT 27
65352: PUSH
65353: LD_INT 28
65355: PUSH
65356: LD_INT 29
65358: PUSH
65359: LD_INT 30
65361: PUSH
65362: LD_INT 31
65364: PUSH
65365: LD_INT 32
65367: PUSH
65368: LD_INT 33
65370: PUSH
65371: LD_INT 34
65373: PUSH
65374: LD_INT 36
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 101
65416: PUSH
65417: LD_INT 102
65419: PUSH
65420: LD_INT 103
65422: PUSH
65423: LD_INT 104
65425: PUSH
65426: LD_INT 105
65428: PUSH
65429: LD_INT 106
65431: PUSH
65432: LD_INT 107
65434: PUSH
65435: LD_INT 108
65437: PUSH
65438: LD_INT 109
65440: PUSH
65441: LD_INT 110
65443: PUSH
65444: LD_INT 111
65446: PUSH
65447: LD_INT 112
65449: PUSH
65450: LD_INT 113
65452: PUSH
65453: LD_INT 114
65455: PUSH
65456: LD_INT 116
65458: PUSH
65459: LD_INT 117
65461: PUSH
65462: LD_INT 118
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: ST_TO_ADDR
65488: GO 66263
65490: LD_INT 16
65492: DOUBLE
65493: EQUAL
65494: IFTRUE 65498
65496: GO 65634
65498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65499: LD_ADDR_VAR 0 2
65503: PUSH
65504: LD_INT 2
65506: PUSH
65507: LD_INT 4
65509: PUSH
65510: LD_INT 5
65512: PUSH
65513: LD_INT 7
65515: PUSH
65516: LD_INT 11
65518: PUSH
65519: LD_INT 12
65521: PUSH
65522: LD_INT 15
65524: PUSH
65525: LD_INT 16
65527: PUSH
65528: LD_INT 20
65530: PUSH
65531: LD_INT 21
65533: PUSH
65534: LD_INT 22
65536: PUSH
65537: LD_INT 23
65539: PUSH
65540: LD_INT 25
65542: PUSH
65543: LD_INT 26
65545: PUSH
65546: LD_INT 30
65548: PUSH
65549: LD_INT 31
65551: PUSH
65552: LD_INT 32
65554: PUSH
65555: LD_INT 33
65557: PUSH
65558: LD_INT 34
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 101
65584: PUSH
65585: LD_INT 102
65587: PUSH
65588: LD_INT 103
65590: PUSH
65591: LD_INT 106
65593: PUSH
65594: LD_INT 108
65596: PUSH
65597: LD_INT 112
65599: PUSH
65600: LD_INT 113
65602: PUSH
65603: LD_INT 114
65605: PUSH
65606: LD_INT 116
65608: PUSH
65609: LD_INT 117
65611: PUSH
65612: LD_INT 118
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: ST_TO_ADDR
65632: GO 66263
65634: LD_INT 17
65636: DOUBLE
65637: EQUAL
65638: IFTRUE 65642
65640: GO 65866
65642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65643: LD_ADDR_VAR 0 2
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: LD_INT 3
65656: PUSH
65657: LD_INT 4
65659: PUSH
65660: LD_INT 5
65662: PUSH
65663: LD_INT 6
65665: PUSH
65666: LD_INT 7
65668: PUSH
65669: LD_INT 8
65671: PUSH
65672: LD_INT 9
65674: PUSH
65675: LD_INT 10
65677: PUSH
65678: LD_INT 11
65680: PUSH
65681: LD_INT 12
65683: PUSH
65684: LD_INT 13
65686: PUSH
65687: LD_INT 14
65689: PUSH
65690: LD_INT 15
65692: PUSH
65693: LD_INT 16
65695: PUSH
65696: LD_INT 17
65698: PUSH
65699: LD_INT 18
65701: PUSH
65702: LD_INT 19
65704: PUSH
65705: LD_INT 20
65707: PUSH
65708: LD_INT 21
65710: PUSH
65711: LD_INT 22
65713: PUSH
65714: LD_INT 23
65716: PUSH
65717: LD_INT 24
65719: PUSH
65720: LD_INT 25
65722: PUSH
65723: LD_INT 26
65725: PUSH
65726: LD_INT 27
65728: PUSH
65729: LD_INT 28
65731: PUSH
65732: LD_INT 29
65734: PUSH
65735: LD_INT 30
65737: PUSH
65738: LD_INT 31
65740: PUSH
65741: LD_INT 32
65743: PUSH
65744: LD_INT 33
65746: PUSH
65747: LD_INT 34
65749: PUSH
65750: LD_INT 36
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 101
65792: PUSH
65793: LD_INT 102
65795: PUSH
65796: LD_INT 103
65798: PUSH
65799: LD_INT 104
65801: PUSH
65802: LD_INT 105
65804: PUSH
65805: LD_INT 106
65807: PUSH
65808: LD_INT 107
65810: PUSH
65811: LD_INT 108
65813: PUSH
65814: LD_INT 109
65816: PUSH
65817: LD_INT 110
65819: PUSH
65820: LD_INT 111
65822: PUSH
65823: LD_INT 112
65825: PUSH
65826: LD_INT 113
65828: PUSH
65829: LD_INT 114
65831: PUSH
65832: LD_INT 116
65834: PUSH
65835: LD_INT 117
65837: PUSH
65838: LD_INT 118
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: ST_TO_ADDR
65864: GO 66263
65866: LD_INT 18
65868: DOUBLE
65869: EQUAL
65870: IFTRUE 65874
65872: GO 66022
65874: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65875: LD_ADDR_VAR 0 2
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 4
65885: PUSH
65886: LD_INT 5
65888: PUSH
65889: LD_INT 7
65891: PUSH
65892: LD_INT 11
65894: PUSH
65895: LD_INT 12
65897: PUSH
65898: LD_INT 15
65900: PUSH
65901: LD_INT 16
65903: PUSH
65904: LD_INT 20
65906: PUSH
65907: LD_INT 21
65909: PUSH
65910: LD_INT 22
65912: PUSH
65913: LD_INT 23
65915: PUSH
65916: LD_INT 25
65918: PUSH
65919: LD_INT 26
65921: PUSH
65922: LD_INT 30
65924: PUSH
65925: LD_INT 31
65927: PUSH
65928: LD_INT 32
65930: PUSH
65931: LD_INT 33
65933: PUSH
65934: LD_INT 34
65936: PUSH
65937: LD_INT 35
65939: PUSH
65940: LD_INT 36
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 101
65968: PUSH
65969: LD_INT 102
65971: PUSH
65972: LD_INT 103
65974: PUSH
65975: LD_INT 106
65977: PUSH
65978: LD_INT 108
65980: PUSH
65981: LD_INT 112
65983: PUSH
65984: LD_INT 113
65986: PUSH
65987: LD_INT 114
65989: PUSH
65990: LD_INT 115
65992: PUSH
65993: LD_INT 116
65995: PUSH
65996: LD_INT 117
65998: PUSH
65999: LD_INT 118
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: ST_TO_ADDR
66020: GO 66263
66022: LD_INT 19
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66030
66028: GO 66262
66030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66031: LD_ADDR_VAR 0 2
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: LD_INT 4
66047: PUSH
66048: LD_INT 5
66050: PUSH
66051: LD_INT 6
66053: PUSH
66054: LD_INT 7
66056: PUSH
66057: LD_INT 8
66059: PUSH
66060: LD_INT 9
66062: PUSH
66063: LD_INT 10
66065: PUSH
66066: LD_INT 11
66068: PUSH
66069: LD_INT 12
66071: PUSH
66072: LD_INT 13
66074: PUSH
66075: LD_INT 14
66077: PUSH
66078: LD_INT 15
66080: PUSH
66081: LD_INT 16
66083: PUSH
66084: LD_INT 17
66086: PUSH
66087: LD_INT 18
66089: PUSH
66090: LD_INT 19
66092: PUSH
66093: LD_INT 20
66095: PUSH
66096: LD_INT 21
66098: PUSH
66099: LD_INT 22
66101: PUSH
66102: LD_INT 23
66104: PUSH
66105: LD_INT 24
66107: PUSH
66108: LD_INT 25
66110: PUSH
66111: LD_INT 26
66113: PUSH
66114: LD_INT 27
66116: PUSH
66117: LD_INT 28
66119: PUSH
66120: LD_INT 29
66122: PUSH
66123: LD_INT 30
66125: PUSH
66126: LD_INT 31
66128: PUSH
66129: LD_INT 32
66131: PUSH
66132: LD_INT 33
66134: PUSH
66135: LD_INT 34
66137: PUSH
66138: LD_INT 35
66140: PUSH
66141: LD_INT 36
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 101
66184: PUSH
66185: LD_INT 102
66187: PUSH
66188: LD_INT 103
66190: PUSH
66191: LD_INT 104
66193: PUSH
66194: LD_INT 105
66196: PUSH
66197: LD_INT 106
66199: PUSH
66200: LD_INT 107
66202: PUSH
66203: LD_INT 108
66205: PUSH
66206: LD_INT 109
66208: PUSH
66209: LD_INT 110
66211: PUSH
66212: LD_INT 111
66214: PUSH
66215: LD_INT 112
66217: PUSH
66218: LD_INT 113
66220: PUSH
66221: LD_INT 114
66223: PUSH
66224: LD_INT 115
66226: PUSH
66227: LD_INT 116
66229: PUSH
66230: LD_INT 117
66232: PUSH
66233: LD_INT 118
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: ST_TO_ADDR
66260: GO 66263
66262: POP
// end else
66263: GO 66494
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66265: LD_ADDR_VAR 0 2
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 4
66281: PUSH
66282: LD_INT 5
66284: PUSH
66285: LD_INT 6
66287: PUSH
66288: LD_INT 7
66290: PUSH
66291: LD_INT 8
66293: PUSH
66294: LD_INT 9
66296: PUSH
66297: LD_INT 10
66299: PUSH
66300: LD_INT 11
66302: PUSH
66303: LD_INT 12
66305: PUSH
66306: LD_INT 13
66308: PUSH
66309: LD_INT 14
66311: PUSH
66312: LD_INT 15
66314: PUSH
66315: LD_INT 16
66317: PUSH
66318: LD_INT 17
66320: PUSH
66321: LD_INT 18
66323: PUSH
66324: LD_INT 19
66326: PUSH
66327: LD_INT 20
66329: PUSH
66330: LD_INT 21
66332: PUSH
66333: LD_INT 22
66335: PUSH
66336: LD_INT 23
66338: PUSH
66339: LD_INT 24
66341: PUSH
66342: LD_INT 25
66344: PUSH
66345: LD_INT 26
66347: PUSH
66348: LD_INT 27
66350: PUSH
66351: LD_INT 28
66353: PUSH
66354: LD_INT 29
66356: PUSH
66357: LD_INT 30
66359: PUSH
66360: LD_INT 31
66362: PUSH
66363: LD_INT 32
66365: PUSH
66366: LD_INT 33
66368: PUSH
66369: LD_INT 34
66371: PUSH
66372: LD_INT 35
66374: PUSH
66375: LD_INT 36
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 101
66418: PUSH
66419: LD_INT 102
66421: PUSH
66422: LD_INT 103
66424: PUSH
66425: LD_INT 104
66427: PUSH
66428: LD_INT 105
66430: PUSH
66431: LD_INT 106
66433: PUSH
66434: LD_INT 107
66436: PUSH
66437: LD_INT 108
66439: PUSH
66440: LD_INT 109
66442: PUSH
66443: LD_INT 110
66445: PUSH
66446: LD_INT 111
66448: PUSH
66449: LD_INT 112
66451: PUSH
66452: LD_INT 113
66454: PUSH
66455: LD_INT 114
66457: PUSH
66458: LD_INT 115
66460: PUSH
66461: LD_INT 116
66463: PUSH
66464: LD_INT 117
66466: PUSH
66467: LD_INT 118
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// if result then
66494: LD_VAR 0 2
66498: IFFALSE 67284
// begin normal :=  ;
66500: LD_ADDR_VAR 0 5
66504: PUSH
66505: LD_STRING 
66507: ST_TO_ADDR
// hardcore :=  ;
66508: LD_ADDR_VAR 0 6
66512: PUSH
66513: LD_STRING 
66515: ST_TO_ADDR
// active :=  ;
66516: LD_ADDR_VAR 0 7
66520: PUSH
66521: LD_STRING 
66523: ST_TO_ADDR
// for i = 1 to normalCounter do
66524: LD_ADDR_VAR 0 8
66528: PUSH
66529: DOUBLE
66530: LD_INT 1
66532: DEC
66533: ST_TO_ADDR
66534: LD_EXP 52
66538: PUSH
66539: FOR_TO
66540: IFFALSE 66641
// begin tmp := 0 ;
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_STRING 0
66549: ST_TO_ADDR
// if result [ 1 ] then
66550: LD_VAR 0 2
66554: PUSH
66555: LD_INT 1
66557: ARRAY
66558: IFFALSE 66623
// if result [ 1 ] [ 1 ] = i then
66560: LD_VAR 0 2
66564: PUSH
66565: LD_INT 1
66567: ARRAY
66568: PUSH
66569: LD_INT 1
66571: ARRAY
66572: PUSH
66573: LD_VAR 0 8
66577: EQUAL
66578: IFFALSE 66623
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66580: LD_ADDR_VAR 0 2
66584: PUSH
66585: LD_VAR 0 2
66589: PPUSH
66590: LD_INT 1
66592: PPUSH
66593: LD_VAR 0 2
66597: PUSH
66598: LD_INT 1
66600: ARRAY
66601: PPUSH
66602: LD_INT 1
66604: PPUSH
66605: CALL_OW 3
66609: PPUSH
66610: CALL_OW 1
66614: ST_TO_ADDR
// tmp := 1 ;
66615: LD_ADDR_VAR 0 3
66619: PUSH
66620: LD_STRING 1
66622: ST_TO_ADDR
// end ; normal := normal & tmp ;
66623: LD_ADDR_VAR 0 5
66627: PUSH
66628: LD_VAR 0 5
66632: PUSH
66633: LD_VAR 0 3
66637: STR
66638: ST_TO_ADDR
// end ;
66639: GO 66539
66641: POP
66642: POP
// for i = 1 to hardcoreCounter do
66643: LD_ADDR_VAR 0 8
66647: PUSH
66648: DOUBLE
66649: LD_INT 1
66651: DEC
66652: ST_TO_ADDR
66653: LD_EXP 53
66657: PUSH
66658: FOR_TO
66659: IFFALSE 66764
// begin tmp := 0 ;
66661: LD_ADDR_VAR 0 3
66665: PUSH
66666: LD_STRING 0
66668: ST_TO_ADDR
// if result [ 2 ] then
66669: LD_VAR 0 2
66673: PUSH
66674: LD_INT 2
66676: ARRAY
66677: IFFALSE 66746
// if result [ 2 ] [ 1 ] = 100 + i then
66679: LD_VAR 0 2
66683: PUSH
66684: LD_INT 2
66686: ARRAY
66687: PUSH
66688: LD_INT 1
66690: ARRAY
66691: PUSH
66692: LD_INT 100
66694: PUSH
66695: LD_VAR 0 8
66699: PLUS
66700: EQUAL
66701: IFFALSE 66746
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66703: LD_ADDR_VAR 0 2
66707: PUSH
66708: LD_VAR 0 2
66712: PPUSH
66713: LD_INT 2
66715: PPUSH
66716: LD_VAR 0 2
66720: PUSH
66721: LD_INT 2
66723: ARRAY
66724: PPUSH
66725: LD_INT 1
66727: PPUSH
66728: CALL_OW 3
66732: PPUSH
66733: CALL_OW 1
66737: ST_TO_ADDR
// tmp := 1 ;
66738: LD_ADDR_VAR 0 3
66742: PUSH
66743: LD_STRING 1
66745: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66746: LD_ADDR_VAR 0 6
66750: PUSH
66751: LD_VAR 0 6
66755: PUSH
66756: LD_VAR 0 3
66760: STR
66761: ST_TO_ADDR
// end ;
66762: GO 66658
66764: POP
66765: POP
// if isGameLoad then
66766: LD_VAR 0 1
66770: IFFALSE 67245
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66772: LD_ADDR_VAR 0 4
66776: PUSH
66777: LD_EXP 56
66781: PUSH
66782: LD_EXP 55
66786: PUSH
66787: LD_EXP 57
66791: PUSH
66792: LD_EXP 54
66796: PUSH
66797: LD_EXP 58
66801: PUSH
66802: LD_EXP 59
66806: PUSH
66807: LD_EXP 60
66811: PUSH
66812: LD_EXP 61
66816: PUSH
66817: LD_EXP 62
66821: PUSH
66822: LD_EXP 63
66826: PUSH
66827: LD_EXP 64
66831: PUSH
66832: LD_EXP 65
66836: PUSH
66837: LD_EXP 66
66841: PUSH
66842: LD_EXP 67
66846: PUSH
66847: LD_EXP 75
66851: PUSH
66852: LD_EXP 76
66856: PUSH
66857: LD_EXP 77
66861: PUSH
66862: LD_EXP 78
66866: PUSH
66867: LD_EXP 80
66871: PUSH
66872: LD_EXP 81
66876: PUSH
66877: LD_EXP 82
66881: PUSH
66882: LD_EXP 85
66886: PUSH
66887: LD_EXP 87
66891: PUSH
66892: LD_EXP 88
66896: PUSH
66897: LD_EXP 89
66901: PUSH
66902: LD_EXP 91
66906: PUSH
66907: LD_EXP 92
66911: PUSH
66912: LD_EXP 95
66916: PUSH
66917: LD_EXP 96
66921: PUSH
66922: LD_EXP 97
66926: PUSH
66927: LD_EXP 98
66931: PUSH
66932: LD_EXP 99
66936: PUSH
66937: LD_EXP 100
66941: PUSH
66942: LD_EXP 101
66946: PUSH
66947: LD_EXP 102
66951: PUSH
66952: LD_EXP 103
66956: PUSH
66957: LD_EXP 68
66961: PUSH
66962: LD_EXP 69
66966: PUSH
66967: LD_EXP 72
66971: PUSH
66972: LD_EXP 73
66976: PUSH
66977: LD_EXP 74
66981: PUSH
66982: LD_EXP 70
66986: PUSH
66987: LD_EXP 71
66991: PUSH
66992: LD_EXP 79
66996: PUSH
66997: LD_EXP 83
67001: PUSH
67002: LD_EXP 84
67006: PUSH
67007: LD_EXP 86
67011: PUSH
67012: LD_EXP 90
67016: PUSH
67017: LD_EXP 93
67021: PUSH
67022: LD_EXP 94
67026: PUSH
67027: LD_EXP 104
67031: PUSH
67032: LD_EXP 105
67036: PUSH
67037: LD_EXP 106
67041: PUSH
67042: LD_EXP 107
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: ST_TO_ADDR
// tmp :=  ;
67103: LD_ADDR_VAR 0 3
67107: PUSH
67108: LD_STRING 
67110: ST_TO_ADDR
// for i = 1 to normalCounter do
67111: LD_ADDR_VAR 0 8
67115: PUSH
67116: DOUBLE
67117: LD_INT 1
67119: DEC
67120: ST_TO_ADDR
67121: LD_EXP 52
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67163
// begin if flags [ i ] then
67129: LD_VAR 0 4
67133: PUSH
67134: LD_VAR 0 8
67138: ARRAY
67139: IFFALSE 67161
// tmp := tmp & i & ; ;
67141: LD_ADDR_VAR 0 3
67145: PUSH
67146: LD_VAR 0 3
67150: PUSH
67151: LD_VAR 0 8
67155: STR
67156: PUSH
67157: LD_STRING ;
67159: STR
67160: ST_TO_ADDR
// end ;
67161: GO 67126
67163: POP
67164: POP
// for i = 1 to hardcoreCounter do
67165: LD_ADDR_VAR 0 8
67169: PUSH
67170: DOUBLE
67171: LD_INT 1
67173: DEC
67174: ST_TO_ADDR
67175: LD_EXP 53
67179: PUSH
67180: FOR_TO
67181: IFFALSE 67227
// begin if flags [ normalCounter + i ] then
67183: LD_VAR 0 4
67187: PUSH
67188: LD_EXP 52
67192: PUSH
67193: LD_VAR 0 8
67197: PLUS
67198: ARRAY
67199: IFFALSE 67225
// tmp := tmp & ( 100 + i ) & ; ;
67201: LD_ADDR_VAR 0 3
67205: PUSH
67206: LD_VAR 0 3
67210: PUSH
67211: LD_INT 100
67213: PUSH
67214: LD_VAR 0 8
67218: PLUS
67219: STR
67220: PUSH
67221: LD_STRING ;
67223: STR
67224: ST_TO_ADDR
// end ;
67225: GO 67180
67227: POP
67228: POP
// if tmp then
67229: LD_VAR 0 3
67233: IFFALSE 67245
// active := tmp ;
67235: LD_ADDR_VAR 0 7
67239: PUSH
67240: LD_VAR 0 3
67244: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67245: LD_STRING getStreamItemsFromMission("
67247: PUSH
67248: LD_VAR 0 5
67252: STR
67253: PUSH
67254: LD_STRING ","
67256: STR
67257: PUSH
67258: LD_VAR 0 6
67262: STR
67263: PUSH
67264: LD_STRING ","
67266: STR
67267: PUSH
67268: LD_VAR 0 7
67272: STR
67273: PUSH
67274: LD_STRING ")
67276: STR
67277: PPUSH
67278: CALL_OW 559
// end else
67282: GO 67291
// ToLua ( getStreamItemsFromMission("","","") ) ;
67284: LD_STRING getStreamItemsFromMission("","","")
67286: PPUSH
67287: CALL_OW 559
// end ;
67291: LD_VAR 0 2
67295: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67296: LD_EXP 51
67300: IFFALSE 67308
67302: PUSH
67303: LD_EXP 56
67307: AND
67308: IFFALSE 67432
67310: GO 67312
67312: DISABLE
67313: LD_INT 0
67315: PPUSH
67316: PPUSH
// begin enable ;
67317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67318: LD_ADDR_VAR 0 2
67322: PUSH
67323: LD_INT 22
67325: PUSH
67326: LD_OWVAR 2
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: LD_INT 34
67340: PUSH
67341: LD_INT 7
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 34
67350: PUSH
67351: LD_INT 45
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 34
67360: PUSH
67361: LD_INT 28
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 34
67370: PUSH
67371: LD_INT 47
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PPUSH
67389: CALL_OW 69
67393: ST_TO_ADDR
// if not tmp then
67394: LD_VAR 0 2
67398: NOT
67399: IFFALSE 67403
// exit ;
67401: GO 67432
// for i in tmp do
67403: LD_ADDR_VAR 0 1
67407: PUSH
67408: LD_VAR 0 2
67412: PUSH
67413: FOR_IN
67414: IFFALSE 67430
// begin SetLives ( i , 0 ) ;
67416: LD_VAR 0 1
67420: PPUSH
67421: LD_INT 0
67423: PPUSH
67424: CALL_OW 234
// end ;
67428: GO 67413
67430: POP
67431: POP
// end ;
67432: PPOPN 2
67434: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67435: LD_EXP 51
67439: IFFALSE 67447
67441: PUSH
67442: LD_EXP 57
67446: AND
67447: IFFALSE 67531
67449: GO 67451
67451: DISABLE
67452: LD_INT 0
67454: PPUSH
67455: PPUSH
// begin enable ;
67456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67457: LD_ADDR_VAR 0 2
67461: PUSH
67462: LD_INT 22
67464: PUSH
67465: LD_OWVAR 2
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 32
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PPUSH
67488: CALL_OW 69
67492: ST_TO_ADDR
// if not tmp then
67493: LD_VAR 0 2
67497: NOT
67498: IFFALSE 67502
// exit ;
67500: GO 67531
// for i in tmp do
67502: LD_ADDR_VAR 0 1
67506: PUSH
67507: LD_VAR 0 2
67511: PUSH
67512: FOR_IN
67513: IFFALSE 67529
// begin SetLives ( i , 0 ) ;
67515: LD_VAR 0 1
67519: PPUSH
67520: LD_INT 0
67522: PPUSH
67523: CALL_OW 234
// end ;
67527: GO 67512
67529: POP
67530: POP
// end ;
67531: PPOPN 2
67533: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67534: LD_EXP 51
67538: IFFALSE 67546
67540: PUSH
67541: LD_EXP 54
67545: AND
67546: IFFALSE 67639
67548: GO 67550
67550: DISABLE
67551: LD_INT 0
67553: PPUSH
// begin enable ;
67554: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67555: LD_ADDR_VAR 0 1
67559: PUSH
67560: LD_INT 22
67562: PUSH
67563: LD_OWVAR 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: LD_INT 25
67577: PUSH
67578: LD_INT 5
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 25
67587: PUSH
67588: LD_INT 9
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 25
67597: PUSH
67598: LD_INT 8
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PPUSH
67615: CALL_OW 69
67619: PUSH
67620: FOR_IN
67621: IFFALSE 67637
// begin SetClass ( i , 1 ) ;
67623: LD_VAR 0 1
67627: PPUSH
67628: LD_INT 1
67630: PPUSH
67631: CALL_OW 336
// end ;
67635: GO 67620
67637: POP
67638: POP
// end ;
67639: PPOPN 1
67641: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67642: LD_EXP 51
67646: IFFALSE 67654
67648: PUSH
67649: LD_EXP 55
67653: AND
67654: IFFALSE 67666
67656: PUSH
67657: LD_OWVAR 65
67661: PUSH
67662: LD_INT 7
67664: LESS
67665: AND
67666: IFFALSE 67680
67668: GO 67670
67670: DISABLE
// begin enable ;
67671: ENABLE
// game_speed := 7 ;
67672: LD_ADDR_OWVAR 65
67676: PUSH
67677: LD_INT 7
67679: ST_TO_ADDR
// end ;
67680: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67681: LD_EXP 51
67685: IFFALSE 67693
67687: PUSH
67688: LD_EXP 58
67692: AND
67693: IFFALSE 67895
67695: GO 67697
67697: DISABLE
67698: LD_INT 0
67700: PPUSH
67701: PPUSH
67702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: LD_INT 81
67710: PUSH
67711: LD_OWVAR 2
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 21
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PPUSH
67734: CALL_OW 69
67738: ST_TO_ADDR
// if not tmp then
67739: LD_VAR 0 3
67743: NOT
67744: IFFALSE 67748
// exit ;
67746: GO 67895
// if tmp > 5 then
67748: LD_VAR 0 3
67752: PUSH
67753: LD_INT 5
67755: GREATER
67756: IFFALSE 67768
// k := 5 else
67758: LD_ADDR_VAR 0 2
67762: PUSH
67763: LD_INT 5
67765: ST_TO_ADDR
67766: GO 67778
// k := tmp ;
67768: LD_ADDR_VAR 0 2
67772: PUSH
67773: LD_VAR 0 3
67777: ST_TO_ADDR
// for i := 1 to k do
67778: LD_ADDR_VAR 0 1
67782: PUSH
67783: DOUBLE
67784: LD_INT 1
67786: DEC
67787: ST_TO_ADDR
67788: LD_VAR 0 2
67792: PUSH
67793: FOR_TO
67794: IFFALSE 67893
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67796: LD_VAR 0 3
67800: PUSH
67801: LD_VAR 0 1
67805: ARRAY
67806: PPUSH
67807: LD_VAR 0 1
67811: PUSH
67812: LD_INT 4
67814: MOD
67815: PUSH
67816: LD_INT 1
67818: PLUS
67819: PPUSH
67820: CALL_OW 259
67824: PUSH
67825: LD_INT 10
67827: LESS
67828: IFFALSE 67891
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67830: LD_VAR 0 3
67834: PUSH
67835: LD_VAR 0 1
67839: ARRAY
67840: PPUSH
67841: LD_VAR 0 1
67845: PUSH
67846: LD_INT 4
67848: MOD
67849: PUSH
67850: LD_INT 1
67852: PLUS
67853: PPUSH
67854: LD_VAR 0 3
67858: PUSH
67859: LD_VAR 0 1
67863: ARRAY
67864: PPUSH
67865: LD_VAR 0 1
67869: PUSH
67870: LD_INT 4
67872: MOD
67873: PUSH
67874: LD_INT 1
67876: PLUS
67877: PPUSH
67878: CALL_OW 259
67882: PUSH
67883: LD_INT 1
67885: PLUS
67886: PPUSH
67887: CALL_OW 237
67891: GO 67793
67893: POP
67894: POP
// end ;
67895: PPOPN 3
67897: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67898: LD_EXP 51
67902: IFFALSE 67910
67904: PUSH
67905: LD_EXP 59
67909: AND
67910: IFFALSE 67930
67912: GO 67914
67914: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67915: LD_INT 4
67917: PPUSH
67918: LD_OWVAR 2
67922: PPUSH
67923: LD_INT 0
67925: PPUSH
67926: CALL_OW 324
67930: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67931: LD_EXP 51
67935: IFFALSE 67943
67937: PUSH
67938: LD_EXP 88
67942: AND
67943: IFFALSE 67963
67945: GO 67947
67947: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67948: LD_INT 19
67950: PPUSH
67951: LD_OWVAR 2
67955: PPUSH
67956: LD_INT 0
67958: PPUSH
67959: CALL_OW 324
67963: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67964: LD_EXP 51
67968: IFFALSE 67976
67970: PUSH
67971: LD_EXP 60
67975: AND
67976: IFFALSE 68078
67978: GO 67980
67980: DISABLE
67981: LD_INT 0
67983: PPUSH
67984: PPUSH
// begin enable ;
67985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67986: LD_ADDR_VAR 0 2
67990: PUSH
67991: LD_INT 22
67993: PUSH
67994: LD_OWVAR 2
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: LD_INT 34
68008: PUSH
68009: LD_INT 11
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 34
68018: PUSH
68019: LD_INT 30
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: LIST
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PPUSH
68035: CALL_OW 69
68039: ST_TO_ADDR
// if not tmp then
68040: LD_VAR 0 2
68044: NOT
68045: IFFALSE 68049
// exit ;
68047: GO 68078
// for i in tmp do
68049: LD_ADDR_VAR 0 1
68053: PUSH
68054: LD_VAR 0 2
68058: PUSH
68059: FOR_IN
68060: IFFALSE 68076
// begin SetLives ( i , 0 ) ;
68062: LD_VAR 0 1
68066: PPUSH
68067: LD_INT 0
68069: PPUSH
68070: CALL_OW 234
// end ;
68074: GO 68059
68076: POP
68077: POP
// end ;
68078: PPOPN 2
68080: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68081: LD_EXP 51
68085: IFFALSE 68093
68087: PUSH
68088: LD_EXP 61
68092: AND
68093: IFFALSE 68113
68095: GO 68097
68097: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68098: LD_INT 32
68100: PPUSH
68101: LD_OWVAR 2
68105: PPUSH
68106: LD_INT 0
68108: PPUSH
68109: CALL_OW 324
68113: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68114: LD_EXP 51
68118: IFFALSE 68126
68120: PUSH
68121: LD_EXP 62
68125: AND
68126: IFFALSE 68309
68128: GO 68130
68130: DISABLE
68131: LD_INT 0
68133: PPUSH
68134: PPUSH
68135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68136: LD_ADDR_VAR 0 2
68140: PUSH
68141: LD_INT 22
68143: PUSH
68144: LD_OWVAR 2
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 33
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PPUSH
68167: CALL_OW 69
68171: ST_TO_ADDR
// if not tmp then
68172: LD_VAR 0 2
68176: NOT
68177: IFFALSE 68181
// exit ;
68179: GO 68309
// side := 0 ;
68181: LD_ADDR_VAR 0 3
68185: PUSH
68186: LD_INT 0
68188: ST_TO_ADDR
// for i := 1 to 8 do
68189: LD_ADDR_VAR 0 1
68193: PUSH
68194: DOUBLE
68195: LD_INT 1
68197: DEC
68198: ST_TO_ADDR
68199: LD_INT 8
68201: PUSH
68202: FOR_TO
68203: IFFALSE 68253
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68205: LD_OWVAR 2
68209: PUSH
68210: LD_VAR 0 1
68214: NONEQUAL
68215: IFFALSE 68237
68217: PUSH
68218: LD_OWVAR 2
68222: PPUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 81
68232: PUSH
68233: LD_INT 2
68235: EQUAL
68236: AND
68237: IFFALSE 68251
// begin side := i ;
68239: LD_ADDR_VAR 0 3
68243: PUSH
68244: LD_VAR 0 1
68248: ST_TO_ADDR
// break ;
68249: GO 68253
// end ;
68251: GO 68202
68253: POP
68254: POP
// if not side then
68255: LD_VAR 0 3
68259: NOT
68260: IFFALSE 68264
// exit ;
68262: GO 68309
// for i := 1 to tmp do
68264: LD_ADDR_VAR 0 1
68268: PUSH
68269: DOUBLE
68270: LD_INT 1
68272: DEC
68273: ST_TO_ADDR
68274: LD_VAR 0 2
68278: PUSH
68279: FOR_TO
68280: IFFALSE 68307
// if Prob ( 60 ) then
68282: LD_INT 60
68284: PPUSH
68285: CALL_OW 13
68289: IFFALSE 68305
// SetSide ( i , side ) ;
68291: LD_VAR 0 1
68295: PPUSH
68296: LD_VAR 0 3
68300: PPUSH
68301: CALL_OW 235
68305: GO 68279
68307: POP
68308: POP
// end ;
68309: PPOPN 3
68311: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68312: LD_EXP 51
68316: IFFALSE 68324
68318: PUSH
68319: LD_EXP 64
68323: AND
68324: IFFALSE 68443
68326: GO 68328
68328: DISABLE
68329: LD_INT 0
68331: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68332: LD_ADDR_VAR 0 1
68336: PUSH
68337: LD_INT 22
68339: PUSH
68340: LD_OWVAR 2
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 21
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: LD_INT 23
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: LIST
68380: PPUSH
68381: CALL_OW 69
68385: PUSH
68386: FOR_IN
68387: IFFALSE 68441
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68389: LD_VAR 0 1
68393: PPUSH
68394: CALL_OW 257
68398: PUSH
68399: LD_INT 1
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: LD_INT 4
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: IN
68417: IFFALSE 68439
// SetClass ( un , rand ( 1 , 4 ) ) ;
68419: LD_VAR 0 1
68423: PPUSH
68424: LD_INT 1
68426: PPUSH
68427: LD_INT 4
68429: PPUSH
68430: CALL_OW 12
68434: PPUSH
68435: CALL_OW 336
68439: GO 68386
68441: POP
68442: POP
// end ;
68443: PPOPN 1
68445: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68446: LD_EXP 51
68450: IFFALSE 68458
68452: PUSH
68453: LD_EXP 63
68457: AND
68458: IFFALSE 68537
68460: GO 68462
68462: DISABLE
68463: LD_INT 0
68465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68466: LD_ADDR_VAR 0 1
68470: PUSH
68471: LD_INT 22
68473: PUSH
68474: LD_OWVAR 2
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 21
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PPUSH
68497: CALL_OW 69
68501: ST_TO_ADDR
// if not tmp then
68502: LD_VAR 0 1
68506: NOT
68507: IFFALSE 68511
// exit ;
68509: GO 68537
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68511: LD_VAR 0 1
68515: PUSH
68516: LD_INT 1
68518: PPUSH
68519: LD_VAR 0 1
68523: PPUSH
68524: CALL_OW 12
68528: ARRAY
68529: PPUSH
68530: LD_INT 100
68532: PPUSH
68533: CALL_OW 234
// end ;
68537: PPOPN 1
68539: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68540: LD_EXP 51
68544: IFFALSE 68552
68546: PUSH
68547: LD_EXP 65
68551: AND
68552: IFFALSE 68650
68554: GO 68556
68556: DISABLE
68557: LD_INT 0
68559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68560: LD_ADDR_VAR 0 1
68564: PUSH
68565: LD_INT 22
68567: PUSH
68568: LD_OWVAR 2
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 21
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PPUSH
68591: CALL_OW 69
68595: ST_TO_ADDR
// if not tmp then
68596: LD_VAR 0 1
68600: NOT
68601: IFFALSE 68605
// exit ;
68603: GO 68650
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68605: LD_VAR 0 1
68609: PUSH
68610: LD_INT 1
68612: PPUSH
68613: LD_VAR 0 1
68617: PPUSH
68618: CALL_OW 12
68622: ARRAY
68623: PPUSH
68624: LD_INT 1
68626: PPUSH
68627: LD_INT 4
68629: PPUSH
68630: CALL_OW 12
68634: PPUSH
68635: LD_INT 3000
68637: PPUSH
68638: LD_INT 9000
68640: PPUSH
68641: CALL_OW 12
68645: PPUSH
68646: CALL_OW 492
// end ;
68650: PPOPN 1
68652: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68653: LD_EXP 51
68657: IFFALSE 68665
68659: PUSH
68660: LD_EXP 66
68664: AND
68665: IFFALSE 68685
68667: GO 68669
68669: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68670: LD_INT 1
68672: PPUSH
68673: LD_OWVAR 2
68677: PPUSH
68678: LD_INT 0
68680: PPUSH
68681: CALL_OW 324
68685: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68686: LD_EXP 51
68690: IFFALSE 68698
68692: PUSH
68693: LD_EXP 67
68697: AND
68698: IFFALSE 68781
68700: GO 68702
68702: DISABLE
68703: LD_INT 0
68705: PPUSH
68706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68707: LD_ADDR_VAR 0 2
68711: PUSH
68712: LD_INT 22
68714: PUSH
68715: LD_OWVAR 2
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 21
68726: PUSH
68727: LD_INT 3
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PPUSH
68738: CALL_OW 69
68742: ST_TO_ADDR
// if not tmp then
68743: LD_VAR 0 2
68747: NOT
68748: IFFALSE 68752
// exit ;
68750: GO 68781
// for i in tmp do
68752: LD_ADDR_VAR 0 1
68756: PUSH
68757: LD_VAR 0 2
68761: PUSH
68762: FOR_IN
68763: IFFALSE 68779
// SetBLevel ( i , 10 ) ;
68765: LD_VAR 0 1
68769: PPUSH
68770: LD_INT 10
68772: PPUSH
68773: CALL_OW 241
68777: GO 68762
68779: POP
68780: POP
// end ;
68781: PPOPN 2
68783: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68784: LD_EXP 51
68788: IFFALSE 68796
68790: PUSH
68791: LD_EXP 68
68795: AND
68796: IFFALSE 68907
68798: GO 68800
68800: DISABLE
68801: LD_INT 0
68803: PPUSH
68804: PPUSH
68805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68806: LD_ADDR_VAR 0 3
68810: PUSH
68811: LD_INT 22
68813: PUSH
68814: LD_OWVAR 2
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 25
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PPUSH
68837: CALL_OW 69
68841: ST_TO_ADDR
// if not tmp then
68842: LD_VAR 0 3
68846: NOT
68847: IFFALSE 68851
// exit ;
68849: GO 68907
// un := tmp [ rand ( 1 , tmp ) ] ;
68851: LD_ADDR_VAR 0 2
68855: PUSH
68856: LD_VAR 0 3
68860: PUSH
68861: LD_INT 1
68863: PPUSH
68864: LD_VAR 0 3
68868: PPUSH
68869: CALL_OW 12
68873: ARRAY
68874: ST_TO_ADDR
// if Crawls ( un ) then
68875: LD_VAR 0 2
68879: PPUSH
68880: CALL_OW 318
68884: IFFALSE 68895
// ComWalk ( un ) ;
68886: LD_VAR 0 2
68890: PPUSH
68891: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68895: LD_VAR 0 2
68899: PPUSH
68900: LD_INT 5
68902: PPUSH
68903: CALL_OW 336
// end ;
68907: PPOPN 3
68909: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68910: LD_EXP 51
68914: IFFALSE 68922
68916: PUSH
68917: LD_EXP 69
68921: AND
68922: IFFALSE 68934
68924: PUSH
68925: LD_OWVAR 67
68929: PUSH
68930: LD_INT 4
68932: LESS
68933: AND
68934: IFFALSE 68953
68936: GO 68938
68938: DISABLE
// begin Difficulty := Difficulty + 1 ;
68939: LD_ADDR_OWVAR 67
68943: PUSH
68944: LD_OWVAR 67
68948: PUSH
68949: LD_INT 1
68951: PLUS
68952: ST_TO_ADDR
// end ;
68953: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68954: LD_EXP 51
68958: IFFALSE 68966
68960: PUSH
68961: LD_EXP 70
68965: AND
68966: IFFALSE 69069
68968: GO 68970
68970: DISABLE
68971: LD_INT 0
68973: PPUSH
// begin for i := 1 to 5 do
68974: LD_ADDR_VAR 0 1
68978: PUSH
68979: DOUBLE
68980: LD_INT 1
68982: DEC
68983: ST_TO_ADDR
68984: LD_INT 5
68986: PUSH
68987: FOR_TO
68988: IFFALSE 69067
// begin uc_nation := nation_nature ;
68990: LD_ADDR_OWVAR 21
68994: PUSH
68995: LD_INT 0
68997: ST_TO_ADDR
// uc_side := 0 ;
68998: LD_ADDR_OWVAR 20
69002: PUSH
69003: LD_INT 0
69005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69006: LD_ADDR_OWVAR 29
69010: PUSH
69011: LD_INT 12
69013: PUSH
69014: LD_INT 12
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: ST_TO_ADDR
// hc_agressivity := 20 ;
69021: LD_ADDR_OWVAR 35
69025: PUSH
69026: LD_INT 20
69028: ST_TO_ADDR
// hc_class := class_tiger ;
69029: LD_ADDR_OWVAR 28
69033: PUSH
69034: LD_INT 14
69036: ST_TO_ADDR
// hc_gallery :=  ;
69037: LD_ADDR_OWVAR 33
69041: PUSH
69042: LD_STRING 
69044: ST_TO_ADDR
// hc_name :=  ;
69045: LD_ADDR_OWVAR 26
69049: PUSH
69050: LD_STRING 
69052: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69053: CALL_OW 44
69057: PPUSH
69058: LD_INT 0
69060: PPUSH
69061: CALL_OW 51
// end ;
69065: GO 68987
69067: POP
69068: POP
// end ;
69069: PPOPN 1
69071: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69072: LD_EXP 51
69076: IFFALSE 69084
69078: PUSH
69079: LD_EXP 71
69083: AND
69084: IFFALSE 69093
69086: GO 69088
69088: DISABLE
// StreamSibBomb ;
69089: CALL 69094 0 0
69093: END
// export function StreamSibBomb ; var i , x , y ; begin
69094: LD_INT 0
69096: PPUSH
69097: PPUSH
69098: PPUSH
69099: PPUSH
// result := false ;
69100: LD_ADDR_VAR 0 1
69104: PUSH
69105: LD_INT 0
69107: ST_TO_ADDR
// for i := 1 to 16 do
69108: LD_ADDR_VAR 0 2
69112: PUSH
69113: DOUBLE
69114: LD_INT 1
69116: DEC
69117: ST_TO_ADDR
69118: LD_INT 16
69120: PUSH
69121: FOR_TO
69122: IFFALSE 69321
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69124: LD_ADDR_VAR 0 3
69128: PUSH
69129: LD_INT 10
69131: PUSH
69132: LD_INT 20
69134: PUSH
69135: LD_INT 30
69137: PUSH
69138: LD_INT 40
69140: PUSH
69141: LD_INT 50
69143: PUSH
69144: LD_INT 60
69146: PUSH
69147: LD_INT 70
69149: PUSH
69150: LD_INT 80
69152: PUSH
69153: LD_INT 90
69155: PUSH
69156: LD_INT 100
69158: PUSH
69159: LD_INT 110
69161: PUSH
69162: LD_INT 120
69164: PUSH
69165: LD_INT 130
69167: PUSH
69168: LD_INT 140
69170: PUSH
69171: LD_INT 150
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 1
69193: PPUSH
69194: LD_INT 15
69196: PPUSH
69197: CALL_OW 12
69201: ARRAY
69202: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69203: LD_ADDR_VAR 0 4
69207: PUSH
69208: LD_INT 10
69210: PUSH
69211: LD_INT 20
69213: PUSH
69214: LD_INT 30
69216: PUSH
69217: LD_INT 40
69219: PUSH
69220: LD_INT 50
69222: PUSH
69223: LD_INT 60
69225: PUSH
69226: LD_INT 70
69228: PUSH
69229: LD_INT 80
69231: PUSH
69232: LD_INT 90
69234: PUSH
69235: LD_INT 100
69237: PUSH
69238: LD_INT 110
69240: PUSH
69241: LD_INT 120
69243: PUSH
69244: LD_INT 130
69246: PUSH
69247: LD_INT 140
69249: PUSH
69250: LD_INT 150
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 1
69272: PPUSH
69273: LD_INT 15
69275: PPUSH
69276: CALL_OW 12
69280: ARRAY
69281: ST_TO_ADDR
// if ValidHex ( x , y ) then
69282: LD_VAR 0 3
69286: PPUSH
69287: LD_VAR 0 4
69291: PPUSH
69292: CALL_OW 488
69296: IFFALSE 69319
// begin result := [ x , y ] ;
69298: LD_ADDR_VAR 0 1
69302: PUSH
69303: LD_VAR 0 3
69307: PUSH
69308: LD_VAR 0 4
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: ST_TO_ADDR
// break ;
69317: GO 69321
// end ; end ;
69319: GO 69121
69321: POP
69322: POP
// if result then
69323: LD_VAR 0 1
69327: IFFALSE 69387
// begin ToLua ( playSibBomb() ) ;
69329: LD_STRING playSibBomb()
69331: PPUSH
69332: CALL_OW 559
// wait ( 0 0$14 ) ;
69336: LD_INT 490
69338: PPUSH
69339: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69343: LD_VAR 0 1
69347: PUSH
69348: LD_INT 1
69350: ARRAY
69351: PPUSH
69352: LD_VAR 0 1
69356: PUSH
69357: LD_INT 2
69359: ARRAY
69360: PPUSH
69361: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69365: LD_VAR 0 1
69369: PUSH
69370: LD_INT 1
69372: ARRAY
69373: PPUSH
69374: LD_VAR 0 1
69378: PUSH
69379: LD_INT 2
69381: ARRAY
69382: PPUSH
69383: CALL_OW 429
// end ; end ;
69387: LD_VAR 0 1
69391: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69392: LD_EXP 51
69396: IFFALSE 69404
69398: PUSH
69399: LD_EXP 73
69403: AND
69404: IFFALSE 69416
69406: GO 69408
69408: DISABLE
// YouLost (  ) ;
69409: LD_STRING 
69411: PPUSH
69412: CALL_OW 104
69416: END
// every 0 0$1 trigger StreamModeActive and sFog do
69417: LD_EXP 51
69421: IFFALSE 69429
69423: PUSH
69424: LD_EXP 72
69428: AND
69429: IFFALSE 69443
69431: GO 69433
69433: DISABLE
// FogOff ( your_side ) ;
69434: LD_OWVAR 2
69438: PPUSH
69439: CALL_OW 344
69443: END
// every 0 0$1 trigger StreamModeActive and sSun do
69444: LD_EXP 51
69448: IFFALSE 69456
69450: PUSH
69451: LD_EXP 74
69455: AND
69456: IFFALSE 69484
69458: GO 69460
69460: DISABLE
// begin solar_recharge_percent := 0 ;
69461: LD_ADDR_OWVAR 79
69465: PUSH
69466: LD_INT 0
69468: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69469: LD_INT 10500
69471: PPUSH
69472: CALL_OW 67
// solar_recharge_percent := 100 ;
69476: LD_ADDR_OWVAR 79
69480: PUSH
69481: LD_INT 100
69483: ST_TO_ADDR
// end ;
69484: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69485: LD_EXP 51
69489: IFFALSE 69497
69491: PUSH
69492: LD_EXP 75
69496: AND
69497: IFFALSE 69736
69499: GO 69501
69501: DISABLE
69502: LD_INT 0
69504: PPUSH
69505: PPUSH
69506: PPUSH
// begin tmp := [ ] ;
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: EMPTY
69513: ST_TO_ADDR
// for i := 1 to 6 do
69514: LD_ADDR_VAR 0 1
69518: PUSH
69519: DOUBLE
69520: LD_INT 1
69522: DEC
69523: ST_TO_ADDR
69524: LD_INT 6
69526: PUSH
69527: FOR_TO
69528: IFFALSE 69633
// begin uc_nation := nation_nature ;
69530: LD_ADDR_OWVAR 21
69534: PUSH
69535: LD_INT 0
69537: ST_TO_ADDR
// uc_side := 0 ;
69538: LD_ADDR_OWVAR 20
69542: PUSH
69543: LD_INT 0
69545: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69546: LD_ADDR_OWVAR 29
69550: PUSH
69551: LD_INT 12
69553: PUSH
69554: LD_INT 12
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: ST_TO_ADDR
// hc_agressivity := 20 ;
69561: LD_ADDR_OWVAR 35
69565: PUSH
69566: LD_INT 20
69568: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69569: LD_ADDR_OWVAR 28
69573: PUSH
69574: LD_INT 17
69576: ST_TO_ADDR
// hc_gallery :=  ;
69577: LD_ADDR_OWVAR 33
69581: PUSH
69582: LD_STRING 
69584: ST_TO_ADDR
// hc_name :=  ;
69585: LD_ADDR_OWVAR 26
69589: PUSH
69590: LD_STRING 
69592: ST_TO_ADDR
// un := CreateHuman ;
69593: LD_ADDR_VAR 0 2
69597: PUSH
69598: CALL_OW 44
69602: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69603: LD_VAR 0 2
69607: PPUSH
69608: LD_INT 1
69610: PPUSH
69611: CALL_OW 51
// tmp := tmp ^ un ;
69615: LD_ADDR_VAR 0 3
69619: PUSH
69620: LD_VAR 0 3
69624: PUSH
69625: LD_VAR 0 2
69629: ADD
69630: ST_TO_ADDR
// end ;
69631: GO 69527
69633: POP
69634: POP
// repeat wait ( 0 0$1 ) ;
69635: LD_INT 35
69637: PPUSH
69638: CALL_OW 67
// for un in tmp do
69642: LD_ADDR_VAR 0 2
69646: PUSH
69647: LD_VAR 0 3
69651: PUSH
69652: FOR_IN
69653: IFFALSE 69727
// begin if IsDead ( un ) then
69655: LD_VAR 0 2
69659: PPUSH
69660: CALL_OW 301
69664: IFFALSE 69684
// begin tmp := tmp diff un ;
69666: LD_ADDR_VAR 0 3
69670: PUSH
69671: LD_VAR 0 3
69675: PUSH
69676: LD_VAR 0 2
69680: DIFF
69681: ST_TO_ADDR
// continue ;
69682: GO 69652
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69684: LD_VAR 0 2
69688: PPUSH
69689: LD_INT 3
69691: PUSH
69692: LD_INT 22
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PPUSH
69706: CALL_OW 69
69710: PPUSH
69711: LD_VAR 0 2
69715: PPUSH
69716: CALL_OW 74
69720: PPUSH
69721: CALL_OW 115
// end ;
69725: GO 69652
69727: POP
69728: POP
// until not tmp ;
69729: LD_VAR 0 3
69733: NOT
69734: IFFALSE 69635
// end ;
69736: PPOPN 3
69738: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69739: LD_EXP 51
69743: IFFALSE 69751
69745: PUSH
69746: LD_EXP 76
69750: AND
69751: IFFALSE 69805
69753: GO 69755
69755: DISABLE
// begin ToLua ( displayTroll(); ) ;
69756: LD_STRING displayTroll();
69758: PPUSH
69759: CALL_OW 559
// wait ( 3 3$00 ) ;
69763: LD_INT 6300
69765: PPUSH
69766: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69770: LD_STRING hideTroll();
69772: PPUSH
69773: CALL_OW 559
// wait ( 1 1$00 ) ;
69777: LD_INT 2100
69779: PPUSH
69780: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69784: LD_STRING displayTroll();
69786: PPUSH
69787: CALL_OW 559
// wait ( 1 1$00 ) ;
69791: LD_INT 2100
69793: PPUSH
69794: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69798: LD_STRING hideTroll();
69800: PPUSH
69801: CALL_OW 559
// end ;
69805: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69806: LD_EXP 51
69810: IFFALSE 69818
69812: PUSH
69813: LD_EXP 77
69817: AND
69818: IFFALSE 69881
69820: GO 69822
69822: DISABLE
69823: LD_INT 0
69825: PPUSH
// begin p := 0 ;
69826: LD_ADDR_VAR 0 1
69830: PUSH
69831: LD_INT 0
69833: ST_TO_ADDR
// repeat game_speed := 1 ;
69834: LD_ADDR_OWVAR 65
69838: PUSH
69839: LD_INT 1
69841: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69842: LD_INT 35
69844: PPUSH
69845: CALL_OW 67
// p := p + 1 ;
69849: LD_ADDR_VAR 0 1
69853: PUSH
69854: LD_VAR 0 1
69858: PUSH
69859: LD_INT 1
69861: PLUS
69862: ST_TO_ADDR
// until p >= 60 ;
69863: LD_VAR 0 1
69867: PUSH
69868: LD_INT 60
69870: GREATEREQUAL
69871: IFFALSE 69834
// game_speed := 4 ;
69873: LD_ADDR_OWVAR 65
69877: PUSH
69878: LD_INT 4
69880: ST_TO_ADDR
// end ;
69881: PPOPN 1
69883: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69884: LD_EXP 51
69888: IFFALSE 69896
69890: PUSH
69891: LD_EXP 78
69895: AND
69896: IFFALSE 70042
69898: GO 69900
69900: DISABLE
69901: LD_INT 0
69903: PPUSH
69904: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69905: LD_ADDR_VAR 0 1
69909: PUSH
69910: LD_INT 22
69912: PUSH
69913: LD_OWVAR 2
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 2
69924: PUSH
69925: LD_INT 30
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 30
69937: PUSH
69938: LD_INT 1
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: LIST
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PPUSH
69954: CALL_OW 69
69958: ST_TO_ADDR
// if not depot then
69959: LD_VAR 0 1
69963: NOT
69964: IFFALSE 69968
// exit ;
69966: GO 70042
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69968: LD_ADDR_VAR 0 2
69972: PUSH
69973: LD_VAR 0 1
69977: PUSH
69978: LD_INT 1
69980: PPUSH
69981: LD_VAR 0 1
69985: PPUSH
69986: CALL_OW 12
69990: ARRAY
69991: PPUSH
69992: CALL_OW 274
69996: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69997: LD_VAR 0 2
70001: PPUSH
70002: LD_INT 1
70004: PPUSH
70005: LD_INT 0
70007: PPUSH
70008: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70012: LD_VAR 0 2
70016: PPUSH
70017: LD_INT 2
70019: PPUSH
70020: LD_INT 0
70022: PPUSH
70023: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70027: LD_VAR 0 2
70031: PPUSH
70032: LD_INT 3
70034: PPUSH
70035: LD_INT 0
70037: PPUSH
70038: CALL_OW 277
// end ;
70042: PPOPN 2
70044: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70045: LD_EXP 51
70049: IFFALSE 70057
70051: PUSH
70052: LD_EXP 79
70056: AND
70057: IFFALSE 70154
70059: GO 70061
70061: DISABLE
70062: LD_INT 0
70064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70065: LD_ADDR_VAR 0 1
70069: PUSH
70070: LD_INT 22
70072: PUSH
70073: LD_OWVAR 2
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 21
70084: PUSH
70085: LD_INT 1
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: LD_INT 23
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: PPUSH
70114: CALL_OW 69
70118: ST_TO_ADDR
// if not tmp then
70119: LD_VAR 0 1
70123: NOT
70124: IFFALSE 70128
// exit ;
70126: GO 70154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70128: LD_VAR 0 1
70132: PUSH
70133: LD_INT 1
70135: PPUSH
70136: LD_VAR 0 1
70140: PPUSH
70141: CALL_OW 12
70145: ARRAY
70146: PPUSH
70147: LD_INT 200
70149: PPUSH
70150: CALL_OW 234
// end ;
70154: PPOPN 1
70156: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70157: LD_EXP 51
70161: IFFALSE 70169
70163: PUSH
70164: LD_EXP 80
70168: AND
70169: IFFALSE 70248
70171: GO 70173
70173: DISABLE
70174: LD_INT 0
70176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70177: LD_ADDR_VAR 0 1
70181: PUSH
70182: LD_INT 22
70184: PUSH
70185: LD_OWVAR 2
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 21
70196: PUSH
70197: LD_INT 2
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PPUSH
70208: CALL_OW 69
70212: ST_TO_ADDR
// if not tmp then
70213: LD_VAR 0 1
70217: NOT
70218: IFFALSE 70222
// exit ;
70220: GO 70248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70222: LD_VAR 0 1
70226: PUSH
70227: LD_INT 1
70229: PPUSH
70230: LD_VAR 0 1
70234: PPUSH
70235: CALL_OW 12
70239: ARRAY
70240: PPUSH
70241: LD_INT 60
70243: PPUSH
70244: CALL_OW 234
// end ;
70248: PPOPN 1
70250: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70251: LD_EXP 51
70255: IFFALSE 70263
70257: PUSH
70258: LD_EXP 81
70262: AND
70263: IFFALSE 70362
70265: GO 70267
70267: DISABLE
70268: LD_INT 0
70270: PPUSH
70271: PPUSH
// begin enable ;
70272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70273: LD_ADDR_VAR 0 1
70277: PUSH
70278: LD_INT 22
70280: PUSH
70281: LD_OWVAR 2
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 61
70292: PUSH
70293: EMPTY
70294: LIST
70295: PUSH
70296: LD_INT 33
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: PPUSH
70311: CALL_OW 69
70315: ST_TO_ADDR
// if not tmp then
70316: LD_VAR 0 1
70320: NOT
70321: IFFALSE 70325
// exit ;
70323: GO 70362
// for i in tmp do
70325: LD_ADDR_VAR 0 2
70329: PUSH
70330: LD_VAR 0 1
70334: PUSH
70335: FOR_IN
70336: IFFALSE 70360
// if IsControledBy ( i ) then
70338: LD_VAR 0 2
70342: PPUSH
70343: CALL_OW 312
70347: IFFALSE 70358
// ComUnlink ( i ) ;
70349: LD_VAR 0 2
70353: PPUSH
70354: CALL_OW 136
70358: GO 70335
70360: POP
70361: POP
// end ;
70362: PPOPN 2
70364: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70365: LD_EXP 51
70369: IFFALSE 70377
70371: PUSH
70372: LD_EXP 82
70376: AND
70377: IFFALSE 70517
70379: GO 70381
70381: DISABLE
70382: LD_INT 0
70384: PPUSH
70385: PPUSH
// begin ToLua ( displayPowell(); ) ;
70386: LD_STRING displayPowell();
70388: PPUSH
70389: CALL_OW 559
// uc_side := 0 ;
70393: LD_ADDR_OWVAR 20
70397: PUSH
70398: LD_INT 0
70400: ST_TO_ADDR
// uc_nation := 2 ;
70401: LD_ADDR_OWVAR 21
70405: PUSH
70406: LD_INT 2
70408: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70409: LD_ADDR_OWVAR 37
70413: PUSH
70414: LD_INT 14
70416: ST_TO_ADDR
// vc_engine := engine_siberite ;
70417: LD_ADDR_OWVAR 39
70421: PUSH
70422: LD_INT 3
70424: ST_TO_ADDR
// vc_control := control_apeman ;
70425: LD_ADDR_OWVAR 38
70429: PUSH
70430: LD_INT 5
70432: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70433: LD_ADDR_OWVAR 40
70437: PUSH
70438: LD_INT 29
70440: ST_TO_ADDR
// un := CreateVehicle ;
70441: LD_ADDR_VAR 0 2
70445: PUSH
70446: CALL_OW 45
70450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70451: LD_VAR 0 2
70455: PPUSH
70456: LD_INT 1
70458: PPUSH
70459: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70463: LD_INT 35
70465: PPUSH
70466: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70470: LD_VAR 0 2
70474: PPUSH
70475: LD_INT 22
70477: PUSH
70478: LD_OWVAR 2
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PPUSH
70487: CALL_OW 69
70491: PPUSH
70492: LD_VAR 0 2
70496: PPUSH
70497: CALL_OW 74
70501: PPUSH
70502: CALL_OW 115
// until IsDead ( un ) ;
70506: LD_VAR 0 2
70510: PPUSH
70511: CALL_OW 301
70515: IFFALSE 70463
// end ;
70517: PPOPN 2
70519: END
// every 0 0$1 trigger StreamModeActive and sStu do
70520: LD_EXP 51
70524: IFFALSE 70532
70526: PUSH
70527: LD_EXP 90
70531: AND
70532: IFFALSE 70548
70534: GO 70536
70536: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70537: LD_STRING displayStucuk();
70539: PPUSH
70540: CALL_OW 559
// ResetFog ;
70544: CALL_OW 335
// end ;
70548: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70549: LD_EXP 51
70553: IFFALSE 70561
70555: PUSH
70556: LD_EXP 83
70560: AND
70561: IFFALSE 70702
70563: GO 70565
70565: DISABLE
70566: LD_INT 0
70568: PPUSH
70569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70570: LD_ADDR_VAR 0 2
70574: PUSH
70575: LD_INT 22
70577: PUSH
70578: LD_OWVAR 2
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 21
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PPUSH
70601: CALL_OW 69
70605: ST_TO_ADDR
// if not tmp then
70606: LD_VAR 0 2
70610: NOT
70611: IFFALSE 70615
// exit ;
70613: GO 70702
// un := tmp [ rand ( 1 , tmp ) ] ;
70615: LD_ADDR_VAR 0 1
70619: PUSH
70620: LD_VAR 0 2
70624: PUSH
70625: LD_INT 1
70627: PPUSH
70628: LD_VAR 0 2
70632: PPUSH
70633: CALL_OW 12
70637: ARRAY
70638: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70639: LD_VAR 0 1
70643: PPUSH
70644: LD_INT 0
70646: PPUSH
70647: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70651: LD_VAR 0 1
70655: PPUSH
70656: LD_OWVAR 3
70660: PUSH
70661: LD_VAR 0 1
70665: DIFF
70666: PPUSH
70667: LD_VAR 0 1
70671: PPUSH
70672: CALL_OW 74
70676: PPUSH
70677: CALL_OW 115
// wait ( 0 0$20 ) ;
70681: LD_INT 700
70683: PPUSH
70684: CALL_OW 67
// SetSide ( un , your_side ) ;
70688: LD_VAR 0 1
70692: PPUSH
70693: LD_OWVAR 2
70697: PPUSH
70698: CALL_OW 235
// end ;
70702: PPOPN 2
70704: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70705: LD_EXP 51
70709: IFFALSE 70717
70711: PUSH
70712: LD_EXP 84
70716: AND
70717: IFFALSE 70823
70719: GO 70721
70721: DISABLE
70722: LD_INT 0
70724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70725: LD_ADDR_VAR 0 1
70729: PUSH
70730: LD_INT 22
70732: PUSH
70733: LD_OWVAR 2
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 2
70744: PUSH
70745: LD_INT 30
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 30
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: LIST
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PPUSH
70774: CALL_OW 69
70778: ST_TO_ADDR
// if not depot then
70779: LD_VAR 0 1
70783: NOT
70784: IFFALSE 70788
// exit ;
70786: GO 70823
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70788: LD_VAR 0 1
70792: PUSH
70793: LD_INT 1
70795: ARRAY
70796: PPUSH
70797: CALL_OW 250
70801: PPUSH
70802: LD_VAR 0 1
70806: PUSH
70807: LD_INT 1
70809: ARRAY
70810: PPUSH
70811: CALL_OW 251
70815: PPUSH
70816: LD_INT 70
70818: PPUSH
70819: CALL_OW 495
// end ;
70823: PPOPN 1
70825: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70826: LD_EXP 51
70830: IFFALSE 70838
70832: PUSH
70833: LD_EXP 85
70837: AND
70838: IFFALSE 71049
70840: GO 70842
70842: DISABLE
70843: LD_INT 0
70845: PPUSH
70846: PPUSH
70847: PPUSH
70848: PPUSH
70849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70850: LD_ADDR_VAR 0 5
70854: PUSH
70855: LD_INT 22
70857: PUSH
70858: LD_OWVAR 2
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 21
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PPUSH
70881: CALL_OW 69
70885: ST_TO_ADDR
// if not tmp then
70886: LD_VAR 0 5
70890: NOT
70891: IFFALSE 70895
// exit ;
70893: GO 71049
// for i in tmp do
70895: LD_ADDR_VAR 0 1
70899: PUSH
70900: LD_VAR 0 5
70904: PUSH
70905: FOR_IN
70906: IFFALSE 71047
// begin d := rand ( 0 , 5 ) ;
70908: LD_ADDR_VAR 0 4
70912: PUSH
70913: LD_INT 0
70915: PPUSH
70916: LD_INT 5
70918: PPUSH
70919: CALL_OW 12
70923: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70924: LD_ADDR_VAR 0 2
70928: PUSH
70929: LD_VAR 0 1
70933: PPUSH
70934: CALL_OW 250
70938: PPUSH
70939: LD_VAR 0 4
70943: PPUSH
70944: LD_INT 3
70946: PPUSH
70947: LD_INT 12
70949: PPUSH
70950: CALL_OW 12
70954: PPUSH
70955: CALL_OW 272
70959: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70960: LD_ADDR_VAR 0 3
70964: PUSH
70965: LD_VAR 0 1
70969: PPUSH
70970: CALL_OW 251
70974: PPUSH
70975: LD_VAR 0 4
70979: PPUSH
70980: LD_INT 3
70982: PPUSH
70983: LD_INT 12
70985: PPUSH
70986: CALL_OW 12
70990: PPUSH
70991: CALL_OW 273
70995: ST_TO_ADDR
// if ValidHex ( x , y ) then
70996: LD_VAR 0 2
71000: PPUSH
71001: LD_VAR 0 3
71005: PPUSH
71006: CALL_OW 488
71010: IFFALSE 71045
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71012: LD_VAR 0 1
71016: PPUSH
71017: LD_VAR 0 2
71021: PPUSH
71022: LD_VAR 0 3
71026: PPUSH
71027: LD_INT 3
71029: PPUSH
71030: LD_INT 6
71032: PPUSH
71033: CALL_OW 12
71037: PPUSH
71038: LD_INT 1
71040: PPUSH
71041: CALL_OW 483
// end ;
71045: GO 70905
71047: POP
71048: POP
// end ;
71049: PPOPN 5
71051: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71052: LD_EXP 51
71056: IFFALSE 71064
71058: PUSH
71059: LD_EXP 86
71063: AND
71064: IFFALSE 71158
71066: GO 71068
71068: DISABLE
71069: LD_INT 0
71071: PPUSH
71072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71073: LD_ADDR_VAR 0 2
71077: PUSH
71078: LD_INT 22
71080: PUSH
71081: LD_OWVAR 2
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 32
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 21
71102: PUSH
71103: LD_INT 2
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: PPUSH
71115: CALL_OW 69
71119: ST_TO_ADDR
// if not tmp then
71120: LD_VAR 0 2
71124: NOT
71125: IFFALSE 71129
// exit ;
71127: GO 71158
// for i in tmp do
71129: LD_ADDR_VAR 0 1
71133: PUSH
71134: LD_VAR 0 2
71138: PUSH
71139: FOR_IN
71140: IFFALSE 71156
// SetFuel ( i , 0 ) ;
71142: LD_VAR 0 1
71146: PPUSH
71147: LD_INT 0
71149: PPUSH
71150: CALL_OW 240
71154: GO 71139
71156: POP
71157: POP
// end ;
71158: PPOPN 2
71160: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71161: LD_EXP 51
71165: IFFALSE 71173
71167: PUSH
71168: LD_EXP 87
71172: AND
71173: IFFALSE 71239
71175: GO 71177
71177: DISABLE
71178: LD_INT 0
71180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71181: LD_ADDR_VAR 0 1
71185: PUSH
71186: LD_INT 22
71188: PUSH
71189: LD_OWVAR 2
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 30
71200: PUSH
71201: LD_INT 29
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PPUSH
71212: CALL_OW 69
71216: ST_TO_ADDR
// if not tmp then
71217: LD_VAR 0 1
71221: NOT
71222: IFFALSE 71226
// exit ;
71224: GO 71239
// DestroyUnit ( tmp [ 1 ] ) ;
71226: LD_VAR 0 1
71230: PUSH
71231: LD_INT 1
71233: ARRAY
71234: PPUSH
71235: CALL_OW 65
// end ;
71239: PPOPN 1
71241: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71242: LD_EXP 51
71246: IFFALSE 71254
71248: PUSH
71249: LD_EXP 89
71253: AND
71254: IFFALSE 71383
71256: GO 71258
71258: DISABLE
71259: LD_INT 0
71261: PPUSH
// begin uc_side := 0 ;
71262: LD_ADDR_OWVAR 20
71266: PUSH
71267: LD_INT 0
71269: ST_TO_ADDR
// uc_nation := nation_arabian ;
71270: LD_ADDR_OWVAR 21
71274: PUSH
71275: LD_INT 2
71277: ST_TO_ADDR
// hc_gallery :=  ;
71278: LD_ADDR_OWVAR 33
71282: PUSH
71283: LD_STRING 
71285: ST_TO_ADDR
// hc_name :=  ;
71286: LD_ADDR_OWVAR 26
71290: PUSH
71291: LD_STRING 
71293: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71294: LD_INT 1
71296: PPUSH
71297: LD_INT 11
71299: PPUSH
71300: LD_INT 10
71302: PPUSH
71303: CALL_OW 380
// un := CreateHuman ;
71307: LD_ADDR_VAR 0 1
71311: PUSH
71312: CALL_OW 44
71316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71317: LD_VAR 0 1
71321: PPUSH
71322: LD_INT 1
71324: PPUSH
71325: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71329: LD_INT 35
71331: PPUSH
71332: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71336: LD_VAR 0 1
71340: PPUSH
71341: LD_INT 22
71343: PUSH
71344: LD_OWVAR 2
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PPUSH
71353: CALL_OW 69
71357: PPUSH
71358: LD_VAR 0 1
71362: PPUSH
71363: CALL_OW 74
71367: PPUSH
71368: CALL_OW 115
// until IsDead ( un ) ;
71372: LD_VAR 0 1
71376: PPUSH
71377: CALL_OW 301
71381: IFFALSE 71329
// end ;
71383: PPOPN 1
71385: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71386: LD_EXP 51
71390: IFFALSE 71398
71392: PUSH
71393: LD_EXP 91
71397: AND
71398: IFFALSE 71410
71400: GO 71402
71402: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71403: LD_STRING earthquake(getX(game), 0, 32)
71405: PPUSH
71406: CALL_OW 559
71410: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71411: LD_EXP 51
71415: IFFALSE 71423
71417: PUSH
71418: LD_EXP 92
71422: AND
71423: IFFALSE 71514
71425: GO 71427
71427: DISABLE
71428: LD_INT 0
71430: PPUSH
// begin enable ;
71431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71432: LD_ADDR_VAR 0 1
71436: PUSH
71437: LD_INT 22
71439: PUSH
71440: LD_OWVAR 2
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 21
71451: PUSH
71452: LD_INT 2
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 33
71461: PUSH
71462: LD_INT 3
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: LIST
71473: PPUSH
71474: CALL_OW 69
71478: ST_TO_ADDR
// if not tmp then
71479: LD_VAR 0 1
71483: NOT
71484: IFFALSE 71488
// exit ;
71486: GO 71514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71488: LD_VAR 0 1
71492: PUSH
71493: LD_INT 1
71495: PPUSH
71496: LD_VAR 0 1
71500: PPUSH
71501: CALL_OW 12
71505: ARRAY
71506: PPUSH
71507: LD_INT 1
71509: PPUSH
71510: CALL_OW 234
// end ;
71514: PPOPN 1
71516: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71517: LD_EXP 51
71521: IFFALSE 71529
71523: PUSH
71524: LD_EXP 93
71528: AND
71529: IFFALSE 71670
71531: GO 71533
71533: DISABLE
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
71538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71539: LD_ADDR_VAR 0 3
71543: PUSH
71544: LD_INT 22
71546: PUSH
71547: LD_OWVAR 2
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 25
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PPUSH
71570: CALL_OW 69
71574: ST_TO_ADDR
// if not tmp then
71575: LD_VAR 0 3
71579: NOT
71580: IFFALSE 71584
// exit ;
71582: GO 71670
// un := tmp [ rand ( 1 , tmp ) ] ;
71584: LD_ADDR_VAR 0 2
71588: PUSH
71589: LD_VAR 0 3
71593: PUSH
71594: LD_INT 1
71596: PPUSH
71597: LD_VAR 0 3
71601: PPUSH
71602: CALL_OW 12
71606: ARRAY
71607: ST_TO_ADDR
// if Crawls ( un ) then
71608: LD_VAR 0 2
71612: PPUSH
71613: CALL_OW 318
71617: IFFALSE 71628
// ComWalk ( un ) ;
71619: LD_VAR 0 2
71623: PPUSH
71624: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71628: LD_VAR 0 2
71632: PPUSH
71633: LD_INT 9
71635: PPUSH
71636: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71640: LD_INT 28
71642: PPUSH
71643: LD_OWVAR 2
71647: PPUSH
71648: LD_INT 2
71650: PPUSH
71651: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71655: LD_INT 29
71657: PPUSH
71658: LD_OWVAR 2
71662: PPUSH
71663: LD_INT 2
71665: PPUSH
71666: CALL_OW 322
// end ;
71670: PPOPN 3
71672: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71673: LD_EXP 51
71677: IFFALSE 71685
71679: PUSH
71680: LD_EXP 94
71684: AND
71685: IFFALSE 71796
71687: GO 71689
71689: DISABLE
71690: LD_INT 0
71692: PPUSH
71693: PPUSH
71694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71695: LD_ADDR_VAR 0 3
71699: PUSH
71700: LD_INT 22
71702: PUSH
71703: LD_OWVAR 2
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 25
71714: PUSH
71715: LD_INT 1
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PPUSH
71726: CALL_OW 69
71730: ST_TO_ADDR
// if not tmp then
71731: LD_VAR 0 3
71735: NOT
71736: IFFALSE 71740
// exit ;
71738: GO 71796
// un := tmp [ rand ( 1 , tmp ) ] ;
71740: LD_ADDR_VAR 0 2
71744: PUSH
71745: LD_VAR 0 3
71749: PUSH
71750: LD_INT 1
71752: PPUSH
71753: LD_VAR 0 3
71757: PPUSH
71758: CALL_OW 12
71762: ARRAY
71763: ST_TO_ADDR
// if Crawls ( un ) then
71764: LD_VAR 0 2
71768: PPUSH
71769: CALL_OW 318
71773: IFFALSE 71784
// ComWalk ( un ) ;
71775: LD_VAR 0 2
71779: PPUSH
71780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71784: LD_VAR 0 2
71788: PPUSH
71789: LD_INT 8
71791: PPUSH
71792: CALL_OW 336
// end ;
71796: PPOPN 3
71798: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71799: LD_EXP 51
71803: IFFALSE 71811
71805: PUSH
71806: LD_EXP 95
71810: AND
71811: IFFALSE 71955
71813: GO 71815
71815: DISABLE
71816: LD_INT 0
71818: PPUSH
71819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71820: LD_ADDR_VAR 0 2
71824: PUSH
71825: LD_INT 22
71827: PUSH
71828: LD_OWVAR 2
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 21
71839: PUSH
71840: LD_INT 2
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 2
71849: PUSH
71850: LD_INT 34
71852: PUSH
71853: LD_INT 12
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 34
71862: PUSH
71863: LD_INT 51
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 34
71872: PUSH
71873: LD_INT 32
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: LIST
71890: PPUSH
71891: CALL_OW 69
71895: ST_TO_ADDR
// if not tmp then
71896: LD_VAR 0 2
71900: NOT
71901: IFFALSE 71905
// exit ;
71903: GO 71955
// for i in tmp do
71905: LD_ADDR_VAR 0 1
71909: PUSH
71910: LD_VAR 0 2
71914: PUSH
71915: FOR_IN
71916: IFFALSE 71953
// if GetCargo ( i , mat_artifact ) = 0 then
71918: LD_VAR 0 1
71922: PPUSH
71923: LD_INT 4
71925: PPUSH
71926: CALL_OW 289
71930: PUSH
71931: LD_INT 0
71933: EQUAL
71934: IFFALSE 71951
// SetCargo ( i , mat_siberit , 100 ) ;
71936: LD_VAR 0 1
71940: PPUSH
71941: LD_INT 3
71943: PPUSH
71944: LD_INT 100
71946: PPUSH
71947: CALL_OW 290
71951: GO 71915
71953: POP
71954: POP
// end ;
71955: PPOPN 2
71957: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71958: LD_EXP 51
71962: IFFALSE 71970
71964: PUSH
71965: LD_EXP 96
71969: AND
71970: IFFALSE 72153
71972: GO 71974
71974: DISABLE
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71979: LD_ADDR_VAR 0 2
71983: PUSH
71984: LD_INT 22
71986: PUSH
71987: LD_OWVAR 2
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PPUSH
71996: CALL_OW 69
72000: ST_TO_ADDR
// if not tmp then
72001: LD_VAR 0 2
72005: NOT
72006: IFFALSE 72010
// exit ;
72008: GO 72153
// for i := 1 to 2 do
72010: LD_ADDR_VAR 0 1
72014: PUSH
72015: DOUBLE
72016: LD_INT 1
72018: DEC
72019: ST_TO_ADDR
72020: LD_INT 2
72022: PUSH
72023: FOR_TO
72024: IFFALSE 72151
// begin uc_side := your_side ;
72026: LD_ADDR_OWVAR 20
72030: PUSH
72031: LD_OWVAR 2
72035: ST_TO_ADDR
// uc_nation := nation_american ;
72036: LD_ADDR_OWVAR 21
72040: PUSH
72041: LD_INT 1
72043: ST_TO_ADDR
// vc_chassis := us_morphling ;
72044: LD_ADDR_OWVAR 37
72048: PUSH
72049: LD_INT 5
72051: ST_TO_ADDR
// vc_engine := engine_siberite ;
72052: LD_ADDR_OWVAR 39
72056: PUSH
72057: LD_INT 3
72059: ST_TO_ADDR
// vc_control := control_computer ;
72060: LD_ADDR_OWVAR 38
72064: PUSH
72065: LD_INT 3
72067: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72068: LD_ADDR_OWVAR 40
72072: PUSH
72073: LD_INT 10
72075: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72076: LD_VAR 0 2
72080: PUSH
72081: LD_INT 1
72083: ARRAY
72084: PPUSH
72085: CALL_OW 310
72089: NOT
72090: IFFALSE 72137
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72092: CALL_OW 45
72096: PPUSH
72097: LD_VAR 0 2
72101: PUSH
72102: LD_INT 1
72104: ARRAY
72105: PPUSH
72106: CALL_OW 250
72110: PPUSH
72111: LD_VAR 0 2
72115: PUSH
72116: LD_INT 1
72118: ARRAY
72119: PPUSH
72120: CALL_OW 251
72124: PPUSH
72125: LD_INT 12
72127: PPUSH
72128: LD_INT 1
72130: PPUSH
72131: CALL_OW 50
72135: GO 72149
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72137: CALL_OW 45
72141: PPUSH
72142: LD_INT 1
72144: PPUSH
72145: CALL_OW 51
// end ;
72149: GO 72023
72151: POP
72152: POP
// end ;
72153: PPOPN 2
72155: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72156: LD_EXP 51
72160: IFFALSE 72168
72162: PUSH
72163: LD_EXP 97
72167: AND
72168: IFFALSE 72390
72170: GO 72172
72172: DISABLE
72173: LD_INT 0
72175: PPUSH
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
72180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72181: LD_ADDR_VAR 0 6
72185: PUSH
72186: LD_INT 22
72188: PUSH
72189: LD_OWVAR 2
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 21
72200: PUSH
72201: LD_INT 1
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: LD_INT 23
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: LIST
72229: PPUSH
72230: CALL_OW 69
72234: ST_TO_ADDR
// if not tmp then
72235: LD_VAR 0 6
72239: NOT
72240: IFFALSE 72244
// exit ;
72242: GO 72390
// s1 := rand ( 1 , 4 ) ;
72244: LD_ADDR_VAR 0 2
72248: PUSH
72249: LD_INT 1
72251: PPUSH
72252: LD_INT 4
72254: PPUSH
72255: CALL_OW 12
72259: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72260: LD_ADDR_VAR 0 4
72264: PUSH
72265: LD_VAR 0 6
72269: PUSH
72270: LD_INT 1
72272: ARRAY
72273: PPUSH
72274: LD_VAR 0 2
72278: PPUSH
72279: CALL_OW 259
72283: ST_TO_ADDR
// if s1 = 1 then
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 1
72291: EQUAL
72292: IFFALSE 72312
// s2 := rand ( 2 , 4 ) else
72294: LD_ADDR_VAR 0 3
72298: PUSH
72299: LD_INT 2
72301: PPUSH
72302: LD_INT 4
72304: PPUSH
72305: CALL_OW 12
72309: ST_TO_ADDR
72310: GO 72320
// s2 := 1 ;
72312: LD_ADDR_VAR 0 3
72316: PUSH
72317: LD_INT 1
72319: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72320: LD_ADDR_VAR 0 5
72324: PUSH
72325: LD_VAR 0 6
72329: PUSH
72330: LD_INT 1
72332: ARRAY
72333: PPUSH
72334: LD_VAR 0 3
72338: PPUSH
72339: CALL_OW 259
72343: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72344: LD_VAR 0 6
72348: PUSH
72349: LD_INT 1
72351: ARRAY
72352: PPUSH
72353: LD_VAR 0 2
72357: PPUSH
72358: LD_VAR 0 5
72362: PPUSH
72363: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72367: LD_VAR 0 6
72371: PUSH
72372: LD_INT 1
72374: ARRAY
72375: PPUSH
72376: LD_VAR 0 3
72380: PPUSH
72381: LD_VAR 0 4
72385: PPUSH
72386: CALL_OW 237
// end ;
72390: PPOPN 6
72392: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72393: LD_EXP 51
72397: IFFALSE 72405
72399: PUSH
72400: LD_EXP 98
72404: AND
72405: IFFALSE 72484
72407: GO 72409
72409: DISABLE
72410: LD_INT 0
72412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72413: LD_ADDR_VAR 0 1
72417: PUSH
72418: LD_INT 22
72420: PUSH
72421: LD_OWVAR 2
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 30
72432: PUSH
72433: LD_INT 3
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PPUSH
72444: CALL_OW 69
72448: ST_TO_ADDR
// if not tmp then
72449: LD_VAR 0 1
72453: NOT
72454: IFFALSE 72458
// exit ;
72456: GO 72484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72458: LD_VAR 0 1
72462: PUSH
72463: LD_INT 1
72465: PPUSH
72466: LD_VAR 0 1
72470: PPUSH
72471: CALL_OW 12
72475: ARRAY
72476: PPUSH
72477: LD_INT 1
72479: PPUSH
72480: CALL_OW 234
// end ;
72484: PPOPN 1
72486: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72487: LD_EXP 51
72491: IFFALSE 72499
72493: PUSH
72494: LD_EXP 99
72498: AND
72499: IFFALSE 72611
72501: GO 72503
72503: DISABLE
72504: LD_INT 0
72506: PPUSH
72507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72508: LD_ADDR_VAR 0 2
72512: PUSH
72513: LD_INT 22
72515: PUSH
72516: LD_OWVAR 2
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 2
72527: PUSH
72528: LD_INT 30
72530: PUSH
72531: LD_INT 27
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 30
72540: PUSH
72541: LD_INT 26
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 30
72550: PUSH
72551: LD_INT 28
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PPUSH
72568: CALL_OW 69
72572: ST_TO_ADDR
// if not tmp then
72573: LD_VAR 0 2
72577: NOT
72578: IFFALSE 72582
// exit ;
72580: GO 72611
// for i in tmp do
72582: LD_ADDR_VAR 0 1
72586: PUSH
72587: LD_VAR 0 2
72591: PUSH
72592: FOR_IN
72593: IFFALSE 72609
// SetLives ( i , 1 ) ;
72595: LD_VAR 0 1
72599: PPUSH
72600: LD_INT 1
72602: PPUSH
72603: CALL_OW 234
72607: GO 72592
72609: POP
72610: POP
// end ;
72611: PPOPN 2
72613: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72614: LD_EXP 51
72618: IFFALSE 72626
72620: PUSH
72621: LD_EXP 100
72625: AND
72626: IFFALSE 72913
72628: GO 72630
72630: DISABLE
72631: LD_INT 0
72633: PPUSH
72634: PPUSH
72635: PPUSH
// begin i := rand ( 1 , 7 ) ;
72636: LD_ADDR_VAR 0 1
72640: PUSH
72641: LD_INT 1
72643: PPUSH
72644: LD_INT 7
72646: PPUSH
72647: CALL_OW 12
72651: ST_TO_ADDR
// case i of 1 :
72652: LD_VAR 0 1
72656: PUSH
72657: LD_INT 1
72659: DOUBLE
72660: EQUAL
72661: IFTRUE 72665
72663: GO 72675
72665: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72666: LD_STRING earthquake(getX(game), 0, 32)
72668: PPUSH
72669: CALL_OW 559
72673: GO 72913
72675: LD_INT 2
72677: DOUBLE
72678: EQUAL
72679: IFTRUE 72683
72681: GO 72697
72683: POP
// begin ToLua ( displayStucuk(); ) ;
72684: LD_STRING displayStucuk();
72686: PPUSH
72687: CALL_OW 559
// ResetFog ;
72691: CALL_OW 335
// end ; 3 :
72695: GO 72913
72697: LD_INT 3
72699: DOUBLE
72700: EQUAL
72701: IFTRUE 72705
72703: GO 72809
72705: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72706: LD_ADDR_VAR 0 2
72710: PUSH
72711: LD_INT 22
72713: PUSH
72714: LD_OWVAR 2
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 25
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PPUSH
72737: CALL_OW 69
72741: ST_TO_ADDR
// if not tmp then
72742: LD_VAR 0 2
72746: NOT
72747: IFFALSE 72751
// exit ;
72749: GO 72913
// un := tmp [ rand ( 1 , tmp ) ] ;
72751: LD_ADDR_VAR 0 3
72755: PUSH
72756: LD_VAR 0 2
72760: PUSH
72761: LD_INT 1
72763: PPUSH
72764: LD_VAR 0 2
72768: PPUSH
72769: CALL_OW 12
72773: ARRAY
72774: ST_TO_ADDR
// if Crawls ( un ) then
72775: LD_VAR 0 3
72779: PPUSH
72780: CALL_OW 318
72784: IFFALSE 72795
// ComWalk ( un ) ;
72786: LD_VAR 0 3
72790: PPUSH
72791: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72795: LD_VAR 0 3
72799: PPUSH
72800: LD_INT 8
72802: PPUSH
72803: CALL_OW 336
// end ; 4 :
72807: GO 72913
72809: LD_INT 4
72811: DOUBLE
72812: EQUAL
72813: IFTRUE 72817
72815: GO 72891
72817: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72818: LD_ADDR_VAR 0 2
72822: PUSH
72823: LD_INT 22
72825: PUSH
72826: LD_OWVAR 2
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 30
72837: PUSH
72838: LD_INT 29
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PPUSH
72849: CALL_OW 69
72853: ST_TO_ADDR
// if not tmp then
72854: LD_VAR 0 2
72858: NOT
72859: IFFALSE 72863
// exit ;
72861: GO 72913
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72863: LD_VAR 0 2
72867: PUSH
72868: LD_INT 1
72870: ARRAY
72871: PPUSH
72872: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72876: LD_VAR 0 2
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PPUSH
72885: CALL_OW 65
// end ; 5 .. 7 :
72889: GO 72913
72891: LD_INT 5
72893: DOUBLE
72894: GREATEREQUAL
72895: IFFALSE 72903
72897: LD_INT 7
72899: DOUBLE
72900: LESSEQUAL
72901: IFTRUE 72905
72903: GO 72912
72905: POP
// StreamSibBomb ; end ;
72906: CALL 69094 0 0
72910: GO 72913
72912: POP
// end ;
72913: PPOPN 3
72915: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72916: LD_EXP 51
72920: IFFALSE 72928
72922: PUSH
72923: LD_EXP 101
72927: AND
72928: IFFALSE 73084
72930: GO 72932
72932: DISABLE
72933: LD_INT 0
72935: PPUSH
72936: PPUSH
72937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72938: LD_ADDR_VAR 0 2
72942: PUSH
72943: LD_INT 81
72945: PUSH
72946: LD_OWVAR 2
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 2
72957: PUSH
72958: LD_INT 21
72960: PUSH
72961: LD_INT 1
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 21
72970: PUSH
72971: LD_INT 2
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: LIST
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PPUSH
72987: CALL_OW 69
72991: ST_TO_ADDR
// if not tmp then
72992: LD_VAR 0 2
72996: NOT
72997: IFFALSE 73001
// exit ;
72999: GO 73084
// p := 0 ;
73001: LD_ADDR_VAR 0 3
73005: PUSH
73006: LD_INT 0
73008: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73009: LD_INT 35
73011: PPUSH
73012: CALL_OW 67
// p := p + 1 ;
73016: LD_ADDR_VAR 0 3
73020: PUSH
73021: LD_VAR 0 3
73025: PUSH
73026: LD_INT 1
73028: PLUS
73029: ST_TO_ADDR
// for i in tmp do
73030: LD_ADDR_VAR 0 1
73034: PUSH
73035: LD_VAR 0 2
73039: PUSH
73040: FOR_IN
73041: IFFALSE 73072
// if GetLives ( i ) < 1000 then
73043: LD_VAR 0 1
73047: PPUSH
73048: CALL_OW 256
73052: PUSH
73053: LD_INT 1000
73055: LESS
73056: IFFALSE 73070
// SetLives ( i , 1000 ) ;
73058: LD_VAR 0 1
73062: PPUSH
73063: LD_INT 1000
73065: PPUSH
73066: CALL_OW 234
73070: GO 73040
73072: POP
73073: POP
// until p > 20 ;
73074: LD_VAR 0 3
73078: PUSH
73079: LD_INT 20
73081: GREATER
73082: IFFALSE 73009
// end ;
73084: PPOPN 3
73086: END
// every 0 0$1 trigger StreamModeActive and sTime do
73087: LD_EXP 51
73091: IFFALSE 73099
73093: PUSH
73094: LD_EXP 102
73098: AND
73099: IFFALSE 73134
73101: GO 73103
73103: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73104: LD_INT 28
73106: PPUSH
73107: LD_OWVAR 2
73111: PPUSH
73112: LD_INT 2
73114: PPUSH
73115: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73119: LD_INT 30
73121: PPUSH
73122: LD_OWVAR 2
73126: PPUSH
73127: LD_INT 2
73129: PPUSH
73130: CALL_OW 322
// end ;
73134: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73135: LD_EXP 51
73139: IFFALSE 73147
73141: PUSH
73142: LD_EXP 103
73146: AND
73147: IFFALSE 73268
73149: GO 73151
73151: DISABLE
73152: LD_INT 0
73154: PPUSH
73155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73156: LD_ADDR_VAR 0 2
73160: PUSH
73161: LD_INT 22
73163: PUSH
73164: LD_OWVAR 2
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PUSH
73173: LD_INT 21
73175: PUSH
73176: LD_INT 1
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 3
73185: PUSH
73186: LD_INT 23
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: LIST
73204: PPUSH
73205: CALL_OW 69
73209: ST_TO_ADDR
// if not tmp then
73210: LD_VAR 0 2
73214: NOT
73215: IFFALSE 73219
// exit ;
73217: GO 73268
// for i in tmp do
73219: LD_ADDR_VAR 0 1
73223: PUSH
73224: LD_VAR 0 2
73228: PUSH
73229: FOR_IN
73230: IFFALSE 73266
// begin if Crawls ( i ) then
73232: LD_VAR 0 1
73236: PPUSH
73237: CALL_OW 318
73241: IFFALSE 73252
// ComWalk ( i ) ;
73243: LD_VAR 0 1
73247: PPUSH
73248: CALL_OW 138
// SetClass ( i , 2 ) ;
73252: LD_VAR 0 1
73256: PPUSH
73257: LD_INT 2
73259: PPUSH
73260: CALL_OW 336
// end ;
73264: GO 73229
73266: POP
73267: POP
// end ;
73268: PPOPN 2
73270: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73271: LD_EXP 51
73275: IFFALSE 73283
73277: PUSH
73278: LD_EXP 104
73282: AND
73283: IFFALSE 73573
73285: GO 73287
73287: DISABLE
73288: LD_INT 0
73290: PPUSH
73291: PPUSH
73292: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73293: LD_OWVAR 2
73297: PPUSH
73298: LD_INT 9
73300: PPUSH
73301: LD_INT 1
73303: PPUSH
73304: LD_INT 1
73306: PPUSH
73307: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73311: LD_INT 9
73313: PPUSH
73314: LD_OWVAR 2
73318: PPUSH
73319: CALL_OW 343
// uc_side := 9 ;
73323: LD_ADDR_OWVAR 20
73327: PUSH
73328: LD_INT 9
73330: ST_TO_ADDR
// uc_nation := 2 ;
73331: LD_ADDR_OWVAR 21
73335: PUSH
73336: LD_INT 2
73338: ST_TO_ADDR
// hc_name := Dark Warrior ;
73339: LD_ADDR_OWVAR 26
73343: PUSH
73344: LD_STRING Dark Warrior
73346: ST_TO_ADDR
// hc_gallery :=  ;
73347: LD_ADDR_OWVAR 33
73351: PUSH
73352: LD_STRING 
73354: ST_TO_ADDR
// hc_noskilllimit := true ;
73355: LD_ADDR_OWVAR 76
73359: PUSH
73360: LD_INT 1
73362: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73363: LD_ADDR_OWVAR 31
73367: PUSH
73368: LD_INT 30
73370: PUSH
73371: LD_INT 30
73373: PUSH
73374: LD_INT 30
73376: PUSH
73377: LD_INT 30
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: ST_TO_ADDR
// un := CreateHuman ;
73386: LD_ADDR_VAR 0 3
73390: PUSH
73391: CALL_OW 44
73395: ST_TO_ADDR
// hc_noskilllimit := false ;
73396: LD_ADDR_OWVAR 76
73400: PUSH
73401: LD_INT 0
73403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73404: LD_VAR 0 3
73408: PPUSH
73409: LD_INT 1
73411: PPUSH
73412: CALL_OW 51
// ToLua ( playRanger() ) ;
73416: LD_STRING playRanger()
73418: PPUSH
73419: CALL_OW 559
// p := 0 ;
73423: LD_ADDR_VAR 0 2
73427: PUSH
73428: LD_INT 0
73430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73431: LD_INT 35
73433: PPUSH
73434: CALL_OW 67
// p := p + 1 ;
73438: LD_ADDR_VAR 0 2
73442: PUSH
73443: LD_VAR 0 2
73447: PUSH
73448: LD_INT 1
73450: PLUS
73451: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73452: LD_VAR 0 3
73456: PPUSH
73457: CALL_OW 256
73461: PUSH
73462: LD_INT 1000
73464: LESS
73465: IFFALSE 73479
// SetLives ( un , 1000 ) ;
73467: LD_VAR 0 3
73471: PPUSH
73472: LD_INT 1000
73474: PPUSH
73475: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73479: LD_VAR 0 3
73483: PPUSH
73484: LD_INT 81
73486: PUSH
73487: LD_OWVAR 2
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 91
73498: PUSH
73499: LD_VAR 0 3
73503: PUSH
73504: LD_INT 30
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: LIST
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PPUSH
73516: CALL_OW 69
73520: PPUSH
73521: LD_VAR 0 3
73525: PPUSH
73526: CALL_OW 74
73530: PPUSH
73531: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73535: LD_VAR 0 2
73539: PUSH
73540: LD_INT 80
73542: GREATER
73543: IFTRUE 73556
73545: PUSH
73546: LD_VAR 0 3
73550: PPUSH
73551: CALL_OW 301
73555: OR
73556: IFFALSE 73431
// if un then
73558: LD_VAR 0 3
73562: IFFALSE 73573
// RemoveUnit ( un ) ;
73564: LD_VAR 0 3
73568: PPUSH
73569: CALL_OW 64
// end ;
73573: PPOPN 3
73575: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73576: LD_EXP 105
73580: IFFALSE 73696
73582: GO 73584
73584: DISABLE
73585: LD_INT 0
73587: PPUSH
73588: PPUSH
73589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73590: LD_ADDR_VAR 0 2
73594: PUSH
73595: LD_INT 81
73597: PUSH
73598: LD_OWVAR 2
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 21
73609: PUSH
73610: LD_INT 1
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PPUSH
73621: CALL_OW 69
73625: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73626: LD_STRING playComputer()
73628: PPUSH
73629: CALL_OW 559
// if not tmp then
73633: LD_VAR 0 2
73637: NOT
73638: IFFALSE 73642
// exit ;
73640: GO 73696
// for i in tmp do
73642: LD_ADDR_VAR 0 1
73646: PUSH
73647: LD_VAR 0 2
73651: PUSH
73652: FOR_IN
73653: IFFALSE 73694
// for j := 1 to 4 do
73655: LD_ADDR_VAR 0 3
73659: PUSH
73660: DOUBLE
73661: LD_INT 1
73663: DEC
73664: ST_TO_ADDR
73665: LD_INT 4
73667: PUSH
73668: FOR_TO
73669: IFFALSE 73690
// SetSkill ( i , j , 10 ) ;
73671: LD_VAR 0 1
73675: PPUSH
73676: LD_VAR 0 3
73680: PPUSH
73681: LD_INT 10
73683: PPUSH
73684: CALL_OW 237
73688: GO 73668
73690: POP
73691: POP
73692: GO 73652
73694: POP
73695: POP
// end ;
73696: PPOPN 3
73698: END
// every 0 0$1 trigger s30 do var i , tmp ;
73699: LD_EXP 106
73703: IFFALSE 73772
73705: GO 73707
73707: DISABLE
73708: LD_INT 0
73710: PPUSH
73711: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73712: LD_ADDR_VAR 0 2
73716: PUSH
73717: LD_INT 22
73719: PUSH
73720: LD_OWVAR 2
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PPUSH
73729: CALL_OW 69
73733: ST_TO_ADDR
// if not tmp then
73734: LD_VAR 0 2
73738: NOT
73739: IFFALSE 73743
// exit ;
73741: GO 73772
// for i in tmp do
73743: LD_ADDR_VAR 0 1
73747: PUSH
73748: LD_VAR 0 2
73752: PUSH
73753: FOR_IN
73754: IFFALSE 73770
// SetLives ( i , 300 ) ;
73756: LD_VAR 0 1
73760: PPUSH
73761: LD_INT 300
73763: PPUSH
73764: CALL_OW 234
73768: GO 73753
73770: POP
73771: POP
// end ;
73772: PPOPN 2
73774: END
// every 0 0$1 trigger s60 do var i , tmp ;
73775: LD_EXP 107
73779: IFFALSE 73848
73781: GO 73783
73783: DISABLE
73784: LD_INT 0
73786: PPUSH
73787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73788: LD_ADDR_VAR 0 2
73792: PUSH
73793: LD_INT 22
73795: PUSH
73796: LD_OWVAR 2
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PPUSH
73805: CALL_OW 69
73809: ST_TO_ADDR
// if not tmp then
73810: LD_VAR 0 2
73814: NOT
73815: IFFALSE 73819
// exit ;
73817: GO 73848
// for i in tmp do
73819: LD_ADDR_VAR 0 1
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: FOR_IN
73830: IFFALSE 73846
// SetLives ( i , 600 ) ;
73832: LD_VAR 0 1
73836: PPUSH
73837: LD_INT 600
73839: PPUSH
73840: CALL_OW 234
73844: GO 73829
73846: POP
73847: POP
// end ;
73848: PPOPN 2
73850: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73851: LD_INT 0
73853: PPUSH
// case cmd of 301 :
73854: LD_VAR 0 1
73858: PUSH
73859: LD_INT 301
73861: DOUBLE
73862: EQUAL
73863: IFTRUE 73867
73865: GO 73899
73867: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73868: LD_VAR 0 6
73872: PPUSH
73873: LD_VAR 0 7
73877: PPUSH
73878: LD_VAR 0 8
73882: PPUSH
73883: LD_VAR 0 4
73887: PPUSH
73888: LD_VAR 0 5
73892: PPUSH
73893: CALL 75112 0 5
73897: GO 74020
73899: LD_INT 302
73901: DOUBLE
73902: EQUAL
73903: IFTRUE 73907
73905: GO 73944
73907: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73908: LD_VAR 0 6
73912: PPUSH
73913: LD_VAR 0 7
73917: PPUSH
73918: LD_VAR 0 8
73922: PPUSH
73923: LD_VAR 0 9
73927: PPUSH
73928: LD_VAR 0 4
73932: PPUSH
73933: LD_VAR 0 5
73937: PPUSH
73938: CALL 75203 0 6
73942: GO 74020
73944: LD_INT 303
73946: DOUBLE
73947: EQUAL
73948: IFTRUE 73952
73950: GO 73989
73952: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73953: LD_VAR 0 6
73957: PPUSH
73958: LD_VAR 0 7
73962: PPUSH
73963: LD_VAR 0 8
73967: PPUSH
73968: LD_VAR 0 9
73972: PPUSH
73973: LD_VAR 0 4
73977: PPUSH
73978: LD_VAR 0 5
73982: PPUSH
73983: CALL 74025 0 6
73987: GO 74020
73989: LD_INT 304
73991: DOUBLE
73992: EQUAL
73993: IFTRUE 73997
73995: GO 74019
73997: POP
// hHackTeleport ( unit , x , y ) ; end ;
73998: LD_VAR 0 2
74002: PPUSH
74003: LD_VAR 0 4
74007: PPUSH
74008: LD_VAR 0 5
74012: PPUSH
74013: CALL 75796 0 3
74017: GO 74020
74019: POP
// end ;
74020: LD_VAR 0 12
74024: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74025: LD_INT 0
74027: PPUSH
74028: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74029: LD_VAR 0 1
74033: PUSH
74034: LD_INT 1
74036: LESS
74037: IFTRUE 74049
74039: PUSH
74040: LD_VAR 0 1
74044: PUSH
74045: LD_INT 3
74047: GREATER
74048: OR
74049: IFTRUE 74067
74051: PUSH
74052: LD_VAR 0 5
74056: PPUSH
74057: LD_VAR 0 6
74061: PPUSH
74062: CALL_OW 428
74066: OR
74067: IFFALSE 74071
// exit ;
74069: GO 74799
// uc_side := your_side ;
74071: LD_ADDR_OWVAR 20
74075: PUSH
74076: LD_OWVAR 2
74080: ST_TO_ADDR
// uc_nation := nation ;
74081: LD_ADDR_OWVAR 21
74085: PUSH
74086: LD_VAR 0 1
74090: ST_TO_ADDR
// bc_level = 1 ;
74091: LD_ADDR_OWVAR 43
74095: PUSH
74096: LD_INT 1
74098: ST_TO_ADDR
// case btype of 1 :
74099: LD_VAR 0 2
74103: PUSH
74104: LD_INT 1
74106: DOUBLE
74107: EQUAL
74108: IFTRUE 74112
74110: GO 74123
74112: POP
// bc_type := b_depot ; 2 :
74113: LD_ADDR_OWVAR 42
74117: PUSH
74118: LD_INT 0
74120: ST_TO_ADDR
74121: GO 74743
74123: LD_INT 2
74125: DOUBLE
74126: EQUAL
74127: IFTRUE 74131
74129: GO 74142
74131: POP
// bc_type := b_warehouse ; 3 :
74132: LD_ADDR_OWVAR 42
74136: PUSH
74137: LD_INT 1
74139: ST_TO_ADDR
74140: GO 74743
74142: LD_INT 3
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74150
74148: GO 74161
74150: POP
// bc_type := b_lab ; 4 .. 9 :
74151: LD_ADDR_OWVAR 42
74155: PUSH
74156: LD_INT 6
74158: ST_TO_ADDR
74159: GO 74743
74161: LD_INT 4
74163: DOUBLE
74164: GREATEREQUAL
74165: IFFALSE 74173
74167: LD_INT 9
74169: DOUBLE
74170: LESSEQUAL
74171: IFTRUE 74175
74173: GO 74235
74175: POP
// begin bc_type := b_lab_half ;
74176: LD_ADDR_OWVAR 42
74180: PUSH
74181: LD_INT 7
74183: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74184: LD_ADDR_OWVAR 44
74188: PUSH
74189: LD_INT 10
74191: PUSH
74192: LD_INT 11
74194: PUSH
74195: LD_INT 12
74197: PUSH
74198: LD_INT 15
74200: PUSH
74201: LD_INT 14
74203: PUSH
74204: LD_INT 13
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: PUSH
74215: LD_VAR 0 2
74219: PUSH
74220: LD_INT 3
74222: MINUS
74223: ARRAY
74224: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
74225: LD_ADDR_OWVAR 45
74229: PUSH
74230: LD_INT 9
74232: ST_TO_ADDR
// end ; 10 .. 13 :
74233: GO 74743
74235: LD_INT 10
74237: DOUBLE
74238: GREATEREQUAL
74239: IFFALSE 74247
74241: LD_INT 13
74243: DOUBLE
74244: LESSEQUAL
74245: IFTRUE 74249
74247: GO 74326
74249: POP
// begin bc_type := b_lab_full ;
74250: LD_ADDR_OWVAR 42
74254: PUSH
74255: LD_INT 8
74257: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74258: LD_ADDR_OWVAR 44
74262: PUSH
74263: LD_INT 10
74265: PUSH
74266: LD_INT 12
74268: PUSH
74269: LD_INT 14
74271: PUSH
74272: LD_INT 13
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: PUSH
74281: LD_VAR 0 2
74285: PUSH
74286: LD_INT 9
74288: MINUS
74289: ARRAY
74290: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74291: LD_ADDR_OWVAR 45
74295: PUSH
74296: LD_INT 11
74298: PUSH
74299: LD_INT 15
74301: PUSH
74302: LD_INT 12
74304: PUSH
74305: LD_INT 15
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_INT 9
74321: MINUS
74322: ARRAY
74323: ST_TO_ADDR
// end ; 14 :
74324: GO 74743
74326: LD_INT 14
74328: DOUBLE
74329: EQUAL
74330: IFTRUE 74334
74332: GO 74345
74334: POP
// bc_type := b_workshop ; 15 :
74335: LD_ADDR_OWVAR 42
74339: PUSH
74340: LD_INT 2
74342: ST_TO_ADDR
74343: GO 74743
74345: LD_INT 15
74347: DOUBLE
74348: EQUAL
74349: IFTRUE 74353
74351: GO 74364
74353: POP
// bc_type := b_factory ; 16 :
74354: LD_ADDR_OWVAR 42
74358: PUSH
74359: LD_INT 3
74361: ST_TO_ADDR
74362: GO 74743
74364: LD_INT 16
74366: DOUBLE
74367: EQUAL
74368: IFTRUE 74372
74370: GO 74383
74372: POP
// bc_type := b_ext_gun ; 17 :
74373: LD_ADDR_OWVAR 42
74377: PUSH
74378: LD_INT 17
74380: ST_TO_ADDR
74381: GO 74743
74383: LD_INT 17
74385: DOUBLE
74386: EQUAL
74387: IFTRUE 74391
74389: GO 74419
74391: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74392: LD_ADDR_OWVAR 42
74396: PUSH
74397: LD_INT 19
74399: PUSH
74400: LD_INT 23
74402: PUSH
74403: LD_INT 19
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: LD_VAR 0 1
74415: ARRAY
74416: ST_TO_ADDR
74417: GO 74743
74419: LD_INT 18
74421: DOUBLE
74422: EQUAL
74423: IFTRUE 74427
74425: GO 74438
74427: POP
// bc_type := b_ext_radar ; 19 :
74428: LD_ADDR_OWVAR 42
74432: PUSH
74433: LD_INT 20
74435: ST_TO_ADDR
74436: GO 74743
74438: LD_INT 19
74440: DOUBLE
74441: EQUAL
74442: IFTRUE 74446
74444: GO 74457
74446: POP
// bc_type := b_ext_radio ; 20 :
74447: LD_ADDR_OWVAR 42
74451: PUSH
74452: LD_INT 22
74454: ST_TO_ADDR
74455: GO 74743
74457: LD_INT 20
74459: DOUBLE
74460: EQUAL
74461: IFTRUE 74465
74463: GO 74476
74465: POP
// bc_type := b_ext_siberium ; 21 :
74466: LD_ADDR_OWVAR 42
74470: PUSH
74471: LD_INT 21
74473: ST_TO_ADDR
74474: GO 74743
74476: LD_INT 21
74478: DOUBLE
74479: EQUAL
74480: IFTRUE 74484
74482: GO 74495
74484: POP
// bc_type := b_ext_computer ; 22 :
74485: LD_ADDR_OWVAR 42
74489: PUSH
74490: LD_INT 24
74492: ST_TO_ADDR
74493: GO 74743
74495: LD_INT 22
74497: DOUBLE
74498: EQUAL
74499: IFTRUE 74503
74501: GO 74514
74503: POP
// bc_type := b_ext_track ; 23 :
74504: LD_ADDR_OWVAR 42
74508: PUSH
74509: LD_INT 16
74511: ST_TO_ADDR
74512: GO 74743
74514: LD_INT 23
74516: DOUBLE
74517: EQUAL
74518: IFTRUE 74522
74520: GO 74533
74522: POP
// bc_type := b_ext_laser ; 24 :
74523: LD_ADDR_OWVAR 42
74527: PUSH
74528: LD_INT 25
74530: ST_TO_ADDR
74531: GO 74743
74533: LD_INT 24
74535: DOUBLE
74536: EQUAL
74537: IFTRUE 74541
74539: GO 74552
74541: POP
// bc_type := b_control_tower ; 25 :
74542: LD_ADDR_OWVAR 42
74546: PUSH
74547: LD_INT 36
74549: ST_TO_ADDR
74550: GO 74743
74552: LD_INT 25
74554: DOUBLE
74555: EQUAL
74556: IFTRUE 74560
74558: GO 74571
74560: POP
// bc_type := b_breastwork ; 26 :
74561: LD_ADDR_OWVAR 42
74565: PUSH
74566: LD_INT 31
74568: ST_TO_ADDR
74569: GO 74743
74571: LD_INT 26
74573: DOUBLE
74574: EQUAL
74575: IFTRUE 74579
74577: GO 74590
74579: POP
// bc_type := b_bunker ; 27 :
74580: LD_ADDR_OWVAR 42
74584: PUSH
74585: LD_INT 32
74587: ST_TO_ADDR
74588: GO 74743
74590: LD_INT 27
74592: DOUBLE
74593: EQUAL
74594: IFTRUE 74598
74596: GO 74609
74598: POP
// bc_type := b_turret ; 28 :
74599: LD_ADDR_OWVAR 42
74603: PUSH
74604: LD_INT 33
74606: ST_TO_ADDR
74607: GO 74743
74609: LD_INT 28
74611: DOUBLE
74612: EQUAL
74613: IFTRUE 74617
74615: GO 74628
74617: POP
// bc_type := b_armoury ; 29 :
74618: LD_ADDR_OWVAR 42
74622: PUSH
74623: LD_INT 4
74625: ST_TO_ADDR
74626: GO 74743
74628: LD_INT 29
74630: DOUBLE
74631: EQUAL
74632: IFTRUE 74636
74634: GO 74647
74636: POP
// bc_type := b_barracks ; 30 :
74637: LD_ADDR_OWVAR 42
74641: PUSH
74642: LD_INT 5
74644: ST_TO_ADDR
74645: GO 74743
74647: LD_INT 30
74649: DOUBLE
74650: EQUAL
74651: IFTRUE 74655
74653: GO 74666
74655: POP
// bc_type := b_solar_power ; 31 :
74656: LD_ADDR_OWVAR 42
74660: PUSH
74661: LD_INT 27
74663: ST_TO_ADDR
74664: GO 74743
74666: LD_INT 31
74668: DOUBLE
74669: EQUAL
74670: IFTRUE 74674
74672: GO 74685
74674: POP
// bc_type := b_oil_power ; 32 :
74675: LD_ADDR_OWVAR 42
74679: PUSH
74680: LD_INT 26
74682: ST_TO_ADDR
74683: GO 74743
74685: LD_INT 32
74687: DOUBLE
74688: EQUAL
74689: IFTRUE 74693
74691: GO 74704
74693: POP
// bc_type := b_siberite_power ; 33 :
74694: LD_ADDR_OWVAR 42
74698: PUSH
74699: LD_INT 28
74701: ST_TO_ADDR
74702: GO 74743
74704: LD_INT 33
74706: DOUBLE
74707: EQUAL
74708: IFTRUE 74712
74710: GO 74723
74712: POP
// bc_type := b_oil_mine ; 34 :
74713: LD_ADDR_OWVAR 42
74717: PUSH
74718: LD_INT 29
74720: ST_TO_ADDR
74721: GO 74743
74723: LD_INT 34
74725: DOUBLE
74726: EQUAL
74727: IFTRUE 74731
74729: GO 74742
74731: POP
// bc_type := b_siberite_mine ; end ;
74732: LD_ADDR_OWVAR 42
74736: PUSH
74737: LD_INT 30
74739: ST_TO_ADDR
74740: GO 74743
74742: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74743: LD_ADDR_VAR 0 8
74747: PUSH
74748: LD_VAR 0 5
74752: PPUSH
74753: LD_VAR 0 6
74757: PPUSH
74758: LD_VAR 0 3
74762: PPUSH
74763: CALL_OW 47
74767: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74768: LD_OWVAR 42
74772: PUSH
74773: LD_INT 32
74775: PUSH
74776: LD_INT 33
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: IN
74783: IFFALSE 74799
// PlaceWeaponTurret ( b , weapon ) ;
74785: LD_VAR 0 8
74789: PPUSH
74790: LD_VAR 0 4
74794: PPUSH
74795: CALL_OW 431
// end ;
74799: LD_VAR 0 7
74803: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74804: LD_INT 0
74806: PPUSH
74807: PPUSH
74808: PPUSH
74809: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74810: LD_ADDR_VAR 0 4
74814: PUSH
74815: LD_INT 22
74817: PUSH
74818: LD_OWVAR 2
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 2
74829: PUSH
74830: LD_INT 30
74832: PUSH
74833: LD_INT 0
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 30
74842: PUSH
74843: LD_INT 1
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: LIST
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PPUSH
74859: CALL_OW 69
74863: ST_TO_ADDR
// if not tmp then
74864: LD_VAR 0 4
74868: NOT
74869: IFFALSE 74873
// exit ;
74871: GO 74932
// for i in tmp do
74873: LD_ADDR_VAR 0 2
74877: PUSH
74878: LD_VAR 0 4
74882: PUSH
74883: FOR_IN
74884: IFFALSE 74930
// for j = 1 to 3 do
74886: LD_ADDR_VAR 0 3
74890: PUSH
74891: DOUBLE
74892: LD_INT 1
74894: DEC
74895: ST_TO_ADDR
74896: LD_INT 3
74898: PUSH
74899: FOR_TO
74900: IFFALSE 74926
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74902: LD_VAR 0 2
74906: PPUSH
74907: CALL_OW 274
74911: PPUSH
74912: LD_VAR 0 3
74916: PPUSH
74917: LD_INT 99999
74919: PPUSH
74920: CALL_OW 277
74924: GO 74899
74926: POP
74927: POP
74928: GO 74883
74930: POP
74931: POP
// end ;
74932: LD_VAR 0 1
74936: RET
// export function hHackSetLevel10 ; var i , j ; begin
74937: LD_INT 0
74939: PPUSH
74940: PPUSH
74941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74942: LD_ADDR_VAR 0 2
74946: PUSH
74947: LD_INT 21
74949: PUSH
74950: LD_INT 1
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PPUSH
74957: CALL_OW 69
74961: PUSH
74962: FOR_IN
74963: IFFALSE 75015
// if IsSelected ( i ) then
74965: LD_VAR 0 2
74969: PPUSH
74970: CALL_OW 306
74974: IFFALSE 75013
// begin for j := 1 to 4 do
74976: LD_ADDR_VAR 0 3
74980: PUSH
74981: DOUBLE
74982: LD_INT 1
74984: DEC
74985: ST_TO_ADDR
74986: LD_INT 4
74988: PUSH
74989: FOR_TO
74990: IFFALSE 75011
// SetSkill ( i , j , 10 ) ;
74992: LD_VAR 0 2
74996: PPUSH
74997: LD_VAR 0 3
75001: PPUSH
75002: LD_INT 10
75004: PPUSH
75005: CALL_OW 237
75009: GO 74989
75011: POP
75012: POP
// end ;
75013: GO 74962
75015: POP
75016: POP
// end ;
75017: LD_VAR 0 1
75021: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75022: LD_INT 0
75024: PPUSH
75025: PPUSH
75026: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75027: LD_ADDR_VAR 0 2
75031: PUSH
75032: LD_INT 22
75034: PUSH
75035: LD_OWVAR 2
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 21
75046: PUSH
75047: LD_INT 1
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PPUSH
75058: CALL_OW 69
75062: PUSH
75063: FOR_IN
75064: IFFALSE 75105
// begin for j := 1 to 4 do
75066: LD_ADDR_VAR 0 3
75070: PUSH
75071: DOUBLE
75072: LD_INT 1
75074: DEC
75075: ST_TO_ADDR
75076: LD_INT 4
75078: PUSH
75079: FOR_TO
75080: IFFALSE 75101
// SetSkill ( i , j , 10 ) ;
75082: LD_VAR 0 2
75086: PPUSH
75087: LD_VAR 0 3
75091: PPUSH
75092: LD_INT 10
75094: PPUSH
75095: CALL_OW 237
75099: GO 75079
75101: POP
75102: POP
// end ;
75103: GO 75063
75105: POP
75106: POP
// end ;
75107: LD_VAR 0 1
75111: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75112: LD_INT 0
75114: PPUSH
// uc_side := your_side ;
75115: LD_ADDR_OWVAR 20
75119: PUSH
75120: LD_OWVAR 2
75124: ST_TO_ADDR
// uc_nation := nation ;
75125: LD_ADDR_OWVAR 21
75129: PUSH
75130: LD_VAR 0 1
75134: ST_TO_ADDR
// InitHc ;
75135: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75139: LD_INT 0
75141: PPUSH
75142: LD_VAR 0 2
75146: PPUSH
75147: LD_VAR 0 3
75151: PPUSH
75152: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75156: LD_VAR 0 4
75160: PPUSH
75161: LD_VAR 0 5
75165: PPUSH
75166: CALL_OW 428
75170: PUSH
75171: LD_INT 0
75173: EQUAL
75174: IFFALSE 75198
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75176: CALL_OW 44
75180: PPUSH
75181: LD_VAR 0 4
75185: PPUSH
75186: LD_VAR 0 5
75190: PPUSH
75191: LD_INT 1
75193: PPUSH
75194: CALL_OW 48
// end ;
75198: LD_VAR 0 6
75202: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75203: LD_INT 0
75205: PPUSH
75206: PPUSH
// uc_side := your_side ;
75207: LD_ADDR_OWVAR 20
75211: PUSH
75212: LD_OWVAR 2
75216: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75217: LD_VAR 0 1
75221: PUSH
75222: LD_INT 1
75224: PUSH
75225: LD_INT 2
75227: PUSH
75228: LD_INT 3
75230: PUSH
75231: LD_INT 4
75233: PUSH
75234: LD_INT 5
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: IN
75244: IFFALSE 75256
// uc_nation := nation_american else
75246: LD_ADDR_OWVAR 21
75250: PUSH
75251: LD_INT 1
75253: ST_TO_ADDR
75254: GO 75299
// if chassis in [ 11 , 12 , 13 , 14 ] then
75256: LD_VAR 0 1
75260: PUSH
75261: LD_INT 11
75263: PUSH
75264: LD_INT 12
75266: PUSH
75267: LD_INT 13
75269: PUSH
75270: LD_INT 14
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: IN
75279: IFFALSE 75291
// uc_nation := nation_arabian else
75281: LD_ADDR_OWVAR 21
75285: PUSH
75286: LD_INT 2
75288: ST_TO_ADDR
75289: GO 75299
// uc_nation := nation_russian ;
75291: LD_ADDR_OWVAR 21
75295: PUSH
75296: LD_INT 3
75298: ST_TO_ADDR
// vc_chassis := chassis ;
75299: LD_ADDR_OWVAR 37
75303: PUSH
75304: LD_VAR 0 1
75308: ST_TO_ADDR
// vc_engine := engine ;
75309: LD_ADDR_OWVAR 39
75313: PUSH
75314: LD_VAR 0 2
75318: ST_TO_ADDR
// vc_control := control ;
75319: LD_ADDR_OWVAR 38
75323: PUSH
75324: LD_VAR 0 3
75328: ST_TO_ADDR
// vc_weapon := weapon ;
75329: LD_ADDR_OWVAR 40
75333: PUSH
75334: LD_VAR 0 4
75338: ST_TO_ADDR
// un := CreateVehicle ;
75339: LD_ADDR_VAR 0 8
75343: PUSH
75344: CALL_OW 45
75348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75349: LD_VAR 0 8
75353: PPUSH
75354: LD_INT 0
75356: PPUSH
75357: LD_INT 5
75359: PPUSH
75360: CALL_OW 12
75364: PPUSH
75365: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75369: LD_VAR 0 8
75373: PPUSH
75374: LD_VAR 0 5
75378: PPUSH
75379: LD_VAR 0 6
75383: PPUSH
75384: LD_INT 1
75386: PPUSH
75387: CALL_OW 48
// end ;
75391: LD_VAR 0 7
75395: RET
// export hInvincible ; every 1 do
75396: GO 75398
75398: DISABLE
// hInvincible := [ ] ;
75399: LD_ADDR_EXP 108
75403: PUSH
75404: EMPTY
75405: ST_TO_ADDR
75406: END
// every 10 do var i ;
75407: GO 75409
75409: DISABLE
75410: LD_INT 0
75412: PPUSH
// begin enable ;
75413: ENABLE
// if not hInvincible then
75414: LD_EXP 108
75418: NOT
75419: IFFALSE 75423
// exit ;
75421: GO 75467
// for i in hInvincible do
75423: LD_ADDR_VAR 0 1
75427: PUSH
75428: LD_EXP 108
75432: PUSH
75433: FOR_IN
75434: IFFALSE 75465
// if GetLives ( i ) < 1000 then
75436: LD_VAR 0 1
75440: PPUSH
75441: CALL_OW 256
75445: PUSH
75446: LD_INT 1000
75448: LESS
75449: IFFALSE 75463
// SetLives ( i , 1000 ) ;
75451: LD_VAR 0 1
75455: PPUSH
75456: LD_INT 1000
75458: PPUSH
75459: CALL_OW 234
75463: GO 75433
75465: POP
75466: POP
// end ;
75467: PPOPN 1
75469: END
// export function hHackInvincible ; var i ; begin
75470: LD_INT 0
75472: PPUSH
75473: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75474: LD_ADDR_VAR 0 2
75478: PUSH
75479: LD_INT 2
75481: PUSH
75482: LD_INT 21
75484: PUSH
75485: LD_INT 1
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 21
75494: PUSH
75495: LD_INT 2
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: PPUSH
75507: CALL_OW 69
75511: PUSH
75512: FOR_IN
75513: IFFALSE 75574
// if IsSelected ( i ) then
75515: LD_VAR 0 2
75519: PPUSH
75520: CALL_OW 306
75524: IFFALSE 75572
// begin if i in hInvincible then
75526: LD_VAR 0 2
75530: PUSH
75531: LD_EXP 108
75535: IN
75536: IFFALSE 75556
// hInvincible := hInvincible diff i else
75538: LD_ADDR_EXP 108
75542: PUSH
75543: LD_EXP 108
75547: PUSH
75548: LD_VAR 0 2
75552: DIFF
75553: ST_TO_ADDR
75554: GO 75572
// hInvincible := hInvincible union i ;
75556: LD_ADDR_EXP 108
75560: PUSH
75561: LD_EXP 108
75565: PUSH
75566: LD_VAR 0 2
75570: UNION
75571: ST_TO_ADDR
// end ;
75572: GO 75512
75574: POP
75575: POP
// end ;
75576: LD_VAR 0 1
75580: RET
// export function hHackInvisible ; var i , j ; begin
75581: LD_INT 0
75583: PPUSH
75584: PPUSH
75585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75586: LD_ADDR_VAR 0 2
75590: PUSH
75591: LD_INT 21
75593: PUSH
75594: LD_INT 1
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PPUSH
75601: CALL_OW 69
75605: PUSH
75606: FOR_IN
75607: IFFALSE 75631
// if IsSelected ( i ) then
75609: LD_VAR 0 2
75613: PPUSH
75614: CALL_OW 306
75618: IFFALSE 75629
// ComForceInvisible ( i ) ;
75620: LD_VAR 0 2
75624: PPUSH
75625: CALL_OW 496
75629: GO 75606
75631: POP
75632: POP
// end ;
75633: LD_VAR 0 1
75637: RET
// export function hHackChangeYourSide ; begin
75638: LD_INT 0
75640: PPUSH
// if your_side = 8 then
75641: LD_OWVAR 2
75645: PUSH
75646: LD_INT 8
75648: EQUAL
75649: IFFALSE 75661
// your_side := 0 else
75651: LD_ADDR_OWVAR 2
75655: PUSH
75656: LD_INT 0
75658: ST_TO_ADDR
75659: GO 75675
// your_side := your_side + 1 ;
75661: LD_ADDR_OWVAR 2
75665: PUSH
75666: LD_OWVAR 2
75670: PUSH
75671: LD_INT 1
75673: PLUS
75674: ST_TO_ADDR
// end ;
75675: LD_VAR 0 1
75679: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75680: LD_INT 0
75682: PPUSH
75683: PPUSH
75684: PPUSH
// for i in all_units do
75685: LD_ADDR_VAR 0 2
75689: PUSH
75690: LD_OWVAR 3
75694: PUSH
75695: FOR_IN
75696: IFFALSE 75774
// if IsSelected ( i ) then
75698: LD_VAR 0 2
75702: PPUSH
75703: CALL_OW 306
75707: IFFALSE 75772
// begin j := GetSide ( i ) ;
75709: LD_ADDR_VAR 0 3
75713: PUSH
75714: LD_VAR 0 2
75718: PPUSH
75719: CALL_OW 255
75723: ST_TO_ADDR
// if j = 8 then
75724: LD_VAR 0 3
75728: PUSH
75729: LD_INT 8
75731: EQUAL
75732: IFFALSE 75744
// j := 0 else
75734: LD_ADDR_VAR 0 3
75738: PUSH
75739: LD_INT 0
75741: ST_TO_ADDR
75742: GO 75758
// j := j + 1 ;
75744: LD_ADDR_VAR 0 3
75748: PUSH
75749: LD_VAR 0 3
75753: PUSH
75754: LD_INT 1
75756: PLUS
75757: ST_TO_ADDR
// SetSide ( i , j ) ;
75758: LD_VAR 0 2
75762: PPUSH
75763: LD_VAR 0 3
75767: PPUSH
75768: CALL_OW 235
// end ;
75772: GO 75695
75774: POP
75775: POP
// end ;
75776: LD_VAR 0 1
75780: RET
// export function hHackFog ; begin
75781: LD_INT 0
75783: PPUSH
// FogOff ( true ) ;
75784: LD_INT 1
75786: PPUSH
75787: CALL_OW 344
// end ;
75791: LD_VAR 0 1
75795: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75796: LD_INT 0
75798: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75799: LD_VAR 0 1
75803: PPUSH
75804: LD_VAR 0 2
75808: PPUSH
75809: LD_VAR 0 3
75813: PPUSH
75814: LD_INT 1
75816: PPUSH
75817: LD_INT 1
75819: PPUSH
75820: CALL_OW 483
// CenterOnXY ( x , y ) ;
75824: LD_VAR 0 2
75828: PPUSH
75829: LD_VAR 0 3
75833: PPUSH
75834: CALL_OW 84
// end ;
75838: LD_VAR 0 4
75842: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75843: LD_INT 0
75845: PPUSH
75846: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75847: LD_VAR 0 1
75851: NOT
75852: IFTRUE 75871
75854: PUSH
75855: LD_VAR 0 2
75859: PPUSH
75860: LD_VAR 0 3
75864: PPUSH
75865: CALL_OW 488
75869: NOT
75870: OR
75871: IFTRUE 75906
75873: PUSH
75874: LD_VAR 0 1
75878: PPUSH
75879: CALL_OW 266
75883: PUSH
75884: LD_INT 3
75886: NONEQUAL
75887: IFFALSE 75905
75889: PUSH
75890: LD_VAR 0 1
75894: PPUSH
75895: CALL_OW 247
75899: PUSH
75900: LD_INT 1
75902: EQUAL
75903: NOT
75904: AND
75905: OR
75906: IFFALSE 75910
// exit ;
75908: GO 76192
// if GetType ( factory ) = unit_human then
75910: LD_VAR 0 1
75914: PPUSH
75915: CALL_OW 247
75919: PUSH
75920: LD_INT 1
75922: EQUAL
75923: IFFALSE 75940
// factory := IsInUnit ( factory ) ;
75925: LD_ADDR_VAR 0 1
75929: PUSH
75930: LD_VAR 0 1
75934: PPUSH
75935: CALL_OW 310
75939: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75940: LD_VAR 0 1
75944: PPUSH
75945: CALL_OW 266
75949: PUSH
75950: LD_INT 3
75952: NONEQUAL
75953: IFFALSE 75957
// exit ;
75955: GO 76192
// for i := 1 to Count ( factoryWaypoints ) do
75957: LD_ADDR_VAR 0 5
75961: PUSH
75962: DOUBLE
75963: LD_INT 1
75965: DEC
75966: ST_TO_ADDR
75967: LD_EXP 109
75971: PPUSH
75972: CALL 19882 0 1
75976: PUSH
75977: FOR_TO
75978: IFFALSE 76140
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
75980: LD_VAR 0 2
75984: PPUSH
75985: LD_VAR 0 3
75989: PPUSH
75990: CALL_OW 428
75994: PUSH
75995: LD_EXP 109
75999: PUSH
76000: LD_VAR 0 5
76004: ARRAY
76005: PUSH
76006: LD_INT 2
76008: ARRAY
76009: EQUAL
76010: IFFALSE 76042
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
76012: LD_ADDR_EXP 109
76016: PUSH
76017: LD_EXP 109
76021: PPUSH
76022: LD_VAR 0 5
76026: PPUSH
76027: CALL_OW 3
76031: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76032: CALL 76197 0 0
// exit ;
76036: POP
76037: POP
76038: GO 76192
// end else
76040: GO 76138
// if factory = factoryWaypoints [ i ] [ 2 ] then
76042: LD_VAR 0 1
76046: PUSH
76047: LD_EXP 109
76051: PUSH
76052: LD_VAR 0 5
76056: ARRAY
76057: PUSH
76058: LD_INT 2
76060: ARRAY
76061: EQUAL
76062: IFFALSE 76138
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
76064: LD_ADDR_EXP 109
76068: PUSH
76069: LD_EXP 109
76073: PPUSH
76074: LD_VAR 0 5
76078: PPUSH
76079: CALL_OW 3
76083: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
76084: LD_ADDR_EXP 109
76088: PUSH
76089: LD_EXP 109
76093: PPUSH
76094: LD_VAR 0 1
76098: PPUSH
76099: CALL_OW 255
76103: PUSH
76104: LD_VAR 0 1
76108: PUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_VAR 0 3
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: PPUSH
76125: CALL 55858 0 2
76129: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76130: CALL 76197 0 0
// exit ;
76134: POP
76135: POP
76136: GO 76192
// end ; end ;
76138: GO 75977
76140: POP
76141: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
76142: LD_ADDR_EXP 109
76146: PUSH
76147: LD_EXP 109
76151: PPUSH
76152: LD_VAR 0 1
76156: PPUSH
76157: CALL_OW 255
76161: PUSH
76162: LD_VAR 0 1
76166: PUSH
76167: LD_VAR 0 2
76171: PUSH
76172: LD_VAR 0 3
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: PPUSH
76183: CALL 55858 0 2
76187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76188: CALL 76197 0 0
// end ;
76192: LD_VAR 0 4
76196: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76197: LD_INT 0
76199: PPUSH
76200: PPUSH
76201: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76202: LD_STRING resetFactoryWaypoint();
76204: PPUSH
76205: CALL_OW 559
// if factoryWaypoints then
76209: LD_EXP 109
76213: IFFALSE 76334
// begin list := factoryWaypoints ;
76215: LD_ADDR_VAR 0 3
76219: PUSH
76220: LD_EXP 109
76224: ST_TO_ADDR
// for i := 1 to list do
76225: LD_ADDR_VAR 0 2
76229: PUSH
76230: DOUBLE
76231: LD_INT 1
76233: DEC
76234: ST_TO_ADDR
76235: LD_VAR 0 3
76239: PUSH
76240: FOR_TO
76241: IFFALSE 76332
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76243: LD_STRING setFactoryWaypointXY(
76245: PUSH
76246: LD_VAR 0 3
76250: PUSH
76251: LD_VAR 0 2
76255: ARRAY
76256: PUSH
76257: LD_INT 1
76259: ARRAY
76260: STR
76261: PUSH
76262: LD_STRING ,
76264: STR
76265: PUSH
76266: LD_VAR 0 3
76270: PUSH
76271: LD_VAR 0 2
76275: ARRAY
76276: PUSH
76277: LD_INT 2
76279: ARRAY
76280: STR
76281: PUSH
76282: LD_STRING ,
76284: STR
76285: PUSH
76286: LD_VAR 0 3
76290: PUSH
76291: LD_VAR 0 2
76295: ARRAY
76296: PUSH
76297: LD_INT 3
76299: ARRAY
76300: STR
76301: PUSH
76302: LD_STRING ,
76304: STR
76305: PUSH
76306: LD_VAR 0 3
76310: PUSH
76311: LD_VAR 0 2
76315: ARRAY
76316: PUSH
76317: LD_INT 4
76319: ARRAY
76320: STR
76321: PUSH
76322: LD_STRING )
76324: STR
76325: PPUSH
76326: CALL_OW 559
76330: GO 76240
76332: POP
76333: POP
// end ; end ;
76334: LD_VAR 0 1
76338: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76339: LD_INT 0
76341: PPUSH
// if HexInfo ( x , y ) = warehouse then
76342: LD_VAR 0 2
76346: PPUSH
76347: LD_VAR 0 3
76351: PPUSH
76352: CALL_OW 428
76356: PUSH
76357: LD_VAR 0 1
76361: EQUAL
76362: IFFALSE 76389
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76364: LD_ADDR_EXP 111
76368: PUSH
76369: LD_EXP 111
76373: PPUSH
76374: LD_VAR 0 1
76378: PPUSH
76379: LD_INT 0
76381: PPUSH
76382: CALL_OW 1
76386: ST_TO_ADDR
76387: GO 76440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76389: LD_ADDR_EXP 111
76393: PUSH
76394: LD_EXP 111
76398: PPUSH
76399: LD_VAR 0 1
76403: PPUSH
76404: LD_VAR 0 1
76408: PPUSH
76409: CALL_OW 255
76413: PUSH
76414: LD_VAR 0 1
76418: PUSH
76419: LD_VAR 0 2
76423: PUSH
76424: LD_VAR 0 3
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: PPUSH
76435: CALL_OW 1
76439: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76440: CALL 76449 0 0
// end ;
76444: LD_VAR 0 4
76448: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76449: LD_INT 0
76451: PPUSH
76452: PPUSH
76453: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76454: LD_STRING resetWarehouseGatheringPoints();
76456: PPUSH
76457: CALL_OW 559
// if warehouseGatheringPoints then
76461: LD_EXP 111
76465: IFFALSE 76591
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76467: LD_ADDR_VAR 0 3
76471: PUSH
76472: LD_EXP 111
76476: PPUSH
76477: CALL 59792 0 1
76481: ST_TO_ADDR
// for i := 1 to list do
76482: LD_ADDR_VAR 0 2
76486: PUSH
76487: DOUBLE
76488: LD_INT 1
76490: DEC
76491: ST_TO_ADDR
76492: LD_VAR 0 3
76496: PUSH
76497: FOR_TO
76498: IFFALSE 76589
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76500: LD_STRING setWarehouseGatheringPointXY(
76502: PUSH
76503: LD_VAR 0 3
76507: PUSH
76508: LD_VAR 0 2
76512: ARRAY
76513: PUSH
76514: LD_INT 1
76516: ARRAY
76517: STR
76518: PUSH
76519: LD_STRING ,
76521: STR
76522: PUSH
76523: LD_VAR 0 3
76527: PUSH
76528: LD_VAR 0 2
76532: ARRAY
76533: PUSH
76534: LD_INT 2
76536: ARRAY
76537: STR
76538: PUSH
76539: LD_STRING ,
76541: STR
76542: PUSH
76543: LD_VAR 0 3
76547: PUSH
76548: LD_VAR 0 2
76552: ARRAY
76553: PUSH
76554: LD_INT 3
76556: ARRAY
76557: STR
76558: PUSH
76559: LD_STRING ,
76561: STR
76562: PUSH
76563: LD_VAR 0 3
76567: PUSH
76568: LD_VAR 0 2
76572: ARRAY
76573: PUSH
76574: LD_INT 4
76576: ARRAY
76577: STR
76578: PUSH
76579: LD_STRING )
76581: STR
76582: PPUSH
76583: CALL_OW 559
76587: GO 76497
76589: POP
76590: POP
// end ; end ;
76591: LD_VAR 0 1
76595: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76596: LD_EXP 111
76600: IFFALSE 77295
76602: GO 76604
76604: DISABLE
76605: LD_INT 0
76607: PPUSH
76608: PPUSH
76609: PPUSH
76610: PPUSH
76611: PPUSH
76612: PPUSH
76613: PPUSH
76614: PPUSH
76615: PPUSH
// begin enable ;
76616: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76617: LD_ADDR_VAR 0 3
76621: PUSH
76622: LD_EXP 111
76626: PPUSH
76627: CALL 59792 0 1
76631: ST_TO_ADDR
// if not list then
76632: LD_VAR 0 3
76636: NOT
76637: IFFALSE 76641
// exit ;
76639: GO 77295
// for i := 1 to list do
76641: LD_ADDR_VAR 0 1
76645: PUSH
76646: DOUBLE
76647: LD_INT 1
76649: DEC
76650: ST_TO_ADDR
76651: LD_VAR 0 3
76655: PUSH
76656: FOR_TO
76657: IFFALSE 77293
// begin depot := list [ i ] [ 2 ] ;
76659: LD_ADDR_VAR 0 8
76663: PUSH
76664: LD_VAR 0 3
76668: PUSH
76669: LD_VAR 0 1
76673: ARRAY
76674: PUSH
76675: LD_INT 2
76677: ARRAY
76678: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76679: LD_ADDR_VAR 0 5
76683: PUSH
76684: LD_VAR 0 3
76688: PUSH
76689: LD_VAR 0 1
76693: ARRAY
76694: PUSH
76695: LD_INT 1
76697: ARRAY
76698: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76699: LD_VAR 0 8
76703: PPUSH
76704: CALL_OW 301
76708: IFTRUE 76727
76710: PUSH
76711: LD_VAR 0 5
76715: PUSH
76716: LD_VAR 0 8
76720: PPUSH
76721: CALL_OW 255
76725: NONEQUAL
76726: OR
76727: IFFALSE 76756
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76729: LD_ADDR_EXP 111
76733: PUSH
76734: LD_EXP 111
76738: PPUSH
76739: LD_VAR 0 8
76743: PPUSH
76744: LD_INT 0
76746: PPUSH
76747: CALL_OW 1
76751: ST_TO_ADDR
// exit ;
76752: POP
76753: POP
76754: GO 77295
// end ; x := list [ i ] [ 3 ] ;
76756: LD_ADDR_VAR 0 6
76760: PUSH
76761: LD_VAR 0 3
76765: PUSH
76766: LD_VAR 0 1
76770: ARRAY
76771: PUSH
76772: LD_INT 3
76774: ARRAY
76775: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76776: LD_ADDR_VAR 0 7
76780: PUSH
76781: LD_VAR 0 3
76785: PUSH
76786: LD_VAR 0 1
76790: ARRAY
76791: PUSH
76792: LD_INT 4
76794: ARRAY
76795: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76796: LD_ADDR_VAR 0 9
76800: PUSH
76801: LD_VAR 0 6
76805: PPUSH
76806: LD_VAR 0 7
76810: PPUSH
76811: LD_INT 16
76813: PPUSH
76814: CALL 58366 0 3
76818: ST_TO_ADDR
// if not cratesNearbyPoint then
76819: LD_VAR 0 9
76823: NOT
76824: IFFALSE 76830
// exit ;
76826: POP
76827: POP
76828: GO 77295
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76830: LD_ADDR_VAR 0 4
76834: PUSH
76835: LD_INT 22
76837: PUSH
76838: LD_VAR 0 5
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 3
76849: PUSH
76850: LD_INT 60
76852: PUSH
76853: EMPTY
76854: LIST
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: PUSH
76860: LD_INT 91
76862: PUSH
76863: LD_VAR 0 8
76867: PUSH
76868: LD_INT 6
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: LIST
76875: PUSH
76876: LD_INT 2
76878: PUSH
76879: LD_INT 25
76881: PUSH
76882: LD_INT 2
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: PUSH
76889: LD_INT 25
76891: PUSH
76892: LD_INT 16
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: LIST
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: PPUSH
76910: CALL_OW 69
76914: PUSH
76915: LD_VAR 0 8
76919: PPUSH
76920: CALL_OW 313
76924: PPUSH
76925: LD_INT 3
76927: PUSH
76928: LD_INT 60
76930: PUSH
76931: EMPTY
76932: LIST
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 2
76940: PUSH
76941: LD_INT 25
76943: PUSH
76944: LD_INT 2
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: PUSH
76951: LD_INT 25
76953: PUSH
76954: LD_INT 16
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: LIST
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PPUSH
76970: CALL_OW 72
76974: UNION
76975: ST_TO_ADDR
// if tmp then
76976: LD_VAR 0 4
76980: IFFALSE 77060
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76982: LD_ADDR_VAR 0 4
76986: PUSH
76987: LD_VAR 0 4
76991: PPUSH
76992: LD_INT 3
76994: PPUSH
76995: CALL 56173 0 2
76999: ST_TO_ADDR
// for j in tmp do
77000: LD_ADDR_VAR 0 2
77004: PUSH
77005: LD_VAR 0 4
77009: PUSH
77010: FOR_IN
77011: IFFALSE 77054
// begin if IsInUnit ( j ) then
77013: LD_VAR 0 2
77017: PPUSH
77018: CALL_OW 310
77022: IFFALSE 77033
// ComExit ( j ) ;
77024: LD_VAR 0 2
77028: PPUSH
77029: CALL 56256 0 1
// AddComCollect ( j , x , y ) ;
77033: LD_VAR 0 2
77037: PPUSH
77038: LD_VAR 0 6
77042: PPUSH
77043: LD_VAR 0 7
77047: PPUSH
77048: CALL_OW 177
// end ;
77052: GO 77010
77054: POP
77055: POP
// exit ;
77056: POP
77057: POP
77058: GO 77295
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77060: LD_ADDR_VAR 0 4
77064: PUSH
77065: LD_INT 22
77067: PUSH
77068: LD_VAR 0 5
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 91
77079: PUSH
77080: LD_VAR 0 8
77084: PUSH
77085: LD_INT 8
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 2
77095: PUSH
77096: LD_INT 34
77098: PUSH
77099: LD_INT 12
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 34
77108: PUSH
77109: LD_INT 51
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PUSH
77116: LD_INT 34
77118: PUSH
77119: LD_INT 32
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: LD_INT 34
77128: PUSH
77129: LD_INT 89
77131: PUSH
77132: EMPTY
77133: LIST
77134: LIST
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: LIST
77147: PPUSH
77148: CALL_OW 69
77152: ST_TO_ADDR
// if tmp then
77153: LD_VAR 0 4
77157: IFFALSE 77291
// begin for j in tmp do
77159: LD_ADDR_VAR 0 2
77163: PUSH
77164: LD_VAR 0 4
77168: PUSH
77169: FOR_IN
77170: IFFALSE 77289
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77172: LD_VAR 0 2
77176: PPUSH
77177: CALL_OW 262
77181: PUSH
77182: LD_INT 3
77184: EQUAL
77185: IFTRUE 77202
77187: PUSH
77188: LD_VAR 0 2
77192: PPUSH
77193: CALL_OW 261
77197: PUSH
77198: LD_INT 20
77200: GREATER
77201: OR
77202: IFFALSE 77216
77204: PUSH
77205: LD_VAR 0 2
77209: PPUSH
77210: CALL_OW 314
77214: NOT
77215: AND
77216: IFFALSE 77246
77218: PUSH
77219: LD_VAR 0 2
77223: PPUSH
77224: CALL_OW 263
77228: PUSH
77229: LD_INT 1
77231: NONEQUAL
77232: IFTRUE 77245
77234: PUSH
77235: LD_VAR 0 2
77239: PPUSH
77240: CALL_OW 311
77244: OR
77245: AND
77246: IFFALSE 77287
// begin ComCollect ( j , x , y ) ;
77248: LD_VAR 0 2
77252: PPUSH
77253: LD_VAR 0 6
77257: PPUSH
77258: LD_VAR 0 7
77262: PPUSH
77263: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77267: LD_VAR 0 2
77271: PPUSH
77272: LD_VAR 0 8
77276: PPUSH
77277: CALL_OW 172
// exit ;
77281: POP
77282: POP
77283: POP
77284: POP
77285: GO 77295
// end ;
77287: GO 77169
77289: POP
77290: POP
// end ; end ;
77291: GO 76656
77293: POP
77294: POP
// end ; end_of_file
77295: PPOPN 9
77297: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77298: LD_VAR 0 1
77302: PPUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: LD_VAR 0 3
77312: PPUSH
77313: LD_VAR 0 4
77317: PPUSH
77318: LD_VAR 0 5
77322: PPUSH
77323: LD_VAR 0 6
77327: PPUSH
77328: CALL 61391 0 6
// end ;
77332: PPOPN 6
77334: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77335: LD_INT 0
77337: PPUSH
// begin if not units then
77338: LD_VAR 0 1
77342: NOT
77343: IFFALSE 77347
// exit ;
77345: GO 77381
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77347: LD_VAR 0 1
77351: PPUSH
77352: LD_VAR 0 2
77356: PPUSH
77357: LD_VAR 0 3
77361: PPUSH
77362: LD_VAR 0 4
77366: PPUSH
77367: LD_VAR 0 5
77371: PPUSH
77372: LD_VAR 0 6
77376: PPUSH
77377: CALL 84001 0 6
// end ;
77381: PPOPN 7
77383: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77384: CALL 61271 0 0
// end ; end_of_file
77388: PPOPN 1
77390: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77391: LD_VAR 0 1
77395: PUSH
77396: LD_INT 200
77398: DOUBLE
77399: GREATEREQUAL
77400: IFFALSE 77408
77402: LD_INT 299
77404: DOUBLE
77405: LESSEQUAL
77406: IFTRUE 77410
77408: GO 77442
77410: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77411: LD_VAR 0 1
77415: PPUSH
77416: LD_VAR 0 2
77420: PPUSH
77421: LD_VAR 0 3
77425: PPUSH
77426: LD_VAR 0 4
77430: PPUSH
77431: LD_VAR 0 5
77435: PPUSH
77436: CALL 78304 0 5
77440: GO 77519
77442: LD_INT 300
77444: DOUBLE
77445: GREATEREQUAL
77446: IFFALSE 77454
77448: LD_INT 399
77450: DOUBLE
77451: LESSEQUAL
77452: IFTRUE 77456
77454: GO 77518
77456: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77457: LD_VAR 0 1
77461: PPUSH
77462: LD_VAR 0 2
77466: PPUSH
77467: LD_VAR 0 3
77471: PPUSH
77472: LD_VAR 0 4
77476: PPUSH
77477: LD_VAR 0 5
77481: PPUSH
77482: LD_VAR 0 6
77486: PPUSH
77487: LD_VAR 0 7
77491: PPUSH
77492: LD_VAR 0 8
77496: PPUSH
77497: LD_VAR 0 9
77501: PPUSH
77502: LD_VAR 0 10
77506: PPUSH
77507: LD_VAR 0 11
77511: PPUSH
77512: CALL 73851 0 11
77516: GO 77519
77518: POP
// end ;
77519: PPOPN 11
77521: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77522: LD_VAR 0 1
77526: PPUSH
77527: LD_VAR 0 2
77531: PPUSH
77532: LD_VAR 0 3
77536: PPUSH
77537: LD_VAR 0 4
77541: PPUSH
77542: LD_VAR 0 5
77546: PPUSH
77547: CALL 77604 0 5
// end ; end_of_file
77551: PPOPN 5
77553: END
// export function SOS_UnitDestroyed ( un ) ; begin
77554: LD_INT 0
77556: PPUSH
// ComRadiation ( un ) ;
77557: LD_VAR 0 1
77561: PPUSH
77562: CALL 78724 0 1
// end ;
77566: LD_VAR 0 2
77570: RET
// export function SOS_UnitKamikazed ( un ) ; begin
77571: LD_INT 0
77573: PPUSH
// ComRadiation ( un ) ;
77574: LD_VAR 0 1
77578: PPUSH
77579: CALL 78724 0 1
// end ;
77583: LD_VAR 0 2
77587: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77588: LD_INT 0
77590: PPUSH
// end ;
77591: LD_VAR 0 4
77595: RET
// export function SOS_Command ( cmd ) ; begin
77596: LD_INT 0
77598: PPUSH
// end ;
77599: LD_VAR 0 2
77603: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77604: LD_INT 0
77606: PPUSH
// end ;
77607: LD_VAR 0 6
77611: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
77612: LD_INT 0
77614: PPUSH
77615: PPUSH
77616: PPUSH
77617: PPUSH
77618: PPUSH
// if not vehicle or not factory then
77619: LD_VAR 0 1
77623: NOT
77624: IFTRUE 77633
77626: PUSH
77627: LD_VAR 0 2
77631: NOT
77632: OR
77633: IFFALSE 77637
// exit ;
77635: GO 78299
// weapon := GetWeapon ( vehicle ) ;
77637: LD_ADDR_VAR 0 7
77641: PUSH
77642: LD_VAR 0 1
77646: PPUSH
77647: CALL_OW 264
77651: ST_TO_ADDR
// if weapon = ar_miner then
77652: LD_VAR 0 7
77656: PUSH
77657: LD_INT 81
77659: EQUAL
77660: IFFALSE 77717
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
77662: LD_ADDR_EXP 120
77666: PUSH
77667: LD_EXP 120
77671: PPUSH
77672: LD_EXP 120
77676: PUSH
77677: LD_INT 1
77679: PLUS
77680: PPUSH
77681: LD_VAR 0 1
77685: PPUSH
77686: CALL_OW 1
77690: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77691: LD_ADDR_EXP 121
77695: PUSH
77696: LD_EXP 121
77700: PPUSH
77701: LD_EXP 121
77705: PUSH
77706: LD_INT 1
77708: PLUS
77709: PPUSH
77710: EMPTY
77711: PPUSH
77712: CALL_OW 1
77716: ST_TO_ADDR
// end ; if not factoryWaypoints then
77717: LD_EXP 109
77721: NOT
77722: IFFALSE 77726
// exit ;
77724: GO 78299
// for i := 1 to Count ( factoryWaypoints ) do
77726: LD_ADDR_VAR 0 4
77730: PUSH
77731: DOUBLE
77732: LD_INT 1
77734: DEC
77735: ST_TO_ADDR
77736: LD_EXP 109
77740: PPUSH
77741: CALL 19882 0 1
77745: PUSH
77746: FOR_TO
77747: IFFALSE 78297
// if factoryWaypoints [ i ] [ 2 ] = factory then
77749: LD_EXP 109
77753: PUSH
77754: LD_VAR 0 4
77758: ARRAY
77759: PUSH
77760: LD_INT 2
77762: ARRAY
77763: PUSH
77764: LD_VAR 0 2
77768: EQUAL
77769: IFFALSE 78295
// begin if GetControl ( vehicle ) = control_manual then
77771: LD_VAR 0 1
77775: PPUSH
77776: CALL_OW 263
77780: PUSH
77781: LD_INT 1
77783: EQUAL
77784: IFFALSE 78148
// begin driver := IsDrivenBy ( vehicle ) ;
77786: LD_ADDR_VAR 0 5
77790: PUSH
77791: LD_VAR 0 1
77795: PPUSH
77796: CALL_OW 311
77800: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
77801: LD_VAR 0 5
77805: PUSH
77806: LD_EXP 110
77810: IN
77811: IFTRUE 77825
77813: PUSH
77814: LD_VAR 0 1
77818: PUSH
77819: LD_EXP 110
77823: IN
77824: OR
77825: IFFALSE 77831
// exit ;
77827: POP
77828: POP
77829: GO 78299
// if not HasTask ( driver ) then
77831: LD_VAR 0 5
77835: PPUSH
77836: CALL_OW 314
77840: NOT
77841: IFFALSE 78146
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
77843: LD_ADDR_EXP 110
77847: PUSH
77848: LD_EXP 110
77852: PPUSH
77853: LD_VAR 0 5
77857: PPUSH
77858: CALL 55858 0 2
77862: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
77863: LD_ADDR_EXP 110
77867: PUSH
77868: LD_EXP 110
77872: PPUSH
77873: LD_VAR 0 1
77877: PPUSH
77878: CALL 55858 0 2
77882: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77883: LD_ADDR_VAR 0 6
77887: PUSH
77888: LD_EXP 109
77892: PUSH
77893: LD_VAR 0 4
77897: ARRAY
77898: PUSH
77899: LD_INT 3
77901: ARRAY
77902: PPUSH
77903: LD_EXP 109
77907: PUSH
77908: LD_VAR 0 4
77912: ARRAY
77913: PUSH
77914: LD_INT 4
77916: ARRAY
77917: PPUSH
77918: CALL_OW 428
77922: ST_TO_ADDR
// if hex then
77923: LD_VAR 0 6
77927: IFFALSE 77945
// ComMoveUnit ( driver , hex ) else
77929: LD_VAR 0 5
77933: PPUSH
77934: LD_VAR 0 6
77938: PPUSH
77939: CALL_OW 112
77943: GO 78029
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
77945: LD_VAR 0 1
77949: PPUSH
77950: LD_EXP 109
77954: PUSH
77955: LD_VAR 0 4
77959: ARRAY
77960: PUSH
77961: LD_INT 3
77963: ARRAY
77964: PPUSH
77965: LD_EXP 109
77969: PUSH
77970: LD_VAR 0 4
77974: ARRAY
77975: PUSH
77976: LD_INT 4
77978: ARRAY
77979: PPUSH
77980: CALL_OW 297
77984: PUSH
77985: LD_INT 0
77987: GREATER
77988: IFFALSE 78029
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77990: LD_VAR 0 5
77994: PPUSH
77995: LD_EXP 109
77999: PUSH
78000: LD_VAR 0 4
78004: ARRAY
78005: PUSH
78006: LD_INT 3
78008: ARRAY
78009: PPUSH
78010: LD_EXP 109
78014: PUSH
78015: LD_VAR 0 4
78019: ARRAY
78020: PUSH
78021: LD_INT 4
78023: ARRAY
78024: PPUSH
78025: CALL_OW 111
// AddComExitVehicle ( driver ) ;
78029: LD_VAR 0 5
78033: PPUSH
78034: CALL_OW 181
// if Multiplayer then
78038: LD_OWVAR 4
78042: IFFALSE 78091
// begin repeat wait ( 10 ) ;
78044: LD_INT 10
78046: PPUSH
78047: CALL_OW 67
// until not IsInUnit ( driver ) ;
78051: LD_VAR 0 5
78055: PPUSH
78056: CALL_OW 310
78060: NOT
78061: IFFALSE 78044
// if not HasTask ( driver ) then
78063: LD_VAR 0 5
78067: PPUSH
78068: CALL_OW 314
78072: NOT
78073: IFFALSE 78089
// ComEnterUnit ( driver , factory ) ;
78075: LD_VAR 0 5
78079: PPUSH
78080: LD_VAR 0 2
78084: PPUSH
78085: CALL_OW 120
// end else
78089: GO 78105
// AddComEnterUnit ( driver , factory ) ;
78091: LD_VAR 0 5
78095: PPUSH
78096: LD_VAR 0 2
78100: PPUSH
78101: CALL_OW 180
// wait ( 0 0$1 ) ;
78105: LD_INT 35
78107: PPUSH
78108: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
78112: LD_ADDR_EXP 110
78116: PUSH
78117: LD_EXP 110
78121: PUSH
78122: LD_VAR 0 5
78126: DIFF
78127: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
78128: LD_ADDR_EXP 110
78132: PUSH
78133: LD_EXP 110
78137: PUSH
78138: LD_VAR 0 1
78142: DIFF
78143: ST_TO_ADDR
// break ;
78144: GO 78297
// end ; end else
78146: GO 78295
// if GetControl ( vehicle ) = control_remote then
78148: LD_VAR 0 1
78152: PPUSH
78153: CALL_OW 263
78157: PUSH
78158: LD_INT 2
78160: EQUAL
78161: IFFALSE 78247
// begin wait ( 0 0$2 ) ;
78163: LD_INT 70
78165: PPUSH
78166: CALL_OW 67
// repeat wait ( 10 ) ;
78170: LD_INT 10
78172: PPUSH
78173: CALL_OW 67
// Connect ( vehicle ) ;
78177: LD_VAR 0 1
78181: PPUSH
78182: CALL 26160 0 1
// until IsControledBy ( vehicle ) ;
78186: LD_VAR 0 1
78190: PPUSH
78191: CALL_OW 312
78195: IFFALSE 78170
// wait ( 10 ) ;
78197: LD_INT 10
78199: PPUSH
78200: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
78204: LD_VAR 0 1
78208: PPUSH
78209: LD_EXP 109
78213: PUSH
78214: LD_VAR 0 4
78218: ARRAY
78219: PUSH
78220: LD_INT 3
78222: ARRAY
78223: PPUSH
78224: LD_EXP 109
78228: PUSH
78229: LD_VAR 0 4
78233: ARRAY
78234: PUSH
78235: LD_INT 4
78237: ARRAY
78238: PPUSH
78239: CALL_OW 111
// break ;
78243: GO 78297
// end else
78245: GO 78295
// begin wait ( 0 0$3 ) ;
78247: LD_INT 105
78249: PPUSH
78250: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
78254: LD_VAR 0 1
78258: PPUSH
78259: LD_EXP 109
78263: PUSH
78264: LD_VAR 0 4
78268: ARRAY
78269: PUSH
78270: LD_INT 3
78272: ARRAY
78273: PPUSH
78274: LD_EXP 109
78278: PUSH
78279: LD_VAR 0 4
78283: ARRAY
78284: PUSH
78285: LD_INT 4
78287: ARRAY
78288: PPUSH
78289: CALL_OW 111
// break ;
78293: GO 78297
// end ; end ;
78295: GO 77746
78297: POP
78298: POP
// end ;
78299: LD_VAR 0 3
78303: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78304: LD_INT 0
78306: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78307: LD_VAR 0 1
78311: PUSH
78312: LD_INT 250
78314: EQUAL
78315: IFFALSE 78332
78317: PUSH
78318: LD_VAR 0 2
78322: PPUSH
78323: CALL_OW 264
78327: PUSH
78328: LD_INT 81
78330: EQUAL
78331: AND
78332: IFFALSE 78353
// MinerPlaceMine ( unit , x , y ) ;
78334: LD_VAR 0 2
78338: PPUSH
78339: LD_VAR 0 4
78343: PPUSH
78344: LD_VAR 0 5
78348: PPUSH
78349: CALL 81699 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78353: LD_VAR 0 1
78357: PUSH
78358: LD_INT 251
78360: EQUAL
78361: IFFALSE 78378
78363: PUSH
78364: LD_VAR 0 2
78368: PPUSH
78369: CALL_OW 264
78373: PUSH
78374: LD_INT 81
78376: EQUAL
78377: AND
78378: IFFALSE 78399
// MinerDetonateMine ( unit , x , y ) ;
78380: LD_VAR 0 2
78384: PPUSH
78385: LD_VAR 0 4
78389: PPUSH
78390: LD_VAR 0 5
78394: PPUSH
78395: CALL 82106 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78399: LD_VAR 0 1
78403: PUSH
78404: LD_INT 252
78406: EQUAL
78407: IFFALSE 78424
78409: PUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: CALL_OW 264
78419: PUSH
78420: LD_INT 81
78422: EQUAL
78423: AND
78424: IFFALSE 78445
// MinerCreateMinefield ( unit , x , y ) ;
78426: LD_VAR 0 2
78430: PPUSH
78431: LD_VAR 0 4
78435: PPUSH
78436: LD_VAR 0 5
78440: PPUSH
78441: CALL 82338 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78445: LD_VAR 0 1
78449: PUSH
78450: LD_INT 253
78452: EQUAL
78453: IFFALSE 78470
78455: PUSH
78456: LD_VAR 0 2
78460: PPUSH
78461: CALL_OW 257
78465: PUSH
78466: LD_INT 5
78468: EQUAL
78469: AND
78470: IFFALSE 78491
// ComBinocular ( unit , x , y ) ;
78472: LD_VAR 0 2
78476: PPUSH
78477: LD_VAR 0 4
78481: PPUSH
78482: LD_VAR 0 5
78486: PPUSH
78487: CALL 82713 0 3
// if selectedUnit then
78491: LD_VAR 0 3
78495: IFFALSE 78555
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78497: LD_VAR 0 1
78501: PUSH
78502: LD_INT 254
78504: EQUAL
78505: IFFALSE 78522
78507: PUSH
78508: LD_VAR 0 2
78512: PPUSH
78513: CALL_OW 264
78517: PUSH
78518: LD_INT 99
78520: EQUAL
78521: AND
78522: IFFALSE 78539
78524: PUSH
78525: LD_VAR 0 3
78529: PPUSH
78530: CALL_OW 263
78534: PUSH
78535: LD_INT 3
78537: EQUAL
78538: AND
78539: IFFALSE 78555
// HackDestroyVehicle ( unit , selectedUnit ) ;
78541: LD_VAR 0 2
78545: PPUSH
78546: LD_VAR 0 3
78550: PPUSH
78551: CALL 80889 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78555: LD_VAR 0 1
78559: PUSH
78560: LD_INT 255
78562: EQUAL
78563: IFFALSE 78587
78565: PUSH
78566: LD_VAR 0 2
78570: PPUSH
78571: CALL_OW 264
78575: PUSH
78576: LD_INT 14
78578: PUSH
78579: LD_INT 53
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: IN
78586: AND
78587: IFFALSE 78605
78589: PUSH
78590: LD_VAR 0 4
78594: PPUSH
78595: LD_VAR 0 5
78599: PPUSH
78600: CALL_OW 488
78604: AND
78605: IFFALSE 78629
// CutTreeXYR ( unit , x , y , 12 ) ;
78607: LD_VAR 0 2
78611: PPUSH
78612: LD_VAR 0 4
78616: PPUSH
78617: LD_VAR 0 5
78621: PPUSH
78622: LD_INT 12
78624: PPUSH
78625: CALL 78820 0 4
// if cmd = 256 then
78629: LD_VAR 0 1
78633: PUSH
78634: LD_INT 256
78636: EQUAL
78637: IFFALSE 78658
// SetFactoryWaypoint ( unit , x , y ) ;
78639: LD_VAR 0 2
78643: PPUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: LD_VAR 0 5
78653: PPUSH
78654: CALL 75843 0 3
// if cmd = 257 then
78658: LD_VAR 0 1
78662: PUSH
78663: LD_INT 257
78665: EQUAL
78666: IFFALSE 78687
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78668: LD_VAR 0 2
78672: PPUSH
78673: LD_VAR 0 4
78677: PPUSH
78678: LD_VAR 0 5
78682: PPUSH
78683: CALL 76339 0 3
// if cmd = 258 then
78687: LD_VAR 0 1
78691: PUSH
78692: LD_INT 258
78694: EQUAL
78695: IFFALSE 78719
// BurnTreeXYR ( unit , x , y , 8 ) ;
78697: LD_VAR 0 2
78701: PPUSH
78702: LD_VAR 0 4
78706: PPUSH
78707: LD_VAR 0 5
78711: PPUSH
78712: LD_INT 8
78714: PPUSH
78715: CALL 79242 0 4
// end ;
78719: LD_VAR 0 6
78723: RET
// export function ComRadiation ( un ) ; var eff ; begin
78724: LD_INT 0
78726: PPUSH
78727: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
78728: LD_VAR 0 1
78732: PPUSH
78733: CALL_OW 264
78737: PUSH
78738: LD_INT 91
78740: NONEQUAL
78741: IFFALSE 78745
// exit ;
78743: GO 78815
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78745: LD_INT 68
78747: PPUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: CALL_OW 255
78757: PPUSH
78758: CALL_OW 321
78762: PUSH
78763: LD_INT 2
78765: EQUAL
78766: IFFALSE 78778
// eff := 50 else
78768: LD_ADDR_VAR 0 3
78772: PUSH
78773: LD_INT 50
78775: ST_TO_ADDR
78776: GO 78786
// eff := 25 ;
78778: LD_ADDR_VAR 0 3
78782: PUSH
78783: LD_INT 25
78785: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78786: LD_VAR 0 1
78790: PPUSH
78791: CALL_OW 250
78795: PPUSH
78796: LD_VAR 0 1
78800: PPUSH
78801: CALL_OW 251
78805: PPUSH
78806: LD_VAR 0 3
78810: PPUSH
78811: CALL_OW 495
// end ;
78815: LD_VAR 0 2
78819: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78820: LD_INT 0
78822: PPUSH
78823: PPUSH
78824: PPUSH
78825: PPUSH
78826: PPUSH
78827: PPUSH
78828: PPUSH
78829: PPUSH
78830: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
78831: LD_VAR 0 1
78835: PPUSH
78836: CALL_OW 302
78840: NOT
78841: IFTRUE 78860
78843: PUSH
78844: LD_VAR 0 2
78848: PPUSH
78849: LD_VAR 0 3
78853: PPUSH
78854: CALL_OW 488
78858: NOT
78859: OR
78860: IFTRUE 78869
78862: PUSH
78863: LD_VAR 0 4
78867: NOT
78868: OR
78869: IFFALSE 78873
// exit ;
78871: GO 79237
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
78873: LD_VAR 0 1
78877: PPUSH
78878: CALL_OW 437
78882: PPUSH
78883: CALL 19882 0 1
78887: PUSH
78888: LD_INT 10
78890: GREATER
78891: IFFALSE 78895
// exit ;
78893: GO 79237
// list := [ ] ;
78895: LD_ADDR_VAR 0 13
78899: PUSH
78900: EMPTY
78901: ST_TO_ADDR
// if x - r < 0 then
78902: LD_VAR 0 2
78906: PUSH
78907: LD_VAR 0 4
78911: MINUS
78912: PUSH
78913: LD_INT 0
78915: LESS
78916: IFFALSE 78928
// min_x := 0 else
78918: LD_ADDR_VAR 0 7
78922: PUSH
78923: LD_INT 0
78925: ST_TO_ADDR
78926: GO 78944
// min_x := x - r ;
78928: LD_ADDR_VAR 0 7
78932: PUSH
78933: LD_VAR 0 2
78937: PUSH
78938: LD_VAR 0 4
78942: MINUS
78943: ST_TO_ADDR
// if y - r < 0 then
78944: LD_VAR 0 3
78948: PUSH
78949: LD_VAR 0 4
78953: MINUS
78954: PUSH
78955: LD_INT 0
78957: LESS
78958: IFFALSE 78970
// min_y := 0 else
78960: LD_ADDR_VAR 0 8
78964: PUSH
78965: LD_INT 0
78967: ST_TO_ADDR
78968: GO 78986
// min_y := y - r ;
78970: LD_ADDR_VAR 0 8
78974: PUSH
78975: LD_VAR 0 3
78979: PUSH
78980: LD_VAR 0 4
78984: MINUS
78985: ST_TO_ADDR
// max_x := x + r ;
78986: LD_ADDR_VAR 0 9
78990: PUSH
78991: LD_VAR 0 2
78995: PUSH
78996: LD_VAR 0 4
79000: PLUS
79001: ST_TO_ADDR
// max_y := y + r ;
79002: LD_ADDR_VAR 0 10
79006: PUSH
79007: LD_VAR 0 3
79011: PUSH
79012: LD_VAR 0 4
79016: PLUS
79017: ST_TO_ADDR
// for _x = min_x to max_x do
79018: LD_ADDR_VAR 0 11
79022: PUSH
79023: DOUBLE
79024: LD_VAR 0 7
79028: DEC
79029: ST_TO_ADDR
79030: LD_VAR 0 9
79034: PUSH
79035: FOR_TO
79036: IFFALSE 79155
// for _y = min_y to max_y do
79038: LD_ADDR_VAR 0 12
79042: PUSH
79043: DOUBLE
79044: LD_VAR 0 8
79048: DEC
79049: ST_TO_ADDR
79050: LD_VAR 0 10
79054: PUSH
79055: FOR_TO
79056: IFFALSE 79151
// begin if not ValidHex ( _x , _y ) then
79058: LD_VAR 0 11
79062: PPUSH
79063: LD_VAR 0 12
79067: PPUSH
79068: CALL_OW 488
79072: NOT
79073: IFFALSE 79077
// continue ;
79075: GO 79055
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79077: LD_VAR 0 11
79081: PPUSH
79082: LD_VAR 0 12
79086: PPUSH
79087: CALL_OW 351
79091: IFFALSE 79109
79093: PUSH
79094: LD_VAR 0 11
79098: PPUSH
79099: LD_VAR 0 12
79103: PPUSH
79104: CALL_OW 554
79108: AND
79109: IFFALSE 79149
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79111: LD_ADDR_VAR 0 13
79115: PUSH
79116: LD_VAR 0 13
79120: PPUSH
79121: LD_VAR 0 13
79125: PUSH
79126: LD_INT 1
79128: PLUS
79129: PPUSH
79130: LD_VAR 0 11
79134: PUSH
79135: LD_VAR 0 12
79139: PUSH
79140: EMPTY
79141: LIST
79142: LIST
79143: PPUSH
79144: CALL_OW 2
79148: ST_TO_ADDR
// end ;
79149: GO 79055
79151: POP
79152: POP
79153: GO 79035
79155: POP
79156: POP
// if not list then
79157: LD_VAR 0 13
79161: NOT
79162: IFFALSE 79166
// exit ;
79164: GO 79237
// for i in list do
79166: LD_ADDR_VAR 0 6
79170: PUSH
79171: LD_VAR 0 13
79175: PUSH
79176: FOR_IN
79177: IFFALSE 79235
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79179: LD_VAR 0 1
79183: PPUSH
79184: LD_STRING M
79186: PUSH
79187: LD_VAR 0 6
79191: PUSH
79192: LD_INT 1
79194: ARRAY
79195: PUSH
79196: LD_VAR 0 6
79200: PUSH
79201: LD_INT 2
79203: ARRAY
79204: PUSH
79205: LD_INT 0
79207: PUSH
79208: LD_INT 0
79210: PUSH
79211: LD_INT 0
79213: PUSH
79214: LD_INT 0
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: LIST
79221: LIST
79222: LIST
79223: LIST
79224: LIST
79225: PUSH
79226: EMPTY
79227: LIST
79228: PPUSH
79229: CALL_OW 447
79233: GO 79176
79235: POP
79236: POP
// end ;
79237: LD_VAR 0 5
79241: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
79242: LD_INT 0
79244: PPUSH
79245: PPUSH
79246: PPUSH
79247: PPUSH
79248: PPUSH
79249: PPUSH
79250: PPUSH
79251: PPUSH
79252: PPUSH
79253: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79254: LD_VAR 0 1
79258: PPUSH
79259: CALL_OW 302
79263: NOT
79264: IFTRUE 79283
79266: PUSH
79267: LD_VAR 0 2
79271: PPUSH
79272: LD_VAR 0 3
79276: PPUSH
79277: CALL_OW 488
79281: NOT
79282: OR
79283: IFTRUE 79292
79285: PUSH
79286: LD_VAR 0 4
79290: NOT
79291: OR
79292: IFFALSE 79296
// exit ;
79294: GO 79835
// if Count ( GetTaskList ( flame ) ) > 10 then
79296: LD_VAR 0 1
79300: PPUSH
79301: CALL_OW 437
79305: PPUSH
79306: CALL 19882 0 1
79310: PUSH
79311: LD_INT 10
79313: GREATER
79314: IFFALSE 79318
// exit ;
79316: GO 79835
// list := [ ] ;
79318: LD_ADDR_VAR 0 13
79322: PUSH
79323: EMPTY
79324: ST_TO_ADDR
// if x - r < 0 then
79325: LD_VAR 0 2
79329: PUSH
79330: LD_VAR 0 4
79334: MINUS
79335: PUSH
79336: LD_INT 0
79338: LESS
79339: IFFALSE 79351
// min_x := 0 else
79341: LD_ADDR_VAR 0 7
79345: PUSH
79346: LD_INT 0
79348: ST_TO_ADDR
79349: GO 79367
// min_x := x - r ;
79351: LD_ADDR_VAR 0 7
79355: PUSH
79356: LD_VAR 0 2
79360: PUSH
79361: LD_VAR 0 4
79365: MINUS
79366: ST_TO_ADDR
// if y - r < 0 then
79367: LD_VAR 0 3
79371: PUSH
79372: LD_VAR 0 4
79376: MINUS
79377: PUSH
79378: LD_INT 0
79380: LESS
79381: IFFALSE 79393
// min_y := 0 else
79383: LD_ADDR_VAR 0 8
79387: PUSH
79388: LD_INT 0
79390: ST_TO_ADDR
79391: GO 79409
// min_y := y - r ;
79393: LD_ADDR_VAR 0 8
79397: PUSH
79398: LD_VAR 0 3
79402: PUSH
79403: LD_VAR 0 4
79407: MINUS
79408: ST_TO_ADDR
// max_x := x + r ;
79409: LD_ADDR_VAR 0 9
79413: PUSH
79414: LD_VAR 0 2
79418: PUSH
79419: LD_VAR 0 4
79423: PLUS
79424: ST_TO_ADDR
// max_y := y + r ;
79425: LD_ADDR_VAR 0 10
79429: PUSH
79430: LD_VAR 0 3
79434: PUSH
79435: LD_VAR 0 4
79439: PLUS
79440: ST_TO_ADDR
// for _x = min_x to max_x do
79441: LD_ADDR_VAR 0 11
79445: PUSH
79446: DOUBLE
79447: LD_VAR 0 7
79451: DEC
79452: ST_TO_ADDR
79453: LD_VAR 0 9
79457: PUSH
79458: FOR_TO
79459: IFFALSE 79578
// for _y = min_y to max_y do
79461: LD_ADDR_VAR 0 12
79465: PUSH
79466: DOUBLE
79467: LD_VAR 0 8
79471: DEC
79472: ST_TO_ADDR
79473: LD_VAR 0 10
79477: PUSH
79478: FOR_TO
79479: IFFALSE 79574
// begin if not ValidHex ( _x , _y ) then
79481: LD_VAR 0 11
79485: PPUSH
79486: LD_VAR 0 12
79490: PPUSH
79491: CALL_OW 488
79495: NOT
79496: IFFALSE 79500
// continue ;
79498: GO 79478
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79500: LD_VAR 0 11
79504: PPUSH
79505: LD_VAR 0 12
79509: PPUSH
79510: CALL_OW 351
79514: IFFALSE 79532
79516: PUSH
79517: LD_VAR 0 11
79521: PPUSH
79522: LD_VAR 0 12
79526: PPUSH
79527: CALL_OW 554
79531: AND
79532: IFFALSE 79572
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79534: LD_ADDR_VAR 0 13
79538: PUSH
79539: LD_VAR 0 13
79543: PPUSH
79544: LD_VAR 0 13
79548: PUSH
79549: LD_INT 1
79551: PLUS
79552: PPUSH
79553: LD_VAR 0 11
79557: PUSH
79558: LD_VAR 0 12
79562: PUSH
79563: EMPTY
79564: LIST
79565: LIST
79566: PPUSH
79567: CALL_OW 2
79571: ST_TO_ADDR
// end ;
79572: GO 79478
79574: POP
79575: POP
79576: GO 79458
79578: POP
79579: POP
// if not list then
79580: LD_VAR 0 13
79584: NOT
79585: IFFALSE 79589
// exit ;
79587: GO 79835
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79589: LD_ADDR_VAR 0 13
79593: PUSH
79594: LD_VAR 0 1
79598: PPUSH
79599: LD_VAR 0 13
79603: PPUSH
79604: LD_INT 1
79606: PPUSH
79607: LD_INT 1
79609: PPUSH
79610: CALL 23288 0 4
79614: ST_TO_ADDR
// ComStop ( flame ) ;
79615: LD_VAR 0 1
79619: PPUSH
79620: CALL_OW 141
// for i in list do
79624: LD_ADDR_VAR 0 6
79628: PUSH
79629: LD_VAR 0 13
79633: PUSH
79634: FOR_IN
79635: IFFALSE 79666
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79637: LD_VAR 0 1
79641: PPUSH
79642: LD_VAR 0 6
79646: PUSH
79647: LD_INT 1
79649: ARRAY
79650: PPUSH
79651: LD_VAR 0 6
79655: PUSH
79656: LD_INT 2
79658: ARRAY
79659: PPUSH
79660: CALL_OW 176
79664: GO 79634
79666: POP
79667: POP
// repeat wait ( 0 0$1 ) ;
79668: LD_INT 35
79670: PPUSH
79671: CALL_OW 67
// task := GetTaskList ( flame ) ;
79675: LD_ADDR_VAR 0 14
79679: PUSH
79680: LD_VAR 0 1
79684: PPUSH
79685: CALL_OW 437
79689: ST_TO_ADDR
// if not task then
79690: LD_VAR 0 14
79694: NOT
79695: IFFALSE 79699
// exit ;
79697: GO 79835
// if task [ 1 ] [ 1 ] <> | then
79699: LD_VAR 0 14
79703: PUSH
79704: LD_INT 1
79706: ARRAY
79707: PUSH
79708: LD_INT 1
79710: ARRAY
79711: PUSH
79712: LD_STRING |
79714: NONEQUAL
79715: IFFALSE 79719
// exit ;
79717: GO 79835
// _x := task [ 1 ] [ 2 ] ;
79719: LD_ADDR_VAR 0 11
79723: PUSH
79724: LD_VAR 0 14
79728: PUSH
79729: LD_INT 1
79731: ARRAY
79732: PUSH
79733: LD_INT 2
79735: ARRAY
79736: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
79737: LD_ADDR_VAR 0 12
79741: PUSH
79742: LD_VAR 0 14
79746: PUSH
79747: LD_INT 1
79749: ARRAY
79750: PUSH
79751: LD_INT 3
79753: ARRAY
79754: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
79755: LD_VAR 0 11
79759: PPUSH
79760: LD_VAR 0 12
79764: PPUSH
79765: CALL_OW 351
79769: NOT
79770: IFTRUE 79789
79772: PUSH
79773: LD_VAR 0 11
79777: PPUSH
79778: LD_VAR 0 12
79782: PPUSH
79783: CALL_OW 554
79787: NOT
79788: OR
79789: IFFALSE 79823
// begin task := Delete ( task , 1 ) ;
79791: LD_ADDR_VAR 0 14
79795: PUSH
79796: LD_VAR 0 14
79800: PPUSH
79801: LD_INT 1
79803: PPUSH
79804: CALL_OW 3
79808: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
79809: LD_VAR 0 1
79813: PPUSH
79814: LD_VAR 0 14
79818: PPUSH
79819: CALL_OW 446
// end ; until not HasTask ( flame ) ;
79823: LD_VAR 0 1
79827: PPUSH
79828: CALL_OW 314
79832: NOT
79833: IFFALSE 79668
// end ;
79835: LD_VAR 0 5
79839: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79840: LD_EXP 113
79844: NOT
79845: IFFALSE 79895
79847: GO 79849
79849: DISABLE
// begin initHack := true ;
79850: LD_ADDR_EXP 113
79854: PUSH
79855: LD_INT 1
79857: ST_TO_ADDR
// hackTanks := [ ] ;
79858: LD_ADDR_EXP 114
79862: PUSH
79863: EMPTY
79864: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79865: LD_ADDR_EXP 115
79869: PUSH
79870: EMPTY
79871: ST_TO_ADDR
// hackLimit := 3 ;
79872: LD_ADDR_EXP 116
79876: PUSH
79877: LD_INT 3
79879: ST_TO_ADDR
// hackDist := 12 ;
79880: LD_ADDR_EXP 117
79884: PUSH
79885: LD_INT 12
79887: ST_TO_ADDR
// hackCounter := [ ] ;
79888: LD_ADDR_EXP 118
79892: PUSH
79893: EMPTY
79894: ST_TO_ADDR
// end ;
79895: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79896: LD_EXP 113
79900: IFFALSE 79918
79902: PUSH
79903: LD_INT 34
79905: PUSH
79906: LD_INT 99
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PPUSH
79913: CALL_OW 69
79917: AND
79918: IFFALSE 80171
79920: GO 79922
79922: DISABLE
79923: LD_INT 0
79925: PPUSH
79926: PPUSH
// begin enable ;
79927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79928: LD_ADDR_VAR 0 1
79932: PUSH
79933: LD_INT 34
79935: PUSH
79936: LD_INT 99
79938: PUSH
79939: EMPTY
79940: LIST
79941: LIST
79942: PPUSH
79943: CALL_OW 69
79947: PUSH
79948: FOR_IN
79949: IFFALSE 80169
// begin if not i in hackTanks then
79951: LD_VAR 0 1
79955: PUSH
79956: LD_EXP 114
79960: IN
79961: NOT
79962: IFFALSE 80045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79964: LD_ADDR_EXP 114
79968: PUSH
79969: LD_EXP 114
79973: PPUSH
79974: LD_EXP 114
79978: PUSH
79979: LD_INT 1
79981: PLUS
79982: PPUSH
79983: LD_VAR 0 1
79987: PPUSH
79988: CALL_OW 1
79992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79993: LD_ADDR_EXP 115
79997: PUSH
79998: LD_EXP 115
80002: PPUSH
80003: LD_EXP 115
80007: PUSH
80008: LD_INT 1
80010: PLUS
80011: PPUSH
80012: EMPTY
80013: PPUSH
80014: CALL_OW 1
80018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
80019: LD_ADDR_EXP 118
80023: PUSH
80024: LD_EXP 118
80028: PPUSH
80029: LD_EXP 118
80033: PUSH
80034: LD_INT 1
80036: PLUS
80037: PPUSH
80038: EMPTY
80039: PPUSH
80040: CALL_OW 1
80044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
80045: LD_VAR 0 1
80049: PPUSH
80050: CALL_OW 302
80054: NOT
80055: IFFALSE 80068
// begin HackUnlinkAll ( i ) ;
80057: LD_VAR 0 1
80061: PPUSH
80062: CALL 80174 0 1
// continue ;
80066: GO 79948
// end ; HackCheckCapturedStatus ( i ) ;
80068: LD_VAR 0 1
80072: PPUSH
80073: CALL 80619 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
80077: LD_ADDR_VAR 0 2
80081: PUSH
80082: LD_INT 81
80084: PUSH
80085: LD_VAR 0 1
80089: PPUSH
80090: CALL_OW 255
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: PUSH
80099: LD_INT 33
80101: PUSH
80102: LD_INT 3
80104: PUSH
80105: EMPTY
80106: LIST
80107: LIST
80108: PUSH
80109: LD_INT 91
80111: PUSH
80112: LD_VAR 0 1
80116: PUSH
80117: LD_EXP 117
80121: PUSH
80122: EMPTY
80123: LIST
80124: LIST
80125: LIST
80126: PUSH
80127: LD_INT 50
80129: PUSH
80130: EMPTY
80131: LIST
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: PPUSH
80139: CALL_OW 69
80143: ST_TO_ADDR
// if not tmp then
80144: LD_VAR 0 2
80148: NOT
80149: IFFALSE 80153
// continue ;
80151: GO 79948
// HackLink ( i , tmp ) ;
80153: LD_VAR 0 1
80157: PPUSH
80158: LD_VAR 0 2
80162: PPUSH
80163: CALL 80310 0 2
// end ;
80167: GO 79948
80169: POP
80170: POP
// end ;
80171: PPOPN 2
80173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80174: LD_INT 0
80176: PPUSH
80177: PPUSH
80178: PPUSH
// if not hack in hackTanks then
80179: LD_VAR 0 1
80183: PUSH
80184: LD_EXP 114
80188: IN
80189: NOT
80190: IFFALSE 80194
// exit ;
80192: GO 80305
// index := GetElementIndex ( hackTanks , hack ) ;
80194: LD_ADDR_VAR 0 4
80198: PUSH
80199: LD_EXP 114
80203: PPUSH
80204: LD_VAR 0 1
80208: PPUSH
80209: CALL 22583 0 2
80213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80214: LD_EXP 115
80218: PUSH
80219: LD_VAR 0 4
80223: ARRAY
80224: IFFALSE 80305
// begin for i in hackTanksCaptured [ index ] do
80226: LD_ADDR_VAR 0 3
80230: PUSH
80231: LD_EXP 115
80235: PUSH
80236: LD_VAR 0 4
80240: ARRAY
80241: PUSH
80242: FOR_IN
80243: IFFALSE 80269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80245: LD_VAR 0 3
80249: PUSH
80250: LD_INT 1
80252: ARRAY
80253: PPUSH
80254: LD_VAR 0 3
80258: PUSH
80259: LD_INT 2
80261: ARRAY
80262: PPUSH
80263: CALL_OW 235
80267: GO 80242
80269: POP
80270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80271: LD_ADDR_EXP 115
80275: PUSH
80276: LD_EXP 115
80280: PPUSH
80281: LD_VAR 0 4
80285: PPUSH
80286: EMPTY
80287: PPUSH
80288: CALL_OW 1
80292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80293: LD_VAR 0 1
80297: PPUSH
80298: LD_INT 0
80300: PPUSH
80301: CALL_OW 505
// end ; end ;
80305: LD_VAR 0 2
80309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80310: LD_INT 0
80312: PPUSH
80313: PPUSH
80314: PPUSH
// if not hack in hackTanks or not vehicles then
80315: LD_VAR 0 1
80319: PUSH
80320: LD_EXP 114
80324: IN
80325: NOT
80326: IFTRUE 80335
80328: PUSH
80329: LD_VAR 0 2
80333: NOT
80334: OR
80335: IFFALSE 80339
// exit ;
80337: GO 80614
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80339: LD_ADDR_VAR 0 2
80343: PUSH
80344: LD_VAR 0 1
80348: PPUSH
80349: LD_VAR 0 2
80353: PPUSH
80354: LD_INT 1
80356: PPUSH
80357: LD_INT 1
80359: PPUSH
80360: CALL 23235 0 4
80364: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80365: LD_ADDR_VAR 0 5
80369: PUSH
80370: LD_EXP 114
80374: PPUSH
80375: LD_VAR 0 1
80379: PPUSH
80380: CALL 22583 0 2
80384: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80385: LD_EXP 115
80389: PUSH
80390: LD_VAR 0 5
80394: ARRAY
80395: PUSH
80396: LD_EXP 116
80400: LESS
80401: IFFALSE 80590
// begin for i := 1 to vehicles do
80403: LD_ADDR_VAR 0 4
80407: PUSH
80408: DOUBLE
80409: LD_INT 1
80411: DEC
80412: ST_TO_ADDR
80413: LD_VAR 0 2
80417: PUSH
80418: FOR_TO
80419: IFFALSE 80588
// begin if hackTanksCaptured [ index ] = hackLimit then
80421: LD_EXP 115
80425: PUSH
80426: LD_VAR 0 5
80430: ARRAY
80431: PUSH
80432: LD_EXP 116
80436: EQUAL
80437: IFFALSE 80441
// break ;
80439: GO 80588
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80441: LD_ADDR_EXP 118
80445: PUSH
80446: LD_EXP 118
80450: PPUSH
80451: LD_VAR 0 5
80455: PPUSH
80456: LD_EXP 118
80460: PUSH
80461: LD_VAR 0 5
80465: ARRAY
80466: PUSH
80467: LD_INT 1
80469: PLUS
80470: PPUSH
80471: CALL_OW 1
80475: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80476: LD_ADDR_EXP 115
80480: PUSH
80481: LD_EXP 115
80485: PPUSH
80486: LD_VAR 0 5
80490: PUSH
80491: LD_EXP 115
80495: PUSH
80496: LD_VAR 0 5
80500: ARRAY
80501: PUSH
80502: LD_INT 1
80504: PLUS
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PPUSH
80510: LD_VAR 0 2
80514: PUSH
80515: LD_VAR 0 4
80519: ARRAY
80520: PUSH
80521: LD_VAR 0 2
80525: PUSH
80526: LD_VAR 0 4
80530: ARRAY
80531: PPUSH
80532: CALL_OW 255
80536: PUSH
80537: EMPTY
80538: LIST
80539: LIST
80540: PPUSH
80541: CALL 22800 0 3
80545: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80546: LD_VAR 0 2
80550: PUSH
80551: LD_VAR 0 4
80555: ARRAY
80556: PPUSH
80557: LD_VAR 0 1
80561: PPUSH
80562: CALL_OW 255
80566: PPUSH
80567: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80571: LD_VAR 0 2
80575: PUSH
80576: LD_VAR 0 4
80580: ARRAY
80581: PPUSH
80582: CALL_OW 141
// end ;
80586: GO 80418
80588: POP
80589: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80590: LD_VAR 0 1
80594: PPUSH
80595: LD_EXP 115
80599: PUSH
80600: LD_VAR 0 5
80604: ARRAY
80605: PUSH
80606: LD_INT 0
80608: PLUS
80609: PPUSH
80610: CALL_OW 505
// end ;
80614: LD_VAR 0 3
80618: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80619: LD_INT 0
80621: PPUSH
80622: PPUSH
80623: PPUSH
80624: PPUSH
// if not hack in hackTanks then
80625: LD_VAR 0 1
80629: PUSH
80630: LD_EXP 114
80634: IN
80635: NOT
80636: IFFALSE 80640
// exit ;
80638: GO 80884
// index := GetElementIndex ( hackTanks , hack ) ;
80640: LD_ADDR_VAR 0 4
80644: PUSH
80645: LD_EXP 114
80649: PPUSH
80650: LD_VAR 0 1
80654: PPUSH
80655: CALL 22583 0 2
80659: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80660: LD_ADDR_VAR 0 3
80664: PUSH
80665: DOUBLE
80666: LD_EXP 115
80670: PUSH
80671: LD_VAR 0 4
80675: ARRAY
80676: INC
80677: ST_TO_ADDR
80678: LD_INT 1
80680: PUSH
80681: FOR_DOWNTO
80682: IFFALSE 80858
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80684: LD_ADDR_VAR 0 5
80688: PUSH
80689: LD_EXP 115
80693: PUSH
80694: LD_VAR 0 4
80698: ARRAY
80699: PUSH
80700: LD_VAR 0 3
80704: ARRAY
80705: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80706: LD_VAR 0 5
80710: PUSH
80711: LD_INT 1
80713: ARRAY
80714: PPUSH
80715: CALL_OW 302
80719: NOT
80720: IFTRUE 80748
80722: PUSH
80723: LD_VAR 0 5
80727: PUSH
80728: LD_INT 1
80730: ARRAY
80731: PPUSH
80732: CALL_OW 255
80736: PUSH
80737: LD_VAR 0 1
80741: PPUSH
80742: CALL_OW 255
80746: NONEQUAL
80747: OR
80748: IFFALSE 80856
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80750: LD_VAR 0 5
80754: PUSH
80755: LD_INT 1
80757: ARRAY
80758: PPUSH
80759: CALL_OW 305
80763: IFFALSE 80791
80765: PUSH
80766: LD_VAR 0 5
80770: PUSH
80771: LD_INT 1
80773: ARRAY
80774: PPUSH
80775: CALL_OW 255
80779: PUSH
80780: LD_VAR 0 1
80784: PPUSH
80785: CALL_OW 255
80789: EQUAL
80790: AND
80791: IFFALSE 80815
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80793: LD_VAR 0 5
80797: PUSH
80798: LD_INT 1
80800: ARRAY
80801: PPUSH
80802: LD_VAR 0 5
80806: PUSH
80807: LD_INT 2
80809: ARRAY
80810: PPUSH
80811: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80815: LD_ADDR_EXP 115
80819: PUSH
80820: LD_EXP 115
80824: PPUSH
80825: LD_VAR 0 4
80829: PPUSH
80830: LD_EXP 115
80834: PUSH
80835: LD_VAR 0 4
80839: ARRAY
80840: PPUSH
80841: LD_VAR 0 3
80845: PPUSH
80846: CALL_OW 3
80850: PPUSH
80851: CALL_OW 1
80855: ST_TO_ADDR
// end ; end ;
80856: GO 80681
80858: POP
80859: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80860: LD_VAR 0 1
80864: PPUSH
80865: LD_EXP 115
80869: PUSH
80870: LD_VAR 0 4
80874: ARRAY
80875: PUSH
80876: LD_INT 0
80878: PLUS
80879: PPUSH
80880: CALL_OW 505
// end ;
80884: LD_VAR 0 2
80888: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80889: LD_INT 0
80891: PPUSH
80892: PPUSH
80893: PPUSH
80894: PPUSH
// if not hack in hackTanks then
80895: LD_VAR 0 1
80899: PUSH
80900: LD_EXP 114
80904: IN
80905: NOT
80906: IFFALSE 80910
// exit ;
80908: GO 80995
// index := GetElementIndex ( hackTanks , hack ) ;
80910: LD_ADDR_VAR 0 5
80914: PUSH
80915: LD_EXP 114
80919: PPUSH
80920: LD_VAR 0 1
80924: PPUSH
80925: CALL 22583 0 2
80929: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80930: LD_ADDR_VAR 0 4
80934: PUSH
80935: DOUBLE
80936: LD_INT 1
80938: DEC
80939: ST_TO_ADDR
80940: LD_EXP 115
80944: PUSH
80945: LD_VAR 0 5
80949: ARRAY
80950: PUSH
80951: FOR_TO
80952: IFFALSE 80993
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80954: LD_EXP 115
80958: PUSH
80959: LD_VAR 0 5
80963: ARRAY
80964: PUSH
80965: LD_VAR 0 4
80969: ARRAY
80970: PUSH
80971: LD_INT 1
80973: ARRAY
80974: PUSH
80975: LD_VAR 0 2
80979: EQUAL
80980: IFFALSE 80991
// KillUnit ( vehicle ) ;
80982: LD_VAR 0 2
80986: PPUSH
80987: CALL_OW 66
80991: GO 80951
80993: POP
80994: POP
// end ;
80995: LD_VAR 0 3
80999: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
81000: LD_EXP 119
81004: NOT
81005: IFFALSE 81138
81007: GO 81009
81009: DISABLE
81010: LD_INT 0
81012: PPUSH
// begin initMiner := true ;
81013: LD_ADDR_EXP 119
81017: PUSH
81018: LD_INT 1
81020: ST_TO_ADDR
// minersList := [ ] ;
81021: LD_ADDR_EXP 120
81025: PUSH
81026: EMPTY
81027: ST_TO_ADDR
// minerMinesList := [ ] ;
81028: LD_ADDR_EXP 121
81032: PUSH
81033: EMPTY
81034: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
81035: LD_ADDR_EXP 122
81039: PUSH
81040: LD_INT 10
81042: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
81043: LD_ADDR_VAR 0 1
81047: PUSH
81048: LD_INT 34
81050: PUSH
81051: LD_INT 81
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PPUSH
81058: CALL_OW 69
81062: PUSH
81063: FOR_IN
81064: IFFALSE 81136
// begin if not i in minersList then
81066: LD_VAR 0 1
81070: PUSH
81071: LD_EXP 120
81075: IN
81076: NOT
81077: IFFALSE 81134
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
81079: LD_ADDR_EXP 120
81083: PUSH
81084: LD_EXP 120
81088: PPUSH
81089: LD_EXP 120
81093: PUSH
81094: LD_INT 1
81096: PLUS
81097: PPUSH
81098: LD_VAR 0 1
81102: PPUSH
81103: CALL_OW 1
81107: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81108: LD_ADDR_EXP 121
81112: PUSH
81113: LD_EXP 121
81117: PPUSH
81118: LD_EXP 121
81122: PUSH
81123: LD_INT 1
81125: PLUS
81126: PPUSH
81127: EMPTY
81128: PPUSH
81129: CALL_OW 1
81133: ST_TO_ADDR
// end end ;
81134: GO 81063
81136: POP
81137: POP
// end ;
81138: PPOPN 1
81140: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
81141: LD_EXP 119
81145: IFFALSE 81176
81147: PUSH
81148: LD_EXP 121
81152: PPUSH
81153: CALL 19882 0 1
81157: IFTRUE 81175
81159: PUSH
81160: LD_INT 34
81162: PUSH
81163: LD_INT 81
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: PPUSH
81170: CALL_OW 69
81174: OR
81175: AND
81176: IFFALSE 81696
81178: GO 81180
81180: DISABLE
81181: LD_INT 0
81183: PPUSH
81184: PPUSH
81185: PPUSH
81186: PPUSH
// begin enable ;
81187: ENABLE
// for i := minerMinesList downto 1 do
81188: LD_ADDR_VAR 0 1
81192: PUSH
81193: DOUBLE
81194: LD_EXP 121
81198: INC
81199: ST_TO_ADDR
81200: LD_INT 1
81202: PUSH
81203: FOR_DOWNTO
81204: IFFALSE 81694
// begin side := GetSide ( minersList [ i ] ) ;
81206: LD_ADDR_VAR 0 3
81210: PUSH
81211: LD_EXP 120
81215: PUSH
81216: LD_VAR 0 1
81220: ARRAY
81221: PPUSH
81222: CALL_OW 255
81226: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
81227: LD_EXP 120
81231: PUSH
81232: LD_VAR 0 1
81236: ARRAY
81237: PPUSH
81238: CALL_OW 300
81242: IFFALSE 81263
81244: PUSH
81245: LD_VAR 0 3
81249: PUSH
81250: LD_OWVAR 2
81254: PUSH
81255: LD_INT 9
81257: PUSH
81258: EMPTY
81259: LIST
81260: LIST
81261: IN
81262: AND
81263: IFFALSE 81296
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
81265: LD_EXP 120
81269: PUSH
81270: LD_VAR 0 1
81274: ARRAY
81275: PPUSH
81276: LD_EXP 121
81280: PUSH
81281: LD_VAR 0 1
81285: ARRAY
81286: PPUSH
81287: CALL 19882 0 1
81291: PPUSH
81292: CALL_OW 505
// if not minerMinesList [ i ] then
81296: LD_EXP 121
81300: PUSH
81301: LD_VAR 0 1
81305: ARRAY
81306: NOT
81307: IFFALSE 81311
// continue ;
81309: GO 81203
// for j := minerMinesList [ i ] downto 1 do
81311: LD_ADDR_VAR 0 2
81315: PUSH
81316: DOUBLE
81317: LD_EXP 121
81321: PUSH
81322: LD_VAR 0 1
81326: ARRAY
81327: INC
81328: ST_TO_ADDR
81329: LD_INT 1
81331: PUSH
81332: FOR_DOWNTO
81333: IFFALSE 81690
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
81335: LD_EXP 120
81339: PUSH
81340: LD_VAR 0 1
81344: ARRAY
81345: PPUSH
81346: CALL_OW 301
81350: IFTRUE 81370
81352: PUSH
81353: LD_EXP 120
81357: PUSH
81358: LD_VAR 0 1
81362: ARRAY
81363: PPUSH
81364: CALL_OW 305
81368: NOT
81369: OR
81370: IFFALSE 81461
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81372: LD_EXP 121
81376: PUSH
81377: LD_VAR 0 1
81381: ARRAY
81382: PUSH
81383: LD_VAR 0 2
81387: ARRAY
81388: PUSH
81389: LD_INT 1
81391: ARRAY
81392: PPUSH
81393: LD_EXP 121
81397: PUSH
81398: LD_VAR 0 1
81402: ARRAY
81403: PUSH
81404: LD_VAR 0 2
81408: ARRAY
81409: PUSH
81410: LD_INT 2
81412: ARRAY
81413: PPUSH
81414: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81418: LD_ADDR_EXP 121
81422: PUSH
81423: LD_EXP 121
81427: PPUSH
81428: LD_VAR 0 1
81432: PPUSH
81433: LD_EXP 121
81437: PUSH
81438: LD_VAR 0 1
81442: ARRAY
81443: PPUSH
81444: LD_VAR 0 2
81448: PPUSH
81449: CALL_OW 3
81453: PPUSH
81454: CALL_OW 1
81458: ST_TO_ADDR
// continue ;
81459: GO 81332
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81461: LD_ADDR_VAR 0 4
81465: PUSH
81466: LD_EXP 121
81470: PUSH
81471: LD_VAR 0 1
81475: ARRAY
81476: PUSH
81477: LD_VAR 0 2
81481: ARRAY
81482: PUSH
81483: LD_INT 1
81485: ARRAY
81486: PPUSH
81487: LD_EXP 121
81491: PUSH
81492: LD_VAR 0 1
81496: ARRAY
81497: PUSH
81498: LD_VAR 0 2
81502: ARRAY
81503: PUSH
81504: LD_INT 2
81506: ARRAY
81507: PPUSH
81508: CALL_OW 428
81512: ST_TO_ADDR
// if not tmp then
81513: LD_VAR 0 4
81517: NOT
81518: IFFALSE 81522
// continue ;
81520: GO 81332
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81522: LD_VAR 0 4
81526: PUSH
81527: LD_INT 81
81529: PUSH
81530: LD_VAR 0 3
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: PPUSH
81539: CALL_OW 69
81543: IN
81544: IFFALSE 81594
81546: PUSH
81547: LD_EXP 121
81551: PUSH
81552: LD_VAR 0 1
81556: ARRAY
81557: PUSH
81558: LD_VAR 0 2
81562: ARRAY
81563: PUSH
81564: LD_INT 1
81566: ARRAY
81567: PPUSH
81568: LD_EXP 121
81572: PUSH
81573: LD_VAR 0 1
81577: ARRAY
81578: PUSH
81579: LD_VAR 0 2
81583: ARRAY
81584: PUSH
81585: LD_INT 2
81587: ARRAY
81588: PPUSH
81589: CALL_OW 458
81593: AND
81594: IFFALSE 81688
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81596: LD_EXP 121
81600: PUSH
81601: LD_VAR 0 1
81605: ARRAY
81606: PUSH
81607: LD_VAR 0 2
81611: ARRAY
81612: PUSH
81613: LD_INT 1
81615: ARRAY
81616: PPUSH
81617: LD_EXP 121
81621: PUSH
81622: LD_VAR 0 1
81626: ARRAY
81627: PUSH
81628: LD_VAR 0 2
81632: ARRAY
81633: PUSH
81634: LD_INT 2
81636: ARRAY
81637: PPUSH
81638: LD_VAR 0 3
81642: PPUSH
81643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81647: LD_ADDR_EXP 121
81651: PUSH
81652: LD_EXP 121
81656: PPUSH
81657: LD_VAR 0 1
81661: PPUSH
81662: LD_EXP 121
81666: PUSH
81667: LD_VAR 0 1
81671: ARRAY
81672: PPUSH
81673: LD_VAR 0 2
81677: PPUSH
81678: CALL_OW 3
81682: PPUSH
81683: CALL_OW 1
81687: ST_TO_ADDR
// end ; end ;
81688: GO 81332
81690: POP
81691: POP
// end ;
81692: GO 81203
81694: POP
81695: POP
// end ;
81696: PPOPN 4
81698: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
81699: LD_INT 0
81701: PPUSH
81702: PPUSH
81703: PPUSH
81704: PPUSH
// result := false ;
81705: LD_ADDR_VAR 0 4
81709: PUSH
81710: LD_INT 0
81712: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81713: LD_VAR 0 1
81717: PPUSH
81718: CALL_OW 264
81722: PUSH
81723: LD_INT 81
81725: EQUAL
81726: NOT
81727: IFFALSE 81731
// exit ;
81729: GO 82101
// side := GetSide ( unit ) ;
81731: LD_ADDR_VAR 0 6
81735: PUSH
81736: LD_VAR 0 1
81740: PPUSH
81741: CALL_OW 255
81745: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
81746: LD_ADDR_VAR 0 5
81750: PUSH
81751: LD_EXP 120
81755: PPUSH
81756: LD_VAR 0 1
81760: PPUSH
81761: CALL 22583 0 2
81765: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81766: LD_EXP 121
81770: PUSH
81771: LD_VAR 0 5
81775: ARRAY
81776: PUSH
81777: LD_EXP 122
81781: GREATEREQUAL
81782: IFFALSE 81786
// exit ;
81784: GO 82101
// ComMoveXY ( unit , x , y ) ;
81786: LD_VAR 0 1
81790: PPUSH
81791: LD_VAR 0 2
81795: PPUSH
81796: LD_VAR 0 3
81800: PPUSH
81801: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81805: LD_INT 35
81807: PPUSH
81808: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81812: LD_VAR 0 1
81816: PPUSH
81817: LD_VAR 0 2
81821: PPUSH
81822: LD_VAR 0 3
81826: PPUSH
81827: CALL 54639 0 3
81831: NOT
81832: IFFALSE 81845
81834: PUSH
81835: LD_VAR 0 1
81839: PPUSH
81840: CALL_OW 314
81844: AND
81845: IFFALSE 81849
// exit ;
81847: GO 82101
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81849: LD_VAR 0 2
81853: PPUSH
81854: LD_VAR 0 3
81858: PPUSH
81859: CALL_OW 428
81863: PUSH
81864: LD_VAR 0 1
81868: EQUAL
81869: IFFALSE 81883
81871: PUSH
81872: LD_VAR 0 1
81876: PPUSH
81877: CALL_OW 314
81881: NOT
81882: AND
81883: IFFALSE 81805
// if MineAtPos ( x , y ) then
81885: LD_VAR 0 2
81889: PPUSH
81890: LD_VAR 0 3
81894: PPUSH
81895: CALL_OW 458
81899: IFFALSE 81903
// exit ;
81901: GO 82101
// if your_side = side then
81903: LD_OWVAR 2
81907: PUSH
81908: LD_VAR 0 6
81912: EQUAL
81913: IFFALSE 81932
// PlaySoundXY ( x , y , PlantMine ) ;
81915: LD_VAR 0 2
81919: PPUSH
81920: LD_VAR 0 3
81924: PPUSH
81925: LD_STRING PlantMine
81927: PPUSH
81928: CALL_OW 366
// repeat wait ( 1 ) ;
81932: LD_INT 1
81934: PPUSH
81935: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
81939: LD_VAR 0 2
81943: PPUSH
81944: LD_VAR 0 3
81948: PPUSH
81949: LD_VAR 0 6
81953: PPUSH
81954: LD_INT 0
81956: PPUSH
81957: CALL_OW 454
81961: IFFALSE 81932
// if MineAtPos ( x , y ) then
81963: LD_VAR 0 2
81967: PPUSH
81968: LD_VAR 0 3
81972: PPUSH
81973: CALL_OW 458
81977: IFFALSE 82093
// begin for i in minerMinesList [ index ] do
81979: LD_ADDR_VAR 0 7
81983: PUSH
81984: LD_EXP 121
81988: PUSH
81989: LD_VAR 0 5
81993: ARRAY
81994: PUSH
81995: FOR_IN
81996: IFFALSE 82038
// if i [ 1 ] = x and i [ 2 ] = y then
81998: LD_VAR 0 7
82002: PUSH
82003: LD_INT 1
82005: ARRAY
82006: PUSH
82007: LD_VAR 0 2
82011: EQUAL
82012: IFFALSE 82030
82014: PUSH
82015: LD_VAR 0 7
82019: PUSH
82020: LD_INT 2
82022: ARRAY
82023: PUSH
82024: LD_VAR 0 3
82028: EQUAL
82029: AND
82030: IFFALSE 82036
// exit ;
82032: POP
82033: POP
82034: GO 82101
82036: GO 81995
82038: POP
82039: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
82040: LD_ADDR_EXP 121
82044: PUSH
82045: LD_EXP 121
82049: PPUSH
82050: LD_VAR 0 5
82054: PUSH
82055: LD_EXP 121
82059: PUSH
82060: LD_VAR 0 5
82064: ARRAY
82065: PUSH
82066: LD_INT 1
82068: PLUS
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: PPUSH
82074: LD_VAR 0 2
82078: PUSH
82079: LD_VAR 0 3
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: PPUSH
82088: CALL 22800 0 3
82092: ST_TO_ADDR
// end ; result := true ;
82093: LD_ADDR_VAR 0 4
82097: PUSH
82098: LD_INT 1
82100: ST_TO_ADDR
// end ;
82101: LD_VAR 0 4
82105: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
82106: LD_INT 0
82108: PPUSH
82109: PPUSH
82110: PPUSH
// if not unit in minersList then
82111: LD_VAR 0 1
82115: PUSH
82116: LD_EXP 120
82120: IN
82121: NOT
82122: IFFALSE 82126
// exit ;
82124: GO 82333
// index := GetElementIndex ( minersList , unit ) ;
82126: LD_ADDR_VAR 0 6
82130: PUSH
82131: LD_EXP 120
82135: PPUSH
82136: LD_VAR 0 1
82140: PPUSH
82141: CALL 22583 0 2
82145: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
82146: LD_ADDR_VAR 0 5
82150: PUSH
82151: DOUBLE
82152: LD_EXP 121
82156: PUSH
82157: LD_VAR 0 6
82161: ARRAY
82162: INC
82163: ST_TO_ADDR
82164: LD_INT 1
82166: PUSH
82167: FOR_DOWNTO
82168: IFFALSE 82331
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
82170: LD_EXP 121
82174: PUSH
82175: LD_VAR 0 6
82179: ARRAY
82180: PUSH
82181: LD_VAR 0 5
82185: ARRAY
82186: PUSH
82187: LD_INT 1
82189: ARRAY
82190: PPUSH
82191: LD_EXP 121
82195: PUSH
82196: LD_VAR 0 6
82200: ARRAY
82201: PUSH
82202: LD_VAR 0 5
82206: ARRAY
82207: PUSH
82208: LD_INT 2
82210: ARRAY
82211: PPUSH
82212: LD_VAR 0 2
82216: PPUSH
82217: LD_VAR 0 3
82221: PPUSH
82222: CALL_OW 298
82226: PUSH
82227: LD_INT 6
82229: LESS
82230: IFFALSE 82329
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82232: LD_EXP 121
82236: PUSH
82237: LD_VAR 0 6
82241: ARRAY
82242: PUSH
82243: LD_VAR 0 5
82247: ARRAY
82248: PUSH
82249: LD_INT 1
82251: ARRAY
82252: PPUSH
82253: LD_EXP 121
82257: PUSH
82258: LD_VAR 0 6
82262: ARRAY
82263: PUSH
82264: LD_VAR 0 5
82268: ARRAY
82269: PUSH
82270: LD_INT 2
82272: ARRAY
82273: PPUSH
82274: LD_VAR 0 1
82278: PPUSH
82279: CALL_OW 255
82283: PPUSH
82284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82288: LD_ADDR_EXP 121
82292: PUSH
82293: LD_EXP 121
82297: PPUSH
82298: LD_VAR 0 6
82302: PPUSH
82303: LD_EXP 121
82307: PUSH
82308: LD_VAR 0 6
82312: ARRAY
82313: PPUSH
82314: LD_VAR 0 5
82318: PPUSH
82319: CALL_OW 3
82323: PPUSH
82324: CALL_OW 1
82328: ST_TO_ADDR
// end ; end ;
82329: GO 82167
82331: POP
82332: POP
// end ;
82333: LD_VAR 0 4
82337: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82338: LD_INT 0
82340: PPUSH
82341: PPUSH
82342: PPUSH
82343: PPUSH
82344: PPUSH
82345: PPUSH
82346: PPUSH
82347: PPUSH
82348: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82349: LD_VAR 0 1
82353: PPUSH
82354: CALL_OW 264
82358: PUSH
82359: LD_INT 81
82361: EQUAL
82362: NOT
82363: IFTRUE 82378
82365: PUSH
82366: LD_VAR 0 1
82370: PUSH
82371: LD_EXP 120
82375: IN
82376: NOT
82377: OR
82378: IFFALSE 82382
// exit ;
82380: GO 82708
// index := GetElementIndex ( minersList , unit ) ;
82382: LD_ADDR_VAR 0 6
82386: PUSH
82387: LD_EXP 120
82391: PPUSH
82392: LD_VAR 0 1
82396: PPUSH
82397: CALL 22583 0 2
82401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82402: LD_ADDR_VAR 0 8
82406: PUSH
82407: LD_EXP 122
82411: PUSH
82412: LD_EXP 121
82416: PUSH
82417: LD_VAR 0 6
82421: ARRAY
82422: MINUS
82423: ST_TO_ADDR
// if not minesFreeAmount then
82424: LD_VAR 0 8
82428: NOT
82429: IFFALSE 82433
// exit ;
82431: GO 82708
// tmp := [ ] ;
82433: LD_ADDR_VAR 0 7
82437: PUSH
82438: EMPTY
82439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82440: LD_ADDR_VAR 0 5
82444: PUSH
82445: DOUBLE
82446: LD_INT 1
82448: DEC
82449: ST_TO_ADDR
82450: LD_VAR 0 8
82454: PUSH
82455: FOR_TO
82456: IFFALSE 82655
// begin _d := rand ( 0 , 5 ) ;
82458: LD_ADDR_VAR 0 11
82462: PUSH
82463: LD_INT 0
82465: PPUSH
82466: LD_INT 5
82468: PPUSH
82469: CALL_OW 12
82473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82474: LD_ADDR_VAR 0 12
82478: PUSH
82479: LD_INT 2
82481: PPUSH
82482: LD_INT 6
82484: PPUSH
82485: CALL_OW 12
82489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82490: LD_ADDR_VAR 0 9
82494: PUSH
82495: LD_VAR 0 2
82499: PPUSH
82500: LD_VAR 0 11
82504: PPUSH
82505: LD_VAR 0 12
82509: PPUSH
82510: CALL_OW 272
82514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82515: LD_ADDR_VAR 0 10
82519: PUSH
82520: LD_VAR 0 3
82524: PPUSH
82525: LD_VAR 0 11
82529: PPUSH
82530: LD_VAR 0 12
82534: PPUSH
82535: CALL_OW 273
82539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82540: LD_VAR 0 9
82544: PPUSH
82545: LD_VAR 0 10
82549: PPUSH
82550: CALL_OW 488
82554: IFFALSE 82578
82556: PUSH
82557: LD_VAR 0 9
82561: PUSH
82562: LD_VAR 0 10
82566: PUSH
82567: EMPTY
82568: LIST
82569: LIST
82570: PUSH
82571: LD_VAR 0 7
82575: IN
82576: NOT
82577: AND
82578: IFFALSE 82597
82580: PUSH
82581: LD_VAR 0 9
82585: PPUSH
82586: LD_VAR 0 10
82590: PPUSH
82591: CALL_OW 458
82595: NOT
82596: AND
82597: IFFALSE 82639
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82599: LD_ADDR_VAR 0 7
82603: PUSH
82604: LD_VAR 0 7
82608: PPUSH
82609: LD_VAR 0 7
82613: PUSH
82614: LD_INT 1
82616: PLUS
82617: PPUSH
82618: LD_VAR 0 9
82622: PUSH
82623: LD_VAR 0 10
82627: PUSH
82628: EMPTY
82629: LIST
82630: LIST
82631: PPUSH
82632: CALL_OW 1
82636: ST_TO_ADDR
82637: GO 82653
// i := i - 1 ;
82639: LD_ADDR_VAR 0 5
82643: PUSH
82644: LD_VAR 0 5
82648: PUSH
82649: LD_INT 1
82651: MINUS
82652: ST_TO_ADDR
// end ;
82653: GO 82455
82655: POP
82656: POP
// for i in tmp do
82657: LD_ADDR_VAR 0 5
82661: PUSH
82662: LD_VAR 0 7
82666: PUSH
82667: FOR_IN
82668: IFFALSE 82706
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82670: LD_VAR 0 1
82674: PPUSH
82675: LD_VAR 0 5
82679: PUSH
82680: LD_INT 1
82682: ARRAY
82683: PPUSH
82684: LD_VAR 0 5
82688: PUSH
82689: LD_INT 2
82691: ARRAY
82692: PPUSH
82693: CALL 81699 0 3
82697: NOT
82698: IFFALSE 82704
// exit ;
82700: POP
82701: POP
82702: GO 82708
82704: GO 82667
82706: POP
82707: POP
// end ;
82708: LD_VAR 0 4
82712: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
82713: LD_INT 0
82715: PPUSH
82716: PPUSH
82717: PPUSH
82718: PPUSH
82719: PPUSH
82720: PPUSH
82721: PPUSH
82722: PPUSH
82723: PPUSH
// if GetClass ( unit ) <> class_sniper then
82724: LD_VAR 0 1
82728: PPUSH
82729: CALL_OW 257
82733: PUSH
82734: LD_INT 5
82736: NONEQUAL
82737: IFFALSE 82741
// exit ;
82739: GO 83211
// dist := 8 ;
82741: LD_ADDR_VAR 0 5
82745: PUSH
82746: LD_INT 8
82748: ST_TO_ADDR
// viewRange := 12 ;
82749: LD_ADDR_VAR 0 8
82753: PUSH
82754: LD_INT 12
82756: ST_TO_ADDR
// side := GetSide ( unit ) ;
82757: LD_ADDR_VAR 0 6
82761: PUSH
82762: LD_VAR 0 1
82766: PPUSH
82767: CALL_OW 255
82771: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82772: LD_INT 61
82774: PPUSH
82775: LD_VAR 0 6
82779: PPUSH
82780: CALL_OW 321
82784: PUSH
82785: LD_INT 2
82787: EQUAL
82788: IFFALSE 82798
// viewRange := 16 ;
82790: LD_ADDR_VAR 0 8
82794: PUSH
82795: LD_INT 16
82797: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82798: LD_VAR 0 1
82802: PPUSH
82803: LD_VAR 0 2
82807: PPUSH
82808: LD_VAR 0 3
82812: PPUSH
82813: CALL_OW 297
82817: PUSH
82818: LD_VAR 0 5
82822: GREATER
82823: IFFALSE 82902
// begin ComMoveXY ( unit , x , y ) ;
82825: LD_VAR 0 1
82829: PPUSH
82830: LD_VAR 0 2
82834: PPUSH
82835: LD_VAR 0 3
82839: PPUSH
82840: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82844: LD_INT 35
82846: PPUSH
82847: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82851: LD_VAR 0 1
82855: PPUSH
82856: LD_VAR 0 2
82860: PPUSH
82861: LD_VAR 0 3
82865: PPUSH
82866: CALL 54639 0 3
82870: NOT
82871: IFFALSE 82875
// exit ;
82873: GO 83211
// until GetDistUnitXY ( unit , x , y ) < dist ;
82875: LD_VAR 0 1
82879: PPUSH
82880: LD_VAR 0 2
82884: PPUSH
82885: LD_VAR 0 3
82889: PPUSH
82890: CALL_OW 297
82894: PUSH
82895: LD_VAR 0 5
82899: LESS
82900: IFFALSE 82844
// end ; ComTurnXY ( unit , x , y ) ;
82902: LD_VAR 0 1
82906: PPUSH
82907: LD_VAR 0 2
82911: PPUSH
82912: LD_VAR 0 3
82916: PPUSH
82917: CALL_OW 118
// repeat if Multiplayer then
82921: LD_OWVAR 4
82925: IFFALSE 82936
// wait ( 35 ) else
82927: LD_INT 35
82929: PPUSH
82930: CALL_OW 67
82934: GO 82943
// wait ( 5 ) ;
82936: LD_INT 5
82938: PPUSH
82939: CALL_OW 67
// _d := GetDir ( unit ) ;
82943: LD_ADDR_VAR 0 11
82947: PUSH
82948: LD_VAR 0 1
82952: PPUSH
82953: CALL_OW 254
82957: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
82958: LD_ADDR_VAR 0 7
82962: PUSH
82963: LD_VAR 0 1
82967: PPUSH
82968: CALL_OW 250
82972: PPUSH
82973: LD_VAR 0 1
82977: PPUSH
82978: CALL_OW 251
82982: PPUSH
82983: LD_VAR 0 2
82987: PPUSH
82988: LD_VAR 0 3
82992: PPUSH
82993: CALL 57275 0 4
82997: ST_TO_ADDR
// until dir = _d ;
82998: LD_VAR 0 7
83002: PUSH
83003: LD_VAR 0 11
83007: EQUAL
83008: IFFALSE 82921
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
83010: LD_ADDR_VAR 0 9
83014: PUSH
83015: LD_VAR 0 1
83019: PPUSH
83020: CALL_OW 250
83024: PPUSH
83025: LD_VAR 0 7
83029: PPUSH
83030: LD_VAR 0 5
83034: PPUSH
83035: CALL_OW 272
83039: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
83040: LD_ADDR_VAR 0 10
83044: PUSH
83045: LD_VAR 0 1
83049: PPUSH
83050: CALL_OW 251
83054: PPUSH
83055: LD_VAR 0 7
83059: PPUSH
83060: LD_VAR 0 5
83064: PPUSH
83065: CALL_OW 273
83069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83070: LD_VAR 0 9
83074: PPUSH
83075: LD_VAR 0 10
83079: PPUSH
83080: CALL_OW 488
83084: NOT
83085: IFFALSE 83089
// exit ;
83087: GO 83211
// ComAnimCustom ( unit , 1 ) ;
83089: LD_VAR 0 1
83093: PPUSH
83094: LD_INT 1
83096: PPUSH
83097: CALL_OW 592
// p := 0 ;
83101: LD_ADDR_VAR 0 12
83105: PUSH
83106: LD_INT 0
83108: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
83109: LD_VAR 0 9
83113: PPUSH
83114: LD_VAR 0 10
83118: PPUSH
83119: LD_VAR 0 6
83123: PPUSH
83124: LD_VAR 0 8
83128: PPUSH
83129: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
83133: LD_INT 35
83135: PPUSH
83136: CALL_OW 67
// p := Inc ( p ) ;
83140: LD_ADDR_VAR 0 12
83144: PUSH
83145: LD_VAR 0 12
83149: PPUSH
83150: CALL 57231 0 1
83154: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
83155: LD_VAR 0 12
83159: PUSH
83160: LD_INT 3
83162: EQUAL
83163: IFTRUE 83177
83165: PUSH
83166: LD_VAR 0 1
83170: PPUSH
83171: CALL_OW 302
83175: NOT
83176: OR
83177: IFTRUE 83190
83179: PUSH
83180: LD_VAR 0 1
83184: PPUSH
83185: CALL_OW 301
83189: OR
83190: IFFALSE 83133
// RemoveSeeing ( _x , _y , side ) ;
83192: LD_VAR 0 9
83196: PPUSH
83197: LD_VAR 0 10
83201: PPUSH
83202: LD_VAR 0 6
83206: PPUSH
83207: CALL_OW 331
// end ;
83211: LD_VAR 0 4
83215: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
83216: LD_INT 0
83218: PPUSH
83219: PPUSH
83220: PPUSH
83221: PPUSH
83222: PPUSH
83223: PPUSH
83224: PPUSH
83225: PPUSH
83226: PPUSH
83227: PPUSH
83228: PPUSH
// if not unit then
83229: LD_VAR 0 1
83233: NOT
83234: IFFALSE 83238
// exit ;
83236: GO 83509
// side := GetSide ( unit ) ;
83238: LD_ADDR_VAR 0 3
83242: PUSH
83243: LD_VAR 0 1
83247: PPUSH
83248: CALL_OW 255
83252: ST_TO_ADDR
// x := GetX ( unit ) ;
83253: LD_ADDR_VAR 0 5
83257: PUSH
83258: LD_VAR 0 1
83262: PPUSH
83263: CALL_OW 250
83267: ST_TO_ADDR
// y := GetY ( unit ) ;
83268: LD_ADDR_VAR 0 6
83272: PUSH
83273: LD_VAR 0 1
83277: PPUSH
83278: CALL_OW 251
83282: ST_TO_ADDR
// r := 8 ;
83283: LD_ADDR_VAR 0 4
83287: PUSH
83288: LD_INT 8
83290: ST_TO_ADDR
// if x - r < 0 then
83291: LD_VAR 0 5
83295: PUSH
83296: LD_VAR 0 4
83300: MINUS
83301: PUSH
83302: LD_INT 0
83304: LESS
83305: IFFALSE 83317
// min_x := 0 else
83307: LD_ADDR_VAR 0 7
83311: PUSH
83312: LD_INT 0
83314: ST_TO_ADDR
83315: GO 83333
// min_x := x - r ;
83317: LD_ADDR_VAR 0 7
83321: PUSH
83322: LD_VAR 0 5
83326: PUSH
83327: LD_VAR 0 4
83331: MINUS
83332: ST_TO_ADDR
// if y - r < 0 then
83333: LD_VAR 0 6
83337: PUSH
83338: LD_VAR 0 4
83342: MINUS
83343: PUSH
83344: LD_INT 0
83346: LESS
83347: IFFALSE 83359
// min_y := 0 else
83349: LD_ADDR_VAR 0 8
83353: PUSH
83354: LD_INT 0
83356: ST_TO_ADDR
83357: GO 83375
// min_y := y - r ;
83359: LD_ADDR_VAR 0 8
83363: PUSH
83364: LD_VAR 0 6
83368: PUSH
83369: LD_VAR 0 4
83373: MINUS
83374: ST_TO_ADDR
// max_x := x + r ;
83375: LD_ADDR_VAR 0 9
83379: PUSH
83380: LD_VAR 0 5
83384: PUSH
83385: LD_VAR 0 4
83389: PLUS
83390: ST_TO_ADDR
// max_y := y + r ;
83391: LD_ADDR_VAR 0 10
83395: PUSH
83396: LD_VAR 0 6
83400: PUSH
83401: LD_VAR 0 4
83405: PLUS
83406: ST_TO_ADDR
// for _x = min_x to max_x do
83407: LD_ADDR_VAR 0 11
83411: PUSH
83412: DOUBLE
83413: LD_VAR 0 7
83417: DEC
83418: ST_TO_ADDR
83419: LD_VAR 0 9
83423: PUSH
83424: FOR_TO
83425: IFFALSE 83507
// for _y = min_y to max_y do
83427: LD_ADDR_VAR 0 12
83431: PUSH
83432: DOUBLE
83433: LD_VAR 0 8
83437: DEC
83438: ST_TO_ADDR
83439: LD_VAR 0 10
83443: PUSH
83444: FOR_TO
83445: IFFALSE 83503
// begin if not ValidHex ( _x , _y ) then
83447: LD_VAR 0 11
83451: PPUSH
83452: LD_VAR 0 12
83456: PPUSH
83457: CALL_OW 488
83461: NOT
83462: IFFALSE 83466
// continue ;
83464: GO 83444
// if MineAtPos ( _x , _y ) then
83466: LD_VAR 0 11
83470: PPUSH
83471: LD_VAR 0 12
83475: PPUSH
83476: CALL_OW 458
83480: IFFALSE 83501
// ViewMineAtPos ( _x , _y , side ) ;
83482: LD_VAR 0 11
83486: PPUSH
83487: LD_VAR 0 12
83491: PPUSH
83492: LD_VAR 0 3
83496: PPUSH
83497: CALL_OW 457
// end ;
83501: GO 83444
83503: POP
83504: POP
83505: GO 83424
83507: POP
83508: POP
// end ;
83509: LD_VAR 0 2
83513: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
83514: LD_INT 0
83516: PPUSH
83517: PPUSH
83518: PPUSH
83519: PPUSH
83520: PPUSH
83521: PPUSH
83522: PPUSH
// if not units then
83523: LD_VAR 0 1
83527: NOT
83528: IFFALSE 83532
// exit ;
83530: GO 83996
// scaners := [ ] ;
83532: LD_ADDR_VAR 0 6
83536: PUSH
83537: EMPTY
83538: ST_TO_ADDR
// for i in units do
83539: LD_ADDR_VAR 0 3
83543: PUSH
83544: LD_VAR 0 1
83548: PUSH
83549: FOR_IN
83550: IFFALSE 83707
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
83552: LD_VAR 0 3
83556: PPUSH
83557: CALL_OW 264
83561: PUSH
83562: LD_INT 11
83564: NONEQUAL
83565: IFTRUE 83579
83567: PUSH
83568: LD_VAR 0 3
83572: PPUSH
83573: CALL_OW 302
83577: NOT
83578: OR
83579: IFTRUE 83596
83581: PUSH
83582: LD_VAR 0 3
83586: PPUSH
83587: CALL_OW 110
83591: PUSH
83592: LD_INT 502
83594: EQUAL
83595: OR
83596: IFFALSE 83600
// continue ;
83598: GO 83549
// ComStop ( i ) ;
83600: LD_VAR 0 3
83604: PPUSH
83605: CALL_OW 141
// x := GetX ( i ) ;
83609: LD_ADDR_VAR 0 4
83613: PUSH
83614: LD_VAR 0 3
83618: PPUSH
83619: CALL_OW 250
83623: ST_TO_ADDR
// y := GetY ( i ) ;
83624: LD_ADDR_VAR 0 5
83628: PUSH
83629: LD_VAR 0 3
83633: PPUSH
83634: CALL_OW 251
83638: ST_TO_ADDR
// if GetSide ( i ) = your_side then
83639: LD_VAR 0 3
83643: PPUSH
83644: CALL_OW 255
83648: PUSH
83649: LD_OWVAR 2
83653: EQUAL
83654: IFFALSE 83673
// PlaySoundXY ( x , y , mineDetector ) ;
83656: LD_VAR 0 4
83660: PPUSH
83661: LD_VAR 0 5
83665: PPUSH
83666: LD_STRING mineDetector
83668: PPUSH
83669: CALL_OW 366
// scaners := Join ( scaners , i ) ;
83673: LD_ADDR_VAR 0 6
83677: PUSH
83678: LD_VAR 0 6
83682: PPUSH
83683: LD_VAR 0 3
83687: PPUSH
83688: CALL 55858 0 2
83692: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
83693: LD_VAR 0 3
83697: PPUSH
83698: LD_INT 502
83700: PPUSH
83701: CALL_OW 109
// end ;
83705: GO 83549
83707: POP
83708: POP
// if not scaners then
83709: LD_VAR 0 6
83713: NOT
83714: IFFALSE 83718
// exit ;
83716: GO 83996
// wait ( 3 ) ;
83718: LD_INT 3
83720: PPUSH
83721: CALL_OW 67
// timer := 6 ;
83725: LD_ADDR_VAR 0 7
83729: PUSH
83730: LD_INT 6
83732: ST_TO_ADDR
// repeat for i in scaners do
83733: LD_ADDR_VAR 0 3
83737: PUSH
83738: LD_VAR 0 6
83742: PUSH
83743: FOR_IN
83744: IFFALSE 83894
// begin side := GetSide ( i ) ;
83746: LD_ADDR_VAR 0 8
83750: PUSH
83751: LD_VAR 0 3
83755: PPUSH
83756: CALL_OW 255
83760: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
83761: LD_VAR 0 3
83765: PPUSH
83766: CALL_OW 302
83770: NOT
83771: IFTRUE 83784
83773: PUSH
83774: LD_VAR 0 3
83778: PPUSH
83779: CALL_OW 314
83783: OR
83784: IFTRUE 83815
83786: PUSH
83787: LD_VAR 0 3
83791: PPUSH
83792: CALL_OW 263
83796: PUSH
83797: LD_INT 1
83799: EQUAL
83800: IFFALSE 83814
83802: PUSH
83803: LD_VAR 0 3
83807: PPUSH
83808: CALL_OW 311
83812: NOT
83813: AND
83814: OR
83815: IFFALSE 83859
// begin SetUnitDisplayNumber ( i , 0 ) ;
83817: LD_VAR 0 3
83821: PPUSH
83822: LD_INT 0
83824: PPUSH
83825: CALL_OW 505
// SetTag ( i , 0 ) ;
83829: LD_VAR 0 3
83833: PPUSH
83834: LD_INT 0
83836: PPUSH
83837: CALL_OW 109
// scaners := scaners diff i ;
83841: LD_ADDR_VAR 0 6
83845: PUSH
83846: LD_VAR 0 6
83850: PUSH
83851: LD_VAR 0 3
83855: DIFF
83856: ST_TO_ADDR
// continue ;
83857: GO 83743
// end ; if side in [ your_side , 9 ] then
83859: LD_VAR 0 8
83863: PUSH
83864: LD_OWVAR 2
83868: PUSH
83869: LD_INT 9
83871: PUSH
83872: EMPTY
83873: LIST
83874: LIST
83875: IN
83876: IFFALSE 83892
// SetUnitDisplayNumber ( i , timer ) ;
83878: LD_VAR 0 3
83882: PPUSH
83883: LD_VAR 0 7
83887: PPUSH
83888: CALL_OW 505
// end ;
83892: GO 83743
83894: POP
83895: POP
// if not scaners then
83896: LD_VAR 0 6
83900: NOT
83901: IFFALSE 83905
// exit ;
83903: GO 83996
// timer := Dec ( timer ) ;
83905: LD_ADDR_VAR 0 7
83909: PUSH
83910: LD_VAR 0 7
83914: PPUSH
83915: CALL 57253 0 1
83919: ST_TO_ADDR
// wait ( 0 0$1 ) ;
83920: LD_INT 35
83922: PPUSH
83923: CALL_OW 67
// until timer = 0 ;
83927: LD_VAR 0 7
83931: PUSH
83932: LD_INT 0
83934: EQUAL
83935: IFFALSE 83733
// if not scaners then
83937: LD_VAR 0 6
83941: NOT
83942: IFFALSE 83946
// exit ;
83944: GO 83996
// for i in scaners do
83946: LD_ADDR_VAR 0 3
83950: PUSH
83951: LD_VAR 0 6
83955: PUSH
83956: FOR_IN
83957: IFFALSE 83994
// begin SetUnitDisplayNumber ( i , 0 ) ;
83959: LD_VAR 0 3
83963: PPUSH
83964: LD_INT 0
83966: PPUSH
83967: CALL_OW 505
// SetTag ( i , 0 ) ;
83971: LD_VAR 0 3
83975: PPUSH
83976: LD_INT 0
83978: PPUSH
83979: CALL_OW 109
// RevealDetectorMine ( i ) ;
83983: LD_VAR 0 3
83987: PPUSH
83988: CALL 83216 0 1
// end ;
83992: GO 83956
83994: POP
83995: POP
// end ;
83996: LD_VAR 0 2
84000: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
84001: LD_INT 0
84003: PPUSH
// if p1 = mine_detector_mode then
84004: LD_VAR 0 2
84008: PUSH
84009: LD_INT 103
84011: EQUAL
84012: IFFALSE 84023
// DetectMine ( units ) ;
84014: LD_VAR 0 1
84018: PPUSH
84019: CALL 83514 0 1
// end ; end_of_file
84023: LD_VAR 0 7
84027: RET
