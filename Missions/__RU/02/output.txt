// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 333 0 0
// PrepareRussian ;
  24: CALL 921 0 0
// PrepareNature ;
  28: CALL 12958 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 20
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 21
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 22
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 23
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// canExitBase = false ;
 203: LD_ADDR_EXP 19
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// sawLeftBunker = false ;
 211: LD_ADDR_EXP 26
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// sawRightBunker = false ;
 219: LD_ADDR_EXP 27
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 227: LD_ADDR_EXP 28
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 235: LD_ADDR_EXP 29
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// playerGetSupport = false ;
 243: LD_ADDR_EXP 30
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// captureBelkovVehicle = false ;
 251: LD_ADDR_EXP 34
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// saveBelkovObjective = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// medalForGetSupport = true ;
 267: LD_ADDR_EXP 36
 271: PUSH
 272: LD_INT 1
 274: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 275: LD_ADDR_EXP 35
 279: PUSH
 280: LD_INT 1
 282: NEG
 283: ST_TO_ADDR
// initiative = 0 ;
 284: LD_ADDR_EXP 38
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// lostComradesCounter = 0 ;
 292: LD_ADDR_EXP 39
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// northMapExplored = false ;
 300: LD_ADDR_EXP 37
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 308: LD_ADDR_EXP 24
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// activateAMAI = false ;
 316: LD_ADDR_EXP 25
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// MissionIntro ;
 324: CALL 5716 0 0
// end ; end_of_file
 328: LD_VAR 0 1
 332: RET
// export function InitMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// BaseMapConfig ;
 336: CALL 349 0 0
// MissionMapConfig ;
 340: CALL 435 0 0
// end ;
 344: LD_VAR 0 1
 348: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 349: LD_INT 0
 351: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 352: LD_ADDR_EXP 40
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: LD_INT 4
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 375: LD_ADDR_EXP 41
 379: PUSH
 380: LD_INT 2
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: ST_TO_ADDR
// animalsAgression = 0 ;
 398: LD_ADDR_EXP 42
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 45
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 02_ ;
 414: LD_ADDR_EXP 43
 418: PUSH
 419: LD_STRING 02_
 421: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 422: LD_ADDR_EXP 44
 426: PUSH
 427: LD_STRING 01_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 162
 445: PUSH
 446: LD_INT 107
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 162
 455: PUSH
 456: LD_INT 108
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 163
 465: PUSH
 466: LD_INT 109
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 163
 475: PUSH
 476: LD_INT 110
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 109
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 161
 495: PUSH
 496: LD_INT 107
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 161
 505: PUSH
 506: LD_INT 106
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 522: LD_ADDR_EXP 48
 526: PUSH
 527: LD_INT 113
 529: PUSH
 530: LD_INT 96
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PUSH
 537: LD_INT 114
 539: PUSH
 540: LD_INT 97
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: PUSH
 547: LD_INT 114
 549: PUSH
 550: LD_INT 98
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 562: LD_ADDR_EXP 46
 566: PUSH
 567: LD_INT 10
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// labCratesRefund = 20 ;
 585: LD_ADDR_EXP 49
 589: PUSH
 590: LD_INT 20
 592: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 593: LD_ADDR_EXP 50
 597: PUSH
 598: LD_INT 40
 600: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 601: LD_ADDR_EXP 51
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: LD_INT 2
 611: PUSH
 612: LD_INT 2
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: PUSH
 620: LD_OWVAR 67
 624: ARRAY
 625: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 4 ] ] [ Difficulty ] ;
 626: LD_ADDR_EXP 52
 630: PUSH
 631: LD_INT 2
 633: PUSH
 634: LD_INT 2
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 3
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: LD_OWVAR 67
 670: ARRAY
 671: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 672: LD_ADDR_EXP 53
 676: PUSH
 677: LD_INT 21000
 679: PUSH
 680: LD_INT 16800
 682: PUSH
 683: LD_INT 12600
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PUSH
 691: LD_OWVAR 67
 695: ARRAY
 696: ST_TO_ADDR
// end ;
 697: LD_VAR 0 1
 701: RET
// every 0 0$1 trigger debugMode do var i ;
 702: LD_EXP 45
 706: IFFALSE 918
 708: GO 710
 710: DISABLE
 711: LD_INT 0
 713: PPUSH
// begin enable ;
 714: ENABLE
// FogOff ( your_side ) ;
 715: LD_OWVAR 2
 719: PPUSH
 720: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 724: LD_ADDR_VAR 0 1
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_OWVAR 2
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 21
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 21
 756: PUSH
 757: LD_INT 2
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: LIST
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PPUSH
 773: CALL_OW 69
 777: PUSH
 778: FOR_IN
 779: IFFALSE 795
// SetLives ( i , 1000 ) ;
 781: LD_VAR 0 1
 785: PPUSH
 786: LD_INT 1000
 788: PPUSH
 789: CALL_OW 234
 793: GO 778
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 797: LD_ADDR_VAR 0 1
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_OWVAR 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 2
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 30
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PPUSH
 846: CALL_OW 69
 850: PUSH
 851: FOR_IN
 852: IFFALSE 916
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 274
 903: PPUSH
 904: LD_INT 3
 906: PPUSH
 907: LD_INT 9999
 909: PPUSH
 910: CALL_OW 277
// end ;
 914: GO 851
 916: POP
 917: POP
// end ; end_of_file
 918: PPOPN 1
 920: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
 921: LD_INT 0
 923: PPUSH
// PrepareCharactersFromPreviousMission ;
 924: CALL 1255 0 0
// PrepareKirovBase ;
 928: CALL 1450 0 0
// PrepareBeriaBase ;
 932: CALL 2145 0 0
// end ;
 936: LD_VAR 0 1
 940: RET
// export function PrepareBelkovReturnTeam ; var unit , others ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// belkovTeam = [ ] ;
 946: LD_ADDR_EXP 65
 950: PUSH
 951: EMPTY
 952: ST_TO_ADDR
// uc_side = 6 ;
 953: LD_ADDR_OWVAR 20
 957: PUSH
 958: LD_INT 6
 960: ST_TO_ADDR
// uc_nation = nation_russian ;
 961: LD_ADDR_OWVAR 21
 965: PUSH
 966: LD_INT 3
 968: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
 969: LD_ADDR_OWVAR 37
 973: PUSH
 974: LD_EXP 67
 978: PUSH
 979: LD_INT 1
 981: ARRAY
 982: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
 983: LD_ADDR_OWVAR 39
 987: PUSH
 988: LD_EXP 67
 992: PUSH
 993: LD_INT 2
 995: ARRAY
 996: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
 997: LD_ADDR_OWVAR 38
1001: PUSH
1002: LD_EXP 67
1006: PUSH
1007: LD_INT 3
1009: ARRAY
1010: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1011: LD_ADDR_OWVAR 40
1015: PUSH
1016: LD_EXP 67
1020: PUSH
1021: LD_INT 4
1023: ARRAY
1024: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1025: LD_ADDR_OWVAR 41
1029: PUSH
1030: LD_EXP 67
1034: PUSH
1035: LD_INT 5
1037: ARRAY
1038: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1039: LD_ADDR_EXP 64
1043: PUSH
1044: CALL_OW 45
1048: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1049: LD_EXP 64
1053: PPUSH
1054: LD_INT 3
1056: PPUSH
1057: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1061: LD_EXP 64
1065: PPUSH
1066: LD_INT 11
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1076: LD_ADDR_EXP 65
1080: PUSH
1081: LD_EXP 65
1085: PUSH
1086: LD_EXP 64
1090: ADD
1091: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1092: LD_STRING 02_TmpBelkov
1094: PPUSH
1095: CALL_OW 28
1099: IFFALSE 1146
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1101: LD_ADDR_EXP 56
1105: PUSH
1106: LD_STRING 02_TmpBelkov
1108: PPUSH
1109: CALL_OW 34
1113: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1114: LD_EXP 56
1118: PPUSH
1119: LD_EXP 64
1123: PPUSH
1124: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1128: LD_ADDR_EXP 65
1132: PUSH
1133: LD_EXP 65
1137: PUSH
1138: LD_EXP 56
1142: ADD
1143: ST_TO_ADDR
// end else
1144: GO 1189
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1146: LD_ADDR_EXP 60
1150: PUSH
1151: LD_STRING 02_TmpBelkov2
1153: PPUSH
1154: CALL_OW 34
1158: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1159: LD_EXP 60
1163: PPUSH
1164: LD_EXP 64
1168: PPUSH
1169: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1173: LD_ADDR_EXP 65
1177: PUSH
1178: LD_EXP 65
1182: PUSH
1183: LD_EXP 60
1187: ADD
1188: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1189: LD_ADDR_VAR 0 3
1193: PUSH
1194: LD_STRING 02_TmpBelkovTeam
1196: PPUSH
1197: CALL_OW 31
1201: ST_TO_ADDR
// for unit in others do
1202: LD_ADDR_VAR 0 2
1206: PUSH
1207: LD_VAR 0 3
1211: PUSH
1212: FOR_IN
1213: IFFALSE 1248
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1215: LD_VAR 0 2
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1230: LD_ADDR_EXP 65
1234: PUSH
1235: LD_EXP 65
1239: PUSH
1240: LD_VAR 0 2
1244: ADD
1245: ST_TO_ADDR
// end ;
1246: GO 1212
1248: POP
1249: POP
// end ;
1250: LD_VAR 0 1
1254: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1255: LD_INT 0
1257: PPUSH
1258: PPUSH
// uc_side = 3 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1267: LD_ADDR_EXP 54
1271: PUSH
1272: LD_STRING Burlak
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 3455 0 2
1282: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1283: LD_ADDR_EXP 55
1287: PUSH
1288: LD_STRING Gnyevko
1290: PPUSH
1291: LD_INT 1
1293: PPUSH
1294: CALL 3455 0 2
1298: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1299: LD_ADDR_EXP 56
1303: PUSH
1304: LD_STRING Belkov
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: CALL 3455 0 2
1314: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1315: LD_ADDR_EXP 57
1319: PUSH
1320: LD_STRING Kirilenkova
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: CALL 3455 0 2
1330: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1331: LD_EXP 54
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1346: LD_EXP 55
1350: PPUSH
1351: LD_INT 3
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1361: LD_EXP 56
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1376: LD_EXP 57
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1391: LD_EXP 54
1395: PPUSH
1396: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1400: LD_ADDR_EXP 58
1404: PUSH
1405: LD_STRING 01_other_survivors
1407: PPUSH
1408: CALL_OW 31
1412: ST_TO_ADDR
// for i in other_survivors do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: LD_EXP 58
1422: PUSH
1423: FOR_IN
1424: IFFALSE 1443
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1426: LD_VAR 0 2
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
1441: GO 1423
1443: POP
1444: POP
// end ;
1445: LD_VAR 0 1
1449: RET
// function PrepareKirovBase ; var i , un ; begin
1450: LD_INT 0
1452: PPUSH
1453: PPUSH
1454: PPUSH
// SetBName ( kirov , kirov ) ;
1455: LD_INT 71
1457: PPUSH
1458: LD_STRING kirov
1460: PPUSH
1461: CALL_OW 500
// uc_side = 6 ;
1465: LD_ADDR_OWVAR 20
1469: PUSH
1470: LD_INT 6
1472: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1473: LD_ADDR_EXP 59
1477: PUSH
1478: LD_STRING Kurin
1480: PPUSH
1481: LD_INT 0
1483: PPUSH
1484: CALL 3455 0 2
1488: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1489: LD_ADDR_EXP 62
1493: PUSH
1494: LD_STRING Kovalyuk
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL 3455 0 2
1504: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1505: LD_ADDR_EXP 60
1509: PUSH
1510: LD_STRING Belkov2
1512: PPUSH
1513: LD_INT 0
1515: PPUSH
1516: CALL 3455 0 2
1520: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1521: LD_EXP 59
1525: PPUSH
1526: LD_INT 4
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1536: LD_EXP 62
1540: PPUSH
1541: LD_INT 161
1543: PPUSH
1544: LD_INT 108
1546: PPUSH
1547: LD_INT 6
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 50
// ComHold ( Kurin ) ;
1557: LD_EXP 59
1561: PPUSH
1562: CALL_OW 140
// otherKirovUnits = [ ] ;
1566: LD_ADDR_EXP 61
1570: PUSH
1571: EMPTY
1572: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1573: LD_ADDR_EXP 46
1577: PUSH
1578: LD_EXP 46
1582: PPUSH
1583: LD_INT 1
1585: PPUSH
1586: LD_EXP 46
1590: PUSH
1591: LD_INT 1
1593: ARRAY
1594: PUSH
1595: LD_EXP 58
1599: PPUSH
1600: LD_INT 25
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PPUSH
1610: CALL_OW 72
1614: MINUS
1615: PPUSH
1616: CALL_OW 1
1620: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1621: LD_ADDR_VAR 0 2
1625: PUSH
1626: DOUBLE
1627: LD_INT 1
1629: DEC
1630: ST_TO_ADDR
1631: LD_EXP 46
1635: PUSH
1636: LD_INT 1
1638: ARRAY
1639: PUSH
1640: FOR_TO
1641: IFFALSE 1728
// begin uc_nation = 3 ;
1643: LD_ADDR_OWVAR 21
1647: PUSH
1648: LD_INT 3
1650: ST_TO_ADDR
// hc_gallery =  ;
1651: LD_ADDR_OWVAR 33
1655: PUSH
1656: LD_STRING 
1658: ST_TO_ADDR
// hc_name =  ;
1659: LD_ADDR_OWVAR 26
1663: PUSH
1664: LD_STRING 
1666: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( 3 , 5 ) ) ;
1667: LD_INT 0
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: LD_INT 3
1675: PPUSH
1676: LD_INT 5
1678: PPUSH
1679: CALL_OW 12
1683: PPUSH
1684: CALL_OW 380
// un = CreateHuman ;
1688: LD_ADDR_VAR 0 3
1692: PUSH
1693: CALL_OW 44
1697: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1698: LD_ADDR_EXP 61
1702: PUSH
1703: LD_EXP 61
1707: PUSH
1708: LD_VAR 0 3
1712: ADD
1713: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_INT 209
1721: PPUSH
1722: CALL_OW 52
// end ;
1726: GO 1640
1728: POP
1729: POP
// for i := 1 to kirovAmountPeople [ 2 ] do
1730: LD_ADDR_VAR 0 2
1734: PUSH
1735: DOUBLE
1736: LD_INT 1
1738: DEC
1739: ST_TO_ADDR
1740: LD_EXP 46
1744: PUSH
1745: LD_INT 2
1747: ARRAY
1748: PUSH
1749: FOR_TO
1750: IFFALSE 1837
// begin uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 4 , 5 ) ) ;
1776: LD_INT 0
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 5
1787: PPUSH
1788: CALL_OW 12
1792: PPUSH
1793: CALL_OW 380
// un = CreateHuman ;
1797: LD_ADDR_VAR 0 3
1801: PUSH
1802: CALL_OW 44
1806: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1807: LD_ADDR_EXP 61
1811: PUSH
1812: LD_EXP 61
1816: PUSH
1817: LD_VAR 0 3
1821: ADD
1822: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1823: LD_VAR 0 3
1827: PPUSH
1828: LD_INT 71
1830: PPUSH
1831: CALL_OW 52
// end ;
1835: GO 1749
1837: POP
1838: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_EXP 46
1853: PUSH
1854: LD_INT 3
1856: ARRAY
1857: PUSH
1858: FOR_TO
1859: IFFALSE 1946
// begin uc_nation = 3 ;
1861: LD_ADDR_OWVAR 21
1865: PUSH
1866: LD_INT 3
1868: ST_TO_ADDR
// hc_gallery =  ;
1869: LD_ADDR_OWVAR 33
1873: PUSH
1874: LD_STRING 
1876: ST_TO_ADDR
// hc_name =  ;
1877: LD_ADDR_OWVAR 26
1881: PUSH
1882: LD_STRING 
1884: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 3 , 5 ) ) ;
1885: LD_INT 0
1887: PPUSH
1888: LD_INT 3
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 5
1896: PPUSH
1897: CALL_OW 12
1901: PPUSH
1902: CALL_OW 380
// un = CreateHuman ;
1906: LD_ADDR_VAR 0 3
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1916: LD_ADDR_EXP 61
1920: PUSH
1921: LD_EXP 61
1925: PUSH
1926: LD_VAR 0 3
1930: ADD
1931: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1932: LD_VAR 0 3
1936: PPUSH
1937: LD_INT 71
1939: PPUSH
1940: CALL_OW 52
// end ;
1944: GO 1858
1946: POP
1947: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: DOUBLE
1954: LD_INT 1
1956: DEC
1957: ST_TO_ADDR
1958: LD_EXP 46
1962: PUSH
1963: LD_INT 4
1965: ARRAY
1966: PUSH
1967: FOR_TO
1968: IFFALSE 2055
// begin uc_nation = 3 ;
1970: LD_ADDR_OWVAR 21
1974: PUSH
1975: LD_INT 3
1977: ST_TO_ADDR
// hc_gallery =  ;
1978: LD_ADDR_OWVAR 33
1982: PUSH
1983: LD_STRING 
1985: ST_TO_ADDR
// hc_name =  ;
1986: LD_ADDR_OWVAR 26
1990: PUSH
1991: LD_STRING 
1993: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( 3 , 5 ) ) ;
1994: LD_INT 0
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: LD_INT 3
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: CALL_OW 12
2010: PPUSH
2011: CALL_OW 380
// un = CreateHuman ;
2015: LD_ADDR_VAR 0 3
2019: PUSH
2020: CALL_OW 44
2024: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2025: LD_ADDR_EXP 61
2029: PUSH
2030: LD_EXP 61
2034: PUSH
2035: LD_VAR 0 3
2039: ADD
2040: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 83
2048: PPUSH
2049: CALL_OW 52
// end ;
2053: GO 1967
2055: POP
2056: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2057: LD_INT 6
2059: PPUSH
2060: LD_INT 83
2062: PPUSH
2063: LD_INT 3
2065: PPUSH
2066: CALL 4270 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2070: LD_STRING 01_Gnyevko
2072: PPUSH
2073: CALL_OW 28
2077: NOT
2078: IFFALSE 2121
// begin PrepareMechanic ( sex_male , 3 ) ;
2080: LD_INT 1
2082: PPUSH
2083: LD_INT 3
2085: PPUSH
2086: CALL_OW 383
// randomMech = CreateHuman ;
2090: LD_ADDR_EXP 63
2094: PUSH
2095: CALL_OW 44
2099: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2100: LD_EXP 63
2104: PPUSH
2105: LD_INT 161
2107: PPUSH
2108: LD_INT 108
2110: PPUSH
2111: LD_INT 6
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 50
// end ; if not belkovReturn then
2121: LD_EXP 6
2125: NOT
2126: IFFALSE 2140
// PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2128: LD_EXP 60
2132: PPUSH
2133: LD_INT 95
2135: PPUSH
2136: CALL_OW 52
// end ;
2140: LD_VAR 0 1
2144: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
2151: PPUSH
// SetBName ( beria , beria ) ;
2152: LD_INT 106
2154: PPUSH
2155: LD_STRING beria
2157: PPUSH
2158: CALL_OW 500
// uc_side = 6 ;
2162: LD_ADDR_OWVAR 20
2166: PUSH
2167: LD_INT 6
2169: ST_TO_ADDR
// uc_nation = 3 ;
2170: LD_ADDR_OWVAR 21
2174: PUSH
2175: LD_INT 3
2177: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2178: LD_ADDR_EXP 68
2182: PUSH
2183: LD_STRING Platonov
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL 3455 0 2
2193: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2194: LD_EXP 68
2198: PPUSH
2199: LD_INT 112
2201: PPUSH
2202: LD_INT 97
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 48
// ComHold ( Platonov ) ;
2212: LD_EXP 68
2216: PPUSH
2217: CALL_OW 140
// platSoldiers = [ ] ;
2221: LD_ADDR_EXP 69
2225: PUSH
2226: EMPTY
2227: ST_TO_ADDR
// unitsTemp = [ ] ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: EMPTY
2234: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2235: LD_ADDR_EXP 70
2239: PUSH
2240: LD_STRING Kuklajs
2242: PPUSH
2243: LD_INT 0
2245: PPUSH
2246: CALL 3455 0 2
2250: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2251: LD_ADDR_EXP 69
2255: PUSH
2256: LD_EXP 69
2260: PUSH
2261: LD_EXP 70
2265: ADD
2266: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2267: LD_EXP 70
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 97
2277: PPUSH
2278: LD_INT 6
2280: PPUSH
2281: LD_INT 0
2283: PPUSH
2284: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2288: LD_ADDR_EXP 71
2292: PUSH
2293: LD_STRING Benko
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL 3455 0 2
2303: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2304: LD_ADDR_EXP 69
2308: PUSH
2309: LD_EXP 69
2313: PUSH
2314: LD_EXP 71
2318: ADD
2319: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2320: LD_ADDR_VAR 0 4
2324: PUSH
2325: LD_VAR 0 4
2329: PUSH
2330: LD_EXP 71
2334: ADD
2335: ST_TO_ADDR
// for i := 1 to 2 do
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 2
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2417
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2352: LD_INT 0
2354: PPUSH
2355: LD_INT 1
2357: PPUSH
2358: LD_INT 1
2360: PPUSH
2361: LD_INT 3
2363: PPUSH
2364: CALL_OW 12
2368: PPUSH
2369: CALL_OW 380
// un = CreateHuman ;
2373: LD_ADDR_VAR 0 3
2377: PUSH
2378: CALL_OW 44
2382: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2383: LD_ADDR_EXP 69
2387: PUSH
2388: LD_EXP 69
2392: PUSH
2393: LD_VAR 0 3
2397: ADD
2398: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_VAR 0 4
2408: PUSH
2409: LD_VAR 0 3
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2349
2417: POP
2418: POP
// for i := 1 to unitsTemp do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_VAR 0 4
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2523
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2437: LD_ADDR_VAR 0 5
2441: PUSH
2442: LD_INT 8
2444: PPUSH
2445: LD_INT 22
2447: PUSH
2448: LD_INT 6
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 30
2457: PUSH
2458: LD_INT 31
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PPUSH
2469: CALL_OW 70
2473: PUSH
2474: LD_VAR 0 2
2478: ARRAY
2479: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2480: LD_VAR 0 4
2484: PUSH
2485: LD_VAR 0 2
2489: ARRAY
2490: PPUSH
2491: LD_VAR 0 5
2495: PPUSH
2496: CALL_OW 250
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: CALL_OW 251
2510: PPUSH
2511: LD_INT 2
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: CALL_OW 50
// end ;
2521: GO 2434
2523: POP
2524: POP
// end ; end_of_file
2525: LD_VAR 0 1
2529: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2530: LD_INT 0
2532: PPUSH
// PrepareTrap ;
2533: CALL 2546 0 0
// PrepareBunkiers ;
2537: CALL 2910 0 0
// end ;
2541: LD_VAR 0 1
2545: RET
// function PrepareTrap ; var i , un ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
// trapTeam = [ ] ;
2551: LD_ADDR_EXP 73
2555: PUSH
2556: EMPTY
2557: ST_TO_ADDR
// uc_nation = 1 ;
2558: LD_ADDR_OWVAR 21
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_side = 1 ;
2566: LD_ADDR_OWVAR 20
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// hc_gallery =  ;
2574: LD_ADDR_OWVAR 33
2578: PUSH
2579: LD_STRING 
2581: ST_TO_ADDR
// hc_name = profile_name ;
2582: LD_ADDR_OWVAR 26
2586: PUSH
2587: LD_OWVAR 78
2591: ST_TO_ADDR
// hc_importance = 100 ;
2592: LD_ADDR_OWVAR 32
2596: PUSH
2597: LD_INT 100
2599: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2600: LD_INT 1
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_EXP 51
2610: PUSH
2611: LD_INT 1
2613: PLUS
2614: PPUSH
2615: CALL_OW 380
// trapCommander = CreateHuman ;
2619: LD_ADDR_EXP 72
2623: PUSH
2624: CALL_OW 44
2628: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2629: LD_EXP 72
2633: PPUSH
2634: LD_INT 13
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2644: LD_EXP 72
2648: PPUSH
2649: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2653: LD_ADDR_EXP 73
2657: PUSH
2658: LD_EXP 73
2662: PUSH
2663: LD_EXP 72
2667: ADD
2668: ST_TO_ADDR
// hc_importance = 0 ;
2669: LD_ADDR_OWVAR 32
2673: PUSH
2674: LD_INT 0
2676: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: DOUBLE
2683: LD_INT 1
2685: DEC
2686: ST_TO_ADDR
2687: LD_EXP 52
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: PUSH
2696: FOR_TO
2697: IFFALSE 2789
// begin hc_name =  ;
2699: LD_ADDR_OWVAR 26
2703: PUSH
2704: LD_STRING 
2706: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2707: LD_INT 0
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_EXP 51
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
2732: LD_VAR 0 3
2736: PPUSH
2737: LD_INT 12
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: CALL_OW 49
// ComCrawl ( un ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2756: LD_VAR 0 3
2760: PPUSH
2761: LD_INT 116
2763: PPUSH
2764: LD_INT 21
2766: PPUSH
2767: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2771: LD_ADDR_EXP 73
2775: PUSH
2776: LD_EXP 73
2780: PUSH
2781: LD_VAR 0 3
2785: ADD
2786: ST_TO_ADDR
// end ;
2787: GO 2696
2789: POP
2790: POP
// for i := 1 to trapAmountPeople [ 2 ] do
2791: LD_ADDR_VAR 0 2
2795: PUSH
2796: DOUBLE
2797: LD_INT 1
2799: DEC
2800: ST_TO_ADDR
2801: LD_EXP 52
2805: PUSH
2806: LD_INT 2
2808: ARRAY
2809: PUSH
2810: FOR_TO
2811: IFFALSE 2903
// begin hc_name =  ;
2813: LD_ADDR_OWVAR 26
2817: PUSH
2818: LD_STRING 
2820: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: LD_EXP 51
2831: PPUSH
2832: CALL_OW 380
// un = CreateHuman ;
2836: LD_ADDR_VAR 0 3
2840: PUSH
2841: CALL_OW 44
2845: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
2846: LD_VAR 0 3
2850: PPUSH
2851: LD_INT 14
2853: PPUSH
2854: LD_INT 0
2856: PPUSH
2857: CALL_OW 49
// ComCrawl ( un ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 116
2877: PPUSH
2878: LD_INT 21
2880: PPUSH
2881: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2885: LD_ADDR_EXP 73
2889: PUSH
2890: LD_EXP 73
2894: PUSH
2895: LD_VAR 0 3
2899: ADD
2900: ST_TO_ADDR
// end ;
2901: GO 2810
2903: POP
2904: POP
// end ;
2905: LD_VAR 0 1
2909: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
2910: LD_INT 0
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
// uc_side = 1 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 1
2923: ST_TO_ADDR
// uc_nation = nation_american ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 1
2931: ST_TO_ADDR
// bc_level = 1 ;
2932: LD_ADDR_OWVAR 43
2936: PUSH
2937: LD_INT 1
2939: ST_TO_ADDR
// bc_type = b_breastwork ;
2940: LD_ADDR_OWVAR 42
2944: PUSH
2945: LD_INT 31
2947: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
2948: LD_ADDR_VAR 0 4
2952: PUSH
2953: LD_INT 104
2955: PPUSH
2956: LD_INT 59
2958: PPUSH
2959: LD_INT 4
2961: PPUSH
2962: CALL_OW 47
2966: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
2967: LD_ADDR_EXP 74
2971: PUSH
2972: LD_EXP 74
2976: PUSH
2977: LD_VAR 0 4
2981: ADD
2982: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2983: LD_EXP 51
2987: PPUSH
2988: LD_VAR 0 4
2992: PPUSH
2993: CALL 4511 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
2997: LD_ADDR_VAR 0 4
3001: PUSH
3002: LD_INT 101
3004: PPUSH
3005: LD_INT 55
3007: PPUSH
3008: LD_INT 4
3010: PPUSH
3011: CALL_OW 47
3015: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3016: LD_ADDR_EXP 74
3020: PUSH
3021: LD_EXP 74
3025: PUSH
3026: LD_VAR 0 4
3030: ADD
3031: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3032: LD_EXP 51
3036: PPUSH
3037: LD_VAR 0 4
3041: PPUSH
3042: CALL 4511 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3046: LD_ADDR_VAR 0 4
3050: PUSH
3051: LD_INT 132
3053: PPUSH
3054: LD_INT 62
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: CALL_OW 47
3064: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3065: LD_ADDR_EXP 75
3069: PUSH
3070: LD_EXP 75
3074: PUSH
3075: LD_VAR 0 4
3079: ADD
3080: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3081: LD_EXP 51
3085: PPUSH
3086: LD_VAR 0 4
3090: PPUSH
3091: CALL 4511 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3095: LD_ADDR_VAR 0 4
3099: PUSH
3100: LD_INT 134
3102: PPUSH
3103: LD_INT 66
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: CALL_OW 47
3113: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3114: LD_ADDR_EXP 75
3118: PUSH
3119: LD_EXP 75
3123: PUSH
3124: LD_VAR 0 4
3128: ADD
3129: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3130: LD_EXP 51
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: CALL 4511 0 2
// bc_type = b_depot ;
3144: LD_ADDR_OWVAR 42
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3152: LD_ADDR_EXP 76
3156: PUSH
3157: LD_INT 92
3159: PPUSH
3160: LD_INT 51
3162: PPUSH
3163: LD_INT 2
3165: PPUSH
3166: CALL_OW 47
3170: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3171: LD_ADDR_EXP 77
3175: PUSH
3176: LD_INT 193
3178: ST_TO_ADDR
// amLeftEngs = [ ] ;
3179: LD_ADDR_EXP 78
3183: PUSH
3184: EMPTY
3185: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: DOUBLE
3192: LD_INT 1
3194: DEC
3195: ST_TO_ADDR
3196: LD_INT 1
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: LD_INT 1
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 12
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_OWVAR 67
3222: ARRAY
3223: PUSH
3224: FOR_TO
3225: IFFALSE 3316
// begin uc_nation = 1 ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// uc_side = 1 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 1
3242: ST_TO_ADDR
// hc_gallery =  ;
3243: LD_ADDR_OWVAR 33
3247: PUSH
3248: LD_STRING 
3250: ST_TO_ADDR
// hc_name =  ;
3251: LD_ADDR_OWVAR 26
3255: PUSH
3256: LD_STRING 
3258: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3259: LD_INT 0
3261: PPUSH
3262: LD_INT 2
3264: PPUSH
3265: LD_EXP 51
3269: PPUSH
3270: CALL_OW 380
// un = CreateHuman ;
3274: LD_ADDR_VAR 0 3
3278: PUSH
3279: CALL_OW 44
3283: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3284: LD_ADDR_EXP 78
3288: PUSH
3289: LD_EXP 78
3293: PUSH
3294: LD_VAR 0 3
3298: ADD
3299: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3300: LD_VAR 0 3
3304: PPUSH
3305: LD_EXP 76
3309: PPUSH
3310: CALL_OW 52
// end ;
3314: GO 3224
3316: POP
3317: POP
// if Difficulty = 3 then
3318: LD_OWVAR 67
3322: PUSH
3323: LD_INT 3
3325: EQUAL
3326: IFFALSE 3450
// begin amRightEngs = [ ] ;
3328: LD_ADDR_EXP 79
3332: PUSH
3333: EMPTY
3334: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_INT 1
3347: PPUSH
3348: LD_INT 2
3350: PPUSH
3351: CALL_OW 12
3355: PUSH
3356: FOR_TO
3357: IFFALSE 3448
// begin uc_nation = 1 ;
3359: LD_ADDR_OWVAR 21
3363: PUSH
3364: LD_INT 1
3366: ST_TO_ADDR
// uc_side = 1 ;
3367: LD_ADDR_OWVAR 20
3371: PUSH
3372: LD_INT 1
3374: ST_TO_ADDR
// hc_gallery =  ;
3375: LD_ADDR_OWVAR 33
3379: PUSH
3380: LD_STRING 
3382: ST_TO_ADDR
// hc_name =  ;
3383: LD_ADDR_OWVAR 26
3387: PUSH
3388: LD_STRING 
3390: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3391: LD_INT 0
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: LD_EXP 51
3401: PPUSH
3402: CALL_OW 380
// un = CreateHuman ;
3406: LD_ADDR_VAR 0 3
3410: PUSH
3411: CALL_OW 44
3415: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3416: LD_ADDR_EXP 79
3420: PUSH
3421: LD_EXP 79
3425: PUSH
3426: LD_VAR 0 3
3430: ADD
3431: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_EXP 77
3441: PPUSH
3442: CALL_OW 52
// end ;
3446: GO 3356
3448: POP
3449: POP
// end ; end ; end_of_file
3450: LD_VAR 0 1
3454: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3455: LD_INT 0
3457: PPUSH
3458: PPUSH
// if exist_mode then
3459: LD_VAR 0 2
3463: IFFALSE 3488
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_EXP 44
3474: PUSH
3475: LD_VAR 0 1
3479: STR
3480: PPUSH
3481: CALL_OW 34
3485: ST_TO_ADDR
3486: GO 3503
// unit := NewCharacter ( ident ) ;
3488: LD_ADDR_VAR 0 4
3492: PUSH
3493: LD_VAR 0 1
3497: PPUSH
3498: CALL_OW 25
3502: ST_TO_ADDR
// result := unit ;
3503: LD_ADDR_VAR 0 3
3507: PUSH
3508: LD_VAR 0 4
3512: ST_TO_ADDR
// end ;
3513: LD_VAR 0 3
3517: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
3518: LD_INT 0
3520: PPUSH
3521: PPUSH
3522: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
3523: LD_ADDR_VAR 0 1
3527: PUSH
3528: LD_VAR 0 1
3532: PUSH
3533: LD_EXP 54
3537: PUSH
3538: LD_EXP 55
3542: PUSH
3543: LD_EXP 56
3547: PUSH
3548: LD_EXP 57
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: DIFF
3559: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
3560: LD_ADDR_VAR 0 7
3564: PUSH
3565: LD_VAR 0 1
3569: PUSH
3570: LD_INT 1
3572: PPUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 12
3582: ARRAY
3583: ST_TO_ADDR
// if radio then
3584: LD_VAR 0 4
3588: IFFALSE 3637
// begin if GetSex ( speaker ) = sex_male then
3590: LD_VAR 0 7
3594: PPUSH
3595: CALL_OW 258
3599: PUSH
3600: LD_INT 1
3602: EQUAL
3603: IFFALSE 3621
// SayRadio ( speaker , dialogMID ) else
3605: LD_VAR 0 7
3609: PPUSH
3610: LD_VAR 0 2
3614: PPUSH
3615: CALL_OW 94
3619: GO 3635
// SayRadio ( speaker , dialogFID ) ;
3621: LD_VAR 0 7
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: CALL_OW 94
// end else
3635: GO 3682
// begin if GetSex ( speaker ) = sex_male then
3637: LD_VAR 0 7
3641: PPUSH
3642: CALL_OW 258
3646: PUSH
3647: LD_INT 1
3649: EQUAL
3650: IFFALSE 3668
// Say ( speaker , dialogMID ) else
3652: LD_VAR 0 7
3656: PPUSH
3657: LD_VAR 0 2
3661: PPUSH
3662: CALL_OW 88
3666: GO 3682
// Say ( speaker , dialogFID ) ;
3668: LD_VAR 0 7
3672: PPUSH
3673: LD_VAR 0 3
3677: PPUSH
3678: CALL_OW 88
// end ; result := speaker ;
3682: LD_ADDR_VAR 0 5
3686: PUSH
3687: LD_VAR 0 7
3691: ST_TO_ADDR
// end ;
3692: LD_VAR 0 5
3696: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
3697: LD_INT 0
3699: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
3700: LD_VAR 0 1
3704: PPUSH
3705: CALL_OW 255
3709: PUSH
3710: LD_VAR 0 3
3714: EQUAL
3715: PUSH
3716: LD_VAR 0 1
3720: PPUSH
3721: CALL_OW 302
3725: AND
3726: IFFALSE 3748
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_EXP 43
3737: PUSH
3738: LD_VAR 0 2
3742: STR
3743: PPUSH
3744: CALL_OW 38
// end ;
3748: LD_VAR 0 4
3752: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
3753: LD_INT 0
3755: PPUSH
3756: PPUSH
3757: PPUSH
// resultCharactersToSave = [ ] ;
3758: LD_ADDR_VAR 0 6
3762: PUSH
3763: EMPTY
3764: ST_TO_ADDR
// for unit in characters do
3765: LD_ADDR_VAR 0 5
3769: PUSH
3770: LD_VAR 0 1
3774: PUSH
3775: FOR_IN
3776: IFFALSE 3824
// if GetSide ( unit ) = side and IsOK ( unit ) then
3778: LD_VAR 0 5
3782: PPUSH
3783: CALL_OW 255
3787: PUSH
3788: LD_VAR 0 3
3792: EQUAL
3793: PUSH
3794: LD_VAR 0 5
3798: PPUSH
3799: CALL_OW 302
3803: AND
3804: IFFALSE 3822
// resultCharactersToSave = resultCharactersToSave ^ unit ;
3806: LD_ADDR_VAR 0 6
3810: PUSH
3811: LD_VAR 0 6
3815: PUSH
3816: LD_VAR 0 5
3820: ADD
3821: ST_TO_ADDR
3822: GO 3775
3824: POP
3825: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
3826: LD_VAR 0 6
3830: PPUSH
3831: LD_EXP 43
3835: PUSH
3836: LD_VAR 0 2
3840: STR
3841: PPUSH
3842: CALL_OW 38
// end ;
3846: LD_VAR 0 4
3850: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
3851: LD_INT 0
3853: PPUSH
3854: PPUSH
3855: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: LD_STRING QMoreInfo
3863: PPUSH
3864: LD_VAR 0 1
3868: PPUSH
3869: CALL_OW 98
3873: ST_TO_ADDR
// case dec of 1 :
3874: LD_VAR 0 3
3878: PUSH
3879: LD_INT 1
3881: DOUBLE
3882: EQUAL
3883: IFTRUE 3887
3885: GO 3947
3887: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
3888: LD_EXP 54
3892: PPUSH
3893: LD_STRING D2a-Bur-1
3895: PPUSH
3896: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
3900: LD_EXP 68
3904: PPUSH
3905: LD_STRING D2a-Pla-1
3907: PPUSH
3908: CALL_OW 88
// q1 = q diff 1 ;
3912: LD_ADDR_VAR 0 4
3916: PUSH
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 1
3924: DIFF
3925: ST_TO_ADDR
// if q1 >= 2 then
3926: LD_VAR 0 4
3930: PUSH
3931: LD_INT 2
3933: GREATEREQUAL
3934: IFFALSE 3945
// Question1 ( q1 ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: CALL 3851 0 1
// end ; 2 :
3945: GO 4084
3947: LD_INT 2
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 4015
3955: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
3956: LD_EXP 54
3960: PPUSH
3961: LD_STRING D2b-Bur-1
3963: PPUSH
3964: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
3968: LD_EXP 68
3972: PPUSH
3973: LD_STRING D2b-Pla-1
3975: PPUSH
3976: CALL_OW 88
// q1 = q diff 2 ;
3980: LD_ADDR_VAR 0 4
3984: PUSH
3985: LD_VAR 0 1
3989: PUSH
3990: LD_INT 2
3992: DIFF
3993: ST_TO_ADDR
// if q1 >= 2 then
3994: LD_VAR 0 4
3998: PUSH
3999: LD_INT 2
4001: GREATEREQUAL
4002: IFFALSE 4013
// Question1 ( q1 ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: CALL 3851 0 1
// end ; 3 :
4013: GO 4084
4015: LD_INT 3
4017: DOUBLE
4018: EQUAL
4019: IFTRUE 4023
4021: GO 4083
4023: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4024: LD_EXP 54
4028: PPUSH
4029: LD_STRING D2c-Bur-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4036: LD_EXP 68
4040: PPUSH
4041: LD_STRING D2c-Pla-1
4043: PPUSH
4044: CALL_OW 88
// q1 = q diff 3 ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 3
4060: DIFF
4061: ST_TO_ADDR
// if q1 >= 2 then
4062: LD_VAR 0 4
4066: PUSH
4067: LD_INT 2
4069: GREATEREQUAL
4070: IFFALSE 4081
// Question1 ( q1 ) ;
4072: LD_VAR 0 4
4076: PPUSH
4077: CALL 3851 0 1
// end ; end ;
4081: GO 4084
4083: POP
// end ;
4084: LD_VAR 0 2
4088: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 302
4102: NOT
4103: PUSH
4104: LD_VAR 0 2
4108: PPUSH
4109: CALL_OW 302
4113: NOT
4114: OR
4115: PUSH
4116: LD_VAR 0 3
4120: PPUSH
4121: CALL_OW 302
4125: NOT
4126: OR
4127: PUSH
4128: LD_VAR 0 3
4132: PPUSH
4133: CALL_OW 261
4137: PUSH
4138: LD_INT 100
4140: EQUAL
4141: OR
4142: IFFALSE 4146
// exit ;
4144: GO 4265
// AddComTransport ( engineer , depot , mat_oil ) ;
4146: LD_VAR 0 1
4150: PPUSH
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 2
4158: PPUSH
4159: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4163: LD_INT 35
4165: PPUSH
4166: CALL_OW 67
// until Carry ( engineer ) ;
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 281
4179: IFFALSE 4163
// RemoveTasks ( engineer ) ;
4181: LD_VAR 0 1
4185: PPUSH
4186: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_STRING O
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: LD_VAR 0 3
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: LD_INT 0
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: PPUSH
4230: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4234: LD_INT 35
4236: PPUSH
4237: CALL_OW 67
// until not Carry ( engineer ) ;
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 281
4250: NOT
4251: IFFALSE 4234
// SetFuel ( vehicle , 100 ) ;
4253: LD_VAR 0 3
4257: PPUSH
4258: LD_INT 100
4260: PPUSH
4261: CALL_OW 240
// end ;
4265: LD_VAR 0 4
4269: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
4276: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4277: LD_ADDR_VAR 0 8
4281: PUSH
4282: LD_INT 48
4284: PUSH
4285: LD_INT 49
4287: PUSH
4288: LD_INT 50
4290: PUSH
4291: LD_INT 20
4293: PUSH
4294: LD_INT 1
4296: PUSH
4297: LD_INT 51
4299: PUSH
4300: LD_INT 52
4302: PUSH
4303: LD_INT 69
4305: PUSH
4306: LD_INT 39
4308: PUSH
4309: LD_INT 34
4311: PUSH
4312: LD_INT 40
4314: PUSH
4315: LD_INT 53
4317: PUSH
4318: LD_INT 71
4320: PUSH
4321: LD_INT 57
4323: PUSH
4324: LD_INT 58
4326: PUSH
4327: LD_INT 44
4329: PUSH
4330: LD_INT 32
4332: PUSH
4333: LD_INT 27
4335: PUSH
4336: LD_INT 23
4338: PUSH
4339: LD_INT 33
4341: PUSH
4342: LD_INT 59
4344: PUSH
4345: LD_INT 54
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: LD_INT 63
4356: PUSH
4357: LD_INT 64
4359: PUSH
4360: LD_INT 65
4362: PUSH
4363: LD_INT 30
4365: PUSH
4366: LD_INT 31
4368: PUSH
4369: LD_INT 21
4371: PUSH
4372: LD_INT 22
4374: PUSH
4375: LD_INT 25
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4412: LD_ADDR_VAR 0 5
4416: PUSH
4417: DOUBLE
4418: LD_INT 1
4420: DEC
4421: ST_TO_ADDR
4422: LD_VAR 0 8
4426: PUSH
4427: FOR_TO
4428: IFFALSE 4504
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4430: LD_VAR 0 8
4434: PUSH
4435: LD_VAR 0 5
4439: ARRAY
4440: PPUSH
4441: LD_VAR 0 1
4445: PPUSH
4446: CALL_OW 321
4450: PUSH
4451: LD_INT 1
4453: EQUAL
4454: PUSH
4455: LD_VAR 0 8
4459: PUSH
4460: LD_VAR 0 5
4464: ARRAY
4465: PPUSH
4466: LD_VAR 0 3
4470: PPUSH
4471: CALL_OW 482
4475: PUSH
4476: LD_INT 1
4478: EQUAL
4479: AND
4480: IFFALSE 4502
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
4482: LD_VAR 0 2
4486: PPUSH
4487: LD_VAR 0 8
4491: PUSH
4492: LD_VAR 0 5
4496: ARRAY
4497: PPUSH
4498: CALL_OW 184
4502: GO 4427
4504: POP
4505: POP
// end ;
4506: LD_VAR 0 4
4510: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
// uc_side := GetSide ( b ) ;
4516: LD_ADDR_OWVAR 20
4520: PUSH
4521: LD_VAR 0 2
4525: PPUSH
4526: CALL_OW 255
4530: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4531: LD_ADDR_OWVAR 21
4535: PUSH
4536: LD_VAR 0 2
4540: PPUSH
4541: CALL_OW 248
4545: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_VAR 0 1
4556: PPUSH
4557: CALL_OW 380
// un = CreateHuman ;
4561: LD_ADDR_VAR 0 4
4565: PUSH
4566: CALL_OW 44
4570: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4571: LD_ADDR_VAR 0 5
4575: PUSH
4576: LD_VAR 0 2
4580: PPUSH
4581: CALL_OW 254
4585: PUSH
4586: LD_INT 3
4588: MINUS
4589: ST_TO_ADDR
// if dir < 0 then
4590: LD_VAR 0 5
4594: PUSH
4595: LD_INT 0
4597: LESS
4598: IFFALSE 4614
// dir := 6 + dir ;
4600: LD_ADDR_VAR 0 5
4604: PUSH
4605: LD_INT 6
4607: PUSH
4608: LD_VAR 0 5
4612: PLUS
4613: ST_TO_ADDR
// SetDir ( un , dir ) ;
4614: LD_VAR 0 4
4618: PPUSH
4619: LD_VAR 0 5
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4628: LD_VAR 0 4
4632: PPUSH
4633: LD_VAR 0 2
4637: PPUSH
4638: CALL_OW 52
// result = un ;
4642: LD_ADDR_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ST_TO_ADDR
// end ;
4652: LD_VAR 0 3
4656: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// tmp = [ ] ;
4662: LD_ADDR_VAR 0 5
4666: PUSH
4667: EMPTY
4668: ST_TO_ADDR
// if not vehicles then
4669: LD_VAR 0 1
4673: NOT
4674: IFFALSE 4678
// exit ;
4676: GO 4795
// for i in vehicles do
4678: LD_ADDR_VAR 0 4
4682: PUSH
4683: LD_VAR 0 1
4687: PUSH
4688: FOR_IN
4689: IFFALSE 4779
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
4691: LD_ADDR_VAR 0 5
4695: PUSH
4696: LD_VAR 0 5
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_VAR 0 4
4708: PPUSH
4709: CALL_OW 265
4713: PUSH
4714: LD_VAR 0 4
4718: PPUSH
4719: CALL_OW 262
4723: PUSH
4724: LD_VAR 0 4
4728: PPUSH
4729: CALL_OW 263
4733: PUSH
4734: LD_VAR 0 4
4738: PPUSH
4739: CALL_OW 264
4743: PUSH
4744: LD_VAR 0 4
4748: PPUSH
4749: CALL_OW 261
4753: PUSH
4754: LD_VAR 0 4
4758: PPUSH
4759: CALL_OW 256
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: PPUSH
4772: CALL_OW 2
4776: ST_TO_ADDR
4777: GO 4688
4779: POP
4780: POP
// SaveVariable ( tmp , ident ) ;
4781: LD_VAR 0 5
4785: PPUSH
4786: LD_VAR 0 2
4790: PPUSH
4791: CALL_OW 39
// end ;
4795: LD_VAR 0 3
4799: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// buildingsToSave = [ ] ;
4805: LD_ADDR_VAR 0 5
4809: PUSH
4810: EMPTY
4811: ST_TO_ADDR
// if not buildings then
4812: LD_VAR 0 1
4816: NOT
4817: IFFALSE 4821
// exit ;
4819: GO 5222
// for i in buildings do
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: LD_VAR 0 1
4830: PUSH
4831: FOR_IN
4832: IFFALSE 5206
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4834: LD_VAR 0 4
4838: PPUSH
4839: CALL_OW 266
4843: PUSH
4844: LD_INT 6
4846: PUSH
4847: LD_INT 7
4849: PUSH
4850: LD_INT 8
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: LIST
4857: IN
4858: IFFALSE 4983
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
4860: LD_ADDR_VAR 0 5
4864: PUSH
4865: LD_VAR 0 5
4869: PUSH
4870: LD_VAR 0 4
4874: PPUSH
4875: CALL_OW 266
4879: PUSH
4880: LD_VAR 0 4
4884: PPUSH
4885: CALL_OW 250
4889: PUSH
4890: LD_VAR 0 4
4894: PPUSH
4895: CALL_OW 251
4899: PUSH
4900: LD_VAR 0 4
4904: PPUSH
4905: CALL_OW 254
4909: PUSH
4910: LD_VAR 0 4
4914: PPUSH
4915: CALL_OW 267
4919: PUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 248
4929: PUSH
4930: LD_VAR 0 4
4934: PPUSH
4935: CALL_OW 256
4939: PUSH
4940: LD_VAR 0 4
4944: PPUSH
4945: LD_INT 1
4947: PPUSH
4948: CALL_OW 268
4952: PUSH
4953: LD_VAR 0 4
4957: PPUSH
4958: LD_INT 2
4960: PPUSH
4961: CALL_OW 268
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: ADD
4980: ST_TO_ADDR
4981: GO 5204
// if GetBType ( i ) in [ b_bunker , b_turret ] then
4983: LD_VAR 0 4
4987: PPUSH
4988: CALL_OW 266
4992: PUSH
4993: LD_INT 32
4995: PUSH
4996: LD_INT 33
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: IN
5003: IFFALSE 5111
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5005: LD_ADDR_VAR 0 5
5009: PUSH
5010: LD_VAR 0 5
5014: PUSH
5015: LD_VAR 0 4
5019: PPUSH
5020: CALL_OW 266
5024: PUSH
5025: LD_VAR 0 4
5029: PPUSH
5030: CALL_OW 250
5034: PUSH
5035: LD_VAR 0 4
5039: PPUSH
5040: CALL_OW 251
5044: PUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: CALL_OW 254
5054: PUSH
5055: LD_VAR 0 4
5059: PPUSH
5060: CALL_OW 267
5064: PUSH
5065: LD_VAR 0 4
5069: PPUSH
5070: CALL_OW 248
5074: PUSH
5075: LD_VAR 0 4
5079: PPUSH
5080: CALL_OW 256
5084: PUSH
5085: LD_VAR 0 4
5089: PPUSH
5090: CALL_OW 269
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: EMPTY
5106: LIST
5107: ADD
5108: ST_TO_ADDR
5109: GO 5204
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5111: LD_ADDR_VAR 0 5
5115: PUSH
5116: LD_VAR 0 5
5120: PUSH
5121: LD_VAR 0 4
5125: PPUSH
5126: CALL_OW 266
5130: PUSH
5131: LD_VAR 0 4
5135: PPUSH
5136: CALL_OW 250
5140: PUSH
5141: LD_VAR 0 4
5145: PPUSH
5146: CALL_OW 251
5150: PUSH
5151: LD_VAR 0 4
5155: PPUSH
5156: CALL_OW 254
5160: PUSH
5161: LD_VAR 0 4
5165: PPUSH
5166: CALL_OW 267
5170: PUSH
5171: LD_VAR 0 4
5175: PPUSH
5176: CALL_OW 248
5180: PUSH
5181: LD_VAR 0 4
5185: PPUSH
5186: CALL_OW 256
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: ADD
5203: ST_TO_ADDR
// end ;
5204: GO 4831
5206: POP
5207: POP
// SaveVariable ( buildingsToSave , ident ) ;
5208: LD_VAR 0 5
5212: PPUSH
5213: LD_VAR 0 2
5217: PPUSH
5218: CALL_OW 39
// end ;
5222: LD_VAR 0 3
5226: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds ; begin
5227: LD_INT 0
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
// belkovTeam = [ ] ;
5233: LD_ADDR_EXP 65
5237: PUSH
5238: EMPTY
5239: ST_TO_ADDR
// if belkovReturn then
5240: LD_EXP 6
5244: IFFALSE 5264
// belkovTeam = belkovTeam ^ Belkov else
5246: LD_ADDR_EXP 65
5250: PUSH
5251: LD_EXP 65
5255: PUSH
5256: LD_EXP 56
5260: ADD
5261: ST_TO_ADDR
5262: GO 5280
// belkovTeam = belkovTeam ^ Belkov2 ;
5264: LD_ADDR_EXP 65
5268: PUSH
5269: LD_EXP 65
5273: PUSH
5274: LD_EXP 60
5278: ADD
5279: ST_TO_ADDR
// for unit in other_survivors do
5280: LD_ADDR_VAR 0 3
5284: PUSH
5285: LD_EXP 58
5289: PUSH
5290: FOR_IN
5291: IFFALSE 5332
// if IsOK ( unit ) and belkovTeam < 5 then
5293: LD_VAR 0 3
5297: PPUSH
5298: CALL_OW 302
5302: PUSH
5303: LD_EXP 65
5307: PUSH
5308: LD_INT 5
5310: LESS
5311: AND
5312: IFFALSE 5330
// belkovTeam = belkovTeam ^ unit ;
5314: LD_ADDR_EXP 65
5318: PUSH
5319: LD_EXP 65
5323: PUSH
5324: LD_VAR 0 3
5328: ADD
5329: ST_TO_ADDR
5330: GO 5290
5332: POP
5333: POP
// if belkovTeam < 5 then
5334: LD_EXP 65
5338: PUSH
5339: LD_INT 5
5341: LESS
5342: IFFALSE 5494
// begin restRandSolds = 5 - belkovTeam ;
5344: LD_ADDR_VAR 0 4
5348: PUSH
5349: LD_INT 5
5351: PUSH
5352: LD_EXP 65
5356: MINUS
5357: ST_TO_ADDR
// for i := 1 to restRandSolds do
5358: LD_ADDR_VAR 0 2
5362: PUSH
5363: DOUBLE
5364: LD_INT 1
5366: DEC
5367: ST_TO_ADDR
5368: LD_VAR 0 4
5372: PUSH
5373: FOR_TO
5374: IFFALSE 5492
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) do
5376: LD_ADDR_VAR 0 3
5380: PUSH
5381: LD_EXP 61
5385: PPUSH
5386: LD_INT 25
5388: PUSH
5389: LD_INT 1
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: EMPTY
5397: LIST
5398: PPUSH
5399: CALL_OW 72
5403: PUSH
5404: FOR_IN
5405: IFFALSE 5488
// if not unit in belkovTeam then
5407: LD_VAR 0 3
5411: PUSH
5412: LD_EXP 65
5416: IN
5417: NOT
5418: IFFALSE 5486
// if not IsInUnit ( unit ) or GetBType ( IsInUnit ( unit ) ) = b_armoury then
5420: LD_VAR 0 3
5424: PPUSH
5425: CALL_OW 310
5429: NOT
5430: PUSH
5431: LD_VAR 0 3
5435: PPUSH
5436: CALL_OW 310
5440: PPUSH
5441: CALL_OW 266
5445: PUSH
5446: LD_INT 4
5448: EQUAL
5449: OR
5450: IFFALSE 5486
// begin belkovTeam = belkovTeam ^ unit ;
5452: LD_ADDR_EXP 65
5456: PUSH
5457: LD_EXP 65
5461: PUSH
5462: LD_VAR 0 3
5466: ADD
5467: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
5468: LD_ADDR_EXP 61
5472: PUSH
5473: LD_EXP 61
5477: PUSH
5478: LD_VAR 0 3
5482: DIFF
5483: ST_TO_ADDR
// break ;
5484: GO 5488
// end ;
5486: GO 5404
5488: POP
5489: POP
5490: GO 5373
5492: POP
5493: POP
// end ; belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5494: LD_ADDR_EXP 65
5498: PUSH
5499: LD_EXP 65
5503: PUSH
5504: LD_EXP 61
5508: PPUSH
5509: LD_INT 25
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: PPUSH
5522: CALL_OW 72
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: ADD
5531: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5532: LD_ADDR_EXP 61
5536: PUSH
5537: LD_EXP 61
5541: PUSH
5542: LD_EXP 61
5546: PPUSH
5547: LD_INT 25
5549: PUSH
5550: LD_INT 4
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: PPUSH
5560: CALL_OW 72
5564: PUSH
5565: LD_INT 1
5567: ARRAY
5568: DIFF
5569: ST_TO_ADDR
// end ;
5570: LD_VAR 0 1
5574: RET
// export function PlatonovSendSupport ; var i , randValue ; begin
5575: LD_INT 0
5577: PPUSH
5578: PPUSH
5579: PPUSH
// for i := 1 to 2 do
5580: LD_ADDR_VAR 0 2
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_INT 2
5592: PUSH
5593: FOR_TO
5594: IFFALSE 5709
// begin randValue = rand ( 1 , platSoldiers ) ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: LD_INT 1
5603: PPUSH
5604: LD_EXP 69
5608: PPUSH
5609: CALL_OW 12
5613: ST_TO_ADDR
// SetSide ( platSoldiers [ randValue ] , 3 ) ;
5614: LD_EXP 69
5618: PUSH
5619: LD_VAR 0 3
5623: ARRAY
5624: PPUSH
5625: LD_INT 3
5627: PPUSH
5628: CALL_OW 235
// if IsInUnit ( platSoldiers [ randValue ] ) then
5632: LD_EXP 69
5636: PUSH
5637: LD_VAR 0 3
5641: ARRAY
5642: PPUSH
5643: CALL_OW 310
5647: IFFALSE 5664
// ComExitBuilding ( platSoldiers [ randValue ] ) ;
5649: LD_EXP 69
5653: PUSH
5654: LD_VAR 0 3
5658: ARRAY
5659: PPUSH
5660: CALL_OW 122
// AddComMoveXY ( platSoldiers [ randValue ] , 112 , 96 ) ;
5664: LD_EXP 69
5668: PUSH
5669: LD_VAR 0 3
5673: ARRAY
5674: PPUSH
5675: LD_INT 112
5677: PPUSH
5678: LD_INT 96
5680: PPUSH
5681: CALL_OW 171
// platSoldiers = platSoldiers diff platSoldiers [ randValue ] ;
5685: LD_ADDR_EXP 69
5689: PUSH
5690: LD_EXP 69
5694: PUSH
5695: LD_EXP 69
5699: PUSH
5700: LD_VAR 0 3
5704: ARRAY
5705: DIFF
5706: ST_TO_ADDR
// end ;
5707: GO 5593
5709: POP
5710: POP
// end ; end_of_file
5711: LD_VAR 0 1
5715: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
5716: LD_INT 0
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
// CenterNowOnUnits ( Burlak ) ;
5722: LD_EXP 54
5726: PPUSH
5727: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
5731: LD_EXP 54
5735: PPUSH
5736: LD_INT 163
5738: PPUSH
5739: LD_INT 108
5741: PPUSH
5742: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
5746: LD_EXP 54
5750: PPUSH
5751: LD_EXP 59
5755: PPUSH
5756: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
5760: LD_ADDR_VAR 0 2
5764: PUSH
5765: LD_INT 22
5767: PUSH
5768: LD_INT 3
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: PUSH
5794: LD_EXP 54
5798: DIFF
5799: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
5800: LD_ADDR_VAR 0 4
5804: PUSH
5805: DOUBLE
5806: LD_INT 1
5808: DEC
5809: ST_TO_ADDR
5810: LD_EXP 47
5814: PUSH
5815: FOR_TO
5816: IFFALSE 5934
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
5818: LD_ADDR_VAR 0 3
5822: PUSH
5823: LD_VAR 0 2
5827: PPUSH
5828: LD_EXP 47
5832: PUSH
5833: LD_VAR 0 4
5837: ARRAY
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: PPUSH
5843: LD_EXP 47
5847: PUSH
5848: LD_VAR 0 4
5852: ARRAY
5853: PUSH
5854: LD_INT 2
5856: ARRAY
5857: PPUSH
5858: CALL_OW 73
5862: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
5863: LD_VAR 0 3
5867: PPUSH
5868: LD_EXP 47
5872: PUSH
5873: LD_VAR 0 4
5877: ARRAY
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: LD_EXP 47
5887: PUSH
5888: LD_VAR 0 4
5892: ARRAY
5893: PUSH
5894: LD_INT 2
5896: ARRAY
5897: PPUSH
5898: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_EXP 59
5911: PPUSH
5912: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
5916: LD_ADDR_VAR 0 2
5920: PUSH
5921: LD_VAR 0 2
5925: PUSH
5926: LD_VAR 0 3
5930: DIFF
5931: ST_TO_ADDR
// end ;
5932: GO 5815
5934: POP
5935: POP
// repeat CenterNowOnUnits ( Burlak ) ;
5936: LD_EXP 54
5940: PPUSH
5941: CALL_OW 87
// wait ( 0 0$1 ) ;
5945: LD_INT 35
5947: PPUSH
5948: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
5952: LD_EXP 54
5956: PPUSH
5957: LD_EXP 59
5961: PPUSH
5962: CALL_OW 296
5966: PUSH
5967: LD_INT 4
5969: LESS
5970: IFFALSE 5936
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
5972: LD_EXP 54
5976: PUSH
5977: LD_EXP 59
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
5990: LD_EXP 59
5994: PPUSH
5995: LD_EXP 54
5999: PPUSH
6000: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
6004: LD_EXP 59
6008: PPUSH
6009: LD_STRING D1-Kur-1
6011: PPUSH
6012: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6016: LD_EXP 54
6020: PPUSH
6021: LD_STRING D1-Bur-1
6023: PPUSH
6024: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
6028: LD_EXP 59
6032: PPUSH
6033: LD_STRING D1-Kur-2
6035: PPUSH
6036: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
6040: LD_EXP 54
6044: PPUSH
6045: LD_STRING D1-Bur-2
6047: PPUSH
6048: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6052: LD_EXP 59
6056: PPUSH
6057: LD_STRING D1-Kur-3
6059: PPUSH
6060: CALL_OW 88
// if IsOK ( Gnyevko ) then
6064: LD_EXP 55
6068: PPUSH
6069: CALL_OW 302
6073: IFFALSE 6087
// Say ( Kurin , D1-Kur-3a ) ;
6075: LD_EXP 59
6079: PPUSH
6080: LD_STRING D1-Kur-3a
6082: PPUSH
6083: CALL_OW 88
// InGameOff ;
6087: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
6091: LD_INT 22
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 21
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 69
6119: PUSH
6120: LD_EXP 54
6124: PUSH
6125: LD_EXP 55
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: DIFF
6134: PPUSH
6135: LD_INT 6
6137: PPUSH
6138: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6142: LD_EXP 62
6146: PPUSH
6147: LD_INT 3
6149: PPUSH
6150: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6154: LD_INT 9
6156: PPUSH
6157: LD_INT 22
6159: PUSH
6160: LD_INT 6
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 21
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 70
6185: PUSH
6186: LD_EXP 59
6190: DIFF
6191: PPUSH
6192: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
6196: LD_EXP 58
6200: PPUSH
6201: LD_INT 95
6203: PPUSH
6204: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
6208: LD_EXP 56
6212: PPUSH
6213: LD_INT 95
6215: PPUSH
6216: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
6220: LD_EXP 57
6224: PPUSH
6225: CALL_OW 305
6229: IFFALSE 6243
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
6231: LD_EXP 57
6235: PPUSH
6236: LD_INT 83
6238: PPUSH
6239: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
6243: LD_STRING 01_Gnyevko
6245: PPUSH
6246: CALL_OW 28
6250: NOT
6251: IFFALSE 6265
// SetSide ( randomMech , 3 ) ;
6253: LD_EXP 63
6257: PPUSH
6258: LD_INT 3
6260: PPUSH
6261: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
6265: LD_STRING M1
6267: PPUSH
6268: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
6272: LD_INT 3
6274: PPUSH
6275: LD_INT 6
6277: PPUSH
6278: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
6282: LD_INT 3
6284: PPUSH
6285: LD_INT 7
6287: PPUSH
6288: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
6292: LD_INT 6
6294: PPUSH
6295: LD_INT 6
6297: PPUSH
6298: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
6302: LD_INT 6
6304: PPUSH
6305: LD_INT 7
6307: PPUSH
6308: CALL_OW 334
// SaveForQuickRestart ;
6312: CALL_OW 22
// end ;
6316: LD_VAR 0 1
6320: RET
// every 0 0$1 trigger not canExitBase and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6321: LD_EXP 19
6325: NOT
6326: PUSH
6327: LD_INT 20
6329: PPUSH
6330: LD_INT 22
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 2
6342: PUSH
6343: LD_INT 21
6345: PUSH
6346: LD_INT 1
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 21
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 70
6376: PUSH
6377: LD_INT 0
6379: GREATER
6380: AND
6381: IFFALSE 6544
6383: GO 6385
6385: DISABLE
6386: LD_INT 0
6388: PPUSH
// begin enable ;
6389: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6390: LD_ADDR_VAR 0 1
6394: PUSH
6395: LD_INT 20
6397: PPUSH
6398: LD_INT 22
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 21
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 21
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PPUSH
6440: CALL_OW 70
6444: PUSH
6445: FOR_IN
6446: IFFALSE 6542
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 250
6462: PPUSH
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 251
6472: PUSH
6473: LD_INT 5
6475: PLUS
6476: PPUSH
6477: CALL_OW 111
// if unit <> Burlak and IsOk ( Kovalyuk ) then
6481: LD_VAR 0 1
6485: PUSH
6486: LD_EXP 54
6490: NONEQUAL
6491: PUSH
6492: LD_EXP 62
6496: PPUSH
6497: CALL_OW 302
6501: AND
6502: IFFALSE 6516
// Say ( Kovalyuk , D1b-Kov-1 ) ;
6504: LD_EXP 62
6508: PPUSH
6509: LD_STRING D1b-Kov-1
6511: PPUSH
6512: CALL_OW 88
// if unit = Burlak then
6516: LD_VAR 0 1
6520: PUSH
6521: LD_EXP 54
6525: EQUAL
6526: IFFALSE 6540
// Say ( Burlak , D1b-Bur-1 ) ;
6528: LD_EXP 54
6532: PPUSH
6533: LD_STRING D1b-Bur-1
6535: PPUSH
6536: CALL_OW 88
// end ;
6540: GO 6445
6542: POP
6543: POP
// end ;
6544: PPOPN 1
6546: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
6547: LD_EXP 7
6551: NOT
6552: PUSH
6553: LD_INT 9
6555: PPUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 1
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PPUSH
6580: CALL_OW 70
6584: PUSH
6585: LD_INT 0
6587: GREATER
6588: AND
6589: IFFALSE 6606
6591: GO 6593
6593: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
6594: LD_EXP 59
6598: PPUSH
6599: LD_STRING D1a-Kur-1
6601: PPUSH
6602: CALL_OW 88
6606: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
6607: LD_EXP 7
6611: NOT
6612: PUSH
6613: LD_EXP 54
6617: PPUSH
6618: CALL_OW 302
6622: AND
6623: PUSH
6624: LD_INT 8
6626: PPUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 21
6639: PUSH
6640: LD_INT 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 70
6655: PUSH
6656: LD_INT 0
6658: GREATER
6659: AND
6660: IFFALSE 7152
6662: GO 6664
6664: DISABLE
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
// begin enable ;
6671: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 21
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL_OW 69
6705: PUSH
6706: FOR_IN
6707: IFFALSE 7150
// if See ( 6 , unit ) then
6709: LD_INT 6
6711: PPUSH
6712: LD_VAR 0 2
6716: PPUSH
6717: CALL_OW 292
6721: IFFALSE 7148
// begin meetPlatonov = true ;
6723: LD_ADDR_EXP 7
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// InGameOn ;
6731: CALL_OW 8
// DialogueOn ;
6735: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
6739: LD_ADDR_VAR 0 4
6743: PUSH
6744: LD_EXP 69
6748: PPUSH
6749: LD_INT 26
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PPUSH
6759: CALL_OW 72
6763: PPUSH
6764: LD_STRING D2-RSol1-1
6766: PPUSH
6767: LD_STRING 
6769: PPUSH
6770: LD_INT 0
6772: PPUSH
6773: CALL 3518 0 4
6777: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
6778: LD_EXP 54
6782: PPUSH
6783: LD_STRING D2-Bur-1
6785: PPUSH
6786: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
6790: LD_VAR 0 4
6794: PPUSH
6795: LD_STRING D2-RSol1-2
6797: PPUSH
6798: CALL_OW 88
// DialogueOff ;
6802: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6806: LD_ADDR_VAR 0 3
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_INT 3
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: LD_INT 21
6823: PUSH
6824: LD_INT 1
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 50
6833: PUSH
6834: EMPTY
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: PPUSH
6842: CALL_OW 69
6846: ST_TO_ADDR
// for i := 1 to yourUnits do
6847: LD_ADDR_VAR 0 1
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 3
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6932
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
6865: LD_VAR 0 3
6869: PUSH
6870: LD_VAR 0 1
6874: ARRAY
6875: PPUSH
6876: LD_EXP 48
6880: PUSH
6881: LD_VAR 0 1
6885: ARRAY
6886: PUSH
6887: LD_INT 1
6889: ARRAY
6890: PPUSH
6891: LD_EXP 48
6895: PUSH
6896: LD_VAR 0 1
6900: ARRAY
6901: PUSH
6902: LD_INT 2
6904: ARRAY
6905: PPUSH
6906: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
6910: LD_VAR 0 3
6914: PUSH
6915: LD_VAR 0 1
6919: ARRAY
6920: PPUSH
6921: LD_EXP 68
6925: PPUSH
6926: CALL_OW 179
// end ;
6930: GO 6862
6932: POP
6933: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6934: LD_EXP 54
6938: PPUSH
6939: CALL_OW 87
// wait ( 0 0$1 ) ;
6943: LD_INT 35
6945: PPUSH
6946: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
6950: LD_EXP 54
6954: PPUSH
6955: LD_EXP 68
6959: PPUSH
6960: CALL_OW 296
6964: PUSH
6965: LD_INT 4
6967: LESS
6968: IFFALSE 6934
// ComTurnUnit ( Platonov , Burlak ) ;
6970: LD_EXP 68
6974: PPUSH
6975: LD_EXP 54
6979: PPUSH
6980: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
6984: LD_EXP 68
6988: PPUSH
6989: LD_STRING D2-Pla-2
6991: PPUSH
6992: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6996: LD_EXP 54
7000: PPUSH
7001: LD_STRING D2-Bur-2
7003: PPUSH
7004: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
7008: LD_EXP 68
7012: PPUSH
7013: LD_STRING D2-Pla-3
7015: PPUSH
7016: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7020: LD_EXP 54
7024: PPUSH
7025: LD_STRING D2-Bur-3
7027: PPUSH
7028: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7032: LD_EXP 68
7036: PPUSH
7037: LD_STRING D2-Pla-4
7039: PPUSH
7040: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7044: LD_EXP 54
7048: PPUSH
7049: LD_STRING D2-Bur-4
7051: PPUSH
7052: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7056: LD_EXP 68
7060: PPUSH
7061: LD_STRING D2-Pla-5
7063: PPUSH
7064: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
7068: LD_INT 1
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 4
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PPUSH
7086: CALL 3851 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7090: LD_EXP 68
7094: PPUSH
7095: LD_STRING D3-Pla-1
7097: PPUSH
7098: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7102: LD_EXP 54
7106: PPUSH
7107: LD_STRING D3-Bur-1
7109: PPUSH
7110: CALL_OW 88
// InGameOff ;
7114: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7118: LD_STRING M2a
7120: PPUSH
7121: CALL_OW 337
// ComFree ( Platonov ) ;
7125: LD_EXP 68
7129: PPUSH
7130: CALL_OW 139
// SetSide ( beria , 3 ) ;
7134: LD_INT 106
7136: PPUSH
7137: LD_INT 3
7139: PPUSH
7140: CALL_OW 235
// exit ;
7144: POP
7145: POP
7146: GO 7152
// end ;
7148: GO 6706
7150: POP
7151: POP
// end ;
7152: PPOPN 4
7154: END
// export function Dial_LabConstructed ; begin
7155: LD_INT 0
7157: PPUSH
// labConstructed = true ;
7158: LD_ADDR_EXP 8
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// DialogueOn ;
7166: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7170: LD_EXP 54
7174: PPUSH
7175: LD_STRING D5a-Bur-1
7177: PPUSH
7178: CALL_OW 88
// if workshopConstructed then
7182: LD_EXP 9
7186: IFFALSE 7202
// Say ( Platonov , D5a-Pla-1a ) else
7188: LD_EXP 68
7192: PPUSH
7193: LD_STRING D5a-Pla-1a
7195: PPUSH
7196: CALL_OW 88
7200: GO 7214
// Say ( Platonov , D5a-Pla-1a ) ;
7202: LD_EXP 68
7206: PPUSH
7207: LD_STRING D5a-Pla-1a
7209: PPUSH
7210: CALL_OW 88
// DialogueOff ;
7214: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
7218: LD_STRING M2b
7220: PPUSH
7221: CALL_OW 337
// end ;
7225: LD_VAR 0 1
7229: RET
// export function Dial_WorkshopConstructed ; begin
7230: LD_INT 0
7232: PPUSH
// workshopConstructed = true ;
7233: LD_ADDR_EXP 9
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// DialogueOn ;
7241: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
7245: LD_EXP 54
7249: PPUSH
7250: LD_STRING D5b-Bur-1
7252: PPUSH
7253: CALL_OW 88
// if labConstructed then
7257: LD_EXP 8
7261: IFFALSE 7277
// Say ( Platonov , D5b-Pla-1 ) else
7263: LD_EXP 68
7267: PPUSH
7268: LD_STRING D5b-Pla-1
7270: PPUSH
7271: CALL_OW 88
7275: GO 7289
// Say ( Platonov , D5b-Pla-1a ) ;
7277: LD_EXP 68
7281: PPUSH
7282: LD_STRING D5b-Pla-1a
7284: PPUSH
7285: CALL_OW 88
// DialogueOff ;
7289: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
7293: LD_STRING M2c
7295: PPUSH
7296: CALL_OW 337
// end ;
7300: LD_VAR 0 1
7304: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
7305: LD_INT 0
7307: PPUSH
// CenterNowOnUnits ( building ) ;
7308: LD_VAR 0 1
7312: PPUSH
7313: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
7317: LD_INT 22
7319: PUSH
7320: LD_INT 3
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 21
7329: PUSH
7330: LD_INT 1
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 69
7345: PPUSH
7346: CALL_OW 141
// DialogueOn ;
7350: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
7354: LD_EXP 68
7358: PPUSH
7359: LD_STRING D6-Pla-1
7361: PPUSH
7362: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
7366: LD_EXP 54
7370: PPUSH
7371: LD_STRING D6-Bur-1
7373: PPUSH
7374: CALL_OW 88
// DialogueOff ;
7378: CALL_OW 7
// if GetBType ( building ) = b_lab then
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL_OW 266
7391: PUSH
7392: LD_INT 6
7394: EQUAL
7395: IFFALSE 7436
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) else
7397: LD_INT 106
7399: PPUSH
7400: CALL_OW 274
7404: PPUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_INT 106
7410: PPUSH
7411: CALL_OW 274
7415: PPUSH
7416: LD_INT 1
7418: PPUSH
7419: CALL_OW 275
7423: PUSH
7424: LD_EXP 49
7428: PLUS
7429: PPUSH
7430: CALL_OW 277
7434: GO 7473
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ;
7436: LD_INT 106
7438: PPUSH
7439: CALL_OW 274
7443: PPUSH
7444: LD_INT 1
7446: PPUSH
7447: LD_INT 106
7449: PPUSH
7450: CALL_OW 274
7454: PPUSH
7455: LD_INT 1
7457: PPUSH
7458: CALL_OW 275
7462: PUSH
7463: LD_EXP 50
7467: PLUS
7468: PPUSH
7469: CALL_OW 277
// RemoveUnit ( building ) ;
7473: LD_VAR 0 1
7477: PPUSH
7478: CALL_OW 64
// end ;
7482: LD_VAR 0 2
7486: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
7487: LD_EXP 9
7491: PUSH
7492: LD_EXP 8
7496: AND
7497: IFFALSE 7606
7499: GO 7501
7501: DISABLE
// begin DialogueOn ;
7502: CALL_OW 6
// if engineResearched then
7506: LD_EXP 10
7510: IFFALSE 7538
// begin Say ( Burlak , D7b-Bur-1 ) ;
7512: LD_EXP 54
7516: PPUSH
7517: LD_STRING D7b-Bur-1
7519: PPUSH
7520: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
7524: LD_EXP 68
7528: PPUSH
7529: LD_STRING D7b-Pla-1
7531: PPUSH
7532: CALL_OW 88
// end else
7536: GO 7562
// begin Say ( Burlak , D7a-Bur-1 ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D7a-Bur-1
7545: PPUSH
7546: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
7550: LD_EXP 68
7554: PPUSH
7555: LD_STRING D7a-Pla-1
7557: PPUSH
7558: CALL_OW 88
// end ; DialogueOff ;
7562: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
7566: LD_STRING M2
7568: PPUSH
7569: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
7573: LD_INT 5
7575: PPUSH
7576: LD_EXP 68
7580: PPUSH
7581: CALL_OW 250
7585: PPUSH
7586: LD_EXP 68
7590: PPUSH
7591: CALL_OW 251
7595: PPUSH
7596: LD_INT 5
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL_OW 56
// end ;
7606: END
// export function Dial_NewCrates ( x , y ) ; begin
7607: LD_INT 0
7609: PPUSH
// wait ( 0 0$18 ) ;
7610: LD_INT 630
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
7617: LD_EXP 68
7621: PPUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: LD_VAR 0 2
7631: PPUSH
7632: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
7636: LD_EXP 68
7640: PPUSH
7641: LD_STRING D4-Pla-1
7643: PPUSH
7644: CALL_OW 88
// end ;
7648: LD_VAR 0 3
7652: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
7653: LD_INT 0
7655: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
7656: LD_ADDR_EXP 13
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: ST_TO_ADDR
// constructedFirstVehicle = true ;
7694: LD_ADDR_EXP 12
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// InGameOn ;
7702: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
7706: LD_VAR 0 1
7710: PPUSH
7711: CALL_OW 87
// wait ( 0 0$3 ) ;
7715: LD_INT 105
7717: PPUSH
7718: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
7722: LD_EXP 54
7726: PPUSH
7727: LD_STRING D9-Bur-1
7729: PPUSH
7730: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
7734: LD_EXP 68
7738: PPUSH
7739: LD_EXP 13
7743: PPUSH
7744: CALL_OW 250
7748: PPUSH
7749: LD_EXP 13
7753: PPUSH
7754: CALL_OW 251
7758: PPUSH
7759: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7763: LD_INT 35
7765: PPUSH
7766: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
7770: LD_EXP 68
7774: PPUSH
7775: LD_EXP 13
7779: PPUSH
7780: CALL_OW 296
7784: PUSH
7785: LD_INT 4
7787: LESS
7788: IFFALSE 7763
// ComTurnUnit ( Platonov , firstVeh ) ;
7790: LD_EXP 68
7794: PPUSH
7795: LD_EXP 13
7799: PPUSH
7800: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
7804: LD_EXP 68
7808: PPUSH
7809: LD_STRING D9-Pla-1
7811: PPUSH
7812: CALL_OW 88
// InGameOff ;
7816: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
7820: LD_STRING M3
7822: PPUSH
7823: CALL_OW 337
// ComMoveXY ( Platonov , 112 , 97 ) ;
7827: LD_EXP 68
7831: PPUSH
7832: LD_INT 112
7834: PPUSH
7835: LD_INT 97
7837: PPUSH
7838: CALL_OW 111
// end ;
7842: LD_VAR 0 2
7846: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
7847: LD_EXP 13
7851: PPUSH
7852: LD_INT 9
7854: PPUSH
7855: CALL_OW 308
7859: PUSH
7860: LD_EXP 14
7864: NOT
7865: AND
7866: IFFALSE 8718
7868: GO 7870
7870: DISABLE
7871: LD_INT 0
7873: PPUSH
7874: PPUSH
7875: PPUSH
// begin vehicleForKurin = true ;
7876: LD_ADDR_EXP 14
7880: PUSH
7881: LD_INT 1
7883: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
7884: LD_ADDR_VAR 0 2
7888: PUSH
7889: LD_EXP 61
7893: PPUSH
7894: LD_INT 25
7896: PUSH
7897: LD_INT 2
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 72
7908: PUSH
7909: LD_INT 1
7911: ARRAY
7912: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
7913: LD_ADDR_VAR 0 3
7917: PUSH
7918: LD_EXP 61
7922: PPUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 3
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PPUSH
7933: CALL_OW 72
7937: PUSH
7938: LD_INT 1
7940: ARRAY
7941: ST_TO_ADDR
// InGameOn ;
7942: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
7946: LD_EXP 59
7950: PPUSH
7951: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
7955: LD_EXP 13
7959: PPUSH
7960: LD_EXP 59
7964: PPUSH
7965: CALL_OW 250
7969: PPUSH
7970: LD_EXP 59
7974: PPUSH
7975: CALL_OW 251
7979: PPUSH
7980: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
7984: LD_EXP 59
7988: PPUSH
7989: LD_STRING D10-Kur-1
7991: PPUSH
7992: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7996: LD_INT 35
7998: PPUSH
7999: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
8003: LD_EXP 13
8007: PPUSH
8008: LD_EXP 59
8012: PPUSH
8013: CALL_OW 250
8017: PPUSH
8018: LD_EXP 59
8022: PPUSH
8023: CALL_OW 251
8027: PPUSH
8028: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
8032: LD_EXP 13
8036: PPUSH
8037: LD_EXP 59
8041: PPUSH
8042: CALL_OW 296
8046: PUSH
8047: LD_INT 9
8049: LESS
8050: IFFALSE 7996
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
8052: LD_EXP 13
8056: PPUSH
8057: CALL_OW 313
8061: PPUSH
8062: CALL_OW 121
// wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
8073: LD_EXP 13
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: LESS
8086: IFFALSE 8118
// begin ComExitBuilding ( mech ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: CALL_OW 122
// wait ( 0 0$1 ) ;
8097: LD_INT 35
8099: PPUSH
8100: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
8104: LD_VAR 0 3
8108: PPUSH
8109: LD_EXP 13
8113: PPUSH
8114: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
8118: LD_EXP 13
8122: PPUSH
8123: CALL_OW 261
8127: PUSH
8128: LD_INT 90
8130: LESS
8131: IFFALSE 8166
// begin ComExitBuilding ( eng ) ;
8133: LD_VAR 0 2
8137: PPUSH
8138: CALL_OW 122
// wait ( 0 0$1 ) ;
8142: LD_INT 35
8144: PPUSH
8145: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_INT 71
8156: PPUSH
8157: LD_EXP 13
8161: PPUSH
8162: CALL 4089 0 3
// end ; repeat wait ( 0 0$1 ) ;
8166: LD_INT 35
8168: PPUSH
8169: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
8173: LD_EXP 13
8177: PPUSH
8178: CALL_OW 256
8182: PUSH
8183: LD_INT 1000
8185: EQUAL
8186: PUSH
8187: LD_EXP 13
8191: PPUSH
8192: CALL_OW 261
8196: PUSH
8197: LD_INT 90
8199: GREATER
8200: AND
8201: IFFALSE 8166
// ComEnterUnit ( eng , kirov ) ;
8203: LD_VAR 0 2
8207: PPUSH
8208: LD_INT 71
8210: PPUSH
8211: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
8215: LD_EXP 13
8219: PPUSH
8220: LD_INT 6
8222: PPUSH
8223: CALL_OW 235
// if belkovReturn then
8227: LD_EXP 6
8231: IFFALSE 8317
// begin if IsInUnit ( Belkov ) then
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 310
8242: IFFALSE 8253
// ComExitBuilding ( Belkov ) ;
8244: LD_EXP 56
8248: PPUSH
8249: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8253: LD_INT 35
8255: PPUSH
8256: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
8260: LD_EXP 56
8264: PPUSH
8265: LD_EXP 13
8269: PPUSH
8270: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
8274: LD_EXP 56
8278: PPUSH
8279: CALL_OW 310
8283: PUSH
8284: LD_EXP 13
8288: EQUAL
8289: IFFALSE 8253
// Say ( Belkov , D10-Bel-1 ) ;
8291: LD_EXP 56
8295: PPUSH
8296: LD_STRING D10-Bel-1
8298: PPUSH
8299: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
8303: LD_EXP 59
8307: PPUSH
8308: LD_STRING D10-Kur-2
8310: PPUSH
8311: CALL_OW 88
// end else
8315: GO 8443
// begin if IsInUnit ( Belkov2 ) then
8317: LD_EXP 60
8321: PPUSH
8322: CALL_OW 310
8326: IFFALSE 8337
// ComExitBuilding ( Belkov2 ) ;
8328: LD_EXP 60
8332: PPUSH
8333: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8337: LD_INT 35
8339: PPUSH
8340: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
8344: LD_EXP 60
8348: PPUSH
8349: LD_EXP 13
8353: PPUSH
8354: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
8358: LD_EXP 60
8362: PPUSH
8363: CALL_OW 310
8367: PUSH
8368: LD_EXP 13
8372: EQUAL
8373: IFFALSE 8337
// meetBelkovBrother = true ;
8375: LD_ADDR_EXP 4
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
8383: LD_EXP 60
8387: PPUSH
8388: LD_STRING D10-Bel-1
8390: PPUSH
8391: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
8395: LD_EXP 54
8399: PPUSH
8400: LD_STRING D10-Bur-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
8407: LD_EXP 60
8411: PPUSH
8412: LD_STRING D10-Bel-2
8414: PPUSH
8415: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
8419: LD_EXP 54
8423: PPUSH
8424: LD_STRING D10-Bur-2
8426: PPUSH
8427: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
8431: LD_EXP 59
8435: PPUSH
8436: LD_STRING D10-Kur-2a
8438: PPUSH
8439: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
8443: LD_ADDR_EXP 66
8447: PUSH
8448: EMPTY
8449: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
8450: LD_ADDR_EXP 67
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
8457: LD_ADDR_EXP 21
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// CreateBelkovTeam ;
8465: CALL 5227 0 0
// ComExitBuilding ( belkovTeam ) ;
8469: LD_EXP 65
8473: PPUSH
8474: CALL_OW 122
// wait ( 0 0$1 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8485: LD_ADDR_EXP 64
8489: PUSH
8490: LD_INT 22
8492: PUSH
8493: LD_INT 6
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 21
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PPUSH
8514: CALL_OW 69
8518: PUSH
8519: LD_INT 1
8521: ARRAY
8522: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
8523: LD_ADDR_EXP 65
8527: PUSH
8528: LD_EXP 65
8532: PUSH
8533: LD_EXP 64
8537: ADD
8538: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
8539: LD_EXP 65
8543: PPUSH
8544: LD_INT 147
8546: PPUSH
8547: LD_INT 102
8549: PPUSH
8550: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
8554: LD_EXP 65
8558: PPUSH
8559: LD_INT 133
8561: PPUSH
8562: LD_INT 94
8564: PPUSH
8565: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
8569: LD_EXP 65
8573: PPUSH
8574: LD_INT 123
8576: PPUSH
8577: LD_INT 74
8579: PPUSH
8580: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
8584: LD_EXP 65
8588: PPUSH
8589: LD_INT 111
8591: PPUSH
8592: LD_INT 48
8594: PPUSH
8595: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
8599: LD_EXP 65
8603: PPUSH
8604: LD_INT 122
8606: PPUSH
8607: LD_INT 43
8609: PPUSH
8610: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
8614: LD_EXP 65
8618: PPUSH
8619: LD_INT 129
8621: PPUSH
8622: LD_INT 32
8624: PPUSH
8625: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
8629: LD_EXP 65
8633: PPUSH
8634: LD_INT 132
8636: PPUSH
8637: LD_INT 22
8639: PPUSH
8640: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8644: LD_INT 35
8646: PPUSH
8647: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
8651: LD_EXP 64
8655: PPUSH
8656: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
8660: LD_EXP 64
8664: PPUSH
8665: LD_INT 10
8667: PPUSH
8668: CALL_OW 299
8672: PUSH
8673: LD_INT 10
8675: LESS
8676: IFFALSE 8644
// CenterNowOnUnits ( Kurin ) ;
8678: LD_EXP 59
8682: PPUSH
8683: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
8687: LD_EXP 59
8691: PPUSH
8692: LD_STRING D10-Kur-2b
8694: PPUSH
8695: CALL_OW 88
// InGameOff ;
8699: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
8703: LD_STRING M4
8705: PPUSH
8706: CALL_OW 337
// backToBeria1 = true ;
8710: LD_ADDR_EXP 15
8714: PUSH
8715: LD_INT 1
8717: ST_TO_ADDR
// end ;
8718: PPOPN 3
8720: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
8721: LD_INT 9
8723: PPUSH
8724: LD_INT 22
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 21
8736: PUSH
8737: LD_INT 2
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_EXP 14
8757: AND
8758: IFFALSE 8775
8760: GO 8762
8762: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
8763: LD_EXP 59
8767: PPUSH
8768: LD_STRING D1a-Kur-1a
8770: PPUSH
8771: CALL_OW 88
8775: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
8776: LD_EXP 21
8780: IFFALSE 9104
8782: GO 8784
8784: DISABLE
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
// begin enable ;
8789: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
8790: LD_INT 10
8792: PPUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 70
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8815
// exit ;
8813: GO 9104
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
8815: LD_ADDR_VAR 0 1
8819: PUSH
8820: LD_INT 10
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 6
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 70
8837: PUSH
8838: FOR_IN
8839: IFFALSE 9090
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 ) then
8841: LD_VAR 0 1
8845: PPUSH
8846: CALL_OW 247
8850: PUSH
8851: LD_INT 1
8853: EQUAL
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_EXP 56
8864: EQUAL
8865: NOT
8866: PUSH
8867: LD_VAR 0 1
8871: PUSH
8872: LD_EXP 60
8876: EQUAL
8877: NOT
8878: AND
8879: AND
8880: IFFALSE 8921
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
8882: LD_ADDR_EXP 22
8886: PUSH
8887: LD_EXP 22
8891: PUSH
8892: LD_INT 1
8894: PLUS
8895: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
8896: LD_ADDR_EXP 66
8900: PUSH
8901: LD_EXP 66
8905: PUSH
8906: LD_VAR 0 1
8910: ADD
8911: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 247
8930: PUSH
8931: LD_INT 2
8933: EQUAL
8934: IFFALSE 9088
// begin driver = UnitsInside ( unit ) ;
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 313
8950: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
8951: LD_VAR 0 2
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PUSH
8960: LD_EXP 56
8964: EQUAL
8965: IFFALSE 8990
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
8967: LD_EXP 56
8971: PPUSH
8972: LD_STRING 02_TmpBelkov
8974: PPUSH
8975: CALL_OW 38
// RemoveUnit ( unit ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: CALL_OW 64
// end else
8988: GO 9011
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
8990: LD_EXP 60
8994: PPUSH
8995: LD_STRING 02_TmpBelkov2
8997: PPUSH
8998: CALL_OW 38
// RemoveUnit ( unit ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
9011: LD_ADDR_EXP 67
9015: PUSH
9016: LD_EXP 67
9020: PUSH
9021: LD_VAR 0 1
9025: PPUSH
9026: CALL_OW 265
9030: PUSH
9031: LD_VAR 0 1
9035: PPUSH
9036: CALL_OW 262
9040: PUSH
9041: LD_VAR 0 1
9045: PPUSH
9046: CALL_OW 263
9050: PUSH
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 261
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: ADD
9078: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 64
// end ; end ;
9088: GO 8838
9090: POP
9091: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
9092: LD_EXP 66
9096: PPUSH
9097: LD_STRING 02_TmpBelkovTeam
9099: PPUSH
9100: CALL_OW 38
// end ;
9104: PPOPN 2
9106: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
9107: LD_INT 8
9109: PPUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 21
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 71
9138: PUSH
9139: LD_INT 0
9141: EQUAL
9142: PUSH
9143: LD_EXP 15
9147: AND
9148: IFFALSE 9333
9150: GO 9152
9152: DISABLE
9153: LD_INT 0
9155: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
9156: LD_ADDR_VAR 0 1
9160: PUSH
9161: LD_EXP 61
9165: PPUSH
9166: LD_INT 25
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 72
9180: ST_TO_ADDR
// backToBeria1 = false ;
9181: LD_ADDR_EXP 15
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
9189: LD_EXP 68
9193: PPUSH
9194: LD_STRING D11-Pla-1
9196: PPUSH
9197: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
9201: LD_INT 22
9203: PUSH
9204: LD_INT 3
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 21
9213: PUSH
9214: LD_INT 1
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 69
9229: PUSH
9230: LD_INT 1
9232: GREATER
9233: IFFALSE 9249
// Say ( Burlak , D11-Bur-1a ) else
9235: LD_EXP 54
9239: PPUSH
9240: LD_STRING D11-Bur-1a
9242: PPUSH
9243: CALL_OW 88
9247: GO 9261
// Say ( Burlak , D11-Bur-1 ) ;
9249: LD_EXP 54
9253: PPUSH
9254: LD_STRING D11-Bur-1
9256: PPUSH
9257: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
9261: LD_STRING M5
9263: PPUSH
9264: CALL_OW 337
// construcMoreVehicles = true ;
9268: LD_ADDR_EXP 17
9272: PUSH
9273: LD_INT 1
9275: ST_TO_ADDR
// spawnCrates = true ;
9276: LD_ADDR_EXP 20
9280: PUSH
9281: LD_INT 1
9283: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 122
// wait ( 0 0$1 ) ;
9293: LD_INT 35
9295: PPUSH
9296: CALL_OW 67
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: LD_INT 2
9307: PPUSH
9308: LD_INT 159
9310: PPUSH
9311: LD_INT 112
9313: PPUSH
9314: LD_INT 0
9316: PPUSH
9317: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
9321: LD_VAR 0 1
9325: PPUSH
9326: LD_INT 71
9328: PPUSH
9329: CALL_OW 180
// end ;
9333: PPOPN 1
9335: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
9336: LD_EXP 18
9340: PUSH
9341: LD_INT 22
9343: PUSH
9344: LD_INT 3
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: LD_INT 21
9353: PUSH
9354: LD_INT 1
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 69
9369: GREATEREQUAL
9370: IFFALSE 10210
9372: GO 9374
9374: DISABLE
9375: LD_INT 0
9377: PPUSH
9378: PPUSH
// begin canRemoveBelkovUnits = false ;
9379: LD_ADDR_EXP 21
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
9387: LD_INT 22
9389: PUSH
9390: LD_INT 3
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 2
9399: PUSH
9400: LD_INT 21
9402: PUSH
9403: LD_INT 1
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 21
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 69
9433: PPUSH
9434: CALL_OW 141
// InGameOn ;
9438: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
9442: LD_EXP 68
9446: PPUSH
9447: CALL_OW 85
// DialogueOn ;
9451: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
9455: LD_EXP 54
9459: PPUSH
9460: LD_STRING D12-Bur-1
9462: PPUSH
9463: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
9467: LD_EXP 68
9471: PPUSH
9472: LD_STRING D12-Pla-1
9474: PPUSH
9475: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9479: LD_EXP 54
9483: PPUSH
9484: LD_STRING D12-Bur-2
9486: PPUSH
9487: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
9491: LD_EXP 68
9495: PPUSH
9496: LD_STRING D12-Pla-2
9498: PPUSH
9499: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9503: LD_EXP 54
9507: PPUSH
9508: LD_STRING D12-Bur-3
9510: PPUSH
9511: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
9515: LD_EXP 68
9519: PPUSH
9520: LD_STRING D12-Pla-3
9522: PPUSH
9523: CALL_OW 88
// DialogueOff ;
9527: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
9531: LD_INT 6
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: CALL_OW 80
// PrepareAmerican ;
9547: CALL 2530 0 0
// PrepareBelkovReturnTeam ;
9551: CALL 941 0 0
// if IsOK ( Belkov ) then
9555: LD_EXP 56
9559: PPUSH
9560: CALL_OW 302
9564: IFFALSE 9578
// tmpBelkov = Belkov else
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_EXP 56
9575: ST_TO_ADDR
9576: GO 9588
// tmpBelkov = Belkov2 ;
9578: LD_ADDR_VAR 0 1
9582: PUSH
9583: LD_EXP 60
9587: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
9588: LD_EXP 64
9592: PPUSH
9593: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
9597: LD_EXP 72
9601: PPUSH
9602: LD_STRING D13-Sol1-1
9604: PPUSH
9605: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
9609: LD_VAR 0 1
9613: PPUSH
9614: LD_STRING D13-Bel-1
9616: PPUSH
9617: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
9621: LD_EXP 59
9625: PPUSH
9626: LD_STRING D13-Kur-1
9628: PPUSH
9629: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
9633: LD_VAR 0 1
9637: PPUSH
9638: LD_STRING D13-Bel-2
9640: PPUSH
9641: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
9645: LD_EXP 65
9649: PPUSH
9650: LD_INT 121
9652: PPUSH
9653: LD_INT 29
9655: PPUSH
9656: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9660: LD_INT 35
9662: PPUSH
9663: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9667: LD_EXP 64
9671: PPUSH
9672: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
9676: LD_ADDR_VAR 0 2
9680: PUSH
9681: LD_EXP 65
9685: PPUSH
9686: LD_INT 21
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 56
9698: PUSH
9699: EMPTY
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PPUSH
9706: CALL_OW 72
9710: PPUSH
9711: LD_EXP 64
9715: PPUSH
9716: CALL_OW 74
9720: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
9721: LD_EXP 64
9725: PPUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: CALL_OW 296
9735: PUSH
9736: LD_INT 5
9738: LESS
9739: IFFALSE 9752
// ComStop ( kirovVehicle ) else
9741: LD_EXP 64
9745: PPUSH
9746: CALL_OW 141
9750: GO 9767
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
9752: LD_EXP 65
9756: PPUSH
9757: LD_INT 121
9759: PPUSH
9760: LD_INT 29
9762: PPUSH
9763: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
9767: LD_EXP 65
9771: PPUSH
9772: LD_EXP 72
9776: PPUSH
9777: CALL_OW 74
9781: PPUSH
9782: LD_EXP 72
9786: PPUSH
9787: CALL_OW 296
9791: PUSH
9792: LD_INT 5
9794: LESS
9795: IFFALSE 9660
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
9797: LD_EXP 64
9801: PUSH
9802: LD_EXP 72
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PPUSH
9811: CALL_OW 87
// ComWalk ( trapTeam ) ;
9815: LD_EXP 73
9819: PPUSH
9820: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
9824: LD_EXP 73
9828: PPUSH
9829: LD_EXP 64
9833: PPUSH
9834: CALL_OW 179
// ComStop ( belkovTeam ) ;
9838: LD_EXP 65
9842: PPUSH
9843: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
9847: LD_EXP 65
9851: PPUSH
9852: LD_EXP 72
9856: PPUSH
9857: CALL_OW 179
// Say ( trapCommander , D14-Sol1-1 ) ;
9861: LD_EXP 72
9865: PPUSH
9866: LD_STRING D14-Sol1-1
9868: PPUSH
9869: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
9873: LD_VAR 0 1
9877: PPUSH
9878: LD_STRING D14-Bel-1
9880: PPUSH
9881: CALL_OW 88
// immortalBelkovTeam = true ;
9885: LD_ADDR_EXP 23
9889: PUSH
9890: LD_INT 1
9892: ST_TO_ADDR
// ComExitVehicle ( tmpBelkov ) ;
9893: LD_VAR 0 1
9897: PPUSH
9898: CALL_OW 121
// wait ( 0 0$1 ) ;
9902: LD_INT 35
9904: PPUSH
9905: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
9909: LD_EXP 72
9913: PPUSH
9914: LD_EXP 64
9918: PPUSH
9919: CALL_OW 120
// AddComHold ( trapTeam ) ;
9923: LD_EXP 73
9927: PPUSH
9928: CALL_OW 200
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
9932: LD_INT 6
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: LD_INT 2
9940: PPUSH
9941: LD_INT 1
9943: PPUSH
9944: CALL_OW 80
// ComMoveToArea ( belkovTeam , BelkovRetreatArea ) ;
9948: LD_EXP 65
9952: PPUSH
9953: LD_INT 15
9955: PPUSH
9956: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
9960: LD_INT 35
9962: PPUSH
9963: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
9967: LD_VAR 0 1
9971: PPUSH
9972: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
9976: LD_VAR 0 1
9980: PPUSH
9981: LD_INT 15
9983: PPUSH
9984: CALL_OW 308
9988: IFFALSE 9960
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
9990: LD_VAR 0 1
9994: PPUSH
9995: LD_STRING D14-Bel-1a
9997: PPUSH
9998: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
10002: LD_EXP 59
10006: PPUSH
10007: LD_STRING D14-Kur-1
10009: PPUSH
10010: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
10014: LD_VAR 0 1
10018: PPUSH
10019: LD_STRING D14-Bel-2
10021: PPUSH
10022: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
10026: LD_EXP 59
10030: PPUSH
10031: LD_STRING D14-Kur-2
10033: PPUSH
10034: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
10038: LD_EXP 68
10042: PPUSH
10043: CALL_OW 85
// wait ( 0 0$2 ) ;
10047: LD_INT 70
10049: PPUSH
10050: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
10054: LD_EXP 54
10058: PPUSH
10059: LD_STRING D14a-Bur-1
10061: PPUSH
10062: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
10066: LD_EXP 68
10070: PPUSH
10071: LD_STRING D14a-Pla-1
10073: PPUSH
10074: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
10078: LD_EXP 54
10082: PPUSH
10083: LD_STRING D14a-Bur-2
10085: PPUSH
10086: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
10090: LD_EXP 68
10094: PPUSH
10095: LD_STRING D14a-Pla-2
10097: PPUSH
10098: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
10102: LD_EXP 54
10106: PPUSH
10107: LD_STRING D14a-Bur-3
10109: PPUSH
10110: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
10114: LD_EXP 68
10118: PPUSH
10119: LD_STRING D14a-Pla-3
10121: PPUSH
10122: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
10126: LD_EXP 54
10130: PPUSH
10131: LD_STRING D14a-Bur-4
10133: PPUSH
10134: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
10138: LD_EXP 68
10142: PPUSH
10143: LD_STRING D14a-Pla-4
10145: PPUSH
10146: CALL_OW 88
// InGameOff ;
10150: CALL_OW 9
// immortalBelkovTeam = false ;
10154: LD_ADDR_EXP 23
10158: PUSH
10159: LD_INT 0
10161: ST_TO_ADDR
// activateAMAI = true ;
10162: LD_ADDR_EXP 25
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// canExitBase = true ;
10170: LD_ADDR_EXP 19
10174: PUSH
10175: LD_INT 1
10177: ST_TO_ADDR
// construcMoreVehicles = false ;
10178: LD_ADDR_EXP 17
10182: PUSH
10183: LD_INT 0
10185: ST_TO_ADDR
// spawnCrates = false ;
10186: LD_ADDR_EXP 20
10190: PUSH
10191: LD_INT 0
10193: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
10194: LD_STRING M6
10196: PPUSH
10197: CALL_OW 337
// ComFree ( trapTeam ) ;
10201: LD_EXP 73
10205: PPUSH
10206: CALL_OW 139
// end ;
10210: PPOPN 2
10212: END
// every 0 0$1 trigger immortalBelkovTeam do
10213: LD_EXP 23
10217: IFFALSE 10235
10219: GO 10221
10221: DISABLE
// begin enable ;
10222: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
10223: LD_EXP 65
10227: PPUSH
10228: LD_INT 1000
10230: PPUSH
10231: CALL_OW 234
// end ;
10235: END
// every 0 0$1 trigger canExitBase and not belkovSaved and belkovAttackTime > 0 0$00 do
10236: LD_EXP 19
10240: PUSH
10241: LD_EXP 33
10245: NOT
10246: AND
10247: PUSH
10248: LD_EXP 53
10252: PUSH
10253: LD_INT 0
10255: GREATER
10256: AND
10257: IFFALSE 10277
10259: GO 10261
10261: DISABLE
// begin enable ;
10262: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
10263: LD_ADDR_EXP 53
10267: PUSH
10268: LD_EXP 53
10272: PUSH
10273: LD_INT 35
10275: MINUS
10276: ST_TO_ADDR
// end ;
10277: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
10278: LD_EXP 53
10282: PUSH
10283: LD_INT 70
10285: LESS
10286: PUSH
10287: LD_EXP 73
10291: AND
10292: IFFALSE 10313
10294: GO 10296
10296: DISABLE
// begin enable ;
10297: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
10298: LD_EXP 65
10302: PPUSH
10303: LD_INT 120
10305: PPUSH
10306: LD_INT 28
10308: PPUSH
10309: CALL_OW 114
// end ;
10313: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
10314: LD_EXP 26
10318: NOT
10319: PUSH
10320: LD_EXP 27
10324: NOT
10325: OR
10326: IFFALSE 10703
10328: GO 10330
10330: DISABLE
10331: LD_INT 0
10333: PPUSH
// begin enable ;
10334: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
10335: LD_ADDR_VAR 0 1
10339: PUSH
10340: LD_INT 22
10342: PUSH
10343: LD_INT 1
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: LD_INT 21
10352: PUSH
10353: LD_INT 3
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 30
10362: PUSH
10363: LD_INT 31
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: PUSH
10380: FOR_IN
10381: IFFALSE 10701
// begin if See ( 3 , bunker ) then
10383: LD_INT 3
10385: PPUSH
10386: LD_VAR 0 1
10390: PPUSH
10391: CALL_OW 292
10395: IFFALSE 10699
// begin if bunker in leftBunkers and not sawLeftBunker then
10397: LD_VAR 0 1
10401: PUSH
10402: LD_EXP 74
10406: IN
10407: PUSH
10408: LD_EXP 26
10412: NOT
10413: AND
10414: IFFALSE 10565
// begin sawLeftBunker = true ;
10416: LD_ADDR_EXP 26
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
10424: LD_VAR 0 1
10428: PPUSH
10429: CALL_OW 85
// DialogueOn ;
10433: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
10437: LD_EXP 54
10441: PPUSH
10442: LD_STRING D15-Bur-1
10444: PPUSH
10445: CALL_OW 88
// if IsOK ( Gnyevko ) then
10449: LD_EXP 55
10453: PPUSH
10454: CALL_OW 302
10458: IFFALSE 10472
// Say ( Gnyevko , D15-Gny-1 ) ;
10460: LD_EXP 55
10464: PPUSH
10465: LD_STRING D15-Gny-1
10467: PPUSH
10468: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10472: LD_EXP 62
10476: PPUSH
10477: CALL_OW 302
10481: IFFALSE 10495
// Say ( Kovalyuk , D15-Kov-1 ) ;
10483: LD_EXP 62
10487: PPUSH
10488: LD_STRING D15-Kov-1
10490: PPUSH
10491: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
10495: LD_EXP 54
10499: PPUSH
10500: LD_STRING D15-Bur-2
10502: PPUSH
10503: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10507: LD_EXP 62
10511: PPUSH
10512: CALL_OW 302
10516: IFFALSE 10530
// Say ( Kovalyuk , D15-Kov-2 ) ;
10518: LD_EXP 62
10522: PPUSH
10523: LD_STRING D15-Kov-2
10525: PPUSH
10526: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
10530: LD_EXP 54
10534: PPUSH
10535: LD_STRING D15-Bur-3
10537: PPUSH
10538: CALL_OW 88
// DialogueOff ;
10542: CALL_OW 7
// raportForPlatonov = 3 ;
10546: LD_ADDR_EXP 35
10550: PUSH
10551: LD_INT 3
10553: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
10554: LD_STRING M7
10556: PPUSH
10557: CALL_OW 337
// exit ;
10561: POP
10562: POP
10563: GO 10703
// end ; if bunker in rightBunkers and not sawRightBunker then
10565: LD_VAR 0 1
10569: PUSH
10570: LD_EXP 75
10574: IN
10575: PUSH
10576: LD_EXP 27
10580: NOT
10581: AND
10582: IFFALSE 10699
// begin sawRightBunker = true ;
10584: LD_ADDR_EXP 27
10588: PUSH
10589: LD_INT 1
10591: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
10592: LD_VAR 0 1
10596: PPUSH
10597: CALL_OW 85
// DialogueOn ;
10601: CALL_OW 6
// if IsOK ( Kovalyuk ) then
10605: LD_EXP 62
10609: PPUSH
10610: CALL_OW 302
10614: IFFALSE 10648
// begin if sawLeftBunker then
10616: LD_EXP 26
10620: IFFALSE 10636
// Say ( Kovalyuk , D16-Kov-1a ) else
10622: LD_EXP 62
10626: PPUSH
10627: LD_STRING D16-Kov-1a
10629: PPUSH
10630: CALL_OW 88
10634: GO 10648
// Say ( Kovalyuk , D16-Kov-1 ) ;
10636: LD_EXP 62
10640: PPUSH
10641: LD_STRING D16-Kov-1
10643: PPUSH
10644: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
10648: LD_EXP 54
10652: PPUSH
10653: LD_STRING D16-Bur-1
10655: PPUSH
10656: CALL_OW 88
// if IsOK ( Gnyevko ) then
10660: LD_EXP 55
10664: PPUSH
10665: CALL_OW 302
10669: IFFALSE 10683
// Say ( Gnyevko , D16-Gny-1 ) ;
10671: LD_EXP 55
10675: PPUSH
10676: LD_STRING D16-Gny-1
10678: PPUSH
10679: CALL_OW 88
// DialogueOff ;
10683: CALL_OW 7
// raportForPlatonov = 2 ;
10687: LD_ADDR_EXP 35
10691: PUSH
10692: LD_INT 2
10694: ST_TO_ADDR
// exit ;
10695: POP
10696: POP
10697: GO 10703
// end ; end ; end ;
10699: GO 10380
10701: POP
10702: POP
// end ;
10703: PPOPN 1
10705: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
10706: LD_EXP 29
10710: NOT
10711: PUSH
10712: LD_EXP 75
10716: AND
10717: PUSH
10718: LD_EXP 62
10722: PPUSH
10723: CALL_OW 302
10727: PUSH
10728: LD_EXP 55
10732: PPUSH
10733: CALL_OW 302
10737: OR
10738: AND
10739: IFFALSE 10927
10741: GO 10743
10743: DISABLE
10744: LD_INT 0
10746: PPUSH
// begin enable ;
10747: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10748: LD_ADDR_VAR 0 1
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 3
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 21
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 21
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: PUSH
10800: FOR_IN
10801: IFFALSE 10925
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
10803: LD_VAR 0 1
10807: PPUSH
10808: CALL_OW 320
10812: PUSH
10813: LD_EXP 75
10817: PUSH
10818: LD_INT 1
10820: ARRAY
10821: EQUAL
10822: PUSH
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL_OW 320
10832: PUSH
10833: LD_EXP 75
10837: PUSH
10838: LD_INT 2
10840: ARRAY
10841: EQUAL
10842: OR
10843: IFFALSE 10923
// begin dialogAttackRightBunkers = true ;
10845: LD_ADDR_EXP 29
10849: PUSH
10850: LD_INT 1
10852: ST_TO_ADDR
// DialogueOn ;
10853: CALL_OW 6
// if IsOK ( Gnyevko ) then
10857: LD_EXP 55
10861: PPUSH
10862: CALL_OW 302
10866: IFFALSE 10880
// Say ( Gnyevko , D16A-Gny-1 ) ;
10868: LD_EXP 55
10872: PPUSH
10873: LD_STRING D16A-Gny-1
10875: PPUSH
10876: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10880: LD_EXP 62
10884: PPUSH
10885: CALL_OW 302
10889: IFFALSE 10903
// Say ( Kovalyuk , D16A-Kov-1 ) ;
10891: LD_EXP 62
10895: PPUSH
10896: LD_STRING D16A-Kov-1
10898: PPUSH
10899: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
10903: LD_EXP 54
10907: PPUSH
10908: LD_STRING D16A-Bur-1
10910: PPUSH
10911: CALL_OW 88
// DialogueOff ;
10915: CALL_OW 7
// exit ;
10919: POP
10920: POP
10921: GO 10927
// end ; end ;
10923: GO 10800
10925: POP
10926: POP
// end ;
10927: PPOPN 1
10929: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) do var decsToChoose ;
10930: LD_INT 18
10932: PPUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 3
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: PPUSH
10946: CALL_OW 70
10950: IFFALSE 11325
10952: GO 10954
10954: DISABLE
10955: LD_INT 0
10957: PPUSH
// begin if playerGetSupport then
10958: LD_EXP 30
10962: IFFALSE 10981
// decsToChoose = [ 1 , 3 ] else
10964: LD_ADDR_VAR 0 1
10968: PUSH
10969: LD_INT 1
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: ST_TO_ADDR
10979: GO 11000
// decsToChoose = [ 1 , 2 , 3 ] ;
10981: LD_ADDR_VAR 0 1
10985: PUSH
10986: LD_INT 1
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
11000: LD_STRING QAttackBw
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 98
11012: PUSH
11013: LD_INT 1
11015: DOUBLE
11016: EQUAL
11017: IFTRUE 11021
11019: GO 11114
11021: POP
// begin DialogueOn ;
11022: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
11026: LD_EXP 54
11030: PPUSH
11031: LD_STRING D17-Bur-1
11033: PPUSH
11034: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
11038: LD_EXP 68
11042: PPUSH
11043: LD_STRING D17-Pla-1
11045: PPUSH
11046: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
11050: LD_EXP 54
11054: PPUSH
11055: LD_STRING D17-Bur-2
11057: PPUSH
11058: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
11062: LD_EXP 68
11066: PPUSH
11067: LD_STRING D17-Pla-2
11069: PPUSH
11070: CALL_OW 94
// DialogueOff ;
11074: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
11078: LD_EXP 38
11082: PUSH
11083: LD_INT 2
11085: PUSH
11086: LD_INT 3
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: IN
11093: NOT
11094: IFFALSE 11112
// begin initiative = 1 ;
11096: LD_ADDR_EXP 38
11100: PUSH
11101: LD_INT 1
11103: ST_TO_ADDR
// platonovOpinion = 2 ;
11104: LD_ADDR_EXP 5
11108: PUSH
11109: LD_INT 2
11111: ST_TO_ADDR
// end ; end ; 2 :
11112: GO 11255
11114: LD_INT 2
11116: DOUBLE
11117: EQUAL
11118: IFTRUE 11122
11120: GO 11227
11122: POP
// begin DialogueOn ;
11123: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
11127: LD_EXP 54
11131: PPUSH
11132: LD_STRING D18-Bur-1
11134: PPUSH
11135: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
11139: LD_EXP 68
11143: PPUSH
11144: LD_STRING D18-Pla-1
11146: PPUSH
11147: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
11151: LD_EXP 54
11155: PPUSH
11156: LD_STRING D18-Bur-2
11158: PPUSH
11159: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
11163: LD_EXP 68
11167: PPUSH
11168: LD_STRING D18-Pla-2
11170: PPUSH
11171: CALL_OW 94
// DialogueOff ;
11175: CALL_OW 7
// playerGetSupport = true ;
11179: LD_ADDR_EXP 30
11183: PUSH
11184: LD_INT 1
11186: ST_TO_ADDR
// medalForGetSupport = false ;
11187: LD_ADDR_EXP 36
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// PlatonovSendSupport ;
11195: CALL 5575 0 0
// if initiative <> 3 then
11199: LD_EXP 38
11203: PUSH
11204: LD_INT 3
11206: NONEQUAL
11207: IFFALSE 11225
// begin initiative = 1 ;
11209: LD_ADDR_EXP 38
11213: PUSH
11214: LD_INT 1
11216: ST_TO_ADDR
// platonovOpinion = 2 ;
11217: LD_ADDR_EXP 5
11221: PUSH
11222: LD_INT 2
11224: ST_TO_ADDR
// end ; end ; 3 :
11225: GO 11255
11227: LD_INT 3
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11254
11235: POP
// begin initiative = 3 ;
11236: LD_ADDR_EXP 38
11240: PUSH
11241: LD_INT 3
11243: ST_TO_ADDR
// platonovOpinion = 0 ;
11244: LD_ADDR_EXP 5
11248: PUSH
11249: LD_INT 0
11251: ST_TO_ADDR
// end ; end ;
11252: GO 11255
11254: POP
// if IsOK ( Gnyevko ) then
11255: LD_EXP 55
11259: PPUSH
11260: CALL_OW 302
11264: IFFALSE 11290
// begin Say ( Gnyevko , D19-Gny-1 ) ;
11266: LD_EXP 55
11270: PPUSH
11271: LD_STRING D19-Gny-1
11273: PPUSH
11274: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
11278: LD_EXP 54
11282: PPUSH
11283: LD_STRING D19-Bur-1
11285: PPUSH
11286: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
11290: LD_EXP 62
11294: PPUSH
11295: CALL_OW 302
11299: IFFALSE 11325
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
11301: LD_EXP 62
11305: PPUSH
11306: LD_STRING D19-Kov-1
11308: PPUSH
11309: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
11313: LD_EXP 54
11317: PPUSH
11318: LD_STRING D19-Bur-2
11320: PPUSH
11321: CALL_OW 88
// end ; end ;
11325: PPOPN 1
11327: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
11328: LD_EXP 28
11332: NOT
11333: PUSH
11334: LD_EXP 74
11338: AND
11339: PUSH
11340: LD_INT 18
11342: PPUSH
11343: LD_INT 22
11345: PUSH
11346: LD_INT 3
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: PPUSH
11356: CALL_OW 70
11360: PUSH
11361: LD_INT 0
11363: EQUAL
11364: AND
11365: PUSH
11366: LD_EXP 62
11370: PPUSH
11371: CALL_OW 302
11375: PUSH
11376: LD_EXP 55
11380: PPUSH
11381: CALL_OW 302
11385: OR
11386: AND
11387: IFFALSE 11575
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
// begin enable ;
11395: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11396: LD_ADDR_VAR 0 1
11400: PUSH
11401: LD_INT 22
11403: PUSH
11404: LD_INT 3
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 21
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 21
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 69
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11573
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
11451: LD_VAR 0 1
11455: PPUSH
11456: CALL_OW 320
11460: PUSH
11461: LD_EXP 74
11465: PUSH
11466: LD_INT 1
11468: ARRAY
11469: EQUAL
11470: PUSH
11471: LD_VAR 0 1
11475: PPUSH
11476: CALL_OW 320
11480: PUSH
11481: LD_EXP 74
11485: PUSH
11486: LD_INT 2
11488: ARRAY
11489: EQUAL
11490: OR
11491: IFFALSE 11571
// begin dialogAttackLeftBunkers = true ;
11493: LD_ADDR_EXP 28
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// DialogueOn ;
11501: CALL_OW 6
// if IsOK ( Gnyevko ) then
11505: LD_EXP 55
11509: PPUSH
11510: CALL_OW 302
11514: IFFALSE 11528
// Say ( Gnyevko , D19A-Gny-1 ) ;
11516: LD_EXP 55
11520: PPUSH
11521: LD_STRING D19A-Gny-1
11523: PPUSH
11524: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11528: LD_EXP 62
11532: PPUSH
11533: CALL_OW 302
11537: IFFALSE 11551
// Say ( Kovalyuk , D19A-Kov-1 ) ;
11539: LD_EXP 62
11543: PPUSH
11544: LD_STRING D19A-Kov-1
11546: PPUSH
11547: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
11551: LD_EXP 54
11555: PPUSH
11556: LD_STRING D16A-Bur-1
11558: PPUSH
11559: CALL_OW 88
// DialogueOff ;
11563: CALL_OW 7
// exit ;
11567: POP
11568: POP
11569: GO 11575
// end ; end ;
11571: GO 11448
11573: POP
11574: POP
// end ;
11575: PPOPN 1
11577: END
// every 0 0$1 trigger not leftBunkers and canExitBase do
11578: LD_EXP 74
11582: NOT
11583: PUSH
11584: LD_EXP 19
11588: AND
11589: IFFALSE 11633
11591: GO 11593
11593: DISABLE
// begin DialogueOn ;
11594: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
11598: LD_EXP 54
11602: PPUSH
11603: LD_STRING D20-Bur-1
11605: PPUSH
11606: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
11610: LD_EXP 68
11614: PPUSH
11615: LD_STRING D20-Pla-1
11617: PPUSH
11618: CALL_OW 88
// DialogueOff ;
11622: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
11626: LD_STRING M8
11628: PPUSH
11629: CALL_OW 337
// end ;
11633: END
// every 0 0$1 trigger not rightBunkers and canExitBase do
11634: LD_EXP 75
11638: NOT
11639: PUSH
11640: LD_EXP 19
11644: AND
11645: IFFALSE 11682
11647: GO 11649
11649: DISABLE
// begin DialogueOn ;
11650: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
11654: LD_EXP 54
11658: PPUSH
11659: LD_STRING D20a-Bur-1
11661: PPUSH
11662: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
11666: LD_EXP 68
11670: PPUSH
11671: LD_STRING D20a-Pla-1
11673: PPUSH
11674: CALL_OW 88
// DialogueOff ;
11678: CALL_OW 7
// end ;
11682: END
// every 0 0$1 trigger not saveBelkovDecision do var yourUnit , trapUnit , decsToChoose ;
11683: LD_EXP 31
11687: NOT
11688: IFFALSE 12183
11690: GO 11692
11692: DISABLE
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
11697: PPUSH
// begin enable ;
11698: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11699: LD_ADDR_VAR 0 1
11703: PUSH
11704: LD_INT 22
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 2
11716: PUSH
11717: LD_INT 21
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 21
11729: PUSH
11730: LD_INT 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 69
11750: PUSH
11751: FOR_IN
11752: IFFALSE 12181
// for trapUnit in trapTeam do
11754: LD_ADDR_VAR 0 2
11758: PUSH
11759: LD_EXP 73
11763: PUSH
11764: FOR_IN
11765: IFFALSE 12177
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
11767: LD_VAR 0 1
11771: PPUSH
11772: LD_VAR 0 2
11776: PPUSH
11777: CALL_OW 296
11781: PUSH
11782: LD_INT 16
11784: LESS
11785: IFFALSE 12175
// begin saveBelkovDecision = true ;
11787: LD_ADDR_EXP 31
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if playerGetSupport then
11795: LD_EXP 30
11799: IFFALSE 11818
// decsToChoose = [ 1 , 3 ] else
11801: LD_ADDR_VAR 0 3
11805: PUSH
11806: LD_INT 1
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: ST_TO_ADDR
11816: GO 11837
// decsToChoose = [ 1 , 2 , 3 ] ;
11818: LD_ADDR_VAR 0 3
11822: PUSH
11823: LD_INT 1
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: LD_INT 3
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
11837: LD_STRING QAttackAm
11839: PPUSH
11840: LD_VAR 0 3
11844: PPUSH
11845: CALL_OW 98
11849: PUSH
11850: LD_INT 1
11852: DOUBLE
11853: EQUAL
11854: IFTRUE 11858
11856: GO 11927
11858: POP
// begin DialogueOn ;
11859: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
11863: LD_EXP 54
11867: PPUSH
11868: LD_STRING D21-Bur-1
11870: PPUSH
11871: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
11875: LD_EXP 68
11879: PPUSH
11880: LD_STRING D21-Pla-1
11882: PPUSH
11883: CALL_OW 94
// DialogueOff ;
11887: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
11891: LD_EXP 38
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: IN
11906: NOT
11907: IFFALSE 11925
// begin initiative = 1 ;
11909: LD_ADDR_EXP 38
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// platonovOpinion = 2 ;
11917: LD_ADDR_EXP 5
11921: PUSH
11922: LD_INT 2
11924: ST_TO_ADDR
// end ; end ; 2 :
11925: GO 12119
11927: LD_INT 2
11929: DOUBLE
11930: EQUAL
11931: IFTRUE 11935
11933: GO 12091
11935: POP
// begin DialogueOn ;
11936: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
11940: LD_EXP 54
11944: PPUSH
11945: LD_STRING D22-Bur-1
11947: PPUSH
11948: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
11952: LD_EXP 30
11956: PUSH
11957: LD_EXP 74
11961: PUSH
11962: LD_INT 0
11964: EQUAL
11965: PUSH
11966: LD_EXP 75
11970: PUSH
11971: LD_INT 0
11973: EQUAL
11974: OR
11975: AND
11976: IFFALSE 11990
// Say ( Platonov , D22-Pla-1b ) ;
11978: LD_EXP 68
11982: PPUSH
11983: LD_STRING D22-Pla-1b
11985: PPUSH
11986: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
11990: LD_EXP 30
11994: PUSH
11995: LD_EXP 74
11999: PUSH
12000: LD_EXP 75
12004: OR
12005: AND
12006: IFFALSE 12020
// Say ( Platonov , D22-Pla-1a ) ;
12008: LD_EXP 68
12012: PPUSH
12013: LD_STRING D22-Pla-1a
12015: PPUSH
12016: CALL_OW 88
// if not playerGetSupport then
12020: LD_EXP 30
12024: NOT
12025: IFFALSE 12059
// begin Say ( Platonov , D22-Pla-1 ) ;
12027: LD_EXP 68
12031: PPUSH
12032: LD_STRING D22-Pla-1
12034: PPUSH
12035: CALL_OW 88
// playerGetSupport = true ;
12039: LD_ADDR_EXP 30
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// medalForGetSupport = false ;
12047: LD_ADDR_EXP 36
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// PlatonovSendSupport ;
12055: CALL 5575 0 0
// end ; DialogueOff ;
12059: CALL_OW 7
// if initiative <> 3 then
12063: LD_EXP 38
12067: PUSH
12068: LD_INT 3
12070: NONEQUAL
12071: IFFALSE 12089
// begin initiative = 2 ;
12073: LD_ADDR_EXP 38
12077: PUSH
12078: LD_INT 2
12080: ST_TO_ADDR
// platonovOpinion = 1 ;
12081: LD_ADDR_EXP 5
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// end ; end ; 3 :
12089: GO 12119
12091: LD_INT 3
12093: DOUBLE
12094: EQUAL
12095: IFTRUE 12099
12097: GO 12118
12099: POP
// begin initiative = 3 ;
12100: LD_ADDR_EXP 38
12104: PUSH
12105: LD_INT 3
12107: ST_TO_ADDR
// platonovOpinion = 0 ;
12108: LD_ADDR_EXP 5
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// end ; end ;
12116: GO 12119
12118: POP
// if IsOK ( Gnyevko ) then
12119: LD_EXP 55
12123: PPUSH
12124: CALL_OW 302
12128: IFFALSE 12154
// begin Say ( Gnyevko , D23-Gny-1 ) ;
12130: LD_EXP 55
12134: PPUSH
12135: LD_STRING D23-Gny-1
12137: PPUSH
12138: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
12142: LD_EXP 54
12146: PPUSH
12147: LD_STRING D23-Bur-1
12149: PPUSH
12150: CALL_OW 88
// end ; saveBelkovObjective = true ;
12154: LD_ADDR_EXP 32
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
12162: LD_STRING M9
12164: PPUSH
12165: CALL_OW 337
// exit ;
12169: POP
12170: POP
12171: POP
12172: POP
12173: GO 12183
// end ;
12175: GO 11764
12177: POP
12178: POP
12179: GO 11751
12181: POP
12182: POP
// end ;
12183: PPOPN 3
12185: END
// every 0 0$1 trigger canExitBase and not trapTeam and not belkovSaved do
12186: LD_EXP 19
12190: PUSH
12191: LD_EXP 73
12195: NOT
12196: AND
12197: PUSH
12198: LD_EXP 33
12202: NOT
12203: AND
12204: IFFALSE 12236
12206: GO 12208
12208: DISABLE
// begin belkovSaved = true ;
12209: LD_ADDR_EXP 33
12213: PUSH
12214: LD_INT 1
12216: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
12217: LD_EXP 65
12221: PPUSH
12222: LD_INT 3
12224: PPUSH
12225: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
12229: LD_STRING M9a
12231: PPUSH
12232: CALL_OW 337
// end ;
12236: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
12237: LD_EXP 33
12241: PUSH
12242: LD_EXP 54
12246: PPUSH
12247: LD_EXP 56
12251: PPUSH
12252: CALL_OW 296
12256: PUSH
12257: LD_INT 14
12259: LESS
12260: PUSH
12261: LD_EXP 54
12265: PPUSH
12266: LD_EXP 60
12270: PPUSH
12271: CALL_OW 296
12275: PUSH
12276: LD_INT 14
12278: LESS
12279: OR
12280: AND
12281: IFFALSE 12555
12283: GO 12285
12285: DISABLE
// begin InGameOn ;
12286: CALL_OW 8
// if IsOk ( Belkov ) then
12290: LD_EXP 56
12294: PPUSH
12295: CALL_OW 302
12299: IFFALSE 12397
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
12301: LD_EXP 54
12305: PUSH
12306: LD_EXP 56
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
12319: LD_EXP 54
12323: PPUSH
12324: LD_EXP 56
12328: PPUSH
12329: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
12333: LD_EXP 56
12337: PPUSH
12338: LD_EXP 54
12342: PPUSH
12343: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
12347: LD_EXP 56
12351: PPUSH
12352: LD_STRING D24-Bel-1
12354: PPUSH
12355: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12359: LD_EXP 54
12363: PPUSH
12364: LD_STRING D24-Bur-1
12366: PPUSH
12367: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
12371: LD_EXP 56
12375: PPUSH
12376: LD_STRING D24-Bel-2
12378: PPUSH
12379: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12383: LD_EXP 54
12387: PPUSH
12388: LD_STRING D24-Bur-2
12390: PPUSH
12391: CALL_OW 88
// end else
12395: GO 12503
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
12397: LD_EXP 54
12401: PUSH
12402: LD_EXP 60
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PPUSH
12411: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
12415: LD_EXP 54
12419: PPUSH
12420: LD_EXP 60
12424: PPUSH
12425: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
12429: LD_EXP 60
12433: PPUSH
12434: LD_EXP 54
12438: PPUSH
12439: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
12443: LD_EXP 60
12447: PPUSH
12448: LD_STRING D24-Bel-1
12450: PPUSH
12451: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12455: LD_EXP 54
12459: PPUSH
12460: LD_STRING D24-Bur-1
12462: PPUSH
12463: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
12467: LD_EXP 54
12471: PPUSH
12472: LD_STRING D24-Bur-1a
12474: PPUSH
12475: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
12479: LD_EXP 60
12483: PPUSH
12484: LD_STRING D24-Bel-2
12486: PPUSH
12487: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12491: LD_EXP 54
12495: PPUSH
12496: LD_STRING D24-Bur-2
12498: PPUSH
12499: CALL_OW 88
// end ; if captureBelkovVehicle then
12503: LD_EXP 34
12507: IFFALSE 12521
// Say ( Burlak , D24-Bur-2a ) ;
12509: LD_EXP 54
12513: PPUSH
12514: LD_STRING D24-Bur-2a
12516: PPUSH
12517: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
12521: LD_EXP 68
12525: PPUSH
12526: LD_STRING D24-Pla-2
12528: PPUSH
12529: CALL_OW 94
// if leftBunkers then
12533: LD_EXP 74
12537: IFFALSE 12551
// SayRadio ( Platonov , D24-Pla-2a ) ;
12539: LD_EXP 68
12543: PPUSH
12544: LD_STRING D24-Pla-2a
12546: PPUSH
12547: CALL_OW 94
// InGameOff ;
12551: CALL_OW 9
// end ;
12555: END
// every 0 0$1 trigger canExitBase and not IsInArea ( Burlak , BeriaBaseArea ) and raportForPlatonov = - 1 do
12556: LD_EXP 19
12560: PUSH
12561: LD_EXP 54
12565: PPUSH
12566: LD_INT 8
12568: PPUSH
12569: CALL_OW 308
12573: NOT
12574: AND
12575: PUSH
12576: LD_EXP 35
12580: PUSH
12581: LD_INT 1
12583: NEG
12584: EQUAL
12585: AND
12586: IFFALSE 12600
12588: GO 12590
12590: DISABLE
// begin enable ;
12591: ENABLE
// raportForPlatonov = 0 ;
12592: LD_ADDR_EXP 35
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// end ;
12600: END
// every 0 0$1 trigger canExitBase and raportForPlatonov >= 0 and not backToBeria2 do
12601: LD_EXP 19
12605: PUSH
12606: LD_EXP 35
12610: PUSH
12611: LD_INT 0
12613: GREATEREQUAL
12614: AND
12615: PUSH
12616: LD_EXP 16
12620: NOT
12621: AND
12622: IFFALSE 12867
12624: GO 12626
12626: DISABLE
// begin DialogueOn ;
12627: CALL_OW 6
// case raportForPlatonov of 0 :
12631: LD_EXP 35
12635: PUSH
12636: LD_INT 0
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12671
12644: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
12645: LD_EXP 68
12649: PPUSH
12650: LD_STRING D25a-Pla-1
12652: PPUSH
12653: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
12657: LD_EXP 54
12661: PPUSH
12662: LD_STRING D25a-Bur-1
12664: PPUSH
12665: CALL_OW 88
// end ; 1 :
12669: GO 12851
12671: LD_INT 1
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12706
12679: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12680: LD_EXP 68
12684: PPUSH
12685: LD_STRING D25-Pla-1
12687: PPUSH
12688: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
12692: LD_EXP 54
12696: PPUSH
12697: LD_STRING D25-Bur-1
12699: PPUSH
12700: CALL_OW 88
// end ; 2 :
12704: GO 12851
12706: LD_INT 2
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12760
12714: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12715: LD_EXP 68
12719: PPUSH
12720: LD_STRING D25-Pla-1
12722: PPUSH
12723: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
12727: LD_EXP 54
12731: PPUSH
12732: LD_STRING D25-Bur-1a
12734: PPUSH
12735: CALL_OW 88
// if not sawLeftBunker then
12739: LD_EXP 26
12743: NOT
12744: IFFALSE 12758
// Say ( Platonov , D25c-Pla-1 ) ;
12746: LD_EXP 68
12750: PPUSH
12751: LD_STRING D25c-Pla-1
12753: PPUSH
12754: CALL_OW 88
// end ; 3 :
12758: GO 12851
12760: LD_INT 3
12762: DOUBLE
12763: EQUAL
12764: IFTRUE 12768
12766: GO 12850
12768: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12769: LD_EXP 68
12773: PPUSH
12774: LD_STRING D25-Pla-1
12776: PPUSH
12777: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
12781: LD_EXP 54
12785: PPUSH
12786: LD_STRING D25a-Bur-1b
12788: PPUSH
12789: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
12793: LD_EXP 54
12797: PPUSH
12798: LD_STRING D25b-Bur-1
12800: PPUSH
12801: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
12805: LD_EXP 68
12809: PPUSH
12810: LD_STRING D25b-Pla-1
12812: PPUSH
12813: CALL_OW 88
// playerGetSupport = true ;
12817: LD_ADDR_EXP 30
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// PlatonovSendSupport ;
12825: CALL 5575 0 0
// if not sawRightBunker then
12829: LD_EXP 27
12833: NOT
12834: IFFALSE 12848
// Say ( Platonov , D25c-Pla-1 ) ;
12836: LD_EXP 68
12840: PPUSH
12841: LD_STRING D25c-Pla-1
12843: PPUSH
12844: CALL_OW 88
// end ; end ;
12848: GO 12851
12850: POP
// Say ( Platonov , D25c-Pla-1a ) ;
12851: LD_EXP 68
12855: PPUSH
12856: LD_STRING D25c-Pla-1a
12858: PPUSH
12859: CALL_OW 88
// DialogueOff ;
12863: CALL_OW 7
// end ;
12867: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
12868: LD_INT 19
12870: PPUSH
12871: LD_INT 22
12873: PUSH
12874: LD_INT 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: PPUSH
12884: CALL_OW 70
12888: PUSH
12889: LD_INT 0
12891: GREATER
12892: IFFALSE 12912
12894: GO 12896
12896: DISABLE
// begin northMapExplored = true ;
12897: LD_ADDR_EXP 37
12901: PUSH
12902: LD_INT 1
12904: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
12905: LD_STRING M10
12907: PPUSH
12908: CALL_OW 337
// end ;
12912: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
12913: LD_EXP 74
12917: NOT
12918: PUSH
12919: LD_EXP 37
12923: AND
12924: PUSH
12925: LD_EXP 33
12929: PUSH
12930: LD_EXP 32
12934: NOT
12935: OR
12936: AND
12937: IFFALSE 12957
12939: GO 12941
12941: DISABLE
// begin backToBeria2 = true ;
12942: LD_ADDR_EXP 16
12946: PUSH
12947: LD_INT 1
12949: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
12950: LD_STRING M10a
12952: PPUSH
12953: CALL_OW 337
// end ; end_of_file
12957: END
// export function PrepareNature ; var i , un ; begin
12958: LD_INT 0
12960: PPUSH
12961: PPUSH
12962: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12963: LD_ADDR_VAR 0 2
12967: PUSH
12968: DOUBLE
12969: LD_INT 1
12971: DEC
12972: ST_TO_ADDR
12973: LD_EXP 40
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PUSH
12982: FOR_TO
12983: IFFALSE 13093
// begin uc_side = 0 ;
12985: LD_ADDR_OWVAR 20
12989: PUSH
12990: LD_INT 0
12992: ST_TO_ADDR
// uc_nation = nation_nature ;
12993: LD_ADDR_OWVAR 21
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// hc_class = class_apeman ;
13001: LD_ADDR_OWVAR 28
13005: PUSH
13006: LD_INT 12
13008: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13009: LD_ADDR_OWVAR 31
13013: PUSH
13014: LD_EXP 41
13018: PUSH
13019: LD_INT 1
13021: ARRAY
13022: PUSH
13023: LD_EXP 41
13027: PUSH
13028: LD_INT 2
13030: ARRAY
13031: PUSH
13032: LD_EXP 41
13036: PUSH
13037: LD_INT 3
13039: ARRAY
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_INT 4
13048: ARRAY
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13056: LD_ADDR_OWVAR 35
13060: PUSH
13061: LD_EXP 42
13065: ST_TO_ADDR
// un = CreateHuman ;
13066: LD_ADDR_VAR 0 3
13070: PUSH
13071: CALL_OW 44
13075: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13076: LD_VAR 0 3
13080: PPUSH
13081: LD_INT 21
13083: PPUSH
13084: LD_INT 0
13086: PPUSH
13087: CALL_OW 49
// end ;
13091: GO 12982
13093: POP
13094: POP
// for i := 1 to animalsAmount [ 2 ] do
13095: LD_ADDR_VAR 0 2
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_EXP 40
13109: PUSH
13110: LD_INT 2
13112: ARRAY
13113: PUSH
13114: FOR_TO
13115: IFFALSE 13225
// begin uc_side = 0 ;
13117: LD_ADDR_OWVAR 20
13121: PUSH
13122: LD_INT 0
13124: ST_TO_ADDR
// uc_nation = nation_nature ;
13125: LD_ADDR_OWVAR 21
13129: PUSH
13130: LD_INT 0
13132: ST_TO_ADDR
// hc_class = class_phororhacos ;
13133: LD_ADDR_OWVAR 28
13137: PUSH
13138: LD_INT 18
13140: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13141: LD_ADDR_OWVAR 31
13145: PUSH
13146: LD_EXP 41
13150: PUSH
13151: LD_INT 1
13153: ARRAY
13154: PUSH
13155: LD_EXP 41
13159: PUSH
13160: LD_INT 2
13162: ARRAY
13163: PUSH
13164: LD_EXP 41
13168: PUSH
13169: LD_INT 3
13171: ARRAY
13172: PUSH
13173: LD_EXP 41
13177: PUSH
13178: LD_INT 4
13180: ARRAY
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13188: LD_ADDR_OWVAR 35
13192: PUSH
13193: LD_EXP 42
13197: ST_TO_ADDR
// un = CreateHuman ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: CALL_OW 44
13207: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13208: LD_VAR 0 3
13212: PPUSH
13213: LD_INT 21
13215: PPUSH
13216: LD_INT 0
13218: PPUSH
13219: CALL_OW 49
// end ;
13223: GO 13114
13225: POP
13226: POP
// for i := 1 to animalsAmount [ 3 ] do
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_EXP 40
13241: PUSH
13242: LD_INT 3
13244: ARRAY
13245: PUSH
13246: FOR_TO
13247: IFFALSE 13357
// begin uc_side = 0 ;
13249: LD_ADDR_OWVAR 20
13253: PUSH
13254: LD_INT 0
13256: ST_TO_ADDR
// uc_nation = nation_nature ;
13257: LD_ADDR_OWVAR 21
13261: PUSH
13262: LD_INT 0
13264: ST_TO_ADDR
// hc_class = class_tiger ;
13265: LD_ADDR_OWVAR 28
13269: PUSH
13270: LD_INT 14
13272: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13273: LD_ADDR_OWVAR 31
13277: PUSH
13278: LD_EXP 41
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: PUSH
13287: LD_EXP 41
13291: PUSH
13292: LD_INT 2
13294: ARRAY
13295: PUSH
13296: LD_EXP 41
13300: PUSH
13301: LD_INT 3
13303: ARRAY
13304: PUSH
13305: LD_EXP 41
13309: PUSH
13310: LD_INT 4
13312: ARRAY
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13320: LD_ADDR_OWVAR 35
13324: PUSH
13325: LD_EXP 42
13329: ST_TO_ADDR
// un = CreateHuman ;
13330: LD_ADDR_VAR 0 3
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 21
13347: PPUSH
13348: LD_INT 0
13350: PPUSH
13351: CALL_OW 49
// end ;
13355: GO 13246
13357: POP
13358: POP
// for i := 1 to animalsAmount [ 4 ] do
13359: LD_ADDR_VAR 0 2
13363: PUSH
13364: DOUBLE
13365: LD_INT 1
13367: DEC
13368: ST_TO_ADDR
13369: LD_EXP 40
13373: PUSH
13374: LD_INT 4
13376: ARRAY
13377: PUSH
13378: FOR_TO
13379: IFFALSE 13489
// begin uc_side = 0 ;
13381: LD_ADDR_OWVAR 20
13385: PUSH
13386: LD_INT 0
13388: ST_TO_ADDR
// uc_nation = nation_nature ;
13389: LD_ADDR_OWVAR 21
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// hc_class = 21 ;
13397: LD_ADDR_OWVAR 28
13401: PUSH
13402: LD_INT 21
13404: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13405: LD_ADDR_OWVAR 31
13409: PUSH
13410: LD_EXP 41
13414: PUSH
13415: LD_INT 1
13417: ARRAY
13418: PUSH
13419: LD_EXP 41
13423: PUSH
13424: LD_INT 2
13426: ARRAY
13427: PUSH
13428: LD_EXP 41
13432: PUSH
13433: LD_INT 3
13435: ARRAY
13436: PUSH
13437: LD_EXP 41
13441: PUSH
13442: LD_INT 4
13444: ARRAY
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13452: LD_ADDR_OWVAR 35
13456: PUSH
13457: LD_EXP 42
13461: ST_TO_ADDR
// un = CreateHuman ;
13462: LD_ADDR_VAR 0 3
13466: PUSH
13467: CALL_OW 44
13471: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_INT 21
13479: PPUSH
13480: LD_INT 0
13482: PPUSH
13483: CALL_OW 49
// end ;
13487: GO 13378
13489: POP
13490: POP
// end ; end_of_file
13491: LD_VAR 0 1
13495: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
13496: LD_EXP 20
13500: IFFALSE 13729
13502: GO 13504
13504: DISABLE
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
13509: PPUSH
13510: PPUSH
13511: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
13512: LD_ADDR_VAR 0 4
13516: PUSH
13517: LD_INT 22
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 21
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 25
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: PPUSH
13552: CALL_OW 69
13556: ST_TO_ADDR
// wait ( 0 0$40 ) ;
13557: LD_INT 1400
13559: PPUSH
13560: CALL_OW 67
// carryCratesEngs = 0 ;
13564: LD_ADDR_VAR 0 3
13568: PUSH
13569: LD_INT 0
13571: ST_TO_ADDR
// for unit in playerEngs do
13572: LD_ADDR_VAR 0 2
13576: PUSH
13577: LD_VAR 0 4
13581: PUSH
13582: FOR_IN
13583: IFFALSE 13611
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
13585: LD_ADDR_VAR 0 3
13589: PUSH
13590: LD_VAR 0 3
13594: PUSH
13595: LD_VAR 0 2
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 289
13607: PLUS
13608: ST_TO_ADDR
13609: GO 13582
13611: POP
13612: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
13613: LD_INT 106
13615: PPUSH
13616: CALL_OW 274
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 275
13628: PUSH
13629: LD_INT 50
13631: LESS
13632: PUSH
13633: LD_INT 8
13635: PPUSH
13636: LD_INT 1
13638: PPUSH
13639: CALL_OW 287
13643: PUSH
13644: LD_INT 10
13646: MUL
13647: PUSH
13648: LD_INT 106
13650: PPUSH
13651: CALL_OW 274
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: CALL_OW 275
13663: PLUS
13664: PUSH
13665: LD_VAR 0 3
13669: PLUS
13670: PUSH
13671: LD_INT 50
13673: LESS
13674: AND
13675: IFFALSE 13687
// spawnNextCrates = true else
13677: LD_ADDR_VAR 0 5
13681: PUSH
13682: LD_INT 1
13684: ST_TO_ADDR
13685: GO 13695
// spawnNextCrates = false ;
13687: LD_ADDR_VAR 0 5
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// if spawnNextCrates then
13695: LD_VAR 0 5
13699: IFFALSE 13722
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
13701: LD_INT 1
13703: PPUSH
13704: LD_INT 5
13706: PPUSH
13707: CALL_OW 12
13711: PPUSH
13712: LD_INT 8
13714: PPUSH
13715: LD_INT 1
13717: PPUSH
13718: CALL_OW 55
// until not spawnCrates ;
13722: LD_EXP 20
13726: NOT
13727: IFFALSE 13512
// end ; end_of_file
13729: PPOPN 5
13731: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
13732: LD_VAR 0 1
13736: PPUSH
13737: CALL_OW 266
13741: PUSH
13742: LD_INT 6
13744: EQUAL
13745: PUSH
13746: LD_INT 22
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 6
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PPUSH
13770: CALL_OW 69
13774: PUSH
13775: LD_INT 1
13777: GREATER
13778: AND
13779: PUSH
13780: LD_EXP 11
13784: NOT
13785: AND
13786: IFFALSE 13797
// Dial_StopConstructAgainSameBuilding ( building ) ;
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL 7305 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
13797: LD_VAR 0 1
13801: PPUSH
13802: CALL_OW 266
13806: PUSH
13807: LD_INT 2
13809: EQUAL
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_INT 3
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 30
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 69
13839: PUSH
13840: LD_INT 1
13842: GREATER
13843: AND
13844: PUSH
13845: LD_EXP 11
13849: NOT
13850: AND
13851: IFFALSE 13862
// Dial_StopConstructAgainSameBuilding ( building ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: CALL 7305 0 1
// end ;
13862: PPOPN 2
13864: END
// on BuildingComplete ( building ) do var sold , platSold ;
13865: LD_INT 0
13867: PPUSH
13868: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
13869: LD_VAR 0 1
13873: PPUSH
13874: CALL_OW 255
13878: PUSH
13879: LD_INT 3
13881: EQUAL
13882: PUSH
13883: LD_VAR 0 1
13887: PPUSH
13888: CALL_OW 266
13892: PUSH
13893: LD_INT 6
13895: EQUAL
13896: AND
13897: PUSH
13898: LD_EXP 8
13902: NOT
13903: AND
13904: IFFALSE 13910
// Dial_LabConstructed ;
13906: CALL 7155 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 255
13919: PUSH
13920: LD_INT 3
13922: EQUAL
13923: PUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: CALL_OW 266
13933: PUSH
13934: LD_INT 2
13936: EQUAL
13937: AND
13938: PUSH
13939: LD_EXP 9
13943: NOT
13944: AND
13945: IFFALSE 13951
// Dial_WorkshopConstructed ;
13947: CALL 7230 0 0
// if GetSide ( building ) = 6 then
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 255
13960: PUSH
13961: LD_INT 6
13963: EQUAL
13964: IFFALSE 14166
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 266
13975: PUSH
13976: LD_INT 31
13978: EQUAL
13979: PUSH
13980: LD_VAR 0 1
13984: PPUSH
13985: LD_INT 9
13987: PPUSH
13988: CALL_OW 308
13992: AND
13993: IFFALSE 14035
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
13995: LD_ADDR_VAR 0 2
13999: PUSH
14000: LD_INT 209
14002: PPUSH
14003: CALL_OW 313
14007: PUSH
14008: LD_INT 1
14010: ARRAY
14011: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
14021: LD_VAR 0 2
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 266
14044: PUSH
14045: LD_INT 31
14047: EQUAL
14048: PUSH
14049: LD_VAR 0 1
14053: PPUSH
14054: LD_INT 8
14056: PPUSH
14057: CALL_OW 308
14061: AND
14062: IFFALSE 14098
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_EXP 69
14073: PPUSH
14074: LD_VAR 0 1
14078: PPUSH
14079: CALL_OW 74
14083: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 266
14107: PUSH
14108: LD_INT 2
14110: EQUAL
14111: IFFALSE 14166
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
14113: LD_EXP 61
14117: PPUSH
14118: LD_INT 25
14120: PUSH
14121: LD_INT 3
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 72
14132: PPUSH
14133: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
14137: LD_EXP 61
14141: PPUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 72
14156: PPUSH
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 180
// end ; end ; end ;
14166: PPOPN 3
14168: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
14169: LD_VAR 0 1
14173: PUSH
14174: LD_INT 47
14176: EQUAL
14177: PUSH
14178: LD_VAR 0 2
14182: PPUSH
14183: CALL_OW 255
14187: PUSH
14188: LD_INT 3
14190: EQUAL
14191: AND
14192: IFFALSE 14202
// engineResearched = true ;
14194: LD_ADDR_EXP 10
14198: PUSH
14199: LD_INT 1
14201: ST_TO_ADDR
// end ;
14202: PPOPN 2
14204: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
14205: LD_VAR 0 2
14209: PPUSH
14210: CALL_OW 255
14214: PUSH
14215: LD_OWVAR 2
14219: EQUAL
14220: PUSH
14221: LD_VAR 0 2
14225: PPUSH
14226: CALL_OW 302
14230: AND
14231: PUSH
14232: LD_EXP 12
14236: NOT
14237: AND
14238: PUSH
14239: LD_EXP 17
14243: NOT
14244: AND
14245: IFFALSE 14256
// Dial_FirstVehConstructed ( factory ) ;
14247: LD_VAR 0 2
14251: PPUSH
14252: CALL 7653 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
14256: LD_VAR 0 2
14260: PPUSH
14261: CALL_OW 255
14265: PUSH
14266: LD_OWVAR 2
14270: EQUAL
14271: PUSH
14272: LD_VAR 0 2
14276: PPUSH
14277: CALL_OW 302
14281: AND
14282: PUSH
14283: LD_EXP 17
14287: AND
14288: IFFALSE 14304
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
14290: LD_ADDR_EXP 18
14294: PUSH
14295: LD_EXP 18
14299: PUSH
14300: LD_INT 1
14302: PLUS
14303: ST_TO_ADDR
// end ;
14304: PPOPN 2
14306: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase then
14307: LD_EXP 19
14311: NOT
14312: IFFALSE 14328
// Dial_NewCrates ( x , y ) ;
14314: LD_VAR 0 2
14318: PPUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: CALL 7607 0 2
// end ;
14328: PPOPN 5
14330: END
// on Command ( com ) do var i , j , temp , order , destiny ;
14331: LD_INT 0
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14338: LD_ADDR_VAR 0 2
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_INT 3
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: PUSH
14372: FOR_IN
14373: IFFALSE 14566
// if GetTaskList ( i ) > 0 then
14375: LD_VAR 0 2
14379: PPUSH
14380: CALL_OW 437
14384: PUSH
14385: LD_INT 0
14387: GREATER
14388: IFFALSE 14564
// for j = 1 to GetTaskList ( i ) do
14390: LD_ADDR_VAR 0 3
14394: PUSH
14395: DOUBLE
14396: LD_INT 1
14398: DEC
14399: ST_TO_ADDR
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 437
14409: PUSH
14410: FOR_TO
14411: IFFALSE 14562
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
14413: LD_ADDR_VAR 0 4
14417: PUSH
14418: LD_VAR 0 2
14422: PPUSH
14423: CALL_OW 437
14427: PUSH
14428: LD_VAR 0 3
14432: ARRAY
14433: PUSH
14434: LD_INT 4
14436: ARRAY
14437: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
14438: LD_VAR 0 4
14442: PUSH
14443: LD_INT 71
14445: EQUAL
14446: PUSH
14447: LD_VAR 0 4
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 6
14459: EQUAL
14460: PUSH
14461: LD_VAR 0 2
14465: PPUSH
14466: CALL_OW 437
14470: PUSH
14471: LD_VAR 0 3
14475: ARRAY
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PUSH
14481: LD_STRING e
14483: EQUAL
14484: AND
14485: PUSH
14486: LD_VAR 0 4
14490: PPUSH
14491: CALL_OW 247
14495: PUSH
14496: LD_INT 2
14498: EQUAL
14499: AND
14500: OR
14501: IFFALSE 14514
// SetTaskList ( i , [ ] ) ;
14503: LD_VAR 0 2
14507: PPUSH
14508: EMPTY
14509: PPUSH
14510: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
14514: LD_VAR 0 4
14518: PUSH
14519: LD_INT 106
14521: EQUAL
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: CALL_OW 437
14532: PUSH
14533: LD_VAR 0 3
14537: ARRAY
14538: PUSH
14539: LD_INT 1
14541: ARRAY
14542: PUSH
14543: LD_STRING Y
14545: EQUAL
14546: AND
14547: IFFALSE 14560
// SetTaskList ( i , [ ] ) ;
14549: LD_VAR 0 2
14553: PPUSH
14554: EMPTY
14555: PPUSH
14556: CALL_OW 446
// end ;
14560: GO 14410
14562: POP
14563: POP
14564: GO 14372
14566: POP
14567: POP
// end ;
14568: PPOPN 6
14570: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14571: LD_VAR 0 1
14575: PPUSH
14576: CALL_OW 255
14580: PUSH
14581: LD_INT 1
14583: EQUAL
14584: PUSH
14585: LD_VAR 0 1
14589: PPUSH
14590: CALL_OW 247
14594: PUSH
14595: LD_INT 1
14597: EQUAL
14598: AND
14599: IFFALSE 14685
// begin if unit in trapTeam then
14601: LD_VAR 0 1
14605: PUSH
14606: LD_EXP 73
14610: IN
14611: IFFALSE 14629
// trapTeam = trapTeam diff unit ;
14613: LD_ADDR_EXP 73
14617: PUSH
14618: LD_EXP 73
14622: PUSH
14623: LD_VAR 0 1
14627: DIFF
14628: ST_TO_ADDR
// if unit in amLeftEngs then
14629: LD_VAR 0 1
14633: PUSH
14634: LD_EXP 78
14638: IN
14639: IFFALSE 14657
// amLeftEngs = amLeftEngs diff unit ;
14641: LD_ADDR_EXP 78
14645: PUSH
14646: LD_EXP 78
14650: PUSH
14651: LD_VAR 0 1
14655: DIFF
14656: ST_TO_ADDR
// if unit in amRightEngs then
14657: LD_VAR 0 1
14661: PUSH
14662: LD_EXP 79
14666: IN
14667: IFFALSE 14685
// amRightEngs = amRightEngs diff unit ;
14669: LD_ADDR_EXP 79
14673: PUSH
14674: LD_EXP 79
14678: PUSH
14679: LD_VAR 0 1
14683: DIFF
14684: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 255
14694: PUSH
14695: LD_INT 6
14697: EQUAL
14698: PUSH
14699: LD_VAR 0 1
14703: PPUSH
14704: CALL_OW 247
14708: PUSH
14709: LD_INT 1
14711: EQUAL
14712: AND
14713: IFFALSE 14743
// if unit in belkovTeam then
14715: LD_VAR 0 1
14719: PUSH
14720: LD_EXP 65
14724: IN
14725: IFFALSE 14743
// belkovTeam = belkovTeam diff unit ;
14727: LD_ADDR_EXP 65
14731: PUSH
14732: LD_EXP 65
14736: PUSH
14737: LD_VAR 0 1
14741: DIFF
14742: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 3
14755: EQUAL
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 247
14766: PUSH
14767: LD_INT 1
14769: EQUAL
14770: AND
14771: IFFALSE 14787
// lostComradesCounter = lostComradesCounter + 1 ;
14773: LD_ADDR_EXP 39
14777: PUSH
14778: LD_EXP 39
14782: PUSH
14783: LD_INT 1
14785: PLUS
14786: ST_TO_ADDR
// if unit = Burlak then
14787: LD_VAR 0 1
14791: PUSH
14792: LD_EXP 54
14796: EQUAL
14797: IFFALSE 14803
// BurlakIsDead ;
14799: CALL 15910 0 0
// if unit in platSoldiers then
14803: LD_VAR 0 1
14807: PUSH
14808: LD_EXP 69
14812: IN
14813: IFFALSE 14831
// platSoldiers = platSoldiers diff unit ;
14815: LD_ADDR_EXP 69
14819: PUSH
14820: LD_EXP 69
14824: PUSH
14825: LD_VAR 0 1
14829: DIFF
14830: ST_TO_ADDR
// end ;
14831: PPOPN 1
14833: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 255
14843: PUSH
14844: LD_INT 1
14846: EQUAL
14847: PUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 247
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: AND
14862: IFFALSE 14920
// begin if unit in leftBunkers then
14864: LD_VAR 0 1
14868: PUSH
14869: LD_EXP 74
14873: IN
14874: IFFALSE 14892
// leftBunkers = leftBunkers diff unit ;
14876: LD_ADDR_EXP 74
14880: PUSH
14881: LD_EXP 74
14885: PUSH
14886: LD_VAR 0 1
14890: DIFF
14891: ST_TO_ADDR
// if unit in rightBunkers then
14892: LD_VAR 0 1
14896: PUSH
14897: LD_EXP 75
14901: IN
14902: IFFALSE 14920
// rightBunkers = rightBunkers diff unit ;
14904: LD_ADDR_EXP 75
14908: PUSH
14909: LD_EXP 75
14913: PUSH
14914: LD_VAR 0 1
14918: DIFF
14919: ST_TO_ADDR
// end ; end ;
14920: PPOPN 1
14922: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
14923: LD_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: IFFALSE 14941
// captureBelkovVehicle = true ;
14933: LD_ADDR_EXP 34
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// end ;
14941: PPOPN 4
14943: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
14944: LD_VAR 0 1
14948: PUSH
14949: LD_INT 3
14951: EQUAL
14952: PUSH
14953: LD_VAR 0 2
14957: PUSH
14958: LD_INT 6
14960: EQUAL
14961: AND
14962: IFFALSE 14968
// AttackComrades ;
14964: CALL 15925 0 0
// end ; end_of_file
14968: PPOPN 2
14970: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14971: LD_EXP 16
14975: PUSH
14976: LD_INT 8
14978: PPUSH
14979: LD_INT 22
14981: PUSH
14982: LD_INT 3
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 71
15007: PUSH
15008: LD_INT 0
15010: EQUAL
15011: AND
15012: IFFALSE 15078
15014: GO 15016
15016: DISABLE
// begin enable ;
15017: ENABLE
// if not saveBelkovObjective then
15018: LD_EXP 32
15022: NOT
15023: IFFALSE 15068
// begin case Query ( QContMission ) of 1 :
15025: LD_STRING QContMission
15027: PPUSH
15028: CALL_OW 97
15032: PUSH
15033: LD_INT 1
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15048
15041: POP
// begin FinishMission ;
15042: CALL 15079 0 0
// end ; 2 :
15046: GO 15068
15048: LD_INT 2
15050: DOUBLE
15051: EQUAL
15052: IFTRUE 15056
15054: GO 15067
15056: POP
// begin saveBelkovObjective = true ;
15057: LD_ADDR_EXP 32
15061: PUSH
15062: LD_INT 1
15064: ST_TO_ADDR
// end ; end ;
15065: GO 15068
15067: POP
// end ; if belkovSaved then
15068: LD_EXP 33
15072: IFFALSE 15078
// FinishMission ;
15074: CALL 15079 0 0
// end ;
15078: END
// function FinishMission ; begin
15079: LD_INT 0
15081: PPUSH
// SetRewards ;
15082: CALL 15103 0 0
// SavePlayerCharacters ;
15086: CALL 15393 0 0
// SaveGlobalVariables ;
15090: CALL 15597 0 0
// YouWin ;
15094: CALL_OW 103
// end ;
15098: LD_VAR 0 1
15102: RET
// function SetRewards ; begin
15103: LD_INT 0
15105: PPUSH
// case initiative of 1 :
15106: LD_EXP 38
15110: PUSH
15111: LD_INT 1
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15132
15119: POP
// AddMedal ( Initiative , 1 ) ; 2 :
15120: LD_STRING Initiative
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 101
15130: GO 15177
15132: LD_INT 2
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15154
15140: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
15141: LD_STRING Initiative
15143: PPUSH
15144: LD_INT 2
15146: NEG
15147: PPUSH
15148: CALL_OW 101
15152: GO 15177
15154: LD_INT 3
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15176
15162: POP
// AddMedal ( Initiative , - 1 ) ; end ;
15163: LD_STRING Initiative
15165: PPUSH
15166: LD_INT 1
15168: NEG
15169: PPUSH
15170: CALL_OW 101
15174: GO 15177
15176: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
15177: LD_EXP 33
15181: PUSH
15182: LD_EXP 56
15186: PPUSH
15187: CALL_OW 302
15191: PUSH
15192: LD_EXP 60
15196: PPUSH
15197: CALL_OW 302
15201: OR
15202: AND
15203: IFFALSE 15215
// AddMedal ( Belkov , 1 ) ;
15205: LD_STRING Belkov
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
15215: LD_EXP 33
15219: NOT
15220: PUSH
15221: LD_EXP 32
15225: NOT
15226: AND
15227: IFFALSE 15240
// AddMedal ( Belkov , - 1 ) ;
15229: LD_STRING Belkov
15231: PPUSH
15232: LD_INT 1
15234: NEG
15235: PPUSH
15236: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
15240: LD_EXP 33
15244: NOT
15245: PUSH
15246: LD_EXP 32
15250: AND
15251: IFFALSE 15264
// AddMedal ( Belkov , - 2 ) ;
15253: LD_STRING Belkov
15255: PPUSH
15256: LD_INT 2
15258: NEG
15259: PPUSH
15260: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
15264: LD_EXP 33
15268: PUSH
15269: LD_EXP 6
15273: PUSH
15274: LD_EXP 56
15278: PPUSH
15279: CALL_OW 301
15283: AND
15284: AND
15285: PUSH
15286: LD_EXP 6
15290: NOT
15291: PUSH
15292: LD_EXP 60
15296: PPUSH
15297: CALL_OW 301
15301: AND
15302: OR
15303: IFFALSE 15316
// AddMedal ( Belkov , - 2 ) ;
15305: LD_STRING Belkov
15307: PPUSH
15308: LD_INT 2
15310: NEG
15311: PPUSH
15312: CALL_OW 101
// if lostComradesCounter = 0 then
15316: LD_EXP 39
15320: PUSH
15321: LD_INT 0
15323: EQUAL
15324: IFFALSE 15338
// AddMedal ( NoLosses , 1 ) else
15326: LD_STRING NoLosses
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 101
15336: GO 15348
// AddMedal ( NoLosses , 0 ) ;
15338: LD_STRING NoLosses
15340: PPUSH
15341: LD_INT 0
15343: PPUSH
15344: CALL_OW 101
// GiveMedals ( Main ) ;
15348: LD_STRING Main
15350: PPUSH
15351: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
15355: LD_INT 22
15357: PUSH
15358: LD_INT 3
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 21
15367: PUSH
15368: LD_INT 1
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 69
15383: PPUSH
15384: CALL_OW 43
// end ;
15388: LD_VAR 0 1
15392: RET
// function SavePlayerCharacters ; var othersYour ; begin
15393: LD_INT 0
15395: PPUSH
15396: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
15397: LD_EXP 54
15401: PPUSH
15402: LD_STRING Burlak
15404: PPUSH
15405: LD_INT 3
15407: PPUSH
15408: CALL 3697 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
15412: LD_EXP 55
15416: PPUSH
15417: LD_STRING Gnyevko
15419: PPUSH
15420: LD_INT 3
15422: PPUSH
15423: CALL 3697 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
15427: LD_EXP 62
15431: PPUSH
15432: LD_STRING Kovalyuk
15434: PPUSH
15435: LD_INT 3
15437: PPUSH
15438: CALL 3697 0 3
// if belkovReturn then
15442: LD_EXP 6
15446: IFFALSE 15465
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
15448: LD_EXP 56
15452: PPUSH
15453: LD_STRING Belkov
15455: PPUSH
15456: LD_INT 3
15458: PPUSH
15459: CALL 3697 0 3
15463: GO 15480
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
15465: LD_EXP 60
15469: PPUSH
15470: LD_STRING Belkov2
15472: PPUSH
15473: LD_INT 3
15475: PPUSH
15476: CALL 3697 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk ] ;
15480: LD_ADDR_VAR 0 2
15484: PUSH
15485: LD_INT 22
15487: PUSH
15488: LD_INT 3
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 21
15497: PUSH
15498: LD_INT 1
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PPUSH
15509: CALL_OW 69
15513: PUSH
15514: LD_EXP 54
15518: PUSH
15519: LD_EXP 55
15523: PUSH
15524: LD_EXP 56
15528: PUSH
15529: LD_EXP 60
15533: PUSH
15534: LD_EXP 62
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: DIFF
15546: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
15547: LD_VAR 0 2
15551: PPUSH
15552: LD_STRING other_survivors
15554: PPUSH
15555: LD_INT 3
15557: PPUSH
15558: CALL 3753 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
15562: LD_EXP 69
15566: PPUSH
15567: LD_STRING other_beria
15569: PPUSH
15570: LD_INT 6
15572: PPUSH
15573: CALL 3753 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
15577: LD_EXP 61
15581: PPUSH
15582: LD_STRING other_kirov
15584: PPUSH
15585: LD_INT 6
15587: PPUSH
15588: CALL 3753 0 3
// end ;
15592: LD_VAR 0 1
15596: RET
// function SaveGlobalVariables ; var vehicles ; begin
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 22
15608: PUSH
15609: LD_INT 3
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 21
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 50
15628: PUSH
15629: EMPTY
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 69
15641: ST_TO_ADDR
// if vehicles then
15642: LD_VAR 0 2
15646: IFFALSE 15660
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
15648: LD_VAR 0 2
15652: PPUSH
15653: LD_STRING 02_Vehicles_1
15655: PPUSH
15656: CALL 4657 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
15660: LD_INT 8
15662: PPUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 3
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: PPUSH
15676: CALL_OW 70
15680: PPUSH
15681: LD_STRING 02_BeriaBase_2
15683: PPUSH
15684: CALL 4800 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
15688: LD_INT 9
15690: PPUSH
15691: LD_INT 22
15693: PUSH
15694: LD_INT 6
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 21
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 70
15719: PPUSH
15720: LD_STRING 02_KirovBase_3
15722: PPUSH
15723: CALL 4800 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_PlayerAmericanBuildings_4 ) ;
15727: LD_INT 22
15729: PUSH
15730: LD_INT 3
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 21
15739: PUSH
15740: LD_INT 3
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 50
15749: PUSH
15750: EMPTY
15751: LIST
15752: PUSH
15753: LD_INT 23
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PPUSH
15774: LD_STRING 02_PlayerAmericanBuildings_4
15776: PPUSH
15777: CALL 4800 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
15781: LD_INT 22
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 21
15793: PUSH
15794: LD_INT 3
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 50
15803: PUSH
15804: EMPTY
15805: LIST
15806: PUSH
15807: LD_INT 23
15809: PUSH
15810: LD_INT 1
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: PPUSH
15823: CALL_OW 69
15827: PPUSH
15828: LD_STRING 02_AmericanBuildings_5
15830: PPUSH
15831: CALL 4800 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
15835: LD_EXP 4
15839: PPUSH
15840: LD_STRING 02_MeetBelkovBrother_6
15842: PPUSH
15843: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
15847: LD_INT 106
15849: PPUSH
15850: CALL_OW 274
15854: PPUSH
15855: LD_INT 1
15857: PPUSH
15858: CALL_OW 275
15862: PPUSH
15863: LD_STRING 02_BeriaResourceCrates_7
15865: PPUSH
15866: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
15870: LD_INT 106
15872: PPUSH
15873: CALL_OW 274
15877: PPUSH
15878: LD_INT 2
15880: PPUSH
15881: CALL_OW 275
15885: PPUSH
15886: LD_STRING 02_BeriaResourceOil_8
15888: PPUSH
15889: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
15893: LD_EXP 5
15897: PPUSH
15898: LD_STRING 02_PlatonovOpinion_9
15900: PPUSH
15901: CALL_OW 39
// end ; end_of_file
15905: LD_VAR 0 1
15909: RET
// export function BurlakIsDead ; begin
15910: LD_INT 0
15912: PPUSH
// YouLost ( Burlak ) ;
15913: LD_STRING Burlak
15915: PPUSH
15916: CALL_OW 104
// end ;
15920: LD_VAR 0 1
15924: RET
// export function AttackComrades ; begin
15925: LD_INT 0
15927: PPUSH
// YouLost ( SelfAttack ) ;
15928: LD_STRING SelfAttack
15930: PPUSH
15931: CALL_OW 104
// end ; end_of_file
15935: LD_VAR 0 1
15939: RET
// every 0 0$1 do var engs ;
15940: GO 15942
15942: DISABLE
15943: LD_INT 0
15945: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
15946: LD_ADDR_VAR 0 1
15950: PUSH
15951: LD_EXP 61
15955: PPUSH
15956: LD_INT 25
15958: PUSH
15959: LD_INT 2
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PPUSH
15966: CALL_OW 72
15970: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
15971: LD_VAR 0 1
15975: PPUSH
15976: CALL_OW 122
// wait ( 0 0$1 ) ;
15980: LD_INT 35
15982: PPUSH
15983: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 144 , 96 , 1 ) ;
15987: LD_VAR 0 1
15991: PPUSH
15992: LD_INT 31
15994: PPUSH
15995: LD_INT 144
15997: PPUSH
15998: LD_INT 96
16000: PPUSH
16001: LD_INT 1
16003: PPUSH
16004: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
16008: LD_VAR 0 1
16012: PPUSH
16013: LD_INT 31
16015: PPUSH
16016: LD_INT 146
16018: PPUSH
16019: LD_INT 107
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 180 , 118 , 5 ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: LD_INT 31
16036: PPUSH
16037: LD_INT 180
16039: PPUSH
16040: LD_INT 118
16042: PPUSH
16043: LD_INT 5
16045: PPUSH
16046: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
16050: LD_VAR 0 1
16054: PPUSH
16055: LD_INT 31
16057: PPUSH
16058: LD_INT 176
16060: PPUSH
16061: LD_INT 123
16063: PPUSH
16064: LD_INT 5
16066: PPUSH
16067: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
16071: LD_VAR 0 1
16075: PPUSH
16076: LD_INT 31
16078: PPUSH
16079: LD_INT 170
16081: PPUSH
16082: LD_INT 102
16084: PPUSH
16085: LD_INT 4
16087: PPUSH
16088: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 31
16099: PPUSH
16100: LD_INT 173
16102: PPUSH
16103: LD_INT 105
16105: PPUSH
16106: LD_INT 4
16108: PPUSH
16109: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
16113: LD_VAR 0 1
16117: PPUSH
16118: LD_INT 71
16120: PPUSH
16121: CALL_OW 180
// end ;
16125: PPOPN 1
16127: END
// every 0 0$1 trigger activateAMAI do
16128: LD_EXP 25
16132: IFFALSE 16156
16134: GO 16136
16136: DISABLE
// begin enable ;
16137: ENABLE
// RepairDamageLeftBunkers ;
16138: CALL 16157 0 0
// if Difficulty = 3 then
16142: LD_OWVAR 67
16146: PUSH
16147: LD_INT 3
16149: EQUAL
16150: IFFALSE 16156
// RepairDamageRightBunkers ;
16152: CALL 16296 0 0
// end ;
16156: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
16161: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_ok ] ] ] ) = 0 then
16162: LD_EXP 78
16166: NOT
16167: PUSH
16168: LD_INT 17
16170: PPUSH
16171: LD_INT 22
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 21
16183: PUSH
16184: LD_INT 3
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 50
16196: PUSH
16197: EMPTY
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 70
16213: PUSH
16214: LD_INT 0
16216: EQUAL
16217: OR
16218: IFFALSE 16222
// exit ;
16220: GO 16291
// ComExitBuilding ( amLeftEngs ) ;
16222: LD_EXP 78
16226: PPUSH
16227: CALL_OW 122
// for bunker in leftBunkers do
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_EXP 74
16240: PUSH
16241: FOR_IN
16242: IFFALSE 16275
// if GetLives ( bunker ) < 1000 then
16244: LD_VAR 0 3
16248: PPUSH
16249: CALL_OW 256
16253: PUSH
16254: LD_INT 1000
16256: LESS
16257: IFFALSE 16273
// AddComRepairBuilding ( amLeftEngs , bunker ) ;
16259: LD_EXP 78
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: CALL_OW 190
16273: GO 16241
16275: POP
16276: POP
// AddComEnterUnit ( amLeftEngs , amLeftDepot ) ;
16277: LD_EXP 78
16281: PPUSH
16282: LD_EXP 76
16286: PPUSH
16287: CALL_OW 180
// end ;
16291: LD_VAR 0 1
16295: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
16296: LD_INT 0
16298: PPUSH
16299: PPUSH
16300: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_ok ] ] ] ) = 0 then
16301: LD_EXP 79
16305: NOT
16306: PUSH
16307: LD_INT 16
16309: PPUSH
16310: LD_INT 22
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 21
16322: PUSH
16323: LD_INT 3
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: LD_INT 50
16335: PUSH
16336: EMPTY
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 70
16352: PUSH
16353: LD_INT 0
16355: EQUAL
16356: OR
16357: IFFALSE 16361
// exit ;
16359: GO 16430
// ComExitBuilding ( amRightEngs ) ;
16361: LD_EXP 79
16365: PPUSH
16366: CALL_OW 122
// for bunker in rightBunkers do
16370: LD_ADDR_VAR 0 3
16374: PUSH
16375: LD_EXP 75
16379: PUSH
16380: FOR_IN
16381: IFFALSE 16414
// if GetLives ( bunker ) < 1000 then
16383: LD_VAR 0 3
16387: PPUSH
16388: CALL_OW 256
16392: PUSH
16393: LD_INT 1000
16395: LESS
16396: IFFALSE 16412
// AddComRepairBuilding ( amRightEngs , bunker ) ;
16398: LD_EXP 79
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: CALL_OW 190
16412: GO 16380
16414: POP
16415: POP
// AddComEnterUnit ( amRightEngs , amRightDepot ) ;
16416: LD_EXP 79
16420: PPUSH
16421: LD_EXP 77
16425: PPUSH
16426: CALL_OW 180
// end ; end_of_file
16430: LD_VAR 0 1
16434: RET
