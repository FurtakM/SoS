// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51084 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5835 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57547 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57547 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16927 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16927 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16927 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16927 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1665
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1665
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 54793 0 1
// for i in 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 2
1509: PUSH
1510: FOR_IN
1511: IFFALSE 1554
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 71
1520: PPUSH
1521: LD_INT 2
1523: PPUSH
1524: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1528: LD_VAR 0 1
1532: PPUSH
1533: LD_INT 121
1535: PPUSH
1536: LD_INT 111
1538: PPUSH
1539: CALL_OW 171
// AddComUnload ( tmp ) ;
1543: LD_VAR 0 1
1547: PPUSH
1548: CALL_OW 219
// end ;
1552: GO 1510
1554: POP
1555: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1556: LD_VAR 0 1
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 113
1566: PPUSH
1567: LD_INT 113
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1577: LD_INT 83
1579: PPUSH
1580: LD_INT 46
1582: PPUSH
1583: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1587: LD_INT 83
1589: PPUSH
1590: LD_INT 47
1592: PPUSH
1593: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1597: LD_INT 83
1599: PPUSH
1600: LD_INT 48
1602: PPUSH
1603: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_INT 26
1614: PPUSH
1615: LD_INT 116
1617: PPUSH
1618: LD_INT 98
1620: PPUSH
1621: LD_INT 0
1623: PPUSH
1624: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1628: LD_INT 35
1630: PPUSH
1631: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 60
1642: PUSH
1643: EMPTY
1644: LIST
1645: PPUSH
1646: CALL_OW 72
1650: NOT
1651: IFFALSE 1628
// ComEnterUnit ( tmp , kirov ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 71
1660: PPUSH
1661: CALL_OW 120
// end ;
1665: PPOPN 2
1667: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1668: LD_INT 0
1670: PPUSH
1671: PPUSH
1672: PPUSH
1673: PPUSH
1674: PPUSH
1675: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1676: LD_ADDR_VAR 0 3
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 6
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 21
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// if not belkovTank then
1710: LD_VAR 0 3
1714: NOT
1715: IFFALSE 1808
// begin uc_side := 6 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 6
1724: ST_TO_ADDR
// uc_nation := 3 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 3
1732: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1733: LD_INT 21
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: LD_INT 42
1744: PPUSH
1745: LD_INT 100
1747: PPUSH
1748: CALL 21942 0 5
// belkovTank := CreateVehicle ;
1752: LD_ADDR_VAR 0 3
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1762: LD_VAR 0 3
1766: PPUSH
1767: LD_INT 5
1769: PPUSH
1770: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 127
1781: PPUSH
1782: LD_INT 118
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1792: LD_EXP 36
1796: PPUSH
1797: LD_VAR 0 3
1801: PPUSH
1802: CALL_OW 120
// end else
1806: GO 1822
// begin belkovTank := belkovTank [ 1 ] ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_VAR 0 3
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1822: LD_VAR 0 3
1826: PPUSH
1827: LD_INT 71
1829: PPUSH
1830: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 71
1841: PPUSH
1842: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1846: LD_VAR 0 3
1850: PPUSH
1851: CALL_OW 256
1855: PUSH
1856: LD_INT 1000
1858: LESS
1859: IFFALSE 1972
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: LD_EXP 43
1870: PPUSH
1871: LD_INT 25
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PPUSH
1881: CALL_OW 72
1885: ST_TO_ADDR
// if not mech then
1886: LD_VAR 0 4
1890: NOT
1891: IFFALSE 1907
// SetLives ( belkovTank , 1000 ) else
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_INT 1000
1900: PPUSH
1901: CALL_OW 234
1905: GO 1972
// begin ComExit ( mech ) ;
1907: LD_VAR 0 4
1911: PPUSH
1912: CALL 54793 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 6
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1972: LD_INT 70
1974: PPUSH
1975: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1979: LD_VAR 0 3
1983: PPUSH
1984: CALL_OW 256
1988: PUSH
1989: LD_INT 1000
1991: EQUAL
1992: IFFALSE 1972
// if mech then
1994: LD_VAR 0 4
1998: IFFALSE 2042
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2000: LD_VAR 0 4
2004: PPUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 6
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 2
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2042: LD_EXP 36
2046: PPUSH
2047: LD_INT 107
2049: PPUSH
2050: LD_INT 104
2052: PPUSH
2053: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2057: LD_EXP 36
2061: PPUSH
2062: LD_INT 95
2064: PPUSH
2065: LD_INT 101
2067: PPUSH
2068: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2072: LD_EXP 36
2076: PPUSH
2077: LD_INT 89
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 171
// wait ( 0 0$2 ) ;
2087: LD_INT 70
2089: PPUSH
2090: CALL_OW 67
// for i in belkovTeam do
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_EXP 45
2103: PUSH
2104: FOR_IN
2105: IFFALSE 2133
// begin ComExit ( i ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL 54793 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 89
2123: PPUSH
2124: LD_INT 100
2126: PPUSH
2127: CALL_OW 171
// end ;
2131: GO 2104
2133: POP
2134: POP
// tmp := Belkov union belkovTeam ;
2135: LD_ADDR_VAR 0 5
2139: PUSH
2140: LD_EXP 36
2144: PUSH
2145: LD_EXP 45
2149: UNION
2150: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2151: LD_INT 35
2153: PPUSH
2154: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2158: LD_VAR 0 5
2162: PPUSH
2163: LD_INT 60
2165: PUSH
2166: EMPTY
2167: LIST
2168: PPUSH
2169: CALL_OW 72
2173: NOT
2174: IFFALSE 2151
// ComMoveXY ( tmp , 71 , 65 ) ;
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_INT 71
2183: PPUSH
2184: LD_INT 65
2186: PPUSH
2187: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2191: LD_VAR 0 5
2195: PPUSH
2196: LD_INT 61
2198: PPUSH
2199: LD_INT 37
2201: PPUSH
2202: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2206: LD_VAR 0 5
2210: PPUSH
2211: LD_INT 67
2213: PPUSH
2214: LD_INT 17
2216: PPUSH
2217: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 70
2228: PPUSH
2229: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2233: LD_EXP 36
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 8
2243: PPUSH
2244: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2248: LD_EXP 36
2252: PPUSH
2253: LD_INT 105
2255: PPUSH
2256: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2260: LD_EXP 36
2264: PPUSH
2265: LD_INT 86
2267: PPUSH
2268: LD_INT 37
2270: PPUSH
2271: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2275: LD_EXP 36
2279: PPUSH
2280: LD_INT 105
2282: PPUSH
2283: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2287: LD_VAR 0 5
2291: PPUSH
2292: LD_INT 88
2294: PPUSH
2295: LD_INT 29
2297: PPUSH
2298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// for i in tmp do
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 5
2318: PUSH
2319: FOR_IN
2320: IFFALSE 2351
// if not HasTask ( i ) then
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 314
2331: NOT
2332: IFFALSE 2349
// AddComMoveXY ( tmp , 88 , 29 ) ;
2334: LD_VAR 0 5
2338: PPUSH
2339: LD_INT 88
2341: PPUSH
2342: LD_INT 29
2344: PPUSH
2345: CALL_OW 171
2349: GO 2319
2351: POP
2352: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2353: LD_VAR 0 5
2357: PPUSH
2358: LD_INT 95
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 72
2372: IFFALSE 2466
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2374: LD_ADDR_VAR 0 2
2378: PUSH
2379: LD_VAR 0 5
2383: PPUSH
2384: LD_INT 95
2386: PUSH
2387: LD_INT 6
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 72
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2464
// begin if i = Belkov then
2402: LD_VAR 0 2
2406: PUSH
2407: LD_EXP 36
2411: EQUAL
2412: IFFALSE 2453
// begin belkovTank := IsInUnit ( Belkov ) ;
2414: LD_ADDR_VAR 0 3
2418: PUSH
2419: LD_EXP 36
2423: PPUSH
2424: CALL_OW 310
2428: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2429: LD_ADDR_VAR 0 6
2433: PUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: CALL_OW 261
2443: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2444: LD_VAR 0 3
2448: PPUSH
2449: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL_OW 64
// end ;
2462: GO 2399
2464: POP
2465: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_INT 52
2473: PUSH
2474: EMPTY
2475: LIST
2476: PPUSH
2477: CALL_OW 72
2481: NOT
2482: IFFALSE 2302
// wait ( 1 1$20 ) ;
2484: LD_INT 2800
2486: PPUSH
2487: CALL_OW 67
// if fuel < 50 then
2491: LD_VAR 0 6
2495: PUSH
2496: LD_INT 50
2498: LESS
2499: IFFALSE 2509
// fuel := 50 ;
2501: LD_ADDR_VAR 0 6
2505: PUSH
2506: LD_INT 50
2508: ST_TO_ADDR
// uc_side := 6 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 6
2516: ST_TO_ADDR
// uc_nation := 3 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 3
2524: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2525: LD_INT 21
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_INT 42
2536: PPUSH
2537: LD_VAR 0 6
2541: PUSH
2542: LD_INT 5
2544: MINUS
2545: PPUSH
2546: CALL 21942 0 5
// belkovTank := CreateVehicle ;
2550: LD_ADDR_VAR 0 3
2554: PUSH
2555: CALL_OW 45
2559: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2560: LD_VAR 0 3
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 60
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2590: LD_EXP 36
2594: PPUSH
2595: LD_VAR 0 3
2599: PPUSH
2600: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2604: LD_EXP 36
2608: PPUSH
2609: LD_INT 72
2611: PPUSH
2612: LD_INT 26
2614: PPUSH
2615: CALL_OW 111
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// for i in belkovTeam do
2626: LD_ADDR_VAR 0 2
2630: PUSH
2631: LD_EXP 45
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: LD_INT 60
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2657: LD_VAR 0 2
2661: PPUSH
2662: LD_INT 65
2664: PPUSH
2665: LD_INT 18
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2672: LD_INT 28
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2636
2681: POP
2682: POP
// repeat wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2690: LD_EXP 14
2694: PUSH
2695: LD_EXP 45
2699: PPUSH
2700: LD_INT 60
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: NOT
2711: AND
2712: IFFALSE 2683
// americanTrap := true ;
2714: LD_ADDR_EXP 17
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// end ;
2722: LD_VAR 0 1
2726: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2727: LD_EXP 4
2731: PUSH
2732: LD_EXP 40
2736: PPUSH
2737: CALL_OW 302
2741: AND
2742: IFFALSE 3062
2744: GO 2746
2746: DISABLE
2747: LD_INT 0
2749: PPUSH
2750: PPUSH
2751: PPUSH
2752: PPUSH
// begin enable ;
2753: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2754: LD_EXP 8
2758: PUSH
2759: LD_INT 0
2761: GREATER
2762: PUSH
2763: LD_EXP 40
2767: PPUSH
2768: CALL_OW 314
2772: NOT
2773: AND
2774: IFFALSE 2943
// begin dir := rand ( 0 , 5 ) ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_INT 0
2783: PPUSH
2784: LD_INT 5
2786: PPUSH
2787: CALL_OW 12
2791: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2792: LD_ADDR_VAR 0 1
2796: PUSH
2797: LD_EXP 40
2801: PPUSH
2802: CALL_OW 250
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 5
2814: PPUSH
2815: CALL_OW 272
2819: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_EXP 40
2829: PPUSH
2830: CALL_OW 251
2834: PPUSH
2835: LD_VAR 0 4
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 273
2847: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2848: LD_VAR 0 1
2852: PPUSH
2853: LD_VAR 0 2
2857: PPUSH
2858: CALL_OW 488
2862: PUSH
2863: LD_INT 106
2865: PPUSH
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 297
2880: PUSH
2881: LD_INT 26
2883: LESS
2884: AND
2885: IFFALSE 2908
// AddComMoveXY ( Platonov , x , y ) else
2887: LD_EXP 40
2891: PPUSH
2892: LD_VAR 0 1
2896: PPUSH
2897: LD_VAR 0 2
2901: PPUSH
2902: CALL_OW 171
2906: GO 2923
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2908: LD_EXP 40
2912: PPUSH
2913: LD_INT 64
2915: PPUSH
2916: LD_INT 96
2918: PPUSH
2919: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2923: LD_EXP 40
2927: PPUSH
2928: LD_INT 105
2930: PPUSH
2931: LD_INT 315
2933: PPUSH
2934: CALL_OW 12
2938: PPUSH
2939: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2943: LD_EXP 8
2947: PUSH
2948: LD_INT 0
2950: LESSEQUAL
2951: IFFALSE 2997
// begin if not IsAt ( Platonov , 64 , 96 ) then
2953: LD_EXP 40
2957: PPUSH
2958: LD_INT 64
2960: PPUSH
2961: LD_INT 96
2963: PPUSH
2964: CALL_OW 307
2968: NOT
2969: IFFALSE 2995
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2971: LD_EXP 40
2975: PPUSH
2976: LD_INT 64
2978: PPUSH
2979: LD_INT 96
2981: PPUSH
2982: CALL_OW 111
// AddComHold ( Platonov ) ;
2986: LD_EXP 40
2990: PPUSH
2991: CALL_OW 200
// end ; end else
2995: GO 3062
// if tick mod 0 0$75 = 0 0$00 then
2997: LD_OWVAR 1
3001: PUSH
3002: LD_INT 2625
3004: MOD
3005: PUSH
3006: LD_INT 0
3008: EQUAL
3009: IFFALSE 3062
// begin amount := rand ( 2 , 5 ) ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: LD_INT 2
3018: PPUSH
3019: LD_INT 5
3021: PPUSH
3022: CALL_OW 12
3026: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3027: LD_ADDR_EXP 8
3031: PUSH
3032: LD_EXP 8
3036: PUSH
3037: LD_VAR 0 3
3041: PUSH
3042: LD_INT 10
3044: MUL
3045: MINUS
3046: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_INT 5
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL_OW 55
// end ; end ;
3062: PPOPN 4
3064: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3065: LD_INT 106
3067: PPUSH
3068: CALL_OW 274
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 275
3080: PUSH
3081: LD_INT 30
3083: LESS
3084: IFFALSE 3294
3086: GO 3088
3088: DISABLE
3089: LD_INT 0
3091: PPUSH
3092: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3093: LD_ADDR_VAR 0 2
3097: PUSH
3098: LD_EXP 43
3102: PPUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 60
3108: PUSH
3109: EMPTY
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 25
3118: PUSH
3119: LD_INT 2
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// if not eng then
3135: LD_VAR 0 2
3139: NOT
3140: IFFALSE 3144
// exit ;
3142: GO 3294
// ComExit ( eng ) ;
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL 54793 0 1
// i := 5 ;
3153: LD_ADDR_VAR 0 1
3157: PUSH
3158: LD_INT 5
3160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3168: LD_VAR 0 2
3172: PPUSH
3173: LD_INT 60
3175: PUSH
3176: EMPTY
3177: LIST
3178: PPUSH
3179: CALL_OW 72
3183: NOT
3184: PUSH
3185: LD_VAR 0 2
3189: AND
3190: IFFALSE 3260
// begin ComTransport ( eng , kirov , mat_oil ) ;
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 71
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 67
3214: PPUSH
3215: LD_INT 99
3217: PPUSH
3218: CALL_OW 171
// AddComUnload ( eng ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3231: LD_VAR 0 2
3235: PPUSH
3236: LD_INT 107
3238: PPUSH
3239: LD_INT 104
3241: PPUSH
3242: CALL_OW 171
// i := i - 1 ;
3246: LD_ADDR_VAR 0 1
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: LD_INT 1
3258: MINUS
3259: ST_TO_ADDR
// end ; until i = 0 ;
3260: LD_VAR 0 1
3264: PUSH
3265: LD_INT 0
3267: EQUAL
3268: IFFALSE 3161
// AddComMoveUnit ( eng , kirov ) ;
3270: LD_VAR 0 2
3274: PPUSH
3275: LD_INT 71
3277: PPUSH
3278: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_INT 71
3289: PPUSH
3290: CALL_OW 180
// end ;
3294: PPOPN 2
3296: END
// export function SendReinforcements ; var i ; begin
3297: LD_INT 0
3299: PPUSH
3300: PPUSH
// reinforcementsGained := true ;
3301: LD_ADDR_EXP 25
3305: PUSH
3306: LD_INT 1
3308: ST_TO_ADDR
// for i := 1 to 2 do
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 2
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3405
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3325: LD_EXP 44
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PPUSH
3336: CALL 54793 0 1
3340: IFFALSE 3349
// wait ( 0 0$0.3 ) ;
3342: LD_INT 10
3344: PPUSH
3345: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3349: LD_EXP 44
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: LD_INT 75
3362: PPUSH
3363: LD_INT 84
3365: PPUSH
3366: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3370: LD_EXP 44
3374: PUSH
3375: LD_VAR 0 2
3379: ARRAY
3380: PPUSH
3381: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3385: LD_EXP 44
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: CALL_OW 235
// end ;
3403: GO 3322
3405: POP
3406: POP
// end ;
3407: LD_VAR 0 1
3411: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3412: LD_EXP 21
3416: PUSH
3417: LD_EXP 18
3421: AND
3422: PUSH
3423: LD_EXP 43
3427: PPUSH
3428: LD_INT 25
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 72
3442: AND
3443: IFFALSE 3600
3445: GO 3447
3447: DISABLE
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_EXP 43
3461: PPUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PPUSH
3472: CALL_OW 72
3476: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 30
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: ST_TO_ADDR
// if not fac then
3511: LD_VAR 0 2
3515: NOT
3516: IFFALSE 3520
// exit ;
3518: GO 3600
// fac := fac [ 1 ] ;
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_VAR 0 2
3529: PUSH
3530: LD_INT 1
3532: ARRAY
3533: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3534: LD_VAR 0 2
3538: PPUSH
3539: CALL_OW 313
3543: PUSH
3544: LD_INT 0
3546: EQUAL
3547: IFFALSE 3579
// begin ComExit ( mech ) ;
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL 54793 0 1
// wait ( 3 ) ;
3558: LD_INT 3
3560: PPUSH
3561: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3565: LD_VAR 0 1
3569: PPUSH
3570: LD_VAR 0 2
3574: PPUSH
3575: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3579: LD_VAR 0 2
3583: PPUSH
3584: LD_INT 21
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 42
3595: PPUSH
3596: CALL_OW 125
// end ;
3600: PPOPN 2
3602: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3603: LD_INT 0
3605: PPUSH
3606: PPUSH
3607: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3608: LD_VAR 0 1
3612: PPUSH
3613: LD_INT 90
3615: PPUSH
3616: LD_INT 100
3618: PPUSH
3619: CALL_OW 111
// wait ( 0 0$10 ) ;
3623: LD_INT 350
3625: PPUSH
3626: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3642: LD_INT 35
3644: PPUSH
3645: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 110
3663: ST_TO_ADDR
// if tag = 0 then
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: IFFALSE 3743
// begin if not HasTask ( vehicle ) then
3674: LD_VAR 0 1
3678: PPUSH
3679: CALL_OW 314
3683: NOT
3684: IFFALSE 3701
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3686: LD_VAR 0 1
3690: PPUSH
3691: LD_INT 83
3693: PPUSH
3694: LD_INT 68
3696: PPUSH
3697: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 256
3710: PUSH
3711: LD_INT 750
3713: LESS
3714: IFFALSE 3743
// begin SetTag ( vehicle , 1 ) ;
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 93
3735: PPUSH
3736: LD_INT 102
3738: PPUSH
3739: CALL_OW 111
// end ; end ; if tag = 1 then
3743: LD_VAR 0 4
3747: PUSH
3748: LD_INT 1
3750: EQUAL
3751: IFFALSE 3841
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3753: LD_VAR 0 1
3757: PPUSH
3758: LD_INT 113
3760: PPUSH
3761: LD_INT 106
3763: PPUSH
3764: CALL_OW 307
3768: NOT
3769: PUSH
3770: LD_VAR 0 1
3774: PPUSH
3775: CALL_OW 314
3779: NOT
3780: AND
3781: IFFALSE 3798
// ComMoveXY ( vehicle , 113 , 106 ) ;
3783: LD_VAR 0 1
3787: PPUSH
3788: LD_INT 113
3790: PPUSH
3791: LD_INT 106
3793: PPUSH
3794: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3798: LD_VAR 0 1
3802: PPUSH
3803: LD_INT 113
3805: PPUSH
3806: LD_INT 106
3808: PPUSH
3809: CALL_OW 307
3813: IFFALSE 3841
// begin SetTag ( vehicle , 2 ) ;
3815: LD_VAR 0 1
3819: PPUSH
3820: LD_INT 2
3822: PPUSH
3823: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: CALL_OW 311
3836: PPUSH
3837: CALL 56095 0 1
// end ; end ; if tag = 2 then
3841: LD_VAR 0 4
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: IFFALSE 3913
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3851: LD_VAR 0 1
3855: PPUSH
3856: CALL_OW 256
3860: PUSH
3861: LD_INT 1000
3863: EQUAL
3864: PUSH
3865: LD_VAR 0 1
3869: PPUSH
3870: CALL_OW 311
3874: AND
3875: IFFALSE 3913
// begin ComMoveUnit ( vehicle , kirov ) ;
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 71
3884: PPUSH
3885: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: LD_INT 71
3896: PPUSH
3897: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 301
3922: PUSH
3923: LD_EXP 23
3927: OR
3928: IFFALSE 3642
// if eastOutpostDestroyed then
3930: LD_EXP 23
3934: IFFALSE 3951
// ComMoveXY ( vehicle , 111 , 105 ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: LD_INT 111
3943: PPUSH
3944: LD_INT 105
3946: PPUSH
3947: CALL_OW 111
// end ; end_of_file
3951: LD_VAR 0 2
3955: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
3961: PPUSH
// uc_side := 1 ;
3962: LD_ADDR_OWVAR 20
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// uc_nation := 1 ;
3970: LD_ADDR_OWVAR 21
3974: PUSH
3975: LD_INT 1
3977: ST_TO_ADDR
// usWestForces := [ ] ;
3978: LD_ADDR_EXP 46
3982: PUSH
3983: EMPTY
3984: ST_TO_ADDR
// usEastForces := [ ] ;
3985: LD_ADDR_EXP 47
3989: PUSH
3990: EMPTY
3991: ST_TO_ADDR
// bc_type := b_depot ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_INT 0
3999: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4000: LD_ADDR_OWVAR 43
4004: PUSH
4005: LD_OWVAR 67
4009: PUSH
4010: LD_INT 1
4012: MINUS
4013: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4014: LD_INT 48
4016: PPUSH
4017: LD_INT 54
4019: PPUSH
4020: LD_INT 2
4022: PPUSH
4023: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: LD_INT 55
4034: PUSH
4035: LD_INT 55
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 59
4048: PUSH
4049: LD_INT 61
4051: PUSH
4052: LD_INT 4
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: ST_TO_ADDR
// if Difficulty > 1 then
4064: LD_OWVAR 67
4068: PUSH
4069: LD_INT 1
4071: GREATER
4072: IFFALSE 4108
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4074: LD_ADDR_VAR 0 4
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_INT 46
4091: PUSH
4092: LD_INT 64
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 2
4107: ST_TO_ADDR
// if Difficulty > 2 then
4108: LD_OWVAR 67
4112: PUSH
4113: LD_INT 2
4115: GREATER
4116: IFFALSE 4152
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 36
4135: PUSH
4136: LD_INT 48
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 2
4151: ST_TO_ADDR
// bc_type := b_breastwork ;
4152: LD_ADDR_OWVAR 42
4156: PUSH
4157: LD_INT 31
4159: ST_TO_ADDR
// InitHC_All ( ) ;
4160: CALL_OW 584
// for i in tmp do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_VAR 0 4
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4319
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4177: LD_VAR 0 2
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_VAR 0 2
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 2
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4208: LD_INT 0
4210: PPUSH
4211: LD_OWVAR 67
4215: PPUSH
4216: CALL_OW 381
// un := CreateHuman ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: CALL_OW 44
4229: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4230: LD_ADDR_EXP 46
4234: PUSH
4235: LD_EXP 46
4239: PPUSH
4240: LD_EXP 46
4244: PUSH
4245: LD_INT 1
4247: PLUS
4248: PPUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: CALL_OW 1
4258: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_VAR 0 2
4268: PUSH
4269: LD_INT 3
4271: ARRAY
4272: PUSH
4273: LD_INT 3
4275: PLUS
4276: PUSH
4277: LD_INT 6
4279: MOD
4280: PPUSH
4281: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_VAR 0 2
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: LD_VAR 0 2
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: PPUSH
4308: CALL_OW 428
4312: PPUSH
4313: CALL_OW 52
// end ;
4317: GO 4174
4319: POP
4320: POP
// for i := 1 to 2 do
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: DOUBLE
4327: LD_INT 1
4329: DEC
4330: ST_TO_ADDR
4331: LD_INT 2
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4411
// begin PrepareEngineer ( false , Difficulty ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_OWVAR 67
4344: PPUSH
4345: CALL_OW 382
// un := CreateHuman ;
4349: LD_ADDR_VAR 0 3
4353: PUSH
4354: CALL_OW 44
4358: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_EXP 46
4368: PPUSH
4369: LD_EXP 46
4373: PUSH
4374: LD_INT 1
4376: PLUS
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: CALL_OW 1
4387: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4388: LD_VAR 0 3
4392: PPUSH
4393: LD_INT 54
4395: PPUSH
4396: LD_INT 58
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 0
4404: PPUSH
4405: CALL_OW 50
// end ;
4409: GO 4334
4411: POP
4412: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4413: LD_ADDR_VAR 0 4
4417: PUSH
4418: LD_INT 87
4420: PUSH
4421: LD_INT 62
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 89
4434: PUSH
4435: LD_INT 67
4437: PUSH
4438: LD_INT 1
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// if Difficulty > 2 then
4450: LD_OWVAR 67
4454: PUSH
4455: LD_INT 2
4457: GREATER
4458: IFFALSE 4494
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4460: LD_ADDR_VAR 0 4
4464: PUSH
4465: LD_VAR 0 4
4469: PPUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_INT 88
4477: PUSH
4478: LD_INT 53
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 2
4493: ST_TO_ADDR
// bc_type := b_breastwork ;
4494: LD_ADDR_OWVAR 42
4498: PUSH
4499: LD_INT 31
4501: ST_TO_ADDR
// for i in tmp do
4502: LD_ADDR_VAR 0 2
4506: PUSH
4507: LD_VAR 0 4
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4657
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4515: LD_VAR 0 2
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: LD_VAR 0 2
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PPUSH
4533: LD_VAR 0 2
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PPUSH
4542: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 381
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4568: LD_ADDR_EXP 47
4572: PUSH
4573: LD_EXP 47
4577: PPUSH
4578: LD_EXP 47
4582: PUSH
4583: LD_INT 1
4585: PLUS
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 1
4596: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_VAR 0 2
4606: PUSH
4607: LD_INT 3
4609: ARRAY
4610: PUSH
4611: LD_INT 3
4613: PLUS
4614: PUSH
4615: LD_INT 6
4617: MOD
4618: PPUSH
4619: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4623: LD_VAR 0 3
4627: PPUSH
4628: LD_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: PPUSH
4637: LD_VAR 0 2
4641: PUSH
4642: LD_INT 2
4644: ARRAY
4645: PPUSH
4646: CALL_OW 428
4650: PPUSH
4651: CALL_OW 52
// end ;
4655: GO 4512
4657: POP
4658: POP
// for i := 1 to 2 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_INT 2
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4749
// begin PrepareEngineer ( false , Difficulty ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_OWVAR 67
4682: PPUSH
4683: CALL_OW 382
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 3
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4697: LD_ADDR_EXP 47
4701: PUSH
4702: LD_EXP 47
4706: PPUSH
4707: LD_EXP 47
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: PPUSH
4716: LD_VAR 0 3
4720: PPUSH
4721: CALL_OW 1
4725: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4726: LD_VAR 0 3
4730: PPUSH
4731: LD_INT 95
4733: PPUSH
4734: LD_INT 65
4736: PPUSH
4737: LD_INT 2
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 50
// end ;
4747: GO 4672
4749: POP
4750: POP
// end ;
4751: LD_VAR 0 1
4755: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
// usTrapForces := [ ] ;
4761: LD_ADDR_EXP 48
4765: PUSH
4766: EMPTY
4767: ST_TO_ADDR
// uc_side := 1 ;
4768: LD_ADDR_OWVAR 20
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// uc_nation := 1 ;
4776: LD_ADDR_OWVAR 21
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// InitHC_All ( ) ;
4784: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4788: LD_INT 1
4790: PPUSH
4791: LD_OWVAR 67
4795: PPUSH
4796: CALL_OW 381
// un := CreateHuman ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: CALL_OW 44
4809: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4810: LD_ADDR_EXP 48
4814: PUSH
4815: LD_EXP 48
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: CALL 54395 0 2
4829: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4830: LD_ADDR_VAR 0 2
4834: PUSH
4835: DOUBLE
4836: LD_INT 1
4838: DEC
4839: ST_TO_ADDR
4840: LD_INT 5
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: LD_INT 8
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: LD_OWVAR 67
4862: ARRAY
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4911
// begin PrepareSoldier ( false , Difficulty ) ;
4867: LD_INT 0
4869: PPUSH
4870: LD_OWVAR 67
4874: PPUSH
4875: CALL_OW 381
// un := CreateHuman ;
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: CALL_OW 44
4888: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4889: LD_ADDR_EXP 48
4893: PUSH
4894: LD_EXP 48
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL 54395 0 2
4908: ST_TO_ADDR
// end ;
4909: GO 4864
4911: POP
4912: POP
// for i := 1 to 2 do
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: DOUBLE
4919: LD_INT 1
4921: DEC
4922: ST_TO_ADDR
4923: LD_INT 2
4925: PUSH
4926: FOR_TO
4927: IFFALSE 4973
// begin PrepareScientist ( false , Difficulty ) ;
4929: LD_INT 0
4931: PPUSH
4932: LD_OWVAR 67
4936: PPUSH
4937: CALL_OW 384
// un := CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4951: LD_ADDR_EXP 48
4955: PUSH
4956: LD_EXP 48
4960: PPUSH
4961: LD_VAR 0 3
4965: PPUSH
4966: CALL 54395 0 2
4970: ST_TO_ADDR
// end ;
4971: GO 4926
4973: POP
4974: POP
// end ;
4975: LD_VAR 0 1
4979: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4980: LD_EXP 46
4984: IFFALSE 5554
4986: GO 4988
4988: DISABLE
4989: LD_INT 0
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
4995: PPUSH
// begin enable ;
4996: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4997: LD_ADDR_VAR 0 3
5001: PUSH
5002: LD_INT 8
5004: PPUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 21
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 70
5033: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_EXP 46
5043: PPUSH
5044: LD_INT 25
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 72
5058: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5059: LD_ADDR_VAR 0 5
5063: PUSH
5064: LD_EXP 46
5068: PPUSH
5069: LD_INT 25
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PPUSH
5079: CALL_OW 72
5083: ST_TO_ADDR
// if eng then
5084: LD_VAR 0 4
5088: IFFALSE 5282
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5090: LD_VAR 0 3
5094: PPUSH
5095: LD_INT 3
5097: PUSH
5098: LD_INT 24
5100: PUSH
5101: LD_INT 1000
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: IFFALSE 5228
// begin for i in eng do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 4
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5224
// if IsInUnit ( i ) then
5131: LD_VAR 0 1
5135: PPUSH
5136: CALL_OW 310
5140: IFFALSE 5153
// ComExit ( i ) else
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL 54793 0 1
5151: GO 5222
// if IsOk ( i ) and not HasTask ( i ) then
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 302
5162: PUSH
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 314
5172: NOT
5173: AND
5174: IFFALSE 5222
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5176: LD_VAR 0 1
5180: PPUSH
5181: LD_VAR 0 3
5185: PPUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 24
5191: PUSH
5192: LD_INT 1000
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 72
5207: PPUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 74
5217: PPUSH
5218: CALL_OW 130
5222: GO 5128
5224: POP
5225: POP
// end else
5226: GO 5282
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5228: LD_VAR 0 3
5232: PPUSH
5233: LD_INT 30
5235: PUSH
5236: LD_INT 0
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PPUSH
5243: CALL_OW 72
5247: IFFALSE 5282
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_VAR 0 3
5258: PPUSH
5259: LD_INT 30
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 72
5273: PUSH
5274: LD_INT 1
5276: ARRAY
5277: PPUSH
5278: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5282: LD_VAR 0 5
5286: PPUSH
5287: LD_INT 50
5289: PUSH
5290: EMPTY
5291: LIST
5292: PPUSH
5293: CALL_OW 72
5297: PUSH
5298: LD_INT 18
5300: PPUSH
5301: LD_INT 81
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 70
5315: PUSH
5316: LD_INT 1
5318: GREATER
5319: AND
5320: PUSH
5321: LD_INT 18
5323: PPUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 70
5338: NOT
5339: AND
5340: IFFALSE 5394
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5342: LD_ADDR_VAR 0 1
5346: PUSH
5347: LD_VAR 0 5
5351: PPUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PPUSH
5358: CALL_OW 72
5362: PUSH
5363: FOR_IN
5364: IFFALSE 5392
// begin ComExit ( i ) ;
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL 54793 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 46
5382: PPUSH
5383: LD_INT 62
5385: PPUSH
5386: CALL_OW 174
// end ;
5390: GO 5363
5392: POP
5393: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5394: LD_INT 18
5396: PPUSH
5397: LD_INT 81
5399: PUSH
5400: LD_INT 1
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 70
5411: NOT
5412: PUSH
5413: LD_VAR 0 5
5417: PPUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 54
5423: PUSH
5424: EMPTY
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 50
5433: PUSH
5434: EMPTY
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 72
5445: AND
5446: PUSH
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 30
5454: PUSH
5455: LD_INT 31
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 58
5464: PUSH
5465: EMPTY
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 72
5476: AND
5477: IFFALSE 5554
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5479: LD_VAR 0 5
5483: PPUSH
5484: LD_INT 3
5486: PUSH
5487: LD_INT 54
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 50
5499: PUSH
5500: EMPTY
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 72
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 31
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 58
5533: PUSH
5534: EMPTY
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 72
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 120
// end ;
5554: PPOPN 5
5556: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5557: LD_EXP 47
5561: IFFALSE 5832
5563: GO 5565
5565: DISABLE
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
// begin enable ;
5571: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5572: LD_ADDR_VAR 0 2
5576: PUSH
5577: LD_INT 15
5579: PPUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 21
5592: PUSH
5593: LD_INT 3
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 70
5608: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: LD_EXP 47
5618: PPUSH
5619: LD_INT 25
5621: PUSH
5622: LD_INT 2
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 72
5633: ST_TO_ADDR
// if eng then
5634: LD_VAR 0 3
5638: IFFALSE 5832
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 24
5650: PUSH
5651: LD_INT 1000
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 72
5666: IFFALSE 5778
// begin for i in eng do
5668: LD_ADDR_VAR 0 1
5672: PUSH
5673: LD_VAR 0 3
5677: PUSH
5678: FOR_IN
5679: IFFALSE 5774
// if IsInUnit ( i ) then
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 310
5690: IFFALSE 5703
// ComExit ( i ) else
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL 54793 0 1
5701: GO 5772
// if IsOk ( i ) and not HasTask ( i ) then
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 302
5712: PUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 314
5722: NOT
5723: AND
5724: IFFALSE 5772
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_INT 3
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: LD_INT 1000
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 72
5757: PPUSH
5758: LD_VAR 0 1
5762: PPUSH
5763: CALL_OW 74
5767: PPUSH
5768: CALL_OW 130
5772: GO 5678
5774: POP
5775: POP
// end else
5776: GO 5832
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5778: LD_VAR 0 2
5782: PPUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: CALL_OW 72
5797: IFFALSE 5832
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5799: LD_VAR 0 3
5803: PPUSH
5804: LD_VAR 0 2
5808: PPUSH
5809: LD_INT 30
5811: PUSH
5812: LD_INT 0
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 72
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: CALL_OW 120
// end ; end_of_file
5832: PPOPN 3
5834: END
// export function Action ; var i , tmp ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
5839: PPUSH
// InGameOn ;
5840: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5844: LD_INT 112
5846: PPUSH
5847: LD_INT 107
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 12
5855: NEG
5856: PPUSH
5857: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5861: LD_INT 121
5863: PPUSH
5864: LD_INT 113
5866: PPUSH
5867: CALL_OW 86
// tmp := PrepareBurlak ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL 1244 0 0
5880: ST_TO_ADDR
// for i in tmp do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5945
// begin SetDir ( i , 5 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 5
5901: PPUSH
5902: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_INT 3
5913: PPUSH
5914: LD_INT 0
5916: PPUSH
5917: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_INT 121
5928: PPUSH
5929: LD_INT 111
5931: PPUSH
5932: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5936: LD_INT 28
5938: PPUSH
5939: CALL_OW 67
// end ;
5943: GO 5891
5945: POP
5946: POP
// CenterOnUnits ( Kurin ) ;
5947: LD_EXP 38
5951: PPUSH
5952: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5956: LD_EXP 34
5960: PPUSH
5961: LD_EXP 38
5965: PPUSH
5966: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5977: LD_EXP 34
5981: PPUSH
5982: LD_EXP 38
5986: PPUSH
5987: CALL_OW 296
5991: PUSH
5992: LD_INT 6
5994: LESS
5995: IFFALSE 5970
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5997: LD_EXP 34
6001: PUSH
6002: LD_EXP 35
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: LD_EXP 38
6015: PPUSH
6016: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6020: LD_ADDR_VAR 0 2
6024: PUSH
6025: LD_VAR 0 3
6029: PUSH
6030: LD_EXP 34
6034: PUSH
6035: LD_EXP 35
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: DIFF
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6112
// if GetClass ( i ) = class_soldier then
6048: LD_VAR 0 2
6052: PPUSH
6053: CALL_OW 257
6057: PUSH
6058: LD_INT 1
6060: EQUAL
6061: IFFALSE 6098
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6063: LD_VAR 0 2
6067: PPUSH
6068: LD_INT 95
6070: PUSH
6071: LD_INT 209
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: LD_INT 2
6085: MOD
6086: PUSH
6087: LD_INT 1
6089: PLUS
6090: ARRAY
6091: PPUSH
6092: CALL_OW 120
6096: GO 6110
// ComEnterUnit ( i , ru_lab ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 83
6105: PPUSH
6106: CALL_OW 120
6110: GO 6045
6112: POP
6113: POP
// Say ( Kurin , D1-Kur-1 ) ;
6114: LD_EXP 38
6118: PPUSH
6119: LD_STRING D1-Kur-1
6121: PPUSH
6122: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6126: LD_EXP 34
6130: PPUSH
6131: LD_STRING D1-Bur-1
6133: PPUSH
6134: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6138: LD_INT 10
6140: PPUSH
6141: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6145: LD_EXP 38
6149: PPUSH
6150: LD_STRING D1-Kur-2
6152: PPUSH
6153: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6157: LD_EXP 39
6161: PPUSH
6162: CALL 54793 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_INT 115
6173: PPUSH
6174: LD_INT 108
6176: PPUSH
6177: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6181: LD_EXP 39
6185: PPUSH
6186: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6190: LD_EXP 34
6194: PPUSH
6195: LD_STRING D1-Bur-2
6197: PPUSH
6198: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6202: LD_EXP 38
6206: PPUSH
6207: LD_STRING D1-Kur-3
6209: PPUSH
6210: CALL_OW 88
// if Gnyevko then
6214: LD_EXP 35
6218: IFFALSE 6232
// Say ( Kurin , D1-Kur-3a ) ;
6220: LD_EXP 38
6224: PPUSH
6225: LD_STRING D1-Kur-3a
6227: PPUSH
6228: CALL_OW 88
// InGameOff ;
6232: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6236: LD_STRING M1
6238: PPUSH
6239: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6243: LD_INT 112
6245: PPUSH
6246: LD_INT 107
6248: PPUSH
6249: LD_INT 3
6251: PPUSH
6252: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6256: LD_INT 66
6258: PPUSH
6259: LD_INT 99
6261: PPUSH
6262: LD_INT 3
6264: PPUSH
6265: LD_INT 7
6267: NEG
6268: PPUSH
6269: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6273: LD_INT 66
6275: PPUSH
6276: LD_INT 99
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6286: LD_EXP 39
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 235
// if Gnyevko then
6298: LD_EXP 35
6302: IFFALSE 6316
// SetSide ( Gnyevko , 3 ) ;
6304: LD_EXP 35
6308: PPUSH
6309: LD_INT 3
6311: PPUSH
6312: CALL_OW 235
// SaveForQuickRestart ;
6316: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6320: LD_EXP 38
6324: PPUSH
6325: LD_INT 71
6327: PPUSH
6328: CALL_OW 120
// wait ( 0 0$2 ) ;
6332: LD_INT 70
6334: PPUSH
6335: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6339: LD_EXP 43
6343: PUSH
6344: LD_INT 2
6346: ARRAY
6347: PPUSH
6348: CALL 54793 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6352: LD_EXP 43
6356: PUSH
6357: LD_INT 2
6359: ARRAY
6360: PPUSH
6361: LD_INT 98
6363: PPUSH
6364: LD_INT 98
6366: PPUSH
6367: CALL_OW 428
6371: PPUSH
6372: CALL_OW 180
// wait ( 0 0$12 ) ;
6376: LD_INT 420
6378: PPUSH
6379: CALL_OW 67
// kurinDontWannaTalk := true ;
6383: LD_ADDR_EXP 5
6387: PUSH
6388: LD_INT 1
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 1
6395: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6396: LD_EXP 5
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 91
6413: PUSH
6414: LD_INT 71
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 69
6433: AND
6434: IFFALSE 6621
6436: GO 6438
6438: DISABLE
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// begin enable ;
6443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6444: LD_ADDR_VAR 0 2
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 91
6461: PUSH
6462: LD_INT 71
6464: PUSH
6465: LD_INT 14
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: ST_TO_ADDR
// InGameOn ;
6482: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6486: LD_INT 116
6488: PPUSH
6489: LD_INT 107
6491: PPUSH
6492: LD_INT 3
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 330
// ComExit ( Kurin ) ;
6502: LD_EXP 38
6506: PPUSH
6507: CALL 54793 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6511: LD_EXP 38
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 1
6523: ARRAY
6524: PPUSH
6525: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6529: LD_EXP 38
6533: PPUSH
6534: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6538: LD_VAR 0 2
6542: PPUSH
6543: LD_INT 87
6545: PPUSH
6546: LD_INT 99
6548: PPUSH
6549: CALL_OW 111
// if kirovHasTank then
6553: LD_EXP 6
6557: IFFALSE 6573
// Say ( Kurin , D1a-Kur-1a ) else
6559: LD_EXP 38
6563: PPUSH
6564: LD_STRING D1a-Kur-1a
6566: PPUSH
6567: CALL_OW 88
6571: GO 6585
// Say ( Kurin , D1a-Kur-1 ) ;
6573: LD_EXP 38
6577: PPUSH
6578: LD_STRING D1a-Kur-1
6580: PPUSH
6581: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6585: LD_EXP 38
6589: PPUSH
6590: LD_INT 71
6592: PPUSH
6593: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6597: LD_INT 116
6599: PPUSH
6600: LD_INT 107
6602: PPUSH
6603: LD_INT 3
6605: PPUSH
6606: CALL_OW 331
// wait ( 0 0$3 ) ;
6610: LD_INT 105
6612: PPUSH
6613: CALL_OW 67
// InGameOff ;
6617: CALL_OW 9
// end ;
6621: PPOPN 2
6623: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6624: LD_INT 22
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 95
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PPUSH
6648: CALL_OW 69
6652: PUSH
6653: LD_EXP 7
6657: AND
6658: IFFALSE 6997
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// begin enable ;
6670: ENABLE
// blockNorth := false ;
6671: LD_ADDR_EXP 7
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// InGameOn ;
6679: CALL_OW 8
// DialogueOn ;
6683: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 95
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6721: LD_EXP 39
6725: PUSH
6726: LD_VAR 0 2
6730: IN
6731: PUSH
6732: LD_EXP 39
6736: PPUSH
6737: CALL_OW 302
6741: AND
6742: IFFALSE 6758
// Say ( Kovalyuk , D1b-Kov-1 ) else
6744: LD_EXP 39
6748: PPUSH
6749: LD_STRING D1b-Kov-1
6751: PPUSH
6752: CALL_OW 88
6756: GO 6793
// if Burlak in tmp and IsOk ( Burlak ) then
6758: LD_EXP 34
6762: PUSH
6763: LD_VAR 0 2
6767: IN
6768: PUSH
6769: LD_EXP 34
6773: PPUSH
6774: CALL_OW 302
6778: AND
6779: IFFALSE 6793
// Say ( Burlak , D1b-Bur-1 ) ;
6781: LD_EXP 34
6785: PPUSH
6786: LD_STRING D1b-Bur-1
6788: PPUSH
6789: CALL_OW 88
// DialogueOff ;
6793: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6797: LD_INT 22
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: LD_INT 21
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: PPUSH
6833: CALL_OW 141
// for i in tmp do
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: LD_VAR 0 2
6846: PUSH
6847: FOR_IN
6848: IFFALSE 6976
// begin d := rand ( 2 , 3 ) ;
6850: LD_ADDR_VAR 0 5
6854: PUSH
6855: LD_INT 2
6857: PPUSH
6858: LD_INT 3
6860: PPUSH
6861: CALL_OW 12
6865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: LD_VAR 0 1
6875: PPUSH
6876: CALL_OW 250
6880: PPUSH
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_INT 6
6888: PPUSH
6889: CALL_OW 272
6893: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6894: LD_ADDR_VAR 0 4
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 251
6908: PPUSH
6909: LD_VAR 0 5
6913: PPUSH
6914: LD_INT 6
6916: PPUSH
6917: CALL_OW 273
6921: ST_TO_ADDR
// if ValidHex ( x , y ) then
6922: LD_VAR 0 3
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: CALL_OW 488
6936: IFFALSE 6959
// ComMoveXY ( i , x , y ) else
6938: LD_VAR 0 1
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 111
6957: GO 6974
// ComMoveXY ( i , 79 , 85 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 79
6966: PPUSH
6967: LD_INT 85
6969: PPUSH
6970: CALL_OW 111
// end ;
6974: GO 6847
6976: POP
6977: POP
// wait ( 0 0$5 ) ;
6978: LD_INT 175
6980: PPUSH
6981: CALL_OW 67
// InGameOff ;
6985: CALL_OW 9
// blockNorth := true ;
6989: LD_ADDR_EXP 7
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// end ;
6997: PPOPN 5
6999: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7000: LD_EXP 44
7004: PPUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 72
7019: PUSH
7020: LD_EXP 4
7024: NOT
7025: AND
7026: IFFALSE 7428
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7038: LD_ADDR_VAR 0 5
7042: PUSH
7043: LD_EXP 44
7047: PPUSH
7048: LD_EXP 34
7052: PPUSH
7053: CALL_OW 74
7057: ST_TO_ADDR
// InGameOn ;
7058: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7062: LD_VAR 0 5
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 5
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_INT 3
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7092: LD_VAR 0 5
7096: PPUSH
7097: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7101: LD_VAR 0 5
7105: PPUSH
7106: LD_EXP 34
7110: PPUSH
7111: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7115: LD_VAR 0 5
7119: PPUSH
7120: LD_STRING D2-RSol1-1
7122: PPUSH
7123: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_VAR 0 5
7136: PPUSH
7137: CALL_OW 250
7141: PPUSH
7142: LD_VAR 0 5
7146: PPUSH
7147: CALL_OW 254
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 272
7159: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: LD_VAR 0 5
7169: PPUSH
7170: CALL_OW 251
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 254
7184: PPUSH
7185: LD_INT 3
7187: PPUSH
7188: CALL_OW 273
7192: ST_TO_ADDR
// if ValidHex ( x , y ) then
7193: LD_VAR 0 3
7197: PPUSH
7198: LD_VAR 0 4
7202: PPUSH
7203: CALL_OW 488
7207: IFFALSE 7239
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7209: LD_EXP 35
7213: PUSH
7214: LD_EXP 39
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PPUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 111
7237: GO 7262
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7239: LD_EXP 35
7243: PUSH
7244: LD_EXP 39
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: LD_VAR 0 5
7257: PPUSH
7258: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7262: LD_EXP 34
7266: PPUSH
7267: LD_VAR 0 5
7271: PPUSH
7272: CALL_OW 112
// p := 0 ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7284: LD_INT 35
7286: PPUSH
7287: CALL_OW 67
// p := p + 1 ;
7291: LD_ADDR_VAR 0 2
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 1
7303: PLUS
7304: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7305: LD_VAR 0 2
7309: PUSH
7310: LD_INT 10
7312: GREATER
7313: PUSH
7314: LD_EXP 34
7318: PPUSH
7319: LD_VAR 0 5
7323: PPUSH
7324: CALL_OW 296
7328: PUSH
7329: LD_INT 6
7331: LESS
7332: OR
7333: IFFALSE 7284
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7335: LD_EXP 34
7339: PUSH
7340: LD_EXP 35
7344: PUSH
7345: LD_EXP 39
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PPUSH
7355: LD_VAR 0 5
7359: PPUSH
7360: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7364: LD_EXP 34
7368: PPUSH
7369: LD_STRING D2-Bur-1
7371: PPUSH
7372: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7376: LD_VAR 0 5
7380: PPUSH
7381: LD_STRING D2-RSol1-2
7383: PPUSH
7384: CALL_OW 88
// ComHold ( nearestGuard ) ;
7388: LD_VAR 0 5
7392: PPUSH
7393: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7397: LD_VAR 0 5
7401: PPUSH
7402: CALL_OW 250
7406: PPUSH
7407: LD_VAR 0 5
7411: PPUSH
7412: CALL_OW 251
7416: PPUSH
7417: LD_INT 3
7419: PPUSH
7420: CALL_OW 331
// InGameOff ;
7424: CALL_OW 9
// end ;
7428: PPOPN 5
7430: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7431: LD_EXP 34
7435: PPUSH
7436: LD_EXP 40
7440: PPUSH
7441: CALL_OW 296
7445: PUSH
7446: LD_INT 10
7448: LESS
7449: PUSH
7450: LD_INT 3
7452: PPUSH
7453: LD_EXP 40
7457: PPUSH
7458: CALL_OW 292
7462: AND
7463: IFFALSE 7819
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
// begin InGameOn ;
7471: CALL_OW 8
// beriaVisited := true ;
7475: LD_ADDR_EXP 4
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7483: LD_EXP 34
7487: PPUSH
7488: LD_EXP 40
7492: PPUSH
7493: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7497: LD_EXP 35
7501: PUSH
7502: LD_EXP 39
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: LD_INT 68
7513: PPUSH
7514: LD_INT 99
7516: PPUSH
7517: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7521: LD_EXP 40
7525: PPUSH
7526: LD_EXP 34
7530: PPUSH
7531: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7535: LD_EXP 40
7539: PPUSH
7540: LD_STRING D2-Pla-2
7542: PPUSH
7543: CALL_OW 88
// p := 0 ;
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7555: LD_INT 35
7557: PPUSH
7558: CALL_OW 67
// p := p + 1 ;
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7576: LD_EXP 34
7580: PPUSH
7581: LD_EXP 40
7585: PPUSH
7586: CALL_OW 296
7590: PUSH
7591: LD_INT 6
7593: LESS
7594: PUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 8
7602: GREATER
7603: OR
7604: IFFALSE 7555
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7606: LD_EXP 34
7610: PUSH
7611: LD_EXP 35
7615: PUSH
7616: LD_EXP 39
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: LD_EXP 40
7630: PPUSH
7631: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7635: LD_EXP 34
7639: PPUSH
7640: LD_STRING D2-Bur-2
7642: PPUSH
7643: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 3
7652: PPUSH
7653: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7657: LD_EXP 40
7661: PPUSH
7662: LD_STRING D2-Pla-3
7664: PPUSH
7665: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7669: LD_EXP 34
7673: PPUSH
7674: LD_STRING D2-Bur-3
7676: PPUSH
7677: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7681: LD_EXP 40
7685: PPUSH
7686: LD_STRING D2-Pla-4
7688: PPUSH
7689: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7693: LD_EXP 34
7697: PPUSH
7698: LD_STRING D2-Bur-4
7700: PPUSH
7701: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7705: LD_EXP 40
7709: PPUSH
7710: LD_STRING D2-Pla-5
7712: PPUSH
7713: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7717: LD_INT 1
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: LD_INT 4
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL 7822 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7739: LD_EXP 40
7743: PPUSH
7744: LD_STRING D3-Pla-1
7746: PPUSH
7747: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7751: LD_EXP 34
7755: PPUSH
7756: LD_STRING D3-Bur-1
7758: PPUSH
7759: CALL_OW 88
// InGameOff ;
7763: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7767: LD_STRING M2a
7769: PPUSH
7770: CALL_OW 337
// SetSide ( beria , 3 ) ;
7774: LD_INT 106
7776: PPUSH
7777: LD_INT 3
7779: PPUSH
7780: CALL_OW 235
// if not Gnyevko then
7784: LD_EXP 35
7788: NOT
7789: IFFALSE 7810
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7791: LD_INT 106
7793: PPUSH
7794: CALL_OW 313
7798: PUSH
7799: LD_INT 1
7801: ARRAY
7802: PPUSH
7803: LD_INT 3
7805: PPUSH
7806: CALL_OW 235
// ComFree ( Platonov ) ;
7810: LD_EXP 40
7814: PPUSH
7815: CALL_OW 139
// end ;
7819: PPOPN 1
7821: END
// function AskPlatonov ( questions ) ; var q ; begin
7822: LD_INT 0
7824: PPUSH
7825: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7826: LD_ADDR_VAR 0 3
7830: PUSH
7831: LD_STRING QMoreInfo
7833: PPUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 98
7843: ST_TO_ADDR
// case q of 1 :
7844: LD_VAR 0 3
7848: PUSH
7849: LD_INT 1
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7884
7857: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7858: LD_EXP 34
7862: PPUSH
7863: LD_STRING D2a-Bur-1
7865: PPUSH
7866: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7870: LD_EXP 40
7874: PPUSH
7875: LD_STRING D2a-Pla-1
7877: PPUSH
7878: CALL_OW 88
// end ; 2 :
7882: GO 7955
7884: LD_INT 2
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7919
7892: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7893: LD_EXP 34
7897: PPUSH
7898: LD_STRING D2b-Bur-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7905: LD_EXP 40
7909: PPUSH
7910: LD_STRING D2b-Pla-1
7912: PPUSH
7913: CALL_OW 88
// end ; 3 :
7917: GO 7955
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7954
7927: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7928: LD_EXP 34
7932: PPUSH
7933: LD_STRING D2c-Bur-1
7935: PPUSH
7936: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7940: LD_EXP 40
7944: PPUSH
7945: LD_STRING D2c-Pla-1
7947: PPUSH
7948: CALL_OW 88
// end ; end ;
7952: GO 7955
7954: POP
// if q < 4 and questions > 2 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 4
7962: LESS
7963: PUSH
7964: LD_VAR 0 1
7968: PUSH
7969: LD_INT 2
7971: GREATER
7972: AND
7973: IFFALSE 7990
// AskPlatonov ( questions diff q ) ;
7975: LD_VAR 0 1
7979: PUSH
7980: LD_VAR 0 3
7984: DIFF
7985: PPUSH
7986: CALL 7822 0 1
// end ;
7990: LD_VAR 0 2
7994: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7995: LD_INT 0
7997: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7998: LD_EXP 40
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 2
8012: PPUSH
8013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8024: LD_EXP 40
8028: PPUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 2
8038: PPUSH
8039: CALL_OW 297
8043: PUSH
8044: LD_INT 5
8046: LESS
8047: PUSH
8048: LD_VAR 0 1
8052: PPUSH
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 283
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: AND
8067: IFFALSE 8017
// ComStop ( Platonov ) ;
8069: LD_EXP 40
8073: PPUSH
8074: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8078: LD_EXP 40
8082: PPUSH
8083: LD_STRING D4-Pla-1
8085: PPUSH
8086: CALL_OW 88
// end ;
8090: LD_VAR 0 3
8094: RET
// every 0 0$2 trigger hasLab do
8095: LD_EXP 9
8099: IFFALSE 8163
8101: GO 8103
8103: DISABLE
// begin DialogueOn ;
8104: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8108: LD_EXP 34
8112: PPUSH
8113: LD_STRING D5a-Bur-1
8115: PPUSH
8116: CALL_OW 88
// if hasWorkshop then
8120: LD_EXP 10
8124: IFFALSE 8140
// Say ( Platonov , D5a-Pla-1 ) else
8126: LD_EXP 40
8130: PPUSH
8131: LD_STRING D5a-Pla-1
8133: PPUSH
8134: CALL_OW 88
8138: GO 8152
// Say ( Platonov , D5a-Pla-1a ) ;
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D5a-Pla-1a
8147: PPUSH
8148: CALL_OW 88
// DialogueOff ;
8152: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8156: LD_STRING M2b
8158: PPUSH
8159: CALL_OW 337
// end ;
8163: END
// every 0 0$2 trigger hasWorkshop do
8164: LD_EXP 10
8168: IFFALSE 8232
8170: GO 8172
8172: DISABLE
// begin DialogueOn ;
8173: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8177: LD_EXP 34
8181: PPUSH
8182: LD_STRING D5b-Bur-1
8184: PPUSH
8185: CALL_OW 88
// if hasLab then
8189: LD_EXP 9
8193: IFFALSE 8209
// Say ( Platonov , D5b-Pla-1 ) else
8195: LD_EXP 40
8199: PPUSH
8200: LD_STRING D5b-Pla-1
8202: PPUSH
8203: CALL_OW 88
8207: GO 8221
// Say ( Platonov , D5b-Pla-1a ) ;
8209: LD_EXP 40
8213: PPUSH
8214: LD_STRING D5b-Pla-1a
8216: PPUSH
8217: CALL_OW 88
// DialogueOff ;
8221: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8225: LD_STRING M2c
8227: PPUSH
8228: CALL_OW 337
// end ;
8232: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8233: LD_EXP 9
8237: PUSH
8238: LD_EXP 10
8242: AND
8243: IFFALSE 8337
8245: GO 8247
8247: DISABLE
// begin DialogueOn ;
8248: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8252: LD_INT 47
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL_OW 321
8262: PUSH
8263: LD_INT 2
8265: EQUAL
8266: IFFALSE 8294
// begin Say ( Burlak , D7b-Bur-1 ) ;
8268: LD_EXP 34
8272: PPUSH
8273: LD_STRING D7b-Bur-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8280: LD_EXP 40
8284: PPUSH
8285: LD_STRING D7b-Pla-1
8287: PPUSH
8288: CALL_OW 88
// end else
8292: GO 8318
// begin Say ( Burlak , D7a-Bur-1 ) ;
8294: LD_EXP 34
8298: PPUSH
8299: LD_STRING D7a-Bur-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8306: LD_EXP 40
8310: PPUSH
8311: LD_STRING D7a-Pla-1
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8322: LD_STRING M2
8324: PPUSH
8325: CALL_OW 337
// hasToBuildTank := true ;
8329: LD_ADDR_EXP 11
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// end ;
8337: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8338: LD_EXP 4
8342: PUSH
8343: LD_EXP 9
8347: NOT
8348: PUSH
8349: LD_EXP 10
8353: NOT
8354: OR
8355: PUSH
8356: LD_EXP 11
8360: OR
8361: AND
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 3
8375: PUSH
8376: LD_INT 91
8378: PUSH
8379: LD_INT 106
8381: PUSH
8382: LD_INT 32
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: AND
8403: IFFALSE 8512
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
// begin enable ;
8411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8412: LD_ADDR_VAR 0 1
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_INT 106
8435: PUSH
8436: LD_INT 32
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 69
8456: ST_TO_ADDR
// InGameOn ;
8457: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8461: LD_VAR 0 1
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8474: LD_VAR 0 1
8478: PPUSH
8479: LD_INT 66
8481: PPUSH
8482: LD_INT 99
8484: PPUSH
8485: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8489: LD_EXP 40
8493: PPUSH
8494: LD_STRING D8-Pla-1
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$3 ) ;
8501: LD_INT 105
8503: PPUSH
8504: CALL_OW 67
// InGameOff ;
8508: CALL_OW 9
// end ;
8512: PPOPN 1
8514: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8515: LD_INT 21
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 23
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 30
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 30
8553: PUSH
8554: LD_INT 31
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 70
8575: PUSH
8576: LD_EXP 31
8580: NOT
8581: AND
8582: IFFALSE 8793
8584: GO 8586
8586: DISABLE
8587: LD_INT 0
8589: PPUSH
// begin enable ;
8590: ENABLE
// InGameOn ;
8591: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: LD_INT 21
8602: PPUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 23
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 30
8638: PUSH
8639: LD_INT 31
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 70
8660: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8661: LD_EXP 40
8665: PPUSH
8666: LD_VAR 0 1
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: CALL_OW 112
// wait ( 0 0$2 ) ;
8679: LD_INT 70
8681: PPUSH
8682: CALL_OW 67
// ComHold ( Platonov ) ;
8686: LD_EXP 40
8690: PPUSH
8691: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8695: LD_EXP 40
8699: PPUSH
8700: LD_STRING D6-Pla-1
8702: PPUSH
8703: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8707: LD_EXP 34
8711: PPUSH
8712: LD_STRING D6-Bur-1
8714: PPUSH
8715: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8719: LD_VAR 0 1
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8732: LD_VAR 0 1
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PPUSH
8741: CALL_OW 266
8745: PUSH
8746: LD_INT 31
8748: EQUAL
8749: IFFALSE 8771
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8751: LD_INT 106
8753: PPUSH
8754: CALL_OW 274
8758: PPUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_INT 10
8764: PPUSH
8765: CALL_OW 276
8769: GO 8789
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8771: LD_INT 106
8773: PPUSH
8774: CALL_OW 274
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 30
8784: PPUSH
8785: CALL_OW 276
// InGameOff ;
8789: CALL_OW 9
// end ;
8793: PPOPN 1
8795: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8796: LD_EXP 4
8800: PUSH
8801: LD_INT 21
8803: PPUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 23
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 71
8843: AND
8844: IFFALSE 9101
8846: GO 8848
8848: DISABLE
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
// begin enable ;
8853: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_INT 21
8861: PPUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 3
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 21
8884: PUSH
8885: LD_INT 3
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 71
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: ST_TO_ADDR
// InGameOn ;
8906: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8910: LD_EXP 40
8914: PPUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8924: LD_EXP 40
8928: PPUSH
8929: LD_STRING DPlatAngry
8931: PPUSH
8932: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8936: LD_EXP 34
8940: PPUSH
8941: LD_STRING D6-Bur-1
8943: PPUSH
8944: CALL_OW 88
// RemoveUnit ( tmp ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 64
// InGameOff ;
8957: CALL_OW 9
// amount := 0 ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 266
8978: PUSH
8979: LD_INT 31
8981: DOUBLE
8982: EQUAL
8983: IFTRUE 8987
8985: GO 8998
8987: POP
// amount := 10 ; b_lab :
8988: LD_ADDR_VAR 0 2
8992: PUSH
8993: LD_INT 10
8995: ST_TO_ADDR
8996: GO 9075
8998: LD_INT 6
9000: DOUBLE
9001: EQUAL
9002: IFTRUE 9006
9004: GO 9017
9006: POP
// amount := 20 ; b_armoury :
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 20
9014: ST_TO_ADDR
9015: GO 9075
9017: LD_INT 4
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9036
9025: POP
// amount := 30 ; b_workshop :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 30
9033: ST_TO_ADDR
9034: GO 9075
9036: LD_INT 2
9038: DOUBLE
9039: EQUAL
9040: IFTRUE 9044
9042: GO 9055
9044: POP
// amount := 40 ; b_oil_power :
9045: LD_ADDR_VAR 0 2
9049: PUSH
9050: LD_INT 40
9052: ST_TO_ADDR
9053: GO 9075
9055: LD_INT 26
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9074
9063: POP
// amount := 20 ; end ;
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 20
9071: ST_TO_ADDR
9072: GO 9075
9074: POP
// if amount then
9075: LD_VAR 0 2
9079: IFFALSE 9101
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9081: LD_INT 106
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: LD_VAR 0 2
9096: PPUSH
9097: CALL_OW 276
// end ;
9101: PPOPN 2
9103: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9104: LD_INT 22
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 92
9116: PUSH
9117: LD_INT 112
9119: PUSH
9120: LD_INT 155
9122: PUSH
9123: LD_INT 8
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 69
9140: PUSH
9141: LD_INT 2
9143: LESS
9144: PUSH
9145: LD_EXP 34
9149: PPUSH
9150: LD_INT 112
9152: PPUSH
9153: LD_INT 155
9155: PPUSH
9156: CALL_OW 297
9160: PUSH
9161: LD_INT 8
9163: LESS
9164: AND
9165: IFFALSE 9399
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9173: LD_INT 112
9175: PPUSH
9176: LD_INT 155
9178: PPUSH
9179: LD_INT 3
9181: PPUSH
9182: LD_INT 4
9184: NEG
9185: PPUSH
9186: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9190: LD_INT 1
9192: PPUSH
9193: LD_EXP 34
9197: PPUSH
9198: CALL_OW 471
// uc_side := 1 ;
9202: LD_ADDR_OWVAR 20
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// uc_nation := 1 ;
9210: LD_ADDR_OWVAR 21
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: LD_STRING Dickens
9225: PPUSH
9226: CALL_OW 25
9230: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9231: LD_VAR 0 1
9235: PPUSH
9236: LD_INT 112
9238: PPUSH
9239: LD_INT 155
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 48
// wait ( 0 0$2 ) ;
9249: LD_INT 70
9251: PPUSH
9252: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: LD_EXP 34
9265: PPUSH
9266: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9270: LD_VAR 0 1
9274: PPUSH
9275: LD_STRING DUsSpawnSol
9277: PPUSH
9278: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9282: LD_INT 1
9284: PPUSH
9285: LD_EXP 34
9289: PPUSH
9290: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9294: LD_INT 112
9296: PPUSH
9297: LD_INT 155
9299: PPUSH
9300: LD_INT 3
9302: PPUSH
9303: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_INT 77
9314: PPUSH
9315: LD_INT 152
9317: PPUSH
9318: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9322: LD_INT 35
9324: PPUSH
9325: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: CALL_OW 302
9338: NOT
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: LD_INT 77
9347: PPUSH
9348: LD_INT 152
9350: PPUSH
9351: CALL_OW 307
9355: OR
9356: IFFALSE 9322
// if not IsOk ( Dickens ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: IFFALSE 9372
// exit ;
9370: GO 9399
// RemoveUnit ( Dickens ) ;
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_EXP 3
9390: PUSH
9391: LD_STRING Dickens
9393: STR
9394: PPUSH
9395: CALL_OW 38
// end ;
9399: PPOPN 1
9401: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9402: LD_EXP 34
9406: PPUSH
9407: CALL_OW 256
9411: PUSH
9412: LD_INT 600
9414: LESS
9415: IFFALSE 9432
9417: GO 9419
9419: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9420: LD_EXP 34
9424: PPUSH
9425: LD_STRING DUsSpawnBur
9427: PPUSH
9428: CALL_OW 88
9432: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9433: LD_EXP 12
9437: IFFALSE 10499
9439: GO 9441
9441: DISABLE
9442: LD_INT 0
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
// begin hasToBuildTank := false ;
9448: LD_ADDR_EXP 11
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9456: LD_ADDR_EXP 5
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 21
9481: PUSH
9482: LD_INT 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: ST_TO_ADDR
// InGameOn ;
9498: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9502: LD_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: PPUSH
9511: CALL_OW 85
// wait ( 0 0$1 ) ;
9515: LD_INT 35
9517: PPUSH
9518: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9522: LD_EXP 34
9526: PPUSH
9527: LD_STRING D9-Bur-1
9529: PPUSH
9530: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9534: LD_EXP 40
9538: PPUSH
9539: LD_VAR 0 2
9543: PUSH
9544: LD_INT 1
9546: ARRAY
9547: PPUSH
9548: CALL_OW 112
// p := 0 ;
9552: LD_ADDR_VAR 0 3
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9560: LD_INT 35
9562: PPUSH
9563: CALL_OW 67
// p := p + 1 ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9581: LD_EXP 40
9585: PPUSH
9586: LD_VAR 0 2
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: CALL_OW 296
9599: PUSH
9600: LD_INT 8
9602: LESS
9603: PUSH
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 8
9611: GREATER
9612: OR
9613: IFFALSE 9560
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9615: LD_EXP 40
9619: PPUSH
9620: LD_VAR 0 2
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PPUSH
9629: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9633: LD_EXP 40
9637: PPUSH
9638: LD_STRING D9-Pla-1
9640: PPUSH
9641: CALL_OW 88
// ComFree ( Platonov ) ;
9645: LD_EXP 40
9649: PPUSH
9650: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9654: LD_EXP 40
9658: PPUSH
9659: LD_INT 64
9661: PPUSH
9662: LD_INT 98
9664: PPUSH
9665: CALL_OW 171
// InGameOff ;
9669: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9673: LD_STRING M3
9675: PPUSH
9676: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9680: LD_EXP 41
9684: PPUSH
9685: LD_INT 70
9687: PPUSH
9688: LD_INT 108
9690: PPUSH
9691: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9695: LD_EXP 41
9699: PPUSH
9700: CALL_OW 200
// wait ( 1 ) ;
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 67
// ComExit ( Belkov ) ;
9711: LD_EXP 36
9715: PPUSH
9716: CALL 54793 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9720: LD_EXP 36
9724: PPUSH
9725: LD_INT 113
9727: PPUSH
9728: LD_INT 104
9730: PPUSH
9731: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9735: LD_EXP 36
9739: PPUSH
9740: LD_INT 116
9742: PPUSH
9743: LD_INT 108
9745: PPUSH
9746: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9750: LD_INT 35
9752: PPUSH
9753: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9757: LD_INT 22
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 91
9779: PUSH
9780: LD_INT 71
9782: PUSH
9783: LD_INT 8
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: IFFALSE 9750
// InGameOn ;
9802: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 91
9833: PUSH
9834: LD_INT 71
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: ST_TO_ADDR
// if belkovTeam < 3 then
9855: LD_EXP 45
9859: PUSH
9860: LD_INT 3
9862: LESS
9863: IFFALSE 9948
// begin for i := belkovTeam to 3 do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_EXP 45
9875: DEC
9876: ST_TO_ADDR
9877: LD_INT 3
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9946
// begin un := kirovBaseSquad [ 1 ] ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_EXP 43
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9897: LD_ADDR_EXP 43
9901: PUSH
9902: LD_EXP 43
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 3
9914: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9915: LD_ADDR_EXP 45
9919: PUSH
9920: LD_EXP 45
9924: PPUSH
9925: LD_EXP 45
9929: PUSH
9930: LD_INT 1
9932: PLUS
9933: PPUSH
9934: LD_VAR 0 4
9938: PPUSH
9939: CALL_OW 1
9943: ST_TO_ADDR
// end ;
9944: GO 9880
9946: POP
9947: POP
// end ; if Kirilenkova then
9948: LD_EXP 37
9952: IFFALSE 9976
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9954: LD_ADDR_EXP 45
9958: PUSH
9959: LD_EXP 45
9963: PPUSH
9964: LD_EXP 37
9968: PPUSH
9969: CALL 54395 0 2
9973: ST_TO_ADDR
9974: GO 10015
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9976: LD_ADDR_EXP 45
9980: PUSH
9981: LD_EXP 45
9985: PPUSH
9986: LD_EXP 43
9990: PPUSH
9991: LD_INT 25
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 72
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: CALL 54395 0 2
10014: ST_TO_ADDR
// ComExit ( Kurin ) ;
10015: LD_EXP 38
10019: PPUSH
10020: CALL 54793 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10024: LD_EXP 38
10028: PPUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_INT 1
10036: ARRAY
10037: PPUSH
10038: CALL_OW 179
// wait ( 0 0$1 ) ;
10042: LD_INT 35
10044: PPUSH
10045: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10049: LD_VAR 0 2
10053: PUSH
10054: LD_INT 1
10056: ARRAY
10057: PPUSH
10058: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PPUSH
10076: CALL_OW 311
10080: ST_TO_ADDR
// ComExit ( un ) ;
10081: LD_VAR 0 4
10085: PPUSH
10086: CALL 54793 0 1
// wait ( 0 0$1 ) ;
10090: LD_INT 35
10092: PPUSH
10093: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_EXP 38
10106: PPUSH
10107: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10111: LD_EXP 36
10115: PPUSH
10116: LD_VAR 0 2
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10129: LD_INT 10
10131: PPUSH
10132: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10136: LD_EXP 38
10140: PPUSH
10141: LD_STRING D10-Kur-1
10143: PPUSH
10144: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10148: LD_EXP 36
10152: PPUSH
10153: LD_INT 122
10155: PPUSH
10156: LD_INT 112
10158: PPUSH
10159: CALL_OW 176
// wait ( 0 0$2 ) ;
10163: LD_INT 70
10165: PPUSH
10166: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10170: LD_EXP 36
10174: PPUSH
10175: LD_STRING D10-Bel-1
10177: PPUSH
10178: CALL_OW 88
// if belkovBrother then
10182: LD_EXP 32
10186: IFFALSE 10238
// begin Say ( Burlak , D10-Bur-1 ) ;
10188: LD_EXP 34
10192: PPUSH
10193: LD_STRING D10-Bur-1
10195: PPUSH
10196: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10200: LD_EXP 36
10204: PPUSH
10205: LD_STRING D10-Bel-2
10207: PPUSH
10208: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10212: LD_EXP 34
10216: PPUSH
10217: LD_STRING D10-Bur-2
10219: PPUSH
10220: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10224: LD_EXP 38
10228: PPUSH
10229: LD_STRING D10-Kur-2a
10231: PPUSH
10232: CALL_OW 88
// end else
10236: GO 10250
// begin Say ( Kurin , D10-Kur-2 ) end ;
10238: LD_EXP 38
10242: PPUSH
10243: LD_STRING D10-Kur-2
10245: PPUSH
10246: CALL_OW 88
// wait ( 0 0$2 ) ;
10250: LD_INT 70
10252: PPUSH
10253: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10257: LD_EXP 38
10261: PPUSH
10262: LD_STRING D10-Kur-2b
10264: PPUSH
10265: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10269: LD_VAR 0 4
10273: PPUSH
10274: LD_INT 66
10276: PPUSH
10277: LD_INT 97
10279: PPUSH
10280: CALL_OW 111
// wait ( 0 0$5 ) ;
10284: LD_INT 175
10286: PPUSH
10287: CALL_OW 67
// InGameOff ;
10291: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10295: LD_EXP 33
10299: PPUSH
10300: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10304: LD_STRING M4
10306: PPUSH
10307: CALL_OW 337
// wait ( 0 0$6 ) ;
10311: LD_INT 210
10313: PPUSH
10314: CALL_OW 67
// kurinDontWannaTalk := true ;
10318: LD_ADDR_EXP 5
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10326: LD_INT 140
10328: PPUSH
10329: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10340: LD_EXP 34
10344: PPUSH
10345: CALL_OW 310
10349: PUSH
10350: LD_EXP 34
10354: PPUSH
10355: LD_INT 106
10357: PPUSH
10358: CALL_OW 296
10362: PUSH
10363: LD_INT 12
10365: LESS
10366: OR
10367: IFFALSE 10333
// DialogueOn ;
10369: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10373: LD_EXP 40
10377: PPUSH
10378: LD_STRING D11-Pla-1
10380: PPUSH
10381: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10385: LD_EXP 34
10389: PPUSH
10390: LD_STRING D11-Bur-1
10392: PPUSH
10393: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 69
10425: PUSH
10426: LD_INT 1
10428: GREATER
10429: IFFALSE 10443
// Say ( Burlak , D11-Bur-1a ) ;
10431: LD_EXP 34
10435: PPUSH
10436: LD_STRING D11-Bur-1a
10438: PPUSH
10439: CALL_OW 88
// DialogueOff ;
10443: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10447: LD_ADDR_EXP 8
10451: PUSH
10452: LD_INT 160
10454: PUSH
10455: LD_INT 150
10457: PUSH
10458: LD_INT 140
10460: PUSH
10461: LD_INT 120
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_OWVAR 67
10474: ARRAY
10475: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10476: LD_STRING M5
10478: PPUSH
10479: CALL_OW 337
// kirovHasTank := true ;
10483: LD_ADDR_EXP 6
10487: PUSH
10488: LD_INT 1
10490: ST_TO_ADDR
// hasToBuildTank := true ;
10491: LD_ADDR_EXP 11
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// end ;
10499: PPOPN 4
10501: END
// every 0 0$2 trigger allianceAttacked do
10502: LD_EXP 13
10506: IFFALSE 10545
10508: GO 10510
10510: DISABLE
// begin DialogueOn ;
10511: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10515: LD_EXP 38
10519: PPUSH
10520: LD_STRING DArestKur
10522: PPUSH
10523: CALL_OW 88
// dwait ( 0 0$1 ) ;
10527: LD_INT 35
10529: PPUSH
10530: CALL_OW 68
// YouLost ( SelfAttack ) ;
10534: LD_STRING SelfAttack
10536: PPUSH
10537: CALL_OW 104
// DialogueOff ;
10541: CALL_OW 7
// end ;
10545: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10546: LD_INT 22
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 21
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PPUSH
10570: CALL_OW 69
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_INT 3
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PPUSH
10599: CALL_OW 69
10603: GREATEREQUAL
10604: PUSH
10605: LD_EXP 6
10609: AND
10610: IFFALSE 10780
10612: GO 10614
10614: DISABLE
// begin hasToBuildTank := false ;
10615: LD_ADDR_EXP 11
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// blockNorth := false ;
10623: LD_ADDR_EXP 7
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// InGameOn ;
10631: CALL_OW 8
// wait ( 0 0$2 ) ;
10635: LD_INT 70
10637: PPUSH
10638: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10642: LD_INT 106
10644: PPUSH
10645: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10649: LD_EXP 40
10653: PPUSH
10654: LD_INT 65
10656: PPUSH
10657: LD_INT 97
10659: PPUSH
10660: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10664: LD_EXP 40
10668: PPUSH
10669: LD_EXP 34
10673: PPUSH
10674: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10678: LD_EXP 34
10682: PPUSH
10683: LD_STRING D12-Bur-1
10685: PPUSH
10686: CALL_OW 88
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10697: LD_EXP 40
10701: PPUSH
10702: LD_STRING D12-Pla-1
10704: PPUSH
10705: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10709: LD_EXP 34
10713: PPUSH
10714: LD_STRING D12-Bur-2
10716: PPUSH
10717: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10721: LD_EXP 40
10725: PPUSH
10726: LD_STRING D12-Pla-2
10728: PPUSH
10729: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10733: LD_EXP 34
10737: PPUSH
10738: LD_STRING D12-Bur-3
10740: PPUSH
10741: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10745: LD_EXP 40
10749: PPUSH
10750: LD_STRING D12-Pla-3
10752: PPUSH
10753: CALL_OW 88
// hasAllTanks := true ;
10757: LD_ADDR_EXP 14
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// InGameOff ;
10765: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10769: LD_STRING M6
10771: PPUSH
10772: CALL_OW 337
// PrepareAmerican ;
10776: CALL 3956 0 0
// end ;
10780: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10781: LD_EXP 17
10785: IFFALSE 12549
10787: GO 10789
10789: DISABLE
10790: LD_INT 0
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
// begin PrepareAmericanTrap ;
10799: CALL 4756 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_EXP 48
10812: PPUSH
10813: LD_INT 26
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 72
10827: PUSH
10828: LD_INT 1
10830: ARRAY
10831: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10832: LD_INT 22
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: LD_INT 21
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 60
10861: PUSH
10862: EMPTY
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 69
10874: PPUSH
10875: CALL_OW 141
// InGameOn ;
10879: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10883: LD_INT 69
10885: PPUSH
10886: LD_INT 22
10888: PPUSH
10889: CALL_OW 86
// wait ( 0 0$1 ) ;
10893: LD_INT 35
10895: PPUSH
10896: CALL_OW 67
// DialogueOn ;
10900: CALL_OW 6
// game_speed := 4 ;
10904: LD_ADDR_OWVAR 65
10908: PUSH
10909: LD_INT 4
10911: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10912: LD_VAR 0 2
10916: PPUSH
10917: LD_STRING D13-Sol1-1
10919: PPUSH
10920: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10924: LD_EXP 36
10928: PPUSH
10929: LD_STRING D13-Bel-1
10931: PPUSH
10932: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10936: LD_EXP 38
10940: PPUSH
10941: LD_STRING D13-Kur-1
10943: PPUSH
10944: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10948: LD_INT 10
10950: PPUSH
10951: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10955: LD_EXP 36
10959: PPUSH
10960: LD_STRING D13-Bel-2
10962: PPUSH
10963: CALL_OW 94
// DialogueOff ;
10967: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10971: LD_EXP 36
10975: PPUSH
10976: LD_INT 76
10978: PPUSH
10979: LD_INT 20
10981: PPUSH
10982: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10986: LD_EXP 45
10990: PPUSH
10991: LD_INT 72
10993: PPUSH
10994: LD_INT 20
10996: PPUSH
10997: CALL_OW 111
// wait ( 0 0$2 ) ;
11001: LD_INT 70
11003: PPUSH
11004: CALL_OW 67
// for i in usTrapForces do
11008: LD_ADDR_VAR 0 1
11012: PUSH
11013: LD_EXP 48
11017: PUSH
11018: FOR_IN
11019: IFFALSE 11052
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11021: LD_VAR 0 1
11025: PPUSH
11026: LD_INT 7
11028: PPUSH
11029: LD_INT 0
11031: PPUSH
11032: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_EXP 36
11045: PPUSH
11046: CALL_OW 119
// end ;
11050: GO 11018
11052: POP
11053: POP
// wait ( 0 0$0.3 ) ;
11054: LD_INT 10
11056: PPUSH
11057: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11061: LD_EXP 48
11065: PPUSH
11066: LD_INT 65
11068: PPUSH
11069: LD_INT 18
11071: PPUSH
11072: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11076: LD_INT 70
11078: PPUSH
11079: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11083: LD_EXP 48
11087: PPUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 3
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 72
11102: PUSH
11103: LD_INT 3
11105: GREATER
11106: IFFALSE 11076
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11108: LD_INT 65
11110: PPUSH
11111: LD_INT 18
11113: PPUSH
11114: LD_INT 3
11116: PPUSH
11117: LD_INT 26
11119: NEG
11120: PPUSH
11121: CALL_OW 330
// DialogueOn ;
11125: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11129: LD_VAR 0 2
11133: PPUSH
11134: LD_STRING D14-Sol1-1
11136: PPUSH
11137: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11141: LD_EXP 36
11145: PPUSH
11146: LD_STRING D14-Bel-1
11148: PPUSH
11149: CALL_OW 88
// DialogueOff ;
11153: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11157: LD_INT 65
11159: PPUSH
11160: LD_INT 18
11162: PPUSH
11163: LD_INT 3
11165: PPUSH
11166: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11170: LD_EXP 45
11174: PPUSH
11175: LD_INT 31
11177: PPUSH
11178: LD_INT 9
11180: PPUSH
11181: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11185: LD_EXP 48
11189: PPUSH
11190: LD_INT 50
11192: PPUSH
11193: LD_INT 16
11195: PPUSH
11196: CALL_OW 174
// wait ( 0 0$2 ) ;
11200: LD_INT 70
11202: PPUSH
11203: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11207: LD_ADDR_VAR 0 6
11211: PUSH
11212: LD_EXP 36
11216: PPUSH
11217: CALL_OW 310
11221: ST_TO_ADDR
// if not belkovTank then
11222: LD_VAR 0 6
11226: NOT
11227: IFFALSE 11267
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11229: LD_ADDR_VAR 0 6
11233: PUSH
11234: LD_INT 22
11236: PUSH
11237: LD_INT 6
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PPUSH
11258: CALL_OW 69
11262: PUSH
11263: LD_INT 1
11265: ARRAY
11266: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11267: LD_EXP 36
11271: PPUSH
11272: LD_INT 58
11274: PPUSH
11275: LD_INT 21
11277: PPUSH
11278: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11282: LD_EXP 36
11286: PPUSH
11287: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11291: LD_EXP 36
11295: PPUSH
11296: LD_INT 53
11298: PPUSH
11299: LD_INT 18
11301: PPUSH
11302: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11306: LD_EXP 36
11310: PPUSH
11311: LD_INT 31
11313: PPUSH
11314: LD_INT 9
11316: PPUSH
11317: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11321: LD_INT 35
11323: PPUSH
11324: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11328: LD_ADDR_VAR 0 1
11332: PUSH
11333: LD_EXP 36
11337: PUSH
11338: LD_EXP 45
11342: UNION
11343: PUSH
11344: LD_VAR 0 6
11348: UNION
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11382
// if GetLives ( i ) < 800 then
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 256
11362: PUSH
11363: LD_INT 800
11365: LESS
11366: IFFALSE 11380
// SetLives ( i , 800 ) ;
11368: LD_VAR 0 1
11372: PPUSH
11373: LD_INT 800
11375: PPUSH
11376: CALL_OW 234
11380: GO 11350
11382: POP
11383: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11384: LD_EXP 36
11388: PPUSH
11389: LD_INT 31
11391: PPUSH
11392: LD_INT 9
11394: PPUSH
11395: CALL_OW 297
11399: PUSH
11400: LD_INT 4
11402: LESS
11403: IFFALSE 11321
// for i := 1 to Difficulty do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: DOUBLE
11411: LD_INT 1
11413: DEC
11414: ST_TO_ADDR
11415: LD_OWVAR 67
11419: PUSH
11420: FOR_TO
11421: IFFALSE 11463
// if i <= belkovTeam then
11423: LD_VAR 0 1
11427: PUSH
11428: LD_EXP 45
11432: LESSEQUAL
11433: IFFALSE 11461
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11435: LD_EXP 45
11439: PUSH
11440: LD_VAR 0 1
11444: ARRAY
11445: PPUSH
11446: LD_INT 600
11448: PPUSH
11449: LD_INT 800
11451: PPUSH
11452: CALL_OW 12
11456: PPUSH
11457: CALL_OW 234
11461: GO 11420
11463: POP
11464: POP
// SetLives ( Belkov , 820 ) ;
11465: LD_EXP 36
11469: PPUSH
11470: LD_INT 820
11472: PPUSH
11473: CALL_OW 234
// InGameOff ;
11477: CALL_OW 9
// DialogueOn ;
11481: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11485: LD_EXP 36
11489: PPUSH
11490: LD_STRING D14-Bel-1a
11492: PPUSH
11493: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11497: LD_EXP 38
11501: PPUSH
11502: LD_STRING D14-Kur-1
11504: PPUSH
11505: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_STRING D14-Bel-2
11516: PPUSH
11517: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11521: LD_EXP 38
11525: PPUSH
11526: LD_STRING D14-Kur-2
11528: PPUSH
11529: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11533: LD_EXP 34
11537: PPUSH
11538: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11542: LD_EXP 34
11546: PPUSH
11547: LD_STRING D14a-Bur-1
11549: PPUSH
11550: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11554: LD_EXP 40
11558: PPUSH
11559: LD_STRING D14a-Pla-1
11561: PPUSH
11562: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11566: LD_EXP 34
11570: PPUSH
11571: LD_STRING D14a-Bur-2
11573: PPUSH
11574: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11578: LD_EXP 40
11582: PPUSH
11583: LD_STRING D14a-Pla-2
11585: PPUSH
11586: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11590: LD_EXP 34
11594: PPUSH
11595: LD_STRING D14a-Bur-3
11597: PPUSH
11598: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11602: LD_EXP 40
11606: PPUSH
11607: LD_STRING D14a-Pla-3
11609: PPUSH
11610: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11614: LD_EXP 34
11618: PPUSH
11619: LD_STRING D14a-Bur-4
11621: PPUSH
11622: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11626: LD_EXP 40
11630: PPUSH
11631: LD_STRING D14a-Pla-4
11633: PPUSH
11634: CALL_OW 88
// DialogueOff ;
11638: CALL_OW 7
// belkovTrapped := true ;
11642: LD_ADDR_EXP 18
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11650: LD_EXP 48
11654: PPUSH
11655: LD_INT 68
11657: PPUSH
11658: LD_INT 16
11660: PPUSH
11661: CALL_OW 111
// if belkovTank then
11665: LD_VAR 0 6
11669: IFFALSE 11708
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11671: LD_EXP 48
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: LD_VAR 0 6
11684: PPUSH
11685: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11689: LD_EXP 48
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_INT 69
11700: PPUSH
11701: LD_INT 20
11703: PPUSH
11704: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11708: LD_EXP 36
11712: PPUSH
11713: LD_INT 40
11715: PPUSH
11716: LD_INT 17
11718: PPUSH
11719: CALL_OW 111
// AddComHold ( Belkov ) ;
11723: LD_EXP 36
11727: PPUSH
11728: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 44
11739: PUSH
11740: LD_INT 18
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 42
11749: PUSH
11750: LD_INT 16
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 40
11759: PUSH
11760: LD_INT 15
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 44
11769: PUSH
11770: LD_INT 20
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 42
11779: PUSH
11780: LD_INT 20
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 42
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 42
11799: PUSH
11800: LD_INT 8
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: LD_EXP 45
11825: PPUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11908
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11844: LD_VAR 0 1
11848: PPUSH
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 1
11856: ARRAY
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PUSH
11871: LD_INT 2
11873: ARRAY
11874: PPUSH
11875: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 3
11896: ST_TO_ADDR
// AddComCrawl ( i ) ;
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 197
// end ;
11906: GO 11841
11908: POP
11909: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11910: LD_EXP 45
11914: PPUSH
11915: LD_INT 25
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 72
11929: IFFALSE 11961
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11931: LD_EXP 45
11935: PPUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 4
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 72
11950: PPUSH
11951: LD_INT 38
11953: PPUSH
11954: LD_INT 18
11956: PPUSH
11957: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11961: LD_ADDR_VAR 0 7
11965: PUSH
11966: LD_INT 9450
11968: PUSH
11969: LD_INT 8400
11971: PUSH
11972: LD_INT 6650
11974: PUSH
11975: LD_INT 5250
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: LD_OWVAR 67
11988: ARRAY
11989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11990: LD_INT 35
11992: PPUSH
11993: CALL_OW 67
// timer := timer - 0 0$1 ;
11997: LD_ADDR_VAR 0 7
12001: PUSH
12002: LD_VAR 0 7
12006: PUSH
12007: LD_INT 35
12009: MINUS
12010: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12011: LD_INT 19
12013: PPUSH
12014: LD_INT 22
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 70
12028: IFFALSE 12038
// timer := 0 0$0 ;
12030: LD_ADDR_VAR 0 7
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// until timer <= 0 ;
12038: LD_VAR 0 7
12042: PUSH
12043: LD_INT 0
12045: LESSEQUAL
12046: IFFALSE 11990
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12048: LD_EXP 48
12052: PPUSH
12053: LD_INT 50
12055: PUSH
12056: EMPTY
12057: LIST
12058: PPUSH
12059: CALL_OW 72
12063: NOT
12064: IFFALSE 12068
// exit ;
12066: GO 12549
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_EXP 48
12077: PPUSH
12078: LD_INT 25
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: LD_INT 54
12093: PUSH
12094: EMPTY
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12110: LD_ADDR_VAR 0 5
12114: PUSH
12115: LD_EXP 48
12119: PPUSH
12120: LD_INT 25
12122: PUSH
12123: LD_INT 4
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: LD_INT 54
12135: PUSH
12136: EMPTY
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// for i in sol do
12152: LD_ADDR_VAR 0 1
12156: PUSH
12157: LD_VAR 0 4
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12179
// SetTag ( i , 0 ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 0
12172: PPUSH
12173: CALL_OW 109
12177: GO 12162
12179: POP
12180: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12181: LD_VAR 0 5
12185: PPUSH
12186: LD_INT 60
12188: PPUSH
12189: LD_INT 8
12191: PPUSH
12192: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12196: LD_INT 22
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 21
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: IFFALSE 12265
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12226: LD_INT 22
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 21
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: PPUSH
12255: LD_INT 53
12257: PPUSH
12258: LD_INT 24
12260: PPUSH
12261: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12265: LD_INT 18
12267: PPUSH
12268: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12272: LD_ADDR_VAR 0 4
12276: PUSH
12277: LD_EXP 48
12281: PPUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 50
12294: PUSH
12295: EMPTY
12296: LIST
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: LD_INT 54
12303: PUSH
12304: EMPTY
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 72
12320: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12321: LD_VAR 0 4
12325: PPUSH
12326: LD_INT 0
12328: PPUSH
12329: CALL 51976 0 2
12333: PUSH
12334: LD_VAR 0 4
12338: EQUAL
12339: IFFALSE 12378
// begin wait ( 0 0$3 ) ;
12341: LD_INT 105
12343: PPUSH
12344: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12348: LD_VAR 0 4
12352: PPUSH
12353: LD_INT 41
12355: PPUSH
12356: LD_INT 18
12358: PPUSH
12359: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12363: LD_VAR 0 5
12367: PPUSH
12368: LD_INT 60
12370: PPUSH
12371: LD_INT 8
12373: PPUSH
12374: CALL_OW 111
// end ; for i in sol do
12378: LD_ADDR_VAR 0 1
12382: PUSH
12383: LD_VAR 0 4
12387: PUSH
12388: FOR_IN
12389: IFFALSE 12464
// if GetLives ( i ) < 800 then
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 256
12400: PUSH
12401: LD_INT 800
12403: LESS
12404: IFFALSE 12435
// begin SetTag ( i , 1 ) ;
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_INT 60
12425: PPUSH
12426: LD_INT 8
12428: PPUSH
12429: CALL_OW 111
// end else
12433: GO 12462
// if GetLives ( i ) = 1000 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 1000
12447: EQUAL
12448: IFFALSE 12462
// SetTag ( i , 0 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 0
12457: PPUSH
12458: CALL_OW 109
12462: GO 12388
12464: POP
12465: POP
// until belkovDied or not sol ;
12466: LD_EXP 19
12470: PUSH
12471: LD_VAR 0 4
12475: NOT
12476: OR
12477: IFFALSE 12265
// if not sol then
12479: LD_VAR 0 4
12483: NOT
12484: IFFALSE 12488
// exit ;
12486: GO 12549
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12488: LD_VAR 0 4
12492: PUSH
12493: LD_VAR 0 5
12497: ADD
12498: PPUSH
12499: LD_INT 56
12501: PPUSH
12502: LD_INT 25
12504: PPUSH
12505: CALL_OW 111
// wait ( 0 0$30 ) ;
12509: LD_INT 1050
12511: PPUSH
12512: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12516: LD_EXP 48
12520: PPUSH
12521: LD_INT 66
12523: PPUSH
12524: LD_INT 96
12526: PPUSH
12527: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12531: LD_VAR 0 5
12535: PPUSH
12536: LD_VAR 0 4
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: CALL_OW 112
// end ;
12549: PPOPN 7
12551: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12552: LD_EXP 18
12556: PUSH
12557: LD_EXP 19
12561: NOT
12562: AND
12563: PUSH
12564: LD_INT 9
12566: PPUSH
12567: LD_INT 22
12569: PUSH
12570: LD_INT 3
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 70
12581: AND
12582: IFFALSE 12902
12584: GO 12586
12586: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12587: LD_STRING QAttackAm
12589: PPUSH
12590: CALL_OW 97
12594: PUSH
12595: LD_INT 1
12597: DOUBLE
12598: EQUAL
12599: IFTRUE 12603
12601: GO 12670
12603: POP
// begin initiative := true ;
12604: LD_ADDR_EXP 31
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// DialogueOn ;
12612: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12616: LD_EXP 34
12620: PPUSH
12621: LD_STRING D17-Bur-1
12623: PPUSH
12624: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12628: LD_EXP 40
12632: PPUSH
12633: LD_STRING D17-Pla-1
12635: PPUSH
12636: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12640: LD_EXP 34
12644: PPUSH
12645: LD_STRING D17-Bur-2
12647: PPUSH
12648: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12652: LD_EXP 40
12656: PPUSH
12657: LD_STRING D17-Pla-2
12659: PPUSH
12660: CALL_OW 94
// DialogueOff ;
12664: CALL_OW 7
// end ; 2 :
12668: GO 12832
12670: LD_INT 2
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12770
12678: POP
// begin initiative := true ;
12679: LD_ADDR_EXP 31
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// DialogueOn ;
12687: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12691: LD_EXP 34
12695: PPUSH
12696: LD_STRING D18-Bur-1
12698: PPUSH
12699: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12703: LD_EXP 40
12707: PPUSH
12708: LD_STRING D18-Pla-1
12710: PPUSH
12711: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12715: LD_EXP 34
12719: PPUSH
12720: LD_STRING D18-Bur-2
12722: PPUSH
12723: CALL_OW 88
// if not reinforcementsGained then
12727: LD_EXP 25
12731: NOT
12732: IFFALSE 12752
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12734: LD_EXP 40
12738: PPUSH
12739: LD_STRING D18-Pla-2
12741: PPUSH
12742: CALL_OW 94
// SendReinforcements ;
12746: CALL 3297 0 0
// end else
12750: GO 12764
// SayRadio ( Platonov , D22-Pla-1b ) ;
12752: LD_EXP 40
12756: PPUSH
12757: LD_STRING D22-Pla-1b
12759: PPUSH
12760: CALL_OW 94
// DialogueOff ;
12764: CALL_OW 7
// end ; 3 :
12768: GO 12832
12770: LD_INT 3
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12831
12778: POP
// begin if IsOk ( Gnyevko ) then
12779: LD_EXP 35
12783: PPUSH
12784: CALL_OW 302
12788: IFFALSE 12804
// Say ( Gnyevko , D19A-Gny-1 ) else
12790: LD_EXP 35
12794: PPUSH
12795: LD_STRING D19A-Gny-1
12797: PPUSH
12798: CALL_OW 88
12802: GO 12827
// if IsOk ( Kovalyuk ) then
12804: LD_EXP 39
12808: PPUSH
12809: CALL_OW 302
12813: IFFALSE 12827
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12815: LD_EXP 39
12819: PPUSH
12820: LD_STRING D19A-Kov-1
12822: PPUSH
12823: CALL_OW 88
// exit ;
12827: GO 12902
// end ; end ;
12829: GO 12832
12831: POP
// if IsOk ( Gnyevko ) then
12832: LD_EXP 35
12836: PPUSH
12837: CALL_OW 302
12841: IFFALSE 12867
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12843: LD_EXP 35
12847: PPUSH
12848: LD_STRING D19-Gny-1
12850: PPUSH
12851: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12855: LD_EXP 34
12859: PPUSH
12860: LD_STRING D19-Bur-1
12862: PPUSH
12863: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12867: LD_EXP 39
12871: PPUSH
12872: CALL_OW 302
12876: IFFALSE 12902
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12878: LD_EXP 39
12882: PPUSH
12883: LD_STRING D19-Kov-1
12885: PPUSH
12886: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12890: LD_EXP 34
12894: PPUSH
12895: LD_STRING D19-Bur-2
12897: PPUSH
12898: CALL_OW 88
// end ; end ;
12902: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12903: LD_EXP 18
12907: PUSH
12908: LD_EXP 19
12912: NOT
12913: AND
12914: PUSH
12915: LD_INT 16
12917: PPUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 3
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 70
12932: AND
12933: IFFALSE 13161
12935: GO 12937
12937: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12938: LD_STRING QAttackBw
12940: PPUSH
12941: CALL_OW 97
12945: PUSH
12946: LD_INT 1
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12997
12954: POP
// begin initiative := true ;
12955: LD_ADDR_EXP 31
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// DialogueOn ;
12963: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12967: LD_EXP 34
12971: PPUSH
12972: LD_STRING D21-Bur-1
12974: PPUSH
12975: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12979: LD_EXP 40
12983: PPUSH
12984: LD_STRING D21-Pla-1
12986: PPUSH
12987: CALL_OW 94
// DialogueOff ;
12991: CALL_OW 7
// end ; 2 :
12995: GO 13112
12997: LD_INT 2
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13100
13005: POP
// begin initiative := true ;
13006: LD_ADDR_EXP 31
13010: PUSH
13011: LD_INT 1
13013: ST_TO_ADDR
// DialogueOn ;
13014: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13018: LD_EXP 34
13022: PPUSH
13023: LD_STRING D22-Bur-1
13025: PPUSH
13026: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13030: LD_EXP 25
13034: NOT
13035: PUSH
13036: LD_EXP 22
13040: AND
13041: IFFALSE 13061
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13043: LD_EXP 40
13047: PPUSH
13048: LD_STRING D22-Pla-1
13050: PPUSH
13051: CALL_OW 94
// SendReinforcements ;
13055: CALL 3297 0 0
// end else
13059: GO 13094
// if not westOutpostDestroyed then
13061: LD_EXP 22
13065: NOT
13066: IFFALSE 13082
// SayRadio ( Platonov , D22-Pla-1a ) else
13068: LD_EXP 40
13072: PPUSH
13073: LD_STRING D22-Pla-1a
13075: PPUSH
13076: CALL_OW 94
13080: GO 13094
// SayRadio ( Platonov , D22-Pla-1b ) ;
13082: LD_EXP 40
13086: PPUSH
13087: LD_STRING D22-Pla-1b
13089: PPUSH
13090: CALL_OW 94
// DialogueOff ;
13094: CALL_OW 7
// end ; 3 :
13098: GO 13112
13100: LD_INT 3
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13111
13108: POP
// begin end ; end ;
13109: GO 13112
13111: POP
// ChangeMissionObjectives ( M9 ) ;
13112: LD_STRING M9
13114: PPUSH
13115: CALL_OW 337
// wait ( 0 0$1 ) ;
13119: LD_INT 35
13121: PPUSH
13122: CALL_OW 67
// if IsOk ( Gnyevko ) then
13126: LD_EXP 35
13130: PPUSH
13131: CALL_OW 302
13135: IFFALSE 13161
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13137: LD_EXP 35
13141: PPUSH
13142: LD_STRING D23-Gny-1
13144: PPUSH
13145: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13149: LD_EXP 34
13153: PPUSH
13154: LD_STRING D23-Bur-1
13156: PPUSH
13157: CALL_OW 88
// end ; end ;
13161: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13162: LD_EXP 18
13166: PUSH
13167: LD_EXP 19
13171: AND
13172: PUSH
13173: LD_EXP 28
13177: NOT
13178: AND
13179: PUSH
13180: LD_EXP 45
13184: PPUSH
13185: LD_INT 91
13187: PUSH
13188: LD_EXP 34
13192: PUSH
13193: LD_INT 8
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 72
13205: AND
13206: IFFALSE 13250
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
// begin for i in belkovTeam do
13214: LD_ADDR_VAR 0 1
13218: PUSH
13219: LD_EXP 45
13223: PUSH
13224: FOR_IN
13225: IFFALSE 13241
// SetSide ( i , 3 ) ;
13227: LD_VAR 0 1
13231: PPUSH
13232: LD_INT 3
13234: PPUSH
13235: CALL_OW 235
13239: GO 13224
13241: POP
13242: POP
// ChangeMissionObjectives ( M9a ) ;
13243: LD_STRING M9a
13245: PPUSH
13246: CALL_OW 337
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13253: LD_EXP 34
13257: PPUSH
13258: LD_EXP 36
13262: PPUSH
13263: CALL_OW 296
13267: PUSH
13268: LD_INT 6
13270: LESS
13271: PUSH
13272: LD_EXP 18
13276: AND
13277: PUSH
13278: LD_EXP 36
13282: PPUSH
13283: CALL_OW 302
13287: AND
13288: PUSH
13289: LD_INT 3
13291: PPUSH
13292: CALL_OW 463
13296: NOT
13297: AND
13298: IFFALSE 13613
13300: GO 13302
13302: DISABLE
13303: LD_INT 0
13305: PPUSH
13306: PPUSH
// begin InGameOn ;
13307: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13311: LD_EXP 34
13315: PPUSH
13316: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13320: LD_EXP 34
13324: PPUSH
13325: LD_INT 37
13327: PPUSH
13328: LD_INT 17
13330: PPUSH
13331: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13335: LD_EXP 34
13339: PPUSH
13340: LD_EXP 36
13344: PPUSH
13345: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13349: LD_EXP 36
13353: PPUSH
13354: LD_EXP 34
13358: PPUSH
13359: CALL_OW 119
// p := 0 ;
13363: LD_ADDR_VAR 0 2
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13371: LD_INT 35
13373: PPUSH
13374: CALL_OW 67
// p := p + 1 ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_VAR 0 2
13387: PUSH
13388: LD_INT 1
13390: PLUS
13391: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13392: LD_EXP 34
13396: PPUSH
13397: LD_EXP 36
13401: PPUSH
13402: CALL_OW 296
13406: PUSH
13407: LD_INT 4
13409: LESS
13410: PUSH
13411: LD_VAR 0 2
13415: PUSH
13416: LD_INT 6
13418: GREATER
13419: OR
13420: IFFALSE 13371
// ComTurnUnit ( Burlak , Belkov ) ;
13422: LD_EXP 34
13426: PPUSH
13427: LD_EXP 36
13431: PPUSH
13432: CALL_OW 119
// DialogueOn ;
13436: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13440: LD_EXP 36
13444: PPUSH
13445: LD_STRING D24-Bel-1
13447: PPUSH
13448: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13452: LD_EXP 34
13456: PPUSH
13457: LD_STRING D24-Bur-1
13459: PPUSH
13460: CALL_OW 88
// if belkovBrother then
13464: LD_EXP 32
13468: IFFALSE 13482
// Say ( Burlak , D24-Bur-1a ) ;
13470: LD_EXP 34
13474: PPUSH
13475: LD_STRING D24-Bur-1a
13477: PPUSH
13478: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13482: LD_EXP 36
13486: PPUSH
13487: LD_STRING D24-Bel-2
13489: PPUSH
13490: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13494: LD_EXP 34
13498: PPUSH
13499: LD_STRING D24-Bur-2
13501: PPUSH
13502: CALL_OW 88
// if vehCaptured then
13506: LD_EXP 16
13510: IFFALSE 13524
// Say ( Burlak , D24-Bur-2a ) ;
13512: LD_EXP 34
13516: PPUSH
13517: LD_STRING D24-Bur-2a
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13524: LD_EXP 40
13528: PPUSH
13529: LD_STRING D24-Pla-2
13531: PPUSH
13532: CALL_OW 94
// if not westOutpostDestroyed then
13536: LD_EXP 22
13540: NOT
13541: IFFALSE 13555
// SayRadio ( Platonov , D24-Pla-2a ) ;
13543: LD_EXP 40
13547: PPUSH
13548: LD_STRING D24-Pla-2a
13550: PPUSH
13551: CALL_OW 94
// DialogueOff ;
13555: CALL_OW 7
// InGameOff ;
13559: CALL_OW 9
// belkovSaved := true ;
13563: LD_ADDR_EXP 28
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_EXP 45
13580: PUSH
13581: LD_EXP 36
13585: UNION
13586: PUSH
13587: FOR_IN
13588: IFFALSE 13604
// SetSide ( i , 3 ) ;
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_INT 3
13597: PPUSH
13598: CALL_OW 235
13602: GO 13587
13604: POP
13605: POP
// ChangeMissionObjectives ( M9a ) ;
13606: LD_STRING M9a
13608: PPUSH
13609: CALL_OW 337
// end ;
13613: PPOPN 2
13615: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13616: LD_INT 3
13618: PPUSH
13619: LD_INT 22
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 95
13631: PUSH
13632: LD_INT 8
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PPUSH
13648: CALL 57668 0 2
13652: IFFALSE 13837
13654: GO 13656
13656: DISABLE
// begin DialogueOn ;
13657: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13661: LD_INT 49
13663: PPUSH
13664: LD_INT 57
13666: PPUSH
13667: LD_INT 3
13669: PPUSH
13670: LD_INT 12
13672: NEG
13673: PPUSH
13674: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13678: LD_INT 49
13680: PPUSH
13681: LD_INT 57
13683: PPUSH
13684: LD_INT 3
13686: PPUSH
13687: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13691: LD_INT 49
13693: PPUSH
13694: LD_INT 57
13696: PPUSH
13697: CALL_OW 84
// if not eastOutpostDiscovered then
13701: LD_EXP 21
13705: NOT
13706: IFFALSE 13746
// begin Say ( Burlak , D15-Bur-1 ) ;
13708: LD_EXP 34
13712: PPUSH
13713: LD_STRING D15-Bur-1
13715: PPUSH
13716: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13720: LD_EXP 35
13724: PPUSH
13725: LD_STRING D15-Gny-1
13727: PPUSH
13728: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13732: LD_EXP 39
13736: PPUSH
13737: LD_STRING D15-Kov-1
13739: PPUSH
13740: CALL_OW 88
// end else
13744: GO 13782
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13746: LD_EXP 39
13750: PPUSH
13751: LD_STRING D16-Kov-1
13753: PPUSH
13754: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13758: LD_EXP 34
13762: PPUSH
13763: LD_STRING D16-Bur-1
13765: PPUSH
13766: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13770: LD_EXP 35
13774: PPUSH
13775: LD_STRING D16-Gny-1
13777: PPUSH
13778: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13782: LD_EXP 34
13786: PPUSH
13787: LD_STRING D15-Bur-2
13789: PPUSH
13790: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13794: LD_EXP 39
13798: PPUSH
13799: LD_STRING D15-Kov-2
13801: PPUSH
13802: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13806: LD_EXP 34
13810: PPUSH
13811: LD_STRING D15-Bur-3
13813: PPUSH
13814: CALL_OW 88
// DialogueOff ;
13818: CALL_OW 7
// westOutpostDiscovered := true ;
13822: LD_ADDR_EXP 20
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13830: LD_STRING M7
13832: PPUSH
13833: CALL_OW 337
// end ;
13837: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13838: LD_INT 3
13840: PPUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 95
13853: PUSH
13854: LD_INT 15
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL_OW 69
13869: PPUSH
13870: CALL 57668 0 2
13874: IFFALSE 14015
13876: GO 13878
13878: DISABLE
// begin DialogueOn ;
13879: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13883: LD_INT 95
13885: PPUSH
13886: LD_INT 65
13888: PPUSH
13889: LD_INT 3
13891: PPUSH
13892: LD_INT 12
13894: NEG
13895: PPUSH
13896: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13900: LD_INT 95
13902: PPUSH
13903: LD_INT 65
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13913: LD_INT 95
13915: PPUSH
13916: LD_INT 65
13918: PPUSH
13919: CALL_OW 84
// if westOutpostDiscovered then
13923: LD_EXP 20
13927: IFFALSE 13967
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13929: LD_EXP 39
13933: PPUSH
13934: LD_STRING D16-Kov-1
13936: PPUSH
13937: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13941: LD_EXP 34
13945: PPUSH
13946: LD_STRING D16-Bur-1
13948: PPUSH
13949: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13953: LD_EXP 35
13957: PPUSH
13958: LD_STRING D16-Gny-1
13960: PPUSH
13961: CALL_OW 88
// end else
13965: GO 14003
// begin Say ( Burlak , D15-Bur-1 ) ;
13967: LD_EXP 34
13971: PPUSH
13972: LD_STRING D15-Bur-1
13974: PPUSH
13975: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13979: LD_EXP 35
13983: PPUSH
13984: LD_STRING D15-Gny-1
13986: PPUSH
13987: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13991: LD_EXP 39
13995: PPUSH
13996: LD_STRING D15-Kov-1
13998: PPUSH
13999: CALL_OW 88
// end ; DialogueOff ;
14003: CALL_OW 7
// eastOutpostDiscovered := true ;
14007: LD_ADDR_EXP 21
14011: PUSH
14012: LD_INT 1
14014: ST_TO_ADDR
// end ;
14015: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 50
14031: PUSH
14032: EMPTY
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 70
14043: PUSH
14044: LD_INT 0
14046: EQUAL
14047: PUSH
14048: LD_EXP 20
14052: AND
14053: IFFALSE 14097
14055: GO 14057
14057: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14058: LD_EXP 34
14062: PPUSH
14063: LD_STRING D20-Bur-1
14065: PPUSH
14066: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14070: LD_EXP 40
14074: PPUSH
14075: LD_STRING D20-Pla-1
14077: PPUSH
14078: CALL_OW 94
// westOutpostDestroyed := true ;
14082: LD_ADDR_EXP 22
14086: PUSH
14087: LD_INT 1
14089: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14090: LD_STRING M8
14092: PPUSH
14093: CALL_OW 337
// end ;
14097: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14098: LD_INT 15
14100: PPUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 50
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 70
14125: PUSH
14126: LD_INT 0
14128: EQUAL
14129: PUSH
14130: LD_EXP 21
14134: AND
14135: IFFALSE 14265
14137: GO 14139
14139: DISABLE
14140: LD_INT 0
14142: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14143: LD_EXP 34
14147: PPUSH
14148: LD_STRING D20-Bur-1
14150: PPUSH
14151: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14155: LD_EXP 40
14159: PPUSH
14160: LD_STRING D20-Pla-1
14162: PPUSH
14163: CALL_OW 94
// eastOutpostDestroyed := true ;
14167: LD_ADDR_EXP 23
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14175: LD_INT 35
14177: PPUSH
14178: CALL_OW 67
// stop_talking := true ;
14182: LD_ADDR_OWVAR 56
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 23
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PUSH
14235: FOR_IN
14236: IFFALSE 14255
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14238: LD_VAR 0 1
14242: PPUSH
14243: LD_INT 1
14245: PPUSH
14246: LD_INT 1500
14248: PPUSH
14249: CALL_OW 591
14253: GO 14235
14255: POP
14256: POP
// stop_talking := false ;
14257: LD_ADDR_OWVAR 56
14261: PUSH
14262: LD_INT 0
14264: ST_TO_ADDR
// end ;
14265: PPOPN 1
14267: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14268: LD_INT 19
14270: PPUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 3
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 21
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PPUSH
14295: CALL_OW 70
14299: IFFALSE 14407
14301: GO 14303
14303: DISABLE
// begin DialogueOn ;
14304: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14308: LD_INT 19
14310: PPUSH
14311: LD_INT 22
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 21
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 70
14339: PPUSH
14340: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14344: LD_EXP 34
14348: PPUSH
14349: LD_STRING D26-Bur-1
14351: PPUSH
14352: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14356: LD_EXP 39
14360: PPUSH
14361: LD_STRING D26-Kov-1
14363: PPUSH
14364: CALL_OW 88
// if IsOk ( Gnyevko ) then
14368: LD_EXP 35
14372: PPUSH
14373: CALL_OW 302
14377: IFFALSE 14403
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14379: LD_EXP 35
14383: PPUSH
14384: LD_STRING D26-Gny-1
14386: PPUSH
14387: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14391: LD_EXP 34
14395: PPUSH
14396: LD_STRING D26-Bur-2
14398: PPUSH
14399: CALL_OW 88
// end ; DialogueOff ;
14403: CALL_OW 7
// end ;
14407: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14408: LD_EXP 21
14412: PUSH
14413: LD_EXP 23
14417: NOT
14418: AND
14419: PUSH
14420: LD_INT 17
14422: PPUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 1000
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 70
14458: PUSH
14459: LD_INT 1
14461: GREATER
14462: AND
14463: IFFALSE 14526
14465: GO 14467
14467: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14468: LD_EXP 35
14472: PPUSH
14473: LD_STRING D16A-Gny-1
14475: PPUSH
14476: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14480: LD_EXP 39
14484: PPUSH
14485: LD_STRING D16A-Kov-1
14487: PPUSH
14488: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14492: LD_EXP 35
14496: PPUSH
14497: CALL_OW 302
14501: PUSH
14502: LD_EXP 39
14506: PPUSH
14507: CALL_OW 302
14511: OR
14512: IFFALSE 14526
// Say ( Burlak , D16A-Bur-1 ) ;
14514: LD_EXP 34
14518: PPUSH
14519: LD_STRING D16A-Bur-1
14521: PPUSH
14522: CALL_OW 88
// end ;
14526: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 9
14532: PPUSH
14533: CALL_OW 294
14537: IFFALSE 14550
14539: GO 14541
14541: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14542: LD_ADDR_EXP 24
14546: PUSH
14547: LD_INT 1
14549: ST_TO_ADDR
// end ;
14550: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: CALL_OW 294
14561: IFFALSE 14581
14563: GO 14565
14565: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14566: LD_ADDR_EXP 27
14570: PUSH
14571: LD_EXP 27
14575: PPUSH
14576: CALL 55756 0 1
14580: ST_TO_ADDR
14581: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14582: LD_INT 3
14584: PPUSH
14585: LD_INT 11
14587: PPUSH
14588: CALL_OW 294
14592: IFFALSE 14612
14594: GO 14596
14596: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14597: LD_ADDR_EXP 27
14601: PUSH
14602: LD_EXP 27
14606: PPUSH
14607: CALL 55756 0 1
14611: ST_TO_ADDR
14612: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14613: LD_INT 3
14615: PPUSH
14616: LD_INT 12
14618: PPUSH
14619: CALL_OW 294
14623: IFFALSE 14643
14625: GO 14627
14627: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14628: LD_ADDR_EXP 27
14632: PUSH
14633: LD_EXP 27
14637: PPUSH
14638: CALL 55756 0 1
14642: ST_TO_ADDR
14643: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14644: LD_INT 3
14646: PPUSH
14647: LD_INT 13
14649: PPUSH
14650: CALL_OW 294
14654: IFFALSE 14674
14656: GO 14658
14658: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14659: LD_ADDR_EXP 27
14663: PUSH
14664: LD_EXP 27
14668: PPUSH
14669: CALL 55756 0 1
14673: ST_TO_ADDR
14674: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14675: LD_INT 3
14677: PPUSH
14678: LD_INT 14
14680: PPUSH
14681: CALL_OW 294
14685: IFFALSE 14705
14687: GO 14689
14689: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14690: LD_ADDR_EXP 27
14694: PUSH
14695: LD_EXP 27
14699: PPUSH
14700: CALL 55756 0 1
14704: ST_TO_ADDR
14705: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14706: LD_EXP 27
14710: PUSH
14711: LD_INT 5
14713: GREATEREQUAL
14714: PUSH
14715: LD_EXP 14
14719: AND
14720: IFFALSE 14740
14722: GO 14724
14724: DISABLE
// begin allMapPointsSpotted := true ;
14725: LD_ADDR_EXP 26
14729: PUSH
14730: LD_INT 1
14732: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14733: LD_STRING M10
14735: PPUSH
14736: CALL_OW 337
// end ;
14740: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14741: LD_EXP 26
14745: PUSH
14746: LD_EXP 22
14750: AND
14751: IFFALSE 14763
14753: GO 14755
14755: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14756: LD_STRING M10a
14758: PPUSH
14759: CALL_OW 337
// end ;
14763: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14764: LD_EXP 14
14768: IFFALSE 15401
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
14777: PPUSH
14778: PPUSH
14779: PPUSH
// begin wasOutsideBeria := false ;
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_INT 0
14787: ST_TO_ADDR
// wantToTalk := false ;
14788: LD_ADDR_VAR 0 2
14792: PUSH
14793: LD_INT 0
14795: ST_TO_ADDR
// westOutpostReported := false ;
14796: LD_ADDR_VAR 0 4
14800: PUSH
14801: LD_INT 0
14803: ST_TO_ADDR
// eastOutpostReported := false ;
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: LD_INT 0
14811: ST_TO_ADDR
// timer := 0 0$0 ;
14812: LD_ADDR_VAR 0 1
14816: PUSH
14817: LD_INT 0
14819: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14820: LD_INT 70
14822: PPUSH
14823: CALL_OW 67
// timer := timer + 0 0$2 ;
14827: LD_ADDR_VAR 0 1
14831: PUSH
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 70
14839: PLUS
14840: ST_TO_ADDR
// if timer >= 0 0$30 then
14841: LD_VAR 0 1
14845: PUSH
14846: LD_INT 1050
14848: GREATEREQUAL
14849: IFFALSE 14859
// wantToTalk := true ;
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_INT 1
14858: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14859: LD_EXP 34
14863: PPUSH
14864: LD_EXP 40
14868: PPUSH
14869: CALL_OW 296
14873: PUSH
14874: LD_INT 9
14876: GREATER
14877: IFFALSE 14887
// wasOutsideBeria := true ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_INT 1
14886: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14887: LD_VAR 0 2
14891: PUSH
14892: LD_VAR 0 3
14896: AND
14897: PUSH
14898: LD_EXP 34
14902: PPUSH
14903: LD_EXP 40
14907: PPUSH
14908: CALL_OW 296
14912: PUSH
14913: LD_INT 8
14915: LESS
14916: PUSH
14917: LD_EXP 34
14921: PPUSH
14922: CALL_OW 310
14926: PPUSH
14927: LD_EXP 40
14931: PPUSH
14932: CALL_OW 296
14936: PUSH
14937: LD_INT 8
14939: LESS
14940: OR
14941: AND
14942: IFFALSE 15290
// begin timer := 0 0$0 ;
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 0
14951: ST_TO_ADDR
// wantToTalk := false ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// wasOutsideBeria := false ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14968: LD_EXP 40
14972: PPUSH
14973: CALL_OW 87
// DialogueOn ;
14977: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14981: LD_EXP 40
14985: PPUSH
14986: LD_STRING D25-Pla-1
14988: PPUSH
14989: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14993: LD_VAR 0 4
14997: NOT
14998: PUSH
14999: LD_VAR 0 5
15003: NOT
15004: AND
15005: PUSH
15006: LD_EXP 20
15010: AND
15011: PUSH
15012: LD_EXP 21
15016: AND
15017: IFFALSE 15097
// begin westOutpostReported := true ;
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// eastOutpostReported := true ;
15027: LD_ADDR_VAR 0 5
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15035: LD_EXP 34
15039: PPUSH
15040: LD_STRING D25-Bur-1
15042: PPUSH
15043: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15047: LD_EXP 24
15051: PUSH
15052: LD_EXP 22
15056: NOT
15057: AND
15058: IFFALSE 15095
// begin Say ( Burlak , D25b-Bur-1 ) ;
15060: LD_EXP 34
15064: PPUSH
15065: LD_STRING D25b-Bur-1
15067: PPUSH
15068: CALL_OW 88
// if not reinforcementsGained then
15072: LD_EXP 25
15076: NOT
15077: IFFALSE 15095
// begin Say ( Platonov , D25b-Pla-1 ) ;
15079: LD_EXP 40
15083: PPUSH
15084: LD_STRING D25b-Pla-1
15086: PPUSH
15087: CALL_OW 88
// SendReinforcements ( ) ;
15091: CALL 3297 0 0
// end ; end ; end else
15095: GO 15286
// if not westOutpostReported and westOutpostDiscovered then
15097: LD_VAR 0 4
15101: NOT
15102: PUSH
15103: LD_EXP 20
15107: AND
15108: IFFALSE 15180
// begin westOutpostReported := true ;
15110: LD_ADDR_VAR 0 4
15114: PUSH
15115: LD_INT 1
15117: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15118: LD_EXP 34
15122: PPUSH
15123: LD_STRING D25a-Bur-1b
15125: PPUSH
15126: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15130: LD_EXP 24
15134: PUSH
15135: LD_EXP 22
15139: NOT
15140: AND
15141: IFFALSE 15178
// begin Say ( Burlak , D25b-Bur-1 ) ;
15143: LD_EXP 34
15147: PPUSH
15148: LD_STRING D25b-Bur-1
15150: PPUSH
15151: CALL_OW 88
// if not reinforcementsGained then
15155: LD_EXP 25
15159: NOT
15160: IFFALSE 15178
// begin Say ( Platonov , D25b-Pla-1 ) ;
15162: LD_EXP 40
15166: PPUSH
15167: LD_STRING D25b-Pla-1
15169: PPUSH
15170: CALL_OW 88
// SendReinforcements ( ) ;
15174: CALL 3297 0 0
// end ; end ; end else
15178: GO 15286
// if not eastOutpostReported and eastOutpostDiscovered then
15180: LD_VAR 0 5
15184: NOT
15185: PUSH
15186: LD_EXP 21
15190: AND
15191: IFFALSE 15215
// begin eastOutpostReported := true ;
15193: LD_ADDR_VAR 0 5
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15201: LD_EXP 34
15205: PPUSH
15206: LD_STRING D25a-Bur-1a
15208: PPUSH
15209: CALL_OW 88
// end else
15213: GO 15286
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15215: LD_EXP 20
15219: NOT
15220: PUSH
15221: LD_EXP 21
15225: NOT
15226: OR
15227: IFFALSE 15255
// begin Say ( Burlak , D25a-Bur-1 ) ;
15229: LD_EXP 34
15233: PPUSH
15234: LD_STRING D25a-Bur-1
15236: PPUSH
15237: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15241: LD_EXP 40
15245: PPUSH
15246: LD_STRING D25c-Pla-1
15248: PPUSH
15249: CALL_OW 88
// end else
15253: GO 15286
// if not allMapPointsSpotted then
15255: LD_EXP 26
15259: NOT
15260: IFFALSE 15286
// begin Say ( Burlak , D25a-Bur-1 ) ;
15262: LD_EXP 34
15266: PPUSH
15267: LD_STRING D25a-Bur-1
15269: PPUSH
15270: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15274: LD_EXP 40
15278: PPUSH
15279: LD_STRING D25c-Pla-1a
15281: PPUSH
15282: CALL_OW 88
// end ; DialogueOff ;
15286: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15290: LD_EXP 26
15294: PUSH
15295: LD_EXP 22
15299: AND
15300: IFFALSE 14820
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15302: LD_INT 22
15304: PUSH
15305: LD_INT 3
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 21
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 91
15324: PUSH
15325: LD_EXP 40
15329: PUSH
15330: LD_INT 10
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: IFFALSE 15390
// begin if not belkovDied and not belkovSaved then
15349: LD_EXP 19
15353: NOT
15354: PUSH
15355: LD_EXP 28
15359: NOT
15360: AND
15361: IFFALSE 15384
// begin if Query ( QContMission ) = 1 then
15363: LD_STRING QContMission
15365: PPUSH
15366: CALL_OW 97
15370: PUSH
15371: LD_INT 1
15373: EQUAL
15374: IFFALSE 15382
// begin EndMission ;
15376: CALL 15404 0 0
// exit ;
15380: GO 15401
// end ; end else
15382: GO 15390
// begin EndMission ;
15384: CALL 15404 0 0
// exit ;
15388: GO 15401
// end ; end ; wait ( 0 0$10 ) ;
15390: LD_INT 350
15392: PPUSH
15393: CALL_OW 67
// until false ;
15397: LD_INT 0
15399: IFFALSE 15302
// end ;
15401: PPOPN 5
15403: END
// function EndMission ; var i , tmp ; begin
15404: LD_INT 0
15406: PPUSH
15407: PPUSH
15408: PPUSH
// if initiative then
15409: LD_EXP 31
15413: IFFALSE 15427
// AddMedal ( Initiative , 1 ) else
15415: LD_STRING Initiative
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 101
15425: GO 15458
// if not eastOutpostDestroyed then
15427: LD_EXP 23
15431: NOT
15432: IFFALSE 15447
// AddMedal ( Initiative , - 2 ) else
15434: LD_STRING Initiative
15436: PPUSH
15437: LD_INT 2
15439: NEG
15440: PPUSH
15441: CALL_OW 101
15445: GO 15458
// AddMedal ( Initiative , - 1 ) ;
15447: LD_STRING Initiative
15449: PPUSH
15450: LD_INT 1
15452: NEG
15453: PPUSH
15454: CALL_OW 101
// if not belkovDied and belkovSaved then
15458: LD_EXP 19
15462: NOT
15463: PUSH
15464: LD_EXP 28
15468: AND
15469: IFFALSE 15483
// AddMedal ( Belkov , 1 ) else
15471: LD_STRING Belkov
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 101
15481: GO 15578
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15483: LD_EXP 45
15487: PPUSH
15488: LD_INT 22
15490: PUSH
15491: LD_INT 3
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PPUSH
15498: CALL_OW 72
15502: IFFALSE 15516
// AddMedal ( Belkov , 2 ) else
15504: LD_STRING Belkov
15506: PPUSH
15507: LD_INT 2
15509: PPUSH
15510: CALL_OW 101
15514: GO 15578
// if belkovDied then
15516: LD_EXP 19
15520: IFFALSE 15535
// AddMedal ( Belkov , - 1 ) else
15522: LD_STRING Belkov
15524: PPUSH
15525: LD_INT 1
15527: NEG
15528: PPUSH
15529: CALL_OW 101
15533: GO 15578
// if not belkovSaved then
15535: LD_EXP 28
15539: NOT
15540: IFFALSE 15555
// AddMedal ( Belkov , - 2 ) else
15542: LD_STRING Belkov
15544: PPUSH
15545: LD_INT 2
15547: NEG
15548: PPUSH
15549: CALL_OW 101
15553: GO 15578
// if belkovDied and belkovSaved then
15555: LD_EXP 19
15559: PUSH
15560: LD_EXP 28
15564: AND
15565: IFFALSE 15578
// AddMedal ( Belkov , - 3 ) ;
15567: LD_STRING Belkov
15569: PPUSH
15570: LD_INT 3
15572: NEG
15573: PPUSH
15574: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15578: LD_EXP 30
15582: PUSH
15583: LD_INT 0
15585: EQUAL
15586: IFFALSE 15600
// AddMedal ( NoLosses , 1 ) else
15588: LD_STRING NoLosses
15590: PPUSH
15591: LD_INT 1
15593: PPUSH
15594: CALL_OW 101
15598: GO 15611
// AddMedal ( NoLosses , - 1 ) ;
15600: LD_STRING NoLosses
15602: PPUSH
15603: LD_INT 1
15605: NEG
15606: PPUSH
15607: CALL_OW 101
// GiveMedals ( Main ) ;
15611: LD_STRING Main
15613: PPUSH
15614: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15618: LD_INT 22
15620: PUSH
15621: LD_INT 3
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 23
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: PPUSH
15658: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15662: LD_EXP 34
15666: PPUSH
15667: LD_EXP 3
15671: PUSH
15672: LD_STRING Burlak
15674: STR
15675: PPUSH
15676: CALL_OW 38
// if IsLive ( Gnyevko ) then
15680: LD_EXP 35
15684: PPUSH
15685: CALL_OW 300
15689: IFFALSE 15709
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15691: LD_EXP 35
15695: PPUSH
15696: LD_EXP 3
15700: PUSH
15701: LD_STRING Gnyevko
15703: STR
15704: PPUSH
15705: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15709: LD_EXP 39
15713: PPUSH
15714: CALL_OW 300
15718: IFFALSE 15738
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15720: LD_EXP 39
15724: PPUSH
15725: LD_EXP 3
15729: PUSH
15730: LD_STRING Kovalyuk
15732: STR
15733: PPUSH
15734: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15738: LD_EXP 36
15742: PPUSH
15743: CALL_OW 300
15747: PUSH
15748: LD_EXP 28
15752: AND
15753: IFFALSE 15773
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15755: LD_EXP 36
15759: PPUSH
15760: LD_EXP 3
15764: PUSH
15765: LD_STRING Belkov
15767: STR
15768: PPUSH
15769: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15773: LD_EXP 37
15777: PPUSH
15778: CALL_OW 300
15782: IFFALSE 15802
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15784: LD_EXP 37
15788: PPUSH
15789: LD_EXP 3
15793: PUSH
15794: LD_STRING Kirilenkova
15796: STR
15797: PPUSH
15798: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15802: LD_INT 22
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 23
15814: PUSH
15815: LD_INT 3
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: PUSH
15842: LD_EXP 34
15846: PUSH
15847: LD_EXP 35
15851: PUSH
15852: LD_EXP 39
15856: PUSH
15857: LD_EXP 36
15861: PUSH
15862: LD_EXP 37
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: DIFF
15874: PPUSH
15875: LD_EXP 3
15879: PUSH
15880: LD_STRING burlakTeam
15882: STR
15883: PPUSH
15884: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15888: LD_INT 22
15890: PUSH
15891: LD_INT 6
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 23
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: LD_EXP 40
15932: PUSH
15933: LD_EXP 38
15937: PUSH
15938: LD_EXP 36
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: PUSH
15948: LD_EXP 45
15952: UNION
15953: DIFF
15954: PPUSH
15955: LD_EXP 3
15959: PUSH
15960: LD_STRING kirovTeam
15962: STR
15963: PPUSH
15964: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15968: LD_EXP 23
15972: PPUSH
15973: LD_STRING 02_EasternOutpostDestroyed
15975: PPUSH
15976: CALL_OW 39
// tmp := [ ] ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: EMPTY
15986: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_INT 3
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: PUSH
16021: FOR_IN
16022: IFFALSE 16098
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_VAR 0 2
16038: PPUSH
16039: CALL_OW 266
16043: PUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 267
16053: PUSH
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 250
16063: PUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL_OW 251
16073: PUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL_OW 254
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: PPUSH
16091: CALL 54395 0 2
16095: ST_TO_ADDR
16096: GO 16021
16098: POP
16099: POP
// SaveVariable ( tmp , 02_Beria ) ;
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_STRING 02_Beria
16107: PPUSH
16108: CALL_OW 39
// tmp := [ ] ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: EMPTY
16118: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: LD_INT 22
16126: PUSH
16127: LD_INT 6
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 21
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: PUSH
16153: FOR_IN
16154: IFFALSE 16230
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: LD_VAR 0 3
16165: PPUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 266
16175: PUSH
16176: LD_VAR 0 2
16180: PPUSH
16181: CALL_OW 267
16185: PUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: CALL_OW 250
16195: PUSH
16196: LD_VAR 0 2
16200: PPUSH
16201: CALL_OW 251
16205: PUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: CALL_OW 254
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL 54395 0 2
16227: ST_TO_ADDR
16228: GO 16153
16230: POP
16231: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_STRING 02_Kirov
16239: PPUSH
16240: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16244: LD_INT 22
16246: PUSH
16247: LD_INT 3
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 21
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: PPUSH
16273: CALL 19029 0 1
16277: PPUSH
16278: LD_STRING 02_VehiclesCount
16280: PPUSH
16281: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16285: LD_INT 22
16287: PUSH
16288: LD_INT 6
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 2
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: PPUSH
16314: CALL 19029 0 1
16318: PPUSH
16319: LD_STRING 02_KirovVehiclesCount
16321: PPUSH
16322: CALL_OW 39
// YouWin ;
16326: CALL_OW 103
// end ; end_of_file
16330: LD_VAR 0 1
16334: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16335: LD_INT 420
16337: PPUSH
16338: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16342: LD_VAR 0 2
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: CALL 7995 0 2
// end ;
16356: PPOPN 5
16358: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL 74369 0 1
// if un = Burlak then
16368: LD_VAR 0 1
16372: PUSH
16373: LD_EXP 34
16377: EQUAL
16378: IFFALSE 16387
// YouLost ( Burlak ) ;
16380: LD_STRING Burlak
16382: PPUSH
16383: CALL_OW 104
// if un = Platonov then
16387: LD_VAR 0 1
16391: PUSH
16392: LD_EXP 40
16396: EQUAL
16397: IFFALSE 16406
// YouLost ( Platonov ) ;
16399: LD_STRING Platonov
16401: PPUSH
16402: CALL_OW 104
// if un = Kurin then
16406: LD_VAR 0 1
16410: PUSH
16411: LD_EXP 38
16415: EQUAL
16416: IFFALSE 16425
// YouLost ( Kurin ) ;
16418: LD_STRING Kurin
16420: PPUSH
16421: CALL_OW 104
// if un = Belkov then
16425: LD_VAR 0 1
16429: PUSH
16430: LD_EXP 36
16434: EQUAL
16435: IFFALSE 16445
// belkovDied := true ;
16437: LD_ADDR_EXP 19
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// if un in belkovTeam then
16445: LD_VAR 0 1
16449: PUSH
16450: LD_EXP 45
16454: IN
16455: IFFALSE 16488
// begin belkovTeam := belkovTeam diff un ;
16457: LD_ADDR_EXP 45
16461: PUSH
16462: LD_EXP 45
16466: PUSH
16467: LD_VAR 0 1
16471: DIFF
16472: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16473: LD_ADDR_EXP 29
16477: PUSH
16478: LD_EXP 29
16482: PPUSH
16483: CALL 55756 0 1
16487: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16488: LD_VAR 0 1
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 21
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 23
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: IN
16533: IFFALSE 16550
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16535: LD_ADDR_EXP 30
16539: PUSH
16540: LD_EXP 30
16544: PPUSH
16545: CALL 55756 0 1
16549: ST_TO_ADDR
// if un in usWestForces then
16550: LD_VAR 0 1
16554: PUSH
16555: LD_EXP 46
16559: IN
16560: IFFALSE 16578
// usWestForces := usWestForces diff un ;
16562: LD_ADDR_EXP 46
16566: PUSH
16567: LD_EXP 46
16571: PUSH
16572: LD_VAR 0 1
16576: DIFF
16577: ST_TO_ADDR
// if un in usEastForces then
16578: LD_VAR 0 1
16582: PUSH
16583: LD_EXP 47
16587: IN
16588: IFFALSE 16606
// usEastForces := usEastForces diff un ;
16590: LD_ADDR_EXP 47
16594: PUSH
16595: LD_EXP 47
16599: PUSH
16600: LD_VAR 0 1
16604: DIFF
16605: ST_TO_ADDR
// end ;
16606: PPOPN 1
16608: END
// on BuildingComplete ( b ) do var mech ;
16609: LD_INT 0
16611: PPUSH
// begin if GetSide ( b ) = 3 then
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 255
16621: PUSH
16622: LD_INT 3
16624: EQUAL
16625: IFFALSE 16684
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 266
16636: PUSH
16637: LD_INT 6
16639: PUSH
16640: LD_INT 7
16642: PUSH
16643: LD_INT 8
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: IN
16651: IFFALSE 16661
// hasLab := true ;
16653: LD_ADDR_EXP 9
16657: PUSH
16658: LD_INT 1
16660: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 266
16670: PUSH
16671: LD_INT 2
16673: EQUAL
16674: IFFALSE 16684
// hasWorkshop := true ;
16676: LD_ADDR_EXP 10
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 6
16696: EQUAL
16697: IFFALSE 16771
// begin if GetBType ( b ) = b_workshop then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 2
16711: EQUAL
16712: IFFALSE 16771
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_EXP 43
16723: PPUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 72
16738: ST_TO_ADDR
// if not mech then
16739: LD_VAR 0 2
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16771
// ComExit ( mech ) ;
16748: LD_VAR 0 2
16752: PPUSH
16753: CALL 54793 0 1
// AddComEnterUnit ( mech , b ) ;
16757: LD_VAR 0 2
16761: PPUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 180
// end ; end ; end ;
16771: PPOPN 2
16773: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16774: LD_VAR 0 1
16778: PPUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: CALL 74489 0 2
// if GetSide ( vehicle ) = 3 then
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 255
16797: PUSH
16798: LD_INT 3
16800: EQUAL
16801: IFFALSE 16826
// begin hasTank := true ;
16803: LD_ADDR_EXP 12
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16811: LD_ADDR_EXP 15
16815: PUSH
16816: LD_EXP 15
16820: PPUSH
16821: CALL 55756 0 1
16825: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 255
16835: PUSH
16836: LD_INT 6
16838: EQUAL
16839: IFFALSE 16850
// KirovAttack ( vehicle ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL 3603 0 1
// end ;
16850: PPOPN 2
16852: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16853: LD_VAR 0 1
16857: PUSH
16858: LD_EXP 33
16862: EQUAL
16863: IFFALSE 16869
// BelkovAttackScript ;
16865: CALL 1668 0 0
// end ;
16869: PPOPN 1
16871: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16872: LD_INT 0
16874: PPUSH
// begin if side = 1 then
16875: LD_VAR 0 3
16879: PUSH
16880: LD_INT 1
16882: EQUAL
16883: IFFALSE 16893
// vehCaptured := true ;
16885: LD_ADDR_EXP 16
16889: PUSH
16890: LD_INT 1
16892: ST_TO_ADDR
// end ;
16893: PPOPN 5
16895: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16896: LD_VAR 0 1
16900: PUSH
16901: LD_INT 3
16903: EQUAL
16904: PUSH
16905: LD_VAR 0 2
16909: PUSH
16910: LD_INT 6
16912: EQUAL
16913: AND
16914: IFFALSE 16924
// allianceAttacked := true ;
16916: LD_ADDR_EXP 13
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
// end ; end_of_file
16924: PPOPN 2
16926: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
// if exist_mode then
16931: LD_VAR 0 2
16935: IFFALSE 16960
// unit := CreateCharacter ( prefix & ident ) else
16937: LD_ADDR_VAR 0 5
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 1
16951: STR
16952: PPUSH
16953: CALL_OW 34
16957: ST_TO_ADDR
16958: GO 16975
// unit := NewCharacter ( ident ) ;
16960: LD_ADDR_VAR 0 5
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 25
16974: ST_TO_ADDR
// result := unit ;
16975: LD_ADDR_VAR 0 4
16979: PUSH
16980: LD_VAR 0 5
16984: ST_TO_ADDR
// end ;
16985: LD_VAR 0 4
16989: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16990: LD_INT 0
16992: PPUSH
16993: PPUSH
// if not side or not nation then
16994: LD_VAR 0 1
16998: NOT
16999: PUSH
17000: LD_VAR 0 2
17004: NOT
17005: OR
17006: IFFALSE 17010
// exit ;
17008: GO 17778
// case nation of nation_american :
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 1
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17237
17023: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17024: LD_ADDR_VAR 0 4
17028: PUSH
17029: LD_INT 35
17031: PUSH
17032: LD_INT 45
17034: PUSH
17035: LD_INT 46
17037: PUSH
17038: LD_INT 47
17040: PUSH
17041: LD_INT 82
17043: PUSH
17044: LD_INT 83
17046: PUSH
17047: LD_INT 84
17049: PUSH
17050: LD_INT 85
17052: PUSH
17053: LD_INT 86
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 6
17064: PUSH
17065: LD_INT 15
17067: PUSH
17068: LD_INT 16
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: LD_INT 12
17076: PUSH
17077: LD_INT 13
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 14
17085: PUSH
17086: LD_INT 20
17088: PUSH
17089: LD_INT 21
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 32
17100: PUSH
17101: LD_INT 27
17103: PUSH
17104: LD_INT 36
17106: PUSH
17107: LD_INT 69
17109: PUSH
17110: LD_INT 39
17112: PUSH
17113: LD_INT 34
17115: PUSH
17116: LD_INT 40
17118: PUSH
17119: LD_INT 48
17121: PUSH
17122: LD_INT 49
17124: PUSH
17125: LD_INT 50
17127: PUSH
17128: LD_INT 51
17130: PUSH
17131: LD_INT 52
17133: PUSH
17134: LD_INT 53
17136: PUSH
17137: LD_INT 54
17139: PUSH
17140: LD_INT 55
17142: PUSH
17143: LD_INT 56
17145: PUSH
17146: LD_INT 57
17148: PUSH
17149: LD_INT 58
17151: PUSH
17152: LD_INT 59
17154: PUSH
17155: LD_INT 60
17157: PUSH
17158: LD_INT 61
17160: PUSH
17161: LD_INT 62
17163: PUSH
17164: LD_INT 80
17166: PUSH
17167: LD_INT 82
17169: PUSH
17170: LD_INT 83
17172: PUSH
17173: LD_INT 84
17175: PUSH
17176: LD_INT 85
17178: PUSH
17179: LD_INT 86
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: ST_TO_ADDR
17235: GO 17702
17237: LD_INT 2
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17471
17245: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17246: LD_ADDR_VAR 0 4
17250: PUSH
17251: LD_INT 35
17253: PUSH
17254: LD_INT 45
17256: PUSH
17257: LD_INT 46
17259: PUSH
17260: LD_INT 47
17262: PUSH
17263: LD_INT 82
17265: PUSH
17266: LD_INT 83
17268: PUSH
17269: LD_INT 84
17271: PUSH
17272: LD_INT 85
17274: PUSH
17275: LD_INT 87
17277: PUSH
17278: LD_INT 70
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: LD_INT 11
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: LD_INT 4
17292: PUSH
17293: LD_INT 5
17295: PUSH
17296: LD_INT 6
17298: PUSH
17299: LD_INT 15
17301: PUSH
17302: LD_INT 18
17304: PUSH
17305: LD_INT 7
17307: PUSH
17308: LD_INT 17
17310: PUSH
17311: LD_INT 8
17313: PUSH
17314: LD_INT 20
17316: PUSH
17317: LD_INT 21
17319: PUSH
17320: LD_INT 22
17322: PUSH
17323: LD_INT 72
17325: PUSH
17326: LD_INT 26
17328: PUSH
17329: LD_INT 69
17331: PUSH
17332: LD_INT 39
17334: PUSH
17335: LD_INT 40
17337: PUSH
17338: LD_INT 41
17340: PUSH
17341: LD_INT 42
17343: PUSH
17344: LD_INT 43
17346: PUSH
17347: LD_INT 48
17349: PUSH
17350: LD_INT 49
17352: PUSH
17353: LD_INT 50
17355: PUSH
17356: LD_INT 51
17358: PUSH
17359: LD_INT 52
17361: PUSH
17362: LD_INT 53
17364: PUSH
17365: LD_INT 54
17367: PUSH
17368: LD_INT 55
17370: PUSH
17371: LD_INT 56
17373: PUSH
17374: LD_INT 60
17376: PUSH
17377: LD_INT 61
17379: PUSH
17380: LD_INT 62
17382: PUSH
17383: LD_INT 66
17385: PUSH
17386: LD_INT 67
17388: PUSH
17389: LD_INT 68
17391: PUSH
17392: LD_INT 81
17394: PUSH
17395: LD_INT 82
17397: PUSH
17398: LD_INT 83
17400: PUSH
17401: LD_INT 84
17403: PUSH
17404: LD_INT 85
17406: PUSH
17407: LD_INT 87
17409: PUSH
17410: LD_INT 88
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
17469: GO 17702
17471: LD_INT 3
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17701
17479: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17480: LD_ADDR_VAR 0 4
17484: PUSH
17485: LD_INT 46
17487: PUSH
17488: LD_INT 47
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 82
17499: PUSH
17500: LD_INT 83
17502: PUSH
17503: LD_INT 84
17505: PUSH
17506: LD_INT 85
17508: PUSH
17509: LD_INT 86
17511: PUSH
17512: LD_INT 11
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 20
17520: PUSH
17521: LD_INT 19
17523: PUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 24
17529: PUSH
17530: LD_INT 22
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: LD_INT 28
17538: PUSH
17539: LD_INT 29
17541: PUSH
17542: LD_INT 30
17544: PUSH
17545: LD_INT 31
17547: PUSH
17548: LD_INT 37
17550: PUSH
17551: LD_INT 38
17553: PUSH
17554: LD_INT 32
17556: PUSH
17557: LD_INT 27
17559: PUSH
17560: LD_INT 33
17562: PUSH
17563: LD_INT 69
17565: PUSH
17566: LD_INT 39
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 40
17574: PUSH
17575: LD_INT 71
17577: PUSH
17578: LD_INT 23
17580: PUSH
17581: LD_INT 44
17583: PUSH
17584: LD_INT 48
17586: PUSH
17587: LD_INT 49
17589: PUSH
17590: LD_INT 50
17592: PUSH
17593: LD_INT 51
17595: PUSH
17596: LD_INT 52
17598: PUSH
17599: LD_INT 53
17601: PUSH
17602: LD_INT 54
17604: PUSH
17605: LD_INT 55
17607: PUSH
17608: LD_INT 56
17610: PUSH
17611: LD_INT 57
17613: PUSH
17614: LD_INT 58
17616: PUSH
17617: LD_INT 59
17619: PUSH
17620: LD_INT 63
17622: PUSH
17623: LD_INT 64
17625: PUSH
17626: LD_INT 65
17628: PUSH
17629: LD_INT 82
17631: PUSH
17632: LD_INT 83
17634: PUSH
17635: LD_INT 84
17637: PUSH
17638: LD_INT 85
17640: PUSH
17641: LD_INT 86
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: ST_TO_ADDR
17699: GO 17702
17701: POP
// if state > - 1 and state < 3 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: GREATER
17711: PUSH
17712: LD_VAR 0 3
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: AND
17721: IFFALSE 17778
// for i in result do
17723: LD_ADDR_VAR 0 5
17727: PUSH
17728: LD_VAR 0 4
17732: PUSH
17733: FOR_IN
17734: IFFALSE 17776
// if GetTech ( i , side ) <> state then
17736: LD_VAR 0 5
17740: PPUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 321
17750: PUSH
17751: LD_VAR 0 3
17755: NONEQUAL
17756: IFFALSE 17774
// result := result diff i ;
17758: LD_ADDR_VAR 0 4
17762: PUSH
17763: LD_VAR 0 4
17767: PUSH
17768: LD_VAR 0 5
17772: DIFF
17773: ST_TO_ADDR
17774: GO 17733
17776: POP
17777: POP
// end ;
17778: LD_VAR 0 4
17782: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// result := true ;
17788: LD_ADDR_VAR 0 3
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17796: LD_ADDR_VAR 0 5
17800: PUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 480
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 5
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17869
// for i in tmp do
17820: LD_ADDR_VAR 0 4
17824: PUSH
17825: LD_VAR 0 5
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17867
// if GetTech ( i , side ) <> state_researched then
17833: LD_VAR 0 4
17837: PPUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 321
17847: PUSH
17848: LD_INT 2
17850: NONEQUAL
17851: IFFALSE 17865
// begin result := false ;
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// exit ;
17861: POP
17862: POP
17863: GO 17869
// end ;
17865: GO 17830
17867: POP
17868: POP
// end ;
17869: LD_VAR 0 3
17873: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
17880: PPUSH
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17889: LD_VAR 0 1
17893: NOT
17894: PUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 257
17904: PUSH
17905: LD_INT 9
17907: NONEQUAL
17908: OR
17909: IFFALSE 17913
// exit ;
17911: GO 18486
// side := GetSide ( unit ) ;
17913: LD_ADDR_VAR 0 9
17917: PUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 255
17927: ST_TO_ADDR
// tech_space := tech_spacanom ;
17928: LD_ADDR_VAR 0 12
17932: PUSH
17933: LD_INT 29
17935: ST_TO_ADDR
// tech_time := tech_taurad ;
17936: LD_ADDR_VAR 0 13
17940: PUSH
17941: LD_INT 28
17943: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17944: LD_ADDR_VAR 0 11
17948: PUSH
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17959: LD_VAR 0 11
17963: PPUSH
17964: CALL_OW 247
17968: PUSH
17969: LD_INT 2
17971: EQUAL
17972: IFFALSE 17976
// exit ;
17974: GO 18486
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17976: LD_ADDR_VAR 0 8
17980: PUSH
17981: LD_INT 81
17983: PUSH
17984: LD_VAR 0 9
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: ST_TO_ADDR
// if not tmp then
18019: LD_VAR 0 8
18023: NOT
18024: IFFALSE 18028
// exit ;
18026: GO 18486
// if in_unit then
18028: LD_VAR 0 11
18032: IFFALSE 18056
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18034: LD_ADDR_VAR 0 10
18038: PUSH
18039: LD_VAR 0 8
18043: PPUSH
18044: LD_VAR 0 11
18048: PPUSH
18049: CALL_OW 74
18053: ST_TO_ADDR
18054: GO 18076
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18056: LD_ADDR_VAR 0 10
18060: PUSH
18061: LD_VAR 0 8
18065: PPUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 74
18075: ST_TO_ADDR
// if not enemy then
18076: LD_VAR 0 10
18080: NOT
18081: IFFALSE 18085
// exit ;
18083: GO 18486
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18085: LD_VAR 0 11
18089: PUSH
18090: LD_VAR 0 11
18094: PPUSH
18095: LD_VAR 0 10
18099: PPUSH
18100: CALL_OW 296
18104: PUSH
18105: LD_INT 13
18107: GREATER
18108: AND
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_VAR 0 10
18119: PPUSH
18120: CALL_OW 296
18124: PUSH
18125: LD_INT 12
18127: GREATER
18128: OR
18129: IFFALSE 18133
// exit ;
18131: GO 18486
// missile := [ 1 ] ;
18133: LD_ADDR_VAR 0 14
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18144: LD_VAR 0 9
18148: PPUSH
18149: LD_VAR 0 12
18153: PPUSH
18154: CALL_OW 325
18158: IFFALSE 18187
// missile := Replace ( missile , missile + 1 , 2 ) ;
18160: LD_ADDR_VAR 0 14
18164: PUSH
18165: LD_VAR 0 14
18169: PPUSH
18170: LD_VAR 0 14
18174: PUSH
18175: LD_INT 1
18177: PLUS
18178: PPUSH
18179: LD_INT 2
18181: PPUSH
18182: CALL_OW 1
18186: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18187: LD_VAR 0 9
18191: PPUSH
18192: LD_VAR 0 13
18196: PPUSH
18197: CALL_OW 325
18201: PUSH
18202: LD_VAR 0 10
18206: PPUSH
18207: CALL_OW 255
18211: PPUSH
18212: LD_VAR 0 13
18216: PPUSH
18217: CALL_OW 325
18221: NOT
18222: AND
18223: IFFALSE 18252
// missile := Replace ( missile , missile + 1 , 3 ) ;
18225: LD_ADDR_VAR 0 14
18229: PUSH
18230: LD_VAR 0 14
18234: PPUSH
18235: LD_VAR 0 14
18239: PUSH
18240: LD_INT 1
18242: PLUS
18243: PPUSH
18244: LD_INT 3
18246: PPUSH
18247: CALL_OW 1
18251: ST_TO_ADDR
// if missile < 2 then
18252: LD_VAR 0 14
18256: PUSH
18257: LD_INT 2
18259: LESS
18260: IFFALSE 18264
// exit ;
18262: GO 18486
// x := GetX ( enemy ) ;
18264: LD_ADDR_VAR 0 4
18268: PUSH
18269: LD_VAR 0 10
18273: PPUSH
18274: CALL_OW 250
18278: ST_TO_ADDR
// y := GetY ( enemy ) ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_VAR 0 10
18288: PPUSH
18289: CALL_OW 251
18293: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18294: LD_ADDR_VAR 0 6
18298: PUSH
18299: LD_VAR 0 4
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 12
18315: PLUS
18316: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18317: LD_ADDR_VAR 0 7
18321: PUSH
18322: LD_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 12
18338: PLUS
18339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18340: LD_VAR 0 6
18344: PPUSH
18345: LD_VAR 0 7
18349: PPUSH
18350: CALL_OW 488
18354: NOT
18355: IFFALSE 18377
// begin _x := x ;
18357: LD_ADDR_VAR 0 6
18361: PUSH
18362: LD_VAR 0 4
18366: ST_TO_ADDR
// _y := y ;
18367: LD_ADDR_VAR 0 7
18371: PUSH
18372: LD_VAR 0 5
18376: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18377: LD_ADDR_VAR 0 3
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_VAR 0 14
18389: PPUSH
18390: CALL_OW 12
18394: ST_TO_ADDR
// case i of 1 :
18395: LD_VAR 0 3
18399: PUSH
18400: LD_INT 1
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18425
18408: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_VAR 0 10
18418: PPUSH
18419: CALL_OW 115
18423: GO 18486
18425: LD_INT 2
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18455
18433: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_VAR 0 6
18443: PPUSH
18444: LD_VAR 0 7
18448: PPUSH
18449: CALL_OW 153
18453: GO 18486
18455: LD_INT 3
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18485
18463: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18464: LD_VAR 0 1
18468: PPUSH
18469: LD_VAR 0 6
18473: PPUSH
18474: LD_VAR 0 7
18478: PPUSH
18479: CALL_OW 154
18483: GO 18486
18485: POP
// end ;
18486: LD_VAR 0 2
18490: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18491: LD_INT 0
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
// if not unit or not building then
18499: LD_VAR 0 1
18503: NOT
18504: PUSH
18505: LD_VAR 0 2
18509: NOT
18510: OR
18511: IFFALSE 18515
// exit ;
18513: GO 18673
// x := GetX ( building ) ;
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_VAR 0 2
18524: PPUSH
18525: CALL_OW 250
18529: ST_TO_ADDR
// y := GetY ( building ) ;
18530: LD_ADDR_VAR 0 6
18534: PUSH
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 251
18544: ST_TO_ADDR
// for i = 0 to 5 do
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: DOUBLE
18551: LD_INT 0
18553: DEC
18554: ST_TO_ADDR
18555: LD_INT 5
18557: PUSH
18558: FOR_TO
18559: IFFALSE 18671
// begin _x := ShiftX ( x , i , 3 ) ;
18561: LD_ADDR_VAR 0 7
18565: PUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 4
18575: PPUSH
18576: LD_INT 3
18578: PPUSH
18579: CALL_OW 272
18583: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18584: LD_ADDR_VAR 0 8
18588: PUSH
18589: LD_VAR 0 6
18593: PPUSH
18594: LD_VAR 0 4
18598: PPUSH
18599: LD_INT 3
18601: PPUSH
18602: CALL_OW 273
18606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18607: LD_VAR 0 7
18611: PPUSH
18612: LD_VAR 0 8
18616: PPUSH
18617: CALL_OW 488
18621: NOT
18622: IFFALSE 18626
// continue ;
18624: GO 18558
// if HexInfo ( _x , _y ) = 0 then
18626: LD_VAR 0 7
18630: PPUSH
18631: LD_VAR 0 8
18635: PPUSH
18636: CALL_OW 428
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: IFFALSE 18669
// begin ComMoveXY ( unit , _x , _y ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: LD_VAR 0 7
18655: PPUSH
18656: LD_VAR 0 8
18660: PPUSH
18661: CALL_OW 111
// exit ;
18665: POP
18666: POP
18667: GO 18673
// end ; end ;
18669: GO 18558
18671: POP
18672: POP
// end ;
18673: LD_VAR 0 3
18677: RET
// export function ScanBase ( side , base_area ) ; begin
18678: LD_INT 0
18680: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_VAR 0 2
18690: PPUSH
18691: LD_INT 81
18693: PUSH
18694: LD_VAR 0 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 70
18707: ST_TO_ADDR
// end ;
18708: LD_VAR 0 3
18712: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18713: LD_INT 0
18715: PPUSH
18716: PPUSH
18717: PPUSH
18718: PPUSH
// result := false ;
18719: LD_ADDR_VAR 0 2
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// side := GetSide ( unit ) ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 255
18741: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18742: LD_ADDR_VAR 0 4
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 248
18756: ST_TO_ADDR
// case nat of 1 :
18757: LD_VAR 0 4
18761: PUSH
18762: LD_INT 1
18764: DOUBLE
18765: EQUAL
18766: IFTRUE 18770
18768: GO 18781
18770: POP
// tech := tech_lassight ; 2 :
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_INT 12
18778: ST_TO_ADDR
18779: GO 18820
18781: LD_INT 2
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18800
18789: POP
// tech := tech_mortar ; 3 :
18790: LD_ADDR_VAR 0 5
18794: PUSH
18795: LD_INT 41
18797: ST_TO_ADDR
18798: GO 18820
18800: LD_INT 3
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18819
18808: POP
// tech := tech_bazooka ; end ;
18809: LD_ADDR_VAR 0 5
18813: PUSH
18814: LD_INT 44
18816: ST_TO_ADDR
18817: GO 18820
18819: POP
// if Researched ( side , tech ) then
18820: LD_VAR 0 3
18824: PPUSH
18825: LD_VAR 0 5
18829: PPUSH
18830: CALL_OW 325
18834: IFFALSE 18861
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18836: LD_ADDR_VAR 0 2
18840: PUSH
18841: LD_INT 5
18843: PUSH
18844: LD_INT 8
18846: PUSH
18847: LD_INT 9
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: LD_VAR 0 4
18859: ARRAY
18860: ST_TO_ADDR
// end ;
18861: LD_VAR 0 2
18865: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
18870: PPUSH
// if not mines then
18871: LD_VAR 0 2
18875: NOT
18876: IFFALSE 18880
// exit ;
18878: GO 19024
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18880: LD_ADDR_VAR 0 5
18884: PUSH
18885: LD_INT 81
18887: PUSH
18888: LD_VAR 0 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 3
18899: PUSH
18900: LD_INT 21
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PPUSH
18918: CALL_OW 69
18922: ST_TO_ADDR
// for i in mines do
18923: LD_ADDR_VAR 0 4
18927: PUSH
18928: LD_VAR 0 2
18932: PUSH
18933: FOR_IN
18934: IFFALSE 19022
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18936: LD_VAR 0 4
18940: PUSH
18941: LD_INT 1
18943: ARRAY
18944: PPUSH
18945: LD_VAR 0 4
18949: PUSH
18950: LD_INT 2
18952: ARRAY
18953: PPUSH
18954: CALL_OW 458
18958: NOT
18959: IFFALSE 18963
// continue ;
18961: GO 18933
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18963: LD_VAR 0 4
18967: PUSH
18968: LD_INT 1
18970: ARRAY
18971: PPUSH
18972: LD_VAR 0 4
18976: PUSH
18977: LD_INT 2
18979: ARRAY
18980: PPUSH
18981: CALL_OW 428
18985: PUSH
18986: LD_VAR 0 5
18990: IN
18991: IFFALSE 19020
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18993: LD_VAR 0 4
18997: PUSH
18998: LD_INT 1
19000: ARRAY
19001: PPUSH
19002: LD_VAR 0 4
19006: PUSH
19007: LD_INT 2
19009: ARRAY
19010: PPUSH
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 456
// end ;
19020: GO 18933
19022: POP
19023: POP
// end ;
19024: LD_VAR 0 3
19028: RET
// export function Count ( array ) ; var i ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
// result := 0 ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 0
19040: ST_TO_ADDR
// for i in array do
19041: LD_ADDR_VAR 0 3
19045: PUSH
19046: LD_VAR 0 1
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19076
// if i then
19054: LD_VAR 0 3
19058: IFFALSE 19074
// result := result + 1 ;
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_VAR 0 2
19069: PUSH
19070: LD_INT 1
19072: PLUS
19073: ST_TO_ADDR
19074: GO 19051
19076: POP
19077: POP
// end ;
19078: LD_VAR 0 2
19082: RET
// export function IsEmpty ( building ) ; begin
19083: LD_INT 0
19085: PPUSH
// if not building then
19086: LD_VAR 0 1
19090: NOT
19091: IFFALSE 19095
// exit ;
19093: GO 19138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19095: LD_ADDR_VAR 0 2
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 255
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 58
19124: PUSH
19125: EMPTY
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: IN
19137: ST_TO_ADDR
// end ;
19138: LD_VAR 0 2
19142: RET
// export function IsNotFull ( building ) ; var places ; begin
19143: LD_INT 0
19145: PPUSH
19146: PPUSH
// if not building then
19147: LD_VAR 0 1
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19327
// result := false ;
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// places := 0 ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
19172: LD_VAR 0 1
19176: PPUSH
19177: CALL_OW 266
19181: PUSH
19182: LD_INT 0
19184: DOUBLE
19185: EQUAL
19186: IFTRUE 19244
19188: LD_INT 1
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19244
19194: LD_INT 6
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19244
19200: LD_INT 7
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19244
19206: LD_INT 8
19208: DOUBLE
19209: EQUAL
19210: IFTRUE 19244
19212: LD_INT 4
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19244
19218: LD_INT 5
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19244
19224: LD_INT 2
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19244
19230: LD_INT 3
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19244
19236: LD_INT 35
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19255
19244: POP
// places := 6 ; b_bunker , b_breastwork :
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 6
19252: ST_TO_ADDR
19253: GO 19300
19255: LD_INT 32
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19269
19261: LD_INT 31
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19280
19269: POP
// places := 1 ; b_control_tower :
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_INT 1
19277: ST_TO_ADDR
19278: GO 19300
19280: LD_INT 36
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19299
19288: POP
// places := 3 ; end ;
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 3
19296: ST_TO_ADDR
19297: GO 19300
19299: POP
// if places then
19300: LD_VAR 0 3
19304: IFFALSE 19327
// result := UnitsInside ( building ) < places ;
19306: LD_ADDR_VAR 0 2
19310: PUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 313
19320: PUSH
19321: LD_VAR 0 3
19325: LESS
19326: ST_TO_ADDR
// end ;
19327: LD_VAR 0 2
19331: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19332: LD_INT 0
19334: PPUSH
19335: PPUSH
19336: PPUSH
19337: PPUSH
// tmp := [ ] ;
19338: LD_ADDR_VAR 0 3
19342: PUSH
19343: EMPTY
19344: ST_TO_ADDR
// list := [ ] ;
19345: LD_ADDR_VAR 0 5
19349: PUSH
19350: EMPTY
19351: ST_TO_ADDR
// for i = 16 to 25 do
19352: LD_ADDR_VAR 0 4
19356: PUSH
19357: DOUBLE
19358: LD_INT 16
19360: DEC
19361: ST_TO_ADDR
19362: LD_INT 25
19364: PUSH
19365: FOR_TO
19366: IFFALSE 19439
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 255
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 91
19397: PUSH
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 6
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: LD_VAR 0 4
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: PPUSH
19431: CALL_OW 69
19435: ADD
19436: ST_TO_ADDR
19437: GO 19365
19439: POP
19440: POP
// for i = 1 to tmp do
19441: LD_ADDR_VAR 0 4
19445: PUSH
19446: DOUBLE
19447: LD_INT 1
19449: DEC
19450: ST_TO_ADDR
19451: LD_VAR 0 3
19455: PUSH
19456: FOR_TO
19457: IFFALSE 19545
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19459: LD_ADDR_VAR 0 5
19463: PUSH
19464: LD_VAR 0 5
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: LD_VAR 0 4
19478: ARRAY
19479: PPUSH
19480: CALL_OW 266
19484: PUSH
19485: LD_VAR 0 3
19489: PUSH
19490: LD_VAR 0 4
19494: ARRAY
19495: PPUSH
19496: CALL_OW 250
19500: PUSH
19501: LD_VAR 0 3
19505: PUSH
19506: LD_VAR 0 4
19510: ARRAY
19511: PPUSH
19512: CALL_OW 251
19516: PUSH
19517: LD_VAR 0 3
19521: PUSH
19522: LD_VAR 0 4
19526: ARRAY
19527: PPUSH
19528: CALL_OW 254
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: ADD
19542: ST_TO_ADDR
19543: GO 19456
19545: POP
19546: POP
// result := list ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 5
19556: ST_TO_ADDR
// end ;
19557: LD_VAR 0 2
19561: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
19567: PPUSH
19568: PPUSH
19569: PPUSH
19570: PPUSH
// if not factory then
19571: LD_VAR 0 1
19575: NOT
19576: IFFALSE 19580
// exit ;
19578: GO 20173
// if control = control_apeman then
19580: LD_VAR 0 4
19584: PUSH
19585: LD_INT 5
19587: EQUAL
19588: IFFALSE 19697
// begin tmp := UnitsInside ( factory ) ;
19590: LD_ADDR_VAR 0 8
19594: PUSH
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 313
19604: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19605: LD_VAR 0 8
19609: PPUSH
19610: LD_INT 25
19612: PUSH
19613: LD_INT 12
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PPUSH
19620: CALL_OW 72
19624: NOT
19625: IFFALSE 19635
// control := control_manual ;
19627: LD_ADDR_VAR 0 4
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19635: LD_ADDR_VAR 0 8
19639: PUSH
19640: LD_VAR 0 1
19644: PPUSH
19645: CALL 19332 0 1
19649: ST_TO_ADDR
// if tmp then
19650: LD_VAR 0 8
19654: IFFALSE 19697
// begin for i in tmp do
19656: LD_ADDR_VAR 0 7
19660: PUSH
19661: LD_VAR 0 8
19665: PUSH
19666: FOR_IN
19667: IFFALSE 19695
// if i [ 1 ] = b_ext_radio then
19669: LD_VAR 0 7
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: PUSH
19678: LD_INT 22
19680: EQUAL
19681: IFFALSE 19693
// begin control := control_remote ;
19683: LD_ADDR_VAR 0 4
19687: PUSH
19688: LD_INT 2
19690: ST_TO_ADDR
// break ;
19691: GO 19695
// end ;
19693: GO 19666
19695: POP
19696: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_VAR 0 3
19711: PPUSH
19712: LD_VAR 0 4
19716: PPUSH
19717: LD_VAR 0 5
19721: PPUSH
19722: CALL_OW 448
19726: IFFALSE 19761
// begin result := [ chassis , engine , control , weapon ] ;
19728: LD_ADDR_VAR 0 6
19732: PUSH
19733: LD_VAR 0 2
19737: PUSH
19738: LD_VAR 0 3
19742: PUSH
19743: LD_VAR 0 4
19747: PUSH
19748: LD_VAR 0 5
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: ST_TO_ADDR
// exit ;
19759: GO 20173
// end ; _chassis := AvailableChassisList ( factory ) ;
19761: LD_ADDR_VAR 0 9
19765: PUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 475
19775: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19776: LD_ADDR_VAR 0 11
19780: PUSH
19781: LD_VAR 0 1
19785: PPUSH
19786: CALL_OW 476
19790: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19791: LD_ADDR_VAR 0 12
19795: PUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 477
19805: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19806: LD_ADDR_VAR 0 10
19810: PUSH
19811: LD_VAR 0 1
19815: PPUSH
19816: CALL_OW 478
19820: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19821: LD_VAR 0 9
19825: NOT
19826: PUSH
19827: LD_VAR 0 11
19831: NOT
19832: OR
19833: PUSH
19834: LD_VAR 0 12
19838: NOT
19839: OR
19840: PUSH
19841: LD_VAR 0 10
19845: NOT
19846: OR
19847: IFFALSE 19882
// begin result := [ chassis , engine , control , weapon ] ;
19849: LD_ADDR_VAR 0 6
19853: PUSH
19854: LD_VAR 0 2
19858: PUSH
19859: LD_VAR 0 3
19863: PUSH
19864: LD_VAR 0 4
19868: PUSH
19869: LD_VAR 0 5
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: ST_TO_ADDR
// exit ;
19880: GO 20173
// end ; if not chassis in _chassis then
19882: LD_VAR 0 2
19886: PUSH
19887: LD_VAR 0 9
19891: IN
19892: NOT
19893: IFFALSE 19919
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19895: LD_ADDR_VAR 0 2
19899: PUSH
19900: LD_VAR 0 9
19904: PUSH
19905: LD_INT 1
19907: PPUSH
19908: LD_VAR 0 9
19912: PPUSH
19913: CALL_OW 12
19917: ARRAY
19918: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19919: LD_VAR 0 2
19923: PPUSH
19924: LD_VAR 0 3
19928: PPUSH
19929: CALL 20178 0 2
19933: NOT
19934: IFFALSE 19993
// repeat engine := _engine [ 1 ] ;
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_VAR 0 11
19945: PUSH
19946: LD_INT 1
19948: ARRAY
19949: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19950: LD_ADDR_VAR 0 11
19954: PUSH
19955: LD_VAR 0 11
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 3
19967: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19968: LD_VAR 0 2
19972: PPUSH
19973: LD_VAR 0 3
19977: PPUSH
19978: CALL 20178 0 2
19982: PUSH
19983: LD_VAR 0 11
19987: PUSH
19988: EMPTY
19989: EQUAL
19990: OR
19991: IFFALSE 19936
// if not control in _control then
19993: LD_VAR 0 4
19997: PUSH
19998: LD_VAR 0 12
20002: IN
20003: NOT
20004: IFFALSE 20030
// control := _control [ rand ( 1 , _control ) ] ;
20006: LD_ADDR_VAR 0 4
20010: PUSH
20011: LD_VAR 0 12
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 12
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20030: LD_VAR 0 2
20034: PPUSH
20035: LD_VAR 0 5
20039: PPUSH
20040: CALL 20398 0 2
20044: NOT
20045: IFFALSE 20104
// repeat weapon := _weapon [ 1 ] ;
20047: LD_ADDR_VAR 0 5
20051: PUSH
20052: LD_VAR 0 10
20056: PUSH
20057: LD_INT 1
20059: ARRAY
20060: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20061: LD_ADDR_VAR 0 10
20065: PUSH
20066: LD_VAR 0 10
20070: PPUSH
20071: LD_INT 1
20073: PPUSH
20074: CALL_OW 3
20078: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_VAR 0 5
20088: PPUSH
20089: CALL 20398 0 2
20093: PUSH
20094: LD_VAR 0 10
20098: PUSH
20099: EMPTY
20100: EQUAL
20101: OR
20102: IFFALSE 20047
// result := [ ] ;
20104: LD_ADDR_VAR 0 6
20108: PUSH
20109: EMPTY
20110: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20111: LD_VAR 0 1
20115: PPUSH
20116: LD_VAR 0 2
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: LD_VAR 0 4
20130: PPUSH
20131: LD_VAR 0 5
20135: PPUSH
20136: CALL_OW 448
20140: IFFALSE 20173
// result := [ chassis , engine , control , weapon ] ;
20142: LD_ADDR_VAR 0 6
20146: PUSH
20147: LD_VAR 0 2
20151: PUSH
20152: LD_VAR 0 3
20156: PUSH
20157: LD_VAR 0 4
20161: PUSH
20162: LD_VAR 0 5
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: ST_TO_ADDR
// end ;
20173: LD_VAR 0 6
20177: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20178: LD_INT 0
20180: PPUSH
// if not chassis or not engine then
20181: LD_VAR 0 1
20185: NOT
20186: PUSH
20187: LD_VAR 0 2
20191: NOT
20192: OR
20193: IFFALSE 20197
// exit ;
20195: GO 20393
// case engine of engine_solar :
20197: LD_VAR 0 2
20201: PUSH
20202: LD_INT 2
20204: DOUBLE
20205: EQUAL
20206: IFTRUE 20210
20208: GO 20248
20210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: LD_INT 11
20218: PUSH
20219: LD_INT 12
20221: PUSH
20222: LD_INT 13
20224: PUSH
20225: LD_INT 14
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: ST_TO_ADDR
20246: GO 20377
20248: LD_INT 1
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20318
20256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20257: LD_ADDR_VAR 0 3
20261: PUSH
20262: LD_INT 11
20264: PUSH
20265: LD_INT 12
20267: PUSH
20268: LD_INT 13
20270: PUSH
20271: LD_INT 14
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 4
20285: PUSH
20286: LD_INT 5
20288: PUSH
20289: LD_INT 21
20291: PUSH
20292: LD_INT 23
20294: PUSH
20295: LD_INT 22
20297: PUSH
20298: LD_INT 24
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 20377
20318: LD_INT 3
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20376
20326: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20327: LD_ADDR_VAR 0 3
20331: PUSH
20332: LD_INT 13
20334: PUSH
20335: LD_INT 14
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: LD_INT 4
20346: PUSH
20347: LD_INT 5
20349: PUSH
20350: LD_INT 21
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 23
20358: PUSH
20359: LD_INT 24
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: ST_TO_ADDR
20374: GO 20377
20376: POP
// result := ( chassis in result ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_VAR 0 1
20386: PUSH
20387: LD_VAR 0 3
20391: IN
20392: ST_TO_ADDR
// end ;
20393: LD_VAR 0 3
20397: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20398: LD_INT 0
20400: PPUSH
// if not chassis or not weapon then
20401: LD_VAR 0 1
20405: NOT
20406: PUSH
20407: LD_VAR 0 2
20411: NOT
20412: OR
20413: IFFALSE 20417
// exit ;
20415: GO 21477
// case weapon of us_machine_gun :
20417: LD_VAR 0 2
20421: PUSH
20422: LD_INT 2
20424: DOUBLE
20425: EQUAL
20426: IFTRUE 20430
20428: GO 20460
20430: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 4
20447: PUSH
20448: LD_INT 5
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 21461
20460: LD_INT 3
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20498
20468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: ST_TO_ADDR
20496: GO 21461
20498: LD_INT 11
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20536
20506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20507: LD_ADDR_VAR 0 3
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 4
20523: PUSH
20524: LD_INT 5
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 21461
20536: LD_INT 4
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20570
20544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 21461
20570: LD_INT 5
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20604
20578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 3
20589: PUSH
20590: LD_INT 4
20592: PUSH
20593: LD_INT 5
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: ST_TO_ADDR
20602: GO 21461
20604: LD_INT 9
20606: DOUBLE
20607: EQUAL
20608: IFTRUE 20612
20610: GO 20638
20612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20613: LD_ADDR_VAR 0 3
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 4
20626: PUSH
20627: LD_INT 5
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: ST_TO_ADDR
20636: GO 21461
20638: LD_INT 7
20640: DOUBLE
20641: EQUAL
20642: IFTRUE 20646
20644: GO 20672
20646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20647: LD_ADDR_VAR 0 3
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: LD_INT 4
20660: PUSH
20661: LD_INT 5
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 21461
20672: LD_INT 12
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20706
20680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 3
20691: PUSH
20692: LD_INT 4
20694: PUSH
20695: LD_INT 5
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
20704: GO 21461
20706: LD_INT 13
20708: DOUBLE
20709: EQUAL
20710: IFTRUE 20714
20712: GO 20740
20714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20715: LD_ADDR_VAR 0 3
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: LD_INT 3
20725: PUSH
20726: LD_INT 4
20728: PUSH
20729: LD_INT 5
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 21461
20740: LD_INT 14
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20766
20748: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20749: LD_ADDR_VAR 0 3
20753: PUSH
20754: LD_INT 4
20756: PUSH
20757: LD_INT 5
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: ST_TO_ADDR
20764: GO 21461
20766: LD_INT 6
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20792
20774: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20775: LD_ADDR_VAR 0 3
20779: PUSH
20780: LD_INT 4
20782: PUSH
20783: LD_INT 5
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: ST_TO_ADDR
20790: GO 21461
20792: LD_INT 10
20794: DOUBLE
20795: EQUAL
20796: IFTRUE 20800
20798: GO 20818
20800: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20801: LD_ADDR_VAR 0 3
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: ST_TO_ADDR
20816: GO 21461
20818: LD_INT 22
20820: DOUBLE
20821: EQUAL
20822: IFTRUE 20826
20824: GO 20852
20826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20827: LD_ADDR_VAR 0 3
20831: PUSH
20832: LD_INT 11
20834: PUSH
20835: LD_INT 12
20837: PUSH
20838: LD_INT 13
20840: PUSH
20841: LD_INT 14
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: ST_TO_ADDR
20850: GO 21461
20852: LD_INT 23
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20886
20860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: LD_INT 11
20868: PUSH
20869: LD_INT 12
20871: PUSH
20872: LD_INT 13
20874: PUSH
20875: LD_INT 14
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
20884: GO 21461
20886: LD_INT 24
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20920
20894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20895: LD_ADDR_VAR 0 3
20899: PUSH
20900: LD_INT 11
20902: PUSH
20903: LD_INT 12
20905: PUSH
20906: LD_INT 13
20908: PUSH
20909: LD_INT 14
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: ST_TO_ADDR
20918: GO 21461
20920: LD_INT 30
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20954
20928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20929: LD_ADDR_VAR 0 3
20933: PUSH
20934: LD_INT 11
20936: PUSH
20937: LD_INT 12
20939: PUSH
20940: LD_INT 13
20942: PUSH
20943: LD_INT 14
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: ST_TO_ADDR
20952: GO 21461
20954: LD_INT 25
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 20980
20962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_INT 13
20970: PUSH
20971: LD_INT 14
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: ST_TO_ADDR
20978: GO 21461
20980: LD_INT 27
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 21006
20988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_INT 13
20996: PUSH
20997: LD_INT 14
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 21461
21006: LD_INT 92
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21040
21014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21015: LD_ADDR_VAR 0 3
21019: PUSH
21020: LD_INT 11
21022: PUSH
21023: LD_INT 12
21025: PUSH
21026: LD_INT 13
21028: PUSH
21029: LD_INT 14
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: ST_TO_ADDR
21038: GO 21461
21040: LD_INT 28
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21066
21048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21049: LD_ADDR_VAR 0 3
21053: PUSH
21054: LD_INT 13
21056: PUSH
21057: LD_INT 14
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: ST_TO_ADDR
21064: GO 21461
21066: LD_INT 29
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21092
21074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21075: LD_ADDR_VAR 0 3
21079: PUSH
21080: LD_INT 13
21082: PUSH
21083: LD_INT 14
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: ST_TO_ADDR
21090: GO 21461
21092: LD_INT 31
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21118
21100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: LD_INT 13
21108: PUSH
21109: LD_INT 14
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: ST_TO_ADDR
21116: GO 21461
21118: LD_INT 26
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21144
21126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21127: LD_ADDR_VAR 0 3
21131: PUSH
21132: LD_INT 13
21134: PUSH
21135: LD_INT 14
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: ST_TO_ADDR
21142: GO 21461
21144: LD_INT 42
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21178
21152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 24
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 21461
21178: LD_INT 43
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21212
21186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: LD_INT 21
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_INT 23
21200: PUSH
21201: LD_INT 24
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 21461
21212: LD_INT 44
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21246
21220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21221: LD_ADDR_VAR 0 3
21225: PUSH
21226: LD_INT 21
21228: PUSH
21229: LD_INT 22
21231: PUSH
21232: LD_INT 23
21234: PUSH
21235: LD_INT 24
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: ST_TO_ADDR
21244: GO 21461
21246: LD_INT 45
21248: DOUBLE
21249: EQUAL
21250: IFTRUE 21254
21252: GO 21280
21254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21255: LD_ADDR_VAR 0 3
21259: PUSH
21260: LD_INT 21
21262: PUSH
21263: LD_INT 22
21265: PUSH
21266: LD_INT 23
21268: PUSH
21269: LD_INT 24
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: ST_TO_ADDR
21278: GO 21461
21280: LD_INT 49
21282: DOUBLE
21283: EQUAL
21284: IFTRUE 21288
21286: GO 21314
21288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21289: LD_ADDR_VAR 0 3
21293: PUSH
21294: LD_INT 21
21296: PUSH
21297: LD_INT 22
21299: PUSH
21300: LD_INT 23
21302: PUSH
21303: LD_INT 24
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: ST_TO_ADDR
21312: GO 21461
21314: LD_INT 51
21316: DOUBLE
21317: EQUAL
21318: IFTRUE 21322
21320: GO 21348
21322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21323: LD_ADDR_VAR 0 3
21327: PUSH
21328: LD_INT 21
21330: PUSH
21331: LD_INT 22
21333: PUSH
21334: LD_INT 23
21336: PUSH
21337: LD_INT 24
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: ST_TO_ADDR
21346: GO 21461
21348: LD_INT 52
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21382
21356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21357: LD_ADDR_VAR 0 3
21361: PUSH
21362: LD_INT 21
21364: PUSH
21365: LD_INT 22
21367: PUSH
21368: LD_INT 23
21370: PUSH
21371: LD_INT 24
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: ST_TO_ADDR
21380: GO 21461
21382: LD_INT 53
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21408
21390: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21391: LD_ADDR_VAR 0 3
21395: PUSH
21396: LD_INT 23
21398: PUSH
21399: LD_INT 24
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: ST_TO_ADDR
21406: GO 21461
21408: LD_INT 46
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21434
21416: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21417: LD_ADDR_VAR 0 3
21421: PUSH
21422: LD_INT 23
21424: PUSH
21425: LD_INT 24
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: ST_TO_ADDR
21432: GO 21461
21434: LD_INT 47
21436: DOUBLE
21437: EQUAL
21438: IFTRUE 21442
21440: GO 21460
21442: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21443: LD_ADDR_VAR 0 3
21447: PUSH
21448: LD_INT 23
21450: PUSH
21451: LD_INT 24
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: ST_TO_ADDR
21458: GO 21461
21460: POP
// result := ( chassis in result ) ;
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_VAR 0 1
21470: PUSH
21471: LD_VAR 0 3
21475: IN
21476: ST_TO_ADDR
// end ;
21477: LD_VAR 0 3
21481: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21482: LD_INT 0
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
// result := array ;
21491: LD_ADDR_VAR 0 5
21495: PUSH
21496: LD_VAR 0 1
21500: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21501: LD_VAR 0 1
21505: NOT
21506: PUSH
21507: LD_VAR 0 2
21511: NOT
21512: OR
21513: PUSH
21514: LD_VAR 0 3
21518: NOT
21519: OR
21520: PUSH
21521: LD_VAR 0 2
21525: PUSH
21526: LD_VAR 0 1
21530: GREATER
21531: OR
21532: PUSH
21533: LD_VAR 0 3
21537: PUSH
21538: LD_VAR 0 1
21542: GREATER
21543: OR
21544: IFFALSE 21548
// exit ;
21546: GO 21844
// if direction then
21548: LD_VAR 0 4
21552: IFFALSE 21616
// begin d := 1 ;
21554: LD_ADDR_VAR 0 9
21558: PUSH
21559: LD_INT 1
21561: ST_TO_ADDR
// if i_from > i_to then
21562: LD_VAR 0 2
21566: PUSH
21567: LD_VAR 0 3
21571: GREATER
21572: IFFALSE 21598
// length := ( array - i_from ) + i_to else
21574: LD_ADDR_VAR 0 11
21578: PUSH
21579: LD_VAR 0 1
21583: PUSH
21584: LD_VAR 0 2
21588: MINUS
21589: PUSH
21590: LD_VAR 0 3
21594: PLUS
21595: ST_TO_ADDR
21596: GO 21614
// length := i_to - i_from ;
21598: LD_ADDR_VAR 0 11
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_VAR 0 2
21612: MINUS
21613: ST_TO_ADDR
// end else
21614: GO 21677
// begin d := - 1 ;
21616: LD_ADDR_VAR 0 9
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: ST_TO_ADDR
// if i_from > i_to then
21625: LD_VAR 0 2
21629: PUSH
21630: LD_VAR 0 3
21634: GREATER
21635: IFFALSE 21655
// length := i_from - i_to else
21637: LD_ADDR_VAR 0 11
21641: PUSH
21642: LD_VAR 0 2
21646: PUSH
21647: LD_VAR 0 3
21651: MINUS
21652: ST_TO_ADDR
21653: GO 21677
// length := ( array - i_to ) + i_from ;
21655: LD_ADDR_VAR 0 11
21659: PUSH
21660: LD_VAR 0 1
21664: PUSH
21665: LD_VAR 0 3
21669: MINUS
21670: PUSH
21671: LD_VAR 0 2
21675: PLUS
21676: ST_TO_ADDR
// end ; if not length then
21677: LD_VAR 0 11
21681: NOT
21682: IFFALSE 21686
// exit ;
21684: GO 21844
// tmp := array ;
21686: LD_ADDR_VAR 0 10
21690: PUSH
21691: LD_VAR 0 1
21695: ST_TO_ADDR
// for i = 1 to length do
21696: LD_ADDR_VAR 0 6
21700: PUSH
21701: DOUBLE
21702: LD_INT 1
21704: DEC
21705: ST_TO_ADDR
21706: LD_VAR 0 11
21710: PUSH
21711: FOR_TO
21712: IFFALSE 21832
// begin for j = 1 to array do
21714: LD_ADDR_VAR 0 7
21718: PUSH
21719: DOUBLE
21720: LD_INT 1
21722: DEC
21723: ST_TO_ADDR
21724: LD_VAR 0 1
21728: PUSH
21729: FOR_TO
21730: IFFALSE 21818
// begin k := j + d ;
21732: LD_ADDR_VAR 0 8
21736: PUSH
21737: LD_VAR 0 7
21741: PUSH
21742: LD_VAR 0 9
21746: PLUS
21747: ST_TO_ADDR
// if k > array then
21748: LD_VAR 0 8
21752: PUSH
21753: LD_VAR 0 1
21757: GREATER
21758: IFFALSE 21768
// k := 1 ;
21760: LD_ADDR_VAR 0 8
21764: PUSH
21765: LD_INT 1
21767: ST_TO_ADDR
// if not k then
21768: LD_VAR 0 8
21772: NOT
21773: IFFALSE 21785
// k := array ;
21775: LD_ADDR_VAR 0 8
21779: PUSH
21780: LD_VAR 0 1
21784: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21785: LD_ADDR_VAR 0 10
21789: PUSH
21790: LD_VAR 0 10
21794: PPUSH
21795: LD_VAR 0 8
21799: PPUSH
21800: LD_VAR 0 1
21804: PUSH
21805: LD_VAR 0 7
21809: ARRAY
21810: PPUSH
21811: CALL_OW 1
21815: ST_TO_ADDR
// end ;
21816: GO 21729
21818: POP
21819: POP
// array := tmp ;
21820: LD_ADDR_VAR 0 1
21824: PUSH
21825: LD_VAR 0 10
21829: ST_TO_ADDR
// end ;
21830: GO 21711
21832: POP
21833: POP
// result := array ;
21834: LD_ADDR_VAR 0 5
21838: PUSH
21839: LD_VAR 0 1
21843: ST_TO_ADDR
// end ;
21844: LD_VAR 0 5
21848: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21849: LD_INT 0
21851: PPUSH
21852: PPUSH
// result := 0 ;
21853: LD_ADDR_VAR 0 3
21857: PUSH
21858: LD_INT 0
21860: ST_TO_ADDR
// if not array or not value in array then
21861: LD_VAR 0 1
21865: NOT
21866: PUSH
21867: LD_VAR 0 2
21871: PUSH
21872: LD_VAR 0 1
21876: IN
21877: NOT
21878: OR
21879: IFFALSE 21883
// exit ;
21881: GO 21937
// for i = 1 to array do
21883: LD_ADDR_VAR 0 4
21887: PUSH
21888: DOUBLE
21889: LD_INT 1
21891: DEC
21892: ST_TO_ADDR
21893: LD_VAR 0 1
21897: PUSH
21898: FOR_TO
21899: IFFALSE 21935
// if value = array [ i ] then
21901: LD_VAR 0 2
21905: PUSH
21906: LD_VAR 0 1
21910: PUSH
21911: LD_VAR 0 4
21915: ARRAY
21916: EQUAL
21917: IFFALSE 21933
// begin result := i ;
21919: LD_ADDR_VAR 0 3
21923: PUSH
21924: LD_VAR 0 4
21928: ST_TO_ADDR
// exit ;
21929: POP
21930: POP
21931: GO 21937
// end ;
21933: GO 21898
21935: POP
21936: POP
// end ;
21937: LD_VAR 0 3
21941: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21942: LD_INT 0
21944: PPUSH
// vc_chassis := chassis ;
21945: LD_ADDR_OWVAR 37
21949: PUSH
21950: LD_VAR 0 1
21954: ST_TO_ADDR
// vc_engine := engine ;
21955: LD_ADDR_OWVAR 39
21959: PUSH
21960: LD_VAR 0 2
21964: ST_TO_ADDR
// vc_control := control ;
21965: LD_ADDR_OWVAR 38
21969: PUSH
21970: LD_VAR 0 3
21974: ST_TO_ADDR
// vc_weapon := weapon ;
21975: LD_ADDR_OWVAR 40
21979: PUSH
21980: LD_VAR 0 4
21984: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21985: LD_ADDR_OWVAR 41
21989: PUSH
21990: LD_VAR 0 5
21994: ST_TO_ADDR
// end ;
21995: LD_VAR 0 6
21999: RET
// export function WantPlant ( unit ) ; var task ; begin
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
// result := false ;
22004: LD_ADDR_VAR 0 2
22008: PUSH
22009: LD_INT 0
22011: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL_OW 437
22026: ST_TO_ADDR
// if task then
22027: LD_VAR 0 3
22031: IFFALSE 22059
// if task [ 1 ] [ 1 ] = p then
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 1
22040: ARRAY
22041: PUSH
22042: LD_INT 1
22044: ARRAY
22045: PUSH
22046: LD_STRING p
22048: EQUAL
22049: IFFALSE 22059
// result := true ;
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: LD_INT 1
22058: ST_TO_ADDR
// end ;
22059: LD_VAR 0 2
22063: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22064: LD_INT 0
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
// if pos < 1 then
22070: LD_VAR 0 2
22074: PUSH
22075: LD_INT 1
22077: LESS
22078: IFFALSE 22082
// exit ;
22080: GO 22385
// if pos = 1 then
22082: LD_VAR 0 2
22086: PUSH
22087: LD_INT 1
22089: EQUAL
22090: IFFALSE 22123
// result := Replace ( arr , pos [ 1 ] , value ) else
22092: LD_ADDR_VAR 0 4
22096: PUSH
22097: LD_VAR 0 1
22101: PPUSH
22102: LD_VAR 0 2
22106: PUSH
22107: LD_INT 1
22109: ARRAY
22110: PPUSH
22111: LD_VAR 0 3
22115: PPUSH
22116: CALL_OW 1
22120: ST_TO_ADDR
22121: GO 22385
// begin tmp := arr ;
22123: LD_ADDR_VAR 0 6
22127: PUSH
22128: LD_VAR 0 1
22132: ST_TO_ADDR
// s_arr := [ tmp ] ;
22133: LD_ADDR_VAR 0 7
22137: PUSH
22138: LD_VAR 0 6
22142: PUSH
22143: EMPTY
22144: LIST
22145: ST_TO_ADDR
// for i = 1 to pos - 1 do
22146: LD_ADDR_VAR 0 5
22150: PUSH
22151: DOUBLE
22152: LD_INT 1
22154: DEC
22155: ST_TO_ADDR
22156: LD_VAR 0 2
22160: PUSH
22161: LD_INT 1
22163: MINUS
22164: PUSH
22165: FOR_TO
22166: IFFALSE 22211
// begin tmp := tmp [ pos [ i ] ] ;
22168: LD_ADDR_VAR 0 6
22172: PUSH
22173: LD_VAR 0 6
22177: PUSH
22178: LD_VAR 0 2
22182: PUSH
22183: LD_VAR 0 5
22187: ARRAY
22188: ARRAY
22189: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22190: LD_ADDR_VAR 0 7
22194: PUSH
22195: LD_VAR 0 7
22199: PUSH
22200: LD_VAR 0 6
22204: PUSH
22205: EMPTY
22206: LIST
22207: ADD
22208: ST_TO_ADDR
// end ;
22209: GO 22165
22211: POP
22212: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22213: LD_ADDR_VAR 0 6
22217: PUSH
22218: LD_VAR 0 6
22222: PPUSH
22223: LD_VAR 0 2
22227: PUSH
22228: LD_VAR 0 2
22232: ARRAY
22233: PPUSH
22234: LD_VAR 0 3
22238: PPUSH
22239: CALL_OW 1
22243: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22244: LD_ADDR_VAR 0 7
22248: PUSH
22249: LD_VAR 0 7
22253: PPUSH
22254: LD_VAR 0 7
22258: PPUSH
22259: LD_VAR 0 6
22263: PPUSH
22264: CALL_OW 1
22268: ST_TO_ADDR
// for i = s_arr downto 2 do
22269: LD_ADDR_VAR 0 5
22273: PUSH
22274: DOUBLE
22275: LD_VAR 0 7
22279: INC
22280: ST_TO_ADDR
22281: LD_INT 2
22283: PUSH
22284: FOR_DOWNTO
22285: IFFALSE 22369
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22287: LD_ADDR_VAR 0 6
22291: PUSH
22292: LD_VAR 0 7
22296: PUSH
22297: LD_VAR 0 5
22301: PUSH
22302: LD_INT 1
22304: MINUS
22305: ARRAY
22306: PPUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_VAR 0 5
22316: PUSH
22317: LD_INT 1
22319: MINUS
22320: ARRAY
22321: PPUSH
22322: LD_VAR 0 7
22326: PUSH
22327: LD_VAR 0 5
22331: ARRAY
22332: PPUSH
22333: CALL_OW 1
22337: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22338: LD_ADDR_VAR 0 7
22342: PUSH
22343: LD_VAR 0 7
22347: PPUSH
22348: LD_VAR 0 5
22352: PUSH
22353: LD_INT 1
22355: MINUS
22356: PPUSH
22357: LD_VAR 0 6
22361: PPUSH
22362: CALL_OW 1
22366: ST_TO_ADDR
// end ;
22367: GO 22284
22369: POP
22370: POP
// result := s_arr [ 1 ] ;
22371: LD_ADDR_VAR 0 4
22375: PUSH
22376: LD_VAR 0 7
22380: PUSH
22381: LD_INT 1
22383: ARRAY
22384: ST_TO_ADDR
// end ; end ;
22385: LD_VAR 0 4
22389: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22390: LD_INT 0
22392: PPUSH
22393: PPUSH
// if not list then
22394: LD_VAR 0 1
22398: NOT
22399: IFFALSE 22403
// exit ;
22401: GO 22494
// i := list [ pos1 ] ;
22403: LD_ADDR_VAR 0 5
22407: PUSH
22408: LD_VAR 0 1
22412: PUSH
22413: LD_VAR 0 2
22417: ARRAY
22418: ST_TO_ADDR
// if not i then
22419: LD_VAR 0 5
22423: NOT
22424: IFFALSE 22428
// exit ;
22426: GO 22494
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22428: LD_ADDR_VAR 0 1
22432: PUSH
22433: LD_VAR 0 1
22437: PPUSH
22438: LD_VAR 0 2
22442: PPUSH
22443: LD_VAR 0 1
22447: PUSH
22448: LD_VAR 0 3
22452: ARRAY
22453: PPUSH
22454: CALL_OW 1
22458: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22459: LD_ADDR_VAR 0 1
22463: PUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: LD_VAR 0 3
22473: PPUSH
22474: LD_VAR 0 5
22478: PPUSH
22479: CALL_OW 1
22483: ST_TO_ADDR
// result := list ;
22484: LD_ADDR_VAR 0 4
22488: PUSH
22489: LD_VAR 0 1
22493: ST_TO_ADDR
// end ;
22494: LD_VAR 0 4
22498: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22499: LD_INT 0
22501: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22502: LD_ADDR_VAR 0 5
22506: PUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 250
22516: PPUSH
22517: LD_VAR 0 1
22521: PPUSH
22522: CALL_OW 251
22526: PPUSH
22527: LD_VAR 0 2
22531: PPUSH
22532: LD_VAR 0 3
22536: PPUSH
22537: LD_VAR 0 4
22541: PPUSH
22542: CALL 22552 0 5
22546: ST_TO_ADDR
// end ;
22547: LD_VAR 0 5
22551: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22552: LD_INT 0
22554: PPUSH
22555: PPUSH
22556: PPUSH
22557: PPUSH
// if not list then
22558: LD_VAR 0 3
22562: NOT
22563: IFFALSE 22567
// exit ;
22565: GO 22955
// result := [ ] ;
22567: LD_ADDR_VAR 0 6
22571: PUSH
22572: EMPTY
22573: ST_TO_ADDR
// for i in list do
22574: LD_ADDR_VAR 0 7
22578: PUSH
22579: LD_VAR 0 3
22583: PUSH
22584: FOR_IN
22585: IFFALSE 22787
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22587: LD_ADDR_VAR 0 9
22591: PUSH
22592: LD_VAR 0 7
22596: PPUSH
22597: LD_VAR 0 1
22601: PPUSH
22602: LD_VAR 0 2
22606: PPUSH
22607: CALL_OW 297
22611: ST_TO_ADDR
// if not result then
22612: LD_VAR 0 6
22616: NOT
22617: IFFALSE 22643
// result := [ [ i , tmp ] ] else
22619: LD_ADDR_VAR 0 6
22623: PUSH
22624: LD_VAR 0 7
22628: PUSH
22629: LD_VAR 0 9
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: EMPTY
22639: LIST
22640: ST_TO_ADDR
22641: GO 22785
// begin if result [ result ] [ 2 ] < tmp then
22643: LD_VAR 0 6
22647: PUSH
22648: LD_VAR 0 6
22652: ARRAY
22653: PUSH
22654: LD_INT 2
22656: ARRAY
22657: PUSH
22658: LD_VAR 0 9
22662: LESS
22663: IFFALSE 22705
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22665: LD_ADDR_VAR 0 6
22669: PUSH
22670: LD_VAR 0 6
22674: PPUSH
22675: LD_VAR 0 6
22679: PUSH
22680: LD_INT 1
22682: PLUS
22683: PPUSH
22684: LD_VAR 0 7
22688: PUSH
22689: LD_VAR 0 9
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PPUSH
22698: CALL_OW 2
22702: ST_TO_ADDR
22703: GO 22785
// for j = 1 to result do
22705: LD_ADDR_VAR 0 8
22709: PUSH
22710: DOUBLE
22711: LD_INT 1
22713: DEC
22714: ST_TO_ADDR
22715: LD_VAR 0 6
22719: PUSH
22720: FOR_TO
22721: IFFALSE 22783
// begin if tmp < result [ j ] [ 2 ] then
22723: LD_VAR 0 9
22727: PUSH
22728: LD_VAR 0 6
22732: PUSH
22733: LD_VAR 0 8
22737: ARRAY
22738: PUSH
22739: LD_INT 2
22741: ARRAY
22742: LESS
22743: IFFALSE 22781
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22745: LD_ADDR_VAR 0 6
22749: PUSH
22750: LD_VAR 0 6
22754: PPUSH
22755: LD_VAR 0 8
22759: PPUSH
22760: LD_VAR 0 7
22764: PUSH
22765: LD_VAR 0 9
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PPUSH
22774: CALL_OW 2
22778: ST_TO_ADDR
// break ;
22779: GO 22783
// end ; end ;
22781: GO 22720
22783: POP
22784: POP
// end ; end ;
22785: GO 22584
22787: POP
22788: POP
// if result and not asc then
22789: LD_VAR 0 6
22793: PUSH
22794: LD_VAR 0 4
22798: NOT
22799: AND
22800: IFFALSE 22875
// begin tmp := result ;
22802: LD_ADDR_VAR 0 9
22806: PUSH
22807: LD_VAR 0 6
22811: ST_TO_ADDR
// for i = tmp downto 1 do
22812: LD_ADDR_VAR 0 7
22816: PUSH
22817: DOUBLE
22818: LD_VAR 0 9
22822: INC
22823: ST_TO_ADDR
22824: LD_INT 1
22826: PUSH
22827: FOR_DOWNTO
22828: IFFALSE 22873
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22830: LD_ADDR_VAR 0 6
22834: PUSH
22835: LD_VAR 0 6
22839: PPUSH
22840: LD_VAR 0 9
22844: PUSH
22845: LD_VAR 0 7
22849: MINUS
22850: PUSH
22851: LD_INT 1
22853: PLUS
22854: PPUSH
22855: LD_VAR 0 9
22859: PUSH
22860: LD_VAR 0 7
22864: ARRAY
22865: PPUSH
22866: CALL_OW 1
22870: ST_TO_ADDR
22871: GO 22827
22873: POP
22874: POP
// end ; tmp := [ ] ;
22875: LD_ADDR_VAR 0 9
22879: PUSH
22880: EMPTY
22881: ST_TO_ADDR
// if mode then
22882: LD_VAR 0 5
22886: IFFALSE 22955
// begin for i = 1 to result do
22888: LD_ADDR_VAR 0 7
22892: PUSH
22893: DOUBLE
22894: LD_INT 1
22896: DEC
22897: ST_TO_ADDR
22898: LD_VAR 0 6
22902: PUSH
22903: FOR_TO
22904: IFFALSE 22943
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22906: LD_ADDR_VAR 0 9
22910: PUSH
22911: LD_VAR 0 9
22915: PPUSH
22916: LD_VAR 0 7
22920: PPUSH
22921: LD_VAR 0 6
22925: PUSH
22926: LD_VAR 0 7
22930: ARRAY
22931: PUSH
22932: LD_INT 1
22934: ARRAY
22935: PPUSH
22936: CALL_OW 1
22940: ST_TO_ADDR
22941: GO 22903
22943: POP
22944: POP
// result := tmp ;
22945: LD_ADDR_VAR 0 6
22949: PUSH
22950: LD_VAR 0 9
22954: ST_TO_ADDR
// end ; end ;
22955: LD_VAR 0 6
22959: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22960: LD_INT 0
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22968: LD_ADDR_VAR 0 5
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: ST_TO_ADDR
// if not x or not y then
22990: LD_VAR 0 2
22994: NOT
22995: PUSH
22996: LD_VAR 0 3
23000: NOT
23001: OR
23002: IFFALSE 23006
// exit ;
23004: GO 24656
// if not range then
23006: LD_VAR 0 4
23010: NOT
23011: IFFALSE 23021
// range := 10 ;
23013: LD_ADDR_VAR 0 4
23017: PUSH
23018: LD_INT 10
23020: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23021: LD_ADDR_VAR 0 8
23025: PUSH
23026: LD_INT 81
23028: PUSH
23029: LD_VAR 0 1
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 92
23040: PUSH
23041: LD_VAR 0 2
23045: PUSH
23046: LD_VAR 0 3
23050: PUSH
23051: LD_VAR 0 4
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 3
23064: PUSH
23065: LD_INT 21
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: PPUSH
23084: CALL_OW 69
23088: ST_TO_ADDR
// if not tmp then
23089: LD_VAR 0 8
23093: NOT
23094: IFFALSE 23098
// exit ;
23096: GO 24656
// for i in tmp do
23098: LD_ADDR_VAR 0 6
23102: PUSH
23103: LD_VAR 0 8
23107: PUSH
23108: FOR_IN
23109: IFFALSE 24631
// begin points := [ 0 , 0 , 0 ] ;
23111: LD_ADDR_VAR 0 9
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: ST_TO_ADDR
// bpoints := 1 ;
23130: LD_ADDR_VAR 0 10
23134: PUSH
23135: LD_INT 1
23137: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23138: LD_VAR 0 6
23142: PPUSH
23143: CALL_OW 247
23147: PUSH
23148: LD_INT 1
23150: DOUBLE
23151: EQUAL
23152: IFTRUE 23156
23154: GO 23734
23156: POP
// begin if GetClass ( i ) = 1 then
23157: LD_VAR 0 6
23161: PPUSH
23162: CALL_OW 257
23166: PUSH
23167: LD_INT 1
23169: EQUAL
23170: IFFALSE 23191
// points := [ 10 , 5 , 3 ] ;
23172: LD_ADDR_VAR 0 9
23176: PUSH
23177: LD_INT 10
23179: PUSH
23180: LD_INT 5
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23191: LD_VAR 0 6
23195: PPUSH
23196: CALL_OW 257
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: LD_INT 4
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: IN
23215: IFFALSE 23236
// points := [ 3 , 2 , 1 ] ;
23217: LD_ADDR_VAR 0 9
23221: PUSH
23222: LD_INT 3
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23236: LD_VAR 0 6
23240: PPUSH
23241: CALL_OW 257
23245: PUSH
23246: LD_INT 5
23248: EQUAL
23249: IFFALSE 23270
// points := [ 130 , 5 , 2 ] ;
23251: LD_ADDR_VAR 0 9
23255: PUSH
23256: LD_INT 130
23258: PUSH
23259: LD_INT 5
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23270: LD_VAR 0 6
23274: PPUSH
23275: CALL_OW 257
23279: PUSH
23280: LD_INT 8
23282: EQUAL
23283: IFFALSE 23304
// points := [ 35 , 35 , 30 ] ;
23285: LD_ADDR_VAR 0 9
23289: PUSH
23290: LD_INT 35
23292: PUSH
23293: LD_INT 35
23295: PUSH
23296: LD_INT 30
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23304: LD_VAR 0 6
23308: PPUSH
23309: CALL_OW 257
23313: PUSH
23314: LD_INT 9
23316: EQUAL
23317: IFFALSE 23338
// points := [ 20 , 55 , 40 ] ;
23319: LD_ADDR_VAR 0 9
23323: PUSH
23324: LD_INT 20
23326: PUSH
23327: LD_INT 55
23329: PUSH
23330: LD_INT 40
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23338: LD_VAR 0 6
23342: PPUSH
23343: CALL_OW 257
23347: PUSH
23348: LD_INT 12
23350: PUSH
23351: LD_INT 16
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: IN
23358: IFFALSE 23379
// points := [ 5 , 3 , 2 ] ;
23360: LD_ADDR_VAR 0 9
23364: PUSH
23365: LD_INT 5
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23379: LD_VAR 0 6
23383: PPUSH
23384: CALL_OW 257
23388: PUSH
23389: LD_INT 17
23391: EQUAL
23392: IFFALSE 23413
// points := [ 100 , 50 , 75 ] ;
23394: LD_ADDR_VAR 0 9
23398: PUSH
23399: LD_INT 100
23401: PUSH
23402: LD_INT 50
23404: PUSH
23405: LD_INT 75
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23413: LD_VAR 0 6
23417: PPUSH
23418: CALL_OW 257
23422: PUSH
23423: LD_INT 15
23425: EQUAL
23426: IFFALSE 23447
// points := [ 10 , 5 , 3 ] ;
23428: LD_ADDR_VAR 0 9
23432: PUSH
23433: LD_INT 10
23435: PUSH
23436: LD_INT 5
23438: PUSH
23439: LD_INT 3
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23447: LD_VAR 0 6
23451: PPUSH
23452: CALL_OW 257
23456: PUSH
23457: LD_INT 14
23459: EQUAL
23460: IFFALSE 23481
// points := [ 10 , 0 , 0 ] ;
23462: LD_ADDR_VAR 0 9
23466: PUSH
23467: LD_INT 10
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23481: LD_VAR 0 6
23485: PPUSH
23486: CALL_OW 257
23490: PUSH
23491: LD_INT 11
23493: EQUAL
23494: IFFALSE 23515
// points := [ 30 , 10 , 5 ] ;
23496: LD_ADDR_VAR 0 9
23500: PUSH
23501: LD_INT 30
23503: PUSH
23504: LD_INT 10
23506: PUSH
23507: LD_INT 5
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: LIST
23514: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23515: LD_VAR 0 1
23519: PPUSH
23520: LD_INT 5
23522: PPUSH
23523: CALL_OW 321
23527: PUSH
23528: LD_INT 2
23530: EQUAL
23531: IFFALSE 23548
// bpoints := bpoints * 1.8 ;
23533: LD_ADDR_VAR 0 10
23537: PUSH
23538: LD_VAR 0 10
23542: PUSH
23543: LD_REAL  1.80000000000000E+0000
23546: MUL
23547: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23548: LD_VAR 0 6
23552: PPUSH
23553: CALL_OW 257
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: LD_INT 4
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: IN
23576: PUSH
23577: LD_VAR 0 1
23581: PPUSH
23582: LD_INT 51
23584: PPUSH
23585: CALL_OW 321
23589: PUSH
23590: LD_INT 2
23592: EQUAL
23593: AND
23594: IFFALSE 23611
// bpoints := bpoints * 1.2 ;
23596: LD_ADDR_VAR 0 10
23600: PUSH
23601: LD_VAR 0 10
23605: PUSH
23606: LD_REAL  1.20000000000000E+0000
23609: MUL
23610: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23611: LD_VAR 0 6
23615: PPUSH
23616: CALL_OW 257
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: LD_INT 7
23626: PUSH
23627: LD_INT 9
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: IN
23635: PUSH
23636: LD_VAR 0 1
23640: PPUSH
23641: LD_INT 52
23643: PPUSH
23644: CALL_OW 321
23648: PUSH
23649: LD_INT 2
23651: EQUAL
23652: AND
23653: IFFALSE 23670
// bpoints := bpoints * 1.5 ;
23655: LD_ADDR_VAR 0 10
23659: PUSH
23660: LD_VAR 0 10
23664: PUSH
23665: LD_REAL  1.50000000000000E+0000
23668: MUL
23669: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23670: LD_VAR 0 1
23674: PPUSH
23675: LD_INT 66
23677: PPUSH
23678: CALL_OW 321
23682: PUSH
23683: LD_INT 2
23685: EQUAL
23686: IFFALSE 23703
// bpoints := bpoints * 1.1 ;
23688: LD_ADDR_VAR 0 10
23692: PUSH
23693: LD_VAR 0 10
23697: PUSH
23698: LD_REAL  1.10000000000000E+0000
23701: MUL
23702: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23703: LD_ADDR_VAR 0 10
23707: PUSH
23708: LD_VAR 0 10
23712: PUSH
23713: LD_VAR 0 6
23717: PPUSH
23718: LD_INT 1
23720: PPUSH
23721: CALL_OW 259
23725: PUSH
23726: LD_REAL  1.15000000000000E+0000
23729: MUL
23730: MUL
23731: ST_TO_ADDR
// end ; unit_vehicle :
23732: GO 24560
23734: LD_INT 2
23736: DOUBLE
23737: EQUAL
23738: IFTRUE 23742
23740: GO 24548
23742: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23743: LD_VAR 0 6
23747: PPUSH
23748: CALL_OW 264
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 42
23758: PUSH
23759: LD_INT 24
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: IN
23767: IFFALSE 23788
// points := [ 25 , 5 , 3 ] ;
23769: LD_ADDR_VAR 0 9
23773: PUSH
23774: LD_INT 25
23776: PUSH
23777: LD_INT 5
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23788: LD_VAR 0 6
23792: PPUSH
23793: CALL_OW 264
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 43
23803: PUSH
23804: LD_INT 25
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: IN
23812: IFFALSE 23833
// points := [ 40 , 15 , 5 ] ;
23814: LD_ADDR_VAR 0 9
23818: PUSH
23819: LD_INT 40
23821: PUSH
23822: LD_INT 15
23824: PUSH
23825: LD_INT 5
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23833: LD_VAR 0 6
23837: PPUSH
23838: CALL_OW 264
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: LD_INT 23
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: IN
23853: IFFALSE 23874
// points := [ 7 , 25 , 8 ] ;
23855: LD_ADDR_VAR 0 9
23859: PUSH
23860: LD_INT 7
23862: PUSH
23863: LD_INT 25
23865: PUSH
23866: LD_INT 8
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23874: LD_VAR 0 6
23878: PPUSH
23879: CALL_OW 264
23883: PUSH
23884: LD_INT 5
23886: PUSH
23887: LD_INT 27
23889: PUSH
23890: LD_INT 44
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: IN
23898: IFFALSE 23919
// points := [ 14 , 50 , 16 ] ;
23900: LD_ADDR_VAR 0 9
23904: PUSH
23905: LD_INT 14
23907: PUSH
23908: LD_INT 50
23910: PUSH
23911: LD_INT 16
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23919: LD_VAR 0 6
23923: PPUSH
23924: CALL_OW 264
23928: PUSH
23929: LD_INT 6
23931: PUSH
23932: LD_INT 46
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: IN
23939: IFFALSE 23960
// points := [ 32 , 120 , 70 ] ;
23941: LD_ADDR_VAR 0 9
23945: PUSH
23946: LD_INT 32
23948: PUSH
23949: LD_INT 120
23951: PUSH
23952: LD_INT 70
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23960: LD_VAR 0 6
23964: PPUSH
23965: CALL_OW 264
23969: PUSH
23970: LD_INT 7
23972: PUSH
23973: LD_INT 28
23975: PUSH
23976: LD_INT 45
23978: PUSH
23979: LD_INT 92
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: IN
23988: IFFALSE 24009
// points := [ 35 , 20 , 45 ] ;
23990: LD_ADDR_VAR 0 9
23994: PUSH
23995: LD_INT 35
23997: PUSH
23998: LD_INT 20
24000: PUSH
24001: LD_INT 45
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24009: LD_VAR 0 6
24013: PPUSH
24014: CALL_OW 264
24018: PUSH
24019: LD_INT 47
24021: PUSH
24022: EMPTY
24023: LIST
24024: IN
24025: IFFALSE 24046
// points := [ 67 , 45 , 75 ] ;
24027: LD_ADDR_VAR 0 9
24031: PUSH
24032: LD_INT 67
24034: PUSH
24035: LD_INT 45
24037: PUSH
24038: LD_INT 75
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24046: LD_VAR 0 6
24050: PPUSH
24051: CALL_OW 264
24055: PUSH
24056: LD_INT 26
24058: PUSH
24059: EMPTY
24060: LIST
24061: IN
24062: IFFALSE 24083
// points := [ 120 , 30 , 80 ] ;
24064: LD_ADDR_VAR 0 9
24068: PUSH
24069: LD_INT 120
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 80
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24083: LD_VAR 0 6
24087: PPUSH
24088: CALL_OW 264
24092: PUSH
24093: LD_INT 22
24095: PUSH
24096: EMPTY
24097: LIST
24098: IN
24099: IFFALSE 24120
// points := [ 40 , 1 , 1 ] ;
24101: LD_ADDR_VAR 0 9
24105: PUSH
24106: LD_INT 40
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24120: LD_VAR 0 6
24124: PPUSH
24125: CALL_OW 264
24129: PUSH
24130: LD_INT 29
24132: PUSH
24133: EMPTY
24134: LIST
24135: IN
24136: IFFALSE 24157
// points := [ 70 , 200 , 400 ] ;
24138: LD_ADDR_VAR 0 9
24142: PUSH
24143: LD_INT 70
24145: PUSH
24146: LD_INT 200
24148: PUSH
24149: LD_INT 400
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24157: LD_VAR 0 6
24161: PPUSH
24162: CALL_OW 264
24166: PUSH
24167: LD_INT 14
24169: PUSH
24170: LD_INT 53
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: IN
24177: IFFALSE 24198
// points := [ 40 , 10 , 20 ] ;
24179: LD_ADDR_VAR 0 9
24183: PUSH
24184: LD_INT 40
24186: PUSH
24187: LD_INT 10
24189: PUSH
24190: LD_INT 20
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24198: LD_VAR 0 6
24202: PPUSH
24203: CALL_OW 264
24207: PUSH
24208: LD_INT 9
24210: PUSH
24211: EMPTY
24212: LIST
24213: IN
24214: IFFALSE 24235
// points := [ 5 , 70 , 20 ] ;
24216: LD_ADDR_VAR 0 9
24220: PUSH
24221: LD_INT 5
24223: PUSH
24224: LD_INT 70
24226: PUSH
24227: LD_INT 20
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: LIST
24234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24235: LD_VAR 0 6
24239: PPUSH
24240: CALL_OW 264
24244: PUSH
24245: LD_INT 10
24247: PUSH
24248: EMPTY
24249: LIST
24250: IN
24251: IFFALSE 24272
// points := [ 35 , 110 , 70 ] ;
24253: LD_ADDR_VAR 0 9
24257: PUSH
24258: LD_INT 35
24260: PUSH
24261: LD_INT 110
24263: PUSH
24264: LD_INT 70
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24272: LD_VAR 0 6
24276: PPUSH
24277: CALL_OW 265
24281: PUSH
24282: LD_INT 25
24284: EQUAL
24285: IFFALSE 24306
// points := [ 80 , 65 , 100 ] ;
24287: LD_ADDR_VAR 0 9
24291: PUSH
24292: LD_INT 80
24294: PUSH
24295: LD_INT 65
24297: PUSH
24298: LD_INT 100
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24306: LD_VAR 0 6
24310: PPUSH
24311: CALL_OW 263
24315: PUSH
24316: LD_INT 1
24318: EQUAL
24319: IFFALSE 24354
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24321: LD_ADDR_VAR 0 10
24325: PUSH
24326: LD_VAR 0 10
24330: PUSH
24331: LD_VAR 0 6
24335: PPUSH
24336: CALL_OW 311
24340: PPUSH
24341: LD_INT 3
24343: PPUSH
24344: CALL_OW 259
24348: PUSH
24349: LD_INT 4
24351: MUL
24352: MUL
24353: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24354: LD_VAR 0 6
24358: PPUSH
24359: CALL_OW 263
24363: PUSH
24364: LD_INT 2
24366: EQUAL
24367: IFFALSE 24418
// begin j := IsControledBy ( i ) ;
24369: LD_ADDR_VAR 0 7
24373: PUSH
24374: LD_VAR 0 6
24378: PPUSH
24379: CALL_OW 312
24383: ST_TO_ADDR
// if j then
24384: LD_VAR 0 7
24388: IFFALSE 24418
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24390: LD_ADDR_VAR 0 10
24394: PUSH
24395: LD_VAR 0 10
24399: PUSH
24400: LD_VAR 0 7
24404: PPUSH
24405: LD_INT 3
24407: PPUSH
24408: CALL_OW 259
24412: PUSH
24413: LD_INT 3
24415: MUL
24416: MUL
24417: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24418: LD_VAR 0 6
24422: PPUSH
24423: CALL_OW 264
24427: PUSH
24428: LD_INT 5
24430: PUSH
24431: LD_INT 6
24433: PUSH
24434: LD_INT 46
24436: PUSH
24437: LD_INT 44
24439: PUSH
24440: LD_INT 47
24442: PUSH
24443: LD_INT 45
24445: PUSH
24446: LD_INT 28
24448: PUSH
24449: LD_INT 7
24451: PUSH
24452: LD_INT 27
24454: PUSH
24455: LD_INT 29
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: IN
24470: PUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: LD_INT 52
24478: PPUSH
24479: CALL_OW 321
24483: PUSH
24484: LD_INT 2
24486: EQUAL
24487: AND
24488: IFFALSE 24505
// bpoints := bpoints * 1.2 ;
24490: LD_ADDR_VAR 0 10
24494: PUSH
24495: LD_VAR 0 10
24499: PUSH
24500: LD_REAL  1.20000000000000E+0000
24503: MUL
24504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24505: LD_VAR 0 6
24509: PPUSH
24510: CALL_OW 264
24514: PUSH
24515: LD_INT 6
24517: PUSH
24518: LD_INT 46
24520: PUSH
24521: LD_INT 47
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: LIST
24528: IN
24529: IFFALSE 24546
// bpoints := bpoints * 1.2 ;
24531: LD_ADDR_VAR 0 10
24535: PUSH
24536: LD_VAR 0 10
24540: PUSH
24541: LD_REAL  1.20000000000000E+0000
24544: MUL
24545: ST_TO_ADDR
// end ; unit_building :
24546: GO 24560
24548: LD_INT 3
24550: DOUBLE
24551: EQUAL
24552: IFTRUE 24556
24554: GO 24559
24556: POP
// ; end ;
24557: GO 24560
24559: POP
// for j = 1 to 3 do
24560: LD_ADDR_VAR 0 7
24564: PUSH
24565: DOUBLE
24566: LD_INT 1
24568: DEC
24569: ST_TO_ADDR
24570: LD_INT 3
24572: PUSH
24573: FOR_TO
24574: IFFALSE 24627
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24576: LD_ADDR_VAR 0 5
24580: PUSH
24581: LD_VAR 0 5
24585: PPUSH
24586: LD_VAR 0 7
24590: PPUSH
24591: LD_VAR 0 5
24595: PUSH
24596: LD_VAR 0 7
24600: ARRAY
24601: PUSH
24602: LD_VAR 0 9
24606: PUSH
24607: LD_VAR 0 7
24611: ARRAY
24612: PUSH
24613: LD_VAR 0 10
24617: MUL
24618: PLUS
24619: PPUSH
24620: CALL_OW 1
24624: ST_TO_ADDR
24625: GO 24573
24627: POP
24628: POP
// end ;
24629: GO 23108
24631: POP
24632: POP
// result := Replace ( result , 4 , tmp ) ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_VAR 0 5
24642: PPUSH
24643: LD_INT 4
24645: PPUSH
24646: LD_VAR 0 8
24650: PPUSH
24651: CALL_OW 1
24655: ST_TO_ADDR
// end ;
24656: LD_VAR 0 5
24660: RET
// export function DangerAtRange ( unit , range ) ; begin
24661: LD_INT 0
24663: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 255
24678: PPUSH
24679: LD_VAR 0 1
24683: PPUSH
24684: CALL_OW 250
24688: PPUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL_OW 251
24698: PPUSH
24699: LD_VAR 0 2
24703: PPUSH
24704: CALL 22960 0 4
24708: ST_TO_ADDR
// end ;
24709: LD_VAR 0 3
24713: RET
// export function DangerInArea ( side , area ) ; begin
24714: LD_INT 0
24716: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_VAR 0 2
24726: PPUSH
24727: LD_INT 81
24729: PUSH
24730: LD_VAR 0 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PPUSH
24739: CALL_OW 70
24743: ST_TO_ADDR
// end ;
24744: LD_VAR 0 3
24748: RET
// export function IsExtension ( b ) ; begin
24749: LD_INT 0
24751: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24752: LD_ADDR_VAR 0 2
24756: PUSH
24757: LD_VAR 0 1
24761: PUSH
24762: LD_INT 23
24764: PUSH
24765: LD_INT 20
24767: PUSH
24768: LD_INT 22
24770: PUSH
24771: LD_INT 17
24773: PUSH
24774: LD_INT 24
24776: PUSH
24777: LD_INT 21
24779: PUSH
24780: LD_INT 19
24782: PUSH
24783: LD_INT 16
24785: PUSH
24786: LD_INT 25
24788: PUSH
24789: LD_INT 18
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: IN
24804: ST_TO_ADDR
// end ;
24805: LD_VAR 0 2
24809: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24810: LD_INT 0
24812: PPUSH
24813: PPUSH
24814: PPUSH
// result := [ ] ;
24815: LD_ADDR_VAR 0 4
24819: PUSH
24820: EMPTY
24821: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24822: LD_ADDR_VAR 0 5
24826: PUSH
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_INT 21
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PPUSH
24842: CALL_OW 70
24846: ST_TO_ADDR
// if not tmp then
24847: LD_VAR 0 5
24851: NOT
24852: IFFALSE 24856
// exit ;
24854: GO 24920
// if checkLink then
24856: LD_VAR 0 3
24860: IFFALSE 24910
// begin for i in tmp do
24862: LD_ADDR_VAR 0 6
24866: PUSH
24867: LD_VAR 0 5
24871: PUSH
24872: FOR_IN
24873: IFFALSE 24908
// if GetBase ( i ) <> base then
24875: LD_VAR 0 6
24879: PPUSH
24880: CALL_OW 274
24884: PUSH
24885: LD_VAR 0 1
24889: NONEQUAL
24890: IFFALSE 24906
// ComLinkToBase ( base , i ) ;
24892: LD_VAR 0 1
24896: PPUSH
24897: LD_VAR 0 6
24901: PPUSH
24902: CALL_OW 169
24906: GO 24872
24908: POP
24909: POP
// end ; result := tmp ;
24910: LD_ADDR_VAR 0 4
24914: PUSH
24915: LD_VAR 0 5
24919: ST_TO_ADDR
// end ;
24920: LD_VAR 0 4
24924: RET
// export function ComComplete ( units , b ) ; var i ; begin
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
// if not units then
24929: LD_VAR 0 1
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 25028
// for i in units do
24938: LD_ADDR_VAR 0 4
24942: PUSH
24943: LD_VAR 0 1
24947: PUSH
24948: FOR_IN
24949: IFFALSE 25026
// if BuildingStatus ( b ) = bs_build then
24951: LD_VAR 0 2
24955: PPUSH
24956: CALL_OW 461
24960: PUSH
24961: LD_INT 1
24963: EQUAL
24964: IFFALSE 25024
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24966: LD_VAR 0 4
24970: PPUSH
24971: LD_STRING h
24973: PUSH
24974: LD_VAR 0 2
24978: PPUSH
24979: CALL_OW 250
24983: PUSH
24984: LD_VAR 0 2
24988: PPUSH
24989: CALL_OW 251
24993: PUSH
24994: LD_VAR 0 2
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: PPUSH
25020: CALL_OW 446
25024: GO 24948
25026: POP
25027: POP
// end ;
25028: LD_VAR 0 3
25032: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25033: LD_INT 0
25035: PPUSH
25036: PPUSH
25037: PPUSH
25038: PPUSH
25039: PPUSH
25040: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25041: LD_VAR 0 1
25045: NOT
25046: PUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL_OW 263
25056: PUSH
25057: LD_INT 2
25059: NONEQUAL
25060: OR
25061: IFFALSE 25065
// exit ;
25063: GO 25381
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25065: LD_ADDR_VAR 0 6
25069: PUSH
25070: LD_INT 22
25072: PUSH
25073: LD_VAR 0 1
25077: PPUSH
25078: CALL_OW 255
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 30
25092: PUSH
25093: LD_INT 36
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 34
25102: PUSH
25103: LD_INT 31
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PPUSH
25119: CALL_OW 69
25123: ST_TO_ADDR
// if not tmp then
25124: LD_VAR 0 6
25128: NOT
25129: IFFALSE 25133
// exit ;
25131: GO 25381
// result := [ ] ;
25133: LD_ADDR_VAR 0 2
25137: PUSH
25138: EMPTY
25139: ST_TO_ADDR
// for i in tmp do
25140: LD_ADDR_VAR 0 3
25144: PUSH
25145: LD_VAR 0 6
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25222
// begin t := UnitsInside ( i ) ;
25153: LD_ADDR_VAR 0 4
25157: PUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: CALL_OW 313
25167: ST_TO_ADDR
// if t then
25168: LD_VAR 0 4
25172: IFFALSE 25220
// for j in t do
25174: LD_ADDR_VAR 0 7
25178: PUSH
25179: LD_VAR 0 4
25183: PUSH
25184: FOR_IN
25185: IFFALSE 25218
// result := Replace ( result , result + 1 , j ) ;
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_VAR 0 2
25196: PPUSH
25197: LD_VAR 0 2
25201: PUSH
25202: LD_INT 1
25204: PLUS
25205: PPUSH
25206: LD_VAR 0 7
25210: PPUSH
25211: CALL_OW 1
25215: ST_TO_ADDR
25216: GO 25184
25218: POP
25219: POP
// end ;
25220: GO 25150
25222: POP
25223: POP
// if not result then
25224: LD_VAR 0 2
25228: NOT
25229: IFFALSE 25233
// exit ;
25231: GO 25381
// mech := result [ 1 ] ;
25233: LD_ADDR_VAR 0 5
25237: PUSH
25238: LD_VAR 0 2
25242: PUSH
25243: LD_INT 1
25245: ARRAY
25246: ST_TO_ADDR
// if result > 1 then
25247: LD_VAR 0 2
25251: PUSH
25252: LD_INT 1
25254: GREATER
25255: IFFALSE 25367
// begin for i = 2 to result do
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: DOUBLE
25263: LD_INT 2
25265: DEC
25266: ST_TO_ADDR
25267: LD_VAR 0 2
25271: PUSH
25272: FOR_TO
25273: IFFALSE 25365
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25275: LD_ADDR_VAR 0 4
25279: PUSH
25280: LD_VAR 0 2
25284: PUSH
25285: LD_VAR 0 3
25289: ARRAY
25290: PPUSH
25291: LD_INT 3
25293: PPUSH
25294: CALL_OW 259
25298: PUSH
25299: LD_VAR 0 2
25303: PUSH
25304: LD_VAR 0 3
25308: ARRAY
25309: PPUSH
25310: CALL_OW 432
25314: MINUS
25315: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25316: LD_VAR 0 4
25320: PUSH
25321: LD_VAR 0 5
25325: PPUSH
25326: LD_INT 3
25328: PPUSH
25329: CALL_OW 259
25333: PUSH
25334: LD_VAR 0 5
25338: PPUSH
25339: CALL_OW 432
25343: MINUS
25344: GREATEREQUAL
25345: IFFALSE 25363
// mech := result [ i ] ;
25347: LD_ADDR_VAR 0 5
25351: PUSH
25352: LD_VAR 0 2
25356: PUSH
25357: LD_VAR 0 3
25361: ARRAY
25362: ST_TO_ADDR
// end ;
25363: GO 25272
25365: POP
25366: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25367: LD_VAR 0 1
25371: PPUSH
25372: LD_VAR 0 5
25376: PPUSH
25377: CALL_OW 135
// end ;
25381: LD_VAR 0 2
25385: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25386: LD_INT 0
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
// result := [ ] ;
25401: LD_ADDR_VAR 0 7
25405: PUSH
25406: EMPTY
25407: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 266
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: IN
25428: NOT
25429: IFFALSE 25433
// exit ;
25431: GO 27067
// if name then
25433: LD_VAR 0 3
25437: IFFALSE 25453
// SetBName ( base_dep , name ) ;
25439: LD_VAR 0 1
25443: PPUSH
25444: LD_VAR 0 3
25448: PPUSH
25449: CALL_OW 500
// base := GetBase ( base_dep ) ;
25453: LD_ADDR_VAR 0 15
25457: PUSH
25458: LD_VAR 0 1
25462: PPUSH
25463: CALL_OW 274
25467: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25468: LD_ADDR_VAR 0 16
25472: PUSH
25473: LD_VAR 0 1
25477: PPUSH
25478: CALL_OW 255
25482: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25483: LD_ADDR_VAR 0 17
25487: PUSH
25488: LD_VAR 0 1
25492: PPUSH
25493: CALL_OW 248
25497: ST_TO_ADDR
// if sources then
25498: LD_VAR 0 5
25502: IFFALSE 25549
// for i = 1 to 3 do
25504: LD_ADDR_VAR 0 8
25508: PUSH
25509: DOUBLE
25510: LD_INT 1
25512: DEC
25513: ST_TO_ADDR
25514: LD_INT 3
25516: PUSH
25517: FOR_TO
25518: IFFALSE 25547
// AddResourceType ( base , i , sources [ i ] ) ;
25520: LD_VAR 0 15
25524: PPUSH
25525: LD_VAR 0 8
25529: PPUSH
25530: LD_VAR 0 5
25534: PUSH
25535: LD_VAR 0 8
25539: ARRAY
25540: PPUSH
25541: CALL_OW 276
25545: GO 25517
25547: POP
25548: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25549: LD_ADDR_VAR 0 18
25553: PUSH
25554: LD_VAR 0 15
25558: PPUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: LD_INT 1
25566: PPUSH
25567: CALL 24810 0 3
25571: ST_TO_ADDR
// InitHc ;
25572: CALL_OW 19
// InitUc ;
25576: CALL_OW 18
// uc_side := side ;
25580: LD_ADDR_OWVAR 20
25584: PUSH
25585: LD_VAR 0 16
25589: ST_TO_ADDR
// uc_nation := nation ;
25590: LD_ADDR_OWVAR 21
25594: PUSH
25595: LD_VAR 0 17
25599: ST_TO_ADDR
// if buildings then
25600: LD_VAR 0 18
25604: IFFALSE 26926
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25606: LD_ADDR_VAR 0 19
25610: PUSH
25611: LD_VAR 0 18
25615: PPUSH
25616: LD_INT 2
25618: PUSH
25619: LD_INT 30
25621: PUSH
25622: LD_INT 29
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 30
25631: PUSH
25632: LD_INT 30
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: PPUSH
25644: CALL_OW 72
25648: ST_TO_ADDR
// if tmp then
25649: LD_VAR 0 19
25653: IFFALSE 25701
// for i in tmp do
25655: LD_ADDR_VAR 0 8
25659: PUSH
25660: LD_VAR 0 19
25664: PUSH
25665: FOR_IN
25666: IFFALSE 25699
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25668: LD_VAR 0 8
25672: PPUSH
25673: CALL_OW 250
25677: PPUSH
25678: LD_VAR 0 8
25682: PPUSH
25683: CALL_OW 251
25687: PPUSH
25688: LD_VAR 0 16
25692: PPUSH
25693: CALL_OW 441
25697: GO 25665
25699: POP
25700: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25701: LD_VAR 0 18
25705: PPUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 30
25711: PUSH
25712: LD_INT 32
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 30
25721: PUSH
25722: LD_INT 33
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: PPUSH
25734: CALL_OW 72
25738: IFFALSE 25826
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25740: LD_ADDR_VAR 0 8
25744: PUSH
25745: LD_VAR 0 18
25749: PPUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: LD_INT 32
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 30
25765: PUSH
25766: LD_INT 33
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL_OW 72
25782: PUSH
25783: FOR_IN
25784: IFFALSE 25824
// begin if not GetBWeapon ( i ) then
25786: LD_VAR 0 8
25790: PPUSH
25791: CALL_OW 269
25795: NOT
25796: IFFALSE 25822
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25798: LD_VAR 0 8
25802: PPUSH
25803: LD_VAR 0 8
25807: PPUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL 27072 0 2
25817: PPUSH
25818: CALL_OW 431
// end ;
25822: GO 25783
25824: POP
25825: POP
// end ; for i = 1 to personel do
25826: LD_ADDR_VAR 0 8
25830: PUSH
25831: DOUBLE
25832: LD_INT 1
25834: DEC
25835: ST_TO_ADDR
25836: LD_VAR 0 6
25840: PUSH
25841: FOR_TO
25842: IFFALSE 26906
// begin if i > 4 then
25844: LD_VAR 0 8
25848: PUSH
25849: LD_INT 4
25851: GREATER
25852: IFFALSE 25856
// break ;
25854: GO 26906
// case i of 1 :
25856: LD_VAR 0 8
25860: PUSH
25861: LD_INT 1
25863: DOUBLE
25864: EQUAL
25865: IFTRUE 25869
25867: GO 25949
25869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25870: LD_ADDR_VAR 0 12
25874: PUSH
25875: LD_VAR 0 18
25879: PPUSH
25880: LD_INT 22
25882: PUSH
25883: LD_VAR 0 16
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 58
25894: PUSH
25895: EMPTY
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 30
25903: PUSH
25904: LD_INT 32
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 30
25913: PUSH
25914: LD_INT 4
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 30
25923: PUSH
25924: LD_INT 5
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 72
25946: ST_TO_ADDR
25947: GO 26171
25949: LD_INT 2
25951: DOUBLE
25952: EQUAL
25953: IFTRUE 25957
25955: GO 26019
25957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25958: LD_ADDR_VAR 0 12
25962: PUSH
25963: LD_VAR 0 18
25967: PPUSH
25968: LD_INT 22
25970: PUSH
25971: LD_VAR 0 16
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 30
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PPUSH
26012: CALL_OW 72
26016: ST_TO_ADDR
26017: GO 26171
26019: LD_INT 3
26021: DOUBLE
26022: EQUAL
26023: IFTRUE 26027
26025: GO 26089
26027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26028: LD_ADDR_VAR 0 12
26032: PUSH
26033: LD_VAR 0 18
26037: PPUSH
26038: LD_INT 22
26040: PUSH
26041: LD_VAR 0 16
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: LD_INT 30
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 30
26065: PUSH
26066: LD_INT 3
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PPUSH
26082: CALL_OW 72
26086: ST_TO_ADDR
26087: GO 26171
26089: LD_INT 4
26091: DOUBLE
26092: EQUAL
26093: IFTRUE 26097
26095: GO 26170
26097: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26098: LD_ADDR_VAR 0 12
26102: PUSH
26103: LD_VAR 0 18
26107: PPUSH
26108: LD_INT 22
26110: PUSH
26111: LD_VAR 0 16
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 30
26125: PUSH
26126: LD_INT 6
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 30
26135: PUSH
26136: LD_INT 7
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 30
26145: PUSH
26146: LD_INT 8
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 72
26167: ST_TO_ADDR
26168: GO 26171
26170: POP
// if i = 1 then
26171: LD_VAR 0 8
26175: PUSH
26176: LD_INT 1
26178: EQUAL
26179: IFFALSE 26290
// begin tmp := [ ] ;
26181: LD_ADDR_VAR 0 19
26185: PUSH
26186: EMPTY
26187: ST_TO_ADDR
// for j in f do
26188: LD_ADDR_VAR 0 9
26192: PUSH
26193: LD_VAR 0 12
26197: PUSH
26198: FOR_IN
26199: IFFALSE 26272
// if GetBType ( j ) = b_bunker then
26201: LD_VAR 0 9
26205: PPUSH
26206: CALL_OW 266
26210: PUSH
26211: LD_INT 32
26213: EQUAL
26214: IFFALSE 26241
// tmp := Insert ( tmp , 1 , j ) else
26216: LD_ADDR_VAR 0 19
26220: PUSH
26221: LD_VAR 0 19
26225: PPUSH
26226: LD_INT 1
26228: PPUSH
26229: LD_VAR 0 9
26233: PPUSH
26234: CALL_OW 2
26238: ST_TO_ADDR
26239: GO 26270
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26241: LD_ADDR_VAR 0 19
26245: PUSH
26246: LD_VAR 0 19
26250: PPUSH
26251: LD_VAR 0 19
26255: PUSH
26256: LD_INT 1
26258: PLUS
26259: PPUSH
26260: LD_VAR 0 9
26264: PPUSH
26265: CALL_OW 2
26269: ST_TO_ADDR
26270: GO 26198
26272: POP
26273: POP
// if tmp then
26274: LD_VAR 0 19
26278: IFFALSE 26290
// f := tmp ;
26280: LD_ADDR_VAR 0 12
26284: PUSH
26285: LD_VAR 0 19
26289: ST_TO_ADDR
// end ; x := personel [ i ] ;
26290: LD_ADDR_VAR 0 13
26294: PUSH
26295: LD_VAR 0 6
26299: PUSH
26300: LD_VAR 0 8
26304: ARRAY
26305: ST_TO_ADDR
// if x = - 1 then
26306: LD_VAR 0 13
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: EQUAL
26315: IFFALSE 26524
// begin for j in f do
26317: LD_ADDR_VAR 0 9
26321: PUSH
26322: LD_VAR 0 12
26326: PUSH
26327: FOR_IN
26328: IFFALSE 26520
// repeat InitHc ;
26330: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26334: LD_VAR 0 9
26338: PPUSH
26339: CALL_OW 266
26343: PUSH
26344: LD_INT 5
26346: EQUAL
26347: IFFALSE 26417
// begin if UnitsInside ( j ) < 3 then
26349: LD_VAR 0 9
26353: PPUSH
26354: CALL_OW 313
26358: PUSH
26359: LD_INT 3
26361: LESS
26362: IFFALSE 26398
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26364: LD_INT 0
26366: PPUSH
26367: LD_INT 5
26369: PUSH
26370: LD_INT 8
26372: PUSH
26373: LD_INT 9
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: LD_VAR 0 17
26385: ARRAY
26386: PPUSH
26387: LD_VAR 0 4
26391: PPUSH
26392: CALL_OW 380
26396: GO 26415
// PrepareHuman ( false , i , skill ) ;
26398: LD_INT 0
26400: PPUSH
26401: LD_VAR 0 8
26405: PPUSH
26406: LD_VAR 0 4
26410: PPUSH
26411: CALL_OW 380
// end else
26415: GO 26434
// PrepareHuman ( false , i , skill ) ;
26417: LD_INT 0
26419: PPUSH
26420: LD_VAR 0 8
26424: PPUSH
26425: LD_VAR 0 4
26429: PPUSH
26430: CALL_OW 380
// un := CreateHuman ;
26434: LD_ADDR_VAR 0 14
26438: PUSH
26439: CALL_OW 44
26443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26444: LD_ADDR_VAR 0 7
26448: PUSH
26449: LD_VAR 0 7
26453: PPUSH
26454: LD_INT 1
26456: PPUSH
26457: LD_VAR 0 14
26461: PPUSH
26462: CALL_OW 2
26466: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26467: LD_VAR 0 14
26471: PPUSH
26472: LD_VAR 0 9
26476: PPUSH
26477: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26481: LD_VAR 0 9
26485: PPUSH
26486: CALL_OW 313
26490: PUSH
26491: LD_INT 6
26493: EQUAL
26494: PUSH
26495: LD_VAR 0 9
26499: PPUSH
26500: CALL_OW 266
26504: PUSH
26505: LD_INT 32
26507: PUSH
26508: LD_INT 31
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: IN
26515: OR
26516: IFFALSE 26330
26518: GO 26327
26520: POP
26521: POP
// end else
26522: GO 26904
// for j = 1 to x do
26524: LD_ADDR_VAR 0 9
26528: PUSH
26529: DOUBLE
26530: LD_INT 1
26532: DEC
26533: ST_TO_ADDR
26534: LD_VAR 0 13
26538: PUSH
26539: FOR_TO
26540: IFFALSE 26902
// begin InitHc ;
26542: CALL_OW 19
// if not f then
26546: LD_VAR 0 12
26550: NOT
26551: IFFALSE 26640
// begin PrepareHuman ( false , i , skill ) ;
26553: LD_INT 0
26555: PPUSH
26556: LD_VAR 0 8
26560: PPUSH
26561: LD_VAR 0 4
26565: PPUSH
26566: CALL_OW 380
// un := CreateHuman ;
26570: LD_ADDR_VAR 0 14
26574: PUSH
26575: CALL_OW 44
26579: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26580: LD_ADDR_VAR 0 7
26584: PUSH
26585: LD_VAR 0 7
26589: PPUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_VAR 0 14
26597: PPUSH
26598: CALL_OW 2
26602: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26603: LD_VAR 0 14
26607: PPUSH
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 250
26617: PPUSH
26618: LD_VAR 0 1
26622: PPUSH
26623: CALL_OW 251
26627: PPUSH
26628: LD_INT 10
26630: PPUSH
26631: LD_INT 0
26633: PPUSH
26634: CALL_OW 50
// continue ;
26638: GO 26539
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26640: LD_VAR 0 12
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: CALL_OW 313
26653: PUSH
26654: LD_VAR 0 12
26658: PUSH
26659: LD_INT 1
26661: ARRAY
26662: PPUSH
26663: CALL_OW 266
26667: PUSH
26668: LD_INT 32
26670: PUSH
26671: LD_INT 31
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: IN
26678: AND
26679: PUSH
26680: LD_VAR 0 12
26684: PUSH
26685: LD_INT 1
26687: ARRAY
26688: PPUSH
26689: CALL_OW 313
26693: PUSH
26694: LD_INT 6
26696: EQUAL
26697: OR
26698: IFFALSE 26718
// f := Delete ( f , 1 ) ;
26700: LD_ADDR_VAR 0 12
26704: PUSH
26705: LD_VAR 0 12
26709: PPUSH
26710: LD_INT 1
26712: PPUSH
26713: CALL_OW 3
26717: ST_TO_ADDR
// if not f then
26718: LD_VAR 0 12
26722: NOT
26723: IFFALSE 26741
// begin x := x + 2 ;
26725: LD_ADDR_VAR 0 13
26729: PUSH
26730: LD_VAR 0 13
26734: PUSH
26735: LD_INT 2
26737: PLUS
26738: ST_TO_ADDR
// continue ;
26739: GO 26539
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26741: LD_VAR 0 12
26745: PUSH
26746: LD_INT 1
26748: ARRAY
26749: PPUSH
26750: CALL_OW 266
26754: PUSH
26755: LD_INT 5
26757: EQUAL
26758: IFFALSE 26832
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26760: LD_VAR 0 12
26764: PUSH
26765: LD_INT 1
26767: ARRAY
26768: PPUSH
26769: CALL_OW 313
26773: PUSH
26774: LD_INT 3
26776: LESS
26777: IFFALSE 26813
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26779: LD_INT 0
26781: PPUSH
26782: LD_INT 5
26784: PUSH
26785: LD_INT 8
26787: PUSH
26788: LD_INT 9
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: PUSH
26796: LD_VAR 0 17
26800: ARRAY
26801: PPUSH
26802: LD_VAR 0 4
26806: PPUSH
26807: CALL_OW 380
26811: GO 26830
// PrepareHuman ( false , i , skill ) ;
26813: LD_INT 0
26815: PPUSH
26816: LD_VAR 0 8
26820: PPUSH
26821: LD_VAR 0 4
26825: PPUSH
26826: CALL_OW 380
// end else
26830: GO 26849
// PrepareHuman ( false , i , skill ) ;
26832: LD_INT 0
26834: PPUSH
26835: LD_VAR 0 8
26839: PPUSH
26840: LD_VAR 0 4
26844: PPUSH
26845: CALL_OW 380
// un := CreateHuman ;
26849: LD_ADDR_VAR 0 14
26853: PUSH
26854: CALL_OW 44
26858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26859: LD_ADDR_VAR 0 7
26863: PUSH
26864: LD_VAR 0 7
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: LD_VAR 0 14
26876: PPUSH
26877: CALL_OW 2
26881: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26882: LD_VAR 0 14
26886: PPUSH
26887: LD_VAR 0 12
26891: PUSH
26892: LD_INT 1
26894: ARRAY
26895: PPUSH
26896: CALL_OW 52
// end ;
26900: GO 26539
26902: POP
26903: POP
// end ;
26904: GO 25841
26906: POP
26907: POP
// result := result ^ buildings ;
26908: LD_ADDR_VAR 0 7
26912: PUSH
26913: LD_VAR 0 7
26917: PUSH
26918: LD_VAR 0 18
26922: ADD
26923: ST_TO_ADDR
// end else
26924: GO 27067
// begin for i = 1 to personel do
26926: LD_ADDR_VAR 0 8
26930: PUSH
26931: DOUBLE
26932: LD_INT 1
26934: DEC
26935: ST_TO_ADDR
26936: LD_VAR 0 6
26940: PUSH
26941: FOR_TO
26942: IFFALSE 27065
// begin if i > 4 then
26944: LD_VAR 0 8
26948: PUSH
26949: LD_INT 4
26951: GREATER
26952: IFFALSE 26956
// break ;
26954: GO 27065
// x := personel [ i ] ;
26956: LD_ADDR_VAR 0 13
26960: PUSH
26961: LD_VAR 0 6
26965: PUSH
26966: LD_VAR 0 8
26970: ARRAY
26971: ST_TO_ADDR
// if x = - 1 then
26972: LD_VAR 0 13
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: EQUAL
26981: IFFALSE 26985
// continue ;
26983: GO 26941
// PrepareHuman ( false , i , skill ) ;
26985: LD_INT 0
26987: PPUSH
26988: LD_VAR 0 8
26992: PPUSH
26993: LD_VAR 0 4
26997: PPUSH
26998: CALL_OW 380
// un := CreateHuman ;
27002: LD_ADDR_VAR 0 14
27006: PUSH
27007: CALL_OW 44
27011: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27012: LD_VAR 0 14
27016: PPUSH
27017: LD_VAR 0 1
27021: PPUSH
27022: CALL_OW 250
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 251
27036: PPUSH
27037: LD_INT 10
27039: PPUSH
27040: LD_INT 0
27042: PPUSH
27043: CALL_OW 50
// result := result ^ un ;
27047: LD_ADDR_VAR 0 7
27051: PUSH
27052: LD_VAR 0 7
27056: PUSH
27057: LD_VAR 0 14
27061: ADD
27062: ST_TO_ADDR
// end ;
27063: GO 26941
27065: POP
27066: POP
// end ; end ;
27067: LD_VAR 0 7
27071: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27072: LD_INT 0
27074: PPUSH
27075: PPUSH
27076: PPUSH
27077: PPUSH
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
27082: PPUSH
27083: PPUSH
27084: PPUSH
27085: PPUSH
27086: PPUSH
27087: PPUSH
27088: PPUSH
27089: PPUSH
// result := false ;
27090: LD_ADDR_VAR 0 3
27094: PUSH
27095: LD_INT 0
27097: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27098: LD_VAR 0 1
27102: NOT
27103: PUSH
27104: LD_VAR 0 1
27108: PPUSH
27109: CALL_OW 266
27113: PUSH
27114: LD_INT 32
27116: PUSH
27117: LD_INT 33
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: IN
27124: NOT
27125: OR
27126: IFFALSE 27130
// exit ;
27128: GO 28239
// nat := GetNation ( tower ) ;
27130: LD_ADDR_VAR 0 12
27134: PUSH
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 248
27144: ST_TO_ADDR
// side := GetSide ( tower ) ;
27145: LD_ADDR_VAR 0 16
27149: PUSH
27150: LD_VAR 0 1
27154: PPUSH
27155: CALL_OW 255
27159: ST_TO_ADDR
// x := GetX ( tower ) ;
27160: LD_ADDR_VAR 0 10
27164: PUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 250
27174: ST_TO_ADDR
// y := GetY ( tower ) ;
27175: LD_ADDR_VAR 0 11
27179: PUSH
27180: LD_VAR 0 1
27184: PPUSH
27185: CALL_OW 251
27189: ST_TO_ADDR
// if not x or not y then
27190: LD_VAR 0 10
27194: NOT
27195: PUSH
27196: LD_VAR 0 11
27200: NOT
27201: OR
27202: IFFALSE 27206
// exit ;
27204: GO 28239
// weapon := 0 ;
27206: LD_ADDR_VAR 0 18
27210: PUSH
27211: LD_INT 0
27213: ST_TO_ADDR
// fac_list := [ ] ;
27214: LD_ADDR_VAR 0 17
27218: PUSH
27219: EMPTY
27220: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27221: LD_ADDR_VAR 0 6
27225: PUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 274
27235: PPUSH
27236: LD_VAR 0 2
27240: PPUSH
27241: LD_INT 0
27243: PPUSH
27244: CALL 24810 0 3
27248: PPUSH
27249: LD_INT 30
27251: PUSH
27252: LD_INT 3
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PPUSH
27259: CALL_OW 72
27263: ST_TO_ADDR
// if not factories then
27264: LD_VAR 0 6
27268: NOT
27269: IFFALSE 27273
// exit ;
27271: GO 28239
// for i in factories do
27273: LD_ADDR_VAR 0 8
27277: PUSH
27278: LD_VAR 0 6
27282: PUSH
27283: FOR_IN
27284: IFFALSE 27309
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27286: LD_ADDR_VAR 0 17
27290: PUSH
27291: LD_VAR 0 17
27295: PUSH
27296: LD_VAR 0 8
27300: PPUSH
27301: CALL_OW 478
27305: UNION
27306: ST_TO_ADDR
27307: GO 27283
27309: POP
27310: POP
// if not fac_list then
27311: LD_VAR 0 17
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 28239
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27320: LD_ADDR_VAR 0 5
27324: PUSH
27325: LD_INT 4
27327: PUSH
27328: LD_INT 5
27330: PUSH
27331: LD_INT 9
27333: PUSH
27334: LD_INT 10
27336: PUSH
27337: LD_INT 6
27339: PUSH
27340: LD_INT 7
27342: PUSH
27343: LD_INT 11
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 27
27357: PUSH
27358: LD_INT 28
27360: PUSH
27361: LD_INT 26
27363: PUSH
27364: LD_INT 30
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 43
27375: PUSH
27376: LD_INT 44
27378: PUSH
27379: LD_INT 46
27381: PUSH
27382: LD_INT 45
27384: PUSH
27385: LD_INT 47
27387: PUSH
27388: LD_INT 49
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: PUSH
27404: LD_VAR 0 12
27408: ARRAY
27409: ST_TO_ADDR
// list := list isect fac_list ;
27410: LD_ADDR_VAR 0 5
27414: PUSH
27415: LD_VAR 0 5
27419: PUSH
27420: LD_VAR 0 17
27424: ISECT
27425: ST_TO_ADDR
// if not list then
27426: LD_VAR 0 5
27430: NOT
27431: IFFALSE 27435
// exit ;
27433: GO 28239
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27435: LD_VAR 0 12
27439: PUSH
27440: LD_INT 3
27442: EQUAL
27443: PUSH
27444: LD_INT 49
27446: PUSH
27447: LD_VAR 0 5
27451: IN
27452: AND
27453: PUSH
27454: LD_INT 31
27456: PPUSH
27457: LD_VAR 0 16
27461: PPUSH
27462: CALL_OW 321
27466: PUSH
27467: LD_INT 2
27469: EQUAL
27470: AND
27471: IFFALSE 27531
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27473: LD_INT 22
27475: PUSH
27476: LD_VAR 0 16
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 35
27487: PUSH
27488: LD_INT 49
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 91
27497: PUSH
27498: LD_VAR 0 1
27502: PUSH
27503: LD_INT 10
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 69
27520: NOT
27521: IFFALSE 27531
// weapon := ru_time_lapser ;
27523: LD_ADDR_VAR 0 18
27527: PUSH
27528: LD_INT 49
27530: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27531: LD_VAR 0 12
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: IN
27546: PUSH
27547: LD_INT 11
27549: PUSH
27550: LD_VAR 0 5
27554: IN
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_VAR 0 5
27563: IN
27564: OR
27565: AND
27566: PUSH
27567: LD_INT 6
27569: PPUSH
27570: LD_VAR 0 16
27574: PPUSH
27575: CALL_OW 321
27579: PUSH
27580: LD_INT 2
27582: EQUAL
27583: AND
27584: IFFALSE 27749
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27586: LD_INT 22
27588: PUSH
27589: LD_VAR 0 16
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 35
27603: PUSH
27604: LD_INT 11
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 35
27613: PUSH
27614: LD_INT 30
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 91
27628: PUSH
27629: LD_VAR 0 1
27633: PUSH
27634: LD_INT 18
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 69
27651: NOT
27652: PUSH
27653: LD_INT 22
27655: PUSH
27656: LD_VAR 0 16
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 30
27670: PUSH
27671: LD_INT 32
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 30
27680: PUSH
27681: LD_INT 33
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 91
27695: PUSH
27696: LD_VAR 0 1
27700: PUSH
27701: LD_INT 12
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: PPUSH
27717: CALL_OW 69
27721: PUSH
27722: LD_INT 2
27724: GREATER
27725: AND
27726: IFFALSE 27749
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27728: LD_ADDR_VAR 0 18
27732: PUSH
27733: LD_INT 11
27735: PUSH
27736: LD_INT 30
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_VAR 0 12
27747: ARRAY
27748: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27749: LD_VAR 0 18
27753: NOT
27754: PUSH
27755: LD_INT 40
27757: PPUSH
27758: LD_VAR 0 16
27762: PPUSH
27763: CALL_OW 321
27767: PUSH
27768: LD_INT 2
27770: EQUAL
27771: AND
27772: PUSH
27773: LD_INT 7
27775: PUSH
27776: LD_VAR 0 5
27780: IN
27781: PUSH
27782: LD_INT 28
27784: PUSH
27785: LD_VAR 0 5
27789: IN
27790: OR
27791: PUSH
27792: LD_INT 45
27794: PUSH
27795: LD_VAR 0 5
27799: IN
27800: OR
27801: AND
27802: IFFALSE 28056
// begin hex := GetHexInfo ( x , y ) ;
27804: LD_ADDR_VAR 0 4
27808: PUSH
27809: LD_VAR 0 10
27813: PPUSH
27814: LD_VAR 0 11
27818: PPUSH
27819: CALL_OW 546
27823: ST_TO_ADDR
// if hex [ 1 ] then
27824: LD_VAR 0 4
27828: PUSH
27829: LD_INT 1
27831: ARRAY
27832: IFFALSE 27836
// exit ;
27834: GO 28239
// height := hex [ 2 ] ;
27836: LD_ADDR_VAR 0 15
27840: PUSH
27841: LD_VAR 0 4
27845: PUSH
27846: LD_INT 2
27848: ARRAY
27849: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27850: LD_ADDR_VAR 0 14
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: LD_INT 5
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// for i in tmp do
27873: LD_ADDR_VAR 0 8
27877: PUSH
27878: LD_VAR 0 14
27882: PUSH
27883: FOR_IN
27884: IFFALSE 28054
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27886: LD_ADDR_VAR 0 9
27890: PUSH
27891: LD_VAR 0 10
27895: PPUSH
27896: LD_VAR 0 8
27900: PPUSH
27901: LD_INT 5
27903: PPUSH
27904: CALL_OW 272
27908: PUSH
27909: LD_VAR 0 11
27913: PPUSH
27914: LD_VAR 0 8
27918: PPUSH
27919: LD_INT 5
27921: PPUSH
27922: CALL_OW 273
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27931: LD_VAR 0 9
27935: PUSH
27936: LD_INT 1
27938: ARRAY
27939: PPUSH
27940: LD_VAR 0 9
27944: PUSH
27945: LD_INT 2
27947: ARRAY
27948: PPUSH
27949: CALL_OW 488
27953: IFFALSE 28052
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27955: LD_ADDR_VAR 0 4
27959: PUSH
27960: LD_VAR 0 9
27964: PUSH
27965: LD_INT 1
27967: ARRAY
27968: PPUSH
27969: LD_VAR 0 9
27973: PUSH
27974: LD_INT 2
27976: ARRAY
27977: PPUSH
27978: CALL_OW 546
27982: ST_TO_ADDR
// if hex [ 1 ] then
27983: LD_VAR 0 4
27987: PUSH
27988: LD_INT 1
27990: ARRAY
27991: IFFALSE 27995
// continue ;
27993: GO 27883
// h := hex [ 2 ] ;
27995: LD_ADDR_VAR 0 13
27999: PUSH
28000: LD_VAR 0 4
28004: PUSH
28005: LD_INT 2
28007: ARRAY
28008: ST_TO_ADDR
// if h + 7 < height then
28009: LD_VAR 0 13
28013: PUSH
28014: LD_INT 7
28016: PLUS
28017: PUSH
28018: LD_VAR 0 15
28022: LESS
28023: IFFALSE 28052
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28025: LD_ADDR_VAR 0 18
28029: PUSH
28030: LD_INT 7
28032: PUSH
28033: LD_INT 28
28035: PUSH
28036: LD_INT 45
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: PUSH
28044: LD_VAR 0 12
28048: ARRAY
28049: ST_TO_ADDR
// break ;
28050: GO 28054
// end ; end ; end ;
28052: GO 27883
28054: POP
28055: POP
// end ; if not weapon then
28056: LD_VAR 0 18
28060: NOT
28061: IFFALSE 28121
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28063: LD_ADDR_VAR 0 5
28067: PUSH
28068: LD_VAR 0 5
28072: PUSH
28073: LD_INT 11
28075: PUSH
28076: LD_INT 30
28078: PUSH
28079: LD_INT 49
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: DIFF
28087: ST_TO_ADDR
// if not list then
28088: LD_VAR 0 5
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28239
// weapon := list [ rand ( 1 , list ) ] ;
28097: LD_ADDR_VAR 0 18
28101: PUSH
28102: LD_VAR 0 5
28106: PUSH
28107: LD_INT 1
28109: PPUSH
28110: LD_VAR 0 5
28114: PPUSH
28115: CALL_OW 12
28119: ARRAY
28120: ST_TO_ADDR
// end ; if weapon then
28121: LD_VAR 0 18
28125: IFFALSE 28239
// begin tmp := CostOfWeapon ( weapon ) ;
28127: LD_ADDR_VAR 0 14
28131: PUSH
28132: LD_VAR 0 18
28136: PPUSH
28137: CALL_OW 451
28141: ST_TO_ADDR
// j := GetBase ( tower ) ;
28142: LD_ADDR_VAR 0 9
28146: PUSH
28147: LD_VAR 0 1
28151: PPUSH
28152: CALL_OW 274
28156: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28157: LD_VAR 0 9
28161: PPUSH
28162: LD_INT 1
28164: PPUSH
28165: CALL_OW 275
28169: PUSH
28170: LD_VAR 0 14
28174: PUSH
28175: LD_INT 1
28177: ARRAY
28178: GREATEREQUAL
28179: PUSH
28180: LD_VAR 0 9
28184: PPUSH
28185: LD_INT 2
28187: PPUSH
28188: CALL_OW 275
28192: PUSH
28193: LD_VAR 0 14
28197: PUSH
28198: LD_INT 2
28200: ARRAY
28201: GREATEREQUAL
28202: AND
28203: PUSH
28204: LD_VAR 0 9
28208: PPUSH
28209: LD_INT 3
28211: PPUSH
28212: CALL_OW 275
28216: PUSH
28217: LD_VAR 0 14
28221: PUSH
28222: LD_INT 3
28224: ARRAY
28225: GREATEREQUAL
28226: AND
28227: IFFALSE 28239
// result := weapon ;
28229: LD_ADDR_VAR 0 3
28233: PUSH
28234: LD_VAR 0 18
28238: ST_TO_ADDR
// end ; end ;
28239: LD_VAR 0 3
28243: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28244: LD_INT 0
28246: PPUSH
28247: PPUSH
// result := true ;
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_INT 1
28255: ST_TO_ADDR
// if array1 = array2 then
28256: LD_VAR 0 1
28260: PUSH
28261: LD_VAR 0 2
28265: EQUAL
28266: IFFALSE 28326
// begin for i = 1 to array1 do
28268: LD_ADDR_VAR 0 4
28272: PUSH
28273: DOUBLE
28274: LD_INT 1
28276: DEC
28277: ST_TO_ADDR
28278: LD_VAR 0 1
28282: PUSH
28283: FOR_TO
28284: IFFALSE 28322
// if array1 [ i ] <> array2 [ i ] then
28286: LD_VAR 0 1
28290: PUSH
28291: LD_VAR 0 4
28295: ARRAY
28296: PUSH
28297: LD_VAR 0 2
28301: PUSH
28302: LD_VAR 0 4
28306: ARRAY
28307: NONEQUAL
28308: IFFALSE 28320
// begin result := false ;
28310: LD_ADDR_VAR 0 3
28314: PUSH
28315: LD_INT 0
28317: ST_TO_ADDR
// break ;
28318: GO 28322
// end ;
28320: GO 28283
28322: POP
28323: POP
// end else
28324: GO 28334
// result := false ;
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 0
28333: ST_TO_ADDR
// end ;
28334: LD_VAR 0 3
28338: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28339: LD_INT 0
28341: PPUSH
28342: PPUSH
// if not array1 or not array2 then
28343: LD_VAR 0 1
28347: NOT
28348: PUSH
28349: LD_VAR 0 2
28353: NOT
28354: OR
28355: IFFALSE 28359
// exit ;
28357: GO 28423
// result := true ;
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_INT 1
28366: ST_TO_ADDR
// for i = 1 to array1 do
28367: LD_ADDR_VAR 0 4
28371: PUSH
28372: DOUBLE
28373: LD_INT 1
28375: DEC
28376: ST_TO_ADDR
28377: LD_VAR 0 1
28381: PUSH
28382: FOR_TO
28383: IFFALSE 28421
// if array1 [ i ] <> array2 [ i ] then
28385: LD_VAR 0 1
28389: PUSH
28390: LD_VAR 0 4
28394: ARRAY
28395: PUSH
28396: LD_VAR 0 2
28400: PUSH
28401: LD_VAR 0 4
28405: ARRAY
28406: NONEQUAL
28407: IFFALSE 28419
// begin result := false ;
28409: LD_ADDR_VAR 0 3
28413: PUSH
28414: LD_INT 0
28416: ST_TO_ADDR
// break ;
28417: GO 28421
// end ;
28419: GO 28382
28421: POP
28422: POP
// end ;
28423: LD_VAR 0 3
28427: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28428: LD_INT 0
28430: PPUSH
28431: PPUSH
28432: PPUSH
// pom := GetBase ( fac ) ;
28433: LD_ADDR_VAR 0 5
28437: PUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 274
28447: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28448: LD_ADDR_VAR 0 4
28452: PUSH
28453: LD_VAR 0 2
28457: PUSH
28458: LD_INT 1
28460: ARRAY
28461: PPUSH
28462: LD_VAR 0 2
28466: PUSH
28467: LD_INT 2
28469: ARRAY
28470: PPUSH
28471: LD_VAR 0 2
28475: PUSH
28476: LD_INT 3
28478: ARRAY
28479: PPUSH
28480: LD_VAR 0 2
28484: PUSH
28485: LD_INT 4
28487: ARRAY
28488: PPUSH
28489: CALL_OW 449
28493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28494: LD_ADDR_VAR 0 3
28498: PUSH
28499: LD_VAR 0 5
28503: PPUSH
28504: LD_INT 1
28506: PPUSH
28507: CALL_OW 275
28511: PUSH
28512: LD_VAR 0 4
28516: PUSH
28517: LD_INT 1
28519: ARRAY
28520: GREATEREQUAL
28521: PUSH
28522: LD_VAR 0 5
28526: PPUSH
28527: LD_INT 2
28529: PPUSH
28530: CALL_OW 275
28534: PUSH
28535: LD_VAR 0 4
28539: PUSH
28540: LD_INT 2
28542: ARRAY
28543: GREATEREQUAL
28544: AND
28545: PUSH
28546: LD_VAR 0 5
28550: PPUSH
28551: LD_INT 3
28553: PPUSH
28554: CALL_OW 275
28558: PUSH
28559: LD_VAR 0 4
28563: PUSH
28564: LD_INT 3
28566: ARRAY
28567: GREATEREQUAL
28568: AND
28569: ST_TO_ADDR
// end ;
28570: LD_VAR 0 3
28574: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28575: LD_INT 0
28577: PPUSH
28578: PPUSH
28579: PPUSH
28580: PPUSH
// pom := GetBase ( building ) ;
28581: LD_ADDR_VAR 0 3
28585: PUSH
28586: LD_VAR 0 1
28590: PPUSH
28591: CALL_OW 274
28595: ST_TO_ADDR
// if not pom then
28596: LD_VAR 0 3
28600: NOT
28601: IFFALSE 28605
// exit ;
28603: GO 28775
// btype := GetBType ( building ) ;
28605: LD_ADDR_VAR 0 5
28609: PUSH
28610: LD_VAR 0 1
28614: PPUSH
28615: CALL_OW 266
28619: ST_TO_ADDR
// if btype = b_armoury then
28620: LD_VAR 0 5
28624: PUSH
28625: LD_INT 4
28627: EQUAL
28628: IFFALSE 28638
// btype := b_barracks ;
28630: LD_ADDR_VAR 0 5
28634: PUSH
28635: LD_INT 5
28637: ST_TO_ADDR
// if btype = b_depot then
28638: LD_VAR 0 5
28642: PUSH
28643: LD_INT 0
28645: EQUAL
28646: IFFALSE 28656
// btype := b_warehouse ;
28648: LD_ADDR_VAR 0 5
28652: PUSH
28653: LD_INT 1
28655: ST_TO_ADDR
// if btype = b_workshop then
28656: LD_VAR 0 5
28660: PUSH
28661: LD_INT 2
28663: EQUAL
28664: IFFALSE 28674
// btype := b_factory ;
28666: LD_ADDR_VAR 0 5
28670: PUSH
28671: LD_INT 3
28673: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28674: LD_ADDR_VAR 0 4
28678: PUSH
28679: LD_VAR 0 5
28683: PPUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 248
28693: PPUSH
28694: CALL_OW 450
28698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28699: LD_ADDR_VAR 0 2
28703: PUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: LD_INT 1
28711: PPUSH
28712: CALL_OW 275
28716: PUSH
28717: LD_VAR 0 4
28721: PUSH
28722: LD_INT 1
28724: ARRAY
28725: GREATEREQUAL
28726: PUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: LD_INT 2
28734: PPUSH
28735: CALL_OW 275
28739: PUSH
28740: LD_VAR 0 4
28744: PUSH
28745: LD_INT 2
28747: ARRAY
28748: GREATEREQUAL
28749: AND
28750: PUSH
28751: LD_VAR 0 3
28755: PPUSH
28756: LD_INT 3
28758: PPUSH
28759: CALL_OW 275
28763: PUSH
28764: LD_VAR 0 4
28768: PUSH
28769: LD_INT 3
28771: ARRAY
28772: GREATEREQUAL
28773: AND
28774: ST_TO_ADDR
// end ;
28775: LD_VAR 0 2
28779: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28780: LD_INT 0
28782: PPUSH
28783: PPUSH
28784: PPUSH
// pom := GetBase ( building ) ;
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 274
28799: ST_TO_ADDR
// if not pom then
28800: LD_VAR 0 4
28804: NOT
28805: IFFALSE 28809
// exit ;
28807: GO 28910
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28809: LD_ADDR_VAR 0 5
28813: PUSH
28814: LD_VAR 0 2
28818: PPUSH
28819: LD_VAR 0 1
28823: PPUSH
28824: CALL_OW 248
28828: PPUSH
28829: CALL_OW 450
28833: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28834: LD_ADDR_VAR 0 3
28838: PUSH
28839: LD_VAR 0 4
28843: PPUSH
28844: LD_INT 1
28846: PPUSH
28847: CALL_OW 275
28851: PUSH
28852: LD_VAR 0 5
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: GREATEREQUAL
28861: PUSH
28862: LD_VAR 0 4
28866: PPUSH
28867: LD_INT 2
28869: PPUSH
28870: CALL_OW 275
28874: PUSH
28875: LD_VAR 0 5
28879: PUSH
28880: LD_INT 2
28882: ARRAY
28883: GREATEREQUAL
28884: AND
28885: PUSH
28886: LD_VAR 0 4
28890: PPUSH
28891: LD_INT 3
28893: PPUSH
28894: CALL_OW 275
28898: PUSH
28899: LD_VAR 0 5
28903: PUSH
28904: LD_INT 3
28906: ARRAY
28907: GREATEREQUAL
28908: AND
28909: ST_TO_ADDR
// end ;
28910: LD_VAR 0 3
28914: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
// result := false ;
28928: LD_ADDR_VAR 0 8
28932: PUSH
28933: LD_INT 0
28935: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28936: LD_VAR 0 5
28940: NOT
28941: PUSH
28942: LD_VAR 0 1
28946: NOT
28947: OR
28948: PUSH
28949: LD_VAR 0 2
28953: NOT
28954: OR
28955: PUSH
28956: LD_VAR 0 3
28960: NOT
28961: OR
28962: IFFALSE 28966
// exit ;
28964: GO 29780
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28966: LD_ADDR_VAR 0 14
28970: PUSH
28971: LD_VAR 0 1
28975: PPUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_VAR 0 3
28985: PPUSH
28986: LD_VAR 0 4
28990: PPUSH
28991: LD_VAR 0 5
28995: PUSH
28996: LD_INT 1
28998: ARRAY
28999: PPUSH
29000: CALL_OW 248
29004: PPUSH
29005: LD_INT 0
29007: PPUSH
29008: CALL 31013 0 6
29012: ST_TO_ADDR
// if not hexes then
29013: LD_VAR 0 14
29017: NOT
29018: IFFALSE 29022
// exit ;
29020: GO 29780
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29022: LD_ADDR_VAR 0 17
29026: PUSH
29027: LD_VAR 0 5
29031: PPUSH
29032: LD_INT 22
29034: PUSH
29035: LD_VAR 0 13
29039: PPUSH
29040: CALL_OW 255
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 30
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 72
29085: ST_TO_ADDR
// for i = 1 to hexes do
29086: LD_ADDR_VAR 0 9
29090: PUSH
29091: DOUBLE
29092: LD_INT 1
29094: DEC
29095: ST_TO_ADDR
29096: LD_VAR 0 14
29100: PUSH
29101: FOR_TO
29102: IFFALSE 29778
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29104: LD_ADDR_VAR 0 13
29108: PUSH
29109: LD_VAR 0 14
29113: PUSH
29114: LD_VAR 0 9
29118: ARRAY
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PPUSH
29124: LD_VAR 0 14
29128: PUSH
29129: LD_VAR 0 9
29133: ARRAY
29134: PUSH
29135: LD_INT 2
29137: ARRAY
29138: PPUSH
29139: CALL_OW 428
29143: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29144: LD_VAR 0 14
29148: PUSH
29149: LD_VAR 0 9
29153: ARRAY
29154: PUSH
29155: LD_INT 1
29157: ARRAY
29158: PPUSH
29159: LD_VAR 0 14
29163: PUSH
29164: LD_VAR 0 9
29168: ARRAY
29169: PUSH
29170: LD_INT 2
29172: ARRAY
29173: PPUSH
29174: CALL_OW 351
29178: PUSH
29179: LD_VAR 0 14
29183: PUSH
29184: LD_VAR 0 9
29188: ARRAY
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: PPUSH
29194: LD_VAR 0 14
29198: PUSH
29199: LD_VAR 0 9
29203: ARRAY
29204: PUSH
29205: LD_INT 2
29207: ARRAY
29208: PPUSH
29209: CALL_OW 488
29213: NOT
29214: OR
29215: PUSH
29216: LD_VAR 0 13
29220: PPUSH
29221: CALL_OW 247
29225: PUSH
29226: LD_INT 3
29228: EQUAL
29229: OR
29230: IFFALSE 29236
// exit ;
29232: POP
29233: POP
29234: GO 29780
// if not tmp then
29236: LD_VAR 0 13
29240: NOT
29241: IFFALSE 29245
// continue ;
29243: GO 29101
// result := true ;
29245: LD_ADDR_VAR 0 8
29249: PUSH
29250: LD_INT 1
29252: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29253: LD_VAR 0 6
29257: PUSH
29258: LD_VAR 0 13
29262: PPUSH
29263: CALL_OW 247
29267: PUSH
29268: LD_INT 2
29270: EQUAL
29271: AND
29272: PUSH
29273: LD_VAR 0 13
29277: PPUSH
29278: CALL_OW 263
29282: PUSH
29283: LD_INT 1
29285: EQUAL
29286: AND
29287: IFFALSE 29451
// begin if IsDrivenBy ( tmp ) then
29289: LD_VAR 0 13
29293: PPUSH
29294: CALL_OW 311
29298: IFFALSE 29302
// continue ;
29300: GO 29101
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29302: LD_VAR 0 6
29306: PPUSH
29307: LD_INT 3
29309: PUSH
29310: LD_INT 60
29312: PUSH
29313: EMPTY
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 55
29325: PUSH
29326: EMPTY
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PPUSH
29337: CALL_OW 72
29341: IFFALSE 29449
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29343: LD_ADDR_VAR 0 18
29347: PUSH
29348: LD_VAR 0 6
29352: PPUSH
29353: LD_INT 3
29355: PUSH
29356: LD_INT 60
29358: PUSH
29359: EMPTY
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 55
29371: PUSH
29372: EMPTY
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PPUSH
29383: CALL_OW 72
29387: PUSH
29388: LD_INT 1
29390: ARRAY
29391: ST_TO_ADDR
// if IsInUnit ( driver ) then
29392: LD_VAR 0 18
29396: PPUSH
29397: CALL_OW 310
29401: IFFALSE 29412
// ComExit ( driver ) ;
29403: LD_VAR 0 18
29407: PPUSH
29408: CALL 54793 0 1
// AddComEnterUnit ( driver , tmp ) ;
29412: LD_VAR 0 18
29416: PPUSH
29417: LD_VAR 0 13
29421: PPUSH
29422: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29426: LD_VAR 0 18
29430: PPUSH
29431: LD_VAR 0 7
29435: PPUSH
29436: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29440: LD_VAR 0 18
29444: PPUSH
29445: CALL_OW 181
// end ; continue ;
29449: GO 29101
// end ; if not cleaners or not tmp in cleaners then
29451: LD_VAR 0 6
29455: NOT
29456: PUSH
29457: LD_VAR 0 13
29461: PUSH
29462: LD_VAR 0 6
29466: IN
29467: NOT
29468: OR
29469: IFFALSE 29776
// begin if dep then
29471: LD_VAR 0 17
29475: IFFALSE 29611
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29477: LD_ADDR_VAR 0 16
29481: PUSH
29482: LD_VAR 0 17
29486: PUSH
29487: LD_INT 1
29489: ARRAY
29490: PPUSH
29491: CALL_OW 250
29495: PPUSH
29496: LD_VAR 0 17
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: PPUSH
29505: CALL_OW 254
29509: PPUSH
29510: LD_INT 5
29512: PPUSH
29513: CALL_OW 272
29517: PUSH
29518: LD_VAR 0 17
29522: PUSH
29523: LD_INT 1
29525: ARRAY
29526: PPUSH
29527: CALL_OW 251
29531: PPUSH
29532: LD_VAR 0 17
29536: PUSH
29537: LD_INT 1
29539: ARRAY
29540: PPUSH
29541: CALL_OW 254
29545: PPUSH
29546: LD_INT 5
29548: PPUSH
29549: CALL_OW 273
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29558: LD_VAR 0 16
29562: PUSH
29563: LD_INT 1
29565: ARRAY
29566: PPUSH
29567: LD_VAR 0 16
29571: PUSH
29572: LD_INT 2
29574: ARRAY
29575: PPUSH
29576: CALL_OW 488
29580: IFFALSE 29611
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29582: LD_VAR 0 13
29586: PPUSH
29587: LD_VAR 0 16
29591: PUSH
29592: LD_INT 1
29594: ARRAY
29595: PPUSH
29596: LD_VAR 0 16
29600: PUSH
29601: LD_INT 2
29603: ARRAY
29604: PPUSH
29605: CALL_OW 111
// continue ;
29609: GO 29101
// end ; end ; r := GetDir ( tmp ) ;
29611: LD_ADDR_VAR 0 15
29615: PUSH
29616: LD_VAR 0 13
29620: PPUSH
29621: CALL_OW 254
29625: ST_TO_ADDR
// if r = 5 then
29626: LD_VAR 0 15
29630: PUSH
29631: LD_INT 5
29633: EQUAL
29634: IFFALSE 29644
// r := 0 ;
29636: LD_ADDR_VAR 0 15
29640: PUSH
29641: LD_INT 0
29643: ST_TO_ADDR
// for j = r to 5 do
29644: LD_ADDR_VAR 0 10
29648: PUSH
29649: DOUBLE
29650: LD_VAR 0 15
29654: DEC
29655: ST_TO_ADDR
29656: LD_INT 5
29658: PUSH
29659: FOR_TO
29660: IFFALSE 29774
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29662: LD_ADDR_VAR 0 11
29666: PUSH
29667: LD_VAR 0 13
29671: PPUSH
29672: CALL_OW 250
29676: PPUSH
29677: LD_VAR 0 10
29681: PPUSH
29682: LD_INT 2
29684: PPUSH
29685: CALL_OW 272
29689: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29690: LD_ADDR_VAR 0 12
29694: PUSH
29695: LD_VAR 0 13
29699: PPUSH
29700: CALL_OW 251
29704: PPUSH
29705: LD_VAR 0 10
29709: PPUSH
29710: LD_INT 2
29712: PPUSH
29713: CALL_OW 273
29717: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29718: LD_VAR 0 11
29722: PPUSH
29723: LD_VAR 0 12
29727: PPUSH
29728: CALL_OW 488
29732: PUSH
29733: LD_VAR 0 11
29737: PPUSH
29738: LD_VAR 0 12
29742: PPUSH
29743: CALL_OW 428
29747: NOT
29748: AND
29749: IFFALSE 29772
// begin ComMoveXY ( tmp , _x , _y ) ;
29751: LD_VAR 0 13
29755: PPUSH
29756: LD_VAR 0 11
29760: PPUSH
29761: LD_VAR 0 12
29765: PPUSH
29766: CALL_OW 111
// break ;
29770: GO 29774
// end ; end ;
29772: GO 29659
29774: POP
29775: POP
// end ; end ;
29776: GO 29101
29778: POP
29779: POP
// end ;
29780: LD_VAR 0 8
29784: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29785: LD_INT 0
29787: PPUSH
// result := true ;
29788: LD_ADDR_VAR 0 3
29792: PUSH
29793: LD_INT 1
29795: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29796: LD_VAR 0 2
29800: PUSH
29801: LD_INT 24
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29815
29807: LD_INT 33
29809: DOUBLE
29810: EQUAL
29811: IFTRUE 29815
29813: GO 29840
29815: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29816: LD_ADDR_VAR 0 3
29820: PUSH
29821: LD_INT 32
29823: PPUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 321
29833: PUSH
29834: LD_INT 2
29836: EQUAL
29837: ST_TO_ADDR
29838: GO 30156
29840: LD_INT 20
29842: DOUBLE
29843: EQUAL
29844: IFTRUE 29848
29846: GO 29873
29848: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29849: LD_ADDR_VAR 0 3
29853: PUSH
29854: LD_INT 6
29856: PPUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 321
29866: PUSH
29867: LD_INT 2
29869: EQUAL
29870: ST_TO_ADDR
29871: GO 30156
29873: LD_INT 22
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29887
29879: LD_INT 36
29881: DOUBLE
29882: EQUAL
29883: IFTRUE 29887
29885: GO 29912
29887: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29888: LD_ADDR_VAR 0 3
29892: PUSH
29893: LD_INT 15
29895: PPUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 321
29905: PUSH
29906: LD_INT 2
29908: EQUAL
29909: ST_TO_ADDR
29910: GO 30156
29912: LD_INT 30
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29945
29920: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29921: LD_ADDR_VAR 0 3
29925: PUSH
29926: LD_INT 20
29928: PPUSH
29929: LD_VAR 0 1
29933: PPUSH
29934: CALL_OW 321
29938: PUSH
29939: LD_INT 2
29941: EQUAL
29942: ST_TO_ADDR
29943: GO 30156
29945: LD_INT 28
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29959
29951: LD_INT 21
29953: DOUBLE
29954: EQUAL
29955: IFTRUE 29959
29957: GO 29984
29959: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29960: LD_ADDR_VAR 0 3
29964: PUSH
29965: LD_INT 21
29967: PPUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 321
29977: PUSH
29978: LD_INT 2
29980: EQUAL
29981: ST_TO_ADDR
29982: GO 30156
29984: LD_INT 16
29986: DOUBLE
29987: EQUAL
29988: IFTRUE 29992
29990: GO 30017
29992: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29993: LD_ADDR_VAR 0 3
29997: PUSH
29998: LD_INT 84
30000: PPUSH
30001: LD_VAR 0 1
30005: PPUSH
30006: CALL_OW 321
30010: PUSH
30011: LD_INT 2
30013: EQUAL
30014: ST_TO_ADDR
30015: GO 30156
30017: LD_INT 19
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30031
30023: LD_INT 23
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30031
30029: GO 30056
30031: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30032: LD_ADDR_VAR 0 3
30036: PUSH
30037: LD_INT 83
30039: PPUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 321
30049: PUSH
30050: LD_INT 2
30052: EQUAL
30053: ST_TO_ADDR
30054: GO 30156
30056: LD_INT 17
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30089
30064: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30065: LD_ADDR_VAR 0 3
30069: PUSH
30070: LD_INT 39
30072: PPUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL_OW 321
30082: PUSH
30083: LD_INT 2
30085: EQUAL
30086: ST_TO_ADDR
30087: GO 30156
30089: LD_INT 18
30091: DOUBLE
30092: EQUAL
30093: IFTRUE 30097
30095: GO 30122
30097: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30098: LD_ADDR_VAR 0 3
30102: PUSH
30103: LD_INT 40
30105: PPUSH
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 321
30115: PUSH
30116: LD_INT 2
30118: EQUAL
30119: ST_TO_ADDR
30120: GO 30156
30122: LD_INT 27
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30130
30128: GO 30155
30130: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_INT 35
30138: PPUSH
30139: LD_VAR 0 1
30143: PPUSH
30144: CALL_OW 321
30148: PUSH
30149: LD_INT 2
30151: EQUAL
30152: ST_TO_ADDR
30153: GO 30156
30155: POP
// end ;
30156: LD_VAR 0 3
30160: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30161: LD_INT 0
30163: PPUSH
30164: PPUSH
30165: PPUSH
30166: PPUSH
30167: PPUSH
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
// result := false ;
30174: LD_ADDR_VAR 0 6
30178: PUSH
30179: LD_INT 0
30181: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30182: LD_VAR 0 1
30186: NOT
30187: PUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 266
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: IN
30208: NOT
30209: OR
30210: PUSH
30211: LD_VAR 0 2
30215: NOT
30216: OR
30217: PUSH
30218: LD_VAR 0 5
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 4
30237: PUSH
30238: LD_INT 5
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: IN
30249: NOT
30250: OR
30251: PUSH
30252: LD_VAR 0 3
30256: PPUSH
30257: LD_VAR 0 4
30261: PPUSH
30262: CALL_OW 488
30266: NOT
30267: OR
30268: IFFALSE 30272
// exit ;
30270: GO 31008
// side := GetSide ( depot ) ;
30272: LD_ADDR_VAR 0 9
30276: PUSH
30277: LD_VAR 0 1
30281: PPUSH
30282: CALL_OW 255
30286: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30287: LD_VAR 0 9
30291: PPUSH
30292: LD_VAR 0 2
30296: PPUSH
30297: CALL 29785 0 2
30301: NOT
30302: IFFALSE 30306
// exit ;
30304: GO 31008
// pom := GetBase ( depot ) ;
30306: LD_ADDR_VAR 0 10
30310: PUSH
30311: LD_VAR 0 1
30315: PPUSH
30316: CALL_OW 274
30320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30321: LD_ADDR_VAR 0 11
30325: PUSH
30326: LD_VAR 0 2
30330: PPUSH
30331: LD_VAR 0 1
30335: PPUSH
30336: CALL_OW 248
30340: PPUSH
30341: CALL_OW 450
30345: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30346: LD_VAR 0 10
30350: PPUSH
30351: LD_INT 1
30353: PPUSH
30354: CALL_OW 275
30358: PUSH
30359: LD_VAR 0 11
30363: PUSH
30364: LD_INT 1
30366: ARRAY
30367: GREATEREQUAL
30368: PUSH
30369: LD_VAR 0 10
30373: PPUSH
30374: LD_INT 2
30376: PPUSH
30377: CALL_OW 275
30381: PUSH
30382: LD_VAR 0 11
30386: PUSH
30387: LD_INT 2
30389: ARRAY
30390: GREATEREQUAL
30391: AND
30392: PUSH
30393: LD_VAR 0 10
30397: PPUSH
30398: LD_INT 3
30400: PPUSH
30401: CALL_OW 275
30405: PUSH
30406: LD_VAR 0 11
30410: PUSH
30411: LD_INT 3
30413: ARRAY
30414: GREATEREQUAL
30415: AND
30416: NOT
30417: IFFALSE 30421
// exit ;
30419: GO 31008
// if GetBType ( depot ) = b_depot then
30421: LD_VAR 0 1
30425: PPUSH
30426: CALL_OW 266
30430: PUSH
30431: LD_INT 0
30433: EQUAL
30434: IFFALSE 30446
// dist := 28 else
30436: LD_ADDR_VAR 0 14
30440: PUSH
30441: LD_INT 28
30443: ST_TO_ADDR
30444: GO 30454
// dist := 36 ;
30446: LD_ADDR_VAR 0 14
30450: PUSH
30451: LD_INT 36
30453: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30454: LD_VAR 0 1
30458: PPUSH
30459: LD_VAR 0 3
30463: PPUSH
30464: LD_VAR 0 4
30468: PPUSH
30469: CALL_OW 297
30473: PUSH
30474: LD_VAR 0 14
30478: GREATER
30479: IFFALSE 30483
// exit ;
30481: GO 31008
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30483: LD_ADDR_VAR 0 12
30487: PUSH
30488: LD_VAR 0 2
30492: PPUSH
30493: LD_VAR 0 3
30497: PPUSH
30498: LD_VAR 0 4
30502: PPUSH
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 248
30517: PPUSH
30518: LD_INT 0
30520: PPUSH
30521: CALL 31013 0 6
30525: ST_TO_ADDR
// if not hexes then
30526: LD_VAR 0 12
30530: NOT
30531: IFFALSE 30535
// exit ;
30533: GO 31008
// hex := GetHexInfo ( x , y ) ;
30535: LD_ADDR_VAR 0 15
30539: PUSH
30540: LD_VAR 0 3
30544: PPUSH
30545: LD_VAR 0 4
30549: PPUSH
30550: CALL_OW 546
30554: ST_TO_ADDR
// if hex [ 1 ] then
30555: LD_VAR 0 15
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: IFFALSE 30567
// exit ;
30565: GO 31008
// height := hex [ 2 ] ;
30567: LD_ADDR_VAR 0 13
30571: PUSH
30572: LD_VAR 0 15
30576: PUSH
30577: LD_INT 2
30579: ARRAY
30580: ST_TO_ADDR
// for i = 1 to hexes do
30581: LD_ADDR_VAR 0 7
30585: PUSH
30586: DOUBLE
30587: LD_INT 1
30589: DEC
30590: ST_TO_ADDR
30591: LD_VAR 0 12
30595: PUSH
30596: FOR_TO
30597: IFFALSE 30927
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30599: LD_VAR 0 12
30603: PUSH
30604: LD_VAR 0 7
30608: ARRAY
30609: PUSH
30610: LD_INT 1
30612: ARRAY
30613: PPUSH
30614: LD_VAR 0 12
30618: PUSH
30619: LD_VAR 0 7
30623: ARRAY
30624: PUSH
30625: LD_INT 2
30627: ARRAY
30628: PPUSH
30629: CALL_OW 488
30633: NOT
30634: PUSH
30635: LD_VAR 0 12
30639: PUSH
30640: LD_VAR 0 7
30644: ARRAY
30645: PUSH
30646: LD_INT 1
30648: ARRAY
30649: PPUSH
30650: LD_VAR 0 12
30654: PUSH
30655: LD_VAR 0 7
30659: ARRAY
30660: PUSH
30661: LD_INT 2
30663: ARRAY
30664: PPUSH
30665: CALL_OW 428
30669: PUSH
30670: LD_INT 0
30672: GREATER
30673: OR
30674: PUSH
30675: LD_VAR 0 12
30679: PUSH
30680: LD_VAR 0 7
30684: ARRAY
30685: PUSH
30686: LD_INT 1
30688: ARRAY
30689: PPUSH
30690: LD_VAR 0 12
30694: PUSH
30695: LD_VAR 0 7
30699: ARRAY
30700: PUSH
30701: LD_INT 2
30703: ARRAY
30704: PPUSH
30705: CALL_OW 351
30709: OR
30710: IFFALSE 30716
// exit ;
30712: POP
30713: POP
30714: GO 31008
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30716: LD_ADDR_VAR 0 8
30720: PUSH
30721: LD_VAR 0 12
30725: PUSH
30726: LD_VAR 0 7
30730: ARRAY
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: LD_VAR 0 12
30740: PUSH
30741: LD_VAR 0 7
30745: ARRAY
30746: PUSH
30747: LD_INT 2
30749: ARRAY
30750: PPUSH
30751: CALL_OW 546
30755: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30756: LD_VAR 0 8
30760: PUSH
30761: LD_INT 1
30763: ARRAY
30764: PUSH
30765: LD_VAR 0 8
30769: PUSH
30770: LD_INT 2
30772: ARRAY
30773: PUSH
30774: LD_VAR 0 13
30778: PUSH
30779: LD_INT 2
30781: PLUS
30782: GREATER
30783: OR
30784: PUSH
30785: LD_VAR 0 8
30789: PUSH
30790: LD_INT 2
30792: ARRAY
30793: PUSH
30794: LD_VAR 0 13
30798: PUSH
30799: LD_INT 2
30801: MINUS
30802: LESS
30803: OR
30804: PUSH
30805: LD_VAR 0 8
30809: PUSH
30810: LD_INT 3
30812: ARRAY
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 8
30819: PUSH
30820: LD_INT 9
30822: PUSH
30823: LD_INT 10
30825: PUSH
30826: LD_INT 11
30828: PUSH
30829: LD_INT 12
30831: PUSH
30832: LD_INT 13
30834: PUSH
30835: LD_INT 16
30837: PUSH
30838: LD_INT 17
30840: PUSH
30841: LD_INT 18
30843: PUSH
30844: LD_INT 19
30846: PUSH
30847: LD_INT 20
30849: PUSH
30850: LD_INT 21
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: IN
30868: NOT
30869: OR
30870: PUSH
30871: LD_VAR 0 8
30875: PUSH
30876: LD_INT 5
30878: ARRAY
30879: NOT
30880: OR
30881: PUSH
30882: LD_VAR 0 8
30886: PUSH
30887: LD_INT 6
30889: ARRAY
30890: PUSH
30891: LD_INT 1
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 7
30899: PUSH
30900: LD_INT 9
30902: PUSH
30903: LD_INT 10
30905: PUSH
30906: LD_INT 11
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: IN
30917: NOT
30918: OR
30919: IFFALSE 30925
// exit ;
30921: POP
30922: POP
30923: GO 31008
// end ;
30925: GO 30596
30927: POP
30928: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30929: LD_VAR 0 9
30933: PPUSH
30934: LD_VAR 0 3
30938: PPUSH
30939: LD_VAR 0 4
30943: PPUSH
30944: LD_INT 20
30946: PPUSH
30947: CALL 22960 0 4
30951: PUSH
30952: LD_INT 4
30954: ARRAY
30955: IFFALSE 30959
// exit ;
30957: GO 31008
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30959: LD_VAR 0 2
30963: PUSH
30964: LD_INT 29
30966: PUSH
30967: LD_INT 30
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: IN
30974: PUSH
30975: LD_VAR 0 3
30979: PPUSH
30980: LD_VAR 0 4
30984: PPUSH
30985: LD_VAR 0 9
30989: PPUSH
30990: CALL_OW 440
30994: NOT
30995: AND
30996: IFFALSE 31000
// exit ;
30998: GO 31008
// result := true ;
31000: LD_ADDR_VAR 0 6
31004: PUSH
31005: LD_INT 1
31007: ST_TO_ADDR
// end ;
31008: LD_VAR 0 6
31012: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31013: LD_INT 0
31015: PPUSH
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
31020: PPUSH
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
// result = [ ] ;
31073: LD_ADDR_VAR 0 7
31077: PUSH
31078: EMPTY
31079: ST_TO_ADDR
// temp_list = [ ] ;
31080: LD_ADDR_VAR 0 9
31084: PUSH
31085: EMPTY
31086: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31087: LD_VAR 0 4
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 4
31106: PUSH
31107: LD_INT 5
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: IN
31118: NOT
31119: PUSH
31120: LD_VAR 0 1
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: IN
31135: PUSH
31136: LD_VAR 0 5
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: LIST
31154: IN
31155: NOT
31156: AND
31157: OR
31158: IFFALSE 31162
// exit ;
31160: GO 49553
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 6
31169: PUSH
31170: LD_INT 7
31172: PUSH
31173: LD_INT 8
31175: PUSH
31176: LD_INT 13
31178: PUSH
31179: LD_INT 12
31181: PUSH
31182: LD_INT 15
31184: PUSH
31185: LD_INT 11
31187: PUSH
31188: LD_INT 14
31190: PUSH
31191: LD_INT 10
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: IN
31205: IFFALSE 31215
// btype = b_lab ;
31207: LD_ADDR_VAR 0 1
31211: PUSH
31212: LD_INT 6
31214: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31215: LD_VAR 0 6
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: IN
31234: NOT
31235: PUSH
31236: LD_VAR 0 1
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: LD_INT 6
31255: PUSH
31256: LD_INT 36
31258: PUSH
31259: LD_INT 4
31261: PUSH
31262: LD_INT 5
31264: PUSH
31265: LD_INT 31
31267: PUSH
31268: LD_INT 32
31270: PUSH
31271: LD_INT 33
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: IN
31287: NOT
31288: PUSH
31289: LD_VAR 0 6
31293: PUSH
31294: LD_INT 1
31296: EQUAL
31297: AND
31298: OR
31299: PUSH
31300: LD_VAR 0 1
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: IN
31315: NOT
31316: PUSH
31317: LD_VAR 0 6
31321: PUSH
31322: LD_INT 2
31324: EQUAL
31325: AND
31326: OR
31327: IFFALSE 31337
// mode = 0 ;
31329: LD_ADDR_VAR 0 6
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// case mode of 0 :
31337: LD_VAR 0 6
31341: PUSH
31342: LD_INT 0
31344: DOUBLE
31345: EQUAL
31346: IFTRUE 31350
31348: GO 42803
31350: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31351: LD_ADDR_VAR 0 11
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 3
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31544: LD_ADDR_VAR 0 12
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31740: LD_ADDR_VAR 0 13
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31939: LD_ADDR_VAR 0 14
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 3
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32135: LD_ADDR_VAR 0 15
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32328: LD_ADDR_VAR 0 16
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 2
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32521: LD_ADDR_VAR 0 17
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 2
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 2
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 2
32697: NEG
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32751: LD_ADDR_VAR 0 18
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 2
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32981: LD_ADDR_VAR 0 19
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 2
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33211: LD_ADDR_VAR 0 20
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 2
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33441: LD_ADDR_VAR 0 21
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33671: LD_ADDR_VAR 0 22
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33901: LD_ADDR_VAR 0 23
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: LD_INT 3
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 3
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 2
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34181: LD_ADDR_VAR 0 24
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: LD_INT 2
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 2
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34457: LD_ADDR_VAR 0 25
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: LD_INT 3
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34731: LD_ADDR_VAR 0 26
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 2
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: LD_INT 2
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: NEG
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35007: LD_ADDR_VAR 0 27
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 3
35240: NEG
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 3
35252: NEG
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35287: LD_ADDR_VAR 0 28
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: LD_INT 2
35372: NEG
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: LD_INT 3
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 3
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35569: LD_ADDR_VAR 0 29
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 2
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 2
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: NEG
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: NEG
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: LD_INT 3
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: LD_INT 3
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 2
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 3
35813: NEG
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35848: LD_ADDR_VAR 0 30
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 2
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 3
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 3
36091: NEG
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36126: LD_ADDR_VAR 0 31
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: LD_INT 2
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: LD_INT 3
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 3
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36404: LD_ADDR_VAR 0 32
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 2
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 3
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 3
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 3
36647: NEG
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36682: LD_ADDR_VAR 0 33
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: LD_INT 3
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 3
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 3
36926: NEG
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36961: LD_ADDR_VAR 0 34
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 2
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 3
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 3
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 3
37206: NEG
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37241: LD_ADDR_VAR 0 35
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37353: LD_ADDR_VAR 0 36
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37465: LD_ADDR_VAR 0 37
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37577: LD_ADDR_VAR 0 38
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37689: LD_ADDR_VAR 0 39
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37801: LD_ADDR_VAR 0 40
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37913: LD_ADDR_VAR 0 41
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 3
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: NEG
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 3
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 3
38210: NEG
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38263: LD_ADDR_VAR 0 42
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 3
38572: NEG
38573: PUSH
38574: LD_INT 3
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38613: LD_ADDR_VAR 0 43
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 3
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 3
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 2
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 2
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 3
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38961: LD_ADDR_VAR 0 44
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: LD_INT 3
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: LD_INT 3
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: NEG
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 3
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: NEG
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39311: LD_ADDR_VAR 0 45
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 2
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 2
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 3
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 2
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: NEG
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39661: LD_ADDR_VAR 0 46
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 3
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 3
39957: NEG
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40009: LD_ADDR_VAR 0 47
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40160: LD_ADDR_VAR 0 48
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 2
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40307: LD_ADDR_VAR 0 49
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40451: LD_ADDR_VAR 0 50
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40595: LD_ADDR_VAR 0 51
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40742: LD_ADDR_VAR 0 52
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40893: LD_ADDR_VAR 0 53
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41123: LD_ADDR_VAR 0 54
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41353: LD_ADDR_VAR 0 55
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 2
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41583: LD_ADDR_VAR 0 56
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41813: LD_ADDR_VAR 0 57
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42043: LD_ADDR_VAR 0 58
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42273: LD_ADDR_VAR 0 59
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42361: LD_ADDR_VAR 0 60
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42449: LD_ADDR_VAR 0 61
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42537: LD_ADDR_VAR 0 62
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42625: LD_ADDR_VAR 0 63
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42713: LD_ADDR_VAR 0 64
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// end ; 1 :
42801: GO 48698
42803: LD_INT 1
42805: DOUBLE
42806: EQUAL
42807: IFTRUE 42811
42809: GO 45434
42811: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42812: LD_ADDR_VAR 0 11
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 3
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 3
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42856: LD_ADDR_VAR 0 12
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42897: LD_ADDR_VAR 0 13
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 3
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42937: LD_ADDR_VAR 0 14
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 3
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42978: LD_ADDR_VAR 0 15
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43022: LD_ADDR_VAR 0 16
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: LD_INT 3
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 3
43053: NEG
43054: PUSH
43055: LD_INT 3
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43068: LD_ADDR_VAR 0 17
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 3
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43112: LD_ADDR_VAR 0 18
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43153: LD_ADDR_VAR 0 19
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43193: LD_ADDR_VAR 0 20
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43234: LD_ADDR_VAR 0 21
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 3
43263: NEG
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43278: LD_ADDR_VAR 0 22
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 3
43309: NEG
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43324: LD_ADDR_VAR 0 23
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 4
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 3
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43368: LD_ADDR_VAR 0 24
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 4
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43409: LD_ADDR_VAR 0 25
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 4
43426: PUSH
43427: LD_INT 3
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 4
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43449: LD_ADDR_VAR 0 26
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 3
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 4
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43490: LD_ADDR_VAR 0 27
43494: PUSH
43495: LD_INT 3
43497: NEG
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: NEG
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 4
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43534: LD_ADDR_VAR 0 28
43538: PUSH
43539: LD_INT 3
43541: NEG
43542: PUSH
43543: LD_INT 3
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: LD_INT 4
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 4
43565: NEG
43566: PUSH
43567: LD_INT 3
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43580: LD_ADDR_VAR 0 29
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 3
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 4
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 4
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 5
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 5
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 4
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 6
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 6
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 5
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43735: LD_ADDR_VAR 0 30
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 4
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 4
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 5
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 5
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 5
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 6
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 6
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43878: LD_ADDR_VAR 0 31
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: LD_INT 3
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 4
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 4
43925: PUSH
43926: LD_INT 4
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: LD_INT 4
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 5
43945: PUSH
43946: LD_INT 4
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 5
43955: PUSH
43956: LD_INT 5
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 4
43965: PUSH
43966: LD_INT 5
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 6
43975: PUSH
43976: LD_INT 5
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 6
43985: PUSH
43986: LD_INT 6
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 5
43995: PUSH
43996: LD_INT 6
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44017: LD_ADDR_VAR 0 32
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 4
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 5
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 5
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 4
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 6
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 6
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 5
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44160: LD_ADDR_VAR 0 33
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 4
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 4
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 4
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 5
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 6
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 6
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44315: LD_ADDR_VAR 0 34
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 3
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: LD_INT 4
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 4
44370: NEG
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 4
44382: NEG
44383: PUSH
44384: LD_INT 4
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 4
44394: NEG
44395: PUSH
44396: LD_INT 5
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 5
44406: NEG
44407: PUSH
44408: LD_INT 4
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 5
44418: NEG
44419: PUSH
44420: LD_INT 5
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 5
44430: NEG
44431: PUSH
44432: LD_INT 6
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 6
44442: NEG
44443: PUSH
44444: LD_INT 5
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 6
44454: NEG
44455: PUSH
44456: LD_INT 6
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44478: LD_ADDR_VAR 0 41
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 3
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44522: LD_ADDR_VAR 0 42
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 3
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44563: LD_ADDR_VAR 0 43
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 3
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44603: LD_ADDR_VAR 0 44
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44644: LD_ADDR_VAR 0 45
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44688: LD_ADDR_VAR 0 46
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 3
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44734: LD_ADDR_VAR 0 47
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44767: LD_ADDR_VAR 0 48
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44798: LD_ADDR_VAR 0 49
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44827: LD_ADDR_VAR 0 50
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44856: LD_ADDR_VAR 0 51
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44887: LD_ADDR_VAR 0 52
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 3
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44920: LD_ADDR_VAR 0 53
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 3
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44964: LD_ADDR_VAR 0 54
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 3
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45005: LD_ADDR_VAR 0 55
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: PUSH
45023: LD_INT 3
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45045: LD_ADDR_VAR 0 56
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45086: LD_ADDR_VAR 0 57
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 3
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45130: LD_ADDR_VAR 0 58
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: LD_INT 3
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45176: LD_ADDR_VAR 0 59
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45220: LD_ADDR_VAR 0 60
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45261: LD_ADDR_VAR 0 61
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45301: LD_ADDR_VAR 0 62
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45342: LD_ADDR_VAR 0 63
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45386: LD_ADDR_VAR 0 64
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// end ; 2 :
45432: GO 48698
45434: LD_INT 2
45436: DOUBLE
45437: EQUAL
45438: IFTRUE 45442
45440: GO 48697
45442: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45443: LD_ADDR_VAR 0 29
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 5
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 5
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 4
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 5
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: LD_INT 3
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 4
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 4
45573: PUSH
45574: LD_INT 4
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 4
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 4
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 4
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 4
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 5
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 4
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 5
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 3
45726: NEG
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 4
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 4
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 4
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 4
45828: NEG
45829: PUSH
45830: LD_INT 4
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 4
45840: NEG
45841: PUSH
45842: LD_INT 5
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: LD_INT 4
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 3
45864: NEG
45865: PUSH
45866: LD_INT 3
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 4
45876: NEG
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 5
45888: NEG
45889: PUSH
45890: LD_INT 4
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 5
45900: NEG
45901: PUSH
45902: LD_INT 5
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 5
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 5
45924: NEG
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45981: LD_ADDR_VAR 0 30
45985: PUSH
45986: LD_INT 4
45988: PUSH
45989: LD_INT 4
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 4
45998: PUSH
45999: LD_INT 3
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 5
46008: PUSH
46009: LD_INT 4
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 5
46018: PUSH
46019: LD_INT 5
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 4
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: LD_INT 4
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 5
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 5
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 4
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 4
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 4
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 4
46171: NEG
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 4
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 3
46194: NEG
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 4
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 5
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 5
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 5
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: LD_INT 3
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: LD_INT 4
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 4
46333: NEG
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 4
46345: NEG
46346: PUSH
46347: LD_INT 4
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 4
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 4
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 5
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 4
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 4
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 5
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 5
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46528: LD_ADDR_VAR 0 31
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 4
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 3
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 4
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 5
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 5
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 4
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 3
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 4
46684: NEG
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 4
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 4
46707: NEG
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 4
46730: NEG
46731: PUSH
46732: LD_INT 4
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 4
46742: NEG
46743: PUSH
46744: LD_INT 5
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 4
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: NEG
46767: PUSH
46768: LD_INT 3
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 4
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 5
46790: NEG
46791: PUSH
46792: LD_INT 4
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 5
46802: NEG
46803: PUSH
46804: LD_INT 5
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 3
46814: NEG
46815: PUSH
46816: LD_INT 5
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 5
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 3
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 4
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 3
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 4
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 4
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 4
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 4
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 5
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 5
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 4
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 3
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47078: LD_ADDR_VAR 0 32
47082: PUSH
47083: LD_INT 4
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 4
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 4
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 5
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 5
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 5
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 4
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 4
47247: NEG
47248: PUSH
47249: LD_INT 3
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 4
47259: NEG
47260: PUSH
47261: LD_INT 4
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 4
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 4
47283: NEG
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 4
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 5
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 4
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 3
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 4
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 5
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 5
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 4
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 4
47490: PUSH
47491: LD_INT 4
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 4
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 5
47510: PUSH
47511: LD_INT 4
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 5
47520: PUSH
47521: LD_INT 5
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 4
47530: PUSH
47531: LD_INT 5
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 5
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 5
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47625: LD_ADDR_VAR 0 33
47629: PUSH
47630: LD_INT 4
47632: NEG
47633: PUSH
47634: LD_INT 4
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: LD_INT 5
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: NEG
47657: PUSH
47658: LD_INT 4
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 3
47668: NEG
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 4
47680: NEG
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 5
47692: NEG
47693: PUSH
47694: LD_INT 4
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 5
47704: NEG
47705: PUSH
47706: LD_INT 5
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: LD_INT 5
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 5
47728: NEG
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 4
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 4
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 4
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 4
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 4
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 5
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 4
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 4
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: LD_INT 4
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: LD_INT 4
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 4
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 4
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 4
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 4
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 5
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 5
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 4
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: LD_INT 5
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48163: LD_ADDR_VAR 0 34
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 4
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 5
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 4
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 4
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 5
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 5
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 4
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 4
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 4
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 4
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 5
48385: PUSH
48386: LD_INT 4
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 5
48395: PUSH
48396: LD_INT 5
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 4
48405: PUSH
48406: LD_INT 5
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 4
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 5
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: LD_INT 5
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 4
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 4
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 4
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 4
48548: NEG
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 4
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 5
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 5
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 5
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// end ; end ;
48695: GO 48698
48697: POP
// case btype of b_depot , b_warehouse :
48698: LD_VAR 0 1
48702: PUSH
48703: LD_INT 0
48705: DOUBLE
48706: EQUAL
48707: IFTRUE 48717
48709: LD_INT 1
48711: DOUBLE
48712: EQUAL
48713: IFTRUE 48717
48715: GO 48918
48717: POP
// case nation of nation_american :
48718: LD_VAR 0 5
48722: PUSH
48723: LD_INT 1
48725: DOUBLE
48726: EQUAL
48727: IFTRUE 48731
48729: GO 48787
48731: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48732: LD_ADDR_VAR 0 9
48736: PUSH
48737: LD_VAR 0 11
48741: PUSH
48742: LD_VAR 0 12
48746: PUSH
48747: LD_VAR 0 13
48751: PUSH
48752: LD_VAR 0 14
48756: PUSH
48757: LD_VAR 0 15
48761: PUSH
48762: LD_VAR 0 16
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: PUSH
48775: LD_VAR 0 4
48779: PUSH
48780: LD_INT 1
48782: PLUS
48783: ARRAY
48784: ST_TO_ADDR
48785: GO 48916
48787: LD_INT 2
48789: DOUBLE
48790: EQUAL
48791: IFTRUE 48795
48793: GO 48851
48795: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48796: LD_ADDR_VAR 0 9
48800: PUSH
48801: LD_VAR 0 17
48805: PUSH
48806: LD_VAR 0 18
48810: PUSH
48811: LD_VAR 0 19
48815: PUSH
48816: LD_VAR 0 20
48820: PUSH
48821: LD_VAR 0 21
48825: PUSH
48826: LD_VAR 0 22
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: PUSH
48839: LD_VAR 0 4
48843: PUSH
48844: LD_INT 1
48846: PLUS
48847: ARRAY
48848: ST_TO_ADDR
48849: GO 48916
48851: LD_INT 3
48853: DOUBLE
48854: EQUAL
48855: IFTRUE 48859
48857: GO 48915
48859: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48860: LD_ADDR_VAR 0 9
48864: PUSH
48865: LD_VAR 0 23
48869: PUSH
48870: LD_VAR 0 24
48874: PUSH
48875: LD_VAR 0 25
48879: PUSH
48880: LD_VAR 0 26
48884: PUSH
48885: LD_VAR 0 27
48889: PUSH
48890: LD_VAR 0 28
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: PUSH
48903: LD_VAR 0 4
48907: PUSH
48908: LD_INT 1
48910: PLUS
48911: ARRAY
48912: ST_TO_ADDR
48913: GO 48916
48915: POP
48916: GO 49471
48918: LD_INT 2
48920: DOUBLE
48921: EQUAL
48922: IFTRUE 48932
48924: LD_INT 3
48926: DOUBLE
48927: EQUAL
48928: IFTRUE 48932
48930: GO 48988
48932: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48933: LD_ADDR_VAR 0 9
48937: PUSH
48938: LD_VAR 0 29
48942: PUSH
48943: LD_VAR 0 30
48947: PUSH
48948: LD_VAR 0 31
48952: PUSH
48953: LD_VAR 0 32
48957: PUSH
48958: LD_VAR 0 33
48962: PUSH
48963: LD_VAR 0 34
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: PUSH
48976: LD_VAR 0 4
48980: PUSH
48981: LD_INT 1
48983: PLUS
48984: ARRAY
48985: ST_TO_ADDR
48986: GO 49471
48988: LD_INT 16
48990: DOUBLE
48991: EQUAL
48992: IFTRUE 49050
48994: LD_INT 17
48996: DOUBLE
48997: EQUAL
48998: IFTRUE 49050
49000: LD_INT 18
49002: DOUBLE
49003: EQUAL
49004: IFTRUE 49050
49006: LD_INT 19
49008: DOUBLE
49009: EQUAL
49010: IFTRUE 49050
49012: LD_INT 22
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49050
49018: LD_INT 20
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49050
49024: LD_INT 21
49026: DOUBLE
49027: EQUAL
49028: IFTRUE 49050
49030: LD_INT 23
49032: DOUBLE
49033: EQUAL
49034: IFTRUE 49050
49036: LD_INT 24
49038: DOUBLE
49039: EQUAL
49040: IFTRUE 49050
49042: LD_INT 25
49044: DOUBLE
49045: EQUAL
49046: IFTRUE 49050
49048: GO 49106
49050: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49051: LD_ADDR_VAR 0 9
49055: PUSH
49056: LD_VAR 0 35
49060: PUSH
49061: LD_VAR 0 36
49065: PUSH
49066: LD_VAR 0 37
49070: PUSH
49071: LD_VAR 0 38
49075: PUSH
49076: LD_VAR 0 39
49080: PUSH
49081: LD_VAR 0 40
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: PUSH
49094: LD_VAR 0 4
49098: PUSH
49099: LD_INT 1
49101: PLUS
49102: ARRAY
49103: ST_TO_ADDR
49104: GO 49471
49106: LD_INT 6
49108: DOUBLE
49109: EQUAL
49110: IFTRUE 49162
49112: LD_INT 7
49114: DOUBLE
49115: EQUAL
49116: IFTRUE 49162
49118: LD_INT 8
49120: DOUBLE
49121: EQUAL
49122: IFTRUE 49162
49124: LD_INT 13
49126: DOUBLE
49127: EQUAL
49128: IFTRUE 49162
49130: LD_INT 12
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49162
49136: LD_INT 15
49138: DOUBLE
49139: EQUAL
49140: IFTRUE 49162
49142: LD_INT 11
49144: DOUBLE
49145: EQUAL
49146: IFTRUE 49162
49148: LD_INT 14
49150: DOUBLE
49151: EQUAL
49152: IFTRUE 49162
49154: LD_INT 10
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49162
49160: GO 49218
49162: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49163: LD_ADDR_VAR 0 9
49167: PUSH
49168: LD_VAR 0 41
49172: PUSH
49173: LD_VAR 0 42
49177: PUSH
49178: LD_VAR 0 43
49182: PUSH
49183: LD_VAR 0 44
49187: PUSH
49188: LD_VAR 0 45
49192: PUSH
49193: LD_VAR 0 46
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: PUSH
49206: LD_VAR 0 4
49210: PUSH
49211: LD_INT 1
49213: PLUS
49214: ARRAY
49215: ST_TO_ADDR
49216: GO 49471
49218: LD_INT 36
49220: DOUBLE
49221: EQUAL
49222: IFTRUE 49226
49224: GO 49282
49226: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49227: LD_ADDR_VAR 0 9
49231: PUSH
49232: LD_VAR 0 47
49236: PUSH
49237: LD_VAR 0 48
49241: PUSH
49242: LD_VAR 0 49
49246: PUSH
49247: LD_VAR 0 50
49251: PUSH
49252: LD_VAR 0 51
49256: PUSH
49257: LD_VAR 0 52
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: PUSH
49270: LD_VAR 0 4
49274: PUSH
49275: LD_INT 1
49277: PLUS
49278: ARRAY
49279: ST_TO_ADDR
49280: GO 49471
49282: LD_INT 4
49284: DOUBLE
49285: EQUAL
49286: IFTRUE 49308
49288: LD_INT 5
49290: DOUBLE
49291: EQUAL
49292: IFTRUE 49308
49294: LD_INT 34
49296: DOUBLE
49297: EQUAL
49298: IFTRUE 49308
49300: LD_INT 37
49302: DOUBLE
49303: EQUAL
49304: IFTRUE 49308
49306: GO 49364
49308: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49309: LD_ADDR_VAR 0 9
49313: PUSH
49314: LD_VAR 0 53
49318: PUSH
49319: LD_VAR 0 54
49323: PUSH
49324: LD_VAR 0 55
49328: PUSH
49329: LD_VAR 0 56
49333: PUSH
49334: LD_VAR 0 57
49338: PUSH
49339: LD_VAR 0 58
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: PUSH
49352: LD_VAR 0 4
49356: PUSH
49357: LD_INT 1
49359: PLUS
49360: ARRAY
49361: ST_TO_ADDR
49362: GO 49471
49364: LD_INT 31
49366: DOUBLE
49367: EQUAL
49368: IFTRUE 49414
49370: LD_INT 32
49372: DOUBLE
49373: EQUAL
49374: IFTRUE 49414
49376: LD_INT 33
49378: DOUBLE
49379: EQUAL
49380: IFTRUE 49414
49382: LD_INT 27
49384: DOUBLE
49385: EQUAL
49386: IFTRUE 49414
49388: LD_INT 26
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49414
49394: LD_INT 28
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49414
49400: LD_INT 29
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49414
49406: LD_INT 30
49408: DOUBLE
49409: EQUAL
49410: IFTRUE 49414
49412: GO 49470
49414: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49415: LD_ADDR_VAR 0 9
49419: PUSH
49420: LD_VAR 0 59
49424: PUSH
49425: LD_VAR 0 60
49429: PUSH
49430: LD_VAR 0 61
49434: PUSH
49435: LD_VAR 0 62
49439: PUSH
49440: LD_VAR 0 63
49444: PUSH
49445: LD_VAR 0 64
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: PUSH
49458: LD_VAR 0 4
49462: PUSH
49463: LD_INT 1
49465: PLUS
49466: ARRAY
49467: ST_TO_ADDR
49468: GO 49471
49470: POP
// temp_list2 = [ ] ;
49471: LD_ADDR_VAR 0 10
49475: PUSH
49476: EMPTY
49477: ST_TO_ADDR
// for i in temp_list do
49478: LD_ADDR_VAR 0 8
49482: PUSH
49483: LD_VAR 0 9
49487: PUSH
49488: FOR_IN
49489: IFFALSE 49541
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49491: LD_ADDR_VAR 0 10
49495: PUSH
49496: LD_VAR 0 10
49500: PUSH
49501: LD_VAR 0 8
49505: PUSH
49506: LD_INT 1
49508: ARRAY
49509: PUSH
49510: LD_VAR 0 2
49514: PLUS
49515: PUSH
49516: LD_VAR 0 8
49520: PUSH
49521: LD_INT 2
49523: ARRAY
49524: PUSH
49525: LD_VAR 0 3
49529: PLUS
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: ADD
49538: ST_TO_ADDR
49539: GO 49488
49541: POP
49542: POP
// result = temp_list2 ;
49543: LD_ADDR_VAR 0 7
49547: PUSH
49548: LD_VAR 0 10
49552: ST_TO_ADDR
// end ;
49553: LD_VAR 0 7
49557: RET
// export function EnemyInRange ( unit , dist ) ; begin
49558: LD_INT 0
49560: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49561: LD_ADDR_VAR 0 3
49565: PUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: CALL_OW 255
49575: PPUSH
49576: LD_VAR 0 1
49580: PPUSH
49581: CALL_OW 250
49585: PPUSH
49586: LD_VAR 0 1
49590: PPUSH
49591: CALL_OW 251
49595: PPUSH
49596: LD_VAR 0 2
49600: PPUSH
49601: CALL 22960 0 4
49605: PUSH
49606: LD_INT 4
49608: ARRAY
49609: ST_TO_ADDR
// end ;
49610: LD_VAR 0 3
49614: RET
// export function PlayerSeeMe ( unit ) ; begin
49615: LD_INT 0
49617: PPUSH
// result := See ( your_side , unit ) ;
49618: LD_ADDR_VAR 0 2
49622: PUSH
49623: LD_OWVAR 2
49627: PPUSH
49628: LD_VAR 0 1
49632: PPUSH
49633: CALL_OW 292
49637: ST_TO_ADDR
// end ;
49638: LD_VAR 0 2
49642: RET
// export function ReverseDir ( unit ) ; begin
49643: LD_INT 0
49645: PPUSH
// if not unit then
49646: LD_VAR 0 1
49650: NOT
49651: IFFALSE 49655
// exit ;
49653: GO 49678
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49655: LD_ADDR_VAR 0 2
49659: PUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL_OW 254
49669: PUSH
49670: LD_INT 3
49672: PLUS
49673: PUSH
49674: LD_INT 6
49676: MOD
49677: ST_TO_ADDR
// end ;
49678: LD_VAR 0 2
49682: RET
// export function ReverseArray ( array ) ; var i ; begin
49683: LD_INT 0
49685: PPUSH
49686: PPUSH
// if not array then
49687: LD_VAR 0 1
49691: NOT
49692: IFFALSE 49696
// exit ;
49694: GO 49751
// result := [ ] ;
49696: LD_ADDR_VAR 0 2
49700: PUSH
49701: EMPTY
49702: ST_TO_ADDR
// for i := array downto 1 do
49703: LD_ADDR_VAR 0 3
49707: PUSH
49708: DOUBLE
49709: LD_VAR 0 1
49713: INC
49714: ST_TO_ADDR
49715: LD_INT 1
49717: PUSH
49718: FOR_DOWNTO
49719: IFFALSE 49749
// result := Join ( result , array [ i ] ) ;
49721: LD_ADDR_VAR 0 2
49725: PUSH
49726: LD_VAR 0 2
49730: PPUSH
49731: LD_VAR 0 1
49735: PUSH
49736: LD_VAR 0 3
49740: ARRAY
49741: PPUSH
49742: CALL 54395 0 2
49746: ST_TO_ADDR
49747: GO 49718
49749: POP
49750: POP
// end ;
49751: LD_VAR 0 2
49755: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49756: LD_INT 0
49758: PPUSH
49759: PPUSH
49760: PPUSH
49761: PPUSH
49762: PPUSH
49763: PPUSH
// if not unit or not hexes then
49764: LD_VAR 0 1
49768: NOT
49769: PUSH
49770: LD_VAR 0 2
49774: NOT
49775: OR
49776: IFFALSE 49780
// exit ;
49778: GO 49903
// dist := 9999 ;
49780: LD_ADDR_VAR 0 5
49784: PUSH
49785: LD_INT 9999
49787: ST_TO_ADDR
// for i = 1 to hexes do
49788: LD_ADDR_VAR 0 4
49792: PUSH
49793: DOUBLE
49794: LD_INT 1
49796: DEC
49797: ST_TO_ADDR
49798: LD_VAR 0 2
49802: PUSH
49803: FOR_TO
49804: IFFALSE 49891
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49806: LD_ADDR_VAR 0 6
49810: PUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: LD_VAR 0 2
49820: PUSH
49821: LD_VAR 0 4
49825: ARRAY
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PPUSH
49831: LD_VAR 0 2
49835: PUSH
49836: LD_VAR 0 4
49840: ARRAY
49841: PUSH
49842: LD_INT 2
49844: ARRAY
49845: PPUSH
49846: CALL_OW 297
49850: ST_TO_ADDR
// if tdist < dist then
49851: LD_VAR 0 6
49855: PUSH
49856: LD_VAR 0 5
49860: LESS
49861: IFFALSE 49889
// begin hex := hexes [ i ] ;
49863: LD_ADDR_VAR 0 8
49867: PUSH
49868: LD_VAR 0 2
49872: PUSH
49873: LD_VAR 0 4
49877: ARRAY
49878: ST_TO_ADDR
// dist := tdist ;
49879: LD_ADDR_VAR 0 5
49883: PUSH
49884: LD_VAR 0 6
49888: ST_TO_ADDR
// end ; end ;
49889: GO 49803
49891: POP
49892: POP
// result := hex ;
49893: LD_ADDR_VAR 0 3
49897: PUSH
49898: LD_VAR 0 8
49902: ST_TO_ADDR
// end ;
49903: LD_VAR 0 3
49907: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49908: LD_INT 0
49910: PPUSH
49911: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49912: LD_VAR 0 1
49916: NOT
49917: PUSH
49918: LD_VAR 0 1
49922: PUSH
49923: LD_INT 21
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 23
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PPUSH
49947: CALL_OW 69
49951: IN
49952: NOT
49953: OR
49954: IFFALSE 49958
// exit ;
49956: GO 50005
// for i = 1 to 3 do
49958: LD_ADDR_VAR 0 3
49962: PUSH
49963: DOUBLE
49964: LD_INT 1
49966: DEC
49967: ST_TO_ADDR
49968: LD_INT 3
49970: PUSH
49971: FOR_TO
49972: IFFALSE 50003
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49974: LD_VAR 0 1
49978: PPUSH
49979: CALL_OW 250
49983: PPUSH
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 251
49993: PPUSH
49994: LD_INT 1
49996: PPUSH
49997: CALL_OW 453
50001: GO 49971
50003: POP
50004: POP
// end ;
50005: LD_VAR 0 2
50009: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50010: LD_INT 0
50012: PPUSH
50013: PPUSH
50014: PPUSH
50015: PPUSH
50016: PPUSH
50017: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50018: LD_VAR 0 1
50022: NOT
50023: PUSH
50024: LD_VAR 0 2
50028: NOT
50029: OR
50030: PUSH
50031: LD_VAR 0 1
50035: PPUSH
50036: CALL_OW 314
50040: OR
50041: IFFALSE 50045
// exit ;
50043: GO 50512
// if GetLives ( i ) < 250 then
50045: LD_VAR 0 4
50049: PPUSH
50050: CALL_OW 256
50054: PUSH
50055: LD_INT 250
50057: LESS
50058: IFFALSE 50071
// begin ComAutodestruct ( i ) ;
50060: LD_VAR 0 4
50064: PPUSH
50065: CALL 49908 0 1
// exit ;
50069: GO 50512
// end ; x := GetX ( enemy_unit ) ;
50071: LD_ADDR_VAR 0 7
50075: PUSH
50076: LD_VAR 0 2
50080: PPUSH
50081: CALL_OW 250
50085: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50086: LD_ADDR_VAR 0 8
50090: PUSH
50091: LD_VAR 0 2
50095: PPUSH
50096: CALL_OW 251
50100: ST_TO_ADDR
// if not x or not y then
50101: LD_VAR 0 7
50105: NOT
50106: PUSH
50107: LD_VAR 0 8
50111: NOT
50112: OR
50113: IFFALSE 50117
// exit ;
50115: GO 50512
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50117: LD_ADDR_VAR 0 6
50121: PUSH
50122: LD_VAR 0 7
50126: PPUSH
50127: LD_INT 0
50129: PPUSH
50130: LD_INT 4
50132: PPUSH
50133: CALL_OW 272
50137: PUSH
50138: LD_VAR 0 8
50142: PPUSH
50143: LD_INT 0
50145: PPUSH
50146: LD_INT 4
50148: PPUSH
50149: CALL_OW 273
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_VAR 0 7
50162: PPUSH
50163: LD_INT 1
50165: PPUSH
50166: LD_INT 4
50168: PPUSH
50169: CALL_OW 272
50173: PUSH
50174: LD_VAR 0 8
50178: PPUSH
50179: LD_INT 1
50181: PPUSH
50182: LD_INT 4
50184: PPUSH
50185: CALL_OW 273
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_VAR 0 7
50198: PPUSH
50199: LD_INT 2
50201: PPUSH
50202: LD_INT 4
50204: PPUSH
50205: CALL_OW 272
50209: PUSH
50210: LD_VAR 0 8
50214: PPUSH
50215: LD_INT 2
50217: PPUSH
50218: LD_INT 4
50220: PPUSH
50221: CALL_OW 273
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_VAR 0 7
50234: PPUSH
50235: LD_INT 3
50237: PPUSH
50238: LD_INT 4
50240: PPUSH
50241: CALL_OW 272
50245: PUSH
50246: LD_VAR 0 8
50250: PPUSH
50251: LD_INT 3
50253: PPUSH
50254: LD_INT 4
50256: PPUSH
50257: CALL_OW 273
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_VAR 0 7
50270: PPUSH
50271: LD_INT 4
50273: PPUSH
50274: LD_INT 4
50276: PPUSH
50277: CALL_OW 272
50281: PUSH
50282: LD_VAR 0 8
50286: PPUSH
50287: LD_INT 4
50289: PPUSH
50290: LD_INT 4
50292: PPUSH
50293: CALL_OW 273
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_VAR 0 7
50306: PPUSH
50307: LD_INT 5
50309: PPUSH
50310: LD_INT 4
50312: PPUSH
50313: CALL_OW 272
50317: PUSH
50318: LD_VAR 0 8
50322: PPUSH
50323: LD_INT 5
50325: PPUSH
50326: LD_INT 4
50328: PPUSH
50329: CALL_OW 273
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: ST_TO_ADDR
// for i = tmp downto 1 do
50346: LD_ADDR_VAR 0 4
50350: PUSH
50351: DOUBLE
50352: LD_VAR 0 6
50356: INC
50357: ST_TO_ADDR
50358: LD_INT 1
50360: PUSH
50361: FOR_DOWNTO
50362: IFFALSE 50463
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50364: LD_VAR 0 6
50368: PUSH
50369: LD_VAR 0 4
50373: ARRAY
50374: PUSH
50375: LD_INT 1
50377: ARRAY
50378: PPUSH
50379: LD_VAR 0 6
50383: PUSH
50384: LD_VAR 0 4
50388: ARRAY
50389: PUSH
50390: LD_INT 2
50392: ARRAY
50393: PPUSH
50394: CALL_OW 488
50398: NOT
50399: PUSH
50400: LD_VAR 0 6
50404: PUSH
50405: LD_VAR 0 4
50409: ARRAY
50410: PUSH
50411: LD_INT 1
50413: ARRAY
50414: PPUSH
50415: LD_VAR 0 6
50419: PUSH
50420: LD_VAR 0 4
50424: ARRAY
50425: PUSH
50426: LD_INT 2
50428: ARRAY
50429: PPUSH
50430: CALL_OW 428
50434: PUSH
50435: LD_INT 0
50437: NONEQUAL
50438: OR
50439: IFFALSE 50461
// tmp := Delete ( tmp , i ) ;
50441: LD_ADDR_VAR 0 6
50445: PUSH
50446: LD_VAR 0 6
50450: PPUSH
50451: LD_VAR 0 4
50455: PPUSH
50456: CALL_OW 3
50460: ST_TO_ADDR
50461: GO 50361
50463: POP
50464: POP
// j := GetClosestHex ( unit , tmp ) ;
50465: LD_ADDR_VAR 0 5
50469: PUSH
50470: LD_VAR 0 1
50474: PPUSH
50475: LD_VAR 0 6
50479: PPUSH
50480: CALL 49756 0 2
50484: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50485: LD_VAR 0 1
50489: PPUSH
50490: LD_VAR 0 5
50494: PUSH
50495: LD_INT 1
50497: ARRAY
50498: PPUSH
50499: LD_VAR 0 5
50503: PUSH
50504: LD_INT 2
50506: ARRAY
50507: PPUSH
50508: CALL_OW 111
// end ;
50512: LD_VAR 0 3
50516: RET
// export function PrepareApemanSoldier ( ) ; begin
50517: LD_INT 0
50519: PPUSH
// uc_nation := 0 ;
50520: LD_ADDR_OWVAR 21
50524: PUSH
50525: LD_INT 0
50527: ST_TO_ADDR
// hc_sex := sex_male ;
50528: LD_ADDR_OWVAR 27
50532: PUSH
50533: LD_INT 1
50535: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50536: LD_ADDR_OWVAR 28
50540: PUSH
50541: LD_INT 15
50543: ST_TO_ADDR
// hc_gallery :=  ;
50544: LD_ADDR_OWVAR 33
50548: PUSH
50549: LD_STRING 
50551: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50552: LD_ADDR_OWVAR 31
50556: PUSH
50557: LD_INT 0
50559: PPUSH
50560: LD_INT 3
50562: PPUSH
50563: CALL_OW 12
50567: PUSH
50568: LD_INT 0
50570: PPUSH
50571: LD_INT 3
50573: PPUSH
50574: CALL_OW 12
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: ST_TO_ADDR
// end ;
50591: LD_VAR 0 1
50595: RET
// export function PrepareApemanEngineer ( ) ; begin
50596: LD_INT 0
50598: PPUSH
// uc_nation := 0 ;
50599: LD_ADDR_OWVAR 21
50603: PUSH
50604: LD_INT 0
50606: ST_TO_ADDR
// hc_sex := sex_male ;
50607: LD_ADDR_OWVAR 27
50611: PUSH
50612: LD_INT 1
50614: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50615: LD_ADDR_OWVAR 28
50619: PUSH
50620: LD_INT 16
50622: ST_TO_ADDR
// hc_gallery :=  ;
50623: LD_ADDR_OWVAR 33
50627: PUSH
50628: LD_STRING 
50630: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50631: LD_ADDR_OWVAR 31
50635: PUSH
50636: LD_INT 0
50638: PPUSH
50639: LD_INT 3
50641: PPUSH
50642: CALL_OW 12
50646: PUSH
50647: LD_INT 0
50649: PPUSH
50650: LD_INT 3
50652: PPUSH
50653: CALL_OW 12
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// end ;
50670: LD_VAR 0 1
50674: RET
// export function PrepareApeman ( agressivity ) ; begin
50675: LD_INT 0
50677: PPUSH
// uc_side := 0 ;
50678: LD_ADDR_OWVAR 20
50682: PUSH
50683: LD_INT 0
50685: ST_TO_ADDR
// uc_nation := 0 ;
50686: LD_ADDR_OWVAR 21
50690: PUSH
50691: LD_INT 0
50693: ST_TO_ADDR
// hc_sex := sex_male ;
50694: LD_ADDR_OWVAR 27
50698: PUSH
50699: LD_INT 1
50701: ST_TO_ADDR
// hc_class := class_apeman ;
50702: LD_ADDR_OWVAR 28
50706: PUSH
50707: LD_INT 12
50709: ST_TO_ADDR
// hc_gallery :=  ;
50710: LD_ADDR_OWVAR 33
50714: PUSH
50715: LD_STRING 
50717: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50718: LD_ADDR_OWVAR 35
50722: PUSH
50723: LD_VAR 0 1
50727: NEG
50728: PPUSH
50729: LD_VAR 0 1
50733: PPUSH
50734: CALL_OW 12
50738: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50739: LD_ADDR_OWVAR 31
50743: PUSH
50744: LD_INT 0
50746: PPUSH
50747: LD_INT 3
50749: PPUSH
50750: CALL_OW 12
50754: PUSH
50755: LD_INT 0
50757: PPUSH
50758: LD_INT 3
50760: PPUSH
50761: CALL_OW 12
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// end ;
50778: LD_VAR 0 2
50782: RET
// export function PrepareTiger ( agressivity ) ; begin
50783: LD_INT 0
50785: PPUSH
// uc_side := 0 ;
50786: LD_ADDR_OWVAR 20
50790: PUSH
50791: LD_INT 0
50793: ST_TO_ADDR
// uc_nation := 0 ;
50794: LD_ADDR_OWVAR 21
50798: PUSH
50799: LD_INT 0
50801: ST_TO_ADDR
// hc_class := class_tiger ;
50802: LD_ADDR_OWVAR 28
50806: PUSH
50807: LD_INT 14
50809: ST_TO_ADDR
// hc_gallery :=  ;
50810: LD_ADDR_OWVAR 33
50814: PUSH
50815: LD_STRING 
50817: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50818: LD_ADDR_OWVAR 35
50822: PUSH
50823: LD_VAR 0 1
50827: NEG
50828: PPUSH
50829: LD_VAR 0 1
50833: PPUSH
50834: CALL_OW 12
50838: ST_TO_ADDR
// end ;
50839: LD_VAR 0 2
50843: RET
// export function PrepareEnchidna ( ) ; begin
50844: LD_INT 0
50846: PPUSH
// uc_side := 0 ;
50847: LD_ADDR_OWVAR 20
50851: PUSH
50852: LD_INT 0
50854: ST_TO_ADDR
// uc_nation := 0 ;
50855: LD_ADDR_OWVAR 21
50859: PUSH
50860: LD_INT 0
50862: ST_TO_ADDR
// hc_class := class_baggie ;
50863: LD_ADDR_OWVAR 28
50867: PUSH
50868: LD_INT 13
50870: ST_TO_ADDR
// hc_gallery :=  ;
50871: LD_ADDR_OWVAR 33
50875: PUSH
50876: LD_STRING 
50878: ST_TO_ADDR
// end ;
50879: LD_VAR 0 1
50883: RET
// export function PrepareFrog ( ) ; begin
50884: LD_INT 0
50886: PPUSH
// uc_side := 0 ;
50887: LD_ADDR_OWVAR 20
50891: PUSH
50892: LD_INT 0
50894: ST_TO_ADDR
// uc_nation := 0 ;
50895: LD_ADDR_OWVAR 21
50899: PUSH
50900: LD_INT 0
50902: ST_TO_ADDR
// hc_class := class_frog ;
50903: LD_ADDR_OWVAR 28
50907: PUSH
50908: LD_INT 19
50910: ST_TO_ADDR
// hc_gallery :=  ;
50911: LD_ADDR_OWVAR 33
50915: PUSH
50916: LD_STRING 
50918: ST_TO_ADDR
// end ;
50919: LD_VAR 0 1
50923: RET
// export function PrepareFish ( ) ; begin
50924: LD_INT 0
50926: PPUSH
// uc_side := 0 ;
50927: LD_ADDR_OWVAR 20
50931: PUSH
50932: LD_INT 0
50934: ST_TO_ADDR
// uc_nation := 0 ;
50935: LD_ADDR_OWVAR 21
50939: PUSH
50940: LD_INT 0
50942: ST_TO_ADDR
// hc_class := class_fish ;
50943: LD_ADDR_OWVAR 28
50947: PUSH
50948: LD_INT 20
50950: ST_TO_ADDR
// hc_gallery :=  ;
50951: LD_ADDR_OWVAR 33
50955: PUSH
50956: LD_STRING 
50958: ST_TO_ADDR
// end ;
50959: LD_VAR 0 1
50963: RET
// export function PrepareBird ( ) ; begin
50964: LD_INT 0
50966: PPUSH
// uc_side := 0 ;
50967: LD_ADDR_OWVAR 20
50971: PUSH
50972: LD_INT 0
50974: ST_TO_ADDR
// uc_nation := 0 ;
50975: LD_ADDR_OWVAR 21
50979: PUSH
50980: LD_INT 0
50982: ST_TO_ADDR
// hc_class := class_phororhacos ;
50983: LD_ADDR_OWVAR 28
50987: PUSH
50988: LD_INT 18
50990: ST_TO_ADDR
// hc_gallery :=  ;
50991: LD_ADDR_OWVAR 33
50995: PUSH
50996: LD_STRING 
50998: ST_TO_ADDR
// end ;
50999: LD_VAR 0 1
51003: RET
// export function PrepareHorse ( ) ; begin
51004: LD_INT 0
51006: PPUSH
// uc_side := 0 ;
51007: LD_ADDR_OWVAR 20
51011: PUSH
51012: LD_INT 0
51014: ST_TO_ADDR
// uc_nation := 0 ;
51015: LD_ADDR_OWVAR 21
51019: PUSH
51020: LD_INT 0
51022: ST_TO_ADDR
// hc_class := class_horse ;
51023: LD_ADDR_OWVAR 28
51027: PUSH
51028: LD_INT 21
51030: ST_TO_ADDR
// hc_gallery :=  ;
51031: LD_ADDR_OWVAR 33
51035: PUSH
51036: LD_STRING 
51038: ST_TO_ADDR
// end ;
51039: LD_VAR 0 1
51043: RET
// export function PrepareMastodont ( ) ; begin
51044: LD_INT 0
51046: PPUSH
// uc_side := 0 ;
51047: LD_ADDR_OWVAR 20
51051: PUSH
51052: LD_INT 0
51054: ST_TO_ADDR
// uc_nation := 0 ;
51055: LD_ADDR_OWVAR 21
51059: PUSH
51060: LD_INT 0
51062: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51063: LD_ADDR_OWVAR 37
51067: PUSH
51068: LD_INT 31
51070: ST_TO_ADDR
// vc_control := control_rider ;
51071: LD_ADDR_OWVAR 38
51075: PUSH
51076: LD_INT 4
51078: ST_TO_ADDR
// end ;
51079: LD_VAR 0 1
51083: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51084: LD_INT 0
51086: PPUSH
51087: PPUSH
51088: PPUSH
// uc_side = 0 ;
51089: LD_ADDR_OWVAR 20
51093: PUSH
51094: LD_INT 0
51096: ST_TO_ADDR
// uc_nation = 0 ;
51097: LD_ADDR_OWVAR 21
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
// InitHc_All ( ) ;
51105: CALL_OW 584
// InitVc ;
51109: CALL_OW 20
// if mastodonts then
51113: LD_VAR 0 6
51117: IFFALSE 51184
// for i = 1 to mastodonts do
51119: LD_ADDR_VAR 0 11
51123: PUSH
51124: DOUBLE
51125: LD_INT 1
51127: DEC
51128: ST_TO_ADDR
51129: LD_VAR 0 6
51133: PUSH
51134: FOR_TO
51135: IFFALSE 51182
// begin vc_chassis := 31 ;
51137: LD_ADDR_OWVAR 37
51141: PUSH
51142: LD_INT 31
51144: ST_TO_ADDR
// vc_control := control_rider ;
51145: LD_ADDR_OWVAR 38
51149: PUSH
51150: LD_INT 4
51152: ST_TO_ADDR
// animal := CreateVehicle ;
51153: LD_ADDR_VAR 0 12
51157: PUSH
51158: CALL_OW 45
51162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51163: LD_VAR 0 12
51167: PPUSH
51168: LD_VAR 0 8
51172: PPUSH
51173: LD_INT 0
51175: PPUSH
51176: CALL 53312 0 3
// end ;
51180: GO 51134
51182: POP
51183: POP
// if horses then
51184: LD_VAR 0 5
51188: IFFALSE 51255
// for i = 1 to horses do
51190: LD_ADDR_VAR 0 11
51194: PUSH
51195: DOUBLE
51196: LD_INT 1
51198: DEC
51199: ST_TO_ADDR
51200: LD_VAR 0 5
51204: PUSH
51205: FOR_TO
51206: IFFALSE 51253
// begin hc_class := 21 ;
51208: LD_ADDR_OWVAR 28
51212: PUSH
51213: LD_INT 21
51215: ST_TO_ADDR
// hc_gallery :=  ;
51216: LD_ADDR_OWVAR 33
51220: PUSH
51221: LD_STRING 
51223: ST_TO_ADDR
// animal := CreateHuman ;
51224: LD_ADDR_VAR 0 12
51228: PUSH
51229: CALL_OW 44
51233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51234: LD_VAR 0 12
51238: PPUSH
51239: LD_VAR 0 8
51243: PPUSH
51244: LD_INT 0
51246: PPUSH
51247: CALL 53312 0 3
// end ;
51251: GO 51205
51253: POP
51254: POP
// if birds then
51255: LD_VAR 0 1
51259: IFFALSE 51326
// for i = 1 to birds do
51261: LD_ADDR_VAR 0 11
51265: PUSH
51266: DOUBLE
51267: LD_INT 1
51269: DEC
51270: ST_TO_ADDR
51271: LD_VAR 0 1
51275: PUSH
51276: FOR_TO
51277: IFFALSE 51324
// begin hc_class = 18 ;
51279: LD_ADDR_OWVAR 28
51283: PUSH
51284: LD_INT 18
51286: ST_TO_ADDR
// hc_gallery =  ;
51287: LD_ADDR_OWVAR 33
51291: PUSH
51292: LD_STRING 
51294: ST_TO_ADDR
// animal := CreateHuman ;
51295: LD_ADDR_VAR 0 12
51299: PUSH
51300: CALL_OW 44
51304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51305: LD_VAR 0 12
51309: PPUSH
51310: LD_VAR 0 8
51314: PPUSH
51315: LD_INT 0
51317: PPUSH
51318: CALL 53312 0 3
// end ;
51322: GO 51276
51324: POP
51325: POP
// if tigers then
51326: LD_VAR 0 2
51330: IFFALSE 51414
// for i = 1 to tigers do
51332: LD_ADDR_VAR 0 11
51336: PUSH
51337: DOUBLE
51338: LD_INT 1
51340: DEC
51341: ST_TO_ADDR
51342: LD_VAR 0 2
51346: PUSH
51347: FOR_TO
51348: IFFALSE 51412
// begin hc_class = class_tiger ;
51350: LD_ADDR_OWVAR 28
51354: PUSH
51355: LD_INT 14
51357: ST_TO_ADDR
// hc_gallery =  ;
51358: LD_ADDR_OWVAR 33
51362: PUSH
51363: LD_STRING 
51365: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51366: LD_ADDR_OWVAR 35
51370: PUSH
51371: LD_INT 7
51373: NEG
51374: PPUSH
51375: LD_INT 7
51377: PPUSH
51378: CALL_OW 12
51382: ST_TO_ADDR
// animal := CreateHuman ;
51383: LD_ADDR_VAR 0 12
51387: PUSH
51388: CALL_OW 44
51392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51393: LD_VAR 0 12
51397: PPUSH
51398: LD_VAR 0 8
51402: PPUSH
51403: LD_INT 0
51405: PPUSH
51406: CALL 53312 0 3
// end ;
51410: GO 51347
51412: POP
51413: POP
// if apemans then
51414: LD_VAR 0 3
51418: IFFALSE 51541
// for i = 1 to apemans do
51420: LD_ADDR_VAR 0 11
51424: PUSH
51425: DOUBLE
51426: LD_INT 1
51428: DEC
51429: ST_TO_ADDR
51430: LD_VAR 0 3
51434: PUSH
51435: FOR_TO
51436: IFFALSE 51539
// begin hc_class = class_apeman ;
51438: LD_ADDR_OWVAR 28
51442: PUSH
51443: LD_INT 12
51445: ST_TO_ADDR
// hc_gallery =  ;
51446: LD_ADDR_OWVAR 33
51450: PUSH
51451: LD_STRING 
51453: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51454: LD_ADDR_OWVAR 35
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PPUSH
51463: LD_INT 2
51465: PPUSH
51466: CALL_OW 12
51470: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51471: LD_ADDR_OWVAR 31
51475: PUSH
51476: LD_INT 1
51478: PPUSH
51479: LD_INT 3
51481: PPUSH
51482: CALL_OW 12
51486: PUSH
51487: LD_INT 1
51489: PPUSH
51490: LD_INT 3
51492: PPUSH
51493: CALL_OW 12
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// animal := CreateHuman ;
51510: LD_ADDR_VAR 0 12
51514: PUSH
51515: CALL_OW 44
51519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51520: LD_VAR 0 12
51524: PPUSH
51525: LD_VAR 0 8
51529: PPUSH
51530: LD_INT 0
51532: PPUSH
51533: CALL 53312 0 3
// end ;
51537: GO 51435
51539: POP
51540: POP
// if enchidnas then
51541: LD_VAR 0 4
51545: IFFALSE 51612
// for i = 1 to enchidnas do
51547: LD_ADDR_VAR 0 11
51551: PUSH
51552: DOUBLE
51553: LD_INT 1
51555: DEC
51556: ST_TO_ADDR
51557: LD_VAR 0 4
51561: PUSH
51562: FOR_TO
51563: IFFALSE 51610
// begin hc_class = 13 ;
51565: LD_ADDR_OWVAR 28
51569: PUSH
51570: LD_INT 13
51572: ST_TO_ADDR
// hc_gallery =  ;
51573: LD_ADDR_OWVAR 33
51577: PUSH
51578: LD_STRING 
51580: ST_TO_ADDR
// animal := CreateHuman ;
51581: LD_ADDR_VAR 0 12
51585: PUSH
51586: CALL_OW 44
51590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51591: LD_VAR 0 12
51595: PPUSH
51596: LD_VAR 0 8
51600: PPUSH
51601: LD_INT 0
51603: PPUSH
51604: CALL 53312 0 3
// end ;
51608: GO 51562
51610: POP
51611: POP
// if fishes then
51612: LD_VAR 0 7
51616: IFFALSE 51683
// for i = 1 to fishes do
51618: LD_ADDR_VAR 0 11
51622: PUSH
51623: DOUBLE
51624: LD_INT 1
51626: DEC
51627: ST_TO_ADDR
51628: LD_VAR 0 7
51632: PUSH
51633: FOR_TO
51634: IFFALSE 51681
// begin hc_class = 20 ;
51636: LD_ADDR_OWVAR 28
51640: PUSH
51641: LD_INT 20
51643: ST_TO_ADDR
// hc_gallery =  ;
51644: LD_ADDR_OWVAR 33
51648: PUSH
51649: LD_STRING 
51651: ST_TO_ADDR
// animal := CreateHuman ;
51652: LD_ADDR_VAR 0 12
51656: PUSH
51657: CALL_OW 44
51661: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51662: LD_VAR 0 12
51666: PPUSH
51667: LD_VAR 0 9
51671: PPUSH
51672: LD_INT 0
51674: PPUSH
51675: CALL 53312 0 3
// end ;
51679: GO 51633
51681: POP
51682: POP
// end ;
51683: LD_VAR 0 10
51687: RET
// export function WantHeal ( sci , unit ) ; begin
51688: LD_INT 0
51690: PPUSH
// if GetTaskList ( sci ) > 0 then
51691: LD_VAR 0 1
51695: PPUSH
51696: CALL_OW 437
51700: PUSH
51701: LD_INT 0
51703: GREATER
51704: IFFALSE 51774
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51706: LD_VAR 0 1
51710: PPUSH
51711: CALL_OW 437
51715: PUSH
51716: LD_INT 1
51718: ARRAY
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PUSH
51724: LD_STRING l
51726: EQUAL
51727: PUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: CALL_OW 437
51737: PUSH
51738: LD_INT 1
51740: ARRAY
51741: PUSH
51742: LD_INT 4
51744: ARRAY
51745: PUSH
51746: LD_VAR 0 2
51750: EQUAL
51751: AND
51752: IFFALSE 51764
// result := true else
51754: LD_ADDR_VAR 0 3
51758: PUSH
51759: LD_INT 1
51761: ST_TO_ADDR
51762: GO 51772
// result := false ;
51764: LD_ADDR_VAR 0 3
51768: PUSH
51769: LD_INT 0
51771: ST_TO_ADDR
// end else
51772: GO 51782
// result := false ;
51774: LD_ADDR_VAR 0 3
51778: PUSH
51779: LD_INT 0
51781: ST_TO_ADDR
// end ;
51782: LD_VAR 0 3
51786: RET
// export function HealTarget ( sci ) ; begin
51787: LD_INT 0
51789: PPUSH
// if not sci then
51790: LD_VAR 0 1
51794: NOT
51795: IFFALSE 51799
// exit ;
51797: GO 51864
// result := 0 ;
51799: LD_ADDR_VAR 0 2
51803: PUSH
51804: LD_INT 0
51806: ST_TO_ADDR
// if GetTaskList ( sci ) then
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 437
51816: IFFALSE 51864
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51818: LD_VAR 0 1
51822: PPUSH
51823: CALL_OW 437
51827: PUSH
51828: LD_INT 1
51830: ARRAY
51831: PUSH
51832: LD_INT 1
51834: ARRAY
51835: PUSH
51836: LD_STRING l
51838: EQUAL
51839: IFFALSE 51864
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51841: LD_ADDR_VAR 0 2
51845: PUSH
51846: LD_VAR 0 1
51850: PPUSH
51851: CALL_OW 437
51855: PUSH
51856: LD_INT 1
51858: ARRAY
51859: PUSH
51860: LD_INT 4
51862: ARRAY
51863: ST_TO_ADDR
// end ;
51864: LD_VAR 0 2
51868: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51869: LD_INT 0
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
// if not base_units then
51875: LD_VAR 0 1
51879: NOT
51880: IFFALSE 51884
// exit ;
51882: GO 51971
// result := false ;
51884: LD_ADDR_VAR 0 2
51888: PUSH
51889: LD_INT 0
51891: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51892: LD_ADDR_VAR 0 5
51896: PUSH
51897: LD_VAR 0 1
51901: PPUSH
51902: LD_INT 21
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PPUSH
51912: CALL_OW 72
51916: ST_TO_ADDR
// if not tmp then
51917: LD_VAR 0 5
51921: NOT
51922: IFFALSE 51926
// exit ;
51924: GO 51971
// for i in tmp do
51926: LD_ADDR_VAR 0 3
51930: PUSH
51931: LD_VAR 0 5
51935: PUSH
51936: FOR_IN
51937: IFFALSE 51969
// begin result := EnemyInRange ( i , 22 ) ;
51939: LD_ADDR_VAR 0 2
51943: PUSH
51944: LD_VAR 0 3
51948: PPUSH
51949: LD_INT 22
51951: PPUSH
51952: CALL 49558 0 2
51956: ST_TO_ADDR
// if result then
51957: LD_VAR 0 2
51961: IFFALSE 51967
// exit ;
51963: POP
51964: POP
51965: GO 51971
// end ;
51967: GO 51936
51969: POP
51970: POP
// end ;
51971: LD_VAR 0 2
51975: RET
// export function FilterByTag ( units , tag ) ; begin
51976: LD_INT 0
51978: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51979: LD_ADDR_VAR 0 3
51983: PUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: LD_INT 120
51991: PUSH
51992: LD_VAR 0 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PPUSH
52001: CALL_OW 72
52005: ST_TO_ADDR
// end ;
52006: LD_VAR 0 3
52010: RET
// export function IsDriver ( un ) ; begin
52011: LD_INT 0
52013: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52014: LD_ADDR_VAR 0 2
52018: PUSH
52019: LD_VAR 0 1
52023: PUSH
52024: LD_INT 55
52026: PUSH
52027: EMPTY
52028: LIST
52029: PPUSH
52030: CALL_OW 69
52034: IN
52035: ST_TO_ADDR
// end ;
52036: LD_VAR 0 2
52040: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52041: LD_INT 0
52043: PPUSH
52044: PPUSH
// list := [ ] ;
52045: LD_ADDR_VAR 0 5
52049: PUSH
52050: EMPTY
52051: ST_TO_ADDR
// case d of 0 :
52052: LD_VAR 0 3
52056: PUSH
52057: LD_INT 0
52059: DOUBLE
52060: EQUAL
52061: IFTRUE 52065
52063: GO 52198
52065: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: LD_VAR 0 1
52075: PUSH
52076: LD_INT 4
52078: MINUS
52079: PUSH
52080: LD_VAR 0 2
52084: PUSH
52085: LD_INT 4
52087: MINUS
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: PUSH
52097: LD_VAR 0 1
52101: PUSH
52102: LD_INT 3
52104: MINUS
52105: PUSH
52106: LD_VAR 0 2
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: PUSH
52119: LD_VAR 0 1
52123: PUSH
52124: LD_INT 4
52126: PLUS
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 4
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: PUSH
52141: LD_VAR 0 1
52145: PUSH
52146: LD_INT 3
52148: PLUS
52149: PUSH
52150: LD_VAR 0 2
52154: PUSH
52155: LD_INT 3
52157: PLUS
52158: PUSH
52159: LD_INT 5
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: LD_VAR 0 2
52176: PUSH
52177: LD_INT 4
52179: PLUS
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// end ; 1 :
52196: GO 52896
52198: LD_INT 1
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52206
52204: GO 52339
52206: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52207: LD_ADDR_VAR 0 5
52211: PUSH
52212: LD_VAR 0 1
52216: PUSH
52217: LD_VAR 0 2
52221: PUSH
52222: LD_INT 4
52224: MINUS
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: PUSH
52234: LD_VAR 0 1
52238: PUSH
52239: LD_INT 3
52241: MINUS
52242: PUSH
52243: LD_VAR 0 2
52247: PUSH
52248: LD_INT 3
52250: MINUS
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: PUSH
52260: LD_VAR 0 1
52264: PUSH
52265: LD_INT 4
52267: MINUS
52268: PUSH
52269: LD_VAR 0 2
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: PUSH
52282: LD_VAR 0 1
52286: PUSH
52287: LD_VAR 0 2
52291: PUSH
52292: LD_INT 3
52294: PLUS
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: PUSH
52304: LD_VAR 0 1
52308: PUSH
52309: LD_INT 4
52311: PLUS
52312: PUSH
52313: LD_VAR 0 2
52317: PUSH
52318: LD_INT 4
52320: PLUS
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// end ; 2 :
52337: GO 52896
52339: LD_INT 2
52341: DOUBLE
52342: EQUAL
52343: IFTRUE 52347
52345: GO 52476
52347: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52348: LD_ADDR_VAR 0 5
52352: PUSH
52353: LD_VAR 0 1
52357: PUSH
52358: LD_VAR 0 2
52362: PUSH
52363: LD_INT 3
52365: MINUS
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: LD_VAR 0 1
52379: PUSH
52380: LD_INT 4
52382: PLUS
52383: PUSH
52384: LD_VAR 0 2
52388: PUSH
52389: LD_INT 4
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: LD_VAR 0 1
52401: PUSH
52402: LD_VAR 0 2
52406: PUSH
52407: LD_INT 4
52409: PLUS
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: PUSH
52419: LD_VAR 0 1
52423: PUSH
52424: LD_INT 3
52426: MINUS
52427: PUSH
52428: LD_VAR 0 2
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: PUSH
52441: LD_VAR 0 1
52445: PUSH
52446: LD_INT 4
52448: MINUS
52449: PUSH
52450: LD_VAR 0 2
52454: PUSH
52455: LD_INT 4
52457: MINUS
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// end ; 3 :
52474: GO 52896
52476: LD_INT 3
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52484
52482: GO 52617
52484: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52485: LD_ADDR_VAR 0 5
52489: PUSH
52490: LD_VAR 0 1
52494: PUSH
52495: LD_INT 3
52497: PLUS
52498: PUSH
52499: LD_VAR 0 2
52503: PUSH
52504: LD_INT 4
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: PUSH
52512: LD_VAR 0 1
52516: PUSH
52517: LD_INT 4
52519: PLUS
52520: PUSH
52521: LD_VAR 0 2
52525: PUSH
52526: LD_INT 4
52528: PLUS
52529: PUSH
52530: LD_INT 5
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: LD_VAR 0 1
52542: PUSH
52543: LD_INT 4
52545: MINUS
52546: PUSH
52547: LD_VAR 0 2
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: PUSH
52560: LD_VAR 0 1
52564: PUSH
52565: LD_VAR 0 2
52569: PUSH
52570: LD_INT 4
52572: MINUS
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: PUSH
52582: LD_VAR 0 1
52586: PUSH
52587: LD_INT 3
52589: MINUS
52590: PUSH
52591: LD_VAR 0 2
52595: PUSH
52596: LD_INT 3
52598: MINUS
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// end ; 4 :
52615: GO 52896
52617: LD_INT 4
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52625
52623: GO 52758
52625: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52626: LD_ADDR_VAR 0 5
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_VAR 0 2
52640: PUSH
52641: LD_INT 4
52643: PLUS
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: PUSH
52653: LD_VAR 0 1
52657: PUSH
52658: LD_INT 3
52660: PLUS
52661: PUSH
52662: LD_VAR 0 2
52666: PUSH
52667: LD_INT 3
52669: PLUS
52670: PUSH
52671: LD_INT 5
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: PUSH
52679: LD_VAR 0 1
52683: PUSH
52684: LD_INT 4
52686: PLUS
52687: PUSH
52688: LD_VAR 0 2
52692: PUSH
52693: LD_INT 4
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: PUSH
52701: LD_VAR 0 1
52705: PUSH
52706: LD_VAR 0 2
52710: PUSH
52711: LD_INT 3
52713: MINUS
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: PUSH
52723: LD_VAR 0 1
52727: PUSH
52728: LD_INT 4
52730: MINUS
52731: PUSH
52732: LD_VAR 0 2
52736: PUSH
52737: LD_INT 4
52739: MINUS
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// end ; 5 :
52756: GO 52896
52758: LD_INT 5
52760: DOUBLE
52761: EQUAL
52762: IFTRUE 52766
52764: GO 52895
52766: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52767: LD_ADDR_VAR 0 5
52771: PUSH
52772: LD_VAR 0 1
52776: PUSH
52777: LD_INT 4
52779: MINUS
52780: PUSH
52781: LD_VAR 0 2
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: PUSH
52794: LD_VAR 0 1
52798: PUSH
52799: LD_VAR 0 2
52803: PUSH
52804: LD_INT 4
52806: MINUS
52807: PUSH
52808: LD_INT 3
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: PUSH
52816: LD_VAR 0 1
52820: PUSH
52821: LD_INT 4
52823: PLUS
52824: PUSH
52825: LD_VAR 0 2
52829: PUSH
52830: LD_INT 4
52832: PLUS
52833: PUSH
52834: LD_INT 5
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: PUSH
52842: LD_VAR 0 1
52846: PUSH
52847: LD_INT 3
52849: PLUS
52850: PUSH
52851: LD_VAR 0 2
52855: PUSH
52856: LD_INT 4
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: PUSH
52864: LD_VAR 0 1
52868: PUSH
52869: LD_VAR 0 2
52873: PUSH
52874: LD_INT 3
52876: PLUS
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: ST_TO_ADDR
// end ; end ;
52893: GO 52896
52895: POP
// result := list ;
52896: LD_ADDR_VAR 0 4
52900: PUSH
52901: LD_VAR 0 5
52905: ST_TO_ADDR
// end ;
52906: LD_VAR 0 4
52910: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52911: LD_INT 0
52913: PPUSH
52914: PPUSH
52915: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52916: LD_VAR 0 1
52920: NOT
52921: PUSH
52922: LD_VAR 0 2
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: IN
52945: NOT
52946: OR
52947: IFFALSE 52951
// exit ;
52949: GO 53034
// tmp := [ ] ;
52951: LD_ADDR_VAR 0 5
52955: PUSH
52956: EMPTY
52957: ST_TO_ADDR
// for i in units do
52958: LD_ADDR_VAR 0 4
52962: PUSH
52963: LD_VAR 0 1
52967: PUSH
52968: FOR_IN
52969: IFFALSE 53003
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52971: LD_ADDR_VAR 0 5
52975: PUSH
52976: LD_VAR 0 5
52980: PPUSH
52981: LD_VAR 0 4
52985: PPUSH
52986: LD_VAR 0 2
52990: PPUSH
52991: CALL_OW 259
52995: PPUSH
52996: CALL 54395 0 2
53000: ST_TO_ADDR
53001: GO 52968
53003: POP
53004: POP
// if not tmp then
53005: LD_VAR 0 5
53009: NOT
53010: IFFALSE 53014
// exit ;
53012: GO 53034
// result := SortListByListDesc ( units , tmp ) ;
53014: LD_ADDR_VAR 0 3
53018: PUSH
53019: LD_VAR 0 1
53023: PPUSH
53024: LD_VAR 0 5
53028: PPUSH
53029: CALL_OW 77
53033: ST_TO_ADDR
// end ;
53034: LD_VAR 0 3
53038: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53039: LD_INT 0
53041: PPUSH
53042: PPUSH
53043: PPUSH
// result := false ;
53044: LD_ADDR_VAR 0 3
53048: PUSH
53049: LD_INT 0
53051: ST_TO_ADDR
// if not building then
53052: LD_VAR 0 2
53056: NOT
53057: IFFALSE 53061
// exit ;
53059: GO 53199
// x := GetX ( building ) ;
53061: LD_ADDR_VAR 0 4
53065: PUSH
53066: LD_VAR 0 2
53070: PPUSH
53071: CALL_OW 250
53075: ST_TO_ADDR
// y := GetY ( building ) ;
53076: LD_ADDR_VAR 0 5
53080: PUSH
53081: LD_VAR 0 2
53085: PPUSH
53086: CALL_OW 251
53090: ST_TO_ADDR
// if not x or not y then
53091: LD_VAR 0 4
53095: NOT
53096: PUSH
53097: LD_VAR 0 5
53101: NOT
53102: OR
53103: IFFALSE 53107
// exit ;
53105: GO 53199
// if GetTaskList ( unit ) then
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 437
53116: IFFALSE 53199
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53118: LD_STRING e
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 437
53130: PUSH
53131: LD_INT 1
53133: ARRAY
53134: PUSH
53135: LD_INT 1
53137: ARRAY
53138: EQUAL
53139: PUSH
53140: LD_VAR 0 4
53144: PUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 437
53154: PUSH
53155: LD_INT 1
53157: ARRAY
53158: PUSH
53159: LD_INT 2
53161: ARRAY
53162: EQUAL
53163: AND
53164: PUSH
53165: LD_VAR 0 5
53169: PUSH
53170: LD_VAR 0 1
53174: PPUSH
53175: CALL_OW 437
53179: PUSH
53180: LD_INT 1
53182: ARRAY
53183: PUSH
53184: LD_INT 3
53186: ARRAY
53187: EQUAL
53188: AND
53189: IFFALSE 53199
// result := true end ;
53191: LD_ADDR_VAR 0 3
53195: PUSH
53196: LD_INT 1
53198: ST_TO_ADDR
// end ;
53199: LD_VAR 0 3
53203: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53204: LD_INT 0
53206: PPUSH
// result := false ;
53207: LD_ADDR_VAR 0 4
53211: PUSH
53212: LD_INT 0
53214: ST_TO_ADDR
// if GetTaskList ( unit ) then
53215: LD_VAR 0 1
53219: PPUSH
53220: CALL_OW 437
53224: IFFALSE 53307
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53226: LD_STRING M
53228: PUSH
53229: LD_VAR 0 1
53233: PPUSH
53234: CALL_OW 437
53238: PUSH
53239: LD_INT 1
53241: ARRAY
53242: PUSH
53243: LD_INT 1
53245: ARRAY
53246: EQUAL
53247: PUSH
53248: LD_VAR 0 2
53252: PUSH
53253: LD_VAR 0 1
53257: PPUSH
53258: CALL_OW 437
53262: PUSH
53263: LD_INT 1
53265: ARRAY
53266: PUSH
53267: LD_INT 2
53269: ARRAY
53270: EQUAL
53271: AND
53272: PUSH
53273: LD_VAR 0 3
53277: PUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: CALL_OW 437
53287: PUSH
53288: LD_INT 1
53290: ARRAY
53291: PUSH
53292: LD_INT 3
53294: ARRAY
53295: EQUAL
53296: AND
53297: IFFALSE 53307
// result := true ;
53299: LD_ADDR_VAR 0 4
53303: PUSH
53304: LD_INT 1
53306: ST_TO_ADDR
// end ; end ;
53307: LD_VAR 0 4
53311: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53312: LD_INT 0
53314: PPUSH
53315: PPUSH
53316: PPUSH
53317: PPUSH
// if not unit or not area then
53318: LD_VAR 0 1
53322: NOT
53323: PUSH
53324: LD_VAR 0 2
53328: NOT
53329: OR
53330: IFFALSE 53334
// exit ;
53332: GO 53498
// tmp := AreaToList ( area , i ) ;
53334: LD_ADDR_VAR 0 6
53338: PUSH
53339: LD_VAR 0 2
53343: PPUSH
53344: LD_VAR 0 5
53348: PPUSH
53349: CALL_OW 517
53353: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53354: LD_ADDR_VAR 0 5
53358: PUSH
53359: DOUBLE
53360: LD_INT 1
53362: DEC
53363: ST_TO_ADDR
53364: LD_VAR 0 6
53368: PUSH
53369: LD_INT 1
53371: ARRAY
53372: PUSH
53373: FOR_TO
53374: IFFALSE 53496
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53376: LD_ADDR_VAR 0 7
53380: PUSH
53381: LD_VAR 0 6
53385: PUSH
53386: LD_INT 1
53388: ARRAY
53389: PUSH
53390: LD_VAR 0 5
53394: ARRAY
53395: PUSH
53396: LD_VAR 0 6
53400: PUSH
53401: LD_INT 2
53403: ARRAY
53404: PUSH
53405: LD_VAR 0 5
53409: ARRAY
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53415: LD_VAR 0 7
53419: PUSH
53420: LD_INT 1
53422: ARRAY
53423: PPUSH
53424: LD_VAR 0 7
53428: PUSH
53429: LD_INT 2
53431: ARRAY
53432: PPUSH
53433: CALL_OW 428
53437: PUSH
53438: LD_INT 0
53440: EQUAL
53441: IFFALSE 53494
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53443: LD_VAR 0 1
53447: PPUSH
53448: LD_VAR 0 7
53452: PUSH
53453: LD_INT 1
53455: ARRAY
53456: PPUSH
53457: LD_VAR 0 7
53461: PUSH
53462: LD_INT 2
53464: ARRAY
53465: PPUSH
53466: LD_VAR 0 3
53470: PPUSH
53471: CALL_OW 48
// result := IsPlaced ( unit ) ;
53475: LD_ADDR_VAR 0 4
53479: PUSH
53480: LD_VAR 0 1
53484: PPUSH
53485: CALL_OW 305
53489: ST_TO_ADDR
// exit ;
53490: POP
53491: POP
53492: GO 53498
// end ; end ;
53494: GO 53373
53496: POP
53497: POP
// end ;
53498: LD_VAR 0 4
53502: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53503: LD_INT 0
53505: PPUSH
53506: PPUSH
53507: PPUSH
// if not side or side > 8 then
53508: LD_VAR 0 1
53512: NOT
53513: PUSH
53514: LD_VAR 0 1
53518: PUSH
53519: LD_INT 8
53521: GREATER
53522: OR
53523: IFFALSE 53527
// exit ;
53525: GO 53714
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53527: LD_ADDR_VAR 0 4
53531: PUSH
53532: LD_INT 22
53534: PUSH
53535: LD_VAR 0 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 21
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PPUSH
53558: CALL_OW 69
53562: ST_TO_ADDR
// if not tmp then
53563: LD_VAR 0 4
53567: NOT
53568: IFFALSE 53572
// exit ;
53570: GO 53714
// enable_addtolog := true ;
53572: LD_ADDR_OWVAR 81
53576: PUSH
53577: LD_INT 1
53579: ST_TO_ADDR
// AddToLog ( [ ) ;
53580: LD_STRING [
53582: PPUSH
53583: CALL_OW 561
// for i in tmp do
53587: LD_ADDR_VAR 0 3
53591: PUSH
53592: LD_VAR 0 4
53596: PUSH
53597: FOR_IN
53598: IFFALSE 53705
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53600: LD_STRING [
53602: PUSH
53603: LD_VAR 0 3
53607: PPUSH
53608: CALL_OW 266
53612: STR
53613: PUSH
53614: LD_STRING , 
53616: STR
53617: PUSH
53618: LD_VAR 0 3
53622: PPUSH
53623: CALL_OW 250
53627: STR
53628: PUSH
53629: LD_STRING , 
53631: STR
53632: PUSH
53633: LD_VAR 0 3
53637: PPUSH
53638: CALL_OW 251
53642: STR
53643: PUSH
53644: LD_STRING , 
53646: STR
53647: PUSH
53648: LD_VAR 0 3
53652: PPUSH
53653: CALL_OW 254
53657: STR
53658: PUSH
53659: LD_STRING , 
53661: STR
53662: PUSH
53663: LD_VAR 0 3
53667: PPUSH
53668: LD_INT 1
53670: PPUSH
53671: CALL_OW 268
53675: STR
53676: PUSH
53677: LD_STRING , 
53679: STR
53680: PUSH
53681: LD_VAR 0 3
53685: PPUSH
53686: LD_INT 2
53688: PPUSH
53689: CALL_OW 268
53693: STR
53694: PUSH
53695: LD_STRING ],
53697: STR
53698: PPUSH
53699: CALL_OW 561
// end ;
53703: GO 53597
53705: POP
53706: POP
// AddToLog ( ]; ) ;
53707: LD_STRING ];
53709: PPUSH
53710: CALL_OW 561
// end ;
53714: LD_VAR 0 2
53718: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53719: LD_INT 0
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
// if not area or not rate or not max then
53726: LD_VAR 0 1
53730: NOT
53731: PUSH
53732: LD_VAR 0 2
53736: NOT
53737: OR
53738: PUSH
53739: LD_VAR 0 4
53743: NOT
53744: OR
53745: IFFALSE 53749
// exit ;
53747: GO 53938
// while 1 do
53749: LD_INT 1
53751: IFFALSE 53938
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53753: LD_ADDR_VAR 0 9
53757: PUSH
53758: LD_VAR 0 1
53762: PPUSH
53763: LD_INT 1
53765: PPUSH
53766: CALL_OW 287
53770: PUSH
53771: LD_INT 10
53773: MUL
53774: ST_TO_ADDR
// r := rate / 10 ;
53775: LD_ADDR_VAR 0 7
53779: PUSH
53780: LD_VAR 0 2
53784: PUSH
53785: LD_INT 10
53787: DIVREAL
53788: ST_TO_ADDR
// time := 1 1$00 ;
53789: LD_ADDR_VAR 0 8
53793: PUSH
53794: LD_INT 2100
53796: ST_TO_ADDR
// if amount < min then
53797: LD_VAR 0 9
53801: PUSH
53802: LD_VAR 0 3
53806: LESS
53807: IFFALSE 53825
// r := r * 2 else
53809: LD_ADDR_VAR 0 7
53813: PUSH
53814: LD_VAR 0 7
53818: PUSH
53819: LD_INT 2
53821: MUL
53822: ST_TO_ADDR
53823: GO 53851
// if amount > max then
53825: LD_VAR 0 9
53829: PUSH
53830: LD_VAR 0 4
53834: GREATER
53835: IFFALSE 53851
// r := r / 2 ;
53837: LD_ADDR_VAR 0 7
53841: PUSH
53842: LD_VAR 0 7
53846: PUSH
53847: LD_INT 2
53849: DIVREAL
53850: ST_TO_ADDR
// time := time / r ;
53851: LD_ADDR_VAR 0 8
53855: PUSH
53856: LD_VAR 0 8
53860: PUSH
53861: LD_VAR 0 7
53865: DIVREAL
53866: ST_TO_ADDR
// if time < 0 then
53867: LD_VAR 0 8
53871: PUSH
53872: LD_INT 0
53874: LESS
53875: IFFALSE 53892
// time := time * - 1 ;
53877: LD_ADDR_VAR 0 8
53881: PUSH
53882: LD_VAR 0 8
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: MUL
53891: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53892: LD_VAR 0 8
53896: PUSH
53897: LD_INT 35
53899: PPUSH
53900: LD_INT 875
53902: PPUSH
53903: CALL_OW 12
53907: PLUS
53908: PPUSH
53909: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53913: LD_INT 1
53915: PPUSH
53916: LD_INT 5
53918: PPUSH
53919: CALL_OW 12
53923: PPUSH
53924: LD_VAR 0 1
53928: PPUSH
53929: LD_INT 1
53931: PPUSH
53932: CALL_OW 55
// end ;
53936: GO 53749
// end ;
53938: LD_VAR 0 5
53942: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53943: LD_INT 0
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
// if not turrets or not factories then
53953: LD_VAR 0 1
53957: NOT
53958: PUSH
53959: LD_VAR 0 2
53963: NOT
53964: OR
53965: IFFALSE 53969
// exit ;
53967: GO 54276
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53969: LD_ADDR_VAR 0 10
53973: PUSH
53974: LD_INT 5
53976: PUSH
53977: LD_INT 6
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 4
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 5
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 24
54011: PUSH
54012: LD_INT 25
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 23
54021: PUSH
54022: LD_INT 27
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 42
54035: PUSH
54036: LD_INT 43
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 44
54045: PUSH
54046: LD_INT 46
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 45
54055: PUSH
54056: LD_INT 47
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// result := [ ] ;
54073: LD_ADDR_VAR 0 3
54077: PUSH
54078: EMPTY
54079: ST_TO_ADDR
// for i in turrets do
54080: LD_ADDR_VAR 0 4
54084: PUSH
54085: LD_VAR 0 1
54089: PUSH
54090: FOR_IN
54091: IFFALSE 54274
// begin nat := GetNation ( i ) ;
54093: LD_ADDR_VAR 0 7
54097: PUSH
54098: LD_VAR 0 4
54102: PPUSH
54103: CALL_OW 248
54107: ST_TO_ADDR
// weapon := 0 ;
54108: LD_ADDR_VAR 0 8
54112: PUSH
54113: LD_INT 0
54115: ST_TO_ADDR
// if not nat then
54116: LD_VAR 0 7
54120: NOT
54121: IFFALSE 54125
// continue ;
54123: GO 54090
// for j in list [ nat ] do
54125: LD_ADDR_VAR 0 5
54129: PUSH
54130: LD_VAR 0 10
54134: PUSH
54135: LD_VAR 0 7
54139: ARRAY
54140: PUSH
54141: FOR_IN
54142: IFFALSE 54183
// if GetBWeapon ( i ) = j [ 1 ] then
54144: LD_VAR 0 4
54148: PPUSH
54149: CALL_OW 269
54153: PUSH
54154: LD_VAR 0 5
54158: PUSH
54159: LD_INT 1
54161: ARRAY
54162: EQUAL
54163: IFFALSE 54181
// begin weapon := j [ 2 ] ;
54165: LD_ADDR_VAR 0 8
54169: PUSH
54170: LD_VAR 0 5
54174: PUSH
54175: LD_INT 2
54177: ARRAY
54178: ST_TO_ADDR
// break ;
54179: GO 54183
// end ;
54181: GO 54141
54183: POP
54184: POP
// if not weapon then
54185: LD_VAR 0 8
54189: NOT
54190: IFFALSE 54194
// continue ;
54192: GO 54090
// for k in factories do
54194: LD_ADDR_VAR 0 6
54198: PUSH
54199: LD_VAR 0 2
54203: PUSH
54204: FOR_IN
54205: IFFALSE 54270
// begin weapons := AvailableWeaponList ( k ) ;
54207: LD_ADDR_VAR 0 9
54211: PUSH
54212: LD_VAR 0 6
54216: PPUSH
54217: CALL_OW 478
54221: ST_TO_ADDR
// if not weapons then
54222: LD_VAR 0 9
54226: NOT
54227: IFFALSE 54231
// continue ;
54229: GO 54204
// if weapon in weapons then
54231: LD_VAR 0 8
54235: PUSH
54236: LD_VAR 0 9
54240: IN
54241: IFFALSE 54268
// begin result := [ i , weapon ] ;
54243: LD_ADDR_VAR 0 3
54247: PUSH
54248: LD_VAR 0 4
54252: PUSH
54253: LD_VAR 0 8
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: ST_TO_ADDR
// exit ;
54262: POP
54263: POP
54264: POP
54265: POP
54266: GO 54276
// end ; end ;
54268: GO 54204
54270: POP
54271: POP
// end ;
54272: GO 54090
54274: POP
54275: POP
// end ;
54276: LD_VAR 0 3
54280: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54281: LD_INT 0
54283: PPUSH
// if not side or side > 8 then
54284: LD_VAR 0 3
54288: NOT
54289: PUSH
54290: LD_VAR 0 3
54294: PUSH
54295: LD_INT 8
54297: GREATER
54298: OR
54299: IFFALSE 54303
// exit ;
54301: GO 54362
// if not range then
54303: LD_VAR 0 4
54307: NOT
54308: IFFALSE 54319
// range := - 12 ;
54310: LD_ADDR_VAR 0 4
54314: PUSH
54315: LD_INT 12
54317: NEG
54318: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54319: LD_VAR 0 1
54323: PPUSH
54324: LD_VAR 0 2
54328: PPUSH
54329: LD_VAR 0 3
54333: PPUSH
54334: LD_VAR 0 4
54338: PPUSH
54339: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54343: LD_VAR 0 1
54347: PPUSH
54348: LD_VAR 0 2
54352: PPUSH
54353: LD_VAR 0 3
54357: PPUSH
54358: CALL_OW 331
// end ;
54362: LD_VAR 0 5
54366: RET
// export function Video ( mode ) ; begin
54367: LD_INT 0
54369: PPUSH
// ingame_video = mode ;
54370: LD_ADDR_OWVAR 52
54374: PUSH
54375: LD_VAR 0 1
54379: ST_TO_ADDR
// interface_hidden = mode ;
54380: LD_ADDR_OWVAR 54
54384: PUSH
54385: LD_VAR 0 1
54389: ST_TO_ADDR
// end ;
54390: LD_VAR 0 2
54394: RET
// export function Join ( array , element ) ; begin
54395: LD_INT 0
54397: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54398: LD_ADDR_VAR 0 3
54402: PUSH
54403: LD_VAR 0 1
54407: PPUSH
54408: LD_VAR 0 1
54412: PUSH
54413: LD_INT 1
54415: PLUS
54416: PPUSH
54417: LD_VAR 0 2
54421: PPUSH
54422: CALL_OW 1
54426: ST_TO_ADDR
// end ;
54427: LD_VAR 0 3
54431: RET
// export function JoinUnion ( array , element ) ; begin
54432: LD_INT 0
54434: PPUSH
// result := array union element ;
54435: LD_ADDR_VAR 0 3
54439: PUSH
54440: LD_VAR 0 1
54444: PUSH
54445: LD_VAR 0 2
54449: UNION
54450: ST_TO_ADDR
// end ;
54451: LD_VAR 0 3
54455: RET
// export function GetBehemoths ( side ) ; begin
54456: LD_INT 0
54458: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54459: LD_ADDR_VAR 0 2
54463: PUSH
54464: LD_INT 22
54466: PUSH
54467: LD_VAR 0 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 31
54478: PUSH
54479: LD_INT 25
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PPUSH
54490: CALL_OW 69
54494: ST_TO_ADDR
// end ;
54495: LD_VAR 0 2
54499: RET
// export function Shuffle ( array ) ; var i , index ; begin
54500: LD_INT 0
54502: PPUSH
54503: PPUSH
54504: PPUSH
// result := [ ] ;
54505: LD_ADDR_VAR 0 2
54509: PUSH
54510: EMPTY
54511: ST_TO_ADDR
// if not array then
54512: LD_VAR 0 1
54516: NOT
54517: IFFALSE 54521
// exit ;
54519: GO 54620
// Randomize ;
54521: CALL_OW 10
// for i = array downto 1 do
54525: LD_ADDR_VAR 0 3
54529: PUSH
54530: DOUBLE
54531: LD_VAR 0 1
54535: INC
54536: ST_TO_ADDR
54537: LD_INT 1
54539: PUSH
54540: FOR_DOWNTO
54541: IFFALSE 54618
// begin index := rand ( 1 , array ) ;
54543: LD_ADDR_VAR 0 4
54547: PUSH
54548: LD_INT 1
54550: PPUSH
54551: LD_VAR 0 1
54555: PPUSH
54556: CALL_OW 12
54560: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54561: LD_ADDR_VAR 0 2
54565: PUSH
54566: LD_VAR 0 2
54570: PPUSH
54571: LD_VAR 0 2
54575: PUSH
54576: LD_INT 1
54578: PLUS
54579: PPUSH
54580: LD_VAR 0 1
54584: PUSH
54585: LD_VAR 0 4
54589: ARRAY
54590: PPUSH
54591: CALL_OW 2
54595: ST_TO_ADDR
// array := Delete ( array , index ) ;
54596: LD_ADDR_VAR 0 1
54600: PUSH
54601: LD_VAR 0 1
54605: PPUSH
54606: LD_VAR 0 4
54610: PPUSH
54611: CALL_OW 3
54615: ST_TO_ADDR
// end ;
54616: GO 54540
54618: POP
54619: POP
// end ;
54620: LD_VAR 0 2
54624: RET
// export function GetBaseMaterials ( base ) ; begin
54625: LD_INT 0
54627: PPUSH
// result := [ 0 , 0 , 0 ] ;
54628: LD_ADDR_VAR 0 2
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// if not base then
54647: LD_VAR 0 1
54651: NOT
54652: IFFALSE 54656
// exit ;
54654: GO 54705
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54656: LD_ADDR_VAR 0 2
54660: PUSH
54661: LD_VAR 0 1
54665: PPUSH
54666: LD_INT 1
54668: PPUSH
54669: CALL_OW 275
54673: PUSH
54674: LD_VAR 0 1
54678: PPUSH
54679: LD_INT 2
54681: PPUSH
54682: CALL_OW 275
54686: PUSH
54687: LD_VAR 0 1
54691: PPUSH
54692: LD_INT 3
54694: PPUSH
54695: CALL_OW 275
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// end ;
54705: LD_VAR 0 2
54709: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54710: LD_INT 0
54712: PPUSH
54713: PPUSH
// result := array ;
54714: LD_ADDR_VAR 0 3
54718: PUSH
54719: LD_VAR 0 1
54723: ST_TO_ADDR
// if size >= result then
54724: LD_VAR 0 2
54728: PUSH
54729: LD_VAR 0 3
54733: GREATEREQUAL
54734: IFFALSE 54738
// exit ;
54736: GO 54788
// if size then
54738: LD_VAR 0 2
54742: IFFALSE 54788
// for i := array downto size do
54744: LD_ADDR_VAR 0 4
54748: PUSH
54749: DOUBLE
54750: LD_VAR 0 1
54754: INC
54755: ST_TO_ADDR
54756: LD_VAR 0 2
54760: PUSH
54761: FOR_DOWNTO
54762: IFFALSE 54786
// result := Delete ( result , result ) ;
54764: LD_ADDR_VAR 0 3
54768: PUSH
54769: LD_VAR 0 3
54773: PPUSH
54774: LD_VAR 0 3
54778: PPUSH
54779: CALL_OW 3
54783: ST_TO_ADDR
54784: GO 54761
54786: POP
54787: POP
// end ;
54788: LD_VAR 0 3
54792: RET
// export function ComExit ( unit ) ; var tmp ; begin
54793: LD_INT 0
54795: PPUSH
54796: PPUSH
// if not IsInUnit ( unit ) then
54797: LD_VAR 0 1
54801: PPUSH
54802: CALL_OW 310
54806: NOT
54807: IFFALSE 54811
// exit ;
54809: GO 54871
// tmp := IsInUnit ( unit ) ;
54811: LD_ADDR_VAR 0 3
54815: PUSH
54816: LD_VAR 0 1
54820: PPUSH
54821: CALL_OW 310
54825: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54826: LD_VAR 0 3
54830: PPUSH
54831: CALL_OW 247
54835: PUSH
54836: LD_INT 2
54838: EQUAL
54839: IFFALSE 54852
// ComExitVehicle ( unit ) else
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 121
54850: GO 54861
// ComExitBuilding ( unit ) ;
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 122
// result := tmp ;
54861: LD_ADDR_VAR 0 2
54865: PUSH
54866: LD_VAR 0 3
54870: ST_TO_ADDR
// end ;
54871: LD_VAR 0 2
54875: RET
// export function ComExitAll ( units ) ; var i ; begin
54876: LD_INT 0
54878: PPUSH
54879: PPUSH
// if not units then
54880: LD_VAR 0 1
54884: NOT
54885: IFFALSE 54889
// exit ;
54887: GO 54915
// for i in units do
54889: LD_ADDR_VAR 0 3
54893: PUSH
54894: LD_VAR 0 1
54898: PUSH
54899: FOR_IN
54900: IFFALSE 54913
// ComExit ( i ) ;
54902: LD_VAR 0 3
54906: PPUSH
54907: CALL 54793 0 1
54911: GO 54899
54913: POP
54914: POP
// end ;
54915: LD_VAR 0 2
54919: RET
// export function ResetHc ; begin
54920: LD_INT 0
54922: PPUSH
// InitHc ;
54923: CALL_OW 19
// hc_importance := 0 ;
54927: LD_ADDR_OWVAR 32
54931: PUSH
54932: LD_INT 0
54934: ST_TO_ADDR
// end ;
54935: LD_VAR 0 1
54939: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54940: LD_INT 0
54942: PPUSH
54943: PPUSH
54944: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54945: LD_ADDR_VAR 0 6
54949: PUSH
54950: LD_VAR 0 1
54954: PUSH
54955: LD_VAR 0 3
54959: PLUS
54960: PUSH
54961: LD_INT 2
54963: DIV
54964: ST_TO_ADDR
// if _x < 0 then
54965: LD_VAR 0 6
54969: PUSH
54970: LD_INT 0
54972: LESS
54973: IFFALSE 54990
// _x := _x * - 1 ;
54975: LD_ADDR_VAR 0 6
54979: PUSH
54980: LD_VAR 0 6
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: MUL
54989: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54990: LD_ADDR_VAR 0 7
54994: PUSH
54995: LD_VAR 0 2
54999: PUSH
55000: LD_VAR 0 4
55004: PLUS
55005: PUSH
55006: LD_INT 2
55008: DIV
55009: ST_TO_ADDR
// if _y < 0 then
55010: LD_VAR 0 7
55014: PUSH
55015: LD_INT 0
55017: LESS
55018: IFFALSE 55035
// _y := _y * - 1 ;
55020: LD_ADDR_VAR 0 7
55024: PUSH
55025: LD_VAR 0 7
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: MUL
55034: ST_TO_ADDR
// result := [ _x , _y ] ;
55035: LD_ADDR_VAR 0 5
55039: PUSH
55040: LD_VAR 0 6
55044: PUSH
55045: LD_VAR 0 7
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 5
55058: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55059: LD_INT 0
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
// task := GetTaskList ( unit ) ;
55065: LD_ADDR_VAR 0 7
55069: PUSH
55070: LD_VAR 0 1
55074: PPUSH
55075: CALL_OW 437
55079: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55080: LD_VAR 0 7
55084: NOT
55085: PUSH
55086: LD_VAR 0 1
55090: PPUSH
55091: LD_VAR 0 2
55095: PPUSH
55096: CALL_OW 308
55100: NOT
55101: AND
55102: IFFALSE 55106
// exit ;
55104: GO 55224
// if IsInArea ( unit , area ) then
55106: LD_VAR 0 1
55110: PPUSH
55111: LD_VAR 0 2
55115: PPUSH
55116: CALL_OW 308
55120: IFFALSE 55138
// begin ComMoveToArea ( unit , goAway ) ;
55122: LD_VAR 0 1
55126: PPUSH
55127: LD_VAR 0 3
55131: PPUSH
55132: CALL_OW 113
// exit ;
55136: GO 55224
// end ; if task [ 1 ] [ 1 ] <> M then
55138: LD_VAR 0 7
55142: PUSH
55143: LD_INT 1
55145: ARRAY
55146: PUSH
55147: LD_INT 1
55149: ARRAY
55150: PUSH
55151: LD_STRING M
55153: NONEQUAL
55154: IFFALSE 55158
// exit ;
55156: GO 55224
// x := task [ 1 ] [ 2 ] ;
55158: LD_ADDR_VAR 0 5
55162: PUSH
55163: LD_VAR 0 7
55167: PUSH
55168: LD_INT 1
55170: ARRAY
55171: PUSH
55172: LD_INT 2
55174: ARRAY
55175: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55176: LD_ADDR_VAR 0 6
55180: PUSH
55181: LD_VAR 0 7
55185: PUSH
55186: LD_INT 1
55188: ARRAY
55189: PUSH
55190: LD_INT 3
55192: ARRAY
55193: ST_TO_ADDR
// if InArea ( x , y , area ) then
55194: LD_VAR 0 5
55198: PPUSH
55199: LD_VAR 0 6
55203: PPUSH
55204: LD_VAR 0 2
55208: PPUSH
55209: CALL_OW 309
55213: IFFALSE 55224
// ComStop ( unit ) ;
55215: LD_VAR 0 1
55219: PPUSH
55220: CALL_OW 141
// end ;
55224: LD_VAR 0 4
55228: RET
// export function Abs ( value ) ; begin
55229: LD_INT 0
55231: PPUSH
// result := value ;
55232: LD_ADDR_VAR 0 2
55236: PUSH
55237: LD_VAR 0 1
55241: ST_TO_ADDR
// if value < 0 then
55242: LD_VAR 0 1
55246: PUSH
55247: LD_INT 0
55249: LESS
55250: IFFALSE 55267
// result := value * - 1 ;
55252: LD_ADDR_VAR 0 2
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: MUL
55266: ST_TO_ADDR
// end ;
55267: LD_VAR 0 2
55271: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55272: LD_INT 0
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
// if not unit or not building then
55282: LD_VAR 0 1
55286: NOT
55287: PUSH
55288: LD_VAR 0 2
55292: NOT
55293: OR
55294: IFFALSE 55298
// exit ;
55296: GO 55524
// x := GetX ( building ) ;
55298: LD_ADDR_VAR 0 4
55302: PUSH
55303: LD_VAR 0 2
55307: PPUSH
55308: CALL_OW 250
55312: ST_TO_ADDR
// y := GetY ( building ) ;
55313: LD_ADDR_VAR 0 6
55317: PUSH
55318: LD_VAR 0 2
55322: PPUSH
55323: CALL_OW 251
55327: ST_TO_ADDR
// d := GetDir ( building ) ;
55328: LD_ADDR_VAR 0 8
55332: PUSH
55333: LD_VAR 0 2
55337: PPUSH
55338: CALL_OW 254
55342: ST_TO_ADDR
// r := 4 ;
55343: LD_ADDR_VAR 0 9
55347: PUSH
55348: LD_INT 4
55350: ST_TO_ADDR
// for i := 1 to 5 do
55351: LD_ADDR_VAR 0 10
55355: PUSH
55356: DOUBLE
55357: LD_INT 1
55359: DEC
55360: ST_TO_ADDR
55361: LD_INT 5
55363: PUSH
55364: FOR_TO
55365: IFFALSE 55522
// begin _x := ShiftX ( x , d , r + i ) ;
55367: LD_ADDR_VAR 0 5
55371: PUSH
55372: LD_VAR 0 4
55376: PPUSH
55377: LD_VAR 0 8
55381: PPUSH
55382: LD_VAR 0 9
55386: PUSH
55387: LD_VAR 0 10
55391: PLUS
55392: PPUSH
55393: CALL_OW 272
55397: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55398: LD_ADDR_VAR 0 7
55402: PUSH
55403: LD_VAR 0 6
55407: PPUSH
55408: LD_VAR 0 8
55412: PPUSH
55413: LD_VAR 0 9
55417: PUSH
55418: LD_VAR 0 10
55422: PLUS
55423: PPUSH
55424: CALL_OW 273
55428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55429: LD_VAR 0 5
55433: PPUSH
55434: LD_VAR 0 7
55438: PPUSH
55439: CALL_OW 488
55443: PUSH
55444: LD_VAR 0 5
55448: PPUSH
55449: LD_VAR 0 7
55453: PPUSH
55454: CALL_OW 428
55458: PPUSH
55459: CALL_OW 247
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: IN
55474: NOT
55475: AND
55476: IFFALSE 55520
// begin ComMoveXY ( unit , _x , _y ) ;
55478: LD_VAR 0 1
55482: PPUSH
55483: LD_VAR 0 5
55487: PPUSH
55488: LD_VAR 0 7
55492: PPUSH
55493: CALL_OW 111
// result := [ _x , _y ] ;
55497: LD_ADDR_VAR 0 3
55501: PUSH
55502: LD_VAR 0 5
55506: PUSH
55507: LD_VAR 0 7
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: ST_TO_ADDR
// exit ;
55516: POP
55517: POP
55518: GO 55524
// end ; end ;
55520: GO 55364
55522: POP
55523: POP
// end ;
55524: LD_VAR 0 3
55528: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55529: LD_INT 0
55531: PPUSH
55532: PPUSH
55533: PPUSH
// result := 0 ;
55534: LD_ADDR_VAR 0 3
55538: PUSH
55539: LD_INT 0
55541: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55542: LD_VAR 0 1
55546: PUSH
55547: LD_INT 0
55549: LESS
55550: PUSH
55551: LD_VAR 0 1
55555: PUSH
55556: LD_INT 8
55558: GREATER
55559: OR
55560: PUSH
55561: LD_VAR 0 2
55565: PUSH
55566: LD_INT 0
55568: LESS
55569: OR
55570: PUSH
55571: LD_VAR 0 2
55575: PUSH
55576: LD_INT 8
55578: GREATER
55579: OR
55580: IFFALSE 55584
// exit ;
55582: GO 55659
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55584: LD_ADDR_VAR 0 4
55588: PUSH
55589: LD_INT 22
55591: PUSH
55592: LD_VAR 0 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PPUSH
55601: CALL_OW 69
55605: PUSH
55606: FOR_IN
55607: IFFALSE 55657
// begin un := UnitShoot ( i ) ;
55609: LD_ADDR_VAR 0 5
55613: PUSH
55614: LD_VAR 0 4
55618: PPUSH
55619: CALL_OW 504
55623: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55624: LD_VAR 0 5
55628: PPUSH
55629: CALL_OW 255
55633: PUSH
55634: LD_VAR 0 1
55638: EQUAL
55639: IFFALSE 55655
// begin result := un ;
55641: LD_ADDR_VAR 0 3
55645: PUSH
55646: LD_VAR 0 5
55650: ST_TO_ADDR
// exit ;
55651: POP
55652: POP
55653: GO 55659
// end ; end ;
55655: GO 55606
55657: POP
55658: POP
// end ;
55659: LD_VAR 0 3
55663: RET
// export function GetCargoBay ( units ) ; begin
55664: LD_INT 0
55666: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55667: LD_ADDR_VAR 0 2
55671: PUSH
55672: LD_VAR 0 1
55676: PPUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 34
55682: PUSH
55683: LD_INT 12
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 34
55692: PUSH
55693: LD_INT 51
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 34
55702: PUSH
55703: LD_INT 32
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 34
55712: PUSH
55713: LD_INT 89
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: PPUSH
55727: CALL_OW 72
55731: ST_TO_ADDR
// end ;
55732: LD_VAR 0 2
55736: RET
// export function Negate ( value ) ; begin
55737: LD_INT 0
55739: PPUSH
// result := not value ;
55740: LD_ADDR_VAR 0 2
55744: PUSH
55745: LD_VAR 0 1
55749: NOT
55750: ST_TO_ADDR
// end ;
55751: LD_VAR 0 2
55755: RET
// export function Inc ( value ) ; begin
55756: LD_INT 0
55758: PPUSH
// result := value + 1 ;
55759: LD_ADDR_VAR 0 2
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: LD_INT 1
55771: PLUS
55772: ST_TO_ADDR
// end ;
55773: LD_VAR 0 2
55777: RET
// export function Dec ( value ) ; begin
55778: LD_INT 0
55780: PPUSH
// result := value - 1 ;
55781: LD_ADDR_VAR 0 2
55785: PUSH
55786: LD_VAR 0 1
55790: PUSH
55791: LD_INT 1
55793: MINUS
55794: ST_TO_ADDR
// end ;
55795: LD_VAR 0 2
55799: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55800: LD_INT 0
55802: PPUSH
55803: PPUSH
55804: PPUSH
55805: PPUSH
55806: PPUSH
55807: PPUSH
55808: PPUSH
55809: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55810: LD_VAR 0 1
55814: PPUSH
55815: LD_VAR 0 2
55819: PPUSH
55820: CALL_OW 488
55824: NOT
55825: PUSH
55826: LD_VAR 0 3
55830: PPUSH
55831: LD_VAR 0 4
55835: PPUSH
55836: CALL_OW 488
55840: NOT
55841: OR
55842: IFFALSE 55855
// begin result := - 1 ;
55844: LD_ADDR_VAR 0 5
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: ST_TO_ADDR
// exit ;
55853: GO 56090
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55855: LD_ADDR_VAR 0 12
55859: PUSH
55860: LD_VAR 0 1
55864: PPUSH
55865: LD_VAR 0 2
55869: PPUSH
55870: LD_VAR 0 3
55874: PPUSH
55875: LD_VAR 0 4
55879: PPUSH
55880: CALL 54940 0 4
55884: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55885: LD_ADDR_VAR 0 11
55889: PUSH
55890: LD_VAR 0 1
55894: PPUSH
55895: LD_VAR 0 2
55899: PPUSH
55900: LD_VAR 0 12
55904: PUSH
55905: LD_INT 1
55907: ARRAY
55908: PPUSH
55909: LD_VAR 0 12
55913: PUSH
55914: LD_INT 2
55916: ARRAY
55917: PPUSH
55918: CALL_OW 298
55922: ST_TO_ADDR
// distance := 9999 ;
55923: LD_ADDR_VAR 0 10
55927: PUSH
55928: LD_INT 9999
55930: ST_TO_ADDR
// for i := 0 to 5 do
55931: LD_ADDR_VAR 0 6
55935: PUSH
55936: DOUBLE
55937: LD_INT 0
55939: DEC
55940: ST_TO_ADDR
55941: LD_INT 5
55943: PUSH
55944: FOR_TO
55945: IFFALSE 56088
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55947: LD_ADDR_VAR 0 7
55951: PUSH
55952: LD_VAR 0 1
55956: PPUSH
55957: LD_VAR 0 6
55961: PPUSH
55962: LD_VAR 0 11
55966: PPUSH
55967: CALL_OW 272
55971: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55972: LD_ADDR_VAR 0 8
55976: PUSH
55977: LD_VAR 0 2
55981: PPUSH
55982: LD_VAR 0 6
55986: PPUSH
55987: LD_VAR 0 11
55991: PPUSH
55992: CALL_OW 273
55996: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55997: LD_VAR 0 7
56001: PPUSH
56002: LD_VAR 0 8
56006: PPUSH
56007: CALL_OW 488
56011: NOT
56012: IFFALSE 56016
// continue ;
56014: GO 55944
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56016: LD_ADDR_VAR 0 9
56020: PUSH
56021: LD_VAR 0 12
56025: PUSH
56026: LD_INT 1
56028: ARRAY
56029: PPUSH
56030: LD_VAR 0 12
56034: PUSH
56035: LD_INT 2
56037: ARRAY
56038: PPUSH
56039: LD_VAR 0 7
56043: PPUSH
56044: LD_VAR 0 8
56048: PPUSH
56049: CALL_OW 298
56053: ST_TO_ADDR
// if tmp < distance then
56054: LD_VAR 0 9
56058: PUSH
56059: LD_VAR 0 10
56063: LESS
56064: IFFALSE 56086
// begin result := i ;
56066: LD_ADDR_VAR 0 5
56070: PUSH
56071: LD_VAR 0 6
56075: ST_TO_ADDR
// distance := tmp ;
56076: LD_ADDR_VAR 0 10
56080: PUSH
56081: LD_VAR 0 9
56085: ST_TO_ADDR
// end ; end ;
56086: GO 55944
56088: POP
56089: POP
// end ;
56090: LD_VAR 0 5
56094: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56095: LD_INT 0
56097: PPUSH
56098: PPUSH
// if not driver or not IsInUnit ( driver ) then
56099: LD_VAR 0 1
56103: NOT
56104: PUSH
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 310
56114: NOT
56115: OR
56116: IFFALSE 56120
// exit ;
56118: GO 56210
// vehicle := IsInUnit ( driver ) ;
56120: LD_ADDR_VAR 0 3
56124: PUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: CALL_OW 310
56134: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56135: LD_VAR 0 1
56139: PPUSH
56140: LD_STRING \
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: PUSH
56170: LD_STRING E
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_VAR 0 3
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PPUSH
56206: CALL_OW 446
// end ;
56210: LD_VAR 0 2
56214: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56215: LD_INT 0
56217: PPUSH
56218: PPUSH
// if not driver or not IsInUnit ( driver ) then
56219: LD_VAR 0 1
56223: NOT
56224: PUSH
56225: LD_VAR 0 1
56229: PPUSH
56230: CALL_OW 310
56234: NOT
56235: OR
56236: IFFALSE 56240
// exit ;
56238: GO 56330
// vehicle := IsInUnit ( driver ) ;
56240: LD_ADDR_VAR 0 3
56244: PUSH
56245: LD_VAR 0 1
56249: PPUSH
56250: CALL_OW 310
56254: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56255: LD_VAR 0 1
56259: PPUSH
56260: LD_STRING \
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: PUSH
56290: LD_STRING E
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_VAR 0 3
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PPUSH
56326: CALL_OW 447
// end ;
56330: LD_VAR 0 2
56334: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56335: LD_INT 0
56337: PPUSH
56338: PPUSH
56339: PPUSH
// tmp := [ ] ;
56340: LD_ADDR_VAR 0 5
56344: PUSH
56345: EMPTY
56346: ST_TO_ADDR
// for i in units do
56347: LD_ADDR_VAR 0 4
56351: PUSH
56352: LD_VAR 0 1
56356: PUSH
56357: FOR_IN
56358: IFFALSE 56396
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56360: LD_ADDR_VAR 0 5
56364: PUSH
56365: LD_VAR 0 5
56369: PPUSH
56370: LD_VAR 0 5
56374: PUSH
56375: LD_INT 1
56377: PLUS
56378: PPUSH
56379: LD_VAR 0 4
56383: PPUSH
56384: CALL_OW 256
56388: PPUSH
56389: CALL_OW 2
56393: ST_TO_ADDR
56394: GO 56357
56396: POP
56397: POP
// if not tmp then
56398: LD_VAR 0 5
56402: NOT
56403: IFFALSE 56407
// exit ;
56405: GO 56455
// if asc then
56407: LD_VAR 0 2
56411: IFFALSE 56435
// result := SortListByListAsc ( units , tmp ) else
56413: LD_ADDR_VAR 0 3
56417: PUSH
56418: LD_VAR 0 1
56422: PPUSH
56423: LD_VAR 0 5
56427: PPUSH
56428: CALL_OW 76
56432: ST_TO_ADDR
56433: GO 56455
// result := SortListByListDesc ( units , tmp ) ;
56435: LD_ADDR_VAR 0 3
56439: PUSH
56440: LD_VAR 0 1
56444: PPUSH
56445: LD_VAR 0 5
56449: PPUSH
56450: CALL_OW 77
56454: ST_TO_ADDR
// end ;
56455: LD_VAR 0 3
56459: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56460: LD_INT 0
56462: PPUSH
56463: PPUSH
// task := GetTaskList ( mech ) ;
56464: LD_ADDR_VAR 0 4
56468: PUSH
56469: LD_VAR 0 1
56473: PPUSH
56474: CALL_OW 437
56478: ST_TO_ADDR
// if not task then
56479: LD_VAR 0 4
56483: NOT
56484: IFFALSE 56488
// exit ;
56486: GO 56530
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56488: LD_ADDR_VAR 0 3
56492: PUSH
56493: LD_VAR 0 4
56497: PUSH
56498: LD_INT 1
56500: ARRAY
56501: PUSH
56502: LD_INT 1
56504: ARRAY
56505: PUSH
56506: LD_STRING r
56508: EQUAL
56509: PUSH
56510: LD_VAR 0 4
56514: PUSH
56515: LD_INT 1
56517: ARRAY
56518: PUSH
56519: LD_INT 4
56521: ARRAY
56522: PUSH
56523: LD_VAR 0 2
56527: EQUAL
56528: AND
56529: ST_TO_ADDR
// end ;
56530: LD_VAR 0 3
56534: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56535: LD_INT 0
56537: PPUSH
// SetDir ( unit , d ) ;
56538: LD_VAR 0 1
56542: PPUSH
56543: LD_VAR 0 4
56547: PPUSH
56548: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56552: LD_VAR 0 1
56556: PPUSH
56557: LD_VAR 0 2
56561: PPUSH
56562: LD_VAR 0 3
56566: PPUSH
56567: LD_VAR 0 5
56571: PPUSH
56572: CALL_OW 48
// end ;
56576: LD_VAR 0 6
56580: RET
// export function ToNaturalNumber ( number ) ; begin
56581: LD_INT 0
56583: PPUSH
// result := number div 1 ;
56584: LD_ADDR_VAR 0 2
56588: PUSH
56589: LD_VAR 0 1
56593: PUSH
56594: LD_INT 1
56596: DIV
56597: ST_TO_ADDR
// if number < 0 then
56598: LD_VAR 0 1
56602: PUSH
56603: LD_INT 0
56605: LESS
56606: IFFALSE 56616
// result := 0 ;
56608: LD_ADDR_VAR 0 2
56612: PUSH
56613: LD_INT 0
56615: ST_TO_ADDR
// end ;
56616: LD_VAR 0 2
56620: RET
// export function SortByClass ( units , class ) ; var un ; begin
56621: LD_INT 0
56623: PPUSH
56624: PPUSH
// if not units or not class then
56625: LD_VAR 0 1
56629: NOT
56630: PUSH
56631: LD_VAR 0 2
56635: NOT
56636: OR
56637: IFFALSE 56641
// exit ;
56639: GO 56736
// result := [ ] ;
56641: LD_ADDR_VAR 0 3
56645: PUSH
56646: EMPTY
56647: ST_TO_ADDR
// for un in units do
56648: LD_ADDR_VAR 0 4
56652: PUSH
56653: LD_VAR 0 1
56657: PUSH
56658: FOR_IN
56659: IFFALSE 56734
// if GetClass ( un ) = class then
56661: LD_VAR 0 4
56665: PPUSH
56666: CALL_OW 257
56670: PUSH
56671: LD_VAR 0 2
56675: EQUAL
56676: IFFALSE 56703
// result := Insert ( result , 1 , un ) else
56678: LD_ADDR_VAR 0 3
56682: PUSH
56683: LD_VAR 0 3
56687: PPUSH
56688: LD_INT 1
56690: PPUSH
56691: LD_VAR 0 4
56695: PPUSH
56696: CALL_OW 2
56700: ST_TO_ADDR
56701: GO 56732
// result := Replace ( result , result + 1 , un ) ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_VAR 0 3
56712: PPUSH
56713: LD_VAR 0 3
56717: PUSH
56718: LD_INT 1
56720: PLUS
56721: PPUSH
56722: LD_VAR 0 4
56726: PPUSH
56727: CALL_OW 1
56731: ST_TO_ADDR
56732: GO 56658
56734: POP
56735: POP
// end ;
56736: LD_VAR 0 3
56740: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56741: LD_INT 0
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
56749: PPUSH
// result := [ ] ;
56750: LD_ADDR_VAR 0 4
56754: PUSH
56755: EMPTY
56756: ST_TO_ADDR
// if x - r < 0 then
56757: LD_VAR 0 1
56761: PUSH
56762: LD_VAR 0 3
56766: MINUS
56767: PUSH
56768: LD_INT 0
56770: LESS
56771: IFFALSE 56783
// min_x := 0 else
56773: LD_ADDR_VAR 0 8
56777: PUSH
56778: LD_INT 0
56780: ST_TO_ADDR
56781: GO 56799
// min_x := x - r ;
56783: LD_ADDR_VAR 0 8
56787: PUSH
56788: LD_VAR 0 1
56792: PUSH
56793: LD_VAR 0 3
56797: MINUS
56798: ST_TO_ADDR
// if y - r < 0 then
56799: LD_VAR 0 2
56803: PUSH
56804: LD_VAR 0 3
56808: MINUS
56809: PUSH
56810: LD_INT 0
56812: LESS
56813: IFFALSE 56825
// min_y := 0 else
56815: LD_ADDR_VAR 0 7
56819: PUSH
56820: LD_INT 0
56822: ST_TO_ADDR
56823: GO 56841
// min_y := y - r ;
56825: LD_ADDR_VAR 0 7
56829: PUSH
56830: LD_VAR 0 2
56834: PUSH
56835: LD_VAR 0 3
56839: MINUS
56840: ST_TO_ADDR
// max_x := x + r ;
56841: LD_ADDR_VAR 0 9
56845: PUSH
56846: LD_VAR 0 1
56850: PUSH
56851: LD_VAR 0 3
56855: PLUS
56856: ST_TO_ADDR
// max_y := y + r ;
56857: LD_ADDR_VAR 0 10
56861: PUSH
56862: LD_VAR 0 2
56866: PUSH
56867: LD_VAR 0 3
56871: PLUS
56872: ST_TO_ADDR
// for _x = min_x to max_x do
56873: LD_ADDR_VAR 0 5
56877: PUSH
56878: DOUBLE
56879: LD_VAR 0 8
56883: DEC
56884: ST_TO_ADDR
56885: LD_VAR 0 9
56889: PUSH
56890: FOR_TO
56891: IFFALSE 56992
// for _y = min_y to max_y do
56893: LD_ADDR_VAR 0 6
56897: PUSH
56898: DOUBLE
56899: LD_VAR 0 7
56903: DEC
56904: ST_TO_ADDR
56905: LD_VAR 0 10
56909: PUSH
56910: FOR_TO
56911: IFFALSE 56988
// begin if not ValidHex ( _x , _y ) then
56913: LD_VAR 0 5
56917: PPUSH
56918: LD_VAR 0 6
56922: PPUSH
56923: CALL_OW 488
56927: NOT
56928: IFFALSE 56932
// continue ;
56930: GO 56910
// if GetResourceTypeXY ( _x , _y ) then
56932: LD_VAR 0 5
56936: PPUSH
56937: LD_VAR 0 6
56941: PPUSH
56942: CALL_OW 283
56946: IFFALSE 56986
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56948: LD_ADDR_VAR 0 4
56952: PUSH
56953: LD_VAR 0 4
56957: PPUSH
56958: LD_VAR 0 4
56962: PUSH
56963: LD_INT 1
56965: PLUS
56966: PPUSH
56967: LD_VAR 0 5
56971: PUSH
56972: LD_VAR 0 6
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PPUSH
56981: CALL_OW 1
56985: ST_TO_ADDR
// end ;
56986: GO 56910
56988: POP
56989: POP
56990: GO 56890
56992: POP
56993: POP
// end ;
56994: LD_VAR 0 4
56998: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56999: LD_INT 0
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
// if not units then
57009: LD_VAR 0 1
57013: NOT
57014: IFFALSE 57018
// exit ;
57016: GO 57542
// result := UnitFilter ( units , [ f_ok ] ) ;
57018: LD_ADDR_VAR 0 3
57022: PUSH
57023: LD_VAR 0 1
57027: PPUSH
57028: LD_INT 50
57030: PUSH
57031: EMPTY
57032: LIST
57033: PPUSH
57034: CALL_OW 72
57038: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57039: LD_ADDR_VAR 0 8
57043: PUSH
57044: LD_VAR 0 1
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: PPUSH
57053: CALL_OW 255
57057: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57058: LD_ADDR_VAR 0 10
57062: PUSH
57063: LD_INT 29
57065: PUSH
57066: LD_INT 91
57068: PUSH
57069: LD_INT 49
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: ST_TO_ADDR
// if not result then
57077: LD_VAR 0 3
57081: NOT
57082: IFFALSE 57086
// exit ;
57084: GO 57542
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57086: LD_ADDR_VAR 0 5
57090: PUSH
57091: LD_INT 81
57093: PUSH
57094: LD_VAR 0 8
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PPUSH
57103: CALL_OW 69
57107: ST_TO_ADDR
// for i in result do
57108: LD_ADDR_VAR 0 4
57112: PUSH
57113: LD_VAR 0 3
57117: PUSH
57118: FOR_IN
57119: IFFALSE 57540
// begin tag := GetTag ( i ) + 1 ;
57121: LD_ADDR_VAR 0 9
57125: PUSH
57126: LD_VAR 0 4
57130: PPUSH
57131: CALL_OW 110
57135: PUSH
57136: LD_INT 1
57138: PLUS
57139: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57140: LD_ADDR_VAR 0 7
57144: PUSH
57145: LD_VAR 0 4
57149: PPUSH
57150: CALL_OW 250
57154: PPUSH
57155: LD_VAR 0 4
57159: PPUSH
57160: CALL_OW 251
57164: PPUSH
57165: LD_INT 6
57167: PPUSH
57168: CALL 56741 0 3
57172: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57173: LD_VAR 0 4
57177: PPUSH
57178: CALL_OW 247
57182: PUSH
57183: LD_INT 2
57185: EQUAL
57186: PUSH
57187: LD_VAR 0 7
57191: AND
57192: PUSH
57193: LD_VAR 0 4
57197: PPUSH
57198: CALL_OW 264
57202: PUSH
57203: LD_VAR 0 10
57207: IN
57208: NOT
57209: AND
57210: IFFALSE 57249
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57212: LD_VAR 0 4
57216: PPUSH
57217: LD_VAR 0 7
57221: PUSH
57222: LD_INT 1
57224: ARRAY
57225: PUSH
57226: LD_INT 1
57228: ARRAY
57229: PPUSH
57230: LD_VAR 0 7
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: PUSH
57239: LD_INT 2
57241: ARRAY
57242: PPUSH
57243: CALL_OW 116
57247: GO 57538
// if path > tag then
57249: LD_VAR 0 2
57253: PUSH
57254: LD_VAR 0 9
57258: GREATER
57259: IFFALSE 57467
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57261: LD_ADDR_VAR 0 6
57265: PUSH
57266: LD_VAR 0 5
57270: PPUSH
57271: LD_INT 91
57273: PUSH
57274: LD_VAR 0 4
57278: PUSH
57279: LD_INT 8
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: PPUSH
57287: CALL_OW 72
57291: ST_TO_ADDR
// if nearEnemy then
57292: LD_VAR 0 6
57296: IFFALSE 57365
// begin if GetWeapon ( i ) = ru_time_lapser then
57298: LD_VAR 0 4
57302: PPUSH
57303: CALL_OW 264
57307: PUSH
57308: LD_INT 49
57310: EQUAL
57311: IFFALSE 57339
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57313: LD_VAR 0 4
57317: PPUSH
57318: LD_VAR 0 6
57322: PPUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: CALL_OW 74
57332: PPUSH
57333: CALL_OW 112
57337: GO 57363
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57339: LD_VAR 0 4
57343: PPUSH
57344: LD_VAR 0 6
57348: PPUSH
57349: LD_VAR 0 4
57353: PPUSH
57354: CALL_OW 74
57358: PPUSH
57359: CALL_OW 115
// end else
57363: GO 57465
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57365: LD_VAR 0 4
57369: PPUSH
57370: LD_VAR 0 2
57374: PUSH
57375: LD_VAR 0 9
57379: ARRAY
57380: PUSH
57381: LD_INT 1
57383: ARRAY
57384: PPUSH
57385: LD_VAR 0 2
57389: PUSH
57390: LD_VAR 0 9
57394: ARRAY
57395: PUSH
57396: LD_INT 2
57398: ARRAY
57399: PPUSH
57400: CALL_OW 297
57404: PUSH
57405: LD_INT 6
57407: GREATER
57408: IFFALSE 57451
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57410: LD_VAR 0 4
57414: PPUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_VAR 0 9
57424: ARRAY
57425: PUSH
57426: LD_INT 1
57428: ARRAY
57429: PPUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_VAR 0 9
57439: ARRAY
57440: PUSH
57441: LD_INT 2
57443: ARRAY
57444: PPUSH
57445: CALL_OW 114
57449: GO 57465
// SetTag ( i , tag ) ;
57451: LD_VAR 0 4
57455: PPUSH
57456: LD_VAR 0 9
57460: PPUSH
57461: CALL_OW 109
// end else
57465: GO 57538
// if enemy then
57467: LD_VAR 0 5
57471: IFFALSE 57538
// begin if GetWeapon ( i ) = ru_time_lapser then
57473: LD_VAR 0 4
57477: PPUSH
57478: CALL_OW 264
57482: PUSH
57483: LD_INT 49
57485: EQUAL
57486: IFFALSE 57514
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57488: LD_VAR 0 4
57492: PPUSH
57493: LD_VAR 0 5
57497: PPUSH
57498: LD_VAR 0 4
57502: PPUSH
57503: CALL_OW 74
57507: PPUSH
57508: CALL_OW 112
57512: GO 57538
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57514: LD_VAR 0 4
57518: PPUSH
57519: LD_VAR 0 5
57523: PPUSH
57524: LD_VAR 0 4
57528: PPUSH
57529: CALL_OW 74
57533: PPUSH
57534: CALL_OW 115
// end ; end ;
57538: GO 57118
57540: POP
57541: POP
// end ;
57542: LD_VAR 0 3
57546: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57547: LD_INT 0
57549: PPUSH
57550: PPUSH
57551: PPUSH
// if not unit or IsInUnit ( unit ) then
57552: LD_VAR 0 1
57556: NOT
57557: PUSH
57558: LD_VAR 0 1
57562: PPUSH
57563: CALL_OW 310
57567: OR
57568: IFFALSE 57572
// exit ;
57570: GO 57663
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57572: LD_ADDR_VAR 0 4
57576: PUSH
57577: LD_VAR 0 1
57581: PPUSH
57582: CALL_OW 250
57586: PPUSH
57587: LD_VAR 0 2
57591: PPUSH
57592: LD_INT 1
57594: PPUSH
57595: CALL_OW 272
57599: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57600: LD_ADDR_VAR 0 5
57604: PUSH
57605: LD_VAR 0 1
57609: PPUSH
57610: CALL_OW 251
57614: PPUSH
57615: LD_VAR 0 2
57619: PPUSH
57620: LD_INT 1
57622: PPUSH
57623: CALL_OW 273
57627: ST_TO_ADDR
// if ValidHex ( x , y ) then
57628: LD_VAR 0 4
57632: PPUSH
57633: LD_VAR 0 5
57637: PPUSH
57638: CALL_OW 488
57642: IFFALSE 57663
// ComTurnXY ( unit , x , y ) ;
57644: LD_VAR 0 1
57648: PPUSH
57649: LD_VAR 0 4
57653: PPUSH
57654: LD_VAR 0 5
57658: PPUSH
57659: CALL_OW 118
// end ;
57663: LD_VAR 0 3
57667: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57668: LD_INT 0
57670: PPUSH
57671: PPUSH
// result := false ;
57672: LD_ADDR_VAR 0 3
57676: PUSH
57677: LD_INT 0
57679: ST_TO_ADDR
// if not units then
57680: LD_VAR 0 2
57684: NOT
57685: IFFALSE 57689
// exit ;
57687: GO 57734
// for i in units do
57689: LD_ADDR_VAR 0 4
57693: PUSH
57694: LD_VAR 0 2
57698: PUSH
57699: FOR_IN
57700: IFFALSE 57732
// if See ( side , i ) then
57702: LD_VAR 0 1
57706: PPUSH
57707: LD_VAR 0 4
57711: PPUSH
57712: CALL_OW 292
57716: IFFALSE 57730
// begin result := true ;
57718: LD_ADDR_VAR 0 3
57722: PUSH
57723: LD_INT 1
57725: ST_TO_ADDR
// exit ;
57726: POP
57727: POP
57728: GO 57734
// end ;
57730: GO 57699
57732: POP
57733: POP
// end ;
57734: LD_VAR 0 3
57738: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57739: LD_INT 0
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
// if not unit or not points then
57745: LD_VAR 0 1
57749: NOT
57750: PUSH
57751: LD_VAR 0 2
57755: NOT
57756: OR
57757: IFFALSE 57761
// exit ;
57759: GO 57851
// dist := 99999 ;
57761: LD_ADDR_VAR 0 5
57765: PUSH
57766: LD_INT 99999
57768: ST_TO_ADDR
// for i in points do
57769: LD_ADDR_VAR 0 4
57773: PUSH
57774: LD_VAR 0 2
57778: PUSH
57779: FOR_IN
57780: IFFALSE 57849
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57782: LD_ADDR_VAR 0 6
57786: PUSH
57787: LD_VAR 0 1
57791: PPUSH
57792: LD_VAR 0 4
57796: PUSH
57797: LD_INT 1
57799: ARRAY
57800: PPUSH
57801: LD_VAR 0 4
57805: PUSH
57806: LD_INT 2
57808: ARRAY
57809: PPUSH
57810: CALL_OW 297
57814: ST_TO_ADDR
// if tmpDist < dist then
57815: LD_VAR 0 6
57819: PUSH
57820: LD_VAR 0 5
57824: LESS
57825: IFFALSE 57847
// begin result := i ;
57827: LD_ADDR_VAR 0 3
57831: PUSH
57832: LD_VAR 0 4
57836: ST_TO_ADDR
// dist := tmpDist ;
57837: LD_ADDR_VAR 0 5
57841: PUSH
57842: LD_VAR 0 6
57846: ST_TO_ADDR
// end ; end ;
57847: GO 57779
57849: POP
57850: POP
// end ;
57851: LD_VAR 0 3
57855: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57856: LD_INT 0
57858: PPUSH
// uc_side := side ;
57859: LD_ADDR_OWVAR 20
57863: PUSH
57864: LD_VAR 0 1
57868: ST_TO_ADDR
// uc_nation := 3 ;
57869: LD_ADDR_OWVAR 21
57873: PUSH
57874: LD_INT 3
57876: ST_TO_ADDR
// vc_chassis := 25 ;
57877: LD_ADDR_OWVAR 37
57881: PUSH
57882: LD_INT 25
57884: ST_TO_ADDR
// vc_engine := engine_siberite ;
57885: LD_ADDR_OWVAR 39
57889: PUSH
57890: LD_INT 3
57892: ST_TO_ADDR
// vc_control := control_computer ;
57893: LD_ADDR_OWVAR 38
57897: PUSH
57898: LD_INT 3
57900: ST_TO_ADDR
// vc_weapon := 59 ;
57901: LD_ADDR_OWVAR 40
57905: PUSH
57906: LD_INT 59
57908: ST_TO_ADDR
// result := CreateVehicle ;
57909: LD_ADDR_VAR 0 5
57913: PUSH
57914: CALL_OW 45
57918: ST_TO_ADDR
// SetDir ( result , d ) ;
57919: LD_VAR 0 5
57923: PPUSH
57924: LD_VAR 0 4
57928: PPUSH
57929: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57933: LD_VAR 0 5
57937: PPUSH
57938: LD_VAR 0 2
57942: PPUSH
57943: LD_VAR 0 3
57947: PPUSH
57948: LD_INT 0
57950: PPUSH
57951: CALL_OW 48
// end ;
57955: LD_VAR 0 5
57959: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57960: LD_INT 0
57962: PPUSH
57963: PPUSH
57964: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57965: LD_ADDR_VAR 0 2
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57988: LD_VAR 0 1
57992: NOT
57993: PUSH
57994: LD_VAR 0 1
57998: PPUSH
57999: CALL_OW 264
58003: PUSH
58004: LD_INT 12
58006: PUSH
58007: LD_INT 51
58009: PUSH
58010: LD_INT 32
58012: PUSH
58013: LD_INT 89
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: IN
58022: NOT
58023: OR
58024: IFFALSE 58028
// exit ;
58026: GO 58126
// for i := 1 to 3 do
58028: LD_ADDR_VAR 0 3
58032: PUSH
58033: DOUBLE
58034: LD_INT 1
58036: DEC
58037: ST_TO_ADDR
58038: LD_INT 3
58040: PUSH
58041: FOR_TO
58042: IFFALSE 58124
// begin tmp := GetCargo ( cargo , i ) ;
58044: LD_ADDR_VAR 0 4
58048: PUSH
58049: LD_VAR 0 1
58053: PPUSH
58054: LD_VAR 0 3
58058: PPUSH
58059: CALL_OW 289
58063: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58064: LD_ADDR_VAR 0 2
58068: PUSH
58069: LD_VAR 0 2
58073: PPUSH
58074: LD_VAR 0 3
58078: PPUSH
58079: LD_VAR 0 4
58083: PPUSH
58084: CALL_OW 1
58088: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58089: LD_ADDR_VAR 0 2
58093: PUSH
58094: LD_VAR 0 2
58098: PPUSH
58099: LD_INT 4
58101: PPUSH
58102: LD_VAR 0 2
58106: PUSH
58107: LD_INT 4
58109: ARRAY
58110: PUSH
58111: LD_VAR 0 4
58115: PLUS
58116: PPUSH
58117: CALL_OW 1
58121: ST_TO_ADDR
// end ;
58122: GO 58041
58124: POP
58125: POP
// end ;
58126: LD_VAR 0 2
58130: RET
// export function Length ( array ) ; begin
58131: LD_INT 0
58133: PPUSH
// result := array + 0 ;
58134: LD_ADDR_VAR 0 2
58138: PUSH
58139: LD_VAR 0 1
58143: PUSH
58144: LD_INT 0
58146: PLUS
58147: ST_TO_ADDR
// end ;
58148: LD_VAR 0 2
58152: RET
// export function PrepareArray ( array ) ; begin
58153: LD_INT 0
58155: PPUSH
// result := array diff 0 ;
58156: LD_ADDR_VAR 0 2
58160: PUSH
58161: LD_VAR 0 1
58165: PUSH
58166: LD_INT 0
58168: DIFF
58169: ST_TO_ADDR
// if not result [ 1 ] then
58170: LD_VAR 0 2
58174: PUSH
58175: LD_INT 1
58177: ARRAY
58178: NOT
58179: IFFALSE 58199
// result := Delete ( result , 1 ) ;
58181: LD_ADDR_VAR 0 2
58185: PUSH
58186: LD_VAR 0 2
58190: PPUSH
58191: LD_INT 1
58193: PPUSH
58194: CALL_OW 3
58198: ST_TO_ADDR
// end ;
58199: LD_VAR 0 2
58203: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58204: LD_INT 0
58206: PPUSH
58207: PPUSH
58208: PPUSH
58209: PPUSH
// sibRocketRange := 25 ;
58210: LD_ADDR_VAR 0 6
58214: PUSH
58215: LD_INT 25
58217: ST_TO_ADDR
// result := false ;
58218: LD_ADDR_VAR 0 4
58222: PUSH
58223: LD_INT 0
58225: ST_TO_ADDR
// for i := 0 to 5 do
58226: LD_ADDR_VAR 0 5
58230: PUSH
58231: DOUBLE
58232: LD_INT 0
58234: DEC
58235: ST_TO_ADDR
58236: LD_INT 5
58238: PUSH
58239: FOR_TO
58240: IFFALSE 58307
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58242: LD_VAR 0 1
58246: PPUSH
58247: LD_VAR 0 5
58251: PPUSH
58252: LD_VAR 0 6
58256: PPUSH
58257: CALL_OW 272
58261: PPUSH
58262: LD_VAR 0 2
58266: PPUSH
58267: LD_VAR 0 5
58271: PPUSH
58272: LD_VAR 0 6
58276: PPUSH
58277: CALL_OW 273
58281: PPUSH
58282: LD_VAR 0 3
58286: PPUSH
58287: CALL_OW 309
58291: IFFALSE 58305
// begin result := true ;
58293: LD_ADDR_VAR 0 4
58297: PUSH
58298: LD_INT 1
58300: ST_TO_ADDR
// exit ;
58301: POP
58302: POP
58303: GO 58309
// end ;
58305: GO 58239
58307: POP
58308: POP
// end ;
58309: LD_VAR 0 4
58313: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58314: LD_INT 0
58316: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58317: LD_VAR 0 1
58321: PPUSH
58322: LD_VAR 0 2
58326: PPUSH
58327: LD_INT 0
58329: PPUSH
58330: LD_INT 0
58332: PPUSH
58333: LD_INT 1
58335: PPUSH
58336: LD_INT 0
58338: PPUSH
58339: CALL_OW 587
// end ; end_of_file
58343: LD_VAR 0 3
58347: RET
// every 0 0$1 do
58348: GO 58350
58350: DISABLE
// begin enable ;
58351: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58352: LD_STRING updateTimer(
58354: PUSH
58355: LD_OWVAR 1
58359: STR
58360: PUSH
58361: LD_STRING );
58363: STR
58364: PPUSH
58365: CALL_OW 559
// end ;
58369: END
// export function SOS_MapStart ( ) ; begin
58370: LD_INT 0
58372: PPUSH
// if streamModeActive then
58373: LD_EXP 50
58377: IFFALSE 58386
// DefineStreamItems ( true ) ;
58379: LD_INT 1
58381: PPUSH
58382: CALL 60190 0 1
// UpdateLuaVariables ( ) ;
58386: CALL 58403 0 0
// UpdateFactoryWaypoints ( ) ;
58390: CALL 73051 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58394: CALL 73308 0 0
// end ;
58398: LD_VAR 0 1
58402: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
58403: LD_INT 0
58405: PPUSH
// if not globalGameSaveCounter then
58406: LD_EXP 49
58410: NOT
58411: IFFALSE 58422
// ToLua ( setGameSaveCounter(0) ) else
58413: LD_STRING setGameSaveCounter(0)
58415: PPUSH
58416: CALL_OW 559
58420: GO 58454
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58422: LD_ADDR_EXP 49
58426: PUSH
58427: LD_EXP 49
58431: PPUSH
58432: CALL 55756 0 1
58436: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58437: LD_STRING setGameSaveCounter(
58439: PUSH
58440: LD_EXP 49
58444: STR
58445: PUSH
58446: LD_STRING )
58448: STR
58449: PPUSH
58450: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58454: LD_STRING setGameDifficulty(
58456: PUSH
58457: LD_OWVAR 67
58461: STR
58462: PUSH
58463: LD_STRING )
58465: STR
58466: PPUSH
58467: CALL_OW 559
// end ;
58471: LD_VAR 0 1
58475: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58476: LD_INT 0
58478: PPUSH
// if p2 = stream_mode then
58479: LD_VAR 0 2
58483: PUSH
58484: LD_INT 100
58486: EQUAL
58487: IFFALSE 59490
// begin if not StreamModeActive then
58489: LD_EXP 50
58493: NOT
58494: IFFALSE 58504
// StreamModeActive := true ;
58496: LD_ADDR_EXP 50
58500: PUSH
58501: LD_INT 1
58503: ST_TO_ADDR
// if p3 = 0 then
58504: LD_VAR 0 3
58508: PUSH
58509: LD_INT 0
58511: EQUAL
58512: IFFALSE 58518
// InitStreamMode ;
58514: CALL 59726 0 0
// if p3 = 1 then
58518: LD_VAR 0 3
58522: PUSH
58523: LD_INT 1
58525: EQUAL
58526: IFFALSE 58536
// sRocket := true ;
58528: LD_ADDR_EXP 55
58532: PUSH
58533: LD_INT 1
58535: ST_TO_ADDR
// if p3 = 2 then
58536: LD_VAR 0 3
58540: PUSH
58541: LD_INT 2
58543: EQUAL
58544: IFFALSE 58554
// sSpeed := true ;
58546: LD_ADDR_EXP 54
58550: PUSH
58551: LD_INT 1
58553: ST_TO_ADDR
// if p3 = 3 then
58554: LD_VAR 0 3
58558: PUSH
58559: LD_INT 3
58561: EQUAL
58562: IFFALSE 58572
// sEngine := true ;
58564: LD_ADDR_EXP 56
58568: PUSH
58569: LD_INT 1
58571: ST_TO_ADDR
// if p3 = 4 then
58572: LD_VAR 0 3
58576: PUSH
58577: LD_INT 4
58579: EQUAL
58580: IFFALSE 58590
// sSpec := true ;
58582: LD_ADDR_EXP 53
58586: PUSH
58587: LD_INT 1
58589: ST_TO_ADDR
// if p3 = 5 then
58590: LD_VAR 0 3
58594: PUSH
58595: LD_INT 5
58597: EQUAL
58598: IFFALSE 58608
// sLevel := true ;
58600: LD_ADDR_EXP 57
58604: PUSH
58605: LD_INT 1
58607: ST_TO_ADDR
// if p3 = 6 then
58608: LD_VAR 0 3
58612: PUSH
58613: LD_INT 6
58615: EQUAL
58616: IFFALSE 58626
// sArmoury := true ;
58618: LD_ADDR_EXP 58
58622: PUSH
58623: LD_INT 1
58625: ST_TO_ADDR
// if p3 = 7 then
58626: LD_VAR 0 3
58630: PUSH
58631: LD_INT 7
58633: EQUAL
58634: IFFALSE 58644
// sRadar := true ;
58636: LD_ADDR_EXP 59
58640: PUSH
58641: LD_INT 1
58643: ST_TO_ADDR
// if p3 = 8 then
58644: LD_VAR 0 3
58648: PUSH
58649: LD_INT 8
58651: EQUAL
58652: IFFALSE 58662
// sBunker := true ;
58654: LD_ADDR_EXP 60
58658: PUSH
58659: LD_INT 1
58661: ST_TO_ADDR
// if p3 = 9 then
58662: LD_VAR 0 3
58666: PUSH
58667: LD_INT 9
58669: EQUAL
58670: IFFALSE 58680
// sHack := true ;
58672: LD_ADDR_EXP 61
58676: PUSH
58677: LD_INT 1
58679: ST_TO_ADDR
// if p3 = 10 then
58680: LD_VAR 0 3
58684: PUSH
58685: LD_INT 10
58687: EQUAL
58688: IFFALSE 58698
// sFire := true ;
58690: LD_ADDR_EXP 62
58694: PUSH
58695: LD_INT 1
58697: ST_TO_ADDR
// if p3 = 11 then
58698: LD_VAR 0 3
58702: PUSH
58703: LD_INT 11
58705: EQUAL
58706: IFFALSE 58716
// sRefresh := true ;
58708: LD_ADDR_EXP 63
58712: PUSH
58713: LD_INT 1
58715: ST_TO_ADDR
// if p3 = 12 then
58716: LD_VAR 0 3
58720: PUSH
58721: LD_INT 12
58723: EQUAL
58724: IFFALSE 58734
// sExp := true ;
58726: LD_ADDR_EXP 64
58730: PUSH
58731: LD_INT 1
58733: ST_TO_ADDR
// if p3 = 13 then
58734: LD_VAR 0 3
58738: PUSH
58739: LD_INT 13
58741: EQUAL
58742: IFFALSE 58752
// sDepot := true ;
58744: LD_ADDR_EXP 65
58748: PUSH
58749: LD_INT 1
58751: ST_TO_ADDR
// if p3 = 14 then
58752: LD_VAR 0 3
58756: PUSH
58757: LD_INT 14
58759: EQUAL
58760: IFFALSE 58770
// sFlag := true ;
58762: LD_ADDR_EXP 66
58766: PUSH
58767: LD_INT 1
58769: ST_TO_ADDR
// if p3 = 15 then
58770: LD_VAR 0 3
58774: PUSH
58775: LD_INT 15
58777: EQUAL
58778: IFFALSE 58788
// sKamikadze := true ;
58780: LD_ADDR_EXP 74
58784: PUSH
58785: LD_INT 1
58787: ST_TO_ADDR
// if p3 = 16 then
58788: LD_VAR 0 3
58792: PUSH
58793: LD_INT 16
58795: EQUAL
58796: IFFALSE 58806
// sTroll := true ;
58798: LD_ADDR_EXP 75
58802: PUSH
58803: LD_INT 1
58805: ST_TO_ADDR
// if p3 = 17 then
58806: LD_VAR 0 3
58810: PUSH
58811: LD_INT 17
58813: EQUAL
58814: IFFALSE 58824
// sSlow := true ;
58816: LD_ADDR_EXP 76
58820: PUSH
58821: LD_INT 1
58823: ST_TO_ADDR
// if p3 = 18 then
58824: LD_VAR 0 3
58828: PUSH
58829: LD_INT 18
58831: EQUAL
58832: IFFALSE 58842
// sLack := true ;
58834: LD_ADDR_EXP 77
58838: PUSH
58839: LD_INT 1
58841: ST_TO_ADDR
// if p3 = 19 then
58842: LD_VAR 0 3
58846: PUSH
58847: LD_INT 19
58849: EQUAL
58850: IFFALSE 58860
// sTank := true ;
58852: LD_ADDR_EXP 79
58856: PUSH
58857: LD_INT 1
58859: ST_TO_ADDR
// if p3 = 20 then
58860: LD_VAR 0 3
58864: PUSH
58865: LD_INT 20
58867: EQUAL
58868: IFFALSE 58878
// sRemote := true ;
58870: LD_ADDR_EXP 80
58874: PUSH
58875: LD_INT 1
58877: ST_TO_ADDR
// if p3 = 21 then
58878: LD_VAR 0 3
58882: PUSH
58883: LD_INT 21
58885: EQUAL
58886: IFFALSE 58896
// sPowell := true ;
58888: LD_ADDR_EXP 81
58892: PUSH
58893: LD_INT 1
58895: ST_TO_ADDR
// if p3 = 22 then
58896: LD_VAR 0 3
58900: PUSH
58901: LD_INT 22
58903: EQUAL
58904: IFFALSE 58914
// sTeleport := true ;
58906: LD_ADDR_EXP 84
58910: PUSH
58911: LD_INT 1
58913: ST_TO_ADDR
// if p3 = 23 then
58914: LD_VAR 0 3
58918: PUSH
58919: LD_INT 23
58921: EQUAL
58922: IFFALSE 58932
// sOilTower := true ;
58924: LD_ADDR_EXP 86
58928: PUSH
58929: LD_INT 1
58931: ST_TO_ADDR
// if p3 = 24 then
58932: LD_VAR 0 3
58936: PUSH
58937: LD_INT 24
58939: EQUAL
58940: IFFALSE 58950
// sShovel := true ;
58942: LD_ADDR_EXP 87
58946: PUSH
58947: LD_INT 1
58949: ST_TO_ADDR
// if p3 = 25 then
58950: LD_VAR 0 3
58954: PUSH
58955: LD_INT 25
58957: EQUAL
58958: IFFALSE 58968
// sSheik := true ;
58960: LD_ADDR_EXP 88
58964: PUSH
58965: LD_INT 1
58967: ST_TO_ADDR
// if p3 = 26 then
58968: LD_VAR 0 3
58972: PUSH
58973: LD_INT 26
58975: EQUAL
58976: IFFALSE 58986
// sEarthquake := true ;
58978: LD_ADDR_EXP 90
58982: PUSH
58983: LD_INT 1
58985: ST_TO_ADDR
// if p3 = 27 then
58986: LD_VAR 0 3
58990: PUSH
58991: LD_INT 27
58993: EQUAL
58994: IFFALSE 59004
// sAI := true ;
58996: LD_ADDR_EXP 91
59000: PUSH
59001: LD_INT 1
59003: ST_TO_ADDR
// if p3 = 28 then
59004: LD_VAR 0 3
59008: PUSH
59009: LD_INT 28
59011: EQUAL
59012: IFFALSE 59022
// sCargo := true ;
59014: LD_ADDR_EXP 94
59018: PUSH
59019: LD_INT 1
59021: ST_TO_ADDR
// if p3 = 29 then
59022: LD_VAR 0 3
59026: PUSH
59027: LD_INT 29
59029: EQUAL
59030: IFFALSE 59040
// sDLaser := true ;
59032: LD_ADDR_EXP 95
59036: PUSH
59037: LD_INT 1
59039: ST_TO_ADDR
// if p3 = 30 then
59040: LD_VAR 0 3
59044: PUSH
59045: LD_INT 30
59047: EQUAL
59048: IFFALSE 59058
// sExchange := true ;
59050: LD_ADDR_EXP 96
59054: PUSH
59055: LD_INT 1
59057: ST_TO_ADDR
// if p3 = 31 then
59058: LD_VAR 0 3
59062: PUSH
59063: LD_INT 31
59065: EQUAL
59066: IFFALSE 59076
// sFac := true ;
59068: LD_ADDR_EXP 97
59072: PUSH
59073: LD_INT 1
59075: ST_TO_ADDR
// if p3 = 32 then
59076: LD_VAR 0 3
59080: PUSH
59081: LD_INT 32
59083: EQUAL
59084: IFFALSE 59094
// sPower := true ;
59086: LD_ADDR_EXP 98
59090: PUSH
59091: LD_INT 1
59093: ST_TO_ADDR
// if p3 = 33 then
59094: LD_VAR 0 3
59098: PUSH
59099: LD_INT 33
59101: EQUAL
59102: IFFALSE 59112
// sRandom := true ;
59104: LD_ADDR_EXP 99
59108: PUSH
59109: LD_INT 1
59111: ST_TO_ADDR
// if p3 = 34 then
59112: LD_VAR 0 3
59116: PUSH
59117: LD_INT 34
59119: EQUAL
59120: IFFALSE 59130
// sShield := true ;
59122: LD_ADDR_EXP 100
59126: PUSH
59127: LD_INT 1
59129: ST_TO_ADDR
// if p3 = 35 then
59130: LD_VAR 0 3
59134: PUSH
59135: LD_INT 35
59137: EQUAL
59138: IFFALSE 59148
// sTime := true ;
59140: LD_ADDR_EXP 101
59144: PUSH
59145: LD_INT 1
59147: ST_TO_ADDR
// if p3 = 36 then
59148: LD_VAR 0 3
59152: PUSH
59153: LD_INT 36
59155: EQUAL
59156: IFFALSE 59166
// sTools := true ;
59158: LD_ADDR_EXP 102
59162: PUSH
59163: LD_INT 1
59165: ST_TO_ADDR
// if p3 = 101 then
59166: LD_VAR 0 3
59170: PUSH
59171: LD_INT 101
59173: EQUAL
59174: IFFALSE 59184
// sSold := true ;
59176: LD_ADDR_EXP 67
59180: PUSH
59181: LD_INT 1
59183: ST_TO_ADDR
// if p3 = 102 then
59184: LD_VAR 0 3
59188: PUSH
59189: LD_INT 102
59191: EQUAL
59192: IFFALSE 59202
// sDiff := true ;
59194: LD_ADDR_EXP 68
59198: PUSH
59199: LD_INT 1
59201: ST_TO_ADDR
// if p3 = 103 then
59202: LD_VAR 0 3
59206: PUSH
59207: LD_INT 103
59209: EQUAL
59210: IFFALSE 59220
// sFog := true ;
59212: LD_ADDR_EXP 71
59216: PUSH
59217: LD_INT 1
59219: ST_TO_ADDR
// if p3 = 104 then
59220: LD_VAR 0 3
59224: PUSH
59225: LD_INT 104
59227: EQUAL
59228: IFFALSE 59238
// sReset := true ;
59230: LD_ADDR_EXP 72
59234: PUSH
59235: LD_INT 1
59237: ST_TO_ADDR
// if p3 = 105 then
59238: LD_VAR 0 3
59242: PUSH
59243: LD_INT 105
59245: EQUAL
59246: IFFALSE 59256
// sSun := true ;
59248: LD_ADDR_EXP 73
59252: PUSH
59253: LD_INT 1
59255: ST_TO_ADDR
// if p3 = 106 then
59256: LD_VAR 0 3
59260: PUSH
59261: LD_INT 106
59263: EQUAL
59264: IFFALSE 59274
// sTiger := true ;
59266: LD_ADDR_EXP 69
59270: PUSH
59271: LD_INT 1
59273: ST_TO_ADDR
// if p3 = 107 then
59274: LD_VAR 0 3
59278: PUSH
59279: LD_INT 107
59281: EQUAL
59282: IFFALSE 59292
// sBomb := true ;
59284: LD_ADDR_EXP 70
59288: PUSH
59289: LD_INT 1
59291: ST_TO_ADDR
// if p3 = 108 then
59292: LD_VAR 0 3
59296: PUSH
59297: LD_INT 108
59299: EQUAL
59300: IFFALSE 59310
// sWound := true ;
59302: LD_ADDR_EXP 78
59306: PUSH
59307: LD_INT 1
59309: ST_TO_ADDR
// if p3 = 109 then
59310: LD_VAR 0 3
59314: PUSH
59315: LD_INT 109
59317: EQUAL
59318: IFFALSE 59328
// sBetray := true ;
59320: LD_ADDR_EXP 82
59324: PUSH
59325: LD_INT 1
59327: ST_TO_ADDR
// if p3 = 110 then
59328: LD_VAR 0 3
59332: PUSH
59333: LD_INT 110
59335: EQUAL
59336: IFFALSE 59346
// sContamin := true ;
59338: LD_ADDR_EXP 83
59342: PUSH
59343: LD_INT 1
59345: ST_TO_ADDR
// if p3 = 111 then
59346: LD_VAR 0 3
59350: PUSH
59351: LD_INT 111
59353: EQUAL
59354: IFFALSE 59364
// sOil := true ;
59356: LD_ADDR_EXP 85
59360: PUSH
59361: LD_INT 1
59363: ST_TO_ADDR
// if p3 = 112 then
59364: LD_VAR 0 3
59368: PUSH
59369: LD_INT 112
59371: EQUAL
59372: IFFALSE 59382
// sStu := true ;
59374: LD_ADDR_EXP 89
59378: PUSH
59379: LD_INT 1
59381: ST_TO_ADDR
// if p3 = 113 then
59382: LD_VAR 0 3
59386: PUSH
59387: LD_INT 113
59389: EQUAL
59390: IFFALSE 59400
// sBazooka := true ;
59392: LD_ADDR_EXP 92
59396: PUSH
59397: LD_INT 1
59399: ST_TO_ADDR
// if p3 = 114 then
59400: LD_VAR 0 3
59404: PUSH
59405: LD_INT 114
59407: EQUAL
59408: IFFALSE 59418
// sMortar := true ;
59410: LD_ADDR_EXP 93
59414: PUSH
59415: LD_INT 1
59417: ST_TO_ADDR
// if p3 = 115 then
59418: LD_VAR 0 3
59422: PUSH
59423: LD_INT 115
59425: EQUAL
59426: IFFALSE 59436
// sRanger := true ;
59428: LD_ADDR_EXP 103
59432: PUSH
59433: LD_INT 1
59435: ST_TO_ADDR
// if p3 = 116 then
59436: LD_VAR 0 3
59440: PUSH
59441: LD_INT 116
59443: EQUAL
59444: IFFALSE 59454
// sComputer := true ;
59446: LD_ADDR_EXP 104
59450: PUSH
59451: LD_INT 1
59453: ST_TO_ADDR
// if p3 = 117 then
59454: LD_VAR 0 3
59458: PUSH
59459: LD_INT 117
59461: EQUAL
59462: IFFALSE 59472
// s30 := true ;
59464: LD_ADDR_EXP 105
59468: PUSH
59469: LD_INT 1
59471: ST_TO_ADDR
// if p3 = 118 then
59472: LD_VAR 0 3
59476: PUSH
59477: LD_INT 118
59479: EQUAL
59480: IFFALSE 59490
// s60 := true ;
59482: LD_ADDR_EXP 106
59486: PUSH
59487: LD_INT 1
59489: ST_TO_ADDR
// end ; if p2 = hack_mode then
59490: LD_VAR 0 2
59494: PUSH
59495: LD_INT 101
59497: EQUAL
59498: IFFALSE 59626
// begin case p3 of 1 :
59500: LD_VAR 0 3
59504: PUSH
59505: LD_INT 1
59507: DOUBLE
59508: EQUAL
59509: IFTRUE 59513
59511: GO 59520
59513: POP
// hHackUnlimitedResources ; 2 :
59514: CALL 71797 0 0
59518: GO 59626
59520: LD_INT 2
59522: DOUBLE
59523: EQUAL
59524: IFTRUE 59528
59526: GO 59535
59528: POP
// hHackSetLevel10 ; 3 :
59529: CALL 71930 0 0
59533: GO 59626
59535: LD_INT 3
59537: DOUBLE
59538: EQUAL
59539: IFTRUE 59543
59541: GO 59550
59543: POP
// hHackSetLevel10YourUnits ; 4 :
59544: CALL 72015 0 0
59548: GO 59626
59550: LD_INT 4
59552: DOUBLE
59553: EQUAL
59554: IFTRUE 59558
59556: GO 59565
59558: POP
// hHackInvincible ; 5 :
59559: CALL 72463 0 0
59563: GO 59626
59565: LD_INT 5
59567: DOUBLE
59568: EQUAL
59569: IFTRUE 59573
59571: GO 59580
59573: POP
// hHackInvisible ; 6 :
59574: CALL 72574 0 0
59578: GO 59626
59580: LD_INT 6
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59588
59586: GO 59595
59588: POP
// hHackChangeYourSide ; 7 :
59589: CALL 72631 0 0
59593: GO 59626
59595: LD_INT 7
59597: DOUBLE
59598: EQUAL
59599: IFTRUE 59603
59601: GO 59610
59603: POP
// hHackChangeUnitSide ; 8 :
59604: CALL 72673 0 0
59608: GO 59626
59610: LD_INT 8
59612: DOUBLE
59613: EQUAL
59614: IFTRUE 59618
59616: GO 59625
59618: POP
// hHackFog ; end ;
59619: CALL 72774 0 0
59623: GO 59626
59625: POP
// end ; if p2 = game_save_mode then
59626: LD_VAR 0 2
59630: PUSH
59631: LD_INT 102
59633: EQUAL
59634: IFFALSE 59699
// begin if p3 = 1 then
59636: LD_VAR 0 3
59640: PUSH
59641: LD_INT 1
59643: EQUAL
59644: IFFALSE 59656
// globalGameSaveCounter := p4 ;
59646: LD_ADDR_EXP 49
59650: PUSH
59651: LD_VAR 0 4
59655: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59656: LD_VAR 0 3
59660: PUSH
59661: LD_INT 2
59663: EQUAL
59664: PUSH
59665: LD_EXP 49
59669: AND
59670: IFFALSE 59689
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59672: LD_STRING setGameSaveCounter(
59674: PUSH
59675: LD_EXP 49
59679: STR
59680: PUSH
59681: LD_STRING )
59683: STR
59684: PPUSH
59685: CALL_OW 559
// display_strings := globalGameSaveCounter ;
59689: LD_ADDR_OWVAR 47
59693: PUSH
59694: LD_EXP 49
59698: ST_TO_ADDR
// end ; end ;
59699: LD_VAR 0 7
59703: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
59704: GO 59706
59706: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
59707: LD_STRING initStreamRollete();
59709: PPUSH
59710: CALL_OW 559
// InitStreamMode ;
59714: CALL 59726 0 0
// DefineStreamItems ( false ) ;
59718: LD_INT 0
59720: PPUSH
59721: CALL 60190 0 1
// end ;
59725: END
// function InitStreamMode ; begin
59726: LD_INT 0
59728: PPUSH
// streamModeActive := false ;
59729: LD_ADDR_EXP 50
59733: PUSH
59734: LD_INT 0
59736: ST_TO_ADDR
// normalCounter := 36 ;
59737: LD_ADDR_EXP 51
59741: PUSH
59742: LD_INT 36
59744: ST_TO_ADDR
// hardcoreCounter := 18 ;
59745: LD_ADDR_EXP 52
59749: PUSH
59750: LD_INT 18
59752: ST_TO_ADDR
// sRocket := false ;
59753: LD_ADDR_EXP 55
59757: PUSH
59758: LD_INT 0
59760: ST_TO_ADDR
// sSpeed := false ;
59761: LD_ADDR_EXP 54
59765: PUSH
59766: LD_INT 0
59768: ST_TO_ADDR
// sEngine := false ;
59769: LD_ADDR_EXP 56
59773: PUSH
59774: LD_INT 0
59776: ST_TO_ADDR
// sSpec := false ;
59777: LD_ADDR_EXP 53
59781: PUSH
59782: LD_INT 0
59784: ST_TO_ADDR
// sLevel := false ;
59785: LD_ADDR_EXP 57
59789: PUSH
59790: LD_INT 0
59792: ST_TO_ADDR
// sArmoury := false ;
59793: LD_ADDR_EXP 58
59797: PUSH
59798: LD_INT 0
59800: ST_TO_ADDR
// sRadar := false ;
59801: LD_ADDR_EXP 59
59805: PUSH
59806: LD_INT 0
59808: ST_TO_ADDR
// sBunker := false ;
59809: LD_ADDR_EXP 60
59813: PUSH
59814: LD_INT 0
59816: ST_TO_ADDR
// sHack := false ;
59817: LD_ADDR_EXP 61
59821: PUSH
59822: LD_INT 0
59824: ST_TO_ADDR
// sFire := false ;
59825: LD_ADDR_EXP 62
59829: PUSH
59830: LD_INT 0
59832: ST_TO_ADDR
// sRefresh := false ;
59833: LD_ADDR_EXP 63
59837: PUSH
59838: LD_INT 0
59840: ST_TO_ADDR
// sExp := false ;
59841: LD_ADDR_EXP 64
59845: PUSH
59846: LD_INT 0
59848: ST_TO_ADDR
// sDepot := false ;
59849: LD_ADDR_EXP 65
59853: PUSH
59854: LD_INT 0
59856: ST_TO_ADDR
// sFlag := false ;
59857: LD_ADDR_EXP 66
59861: PUSH
59862: LD_INT 0
59864: ST_TO_ADDR
// sKamikadze := false ;
59865: LD_ADDR_EXP 74
59869: PUSH
59870: LD_INT 0
59872: ST_TO_ADDR
// sTroll := false ;
59873: LD_ADDR_EXP 75
59877: PUSH
59878: LD_INT 0
59880: ST_TO_ADDR
// sSlow := false ;
59881: LD_ADDR_EXP 76
59885: PUSH
59886: LD_INT 0
59888: ST_TO_ADDR
// sLack := false ;
59889: LD_ADDR_EXP 77
59893: PUSH
59894: LD_INT 0
59896: ST_TO_ADDR
// sTank := false ;
59897: LD_ADDR_EXP 79
59901: PUSH
59902: LD_INT 0
59904: ST_TO_ADDR
// sRemote := false ;
59905: LD_ADDR_EXP 80
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// sPowell := false ;
59913: LD_ADDR_EXP 81
59917: PUSH
59918: LD_INT 0
59920: ST_TO_ADDR
// sTeleport := false ;
59921: LD_ADDR_EXP 84
59925: PUSH
59926: LD_INT 0
59928: ST_TO_ADDR
// sOilTower := false ;
59929: LD_ADDR_EXP 86
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// sShovel := false ;
59937: LD_ADDR_EXP 87
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// sSheik := false ;
59945: LD_ADDR_EXP 88
59949: PUSH
59950: LD_INT 0
59952: ST_TO_ADDR
// sEarthquake := false ;
59953: LD_ADDR_EXP 90
59957: PUSH
59958: LD_INT 0
59960: ST_TO_ADDR
// sAI := false ;
59961: LD_ADDR_EXP 91
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// sCargo := false ;
59969: LD_ADDR_EXP 94
59973: PUSH
59974: LD_INT 0
59976: ST_TO_ADDR
// sDLaser := false ;
59977: LD_ADDR_EXP 95
59981: PUSH
59982: LD_INT 0
59984: ST_TO_ADDR
// sExchange := false ;
59985: LD_ADDR_EXP 96
59989: PUSH
59990: LD_INT 0
59992: ST_TO_ADDR
// sFac := false ;
59993: LD_ADDR_EXP 97
59997: PUSH
59998: LD_INT 0
60000: ST_TO_ADDR
// sPower := false ;
60001: LD_ADDR_EXP 98
60005: PUSH
60006: LD_INT 0
60008: ST_TO_ADDR
// sRandom := false ;
60009: LD_ADDR_EXP 99
60013: PUSH
60014: LD_INT 0
60016: ST_TO_ADDR
// sShield := false ;
60017: LD_ADDR_EXP 100
60021: PUSH
60022: LD_INT 0
60024: ST_TO_ADDR
// sTime := false ;
60025: LD_ADDR_EXP 101
60029: PUSH
60030: LD_INT 0
60032: ST_TO_ADDR
// sTools := false ;
60033: LD_ADDR_EXP 102
60037: PUSH
60038: LD_INT 0
60040: ST_TO_ADDR
// sSold := false ;
60041: LD_ADDR_EXP 67
60045: PUSH
60046: LD_INT 0
60048: ST_TO_ADDR
// sDiff := false ;
60049: LD_ADDR_EXP 68
60053: PUSH
60054: LD_INT 0
60056: ST_TO_ADDR
// sFog := false ;
60057: LD_ADDR_EXP 71
60061: PUSH
60062: LD_INT 0
60064: ST_TO_ADDR
// sReset := false ;
60065: LD_ADDR_EXP 72
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
// sSun := false ;
60073: LD_ADDR_EXP 73
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
// sTiger := false ;
60081: LD_ADDR_EXP 69
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// sBomb := false ;
60089: LD_ADDR_EXP 70
60093: PUSH
60094: LD_INT 0
60096: ST_TO_ADDR
// sWound := false ;
60097: LD_ADDR_EXP 78
60101: PUSH
60102: LD_INT 0
60104: ST_TO_ADDR
// sBetray := false ;
60105: LD_ADDR_EXP 82
60109: PUSH
60110: LD_INT 0
60112: ST_TO_ADDR
// sContamin := false ;
60113: LD_ADDR_EXP 83
60117: PUSH
60118: LD_INT 0
60120: ST_TO_ADDR
// sOil := false ;
60121: LD_ADDR_EXP 85
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
// sStu := false ;
60129: LD_ADDR_EXP 89
60133: PUSH
60134: LD_INT 0
60136: ST_TO_ADDR
// sBazooka := false ;
60137: LD_ADDR_EXP 92
60141: PUSH
60142: LD_INT 0
60144: ST_TO_ADDR
// sMortar := false ;
60145: LD_ADDR_EXP 93
60149: PUSH
60150: LD_INT 0
60152: ST_TO_ADDR
// sRanger := false ;
60153: LD_ADDR_EXP 103
60157: PUSH
60158: LD_INT 0
60160: ST_TO_ADDR
// sComputer := false ;
60161: LD_ADDR_EXP 104
60165: PUSH
60166: LD_INT 0
60168: ST_TO_ADDR
// s30 := false ;
60169: LD_ADDR_EXP 105
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// s60 := false ;
60177: LD_ADDR_EXP 106
60181: PUSH
60182: LD_INT 0
60184: ST_TO_ADDR
// end ;
60185: LD_VAR 0 1
60189: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60190: LD_INT 0
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
// result := [ ] ;
60199: LD_ADDR_VAR 0 2
60203: PUSH
60204: EMPTY
60205: ST_TO_ADDR
// if campaign_id = 1 then
60206: LD_OWVAR 69
60210: PUSH
60211: LD_INT 1
60213: EQUAL
60214: IFFALSE 63380
// begin case mission_number of 1 :
60216: LD_OWVAR 70
60220: PUSH
60221: LD_INT 1
60223: DOUBLE
60224: EQUAL
60225: IFTRUE 60229
60227: GO 60305
60229: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60230: LD_ADDR_VAR 0 2
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 4
60240: PUSH
60241: LD_INT 11
60243: PUSH
60244: LD_INT 12
60246: PUSH
60247: LD_INT 15
60249: PUSH
60250: LD_INT 16
60252: PUSH
60253: LD_INT 22
60255: PUSH
60256: LD_INT 23
60258: PUSH
60259: LD_INT 26
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 101
60275: PUSH
60276: LD_INT 102
60278: PUSH
60279: LD_INT 106
60281: PUSH
60282: LD_INT 116
60284: PUSH
60285: LD_INT 117
60287: PUSH
60288: LD_INT 118
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: ST_TO_ADDR
60303: GO 63378
60305: LD_INT 2
60307: DOUBLE
60308: EQUAL
60309: IFTRUE 60313
60311: GO 60397
60313: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60314: LD_ADDR_VAR 0 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: LD_INT 11
60327: PUSH
60328: LD_INT 12
60330: PUSH
60331: LD_INT 15
60333: PUSH
60334: LD_INT 16
60336: PUSH
60337: LD_INT 22
60339: PUSH
60340: LD_INT 23
60342: PUSH
60343: LD_INT 26
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 101
60359: PUSH
60360: LD_INT 102
60362: PUSH
60363: LD_INT 105
60365: PUSH
60366: LD_INT 106
60368: PUSH
60369: LD_INT 108
60371: PUSH
60372: LD_INT 116
60374: PUSH
60375: LD_INT 117
60377: PUSH
60378: LD_INT 118
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: ST_TO_ADDR
60395: GO 63378
60397: LD_INT 3
60399: DOUBLE
60400: EQUAL
60401: IFTRUE 60405
60403: GO 60493
60405: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60406: LD_ADDR_VAR 0 2
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 4
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: LD_INT 11
60422: PUSH
60423: LD_INT 12
60425: PUSH
60426: LD_INT 15
60428: PUSH
60429: LD_INT 16
60431: PUSH
60432: LD_INT 22
60434: PUSH
60435: LD_INT 26
60437: PUSH
60438: LD_INT 36
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 101
60455: PUSH
60456: LD_INT 102
60458: PUSH
60459: LD_INT 105
60461: PUSH
60462: LD_INT 106
60464: PUSH
60465: LD_INT 108
60467: PUSH
60468: LD_INT 116
60470: PUSH
60471: LD_INT 117
60473: PUSH
60474: LD_INT 118
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: ST_TO_ADDR
60491: GO 63378
60493: LD_INT 4
60495: DOUBLE
60496: EQUAL
60497: IFTRUE 60501
60499: GO 60597
60501: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60502: LD_ADDR_VAR 0 2
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 4
60512: PUSH
60513: LD_INT 5
60515: PUSH
60516: LD_INT 8
60518: PUSH
60519: LD_INT 11
60521: PUSH
60522: LD_INT 12
60524: PUSH
60525: LD_INT 15
60527: PUSH
60528: LD_INT 16
60530: PUSH
60531: LD_INT 22
60533: PUSH
60534: LD_INT 23
60536: PUSH
60537: LD_INT 26
60539: PUSH
60540: LD_INT 36
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 101
60559: PUSH
60560: LD_INT 102
60562: PUSH
60563: LD_INT 105
60565: PUSH
60566: LD_INT 106
60568: PUSH
60569: LD_INT 108
60571: PUSH
60572: LD_INT 116
60574: PUSH
60575: LD_INT 117
60577: PUSH
60578: LD_INT 118
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: ST_TO_ADDR
60595: GO 63378
60597: LD_INT 5
60599: DOUBLE
60600: EQUAL
60601: IFTRUE 60605
60603: GO 60717
60605: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60606: LD_ADDR_VAR 0 2
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 4
60616: PUSH
60617: LD_INT 5
60619: PUSH
60620: LD_INT 6
60622: PUSH
60623: LD_INT 8
60625: PUSH
60626: LD_INT 11
60628: PUSH
60629: LD_INT 12
60631: PUSH
60632: LD_INT 15
60634: PUSH
60635: LD_INT 16
60637: PUSH
60638: LD_INT 22
60640: PUSH
60641: LD_INT 23
60643: PUSH
60644: LD_INT 25
60646: PUSH
60647: LD_INT 26
60649: PUSH
60650: LD_INT 36
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 101
60671: PUSH
60672: LD_INT 102
60674: PUSH
60675: LD_INT 105
60677: PUSH
60678: LD_INT 106
60680: PUSH
60681: LD_INT 108
60683: PUSH
60684: LD_INT 109
60686: PUSH
60687: LD_INT 112
60689: PUSH
60690: LD_INT 116
60692: PUSH
60693: LD_INT 117
60695: PUSH
60696: LD_INT 118
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: ST_TO_ADDR
60715: GO 63378
60717: LD_INT 6
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60725
60723: GO 60857
60725: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60726: LD_ADDR_VAR 0 2
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 4
60736: PUSH
60737: LD_INT 5
60739: PUSH
60740: LD_INT 6
60742: PUSH
60743: LD_INT 8
60745: PUSH
60746: LD_INT 11
60748: PUSH
60749: LD_INT 12
60751: PUSH
60752: LD_INT 15
60754: PUSH
60755: LD_INT 16
60757: PUSH
60758: LD_INT 20
60760: PUSH
60761: LD_INT 21
60763: PUSH
60764: LD_INT 22
60766: PUSH
60767: LD_INT 23
60769: PUSH
60770: LD_INT 25
60772: PUSH
60773: LD_INT 26
60775: PUSH
60776: LD_INT 30
60778: PUSH
60779: LD_INT 31
60781: PUSH
60782: LD_INT 32
60784: PUSH
60785: LD_INT 36
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 101
60811: PUSH
60812: LD_INT 102
60814: PUSH
60815: LD_INT 105
60817: PUSH
60818: LD_INT 106
60820: PUSH
60821: LD_INT 108
60823: PUSH
60824: LD_INT 109
60826: PUSH
60827: LD_INT 112
60829: PUSH
60830: LD_INT 116
60832: PUSH
60833: LD_INT 117
60835: PUSH
60836: LD_INT 118
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: ST_TO_ADDR
60855: GO 63378
60857: LD_INT 7
60859: DOUBLE
60860: EQUAL
60861: IFTRUE 60865
60863: GO 60977
60865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60866: LD_ADDR_VAR 0 2
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: LD_INT 5
60879: PUSH
60880: LD_INT 7
60882: PUSH
60883: LD_INT 11
60885: PUSH
60886: LD_INT 12
60888: PUSH
60889: LD_INT 15
60891: PUSH
60892: LD_INT 16
60894: PUSH
60895: LD_INT 20
60897: PUSH
60898: LD_INT 21
60900: PUSH
60901: LD_INT 22
60903: PUSH
60904: LD_INT 23
60906: PUSH
60907: LD_INT 25
60909: PUSH
60910: LD_INT 26
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 101
60931: PUSH
60932: LD_INT 102
60934: PUSH
60935: LD_INT 103
60937: PUSH
60938: LD_INT 105
60940: PUSH
60941: LD_INT 106
60943: PUSH
60944: LD_INT 108
60946: PUSH
60947: LD_INT 112
60949: PUSH
60950: LD_INT 116
60952: PUSH
60953: LD_INT 117
60955: PUSH
60956: LD_INT 118
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: ST_TO_ADDR
60975: GO 63378
60977: LD_INT 8
60979: DOUBLE
60980: EQUAL
60981: IFTRUE 60985
60983: GO 61125
60985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60986: LD_ADDR_VAR 0 2
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: LD_INT 4
60996: PUSH
60997: LD_INT 5
60999: PUSH
61000: LD_INT 6
61002: PUSH
61003: LD_INT 7
61005: PUSH
61006: LD_INT 8
61008: PUSH
61009: LD_INT 11
61011: PUSH
61012: LD_INT 12
61014: PUSH
61015: LD_INT 15
61017: PUSH
61018: LD_INT 16
61020: PUSH
61021: LD_INT 20
61023: PUSH
61024: LD_INT 21
61026: PUSH
61027: LD_INT 22
61029: PUSH
61030: LD_INT 23
61032: PUSH
61033: LD_INT 25
61035: PUSH
61036: LD_INT 26
61038: PUSH
61039: LD_INT 30
61041: PUSH
61042: LD_INT 31
61044: PUSH
61045: LD_INT 32
61047: PUSH
61048: LD_INT 36
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 101
61075: PUSH
61076: LD_INT 102
61078: PUSH
61079: LD_INT 103
61081: PUSH
61082: LD_INT 105
61084: PUSH
61085: LD_INT 106
61087: PUSH
61088: LD_INT 108
61090: PUSH
61091: LD_INT 109
61093: PUSH
61094: LD_INT 112
61096: PUSH
61097: LD_INT 116
61099: PUSH
61100: LD_INT 117
61102: PUSH
61103: LD_INT 118
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: ST_TO_ADDR
61123: GO 63378
61125: LD_INT 9
61127: DOUBLE
61128: EQUAL
61129: IFTRUE 61133
61131: GO 61281
61133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61134: LD_ADDR_VAR 0 2
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 4
61144: PUSH
61145: LD_INT 5
61147: PUSH
61148: LD_INT 6
61150: PUSH
61151: LD_INT 7
61153: PUSH
61154: LD_INT 8
61156: PUSH
61157: LD_INT 11
61159: PUSH
61160: LD_INT 12
61162: PUSH
61163: LD_INT 15
61165: PUSH
61166: LD_INT 16
61168: PUSH
61169: LD_INT 20
61171: PUSH
61172: LD_INT 21
61174: PUSH
61175: LD_INT 22
61177: PUSH
61178: LD_INT 23
61180: PUSH
61181: LD_INT 25
61183: PUSH
61184: LD_INT 26
61186: PUSH
61187: LD_INT 28
61189: PUSH
61190: LD_INT 30
61192: PUSH
61193: LD_INT 31
61195: PUSH
61196: LD_INT 32
61198: PUSH
61199: LD_INT 36
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 101
61227: PUSH
61228: LD_INT 102
61230: PUSH
61231: LD_INT 103
61233: PUSH
61234: LD_INT 105
61236: PUSH
61237: LD_INT 106
61239: PUSH
61240: LD_INT 108
61242: PUSH
61243: LD_INT 109
61245: PUSH
61246: LD_INT 112
61248: PUSH
61249: LD_INT 114
61251: PUSH
61252: LD_INT 116
61254: PUSH
61255: LD_INT 117
61257: PUSH
61258: LD_INT 118
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: ST_TO_ADDR
61279: GO 63378
61281: LD_INT 10
61283: DOUBLE
61284: EQUAL
61285: IFTRUE 61289
61287: GO 61485
61289: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61290: LD_ADDR_VAR 0 2
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: LD_INT 6
61306: PUSH
61307: LD_INT 7
61309: PUSH
61310: LD_INT 8
61312: PUSH
61313: LD_INT 9
61315: PUSH
61316: LD_INT 10
61318: PUSH
61319: LD_INT 11
61321: PUSH
61322: LD_INT 12
61324: PUSH
61325: LD_INT 13
61327: PUSH
61328: LD_INT 14
61330: PUSH
61331: LD_INT 15
61333: PUSH
61334: LD_INT 16
61336: PUSH
61337: LD_INT 17
61339: PUSH
61340: LD_INT 18
61342: PUSH
61343: LD_INT 19
61345: PUSH
61346: LD_INT 20
61348: PUSH
61349: LD_INT 21
61351: PUSH
61352: LD_INT 22
61354: PUSH
61355: LD_INT 23
61357: PUSH
61358: LD_INT 24
61360: PUSH
61361: LD_INT 25
61363: PUSH
61364: LD_INT 26
61366: PUSH
61367: LD_INT 28
61369: PUSH
61370: LD_INT 30
61372: PUSH
61373: LD_INT 31
61375: PUSH
61376: LD_INT 32
61378: PUSH
61379: LD_INT 36
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 101
61415: PUSH
61416: LD_INT 102
61418: PUSH
61419: LD_INT 103
61421: PUSH
61422: LD_INT 104
61424: PUSH
61425: LD_INT 105
61427: PUSH
61428: LD_INT 106
61430: PUSH
61431: LD_INT 107
61433: PUSH
61434: LD_INT 108
61436: PUSH
61437: LD_INT 109
61439: PUSH
61440: LD_INT 110
61442: PUSH
61443: LD_INT 111
61445: PUSH
61446: LD_INT 112
61448: PUSH
61449: LD_INT 114
61451: PUSH
61452: LD_INT 116
61454: PUSH
61455: LD_INT 117
61457: PUSH
61458: LD_INT 118
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: ST_TO_ADDR
61483: GO 63378
61485: LD_INT 11
61487: DOUBLE
61488: EQUAL
61489: IFTRUE 61493
61491: GO 61697
61493: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61494: LD_ADDR_VAR 0 2
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: LD_INT 5
61510: PUSH
61511: LD_INT 6
61513: PUSH
61514: LD_INT 7
61516: PUSH
61517: LD_INT 8
61519: PUSH
61520: LD_INT 9
61522: PUSH
61523: LD_INT 10
61525: PUSH
61526: LD_INT 11
61528: PUSH
61529: LD_INT 12
61531: PUSH
61532: LD_INT 13
61534: PUSH
61535: LD_INT 14
61537: PUSH
61538: LD_INT 15
61540: PUSH
61541: LD_INT 16
61543: PUSH
61544: LD_INT 17
61546: PUSH
61547: LD_INT 18
61549: PUSH
61550: LD_INT 19
61552: PUSH
61553: LD_INT 20
61555: PUSH
61556: LD_INT 21
61558: PUSH
61559: LD_INT 22
61561: PUSH
61562: LD_INT 23
61564: PUSH
61565: LD_INT 24
61567: PUSH
61568: LD_INT 25
61570: PUSH
61571: LD_INT 26
61573: PUSH
61574: LD_INT 28
61576: PUSH
61577: LD_INT 30
61579: PUSH
61580: LD_INT 31
61582: PUSH
61583: LD_INT 32
61585: PUSH
61586: LD_INT 34
61588: PUSH
61589: LD_INT 36
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 101
61627: PUSH
61628: LD_INT 102
61630: PUSH
61631: LD_INT 103
61633: PUSH
61634: LD_INT 104
61636: PUSH
61637: LD_INT 105
61639: PUSH
61640: LD_INT 106
61642: PUSH
61643: LD_INT 107
61645: PUSH
61646: LD_INT 108
61648: PUSH
61649: LD_INT 109
61651: PUSH
61652: LD_INT 110
61654: PUSH
61655: LD_INT 111
61657: PUSH
61658: LD_INT 112
61660: PUSH
61661: LD_INT 114
61663: PUSH
61664: LD_INT 116
61666: PUSH
61667: LD_INT 117
61669: PUSH
61670: LD_INT 118
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: ST_TO_ADDR
61695: GO 63378
61697: LD_INT 12
61699: DOUBLE
61700: EQUAL
61701: IFTRUE 61705
61703: GO 61925
61705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61706: LD_ADDR_VAR 0 2
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: LD_INT 4
61722: PUSH
61723: LD_INT 5
61725: PUSH
61726: LD_INT 6
61728: PUSH
61729: LD_INT 7
61731: PUSH
61732: LD_INT 8
61734: PUSH
61735: LD_INT 9
61737: PUSH
61738: LD_INT 10
61740: PUSH
61741: LD_INT 11
61743: PUSH
61744: LD_INT 12
61746: PUSH
61747: LD_INT 13
61749: PUSH
61750: LD_INT 14
61752: PUSH
61753: LD_INT 15
61755: PUSH
61756: LD_INT 16
61758: PUSH
61759: LD_INT 17
61761: PUSH
61762: LD_INT 18
61764: PUSH
61765: LD_INT 19
61767: PUSH
61768: LD_INT 20
61770: PUSH
61771: LD_INT 21
61773: PUSH
61774: LD_INT 22
61776: PUSH
61777: LD_INT 23
61779: PUSH
61780: LD_INT 24
61782: PUSH
61783: LD_INT 25
61785: PUSH
61786: LD_INT 26
61788: PUSH
61789: LD_INT 27
61791: PUSH
61792: LD_INT 28
61794: PUSH
61795: LD_INT 30
61797: PUSH
61798: LD_INT 31
61800: PUSH
61801: LD_INT 32
61803: PUSH
61804: LD_INT 33
61806: PUSH
61807: LD_INT 34
61809: PUSH
61810: LD_INT 36
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 101
61851: PUSH
61852: LD_INT 102
61854: PUSH
61855: LD_INT 103
61857: PUSH
61858: LD_INT 104
61860: PUSH
61861: LD_INT 105
61863: PUSH
61864: LD_INT 106
61866: PUSH
61867: LD_INT 107
61869: PUSH
61870: LD_INT 108
61872: PUSH
61873: LD_INT 109
61875: PUSH
61876: LD_INT 110
61878: PUSH
61879: LD_INT 111
61881: PUSH
61882: LD_INT 112
61884: PUSH
61885: LD_INT 113
61887: PUSH
61888: LD_INT 114
61890: PUSH
61891: LD_INT 116
61893: PUSH
61894: LD_INT 117
61896: PUSH
61897: LD_INT 118
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: ST_TO_ADDR
61923: GO 63378
61925: LD_INT 13
61927: DOUBLE
61928: EQUAL
61929: IFTRUE 61933
61931: GO 62141
61933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61934: LD_ADDR_VAR 0 2
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: LD_INT 5
61953: PUSH
61954: LD_INT 8
61956: PUSH
61957: LD_INT 9
61959: PUSH
61960: LD_INT 10
61962: PUSH
61963: LD_INT 11
61965: PUSH
61966: LD_INT 12
61968: PUSH
61969: LD_INT 14
61971: PUSH
61972: LD_INT 15
61974: PUSH
61975: LD_INT 16
61977: PUSH
61978: LD_INT 17
61980: PUSH
61981: LD_INT 18
61983: PUSH
61984: LD_INT 19
61986: PUSH
61987: LD_INT 20
61989: PUSH
61990: LD_INT 21
61992: PUSH
61993: LD_INT 22
61995: PUSH
61996: LD_INT 23
61998: PUSH
61999: LD_INT 24
62001: PUSH
62002: LD_INT 25
62004: PUSH
62005: LD_INT 26
62007: PUSH
62008: LD_INT 27
62010: PUSH
62011: LD_INT 28
62013: PUSH
62014: LD_INT 30
62016: PUSH
62017: LD_INT 31
62019: PUSH
62020: LD_INT 32
62022: PUSH
62023: LD_INT 33
62025: PUSH
62026: LD_INT 34
62028: PUSH
62029: LD_INT 36
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 101
62067: PUSH
62068: LD_INT 102
62070: PUSH
62071: LD_INT 103
62073: PUSH
62074: LD_INT 104
62076: PUSH
62077: LD_INT 105
62079: PUSH
62080: LD_INT 106
62082: PUSH
62083: LD_INT 107
62085: PUSH
62086: LD_INT 108
62088: PUSH
62089: LD_INT 109
62091: PUSH
62092: LD_INT 110
62094: PUSH
62095: LD_INT 111
62097: PUSH
62098: LD_INT 112
62100: PUSH
62101: LD_INT 113
62103: PUSH
62104: LD_INT 114
62106: PUSH
62107: LD_INT 116
62109: PUSH
62110: LD_INT 117
62112: PUSH
62113: LD_INT 118
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: ST_TO_ADDR
62139: GO 63378
62141: LD_INT 14
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62149
62147: GO 62373
62149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62150: LD_ADDR_VAR 0 2
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: LD_INT 4
62166: PUSH
62167: LD_INT 5
62169: PUSH
62170: LD_INT 6
62172: PUSH
62173: LD_INT 7
62175: PUSH
62176: LD_INT 8
62178: PUSH
62179: LD_INT 9
62181: PUSH
62182: LD_INT 10
62184: PUSH
62185: LD_INT 11
62187: PUSH
62188: LD_INT 12
62190: PUSH
62191: LD_INT 13
62193: PUSH
62194: LD_INT 14
62196: PUSH
62197: LD_INT 15
62199: PUSH
62200: LD_INT 16
62202: PUSH
62203: LD_INT 17
62205: PUSH
62206: LD_INT 18
62208: PUSH
62209: LD_INT 19
62211: PUSH
62212: LD_INT 20
62214: PUSH
62215: LD_INT 21
62217: PUSH
62218: LD_INT 22
62220: PUSH
62221: LD_INT 23
62223: PUSH
62224: LD_INT 24
62226: PUSH
62227: LD_INT 25
62229: PUSH
62230: LD_INT 26
62232: PUSH
62233: LD_INT 27
62235: PUSH
62236: LD_INT 28
62238: PUSH
62239: LD_INT 29
62241: PUSH
62242: LD_INT 30
62244: PUSH
62245: LD_INT 31
62247: PUSH
62248: LD_INT 32
62250: PUSH
62251: LD_INT 33
62253: PUSH
62254: LD_INT 34
62256: PUSH
62257: LD_INT 36
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 101
62299: PUSH
62300: LD_INT 102
62302: PUSH
62303: LD_INT 103
62305: PUSH
62306: LD_INT 104
62308: PUSH
62309: LD_INT 105
62311: PUSH
62312: LD_INT 106
62314: PUSH
62315: LD_INT 107
62317: PUSH
62318: LD_INT 108
62320: PUSH
62321: LD_INT 109
62323: PUSH
62324: LD_INT 110
62326: PUSH
62327: LD_INT 111
62329: PUSH
62330: LD_INT 112
62332: PUSH
62333: LD_INT 113
62335: PUSH
62336: LD_INT 114
62338: PUSH
62339: LD_INT 116
62341: PUSH
62342: LD_INT 117
62344: PUSH
62345: LD_INT 118
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: ST_TO_ADDR
62371: GO 63378
62373: LD_INT 15
62375: DOUBLE
62376: EQUAL
62377: IFTRUE 62381
62379: GO 62605
62381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62382: LD_ADDR_VAR 0 2
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 4
62398: PUSH
62399: LD_INT 5
62401: PUSH
62402: LD_INT 6
62404: PUSH
62405: LD_INT 7
62407: PUSH
62408: LD_INT 8
62410: PUSH
62411: LD_INT 9
62413: PUSH
62414: LD_INT 10
62416: PUSH
62417: LD_INT 11
62419: PUSH
62420: LD_INT 12
62422: PUSH
62423: LD_INT 13
62425: PUSH
62426: LD_INT 14
62428: PUSH
62429: LD_INT 15
62431: PUSH
62432: LD_INT 16
62434: PUSH
62435: LD_INT 17
62437: PUSH
62438: LD_INT 18
62440: PUSH
62441: LD_INT 19
62443: PUSH
62444: LD_INT 20
62446: PUSH
62447: LD_INT 21
62449: PUSH
62450: LD_INT 22
62452: PUSH
62453: LD_INT 23
62455: PUSH
62456: LD_INT 24
62458: PUSH
62459: LD_INT 25
62461: PUSH
62462: LD_INT 26
62464: PUSH
62465: LD_INT 27
62467: PUSH
62468: LD_INT 28
62470: PUSH
62471: LD_INT 29
62473: PUSH
62474: LD_INT 30
62476: PUSH
62477: LD_INT 31
62479: PUSH
62480: LD_INT 32
62482: PUSH
62483: LD_INT 33
62485: PUSH
62486: LD_INT 34
62488: PUSH
62489: LD_INT 36
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 101
62531: PUSH
62532: LD_INT 102
62534: PUSH
62535: LD_INT 103
62537: PUSH
62538: LD_INT 104
62540: PUSH
62541: LD_INT 105
62543: PUSH
62544: LD_INT 106
62546: PUSH
62547: LD_INT 107
62549: PUSH
62550: LD_INT 108
62552: PUSH
62553: LD_INT 109
62555: PUSH
62556: LD_INT 110
62558: PUSH
62559: LD_INT 111
62561: PUSH
62562: LD_INT 112
62564: PUSH
62565: LD_INT 113
62567: PUSH
62568: LD_INT 114
62570: PUSH
62571: LD_INT 116
62573: PUSH
62574: LD_INT 117
62576: PUSH
62577: LD_INT 118
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: ST_TO_ADDR
62603: GO 63378
62605: LD_INT 16
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62749
62613: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62614: LD_ADDR_VAR 0 2
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: LD_INT 5
62627: PUSH
62628: LD_INT 7
62630: PUSH
62631: LD_INT 11
62633: PUSH
62634: LD_INT 12
62636: PUSH
62637: LD_INT 15
62639: PUSH
62640: LD_INT 16
62642: PUSH
62643: LD_INT 20
62645: PUSH
62646: LD_INT 21
62648: PUSH
62649: LD_INT 22
62651: PUSH
62652: LD_INT 23
62654: PUSH
62655: LD_INT 25
62657: PUSH
62658: LD_INT 26
62660: PUSH
62661: LD_INT 30
62663: PUSH
62664: LD_INT 31
62666: PUSH
62667: LD_INT 32
62669: PUSH
62670: LD_INT 33
62672: PUSH
62673: LD_INT 34
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 101
62699: PUSH
62700: LD_INT 102
62702: PUSH
62703: LD_INT 103
62705: PUSH
62706: LD_INT 106
62708: PUSH
62709: LD_INT 108
62711: PUSH
62712: LD_INT 112
62714: PUSH
62715: LD_INT 113
62717: PUSH
62718: LD_INT 114
62720: PUSH
62721: LD_INT 116
62723: PUSH
62724: LD_INT 117
62726: PUSH
62727: LD_INT 118
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: ST_TO_ADDR
62747: GO 63378
62749: LD_INT 17
62751: DOUBLE
62752: EQUAL
62753: IFTRUE 62757
62755: GO 62981
62757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62758: LD_ADDR_VAR 0 2
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 4
62774: PUSH
62775: LD_INT 5
62777: PUSH
62778: LD_INT 6
62780: PUSH
62781: LD_INT 7
62783: PUSH
62784: LD_INT 8
62786: PUSH
62787: LD_INT 9
62789: PUSH
62790: LD_INT 10
62792: PUSH
62793: LD_INT 11
62795: PUSH
62796: LD_INT 12
62798: PUSH
62799: LD_INT 13
62801: PUSH
62802: LD_INT 14
62804: PUSH
62805: LD_INT 15
62807: PUSH
62808: LD_INT 16
62810: PUSH
62811: LD_INT 17
62813: PUSH
62814: LD_INT 18
62816: PUSH
62817: LD_INT 19
62819: PUSH
62820: LD_INT 20
62822: PUSH
62823: LD_INT 21
62825: PUSH
62826: LD_INT 22
62828: PUSH
62829: LD_INT 23
62831: PUSH
62832: LD_INT 24
62834: PUSH
62835: LD_INT 25
62837: PUSH
62838: LD_INT 26
62840: PUSH
62841: LD_INT 27
62843: PUSH
62844: LD_INT 28
62846: PUSH
62847: LD_INT 29
62849: PUSH
62850: LD_INT 30
62852: PUSH
62853: LD_INT 31
62855: PUSH
62856: LD_INT 32
62858: PUSH
62859: LD_INT 33
62861: PUSH
62862: LD_INT 34
62864: PUSH
62865: LD_INT 36
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 101
62907: PUSH
62908: LD_INT 102
62910: PUSH
62911: LD_INT 103
62913: PUSH
62914: LD_INT 104
62916: PUSH
62917: LD_INT 105
62919: PUSH
62920: LD_INT 106
62922: PUSH
62923: LD_INT 107
62925: PUSH
62926: LD_INT 108
62928: PUSH
62929: LD_INT 109
62931: PUSH
62932: LD_INT 110
62934: PUSH
62935: LD_INT 111
62937: PUSH
62938: LD_INT 112
62940: PUSH
62941: LD_INT 113
62943: PUSH
62944: LD_INT 114
62946: PUSH
62947: LD_INT 116
62949: PUSH
62950: LD_INT 117
62952: PUSH
62953: LD_INT 118
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: ST_TO_ADDR
62979: GO 63378
62981: LD_INT 18
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62989
62987: GO 63137
62989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62990: LD_ADDR_VAR 0 2
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: LD_INT 4
63000: PUSH
63001: LD_INT 5
63003: PUSH
63004: LD_INT 7
63006: PUSH
63007: LD_INT 11
63009: PUSH
63010: LD_INT 12
63012: PUSH
63013: LD_INT 15
63015: PUSH
63016: LD_INT 16
63018: PUSH
63019: LD_INT 20
63021: PUSH
63022: LD_INT 21
63024: PUSH
63025: LD_INT 22
63027: PUSH
63028: LD_INT 23
63030: PUSH
63031: LD_INT 25
63033: PUSH
63034: LD_INT 26
63036: PUSH
63037: LD_INT 30
63039: PUSH
63040: LD_INT 31
63042: PUSH
63043: LD_INT 32
63045: PUSH
63046: LD_INT 33
63048: PUSH
63049: LD_INT 34
63051: PUSH
63052: LD_INT 35
63054: PUSH
63055: LD_INT 36
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 101
63083: PUSH
63084: LD_INT 102
63086: PUSH
63087: LD_INT 103
63089: PUSH
63090: LD_INT 106
63092: PUSH
63093: LD_INT 108
63095: PUSH
63096: LD_INT 112
63098: PUSH
63099: LD_INT 113
63101: PUSH
63102: LD_INT 114
63104: PUSH
63105: LD_INT 115
63107: PUSH
63108: LD_INT 116
63110: PUSH
63111: LD_INT 117
63113: PUSH
63114: LD_INT 118
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: ST_TO_ADDR
63135: GO 63378
63137: LD_INT 19
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63145
63143: GO 63377
63145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63146: LD_ADDR_VAR 0 2
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: LD_INT 4
63162: PUSH
63163: LD_INT 5
63165: PUSH
63166: LD_INT 6
63168: PUSH
63169: LD_INT 7
63171: PUSH
63172: LD_INT 8
63174: PUSH
63175: LD_INT 9
63177: PUSH
63178: LD_INT 10
63180: PUSH
63181: LD_INT 11
63183: PUSH
63184: LD_INT 12
63186: PUSH
63187: LD_INT 13
63189: PUSH
63190: LD_INT 14
63192: PUSH
63193: LD_INT 15
63195: PUSH
63196: LD_INT 16
63198: PUSH
63199: LD_INT 17
63201: PUSH
63202: LD_INT 18
63204: PUSH
63205: LD_INT 19
63207: PUSH
63208: LD_INT 20
63210: PUSH
63211: LD_INT 21
63213: PUSH
63214: LD_INT 22
63216: PUSH
63217: LD_INT 23
63219: PUSH
63220: LD_INT 24
63222: PUSH
63223: LD_INT 25
63225: PUSH
63226: LD_INT 26
63228: PUSH
63229: LD_INT 27
63231: PUSH
63232: LD_INT 28
63234: PUSH
63235: LD_INT 29
63237: PUSH
63238: LD_INT 30
63240: PUSH
63241: LD_INT 31
63243: PUSH
63244: LD_INT 32
63246: PUSH
63247: LD_INT 33
63249: PUSH
63250: LD_INT 34
63252: PUSH
63253: LD_INT 35
63255: PUSH
63256: LD_INT 36
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 101
63299: PUSH
63300: LD_INT 102
63302: PUSH
63303: LD_INT 103
63305: PUSH
63306: LD_INT 104
63308: PUSH
63309: LD_INT 105
63311: PUSH
63312: LD_INT 106
63314: PUSH
63315: LD_INT 107
63317: PUSH
63318: LD_INT 108
63320: PUSH
63321: LD_INT 109
63323: PUSH
63324: LD_INT 110
63326: PUSH
63327: LD_INT 111
63329: PUSH
63330: LD_INT 112
63332: PUSH
63333: LD_INT 113
63335: PUSH
63336: LD_INT 114
63338: PUSH
63339: LD_INT 115
63341: PUSH
63342: LD_INT 116
63344: PUSH
63345: LD_INT 117
63347: PUSH
63348: LD_INT 118
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: ST_TO_ADDR
63375: GO 63378
63377: POP
// end else
63378: GO 63609
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63380: LD_ADDR_VAR 0 2
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 4
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: LD_INT 6
63402: PUSH
63403: LD_INT 7
63405: PUSH
63406: LD_INT 8
63408: PUSH
63409: LD_INT 9
63411: PUSH
63412: LD_INT 10
63414: PUSH
63415: LD_INT 11
63417: PUSH
63418: LD_INT 12
63420: PUSH
63421: LD_INT 13
63423: PUSH
63424: LD_INT 14
63426: PUSH
63427: LD_INT 15
63429: PUSH
63430: LD_INT 16
63432: PUSH
63433: LD_INT 17
63435: PUSH
63436: LD_INT 18
63438: PUSH
63439: LD_INT 19
63441: PUSH
63442: LD_INT 20
63444: PUSH
63445: LD_INT 21
63447: PUSH
63448: LD_INT 22
63450: PUSH
63451: LD_INT 23
63453: PUSH
63454: LD_INT 24
63456: PUSH
63457: LD_INT 25
63459: PUSH
63460: LD_INT 26
63462: PUSH
63463: LD_INT 27
63465: PUSH
63466: LD_INT 28
63468: PUSH
63469: LD_INT 29
63471: PUSH
63472: LD_INT 30
63474: PUSH
63475: LD_INT 31
63477: PUSH
63478: LD_INT 32
63480: PUSH
63481: LD_INT 33
63483: PUSH
63484: LD_INT 34
63486: PUSH
63487: LD_INT 35
63489: PUSH
63490: LD_INT 36
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 101
63533: PUSH
63534: LD_INT 102
63536: PUSH
63537: LD_INT 103
63539: PUSH
63540: LD_INT 104
63542: PUSH
63543: LD_INT 105
63545: PUSH
63546: LD_INT 106
63548: PUSH
63549: LD_INT 107
63551: PUSH
63552: LD_INT 108
63554: PUSH
63555: LD_INT 109
63557: PUSH
63558: LD_INT 110
63560: PUSH
63561: LD_INT 111
63563: PUSH
63564: LD_INT 112
63566: PUSH
63567: LD_INT 113
63569: PUSH
63570: LD_INT 114
63572: PUSH
63573: LD_INT 115
63575: PUSH
63576: LD_INT 116
63578: PUSH
63579: LD_INT 117
63581: PUSH
63582: LD_INT 118
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// if result then
63609: LD_VAR 0 2
63613: IFFALSE 64399
// begin normal :=  ;
63615: LD_ADDR_VAR 0 5
63619: PUSH
63620: LD_STRING 
63622: ST_TO_ADDR
// hardcore :=  ;
63623: LD_ADDR_VAR 0 6
63627: PUSH
63628: LD_STRING 
63630: ST_TO_ADDR
// active :=  ;
63631: LD_ADDR_VAR 0 7
63635: PUSH
63636: LD_STRING 
63638: ST_TO_ADDR
// for i = 1 to normalCounter do
63639: LD_ADDR_VAR 0 8
63643: PUSH
63644: DOUBLE
63645: LD_INT 1
63647: DEC
63648: ST_TO_ADDR
63649: LD_EXP 51
63653: PUSH
63654: FOR_TO
63655: IFFALSE 63756
// begin tmp := 0 ;
63657: LD_ADDR_VAR 0 3
63661: PUSH
63662: LD_STRING 0
63664: ST_TO_ADDR
// if result [ 1 ] then
63665: LD_VAR 0 2
63669: PUSH
63670: LD_INT 1
63672: ARRAY
63673: IFFALSE 63738
// if result [ 1 ] [ 1 ] = i then
63675: LD_VAR 0 2
63679: PUSH
63680: LD_INT 1
63682: ARRAY
63683: PUSH
63684: LD_INT 1
63686: ARRAY
63687: PUSH
63688: LD_VAR 0 8
63692: EQUAL
63693: IFFALSE 63738
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63695: LD_ADDR_VAR 0 2
63699: PUSH
63700: LD_VAR 0 2
63704: PPUSH
63705: LD_INT 1
63707: PPUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: PPUSH
63717: LD_INT 1
63719: PPUSH
63720: CALL_OW 3
63724: PPUSH
63725: CALL_OW 1
63729: ST_TO_ADDR
// tmp := 1 ;
63730: LD_ADDR_VAR 0 3
63734: PUSH
63735: LD_STRING 1
63737: ST_TO_ADDR
// end ; normal := normal & tmp ;
63738: LD_ADDR_VAR 0 5
63742: PUSH
63743: LD_VAR 0 5
63747: PUSH
63748: LD_VAR 0 3
63752: STR
63753: ST_TO_ADDR
// end ;
63754: GO 63654
63756: POP
63757: POP
// for i = 1 to hardcoreCounter do
63758: LD_ADDR_VAR 0 8
63762: PUSH
63763: DOUBLE
63764: LD_INT 1
63766: DEC
63767: ST_TO_ADDR
63768: LD_EXP 52
63772: PUSH
63773: FOR_TO
63774: IFFALSE 63879
// begin tmp := 0 ;
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: LD_STRING 0
63783: ST_TO_ADDR
// if result [ 2 ] then
63784: LD_VAR 0 2
63788: PUSH
63789: LD_INT 2
63791: ARRAY
63792: IFFALSE 63861
// if result [ 2 ] [ 1 ] = 100 + i then
63794: LD_VAR 0 2
63798: PUSH
63799: LD_INT 2
63801: ARRAY
63802: PUSH
63803: LD_INT 1
63805: ARRAY
63806: PUSH
63807: LD_INT 100
63809: PUSH
63810: LD_VAR 0 8
63814: PLUS
63815: EQUAL
63816: IFFALSE 63861
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63818: LD_ADDR_VAR 0 2
63822: PUSH
63823: LD_VAR 0 2
63827: PPUSH
63828: LD_INT 2
63830: PPUSH
63831: LD_VAR 0 2
63835: PUSH
63836: LD_INT 2
63838: ARRAY
63839: PPUSH
63840: LD_INT 1
63842: PPUSH
63843: CALL_OW 3
63847: PPUSH
63848: CALL_OW 1
63852: ST_TO_ADDR
// tmp := 1 ;
63853: LD_ADDR_VAR 0 3
63857: PUSH
63858: LD_STRING 1
63860: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63861: LD_ADDR_VAR 0 6
63865: PUSH
63866: LD_VAR 0 6
63870: PUSH
63871: LD_VAR 0 3
63875: STR
63876: ST_TO_ADDR
// end ;
63877: GO 63773
63879: POP
63880: POP
// if isGameLoad then
63881: LD_VAR 0 1
63885: IFFALSE 64360
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63887: LD_ADDR_VAR 0 4
63891: PUSH
63892: LD_EXP 55
63896: PUSH
63897: LD_EXP 54
63901: PUSH
63902: LD_EXP 56
63906: PUSH
63907: LD_EXP 53
63911: PUSH
63912: LD_EXP 57
63916: PUSH
63917: LD_EXP 58
63921: PUSH
63922: LD_EXP 59
63926: PUSH
63927: LD_EXP 60
63931: PUSH
63932: LD_EXP 61
63936: PUSH
63937: LD_EXP 62
63941: PUSH
63942: LD_EXP 63
63946: PUSH
63947: LD_EXP 64
63951: PUSH
63952: LD_EXP 65
63956: PUSH
63957: LD_EXP 66
63961: PUSH
63962: LD_EXP 74
63966: PUSH
63967: LD_EXP 75
63971: PUSH
63972: LD_EXP 76
63976: PUSH
63977: LD_EXP 77
63981: PUSH
63982: LD_EXP 79
63986: PUSH
63987: LD_EXP 80
63991: PUSH
63992: LD_EXP 81
63996: PUSH
63997: LD_EXP 84
64001: PUSH
64002: LD_EXP 86
64006: PUSH
64007: LD_EXP 87
64011: PUSH
64012: LD_EXP 88
64016: PUSH
64017: LD_EXP 90
64021: PUSH
64022: LD_EXP 91
64026: PUSH
64027: LD_EXP 94
64031: PUSH
64032: LD_EXP 95
64036: PUSH
64037: LD_EXP 96
64041: PUSH
64042: LD_EXP 97
64046: PUSH
64047: LD_EXP 98
64051: PUSH
64052: LD_EXP 99
64056: PUSH
64057: LD_EXP 100
64061: PUSH
64062: LD_EXP 101
64066: PUSH
64067: LD_EXP 102
64071: PUSH
64072: LD_EXP 67
64076: PUSH
64077: LD_EXP 68
64081: PUSH
64082: LD_EXP 71
64086: PUSH
64087: LD_EXP 72
64091: PUSH
64092: LD_EXP 73
64096: PUSH
64097: LD_EXP 69
64101: PUSH
64102: LD_EXP 70
64106: PUSH
64107: LD_EXP 78
64111: PUSH
64112: LD_EXP 82
64116: PUSH
64117: LD_EXP 83
64121: PUSH
64122: LD_EXP 85
64126: PUSH
64127: LD_EXP 89
64131: PUSH
64132: LD_EXP 92
64136: PUSH
64137: LD_EXP 93
64141: PUSH
64142: LD_EXP 103
64146: PUSH
64147: LD_EXP 104
64151: PUSH
64152: LD_EXP 105
64156: PUSH
64157: LD_EXP 106
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// tmp :=  ;
64218: LD_ADDR_VAR 0 3
64222: PUSH
64223: LD_STRING 
64225: ST_TO_ADDR
// for i = 1 to normalCounter do
64226: LD_ADDR_VAR 0 8
64230: PUSH
64231: DOUBLE
64232: LD_INT 1
64234: DEC
64235: ST_TO_ADDR
64236: LD_EXP 51
64240: PUSH
64241: FOR_TO
64242: IFFALSE 64278
// begin if flags [ i ] then
64244: LD_VAR 0 4
64248: PUSH
64249: LD_VAR 0 8
64253: ARRAY
64254: IFFALSE 64276
// tmp := tmp & i & ; ;
64256: LD_ADDR_VAR 0 3
64260: PUSH
64261: LD_VAR 0 3
64265: PUSH
64266: LD_VAR 0 8
64270: STR
64271: PUSH
64272: LD_STRING ;
64274: STR
64275: ST_TO_ADDR
// end ;
64276: GO 64241
64278: POP
64279: POP
// for i = 1 to hardcoreCounter do
64280: LD_ADDR_VAR 0 8
64284: PUSH
64285: DOUBLE
64286: LD_INT 1
64288: DEC
64289: ST_TO_ADDR
64290: LD_EXP 52
64294: PUSH
64295: FOR_TO
64296: IFFALSE 64342
// begin if flags [ normalCounter + i ] then
64298: LD_VAR 0 4
64302: PUSH
64303: LD_EXP 51
64307: PUSH
64308: LD_VAR 0 8
64312: PLUS
64313: ARRAY
64314: IFFALSE 64340
// tmp := tmp & ( 100 + i ) & ; ;
64316: LD_ADDR_VAR 0 3
64320: PUSH
64321: LD_VAR 0 3
64325: PUSH
64326: LD_INT 100
64328: PUSH
64329: LD_VAR 0 8
64333: PLUS
64334: STR
64335: PUSH
64336: LD_STRING ;
64338: STR
64339: ST_TO_ADDR
// end ;
64340: GO 64295
64342: POP
64343: POP
// if tmp then
64344: LD_VAR 0 3
64348: IFFALSE 64360
// active := tmp ;
64350: LD_ADDR_VAR 0 7
64354: PUSH
64355: LD_VAR 0 3
64359: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64360: LD_STRING getStreamItemsFromMission("
64362: PUSH
64363: LD_VAR 0 5
64367: STR
64368: PUSH
64369: LD_STRING ","
64371: STR
64372: PUSH
64373: LD_VAR 0 6
64377: STR
64378: PUSH
64379: LD_STRING ","
64381: STR
64382: PUSH
64383: LD_VAR 0 7
64387: STR
64388: PUSH
64389: LD_STRING ")
64391: STR
64392: PPUSH
64393: CALL_OW 559
// end else
64397: GO 64406
// ToLua ( getStreamItemsFromMission("","","") ) ;
64399: LD_STRING getStreamItemsFromMission("","","")
64401: PPUSH
64402: CALL_OW 559
// end ;
64406: LD_VAR 0 2
64410: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64411: LD_EXP 50
64415: PUSH
64416: LD_EXP 55
64420: AND
64421: IFFALSE 64545
64423: GO 64425
64425: DISABLE
64426: LD_INT 0
64428: PPUSH
64429: PPUSH
// begin enable ;
64430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64431: LD_ADDR_VAR 0 2
64435: PUSH
64436: LD_INT 22
64438: PUSH
64439: LD_OWVAR 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: LD_INT 34
64453: PUSH
64454: LD_INT 7
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 34
64463: PUSH
64464: LD_INT 45
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 34
64473: PUSH
64474: LD_INT 28
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 34
64483: PUSH
64484: LD_INT 47
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PPUSH
64502: CALL_OW 69
64506: ST_TO_ADDR
// if not tmp then
64507: LD_VAR 0 2
64511: NOT
64512: IFFALSE 64516
// exit ;
64514: GO 64545
// for i in tmp do
64516: LD_ADDR_VAR 0 1
64520: PUSH
64521: LD_VAR 0 2
64525: PUSH
64526: FOR_IN
64527: IFFALSE 64543
// begin SetLives ( i , 0 ) ;
64529: LD_VAR 0 1
64533: PPUSH
64534: LD_INT 0
64536: PPUSH
64537: CALL_OW 234
// end ;
64541: GO 64526
64543: POP
64544: POP
// end ;
64545: PPOPN 2
64547: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64548: LD_EXP 50
64552: PUSH
64553: LD_EXP 56
64557: AND
64558: IFFALSE 64642
64560: GO 64562
64562: DISABLE
64563: LD_INT 0
64565: PPUSH
64566: PPUSH
// begin enable ;
64567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64568: LD_ADDR_VAR 0 2
64572: PUSH
64573: LD_INT 22
64575: PUSH
64576: LD_OWVAR 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 32
64587: PUSH
64588: LD_INT 3
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PPUSH
64599: CALL_OW 69
64603: ST_TO_ADDR
// if not tmp then
64604: LD_VAR 0 2
64608: NOT
64609: IFFALSE 64613
// exit ;
64611: GO 64642
// for i in tmp do
64613: LD_ADDR_VAR 0 1
64617: PUSH
64618: LD_VAR 0 2
64622: PUSH
64623: FOR_IN
64624: IFFALSE 64640
// begin SetLives ( i , 0 ) ;
64626: LD_VAR 0 1
64630: PPUSH
64631: LD_INT 0
64633: PPUSH
64634: CALL_OW 234
// end ;
64638: GO 64623
64640: POP
64641: POP
// end ;
64642: PPOPN 2
64644: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64645: LD_EXP 50
64649: PUSH
64650: LD_EXP 53
64654: AND
64655: IFFALSE 64748
64657: GO 64659
64659: DISABLE
64660: LD_INT 0
64662: PPUSH
// begin enable ;
64663: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64664: LD_ADDR_VAR 0 1
64668: PUSH
64669: LD_INT 22
64671: PUSH
64672: LD_OWVAR 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: PUSH
64684: LD_INT 25
64686: PUSH
64687: LD_INT 5
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 25
64696: PUSH
64697: LD_INT 9
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 25
64706: PUSH
64707: LD_INT 8
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PPUSH
64724: CALL_OW 69
64728: PUSH
64729: FOR_IN
64730: IFFALSE 64746
// begin SetClass ( i , 1 ) ;
64732: LD_VAR 0 1
64736: PPUSH
64737: LD_INT 1
64739: PPUSH
64740: CALL_OW 336
// end ;
64744: GO 64729
64746: POP
64747: POP
// end ;
64748: PPOPN 1
64750: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64751: LD_EXP 50
64755: PUSH
64756: LD_EXP 54
64760: AND
64761: PUSH
64762: LD_OWVAR 65
64766: PUSH
64767: LD_INT 7
64769: LESS
64770: AND
64771: IFFALSE 64785
64773: GO 64775
64775: DISABLE
// begin enable ;
64776: ENABLE
// game_speed := 7 ;
64777: LD_ADDR_OWVAR 65
64781: PUSH
64782: LD_INT 7
64784: ST_TO_ADDR
// end ;
64785: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64786: LD_EXP 50
64790: PUSH
64791: LD_EXP 57
64795: AND
64796: IFFALSE 64998
64798: GO 64800
64800: DISABLE
64801: LD_INT 0
64803: PPUSH
64804: PPUSH
64805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: LD_INT 81
64813: PUSH
64814: LD_OWVAR 2
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 21
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PPUSH
64837: CALL_OW 69
64841: ST_TO_ADDR
// if not tmp then
64842: LD_VAR 0 3
64846: NOT
64847: IFFALSE 64851
// exit ;
64849: GO 64998
// if tmp > 5 then
64851: LD_VAR 0 3
64855: PUSH
64856: LD_INT 5
64858: GREATER
64859: IFFALSE 64871
// k := 5 else
64861: LD_ADDR_VAR 0 2
64865: PUSH
64866: LD_INT 5
64868: ST_TO_ADDR
64869: GO 64881
// k := tmp ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: LD_VAR 0 3
64880: ST_TO_ADDR
// for i := 1 to k do
64881: LD_ADDR_VAR 0 1
64885: PUSH
64886: DOUBLE
64887: LD_INT 1
64889: DEC
64890: ST_TO_ADDR
64891: LD_VAR 0 2
64895: PUSH
64896: FOR_TO
64897: IFFALSE 64996
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64899: LD_VAR 0 3
64903: PUSH
64904: LD_VAR 0 1
64908: ARRAY
64909: PPUSH
64910: LD_VAR 0 1
64914: PUSH
64915: LD_INT 4
64917: MOD
64918: PUSH
64919: LD_INT 1
64921: PLUS
64922: PPUSH
64923: CALL_OW 259
64927: PUSH
64928: LD_INT 10
64930: LESS
64931: IFFALSE 64994
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64933: LD_VAR 0 3
64937: PUSH
64938: LD_VAR 0 1
64942: ARRAY
64943: PPUSH
64944: LD_VAR 0 1
64948: PUSH
64949: LD_INT 4
64951: MOD
64952: PUSH
64953: LD_INT 1
64955: PLUS
64956: PPUSH
64957: LD_VAR 0 3
64961: PUSH
64962: LD_VAR 0 1
64966: ARRAY
64967: PPUSH
64968: LD_VAR 0 1
64972: PUSH
64973: LD_INT 4
64975: MOD
64976: PUSH
64977: LD_INT 1
64979: PLUS
64980: PPUSH
64981: CALL_OW 259
64985: PUSH
64986: LD_INT 1
64988: PLUS
64989: PPUSH
64990: CALL_OW 237
64994: GO 64896
64996: POP
64997: POP
// end ;
64998: PPOPN 3
65000: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65001: LD_EXP 50
65005: PUSH
65006: LD_EXP 58
65010: AND
65011: IFFALSE 65031
65013: GO 65015
65015: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65016: LD_INT 4
65018: PPUSH
65019: LD_OWVAR 2
65023: PPUSH
65024: LD_INT 0
65026: PPUSH
65027: CALL_OW 324
65031: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65032: LD_EXP 50
65036: PUSH
65037: LD_EXP 87
65041: AND
65042: IFFALSE 65062
65044: GO 65046
65046: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65047: LD_INT 19
65049: PPUSH
65050: LD_OWVAR 2
65054: PPUSH
65055: LD_INT 0
65057: PPUSH
65058: CALL_OW 324
65062: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65063: LD_EXP 50
65067: PUSH
65068: LD_EXP 59
65072: AND
65073: IFFALSE 65175
65075: GO 65077
65077: DISABLE
65078: LD_INT 0
65080: PPUSH
65081: PPUSH
// begin enable ;
65082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65083: LD_ADDR_VAR 0 2
65087: PUSH
65088: LD_INT 22
65090: PUSH
65091: LD_OWVAR 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: PUSH
65103: LD_INT 34
65105: PUSH
65106: LD_INT 11
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 34
65115: PUSH
65116: LD_INT 30
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PPUSH
65132: CALL_OW 69
65136: ST_TO_ADDR
// if not tmp then
65137: LD_VAR 0 2
65141: NOT
65142: IFFALSE 65146
// exit ;
65144: GO 65175
// for i in tmp do
65146: LD_ADDR_VAR 0 1
65150: PUSH
65151: LD_VAR 0 2
65155: PUSH
65156: FOR_IN
65157: IFFALSE 65173
// begin SetLives ( i , 0 ) ;
65159: LD_VAR 0 1
65163: PPUSH
65164: LD_INT 0
65166: PPUSH
65167: CALL_OW 234
// end ;
65171: GO 65156
65173: POP
65174: POP
// end ;
65175: PPOPN 2
65177: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65178: LD_EXP 50
65182: PUSH
65183: LD_EXP 60
65187: AND
65188: IFFALSE 65208
65190: GO 65192
65192: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65193: LD_INT 32
65195: PPUSH
65196: LD_OWVAR 2
65200: PPUSH
65201: LD_INT 0
65203: PPUSH
65204: CALL_OW 324
65208: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65209: LD_EXP 50
65213: PUSH
65214: LD_EXP 61
65218: AND
65219: IFFALSE 65400
65221: GO 65223
65223: DISABLE
65224: LD_INT 0
65226: PPUSH
65227: PPUSH
65228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65229: LD_ADDR_VAR 0 2
65233: PUSH
65234: LD_INT 22
65236: PUSH
65237: LD_OWVAR 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 33
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PPUSH
65260: CALL_OW 69
65264: ST_TO_ADDR
// if not tmp then
65265: LD_VAR 0 2
65269: NOT
65270: IFFALSE 65274
// exit ;
65272: GO 65400
// side := 0 ;
65274: LD_ADDR_VAR 0 3
65278: PUSH
65279: LD_INT 0
65281: ST_TO_ADDR
// for i := 1 to 8 do
65282: LD_ADDR_VAR 0 1
65286: PUSH
65287: DOUBLE
65288: LD_INT 1
65290: DEC
65291: ST_TO_ADDR
65292: LD_INT 8
65294: PUSH
65295: FOR_TO
65296: IFFALSE 65344
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65298: LD_OWVAR 2
65302: PUSH
65303: LD_VAR 0 1
65307: NONEQUAL
65308: PUSH
65309: LD_OWVAR 2
65313: PPUSH
65314: LD_VAR 0 1
65318: PPUSH
65319: CALL_OW 81
65323: PUSH
65324: LD_INT 2
65326: EQUAL
65327: AND
65328: IFFALSE 65342
// begin side := i ;
65330: LD_ADDR_VAR 0 3
65334: PUSH
65335: LD_VAR 0 1
65339: ST_TO_ADDR
// break ;
65340: GO 65344
// end ;
65342: GO 65295
65344: POP
65345: POP
// if not side then
65346: LD_VAR 0 3
65350: NOT
65351: IFFALSE 65355
// exit ;
65353: GO 65400
// for i := 1 to tmp do
65355: LD_ADDR_VAR 0 1
65359: PUSH
65360: DOUBLE
65361: LD_INT 1
65363: DEC
65364: ST_TO_ADDR
65365: LD_VAR 0 2
65369: PUSH
65370: FOR_TO
65371: IFFALSE 65398
// if Prob ( 60 ) then
65373: LD_INT 60
65375: PPUSH
65376: CALL_OW 13
65380: IFFALSE 65396
// SetSide ( i , side ) ;
65382: LD_VAR 0 1
65386: PPUSH
65387: LD_VAR 0 3
65391: PPUSH
65392: CALL_OW 235
65396: GO 65370
65398: POP
65399: POP
// end ;
65400: PPOPN 3
65402: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65403: LD_EXP 50
65407: PUSH
65408: LD_EXP 63
65412: AND
65413: IFFALSE 65532
65415: GO 65417
65417: DISABLE
65418: LD_INT 0
65420: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65421: LD_ADDR_VAR 0 1
65425: PUSH
65426: LD_INT 22
65428: PUSH
65429: LD_OWVAR 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 21
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 3
65450: PUSH
65451: LD_INT 23
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: PPUSH
65470: CALL_OW 69
65474: PUSH
65475: FOR_IN
65476: IFFALSE 65530
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65478: LD_VAR 0 1
65482: PPUSH
65483: CALL_OW 257
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: LD_INT 4
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: IN
65506: IFFALSE 65528
// SetClass ( un , rand ( 1 , 4 ) ) ;
65508: LD_VAR 0 1
65512: PPUSH
65513: LD_INT 1
65515: PPUSH
65516: LD_INT 4
65518: PPUSH
65519: CALL_OW 12
65523: PPUSH
65524: CALL_OW 336
65528: GO 65475
65530: POP
65531: POP
// end ;
65532: PPOPN 1
65534: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65535: LD_EXP 50
65539: PUSH
65540: LD_EXP 62
65544: AND
65545: IFFALSE 65624
65547: GO 65549
65549: DISABLE
65550: LD_INT 0
65552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65553: LD_ADDR_VAR 0 1
65557: PUSH
65558: LD_INT 22
65560: PUSH
65561: LD_OWVAR 2
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 21
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PPUSH
65584: CALL_OW 69
65588: ST_TO_ADDR
// if not tmp then
65589: LD_VAR 0 1
65593: NOT
65594: IFFALSE 65598
// exit ;
65596: GO 65624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65598: LD_VAR 0 1
65602: PUSH
65603: LD_INT 1
65605: PPUSH
65606: LD_VAR 0 1
65610: PPUSH
65611: CALL_OW 12
65615: ARRAY
65616: PPUSH
65617: LD_INT 100
65619: PPUSH
65620: CALL_OW 234
// end ;
65624: PPOPN 1
65626: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65627: LD_EXP 50
65631: PUSH
65632: LD_EXP 64
65636: AND
65637: IFFALSE 65735
65639: GO 65641
65641: DISABLE
65642: LD_INT 0
65644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65645: LD_ADDR_VAR 0 1
65649: PUSH
65650: LD_INT 22
65652: PUSH
65653: LD_OWVAR 2
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 21
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PPUSH
65676: CALL_OW 69
65680: ST_TO_ADDR
// if not tmp then
65681: LD_VAR 0 1
65685: NOT
65686: IFFALSE 65690
// exit ;
65688: GO 65735
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65690: LD_VAR 0 1
65694: PUSH
65695: LD_INT 1
65697: PPUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: CALL_OW 12
65707: ARRAY
65708: PPUSH
65709: LD_INT 1
65711: PPUSH
65712: LD_INT 4
65714: PPUSH
65715: CALL_OW 12
65719: PPUSH
65720: LD_INT 3000
65722: PPUSH
65723: LD_INT 9000
65725: PPUSH
65726: CALL_OW 12
65730: PPUSH
65731: CALL_OW 492
// end ;
65735: PPOPN 1
65737: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65738: LD_EXP 50
65742: PUSH
65743: LD_EXP 65
65747: AND
65748: IFFALSE 65768
65750: GO 65752
65752: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65753: LD_INT 1
65755: PPUSH
65756: LD_OWVAR 2
65760: PPUSH
65761: LD_INT 0
65763: PPUSH
65764: CALL_OW 324
65768: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65769: LD_EXP 50
65773: PUSH
65774: LD_EXP 66
65778: AND
65779: IFFALSE 65862
65781: GO 65783
65783: DISABLE
65784: LD_INT 0
65786: PPUSH
65787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65788: LD_ADDR_VAR 0 2
65792: PUSH
65793: LD_INT 22
65795: PUSH
65796: LD_OWVAR 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 21
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PPUSH
65819: CALL_OW 69
65823: ST_TO_ADDR
// if not tmp then
65824: LD_VAR 0 2
65828: NOT
65829: IFFALSE 65833
// exit ;
65831: GO 65862
// for i in tmp do
65833: LD_ADDR_VAR 0 1
65837: PUSH
65838: LD_VAR 0 2
65842: PUSH
65843: FOR_IN
65844: IFFALSE 65860
// SetBLevel ( i , 10 ) ;
65846: LD_VAR 0 1
65850: PPUSH
65851: LD_INT 10
65853: PPUSH
65854: CALL_OW 241
65858: GO 65843
65860: POP
65861: POP
// end ;
65862: PPOPN 2
65864: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65865: LD_EXP 50
65869: PUSH
65870: LD_EXP 67
65874: AND
65875: IFFALSE 65986
65877: GO 65879
65879: DISABLE
65880: LD_INT 0
65882: PPUSH
65883: PPUSH
65884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65885: LD_ADDR_VAR 0 3
65889: PUSH
65890: LD_INT 22
65892: PUSH
65893: LD_OWVAR 2
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 25
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PPUSH
65916: CALL_OW 69
65920: ST_TO_ADDR
// if not tmp then
65921: LD_VAR 0 3
65925: NOT
65926: IFFALSE 65930
// exit ;
65928: GO 65986
// un := tmp [ rand ( 1 , tmp ) ] ;
65930: LD_ADDR_VAR 0 2
65934: PUSH
65935: LD_VAR 0 3
65939: PUSH
65940: LD_INT 1
65942: PPUSH
65943: LD_VAR 0 3
65947: PPUSH
65948: CALL_OW 12
65952: ARRAY
65953: ST_TO_ADDR
// if Crawls ( un ) then
65954: LD_VAR 0 2
65958: PPUSH
65959: CALL_OW 318
65963: IFFALSE 65974
// ComWalk ( un ) ;
65965: LD_VAR 0 2
65969: PPUSH
65970: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65974: LD_VAR 0 2
65978: PPUSH
65979: LD_INT 5
65981: PPUSH
65982: CALL_OW 336
// end ;
65986: PPOPN 3
65988: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65989: LD_EXP 50
65993: PUSH
65994: LD_EXP 68
65998: AND
65999: PUSH
66000: LD_OWVAR 67
66004: PUSH
66005: LD_INT 4
66007: LESS
66008: AND
66009: IFFALSE 66028
66011: GO 66013
66013: DISABLE
// begin Difficulty := Difficulty + 1 ;
66014: LD_ADDR_OWVAR 67
66018: PUSH
66019: LD_OWVAR 67
66023: PUSH
66024: LD_INT 1
66026: PLUS
66027: ST_TO_ADDR
// end ;
66028: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66029: LD_EXP 50
66033: PUSH
66034: LD_EXP 69
66038: AND
66039: IFFALSE 66142
66041: GO 66043
66043: DISABLE
66044: LD_INT 0
66046: PPUSH
// begin for i := 1 to 5 do
66047: LD_ADDR_VAR 0 1
66051: PUSH
66052: DOUBLE
66053: LD_INT 1
66055: DEC
66056: ST_TO_ADDR
66057: LD_INT 5
66059: PUSH
66060: FOR_TO
66061: IFFALSE 66140
// begin uc_nation := nation_nature ;
66063: LD_ADDR_OWVAR 21
66067: PUSH
66068: LD_INT 0
66070: ST_TO_ADDR
// uc_side := 0 ;
66071: LD_ADDR_OWVAR 20
66075: PUSH
66076: LD_INT 0
66078: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66079: LD_ADDR_OWVAR 29
66083: PUSH
66084: LD_INT 12
66086: PUSH
66087: LD_INT 12
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// hc_agressivity := 20 ;
66094: LD_ADDR_OWVAR 35
66098: PUSH
66099: LD_INT 20
66101: ST_TO_ADDR
// hc_class := class_tiger ;
66102: LD_ADDR_OWVAR 28
66106: PUSH
66107: LD_INT 14
66109: ST_TO_ADDR
// hc_gallery :=  ;
66110: LD_ADDR_OWVAR 33
66114: PUSH
66115: LD_STRING 
66117: ST_TO_ADDR
// hc_name :=  ;
66118: LD_ADDR_OWVAR 26
66122: PUSH
66123: LD_STRING 
66125: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66126: CALL_OW 44
66130: PPUSH
66131: LD_INT 0
66133: PPUSH
66134: CALL_OW 51
// end ;
66138: GO 66060
66140: POP
66141: POP
// end ;
66142: PPOPN 1
66144: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66145: LD_EXP 50
66149: PUSH
66150: LD_EXP 70
66154: AND
66155: IFFALSE 66164
66157: GO 66159
66159: DISABLE
// StreamSibBomb ;
66160: CALL 66165 0 0
66164: END
// export function StreamSibBomb ; var i , x , y ; begin
66165: LD_INT 0
66167: PPUSH
66168: PPUSH
66169: PPUSH
66170: PPUSH
// result := false ;
66171: LD_ADDR_VAR 0 1
66175: PUSH
66176: LD_INT 0
66178: ST_TO_ADDR
// for i := 1 to 16 do
66179: LD_ADDR_VAR 0 2
66183: PUSH
66184: DOUBLE
66185: LD_INT 1
66187: DEC
66188: ST_TO_ADDR
66189: LD_INT 16
66191: PUSH
66192: FOR_TO
66193: IFFALSE 66392
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66195: LD_ADDR_VAR 0 3
66199: PUSH
66200: LD_INT 10
66202: PUSH
66203: LD_INT 20
66205: PUSH
66206: LD_INT 30
66208: PUSH
66209: LD_INT 40
66211: PUSH
66212: LD_INT 50
66214: PUSH
66215: LD_INT 60
66217: PUSH
66218: LD_INT 70
66220: PUSH
66221: LD_INT 80
66223: PUSH
66224: LD_INT 90
66226: PUSH
66227: LD_INT 100
66229: PUSH
66230: LD_INT 110
66232: PUSH
66233: LD_INT 120
66235: PUSH
66236: LD_INT 130
66238: PUSH
66239: LD_INT 140
66241: PUSH
66242: LD_INT 150
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PPUSH
66265: LD_INT 15
66267: PPUSH
66268: CALL_OW 12
66272: ARRAY
66273: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66274: LD_ADDR_VAR 0 4
66278: PUSH
66279: LD_INT 10
66281: PUSH
66282: LD_INT 20
66284: PUSH
66285: LD_INT 30
66287: PUSH
66288: LD_INT 40
66290: PUSH
66291: LD_INT 50
66293: PUSH
66294: LD_INT 60
66296: PUSH
66297: LD_INT 70
66299: PUSH
66300: LD_INT 80
66302: PUSH
66303: LD_INT 90
66305: PUSH
66306: LD_INT 100
66308: PUSH
66309: LD_INT 110
66311: PUSH
66312: LD_INT 120
66314: PUSH
66315: LD_INT 130
66317: PUSH
66318: LD_INT 140
66320: PUSH
66321: LD_INT 150
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PPUSH
66344: LD_INT 15
66346: PPUSH
66347: CALL_OW 12
66351: ARRAY
66352: ST_TO_ADDR
// if ValidHex ( x , y ) then
66353: LD_VAR 0 3
66357: PPUSH
66358: LD_VAR 0 4
66362: PPUSH
66363: CALL_OW 488
66367: IFFALSE 66390
// begin result := [ x , y ] ;
66369: LD_ADDR_VAR 0 1
66373: PUSH
66374: LD_VAR 0 3
66378: PUSH
66379: LD_VAR 0 4
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: ST_TO_ADDR
// break ;
66388: GO 66392
// end ; end ;
66390: GO 66192
66392: POP
66393: POP
// if result then
66394: LD_VAR 0 1
66398: IFFALSE 66458
// begin ToLua ( playSibBomb() ) ;
66400: LD_STRING playSibBomb()
66402: PPUSH
66403: CALL_OW 559
// wait ( 0 0$14 ) ;
66407: LD_INT 490
66409: PPUSH
66410: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66414: LD_VAR 0 1
66418: PUSH
66419: LD_INT 1
66421: ARRAY
66422: PPUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 2
66430: ARRAY
66431: PPUSH
66432: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66436: LD_VAR 0 1
66440: PUSH
66441: LD_INT 1
66443: ARRAY
66444: PPUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_INT 2
66452: ARRAY
66453: PPUSH
66454: CALL_OW 429
// end ; end ;
66458: LD_VAR 0 1
66462: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66463: LD_EXP 50
66467: PUSH
66468: LD_EXP 72
66472: AND
66473: IFFALSE 66485
66475: GO 66477
66477: DISABLE
// YouLost (  ) ;
66478: LD_STRING 
66480: PPUSH
66481: CALL_OW 104
66485: END
// every 0 0$1 trigger StreamModeActive and sFog do
66486: LD_EXP 50
66490: PUSH
66491: LD_EXP 71
66495: AND
66496: IFFALSE 66510
66498: GO 66500
66500: DISABLE
// FogOff ( your_side ) ;
66501: LD_OWVAR 2
66505: PPUSH
66506: CALL_OW 344
66510: END
// every 0 0$1 trigger StreamModeActive and sSun do
66511: LD_EXP 50
66515: PUSH
66516: LD_EXP 73
66520: AND
66521: IFFALSE 66549
66523: GO 66525
66525: DISABLE
// begin solar_recharge_percent := 0 ;
66526: LD_ADDR_OWVAR 79
66530: PUSH
66531: LD_INT 0
66533: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66534: LD_INT 10500
66536: PPUSH
66537: CALL_OW 67
// solar_recharge_percent := 100 ;
66541: LD_ADDR_OWVAR 79
66545: PUSH
66546: LD_INT 100
66548: ST_TO_ADDR
// end ;
66549: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66550: LD_EXP 50
66554: PUSH
66555: LD_EXP 74
66559: AND
66560: IFFALSE 66799
66562: GO 66564
66564: DISABLE
66565: LD_INT 0
66567: PPUSH
66568: PPUSH
66569: PPUSH
// begin tmp := [ ] ;
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: EMPTY
66576: ST_TO_ADDR
// for i := 1 to 6 do
66577: LD_ADDR_VAR 0 1
66581: PUSH
66582: DOUBLE
66583: LD_INT 1
66585: DEC
66586: ST_TO_ADDR
66587: LD_INT 6
66589: PUSH
66590: FOR_TO
66591: IFFALSE 66696
// begin uc_nation := nation_nature ;
66593: LD_ADDR_OWVAR 21
66597: PUSH
66598: LD_INT 0
66600: ST_TO_ADDR
// uc_side := 0 ;
66601: LD_ADDR_OWVAR 20
66605: PUSH
66606: LD_INT 0
66608: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66609: LD_ADDR_OWVAR 29
66613: PUSH
66614: LD_INT 12
66616: PUSH
66617: LD_INT 12
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// hc_agressivity := 20 ;
66624: LD_ADDR_OWVAR 35
66628: PUSH
66629: LD_INT 20
66631: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66632: LD_ADDR_OWVAR 28
66636: PUSH
66637: LD_INT 17
66639: ST_TO_ADDR
// hc_gallery :=  ;
66640: LD_ADDR_OWVAR 33
66644: PUSH
66645: LD_STRING 
66647: ST_TO_ADDR
// hc_name :=  ;
66648: LD_ADDR_OWVAR 26
66652: PUSH
66653: LD_STRING 
66655: ST_TO_ADDR
// un := CreateHuman ;
66656: LD_ADDR_VAR 0 2
66660: PUSH
66661: CALL_OW 44
66665: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66666: LD_VAR 0 2
66670: PPUSH
66671: LD_INT 1
66673: PPUSH
66674: CALL_OW 51
// tmp := tmp ^ un ;
66678: LD_ADDR_VAR 0 3
66682: PUSH
66683: LD_VAR 0 3
66687: PUSH
66688: LD_VAR 0 2
66692: ADD
66693: ST_TO_ADDR
// end ;
66694: GO 66590
66696: POP
66697: POP
// repeat wait ( 0 0$1 ) ;
66698: LD_INT 35
66700: PPUSH
66701: CALL_OW 67
// for un in tmp do
66705: LD_ADDR_VAR 0 2
66709: PUSH
66710: LD_VAR 0 3
66714: PUSH
66715: FOR_IN
66716: IFFALSE 66790
// begin if IsDead ( un ) then
66718: LD_VAR 0 2
66722: PPUSH
66723: CALL_OW 301
66727: IFFALSE 66747
// begin tmp := tmp diff un ;
66729: LD_ADDR_VAR 0 3
66733: PUSH
66734: LD_VAR 0 3
66738: PUSH
66739: LD_VAR 0 2
66743: DIFF
66744: ST_TO_ADDR
// continue ;
66745: GO 66715
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66747: LD_VAR 0 2
66751: PPUSH
66752: LD_INT 3
66754: PUSH
66755: LD_INT 22
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PPUSH
66769: CALL_OW 69
66773: PPUSH
66774: LD_VAR 0 2
66778: PPUSH
66779: CALL_OW 74
66783: PPUSH
66784: CALL_OW 115
// end ;
66788: GO 66715
66790: POP
66791: POP
// until not tmp ;
66792: LD_VAR 0 3
66796: NOT
66797: IFFALSE 66698
// end ;
66799: PPOPN 3
66801: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66802: LD_EXP 50
66806: PUSH
66807: LD_EXP 75
66811: AND
66812: IFFALSE 66866
66814: GO 66816
66816: DISABLE
// begin ToLua ( displayTroll(); ) ;
66817: LD_STRING displayTroll();
66819: PPUSH
66820: CALL_OW 559
// wait ( 3 3$00 ) ;
66824: LD_INT 6300
66826: PPUSH
66827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66831: LD_STRING hideTroll();
66833: PPUSH
66834: CALL_OW 559
// wait ( 1 1$00 ) ;
66838: LD_INT 2100
66840: PPUSH
66841: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66845: LD_STRING displayTroll();
66847: PPUSH
66848: CALL_OW 559
// wait ( 1 1$00 ) ;
66852: LD_INT 2100
66854: PPUSH
66855: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66859: LD_STRING hideTroll();
66861: PPUSH
66862: CALL_OW 559
// end ;
66866: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66867: LD_EXP 50
66871: PUSH
66872: LD_EXP 76
66876: AND
66877: IFFALSE 66940
66879: GO 66881
66881: DISABLE
66882: LD_INT 0
66884: PPUSH
// begin p := 0 ;
66885: LD_ADDR_VAR 0 1
66889: PUSH
66890: LD_INT 0
66892: ST_TO_ADDR
// repeat game_speed := 1 ;
66893: LD_ADDR_OWVAR 65
66897: PUSH
66898: LD_INT 1
66900: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66901: LD_INT 35
66903: PPUSH
66904: CALL_OW 67
// p := p + 1 ;
66908: LD_ADDR_VAR 0 1
66912: PUSH
66913: LD_VAR 0 1
66917: PUSH
66918: LD_INT 1
66920: PLUS
66921: ST_TO_ADDR
// until p >= 60 ;
66922: LD_VAR 0 1
66926: PUSH
66927: LD_INT 60
66929: GREATEREQUAL
66930: IFFALSE 66893
// game_speed := 4 ;
66932: LD_ADDR_OWVAR 65
66936: PUSH
66937: LD_INT 4
66939: ST_TO_ADDR
// end ;
66940: PPOPN 1
66942: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66943: LD_EXP 50
66947: PUSH
66948: LD_EXP 77
66952: AND
66953: IFFALSE 67099
66955: GO 66957
66957: DISABLE
66958: LD_INT 0
66960: PPUSH
66961: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66962: LD_ADDR_VAR 0 1
66966: PUSH
66967: LD_INT 22
66969: PUSH
66970: LD_OWVAR 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: LD_INT 30
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 30
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PPUSH
67011: CALL_OW 69
67015: ST_TO_ADDR
// if not depot then
67016: LD_VAR 0 1
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67099
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_VAR 0 1
67034: PUSH
67035: LD_INT 1
67037: PPUSH
67038: LD_VAR 0 1
67042: PPUSH
67043: CALL_OW 12
67047: ARRAY
67048: PPUSH
67049: CALL_OW 274
67053: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67054: LD_VAR 0 2
67058: PPUSH
67059: LD_INT 1
67061: PPUSH
67062: LD_INT 0
67064: PPUSH
67065: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67069: LD_VAR 0 2
67073: PPUSH
67074: LD_INT 2
67076: PPUSH
67077: LD_INT 0
67079: PPUSH
67080: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67084: LD_VAR 0 2
67088: PPUSH
67089: LD_INT 3
67091: PPUSH
67092: LD_INT 0
67094: PPUSH
67095: CALL_OW 277
// end ;
67099: PPOPN 2
67101: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67102: LD_EXP 50
67106: PUSH
67107: LD_EXP 78
67111: AND
67112: IFFALSE 67209
67114: GO 67116
67116: DISABLE
67117: LD_INT 0
67119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67120: LD_ADDR_VAR 0 1
67124: PUSH
67125: LD_INT 22
67127: PUSH
67128: LD_OWVAR 2
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 21
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 3
67149: PUSH
67150: LD_INT 23
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: LIST
67168: PPUSH
67169: CALL_OW 69
67173: ST_TO_ADDR
// if not tmp then
67174: LD_VAR 0 1
67178: NOT
67179: IFFALSE 67183
// exit ;
67181: GO 67209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67183: LD_VAR 0 1
67187: PUSH
67188: LD_INT 1
67190: PPUSH
67191: LD_VAR 0 1
67195: PPUSH
67196: CALL_OW 12
67200: ARRAY
67201: PPUSH
67202: LD_INT 200
67204: PPUSH
67205: CALL_OW 234
// end ;
67209: PPOPN 1
67211: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67212: LD_EXP 50
67216: PUSH
67217: LD_EXP 79
67221: AND
67222: IFFALSE 67301
67224: GO 67226
67226: DISABLE
67227: LD_INT 0
67229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67230: LD_ADDR_VAR 0 1
67234: PUSH
67235: LD_INT 22
67237: PUSH
67238: LD_OWVAR 2
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 21
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PPUSH
67261: CALL_OW 69
67265: ST_TO_ADDR
// if not tmp then
67266: LD_VAR 0 1
67270: NOT
67271: IFFALSE 67275
// exit ;
67273: GO 67301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67275: LD_VAR 0 1
67279: PUSH
67280: LD_INT 1
67282: PPUSH
67283: LD_VAR 0 1
67287: PPUSH
67288: CALL_OW 12
67292: ARRAY
67293: PPUSH
67294: LD_INT 60
67296: PPUSH
67297: CALL_OW 234
// end ;
67301: PPOPN 1
67303: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67304: LD_EXP 50
67308: PUSH
67309: LD_EXP 80
67313: AND
67314: IFFALSE 67413
67316: GO 67318
67318: DISABLE
67319: LD_INT 0
67321: PPUSH
67322: PPUSH
// begin enable ;
67323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67324: LD_ADDR_VAR 0 1
67328: PUSH
67329: LD_INT 22
67331: PUSH
67332: LD_OWVAR 2
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 61
67343: PUSH
67344: EMPTY
67345: LIST
67346: PUSH
67347: LD_INT 33
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: PPUSH
67362: CALL_OW 69
67366: ST_TO_ADDR
// if not tmp then
67367: LD_VAR 0 1
67371: NOT
67372: IFFALSE 67376
// exit ;
67374: GO 67413
// for i in tmp do
67376: LD_ADDR_VAR 0 2
67380: PUSH
67381: LD_VAR 0 1
67385: PUSH
67386: FOR_IN
67387: IFFALSE 67411
// if IsControledBy ( i ) then
67389: LD_VAR 0 2
67393: PPUSH
67394: CALL_OW 312
67398: IFFALSE 67409
// ComUnlink ( i ) ;
67400: LD_VAR 0 2
67404: PPUSH
67405: CALL_OW 136
67409: GO 67386
67411: POP
67412: POP
// end ;
67413: PPOPN 2
67415: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67416: LD_EXP 50
67420: PUSH
67421: LD_EXP 81
67425: AND
67426: IFFALSE 67566
67428: GO 67430
67430: DISABLE
67431: LD_INT 0
67433: PPUSH
67434: PPUSH
// begin ToLua ( displayPowell(); ) ;
67435: LD_STRING displayPowell();
67437: PPUSH
67438: CALL_OW 559
// uc_side := 0 ;
67442: LD_ADDR_OWVAR 20
67446: PUSH
67447: LD_INT 0
67449: ST_TO_ADDR
// uc_nation := 2 ;
67450: LD_ADDR_OWVAR 21
67454: PUSH
67455: LD_INT 2
67457: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67458: LD_ADDR_OWVAR 37
67462: PUSH
67463: LD_INT 14
67465: ST_TO_ADDR
// vc_engine := engine_siberite ;
67466: LD_ADDR_OWVAR 39
67470: PUSH
67471: LD_INT 3
67473: ST_TO_ADDR
// vc_control := control_apeman ;
67474: LD_ADDR_OWVAR 38
67478: PUSH
67479: LD_INT 5
67481: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67482: LD_ADDR_OWVAR 40
67486: PUSH
67487: LD_INT 29
67489: ST_TO_ADDR
// un := CreateVehicle ;
67490: LD_ADDR_VAR 0 2
67494: PUSH
67495: CALL_OW 45
67499: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67500: LD_VAR 0 2
67504: PPUSH
67505: LD_INT 1
67507: PPUSH
67508: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67512: LD_INT 35
67514: PPUSH
67515: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67519: LD_VAR 0 2
67523: PPUSH
67524: LD_INT 22
67526: PUSH
67527: LD_OWVAR 2
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PPUSH
67536: CALL_OW 69
67540: PPUSH
67541: LD_VAR 0 2
67545: PPUSH
67546: CALL_OW 74
67550: PPUSH
67551: CALL_OW 115
// until IsDead ( un ) ;
67555: LD_VAR 0 2
67559: PPUSH
67560: CALL_OW 301
67564: IFFALSE 67512
// end ;
67566: PPOPN 2
67568: END
// every 0 0$1 trigger StreamModeActive and sStu do
67569: LD_EXP 50
67573: PUSH
67574: LD_EXP 89
67578: AND
67579: IFFALSE 67595
67581: GO 67583
67583: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67584: LD_STRING displayStucuk();
67586: PPUSH
67587: CALL_OW 559
// ResetFog ;
67591: CALL_OW 335
// end ;
67595: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67596: LD_EXP 50
67600: PUSH
67601: LD_EXP 82
67605: AND
67606: IFFALSE 67747
67608: GO 67610
67610: DISABLE
67611: LD_INT 0
67613: PPUSH
67614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67615: LD_ADDR_VAR 0 2
67619: PUSH
67620: LD_INT 22
67622: PUSH
67623: LD_OWVAR 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 21
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PPUSH
67646: CALL_OW 69
67650: ST_TO_ADDR
// if not tmp then
67651: LD_VAR 0 2
67655: NOT
67656: IFFALSE 67660
// exit ;
67658: GO 67747
// un := tmp [ rand ( 1 , tmp ) ] ;
67660: LD_ADDR_VAR 0 1
67664: PUSH
67665: LD_VAR 0 2
67669: PUSH
67670: LD_INT 1
67672: PPUSH
67673: LD_VAR 0 2
67677: PPUSH
67678: CALL_OW 12
67682: ARRAY
67683: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67684: LD_VAR 0 1
67688: PPUSH
67689: LD_INT 0
67691: PPUSH
67692: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67696: LD_VAR 0 1
67700: PPUSH
67701: LD_OWVAR 3
67705: PUSH
67706: LD_VAR 0 1
67710: DIFF
67711: PPUSH
67712: LD_VAR 0 1
67716: PPUSH
67717: CALL_OW 74
67721: PPUSH
67722: CALL_OW 115
// wait ( 0 0$20 ) ;
67726: LD_INT 700
67728: PPUSH
67729: CALL_OW 67
// SetSide ( un , your_side ) ;
67733: LD_VAR 0 1
67737: PPUSH
67738: LD_OWVAR 2
67742: PPUSH
67743: CALL_OW 235
// end ;
67747: PPOPN 2
67749: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67750: LD_EXP 50
67754: PUSH
67755: LD_EXP 83
67759: AND
67760: IFFALSE 67866
67762: GO 67764
67764: DISABLE
67765: LD_INT 0
67767: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67768: LD_ADDR_VAR 0 1
67772: PUSH
67773: LD_INT 22
67775: PUSH
67776: LD_OWVAR 2
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: LD_INT 30
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 30
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PPUSH
67817: CALL_OW 69
67821: ST_TO_ADDR
// if not depot then
67822: LD_VAR 0 1
67826: NOT
67827: IFFALSE 67831
// exit ;
67829: GO 67866
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67831: LD_VAR 0 1
67835: PUSH
67836: LD_INT 1
67838: ARRAY
67839: PPUSH
67840: CALL_OW 250
67844: PPUSH
67845: LD_VAR 0 1
67849: PUSH
67850: LD_INT 1
67852: ARRAY
67853: PPUSH
67854: CALL_OW 251
67858: PPUSH
67859: LD_INT 70
67861: PPUSH
67862: CALL_OW 495
// end ;
67866: PPOPN 1
67868: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67869: LD_EXP 50
67873: PUSH
67874: LD_EXP 84
67878: AND
67879: IFFALSE 68090
67881: GO 67883
67883: DISABLE
67884: LD_INT 0
67886: PPUSH
67887: PPUSH
67888: PPUSH
67889: PPUSH
67890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67891: LD_ADDR_VAR 0 5
67895: PUSH
67896: LD_INT 22
67898: PUSH
67899: LD_OWVAR 2
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 21
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PPUSH
67922: CALL_OW 69
67926: ST_TO_ADDR
// if not tmp then
67927: LD_VAR 0 5
67931: NOT
67932: IFFALSE 67936
// exit ;
67934: GO 68090
// for i in tmp do
67936: LD_ADDR_VAR 0 1
67940: PUSH
67941: LD_VAR 0 5
67945: PUSH
67946: FOR_IN
67947: IFFALSE 68088
// begin d := rand ( 0 , 5 ) ;
67949: LD_ADDR_VAR 0 4
67953: PUSH
67954: LD_INT 0
67956: PPUSH
67957: LD_INT 5
67959: PPUSH
67960: CALL_OW 12
67964: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67965: LD_ADDR_VAR 0 2
67969: PUSH
67970: LD_VAR 0 1
67974: PPUSH
67975: CALL_OW 250
67979: PPUSH
67980: LD_VAR 0 4
67984: PPUSH
67985: LD_INT 3
67987: PPUSH
67988: LD_INT 12
67990: PPUSH
67991: CALL_OW 12
67995: PPUSH
67996: CALL_OW 272
68000: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68001: LD_ADDR_VAR 0 3
68005: PUSH
68006: LD_VAR 0 1
68010: PPUSH
68011: CALL_OW 251
68015: PPUSH
68016: LD_VAR 0 4
68020: PPUSH
68021: LD_INT 3
68023: PPUSH
68024: LD_INT 12
68026: PPUSH
68027: CALL_OW 12
68031: PPUSH
68032: CALL_OW 273
68036: ST_TO_ADDR
// if ValidHex ( x , y ) then
68037: LD_VAR 0 2
68041: PPUSH
68042: LD_VAR 0 3
68046: PPUSH
68047: CALL_OW 488
68051: IFFALSE 68086
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68053: LD_VAR 0 1
68057: PPUSH
68058: LD_VAR 0 2
68062: PPUSH
68063: LD_VAR 0 3
68067: PPUSH
68068: LD_INT 3
68070: PPUSH
68071: LD_INT 6
68073: PPUSH
68074: CALL_OW 12
68078: PPUSH
68079: LD_INT 1
68081: PPUSH
68082: CALL_OW 483
// end ;
68086: GO 67946
68088: POP
68089: POP
// end ;
68090: PPOPN 5
68092: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68093: LD_EXP 50
68097: PUSH
68098: LD_EXP 85
68102: AND
68103: IFFALSE 68197
68105: GO 68107
68107: DISABLE
68108: LD_INT 0
68110: PPUSH
68111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68112: LD_ADDR_VAR 0 2
68116: PUSH
68117: LD_INT 22
68119: PUSH
68120: LD_OWVAR 2
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 32
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 21
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: PPUSH
68154: CALL_OW 69
68158: ST_TO_ADDR
// if not tmp then
68159: LD_VAR 0 2
68163: NOT
68164: IFFALSE 68168
// exit ;
68166: GO 68197
// for i in tmp do
68168: LD_ADDR_VAR 0 1
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: FOR_IN
68179: IFFALSE 68195
// SetFuel ( i , 0 ) ;
68181: LD_VAR 0 1
68185: PPUSH
68186: LD_INT 0
68188: PPUSH
68189: CALL_OW 240
68193: GO 68178
68195: POP
68196: POP
// end ;
68197: PPOPN 2
68199: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68200: LD_EXP 50
68204: PUSH
68205: LD_EXP 86
68209: AND
68210: IFFALSE 68276
68212: GO 68214
68214: DISABLE
68215: LD_INT 0
68217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68218: LD_ADDR_VAR 0 1
68222: PUSH
68223: LD_INT 22
68225: PUSH
68226: LD_OWVAR 2
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 30
68237: PUSH
68238: LD_INT 29
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PPUSH
68249: CALL_OW 69
68253: ST_TO_ADDR
// if not tmp then
68254: LD_VAR 0 1
68258: NOT
68259: IFFALSE 68263
// exit ;
68261: GO 68276
// DestroyUnit ( tmp [ 1 ] ) ;
68263: LD_VAR 0 1
68267: PUSH
68268: LD_INT 1
68270: ARRAY
68271: PPUSH
68272: CALL_OW 65
// end ;
68276: PPOPN 1
68278: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68279: LD_EXP 50
68283: PUSH
68284: LD_EXP 88
68288: AND
68289: IFFALSE 68418
68291: GO 68293
68293: DISABLE
68294: LD_INT 0
68296: PPUSH
// begin uc_side := 0 ;
68297: LD_ADDR_OWVAR 20
68301: PUSH
68302: LD_INT 0
68304: ST_TO_ADDR
// uc_nation := nation_arabian ;
68305: LD_ADDR_OWVAR 21
68309: PUSH
68310: LD_INT 2
68312: ST_TO_ADDR
// hc_gallery :=  ;
68313: LD_ADDR_OWVAR 33
68317: PUSH
68318: LD_STRING 
68320: ST_TO_ADDR
// hc_name :=  ;
68321: LD_ADDR_OWVAR 26
68325: PUSH
68326: LD_STRING 
68328: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68329: LD_INT 1
68331: PPUSH
68332: LD_INT 11
68334: PPUSH
68335: LD_INT 10
68337: PPUSH
68338: CALL_OW 380
// un := CreateHuman ;
68342: LD_ADDR_VAR 0 1
68346: PUSH
68347: CALL_OW 44
68351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68352: LD_VAR 0 1
68356: PPUSH
68357: LD_INT 1
68359: PPUSH
68360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68364: LD_INT 35
68366: PPUSH
68367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68371: LD_VAR 0 1
68375: PPUSH
68376: LD_INT 22
68378: PUSH
68379: LD_OWVAR 2
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PPUSH
68388: CALL_OW 69
68392: PPUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 74
68402: PPUSH
68403: CALL_OW 115
// until IsDead ( un ) ;
68407: LD_VAR 0 1
68411: PPUSH
68412: CALL_OW 301
68416: IFFALSE 68364
// end ;
68418: PPOPN 1
68420: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68421: LD_EXP 50
68425: PUSH
68426: LD_EXP 90
68430: AND
68431: IFFALSE 68443
68433: GO 68435
68435: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68436: LD_STRING earthquake(getX(game), 0, 32)
68438: PPUSH
68439: CALL_OW 559
68443: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68444: LD_EXP 50
68448: PUSH
68449: LD_EXP 91
68453: AND
68454: IFFALSE 68545
68456: GO 68458
68458: DISABLE
68459: LD_INT 0
68461: PPUSH
// begin enable ;
68462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68463: LD_ADDR_VAR 0 1
68467: PUSH
68468: LD_INT 22
68470: PUSH
68471: LD_OWVAR 2
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 21
68482: PUSH
68483: LD_INT 2
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 33
68492: PUSH
68493: LD_INT 3
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: LIST
68504: PPUSH
68505: CALL_OW 69
68509: ST_TO_ADDR
// if not tmp then
68510: LD_VAR 0 1
68514: NOT
68515: IFFALSE 68519
// exit ;
68517: GO 68545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68519: LD_VAR 0 1
68523: PUSH
68524: LD_INT 1
68526: PPUSH
68527: LD_VAR 0 1
68531: PPUSH
68532: CALL_OW 12
68536: ARRAY
68537: PPUSH
68538: LD_INT 1
68540: PPUSH
68541: CALL_OW 234
// end ;
68545: PPOPN 1
68547: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68548: LD_EXP 50
68552: PUSH
68553: LD_EXP 92
68557: AND
68558: IFFALSE 68699
68560: GO 68562
68562: DISABLE
68563: LD_INT 0
68565: PPUSH
68566: PPUSH
68567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68568: LD_ADDR_VAR 0 3
68572: PUSH
68573: LD_INT 22
68575: PUSH
68576: LD_OWVAR 2
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 25
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PPUSH
68599: CALL_OW 69
68603: ST_TO_ADDR
// if not tmp then
68604: LD_VAR 0 3
68608: NOT
68609: IFFALSE 68613
// exit ;
68611: GO 68699
// un := tmp [ rand ( 1 , tmp ) ] ;
68613: LD_ADDR_VAR 0 2
68617: PUSH
68618: LD_VAR 0 3
68622: PUSH
68623: LD_INT 1
68625: PPUSH
68626: LD_VAR 0 3
68630: PPUSH
68631: CALL_OW 12
68635: ARRAY
68636: ST_TO_ADDR
// if Crawls ( un ) then
68637: LD_VAR 0 2
68641: PPUSH
68642: CALL_OW 318
68646: IFFALSE 68657
// ComWalk ( un ) ;
68648: LD_VAR 0 2
68652: PPUSH
68653: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68657: LD_VAR 0 2
68661: PPUSH
68662: LD_INT 9
68664: PPUSH
68665: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68669: LD_INT 28
68671: PPUSH
68672: LD_OWVAR 2
68676: PPUSH
68677: LD_INT 2
68679: PPUSH
68680: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68684: LD_INT 29
68686: PPUSH
68687: LD_OWVAR 2
68691: PPUSH
68692: LD_INT 2
68694: PPUSH
68695: CALL_OW 322
// end ;
68699: PPOPN 3
68701: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68702: LD_EXP 50
68706: PUSH
68707: LD_EXP 93
68711: AND
68712: IFFALSE 68823
68714: GO 68716
68716: DISABLE
68717: LD_INT 0
68719: PPUSH
68720: PPUSH
68721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68722: LD_ADDR_VAR 0 3
68726: PUSH
68727: LD_INT 22
68729: PUSH
68730: LD_OWVAR 2
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 25
68741: PUSH
68742: LD_INT 1
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PPUSH
68753: CALL_OW 69
68757: ST_TO_ADDR
// if not tmp then
68758: LD_VAR 0 3
68762: NOT
68763: IFFALSE 68767
// exit ;
68765: GO 68823
// un := tmp [ rand ( 1 , tmp ) ] ;
68767: LD_ADDR_VAR 0 2
68771: PUSH
68772: LD_VAR 0 3
68776: PUSH
68777: LD_INT 1
68779: PPUSH
68780: LD_VAR 0 3
68784: PPUSH
68785: CALL_OW 12
68789: ARRAY
68790: ST_TO_ADDR
// if Crawls ( un ) then
68791: LD_VAR 0 2
68795: PPUSH
68796: CALL_OW 318
68800: IFFALSE 68811
// ComWalk ( un ) ;
68802: LD_VAR 0 2
68806: PPUSH
68807: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68811: LD_VAR 0 2
68815: PPUSH
68816: LD_INT 8
68818: PPUSH
68819: CALL_OW 336
// end ;
68823: PPOPN 3
68825: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68826: LD_EXP 50
68830: PUSH
68831: LD_EXP 94
68835: AND
68836: IFFALSE 68980
68838: GO 68840
68840: DISABLE
68841: LD_INT 0
68843: PPUSH
68844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68845: LD_ADDR_VAR 0 2
68849: PUSH
68850: LD_INT 22
68852: PUSH
68853: LD_OWVAR 2
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 21
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: LD_INT 34
68877: PUSH
68878: LD_INT 12
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 34
68887: PUSH
68888: LD_INT 51
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 34
68897: PUSH
68898: LD_INT 32
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: PPUSH
68916: CALL_OW 69
68920: ST_TO_ADDR
// if not tmp then
68921: LD_VAR 0 2
68925: NOT
68926: IFFALSE 68930
// exit ;
68928: GO 68980
// for i in tmp do
68930: LD_ADDR_VAR 0 1
68934: PUSH
68935: LD_VAR 0 2
68939: PUSH
68940: FOR_IN
68941: IFFALSE 68978
// if GetCargo ( i , mat_artifact ) = 0 then
68943: LD_VAR 0 1
68947: PPUSH
68948: LD_INT 4
68950: PPUSH
68951: CALL_OW 289
68955: PUSH
68956: LD_INT 0
68958: EQUAL
68959: IFFALSE 68976
// SetCargo ( i , mat_siberit , 100 ) ;
68961: LD_VAR 0 1
68965: PPUSH
68966: LD_INT 3
68968: PPUSH
68969: LD_INT 100
68971: PPUSH
68972: CALL_OW 290
68976: GO 68940
68978: POP
68979: POP
// end ;
68980: PPOPN 2
68982: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68983: LD_EXP 50
68987: PUSH
68988: LD_EXP 95
68992: AND
68993: IFFALSE 69176
68995: GO 68997
68997: DISABLE
68998: LD_INT 0
69000: PPUSH
69001: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69002: LD_ADDR_VAR 0 2
69006: PUSH
69007: LD_INT 22
69009: PUSH
69010: LD_OWVAR 2
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PPUSH
69019: CALL_OW 69
69023: ST_TO_ADDR
// if not tmp then
69024: LD_VAR 0 2
69028: NOT
69029: IFFALSE 69033
// exit ;
69031: GO 69176
// for i := 1 to 2 do
69033: LD_ADDR_VAR 0 1
69037: PUSH
69038: DOUBLE
69039: LD_INT 1
69041: DEC
69042: ST_TO_ADDR
69043: LD_INT 2
69045: PUSH
69046: FOR_TO
69047: IFFALSE 69174
// begin uc_side := your_side ;
69049: LD_ADDR_OWVAR 20
69053: PUSH
69054: LD_OWVAR 2
69058: ST_TO_ADDR
// uc_nation := nation_american ;
69059: LD_ADDR_OWVAR 21
69063: PUSH
69064: LD_INT 1
69066: ST_TO_ADDR
// vc_chassis := us_morphling ;
69067: LD_ADDR_OWVAR 37
69071: PUSH
69072: LD_INT 5
69074: ST_TO_ADDR
// vc_engine := engine_siberite ;
69075: LD_ADDR_OWVAR 39
69079: PUSH
69080: LD_INT 3
69082: ST_TO_ADDR
// vc_control := control_computer ;
69083: LD_ADDR_OWVAR 38
69087: PUSH
69088: LD_INT 3
69090: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69091: LD_ADDR_OWVAR 40
69095: PUSH
69096: LD_INT 10
69098: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69099: LD_VAR 0 2
69103: PUSH
69104: LD_INT 1
69106: ARRAY
69107: PPUSH
69108: CALL_OW 310
69112: NOT
69113: IFFALSE 69160
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69115: CALL_OW 45
69119: PPUSH
69120: LD_VAR 0 2
69124: PUSH
69125: LD_INT 1
69127: ARRAY
69128: PPUSH
69129: CALL_OW 250
69133: PPUSH
69134: LD_VAR 0 2
69138: PUSH
69139: LD_INT 1
69141: ARRAY
69142: PPUSH
69143: CALL_OW 251
69147: PPUSH
69148: LD_INT 12
69150: PPUSH
69151: LD_INT 1
69153: PPUSH
69154: CALL_OW 50
69158: GO 69172
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69160: CALL_OW 45
69164: PPUSH
69165: LD_INT 1
69167: PPUSH
69168: CALL_OW 51
// end ;
69172: GO 69046
69174: POP
69175: POP
// end ;
69176: PPOPN 2
69178: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69179: LD_EXP 50
69183: PUSH
69184: LD_EXP 96
69188: AND
69189: IFFALSE 69411
69191: GO 69193
69193: DISABLE
69194: LD_INT 0
69196: PPUSH
69197: PPUSH
69198: PPUSH
69199: PPUSH
69200: PPUSH
69201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69202: LD_ADDR_VAR 0 6
69206: PUSH
69207: LD_INT 22
69209: PUSH
69210: LD_OWVAR 2
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 21
69221: PUSH
69222: LD_INT 1
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: LD_INT 23
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: LIST
69250: PPUSH
69251: CALL_OW 69
69255: ST_TO_ADDR
// if not tmp then
69256: LD_VAR 0 6
69260: NOT
69261: IFFALSE 69265
// exit ;
69263: GO 69411
// s1 := rand ( 1 , 4 ) ;
69265: LD_ADDR_VAR 0 2
69269: PUSH
69270: LD_INT 1
69272: PPUSH
69273: LD_INT 4
69275: PPUSH
69276: CALL_OW 12
69280: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69281: LD_ADDR_VAR 0 4
69285: PUSH
69286: LD_VAR 0 6
69290: PUSH
69291: LD_INT 1
69293: ARRAY
69294: PPUSH
69295: LD_VAR 0 2
69299: PPUSH
69300: CALL_OW 259
69304: ST_TO_ADDR
// if s1 = 1 then
69305: LD_VAR 0 2
69309: PUSH
69310: LD_INT 1
69312: EQUAL
69313: IFFALSE 69333
// s2 := rand ( 2 , 4 ) else
69315: LD_ADDR_VAR 0 3
69319: PUSH
69320: LD_INT 2
69322: PPUSH
69323: LD_INT 4
69325: PPUSH
69326: CALL_OW 12
69330: ST_TO_ADDR
69331: GO 69341
// s2 := 1 ;
69333: LD_ADDR_VAR 0 3
69337: PUSH
69338: LD_INT 1
69340: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69341: LD_ADDR_VAR 0 5
69345: PUSH
69346: LD_VAR 0 6
69350: PUSH
69351: LD_INT 1
69353: ARRAY
69354: PPUSH
69355: LD_VAR 0 3
69359: PPUSH
69360: CALL_OW 259
69364: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69365: LD_VAR 0 6
69369: PUSH
69370: LD_INT 1
69372: ARRAY
69373: PPUSH
69374: LD_VAR 0 2
69378: PPUSH
69379: LD_VAR 0 5
69383: PPUSH
69384: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69388: LD_VAR 0 6
69392: PUSH
69393: LD_INT 1
69395: ARRAY
69396: PPUSH
69397: LD_VAR 0 3
69401: PPUSH
69402: LD_VAR 0 4
69406: PPUSH
69407: CALL_OW 237
// end ;
69411: PPOPN 6
69413: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69414: LD_EXP 50
69418: PUSH
69419: LD_EXP 97
69423: AND
69424: IFFALSE 69503
69426: GO 69428
69428: DISABLE
69429: LD_INT 0
69431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69432: LD_ADDR_VAR 0 1
69436: PUSH
69437: LD_INT 22
69439: PUSH
69440: LD_OWVAR 2
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 30
69451: PUSH
69452: LD_INT 3
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PPUSH
69463: CALL_OW 69
69467: ST_TO_ADDR
// if not tmp then
69468: LD_VAR 0 1
69472: NOT
69473: IFFALSE 69477
// exit ;
69475: GO 69503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69477: LD_VAR 0 1
69481: PUSH
69482: LD_INT 1
69484: PPUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 12
69494: ARRAY
69495: PPUSH
69496: LD_INT 1
69498: PPUSH
69499: CALL_OW 234
// end ;
69503: PPOPN 1
69505: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69506: LD_EXP 50
69510: PUSH
69511: LD_EXP 98
69515: AND
69516: IFFALSE 69628
69518: GO 69520
69520: DISABLE
69521: LD_INT 0
69523: PPUSH
69524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69525: LD_ADDR_VAR 0 2
69529: PUSH
69530: LD_INT 22
69532: PUSH
69533: LD_OWVAR 2
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: LD_INT 30
69547: PUSH
69548: LD_INT 27
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 30
69557: PUSH
69558: LD_INT 26
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 30
69567: PUSH
69568: LD_INT 28
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PPUSH
69585: CALL_OW 69
69589: ST_TO_ADDR
// if not tmp then
69590: LD_VAR 0 2
69594: NOT
69595: IFFALSE 69599
// exit ;
69597: GO 69628
// for i in tmp do
69599: LD_ADDR_VAR 0 1
69603: PUSH
69604: LD_VAR 0 2
69608: PUSH
69609: FOR_IN
69610: IFFALSE 69626
// SetLives ( i , 1 ) ;
69612: LD_VAR 0 1
69616: PPUSH
69617: LD_INT 1
69619: PPUSH
69620: CALL_OW 234
69624: GO 69609
69626: POP
69627: POP
// end ;
69628: PPOPN 2
69630: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69631: LD_EXP 50
69635: PUSH
69636: LD_EXP 99
69640: AND
69641: IFFALSE 69928
69643: GO 69645
69645: DISABLE
69646: LD_INT 0
69648: PPUSH
69649: PPUSH
69650: PPUSH
// begin i := rand ( 1 , 7 ) ;
69651: LD_ADDR_VAR 0 1
69655: PUSH
69656: LD_INT 1
69658: PPUSH
69659: LD_INT 7
69661: PPUSH
69662: CALL_OW 12
69666: ST_TO_ADDR
// case i of 1 :
69667: LD_VAR 0 1
69671: PUSH
69672: LD_INT 1
69674: DOUBLE
69675: EQUAL
69676: IFTRUE 69680
69678: GO 69690
69680: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69681: LD_STRING earthquake(getX(game), 0, 32)
69683: PPUSH
69684: CALL_OW 559
69688: GO 69928
69690: LD_INT 2
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69698
69696: GO 69712
69698: POP
// begin ToLua ( displayStucuk(); ) ;
69699: LD_STRING displayStucuk();
69701: PPUSH
69702: CALL_OW 559
// ResetFog ;
69706: CALL_OW 335
// end ; 3 :
69710: GO 69928
69712: LD_INT 3
69714: DOUBLE
69715: EQUAL
69716: IFTRUE 69720
69718: GO 69824
69720: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69721: LD_ADDR_VAR 0 2
69725: PUSH
69726: LD_INT 22
69728: PUSH
69729: LD_OWVAR 2
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 25
69740: PUSH
69741: LD_INT 1
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PPUSH
69752: CALL_OW 69
69756: ST_TO_ADDR
// if not tmp then
69757: LD_VAR 0 2
69761: NOT
69762: IFFALSE 69766
// exit ;
69764: GO 69928
// un := tmp [ rand ( 1 , tmp ) ] ;
69766: LD_ADDR_VAR 0 3
69770: PUSH
69771: LD_VAR 0 2
69775: PUSH
69776: LD_INT 1
69778: PPUSH
69779: LD_VAR 0 2
69783: PPUSH
69784: CALL_OW 12
69788: ARRAY
69789: ST_TO_ADDR
// if Crawls ( un ) then
69790: LD_VAR 0 3
69794: PPUSH
69795: CALL_OW 318
69799: IFFALSE 69810
// ComWalk ( un ) ;
69801: LD_VAR 0 3
69805: PPUSH
69806: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69810: LD_VAR 0 3
69814: PPUSH
69815: LD_INT 8
69817: PPUSH
69818: CALL_OW 336
// end ; 4 :
69822: GO 69928
69824: LD_INT 4
69826: DOUBLE
69827: EQUAL
69828: IFTRUE 69832
69830: GO 69906
69832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69833: LD_ADDR_VAR 0 2
69837: PUSH
69838: LD_INT 22
69840: PUSH
69841: LD_OWVAR 2
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 30
69852: PUSH
69853: LD_INT 29
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PPUSH
69864: CALL_OW 69
69868: ST_TO_ADDR
// if not tmp then
69869: LD_VAR 0 2
69873: NOT
69874: IFFALSE 69878
// exit ;
69876: GO 69928
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69878: LD_VAR 0 2
69882: PUSH
69883: LD_INT 1
69885: ARRAY
69886: PPUSH
69887: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69891: LD_VAR 0 2
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: PPUSH
69900: CALL_OW 65
// end ; 5 .. 7 :
69904: GO 69928
69906: LD_INT 5
69908: DOUBLE
69909: GREATEREQUAL
69910: IFFALSE 69918
69912: LD_INT 7
69914: DOUBLE
69915: LESSEQUAL
69916: IFTRUE 69920
69918: GO 69927
69920: POP
// StreamSibBomb ; end ;
69921: CALL 66165 0 0
69925: GO 69928
69927: POP
// end ;
69928: PPOPN 3
69930: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69931: LD_EXP 50
69935: PUSH
69936: LD_EXP 100
69940: AND
69941: IFFALSE 70097
69943: GO 69945
69945: DISABLE
69946: LD_INT 0
69948: PPUSH
69949: PPUSH
69950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69951: LD_ADDR_VAR 0 2
69955: PUSH
69956: LD_INT 81
69958: PUSH
69959: LD_OWVAR 2
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: PUSH
69971: LD_INT 21
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 21
69983: PUSH
69984: LD_INT 2
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: LIST
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PPUSH
70000: CALL_OW 69
70004: ST_TO_ADDR
// if not tmp then
70005: LD_VAR 0 2
70009: NOT
70010: IFFALSE 70014
// exit ;
70012: GO 70097
// p := 0 ;
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: LD_INT 0
70021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70022: LD_INT 35
70024: PPUSH
70025: CALL_OW 67
// p := p + 1 ;
70029: LD_ADDR_VAR 0 3
70033: PUSH
70034: LD_VAR 0 3
70038: PUSH
70039: LD_INT 1
70041: PLUS
70042: ST_TO_ADDR
// for i in tmp do
70043: LD_ADDR_VAR 0 1
70047: PUSH
70048: LD_VAR 0 2
70052: PUSH
70053: FOR_IN
70054: IFFALSE 70085
// if GetLives ( i ) < 1000 then
70056: LD_VAR 0 1
70060: PPUSH
70061: CALL_OW 256
70065: PUSH
70066: LD_INT 1000
70068: LESS
70069: IFFALSE 70083
// SetLives ( i , 1000 ) ;
70071: LD_VAR 0 1
70075: PPUSH
70076: LD_INT 1000
70078: PPUSH
70079: CALL_OW 234
70083: GO 70053
70085: POP
70086: POP
// until p > 20 ;
70087: LD_VAR 0 3
70091: PUSH
70092: LD_INT 20
70094: GREATER
70095: IFFALSE 70022
// end ;
70097: PPOPN 3
70099: END
// every 0 0$1 trigger StreamModeActive and sTime do
70100: LD_EXP 50
70104: PUSH
70105: LD_EXP 101
70109: AND
70110: IFFALSE 70145
70112: GO 70114
70114: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70115: LD_INT 28
70117: PPUSH
70118: LD_OWVAR 2
70122: PPUSH
70123: LD_INT 2
70125: PPUSH
70126: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70130: LD_INT 30
70132: PPUSH
70133: LD_OWVAR 2
70137: PPUSH
70138: LD_INT 2
70140: PPUSH
70141: CALL_OW 322
// end ;
70145: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70146: LD_EXP 50
70150: PUSH
70151: LD_EXP 102
70155: AND
70156: IFFALSE 70277
70158: GO 70160
70160: DISABLE
70161: LD_INT 0
70163: PPUSH
70164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70165: LD_ADDR_VAR 0 2
70169: PUSH
70170: LD_INT 22
70172: PUSH
70173: LD_OWVAR 2
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 21
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 3
70194: PUSH
70195: LD_INT 23
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: LIST
70213: PPUSH
70214: CALL_OW 69
70218: ST_TO_ADDR
// if not tmp then
70219: LD_VAR 0 2
70223: NOT
70224: IFFALSE 70228
// exit ;
70226: GO 70277
// for i in tmp do
70228: LD_ADDR_VAR 0 1
70232: PUSH
70233: LD_VAR 0 2
70237: PUSH
70238: FOR_IN
70239: IFFALSE 70275
// begin if Crawls ( i ) then
70241: LD_VAR 0 1
70245: PPUSH
70246: CALL_OW 318
70250: IFFALSE 70261
// ComWalk ( i ) ;
70252: LD_VAR 0 1
70256: PPUSH
70257: CALL_OW 138
// SetClass ( i , 2 ) ;
70261: LD_VAR 0 1
70265: PPUSH
70266: LD_INT 2
70268: PPUSH
70269: CALL_OW 336
// end ;
70273: GO 70238
70275: POP
70276: POP
// end ;
70277: PPOPN 2
70279: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70280: LD_EXP 50
70284: PUSH
70285: LD_EXP 103
70289: AND
70290: IFFALSE 70578
70292: GO 70294
70294: DISABLE
70295: LD_INT 0
70297: PPUSH
70298: PPUSH
70299: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70300: LD_OWVAR 2
70304: PPUSH
70305: LD_INT 9
70307: PPUSH
70308: LD_INT 1
70310: PPUSH
70311: LD_INT 1
70313: PPUSH
70314: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70318: LD_INT 9
70320: PPUSH
70321: LD_OWVAR 2
70325: PPUSH
70326: CALL_OW 343
// uc_side := 9 ;
70330: LD_ADDR_OWVAR 20
70334: PUSH
70335: LD_INT 9
70337: ST_TO_ADDR
// uc_nation := 2 ;
70338: LD_ADDR_OWVAR 21
70342: PUSH
70343: LD_INT 2
70345: ST_TO_ADDR
// hc_name := Dark Warrior ;
70346: LD_ADDR_OWVAR 26
70350: PUSH
70351: LD_STRING Dark Warrior
70353: ST_TO_ADDR
// hc_gallery :=  ;
70354: LD_ADDR_OWVAR 33
70358: PUSH
70359: LD_STRING 
70361: ST_TO_ADDR
// hc_noskilllimit := true ;
70362: LD_ADDR_OWVAR 76
70366: PUSH
70367: LD_INT 1
70369: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70370: LD_ADDR_OWVAR 31
70374: PUSH
70375: LD_INT 30
70377: PUSH
70378: LD_INT 30
70380: PUSH
70381: LD_INT 30
70383: PUSH
70384: LD_INT 30
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: ST_TO_ADDR
// un := CreateHuman ;
70393: LD_ADDR_VAR 0 3
70397: PUSH
70398: CALL_OW 44
70402: ST_TO_ADDR
// hc_noskilllimit := false ;
70403: LD_ADDR_OWVAR 76
70407: PUSH
70408: LD_INT 0
70410: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70411: LD_VAR 0 3
70415: PPUSH
70416: LD_INT 1
70418: PPUSH
70419: CALL_OW 51
// ToLua ( playRanger() ) ;
70423: LD_STRING playRanger()
70425: PPUSH
70426: CALL_OW 559
// p := 0 ;
70430: LD_ADDR_VAR 0 2
70434: PUSH
70435: LD_INT 0
70437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70438: LD_INT 35
70440: PPUSH
70441: CALL_OW 67
// p := p + 1 ;
70445: LD_ADDR_VAR 0 2
70449: PUSH
70450: LD_VAR 0 2
70454: PUSH
70455: LD_INT 1
70457: PLUS
70458: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70459: LD_VAR 0 3
70463: PPUSH
70464: CALL_OW 256
70468: PUSH
70469: LD_INT 1000
70471: LESS
70472: IFFALSE 70486
// SetLives ( un , 1000 ) ;
70474: LD_VAR 0 3
70478: PPUSH
70479: LD_INT 1000
70481: PPUSH
70482: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70486: LD_VAR 0 3
70490: PPUSH
70491: LD_INT 81
70493: PUSH
70494: LD_OWVAR 2
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 91
70505: PUSH
70506: LD_VAR 0 3
70510: PUSH
70511: LD_INT 30
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PPUSH
70523: CALL_OW 69
70527: PPUSH
70528: LD_VAR 0 3
70532: PPUSH
70533: CALL_OW 74
70537: PPUSH
70538: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70542: LD_VAR 0 2
70546: PUSH
70547: LD_INT 80
70549: GREATER
70550: PUSH
70551: LD_VAR 0 3
70555: PPUSH
70556: CALL_OW 301
70560: OR
70561: IFFALSE 70438
// if un then
70563: LD_VAR 0 3
70567: IFFALSE 70578
// RemoveUnit ( un ) ;
70569: LD_VAR 0 3
70573: PPUSH
70574: CALL_OW 64
// end ;
70578: PPOPN 3
70580: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70581: LD_EXP 104
70585: IFFALSE 70701
70587: GO 70589
70589: DISABLE
70590: LD_INT 0
70592: PPUSH
70593: PPUSH
70594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70595: LD_ADDR_VAR 0 2
70599: PUSH
70600: LD_INT 81
70602: PUSH
70603: LD_OWVAR 2
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 21
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PPUSH
70626: CALL_OW 69
70630: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70631: LD_STRING playComputer()
70633: PPUSH
70634: CALL_OW 559
// if not tmp then
70638: LD_VAR 0 2
70642: NOT
70643: IFFALSE 70647
// exit ;
70645: GO 70701
// for i in tmp do
70647: LD_ADDR_VAR 0 1
70651: PUSH
70652: LD_VAR 0 2
70656: PUSH
70657: FOR_IN
70658: IFFALSE 70699
// for j := 1 to 4 do
70660: LD_ADDR_VAR 0 3
70664: PUSH
70665: DOUBLE
70666: LD_INT 1
70668: DEC
70669: ST_TO_ADDR
70670: LD_INT 4
70672: PUSH
70673: FOR_TO
70674: IFFALSE 70695
// SetSkill ( i , j , 10 ) ;
70676: LD_VAR 0 1
70680: PPUSH
70681: LD_VAR 0 3
70685: PPUSH
70686: LD_INT 10
70688: PPUSH
70689: CALL_OW 237
70693: GO 70673
70695: POP
70696: POP
70697: GO 70657
70699: POP
70700: POP
// end ;
70701: PPOPN 3
70703: END
// every 0 0$1 trigger s30 do var i , tmp ;
70704: LD_EXP 105
70708: IFFALSE 70777
70710: GO 70712
70712: DISABLE
70713: LD_INT 0
70715: PPUSH
70716: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70717: LD_ADDR_VAR 0 2
70721: PUSH
70722: LD_INT 22
70724: PUSH
70725: LD_OWVAR 2
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PPUSH
70734: CALL_OW 69
70738: ST_TO_ADDR
// if not tmp then
70739: LD_VAR 0 2
70743: NOT
70744: IFFALSE 70748
// exit ;
70746: GO 70777
// for i in tmp do
70748: LD_ADDR_VAR 0 1
70752: PUSH
70753: LD_VAR 0 2
70757: PUSH
70758: FOR_IN
70759: IFFALSE 70775
// SetLives ( i , 300 ) ;
70761: LD_VAR 0 1
70765: PPUSH
70766: LD_INT 300
70768: PPUSH
70769: CALL_OW 234
70773: GO 70758
70775: POP
70776: POP
// end ;
70777: PPOPN 2
70779: END
// every 0 0$1 trigger s60 do var i , tmp ;
70780: LD_EXP 106
70784: IFFALSE 70853
70786: GO 70788
70788: DISABLE
70789: LD_INT 0
70791: PPUSH
70792: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70793: LD_ADDR_VAR 0 2
70797: PUSH
70798: LD_INT 22
70800: PUSH
70801: LD_OWVAR 2
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PPUSH
70810: CALL_OW 69
70814: ST_TO_ADDR
// if not tmp then
70815: LD_VAR 0 2
70819: NOT
70820: IFFALSE 70824
// exit ;
70822: GO 70853
// for i in tmp do
70824: LD_ADDR_VAR 0 1
70828: PUSH
70829: LD_VAR 0 2
70833: PUSH
70834: FOR_IN
70835: IFFALSE 70851
// SetLives ( i , 600 ) ;
70837: LD_VAR 0 1
70841: PPUSH
70842: LD_INT 600
70844: PPUSH
70845: CALL_OW 234
70849: GO 70834
70851: POP
70852: POP
// end ;
70853: PPOPN 2
70855: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70856: LD_INT 0
70858: PPUSH
// case cmd of 301 :
70859: LD_VAR 0 1
70863: PUSH
70864: LD_INT 301
70866: DOUBLE
70867: EQUAL
70868: IFTRUE 70872
70870: GO 70904
70872: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70873: LD_VAR 0 6
70877: PPUSH
70878: LD_VAR 0 7
70882: PPUSH
70883: LD_VAR 0 8
70887: PPUSH
70888: LD_VAR 0 4
70892: PPUSH
70893: LD_VAR 0 5
70897: PPUSH
70898: CALL 72105 0 5
70902: GO 71025
70904: LD_INT 302
70906: DOUBLE
70907: EQUAL
70908: IFTRUE 70912
70910: GO 70949
70912: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70913: LD_VAR 0 6
70917: PPUSH
70918: LD_VAR 0 7
70922: PPUSH
70923: LD_VAR 0 8
70927: PPUSH
70928: LD_VAR 0 9
70932: PPUSH
70933: LD_VAR 0 4
70937: PPUSH
70938: LD_VAR 0 5
70942: PPUSH
70943: CALL 72196 0 6
70947: GO 71025
70949: LD_INT 303
70951: DOUBLE
70952: EQUAL
70953: IFTRUE 70957
70955: GO 70994
70957: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70958: LD_VAR 0 6
70962: PPUSH
70963: LD_VAR 0 7
70967: PPUSH
70968: LD_VAR 0 8
70972: PPUSH
70973: LD_VAR 0 9
70977: PPUSH
70978: LD_VAR 0 4
70982: PPUSH
70983: LD_VAR 0 5
70987: PPUSH
70988: CALL 71030 0 6
70992: GO 71025
70994: LD_INT 304
70996: DOUBLE
70997: EQUAL
70998: IFTRUE 71002
71000: GO 71024
71002: POP
// hHackTeleport ( unit , x , y ) ; end ;
71003: LD_VAR 0 2
71007: PPUSH
71008: LD_VAR 0 4
71012: PPUSH
71013: LD_VAR 0 5
71017: PPUSH
71018: CALL 72789 0 3
71022: GO 71025
71024: POP
// end ;
71025: LD_VAR 0 12
71029: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71030: LD_INT 0
71032: PPUSH
71033: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71034: LD_VAR 0 1
71038: PUSH
71039: LD_INT 1
71041: LESS
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: LD_INT 3
71050: GREATER
71051: OR
71052: PUSH
71053: LD_VAR 0 5
71057: PPUSH
71058: LD_VAR 0 6
71062: PPUSH
71063: CALL_OW 428
71067: OR
71068: IFFALSE 71072
// exit ;
71070: GO 71792
// uc_side := your_side ;
71072: LD_ADDR_OWVAR 20
71076: PUSH
71077: LD_OWVAR 2
71081: ST_TO_ADDR
// uc_nation := nation ;
71082: LD_ADDR_OWVAR 21
71086: PUSH
71087: LD_VAR 0 1
71091: ST_TO_ADDR
// bc_level = 1 ;
71092: LD_ADDR_OWVAR 43
71096: PUSH
71097: LD_INT 1
71099: ST_TO_ADDR
// case btype of 1 :
71100: LD_VAR 0 2
71104: PUSH
71105: LD_INT 1
71107: DOUBLE
71108: EQUAL
71109: IFTRUE 71113
71111: GO 71124
71113: POP
// bc_type := b_depot ; 2 :
71114: LD_ADDR_OWVAR 42
71118: PUSH
71119: LD_INT 0
71121: ST_TO_ADDR
71122: GO 71736
71124: LD_INT 2
71126: DOUBLE
71127: EQUAL
71128: IFTRUE 71132
71130: GO 71143
71132: POP
// bc_type := b_warehouse ; 3 :
71133: LD_ADDR_OWVAR 42
71137: PUSH
71138: LD_INT 1
71140: ST_TO_ADDR
71141: GO 71736
71143: LD_INT 3
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71151
71149: GO 71162
71151: POP
// bc_type := b_lab ; 4 .. 9 :
71152: LD_ADDR_OWVAR 42
71156: PUSH
71157: LD_INT 6
71159: ST_TO_ADDR
71160: GO 71736
71162: LD_INT 4
71164: DOUBLE
71165: GREATEREQUAL
71166: IFFALSE 71174
71168: LD_INT 9
71170: DOUBLE
71171: LESSEQUAL
71172: IFTRUE 71176
71174: GO 71228
71176: POP
// begin bc_type := b_lab_half ;
71177: LD_ADDR_OWVAR 42
71181: PUSH
71182: LD_INT 7
71184: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71185: LD_ADDR_OWVAR 44
71189: PUSH
71190: LD_INT 10
71192: PUSH
71193: LD_INT 11
71195: PUSH
71196: LD_INT 12
71198: PUSH
71199: LD_INT 15
71201: PUSH
71202: LD_INT 14
71204: PUSH
71205: LD_INT 13
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: PUSH
71216: LD_VAR 0 2
71220: PUSH
71221: LD_INT 3
71223: MINUS
71224: ARRAY
71225: ST_TO_ADDR
// end ; 10 .. 13 :
71226: GO 71736
71228: LD_INT 10
71230: DOUBLE
71231: GREATEREQUAL
71232: IFFALSE 71240
71234: LD_INT 13
71236: DOUBLE
71237: LESSEQUAL
71238: IFTRUE 71242
71240: GO 71319
71242: POP
// begin bc_type := b_lab_full ;
71243: LD_ADDR_OWVAR 42
71247: PUSH
71248: LD_INT 8
71250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71251: LD_ADDR_OWVAR 44
71255: PUSH
71256: LD_INT 10
71258: PUSH
71259: LD_INT 12
71261: PUSH
71262: LD_INT 14
71264: PUSH
71265: LD_INT 13
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: PUSH
71274: LD_VAR 0 2
71278: PUSH
71279: LD_INT 9
71281: MINUS
71282: ARRAY
71283: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71284: LD_ADDR_OWVAR 45
71288: PUSH
71289: LD_INT 11
71291: PUSH
71292: LD_INT 15
71294: PUSH
71295: LD_INT 12
71297: PUSH
71298: LD_INT 15
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: PUSH
71307: LD_VAR 0 2
71311: PUSH
71312: LD_INT 9
71314: MINUS
71315: ARRAY
71316: ST_TO_ADDR
// end ; 14 :
71317: GO 71736
71319: LD_INT 14
71321: DOUBLE
71322: EQUAL
71323: IFTRUE 71327
71325: GO 71338
71327: POP
// bc_type := b_workshop ; 15 :
71328: LD_ADDR_OWVAR 42
71332: PUSH
71333: LD_INT 2
71335: ST_TO_ADDR
71336: GO 71736
71338: LD_INT 15
71340: DOUBLE
71341: EQUAL
71342: IFTRUE 71346
71344: GO 71357
71346: POP
// bc_type := b_factory ; 16 :
71347: LD_ADDR_OWVAR 42
71351: PUSH
71352: LD_INT 3
71354: ST_TO_ADDR
71355: GO 71736
71357: LD_INT 16
71359: DOUBLE
71360: EQUAL
71361: IFTRUE 71365
71363: GO 71376
71365: POP
// bc_type := b_ext_gun ; 17 :
71366: LD_ADDR_OWVAR 42
71370: PUSH
71371: LD_INT 17
71373: ST_TO_ADDR
71374: GO 71736
71376: LD_INT 17
71378: DOUBLE
71379: EQUAL
71380: IFTRUE 71384
71382: GO 71412
71384: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71385: LD_ADDR_OWVAR 42
71389: PUSH
71390: LD_INT 19
71392: PUSH
71393: LD_INT 23
71395: PUSH
71396: LD_INT 19
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: PUSH
71404: LD_VAR 0 1
71408: ARRAY
71409: ST_TO_ADDR
71410: GO 71736
71412: LD_INT 18
71414: DOUBLE
71415: EQUAL
71416: IFTRUE 71420
71418: GO 71431
71420: POP
// bc_type := b_ext_radar ; 19 :
71421: LD_ADDR_OWVAR 42
71425: PUSH
71426: LD_INT 20
71428: ST_TO_ADDR
71429: GO 71736
71431: LD_INT 19
71433: DOUBLE
71434: EQUAL
71435: IFTRUE 71439
71437: GO 71450
71439: POP
// bc_type := b_ext_radio ; 20 :
71440: LD_ADDR_OWVAR 42
71444: PUSH
71445: LD_INT 22
71447: ST_TO_ADDR
71448: GO 71736
71450: LD_INT 20
71452: DOUBLE
71453: EQUAL
71454: IFTRUE 71458
71456: GO 71469
71458: POP
// bc_type := b_ext_siberium ; 21 :
71459: LD_ADDR_OWVAR 42
71463: PUSH
71464: LD_INT 21
71466: ST_TO_ADDR
71467: GO 71736
71469: LD_INT 21
71471: DOUBLE
71472: EQUAL
71473: IFTRUE 71477
71475: GO 71488
71477: POP
// bc_type := b_ext_computer ; 22 :
71478: LD_ADDR_OWVAR 42
71482: PUSH
71483: LD_INT 24
71485: ST_TO_ADDR
71486: GO 71736
71488: LD_INT 22
71490: DOUBLE
71491: EQUAL
71492: IFTRUE 71496
71494: GO 71507
71496: POP
// bc_type := b_ext_track ; 23 :
71497: LD_ADDR_OWVAR 42
71501: PUSH
71502: LD_INT 16
71504: ST_TO_ADDR
71505: GO 71736
71507: LD_INT 23
71509: DOUBLE
71510: EQUAL
71511: IFTRUE 71515
71513: GO 71526
71515: POP
// bc_type := b_ext_laser ; 24 :
71516: LD_ADDR_OWVAR 42
71520: PUSH
71521: LD_INT 25
71523: ST_TO_ADDR
71524: GO 71736
71526: LD_INT 24
71528: DOUBLE
71529: EQUAL
71530: IFTRUE 71534
71532: GO 71545
71534: POP
// bc_type := b_control_tower ; 25 :
71535: LD_ADDR_OWVAR 42
71539: PUSH
71540: LD_INT 36
71542: ST_TO_ADDR
71543: GO 71736
71545: LD_INT 25
71547: DOUBLE
71548: EQUAL
71549: IFTRUE 71553
71551: GO 71564
71553: POP
// bc_type := b_breastwork ; 26 :
71554: LD_ADDR_OWVAR 42
71558: PUSH
71559: LD_INT 31
71561: ST_TO_ADDR
71562: GO 71736
71564: LD_INT 26
71566: DOUBLE
71567: EQUAL
71568: IFTRUE 71572
71570: GO 71583
71572: POP
// bc_type := b_bunker ; 27 :
71573: LD_ADDR_OWVAR 42
71577: PUSH
71578: LD_INT 32
71580: ST_TO_ADDR
71581: GO 71736
71583: LD_INT 27
71585: DOUBLE
71586: EQUAL
71587: IFTRUE 71591
71589: GO 71602
71591: POP
// bc_type := b_turret ; 28 :
71592: LD_ADDR_OWVAR 42
71596: PUSH
71597: LD_INT 33
71599: ST_TO_ADDR
71600: GO 71736
71602: LD_INT 28
71604: DOUBLE
71605: EQUAL
71606: IFTRUE 71610
71608: GO 71621
71610: POP
// bc_type := b_armoury ; 29 :
71611: LD_ADDR_OWVAR 42
71615: PUSH
71616: LD_INT 4
71618: ST_TO_ADDR
71619: GO 71736
71621: LD_INT 29
71623: DOUBLE
71624: EQUAL
71625: IFTRUE 71629
71627: GO 71640
71629: POP
// bc_type := b_barracks ; 30 :
71630: LD_ADDR_OWVAR 42
71634: PUSH
71635: LD_INT 5
71637: ST_TO_ADDR
71638: GO 71736
71640: LD_INT 30
71642: DOUBLE
71643: EQUAL
71644: IFTRUE 71648
71646: GO 71659
71648: POP
// bc_type := b_solar_power ; 31 :
71649: LD_ADDR_OWVAR 42
71653: PUSH
71654: LD_INT 27
71656: ST_TO_ADDR
71657: GO 71736
71659: LD_INT 31
71661: DOUBLE
71662: EQUAL
71663: IFTRUE 71667
71665: GO 71678
71667: POP
// bc_type := b_oil_power ; 32 :
71668: LD_ADDR_OWVAR 42
71672: PUSH
71673: LD_INT 26
71675: ST_TO_ADDR
71676: GO 71736
71678: LD_INT 32
71680: DOUBLE
71681: EQUAL
71682: IFTRUE 71686
71684: GO 71697
71686: POP
// bc_type := b_siberite_power ; 33 :
71687: LD_ADDR_OWVAR 42
71691: PUSH
71692: LD_INT 28
71694: ST_TO_ADDR
71695: GO 71736
71697: LD_INT 33
71699: DOUBLE
71700: EQUAL
71701: IFTRUE 71705
71703: GO 71716
71705: POP
// bc_type := b_oil_mine ; 34 :
71706: LD_ADDR_OWVAR 42
71710: PUSH
71711: LD_INT 29
71713: ST_TO_ADDR
71714: GO 71736
71716: LD_INT 34
71718: DOUBLE
71719: EQUAL
71720: IFTRUE 71724
71722: GO 71735
71724: POP
// bc_type := b_siberite_mine ; end ;
71725: LD_ADDR_OWVAR 42
71729: PUSH
71730: LD_INT 30
71732: ST_TO_ADDR
71733: GO 71736
71735: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71736: LD_ADDR_VAR 0 8
71740: PUSH
71741: LD_VAR 0 5
71745: PPUSH
71746: LD_VAR 0 6
71750: PPUSH
71751: LD_VAR 0 3
71755: PPUSH
71756: CALL_OW 47
71760: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71761: LD_OWVAR 42
71765: PUSH
71766: LD_INT 32
71768: PUSH
71769: LD_INT 33
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: IN
71776: IFFALSE 71792
// PlaceWeaponTurret ( b , weapon ) ;
71778: LD_VAR 0 8
71782: PPUSH
71783: LD_VAR 0 4
71787: PPUSH
71788: CALL_OW 431
// end ;
71792: LD_VAR 0 7
71796: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71797: LD_INT 0
71799: PPUSH
71800: PPUSH
71801: PPUSH
71802: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71803: LD_ADDR_VAR 0 4
71807: PUSH
71808: LD_INT 22
71810: PUSH
71811: LD_OWVAR 2
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 2
71822: PUSH
71823: LD_INT 30
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 30
71835: PUSH
71836: LD_INT 1
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: LIST
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PPUSH
71852: CALL_OW 69
71856: ST_TO_ADDR
// if not tmp then
71857: LD_VAR 0 4
71861: NOT
71862: IFFALSE 71866
// exit ;
71864: GO 71925
// for i in tmp do
71866: LD_ADDR_VAR 0 2
71870: PUSH
71871: LD_VAR 0 4
71875: PUSH
71876: FOR_IN
71877: IFFALSE 71923
// for j = 1 to 3 do
71879: LD_ADDR_VAR 0 3
71883: PUSH
71884: DOUBLE
71885: LD_INT 1
71887: DEC
71888: ST_TO_ADDR
71889: LD_INT 3
71891: PUSH
71892: FOR_TO
71893: IFFALSE 71919
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71895: LD_VAR 0 2
71899: PPUSH
71900: CALL_OW 274
71904: PPUSH
71905: LD_VAR 0 3
71909: PPUSH
71910: LD_INT 99999
71912: PPUSH
71913: CALL_OW 277
71917: GO 71892
71919: POP
71920: POP
71921: GO 71876
71923: POP
71924: POP
// end ;
71925: LD_VAR 0 1
71929: RET
// export function hHackSetLevel10 ; var i , j ; begin
71930: LD_INT 0
71932: PPUSH
71933: PPUSH
71934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71935: LD_ADDR_VAR 0 2
71939: PUSH
71940: LD_INT 21
71942: PUSH
71943: LD_INT 1
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PPUSH
71950: CALL_OW 69
71954: PUSH
71955: FOR_IN
71956: IFFALSE 72008
// if IsSelected ( i ) then
71958: LD_VAR 0 2
71962: PPUSH
71963: CALL_OW 306
71967: IFFALSE 72006
// begin for j := 1 to 4 do
71969: LD_ADDR_VAR 0 3
71973: PUSH
71974: DOUBLE
71975: LD_INT 1
71977: DEC
71978: ST_TO_ADDR
71979: LD_INT 4
71981: PUSH
71982: FOR_TO
71983: IFFALSE 72004
// SetSkill ( i , j , 10 ) ;
71985: LD_VAR 0 2
71989: PPUSH
71990: LD_VAR 0 3
71994: PPUSH
71995: LD_INT 10
71997: PPUSH
71998: CALL_OW 237
72002: GO 71982
72004: POP
72005: POP
// end ;
72006: GO 71955
72008: POP
72009: POP
// end ;
72010: LD_VAR 0 1
72014: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72015: LD_INT 0
72017: PPUSH
72018: PPUSH
72019: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72020: LD_ADDR_VAR 0 2
72024: PUSH
72025: LD_INT 22
72027: PUSH
72028: LD_OWVAR 2
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 21
72039: PUSH
72040: LD_INT 1
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PPUSH
72051: CALL_OW 69
72055: PUSH
72056: FOR_IN
72057: IFFALSE 72098
// begin for j := 1 to 4 do
72059: LD_ADDR_VAR 0 3
72063: PUSH
72064: DOUBLE
72065: LD_INT 1
72067: DEC
72068: ST_TO_ADDR
72069: LD_INT 4
72071: PUSH
72072: FOR_TO
72073: IFFALSE 72094
// SetSkill ( i , j , 10 ) ;
72075: LD_VAR 0 2
72079: PPUSH
72080: LD_VAR 0 3
72084: PPUSH
72085: LD_INT 10
72087: PPUSH
72088: CALL_OW 237
72092: GO 72072
72094: POP
72095: POP
// end ;
72096: GO 72056
72098: POP
72099: POP
// end ;
72100: LD_VAR 0 1
72104: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72105: LD_INT 0
72107: PPUSH
// uc_side := your_side ;
72108: LD_ADDR_OWVAR 20
72112: PUSH
72113: LD_OWVAR 2
72117: ST_TO_ADDR
// uc_nation := nation ;
72118: LD_ADDR_OWVAR 21
72122: PUSH
72123: LD_VAR 0 1
72127: ST_TO_ADDR
// InitHc ;
72128: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72132: LD_INT 0
72134: PPUSH
72135: LD_VAR 0 2
72139: PPUSH
72140: LD_VAR 0 3
72144: PPUSH
72145: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72149: LD_VAR 0 4
72153: PPUSH
72154: LD_VAR 0 5
72158: PPUSH
72159: CALL_OW 428
72163: PUSH
72164: LD_INT 0
72166: EQUAL
72167: IFFALSE 72191
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72169: CALL_OW 44
72173: PPUSH
72174: LD_VAR 0 4
72178: PPUSH
72179: LD_VAR 0 5
72183: PPUSH
72184: LD_INT 1
72186: PPUSH
72187: CALL_OW 48
// end ;
72191: LD_VAR 0 6
72195: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72196: LD_INT 0
72198: PPUSH
72199: PPUSH
// uc_side := your_side ;
72200: LD_ADDR_OWVAR 20
72204: PUSH
72205: LD_OWVAR 2
72209: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72210: LD_VAR 0 1
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: LD_INT 3
72223: PUSH
72224: LD_INT 4
72226: PUSH
72227: LD_INT 5
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: IN
72237: IFFALSE 72249
// uc_nation := nation_american else
72239: LD_ADDR_OWVAR 21
72243: PUSH
72244: LD_INT 1
72246: ST_TO_ADDR
72247: GO 72292
// if chassis in [ 11 , 12 , 13 , 14 ] then
72249: LD_VAR 0 1
72253: PUSH
72254: LD_INT 11
72256: PUSH
72257: LD_INT 12
72259: PUSH
72260: LD_INT 13
72262: PUSH
72263: LD_INT 14
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: IN
72272: IFFALSE 72284
// uc_nation := nation_arabian else
72274: LD_ADDR_OWVAR 21
72278: PUSH
72279: LD_INT 2
72281: ST_TO_ADDR
72282: GO 72292
// uc_nation := nation_russian ;
72284: LD_ADDR_OWVAR 21
72288: PUSH
72289: LD_INT 3
72291: ST_TO_ADDR
// vc_chassis := chassis ;
72292: LD_ADDR_OWVAR 37
72296: PUSH
72297: LD_VAR 0 1
72301: ST_TO_ADDR
// vc_engine := engine ;
72302: LD_ADDR_OWVAR 39
72306: PUSH
72307: LD_VAR 0 2
72311: ST_TO_ADDR
// vc_control := control ;
72312: LD_ADDR_OWVAR 38
72316: PUSH
72317: LD_VAR 0 3
72321: ST_TO_ADDR
// vc_weapon := weapon ;
72322: LD_ADDR_OWVAR 40
72326: PUSH
72327: LD_VAR 0 4
72331: ST_TO_ADDR
// un := CreateVehicle ;
72332: LD_ADDR_VAR 0 8
72336: PUSH
72337: CALL_OW 45
72341: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72342: LD_VAR 0 8
72346: PPUSH
72347: LD_INT 0
72349: PPUSH
72350: LD_INT 5
72352: PPUSH
72353: CALL_OW 12
72357: PPUSH
72358: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72362: LD_VAR 0 8
72366: PPUSH
72367: LD_VAR 0 5
72371: PPUSH
72372: LD_VAR 0 6
72376: PPUSH
72377: LD_INT 1
72379: PPUSH
72380: CALL_OW 48
// end ;
72384: LD_VAR 0 7
72388: RET
// export hInvincible ; every 1 do
72389: GO 72391
72391: DISABLE
// hInvincible := [ ] ;
72392: LD_ADDR_EXP 107
72396: PUSH
72397: EMPTY
72398: ST_TO_ADDR
72399: END
// every 10 do var i ;
72400: GO 72402
72402: DISABLE
72403: LD_INT 0
72405: PPUSH
// begin enable ;
72406: ENABLE
// if not hInvincible then
72407: LD_EXP 107
72411: NOT
72412: IFFALSE 72416
// exit ;
72414: GO 72460
// for i in hInvincible do
72416: LD_ADDR_VAR 0 1
72420: PUSH
72421: LD_EXP 107
72425: PUSH
72426: FOR_IN
72427: IFFALSE 72458
// if GetLives ( i ) < 1000 then
72429: LD_VAR 0 1
72433: PPUSH
72434: CALL_OW 256
72438: PUSH
72439: LD_INT 1000
72441: LESS
72442: IFFALSE 72456
// SetLives ( i , 1000 ) ;
72444: LD_VAR 0 1
72448: PPUSH
72449: LD_INT 1000
72451: PPUSH
72452: CALL_OW 234
72456: GO 72426
72458: POP
72459: POP
// end ;
72460: PPOPN 1
72462: END
// export function hHackInvincible ; var i ; begin
72463: LD_INT 0
72465: PPUSH
72466: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72467: LD_ADDR_VAR 0 2
72471: PUSH
72472: LD_INT 2
72474: PUSH
72475: LD_INT 21
72477: PUSH
72478: LD_INT 1
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 21
72487: PUSH
72488: LD_INT 2
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: LIST
72499: PPUSH
72500: CALL_OW 69
72504: PUSH
72505: FOR_IN
72506: IFFALSE 72567
// if IsSelected ( i ) then
72508: LD_VAR 0 2
72512: PPUSH
72513: CALL_OW 306
72517: IFFALSE 72565
// begin if i in hInvincible then
72519: LD_VAR 0 2
72523: PUSH
72524: LD_EXP 107
72528: IN
72529: IFFALSE 72549
// hInvincible := hInvincible diff i else
72531: LD_ADDR_EXP 107
72535: PUSH
72536: LD_EXP 107
72540: PUSH
72541: LD_VAR 0 2
72545: DIFF
72546: ST_TO_ADDR
72547: GO 72565
// hInvincible := hInvincible union i ;
72549: LD_ADDR_EXP 107
72553: PUSH
72554: LD_EXP 107
72558: PUSH
72559: LD_VAR 0 2
72563: UNION
72564: ST_TO_ADDR
// end ;
72565: GO 72505
72567: POP
72568: POP
// end ;
72569: LD_VAR 0 1
72573: RET
// export function hHackInvisible ; var i , j ; begin
72574: LD_INT 0
72576: PPUSH
72577: PPUSH
72578: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72579: LD_ADDR_VAR 0 2
72583: PUSH
72584: LD_INT 21
72586: PUSH
72587: LD_INT 1
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PPUSH
72594: CALL_OW 69
72598: PUSH
72599: FOR_IN
72600: IFFALSE 72624
// if IsSelected ( i ) then
72602: LD_VAR 0 2
72606: PPUSH
72607: CALL_OW 306
72611: IFFALSE 72622
// ComForceInvisible ( i ) ;
72613: LD_VAR 0 2
72617: PPUSH
72618: CALL_OW 496
72622: GO 72599
72624: POP
72625: POP
// end ;
72626: LD_VAR 0 1
72630: RET
// export function hHackChangeYourSide ; begin
72631: LD_INT 0
72633: PPUSH
// if your_side = 8 then
72634: LD_OWVAR 2
72638: PUSH
72639: LD_INT 8
72641: EQUAL
72642: IFFALSE 72654
// your_side := 0 else
72644: LD_ADDR_OWVAR 2
72648: PUSH
72649: LD_INT 0
72651: ST_TO_ADDR
72652: GO 72668
// your_side := your_side + 1 ;
72654: LD_ADDR_OWVAR 2
72658: PUSH
72659: LD_OWVAR 2
72663: PUSH
72664: LD_INT 1
72666: PLUS
72667: ST_TO_ADDR
// end ;
72668: LD_VAR 0 1
72672: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72673: LD_INT 0
72675: PPUSH
72676: PPUSH
72677: PPUSH
// for i in all_units do
72678: LD_ADDR_VAR 0 2
72682: PUSH
72683: LD_OWVAR 3
72687: PUSH
72688: FOR_IN
72689: IFFALSE 72767
// if IsSelected ( i ) then
72691: LD_VAR 0 2
72695: PPUSH
72696: CALL_OW 306
72700: IFFALSE 72765
// begin j := GetSide ( i ) ;
72702: LD_ADDR_VAR 0 3
72706: PUSH
72707: LD_VAR 0 2
72711: PPUSH
72712: CALL_OW 255
72716: ST_TO_ADDR
// if j = 8 then
72717: LD_VAR 0 3
72721: PUSH
72722: LD_INT 8
72724: EQUAL
72725: IFFALSE 72737
// j := 0 else
72727: LD_ADDR_VAR 0 3
72731: PUSH
72732: LD_INT 0
72734: ST_TO_ADDR
72735: GO 72751
// j := j + 1 ;
72737: LD_ADDR_VAR 0 3
72741: PUSH
72742: LD_VAR 0 3
72746: PUSH
72747: LD_INT 1
72749: PLUS
72750: ST_TO_ADDR
// SetSide ( i , j ) ;
72751: LD_VAR 0 2
72755: PPUSH
72756: LD_VAR 0 3
72760: PPUSH
72761: CALL_OW 235
// end ;
72765: GO 72688
72767: POP
72768: POP
// end ;
72769: LD_VAR 0 1
72773: RET
// export function hHackFog ; begin
72774: LD_INT 0
72776: PPUSH
// FogOff ( true ) ;
72777: LD_INT 1
72779: PPUSH
72780: CALL_OW 344
// end ;
72784: LD_VAR 0 1
72788: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72789: LD_INT 0
72791: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72792: LD_VAR 0 1
72796: PPUSH
72797: LD_VAR 0 2
72801: PPUSH
72802: LD_VAR 0 3
72806: PPUSH
72807: LD_INT 1
72809: PPUSH
72810: LD_INT 1
72812: PPUSH
72813: CALL_OW 483
// CenterOnXY ( x , y ) ;
72817: LD_VAR 0 2
72821: PPUSH
72822: LD_VAR 0 3
72826: PPUSH
72827: CALL_OW 84
// end ;
72831: LD_VAR 0 4
72835: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72836: LD_INT 0
72838: PPUSH
72839: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72840: LD_VAR 0 1
72844: NOT
72845: PUSH
72846: LD_VAR 0 2
72850: PPUSH
72851: LD_VAR 0 3
72855: PPUSH
72856: CALL_OW 488
72860: NOT
72861: OR
72862: PUSH
72863: LD_VAR 0 1
72867: PPUSH
72868: CALL_OW 266
72872: PUSH
72873: LD_INT 3
72875: NONEQUAL
72876: PUSH
72877: LD_VAR 0 1
72881: PPUSH
72882: CALL_OW 247
72886: PUSH
72887: LD_INT 1
72889: EQUAL
72890: NOT
72891: AND
72892: OR
72893: IFFALSE 72897
// exit ;
72895: GO 73046
// if GetType ( factory ) = unit_human then
72897: LD_VAR 0 1
72901: PPUSH
72902: CALL_OW 247
72906: PUSH
72907: LD_INT 1
72909: EQUAL
72910: IFFALSE 72927
// factory := IsInUnit ( factory ) ;
72912: LD_ADDR_VAR 0 1
72916: PUSH
72917: LD_VAR 0 1
72921: PPUSH
72922: CALL_OW 310
72926: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72927: LD_VAR 0 1
72931: PPUSH
72932: CALL_OW 266
72936: PUSH
72937: LD_INT 3
72939: NONEQUAL
72940: IFFALSE 72944
// exit ;
72942: GO 73046
// if HexInfo ( x , y ) = factory then
72944: LD_VAR 0 2
72948: PPUSH
72949: LD_VAR 0 3
72953: PPUSH
72954: CALL_OW 428
72958: PUSH
72959: LD_VAR 0 1
72963: EQUAL
72964: IFFALSE 72991
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72966: LD_ADDR_EXP 108
72970: PUSH
72971: LD_EXP 108
72975: PPUSH
72976: LD_VAR 0 1
72980: PPUSH
72981: LD_INT 0
72983: PPUSH
72984: CALL_OW 1
72988: ST_TO_ADDR
72989: GO 73042
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72991: LD_ADDR_EXP 108
72995: PUSH
72996: LD_EXP 108
73000: PPUSH
73001: LD_VAR 0 1
73005: PPUSH
73006: LD_VAR 0 1
73010: PPUSH
73011: CALL_OW 255
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_VAR 0 2
73025: PUSH
73026: LD_VAR 0 3
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: PPUSH
73037: CALL_OW 1
73041: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73042: CALL 73051 0 0
// end ;
73046: LD_VAR 0 4
73050: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73051: LD_INT 0
73053: PPUSH
73054: PPUSH
73055: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73056: LD_STRING resetFactoryWaypoint();
73058: PPUSH
73059: CALL_OW 559
// if factoryWaypoints then
73063: LD_EXP 108
73067: IFFALSE 73193
// begin list := PrepareArray ( factoryWaypoints ) ;
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_EXP 108
73078: PPUSH
73079: CALL 58153 0 1
73083: ST_TO_ADDR
// for i := 1 to list do
73084: LD_ADDR_VAR 0 2
73088: PUSH
73089: DOUBLE
73090: LD_INT 1
73092: DEC
73093: ST_TO_ADDR
73094: LD_VAR 0 3
73098: PUSH
73099: FOR_TO
73100: IFFALSE 73191
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73102: LD_STRING setFactoryWaypointXY(
73104: PUSH
73105: LD_VAR 0 3
73109: PUSH
73110: LD_VAR 0 2
73114: ARRAY
73115: PUSH
73116: LD_INT 1
73118: ARRAY
73119: STR
73120: PUSH
73121: LD_STRING ,
73123: STR
73124: PUSH
73125: LD_VAR 0 3
73129: PUSH
73130: LD_VAR 0 2
73134: ARRAY
73135: PUSH
73136: LD_INT 2
73138: ARRAY
73139: STR
73140: PUSH
73141: LD_STRING ,
73143: STR
73144: PUSH
73145: LD_VAR 0 3
73149: PUSH
73150: LD_VAR 0 2
73154: ARRAY
73155: PUSH
73156: LD_INT 3
73158: ARRAY
73159: STR
73160: PUSH
73161: LD_STRING ,
73163: STR
73164: PUSH
73165: LD_VAR 0 3
73169: PUSH
73170: LD_VAR 0 2
73174: ARRAY
73175: PUSH
73176: LD_INT 4
73178: ARRAY
73179: STR
73180: PUSH
73181: LD_STRING )
73183: STR
73184: PPUSH
73185: CALL_OW 559
73189: GO 73099
73191: POP
73192: POP
// end ; end ;
73193: LD_VAR 0 1
73197: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73198: LD_INT 0
73200: PPUSH
// if HexInfo ( x , y ) = warehouse then
73201: LD_VAR 0 2
73205: PPUSH
73206: LD_VAR 0 3
73210: PPUSH
73211: CALL_OW 428
73215: PUSH
73216: LD_VAR 0 1
73220: EQUAL
73221: IFFALSE 73248
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73223: LD_ADDR_EXP 109
73227: PUSH
73228: LD_EXP 109
73232: PPUSH
73233: LD_VAR 0 1
73237: PPUSH
73238: LD_INT 0
73240: PPUSH
73241: CALL_OW 1
73245: ST_TO_ADDR
73246: GO 73299
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73248: LD_ADDR_EXP 109
73252: PUSH
73253: LD_EXP 109
73257: PPUSH
73258: LD_VAR 0 1
73262: PPUSH
73263: LD_VAR 0 1
73267: PPUSH
73268: CALL_OW 255
73272: PUSH
73273: LD_VAR 0 1
73277: PUSH
73278: LD_VAR 0 2
73282: PUSH
73283: LD_VAR 0 3
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: PPUSH
73294: CALL_OW 1
73298: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73299: CALL 73308 0 0
// end ;
73303: LD_VAR 0 4
73307: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73308: LD_INT 0
73310: PPUSH
73311: PPUSH
73312: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73313: LD_STRING resetWarehouseGatheringPoints();
73315: PPUSH
73316: CALL_OW 559
// if warehouseGatheringPoints then
73320: LD_EXP 109
73324: IFFALSE 73450
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73326: LD_ADDR_VAR 0 3
73330: PUSH
73331: LD_EXP 109
73335: PPUSH
73336: CALL 58153 0 1
73340: ST_TO_ADDR
// for i := 1 to list do
73341: LD_ADDR_VAR 0 2
73345: PUSH
73346: DOUBLE
73347: LD_INT 1
73349: DEC
73350: ST_TO_ADDR
73351: LD_VAR 0 3
73355: PUSH
73356: FOR_TO
73357: IFFALSE 73448
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73359: LD_STRING setWarehouseGatheringPointXY(
73361: PUSH
73362: LD_VAR 0 3
73366: PUSH
73367: LD_VAR 0 2
73371: ARRAY
73372: PUSH
73373: LD_INT 1
73375: ARRAY
73376: STR
73377: PUSH
73378: LD_STRING ,
73380: STR
73381: PUSH
73382: LD_VAR 0 3
73386: PUSH
73387: LD_VAR 0 2
73391: ARRAY
73392: PUSH
73393: LD_INT 2
73395: ARRAY
73396: STR
73397: PUSH
73398: LD_STRING ,
73400: STR
73401: PUSH
73402: LD_VAR 0 3
73406: PUSH
73407: LD_VAR 0 2
73411: ARRAY
73412: PUSH
73413: LD_INT 3
73415: ARRAY
73416: STR
73417: PUSH
73418: LD_STRING ,
73420: STR
73421: PUSH
73422: LD_VAR 0 3
73426: PUSH
73427: LD_VAR 0 2
73431: ARRAY
73432: PUSH
73433: LD_INT 4
73435: ARRAY
73436: STR
73437: PUSH
73438: LD_STRING )
73440: STR
73441: PPUSH
73442: CALL_OW 559
73446: GO 73356
73448: POP
73449: POP
// end ; end ;
73450: LD_VAR 0 1
73454: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73455: LD_EXP 109
73459: IFFALSE 74144
73461: GO 73463
73463: DISABLE
73464: LD_INT 0
73466: PPUSH
73467: PPUSH
73468: PPUSH
73469: PPUSH
73470: PPUSH
73471: PPUSH
73472: PPUSH
73473: PPUSH
73474: PPUSH
// begin enable ;
73475: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73476: LD_ADDR_VAR 0 3
73480: PUSH
73481: LD_EXP 109
73485: PPUSH
73486: CALL 58153 0 1
73490: ST_TO_ADDR
// if not list then
73491: LD_VAR 0 3
73495: NOT
73496: IFFALSE 73500
// exit ;
73498: GO 74144
// for i := 1 to list do
73500: LD_ADDR_VAR 0 1
73504: PUSH
73505: DOUBLE
73506: LD_INT 1
73508: DEC
73509: ST_TO_ADDR
73510: LD_VAR 0 3
73514: PUSH
73515: FOR_TO
73516: IFFALSE 74142
// begin depot := list [ i ] [ 2 ] ;
73518: LD_ADDR_VAR 0 8
73522: PUSH
73523: LD_VAR 0 3
73527: PUSH
73528: LD_VAR 0 1
73532: ARRAY
73533: PUSH
73534: LD_INT 2
73536: ARRAY
73537: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73538: LD_ADDR_VAR 0 5
73542: PUSH
73543: LD_VAR 0 3
73547: PUSH
73548: LD_VAR 0 1
73552: ARRAY
73553: PUSH
73554: LD_INT 1
73556: ARRAY
73557: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73558: LD_VAR 0 8
73562: PPUSH
73563: CALL_OW 301
73567: PUSH
73568: LD_VAR 0 5
73572: PUSH
73573: LD_VAR 0 8
73577: PPUSH
73578: CALL_OW 255
73582: NONEQUAL
73583: OR
73584: IFFALSE 73613
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73586: LD_ADDR_EXP 109
73590: PUSH
73591: LD_EXP 109
73595: PPUSH
73596: LD_VAR 0 8
73600: PPUSH
73601: LD_INT 0
73603: PPUSH
73604: CALL_OW 1
73608: ST_TO_ADDR
// exit ;
73609: POP
73610: POP
73611: GO 74144
// end ; x := list [ i ] [ 3 ] ;
73613: LD_ADDR_VAR 0 6
73617: PUSH
73618: LD_VAR 0 3
73622: PUSH
73623: LD_VAR 0 1
73627: ARRAY
73628: PUSH
73629: LD_INT 3
73631: ARRAY
73632: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73633: LD_ADDR_VAR 0 7
73637: PUSH
73638: LD_VAR 0 3
73642: PUSH
73643: LD_VAR 0 1
73647: ARRAY
73648: PUSH
73649: LD_INT 4
73651: ARRAY
73652: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73653: LD_ADDR_VAR 0 9
73657: PUSH
73658: LD_VAR 0 6
73662: PPUSH
73663: LD_VAR 0 7
73667: PPUSH
73668: LD_INT 16
73670: PPUSH
73671: CALL 56741 0 3
73675: ST_TO_ADDR
// if not cratesNearbyPoint then
73676: LD_VAR 0 9
73680: NOT
73681: IFFALSE 73687
// exit ;
73683: POP
73684: POP
73685: GO 74144
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73687: LD_ADDR_VAR 0 4
73691: PUSH
73692: LD_INT 22
73694: PUSH
73695: LD_VAR 0 5
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 3
73706: PUSH
73707: LD_INT 60
73709: PUSH
73710: EMPTY
73711: LIST
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 91
73719: PUSH
73720: LD_VAR 0 8
73724: PUSH
73725: LD_INT 6
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 2
73735: PUSH
73736: LD_INT 25
73738: PUSH
73739: LD_INT 2
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 25
73748: PUSH
73749: LD_INT 16
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: LIST
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: PPUSH
73767: CALL_OW 69
73771: PUSH
73772: LD_VAR 0 8
73776: PPUSH
73777: CALL_OW 313
73781: PPUSH
73782: LD_INT 3
73784: PUSH
73785: LD_INT 60
73787: PUSH
73788: EMPTY
73789: LIST
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 2
73797: PUSH
73798: LD_INT 25
73800: PUSH
73801: LD_INT 2
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 25
73810: PUSH
73811: LD_INT 16
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PPUSH
73827: CALL_OW 72
73831: UNION
73832: ST_TO_ADDR
// if tmp then
73833: LD_VAR 0 4
73837: IFFALSE 73917
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73839: LD_ADDR_VAR 0 4
73843: PUSH
73844: LD_VAR 0 4
73848: PPUSH
73849: LD_INT 3
73851: PPUSH
73852: CALL 54710 0 2
73856: ST_TO_ADDR
// for j in tmp do
73857: LD_ADDR_VAR 0 2
73861: PUSH
73862: LD_VAR 0 4
73866: PUSH
73867: FOR_IN
73868: IFFALSE 73911
// begin if IsInUnit ( j ) then
73870: LD_VAR 0 2
73874: PPUSH
73875: CALL_OW 310
73879: IFFALSE 73890
// ComExit ( j ) ;
73881: LD_VAR 0 2
73885: PPUSH
73886: CALL 54793 0 1
// AddComCollect ( j , x , y ) ;
73890: LD_VAR 0 2
73894: PPUSH
73895: LD_VAR 0 6
73899: PPUSH
73900: LD_VAR 0 7
73904: PPUSH
73905: CALL_OW 177
// end ;
73909: GO 73867
73911: POP
73912: POP
// exit ;
73913: POP
73914: POP
73915: GO 74144
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73917: LD_ADDR_VAR 0 4
73921: PUSH
73922: LD_INT 22
73924: PUSH
73925: LD_VAR 0 5
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 91
73936: PUSH
73937: LD_VAR 0 8
73941: PUSH
73942: LD_INT 8
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 2
73952: PUSH
73953: LD_INT 34
73955: PUSH
73956: LD_INT 12
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 34
73965: PUSH
73966: LD_INT 51
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: LD_INT 34
73975: PUSH
73976: LD_INT 32
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 34
73985: PUSH
73986: LD_INT 89
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: LIST
74004: PPUSH
74005: CALL_OW 69
74009: ST_TO_ADDR
// if tmp then
74010: LD_VAR 0 4
74014: IFFALSE 74140
// begin for j in tmp do
74016: LD_ADDR_VAR 0 2
74020: PUSH
74021: LD_VAR 0 4
74025: PUSH
74026: FOR_IN
74027: IFFALSE 74138
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74029: LD_VAR 0 2
74033: PPUSH
74034: CALL_OW 262
74038: PUSH
74039: LD_INT 3
74041: EQUAL
74042: PUSH
74043: LD_VAR 0 2
74047: PPUSH
74048: CALL_OW 261
74052: PUSH
74053: LD_INT 20
74055: GREATER
74056: OR
74057: PUSH
74058: LD_VAR 0 2
74062: PPUSH
74063: CALL_OW 314
74067: NOT
74068: AND
74069: PUSH
74070: LD_VAR 0 2
74074: PPUSH
74075: CALL_OW 263
74079: PUSH
74080: LD_INT 1
74082: NONEQUAL
74083: PUSH
74084: LD_VAR 0 2
74088: PPUSH
74089: CALL_OW 311
74093: OR
74094: AND
74095: IFFALSE 74136
// begin ComCollect ( j , x , y ) ;
74097: LD_VAR 0 2
74101: PPUSH
74102: LD_VAR 0 6
74106: PPUSH
74107: LD_VAR 0 7
74111: PPUSH
74112: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74116: LD_VAR 0 2
74120: PPUSH
74121: LD_VAR 0 8
74125: PPUSH
74126: CALL_OW 172
// exit ;
74130: POP
74131: POP
74132: POP
74133: POP
74134: GO 74144
// end ;
74136: GO 74026
74138: POP
74139: POP
// end ; end ;
74140: GO 73515
74142: POP
74143: POP
// end ; end_of_file
74144: PPOPN 9
74146: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74147: LD_VAR 0 1
74151: PPUSH
74152: LD_VAR 0 2
74156: PPUSH
74157: LD_VAR 0 3
74161: PPUSH
74162: LD_VAR 0 4
74166: PPUSH
74167: LD_VAR 0 5
74171: PPUSH
74172: LD_VAR 0 6
74176: PPUSH
74177: CALL 58476 0 6
// end ;
74181: PPOPN 6
74183: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74184: LD_INT 0
74186: PPUSH
// begin if not units then
74187: LD_VAR 0 1
74191: NOT
74192: IFFALSE 74196
// exit ;
74194: GO 74196
// end ;
74196: PPOPN 7
74198: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74199: CALL 58370 0 0
// end ; end_of_file
74203: PPOPN 1
74205: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74206: LD_VAR 0 1
74210: PUSH
74211: LD_INT 200
74213: DOUBLE
74214: GREATEREQUAL
74215: IFFALSE 74223
74217: LD_INT 299
74219: DOUBLE
74220: LESSEQUAL
74221: IFTRUE 74225
74223: GO 74257
74225: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74226: LD_VAR 0 1
74230: PPUSH
74231: LD_VAR 0 2
74235: PPUSH
74236: LD_VAR 0 3
74240: PPUSH
74241: LD_VAR 0 4
74245: PPUSH
74246: LD_VAR 0 5
74250: PPUSH
74251: CALL 74745 0 5
74255: GO 74334
74257: LD_INT 300
74259: DOUBLE
74260: GREATEREQUAL
74261: IFFALSE 74269
74263: LD_INT 399
74265: DOUBLE
74266: LESSEQUAL
74267: IFTRUE 74271
74269: GO 74333
74271: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74272: LD_VAR 0 1
74276: PPUSH
74277: LD_VAR 0 2
74281: PPUSH
74282: LD_VAR 0 3
74286: PPUSH
74287: LD_VAR 0 4
74291: PPUSH
74292: LD_VAR 0 5
74296: PPUSH
74297: LD_VAR 0 6
74301: PPUSH
74302: LD_VAR 0 7
74306: PPUSH
74307: LD_VAR 0 8
74311: PPUSH
74312: LD_VAR 0 9
74316: PPUSH
74317: LD_VAR 0 10
74321: PPUSH
74322: LD_VAR 0 11
74326: PPUSH
74327: CALL 70856 0 11
74331: GO 74334
74333: POP
// end ;
74334: PPOPN 11
74336: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74337: LD_VAR 0 1
74341: PPUSH
74342: LD_VAR 0 2
74346: PPUSH
74347: LD_VAR 0 3
74351: PPUSH
74352: LD_VAR 0 4
74356: PPUSH
74357: LD_VAR 0 5
74361: PPUSH
74362: CALL 74481 0 5
// end ; end_of_file
74366: PPOPN 5
74368: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74369: LD_INT 0
74371: PPUSH
74372: PPUSH
74373: PPUSH
74374: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74375: LD_VAR 0 1
74379: PPUSH
74380: CALL_OW 264
74384: PUSH
74385: LD_INT 91
74387: EQUAL
74388: IFFALSE 74460
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74390: LD_INT 68
74392: PPUSH
74393: LD_VAR 0 1
74397: PPUSH
74398: CALL_OW 255
74402: PPUSH
74403: CALL_OW 321
74407: PUSH
74408: LD_INT 2
74410: EQUAL
74411: IFFALSE 74423
// eff := 70 else
74413: LD_ADDR_VAR 0 4
74417: PUSH
74418: LD_INT 70
74420: ST_TO_ADDR
74421: GO 74431
// eff := 30 ;
74423: LD_ADDR_VAR 0 4
74427: PUSH
74428: LD_INT 30
74430: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74431: LD_VAR 0 1
74435: PPUSH
74436: CALL_OW 250
74440: PPUSH
74441: LD_VAR 0 1
74445: PPUSH
74446: CALL_OW 251
74450: PPUSH
74451: LD_VAR 0 4
74455: PPUSH
74456: CALL_OW 495
// end ; end ;
74460: LD_VAR 0 2
74464: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74465: LD_INT 0
74467: PPUSH
// end ;
74468: LD_VAR 0 4
74472: RET
// export function SOS_Command ( cmd ) ; begin
74473: LD_INT 0
74475: PPUSH
// end ;
74476: LD_VAR 0 2
74480: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74481: LD_INT 0
74483: PPUSH
// end ;
74484: LD_VAR 0 6
74488: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
74489: LD_INT 0
74491: PPUSH
74492: PPUSH
// if not vehicle or not factory then
74493: LD_VAR 0 1
74497: NOT
74498: PUSH
74499: LD_VAR 0 2
74503: NOT
74504: OR
74505: IFFALSE 74509
// exit ;
74507: GO 74740
// if factoryWaypoints >= factory then
74509: LD_EXP 108
74513: PUSH
74514: LD_VAR 0 2
74518: GREATEREQUAL
74519: IFFALSE 74740
// if factoryWaypoints [ factory ] then
74521: LD_EXP 108
74525: PUSH
74526: LD_VAR 0 2
74530: ARRAY
74531: IFFALSE 74740
// begin if GetControl ( vehicle ) = control_manual then
74533: LD_VAR 0 1
74537: PPUSH
74538: CALL_OW 263
74542: PUSH
74543: LD_INT 1
74545: EQUAL
74546: IFFALSE 74627
// begin driver := IsDrivenBy ( vehicle ) ;
74548: LD_ADDR_VAR 0 4
74552: PUSH
74553: LD_VAR 0 1
74557: PPUSH
74558: CALL_OW 311
74562: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74563: LD_VAR 0 4
74567: PPUSH
74568: LD_EXP 108
74572: PUSH
74573: LD_VAR 0 2
74577: ARRAY
74578: PUSH
74579: LD_INT 3
74581: ARRAY
74582: PPUSH
74583: LD_EXP 108
74587: PUSH
74588: LD_VAR 0 2
74592: ARRAY
74593: PUSH
74594: LD_INT 4
74596: ARRAY
74597: PPUSH
74598: CALL_OW 171
// AddComExitVehicle ( driver ) ;
74602: LD_VAR 0 4
74606: PPUSH
74607: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74611: LD_VAR 0 4
74615: PPUSH
74616: LD_VAR 0 2
74620: PPUSH
74621: CALL_OW 180
// end else
74625: GO 74740
// if GetControl ( vehicle ) = control_remote then
74627: LD_VAR 0 1
74631: PPUSH
74632: CALL_OW 263
74636: PUSH
74637: LD_INT 2
74639: EQUAL
74640: IFFALSE 74701
// begin wait ( 0 0$2 ) ;
74642: LD_INT 70
74644: PPUSH
74645: CALL_OW 67
// if Connect ( vehicle ) then
74649: LD_VAR 0 1
74653: PPUSH
74654: CALL 25033 0 1
74658: IFFALSE 74699
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74660: LD_VAR 0 1
74664: PPUSH
74665: LD_EXP 108
74669: PUSH
74670: LD_VAR 0 2
74674: ARRAY
74675: PUSH
74676: LD_INT 3
74678: ARRAY
74679: PPUSH
74680: LD_EXP 108
74684: PUSH
74685: LD_VAR 0 2
74689: ARRAY
74690: PUSH
74691: LD_INT 4
74693: ARRAY
74694: PPUSH
74695: CALL_OW 171
// end else
74699: GO 74740
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74701: LD_VAR 0 1
74705: PPUSH
74706: LD_EXP 108
74710: PUSH
74711: LD_VAR 0 2
74715: ARRAY
74716: PUSH
74717: LD_INT 3
74719: ARRAY
74720: PPUSH
74721: LD_EXP 108
74725: PUSH
74726: LD_VAR 0 2
74730: ARRAY
74731: PUSH
74732: LD_INT 4
74734: ARRAY
74735: PPUSH
74736: CALL_OW 171
// end ; end ;
74740: LD_VAR 0 3
74744: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74745: LD_INT 0
74747: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74748: LD_VAR 0 1
74752: PUSH
74753: LD_INT 250
74755: EQUAL
74756: PUSH
74757: LD_VAR 0 2
74761: PPUSH
74762: CALL_OW 264
74766: PUSH
74767: LD_INT 81
74769: EQUAL
74770: AND
74771: IFFALSE 74792
// MinerPlaceMine ( unit , x , y ) ;
74773: LD_VAR 0 2
74777: PPUSH
74778: LD_VAR 0 4
74782: PPUSH
74783: LD_VAR 0 5
74787: PPUSH
74788: CALL 77177 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74792: LD_VAR 0 1
74796: PUSH
74797: LD_INT 251
74799: EQUAL
74800: PUSH
74801: LD_VAR 0 2
74805: PPUSH
74806: CALL_OW 264
74810: PUSH
74811: LD_INT 81
74813: EQUAL
74814: AND
74815: IFFALSE 74836
// MinerDetonateMine ( unit , x , y ) ;
74817: LD_VAR 0 2
74821: PPUSH
74822: LD_VAR 0 4
74826: PPUSH
74827: LD_VAR 0 5
74831: PPUSH
74832: CALL 77452 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74836: LD_VAR 0 1
74840: PUSH
74841: LD_INT 252
74843: EQUAL
74844: PUSH
74845: LD_VAR 0 2
74849: PPUSH
74850: CALL_OW 264
74854: PUSH
74855: LD_INT 81
74857: EQUAL
74858: AND
74859: IFFALSE 74880
// MinerCreateMinefield ( unit , x , y ) ;
74861: LD_VAR 0 2
74865: PPUSH
74866: LD_VAR 0 4
74870: PPUSH
74871: LD_VAR 0 5
74875: PPUSH
74876: CALL 77869 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74880: LD_VAR 0 1
74884: PUSH
74885: LD_INT 253
74887: EQUAL
74888: PUSH
74889: LD_VAR 0 2
74893: PPUSH
74894: CALL_OW 257
74898: PUSH
74899: LD_INT 5
74901: EQUAL
74902: AND
74903: IFFALSE 74924
// ComBinocular ( unit , x , y ) ;
74905: LD_VAR 0 2
74909: PPUSH
74910: LD_VAR 0 4
74914: PPUSH
74915: LD_VAR 0 5
74919: PPUSH
74920: CALL 78238 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74924: LD_VAR 0 1
74928: PUSH
74929: LD_INT 254
74931: EQUAL
74932: PUSH
74933: LD_VAR 0 2
74937: PPUSH
74938: CALL_OW 264
74942: PUSH
74943: LD_INT 99
74945: EQUAL
74946: AND
74947: PUSH
74948: LD_VAR 0 3
74952: PPUSH
74953: CALL_OW 263
74957: PUSH
74958: LD_INT 3
74960: EQUAL
74961: AND
74962: IFFALSE 74978
// HackDestroyVehicle ( unit , selectedUnit ) ;
74964: LD_VAR 0 2
74968: PPUSH
74969: LD_VAR 0 3
74973: PPUSH
74974: CALL 76541 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74978: LD_VAR 0 1
74982: PUSH
74983: LD_INT 255
74985: EQUAL
74986: PUSH
74987: LD_VAR 0 2
74991: PPUSH
74992: CALL_OW 264
74996: PUSH
74997: LD_INT 14
74999: PUSH
75000: LD_INT 53
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: IN
75007: AND
75008: PUSH
75009: LD_VAR 0 4
75013: PPUSH
75014: LD_VAR 0 5
75018: PPUSH
75019: CALL_OW 488
75023: AND
75024: IFFALSE 75048
// CutTreeXYR ( unit , x , y , 12 ) ;
75026: LD_VAR 0 2
75030: PPUSH
75031: LD_VAR 0 4
75035: PPUSH
75036: LD_VAR 0 5
75040: PPUSH
75041: LD_INT 12
75043: PPUSH
75044: CALL 75111 0 4
// if cmd = 256 then
75048: LD_VAR 0 1
75052: PUSH
75053: LD_INT 256
75055: EQUAL
75056: IFFALSE 75077
// SetFactoryWaypoint ( unit , x , y ) ;
75058: LD_VAR 0 2
75062: PPUSH
75063: LD_VAR 0 4
75067: PPUSH
75068: LD_VAR 0 5
75072: PPUSH
75073: CALL 72836 0 3
// if cmd = 257 then
75077: LD_VAR 0 1
75081: PUSH
75082: LD_INT 257
75084: EQUAL
75085: IFFALSE 75106
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75087: LD_VAR 0 2
75091: PPUSH
75092: LD_VAR 0 4
75096: PPUSH
75097: LD_VAR 0 5
75101: PPUSH
75102: CALL 73198 0 3
// end ;
75106: LD_VAR 0 6
75110: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75111: LD_INT 0
75113: PPUSH
75114: PPUSH
75115: PPUSH
75116: PPUSH
75117: PPUSH
75118: PPUSH
75119: PPUSH
75120: PPUSH
75121: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
75122: LD_VAR 0 1
75126: NOT
75127: PUSH
75128: LD_VAR 0 2
75132: PPUSH
75133: LD_VAR 0 3
75137: PPUSH
75138: CALL_OW 488
75142: NOT
75143: OR
75144: PUSH
75145: LD_VAR 0 4
75149: NOT
75150: OR
75151: IFFALSE 75155
// exit ;
75153: GO 75495
// list := [ ] ;
75155: LD_ADDR_VAR 0 13
75159: PUSH
75160: EMPTY
75161: ST_TO_ADDR
// if x - r < 0 then
75162: LD_VAR 0 2
75166: PUSH
75167: LD_VAR 0 4
75171: MINUS
75172: PUSH
75173: LD_INT 0
75175: LESS
75176: IFFALSE 75188
// min_x := 0 else
75178: LD_ADDR_VAR 0 7
75182: PUSH
75183: LD_INT 0
75185: ST_TO_ADDR
75186: GO 75204
// min_x := x - r ;
75188: LD_ADDR_VAR 0 7
75192: PUSH
75193: LD_VAR 0 2
75197: PUSH
75198: LD_VAR 0 4
75202: MINUS
75203: ST_TO_ADDR
// if y - r < 0 then
75204: LD_VAR 0 3
75208: PUSH
75209: LD_VAR 0 4
75213: MINUS
75214: PUSH
75215: LD_INT 0
75217: LESS
75218: IFFALSE 75230
// min_y := 0 else
75220: LD_ADDR_VAR 0 8
75224: PUSH
75225: LD_INT 0
75227: ST_TO_ADDR
75228: GO 75246
// min_y := y - r ;
75230: LD_ADDR_VAR 0 8
75234: PUSH
75235: LD_VAR 0 3
75239: PUSH
75240: LD_VAR 0 4
75244: MINUS
75245: ST_TO_ADDR
// max_x := x + r ;
75246: LD_ADDR_VAR 0 9
75250: PUSH
75251: LD_VAR 0 2
75255: PUSH
75256: LD_VAR 0 4
75260: PLUS
75261: ST_TO_ADDR
// max_y := y + r ;
75262: LD_ADDR_VAR 0 10
75266: PUSH
75267: LD_VAR 0 3
75271: PUSH
75272: LD_VAR 0 4
75276: PLUS
75277: ST_TO_ADDR
// for _x = min_x to max_x do
75278: LD_ADDR_VAR 0 11
75282: PUSH
75283: DOUBLE
75284: LD_VAR 0 7
75288: DEC
75289: ST_TO_ADDR
75290: LD_VAR 0 9
75294: PUSH
75295: FOR_TO
75296: IFFALSE 75413
// for _y = min_y to max_y do
75298: LD_ADDR_VAR 0 12
75302: PUSH
75303: DOUBLE
75304: LD_VAR 0 8
75308: DEC
75309: ST_TO_ADDR
75310: LD_VAR 0 10
75314: PUSH
75315: FOR_TO
75316: IFFALSE 75409
// begin if not ValidHex ( _x , _y ) then
75318: LD_VAR 0 11
75322: PPUSH
75323: LD_VAR 0 12
75327: PPUSH
75328: CALL_OW 488
75332: NOT
75333: IFFALSE 75337
// continue ;
75335: GO 75315
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75337: LD_VAR 0 11
75341: PPUSH
75342: LD_VAR 0 12
75346: PPUSH
75347: CALL_OW 351
75351: PUSH
75352: LD_VAR 0 11
75356: PPUSH
75357: LD_VAR 0 12
75361: PPUSH
75362: CALL_OW 554
75366: AND
75367: IFFALSE 75407
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75369: LD_ADDR_VAR 0 13
75373: PUSH
75374: LD_VAR 0 13
75378: PPUSH
75379: LD_VAR 0 13
75383: PUSH
75384: LD_INT 1
75386: PLUS
75387: PPUSH
75388: LD_VAR 0 11
75392: PUSH
75393: LD_VAR 0 12
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PPUSH
75402: CALL_OW 2
75406: ST_TO_ADDR
// end ;
75407: GO 75315
75409: POP
75410: POP
75411: GO 75295
75413: POP
75414: POP
// if not list then
75415: LD_VAR 0 13
75419: NOT
75420: IFFALSE 75424
// exit ;
75422: GO 75495
// for i in list do
75424: LD_ADDR_VAR 0 6
75428: PUSH
75429: LD_VAR 0 13
75433: PUSH
75434: FOR_IN
75435: IFFALSE 75493
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75437: LD_VAR 0 1
75441: PPUSH
75442: LD_STRING M
75444: PUSH
75445: LD_VAR 0 6
75449: PUSH
75450: LD_INT 1
75452: ARRAY
75453: PUSH
75454: LD_VAR 0 6
75458: PUSH
75459: LD_INT 2
75461: ARRAY
75462: PUSH
75463: LD_INT 0
75465: PUSH
75466: LD_INT 0
75468: PUSH
75469: LD_INT 0
75471: PUSH
75472: LD_INT 0
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: PUSH
75484: EMPTY
75485: LIST
75486: PPUSH
75487: CALL_OW 447
75491: GO 75434
75493: POP
75494: POP
// end ;
75495: LD_VAR 0 5
75499: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75500: LD_EXP 111
75504: NOT
75505: IFFALSE 75555
75507: GO 75509
75509: DISABLE
// begin initHack := true ;
75510: LD_ADDR_EXP 111
75514: PUSH
75515: LD_INT 1
75517: ST_TO_ADDR
// hackTanks := [ ] ;
75518: LD_ADDR_EXP 112
75522: PUSH
75523: EMPTY
75524: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75525: LD_ADDR_EXP 113
75529: PUSH
75530: EMPTY
75531: ST_TO_ADDR
// hackLimit := 3 ;
75532: LD_ADDR_EXP 114
75536: PUSH
75537: LD_INT 3
75539: ST_TO_ADDR
// hackDist := 12 ;
75540: LD_ADDR_EXP 115
75544: PUSH
75545: LD_INT 12
75547: ST_TO_ADDR
// hackCounter := [ ] ;
75548: LD_ADDR_EXP 116
75552: PUSH
75553: EMPTY
75554: ST_TO_ADDR
// end ;
75555: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75556: LD_EXP 111
75560: PUSH
75561: LD_INT 34
75563: PUSH
75564: LD_INT 99
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: PPUSH
75571: CALL_OW 69
75575: AND
75576: IFFALSE 75829
75578: GO 75580
75580: DISABLE
75581: LD_INT 0
75583: PPUSH
75584: PPUSH
// begin enable ;
75585: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75586: LD_ADDR_VAR 0 1
75590: PUSH
75591: LD_INT 34
75593: PUSH
75594: LD_INT 99
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PPUSH
75601: CALL_OW 69
75605: PUSH
75606: FOR_IN
75607: IFFALSE 75827
// begin if not i in hackTanks then
75609: LD_VAR 0 1
75613: PUSH
75614: LD_EXP 112
75618: IN
75619: NOT
75620: IFFALSE 75703
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75622: LD_ADDR_EXP 112
75626: PUSH
75627: LD_EXP 112
75631: PPUSH
75632: LD_EXP 112
75636: PUSH
75637: LD_INT 1
75639: PLUS
75640: PPUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 1
75650: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75651: LD_ADDR_EXP 113
75655: PUSH
75656: LD_EXP 113
75660: PPUSH
75661: LD_EXP 113
75665: PUSH
75666: LD_INT 1
75668: PLUS
75669: PPUSH
75670: EMPTY
75671: PPUSH
75672: CALL_OW 1
75676: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75677: LD_ADDR_EXP 116
75681: PUSH
75682: LD_EXP 116
75686: PPUSH
75687: LD_EXP 116
75691: PUSH
75692: LD_INT 1
75694: PLUS
75695: PPUSH
75696: EMPTY
75697: PPUSH
75698: CALL_OW 1
75702: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75703: LD_VAR 0 1
75707: PPUSH
75708: CALL_OW 302
75712: NOT
75713: IFFALSE 75726
// begin HackUnlinkAll ( i ) ;
75715: LD_VAR 0 1
75719: PPUSH
75720: CALL 75832 0 1
// continue ;
75724: GO 75606
// end ; HackCheckCapturedStatus ( i ) ;
75726: LD_VAR 0 1
75730: PPUSH
75731: CALL 76275 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75735: LD_ADDR_VAR 0 2
75739: PUSH
75740: LD_INT 81
75742: PUSH
75743: LD_VAR 0 1
75747: PPUSH
75748: CALL_OW 255
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 33
75759: PUSH
75760: LD_INT 3
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 91
75769: PUSH
75770: LD_VAR 0 1
75774: PUSH
75775: LD_EXP 115
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 50
75787: PUSH
75788: EMPTY
75789: LIST
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: PPUSH
75797: CALL_OW 69
75801: ST_TO_ADDR
// if not tmp then
75802: LD_VAR 0 2
75806: NOT
75807: IFFALSE 75811
// continue ;
75809: GO 75606
// HackLink ( i , tmp ) ;
75811: LD_VAR 0 1
75815: PPUSH
75816: LD_VAR 0 2
75820: PPUSH
75821: CALL 75968 0 2
// end ;
75825: GO 75606
75827: POP
75828: POP
// end ;
75829: PPOPN 2
75831: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75832: LD_INT 0
75834: PPUSH
75835: PPUSH
75836: PPUSH
// if not hack in hackTanks then
75837: LD_VAR 0 1
75841: PUSH
75842: LD_EXP 112
75846: IN
75847: NOT
75848: IFFALSE 75852
// exit ;
75850: GO 75963
// index := GetElementIndex ( hackTanks , hack ) ;
75852: LD_ADDR_VAR 0 4
75856: PUSH
75857: LD_EXP 112
75861: PPUSH
75862: LD_VAR 0 1
75866: PPUSH
75867: CALL 21849 0 2
75871: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75872: LD_EXP 113
75876: PUSH
75877: LD_VAR 0 4
75881: ARRAY
75882: IFFALSE 75963
// begin for i in hackTanksCaptured [ index ] do
75884: LD_ADDR_VAR 0 3
75888: PUSH
75889: LD_EXP 113
75893: PUSH
75894: LD_VAR 0 4
75898: ARRAY
75899: PUSH
75900: FOR_IN
75901: IFFALSE 75927
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75903: LD_VAR 0 3
75907: PUSH
75908: LD_INT 1
75910: ARRAY
75911: PPUSH
75912: LD_VAR 0 3
75916: PUSH
75917: LD_INT 2
75919: ARRAY
75920: PPUSH
75921: CALL_OW 235
75925: GO 75900
75927: POP
75928: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75929: LD_ADDR_EXP 113
75933: PUSH
75934: LD_EXP 113
75938: PPUSH
75939: LD_VAR 0 4
75943: PPUSH
75944: EMPTY
75945: PPUSH
75946: CALL_OW 1
75950: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75951: LD_VAR 0 1
75955: PPUSH
75956: LD_INT 0
75958: PPUSH
75959: CALL_OW 505
// end ; end ;
75963: LD_VAR 0 2
75967: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75968: LD_INT 0
75970: PPUSH
75971: PPUSH
75972: PPUSH
// if not hack in hackTanks or not vehicles then
75973: LD_VAR 0 1
75977: PUSH
75978: LD_EXP 112
75982: IN
75983: NOT
75984: PUSH
75985: LD_VAR 0 2
75989: NOT
75990: OR
75991: IFFALSE 75995
// exit ;
75993: GO 76270
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75995: LD_ADDR_VAR 0 2
75999: PUSH
76000: LD_VAR 0 1
76004: PPUSH
76005: LD_VAR 0 2
76009: PPUSH
76010: LD_INT 1
76012: PPUSH
76013: LD_INT 1
76015: PPUSH
76016: CALL 22499 0 4
76020: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76021: LD_ADDR_VAR 0 5
76025: PUSH
76026: LD_EXP 112
76030: PPUSH
76031: LD_VAR 0 1
76035: PPUSH
76036: CALL 21849 0 2
76040: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76041: LD_EXP 113
76045: PUSH
76046: LD_VAR 0 5
76050: ARRAY
76051: PUSH
76052: LD_EXP 114
76056: LESS
76057: IFFALSE 76246
// begin for i := 1 to vehicles do
76059: LD_ADDR_VAR 0 4
76063: PUSH
76064: DOUBLE
76065: LD_INT 1
76067: DEC
76068: ST_TO_ADDR
76069: LD_VAR 0 2
76073: PUSH
76074: FOR_TO
76075: IFFALSE 76244
// begin if hackTanksCaptured [ index ] = hackLimit then
76077: LD_EXP 113
76081: PUSH
76082: LD_VAR 0 5
76086: ARRAY
76087: PUSH
76088: LD_EXP 114
76092: EQUAL
76093: IFFALSE 76097
// break ;
76095: GO 76244
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76097: LD_ADDR_EXP 116
76101: PUSH
76102: LD_EXP 116
76106: PPUSH
76107: LD_VAR 0 5
76111: PPUSH
76112: LD_EXP 116
76116: PUSH
76117: LD_VAR 0 5
76121: ARRAY
76122: PUSH
76123: LD_INT 1
76125: PLUS
76126: PPUSH
76127: CALL_OW 1
76131: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76132: LD_ADDR_EXP 113
76136: PUSH
76137: LD_EXP 113
76141: PPUSH
76142: LD_VAR 0 5
76146: PUSH
76147: LD_EXP 113
76151: PUSH
76152: LD_VAR 0 5
76156: ARRAY
76157: PUSH
76158: LD_INT 1
76160: PLUS
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: PPUSH
76166: LD_VAR 0 2
76170: PUSH
76171: LD_VAR 0 4
76175: ARRAY
76176: PUSH
76177: LD_VAR 0 2
76181: PUSH
76182: LD_VAR 0 4
76186: ARRAY
76187: PPUSH
76188: CALL_OW 255
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PPUSH
76197: CALL 22064 0 3
76201: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76202: LD_VAR 0 2
76206: PUSH
76207: LD_VAR 0 4
76211: ARRAY
76212: PPUSH
76213: LD_VAR 0 1
76217: PPUSH
76218: CALL_OW 255
76222: PPUSH
76223: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76227: LD_VAR 0 2
76231: PUSH
76232: LD_VAR 0 4
76236: ARRAY
76237: PPUSH
76238: CALL_OW 141
// end ;
76242: GO 76074
76244: POP
76245: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76246: LD_VAR 0 1
76250: PPUSH
76251: LD_EXP 113
76255: PUSH
76256: LD_VAR 0 5
76260: ARRAY
76261: PUSH
76262: LD_INT 0
76264: PLUS
76265: PPUSH
76266: CALL_OW 505
// end ;
76270: LD_VAR 0 3
76274: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76275: LD_INT 0
76277: PPUSH
76278: PPUSH
76279: PPUSH
76280: PPUSH
// if not hack in hackTanks then
76281: LD_VAR 0 1
76285: PUSH
76286: LD_EXP 112
76290: IN
76291: NOT
76292: IFFALSE 76296
// exit ;
76294: GO 76536
// index := GetElementIndex ( hackTanks , hack ) ;
76296: LD_ADDR_VAR 0 4
76300: PUSH
76301: LD_EXP 112
76305: PPUSH
76306: LD_VAR 0 1
76310: PPUSH
76311: CALL 21849 0 2
76315: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76316: LD_ADDR_VAR 0 3
76320: PUSH
76321: DOUBLE
76322: LD_EXP 113
76326: PUSH
76327: LD_VAR 0 4
76331: ARRAY
76332: INC
76333: ST_TO_ADDR
76334: LD_INT 1
76336: PUSH
76337: FOR_DOWNTO
76338: IFFALSE 76510
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76340: LD_ADDR_VAR 0 5
76344: PUSH
76345: LD_EXP 113
76349: PUSH
76350: LD_VAR 0 4
76354: ARRAY
76355: PUSH
76356: LD_VAR 0 3
76360: ARRAY
76361: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76362: LD_VAR 0 5
76366: PUSH
76367: LD_INT 1
76369: ARRAY
76370: PPUSH
76371: CALL_OW 302
76375: NOT
76376: PUSH
76377: LD_VAR 0 5
76381: PUSH
76382: LD_INT 1
76384: ARRAY
76385: PPUSH
76386: CALL_OW 255
76390: PUSH
76391: LD_VAR 0 1
76395: PPUSH
76396: CALL_OW 255
76400: NONEQUAL
76401: OR
76402: IFFALSE 76508
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76404: LD_VAR 0 5
76408: PUSH
76409: LD_INT 1
76411: ARRAY
76412: PPUSH
76413: CALL_OW 305
76417: PUSH
76418: LD_VAR 0 5
76422: PUSH
76423: LD_INT 1
76425: ARRAY
76426: PPUSH
76427: CALL_OW 255
76431: PUSH
76432: LD_VAR 0 1
76436: PPUSH
76437: CALL_OW 255
76441: EQUAL
76442: AND
76443: IFFALSE 76467
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76445: LD_VAR 0 5
76449: PUSH
76450: LD_INT 1
76452: ARRAY
76453: PPUSH
76454: LD_VAR 0 5
76458: PUSH
76459: LD_INT 2
76461: ARRAY
76462: PPUSH
76463: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76467: LD_ADDR_EXP 113
76471: PUSH
76472: LD_EXP 113
76476: PPUSH
76477: LD_VAR 0 4
76481: PPUSH
76482: LD_EXP 113
76486: PUSH
76487: LD_VAR 0 4
76491: ARRAY
76492: PPUSH
76493: LD_VAR 0 3
76497: PPUSH
76498: CALL_OW 3
76502: PPUSH
76503: CALL_OW 1
76507: ST_TO_ADDR
// end ; end ;
76508: GO 76337
76510: POP
76511: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76512: LD_VAR 0 1
76516: PPUSH
76517: LD_EXP 113
76521: PUSH
76522: LD_VAR 0 4
76526: ARRAY
76527: PUSH
76528: LD_INT 0
76530: PLUS
76531: PPUSH
76532: CALL_OW 505
// end ;
76536: LD_VAR 0 2
76540: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76541: LD_INT 0
76543: PPUSH
76544: PPUSH
76545: PPUSH
76546: PPUSH
// if not hack in hackTanks then
76547: LD_VAR 0 1
76551: PUSH
76552: LD_EXP 112
76556: IN
76557: NOT
76558: IFFALSE 76562
// exit ;
76560: GO 76647
// index := GetElementIndex ( hackTanks , hack ) ;
76562: LD_ADDR_VAR 0 5
76566: PUSH
76567: LD_EXP 112
76571: PPUSH
76572: LD_VAR 0 1
76576: PPUSH
76577: CALL 21849 0 2
76581: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76582: LD_ADDR_VAR 0 4
76586: PUSH
76587: DOUBLE
76588: LD_INT 1
76590: DEC
76591: ST_TO_ADDR
76592: LD_EXP 113
76596: PUSH
76597: LD_VAR 0 5
76601: ARRAY
76602: PUSH
76603: FOR_TO
76604: IFFALSE 76645
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76606: LD_EXP 113
76610: PUSH
76611: LD_VAR 0 5
76615: ARRAY
76616: PUSH
76617: LD_VAR 0 4
76621: ARRAY
76622: PUSH
76623: LD_INT 1
76625: ARRAY
76626: PUSH
76627: LD_VAR 0 2
76631: EQUAL
76632: IFFALSE 76643
// KillUnit ( vehicle ) ;
76634: LD_VAR 0 2
76638: PPUSH
76639: CALL_OW 66
76643: GO 76603
76645: POP
76646: POP
// end ;
76647: LD_VAR 0 3
76651: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76652: LD_EXP 117
76656: NOT
76657: IFFALSE 76692
76659: GO 76661
76661: DISABLE
// begin initMiner := true ;
76662: LD_ADDR_EXP 117
76666: PUSH
76667: LD_INT 1
76669: ST_TO_ADDR
// minersList := [ ] ;
76670: LD_ADDR_EXP 118
76674: PUSH
76675: EMPTY
76676: ST_TO_ADDR
// minerMinesList := [ ] ;
76677: LD_ADDR_EXP 119
76681: PUSH
76682: EMPTY
76683: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76684: LD_ADDR_EXP 120
76688: PUSH
76689: LD_INT 5
76691: ST_TO_ADDR
// end ;
76692: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76693: LD_EXP 117
76697: PUSH
76698: LD_INT 34
76700: PUSH
76701: LD_INT 81
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PPUSH
76708: CALL_OW 69
76712: AND
76713: IFFALSE 77174
76715: GO 76717
76717: DISABLE
76718: LD_INT 0
76720: PPUSH
76721: PPUSH
76722: PPUSH
76723: PPUSH
// begin enable ;
76724: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76725: LD_ADDR_VAR 0 1
76729: PUSH
76730: LD_INT 34
76732: PUSH
76733: LD_INT 81
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PPUSH
76740: CALL_OW 69
76744: PUSH
76745: FOR_IN
76746: IFFALSE 76818
// begin if not i in minersList then
76748: LD_VAR 0 1
76752: PUSH
76753: LD_EXP 118
76757: IN
76758: NOT
76759: IFFALSE 76816
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76761: LD_ADDR_EXP 118
76765: PUSH
76766: LD_EXP 118
76770: PPUSH
76771: LD_EXP 118
76775: PUSH
76776: LD_INT 1
76778: PLUS
76779: PPUSH
76780: LD_VAR 0 1
76784: PPUSH
76785: CALL_OW 1
76789: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76790: LD_ADDR_EXP 119
76794: PUSH
76795: LD_EXP 119
76799: PPUSH
76800: LD_EXP 119
76804: PUSH
76805: LD_INT 1
76807: PLUS
76808: PPUSH
76809: EMPTY
76810: PPUSH
76811: CALL_OW 1
76815: ST_TO_ADDR
// end end ;
76816: GO 76745
76818: POP
76819: POP
// for i := minerMinesList downto 1 do
76820: LD_ADDR_VAR 0 1
76824: PUSH
76825: DOUBLE
76826: LD_EXP 119
76830: INC
76831: ST_TO_ADDR
76832: LD_INT 1
76834: PUSH
76835: FOR_DOWNTO
76836: IFFALSE 77172
// begin if IsLive ( minersList [ i ] ) then
76838: LD_EXP 118
76842: PUSH
76843: LD_VAR 0 1
76847: ARRAY
76848: PPUSH
76849: CALL_OW 300
76853: IFFALSE 76881
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76855: LD_EXP 118
76859: PUSH
76860: LD_VAR 0 1
76864: ARRAY
76865: PPUSH
76866: LD_EXP 119
76870: PUSH
76871: LD_VAR 0 1
76875: ARRAY
76876: PPUSH
76877: CALL_OW 505
// if not minerMinesList [ i ] then
76881: LD_EXP 119
76885: PUSH
76886: LD_VAR 0 1
76890: ARRAY
76891: NOT
76892: IFFALSE 76896
// continue ;
76894: GO 76835
// for j := minerMinesList [ i ] downto 1 do
76896: LD_ADDR_VAR 0 2
76900: PUSH
76901: DOUBLE
76902: LD_EXP 119
76906: PUSH
76907: LD_VAR 0 1
76911: ARRAY
76912: INC
76913: ST_TO_ADDR
76914: LD_INT 1
76916: PUSH
76917: FOR_DOWNTO
76918: IFFALSE 77168
// begin side := GetSide ( minersList [ i ] ) ;
76920: LD_ADDR_VAR 0 3
76924: PUSH
76925: LD_EXP 118
76929: PUSH
76930: LD_VAR 0 1
76934: ARRAY
76935: PPUSH
76936: CALL_OW 255
76940: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76941: LD_ADDR_VAR 0 4
76945: PUSH
76946: LD_EXP 119
76950: PUSH
76951: LD_VAR 0 1
76955: ARRAY
76956: PUSH
76957: LD_VAR 0 2
76961: ARRAY
76962: PUSH
76963: LD_INT 1
76965: ARRAY
76966: PPUSH
76967: LD_EXP 119
76971: PUSH
76972: LD_VAR 0 1
76976: ARRAY
76977: PUSH
76978: LD_VAR 0 2
76982: ARRAY
76983: PUSH
76984: LD_INT 2
76986: ARRAY
76987: PPUSH
76988: CALL_OW 428
76992: ST_TO_ADDR
// if not tmp then
76993: LD_VAR 0 4
76997: NOT
76998: IFFALSE 77002
// continue ;
77000: GO 76917
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
77002: LD_VAR 0 4
77006: PUSH
77007: LD_INT 81
77009: PUSH
77010: LD_VAR 0 3
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PPUSH
77019: CALL_OW 69
77023: IN
77024: PUSH
77025: LD_EXP 119
77029: PUSH
77030: LD_VAR 0 1
77034: ARRAY
77035: PUSH
77036: LD_VAR 0 2
77040: ARRAY
77041: PUSH
77042: LD_INT 1
77044: ARRAY
77045: PPUSH
77046: LD_EXP 119
77050: PUSH
77051: LD_VAR 0 1
77055: ARRAY
77056: PUSH
77057: LD_VAR 0 2
77061: ARRAY
77062: PUSH
77063: LD_INT 2
77065: ARRAY
77066: PPUSH
77067: CALL_OW 458
77071: AND
77072: IFFALSE 77166
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77074: LD_EXP 119
77078: PUSH
77079: LD_VAR 0 1
77083: ARRAY
77084: PUSH
77085: LD_VAR 0 2
77089: ARRAY
77090: PUSH
77091: LD_INT 1
77093: ARRAY
77094: PPUSH
77095: LD_EXP 119
77099: PUSH
77100: LD_VAR 0 1
77104: ARRAY
77105: PUSH
77106: LD_VAR 0 2
77110: ARRAY
77111: PUSH
77112: LD_INT 2
77114: ARRAY
77115: PPUSH
77116: LD_VAR 0 3
77120: PPUSH
77121: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77125: LD_ADDR_EXP 119
77129: PUSH
77130: LD_EXP 119
77134: PPUSH
77135: LD_VAR 0 1
77139: PPUSH
77140: LD_EXP 119
77144: PUSH
77145: LD_VAR 0 1
77149: ARRAY
77150: PPUSH
77151: LD_VAR 0 2
77155: PPUSH
77156: CALL_OW 3
77160: PPUSH
77161: CALL_OW 1
77165: ST_TO_ADDR
// end ; end ;
77166: GO 76917
77168: POP
77169: POP
// end ;
77170: GO 76835
77172: POP
77173: POP
// end ;
77174: PPOPN 4
77176: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77177: LD_INT 0
77179: PPUSH
77180: PPUSH
// result := false ;
77181: LD_ADDR_VAR 0 4
77185: PUSH
77186: LD_INT 0
77188: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77189: LD_VAR 0 1
77193: PPUSH
77194: CALL_OW 264
77198: PUSH
77199: LD_INT 81
77201: EQUAL
77202: NOT
77203: IFFALSE 77207
// exit ;
77205: GO 77447
// index := GetElementIndex ( minersList , unit ) ;
77207: LD_ADDR_VAR 0 5
77211: PUSH
77212: LD_EXP 118
77216: PPUSH
77217: LD_VAR 0 1
77221: PPUSH
77222: CALL 21849 0 2
77226: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77227: LD_EXP 119
77231: PUSH
77232: LD_VAR 0 5
77236: ARRAY
77237: PUSH
77238: LD_EXP 120
77242: GREATEREQUAL
77243: IFFALSE 77247
// exit ;
77245: GO 77447
// ComMoveXY ( unit , x , y ) ;
77247: LD_VAR 0 1
77251: PPUSH
77252: LD_VAR 0 2
77256: PPUSH
77257: LD_VAR 0 3
77261: PPUSH
77262: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77266: LD_INT 35
77268: PPUSH
77269: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77273: LD_VAR 0 1
77277: PPUSH
77278: LD_VAR 0 2
77282: PPUSH
77283: LD_VAR 0 3
77287: PPUSH
77288: CALL 53204 0 3
77292: NOT
77293: PUSH
77294: LD_VAR 0 1
77298: PPUSH
77299: CALL_OW 314
77303: AND
77304: IFFALSE 77308
// exit ;
77306: GO 77447
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77308: LD_VAR 0 2
77312: PPUSH
77313: LD_VAR 0 3
77317: PPUSH
77318: CALL_OW 428
77322: PUSH
77323: LD_VAR 0 1
77327: EQUAL
77328: PUSH
77329: LD_VAR 0 1
77333: PPUSH
77334: CALL_OW 314
77338: NOT
77339: AND
77340: IFFALSE 77266
// PlaySoundXY ( x , y , PlantMine ) ;
77342: LD_VAR 0 2
77346: PPUSH
77347: LD_VAR 0 3
77351: PPUSH
77352: LD_STRING PlantMine
77354: PPUSH
77355: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77359: LD_VAR 0 2
77363: PPUSH
77364: LD_VAR 0 3
77368: PPUSH
77369: LD_VAR 0 1
77373: PPUSH
77374: CALL_OW 255
77378: PPUSH
77379: LD_INT 0
77381: PPUSH
77382: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77386: LD_ADDR_EXP 119
77390: PUSH
77391: LD_EXP 119
77395: PPUSH
77396: LD_VAR 0 5
77400: PUSH
77401: LD_EXP 119
77405: PUSH
77406: LD_VAR 0 5
77410: ARRAY
77411: PUSH
77412: LD_INT 1
77414: PLUS
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PPUSH
77420: LD_VAR 0 2
77424: PUSH
77425: LD_VAR 0 3
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PPUSH
77434: CALL 22064 0 3
77438: ST_TO_ADDR
// result := true ;
77439: LD_ADDR_VAR 0 4
77443: PUSH
77444: LD_INT 1
77446: ST_TO_ADDR
// end ;
77447: LD_VAR 0 4
77451: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77452: LD_INT 0
77454: PPUSH
77455: PPUSH
77456: PPUSH
// if not unit in minersList then
77457: LD_VAR 0 1
77461: PUSH
77462: LD_EXP 118
77466: IN
77467: NOT
77468: IFFALSE 77472
// exit ;
77470: GO 77864
// index := GetElementIndex ( minersList , unit ) ;
77472: LD_ADDR_VAR 0 6
77476: PUSH
77477: LD_EXP 118
77481: PPUSH
77482: LD_VAR 0 1
77486: PPUSH
77487: CALL 21849 0 2
77491: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77492: LD_ADDR_VAR 0 5
77496: PUSH
77497: DOUBLE
77498: LD_EXP 119
77502: PUSH
77503: LD_VAR 0 6
77507: ARRAY
77508: INC
77509: ST_TO_ADDR
77510: LD_INT 1
77512: PUSH
77513: FOR_DOWNTO
77514: IFFALSE 77675
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77516: LD_EXP 119
77520: PUSH
77521: LD_VAR 0 6
77525: ARRAY
77526: PUSH
77527: LD_VAR 0 5
77531: ARRAY
77532: PUSH
77533: LD_INT 1
77535: ARRAY
77536: PUSH
77537: LD_VAR 0 2
77541: EQUAL
77542: PUSH
77543: LD_EXP 119
77547: PUSH
77548: LD_VAR 0 6
77552: ARRAY
77553: PUSH
77554: LD_VAR 0 5
77558: ARRAY
77559: PUSH
77560: LD_INT 2
77562: ARRAY
77563: PUSH
77564: LD_VAR 0 3
77568: EQUAL
77569: AND
77570: IFFALSE 77673
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77572: LD_EXP 119
77576: PUSH
77577: LD_VAR 0 6
77581: ARRAY
77582: PUSH
77583: LD_VAR 0 5
77587: ARRAY
77588: PUSH
77589: LD_INT 1
77591: ARRAY
77592: PPUSH
77593: LD_EXP 119
77597: PUSH
77598: LD_VAR 0 6
77602: ARRAY
77603: PUSH
77604: LD_VAR 0 5
77608: ARRAY
77609: PUSH
77610: LD_INT 2
77612: ARRAY
77613: PPUSH
77614: LD_VAR 0 1
77618: PPUSH
77619: CALL_OW 255
77623: PPUSH
77624: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77628: LD_ADDR_EXP 119
77632: PUSH
77633: LD_EXP 119
77637: PPUSH
77638: LD_VAR 0 6
77642: PPUSH
77643: LD_EXP 119
77647: PUSH
77648: LD_VAR 0 6
77652: ARRAY
77653: PPUSH
77654: LD_VAR 0 5
77658: PPUSH
77659: CALL_OW 3
77663: PPUSH
77664: CALL_OW 1
77668: ST_TO_ADDR
// exit ;
77669: POP
77670: POP
77671: GO 77864
// end ; end ;
77673: GO 77513
77675: POP
77676: POP
// for i := minerMinesList [ index ] downto 1 do
77677: LD_ADDR_VAR 0 5
77681: PUSH
77682: DOUBLE
77683: LD_EXP 119
77687: PUSH
77688: LD_VAR 0 6
77692: ARRAY
77693: INC
77694: ST_TO_ADDR
77695: LD_INT 1
77697: PUSH
77698: FOR_DOWNTO
77699: IFFALSE 77862
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77701: LD_EXP 119
77705: PUSH
77706: LD_VAR 0 6
77710: ARRAY
77711: PUSH
77712: LD_VAR 0 5
77716: ARRAY
77717: PUSH
77718: LD_INT 1
77720: ARRAY
77721: PPUSH
77722: LD_EXP 119
77726: PUSH
77727: LD_VAR 0 6
77731: ARRAY
77732: PUSH
77733: LD_VAR 0 5
77737: ARRAY
77738: PUSH
77739: LD_INT 2
77741: ARRAY
77742: PPUSH
77743: LD_VAR 0 2
77747: PPUSH
77748: LD_VAR 0 3
77752: PPUSH
77753: CALL_OW 298
77757: PUSH
77758: LD_INT 6
77760: LESS
77761: IFFALSE 77860
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77763: LD_EXP 119
77767: PUSH
77768: LD_VAR 0 6
77772: ARRAY
77773: PUSH
77774: LD_VAR 0 5
77778: ARRAY
77779: PUSH
77780: LD_INT 1
77782: ARRAY
77783: PPUSH
77784: LD_EXP 119
77788: PUSH
77789: LD_VAR 0 6
77793: ARRAY
77794: PUSH
77795: LD_VAR 0 5
77799: ARRAY
77800: PUSH
77801: LD_INT 2
77803: ARRAY
77804: PPUSH
77805: LD_VAR 0 1
77809: PPUSH
77810: CALL_OW 255
77814: PPUSH
77815: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77819: LD_ADDR_EXP 119
77823: PUSH
77824: LD_EXP 119
77828: PPUSH
77829: LD_VAR 0 6
77833: PPUSH
77834: LD_EXP 119
77838: PUSH
77839: LD_VAR 0 6
77843: ARRAY
77844: PPUSH
77845: LD_VAR 0 5
77849: PPUSH
77850: CALL_OW 3
77854: PPUSH
77855: CALL_OW 1
77859: ST_TO_ADDR
// end ; end ;
77860: GO 77698
77862: POP
77863: POP
// end ;
77864: LD_VAR 0 4
77868: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77869: LD_INT 0
77871: PPUSH
77872: PPUSH
77873: PPUSH
77874: PPUSH
77875: PPUSH
77876: PPUSH
77877: PPUSH
77878: PPUSH
77879: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77880: LD_VAR 0 1
77884: PPUSH
77885: CALL_OW 264
77889: PUSH
77890: LD_INT 81
77892: EQUAL
77893: NOT
77894: PUSH
77895: LD_VAR 0 1
77899: PUSH
77900: LD_EXP 118
77904: IN
77905: NOT
77906: OR
77907: IFFALSE 77911
// exit ;
77909: GO 78233
// index := GetElementIndex ( minersList , unit ) ;
77911: LD_ADDR_VAR 0 6
77915: PUSH
77916: LD_EXP 118
77920: PPUSH
77921: LD_VAR 0 1
77925: PPUSH
77926: CALL 21849 0 2
77930: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77931: LD_ADDR_VAR 0 8
77935: PUSH
77936: LD_EXP 120
77940: PUSH
77941: LD_EXP 119
77945: PUSH
77946: LD_VAR 0 6
77950: ARRAY
77951: MINUS
77952: ST_TO_ADDR
// if not minesFreeAmount then
77953: LD_VAR 0 8
77957: NOT
77958: IFFALSE 77962
// exit ;
77960: GO 78233
// tmp := [ ] ;
77962: LD_ADDR_VAR 0 7
77966: PUSH
77967: EMPTY
77968: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77969: LD_ADDR_VAR 0 5
77973: PUSH
77974: DOUBLE
77975: LD_INT 1
77977: DEC
77978: ST_TO_ADDR
77979: LD_VAR 0 8
77983: PUSH
77984: FOR_TO
77985: IFFALSE 78180
// begin _d := rand ( 0 , 5 ) ;
77987: LD_ADDR_VAR 0 11
77991: PUSH
77992: LD_INT 0
77994: PPUSH
77995: LD_INT 5
77997: PPUSH
77998: CALL_OW 12
78002: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
78003: LD_ADDR_VAR 0 12
78007: PUSH
78008: LD_INT 2
78010: PPUSH
78011: LD_INT 6
78013: PPUSH
78014: CALL_OW 12
78018: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78019: LD_ADDR_VAR 0 9
78023: PUSH
78024: LD_VAR 0 2
78028: PPUSH
78029: LD_VAR 0 11
78033: PPUSH
78034: LD_VAR 0 12
78038: PPUSH
78039: CALL_OW 272
78043: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78044: LD_ADDR_VAR 0 10
78048: PUSH
78049: LD_VAR 0 3
78053: PPUSH
78054: LD_VAR 0 11
78058: PPUSH
78059: LD_VAR 0 12
78063: PPUSH
78064: CALL_OW 273
78068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78069: LD_VAR 0 9
78073: PPUSH
78074: LD_VAR 0 10
78078: PPUSH
78079: CALL_OW 488
78083: PUSH
78084: LD_VAR 0 9
78088: PUSH
78089: LD_VAR 0 10
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: LD_VAR 0 7
78102: IN
78103: NOT
78104: AND
78105: PUSH
78106: LD_VAR 0 9
78110: PPUSH
78111: LD_VAR 0 10
78115: PPUSH
78116: CALL_OW 458
78120: NOT
78121: AND
78122: IFFALSE 78164
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78124: LD_ADDR_VAR 0 7
78128: PUSH
78129: LD_VAR 0 7
78133: PPUSH
78134: LD_VAR 0 7
78138: PUSH
78139: LD_INT 1
78141: PLUS
78142: PPUSH
78143: LD_VAR 0 9
78147: PUSH
78148: LD_VAR 0 10
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PPUSH
78157: CALL_OW 1
78161: ST_TO_ADDR
78162: GO 78178
// i := i - 1 ;
78164: LD_ADDR_VAR 0 5
78168: PUSH
78169: LD_VAR 0 5
78173: PUSH
78174: LD_INT 1
78176: MINUS
78177: ST_TO_ADDR
// end ;
78178: GO 77984
78180: POP
78181: POP
// for i in tmp do
78182: LD_ADDR_VAR 0 5
78186: PUSH
78187: LD_VAR 0 7
78191: PUSH
78192: FOR_IN
78193: IFFALSE 78231
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78195: LD_VAR 0 1
78199: PPUSH
78200: LD_VAR 0 5
78204: PUSH
78205: LD_INT 1
78207: ARRAY
78208: PPUSH
78209: LD_VAR 0 5
78213: PUSH
78214: LD_INT 2
78216: ARRAY
78217: PPUSH
78218: CALL 77177 0 3
78222: NOT
78223: IFFALSE 78229
// exit ;
78225: POP
78226: POP
78227: GO 78233
78229: GO 78192
78231: POP
78232: POP
// end ;
78233: LD_VAR 0 4
78237: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78238: LD_INT 0
78240: PPUSH
78241: PPUSH
78242: PPUSH
78243: PPUSH
78244: PPUSH
78245: PPUSH
78246: PPUSH
// if not GetClass ( unit ) = class_sniper then
78247: LD_VAR 0 1
78251: PPUSH
78252: CALL_OW 257
78256: PUSH
78257: LD_INT 5
78259: EQUAL
78260: NOT
78261: IFFALSE 78265
// exit ;
78263: GO 78653
// dist := 8 ;
78265: LD_ADDR_VAR 0 5
78269: PUSH
78270: LD_INT 8
78272: ST_TO_ADDR
// viewRange := 12 ;
78273: LD_ADDR_VAR 0 7
78277: PUSH
78278: LD_INT 12
78280: ST_TO_ADDR
// side := GetSide ( unit ) ;
78281: LD_ADDR_VAR 0 6
78285: PUSH
78286: LD_VAR 0 1
78290: PPUSH
78291: CALL_OW 255
78295: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78296: LD_INT 61
78298: PPUSH
78299: LD_VAR 0 6
78303: PPUSH
78304: CALL_OW 321
78308: PUSH
78309: LD_INT 2
78311: EQUAL
78312: IFFALSE 78322
// viewRange := 16 ;
78314: LD_ADDR_VAR 0 7
78318: PUSH
78319: LD_INT 16
78321: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78322: LD_VAR 0 1
78326: PPUSH
78327: LD_VAR 0 2
78331: PPUSH
78332: LD_VAR 0 3
78336: PPUSH
78337: CALL_OW 297
78341: PUSH
78342: LD_VAR 0 5
78346: GREATER
78347: IFFALSE 78426
// begin ComMoveXY ( unit , x , y ) ;
78349: LD_VAR 0 1
78353: PPUSH
78354: LD_VAR 0 2
78358: PPUSH
78359: LD_VAR 0 3
78363: PPUSH
78364: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78368: LD_INT 35
78370: PPUSH
78371: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78375: LD_VAR 0 1
78379: PPUSH
78380: LD_VAR 0 2
78384: PPUSH
78385: LD_VAR 0 3
78389: PPUSH
78390: CALL 53204 0 3
78394: NOT
78395: IFFALSE 78399
// exit ;
78397: GO 78653
// until GetDistUnitXY ( unit , x , y ) < dist ;
78399: LD_VAR 0 1
78403: PPUSH
78404: LD_VAR 0 2
78408: PPUSH
78409: LD_VAR 0 3
78413: PPUSH
78414: CALL_OW 297
78418: PUSH
78419: LD_VAR 0 5
78423: LESS
78424: IFFALSE 78368
// end ; ComTurnXY ( unit , x , y ) ;
78426: LD_VAR 0 1
78430: PPUSH
78431: LD_VAR 0 2
78435: PPUSH
78436: LD_VAR 0 3
78440: PPUSH
78441: CALL_OW 118
// wait ( 5 ) ;
78445: LD_INT 5
78447: PPUSH
78448: CALL_OW 67
// _d := GetDir ( unit ) ;
78452: LD_ADDR_VAR 0 10
78456: PUSH
78457: LD_VAR 0 1
78461: PPUSH
78462: CALL_OW 254
78466: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78467: LD_ADDR_VAR 0 8
78471: PUSH
78472: LD_VAR 0 1
78476: PPUSH
78477: CALL_OW 250
78481: PPUSH
78482: LD_VAR 0 10
78486: PPUSH
78487: LD_VAR 0 5
78491: PPUSH
78492: CALL_OW 272
78496: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78497: LD_ADDR_VAR 0 9
78501: PUSH
78502: LD_VAR 0 1
78506: PPUSH
78507: CALL_OW 251
78511: PPUSH
78512: LD_VAR 0 10
78516: PPUSH
78517: LD_VAR 0 5
78521: PPUSH
78522: CALL_OW 273
78526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78527: LD_VAR 0 8
78531: PPUSH
78532: LD_VAR 0 9
78536: PPUSH
78537: CALL_OW 488
78541: NOT
78542: IFFALSE 78546
// exit ;
78544: GO 78653
// ComAnimCustom ( unit , 1 ) ;
78546: LD_VAR 0 1
78550: PPUSH
78551: LD_INT 1
78553: PPUSH
78554: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78558: LD_VAR 0 8
78562: PPUSH
78563: LD_VAR 0 9
78567: PPUSH
78568: LD_VAR 0 6
78572: PPUSH
78573: LD_VAR 0 7
78577: PPUSH
78578: CALL_OW 330
// repeat wait ( 1 ) ;
78582: LD_INT 1
78584: PPUSH
78585: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78589: LD_VAR 0 1
78593: PPUSH
78594: CALL_OW 316
78598: PUSH
78599: LD_VAR 0 1
78603: PPUSH
78604: CALL_OW 314
78608: OR
78609: PUSH
78610: LD_VAR 0 1
78614: PPUSH
78615: CALL_OW 302
78619: NOT
78620: OR
78621: PUSH
78622: LD_VAR 0 1
78626: PPUSH
78627: CALL_OW 301
78631: OR
78632: IFFALSE 78582
// RemoveSeeing ( _x , _y , side ) ;
78634: LD_VAR 0 8
78638: PPUSH
78639: LD_VAR 0 9
78643: PPUSH
78644: LD_VAR 0 6
78648: PPUSH
78649: CALL_OW 331
// end ; end_of_file
78653: LD_VAR 0 4
78657: RET
